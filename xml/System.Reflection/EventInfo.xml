<Type Name="EventInfo" FullName="System.Reflection.EventInfo">
  <Metadata><Meta Name="ms.openlocfilehash" Value="967f4e525a3181b64f1a055cdf367a43c48f57e1" /><Meta Name="ms.sourcegitcommit" Value="adc8598fd19d91438cacaa8fa7ce613e28c8218e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="12/11/2018" /><Meta Name="ms.locfileid" Value="53226733" /></Metadata><TypeSignature Language="C#" Value="public abstract class EventInfo : System.Reflection.MemberInfo, System.Runtime.InteropServices._EventInfo" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi abstract serializable beforefieldinit EventInfo extends System.Reflection.MemberInfo implements class System.Runtime.InteropServices._EventInfo" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.EventInfo" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class EventInfo&#xA;Inherits MemberInfo&#xA;Implements _EventInfo" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventInfo abstract : System::Reflection::MemberInfo, System::Runtime::InteropServices::_EventInfo" />
  <TypeSignature Language="F#" Value="type EventInfo = class&#xA;    inherit MemberInfo&#xA;    interface _EventInfo" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Reflection.MemberInfo</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.InteropServices._EventInfo</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._EventInfo))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="a23d8-101">探索事件的屬性並提供事件中繼資料的存取。</span><span class="sxs-lookup"><span data-stu-id="a23d8-101">Discovers the attributes of an event and provides access to event metadata.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a23d8-102">使用<xref:System.Reflection.EventInfo>類別檢查事件，並連結事件處理常式，如中的範例程式碼所示<xref:System.Reflection.EventInfo.AddEventHandler%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="a23d8-102">Use the <xref:System.Reflection.EventInfo> class to inspect events and to hook up event handlers, as shown in the example code for the <xref:System.Reflection.EventInfo.AddEventHandler%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a23d8-103"><xref:System.Reflection.EventInfo> 不是用來引發事件。</span><span class="sxs-lookup"><span data-stu-id="a23d8-103"><xref:System.Reflection.EventInfo> is not intended to be used to raise events.</span></span> <span data-ttu-id="a23d8-104">物件會引發事件，即會依照其內部狀態。</span><span class="sxs-lookup"><span data-stu-id="a23d8-104">An object raises events as dictated by its internal state.</span></span>  
  
 <span data-ttu-id="a23d8-105">事件可使用委派。</span><span class="sxs-lookup"><span data-stu-id="a23d8-105">Events are used with delegates.</span></span> <span data-ttu-id="a23d8-106">事件接聽程式具現化時引發事件的事件來源叫用事件處理常式委派。</span><span class="sxs-lookup"><span data-stu-id="a23d8-106">An event listener instantiates an event-handler delegate that is invoked whenever the event is raised by an event source.</span></span> <span data-ttu-id="a23d8-107">若要連接至事件來源，事件接聽程式會將這個委派加入至來源的引動過程清單。</span><span class="sxs-lookup"><span data-stu-id="a23d8-107">In order to connect to the event source, the event listener adds this delegate to the invocation list on the source.</span></span> <span data-ttu-id="a23d8-108">當引發事件時，會呼叫事件處理常式委派的叫用方法。</span><span class="sxs-lookup"><span data-stu-id="a23d8-108">When the event is raised, the invoke method of the event-handler delegate is called.</span></span> <span data-ttu-id="a23d8-109">支援兩個多點傳送與單點傳送事件通知。</span><span class="sxs-lookup"><span data-stu-id="a23d8-109">Both multicast and single-cast event notifications are supported.</span></span> <span data-ttu-id="a23d8-110">`Add`和`Remove`中繼資料中，則必須標示方法，以及與事件相關聯的事件處理常式委派類別。</span><span class="sxs-lookup"><span data-stu-id="a23d8-110">The `Add` and `Remove` methods, as well as the event-handler delegate class associated with an event, must be marked in the metadata.</span></span>  
  
 <span data-ttu-id="a23d8-111">委派是物件導向的函式指標。</span><span class="sxs-lookup"><span data-stu-id="a23d8-111">Delegates are object-oriented function pointers.</span></span> <span data-ttu-id="a23d8-112">在 C 或 c + + 中，函式指標是一種方法的參考。</span><span class="sxs-lookup"><span data-stu-id="a23d8-112">In C or C++, a function pointer is a reference to a method.</span></span> <span data-ttu-id="a23d8-113">相較於 C 或 c + + 函式指標，委派會包含兩個參考︰ 方法和支援方法的物件參考的參考。</span><span class="sxs-lookup"><span data-stu-id="a23d8-113">In contrast to the C or C++ function pointer, a delegate contains two references: a reference to a method and a reference to an object that supports the method.</span></span> <span data-ttu-id="a23d8-114">委派可以叫用方法，而不需要知道類別類型宣告或繼承的方法。</span><span class="sxs-lookup"><span data-stu-id="a23d8-114">Delegates can invoke a method without knowing the class type that declares or inherits the method.</span></span> <span data-ttu-id="a23d8-115">委派只需要知道方法的傳回型別和參數清單。</span><span class="sxs-lookup"><span data-stu-id="a23d8-115">Delegates need only know the return type and parameter list of the method.</span></span>  
  
 <span data-ttu-id="a23d8-116">事件模型同樣適用於單點傳送和多點傳送委派。</span><span class="sxs-lookup"><span data-stu-id="a23d8-116">The event model works equally well for single-cast and multicast delegates.</span></span> <span data-ttu-id="a23d8-117">委派的叫用時呼叫方法時，只有單一物件會有在其上呼叫的方法。</span><span class="sxs-lookup"><span data-stu-id="a23d8-117">When the delegate's invoke method is called, only a single object will have a method called on it.</span></span> <span data-ttu-id="a23d8-118">多點傳送的修飾詞可以套用至委派的宣告，可讓多個呼叫委派的叫用方法時要呼叫的方法。</span><span class="sxs-lookup"><span data-stu-id="a23d8-118">A multicast modifier can be applied to a delegate declaration, which allows multiple methods to be called when the invoke method of the delegate is called.</span></span>  
  
 <span data-ttu-id="a23d8-119">呼叫<xref:System.Reflection.ICustomAttributeProvider.GetCustomAttributes%2A?displayProperty=nameWithType>上`EventInfo`當`inherit`參數`GetCustomAttributes`是`true`不要走的型別階層。</span><span class="sxs-lookup"><span data-stu-id="a23d8-119">Calling <xref:System.Reflection.ICustomAttributeProvider.GetCustomAttributes%2A?displayProperty=nameWithType> on `EventInfo` when the `inherit` parameter of `GetCustomAttributes` is `true` does not walk the type hierarchy.</span></span> <span data-ttu-id="a23d8-120">使用<xref:System.Attribute?displayProperty=nameWithType>繼承自訂屬性。</span><span class="sxs-lookup"><span data-stu-id="a23d8-120">Use <xref:System.Attribute?displayProperty=nameWithType> to inherit custom attributes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a23d8-121">下列程式碼會取得<xref:System.Reflection.EventInfo>物件<xref:System.Windows.Forms.Control.Click>事件的<xref:System.Windows.Forms.Button>類別。</span><span class="sxs-lookup"><span data-stu-id="a23d8-121">The following code gets an <xref:System.Reflection.EventInfo> object for the <xref:System.Windows.Forms.Control.Click> event of the <xref:System.Windows.Forms.Button> class.</span></span>  
  
 [!code-cpp[type_getevent1#1](~/samples/snippets/cpp/VS_Snippets_CLR/type_getevent1/CPP/type_getevent1.cpp#1)]
 [!code-csharp[type_getevent1#1](~/samples/snippets/csharp/VS_Snippets_CLR/type_getevent1/CS/type_getevent1.cs#1)]
 [!code-vb[type_getevent1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/type_getevent1/VB/type_getevent1.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand"><span data-ttu-id="a23d8-122">針對繼承者完全信任。</span><span class="sxs-lookup"><span data-stu-id="a23d8-122">for full trust for inheritors.</span></span> <span data-ttu-id="a23d8-123">這個類別無法繼承由部分信任的程式碼。</span><span class="sxs-lookup"><span data-stu-id="a23d8-123">This class cannot be inherited by partially trusted code.</span></span></permission>
    <threadsafe><span data-ttu-id="a23d8-124">此型別具備執行緒安全。</span><span class="sxs-lookup"><span data-stu-id="a23d8-124">This type is thread safe.</span></span></threadsafe>
    <block subset="none" type="overrides"><para><span data-ttu-id="a23d8-125">當您繼承自<see langword="EventInfo" />，您必須覆寫下列成員： <see cref="M:System.Reflection.EventInfo.GetAddMethod(System.Boolean)" />， <see cref="M:System.Reflection.EventInfo.GetRemoveMethod(System.Boolean)" />，和<see cref="M:System.Reflection.EventInfo.GetRaiseMethod(System.Boolean)" />。</span><span class="sxs-lookup"><span data-stu-id="a23d8-125">When you inherit from <see langword="EventInfo" />, you must override the following members: <see cref="M:System.Reflection.EventInfo.GetAddMethod(System.Boolean)" />, <see cref="M:System.Reflection.EventInfo.GetRemoveMethod(System.Boolean)" />, and <see cref="M:System.Reflection.EventInfo.GetRaiseMethod(System.Boolean)" />.</span></span></para></block>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected EventInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; EventInfo();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a23d8-126">初始化 <see langword="EventInfo" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="a23d8-126">Initializes a new instance of the <see langword="EventInfo" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="a23d8-127">當叫用晚期繫結機制透過例如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span><span class="sxs-lookup"><span data-stu-id="a23d8-127">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="a23d8-128">關聯的列舉型別：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span><span class="sxs-lookup"><span data-stu-id="a23d8-128">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="AddEventHandler">
      <MemberSignature Language="C#" Value="public virtual void AddEventHandler (object target, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddEventHandler(object target, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddEventHandler (target As Object, handler As Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddEventHandler(System::Object ^ target, Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="abstract member AddEventHandler : obj * Delegate -&gt; unit&#xA;override this.AddEventHandler : obj * Delegate -&gt; unit" Usage="eventInfo.AddEventHandler (target, handler)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.AddEventHandler(System.Object,System.Delegate)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="a23d8-129">事件的來源。</span><span class="sxs-lookup"><span data-stu-id="a23d8-129">The event source.</span></span></param>
        <param name="handler"><span data-ttu-id="a23d8-130">封裝要在目標引發事件時叫用的一或多個方法。</span><span class="sxs-lookup"><span data-stu-id="a23d8-130">Encapsulates a method or methods to be invoked when the event is raised by the target.</span></span></param>
        <summary><span data-ttu-id="a23d8-131">將事件處理常式加入至事件來源。</span><span class="sxs-lookup"><span data-stu-id="a23d8-131">Adds an event handler to an event source.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a23d8-132">這個方法會嘗試將同步處理目標物件上的事件委派。</span><span class="sxs-lookup"><span data-stu-id="a23d8-132">This method attempts to add a delegate to synchronize the event on the target object.</span></span>  
  
 <span data-ttu-id="a23d8-133">每次的 target 參數，會引發事件的方法或處理常式所封裝的方法會叫用。</span><span class="sxs-lookup"><span data-stu-id="a23d8-133">Each time the event is raised by the target parameter, the method or methods encapsulated by the handler are invoked.</span></span>  
  
<span data-ttu-id="a23d8-134">您可以使用`AddEventHander`方法之後已編譯程式，不可以使用 C# + = 語法或 Visual Basic 時，載入的類型時`WithEvents`和`Handles`連結事件的關鍵字。</span><span class="sxs-lookup"><span data-stu-id="a23d8-134">You might use the `AddEventHander` method when you load a type after the program is already compiled, when it is not possible to use the C# += syntax or the Visual Basic `WithEvents` and `Handles` keywords to hook up the event.</span></span>   
  
## Examples  
 <span data-ttu-id="a23d8-135">下列範例建立的執行個體<xref:System.Timers.Timer?displayProperty=nameWithType>類別建立事件處理常式使用的動態組件，以及動態事件處理常式會連結。</span><span class="sxs-lookup"><span data-stu-id="a23d8-135">The following example creates an instance of the <xref:System.Timers.Timer?displayProperty=nameWithType> class, creates an event handler using a dynamic assembly, and hooks up the dynamic event handler.</span></span> <span data-ttu-id="a23d8-136">所有的動作會執行使用晚期繫結。</span><span class="sxs-lookup"><span data-stu-id="a23d8-136">All actions are performed using late binding.</span></span>  
  
 <span data-ttu-id="a23d8-137"><xref:System.Timers.Timer>執行個體儲存在變數中的型別<xref:System.Object>，以及存取的所有程式碼<xref:System.Timers.Timer>會因此晚期繫結。</span><span class="sxs-lookup"><span data-stu-id="a23d8-137">The <xref:System.Timers.Timer> instance is stored in a variable of type <xref:System.Object>, and all code that accesses the <xref:System.Timers.Timer> does so late-bound.</span></span> <span data-ttu-id="a23d8-138">此範例會使用<xref:System.Type.GetEvent%2A?displayProperty=nameWithType>方法來取得<xref:System.Timers.Timer.Elapsed>事件，而<xref:System.Reflection.EventInfo.EventHandlerType%2A>屬性來取得事件的委派型別。</span><span class="sxs-lookup"><span data-stu-id="a23d8-138">The example uses the <xref:System.Type.GetEvent%2A?displayProperty=nameWithType> method to get the <xref:System.Timers.Timer.Elapsed> event, and the <xref:System.Reflection.EventInfo.EventHandlerType%2A> property to get the delegate type for the event.</span></span>  
  
 <span data-ttu-id="a23d8-139">此範例會取得<xref:System.Reflection.MethodInfo>for`Invoke`方法的委派類型，並取得從委派簽章<xref:System.Reflection.MethodInfo>執行個體。</span><span class="sxs-lookup"><span data-stu-id="a23d8-139">The example gets a <xref:System.Reflection.MethodInfo> for the `Invoke` method of the delegate type and obtains the signature of the delegate from the <xref:System.Reflection.MethodInfo> instance.</span></span> <span data-ttu-id="a23d8-140">這個範例會建立動態組件包含名為單一類型的一個模組`Handler`，並提供型別`static`方法 (`Shared`在 Visual Basic 中的方法) 名為`DynamicHandler`處理事件。</span><span class="sxs-lookup"><span data-stu-id="a23d8-140">The example then creates a dynamic assembly with one module containing a single type named `Handler` and gives the type a `static` method (`Shared` method in Visual Basic) named `DynamicHandler` that handles the event.</span></span>  
  
 <span data-ttu-id="a23d8-141">建立動態型別之後，此範例會取得<xref:System.Reflection.MethodInfo>完成的方法並使用它來建立委派執行個體。</span><span class="sxs-lookup"><span data-stu-id="a23d8-141">After the dynamic type is created, the example gets a <xref:System.Reflection.MethodInfo> for the finished method and uses it to create a delegate instance.</span></span> <span data-ttu-id="a23d8-142">這個執行個體傳遞至<xref:System.Reflection.EventInfo.AddEventHandler%2A>連結事件的方法。</span><span class="sxs-lookup"><span data-stu-id="a23d8-142">This instance is passed to the <xref:System.Reflection.EventInfo.AddEventHandler%2A> method to hook up the event.</span></span> <span data-ttu-id="a23d8-143">程式便會暫停，以允許引發事件。</span><span class="sxs-lookup"><span data-stu-id="a23d8-143">The program then pauses to allow the event to be raised.</span></span>  
  
 [!code-csharp[AddEventHandler#1](~/samples/snippets/csharp/VS_Snippets_CLR/AddEventHandler/cs/source.cs)]
 [!code-vb[AddEventHandler#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AddEventHandler/vb/source.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a23d8-144">此事件不具公用 <see langword="add" /> 存取子。</span><span class="sxs-lookup"><span data-stu-id="a23d8-144">The event does not have a public <see langword="add" /> accessor.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a23d8-145">無法使用傳入的處理常式。</span><span class="sxs-lookup"><span data-stu-id="a23d8-145">The handler that was passed in cannot be used.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><block subset="none" type="note">
            <para>  
 <span data-ttu-id="a23d8-146">在<see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx">適用於 Windows 市集應用程式的 .NET </see> 中或<see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">可攜式類別庫</see>中，改為擷取基底類別例外狀況 <see cref="T:System.MemberAccessException" />。</span><span class="sxs-lookup"><span data-stu-id="a23d8-146">In <see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx">.NET for Windows Store apps</see> or the <see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">Portable Class Library</see>, catch the base class exception, <see cref="T:System.MemberAccessException" />, instead.</span></span>  
  
</para>
          </block>  
  
 <span data-ttu-id="a23d8-147">呼叫端無權存取該成員。</span><span class="sxs-lookup"><span data-stu-id="a23d8-147">The caller does not have access permission to the member.</span></span></exception>
        <exception cref="T:System.Reflection.TargetException"><block subset="none" type="note">
            <para>  
 <span data-ttu-id="a23d8-148">在<see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx">適用於 Windows 市集應用程式的 .NET</see> 或<see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">可攜式類別庫</see>中，改為攔截 <see cref="T:System.Exception" />。</span><span class="sxs-lookup"><span data-stu-id="a23d8-148">In <see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx">.NET for Windows Store apps</see> or the <see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">Portable Class Library</see>, catch <see cref="T:System.Exception" /> instead.</span></span>  
  
</para>
          </block>  
  
 <span data-ttu-id="a23d8-149"><paramref name="target" /> 參數是 <see langword="null" /> 且事件不是靜態的。</span><span class="sxs-lookup"><span data-stu-id="a23d8-149">The <paramref name="target" /> parameter is <see langword="null" /> and the event is not static.</span></span>  
  
<span data-ttu-id="a23d8-150">-或-</span><span class="sxs-lookup"><span data-stu-id="a23d8-150">-or-</span></span> 
<span data-ttu-id="a23d8-151">未在目標上宣告 <see cref="T:System.Reflection.EventInfo" />。</span><span class="sxs-lookup"><span data-stu-id="a23d8-151">The <see cref="T:System.Reflection.EventInfo" /> is not declared on the target.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="a23d8-152">當叫用晚期繫結機制透過例如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span><span class="sxs-lookup"><span data-stu-id="a23d8-152">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="a23d8-153">關聯的列舉型別：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span><span class="sxs-lookup"><span data-stu-id="a23d8-153">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.Delegate" />
        <altmember cref="T:System.EventHandler" />
      </Docs>
    </Member>
    <Member MemberName="AddMethod">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodInfo AddMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MethodInfo AddMethod" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.EventInfo.AddMethod" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property AddMethod As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MethodInfo ^ AddMethod { System::Reflection::MethodInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AddMethod : System.Reflection.MethodInfo" Usage="System.Reflection.EventInfo.AddMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a23d8-154">取得事件之 <see cref="T:System.Reflection.MethodInfo" /> 方法 (包括非公用方法) 的 <see cref="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)" /> 物件。</span><span class="sxs-lookup"><span data-stu-id="a23d8-154">Gets the <see cref="T:System.Reflection.MethodInfo" /> object for the <see cref="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)" /> method of the event, including non-public methods.</span></span></summary>
        <value><span data-ttu-id="a23d8-155"><see cref="T:System.Reflection.MethodInfo" /> 方法的 <see cref="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)" /> 物件。</span><span class="sxs-lookup"><span data-stu-id="a23d8-155">The <see cref="T:System.Reflection.MethodInfo" /> object for the <see cref="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)" /> method.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a23d8-156">這個屬性就相當於呼叫<xref:System.Reflection.EventInfo.GetAddMethod%2A>值為`true`。</span><span class="sxs-lookup"><span data-stu-id="a23d8-156">This property is the equivalent of calling the <xref:System.Reflection.EventInfo.GetAddMethod%2A> with a value of `true`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.EventAttributes Attributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.EventAttributes Attributes" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.EventInfo.Attributes" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Attributes As EventAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Reflection::EventAttributes Attributes { System::Reflection::EventAttributes get(); };" />
      <MemberSignature Language="F#" Value="member this.Attributes : System.Reflection.EventAttributes" Usage="System.Reflection.EventInfo.Attributes" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._EventInfo.Attributes</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a23d8-157">取得這個事件的屬性。</span><span class="sxs-lookup"><span data-stu-id="a23d8-157">Gets the attributes for this event.</span></span></summary>
        <value><span data-ttu-id="a23d8-158">這個事件的唯讀屬性。</span><span class="sxs-lookup"><span data-stu-id="a23d8-158">The read-only attributes for this event.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a23d8-159">屬性會傳回 4 位元組的整數，代表為這個執行個體所反映之事件的屬性的點陣圖。</span><span class="sxs-lookup"><span data-stu-id="a23d8-159">The attributes are returned in a 4-byte integer representing a bitmap of the attributes set for the event reflected by this instance.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="eventInfo.Equals obj" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.Equals(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="a23d8-160">與這個執行個體相比較的物件，或 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a23d8-160">An object to compare with this instance, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="a23d8-161">傳回值，這個值指出此執行個體是否與指定的物件相等。</span><span class="sxs-lookup"><span data-stu-id="a23d8-161">Returns a value that indicates whether this instance is equal to a specified object.</span></span></summary>
        <returns><span data-ttu-id="a23d8-162">如果 <see langword="true" /> 和這個執行個體具有相同的類型和值，則為 <paramref name="obj" />否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a23d8-162"><see langword="true" /> if <paramref name="obj" /> equals the type and value of this instance; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EventHandlerType">
      <MemberSignature Language="C#" Value="public virtual Type EventHandlerType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type EventHandlerType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.EventInfo.EventHandlerType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property EventHandlerType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ EventHandlerType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.EventHandlerType : Type" Usage="System.Reflection.EventInfo.EventHandlerType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._EventInfo.EventHandlerType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a23d8-163">取得與這個事件相關之目前的事件處理常式委派之 <see langword="Type" /> 物件。</span><span class="sxs-lookup"><span data-stu-id="a23d8-163">Gets the <see langword="Type" /> object of the underlying event-handler delegate associated with this event.</span></span></summary>
        <value><span data-ttu-id="a23d8-164">表示委派事件處理常式的唯讀 <see langword="Type" /> 物件。</span><span class="sxs-lookup"><span data-stu-id="a23d8-164">A read-only <see langword="Type" /> object representing the delegate event handler.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="a23d8-165">下列範例會使用<xref:System.Reflection.EventInfo.EventHandlerType%2A>屬性探索事件的委派類型，並顯示其參數型別。</span><span class="sxs-lookup"><span data-stu-id="a23d8-165">The following example uses the <xref:System.Reflection.EventInfo.EventHandlerType%2A> property to discover the delegate type of an event and to display its parameter types.</span></span>  
  
 <span data-ttu-id="a23d8-166">此範例會定義名為委派`MyDelegate`和名為事件`ev`型別的`MyDelegate`。</span><span class="sxs-lookup"><span data-stu-id="a23d8-166">The example defines a delegate named `MyDelegate` and an event named `ev` of type `MyDelegate`.</span></span> <span data-ttu-id="a23d8-167">中的程式碼`Main`方法會藉由取得事件的委派類型，來探索事件簽章取得`Invoke`的委派類型，然後擷取並顯示參數的方法。</span><span class="sxs-lookup"><span data-stu-id="a23d8-167">The code in the `Main` method discovers the event signature by getting the delegate type of the event, getting the `Invoke` method of the delegate type, and then retrieving and displaying the parameters.</span></span>  
  
 [!code-cpp[eventarg#1](~/samples/snippets/cpp/VS_Snippets_CLR/EventArg/CPP/eventarg.cpp#1)]
 [!code-csharp[eventarg#1](~/samples/snippets/csharp/VS_Snippets_CLR/EventArg/CS/eventarg.cs#1)]
 [!code-vb[eventarg#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventArg/VB/eventarg.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="a23d8-168">呼叫端沒有必要的權限。</span><span class="sxs-lookup"><span data-stu-id="a23d8-168">The caller does not have the required permission.</span></span></exception>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.Delegate" />
        <altmember cref="T:System.EventHandler" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAddMethod">
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a23d8-169">傳回用來將事件處理常式委派加入至事件來源的方法。</span><span class="sxs-lookup"><span data-stu-id="a23d8-169">Returns the method used to add an event handler delegate to the event source.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAddMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetAddMethod ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetAddMethod() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.GetAddMethod" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAddMethod () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetAddMethod();" />
      <MemberSignature Language="F#" Value="abstract member GetAddMethod : unit -&gt; System.Reflection.MethodInfo&#xA;override this.GetAddMethod : unit -&gt; System.Reflection.MethodInfo" Usage="eventInfo.GetAddMethod " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.GetAddMethod</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a23d8-170">傳回用來將事件處理常式委派加入至事件來源的方法。</span><span class="sxs-lookup"><span data-stu-id="a23d8-170">Returns the method used to add an event handler delegate to the event source.</span></span></summary>
        <returns><span data-ttu-id="a23d8-171"><see cref="T:System.Reflection.MethodInfo" /> 物件，代表用來將事件處理常式委派加入至事件來源的方法。</span><span class="sxs-lookup"><span data-stu-id="a23d8-171">A <see cref="T:System.Reflection.MethodInfo" /> object representing the method used to add an event handler delegate to the event source.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a23d8-172">`GetAddMethod` 初始化，並將事件訂閱方法。</span><span class="sxs-lookup"><span data-stu-id="a23d8-172">`GetAddMethod` initializes and adds the event subscribe method.</span></span> <span data-ttu-id="a23d8-173">`AddEventHandler`方法用來將事件處理常式委派加入至事件來源的引動過程清單。</span><span class="sxs-lookup"><span data-stu-id="a23d8-173">The `AddEventHandler` method is used to add an event-handler delegate to the invocation list of an event source.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a23d8-174">通常，此方法具有下列簽章：</span><span class="sxs-lookup"><span data-stu-id="a23d8-174">Typically, the method has the following signature:</span></span>  
  
```  
add_<EventName>(<EventHandlerType> handler)  
```  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="a23d8-175">當叫用晚期繫結機制透過例如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span><span class="sxs-lookup"><span data-stu-id="a23d8-175">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="a23d8-176">關聯的列舉型別：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span><span class="sxs-lookup"><span data-stu-id="a23d8-176">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="GetAddMethod">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.MethodInfo GetAddMethod (bool nonPublic);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetAddMethod(bool nonPublic) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.GetAddMethod(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetAddMethod (nonPublic As Boolean) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Reflection::MethodInfo ^ GetAddMethod(bool nonPublic);" />
      <MemberSignature Language="F#" Value="abstract member GetAddMethod : bool -&gt; System.Reflection.MethodInfo" Usage="eventInfo.GetAddMethod nonPublic" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.GetAddMethod(System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nonPublic" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="nonPublic"><span data-ttu-id="a23d8-177">如果可以傳回非公用方法，則為 <see langword="true" />；否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a23d8-177"><see langword="true" /> if non-public methods can be returned; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="a23d8-178">在衍生類別中覆寫時，針對事件的 <see cref="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)" /> 方法擷取 <see langword="MethodInfo" /> 物件，指定是否要傳回非公用方法。</span><span class="sxs-lookup"><span data-stu-id="a23d8-178">When overridden in a derived class, retrieves the <see langword="MethodInfo" /> object for the <see cref="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)" /> method of the event, specifying whether to return non-public methods.</span></span></summary>
        <returns><span data-ttu-id="a23d8-179"><see cref="T:System.Reflection.MethodInfo" /> 物件，代表用來將事件處理常式委派加入至事件來源的方法。</span><span class="sxs-lookup"><span data-stu-id="a23d8-179">A <see cref="T:System.Reflection.MethodInfo" /> object representing the method used to add an event handler delegate to the event source.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a23d8-180">`GetAddMethod`初始化，並將事件訂閱方法做為布林值。</span><span class="sxs-lookup"><span data-stu-id="a23d8-180">The `GetAddMethod` initializes and adds the event subscribe method as a Boolean value.</span></span> <span data-ttu-id="a23d8-181">`AddEventHandler`方法用來將事件處理常式委派加入至事件來源的引動過程清單。</span><span class="sxs-lookup"><span data-stu-id="a23d8-181">The `AddEventHandler` method is used to add an event-handler delegate to the invocation list of an event source.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a23d8-182">通常，此方法具有下列簽章：</span><span class="sxs-lookup"><span data-stu-id="a23d8-182">Typically, the method has the following signature:</span></span>  
  
```  
add_<EventName>(<EventHandlerType> handler)  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="a23d8-183"><paramref name="nonPublic" /> 是 <see langword="true" />、用來新增事件處理常式委派的方法為非公用的，而且呼叫端無權反映於非公用方法上。</span><span class="sxs-lookup"><span data-stu-id="a23d8-183"><paramref name="nonPublic" /> is <see langword="true" />, the method used to add an event handler delegate is non-public, and the caller does not have permission to reflect on non-public methods.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="a23d8-184">當叫用晚期繫結機制透過例如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span><span class="sxs-lookup"><span data-stu-id="a23d8-184">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="a23d8-185">關聯的列舉型別：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span><span class="sxs-lookup"><span data-stu-id="a23d8-185">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="eventInfo.GetHashCode " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.GetHashCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a23d8-186">傳回這個執行個體的雜湊碼。</span><span class="sxs-lookup"><span data-stu-id="a23d8-186">Returns the hash code for this instance.</span></span></summary>
        <returns><span data-ttu-id="a23d8-187">32 位元帶正負號的整數雜湊碼。</span><span class="sxs-lookup"><span data-stu-id="a23d8-187">A 32-bit signed integer hash code.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetOtherMethods">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a23d8-188">傳回使用 <see langword=".other" /> 指示詞與 MSIL 中的事件產生關聯的方法。</span><span class="sxs-lookup"><span data-stu-id="a23d8-188">Returns the methods that were associated with an event in MSIL using the <see langword=".other" /> directive.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetOtherMethods">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo[] GetOtherMethods ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.MethodInfo[] GetOtherMethods() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.GetOtherMethods" />
      <MemberSignature Language="VB.NET" Value="Public Function GetOtherMethods () As MethodInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::MethodInfo ^&gt; ^ GetOtherMethods();" />
      <MemberSignature Language="F#" Value="member this.GetOtherMethods : unit -&gt; System.Reflection.MethodInfo[]" Usage="eventInfo.GetOtherMethods " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a23d8-189">傳回使用 <see langword=".other" /> 指示詞與中繼資料中的事件產生關聯的公用方法。</span><span class="sxs-lookup"><span data-stu-id="a23d8-189">Returns the public methods that have been associated with an event in metadata using the <see langword=".other" /> directive.</span></span></summary>
        <returns><span data-ttu-id="a23d8-190"><see cref="T:System.Reflection.EventInfo" /> 物件的陣列，表示透過使用 <see langword=".other" /> 指示詞與中繼資料中的事件產生關聯的公用方法。</span><span class="sxs-lookup"><span data-stu-id="a23d8-190">An array of <see cref="T:System.Reflection.EventInfo" /> objects representing the public methods that have been associated with the event in metadata by using the <see langword=".other" /> directive.</span></span> <span data-ttu-id="a23d8-191">如果沒有這類公用事件，則會傳回空白陣列。</span><span class="sxs-lookup"><span data-stu-id="a23d8-191">If there are no such public methods, an empty array is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a23d8-192">事件的中繼資料可以將四種方法與事件產生關聯：</span><span class="sxs-lookup"><span data-stu-id="a23d8-192">The metadata for an event can associate four kinds of methods with the event:</span></span>  
  
-   <span data-ttu-id="a23d8-193">`.addon`指示詞會指定用來新增事件處理常式的方法。</span><span class="sxs-lookup"><span data-stu-id="a23d8-193">The `.addon` directive specifies the method used to add event handlers.</span></span> <span data-ttu-id="a23d8-194">使用<xref:System.Reflection.EventInfo.GetAddMethod%2A>方法來擷取<xref:System.Reflection.EventInfo>該方法。</span><span class="sxs-lookup"><span data-stu-id="a23d8-194">Use the <xref:System.Reflection.EventInfo.GetAddMethod%2A> method to retrieve an <xref:System.Reflection.EventInfo> for that method.</span></span>  
  
-   <span data-ttu-id="a23d8-195">`.removeon`指示詞會指定用來中斷連結事件處理常式的方法。</span><span class="sxs-lookup"><span data-stu-id="a23d8-195">The `.removeon` directive specifies the method used to detach event handlers.</span></span> <span data-ttu-id="a23d8-196">使用<xref:System.Reflection.EventInfo.GetRemoveMethod%2A>方法來擷取<xref:System.Reflection.EventInfo>該方法。</span><span class="sxs-lookup"><span data-stu-id="a23d8-196">Use the <xref:System.Reflection.EventInfo.GetRemoveMethod%2A> method to retrieve an <xref:System.Reflection.EventInfo> for that method.</span></span>  
  
-   <span data-ttu-id="a23d8-197">`.fire`指示詞會指定用來引發事件的方法。</span><span class="sxs-lookup"><span data-stu-id="a23d8-197">The `.fire` directive specifies the method used to raise the event.</span></span> <span data-ttu-id="a23d8-198">使用<xref:System.Reflection.EventInfo.GetRaiseMethod%2A>方法來擷取<xref:System.Reflection.EventInfo>該方法。</span><span class="sxs-lookup"><span data-stu-id="a23d8-198">Use the <xref:System.Reflection.EventInfo.GetRaiseMethod%2A> method to retrieve an <xref:System.Reflection.EventInfo> for that method.</span></span>  
  
-   <span data-ttu-id="a23d8-199">`.other`指示詞會指定與事件相關聯的其他任何方法。</span><span class="sxs-lookup"><span data-stu-id="a23d8-199">The `.other` directive specifies any other methods associated with the event.</span></span> <span data-ttu-id="a23d8-200">使用<xref:System.Reflection.EventInfo.GetOtherMethods%2A>方法來擷取陣列<xref:System.Reflection.EventInfo>這些方法的物件。</span><span class="sxs-lookup"><span data-stu-id="a23d8-200">Use the <xref:System.Reflection.EventInfo.GetOtherMethods%2A> method to retrieve an array of <xref:System.Reflection.EventInfo> objects for those methods.</span></span>  
  
 <span data-ttu-id="a23d8-201">使用事件相關聯的方法`.other`指示詞有執行階段沒有特殊意義。</span><span class="sxs-lookup"><span data-stu-id="a23d8-201">The methods associated with an event using the `.other` directive have no special significance to the runtime.</span></span> <span data-ttu-id="a23d8-202">不使用 C# 和 Visual Basic 編譯器`.other`指示詞。</span><span class="sxs-lookup"><span data-stu-id="a23d8-202">The C# and Visual Basic compilers do not use the `.other` directive.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOtherMethods">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodInfo[] GetOtherMethods (bool nonPublic);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo[] GetOtherMethods(bool nonPublic) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.GetOtherMethods(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetOtherMethods (nonPublic As Boolean) As MethodInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::MethodInfo ^&gt; ^ GetOtherMethods(bool nonPublic);" />
      <MemberSignature Language="F#" Value="abstract member GetOtherMethods : bool -&gt; System.Reflection.MethodInfo[]&#xA;override this.GetOtherMethods : bool -&gt; System.Reflection.MethodInfo[]" Usage="eventInfo.GetOtherMethods nonPublic" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nonPublic" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="nonPublic"><span data-ttu-id="a23d8-203"><see langword="true" /> 是表示要包括非公用方法，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a23d8-203"><see langword="true" /> to include non-public methods; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="a23d8-204">傳回使用 <see langword=".other" /> 指示詞與中繼資料中的事件產生關聯的方法，並指定是否要包括非公用方法。</span><span class="sxs-lookup"><span data-stu-id="a23d8-204">Returns the methods that have been associated with the event in metadata using the <see langword=".other" /> directive, specifying whether to include non-public methods.</span></span></summary>
        <returns><span data-ttu-id="a23d8-205"><see cref="T:System.Reflection.EventInfo" /> 物件的陣列，表示透過使用 <see langword=".other" /> 指示詞與中繼資料中的事件產生關聯的方法。</span><span class="sxs-lookup"><span data-stu-id="a23d8-205">An array of <see cref="T:System.Reflection.EventInfo" /> objects representing methods that have been associated with an event in metadata by using the <see langword=".other" /> directive.</span></span> <span data-ttu-id="a23d8-206">如果沒有符合規格的方法，則會傳回空白陣列。</span><span class="sxs-lookup"><span data-stu-id="a23d8-206">If there are no methods matching the specification, an empty array is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a23d8-207">事件的中繼資料可以將四種方法與事件產生關聯：</span><span class="sxs-lookup"><span data-stu-id="a23d8-207">The metadata for an event can associate four kinds of methods with the event:</span></span>  
  
-   <span data-ttu-id="a23d8-208">`.addon`指示詞會指定用來新增事件處理常式的方法。</span><span class="sxs-lookup"><span data-stu-id="a23d8-208">The `.addon` directive specifies the method used to add event handlers.</span></span> <span data-ttu-id="a23d8-209">使用<xref:System.Reflection.EventInfo.GetAddMethod%2A>方法來擷取<xref:System.Reflection.EventInfo>該方法。</span><span class="sxs-lookup"><span data-stu-id="a23d8-209">Use the <xref:System.Reflection.EventInfo.GetAddMethod%2A> method to retrieve an <xref:System.Reflection.EventInfo> for that method.</span></span>  
  
-   <span data-ttu-id="a23d8-210">`.removeon`指示詞會指定用來中斷連結事件處理常式的方法。</span><span class="sxs-lookup"><span data-stu-id="a23d8-210">The `.removeon` directive specifies the method used to detach event handlers.</span></span> <span data-ttu-id="a23d8-211">使用<xref:System.Reflection.EventInfo.GetRemoveMethod%2A>方法來擷取<xref:System.Reflection.EventInfo>這個方法。</span><span class="sxs-lookup"><span data-stu-id="a23d8-211">Use the <xref:System.Reflection.EventInfo.GetRemoveMethod%2A> method to retrieve an <xref:System.Reflection.EventInfo> for this method.</span></span>  
  
-   <span data-ttu-id="a23d8-212">`.fire`指示詞會指定用來引發事件的方法。</span><span class="sxs-lookup"><span data-stu-id="a23d8-212">The `.fire` directive specifies the method used to raise the event.</span></span> <span data-ttu-id="a23d8-213">使用<xref:System.Reflection.EventInfo.GetRaiseMethod%2A>方法來擷取<xref:System.Reflection.EventInfo>這個方法。</span><span class="sxs-lookup"><span data-stu-id="a23d8-213">Use the <xref:System.Reflection.EventInfo.GetRaiseMethod%2A> method to retrieve an <xref:System.Reflection.EventInfo> for this method.</span></span>  
  
-   <span data-ttu-id="a23d8-214">`.other`指示詞會指定與事件相關聯的其他任何方法。</span><span class="sxs-lookup"><span data-stu-id="a23d8-214">The `.other` directive specifies any other methods associated with the event.</span></span> <span data-ttu-id="a23d8-215">使用<xref:System.Reflection.EventInfo.GetOtherMethods%2A>方法來擷取陣列<xref:System.Reflection.EventInfo>這些方法的物件。</span><span class="sxs-lookup"><span data-stu-id="a23d8-215">Use the <xref:System.Reflection.EventInfo.GetOtherMethods%2A> method to retrieve an array of <xref:System.Reflection.EventInfo> objects for those methods.</span></span>  
  
 <span data-ttu-id="a23d8-216">使用事件相關聯的方法`.other`指示詞有執行階段沒有特殊意義。</span><span class="sxs-lookup"><span data-stu-id="a23d8-216">The methods associated with an event using the `.other` directive have no special significance to the runtime.</span></span> <span data-ttu-id="a23d8-217">不使用 C# 和 Visual Basic 編譯器`.other`指示詞。</span><span class="sxs-lookup"><span data-stu-id="a23d8-217">The C# and Visual Basic compilers do not use the `.other` directive.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="a23d8-218">這個方法尚未實作。</span><span class="sxs-lookup"><span data-stu-id="a23d8-218">This method is not implemented.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetRaiseMethod">
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a23d8-219">傳回引發事件時所呼叫的方法。</span><span class="sxs-lookup"><span data-stu-id="a23d8-219">Returns the method that is called when the event is raised.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetRaiseMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetRaiseMethod ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetRaiseMethod() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.GetRaiseMethod" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRaiseMethod () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetRaiseMethod();" />
      <MemberSignature Language="F#" Value="abstract member GetRaiseMethod : unit -&gt; System.Reflection.MethodInfo&#xA;override this.GetRaiseMethod : unit -&gt; System.Reflection.MethodInfo" Usage="eventInfo.GetRaiseMethod " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.GetRaiseMethod</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a23d8-220">傳回引發事件時所呼叫的方法。</span><span class="sxs-lookup"><span data-stu-id="a23d8-220">Returns the method that is called when the event is raised.</span></span></summary>
        <returns><span data-ttu-id="a23d8-221">引發事件時所呼叫的方法。</span><span class="sxs-lookup"><span data-stu-id="a23d8-221">The method that is called when the event is raised.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a23d8-222">這個方法通常會傳回`null`事件以 C# 宣告`event`關鍵字或 Visual Basic`Event`關鍵字。</span><span class="sxs-lookup"><span data-stu-id="a23d8-222">This method usually returns `null` for events declared with the C# `event` keyword or the Visual Basic `Event` keyword.</span></span> <span data-ttu-id="a23d8-223">這是因為 C# 和 Visual Basic 編譯器不會產生這種方法的預設值。</span><span class="sxs-lookup"><span data-stu-id="a23d8-223">This is because the C# and Visual Basic compilers do not generate such a method by default.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="a23d8-224">當叫用晚期繫結機制透過例如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span><span class="sxs-lookup"><span data-stu-id="a23d8-224">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="a23d8-225">關聯的列舉型別：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span><span class="sxs-lookup"><span data-stu-id="a23d8-225">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="GetRaiseMethod">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.MethodInfo GetRaiseMethod (bool nonPublic);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetRaiseMethod(bool nonPublic) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.GetRaiseMethod(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetRaiseMethod (nonPublic As Boolean) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Reflection::MethodInfo ^ GetRaiseMethod(bool nonPublic);" />
      <MemberSignature Language="F#" Value="abstract member GetRaiseMethod : bool -&gt; System.Reflection.MethodInfo" Usage="eventInfo.GetRaiseMethod nonPublic" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.GetRaiseMethod(System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nonPublic" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="nonPublic"><span data-ttu-id="a23d8-226">如果可以傳回非公用方法，則為 <see langword="true" />；否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a23d8-226"><see langword="true" /> if non-public methods can be returned; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="a23d8-227">在衍生類別中覆寫時，傳回在引發事件時所呼叫的方法，指定是否要傳回非公用方法。</span><span class="sxs-lookup"><span data-stu-id="a23d8-227">When overridden in a derived class, returns the method that is called when the event is raised, specifying whether to return non-public methods.</span></span></summary>
        <returns><span data-ttu-id="a23d8-228">在引發事件時呼叫的 <see langword="MethodInfo" /> 物件。</span><span class="sxs-lookup"><span data-stu-id="a23d8-228">A <see langword="MethodInfo" /> object that was called when the event was raised.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a23d8-229">這個方法通常會傳回`null`事件以 C# 宣告`event`關鍵字或 Visual Basic`Event`關鍵字。</span><span class="sxs-lookup"><span data-stu-id="a23d8-229">This method usually returns `null` for events declared with the C# `event` keyword or the Visual Basic `Event` keyword.</span></span> <span data-ttu-id="a23d8-230">這是因為 C# 和 Visual Basic 編譯器不會產生這種方法的預設值。</span><span class="sxs-lookup"><span data-stu-id="a23d8-230">This is because the C# and Visual Basic compilers do not generate such a method by default.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="a23d8-231"><paramref name="nonPublic" /> 是 <see langword="true" />、用來新增事件處理常式委派的方法為非公用的，而且呼叫端無權反映於非公用方法上。</span><span class="sxs-lookup"><span data-stu-id="a23d8-231"><paramref name="nonPublic" /> is <see langword="true" />, the method used to add an event handler delegate is non-public, and the caller does not have permission to reflect on non-public methods.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="a23d8-232">當叫用晚期繫結機制透過例如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span><span class="sxs-lookup"><span data-stu-id="a23d8-232">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="a23d8-233">關聯的列舉型別：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span><span class="sxs-lookup"><span data-stu-id="a23d8-233">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetRemoveMethod">
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a23d8-234">傳回用來從事件來源移除事件處理常式委派的方法。</span><span class="sxs-lookup"><span data-stu-id="a23d8-234">Returns the method used to remove an event handler delegate from the event source.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetRemoveMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetRemoveMethod ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetRemoveMethod() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.GetRemoveMethod" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRemoveMethod () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetRemoveMethod();" />
      <MemberSignature Language="F#" Value="abstract member GetRemoveMethod : unit -&gt; System.Reflection.MethodInfo&#xA;override this.GetRemoveMethod : unit -&gt; System.Reflection.MethodInfo" Usage="eventInfo.GetRemoveMethod " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.GetRemoveMethod</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a23d8-235">傳回用來從事件來源移除事件處理常式委派的方法。</span><span class="sxs-lookup"><span data-stu-id="a23d8-235">Returns the method used to remove an event handler delegate from the event source.</span></span></summary>
        <returns><span data-ttu-id="a23d8-236"><see cref="T:System.Reflection.MethodInfo" /> 物件，代表用來從事件來源移除事件處理常式委派的方法。</span><span class="sxs-lookup"><span data-stu-id="a23d8-236">A <see cref="T:System.Reflection.MethodInfo" /> object representing the method used to remove an event handler delegate from the event source.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="a23d8-237">通常，此方法具有下列簽章：</span><span class="sxs-lookup"><span data-stu-id="a23d8-237">Typically, the method has the following signature:</span></span>  
  
```  
remove_<EventName>(<EventHandlerType> handler)  
```  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="a23d8-238">當叫用晚期繫結機制透過例如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span><span class="sxs-lookup"><span data-stu-id="a23d8-238">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="a23d8-239">關聯的列舉型別：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span><span class="sxs-lookup"><span data-stu-id="a23d8-239">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="GetRemoveMethod">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.MethodInfo GetRemoveMethod (bool nonPublic);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetRemoveMethod(bool nonPublic) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.GetRemoveMethod(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetRemoveMethod (nonPublic As Boolean) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Reflection::MethodInfo ^ GetRemoveMethod(bool nonPublic);" />
      <MemberSignature Language="F#" Value="abstract member GetRemoveMethod : bool -&gt; System.Reflection.MethodInfo" Usage="eventInfo.GetRemoveMethod nonPublic" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.GetRemoveMethod(System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nonPublic" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="nonPublic"><span data-ttu-id="a23d8-240">如果可以傳回非公用方法，則為 <see langword="true" />；否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a23d8-240"><see langword="true" /> if non-public methods can be returned; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="a23d8-241">在衍生類別中覆寫時，擷取 <see langword="MethodInfo" /> 物件以移除事件的方法，指定是否要傳回非公用方法。</span><span class="sxs-lookup"><span data-stu-id="a23d8-241">When overridden in a derived class, retrieves the <see langword="MethodInfo" /> object for removing a method of the event, specifying whether to return non-public methods.</span></span></summary>
        <returns><span data-ttu-id="a23d8-242"><see cref="T:System.Reflection.MethodInfo" /> 物件，代表用來從事件來源移除事件處理常式委派的方法。</span><span class="sxs-lookup"><span data-stu-id="a23d8-242">A <see cref="T:System.Reflection.MethodInfo" /> object representing the method used to remove an event handler delegate from the event source.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="a23d8-243">通常，此方法具有下列簽章：</span><span class="sxs-lookup"><span data-stu-id="a23d8-243">Typically, the method has the following signature:</span></span>  
  
```  
remove_<EventName>(<EventHandlerType> handler)  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="a23d8-244"><paramref name="nonPublic" /> 是 <see langword="true" />、用來新增事件處理常式委派的方法為非公用的，而且呼叫端無權反映於非公用方法上。</span><span class="sxs-lookup"><span data-stu-id="a23d8-244"><paramref name="nonPublic" /> is <see langword="true" />, the method used to add an event handler delegate is non-public, and the caller does not have permission to reflect on non-public methods.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="a23d8-245">當叫用晚期繫結機制透過例如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span><span class="sxs-lookup"><span data-stu-id="a23d8-245">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="a23d8-246">關聯的列舉型別：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span><span class="sxs-lookup"><span data-stu-id="a23d8-246">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public Type GetType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.GetType" />
      <MemberSignature Language="VB.NET" Value="Public Function GetType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetType();" />
      <MemberSignature Language="F#" Value="override this.GetType : unit -&gt; Type" Usage="eventInfo.GetType " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.GetType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMulticast">
      <MemberSignature Language="C#" Value="public virtual bool IsMulticast { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMulticast" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.EventInfo.IsMulticast" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsMulticast As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsMulticast { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMulticast : bool" Usage="System.Reflection.EventInfo.IsMulticast" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._EventInfo.IsMulticast</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a23d8-247">取得值，指出事件是否為多點傳送。</span><span class="sxs-lookup"><span data-stu-id="a23d8-247">Gets a value indicating whether the event is multicast.</span></span></summary>
        <value><span data-ttu-id="a23d8-248">如果委派是多點傳送委派的執行個體，則為 <see langword="true" />；否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a23d8-248"><see langword="true" /> if the delegate is an instance of a multicast delegate; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="a23d8-249">呼叫端沒有必要的權限。</span><span class="sxs-lookup"><span data-stu-id="a23d8-249">The caller does not have the required permission.</span></span></exception>
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.EventHandler" />
      </Docs>
    </Member>
    <Member MemberName="IsSpecialName">
      <MemberSignature Language="C#" Value="public bool IsSpecialName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSpecialName" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.EventInfo.IsSpecialName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSpecialName As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSpecialName { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSpecialName : bool" Usage="System.Reflection.EventInfo.IsSpecialName" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._EventInfo.IsSpecialName</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a23d8-250">取得值，指出 <see langword="EventInfo" /> 是否具有特殊意義的名稱。</span><span class="sxs-lookup"><span data-stu-id="a23d8-250">Gets a value indicating whether the <see langword="EventInfo" /> has a name with a special meaning.</span></span></summary>
        <value><span data-ttu-id="a23d8-251">如果這個事件具有特殊名稱，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a23d8-251"><see langword="true" /> if this event has a special name; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a23d8-252">此屬性會決定事件的名稱是否有特殊意義。</span><span class="sxs-lookup"><span data-stu-id="a23d8-252">This property determines whether the event's name has a special meaning.</span></span> <span data-ttu-id="a23d8-253">開頭或包含底線字元 (_)、 屬性存取子和運算子多載方法的名稱都是由某些編譯器需要特殊處理的名稱的範例。</span><span class="sxs-lookup"><span data-stu-id="a23d8-253">Names that begin with or contain an underscore character (_), property accessors, and operator overloading methods are examples of names that might require special treatment by some compilers.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.EventAttributes" />
      </Docs>
    </Member>
    <Member MemberName="MemberType">
      <MemberSignature Language="C#" Value="public override System.Reflection.MemberTypes MemberType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.MemberTypes MemberType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.EventInfo.MemberType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property MemberType As MemberTypes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MemberTypes MemberType { System::Reflection::MemberTypes get(); };" />
      <MemberSignature Language="F#" Value="member this.MemberType : System.Reflection.MemberTypes" Usage="System.Reflection.EventInfo.MemberType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._EventInfo.MemberType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a23d8-254">取得 <see cref="T:System.Reflection.MemberTypes" /> 值，表示這個成員為事件。</span><span class="sxs-lookup"><span data-stu-id="a23d8-254">Gets a <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is an event.</span></span></summary>
        <value><span data-ttu-id="a23d8-255"><see cref="T:System.Reflection.MemberTypes" /> 值，表示這個成員為事件。</span><span class="sxs-lookup"><span data-stu-id="a23d8-255">A <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is an event.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a23d8-256">此屬性會覆寫<xref:System.Reflection.MemberInfo.MemberType%2A>。</span><span class="sxs-lookup"><span data-stu-id="a23d8-256">This property overrides <xref:System.Reflection.MemberInfo.MemberType%2A>.</span></span> <span data-ttu-id="a23d8-257">因此，當您檢查一組<xref:System.Reflection.MemberInfo>物件，例如，將所傳回的陣列<xref:System.Type.GetMembers%2A>-<xref:System.Reflection.MemberInfo.MemberType%2A>屬性會傳回<xref:System.Reflection.MemberTypes.Event?displayProperty=nameWithType>只有指定的成員時，事件。</span><span class="sxs-lookup"><span data-stu-id="a23d8-257">Therefore, when you examine a set of <xref:System.Reflection.MemberInfo> objects - for example, the array returned by <xref:System.Type.GetMembers%2A> - the <xref:System.Reflection.MemberInfo.MemberType%2A> property returns <xref:System.Reflection.MemberTypes.Event?displayProperty=nameWithType> only when a given member is an event.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Type" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Reflection.EventInfo left, System.Reflection.EventInfo right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Reflection.EventInfo left, class System.Reflection.EventInfo right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.op_Equality(System.Reflection.EventInfo,System.Reflection.EventInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As EventInfo, right As EventInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Reflection::EventInfo ^ left, System::Reflection::EventInfo ^ right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Reflection.EventInfo * System.Reflection.EventInfo -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Reflection.EventInfo" />
        <Parameter Name="right" Type="System.Reflection.EventInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="a23d8-258">要比較的第一個物件。</span><span class="sxs-lookup"><span data-stu-id="a23d8-258">The first object to compare.</span></span></param>
        <param name="right"><span data-ttu-id="a23d8-259">要比較的第二個物件。</span><span class="sxs-lookup"><span data-stu-id="a23d8-259">The second object to compare.</span></span></param>
        <summary><span data-ttu-id="a23d8-260">表示兩個 <see cref="T:System.Reflection.EventInfo" /> 物件是否相等。</span><span class="sxs-lookup"><span data-stu-id="a23d8-260">Indicates whether two <see cref="T:System.Reflection.EventInfo" /> objects are equal.</span></span></summary>
        <returns><span data-ttu-id="a23d8-261">如果 <see langword="true" /> 等於 <paramref name="left" />，則為 <paramref name="right" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a23d8-261"><see langword="true" /> if <paramref name="left" /> is equal to <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Reflection.EventInfo left, System.Reflection.EventInfo right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Reflection.EventInfo left, class System.Reflection.EventInfo right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.op_Inequality(System.Reflection.EventInfo,System.Reflection.EventInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As EventInfo, right As EventInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Reflection::EventInfo ^ left, System::Reflection::EventInfo ^ right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Reflection.EventInfo * System.Reflection.EventInfo -&gt; bool" Usage="System.Reflection.EventInfo.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Reflection.EventInfo" />
        <Parameter Name="right" Type="System.Reflection.EventInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="a23d8-262">要比較的第一個物件。</span><span class="sxs-lookup"><span data-stu-id="a23d8-262">The first object to compare.</span></span></param>
        <param name="right"><span data-ttu-id="a23d8-263">要比較的第二個物件。</span><span class="sxs-lookup"><span data-stu-id="a23d8-263">The second object to compare.</span></span></param>
        <summary><span data-ttu-id="a23d8-264">表示兩個 <see cref="T:System.Reflection.EventInfo" /> 物件是否不相等。</span><span class="sxs-lookup"><span data-stu-id="a23d8-264">Indicates whether two <see cref="T:System.Reflection.EventInfo" /> objects are not equal.</span></span></summary>
        <returns><span data-ttu-id="a23d8-265">如果 <see langword="true" /> 不等於 <paramref name="left" />，則為 <paramref name="right" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a23d8-265"><see langword="true" /> if <paramref name="left" /> is not equal to <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RaiseMethod">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodInfo RaiseMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MethodInfo RaiseMethod" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.EventInfo.RaiseMethod" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property RaiseMethod As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MethodInfo ^ RaiseMethod { System::Reflection::MethodInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RaiseMethod : System.Reflection.MethodInfo" Usage="System.Reflection.EventInfo.RaiseMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a23d8-266">取得引發事件時所呼叫的方法，包括非公用方法。</span><span class="sxs-lookup"><span data-stu-id="a23d8-266">Gets the method that is called when the event is raised, including non-public methods.</span></span></summary>
        <value><span data-ttu-id="a23d8-267">引發事件時所呼叫的方法。</span><span class="sxs-lookup"><span data-stu-id="a23d8-267">The method that is called when the event is raised.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a23d8-268">這個屬性就相當於呼叫<xref:System.Reflection.EventInfo.GetRaiseMethod%2A>值為`true`。</span><span class="sxs-lookup"><span data-stu-id="a23d8-268">This property is the equivalent of calling the <xref:System.Reflection.EventInfo.GetRaiseMethod%2A> with a value of `true`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveEventHandler">
      <MemberSignature Language="C#" Value="public virtual void RemoveEventHandler (object target, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveEventHandler(object target, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveEventHandler (target As Object, handler As Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveEventHandler(System::Object ^ target, Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="abstract member RemoveEventHandler : obj * Delegate -&gt; unit&#xA;override this.RemoveEventHandler : obj * Delegate -&gt; unit" Usage="eventInfo.RemoveEventHandler (target, handler)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.RemoveEventHandler(System.Object,System.Delegate)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="a23d8-269">事件的來源。</span><span class="sxs-lookup"><span data-stu-id="a23d8-269">The event source.</span></span></param>
        <param name="handler"><span data-ttu-id="a23d8-270">要從目標所引發的事件取消關聯的委派。</span><span class="sxs-lookup"><span data-stu-id="a23d8-270">The delegate to be disassociated from the events raised by target.</span></span></param>
        <summary><span data-ttu-id="a23d8-271">從事件來源移除事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="a23d8-271">Removes an event handler from an event source.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a23d8-272">這個方法會嘗試移除可能會同步處理的目標物件上的這個事件的委派。</span><span class="sxs-lookup"><span data-stu-id="a23d8-272">This method attempts to remove the delegate that may synchronize this event on the target object.</span></span>  
  
 <span data-ttu-id="a23d8-273">當引發事件目標、 方法或方法由封裝`handler`將不再會叫用。</span><span class="sxs-lookup"><span data-stu-id="a23d8-273">When an event is raised by target, the method or methods encapsulated by `handler` will no longer be invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a23d8-274">此事件不具公用 <see langword="remove" /> 存取子。</span><span class="sxs-lookup"><span data-stu-id="a23d8-274">The event does not have a public <see langword="remove" /> accessor.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a23d8-275">無法使用傳入的處理常式。</span><span class="sxs-lookup"><span data-stu-id="a23d8-275">The handler that was passed in cannot be used.</span></span></exception>
        <exception cref="T:System.Reflection.TargetException"><block subset="none" type="note">
            <para>  
 <span data-ttu-id="a23d8-276">在<see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx">適用於 Windows 市集應用程式的 .NET</see> 或<see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">可攜式類別庫</see>中，改為攔截 <see cref="T:System.Exception" />。</span><span class="sxs-lookup"><span data-stu-id="a23d8-276">In <see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx">.NET for Windows Store apps</see> or the <see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">Portable Class Library</see>, catch <see cref="T:System.Exception" /> instead.</span></span>  
  
</para>
          </block>  
  
 <span data-ttu-id="a23d8-277"><paramref name="target" /> 參數是 <see langword="null" /> 且事件不是靜態的。</span><span class="sxs-lookup"><span data-stu-id="a23d8-277">The <paramref name="target" /> parameter is <see langword="null" /> and the event is not static.</span></span>  
  
<span data-ttu-id="a23d8-278">-或-</span><span class="sxs-lookup"><span data-stu-id="a23d8-278">-or-</span></span> 
<span data-ttu-id="a23d8-279">未在目標上宣告 <see cref="T:System.Reflection.EventInfo" />。</span><span class="sxs-lookup"><span data-stu-id="a23d8-279">The <see cref="T:System.Reflection.EventInfo" /> is not declared on the target.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><block subset="none" type="note">
            <para>  
 <span data-ttu-id="a23d8-280">在<see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx">適用於 Windows 市集應用程式的 .NET </see> 中或<see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">可攜式類別庫</see>中，改為擷取基底類別例外狀況 <see cref="T:System.MemberAccessException" />。</span><span class="sxs-lookup"><span data-stu-id="a23d8-280">In <see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx">.NET for Windows Store apps</see> or the <see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">Portable Class Library</see>, catch the base class exception, <see cref="T:System.MemberAccessException" />, instead.</span></span>  
  
</para>
          </block>  
  
 <span data-ttu-id="a23d8-281">呼叫端無權存取該成員。</span><span class="sxs-lookup"><span data-stu-id="a23d8-281">The caller does not have access permission to the member.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="a23d8-282">當叫用晚期繫結機制透過例如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span><span class="sxs-lookup"><span data-stu-id="a23d8-282">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="a23d8-283">關聯的列舉型別：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span><span class="sxs-lookup"><span data-stu-id="a23d8-283">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.Delegate" />
        <altmember cref="T:System.EventHandler" />
      </Docs>
    </Member>
    <Member MemberName="RemoveMethod">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodInfo RemoveMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MethodInfo RemoveMethod" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.EventInfo.RemoveMethod" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property RemoveMethod As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MethodInfo ^ RemoveMethod { System::Reflection::MethodInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RemoveMethod : System.Reflection.MethodInfo" Usage="System.Reflection.EventInfo.RemoveMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a23d8-284">取得用來移除事件方法 (包括非公用方法) 的 <see langword="MethodInfo" /> 物件。</span><span class="sxs-lookup"><span data-stu-id="a23d8-284">Gets the <see langword="MethodInfo" /> object for removing a method of the event, including non-public methods.</span></span></summary>
        <value><span data-ttu-id="a23d8-285">用於移除該事件之方法的 <see langword="MethodInfo" /> 物件。</span><span class="sxs-lookup"><span data-stu-id="a23d8-285">The <see langword="MethodInfo" /> object for removing a method of the event.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a23d8-286">這個屬性就相當於呼叫<xref:System.Reflection.EventInfo.GetRemoveMethod%2A>值為`true`。</span><span class="sxs-lookup"><span data-stu-id="a23d8-286">This property is the equivalent of calling the <xref:System.Reflection.EventInfo.GetRemoveMethod%2A> with a value of `true`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._EventInfo.GetIDsOfNames">
      <MemberSignature Language="C#" Value="void _EventInfo.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._EventInfo.GetIDsOfNames([in]valuetype System.Guid&amp; riid, native int rgszNames, unsigned int32 cNames, unsigned int32 lcid, native int rgDispId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetIDsOfNames (ByRef riid As Guid, rgszNames As IntPtr, cNames As UInteger, lcid As UInteger, rgDispId As IntPtr) Implements _EventInfo.GetIDsOfNames" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._EventInfo.GetIDsOfNames(Guid % riid, IntPtr rgszNames, System::UInt32 cNames, System::UInt32 lcid, IntPtr rgDispId) = System::Runtime::InteropServices::_EventInfo::GetIDsOfNames;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="riid" Type="System.Guid" RefType="ref" />
        <Parameter Name="rgszNames" Type="System.IntPtr" />
        <Parameter Name="cNames" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="rgDispId" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="riid"><span data-ttu-id="a23d8-287">保留供未來使用。</span><span class="sxs-lookup"><span data-stu-id="a23d8-287">Reserved for future use.</span></span> <span data-ttu-id="a23d8-288">必須是 IID_NULL。</span><span class="sxs-lookup"><span data-stu-id="a23d8-288">Must be IID_NULL.</span></span></param>
        <param name="rgszNames"><span data-ttu-id="a23d8-289">要對應之傳入的名稱陣列。</span><span class="sxs-lookup"><span data-stu-id="a23d8-289">Passed-in array of names to be mapped.</span></span></param>
        <param name="cNames"><span data-ttu-id="a23d8-290">要對應的名稱計數。</span><span class="sxs-lookup"><span data-stu-id="a23d8-290">Count of the names to be mapped.</span></span></param>
        <param name="lcid"><span data-ttu-id="a23d8-291">用於解譯名稱的地區設定內容。</span><span class="sxs-lookup"><span data-stu-id="a23d8-291">The locale context in which to interpret the names.</span></span></param>
        <param name="rgDispId"><span data-ttu-id="a23d8-292">呼叫端配置的陣列，用於接收對應於名稱的 ID。</span><span class="sxs-lookup"><span data-stu-id="a23d8-292">Caller-allocated array which receives the IDs corresponding to the names.</span></span></param>
        <summary><span data-ttu-id="a23d8-293">將一組名稱對應至一組對應的分派識別項 (Dispatch Identifier)。</span><span class="sxs-lookup"><span data-stu-id="a23d8-293">Maps a set of names to a corresponding set of dispatch identifiers.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a23d8-294">這個方法會從 unmanaged 程式碼，是用於存取 managed 類別，並不會呼叫從 managed 程式碼。</span><span class="sxs-lookup"><span data-stu-id="a23d8-294">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="a23d8-295">如需詳細資訊`IDispatch::GetIDsOfNames`，請參閱 MSDN Library。</span><span class="sxs-lookup"><span data-stu-id="a23d8-295">For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="a23d8-296">不支援使用 COM <c>IDispatch</c> 介面進行晚期繫結的存取。</span><span class="sxs-lookup"><span data-stu-id="a23d8-296">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._EventInfo.GetType">
      <MemberSignature Language="C#" Value="Type _EventInfo.GetType ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Type System.Runtime.InteropServices._EventInfo.GetType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetType" />
      <MemberSignature Language="VB.NET" Value="Function GetType () As Type Implements _EventInfo.GetType" />
      <MemberSignature Language="C++ CLI" Value=" virtual Type ^ System.Runtime.InteropServices._EventInfo.GetType() = System::Runtime::InteropServices::_EventInfo::GetType;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.GetType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a23d8-297">傳回表示 <see cref="T:System.Reflection.EventInfo" /> 類型的 <c>T:System.Type</c> 物件。</span><span class="sxs-lookup"><span data-stu-id="a23d8-297">Returns a <c>T:System.Type</c> object representing the <see cref="T:System.Reflection.EventInfo" /> type.</span></span></summary>
        <returns><span data-ttu-id="a23d8-298">表示 <see cref="T:System.Reflection.EventInfo" /> 類型的 <c>T:System.Type</c> 物件。</span><span class="sxs-lookup"><span data-stu-id="a23d8-298">A <c>T:System.Type</c> object representing the <see cref="T:System.Reflection.EventInfo" /> type.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._EventInfo.GetTypeInfo">
      <MemberSignature Language="C#" Value="void _EventInfo.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._EventInfo.GetTypeInfo(unsigned int32 iTInfo, unsigned int32 lcid, native int ppTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfo (iTInfo As UInteger, lcid As UInteger, ppTInfo As IntPtr) Implements _EventInfo.GetTypeInfo" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._EventInfo.GetTypeInfo(System::UInt32 iTInfo, System::UInt32 lcid, IntPtr ppTInfo) = System::Runtime::InteropServices::_EventInfo::GetTypeInfo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iTInfo" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="ppTInfo" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="iTInfo"><span data-ttu-id="a23d8-299">要傳回的類型資訊。</span><span class="sxs-lookup"><span data-stu-id="a23d8-299">The type information to return.</span></span></param>
        <param name="lcid"><span data-ttu-id="a23d8-300">類型資訊的地區設定識別項。</span><span class="sxs-lookup"><span data-stu-id="a23d8-300">The locale identifier for the type information.</span></span></param>
        <param name="ppTInfo"><span data-ttu-id="a23d8-301">接收要求的類型資訊物件的指標。</span><span class="sxs-lookup"><span data-stu-id="a23d8-301">Receives a pointer to the requested type information object.</span></span></param>
        <summary><span data-ttu-id="a23d8-302">擷取物件的類型資訊，可以用來取得介面的類型資訊。</span><span class="sxs-lookup"><span data-stu-id="a23d8-302">Retrieves the type information for an object, which can then be used to get the type information for an interface.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a23d8-303">這個方法會從 unmanaged 程式碼，是用於存取 managed 類別，並不會呼叫從 managed 程式碼。</span><span class="sxs-lookup"><span data-stu-id="a23d8-303">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="a23d8-304">如需詳細資訊`IDispatch::GetTypeInfo`，請參閱 MSDN Library。</span><span class="sxs-lookup"><span data-stu-id="a23d8-304">For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="a23d8-305">不支援使用 COM <c>IDispatch</c> 介面進行晚期繫結的存取。</span><span class="sxs-lookup"><span data-stu-id="a23d8-305">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._EventInfo.GetTypeInfoCount">
      <MemberSignature Language="C#" Value="void _EventInfo.GetTypeInfoCount (out uint pcTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._EventInfo.GetTypeInfoCount([out] unsigned int32&amp; pcTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetTypeInfoCount(System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfoCount (ByRef pcTInfo As UInteger) Implements _EventInfo.GetTypeInfoCount" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._EventInfo.GetTypeInfoCount([Runtime::InteropServices::Out] System::UInt32 % pcTInfo) = System::Runtime::InteropServices::_EventInfo::GetTypeInfoCount;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.GetTypeInfoCount(System.UInt32@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcTInfo" Type="System.UInt32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pcTInfo"><span data-ttu-id="a23d8-306">指向接收物件提供的類型資訊介面數目的位置。</span><span class="sxs-lookup"><span data-stu-id="a23d8-306">Points to a location that receives the number of type information interfaces provided by the object.</span></span></param>
        <summary><span data-ttu-id="a23d8-307">擷取物件提供的類型資訊介面數目 (0 或 1)。</span><span class="sxs-lookup"><span data-stu-id="a23d8-307">Retrieves the number of type information interfaces that an object provides (either 0 or 1).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a23d8-308">這個方法會從 unmanaged 程式碼，是用於存取 managed 類別，並不會呼叫從 managed 程式碼。</span><span class="sxs-lookup"><span data-stu-id="a23d8-308">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="a23d8-309">如需詳細資訊`IDispatch::GetTypeInfoCount`，請參閱 MSDN Library。</span><span class="sxs-lookup"><span data-stu-id="a23d8-309">For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="a23d8-310">不支援使用 COM <c>IDispatch</c> 介面進行晚期繫結的存取。</span><span class="sxs-lookup"><span data-stu-id="a23d8-310">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._EventInfo.Invoke">
      <MemberSignature Language="C#" Value="void _EventInfo.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._EventInfo.Invoke(unsigned int32 dispIdMember, [in]valuetype System.Guid&amp; riid, unsigned int32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub Invoke (dispIdMember As UInteger, ByRef riid As Guid, lcid As UInteger, wFlags As Short, pDispParams As IntPtr, pVarResult As IntPtr, pExcepInfo As IntPtr, puArgErr As IntPtr) Implements _EventInfo.Invoke" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._EventInfo.Invoke(System::UInt32 dispIdMember, Guid % riid, System::UInt32 lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr) = System::Runtime::InteropServices::_EventInfo::Invoke;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dispIdMember" Type="System.UInt32" />
        <Parameter Name="riid" Type="System.Guid" RefType="ref" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="wFlags" Type="System.Int16" />
        <Parameter Name="pDispParams" Type="System.IntPtr" />
        <Parameter Name="pVarResult" Type="System.IntPtr" />
        <Parameter Name="pExcepInfo" Type="System.IntPtr" />
        <Parameter Name="puArgErr" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="dispIdMember"><span data-ttu-id="a23d8-311">辨識成員。</span><span class="sxs-lookup"><span data-stu-id="a23d8-311">Identifies the member.</span></span></param>
        <param name="riid"><span data-ttu-id="a23d8-312">保留供未來使用。</span><span class="sxs-lookup"><span data-stu-id="a23d8-312">Reserved for future use.</span></span> <span data-ttu-id="a23d8-313">必須是 IID_NULL。</span><span class="sxs-lookup"><span data-stu-id="a23d8-313">Must be IID_NULL.</span></span></param>
        <param name="lcid"><span data-ttu-id="a23d8-314">地區設定內容，用於解譯引數。</span><span class="sxs-lookup"><span data-stu-id="a23d8-314">The locale context in which to interpret arguments.</span></span></param>
        <param name="wFlags"><span data-ttu-id="a23d8-315">描述呼叫之內容的旗標。</span><span class="sxs-lookup"><span data-stu-id="a23d8-315">Flags describing the context of the call.</span></span></param>
        <param name="pDispParams"><span data-ttu-id="a23d8-316">結構的指標，此結構包含引數陣列、指名引數之 DISPID 引數的陣列，以及陣列中項目數目的計數。</span><span class="sxs-lookup"><span data-stu-id="a23d8-316">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</span></span></param>
        <param name="pVarResult"><span data-ttu-id="a23d8-317">指向用於儲存結果之位置的指標。</span><span class="sxs-lookup"><span data-stu-id="a23d8-317">Pointer to the location where the result is to be stored.</span></span></param>
        <param name="pExcepInfo"><span data-ttu-id="a23d8-318">包含例外狀況資訊的結構指標。</span><span class="sxs-lookup"><span data-stu-id="a23d8-318">Pointer to a structure that contains exception information.</span></span></param>
        <param name="puArgErr"><span data-ttu-id="a23d8-319">第一個有錯誤的引數索引。</span><span class="sxs-lookup"><span data-stu-id="a23d8-319">The index of the first argument that has an error.</span></span></param>
        <summary><span data-ttu-id="a23d8-320">提供物件所公開的屬性和方法的存取權。</span><span class="sxs-lookup"><span data-stu-id="a23d8-320">Provides access to properties and methods exposed by an object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a23d8-321">這個方法會從 unmanaged 程式碼，是用於存取 managed 類別，並不會呼叫從 managed 程式碼。</span><span class="sxs-lookup"><span data-stu-id="a23d8-321">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="a23d8-322">如需詳細資訊`IDispatch::Invoke`，請參閱 MSDN Library。</span><span class="sxs-lookup"><span data-stu-id="a23d8-322">For more information about `IDispatch::Invoke`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="a23d8-323">不支援使用 COM <c>IDispatch</c> 介面進行晚期繫結的存取。</span><span class="sxs-lookup"><span data-stu-id="a23d8-323">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>