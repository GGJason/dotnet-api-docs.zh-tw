<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="MethodInfo.xml" source-language="en-US" target-language="zh-TW">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5cd4ae293dba419bbcd758325322617d8b6cce4b7.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cd4ae293dba419bbcd758325322617d8b6cce4b7</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Reflection.MethodInfo">
          <source>Discovers the attributes of a method and provides access to method metadata.</source>
          <target state="translated">探索方法的屬性 (Attribute) 並提供方法中繼資料 (Metadata) 的存取。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.MethodInfo">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph> class represents a method of a type.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph>類別代表類型的方法。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.MethodInfo">
          <source>You can use a <ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph> object to obtain information about the method that the object represents and to invoke the method.</source>
          <target state="translated">您可以使用<ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph>來取得此物件表示方法的相關資訊，並叫用方法的物件。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.MethodInfo">
          <source>For example:</source>
          <target state="translated">例如: </target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.MethodInfo">
          <source>You can determine the method's visibility by retrieving the values of the <ph id="ph1">&lt;xref:System.Reflection.MethodBase.IsFamilyAndAssembly%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.MethodBase.IsFamilyOrAssembly%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Reflection.MethodBase.IsPrivate%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Reflection.MethodBase.IsPublic%2A&gt;</ph> properties.</source>
          <target state="translated">您可以擷取的值來決定方法的可見性<ph id="ph1">&lt;xref:System.Reflection.MethodBase.IsFamilyAndAssembly%2A&gt;</ph>， <ph id="ph2">&lt;xref:System.Reflection.MethodBase.IsFamilyOrAssembly%2A&gt;</ph>， <ph id="ph3">&lt;xref:System.Reflection.MethodBase.IsPrivate%2A&gt;</ph>，和<ph id="ph4">&lt;xref:System.Reflection.MethodBase.IsPublic%2A&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.MethodInfo">
          <source>You can discover what attributes are applied to the method by retrieving the value of the <ph id="ph1">&lt;xref:System.Reflection.MethodBase.Attributes%2A&gt;</ph> property or calling the <ph id="ph2">&lt;xref:System.Reflection.Assembly.GetCustomAttributes%2A&gt;</ph> method.</source>
          <target state="translated">您可以探索哪些屬性套用至該方法所擷取的值<ph id="ph1">&lt;xref:System.Reflection.MethodBase.Attributes%2A&gt;</ph>屬性或呼叫<ph id="ph2">&lt;xref:System.Reflection.Assembly.GetCustomAttributes%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.MethodInfo">
          <source>You can determine whether the method is a generic method, an open constructed generic method, or a closed constructed generic method, by retrieving the values of the <ph id="ph1">&lt;xref:System.Reflection.MethodBase.IsGenericMethod%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Reflection.MethodBase.ContainsGenericParameters%2A&gt;</ph> properties.</source>
          <target state="translated">您可以決定是否該方法是泛型的方法、 開啟建構的泛型方法，或關閉建構的泛型方法，擷取的值<ph id="ph1">&lt;xref:System.Reflection.MethodBase.IsGenericMethod%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Reflection.MethodBase.ContainsGenericParameters%2A&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.MethodInfo">
          <source>You can get information about the method's parameters and return type from the <ph id="ph1">&lt;xref:System.Reflection.MethodBase.GetParameters%2A&gt;</ph> method and the <ph id="ph2">&lt;xref:System.Reflection.MethodInfo.ReturnParameter%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Reflection.MethodInfo.ReturnType%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Reflection.MethodInfo.ReturnTypeCustomAttributes%2A&gt;</ph> properties.</source>
          <target state="translated">您可以取得該方法之參數的相關資訊，並傳回型別從<ph id="ph1">&lt;xref:System.Reflection.MethodBase.GetParameters%2A&gt;</ph>方法和<ph id="ph2">&lt;xref:System.Reflection.MethodInfo.ReturnParameter%2A&gt;</ph>， <ph id="ph3">&lt;xref:System.Reflection.MethodInfo.ReturnType%2A&gt;</ph>，和<ph id="ph4">&lt;xref:System.Reflection.MethodInfo.ReturnTypeCustomAttributes%2A&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.MethodInfo">
          <source>You can execute a method on a class instance by calling the <ph id="ph1">&lt;xref:System.Reflection.MethodBase.Invoke%2A&gt;</ph> method.</source>
          <target state="translated">您可以藉由呼叫類別的執行個體上執行方法<ph id="ph1">&lt;xref:System.Reflection.MethodBase.Invoke%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.MethodInfo">
          <source>You can instantiate a <ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph> object that represents a constructed generic method from one that represents a generic method definition by calling the <ph id="ph2">&lt;xref:System.Reflection.MethodInfo.MakeGenericMethod%2A&gt;</ph> method.</source>
          <target state="translated">您可以具現化<ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph>物件，代表從一個代表藉由呼叫泛型方法定義建構的泛型方法<ph id="ph2">&lt;xref:System.Reflection.MethodInfo.MakeGenericMethod%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.MethodInfo">
          <source>You can instantiate a <ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph> instances by calling the <ph id="ph2">&lt;xref:System.Type.GetMethods%2A?displayProperty=nameWithType&gt;</ph> or <ph id="ph3">&lt;xref:System.Type.GetMethod%2A?displayProperty=nameWithType&gt;</ph> method, or by calling the <ph id="ph4">&lt;xref:System.Reflection.MethodInfo.MakeGenericMethod%2A?displayProperty=nameWithType&gt;</ph> method of a <ph id="ph5">&lt;xref:System.Reflection.MethodInfo&gt;</ph> object that represents a generic method definition.</source>
          <target state="translated">您可以具現化<ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph>藉由呼叫的執行個體<ph id="ph2">&lt;xref:System.Type.GetMethods%2A?displayProperty=nameWithType&gt;</ph>或<ph id="ph3">&lt;xref:System.Type.GetMethod%2A?displayProperty=nameWithType&gt;</ph>方法，或藉由呼叫<ph id="ph4">&lt;xref:System.Reflection.MethodInfo.MakeGenericMethod%2A?displayProperty=nameWithType&gt;</ph>方法<ph id="ph5">&lt;xref:System.Reflection.MethodInfo&gt;</ph>物件，代表泛型方法定義。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.MethodInfo">
          <source>For a list of the invariant conditions for terms specific to generic methods, see the <ph id="ph1">&lt;xref:System.Reflection.MethodBase.IsGenericMethod%2A&gt;</ph> property.</source>
          <target state="translated">非變異條件的詞彙與泛型方法的特定清單，請參閱<ph id="ph1">&lt;xref:System.Reflection.MethodBase.IsGenericMethod%2A&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.MethodInfo">
          <source>For a list of the invariant conditions for other terms used in generic reflection, see the <ph id="ph1">&lt;xref:System.Type.IsGenericType%2A&gt;</ph> property.</source>
          <target state="translated">如需其他用在反映中泛型的詞彙的非變異條件的清單，請參閱<ph id="ph1">&lt;xref:System.Type.IsGenericType%2A&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.MethodInfo">
          <source>for full trust for inheritors.</source>
          <target state="translated">針對繼承者完全信任。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.MethodInfo">
          <source>This class cannot be inherited by partially trusted code.</source>
          <target state="translated">這個類別無法被繼承，部分信任程式碼。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.MethodInfo">
          <source>This type is thread safe.</source>
          <target state="translated">此型別具備執行緒安全。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.MethodInfo">
          <source>When you inherit from <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph>, you must override <ph id="ph2">&lt;see cref="M:System.Reflection.MethodInfo.GetBaseDefinition" /&gt;</ph>, <ph id="ph3">&lt;see cref="P:System.Reflection.MethodInfo.ReturnType" /&gt;</ph>, <ph id="ph4">&lt;see cref="P:System.Reflection.MethodInfo.ReturnTypeCustomAttributes" /&gt;</ph>, <ph id="ph5">&lt;see cref="M:System.Reflection.MethodBase.GetParameters" /&gt;</ph>, <ph id="ph6">&lt;see cref="M:System.Reflection.MethodBase.GetMethodImplementationFlags" /&gt;</ph>, <ph id="ph7">&lt;see cref="P:System.Reflection.MethodBase.MethodHandle" /&gt;</ph>, <ph id="ph8">&lt;see cref="P:System.Reflection.MethodBase.Attributes" /&gt;</ph>, <ph id="ph9">&lt;see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" /&gt;</ph>, <ph id="ph10">&lt;see cref="P:System.Reflection.MemberInfo.Name" /&gt;</ph>, <ph id="ph11">&lt;see cref="P:System.Reflection.MemberInfo.MemberType" /&gt;</ph>, <ph id="ph12">&lt;see cref="P:System.Reflection.MemberInfo.DeclaringType" /&gt;</ph>, <ph id="ph13">&lt;see cref="P:System.Reflection.MemberInfo.ReflectedType" /&gt;</ph>, <ph id="ph14">&lt;see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /&gt;</ph>, <ph id="ph15">&lt;see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)" /&gt;</ph>, and <ph id="ph16">&lt;see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" /&gt;</ph>.</source>
          <target state="translated">當您繼承自<ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph>，您必須覆寫<ph id="ph2">&lt;see cref="M:System.Reflection.MethodInfo.GetBaseDefinition" /&gt;</ph>， <ph id="ph3">&lt;see cref="P:System.Reflection.MethodInfo.ReturnType" /&gt;</ph>， <ph id="ph4">&lt;see cref="P:System.Reflection.MethodInfo.ReturnTypeCustomAttributes" /&gt;</ph>， <ph id="ph5">&lt;see cref="M:System.Reflection.MethodBase.GetParameters" /&gt;</ph>， <ph id="ph6">&lt;see cref="M:System.Reflection.MethodBase.GetMethodImplementationFlags" /&gt;</ph>， <ph id="ph7">&lt;see cref="P:System.Reflection.MethodBase.MethodHandle" /&gt;</ph>， <ph id="ph8">&lt;see cref="P:System.Reflection.MethodBase.Attributes" /&gt;</ph>， <ph id="ph9">&lt;see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" /&gt;</ph>， <ph id="ph10">&lt;see cref="P:System.Reflection.MemberInfo.Name" /&gt;</ph>， <ph id="ph11">&lt;see cref="P:System.Reflection.MemberInfo.MemberType" /&gt;</ph>， <ph id="ph12">&lt;see cref="P:System.Reflection.MemberInfo.DeclaringType" /&gt;</ph>， <ph id="ph13">&lt;see cref="P:System.Reflection.MemberInfo.ReflectedType" /&gt;</ph>， <ph id="ph14">&lt;see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /&gt;</ph>， <ph id="ph15">&lt;see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)" /&gt;</ph>，和<ph id="ph16">&lt;see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Reflection.MethodInfo.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="T:System.Reflection.MethodInfo">
          <source>Creates a delegate from this method.</source>
          <target state="translated">從這個方法建立委派。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Reflection.MethodInfo.CreateDelegate(System.Type)">
          <source>The type of the delegate to create.</source>
          <target state="translated">要建立之委派的類型。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Reflection.MethodInfo.CreateDelegate(System.Type)">
          <source>Creates a delegate of the specified type from this method.</source>
          <target state="translated">從這個方法建立所指定類型的委派。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Reflection.MethodInfo.CreateDelegate(System.Type)">
          <source>The delegate for this method.</source>
          <target state="translated">這個方法的委派。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Reflection.MethodInfo.CreateDelegate(System.Type,System.Object)">
          <source>The type of the delegate to create.</source>
          <target state="translated">要建立之委派的類型。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Reflection.MethodInfo.CreateDelegate(System.Type,System.Object)">
          <source>The object targeted by the delegate.</source>
          <target state="translated">委派的目標物件。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Reflection.MethodInfo.CreateDelegate(System.Type,System.Object)">
          <source>Creates a delegate of the specified type with the specified target from this method.</source>
          <target state="translated">從這個方法以指定的目標建立所指定類型的委派。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Reflection.MethodInfo.CreateDelegate(System.Type,System.Object)">
          <source>The delegate for this method.</source>
          <target state="translated">這個方法的委派。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Reflection.MethodInfo.Equals(System.Object)">
          <source>An object to compare with this instance, or <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">與這個執行個體相比較的物件，或 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Reflection.MethodInfo.Equals(System.Object)">
          <source>Returns a value that indicates whether this instance is equal to a specified object.</source>
          <target state="translated">傳回值，這個值指出此執行個體是否與指定的物件相等。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Reflection.MethodInfo.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> equals the type and value of this instance; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph1">&lt;see langword="true" /&gt;</ph> 和這個執行個體具有相同的類型和值，則為 <ph id="ph2">&lt;paramref name="obj" /&gt;</ph>否則為 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Reflection.MethodInfo.GetBaseDefinition">
          <source>When overridden in a derived class, returns the <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> object for the method on the direct or indirect base class in which the method represented by this instance was first declared.</source>
          <target state="translated">在衍生類別中覆寫時，為直接或間接基底類別 (也就是這個執行個體所代表的方法第一次被宣告的地方) 中的方法傳回 <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> 物件。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Reflection.MethodInfo.GetBaseDefinition">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> object for the first implementation of this method.</source>
          <target state="translated">這個方法首次實作的 <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> 物件。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MethodInfo.GetBaseDefinition">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.MethodInfo.GetBaseDefinition%2A&gt;</ph> method returns the first definition of the specified method in the class hierarchy.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.MethodInfo.GetBaseDefinition%2A&gt;</ph>方法會傳回指定之方法的第一個定義中的類別階層。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MethodInfo.GetBaseDefinition">
          <source>You can determine the type on which the first definition of the method is found by retrieving the value of the <ph id="ph1">&lt;xref:System.Reflection.MemberInfo.DeclaringType%2A&gt;</ph> property on the returned <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> object.</source>
          <target state="translated">您可以判斷在其擷取的值所找到之方法的第一個定義的型別<ph id="ph1">&lt;xref:System.Reflection.MemberInfo.DeclaringType%2A&gt;</ph>屬性傳回的<ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph>物件。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MethodInfo.GetBaseDefinition">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.MethodInfo.GetBaseDefinition%2A&gt;</ph> method behaves as follows:</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.MethodInfo.GetBaseDefinition%2A&gt;</ph>方法的行為，如下所示：</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MethodInfo.GetBaseDefinition">
          <source>If the current <ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph> object represents an interface implementation, the <ph id="ph2">&lt;xref:System.Reflection.MethodInfo.GetBaseDefinition%2A&gt;</ph> method returns the current <ph id="ph3">&lt;xref:System.Reflection.MethodInfo&gt;</ph> object.</source>
          <target state="translated">如果目前<ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph>物件都代表介面實作，<ph id="ph2">&lt;xref:System.Reflection.MethodInfo.GetBaseDefinition%2A&gt;</ph>方法會傳回目前<ph id="ph3">&lt;xref:System.Reflection.MethodInfo&gt;</ph>物件。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MethodInfo.GetBaseDefinition">
          <source>If the current <ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph> object represents a method that overrides a virtual definition in a base class, the <ph id="ph2">&lt;xref:System.Reflection.MethodInfo.GetBaseDefinition%2A&gt;</ph> method returns a <ph id="ph3">&lt;xref:System.Reflection.MethodInfo&gt;</ph> object that represents the virtual definition.</source>
          <target state="translated">如果目前<ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph>物件代表的方法，會覆寫虛擬基底類別，定義<ph id="ph2">&lt;xref:System.Reflection.MethodInfo.GetBaseDefinition%2A&gt;</ph>方法會傳回<ph id="ph3">&lt;xref:System.Reflection.MethodInfo&gt;</ph>物件，表示虛擬的定義。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MethodInfo.GetBaseDefinition">
          <source>If the current <ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph> object represents a method that is specified with the <ph id="ph2">`new`</ph> keyword in C# or the <ph id="ph3">`Shadows`</ph> keyword in Visual Basic (as in <ph id="ph4">`newslot`</ph>, as described in <bpt id="p1">[</bpt>Common Type System<ept id="p1">](~/docs/standard/base-types/common-type-system.md)</ept>), the <ph id="ph5">&lt;xref:System.Reflection.MethodInfo.GetBaseDefinition%2A&gt;</ph> method returns the current <ph id="ph6">&lt;xref:System.Reflection.MethodInfo&gt;</ph> object.</source>
          <target state="translated">如果目前<ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph>物件代表的方法，以指定<ph id="ph2">`new`</ph>關鍵字在 C# 或<ph id="ph3">`Shadows`</ph>關鍵字在 Visual Basic 中的 (在<ph id="ph4">`newslot`</ph>中所述，<bpt id="p1">[</bpt>一般類型系統<ept id="p1">](~/docs/standard/base-types/common-type-system.md)</ept>)， <ph id="ph5">&lt;xref:System.Reflection.MethodInfo.GetBaseDefinition%2A&gt;</ph>方法會傳回目前<ph id="ph6">&lt;xref:System.Reflection.MethodInfo&gt;</ph>物件。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MethodInfo.GetBaseDefinition">
          <source>If the current <ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph> object represents an inherited method (that is, the current method does not provide its own implementation), the <ph id="ph2">&lt;xref:System.Reflection.MethodInfo.GetBaseDefinition%2A&gt;</ph> method returns a <ph id="ph3">&lt;xref:System.Reflection.MethodInfo&gt;</ph> object that represents the lowest method in the class hierarchy.</source>
          <target state="translated">如果目前<ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph>物件都代表繼承的方法 （也就是目前的方法不會提供它自己的實作），<ph id="ph2">&lt;xref:System.Reflection.MethodInfo.GetBaseDefinition%2A&gt;</ph>方法會傳回<ph id="ph3">&lt;xref:System.Reflection.MethodInfo&gt;</ph>物件，代表在類別階層中最低的方法。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MethodInfo.GetBaseDefinition">
          <source>For example, if <ph id="ph1">`Base.ToString`</ph> overrides <ph id="ph2">`Object.ToString`</ph>, and <ph id="ph3">`Derived.ToString`</ph> overrides <ph id="ph4">`Base.ToString`</ph>, calling the <ph id="ph5">&lt;xref:System.Reflection.MethodInfo.GetBaseDefinition%2A&gt;</ph> method on a <ph id="ph6">&lt;xref:System.Reflection.MethodInfo&gt;</ph> object that represents <ph id="ph7">`Derived.ToString`</ph> returns a <ph id="ph8">&lt;xref:System.Reflection.MethodInfo&gt;</ph> object that represents <ph id="ph9">`Object.ToString`</ph>.</source>
          <target state="translated">比方說，如果<ph id="ph1">`Base.ToString`</ph>會覆寫<ph id="ph2">`Object.ToString`</ph>，和<ph id="ph3">`Derived.ToString`</ph>會覆寫<ph id="ph4">`Base.ToString`</ph>，則呼叫<ph id="ph5">&lt;xref:System.Reflection.MethodInfo.GetBaseDefinition%2A&gt;</ph>方法上的<ph id="ph6">&lt;xref:System.Reflection.MethodInfo&gt;</ph>物件，代表<ph id="ph7">`Derived.ToString`</ph>傳回<ph id="ph8">&lt;xref:System.Reflection.MethodInfo&gt;</ph>表示物件<ph id="ph9">`Object.ToString`</ph>.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MethodInfo.GetBaseDefinition">
          <source>If the current <ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph> object represents a method that is not present in any base class, the <ph id="ph2">&lt;xref:System.Reflection.MethodInfo.GetBaseDefinition%2A&gt;</ph> method returns the current <ph id="ph3">&lt;xref:System.Reflection.MethodInfo&gt;</ph> object.</source>
          <target state="translated">如果目前<ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph>物件代表的方法，不存在於任何基底類別，<ph id="ph2">&lt;xref:System.Reflection.MethodInfo.GetBaseDefinition%2A&gt;</ph>方法會傳回目前<ph id="ph3">&lt;xref:System.Reflection.MethodInfo&gt;</ph>物件。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MethodInfo.GetBaseDefinition">
          <source>You can determine whether the current method overrides a method in a base class by calling the <ph id="ph1">&lt;xref:System.Reflection.MethodInfo.GetBaseDefinition%2A&gt;</ph> method.</source>
          <target state="translated">您可以判斷是否目前的方法覆寫基底類別中的方法藉由呼叫<ph id="ph1">&lt;xref:System.Reflection.MethodInfo.GetBaseDefinition%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MethodInfo.GetBaseDefinition">
          <source>The following example implements an <ph id="ph1">`IsOverride`</ph> method that does this.</source>
          <target state="translated">下列範例會實作<ph id="ph1">`IsOverride`</ph>此方法。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MethodInfo.GetBaseDefinition">
          <source>To call the <ph id="ph1">`GetBaseDefinition`</ph> method:</source>
          <target state="translated">若要呼叫<ph id="ph1">`GetBaseDefinition`</ph>方法：</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MethodInfo.GetBaseDefinition">
          <source>Get a <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the type (the class or structure) that contains the property.</source>
          <target state="translated">取得<ph id="ph1">&lt;xref:System.Type&gt;</ph>物件，代表包含屬性的型別 （類別或結構）。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MethodInfo.GetBaseDefinition">
          <source>If you are working with an object (an instance of a type), you can call its <ph id="ph1">&lt;xref:System.Object.GetType%2A&gt;</ph> method.</source>
          <target state="translated">如果您正在使用的物件 （類型的執行個體），您可以呼叫其<ph id="ph1">&lt;xref:System.Object.GetType%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MethodInfo.GetBaseDefinition">
          <source>Otherwise, you can use the C#  operator or the Visual Basic  operator, as the example illustrates.</source>
          <target state="translated">否則，您可以使用 C# 運算子或 Visual Basic 運算子，與範例說明。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MethodInfo.GetBaseDefinition">
          <source>Get a <ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph> object that represents the method in which you're interested.</source>
          <target state="translated">取得<ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph>物件，表示您感興趣的方法。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MethodInfo.GetBaseDefinition">
          <source>You can do this by getting an array of all methods from the <ph id="ph1">&lt;xref:System.Type.GetMethods%2A?displayProperty=nameWithType&gt;</ph> method and then iterating the elements in the array, or you can retrieve the <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> object that represents the method directly by calling the <ph id="ph3">&lt;xref:System.Type.GetMethod%28System.String%29?displayProperty=nameWithType&gt;</ph> method and specifying the method name.</source>
          <target state="translated">您可以藉由取得的所有方法，從陣列<ph id="ph1">&lt;xref:System.Type.GetMethods%2A?displayProperty=nameWithType&gt;</ph>方法，然後逐一查看的項目陣列，或者您可以擷取<ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph>物件表示的方法來直接呼叫<ph id="ph3">&lt;xref:System.Type.GetMethod%28System.String%29?displayProperty=nameWithType&gt;</ph>方法並指定方法名稱。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MethodInfo.GetBaseDefinition">
          <source>Call the <ph id="ph1">&lt;xref:System.Reflection.MethodInfo.GetBaseDefinition%2A&gt;</ph> method to get the value of the <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> object that represents the base method definition.</source>
          <target state="translated">呼叫<ph id="ph1">&lt;xref:System.Reflection.MethodInfo.GetBaseDefinition%2A&gt;</ph>方法來取得的值<ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph>表示基底方法定義的物件。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MethodInfo.GetBaseDefinition">
          <source>The following example demonstrates the behavior of the <ph id="ph1">&lt;xref:System.Reflection.MethodInfo.GetBaseDefinition%2A&gt;</ph> method.</source>
          <target state="translated">下列範例示範的行為<ph id="ph1">&lt;xref:System.Reflection.MethodInfo.GetBaseDefinition%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Reflection.MethodInfo.GetGenericArguments">
          <source>Returns an array of <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> objects that represent the type arguments of a generic method or the type parameters of a generic method definition.</source>
          <target state="translated">傳回 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 物件的陣列，這些物件代表泛型方法的類型引數，或泛型方法定義的類型參數。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Reflection.MethodInfo.GetGenericArguments">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> objects that represent the type arguments of a generic method or the type parameters of a generic method definition.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 物件的陣列，這些物件代表泛型方法的類型引數，或泛型方法定義的類型參數。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Reflection.MethodInfo.GetGenericArguments">
          <source>Returns an empty array if the current method is not a generic method.</source>
          <target state="translated">如果目前的方法不是泛型方法，則會傳回空白陣列。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MethodInfo.GetGenericArguments">
          <source>The elements of the returned array are in the order in which they appear in the list of type parameters for the generic method.</source>
          <target state="translated">傳回陣列中的項目會以其出現在清單中的泛型方法的型別參數的順序。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MethodInfo.GetGenericArguments">
          <source>If the current method is a closed constructed method (that is, the <ph id="ph1">&lt;xref:System.Reflection.MethodBase.ContainsGenericParameters%2A&gt;</ph> property returns <ph id="ph2">`false`</ph>), the array returned by the <ph id="ph3">&lt;xref:System.Reflection.MethodInfo.GetGenericArguments%2A&gt;</ph> method contains the types that have been assigned to the generic type parameters of the generic method definition.</source>
          <target state="translated">如果目前的方法為封閉式的建構的方法 (也就是<ph id="ph1">&lt;xref:System.Reflection.MethodBase.ContainsGenericParameters%2A&gt;</ph>屬性會傳回<ph id="ph2">`false`</ph>)，所傳回的陣列<ph id="ph3">&lt;xref:System.Reflection.MethodInfo.GetGenericArguments%2A&gt;</ph>方法包含已指派給之泛型方法的泛型類型參數的型別定義。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MethodInfo.GetGenericArguments">
          <source>If the current method is a generic method definition, the array contains the type parameters.</source>
          <target state="translated">如果目前的方法是泛型方法定義，陣列會包含型別參數。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MethodInfo.GetGenericArguments">
          <source>If the current method is an open constructed method (that is, the <ph id="ph1">&lt;xref:System.Reflection.MethodBase.ContainsGenericParameters%2A&gt;</ph> property returns <ph id="ph2">`true`</ph>) in which specific types have been assigned to some type parameters and type parameters of enclosing generic types have been assigned to other type parameters, the array contains both types and type parameters.</source>
          <target state="translated">如果目前的方法是開啟的建構的方法 (也就是<ph id="ph1">&lt;xref:System.Reflection.MethodBase.ContainsGenericParameters%2A&gt;</ph>屬性會傳回<ph id="ph2">`true`</ph>) 中的特定類型已指派給某些型別參數和型別封入泛型類型參數已指派給其他類型參數，此陣列包含型別和型別參數。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MethodInfo.GetGenericArguments">
          <source>Use the <ph id="ph1">&lt;xref:System.Type.IsGenericParameter%2A&gt;</ph> property to tell them apart.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Type.IsGenericParameter%2A&gt;</ph>屬性來區分它們。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MethodInfo.GetGenericArguments">
          <source>For a demonstration of this scenario, see the code example for the <ph id="ph1">&lt;xref:System.Reflection.MethodBase.ContainsGenericParameters%2A&gt;</ph> property.</source>
          <target state="translated">如需示範此案例中，請參閱的程式碼範例<ph id="ph1">&lt;xref:System.Reflection.MethodBase.ContainsGenericParameters%2A&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MethodInfo.GetGenericArguments">
          <source>For a list of the invariant conditions for terms specific to generic methods, see the <ph id="ph1">&lt;xref:System.Reflection.MethodBase.IsGenericMethod%2A&gt;</ph> property.</source>
          <target state="translated">非變異條件的詞彙與泛型方法的特定清單，請參閱<ph id="ph1">&lt;xref:System.Reflection.MethodBase.IsGenericMethod%2A&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MethodInfo.GetGenericArguments">
          <source>For a list of the invariant conditions for other terms used in generic reflection, see the <ph id="ph1">&lt;xref:System.Type.IsGenericType%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">如需其他用在反映中泛型的詞彙的非變異條件的清單，請參閱<ph id="ph1">&lt;xref:System.Type.IsGenericType%2A?displayProperty=nameWithType&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MethodInfo.GetGenericArguments">
          <source>The following code example shows how to get the type arguments of a generic method and display them.</source>
          <target state="translated">下列程式碼範例示範如何取得泛型方法的型別引數，並顯示它們。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MethodInfo.GetGenericArguments">
          <source>This example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Reflection.MethodInfo.MakeGenericMethod%2A&gt;</ph> method.</source>
          <target state="translated">這個範例是針對所提供之較大範例的一部分<ph id="ph1">&lt;xref:System.Reflection.MethodInfo.MakeGenericMethod%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Reflection.MethodInfo.GetGenericArguments">
          <source>This method is not supported.</source>
          <target state="translated">不支援這個方法。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Reflection.MethodInfo.GetGenericMethodDefinition">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> object that represents a generic method definition from which the current method can be constructed.</source>
          <target state="translated">傳回代表泛型方法定義的 <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> 物件，利用這個泛型方法定義就可以建構出目前的方法。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Reflection.MethodInfo.GetGenericMethodDefinition">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> object representing a generic method definition from which the current method can be constructed.</source>
          <target state="translated">傳回代表泛型方法定義的 <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> 物件，利用這個泛型方法定義就可以建構出目前的方法。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MethodInfo.GetGenericMethodDefinition">
          <source>A generic method definition is a template from which methods can be constructed.</source>
          <target state="translated">泛型方法定義是可用於建構方法的範本。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MethodInfo.GetGenericMethodDefinition">
          <source>For example, from the generic method definition <ph id="ph1">`T M&lt;T&gt;(T t)`</ph> (expressed in C# syntax; <ph id="ph2">`Function M(Of T)(ByVal tVal As T) As T`</ph> in Visual Basic) you can construct and invoke the method <ph id="ph3">`int M&lt;int&gt;(int t)`</ph> (<ph id="ph4">`Function M(Of Integer)(ByVal tVal As Integer) As Integer`</ph> in Visual Basic).</source>
          <target state="translated">例如，從泛型方法定義<ph id="ph1">`T M&lt;T&gt;(T t)`</ph>（以表示 C# 語法。<ph id="ph2">`Function M(Of T)(ByVal tVal As T) As T`</ph>在 Visual Basic 中) 您可以建構，並叫用方法<ph id="ph3">`int M&lt;int&gt;(int t)`</ph>(<ph id="ph4">`Function M(Of Integer)(ByVal tVal As Integer) As Integer`</ph>在 Visual Basic 中)。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MethodInfo.GetGenericMethodDefinition">
          <source>Given a <ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph> object representing this constructed method, the <ph id="ph2">&lt;xref:System.Reflection.MethodInfo.GetGenericMethodDefinition%2A&gt;</ph> method returns the generic method definition.</source>
          <target state="translated">指定<ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph>代表此物件之建構方法，<ph id="ph2">&lt;xref:System.Reflection.MethodInfo.GetGenericMethodDefinition%2A&gt;</ph>方法會傳回泛型方法定義。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MethodInfo.GetGenericMethodDefinition">
          <source>If two constructed methods are created from the same generic method definition, the <ph id="ph1">&lt;xref:System.Reflection.MethodInfo.GetGenericMethodDefinition%2A&gt;</ph> method returns the same <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> object for both methods.</source>
          <target state="translated">如果兩個建構的方法從相同的泛型方法定義中，建立<ph id="ph1">&lt;xref:System.Reflection.MethodInfo.GetGenericMethodDefinition%2A&gt;</ph>方法會傳回相同<ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph>這兩種方法的物件。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MethodInfo.GetGenericMethodDefinition">
          <source>If you call <ph id="ph1">&lt;xref:System.Reflection.MethodInfo.GetGenericMethodDefinition%2A&gt;</ph> on a <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that already represents a generic method definition, it returns the current <ph id="ph3">&lt;xref:System.Reflection.MethodInfo&gt;</ph>.</source>
          <target state="translated">如果您呼叫<ph id="ph1">&lt;xref:System.Reflection.MethodInfo.GetGenericMethodDefinition%2A&gt;</ph>上<ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph>已經代表泛型方法定義，它會傳回目前<ph id="ph3">&lt;xref:System.Reflection.MethodInfo&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MethodInfo.GetGenericMethodDefinition">
          <source>If a generic method definition includes generic parameters of the declaring type, there will be a generic method definition specific to each constructed type.</source>
          <target state="translated">如果是泛型方法定義包含宣告型別的泛型參數，會有泛型方法定義每個建構的類型所特有。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MethodInfo.GetGenericMethodDefinition">
          <source>For example, consider the following C#, Visual Basic, and C++ code:</source>
          <target state="translated">例如，請考慮下列 C#、 Visual Basic 和 c + + 程式碼：</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MethodInfo.GetGenericMethodDefinition">
          <source>In the constructed type <ph id="ph1">`C&lt;int&gt;`</ph> (<ph id="ph2">`C(Of Integer)`</ph> in Visual Basic), the generic method <ph id="ph3">`M`</ph> returns <ph id="ph4">`B&lt;int, S&gt;`</ph>.</source>
          <target state="translated">在建構類型中<ph id="ph1">`C&lt;int&gt;`</ph>(<ph id="ph2">`C(Of Integer)`</ph>在 Visual Basic 中)，泛型方法<ph id="ph3">`M`</ph>傳回<ph id="ph4">`B&lt;int, S&gt;`</ph>。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MethodInfo.GetGenericMethodDefinition">
          <source>In the open type <ph id="ph1">`C&lt;T&gt;`</ph>, <ph id="ph2">`M`</ph> returns <ph id="ph3">`B&lt;T, S&gt;`</ph>.</source>
          <target state="translated">在開放式類型<ph id="ph1">`C&lt;T&gt;`</ph>，<ph id="ph2">`M`</ph>傳回<ph id="ph3">`B&lt;T, S&gt;`</ph>。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MethodInfo.GetGenericMethodDefinition">
          <source>In both cases, the <ph id="ph1">&lt;xref:System.Reflection.MethodInfo.IsGenericMethodDefinition%2A&gt;</ph> property returns <ph id="ph2">`true`</ph> for the <ph id="ph3">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents <ph id="ph4">`M`</ph>, so <ph id="ph5">&lt;xref:System.Reflection.MethodInfo.MakeGenericMethod%2A&gt;</ph> can be called on both <ph id="ph6">&lt;xref:System.Reflection.MethodInfo&gt;</ph> objects.</source>
          <target state="translated">在這兩種情況下，<ph id="ph1">&lt;xref:System.Reflection.MethodInfo.IsGenericMethodDefinition%2A&gt;</ph>屬性會傳回<ph id="ph2">`true`</ph>如<ph id="ph3">&lt;xref:System.Reflection.MethodInfo&gt;</ph>表示<ph id="ph4">`M`</ph>，因此<ph id="ph5">&lt;xref:System.Reflection.MethodInfo.MakeGenericMethod%2A&gt;</ph>兩者都可以呼叫<ph id="ph6">&lt;xref:System.Reflection.MethodInfo&gt;</ph>物件。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MethodInfo.GetGenericMethodDefinition">
          <source>In the case of the constructed type, the result of calling <ph id="ph1">&lt;xref:System.Reflection.MethodInfo.MakeGenericMethod%2A&gt;</ph> is a <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that can be invoked.</source>
          <target state="translated">在建構的類型呼叫<ph id="ph1">&lt;xref:System.Reflection.MethodInfo.MakeGenericMethod%2A&gt;</ph>是<ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph>，可以叫用。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MethodInfo.GetGenericMethodDefinition">
          <source>In the case of the open type, the <ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph> returned by <ph id="ph2">&lt;xref:System.Reflection.MethodInfo.MakeGenericMethod%2A&gt;</ph> cannot be invoked.</source>
          <target state="translated">在開啟類型的情況下<ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph>傳回<ph id="ph2">&lt;xref:System.Reflection.MethodInfo.MakeGenericMethod%2A&gt;</ph>無法叫用。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MethodInfo.GetGenericMethodDefinition">
          <source>For a list of the invariant conditions for terms specific to generic methods, see the <ph id="ph1">&lt;xref:System.Reflection.MethodBase.IsGenericMethod%2A&gt;</ph> property.</source>
          <target state="translated">非變異條件的詞彙與泛型方法的特定清單，請參閱<ph id="ph1">&lt;xref:System.Reflection.MethodBase.IsGenericMethod%2A&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MethodInfo.GetGenericMethodDefinition">
          <source>For a list of the invariant conditions for other terms used in generic reflection, see the <ph id="ph1">&lt;xref:System.Type.IsGenericType%2A&gt;</ph> property.</source>
          <target state="translated">如需其他用在反映中泛型的詞彙的非變異條件的清單，請參閱<ph id="ph1">&lt;xref:System.Type.IsGenericType%2A&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MethodInfo.GetGenericMethodDefinition">
          <source>The following code example shows a class with a generic method and the code required to obtain a <ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph> for the method, bind the method to type arguments, and get the original generic type definition back from the bound method.</source>
          <target state="translated">下列程式碼範例示範具有泛型方法，以取得必要的程式碼的類別<ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph>方法，將繫結至型別引數，方法和原始的泛型類型定義會傳回繫結的方法。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MethodInfo.GetGenericMethodDefinition">
          <source>This example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Reflection.MethodInfo.MakeGenericMethod%2A&gt;</ph> method.</source>
          <target state="translated">這個範例是針對所提供之較大範例的一部分<ph id="ph1">&lt;xref:System.Reflection.MethodInfo.MakeGenericMethod%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Reflection.MethodInfo.GetGenericMethodDefinition">
          <source>The current method is not a generic method.</source>
          <target state="translated">目前的方法不是泛型方法。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Reflection.MethodInfo.GetGenericMethodDefinition">
          <source>That is, <ph id="ph1">&lt;see cref="P:System.Reflection.MethodInfo.IsGenericMethod" /&gt;</ph> returns <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">亦即，<ph id="ph1">&lt;see cref="P:System.Reflection.MethodInfo.IsGenericMethod" /&gt;</ph> 會傳回 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Reflection.MethodInfo.GetGenericMethodDefinition">
          <source>This method is not supported.</source>
          <target state="translated">不支援這個方法。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Reflection.MethodInfo.GetHashCode">
          <source>Returns the hash code for this instance.</source>
          <target state="translated">傳回這個執行個體的雜湊碼。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Reflection.MethodInfo.GetHashCode">
          <source>A 32-bit signed integer hash code.</source>
          <target state="translated">32 位元帶正負號的整數雜湊碼。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Reflection.MethodInfo.MakeGenericMethod(System.Type[])">
          <source>An array of types to be substituted for the type parameters of the current generic method definition.</source>
          <target state="translated">類型陣列，用來取代目前泛型方法定義的泛型類型。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Reflection.MethodInfo.MakeGenericMethod(System.Type[])">
          <source>Substitutes the elements of an array of types for the type parameters of the current generic method definition, and returns a <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> object representing the resulting constructed method.</source>
          <target state="translated">使用類型陣列的項目取代目前泛型方法定義的類型參數，並傳回代表所產生之建構方法的 <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> 物件。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Reflection.MethodInfo.MakeGenericMethod(System.Type[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> object that represents the constructed method formed by substituting the elements of <ph id="ph2">&lt;paramref name="typeArguments" /&gt;</ph> for the type parameters of the current generic method definition.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> 物件，代表用 <ph id="ph2">&lt;paramref name="typeArguments" /&gt;</ph> 的項目取代目前泛型方法定義之類型參數所得到的建構方法。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MethodInfo.MakeGenericMethod(System.Type[])">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.MethodInfo.MakeGenericMethod%2A&gt;</ph> method allows you to write code that assigns specific types to the type parameters of a generic method definition, thus creating a <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> object that represents a particular constructed method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.MethodInfo.MakeGenericMethod%2A&gt;</ph>方法可讓您撰寫程式碼，將特定類型指派給類型參數的泛型方法定義，以便建立<ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph>物件，代表特定的建構的方法。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MethodInfo.MakeGenericMethod(System.Type[])">
          <source>If the <ph id="ph1">&lt;xref:System.Reflection.MethodBase.ContainsGenericParameters%2A&gt;</ph> property of this <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> object returns <ph id="ph3">`true`</ph>, you can use it to invoke the method or to create a delegate to invoke the method.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Reflection.MethodBase.ContainsGenericParameters%2A&gt;</ph>屬性這<ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph>物件會傳回<ph id="ph3">`true`</ph>，您可以使用它叫用方法，或建立要叫用方法的委派。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MethodInfo.MakeGenericMethod(System.Type[])">
          <source>Methods constructed with the <ph id="ph1">&lt;xref:System.Reflection.MethodInfo.MakeGenericMethod%2A&gt;</ph> method can be open, that is, some of their type arguments can be type parameters of enclosing generic types.</source>
          <target state="translated">使用的方法建構<ph id="ph1">&lt;xref:System.Reflection.MethodInfo.MakeGenericMethod%2A&gt;</ph>方法可以在開啟，也就是其類型引數部分可以是封入泛型類型的型別參數。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MethodInfo.MakeGenericMethod(System.Type[])">
          <source>You might use such open constructed methods when you generate dynamic assemblies.</source>
          <target state="translated">當您產生動態組件時，您可以使用這類開放式建構的方法。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MethodInfo.MakeGenericMethod(System.Type[])">
          <source>For example, consider the following C#, Visual Basic, and C++ code.</source>
          <target state="translated">例如，請考慮下列 C#、 Visual Basic 和 c + + 程式碼。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MethodInfo.MakeGenericMethod(System.Type[])">
          <source>The method body of <ph id="ph1">`M`</ph> contains a call to method <ph id="ph2">`N`</ph>, specifying the type parameter of <ph id="ph3">`M`</ph> and the type <ph id="ph4">&lt;xref:System.Int32&gt;</ph>.</source>
          <target state="translated">方法主體<ph id="ph1">`M`</ph>包含方法的呼叫<ph id="ph2">`N`</ph>，指定的型別參數<ph id="ph3">`M`</ph>和型別<ph id="ph4">&lt;xref:System.Int32&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MethodInfo.MakeGenericMethod(System.Type[])">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.MethodBase.IsGenericMethodDefinition%2A&gt;</ph> property returns <ph id="ph2">`false`</ph> for method <ph id="ph3">`N&lt;V,int&gt;`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.MethodBase.IsGenericMethodDefinition%2A&gt;</ph>屬性會傳回<ph id="ph2">`false`</ph>方法<ph id="ph3">`N&lt;V,int&gt;`</ph>。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MethodInfo.MakeGenericMethod(System.Type[])">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.MethodBase.ContainsGenericParameters%2A&gt;</ph> property returns <ph id="ph2">`true`</ph>, so method <ph id="ph3">`N&lt;V,int&gt;`</ph> cannot be invoked.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.MethodBase.ContainsGenericParameters%2A&gt;</ph>屬性會傳回<ph id="ph2">`true`</ph>，因此方法<ph id="ph3">`N&lt;V,int&gt;`</ph>無法叫用。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MethodInfo.MakeGenericMethod(System.Type[])">
          <source>For a list of the invariant conditions for terms specific to generic methods, see the <ph id="ph1">&lt;xref:System.Reflection.MethodBase.IsGenericMethod%2A&gt;</ph> property.</source>
          <target state="translated">非變異條件的詞彙與泛型方法的特定清單，請參閱<ph id="ph1">&lt;xref:System.Reflection.MethodBase.IsGenericMethod%2A&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MethodInfo.MakeGenericMethod(System.Type[])">
          <source>For a list of the invariant conditions for other terms used in generic reflection, see the <ph id="ph1">&lt;xref:System.Type.IsGenericType%2A&gt;</ph> property.</source>
          <target state="translated">如需其他用在反映中泛型的詞彙的非變異條件的清單，請參閱<ph id="ph1">&lt;xref:System.Type.IsGenericType%2A&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MethodInfo.MakeGenericMethod(System.Type[])">
          <source>The following code example demonstrates the properties and methods of <ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that support the examination of generic methods.</source>
          <target state="translated">下列程式碼範例示範的屬性和方法的<ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph>支援泛型方法的檢查。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MethodInfo.MakeGenericMethod(System.Type[])">
          <source>The example does the following:</source>
          <target state="translated">此範例會執行下列動作：</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MethodInfo.MakeGenericMethod(System.Type[])">
          <source>Defines a class that has a generic method.</source>
          <target state="translated">定義具有泛型方法的類別。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MethodInfo.MakeGenericMethod(System.Type[])">
          <source>Creates a <ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents the generic method.</source>
          <target state="translated">建立<ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph>，代表泛型方法。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MethodInfo.MakeGenericMethod(System.Type[])">
          <source>Displays properties of the generic method definition.</source>
          <target state="translated">顯示和泛型方法定義的屬性。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MethodInfo.MakeGenericMethod(System.Type[])">
          <source>Assigns type arguments to the type parameters of the <ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph>, and invokes the resulting constructed generic method.</source>
          <target state="translated">指派輸入引數的型別參數<ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph>，並叫用 產生建構的泛型方法。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MethodInfo.MakeGenericMethod(System.Type[])">
          <source>Displays properties of the constructed generic method.</source>
          <target state="translated">顯示建構的泛型方法的屬性。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MethodInfo.MakeGenericMethod(System.Type[])">
          <source>Retrieves the generic method definition from the constructed method and compares it to the original definition.</source>
          <target state="translated">擷取建構方法的泛型方法定義，並將其比較原始定義。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Reflection.MethodInfo.MakeGenericMethod(System.Type[])">
          <source>The current <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> does not represent a generic method definition.</source>
          <target state="translated">目前的 <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> 並非表示泛型方法定義。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Reflection.MethodInfo.MakeGenericMethod(System.Type[])">
          <source>That is, <ph id="ph1">&lt;see cref="P:System.Reflection.MethodBase.IsGenericMethodDefinition" /&gt;</ph> returns <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">亦即，<ph id="ph1">&lt;see cref="P:System.Reflection.MethodBase.IsGenericMethodDefinition" /&gt;</ph> 會傳回 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Reflection.MethodInfo.MakeGenericMethod(System.Type[])">
          <source><ph id="ph1">&lt;paramref name="typeArguments" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="typeArguments" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Reflection.MethodInfo.MakeGenericMethod(System.Type[])">
          <source>-or-</source>
          <target state="translated">-或-</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Reflection.MethodInfo.MakeGenericMethod(System.Type[])">
          <source>Any element of <ph id="ph1">&lt;paramref name="typeArguments" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="typeArguments" /&gt;</ph> 的任何項目是 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Reflection.MethodInfo.MakeGenericMethod(System.Type[])">
          <source>The number of elements in <ph id="ph1">&lt;paramref name="typeArguments" /&gt;</ph> is not the same as the number of type parameters of the current generic method definition.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="typeArguments" /&gt;</ph> 中的項目個數與目前泛型方法定義中的型別參數個數不同。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Reflection.MethodInfo.MakeGenericMethod(System.Type[])">
          <source>-or-</source>
          <target state="translated">-或-</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Reflection.MethodInfo.MakeGenericMethod(System.Type[])">
          <source>An element of <ph id="ph1">&lt;paramref name="typeArguments" /&gt;</ph> does not satisfy the constraints specified for the corresponding type parameter of the current generic method definition.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="typeArguments" /&gt;</ph> 中的元素無法滿足針對目前泛型方法定義之對應型別參數所指定的條件約束。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Reflection.MethodInfo.MakeGenericMethod(System.Type[])">
          <source>This method is not supported.</source>
          <target state="translated">不支援這個方法。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="P:System.Reflection.MethodInfo.MemberType">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.Reflection.MemberTypes" /&gt;</ph> value indicating that this member is a method.</source>
          <target state="translated">取得 <ph id="ph1">&lt;see cref="T:System.Reflection.MemberTypes" /&gt;</ph> 值，表示這個成員為方法。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MethodInfo.MemberType">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MemberTypes" /&gt;</ph> value indicating that this member is a method.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.MemberTypes" /&gt;</ph> 值，表示這個成員為方法。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MethodInfo.MemberType">
          <source>This property overrides <ph id="ph1">&lt;xref:System.Reflection.MemberInfo.MemberType%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">這個屬性會覆寫<ph id="ph1">&lt;xref:System.Reflection.MemberInfo.MemberType%2A?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MethodInfo.MemberType">
          <source>Therefore, when you examine a set of <ph id="ph1">&lt;xref:System.Reflection.MemberInfo&gt;</ph> objects — for example, the array returned by <ph id="ph2">&lt;xref:System.Type.GetMembers%2A&gt;</ph> — the <ph id="ph3">&lt;xref:System.Reflection.MemberInfo.MemberType%2A&gt;</ph> property returns <ph id="ph4">&lt;xref:System.Reflection.MemberTypes.Method?displayProperty=nameWithType&gt;</ph> only when a given member is a method.</source>
          <target state="translated">因此，當您檢查一組<ph id="ph1">&lt;xref:System.Reflection.MemberInfo&gt;</ph>物件 — 例如，將所傳回的陣列<ph id="ph2">&lt;xref:System.Type.GetMembers%2A&gt;</ph>—<ph id="ph3">&lt;xref:System.Reflection.MemberInfo.MemberType%2A&gt;</ph>屬性會傳回<ph id="ph4">&lt;xref:System.Reflection.MemberTypes.Method?displayProperty=nameWithType&gt;</ph>只有當指定的成員是一種方法。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MethodInfo.MemberType">
          <source>To get the <ph id="ph1">`MemberType`</ph> property, first get the class <ph id="ph2">`Type`</ph>.</source>
          <target state="translated">若要取得<ph id="ph1">`MemberType`</ph>屬性，先取得類別<ph id="ph2">`Type`</ph>。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MethodInfo.MemberType">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">`MethodInfo`</ph>.</source>
          <target state="translated">從<ph id="ph1">`Type`</ph>，取得<ph id="ph2">`MethodInfo`</ph>。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MethodInfo.MemberType">
          <source>From the <ph id="ph1">`MethodInfo`</ph>, get the <ph id="ph2">`MemberType`</ph>.</source>
          <target state="translated">從<ph id="ph1">`MethodInfo`</ph>，取得<ph id="ph2">`MemberType`</ph>。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MethodInfo.MemberType">
          <source>The following example displays the type of the specified member.</source>
          <target state="translated">下列範例會顯示指定成員的型別。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Reflection.MethodInfo.op_Equality(System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
          <source>The first object to compare.</source>
          <target state="translated">要比較的第一個物件。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Reflection.MethodInfo.op_Equality(System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
          <source>The second object to compare.</source>
          <target state="translated">要比較的第二個物件。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Reflection.MethodInfo.op_Equality(System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
          <source>Indicates whether two <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> objects are equal.</source>
          <target state="translated">表示兩個 <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> 物件是否相等。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.Reflection.MethodInfo.op_Equality(System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="left" /&gt;</ph> is equal to <ph id="ph3">&lt;paramref name="right" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph1">&lt;see langword="true" /&gt;</ph> 等於 <ph id="ph2">&lt;paramref name="left" /&gt;</ph>，則為 <ph id="ph3">&lt;paramref name="right" /&gt;</ph>，否則為 <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Reflection.MethodInfo.op_Inequality(System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
          <source>The first object to compare.</source>
          <target state="translated">要比較的第一個物件。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.Reflection.MethodInfo.op_Inequality(System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
          <source>The second object to compare.</source>
          <target state="translated">要比較的第二個物件。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Reflection.MethodInfo.op_Inequality(System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
          <source>Indicates whether two <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> objects are not equal.</source>
          <target state="translated">表示兩個 <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> 物件是否不相等。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Reflection.MethodInfo.op_Inequality(System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="left" /&gt;</ph> is not equal to <ph id="ph3">&lt;paramref name="right" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph1">&lt;see langword="true" /&gt;</ph> 不等於 <ph id="ph2">&lt;paramref name="left" /&gt;</ph>，則為 <ph id="ph3">&lt;paramref name="right" /&gt;</ph>，否則為 <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="P:System.Reflection.MethodInfo.ReturnParameter">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.Reflection.ParameterInfo" /&gt;</ph> object that contains information about the return type of the method, such as whether the return type has custom modifiers.</source>
          <target state="translated">取得 <ph id="ph1">&lt;see cref="T:System.Reflection.ParameterInfo" /&gt;</ph> 物件，這個物件包含方法之傳回類型的相關資訊，例如傳回類型是否具有自訂修飾詞。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MethodInfo.ReturnParameter">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.ParameterInfo" /&gt;</ph> object that contains information about the return type.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.ParameterInfo" /&gt;</ph> 物件，包含傳回類型的相關資訊。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MethodInfo.ReturnParameter">
          <source>Compiler designers can use the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> object returned by this property to discover whether custom modifiers, such as <ph id="ph2">&lt;xref:Microsoft.VisualC.IsConstModifier&gt;</ph>, have been applied to the return type.</source>
          <target state="translated">編譯器設計人員可以使用<ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph>來探索是否自訂這個屬性所傳回的物件修飾詞，例如<ph id="ph2">&lt;xref:Microsoft.VisualC.IsConstModifier&gt;</ph>，已套用至傳回型別。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="P:System.Reflection.MethodInfo.ReturnParameter">
          <source>This method is not implemented.</source>
          <target state="translated">這個方法尚未實作。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="P:System.Reflection.MethodInfo.ReturnType">
          <source>Gets the return type of this method.</source>
          <target state="translated">取得這個方法的傳回型別 (Return Type)。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MethodInfo.ReturnType">
          <source>The return type of this method.</source>
          <target state="translated">這個方法的傳回型別。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MethodInfo.ReturnType">
          <source>To get the return type property, first get the class <ph id="ph1">`Type`</ph>.</source>
          <target state="translated">若要取得的傳回型別屬性，請先取得類別<ph id="ph1">`Type`</ph>。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MethodInfo.ReturnType">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">`MethodInfo`</ph>.</source>
          <target state="translated">從<ph id="ph1">`Type`</ph>，取得<ph id="ph2">`MethodInfo`</ph>。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MethodInfo.ReturnType">
          <source>From the <ph id="ph1">`MethodInfo`</ph>, get the <ph id="ph2">`ReturnType`</ph>.</source>
          <target state="translated">從<ph id="ph1">`MethodInfo`</ph>，取得<ph id="ph2">`ReturnType`</ph>。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MethodInfo.ReturnType">
          <source>The following example displays the return type of the specified method.</source>
          <target state="translated">下列範例會顯示指定之方法的傳回型別。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="P:System.Reflection.MethodInfo.ReturnTypeCustomAttributes">
          <source>Gets the custom attributes for the return type.</source>
          <target state="translated">取得傳回型別的自訂屬性。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MethodInfo.ReturnTypeCustomAttributes">
          <source>An <ph id="ph1">&lt;see langword="ICustomAttributeProvider" /&gt;</ph> object representing the custom attributes for the return type.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="ICustomAttributeProvider" /&gt;</ph> 物件，代表傳回類型的自訂屬性。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Reserved for future use.</source>
          <target state="translated">保留供未來使用。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="M:System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Must be IID_NULL.</source>
          <target state="translated">必須是 IID_NULL。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Passed-in array of names to be mapped.</source>
          <target state="translated">要對應之傳入的名稱陣列。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Count of the names to be mapped.</source>
          <target state="translated">要對應的名稱計數。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>The locale context in which to interpret the names.</source>
          <target state="translated">用於解譯名稱的地區設定內容。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Caller-allocated array that receives the IDs corresponding to the names.</source>
          <target state="translated">呼叫端配置的陣列，用於接收對應於名稱的 ID。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="M:System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Maps a set of names to a corresponding set of dispatch identifiers.</source>
          <target state="translated">將一組名稱對應至一組對應的分派識別項 (Dispatch Identifier)。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">這個方法會從 unmanaged 程式碼，是對存取 managed 類別，並不應該從 managed 程式碼呼叫。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::GetIDsOfNames`</ph>, see the MSDN Library.</source>
          <target state="translated">如需有關<ph id="ph1">`IDispatch::GetIDsOfNames`</ph>，請參閱 MSDN Library。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">不支援使用 COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> 介面進行晚期繫結的存取。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetType">
          <source>Provides access to the <ph id="ph1">&lt;see cref="M:System.Object.GetType" /&gt;</ph> method from COM.</source>
          <target state="translated">提供 COM 之 <ph id="ph1">&lt;see cref="M:System.Object.GetType" /&gt;</ph> 方法的存取。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetType">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object representing the <ph id="ph2">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> type.</source>
          <target state="translated">代表 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 類型的 <ph id="ph2">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> 物件。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>The type information to return.</source>
          <target state="translated">要傳回的類型資訊。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>The locale identifier for the type information.</source>
          <target state="translated">類型資訊的地區設定識別項。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Receives a pointer to the requested type information object.</source>
          <target state="translated">接收要求的類型資訊物件的指標。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Retrieves the type information for an object, which can be used to get the type information for an interface.</source>
          <target state="translated">擷取物件的類型資訊，可以用來取得介面的類型資訊。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">這個方法會從 unmanaged 程式碼，是對存取 managed 類別，並不應該從 managed 程式碼呼叫。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::GetTypeInfo`</ph>, see the MSDN Library.</source>
          <target state="translated">如需有關<ph id="ph1">`IDispatch::GetTypeInfo`</ph>，請參閱 MSDN Library。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="M:System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">不支援使用 COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> 介面進行晚期繫結的存取。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="M:System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetTypeInfoCount(System.UInt32@)">
          <source>Points to a location that receives the number of type information interfaces provided by the object.</source>
          <target state="translated">指向接收物件提供的類型資訊介面數目的位置。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" uid="M:System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetTypeInfoCount(System.UInt32@)">
          <source>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</source>
          <target state="translated">擷取物件提供的類型資訊介面數目 (0 或 1)。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetTypeInfoCount(System.UInt32@)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">這個方法會從 unmanaged 程式碼，是對存取 managed 類別，並不應該從 managed 程式碼呼叫。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetTypeInfoCount(System.UInt32@)">
          <source>For more information about <ph id="ph1">`IDispatch::GetTypeInfoCount`</ph>, see the MSDN Library.</source>
          <target state="translated">如需有關<ph id="ph1">`IDispatch::GetTypeInfoCount`</ph>，請參閱 MSDN Library。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="M:System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetTypeInfoCount(System.UInt32@)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">不支援使用 COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> 介面進行晚期繫結的存取。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Identifies the member.</source>
          <target state="translated">辨識成員。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Reserved for future use.</source>
          <target state="translated">保留供未來使用。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="M:System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Must be IID_NULL.</source>
          <target state="translated">必須是 IID_NULL。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" uid="M:System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>The locale context in which to interpret arguments.</source>
          <target state="translated">地區設定內容，用於解譯引數。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="M:System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Flags describing the context of the call.</source>
          <target state="translated">描述呼叫之內容的旗標。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" uid="M:System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</source>
          <target state="translated">結構的指標，此結構包含引數陣列、指名引數之 DISPID 引數的陣列，以及陣列中項目數目的計數。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to the location where the result is to be stored.</source>
          <target state="translated">指向用於儲存結果之位置的指標。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to a structure that contains exception information.</source>
          <target state="translated">包含例外狀況資訊的結構指標。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>The index of the first argument that has an error.</source>
          <target state="translated">第一個有錯誤的引數索引。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Provides access to properties and methods exposed by an object.</source>
          <target state="translated">提供物件所公開的屬性和方法的存取權。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">這個方法會從 unmanaged 程式碼，是對存取 managed 類別，並不應該從 managed 程式碼呼叫。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::Invoke`</ph>, see the MSDN Library.</source>
          <target state="translated">如需有關<ph id="ph1">`IDispatch::Invoke`</ph>，請參閱 MSDN Library。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">不支援使用 COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> 介面進行晚期繫結的存取。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>