<Type Name="MethodInfo" FullName="System.Reflection.MethodInfo">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1db341516e40895b598e4179337fa6c67cfc445c" />
    <Meta Name="ms.sourcegitcommit" Value="1465f1a9bce3970cd9e95769eaa641b92a0a22d5" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/18/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class MethodInfo : System.Reflection.MethodBase, System.Runtime.InteropServices._MethodInfo" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit MethodInfo extends System.Reflection.MethodBase implements class System.Runtime.InteropServices._MethodInfo" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.MethodInfo" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class MethodInfo&#xA;Inherits MethodBase&#xA;Implements _MethodInfo" />
  <TypeSignature Language="C++ CLI" Value="public ref class MethodInfo abstract : System::Reflection::MethodBase, System::Runtime::InteropServices::_MethodInfo" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Reflection.MethodBase</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.InteropServices._MethodInfo</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._MethodInfo))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="4ad9f-101">探索方法的屬性 (Attribute) 並提供方法中繼資料 (Metadata) 的存取。</span>
      <span class="sxs-lookup">
        <span data-stu-id="4ad9f-101">Discovers the attributes of a method and provides access to method metadata.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4ad9f-102"><xref:System.Reflection.MethodInfo>類別代表類型的方法。</span><span class="sxs-lookup"><span data-stu-id="4ad9f-102">The <xref:System.Reflection.MethodInfo> class represents a method of a type.</span></span> <span data-ttu-id="4ad9f-103">您可以使用<xref:System.Reflection.MethodInfo>來取得此物件表示方法的相關資訊，並叫用方法的物件。</span><span class="sxs-lookup"><span data-stu-id="4ad9f-103">You can use a <xref:System.Reflection.MethodInfo> object to obtain information about the method that the object represents and to invoke the method.</span></span> <span data-ttu-id="4ad9f-104">例如: </span><span class="sxs-lookup"><span data-stu-id="4ad9f-104">For example:</span></span>  
  
-   <span data-ttu-id="4ad9f-105">您可以擷取的值來決定方法的可見性<xref:System.Reflection.MethodBase.IsFamilyAndAssembly%2A>， <xref:System.Reflection.MethodBase.IsFamilyOrAssembly%2A>， <xref:System.Reflection.MethodBase.IsPrivate%2A>，和<xref:System.Reflection.MethodBase.IsPublic%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="4ad9f-105">You can determine the method's visibility by retrieving the values of the <xref:System.Reflection.MethodBase.IsFamilyAndAssembly%2A>, <xref:System.Reflection.MethodBase.IsFamilyOrAssembly%2A>, <xref:System.Reflection.MethodBase.IsPrivate%2A>, and <xref:System.Reflection.MethodBase.IsPublic%2A> properties.</span></span>  
  
-   <span data-ttu-id="4ad9f-106">您可以探索哪些屬性套用至該方法所擷取的值<xref:System.Reflection.MethodBase.Attributes%2A>屬性或呼叫<xref:System.Reflection.Assembly.GetCustomAttributes%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="4ad9f-106">You can discover what attributes are applied to the method by retrieving the value of the <xref:System.Reflection.MethodBase.Attributes%2A> property or calling the <xref:System.Reflection.Assembly.GetCustomAttributes%2A> method.</span></span>  
  
-   <span data-ttu-id="4ad9f-107">您可以決定是否該方法是泛型的方法、 開啟建構的泛型方法，或關閉建構的泛型方法，擷取的值<xref:System.Reflection.MethodBase.IsGenericMethod%2A>和<xref:System.Reflection.MethodBase.ContainsGenericParameters%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="4ad9f-107">You can determine whether the method is a generic method, an open constructed generic method, or a closed constructed generic method, by retrieving the values of the <xref:System.Reflection.MethodBase.IsGenericMethod%2A> and <xref:System.Reflection.MethodBase.ContainsGenericParameters%2A> properties.</span></span>  
  
-   <span data-ttu-id="4ad9f-108">您可以取得該方法之參數的相關資訊，並傳回型別從<xref:System.Reflection.MethodBase.GetParameters%2A>方法和<xref:System.Reflection.MethodInfo.ReturnParameter%2A>， <xref:System.Reflection.MethodInfo.ReturnType%2A>，和<xref:System.Reflection.MethodInfo.ReturnTypeCustomAttributes%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="4ad9f-108">You can get information about the method's parameters and return type from the <xref:System.Reflection.MethodBase.GetParameters%2A> method and the <xref:System.Reflection.MethodInfo.ReturnParameter%2A>, <xref:System.Reflection.MethodInfo.ReturnType%2A>, and <xref:System.Reflection.MethodInfo.ReturnTypeCustomAttributes%2A> properties.</span></span>  
  
-   <span data-ttu-id="4ad9f-109">您可以藉由呼叫類別的執行個體上執行方法<xref:System.Reflection.MethodBase.Invoke%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="4ad9f-109">You can execute a method on a class instance by calling the <xref:System.Reflection.MethodBase.Invoke%2A> method.</span></span>  
  
-   <span data-ttu-id="4ad9f-110">您可以具現化<xref:System.Reflection.MethodInfo>物件，代表從一個代表藉由呼叫泛型方法定義建構的泛型方法<xref:System.Reflection.MethodInfo.MakeGenericMethod%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="4ad9f-110">You can instantiate a <xref:System.Reflection.MethodInfo> object that represents a constructed generic method from one that represents a generic method definition by calling the <xref:System.Reflection.MethodInfo.MakeGenericMethod%2A> method.</span></span>  
  
 <span data-ttu-id="4ad9f-111">您可以具現化<xref:System.Reflection.MethodInfo>藉由呼叫的執行個體<xref:System.Type.GetMethods%2A?displayProperty=nameWithType>或<xref:System.Type.GetMethod%2A?displayProperty=nameWithType>方法，或藉由呼叫<xref:System.Reflection.MethodInfo.MakeGenericMethod%2A?displayProperty=nameWithType>方法<xref:System.Reflection.MethodInfo>物件，代表泛型方法定義。</span><span class="sxs-lookup"><span data-stu-id="4ad9f-111">You can instantiate a <xref:System.Reflection.MethodInfo> instances by calling the <xref:System.Type.GetMethods%2A?displayProperty=nameWithType> or <xref:System.Type.GetMethod%2A?displayProperty=nameWithType> method, or by calling the <xref:System.Reflection.MethodInfo.MakeGenericMethod%2A?displayProperty=nameWithType> method of a <xref:System.Reflection.MethodInfo> object that represents a generic method definition.</span></span>  
  
 <span data-ttu-id="4ad9f-112">非變異條件的詞彙與泛型方法的特定清單，請參閱<xref:System.Reflection.MethodBase.IsGenericMethod%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="4ad9f-112">For a list of the invariant conditions for terms specific to generic methods, see the <xref:System.Reflection.MethodBase.IsGenericMethod%2A> property.</span></span> <span data-ttu-id="4ad9f-113">如需其他用在反映中泛型的詞彙的非變異條件的清單，請參閱<xref:System.Type.IsGenericType%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="4ad9f-113">For a list of the invariant conditions for other terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property.</span></span>  
  
 ]]></format>
    </remarks>
    <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">
      <span data-ttu-id="4ad9f-114">針對繼承者完全信任。</span>
      <span class="sxs-lookup">
        <span data-stu-id="4ad9f-114">for full trust for inheritors.</span>
      </span>
      <span data-ttu-id="4ad9f-115">這個類別無法被繼承，部分信任程式碼。</span>
      <span class="sxs-lookup">
        <span data-stu-id="4ad9f-115">This class cannot be inherited by partially trusted code.</span>
      </span>
    </permission>
    <threadsafe>
      <span data-ttu-id="4ad9f-116">此型別具備執行緒安全。</span>
      <span class="sxs-lookup">
        <span data-stu-id="4ad9f-116">This type is thread safe.</span>
      </span>
    </threadsafe>
    <block subset="none" type="overrides">
      <para>
        <span data-ttu-id="4ad9f-117">當您繼承自<see cref="T:System.Reflection.MethodInfo" />，您必須覆寫<see cref="M:System.Reflection.MethodInfo.GetBaseDefinition" />， <see cref="P:System.Reflection.MethodInfo.ReturnType" />， <see cref="P:System.Reflection.MethodInfo.ReturnTypeCustomAttributes" />， <see cref="M:System.Reflection.MethodBase.GetParameters" />， <see cref="M:System.Reflection.MethodBase.GetMethodImplementationFlags" />， <see cref="P:System.Reflection.MethodBase.MethodHandle" />， <see cref="P:System.Reflection.MethodBase.Attributes" />， <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" />， <see cref="P:System.Reflection.MemberInfo.Name" />， <see cref="P:System.Reflection.MemberInfo.MemberType" />， <see cref="P:System.Reflection.MemberInfo.DeclaringType" />， <see cref="P:System.Reflection.MemberInfo.ReflectedType" />， <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" />， <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)" />，和<see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" />。</span>
        <span class="sxs-lookup">
          <span data-stu-id="4ad9f-117">When you inherit from <see cref="T:System.Reflection.MethodInfo" />, you must override <see cref="M:System.Reflection.MethodInfo.GetBaseDefinition" />, <see cref="P:System.Reflection.MethodInfo.ReturnType" />, <see cref="P:System.Reflection.MethodInfo.ReturnTypeCustomAttributes" />, <see cref="M:System.Reflection.MethodBase.GetParameters" />, <see cref="M:System.Reflection.MethodBase.GetMethodImplementationFlags" />, <see cref="P:System.Reflection.MethodBase.MethodHandle" />, <see cref="P:System.Reflection.MethodBase.Attributes" />, <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" />, <see cref="P:System.Reflection.MemberInfo.Name" />, <see cref="P:System.Reflection.MemberInfo.MemberType" />, <see cref="P:System.Reflection.MemberInfo.DeclaringType" />, <see cref="P:System.Reflection.MemberInfo.ReflectedType" />, <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" />, <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)" />, and <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" />.</span>
        </span>
      </para>
    </block>
    <altmember cref="Overload:System.Type.GetMethods" />
    <altmember cref="Overload:System.Type.GetMethod" />
    <altmember cref="P:System.Reflection.MethodBase.IsGenericMethod" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MethodInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MethodInfo.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; MethodInfo();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="4ad9f-118">初始化 <see cref="T:System.Reflection.MethodInfo" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ad9f-118">Initializes a new instance of the <see cref="T:System.Reflection.MethodInfo" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateDelegate">
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="4ad9f-119">從這個方法建立委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ad9f-119">Creates a delegate from this method.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public virtual Delegate CreateDelegate (Type delegateType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Delegate CreateDelegate(class System.Type delegateType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MethodInfo.CreateDelegate(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateDelegate (delegateType As Type) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Delegate ^ CreateDelegate(Type ^ delegateType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="delegateType">
          <span data-ttu-id="4ad9f-120">要建立之委派的類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ad9f-120">The type of the delegate to create.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4ad9f-121">從這個方法建立所指定類型的委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ad9f-121">Creates a delegate of the specified type from this method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4ad9f-122">這個方法的委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ad9f-122">The delegate for this method.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public virtual Delegate CreateDelegate (Type delegateType, object target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Delegate CreateDelegate(class System.Type delegateType, object target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MethodInfo.CreateDelegate(System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateDelegate (delegateType As Type, target As Object) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Delegate ^ CreateDelegate(Type ^ delegateType, System::Object ^ target);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="target" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="delegateType">
          <span data-ttu-id="4ad9f-123">要建立之委派的類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ad9f-123">The type of the delegate to create.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="4ad9f-124">委派的目標物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ad9f-124">The object targeted by the delegate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4ad9f-125">從這個方法以指定的目標建立所指定類型的委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ad9f-125">Creates a delegate of the specified type with the specified target from this method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4ad9f-126">這個方法的委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ad9f-126">The delegate for this method.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MethodInfo.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._MethodInfo.Equals(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="4ad9f-127">與這個執行個體相比較的物件，或 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ad9f-127">An object to compare with this instance, or <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4ad9f-128">傳回值，這個值指出此執行個體是否與指定的物件相等。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ad9f-128">Returns a value that indicates whether this instance is equal to a specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4ad9f-129">如果 <see langword="true" /> 和這個執行個體具有相同的類型和值，則為 <paramref name="obj" />否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ad9f-129">
              <see langword="true" /> if <paramref name="obj" /> equals the type and value of this instance; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBaseDefinition">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.MethodInfo GetBaseDefinition ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetBaseDefinition() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MethodInfo.GetBaseDefinition" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetBaseDefinition () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Reflection::MethodInfo ^ GetBaseDefinition();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._MethodInfo.GetBaseDefinition</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="4ad9f-130">在衍生類別中覆寫時，為直接或間接基底類別 (也就是這個執行個體所代表的方法第一次被宣告的地方) 中的方法傳回 <see cref="T:System.Reflection.MethodInfo" /> 物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ad9f-130">When overridden in a derived class, returns the <see cref="T:System.Reflection.MethodInfo" /> object for the method on the direct or indirect base class in which the method represented by this instance was first declared.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4ad9f-131">這個方法首次實作的 <see cref="T:System.Reflection.MethodInfo" /> 物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ad9f-131">A <see cref="T:System.Reflection.MethodInfo" /> object for the first implementation of this method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4ad9f-132"><xref:System.Reflection.MethodInfo.GetBaseDefinition%2A>方法會傳回指定之方法的第一個定義中的類別階層。</span><span class="sxs-lookup"><span data-stu-id="4ad9f-132">The <xref:System.Reflection.MethodInfo.GetBaseDefinition%2A> method returns the first definition of the specified method in the class hierarchy.</span></span> <span data-ttu-id="4ad9f-133">您可以判斷在其擷取的值所找到之方法的第一個定義的型別<xref:System.Reflection.MemberInfo.DeclaringType%2A>屬性傳回的<xref:System.Reflection.MethodInfo>物件。</span><span class="sxs-lookup"><span data-stu-id="4ad9f-133">You can determine the type on which the first definition of the method is found by retrieving the value of the <xref:System.Reflection.MemberInfo.DeclaringType%2A> property on the returned <xref:System.Reflection.MethodInfo> object.</span></span>  
  
 <span data-ttu-id="4ad9f-134"><xref:System.Reflection.MethodInfo.GetBaseDefinition%2A>方法的行為，如下所示：</span><span class="sxs-lookup"><span data-stu-id="4ad9f-134">The <xref:System.Reflection.MethodInfo.GetBaseDefinition%2A> method behaves as follows:</span></span>  
  
-   <span data-ttu-id="4ad9f-135">如果目前<xref:System.Reflection.MethodInfo>物件都代表介面實作，<xref:System.Reflection.MethodInfo.GetBaseDefinition%2A>方法會傳回目前<xref:System.Reflection.MethodInfo>物件。</span><span class="sxs-lookup"><span data-stu-id="4ad9f-135">If the current <xref:System.Reflection.MethodInfo> object represents an interface implementation, the <xref:System.Reflection.MethodInfo.GetBaseDefinition%2A> method returns the current <xref:System.Reflection.MethodInfo> object.</span></span>  
  
-   <span data-ttu-id="4ad9f-136">如果目前<xref:System.Reflection.MethodInfo>物件代表的方法，會覆寫虛擬基底類別，定義<xref:System.Reflection.MethodInfo.GetBaseDefinition%2A>方法會傳回<xref:System.Reflection.MethodInfo>物件，表示虛擬的定義。</span><span class="sxs-lookup"><span data-stu-id="4ad9f-136">If the current <xref:System.Reflection.MethodInfo> object represents a method that overrides a virtual definition in a base class, the <xref:System.Reflection.MethodInfo.GetBaseDefinition%2A> method returns a <xref:System.Reflection.MethodInfo> object that represents the virtual definition.</span></span>  
  
-   <span data-ttu-id="4ad9f-137">如果目前<xref:System.Reflection.MethodInfo>物件代表的方法，以指定`new`關鍵字在 C# 或`Shadows`關鍵字在 Visual Basic 中的 (在`newslot`中所述，[一般類型系統](~/docs/standard/base-types/common-type-system.md))， <xref:System.Reflection.MethodInfo.GetBaseDefinition%2A>方法會傳回目前<xref:System.Reflection.MethodInfo>物件。</span><span class="sxs-lookup"><span data-stu-id="4ad9f-137">If the current <xref:System.Reflection.MethodInfo> object represents a method that is specified with the `new` keyword in C# or the `Shadows` keyword in Visual Basic (as in `newslot`, as described in [Common Type System](~/docs/standard/base-types/common-type-system.md)), the <xref:System.Reflection.MethodInfo.GetBaseDefinition%2A> method returns the current <xref:System.Reflection.MethodInfo> object.</span></span>  
  
-   <span data-ttu-id="4ad9f-138">如果目前<xref:System.Reflection.MethodInfo>物件都代表繼承的方法 （也就是目前的方法不會提供它自己的實作），<xref:System.Reflection.MethodInfo.GetBaseDefinition%2A>方法會傳回<xref:System.Reflection.MethodInfo>物件，代表在類別階層中最低的方法。</span><span class="sxs-lookup"><span data-stu-id="4ad9f-138">If the current <xref:System.Reflection.MethodInfo> object represents an inherited method (that is, the current method does not provide its own implementation), the <xref:System.Reflection.MethodInfo.GetBaseDefinition%2A> method returns a <xref:System.Reflection.MethodInfo> object that represents the lowest method in the class hierarchy.</span></span> <span data-ttu-id="4ad9f-139">比方說，如果`Base.ToString`會覆寫`Object.ToString`，和`Derived.ToString`會覆寫`Base.ToString`，則呼叫<xref:System.Reflection.MethodInfo.GetBaseDefinition%2A>方法上的<xref:System.Reflection.MethodInfo>物件，代表`Derived.ToString`傳回<xref:System.Reflection.MethodInfo>表示物件`Object.ToString`.</span><span class="sxs-lookup"><span data-stu-id="4ad9f-139">For example, if `Base.ToString` overrides `Object.ToString`, and `Derived.ToString` overrides `Base.ToString`, calling the <xref:System.Reflection.MethodInfo.GetBaseDefinition%2A> method on a <xref:System.Reflection.MethodInfo> object that represents `Derived.ToString` returns a <xref:System.Reflection.MethodInfo> object that represents `Object.ToString`.</span></span>  
  
-   <span data-ttu-id="4ad9f-140">如果目前<xref:System.Reflection.MethodInfo>物件代表的方法，不存在於任何基底類別，<xref:System.Reflection.MethodInfo.GetBaseDefinition%2A>方法會傳回目前<xref:System.Reflection.MethodInfo>物件。</span><span class="sxs-lookup"><span data-stu-id="4ad9f-140">If the current <xref:System.Reflection.MethodInfo> object represents a method that is not present in any base class, the <xref:System.Reflection.MethodInfo.GetBaseDefinition%2A> method returns the current <xref:System.Reflection.MethodInfo> object.</span></span>  
  
 <span data-ttu-id="4ad9f-141">您可以判斷是否目前的方法覆寫基底類別中的方法藉由呼叫<xref:System.Reflection.MethodInfo.GetBaseDefinition%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="4ad9f-141">You can determine whether the current method overrides a method in a base class by calling the <xref:System.Reflection.MethodInfo.GetBaseDefinition%2A> method.</span></span> <span data-ttu-id="4ad9f-142">下列範例會實作`IsOverride`此方法。</span><span class="sxs-lookup"><span data-stu-id="4ad9f-142">The following example implements an `IsOverride` method that does this.</span></span>  
  
 [!code-csharp[system.reflection.methodinfo.getbasedefinition#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.reflection.methodinfo.getbasedefinition/cs/IsOverride1.cs#2)]
 [!code-vb[system.reflection.methodinfo.getbasedefinition#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.reflection.methodinfo.getbasedefinition/vb/IsOverride1.vb#2)]  
  
 <span data-ttu-id="4ad9f-143">若要呼叫`GetBaseDefinition`方法：</span><span class="sxs-lookup"><span data-stu-id="4ad9f-143">To call the `GetBaseDefinition` method:</span></span>  
  
1.  <span data-ttu-id="4ad9f-144">取得<xref:System.Type>物件，代表包含屬性的型別 （類別或結構）。</span><span class="sxs-lookup"><span data-stu-id="4ad9f-144">Get a <xref:System.Type> object that represents the type (the class or structure) that contains the property.</span></span> <span data-ttu-id="4ad9f-145">如果您正在使用的物件 （類型的執行個體），您可以呼叫其<xref:System.Object.GetType%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="4ad9f-145">If you are working with an object (an instance of a type), you can call its <xref:System.Object.GetType%2A> method.</span></span> <span data-ttu-id="4ad9f-146">否則，您可以使用 C# 運算子或 Visual Basic 運算子，與範例說明。</span><span class="sxs-lookup"><span data-stu-id="4ad9f-146">Otherwise, you can use the C#  operator or the Visual Basic  operator, as the example illustrates.</span></span>  
  
2.  <span data-ttu-id="4ad9f-147">取得<xref:System.Reflection.MethodInfo>物件，表示您感興趣的方法。</span><span class="sxs-lookup"><span data-stu-id="4ad9f-147">Get a <xref:System.Reflection.MethodInfo> object that represents the method in which you're interested.</span></span> <span data-ttu-id="4ad9f-148">您可以藉由取得的所有方法，從陣列<xref:System.Type.GetMethods%2A?displayProperty=nameWithType>方法，然後逐一查看的項目陣列，或者您可以擷取<xref:System.Reflection.MethodInfo>物件表示的方法來直接呼叫<xref:System.Type.GetMethod%28System.String%29?displayProperty=nameWithType>方法並指定方法名稱。</span><span class="sxs-lookup"><span data-stu-id="4ad9f-148">You can do this by getting an array of all methods from the <xref:System.Type.GetMethods%2A?displayProperty=nameWithType> method and then iterating the elements in the array, or you can retrieve the <xref:System.Reflection.MethodInfo> object that represents the method directly by calling the <xref:System.Type.GetMethod%28System.String%29?displayProperty=nameWithType> method and specifying the method name.</span></span>  
  
3.  <span data-ttu-id="4ad9f-149">呼叫<xref:System.Reflection.MethodInfo.GetBaseDefinition%2A>方法來取得的值<xref:System.Reflection.MethodInfo>表示基底方法定義的物件。</span><span class="sxs-lookup"><span data-stu-id="4ad9f-149">Call the <xref:System.Reflection.MethodInfo.GetBaseDefinition%2A> method to get the value of the <xref:System.Reflection.MethodInfo> object that represents the base method definition.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4ad9f-150">下列範例示範的行為<xref:System.Reflection.MethodInfo.GetBaseDefinition%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="4ad9f-150">The following example demonstrates the behavior of the <xref:System.Reflection.MethodInfo.GetBaseDefinition%2A> method.</span></span>  
  
 [!code-csharp[System.Reflection.MethodInfo.GetBaseDefinition#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.reflection.methodinfo.getbasedefinition/cs/getbasedefinition1.cs#1)]
 [!code-vb[System.Reflection.MethodInfo.GetBaseDefinition#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.reflection.methodinfo.getbasedefinition/vb/getbasedefinition1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetGenericArguments">
      <MemberSignature Language="C#" Value="public override Type[] GetGenericArguments ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type[] GetGenericArguments() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MethodInfo.GetGenericArguments" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetGenericArguments () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;Type ^&gt; ^ GetGenericArguments();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="4ad9f-151">傳回 <see cref="T:System.Type" /> 物件的陣列，這些物件代表泛型方法的類型引數，或泛型方法定義的類型參數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ad9f-151">Returns an array of <see cref="T:System.Type" /> objects that represent the type arguments of a generic method or the type parameters of a generic method definition.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4ad9f-152">
            <see cref="T:System.Type" /> 物件的陣列，這些物件代表泛型方法的類型引數，或泛型方法定義的類型參數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ad9f-152">An array of <see cref="T:System.Type" /> objects that represent the type arguments of a generic method or the type parameters of a generic method definition.</span>
          </span>
          <span data-ttu-id="4ad9f-153">如果目前的方法不是泛型方法，則會傳回空白陣列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ad9f-153">Returns an empty array if the current method is not a generic method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4ad9f-154">傳回陣列中的項目會以其出現在清單中的泛型方法的型別參數的順序。</span><span class="sxs-lookup"><span data-stu-id="4ad9f-154">The elements of the returned array are in the order in which they appear in the list of type parameters for the generic method.</span></span>  
  
-   <span data-ttu-id="4ad9f-155">如果目前的方法為封閉式的建構的方法 (也就是<xref:System.Reflection.MethodBase.ContainsGenericParameters%2A>屬性會傳回`false`)，所傳回的陣列<xref:System.Reflection.MethodInfo.GetGenericArguments%2A>方法包含已指派給之泛型方法的泛型類型參數的型別定義。</span><span class="sxs-lookup"><span data-stu-id="4ad9f-155">If the current method is a closed constructed method (that is, the <xref:System.Reflection.MethodBase.ContainsGenericParameters%2A> property returns `false`), the array returned by the <xref:System.Reflection.MethodInfo.GetGenericArguments%2A> method contains the types that have been assigned to the generic type parameters of the generic method definition.</span></span>  
  
-   <span data-ttu-id="4ad9f-156">如果目前的方法是泛型方法定義，陣列會包含型別參數。</span><span class="sxs-lookup"><span data-stu-id="4ad9f-156">If the current method is a generic method definition, the array contains the type parameters.</span></span>  
  
-   <span data-ttu-id="4ad9f-157">如果目前的方法是開啟的建構的方法 (也就是<xref:System.Reflection.MethodBase.ContainsGenericParameters%2A>屬性會傳回`true`) 中的特定類型已指派給某些型別參數和型別封入泛型類型參數已指派給其他類型參數，此陣列包含型別和型別參數。</span><span class="sxs-lookup"><span data-stu-id="4ad9f-157">If the current method is an open constructed method (that is, the <xref:System.Reflection.MethodBase.ContainsGenericParameters%2A> property returns `true`) in which specific types have been assigned to some type parameters and type parameters of enclosing generic types have been assigned to other type parameters, the array contains both types and type parameters.</span></span> <span data-ttu-id="4ad9f-158">使用<xref:System.Type.IsGenericParameter%2A>屬性來區分它們。</span><span class="sxs-lookup"><span data-stu-id="4ad9f-158">Use the <xref:System.Type.IsGenericParameter%2A> property to tell them apart.</span></span> <span data-ttu-id="4ad9f-159">如需示範此案例中，請參閱的程式碼範例<xref:System.Reflection.MethodBase.ContainsGenericParameters%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="4ad9f-159">For a demonstration of this scenario, see the code example for the <xref:System.Reflection.MethodBase.ContainsGenericParameters%2A> property.</span></span>  
  
 <span data-ttu-id="4ad9f-160">非變異條件的詞彙與泛型方法的特定清單，請參閱<xref:System.Reflection.MethodBase.IsGenericMethod%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="4ad9f-160">For a list of the invariant conditions for terms specific to generic methods, see the <xref:System.Reflection.MethodBase.IsGenericMethod%2A> property.</span></span> <span data-ttu-id="4ad9f-161">如需其他用在反映中泛型的詞彙的非變異條件的清單，請參閱<xref:System.Type.IsGenericType%2A?displayProperty=nameWithType>屬性。</span><span class="sxs-lookup"><span data-stu-id="4ad9f-161">For a list of the invariant conditions for other terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A?displayProperty=nameWithType> property.</span></span>  
  
## Examples  
 <span data-ttu-id="4ad9f-162">下列程式碼範例示範如何取得泛型方法的型別引數，並顯示它們。</span><span class="sxs-lookup"><span data-stu-id="4ad9f-162">The following code example shows how to get the type arguments of a generic method and display them.</span></span>  
  
 <span data-ttu-id="4ad9f-163">這個範例是針對所提供之較大範例的一部分<xref:System.Reflection.MethodInfo.MakeGenericMethod%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="4ad9f-163">This example is part of a larger example provided for the <xref:System.Reflection.MethodInfo.MakeGenericMethod%2A> method.</span></span>  
  
 [!code-cpp[MethodInfo.Generics#8](~/samples/snippets/cpp/VS_Snippets_CLR/MethodInfo.Generics/cpp/source.cpp#8)]
 [!code-csharp[MethodInfo.Generics#8](~/samples/snippets/csharp/VS_Snippets_CLR/MethodInfo.Generics/CS/source.cs#8)]
 [!code-vb[MethodInfo.Generics#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodInfo.Generics/VB/source.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="4ad9f-164">不支援這個方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ad9f-164">This method is not supported.</span>
          </span>
        </exception>
        <altmember cref="P:System.Reflection.MethodBase.IsGenericMethod" />
        <altmember cref="P:System.Reflection.MethodBase.IsGenericMethodDefinition" />
        <altmember cref="M:System.Reflection.MethodInfo.GetGenericMethodDefinition" />
        <altmember cref="P:System.Type.IsGenericType" />
      </Docs>
    </Member>
    <Member MemberName="GetGenericMethodDefinition">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodInfo GetGenericMethodDefinition ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetGenericMethodDefinition() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MethodInfo.GetGenericMethodDefinition" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGenericMethodDefinition () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetGenericMethodDefinition();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="4ad9f-165">傳回代表泛型方法定義的 <see cref="T:System.Reflection.MethodInfo" /> 物件，利用這個泛型方法定義就可以建構出目前的方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ad9f-165">Returns a <see cref="T:System.Reflection.MethodInfo" /> object that represents a generic method definition from which the current method can be constructed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4ad9f-166">傳回代表泛型方法定義的 <see cref="T:System.Reflection.MethodInfo" /> 物件，利用這個泛型方法定義就可以建構出目前的方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ad9f-166">A <see cref="T:System.Reflection.MethodInfo" /> object representing a generic method definition from which the current method can be constructed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4ad9f-167">泛型方法定義是可用於建構方法的範本。</span><span class="sxs-lookup"><span data-stu-id="4ad9f-167">A generic method definition is a template from which methods can be constructed.</span></span> <span data-ttu-id="4ad9f-168">例如，從泛型方法定義`T M<T>(T t)`（以表示 C# 語法。`Function M(Of T)(ByVal tVal As T) As T`在 Visual Basic 中) 您可以建構，並叫用方法`int M<int>(int t)`(`Function M(Of Integer)(ByVal tVal As Integer) As Integer`在 Visual Basic 中)。</span><span class="sxs-lookup"><span data-stu-id="4ad9f-168">For example, from the generic method definition `T M<T>(T t)` (expressed in C# syntax; `Function M(Of T)(ByVal tVal As T) As T` in Visual Basic) you can construct and invoke the method `int M<int>(int t)` (`Function M(Of Integer)(ByVal tVal As Integer) As Integer` in Visual Basic).</span></span> <span data-ttu-id="4ad9f-169">指定<xref:System.Reflection.MethodInfo>代表此物件之建構方法，<xref:System.Reflection.MethodInfo.GetGenericMethodDefinition%2A>方法會傳回泛型方法定義。</span><span class="sxs-lookup"><span data-stu-id="4ad9f-169">Given a <xref:System.Reflection.MethodInfo> object representing this constructed method, the <xref:System.Reflection.MethodInfo.GetGenericMethodDefinition%2A> method returns the generic method definition.</span></span>  
  
 <span data-ttu-id="4ad9f-170">如果兩個建構的方法從相同的泛型方法定義中，建立<xref:System.Reflection.MethodInfo.GetGenericMethodDefinition%2A>方法會傳回相同<xref:System.Reflection.MethodInfo>這兩種方法的物件。</span><span class="sxs-lookup"><span data-stu-id="4ad9f-170">If two constructed methods are created from the same generic method definition, the <xref:System.Reflection.MethodInfo.GetGenericMethodDefinition%2A> method returns the same <xref:System.Reflection.MethodInfo> object for both methods.</span></span>  
  
 <span data-ttu-id="4ad9f-171">如果您呼叫<xref:System.Reflection.MethodInfo.GetGenericMethodDefinition%2A>上<xref:System.Reflection.MethodInfo>已經代表泛型方法定義，它會傳回目前<xref:System.Reflection.MethodInfo>。</span><span class="sxs-lookup"><span data-stu-id="4ad9f-171">If you call <xref:System.Reflection.MethodInfo.GetGenericMethodDefinition%2A> on a <xref:System.Reflection.MethodInfo> that already represents a generic method definition, it returns the current <xref:System.Reflection.MethodInfo>.</span></span>  
  
 <span data-ttu-id="4ad9f-172">如果是泛型方法定義包含宣告型別的泛型參數，會有泛型方法定義每個建構的類型所特有。</span><span class="sxs-lookup"><span data-stu-id="4ad9f-172">If a generic method definition includes generic parameters of the declaring type, there will be a generic method definition specific to each constructed type.</span></span> <span data-ttu-id="4ad9f-173">例如，請考慮下列 C#、 Visual Basic 和 c + + 程式碼：</span><span class="sxs-lookup"><span data-stu-id="4ad9f-173">For example, consider the following C#, Visual Basic, and C++ code:</span></span>  
  
```  
class B<U,V> {}  
class C<T> { public B<T,S> M<S>() {...}}  
  
Class B(Of U, V)  
End Class  
Class C(Of T)  
    Public Function M(Of S)() As B(Of T, S)  
        ...  
    End Function  
End Class   
  
generic <typename U, typename V> ref class B {};  
generic <typename T> ref class C  
{  
public:  
    generic <typename S> B<T,S>^ M() {...};  
};  
```  
  
 <span data-ttu-id="4ad9f-174">在建構類型中`C<int>`(`C(Of Integer)`在 Visual Basic 中)，泛型方法`M`傳回`B<int, S>`。</span><span class="sxs-lookup"><span data-stu-id="4ad9f-174">In the constructed type `C<int>` (`C(Of Integer)` in Visual Basic), the generic method `M` returns `B<int, S>`.</span></span> <span data-ttu-id="4ad9f-175">在開放式類型`C<T>`，`M`傳回`B<T, S>`。</span><span class="sxs-lookup"><span data-stu-id="4ad9f-175">In the open type `C<T>`, `M` returns `B<T, S>`.</span></span> <span data-ttu-id="4ad9f-176">在這兩種情況下，<xref:System.Reflection.MethodBase.IsGenericMethodDefinition%2A>屬性會傳回`true`如<xref:System.Reflection.MethodInfo>表示`M`，因此<xref:System.Reflection.MethodInfo.MakeGenericMethod%2A>兩者都可以呼叫<xref:System.Reflection.MethodInfo>物件。</span><span class="sxs-lookup"><span data-stu-id="4ad9f-176">In both cases, the <xref:System.Reflection.MethodBase.IsGenericMethodDefinition%2A> property returns `true` for the <xref:System.Reflection.MethodInfo> that represents `M`, so <xref:System.Reflection.MethodInfo.MakeGenericMethod%2A> can be called on both <xref:System.Reflection.MethodInfo> objects.</span></span> <span data-ttu-id="4ad9f-177">在建構的類型呼叫<xref:System.Reflection.MethodInfo.MakeGenericMethod%2A>是<xref:System.Reflection.MethodInfo>，可以叫用。</span><span class="sxs-lookup"><span data-stu-id="4ad9f-177">In the case of the constructed type, the result of calling <xref:System.Reflection.MethodInfo.MakeGenericMethod%2A> is a <xref:System.Reflection.MethodInfo> that can be invoked.</span></span> <span data-ttu-id="4ad9f-178">在開啟類型的情況下<xref:System.Reflection.MethodInfo>傳回<xref:System.Reflection.MethodInfo.MakeGenericMethod%2A>無法叫用。</span><span class="sxs-lookup"><span data-stu-id="4ad9f-178">In the case of the open type, the <xref:System.Reflection.MethodInfo> returned by <xref:System.Reflection.MethodInfo.MakeGenericMethod%2A> cannot be invoked.</span></span>  
  
 <span data-ttu-id="4ad9f-179">非變異條件的詞彙與泛型方法的特定清單，請參閱<xref:System.Reflection.MethodBase.IsGenericMethod%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="4ad9f-179">For a list of the invariant conditions for terms specific to generic methods, see the <xref:System.Reflection.MethodBase.IsGenericMethod%2A> property.</span></span> <span data-ttu-id="4ad9f-180">如需其他用在反映中泛型的詞彙的非變異條件的清單，請參閱<xref:System.Type.IsGenericType%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="4ad9f-180">For a list of the invariant conditions for other terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4ad9f-181">下列程式碼範例示範具有泛型方法，以取得必要的程式碼的類別<xref:System.Reflection.MethodInfo>方法，將繫結至型別引數，方法和原始的泛型類型定義會傳回繫結的方法。</span><span class="sxs-lookup"><span data-stu-id="4ad9f-181">The following code example shows a class with a generic method and the code required to obtain a <xref:System.Reflection.MethodInfo> for the method, bind the method to type arguments, and get the original generic type definition back from the bound method.</span></span>  
  
 <span data-ttu-id="4ad9f-182">這個範例是針對所提供之較大範例的一部分<xref:System.Reflection.MethodInfo.MakeGenericMethod%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="4ad9f-182">This example is part of a larger example provided for the <xref:System.Reflection.MethodInfo.MakeGenericMethod%2A> method.</span></span>  
  
 [!code-cpp[MethodInfo.Generics#2](~/samples/snippets/cpp/VS_Snippets_CLR/MethodInfo.Generics/cpp/source.cpp#2)]
 [!code-csharp[MethodInfo.Generics#2](~/samples/snippets/csharp/VS_Snippets_CLR/MethodInfo.Generics/CS/source.cs#2)]
 [!code-vb[MethodInfo.Generics#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodInfo.Generics/VB/source.vb#2)]  
[!code-cpp[MethodInfo.Generics#3](~/samples/snippets/cpp/VS_Snippets_CLR/MethodInfo.Generics/cpp/source.cpp#3)]
[!code-csharp[MethodInfo.Generics#3](~/samples/snippets/csharp/VS_Snippets_CLR/MethodInfo.Generics/CS/source.cs#3)]
[!code-vb[MethodInfo.Generics#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodInfo.Generics/VB/source.vb#3)]  
[!code-cpp[MethodInfo.Generics#4](~/samples/snippets/cpp/VS_Snippets_CLR/MethodInfo.Generics/cpp/source.cpp#4)]
[!code-csharp[MethodInfo.Generics#4](~/samples/snippets/csharp/VS_Snippets_CLR/MethodInfo.Generics/CS/source.cs#4)]
[!code-vb[MethodInfo.Generics#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodInfo.Generics/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="4ad9f-183">目前的方法不是泛型方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ad9f-183">The current method is not a generic method.</span>
          </span>
          <span data-ttu-id="4ad9f-184">亦即，<see cref="P:System.Reflection.MethodBase.IsGenericMethod" /> 會傳回 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ad9f-184">That is, <see cref="P:System.Reflection.MethodBase.IsGenericMethod" /> returns <see langword="false" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="4ad9f-185">不支援這個方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ad9f-185">This method is not supported.</span>
          </span>
        </exception>
        <altmember cref="M:System.Reflection.MethodInfo.MakeGenericMethod(System.Type[])" />
        <altmember cref="P:System.Reflection.MethodBase.IsGenericMethod" />
        <altmember cref="P:System.Reflection.MethodBase.IsGenericMethodDefinition" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MethodInfo.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._MethodInfo.GetHashCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="4ad9f-186">傳回這個執行個體的雜湊碼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ad9f-186">Returns the hash code for this instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4ad9f-187">32 位元帶正負號的整數雜湊碼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ad9f-187">A 32-bit signed integer hash code.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeGenericMethod">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodInfo MakeGenericMethod (params Type[] typeArguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo MakeGenericMethod(class System.Type[] typeArguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MethodInfo.MakeGenericMethod(System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MakeGenericMethod (ParamArray typeArguments As Type()) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ MakeGenericMethod(... cli::array &lt;Type ^&gt; ^ typeArguments);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeArguments" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="typeArguments">
          <span data-ttu-id="4ad9f-188">類型陣列，用來取代目前泛型方法定義的泛型類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ad9f-188">An array of types to be substituted for the type parameters of the current generic method definition.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4ad9f-189">使用類型陣列的項目取代目前泛型方法定義的類型參數，並傳回代表所產生之建構方法的 <see cref="T:System.Reflection.MethodInfo" /> 物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ad9f-189">Substitutes the elements of an array of types for the type parameters of the current generic method definition, and returns a <see cref="T:System.Reflection.MethodInfo" /> object representing the resulting constructed method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4ad9f-190">
            <see cref="T:System.Reflection.MethodInfo" /> 物件，代表用 <paramref name="typeArguments" /> 的項目取代目前泛型方法定義之類型參數所得到的建構方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ad9f-190">A <see cref="T:System.Reflection.MethodInfo" /> object that represents the constructed method formed by substituting the elements of <paramref name="typeArguments" /> for the type parameters of the current generic method definition.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4ad9f-191"><xref:System.Reflection.MethodInfo.MakeGenericMethod%2A>方法可讓您撰寫程式碼，將特定類型指派給類型參數的泛型方法定義，以便建立<xref:System.Reflection.MethodInfo>物件，代表特定的建構的方法。</span><span class="sxs-lookup"><span data-stu-id="4ad9f-191">The <xref:System.Reflection.MethodInfo.MakeGenericMethod%2A> method allows you to write code that assigns specific types to the type parameters of a generic method definition, thus creating a <xref:System.Reflection.MethodInfo> object that represents a particular constructed method.</span></span> <span data-ttu-id="4ad9f-192">如果<xref:System.Reflection.MethodBase.ContainsGenericParameters%2A>屬性這<xref:System.Reflection.MethodInfo>物件會傳回`true`，您可以使用它叫用方法，或建立要叫用方法的委派。</span><span class="sxs-lookup"><span data-stu-id="4ad9f-192">If the <xref:System.Reflection.MethodBase.ContainsGenericParameters%2A> property of this <xref:System.Reflection.MethodInfo> object returns `true`, you can use it to invoke the method or to create a delegate to invoke the method.</span></span>  
  
 <span data-ttu-id="4ad9f-193">使用的方法建構<xref:System.Reflection.MethodInfo.MakeGenericMethod%2A>方法可以在開啟，也就是其類型引數部分可以是封入泛型類型的型別參數。</span><span class="sxs-lookup"><span data-stu-id="4ad9f-193">Methods constructed with the <xref:System.Reflection.MethodInfo.MakeGenericMethod%2A> method can be open, that is, some of their type arguments can be type parameters of enclosing generic types.</span></span> <span data-ttu-id="4ad9f-194">當您產生動態組件時，您可以使用這類開放式建構的方法。</span><span class="sxs-lookup"><span data-stu-id="4ad9f-194">You might use such open constructed methods when you generate dynamic assemblies.</span></span> <span data-ttu-id="4ad9f-195">例如，請考慮下列 C#、 Visual Basic 和 c + + 程式碼。</span><span class="sxs-lookup"><span data-stu-id="4ad9f-195">For example, consider the following C#, Visual Basic, and C++ code.</span></span>  
  
```  
class C  
{  
    T N<T,U>(T t, U u) {...}  
    public V M<V>(V v)  
    {  
        return N<V,int>(v, 42);  
    }  
}  
  
Class C  
    Public Function N(Of T,U)(ByVal ta As T, ByVal ua As U) As T  
        ...  
    End Function  
    Public Function M(Of V)(ByVal va As V ) As V  
        Return N(Of V, Integer)(va, 42)  
    End Function  
End Class  
  
ref class C  
{  
private:  
    generic <typename T, typename U> T N(T t, U u) {...}  
public:  
    generic <typename V> V M(V v)  
    {  
        return N<V, int>(v, 42);  
    }  
};  
```  
  
 <span data-ttu-id="4ad9f-196">方法主體`M`包含方法的呼叫`N`，指定的型別參數`M`和型別<xref:System.Int32>。</span><span class="sxs-lookup"><span data-stu-id="4ad9f-196">The method body of `M` contains a call to method `N`, specifying the type parameter of `M` and the type <xref:System.Int32>.</span></span> <span data-ttu-id="4ad9f-197"><xref:System.Reflection.MethodBase.IsGenericMethodDefinition%2A>屬性會傳回`false`方法`N<V,int>`。</span><span class="sxs-lookup"><span data-stu-id="4ad9f-197">The <xref:System.Reflection.MethodBase.IsGenericMethodDefinition%2A> property returns `false` for method `N<V,int>`.</span></span> <span data-ttu-id="4ad9f-198"><xref:System.Reflection.MethodBase.ContainsGenericParameters%2A>屬性會傳回`true`，因此方法`N<V,int>`無法叫用。</span><span class="sxs-lookup"><span data-stu-id="4ad9f-198">The <xref:System.Reflection.MethodBase.ContainsGenericParameters%2A> property returns `true`, so method `N<V,int>` cannot be invoked.</span></span>  
  
 <span data-ttu-id="4ad9f-199">非變異條件的詞彙與泛型方法的特定清單，請參閱<xref:System.Reflection.MethodBase.IsGenericMethod%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="4ad9f-199">For a list of the invariant conditions for terms specific to generic methods, see the <xref:System.Reflection.MethodBase.IsGenericMethod%2A> property.</span></span> <span data-ttu-id="4ad9f-200">如需其他用在反映中泛型的詞彙的非變異條件的清單，請參閱<xref:System.Type.IsGenericType%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="4ad9f-200">For a list of the invariant conditions for other terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4ad9f-201">下列程式碼範例示範的屬性和方法的<xref:System.Reflection.MethodInfo>支援泛型方法的檢查。</span><span class="sxs-lookup"><span data-stu-id="4ad9f-201">The following code example demonstrates the properties and methods of <xref:System.Reflection.MethodInfo> that support the examination of generic methods.</span></span> <span data-ttu-id="4ad9f-202">此範例會執行下列動作：</span><span class="sxs-lookup"><span data-stu-id="4ad9f-202">The example does the following:</span></span>  
  
-   <span data-ttu-id="4ad9f-203">定義具有泛型方法的類別。</span><span class="sxs-lookup"><span data-stu-id="4ad9f-203">Defines a class that has a generic method.</span></span>  
  
-   <span data-ttu-id="4ad9f-204">建立<xref:System.Reflection.MethodInfo>，代表泛型方法。</span><span class="sxs-lookup"><span data-stu-id="4ad9f-204">Creates a <xref:System.Reflection.MethodInfo> that represents the generic method.</span></span>  
  
-   <span data-ttu-id="4ad9f-205">顯示和泛型方法定義的屬性。</span><span class="sxs-lookup"><span data-stu-id="4ad9f-205">Displays properties of the generic method definition.</span></span>  
  
-   <span data-ttu-id="4ad9f-206">指派輸入引數的型別參數<xref:System.Reflection.MethodInfo>，並叫用 產生建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="4ad9f-206">Assigns type arguments to the type parameters of the <xref:System.Reflection.MethodInfo>, and invokes the resulting constructed generic method.</span></span>  
  
-   <span data-ttu-id="4ad9f-207">顯示建構的泛型方法的屬性。</span><span class="sxs-lookup"><span data-stu-id="4ad9f-207">Displays properties of the constructed generic method.</span></span>  
  
-   <span data-ttu-id="4ad9f-208">擷取建構方法的泛型方法定義，並將其比較原始定義。</span><span class="sxs-lookup"><span data-stu-id="4ad9f-208">Retrieves the generic method definition from the constructed method and compares it to the original definition.</span></span>  
  
 [!code-cpp[MethodInfo.Generics#1](~/samples/snippets/cpp/VS_Snippets_CLR/MethodInfo.Generics/cpp/source.cpp#1)]
 [!code-csharp[MethodInfo.Generics#1](~/samples/snippets/csharp/VS_Snippets_CLR/MethodInfo.Generics/CS/source.cs#1)]
 [!code-vb[MethodInfo.Generics#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodInfo.Generics/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="4ad9f-209">目前的 <see cref="T:System.Reflection.MethodInfo" /> 並非表示泛型方法定義。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ad9f-209">The current <see cref="T:System.Reflection.MethodInfo" /> does not represent a generic method definition.</span>
          </span>
          <span data-ttu-id="4ad9f-210">亦即，<see cref="P:System.Reflection.MethodBase.IsGenericMethodDefinition" /> 會傳回 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ad9f-210">That is, <see cref="P:System.Reflection.MethodBase.IsGenericMethodDefinition" /> returns <see langword="false" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4ad9f-211">
            <paramref name="typeArguments" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ad9f-211">
              <paramref name="typeArguments" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="4ad9f-212">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ad9f-212">-or-</span>
          </span>
          <span data-ttu-id="4ad9f-213">
            <paramref name="typeArguments" /> 的任何項目是 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ad9f-213">Any element of <paramref name="typeArguments" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4ad9f-214">
            <paramref name="typeArguments" /> 中的項目個數與目前泛型方法定義中的型別參數個數不同。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ad9f-214">The number of elements in <paramref name="typeArguments" /> is not the same as the number of type parameters of the current generic method definition.</span>
          </span>
          <span data-ttu-id="4ad9f-215">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ad9f-215">-or-</span>
          </span>
          <span data-ttu-id="4ad9f-216">
            <paramref name="typeArguments" /> 中的元素無法滿足針對目前泛型方法定義之對應型別參數所指定的條件約束。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ad9f-216">An element of <paramref name="typeArguments" /> does not satisfy the constraints specified for the corresponding type parameter of the current generic method definition.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="4ad9f-217">不支援這個方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ad9f-217">This method is not supported.</span>
          </span>
        </exception>
        <altmember cref="P:System.Reflection.MethodBase.IsGenericMethodDefinition" />
        <altmember cref="M:System.Reflection.MethodInfo.GetGenericMethodDefinition" />
      </Docs>
    </Member>
    <Member MemberName="MemberType">
      <MemberSignature Language="C#" Value="public override System.Reflection.MemberTypes MemberType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.MemberTypes MemberType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodInfo.MemberType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property MemberType As MemberTypes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MemberTypes MemberType { System::Reflection::MemberTypes get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._MethodInfo.MemberType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4ad9f-218">取得 <see cref="T:System.Reflection.MemberTypes" /> 值，表示這個成員為方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ad9f-218">Gets a <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is a method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4ad9f-219">
            <see cref="T:System.Reflection.MemberTypes" /> 值，表示這個成員為方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ad9f-219">A <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is a method.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4ad9f-220">這個屬性會覆寫<xref:System.Reflection.MemberInfo.MemberType%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="4ad9f-220">This property overrides <xref:System.Reflection.MemberInfo.MemberType%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="4ad9f-221">因此，當您檢查一組<xref:System.Reflection.MemberInfo>物件 — 例如，將所傳回的陣列<xref:System.Type.GetMembers%2A>—<xref:System.Reflection.MemberInfo.MemberType%2A>屬性會傳回<xref:System.Reflection.MemberTypes.Method?displayProperty=nameWithType>只有當指定的成員是一種方法。</span><span class="sxs-lookup"><span data-stu-id="4ad9f-221">Therefore, when you examine a set of <xref:System.Reflection.MemberInfo> objects — for example, the array returned by <xref:System.Type.GetMembers%2A> — the <xref:System.Reflection.MemberInfo.MemberType%2A> property returns <xref:System.Reflection.MemberTypes.Method?displayProperty=nameWithType> only when a given member is a method.</span></span>  
  
 <span data-ttu-id="4ad9f-222">若要取得`MemberType`屬性，先取得類別`Type`。</span><span class="sxs-lookup"><span data-stu-id="4ad9f-222">To get the `MemberType` property, first get the class `Type`.</span></span> <span data-ttu-id="4ad9f-223">從`Type`，取得`MethodInfo`。</span><span class="sxs-lookup"><span data-stu-id="4ad9f-223">From the `Type`, get the `MethodInfo`.</span></span> <span data-ttu-id="4ad9f-224">從`MethodInfo`，取得`MemberType`。</span><span class="sxs-lookup"><span data-stu-id="4ad9f-224">From the `MethodInfo`, get the `MemberType`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4ad9f-225">下列範例會顯示指定成員的型別。</span><span class="sxs-lookup"><span data-stu-id="4ad9f-225">The following example displays the type of the specified member.</span></span>  
  
 [!code-cpp[Classic MethodInfo.MemberType Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic MethodInfo.MemberType Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MethodInfo.MemberType Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic MethodInfo.MemberType Example/CS/source.cs#1)]
 [!code-vb[Classic MethodInfo.MemberType Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic MethodInfo.MemberType Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Reflection.MethodInfo left, System.Reflection.MethodInfo right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Reflection.MethodInfo left, class System.Reflection.MethodInfo right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MethodInfo.op_Equality(System.Reflection.MethodInfo,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As MethodInfo, right As MethodInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Reflection::MethodInfo ^ left, System::Reflection::MethodInfo ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Reflection.MethodInfo" />
        <Parameter Name="right" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="4ad9f-226">要比較的第一個物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ad9f-226">The first object to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="4ad9f-227">要比較的第二個物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ad9f-227">The second object to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4ad9f-228">表示兩個 <see cref="T:System.Reflection.MethodInfo" /> 物件是否相等。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ad9f-228">Indicates whether two <see cref="T:System.Reflection.MethodInfo" /> objects are equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4ad9f-229">如果 <see langword="true" /> 等於 <paramref name="left" />，則為 <paramref name="right" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ad9f-229">
              <see langword="true" /> if <paramref name="left" /> is equal to <paramref name="right" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Reflection.MethodInfo left, System.Reflection.MethodInfo right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Reflection.MethodInfo left, class System.Reflection.MethodInfo right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MethodInfo.op_Inequality(System.Reflection.MethodInfo,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As MethodInfo, right As MethodInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Reflection::MethodInfo ^ left, System::Reflection::MethodInfo ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Reflection.MethodInfo" />
        <Parameter Name="right" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="4ad9f-230">要比較的第一個物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ad9f-230">The first object to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="4ad9f-231">要比較的第二個物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ad9f-231">The second object to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4ad9f-232">表示兩個 <see cref="T:System.Reflection.MethodInfo" /> 物件是否不相等。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ad9f-232">Indicates whether two <see cref="T:System.Reflection.MethodInfo" /> objects are not equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4ad9f-233">如果 <see langword="true" /> 不等於 <paramref name="left" />，則為 <paramref name="right" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ad9f-233">
              <see langword="true" /> if <paramref name="left" /> is not equal to <paramref name="right" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReturnParameter">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.ParameterInfo ReturnParameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.ParameterInfo ReturnParameter" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodInfo.ReturnParameter" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ReturnParameter As ParameterInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::ParameterInfo ^ ReturnParameter { System::Reflection::ParameterInfo ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ParameterInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4ad9f-234">取得 <see cref="T:System.Reflection.ParameterInfo" /> 物件，這個物件包含方法之傳回類型的相關資訊，例如傳回類型是否具有自訂修飾詞。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ad9f-234">Gets a <see cref="T:System.Reflection.ParameterInfo" /> object that contains information about the return type of the method, such as whether the return type has custom modifiers.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4ad9f-235">
            <see cref="T:System.Reflection.ParameterInfo" /> 物件，包含傳回類型的相關資訊。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ad9f-235">A <see cref="T:System.Reflection.ParameterInfo" /> object that contains information about the return type.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4ad9f-236">編譯器設計人員可以使用<xref:System.Reflection.ParameterInfo>來探索是否自訂這個屬性所傳回的物件修飾詞，例如<xref:Microsoft.VisualC.IsConstModifier>，已套用至傳回型別。</span><span class="sxs-lookup"><span data-stu-id="4ad9f-236">Compiler designers can use the <xref:System.Reflection.ParameterInfo> object returned by this property to discover whether custom modifiers, such as <xref:Microsoft.VisualC.IsConstModifier>, have been applied to the return type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="4ad9f-237">這個方法尚未實作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ad9f-237">This method is not implemented.</span>
          </span>
        </exception>
        <altmember cref="M:System.Reflection.ParameterInfo.GetOptionalCustomModifiers" />
        <altmember cref="M:System.Reflection.ParameterInfo.GetRequiredCustomModifiers" />
      </Docs>
    </Member>
    <Member MemberName="ReturnType">
      <MemberSignature Language="C#" Value="public virtual Type ReturnType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ReturnType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodInfo.ReturnType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ReturnType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ ReturnType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._MethodInfo.ReturnType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4ad9f-238">取得這個方法的傳回型別 (Return Type)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ad9f-238">Gets the return type of this method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4ad9f-239">這個方法的傳回型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ad9f-239">The return type of this method.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4ad9f-240">若要取得的傳回型別屬性，請先取得類別`Type`。</span><span class="sxs-lookup"><span data-stu-id="4ad9f-240">To get the return type property, first get the class `Type`.</span></span> <span data-ttu-id="4ad9f-241">從`Type`，取得`MethodInfo`。</span><span class="sxs-lookup"><span data-stu-id="4ad9f-241">From the `Type`, get the `MethodInfo`.</span></span> <span data-ttu-id="4ad9f-242">從`MethodInfo`，取得`ReturnType`。</span><span class="sxs-lookup"><span data-stu-id="4ad9f-242">From the `MethodInfo`, get the `ReturnType`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4ad9f-243">下列範例會顯示指定之方法的傳回型別。</span><span class="sxs-lookup"><span data-stu-id="4ad9f-243">The following example displays the return type of the specified method.</span></span>  
  
 [!code-cpp[Classic MethodInfo.ReturnType Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic MethodInfo.ReturnType Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MethodInfo.ReturnType Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic MethodInfo.ReturnType Example/CS/source.cs#1)]
 [!code-vb[Classic MethodInfo.ReturnType Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic MethodInfo.ReturnType Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReturnTypeCustomAttributes">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.ICustomAttributeProvider ReturnTypeCustomAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.ICustomAttributeProvider ReturnTypeCustomAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodInfo.ReturnTypeCustomAttributes" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property ReturnTypeCustomAttributes As ICustomAttributeProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Reflection::ICustomAttributeProvider ^ ReturnTypeCustomAttributes { System::Reflection::ICustomAttributeProvider ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._MethodInfo.ReturnTypeCustomAttributes</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ICustomAttributeProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4ad9f-244">取得傳回型別的自訂屬性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ad9f-244">Gets the custom attributes for the return type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4ad9f-245">
            <see langword="ICustomAttributeProvider" /> 物件，代表傳回類型的自訂屬性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ad9f-245">An <see langword="ICustomAttributeProvider" /> object representing the custom attributes for the return type.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._MethodInfo.GetIDsOfNames">
      <MemberSignature Language="C#" Value="void _MethodInfo.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._MethodInfo.GetIDsOfNames([in]valuetype System.Guid&amp; riid, native int rgszNames, unsigned int32 cNames, unsigned int32 lcid, native int rgDispId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetIDsOfNames (ByRef riid As Guid, rgszNames As IntPtr, cNames As UInteger, lcid As UInteger, rgDispId As IntPtr) Implements _MethodInfo.GetIDsOfNames" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._MethodInfo.GetIDsOfNames(Guid % riid, IntPtr rgszNames, System::UInt32 cNames, System::UInt32 lcid, IntPtr rgDispId) = System::Runtime::InteropServices::_MethodInfo::GetIDsOfNames;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._MethodInfo.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="riid" Type="System.Guid&amp;" RefType="ref" />
        <Parameter Name="rgszNames" Type="System.IntPtr" />
        <Parameter Name="cNames" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="rgDispId" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="riid">
          <span data-ttu-id="4ad9f-246">保留供未來使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ad9f-246">Reserved for future use.</span>
          </span>
          <span data-ttu-id="4ad9f-247">必須是 IID_NULL。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ad9f-247">Must be IID_NULL.</span>
          </span>
        </param>
        <param name="rgszNames">
          <span data-ttu-id="4ad9f-248">要對應之傳入的名稱陣列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ad9f-248">Passed-in array of names to be mapped.</span>
          </span>
        </param>
        <param name="cNames">
          <span data-ttu-id="4ad9f-249">要對應的名稱計數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ad9f-249">Count of the names to be mapped.</span>
          </span>
        </param>
        <param name="lcid">
          <span data-ttu-id="4ad9f-250">用於解譯名稱的地區設定內容。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ad9f-250">The locale context in which to interpret the names.</span>
          </span>
        </param>
        <param name="rgDispId">
          <span data-ttu-id="4ad9f-251">呼叫端配置的陣列，用於接收對應於名稱的 ID。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ad9f-251">Caller-allocated array that receives the IDs corresponding to the names.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4ad9f-252">將一組名稱對應至一組對應的分派識別項 (Dispatch Identifier)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ad9f-252">Maps a set of names to a corresponding set of dispatch identifiers.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4ad9f-253">這個方法會從 unmanaged 程式碼，是對存取 managed 類別，並不應該從 managed 程式碼呼叫。</span><span class="sxs-lookup"><span data-stu-id="4ad9f-253">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="4ad9f-254">如需有關`IDispatch::GetIDsOfNames`，請參閱 MSDN Library。</span><span class="sxs-lookup"><span data-stu-id="4ad9f-254">For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="4ad9f-255">不支援使用 COM <c>IDispatch</c> 介面進行晚期繫結的存取。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ad9f-255">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._MethodInfo.GetType">
      <MemberSignature Language="C#" Value="Type _MethodInfo.GetType ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Type System.Runtime.InteropServices._MethodInfo.GetType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetType" />
      <MemberSignature Language="VB.NET" Value="Function GetType () As Type Implements _MethodInfo.GetType" />
      <MemberSignature Language="C++ CLI" Value=" virtual Type ^ System.Runtime.InteropServices._MethodInfo.GetType() = System::Runtime::InteropServices::_MethodInfo::GetType;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._MethodInfo.GetType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="4ad9f-256">提供 COM 之 <see cref="M:System.Object.GetType" /> 方法的存取。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ad9f-256">Provides access to the <see cref="M:System.Object.GetType" /> method from COM.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4ad9f-257">代表 <see cref="T:System.Type" /> 類型的 <see cref="T:System.Reflection.MethodInfo" /> 物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ad9f-257">A <see cref="T:System.Type" /> object representing the <see cref="T:System.Reflection.MethodInfo" /> type.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._MethodInfo.GetTypeInfo">
      <MemberSignature Language="C#" Value="void _MethodInfo.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._MethodInfo.GetTypeInfo(unsigned int32 iTInfo, unsigned int32 lcid, native int ppTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfo (iTInfo As UInteger, lcid As UInteger, ppTInfo As IntPtr) Implements _MethodInfo.GetTypeInfo" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._MethodInfo.GetTypeInfo(System::UInt32 iTInfo, System::UInt32 lcid, IntPtr ppTInfo) = System::Runtime::InteropServices::_MethodInfo::GetTypeInfo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._MethodInfo.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iTInfo" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="ppTInfo" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="iTInfo">
          <span data-ttu-id="4ad9f-258">要傳回的類型資訊。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ad9f-258">The type information to return.</span>
          </span>
        </param>
        <param name="lcid">
          <span data-ttu-id="4ad9f-259">類型資訊的地區設定識別項。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ad9f-259">The locale identifier for the type information.</span>
          </span>
        </param>
        <param name="ppTInfo">
          <span data-ttu-id="4ad9f-260">接收要求的類型資訊物件的指標。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ad9f-260">Receives a pointer to the requested type information object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4ad9f-261">擷取物件的類型資訊，可以用來取得介面的類型資訊。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ad9f-261">Retrieves the type information for an object, which can be used to get the type information for an interface.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4ad9f-262">這個方法會從 unmanaged 程式碼，是對存取 managed 類別，並不應該從 managed 程式碼呼叫。</span><span class="sxs-lookup"><span data-stu-id="4ad9f-262">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="4ad9f-263">如需有關`IDispatch::GetTypeInfo`，請參閱 MSDN Library。</span><span class="sxs-lookup"><span data-stu-id="4ad9f-263">For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="4ad9f-264">不支援使用 COM <c>IDispatch</c> 介面進行晚期繫結的存取。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ad9f-264">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._MethodInfo.GetTypeInfoCount">
      <MemberSignature Language="C#" Value="void _MethodInfo.GetTypeInfoCount (out uint pcTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._MethodInfo.GetTypeInfoCount([out] unsigned int32&amp; pcTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetTypeInfoCount(System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfoCount (ByRef pcTInfo As UInteger) Implements _MethodInfo.GetTypeInfoCount" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._MethodInfo.GetTypeInfoCount([Runtime::InteropServices::Out] System::UInt32 % pcTInfo) = System::Runtime::InteropServices::_MethodInfo::GetTypeInfoCount;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._MethodInfo.GetTypeInfoCount(System.UInt32@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcTInfo" Type="System.UInt32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pcTInfo">
          <span data-ttu-id="4ad9f-265">指向接收物件提供的類型資訊介面數目的位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ad9f-265">Points to a location that receives the number of type information interfaces provided by the object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4ad9f-266">擷取物件提供的類型資訊介面數目 (0 或 1)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ad9f-266">Retrieves the number of type information interfaces that an object provides (either 0 or 1).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4ad9f-267">這個方法會從 unmanaged 程式碼，是對存取 managed 類別，並不應該從 managed 程式碼呼叫。</span><span class="sxs-lookup"><span data-stu-id="4ad9f-267">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="4ad9f-268">如需有關`IDispatch::GetTypeInfoCount`，請參閱 MSDN Library。</span><span class="sxs-lookup"><span data-stu-id="4ad9f-268">For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="4ad9f-269">不支援使用 COM <c>IDispatch</c> 介面進行晚期繫結的存取。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ad9f-269">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._MethodInfo.Invoke">
      <MemberSignature Language="C#" Value="void _MethodInfo.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._MethodInfo.Invoke(unsigned int32 dispIdMember, [in]valuetype System.Guid&amp; riid, unsigned int32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub Invoke (dispIdMember As UInteger, ByRef riid As Guid, lcid As UInteger, wFlags As Short, pDispParams As IntPtr, pVarResult As IntPtr, pExcepInfo As IntPtr, puArgErr As IntPtr) Implements _MethodInfo.Invoke" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._MethodInfo.Invoke(System::UInt32 dispIdMember, Guid % riid, System::UInt32 lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr) = System::Runtime::InteropServices::_MethodInfo::Invoke;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._MethodInfo.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dispIdMember" Type="System.UInt32" />
        <Parameter Name="riid" Type="System.Guid&amp;" RefType="ref" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="wFlags" Type="System.Int16" />
        <Parameter Name="pDispParams" Type="System.IntPtr" />
        <Parameter Name="pVarResult" Type="System.IntPtr" />
        <Parameter Name="pExcepInfo" Type="System.IntPtr" />
        <Parameter Name="puArgErr" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="dispIdMember">
          <span data-ttu-id="4ad9f-270">辨識成員。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ad9f-270">Identifies the member.</span>
          </span>
        </param>
        <param name="riid">
          <span data-ttu-id="4ad9f-271">保留供未來使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ad9f-271">Reserved for future use.</span>
          </span>
          <span data-ttu-id="4ad9f-272">必須是 IID_NULL。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ad9f-272">Must be IID_NULL.</span>
          </span>
        </param>
        <param name="lcid">
          <span data-ttu-id="4ad9f-273">地區設定內容，用於解譯引數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ad9f-273">The locale context in which to interpret arguments.</span>
          </span>
        </param>
        <param name="wFlags">
          <span data-ttu-id="4ad9f-274">描述呼叫之內容的旗標。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ad9f-274">Flags describing the context of the call.</span>
          </span>
        </param>
        <param name="pDispParams">
          <span data-ttu-id="4ad9f-275">結構的指標，此結構包含引數陣列、指名引數之 DISPID 引數的陣列，以及陣列中項目數目的計數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ad9f-275">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</span>
          </span>
        </param>
        <param name="pVarResult">
          <span data-ttu-id="4ad9f-276">指向用於儲存結果之位置的指標。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ad9f-276">Pointer to the location where the result is to be stored.</span>
          </span>
        </param>
        <param name="pExcepInfo">
          <span data-ttu-id="4ad9f-277">包含例外狀況資訊的結構指標。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ad9f-277">Pointer to a structure that contains exception information.</span>
          </span>
        </param>
        <param name="puArgErr">
          <span data-ttu-id="4ad9f-278">第一個有錯誤的引數索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ad9f-278">The index of the first argument that has an error.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4ad9f-279">提供物件所公開的屬性和方法的存取權。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ad9f-279">Provides access to properties and methods exposed by an object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4ad9f-280">這個方法會從 unmanaged 程式碼，是對存取 managed 類別，並不應該從 managed 程式碼呼叫。</span><span class="sxs-lookup"><span data-stu-id="4ad9f-280">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="4ad9f-281">如需有關`IDispatch::Invoke`，請參閱 MSDN Library。</span><span class="sxs-lookup"><span data-stu-id="4ad9f-281">For more information about `IDispatch::Invoke`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="4ad9f-282">不支援使用 COM <c>IDispatch</c> 介面進行晚期繫結的存取。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ad9f-282">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>