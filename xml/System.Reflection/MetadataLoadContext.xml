<Type Name="MetadataLoadContext" FullName="System.Reflection.MetadataLoadContext">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9aaf43973195666dd08ebb47e5dd2fc7f8617f14" /><Meta Name="ms.sourcegitcommit" Value="2767b5903996fbd7e2b81eda1114dfc9d0d9db63" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="05/02/2019" /><Meta Name="ms.locfileid" Value="64996681" /></Metadata><TypeSignature Language="C#" Value="public sealed class MetadataLoadContext : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit MetadataLoadContext extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.MetadataLoadContext" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class MetadataLoadContext&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class MetadataLoadContext sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type MetadataLoadContext = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>表示已關閉開始製作您的載入僅限檢查的目的型別物件。 每個 MetadataLoadContext 可以有它自己的繫結規則，並與所有其他 MetadataLoadContexts 隔離。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

## Remarks

A`MetadataLoadContext`做為繫結至組件名稱的字典<xref:System.Reflection.Assembly>先前已載入至內容或必須能夠載入的執行個體。

組件被當做中繼資料的嚴格。 沒有載入組件，根據目標平台、 CPU 架構或指標大小的限制。 沒有任何限制在指定為核心組件的組件 (**mscorlib**)。

]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MetadataLoadContext (System.Reflection.MetadataAssemblyResolver resolver, string coreAssemblyName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.MetadataAssemblyResolver resolver, string coreAssemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.#ctor(System.Reflection.MetadataAssemblyResolver,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (resolver As MetadataAssemblyResolver, Optional coreAssemblyName As String = null)" />
      <MemberSignature Language="F#" Value="new System.Reflection.MetadataLoadContext : System.Reflection.MetadataAssemblyResolver * string -&gt; System.Reflection.MetadataLoadContext" Usage="new System.Reflection.MetadataLoadContext (resolver, coreAssemblyName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="resolver" Type="System.Reflection.MetadataAssemblyResolver" />
        <Parameter Name="coreAssemblyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resolver"><see cref="T:System.Reflection.MetadataAssemblyResolver" /> 執行個體。</param>
        <param name="coreAssemblyName">包含的核心類型，例如組件名稱<see cref="T:System.Object" />。 通常，這會是"mscorlib"。</param>
        <summary>建立新的 <see cref="T:System.Reflection.MetadataLoadContext" /> 物件。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CoreAssembly">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly CoreAssembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Assembly CoreAssembly" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MetadataLoadContext.CoreAssembly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CoreAssembly As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::Assembly ^ CoreAssembly { System::Reflection::Assembly ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CoreAssembly : System.Reflection.Assembly" Usage="System.Reflection.MetadataLoadContext.CoreAssembly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定表示 「 系統組件 」 這類裝載的已知類型的組件<see cref="T:System.Int32" />。</summary>
        <value><see cref="T:System.Reflection.Assembly" /> 執行個體。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

因為這些已知型別的參考不包含組件參考，不同於一般型別，會不同於其他組件處理的核心組件。
            
一般而言，這個組件是名為"mscorlib"或"netstandard 」。 如果找不到的核心組件，此值會是`null`，和許多其他反映的方法，包括剖析方法簽章，將會擲回例外狀況。
            
`CoreAssembly`取決於傳遞`coreAssemblyName`參數傳遞給<xref:System.Reflection.MetadataAssemblyResolver>建構函式以<xref:System.Reflection.MetadataAssemblyResolver.Resolve%2A?displayProperty=nameWithType>方法。

如果沒有`coreAssemblyName`建構函式中指定的引數<xref:System.Reflection.MetadataLoadContext>，則會使用預設值，包括 「 mscorlib"、"System.Runtime 」 和 「 netstandard"。
            
指定的核心組件不需要直接包含的核心類型。 它可以輸入其轉送到其他組件。 因此，它是完全允許 mscorlib 外觀做為指定的核心組件。
            
請注意，<xref:System.Runtime>不是理想的核心組件，因為它會排除某些 interop 相關虛擬自訂屬性型別例如<xref:System.Runtime.InteropServices.DllImportAttribute>。 不過，它可以提供您有不感興趣的屬性。 CustomAttributes API 會略過這些屬性，如果的核心組件不包含必要的型別。
            
等到必要時未載入核心組件。 下列 Api 不會觸發的核心組件的搜尋：

* <xref:System.Reflection.MetadataLoadContext.LoadFromStream%2A?displayProperty=nameWithType>
* <xref:System.Reflection.MetadataLoadContext.LoadFromAssemblyPath%2A?displayProperty=nameWithType>
* <xref:System.Reflection.MetadataLoadContext.LoadFromByteArray%2A?displayProperty=nameWithType>
* <System.Reflection.Assembly.GetName%2A?displayProperty=nameWithType>
* <System.Reflection.Assembly.FullName?displayProperty=nameWithType>
* <System.Reflection.Assembly.GetReferencedAssemblies%2A?displayProperty=nameWithType>
* <System.Reflection.Assembly.GetTypes%2A?displayProperty=nameWithType>
* <System.Reflection.Assembly.DefinedTypes?displayProperty=nameWithType>
* <System.Reflection.Assembly.GetExportedTypes%2A?displayProperty=nameWithType>
* <System.Reflection.Assembly.GetForwardedTypes%2A?displayProperty=nameWithType>
* <System.Reflection.Assembly.GetType(System.String,System.Boolean,System.Boolean)?displayProperty=nameWithType>
* <xref:System.Type.Name?displayProperty=nameWithType>
* <xref:System.Type.FullName?displayProperty=nameWithType>
* <xref:System.Type.AssemblyQualifiedName?displayProperty=nameWithType>
            
如果找不到核心組件，或如果的核心組件遺漏類型，這會影響行為的<xref:System.Reflection.MetadataLoadContext>，如下所示：
            
* 需要簽章或 typespecs 剖析，並傳回結果做為 Api<xref:System.Type>物件將會擲回例外狀況。 例如: 

 * <xref:System.Reflection.MethodInfo.ReturnType?displayProperty=nameWithType>
 * System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType>
 * <xref:System.Type.BaseType?displayProperty-nameWithType>
 * <xref:System.Type.GetInterfaces%2A?displayProperty=nameWithType>
            
* 比較類型與已知的核心類型所需的 Api 不會擲回例外狀況，並比較會評估為`false`。 例如，如果您未指定核心組件<xref:System.Type.IsPrimitive>會傳回`false`的所有項目，甚至是名為的型別<xref:System.Int32>。 同樣地，<xref:System.Type.GetTypeCode%2A?displayProperty=nameWithType>會傳回<xref:System.TypeCode.Object>用於所有項目。
            
* 如果中繼資料實體設定旗標會呈現為虛擬的自訂屬性，而且核心組件不包含虛擬自訂屬性類型、 所需的建構函式或建構函式的參數類型的任何<xref:System.Reflection.MetadataLoadContext>不會擲回。 它會略過虛擬自訂屬性，從清單中傳回的屬性。
          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="metadataLoadContext.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>釋放任何原生資源 （例如組件檔案的檔案鎖定）。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

之後可供使用，它便無法安全地使用任何<xref:System.Reflection.Assembly>物件，透過鈔票<xref:System.Reflection.MetadataLoadContext>或任何反映物件鈔票這些<xref:System.Reflection.Assembly>物件。

雖然所提供的物件<xref:System.Reflection.MetadataLoadContext>盡力擲回<xref:System.ObjectDisposedException>，這不保證。

某些 Api 可能會傳回固定或先前快取的資料。 存取物件*期間*<xref:System.Reflection.MetadataLoadContext.Dispose%2A>方法呼叫可能會導致未受管理的存取違規和 failfast。
         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAssemblies">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Reflection.Assembly&gt; GetAssemblies ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.Assembly&gt; GetAssemblies() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.GetAssemblies" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAssemblies () As IEnumerable(Of Assembly)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Reflection::Assembly ^&gt; ^ GetAssemblies();" />
      <MemberSignature Language="F#" Value="member this.GetAssemblies : unit -&gt; seq&lt;System.Reflection.Assembly&gt;" Usage="metadataLoadContext.GetAssemblies " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Reflection.Assembly&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回已載入的組件的不可部分完成的快照集<see cref="T:System.Reflection.MetadataLoadContext" />。</summary>
        <returns>可列舉集合<see xref="T:System.Reflection.Assembly" />物件。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadFromAssemblyName">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromAssemblyName (System.Reflection.AssemblyName assemblyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromAssemblyName(class System.Reflection.AssemblyName assemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromAssemblyName(System.Reflection.AssemblyName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromAssemblyName(System::Reflection::AssemblyName ^ assemblyName);" />
      <MemberSignature Language="F#" Value="member this.LoadFromAssemblyName : System.Reflection.AssemblyName -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromAssemblyName assemblyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.Reflection.AssemblyName" />
      </Parameters>
      <Docs>
        <param name="assemblyName"><see cref="T:System.Reflection.AssemblyName" /> 執行個體。</param>
        <summary>解析組件提供的組件名稱。 如果組件之前繫結到此名稱，則會傳回這個組件。 否則，請<see cref="T:System.Reflection.MetadataLoadContext" />會呼叫指定<see cref="T:System.Reflection.MetadataAssemblyResolver" />。</summary>
        <returns><see cref="T:System.Reflection.Assembly" /> 執行個體。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
## Remarks
請注意，此方法的行為符合的行為<xref:System.Runtime.Loader.AssemblyLoadContext.LoadFromAssemblyName%2A?displayProperty=nameWithType>解決事件，但不符合的行為<xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A?displayProperty=nameWithType>。 （後者放棄而不會引發其解決事件。）
          ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException">解析程式傳回<see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="LoadFromAssemblyName">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromAssemblyName (string assemblyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromAssemblyName(string assemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromAssemblyName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LoadFromAssemblyName (assemblyName As String) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromAssemblyName(System::String ^ assemblyName);" />
      <MemberSignature Language="F#" Value="member this.LoadFromAssemblyName : string -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromAssemblyName assemblyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyName">A<see cref="T:System.String" />代表組件名稱。</param>
        <summary>解析組件提供的組件名稱。 如果組件之前繫結到此名稱，則會傳回這個組件。 否則，請<see cref="T:System.Reflection.MetadataLoadContext" />會呼叫指定<see cref="T:System.Reflection.MetadataAssemblyResolver" />。</summary>
        <returns><see cref="T:System.Reflection.Assembly" /> 執行個體。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
## Remarks
請注意，此方法的行為符合的行為<xref:System.Runtime.Loader.AssemblyLoadContext.LoadFromAssemblyName%2A?displayProperty=nameWithType>解決事件，但不符合 < xxref:System.Reflection.Assembly.ReflectionOnlyLoad%2A?displayProperty=nameWithType > 行為。 （後者放棄而不會引發其解決事件。）
]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException">解析程式傳回<see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="LoadFromAssemblyPath">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromAssemblyPath (string assemblyPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromAssemblyPath(string assemblyPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromAssemblyPath(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LoadFromAssemblyPath (assemblyPath As String) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromAssemblyPath(System::String ^ assemblyPath);" />
      <MemberSignature Language="F#" Value="member this.LoadFromAssemblyPath : string -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromAssemblyPath assemblyPath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyPath">A<see cref="T:System.String" />表示組件的路徑。</param>
        <summary>從磁碟上的特定路徑載入的組件，並將其組件名稱繫結至該<see cref="T:System.Reflection.MetadataLoadContext" />。 如果具有相同名稱的前一個組件已載入至<see cref="T:System.Reflection.MetadataLoadContext" />，將會傳回先前的組件。</summary>
        <returns><see cref="T:System.Reflection.Assembly" /> 執行個體。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IO.FileLoadException">兩個組件並沒有相同的 Mvid。</exception>
      </Docs>
    </Member>
    <Member MemberName="LoadFromByteArray">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromByteArray (byte[] assembly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromByteArray(unsigned int8[] assembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromByteArray(System.Byte[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromByteArray(cli::array &lt;System::Byte&gt; ^ assembly);" />
      <MemberSignature Language="F#" Value="member this.LoadFromByteArray : byte[] -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromByteArray assembly" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assembly" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="assembly">A<see cref="T:System.Byte[]" />保留組件。</param>
        <summary>從位元組陣列載入組件，並將其組件名稱繫結至該<see cref="T:System.Reflection.MetadataLoadContext" />。 如果具有相同名稱的前一個組件已載入至<see cref="T:System.Reflection.MetadataLoadContext" />，將會傳回先前的組件。</summary>
        <returns><see cref="T:System.Reflection.Assembly" /> 執行個體。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IO.FileLoadException">兩個組件並沒有相同的 Mvid。</exception>
      </Docs>
    </Member>
    <Member MemberName="LoadFromStream">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromStream (System.IO.Stream assembly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromStream(class System.IO.Stream assembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromStream(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromStream(System::IO::Stream ^ assembly);" />
      <MemberSignature Language="F#" Value="member this.LoadFromStream : System.IO.Stream -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromStream assembly" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assembly" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="assembly">A<see cref="T:System.IO.Stream" />保留組件。</param>
        <summary>從資料流載入組件，並將其組件名稱繫結至該<see cref="T:System.Reflection.MetadataLoadContext" />。 如果具有相同名稱的前一個組件已載入至<see cref="T:System.Reflection.MetadataLoadContext" />，將會傳回先前的組件。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

> [!IMPORTANT]
> <xref:System.Reflection.MetadataLoadContext>接管<xref:System.IO.Stream>傳入這個方法。 原始的擁有者必須不變更其位置，處置<xref:System.IO.Stream>，或假設其位置會保持不變。

]]></format>
        </remarks>
        <exception cref="T:System.IO.FileLoadException">兩個組件並沒有相同的 Mvid。</exception>
      </Docs>
    </Member>
  </Members>
</Type>