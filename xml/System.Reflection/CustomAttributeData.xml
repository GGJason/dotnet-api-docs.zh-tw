<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="CustomAttributeData.xml" source-language="en-US" target-language="zh-TW">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5b81fc715a47a4fd76280f78c4364218e82b0390c.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b81fc715a47a4fd76280f78c4364218e82b0390c</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Reflection.CustomAttributeData">
          <source>Provides access to custom attribute data for assemblies, modules, types, members and parameters that are loaded into the reflection-only context.</source>
          <target state="translated">提供已載入至僅限反映內容之組件、模組、類型、成員和參數的自訂屬性資料存取。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.CustomAttributeData">
          <source>Code that is being examined in the reflection-only context cannot be executed, so it is not always possible to examine custom attributes by creating instances of them and then examining their properties, using methods like <ph id="ph1">&lt;xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.MemberInfo.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph>, and so on.</source>
          <target state="translated">正在檢查的僅限反映的內容中的程式碼無法執行，因此它不一定要檢查的自訂屬性，藉由建立它們，然後檢查其屬性，請使用類似的方法的執行個體可能<ph id="ph1">&lt;xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph>， <ph id="ph2">&lt;xref:System.Reflection.MemberInfo.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph>，依此類推.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.CustomAttributeData">
          <source>If the code for the attribute type itself is loaded into the reflection-only context, it cannot be executed.</source>
          <target state="translated">如果屬性型別本身的程式碼已載入僅限反映的內容，就無法執行。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.CustomAttributeData">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData&gt;</ph> class allows examination of custom attributes in the reflection-only context by providing an abstraction for attributes.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData&gt;</ph>類別藉由提供的抽象屬性允許的自訂屬性在僅限反映的內容中的檢查。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.CustomAttributeData">
          <source>The members of this class can be used to obtain the positional arguments and named arguments of the attribute.</source>
          <target state="translated">這個類別的成員可以用來取得的位置引數，並命名為引數的屬性。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.CustomAttributeData">
          <source>Use the <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData.ConstructorArguments%2A&gt;</ph> property to get a list of <ph id="ph2">&lt;xref:System.Reflection.CustomAttributeTypedArgument&gt;</ph> structures that represent the positional arguments, and use the <ph id="ph3">&lt;xref:System.Reflection.CustomAttributeData.NamedArguments%2A&gt;</ph> property to get a list of <ph id="ph4">&lt;xref:System.Reflection.CustomAttributeNamedArgument&gt;</ph> structures that represent the named arguments.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData.ConstructorArguments%2A&gt;</ph>屬性來取得一份<ph id="ph2">&lt;xref:System.Reflection.CustomAttributeTypedArgument&gt;</ph>結構，代表位置的引數，以及使用<ph id="ph3">&lt;xref:System.Reflection.CustomAttributeData.NamedArguments%2A&gt;</ph>屬性來取得一份<ph id="ph4">&lt;xref:System.Reflection.CustomAttributeNamedArgument&gt;</ph>代表具名引數的結構。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.CustomAttributeData">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeNamedArgument&gt;</ph> structure only provides information about the attribute property used to get and set the argument value.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.CustomAttributeNamedArgument&gt;</ph>結構只提供用來取得和設定引數值的屬性的相關資訊。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.CustomAttributeData">
          <source>To obtain the type and value of the argument, use the <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeNamedArgument.TypedValue%2A?displayProperty=nameWithType&gt;</ph> property to obtain a <ph id="ph2">&lt;xref:System.Reflection.CustomAttributeTypedArgument&gt;</ph> structure.</source>
          <target state="translated">若要取得的類型和引數的值，請使用<ph id="ph1">&lt;xref:System.Reflection.CustomAttributeNamedArgument.TypedValue%2A?displayProperty=nameWithType&gt;</ph>屬性，以取得<ph id="ph2">&lt;xref:System.Reflection.CustomAttributeTypedArgument&gt;</ph>結構。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.CustomAttributeData">
          <source>When you have a <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeTypedArgument&gt;</ph> structure for an argument, whether named or positional, use the <ph id="ph2">&lt;xref:System.Reflection.CustomAttributeTypedArgument.ArgumentType%2A?displayProperty=nameWithType&gt;</ph> property to get the type and the <ph id="ph3">&lt;xref:System.Reflection.CustomAttributeTypedArgument.Value%2A?displayProperty=nameWithType&gt;</ph> property to get the value.</source>
          <target state="translated">當您有<ph id="ph1">&lt;xref:System.Reflection.CustomAttributeTypedArgument&gt;</ph>結構引數，具名或位置，是否使用<ph id="ph2">&lt;xref:System.Reflection.CustomAttributeTypedArgument.ArgumentType%2A?displayProperty=nameWithType&gt;</ph>取得類型的屬性和<ph id="ph3">&lt;xref:System.Reflection.CustomAttributeTypedArgument.Value%2A?displayProperty=nameWithType&gt;</ph>屬性取得的值。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.CustomAttributeData">
          <source>For an array argument, the <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeTypedArgument.Value%2A?displayProperty=nameWithType&gt;</ph> property returns a generic <ph id="ph2">&lt;xref:System.Collections.ObjectModel.ReadOnlyCollection%601&gt;</ph> of <ph id="ph3">&lt;xref:System.Reflection.CustomAttributeTypedArgument&gt;</ph> objects.</source>
          <target state="translated">陣列引數，<ph id="ph1">&lt;xref:System.Reflection.CustomAttributeTypedArgument.Value%2A?displayProperty=nameWithType&gt;</ph>屬性會傳回泛型<ph id="ph2">&lt;xref:System.Collections.ObjectModel.ReadOnlyCollection%601&gt;</ph>的<ph id="ph3">&lt;xref:System.Reflection.CustomAttributeTypedArgument&gt;</ph>物件。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.CustomAttributeData">
          <source>Each <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeTypedArgument&gt;</ph> object in the collection represents the corresponding element of the array.</source>
          <target state="translated">每個<ph id="ph1">&lt;xref:System.Reflection.CustomAttributeTypedArgument&gt;</ph>集合中的物件，代表陣列的對應項目。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.CustomAttributeData">
          <source><ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData&gt;</ph> can be used in the execution context as well as in the reflection-only context.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData&gt;</ph> 可以用在如所示的僅限反映的內容以及執行內容。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.CustomAttributeData">
          <source>For example, you might want to avoid loading the assembly that contains the code for a custom attribute.</source>
          <target state="translated">例如，您可能想要避免載入組件，其中包含自訂屬性的程式碼。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.CustomAttributeData">
          <source>Using the <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData&gt;</ph> class is different from using methods like <ph id="ph2">&lt;xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph>:</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData&gt;</ph>類別是使用類似的方法不同<ph id="ph2">&lt;xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph>:</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.CustomAttributeData">
          <source>The properties and methods of <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData&gt;</ph> only provide you with the values that were specified for the attribute instance, not the semantics of the constructor.</source>
          <target state="translated">屬性和方法<ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData&gt;</ph>只提供您所指定的值屬性執行個體，而不是建構函式的語意。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.CustomAttributeData">
          <source>For example, a string argument of an attribute might be converted internally to some other representation, and returned in a canonical form; or a property might have side effects when the actual attribute code is executed.</source>
          <target state="translated">屬性的字串引數，例如可能會在內部轉換成某些其他表示法，並傳回標準的格式;或屬性的實際屬性程式碼執行時，可能有副作用。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.CustomAttributeData">
          <source>The properties and methods of <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData&gt;</ph> do not allow you to retrieve the custom attributes inherited from base classes.</source>
          <target state="translated">屬性和方法<ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData&gt;</ph>不允許您擷取自訂屬性繼承自基底類別。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.CustomAttributeData">
          <source>To create instances of the <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData&gt;</ph> class, use the <ph id="ph2">`static`</ph> (<ph id="ph3">`Shared`</ph> in Visual Basic) <ph id="ph4">&lt;xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A&gt;</ph> factory methods.</source>
          <target state="translated">若要建立的執行個體<ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData&gt;</ph>類別，請使用<ph id="ph2">`static`</ph>(<ph id="ph3">`Shared`</ph>在 Visual Basic 中) <ph id="ph4">&lt;xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A&gt;</ph> factory 方法。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.CustomAttributeData">
          <source>The following example defines a custom attribute with four constructors and four properties.</source>
          <target state="translated">下列範例會定義具有四個建構函式和四個屬性的自訂屬性。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.CustomAttributeData">
          <source>Two of the properties are read-only, and are set by using the positional parameters of the constructors.</source>
          <target state="translated">兩個屬性是唯讀的而且設定使用的位置參數的建構函式。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.CustomAttributeData">
          <source>The other two properties are read/write, and can be set only by using named arguments.</source>
          <target state="translated">其他兩個屬性是讀取/寫入，且可以設定只能藉由使用名為引數。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.CustomAttributeData">
          <source>One positional property is an array of strings, and one named property is an array of integers.</source>
          <target state="translated">其中一個位置的屬性是字串的陣列，其中一個具名的屬性是整數的陣列。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.CustomAttributeData">
          <source>The attribute is applied to the assembly, to a type declared in the assembly, to a method of the type, and to a parameter of the method.</source>
          <target state="translated">屬性會套用至組件、組件中宣告的類型、類型的方法，以及方法的參數。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.CustomAttributeData">
          <source>Different constructors are used for these cases.</source>
          <target state="translated">在這些情況下，會使用不同的建構函式。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.CustomAttributeData">
          <source>When executed, the assembly loads itself into the reflection-only context and displays information about the custom attributes that were applied to it and to the type and members it contains.</source>
          <target state="translated">在執行時，組件本身載入僅限反映的內容，並顯示已套用至該和型別和它包含的成員的自訂屬性的相關資訊。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.CustomAttributeData">
          <source>The attribute that is applied to the type demonstrates array properties, with both positional and named arguments.</source>
          <target state="translated">套用至類型的屬性會示範使用位置和具名引數的陣列內容。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeData.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeData" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeData" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.#ctor">
          <source>This constructor is invoked by derived classes during the construction of <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData&gt;</ph> objects.</source>
          <target state="translated">這個建構函式會由衍生類別叫用的建構期間<ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData&gt;</ph>物件。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.#ctor">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">需要完全信任立即呼叫者。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.#ctor">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">這個成員無法供部分信任或安全性透明程式碼。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="P:System.Reflection.CustomAttributeData.AttributeType">
          <source>Gets the type of the attribute.</source>
          <target state="translated">取得屬性的型別。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeData.AttributeType">
          <source>The type of the attribute.</source>
          <target state="translated">屬性的類型。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="P:System.Reflection.CustomAttributeData.Constructor">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.Reflection.ConstructorInfo" /&gt;</ph> object that represents the constructor that would have initialized the custom attribute.</source>
          <target state="translated">取得 <ph id="ph1">&lt;see cref="T:System.Reflection.ConstructorInfo" /&gt;</ph> 物件，表示已初始化自訂屬性的建構函式。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeData.Constructor">
          <source>An object that represents the constructor that would have initialized the custom attribute represented by the current instance of the <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeData" /&gt;</ph> class.</source>
          <target state="translated">一個物件，表示已初始化 <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeData" /&gt;</ph> 類別目前執行個體所表示之自訂屬性的建構函式。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeData.Constructor">
          <source>If an attribute type has multiple constructors, this property returns only the particular constructor that would have initialized the attribute instance represented by the current <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData&gt;</ph> object.</source>
          <target state="translated">如果屬性型別有多個建構函式，這個屬性會傳回只特定建構函式會初始化目前所代表之屬性執行個體<ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData&gt;</ph>物件。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeData.Constructor">
          <source>The following example defines a custom attribute with four constructors and four properties.</source>
          <target state="translated">下列範例會定義具有四個建構函式和四個屬性的自訂屬性。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeData.Constructor">
          <source>Two of the properties are read-only, and are set by using the positional parameters of the constructors.</source>
          <target state="translated">兩個屬性是唯讀的而且設定使用的位置參數的建構函式。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeData.Constructor">
          <source>The other two properties are read/write, and can be set only by using named arguments.</source>
          <target state="translated">其他兩個屬性是讀取/寫入，且可以設定只能藉由使用名為引數。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeData.Constructor">
          <source>One positional property is an array of strings, and one named property is an array of integers.</source>
          <target state="translated">其中一個位置的屬性是字串的陣列，其中一個具名的屬性是整數的陣列。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeData.Constructor">
          <source>The attribute is applied to the assembly, to a type declared in the assembly, to a method of the type, and to a parameter of the method.</source>
          <target state="translated">屬性會套用至組件、組件中宣告的類型、類型的方法，以及方法的參數。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeData.Constructor">
          <source>Different constructors are used for these cases.</source>
          <target state="translated">在這些情況下，會使用不同的建構函式。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeData.Constructor">
          <source>When executed, the assembly loads itself into the reflection-only context and displays the custom attributes.</source>
          <target state="translated">在執行時，組件本身載入僅限反映的內容，並顯示自訂屬性。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeData.Constructor">
          <source>The attribute that is applied to the type demonstrates array properties, with both positional and named arguments.</source>
          <target state="translated">套用至類型的屬性會示範使用位置和具名引數的陣列內容。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeData.Constructor">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData.Constructor%2A&gt;</ph> property is used in the <ph id="ph2">`ShowAttributeData`</ph> method that displays custom attribute data.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData.Constructor%2A&gt;</ph>屬性用於<ph id="ph2">`ShowAttributeData`</ph>顯示自訂屬性資料的方法。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeData.Constructor">
          <source>In this code example, the <ph id="ph1">&lt;xref:System.Reflection.ConstructorInfo&gt;</ph> returned by this property is used to display a text string that describes the constructor, demonstrating that the property returns the constructor that would initialize the attribute.</source>
          <target state="translated">在此程式碼範例中，<ph id="ph1">&lt;xref:System.Reflection.ConstructorInfo&gt;</ph>傳回這個屬性用來顯示的文字字串描述建構函式，示範屬性傳回的建構函式會初始化屬性。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="P:System.Reflection.CustomAttributeData.ConstructorArguments">
          <source>Gets the list of positional arguments specified for the attribute instance represented by the <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeData" /&gt;</ph> object.</source>
          <target state="translated">取得針對 <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeData" /&gt;</ph> 物件所表示之屬性執行個體而指定的位置引數清單。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeData.ConstructorArguments">
          <source>A collection of structures that represent the positional arguments specified for the custom attribute instance.</source>
          <target state="translated">結構的集合，表示針對自訂屬性執行個體所指定的位置引數。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeData.ConstructorArguments">
          <source>This method gets the positional arguments that were specified for the custom attribute instance without executing any of the custom attribute code.</source>
          <target state="translated">這個方法會取得所指定的自訂屬性執行個體，而不執行任何自訂屬性的程式碼的位置引數。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeData.ConstructorArguments">
          <source>Thus, it can be used in the reflection-only context.</source>
          <target state="translated">因此，它可以用僅限反映的內容中。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeData.ConstructorArguments">
          <source>Use the <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData.NamedArguments%2A&gt;</ph> method to get the named arguments specified for the attribute instance.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData.NamedArguments%2A&gt;</ph>方法來取得指定之屬性執行個體的具名引數。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeData.ConstructorArguments">
          <source>The following example defines a custom attribute with four constructors and four properties.</source>
          <target state="translated">下列範例會定義具有四個建構函式和四個屬性的自訂屬性。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeData.ConstructorArguments">
          <source>Two of the properties are read-only, and are set by using the positional parameters of the constructors.</source>
          <target state="translated">兩個屬性是唯讀的而且設定使用的位置參數的建構函式。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeData.ConstructorArguments">
          <source>The other two properties are read/write, and can be set only by using named arguments.</source>
          <target state="translated">其他兩個屬性是讀取/寫入，且可以設定只能藉由使用名為引數。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeData.ConstructorArguments">
          <source>One positional property is an array of strings, and one named property is an array of integers.</source>
          <target state="translated">其中一個位置的屬性是字串的陣列，其中一個具名的屬性是整數的陣列。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeData.ConstructorArguments">
          <source>The attribute is applied to the assembly, to a type declared in the assembly, to a method of the type, and to a parameter of the method.</source>
          <target state="translated">屬性會套用至組件、組件中宣告的類型、類型的方法，以及方法的參數。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeData.ConstructorArguments">
          <source>Different constructors are used for these cases.</source>
          <target state="translated">在這些情況下，會使用不同的建構函式。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeData.ConstructorArguments">
          <source>When executed, the assembly loads itself into the reflection-only context and displays the custom attributes.</source>
          <target state="translated">在執行時，組件本身載入僅限反映的內容，並顯示自訂屬性。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeData.ConstructorArguments">
          <source>The attribute that is applied to the type demonstrates array properties, with both positional and named arguments.</source>
          <target state="translated">套用至類型的屬性會示範使用位置和具名引數的陣列內容。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeData.ConstructorArguments">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData.ConstructorArguments%2A&gt;</ph> property is used in the <ph id="ph2">`ShowAttributeData`</ph> method that displays custom attribute data.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData.ConstructorArguments%2A&gt;</ph>屬性用於<ph id="ph2">`ShowAttributeData`</ph>顯示自訂屬性資料的方法。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeData.ConstructorArguments">
          <source>In this code example, this property is used to display the list of arguments passed to the constructor that initialized the attribute.</source>
          <target state="translated">在此程式碼範例中，這個屬性用來顯示傳遞給建構函式初始化屬性的引數清單。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeData.Equals(System.Object)">
          <source>An object to compare with this instance, or <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">與這個執行個體相比較的物件，或 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeData.Equals(System.Object)">
          <source>Returns a value that indicates whether this instance is equal to a specified object.</source>
          <target state="translated">傳回值，這個值指出此執行個體是否與指定的物件相等。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeData.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> is equal to the current instance; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> 等於目前的執行個體，則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="T:System.Reflection.CustomAttributeData">
          <source>Returns a list of <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeData" /&gt;</ph> objects representing data about the attributes that have been applied to the target.</source>
          <target state="translated">傳回 <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeData" /&gt;</ph> 物件的清單，這些物件是表示已套用至目標之屬性的相關資料。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.Assembly)">
          <source>The assembly whose custom attribute data is to be retrieved.</source>
          <target state="translated">此為要擷取其自訂屬性資料的組件。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.Assembly)">
          <source>Returns a list of <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeData" /&gt;</ph> objects representing data about the attributes that have been applied to the target assembly.</source>
          <target state="translated">傳回 <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeData" /&gt;</ph> 物件的清單，表示已套用至目標組件之屬性的資料。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.Assembly)">
          <source>A list of objects that represent data about the attributes that have been applied to the target assembly.</source>
          <target state="translated">物件的清單，表示已套用至目標組件之屬性的資料。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.Assembly)">
          <source>This method provides an alternative to the <ph id="ph1">&lt;xref:System.Reflection.Assembly.GetCustomAttributes%2A&gt;</ph> method that can always be used in the Reflection-only context.</source>
          <target state="translated">這個方法會提供替代<ph id="ph1">&lt;xref:System.Reflection.Assembly.GetCustomAttributes%2A&gt;</ph>一律可以使用僅限反映的內容中的方法。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.Assembly)">
          <source>The following example defines a custom attribute with four constructors and four properties.</source>
          <target state="translated">下列範例會定義具有四個建構函式和四個屬性的自訂屬性。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.Assembly)">
          <source>Two of the properties are read-only, and are set by using the positional parameters of the constructors.</source>
          <target state="translated">兩個屬性是唯讀的而且設定使用的位置參數的建構函式。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.Assembly)">
          <source>The other two properties are read/write, and can be set only by using named arguments.</source>
          <target state="translated">其他兩個屬性是讀取/寫入，且可以設定只能藉由使用名為引數。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.Assembly)">
          <source>One positional property is an array of strings, and one named property is an array of integers.</source>
          <target state="translated">其中一個位置的屬性是字串的陣列，其中一個具名的屬性是整數的陣列。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.Assembly)">
          <source>The attribute is applied to the assembly, to a type declared in the assembly, to a method of the type, and to a parameter of the method.</source>
          <target state="translated">屬性會套用至組件、組件中宣告的類型、類型的方法，以及方法的參數。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.Assembly)">
          <source>Different constructors are used for these cases.</source>
          <target state="translated">在這些情況下，會使用不同的建構函式。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.Assembly)">
          <source>When executed, the assembly loads itself into the reflection-only context and displays the custom attributes.</source>
          <target state="translated">在執行時，組件本身載入僅限反映的內容，並顯示自訂屬性。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.Assembly)">
          <source>The attribute that is applied to the type demonstrates array properties, with both positional and named arguments.</source>
          <target state="translated">套用至類型的屬性會示範使用位置和具名引數的陣列內容。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.Assembly)">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A&gt;</ph> method is used in <ph id="ph2">`Main()`</ph> to get the custom attributes applied to the assembly.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A&gt;</ph>方法用於<ph id="ph2">`Main()`</ph>取得套用至組件的自訂屬性。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.Assembly)">
          <source>The return value of the method is passed to the <ph id="ph1">`ShowAttributeData`</ph> method.</source>
          <target state="translated">方法的傳回值傳遞至<ph id="ph1">`ShowAttributeData`</ph>方法。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.Assembly)">
          <source><ph id="ph1">&lt;paramref name="target" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="target" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.MemberInfo)">
          <source>The member whose attribute data is to be retrieved.</source>
          <target state="translated">此為要擷取其屬性資料的成員。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.MemberInfo)">
          <source>Returns a list of <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeData" /&gt;</ph> objects representing data about the attributes that have been applied to the target member.</source>
          <target state="translated">傳回 <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeData" /&gt;</ph> 物件的清單，表示已套用至目標成員之屬性的資料。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.MemberInfo)">
          <source>A list of objects that represent data about the attributes that have been applied to the target member.</source>
          <target state="translated">物件的清單，表示已套用至目標成員之屬性的資料。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.MemberInfo)">
          <source>This method overload gets custom attribute data for types, nested types, and type members, because the <ph id="ph1">&lt;xref:System.Type&gt;</ph> class and the classes in the <ph id="ph2">&lt;xref:System.Reflection&gt;</ph> namespace that represent type members all derive from <ph id="ph3">&lt;xref:System.Reflection.MemberInfo&gt;</ph>.</source>
          <target state="translated">這個方法多載取得自訂屬性資料類型、 巢狀的類型和類型成員，因為<ph id="ph1">&lt;xref:System.Type&gt;</ph>中和類別<ph id="ph2">&lt;xref:System.Reflection&gt;</ph>代表類型成員都是衍生自的命名空間<ph id="ph3">&lt;xref:System.Reflection.MemberInfo&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.MemberInfo)">
          <source>The following example defines a custom attribute with four constructors and four properties.</source>
          <target state="translated">下列範例會定義具有四個建構函式和四個屬性的自訂屬性。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.MemberInfo)">
          <source>Two of the properties are read-only, and are set by using the positional parameters of the constructors.</source>
          <target state="translated">兩個屬性是唯讀的而且設定使用的位置參數的建構函式。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.MemberInfo)">
          <source>The other two properties are read/write, and can be set only by using named arguments.</source>
          <target state="translated">其他兩個屬性是讀取/寫入，且可以設定只能藉由使用名為引數。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.MemberInfo)">
          <source>One positional property is an array of strings, and one named property is an array of integers.</source>
          <target state="translated">其中一個位置的屬性是字串的陣列，其中一個具名的屬性是整數的陣列。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.MemberInfo)">
          <source>The attribute is applied to the assembly, to a type declared in the assembly, to a method of the type, and to a parameter of the method.</source>
          <target state="translated">屬性會套用至組件、組件中宣告的類型、類型的方法，以及方法的參數。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.MemberInfo)">
          <source>Different constructors are used for these cases.</source>
          <target state="translated">在這些情況下，會使用不同的建構函式。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.MemberInfo)">
          <source>When executed, the assembly loads itself into the reflection-only context and displays the custom attributes.</source>
          <target state="translated">在執行時，組件本身載入僅限反映的內容，並顯示自訂屬性。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.MemberInfo)">
          <source>The attribute that is applied to the type demonstrates array properties, with both positional and named arguments.</source>
          <target state="translated">套用至類型的屬性會示範使用位置和具名引數的陣列內容。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.MemberInfo)">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A&gt;</ph> method is used in <ph id="ph2">`Main()`</ph> to get the custom attributes that were applied to a type and to a test method (<ph id="ph3">&lt;xref:System.Type&gt;</ph> derives from <ph id="ph4">&lt;xref:System.Reflection.MemberInfo&gt;</ph>).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A&gt;</ph>方法用於<ph id="ph2">`Main()`</ph>取得已套用至類型，以及測試方法的自訂屬性 (<ph id="ph3">&lt;xref:System.Type&gt;</ph>衍生自<ph id="ph4">&lt;xref:System.Reflection.MemberInfo&gt;</ph>)。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.MemberInfo)">
          <source>The return value of <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A&gt;</ph> is passed to the <ph id="ph2">`ShowAttributeData`</ph> method.</source>
          <target state="translated">傳回值<ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A&gt;</ph>傳遞至<ph id="ph2">`ShowAttributeData`</ph>方法。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.MemberInfo)">
          <source><ph id="ph1">&lt;paramref name="target" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="target" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.Module)">
          <source>The module whose custom attribute data is to be retrieved.</source>
          <target state="translated">此為要擷取其自訂屬性資料的模組。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.Module)">
          <source>Returns a list of <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeData" /&gt;</ph> objects representing data about the attributes that have been applied to the target module.</source>
          <target state="translated">傳回 <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeData" /&gt;</ph> 物件的清單，表示已套用至目標模組之屬性的資料。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.Module)">
          <source>A list of objects that represent data about the attributes that have been applied to the target module.</source>
          <target state="translated">物件的清單，表示已套用至目標模組之屬性的資料。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.Module)">
          <source><ph id="ph1">&lt;paramref name="target" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="target" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.ParameterInfo)">
          <source>The parameter whose attribute data is to be retrieved.</source>
          <target state="translated">此為要擷取其自訂屬性資料的參數。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.ParameterInfo)">
          <source>Returns a list of <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeData" /&gt;</ph> objects representing data about the attributes that have been applied to the target parameter.</source>
          <target state="translated">傳回 <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeData" /&gt;</ph> 物件的清單，表示已套用至目標參數之屬性的相關資料。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.ParameterInfo)">
          <source>A list of objects that represent data about the attributes that have been applied to the target parameter.</source>
          <target state="translated">物件的清單，表示已套用至目標參數之屬性的相關資料。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.ParameterInfo)">
          <source>This method provides an alternative to the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.GetCustomAttributes%2A&gt;</ph> method that can always be used in the Reflection-only context.</source>
          <target state="translated">這個方法會提供替代<ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.GetCustomAttributes%2A&gt;</ph>一律可以使用僅限反映的內容中的方法。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.ParameterInfo)">
          <source>The following example defines a custom attribute with four constructors and four properties.</source>
          <target state="translated">下列範例會定義具有四個建構函式和四個屬性的自訂屬性。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.ParameterInfo)">
          <source>Two of the properties are read-only, and are set by using the positional parameters of the constructors.</source>
          <target state="translated">兩個屬性是唯讀的而且設定使用的位置參數的建構函式。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.ParameterInfo)">
          <source>The other two properties are read/write, and can be set only by using named arguments.</source>
          <target state="translated">其他兩個屬性是讀取/寫入，且可以設定只能藉由使用名為引數。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.ParameterInfo)">
          <source>One positional property is an array of strings, and one named property is an array of integers.</source>
          <target state="translated">其中一個位置的屬性是字串的陣列，其中一個具名的屬性是整數的陣列。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.ParameterInfo)">
          <source>The attribute is applied to the assembly, to a type declared in the assembly, to a method of the type, and to a parameter of the method.</source>
          <target state="translated">屬性會套用至組件、組件中宣告的類型、類型的方法，以及方法的參數。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.ParameterInfo)">
          <source>Different constructors are used for these cases.</source>
          <target state="translated">在這些情況下，會使用不同的建構函式。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.ParameterInfo)">
          <source>When executed, the assembly loads itself into the reflection-only context and displays the custom attributes.</source>
          <target state="translated">在執行時，組件本身載入僅限反映的內容，並顯示自訂屬性。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.ParameterInfo)">
          <source>The attribute that is applied to the type demonstrates array properties, with both positional and named arguments.</source>
          <target state="translated">套用至類型的屬性會示範使用位置和具名引數的陣列內容。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.ParameterInfo)">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A&gt;</ph> method is used in <ph id="ph2">`Main()`</ph> to retrieve the custom attributes applied to a parameter of a test method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A&gt;</ph>方法用於<ph id="ph2">`Main()`</ph>擷取自訂屬性套用至測試方法的參數。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.ParameterInfo)">
          <source>The return value of <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A&gt;</ph> is passed to the <ph id="ph2">`ShowAttributeData`</ph> method.</source>
          <target state="translated">傳回值<ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A&gt;</ph>傳遞至<ph id="ph2">`ShowAttributeData`</ph>方法。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.ParameterInfo)">
          <source><ph id="ph1">&lt;paramref name="target" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="target" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeData.GetHashCode">
          <source>Serves as a hash function for a particular type.</source>
          <target state="translated">做為特定型別的雜湊函式。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeData.GetHashCode">
          <source>A hash code for the current <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph>.</source>
          <target state="translated">目前 <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> 的雜湊碼。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="P:System.Reflection.CustomAttributeData.NamedArguments">
          <source>Gets the list of named arguments specified for the attribute instance represented by the <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeData" /&gt;</ph> object.</source>
          <target state="translated">取得針對 <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeData" /&gt;</ph> 物件所表示之屬性執行個體而指定的具名引數清單。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeData.NamedArguments">
          <source>A collection of structures that represent the named arguments specified for the custom attribute instance.</source>
          <target state="translated">結構的集合，表示針對自訂屬性執行個體所指定的具名引數。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeData.NamedArguments">
          <source>This method gets the named arguments that were specified for the custom attribute instance without executing any of the custom attribute code.</source>
          <target state="translated">這個方法會取得指定的引數所指定的自訂屬性執行個體，而不執行任何自訂屬性的程式碼。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeData.NamedArguments">
          <source>Thus, it can be used in the Reflection-only context.</source>
          <target state="translated">因此，它可以用僅限反映的內容中。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeData.NamedArguments">
          <source>The list that is returned contains only the named arguments that were specified for the attribute instance.</source>
          <target state="translated">傳回此清單包含只有在具名引數所指定的屬性執行個體。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeData.NamedArguments">
          <source>Use the <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData.ConstructorArguments%2A&gt;</ph> method to get the positional arguments that were specified for the attribute instance.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData.ConstructorArguments%2A&gt;</ph>方法來取得所指定的位置引數之屬性執行個體。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeData.NamedArguments">
          <source>The following example defines a custom attribute with four constructors and four properties.</source>
          <target state="translated">下列範例會定義具有四個建構函式和四個屬性的自訂屬性。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeData.NamedArguments">
          <source>Two of the properties are read-only, and are set by using the positional parameters of the constructors.</source>
          <target state="translated">兩個屬性是唯讀的而且設定使用的位置參數的建構函式。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeData.NamedArguments">
          <source>The other two properties are read/write, and can be set only by using named arguments.</source>
          <target state="translated">其他兩個屬性是讀取/寫入，且可以設定只能藉由使用名為引數。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeData.NamedArguments">
          <source>One positional property is an array of strings, and one named property is an array of integers.</source>
          <target state="translated">其中一個位置的屬性是字串的陣列，其中一個具名的屬性是整數的陣列。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeData.NamedArguments">
          <source>The attribute is applied to the assembly, to a type declared in the assembly, to a method of the type, and to a parameter of the method.</source>
          <target state="translated">屬性會套用至組件、組件中宣告的類型、類型的方法，以及方法的參數。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeData.NamedArguments">
          <source>Different constructors are used for these cases.</source>
          <target state="translated">在這些情況下，會使用不同的建構函式。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeData.NamedArguments">
          <source>When executed, the assembly loads itself into the reflection-only context and displays the custom attributes.</source>
          <target state="translated">在執行時，組件本身載入僅限反映的內容，並顯示自訂屬性。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeData.NamedArguments">
          <source>The attribute that is applied to the type demonstrates array properties, with both positional and named arguments.</source>
          <target state="translated">套用至類型的屬性會示範使用位置和具名引數的陣列內容。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeData.NamedArguments">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData.NamedArguments%2A&gt;</ph> property is used in the <ph id="ph2">`ShowAttributeData`</ph> method that displays custom attribute data.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData.NamedArguments%2A&gt;</ph>屬性用於<ph id="ph2">`ShowAttributeData`</ph>顯示自訂屬性資料的方法。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeData.NamedArguments">
          <source>In this code example, this property is used to display the list of named arguments specified for the attribute.</source>
          <target state="translated">在此程式碼範例中，這個屬性用來顯示的屬性指定的具名引數清單。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeData.ToString">
          <source>Returns a string representation of the custom attribute.</source>
          <target state="translated">傳回自訂屬性的字串表示。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeData.ToString">
          <source>A string value that represents the custom attribute.</source>
          <target state="translated">字串值，表示自訂屬性。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.ToString">
          <source>The string value includes the attribute type, the attribute parameters, and the named parameters.</source>
          <target state="translated">字串值包含的屬性類型、 屬性參數，以及具名的參數。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.ToString">
          <source>The following example defines a custom attribute with four constructors and four properties.</source>
          <target state="translated">下列範例會定義具有四個建構函式和四個屬性的自訂屬性。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.ToString">
          <source>Two of the properties are read-only, and are set by using the positional parameters of the constructors.</source>
          <target state="translated">兩個屬性是唯讀的而且設定使用的位置參數的建構函式。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.ToString">
          <source>The other two properties are read/write, and can be set only by using named arguments.</source>
          <target state="translated">其他兩個屬性是讀取/寫入，且可以設定只能藉由使用名為引數。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.ToString">
          <source>One positional property is an array of strings, and one named property is an array of integers.</source>
          <target state="translated">其中一個位置的屬性是字串的陣列，其中一個具名的屬性是整數的陣列。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.ToString">
          <source>The attribute is applied to the assembly, to a type declared in the assembly, to a method of the type, and to a parameter of the method.</source>
          <target state="translated">屬性會套用至組件、組件中宣告的類型、類型的方法，以及方法的參數。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.ToString">
          <source>Different constructors are used for these cases.</source>
          <target state="translated">在這些情況下，會使用不同的建構函式。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.ToString">
          <source>When executed, the assembly loads itself into the reflection-only context and displays the custom attributes.</source>
          <target state="translated">在執行時，組件本身載入僅限反映的內容，並顯示自訂屬性。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.ToString">
          <source>The attribute that is applied to the type demonstrates array properties, with both positional and named arguments.</source>
          <target state="translated">套用至類型的屬性會示範使用位置和具名引數的陣列內容。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeData.ToString">
          <source>In this example, the <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData.ToString%2A&gt;</ph> method is used in the <ph id="ph2">`ShowAttributeData`</ph> method, to identify the attribute whose data is being displayed.</source>
          <target state="translated">在此範例中，<ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData.ToString%2A&gt;</ph>方法用於<ph id="ph2">`ShowAttributeData`</ph>方法，來識別要顯示其資料的屬性。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>