<Type Name="Binder" FullName="System.Reflection.Binder">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e52d82e248c05335efb0d6b73255499c9180a3cc" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57917644" /></Metadata><TypeSignature Language="C#" Value="public abstract class Binder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit Binder extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.Binder" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Binder" />
  <TypeSignature Language="C++ CLI" Value="public ref class Binder abstract" />
  <TypeSignature Language="F#" Value="type Binder = class" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDual)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>從候選者清單中選取成員，並執行型別轉換，從實質引數 (Actual Argument) 型別轉換成型式引數 (Formal Argument) 型別。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 實作<xref:System.Reflection.Binder>類別方法使用的這類<xref:System.Type.InvokeMember%2A?displayProperty=nameWithType>，這會選取從一組可能的成員來執行時，根據一組參數型別和引數的值;<xref:System.Type.GetMethod%2A?displayProperty=nameWithType>，這會選取方法，根據參數型別，依此類推。  
  
 預設實作<xref:System.Reflection.Binder>類別由提供<xref:System.Type.DefaultBinder%2A?displayProperty=nameWithType>屬性。  
  
   
  
## Examples  
 下列範例會實作，並示範的所有成員`Binder`類別。 私用方法`CanConvertFrom`尋找指定的型別相容的類型。  
  
 [!code-cpp[Binder_1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Binder_1/CPP/binder.cpp#1)]
 [!code-csharp[Binder_1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Binder_1/CS/binder.cs#1)]
 [!code-vb[Binder_1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Binder_1/VB/binder.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>當您繼承自<see cref="T:System.Reflection.Binder" />，您必須覆寫下列成員： <see cref="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)" />， <see cref="M:System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)" />， <see cref="M:System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)" />， <see cref="M:System.Reflection.Binder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])" />， <see cref="M:System.Reflection.Binder.SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])" />，和<see cref="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)" />。</para></block>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Binder ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Binder.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Binder();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Reflection.Binder" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在衍生類別，用來初始化狀態，在這種類型的建構函式會呼叫這個建構函式。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BindToField">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.FieldInfo BindToField (System.Reflection.BindingFlags bindingAttr, System.Reflection.FieldInfo[] match, object value, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.FieldInfo BindToField(valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.FieldInfo[] match, object value, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function BindToField (bindingAttr As BindingFlags, match As FieldInfo(), value As Object, culture As CultureInfo) As FieldInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Reflection::FieldInfo ^ BindToField(System::Reflection::BindingFlags bindingAttr, cli::array &lt;System::Reflection::FieldInfo ^&gt; ^ match, System::Object ^ value, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="abstract member BindToField : System.Reflection.BindingFlags * System.Reflection.FieldInfo[] * obj * System.Globalization.CultureInfo -&gt; System.Reflection.FieldInfo" Usage="binder.BindToField (bindingAttr, match, value, culture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="match" Type="System.Reflection.FieldInfo[]" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="bindingAttr"><see cref="T:System.Reflection.BindingFlags" /> 值的位元組合。</param>
        <param name="match">可能相符的欄位集合。 例如，當 <see cref="T:System.Reflection.Binder" /> 使用 <see cref="Overload:System.Type.InvokeMember" /> 物件時，這個參數就會指定已由反映判定為可能相符的欄位集合，通常是因為這些欄位具有正確的成員名稱。 <see cref="P:System.Type.DefaultBinder" /> 所提供的預設實作會變更此陣列的順序。</param>
        <param name="value">用來找出相符欄位的欄位值。</param>
        <param name="culture"><see cref="T:System.Globalization.CultureInfo" /> 的執行個體 (Instance)，用來控制強制型轉型別的繫結器 (Binder) 實作中資料型別的強制型轉 (Coercion)。 如果 <paramref name="culture" /> 為 <see langword="null" />，會使用目前執行緒的 <see cref="T:System.Globalization.CultureInfo" />。  
  
注意：例如，如果繫結器實作允許您將字串值強制型轉為數值，則將表示 1000 的 <see langword="String" /> 轉換成 <see langword="Double" /> 值時必須使用這個參數，因為 1000 在不同的文化特性中有不同的表示方式。 預設的繫結器不會處理這種字串強制型轉。</param>
        <summary>根據指定的條件，從一組指定的欄位中選取欄位。</summary>
        <returns>符合的欄位。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`bindingAttr`不包含<xref:System.Reflection.BindingFlags.SetField?displayProperty=nameWithType>，所提供的預設繫結器實作<xref:System.Type.DefaultBinder%2A?displayProperty=nameWithType>只會傳回第一個項目`match`。 沒有選取項目會完成。  
  
 這個方法會控制所提供的繫結<xref:System.Type.InvokeMember%2A?displayProperty=nameWithType>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">如果是預設繫結器，<paramref name="bindingAttr" /> 將包括 <see cref="F:System.Reflection.BindingFlags.SetField" />，而 <paramref name="match" /> 則包含同樣都與 <paramref name="value" /> 相符的多個欄位。 例如，<paramref name="value" /> 包含的 <c>MyClass</c> 物件會執行 <c>IMyClass</c> 介面，而 <paramref name="match" /> 包含 <c>MyClass</c> 類型的欄位和 <c>IMyClass</c> 類型的欄位。</exception>
        <exception cref="T:System.MissingFieldException">如果是預設繫結器，<paramref name="bindingAttr" /> 將包括 <see cref="F:System.Reflection.BindingFlags.SetField" />，而 <paramref name="match" /> 則不會包含可以接受 <paramref name="value" /> 的欄位。</exception>
        <exception cref="T:System.NullReferenceException">如果是預設繫結器，<paramref name="bindingAttr" /> 將包括 <see cref="F:System.Reflection.BindingFlags.SetField" />，而 <paramref name="match" /> 則會是 <see langword="null" /> 或空白陣列。  
  
-或- 
 <paramref name="bindingAttr" /> 將包括 <see cref="F:System.Reflection.BindingFlags.SetField" />，而 <paramref name="value" /> 則會是 <see langword="null" />。</exception>
        <altmember cref="T:System.Reflection.FieldInfo" />
      </Docs>
    </Member>
    <Member MemberName="BindToMethod">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.MethodBase BindToMethod (System.Reflection.BindingFlags bindingAttr, System.Reflection.MethodBase[] match, ref object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] names, out object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodBase BindToMethod(valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.MethodBase[] match, object[]&amp; args, valuetype System.Reflection.ParameterModifier[] modifiers, class System.Globalization.CultureInfo culture, string[] names, [out] object&amp; state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function BindToMethod (bindingAttr As BindingFlags, match As MethodBase(), ByRef args As Object(), modifiers As ParameterModifier(), culture As CultureInfo, names As String(), ByRef state As Object) As MethodBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Reflection::MethodBase ^ BindToMethod(System::Reflection::BindingFlags bindingAttr, cli::array &lt;System::Reflection::MethodBase ^&gt; ^ match, cli::array &lt;System::Object ^&gt; ^ % args, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers, System::Globalization::CultureInfo ^ culture, cli::array &lt;System::String ^&gt; ^ names, [Runtime::InteropServices::Out] System::Object ^ % state);" />
      <MemberSignature Language="F#" Value="abstract member BindToMethod : System.Reflection.BindingFlags * System.Reflection.MethodBase[] *  * System.Reflection.ParameterModifier[] * System.Globalization.CultureInfo * string[] *  -&gt; System.Reflection.MethodBase" Usage="binder.BindToMethod (bindingAttr, match, args, modifiers, culture, names, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodBase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="match" Type="System.Reflection.MethodBase[]" />
        <Parameter Name="args" Type="System.Object[]" RefType="ref" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="names" Type="System.String[]" />
        <Parameter Name="state" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="bindingAttr"><see cref="T:System.Reflection.BindingFlags" /> 值的位元組合。</param>
        <param name="match">可能相符的方法集合。 例如，當 <see cref="T:System.Reflection.Binder" /> 使用 <see cref="Overload:System.Type.InvokeMember" /> 物件時，這個參數就會指定已由反映判定為可能相符的方法集合，通常是因為這些方法具有正確的成員名稱。 <see cref="P:System.Type.DefaultBinder" /> 所提供的預設實作會變更此陣列的順序。</param>
        <param name="args">傳入的引數。 繫結器可能會變更此陣列中的引數順序；例如，如果使用 <paramref name="names" /> 參數來指定位置順序以外的其他順序，預設繫結器就會變更引數的順序。 如果繫結器實作強制型轉了引數型別 (Argument Type)，引數的型別和值也可能會變更。</param>
        <param name="modifiers">參數修飾詞的陣列，啟用繫結以使用型別已被修改的參數簽章。 預設繫結器實作時並不會使用這個參數。</param>
        <param name="culture"><see cref="T:System.Globalization.CultureInfo" /> 的執行個體 (Instance)，用來控制強制型轉型別的繫結器 (Binder) 實作中資料型別的強制型轉 (Coercion)。 如果 <paramref name="culture" /> 為 <see langword="null" />，會使用目前執行緒的 <see cref="T:System.Globalization.CultureInfo" />。  
  
注意：例如，如果繫結器實作允許您將字串值強制型轉為數值，則將表示 1000 的 <see langword="String" /> 轉換成 <see langword="Double" /> 值時必須使用這個參數，因為 1000 在不同的文化特性中有不同的表示方式。 預設的繫結器不會處理這種字串強制型轉。</param>
        <param name="names">如果比對時必須考慮參數名稱，便為參數名稱；如果只將引數視為單純的位置引數，則為 <see langword="null" />。 例如，如果位置順序中並未提供引數，您就必須使用參數名稱。</param>
        <param name="state">在此方法傳回之後，<paramref name="state" /> 就會包含繫結器提供的物件，用以記錄引數重新調整順序。 繫結器會建立這個物件，而且也是這個物件的唯一使用者。 如果 <see langword="null" /> 傳回時 <paramref name="state" /> 不是 <see langword="BindToMethod" />，而且您想要將 <paramref name="state" /> 還原成原來的順序，使您可以擷取 <see langword="ref" /> 參數 (在 Visual Basic 中為 <see langword="ByRef" /> 參數) 的值，就必須將 <paramref name="args" /> 傳遞至 <see cref="M:System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)" /> 方法。</param>
        <summary>根據提供的引數，從一組指定的方法中選取要叫用 (Invoke) 的方法。</summary>
        <returns>符合的方法。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 預設繫結器會考慮這兩個參數的值和`params`陣列 (`ParamArray` Visual Basic 中的陣列)。 因此，您可在情況下尋找相符項目所在`args`和`match`不包含相同數目的項目。  
  
 繫結器可讓用戶端的引數陣列對應回其原始形式，如果有已操作引數陣列<xref:System.Reflection.Binder.BindToMethod%2A>。 使用此重新對應功能，藉由參考引數有這類引數時取得。 當您依名稱傳遞引數時，繫結器會重新排列引數陣列。 `state`參數會持續追蹤的引數重新調整順序，如此可讓繫結器的<xref:System.Reflection.Binder.ReorderArgumentArray%2A>方法，以重新排列成其原始形式的引數陣列。  
  
 <xref:System.Reflection.Binder.BindToMethod%2A>方法由<xref:System.Type.InvokeMember%2A?displayProperty=nameWithType>方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">如果是預設繫結器，<paramref name="match" /> 將包含同樣都與 <paramref name="args" /> 相符的多個方法。 例如，<paramref name="args" /> 包含的 <c>MyClass</c> 物件會實作 <c>IMyClass</c> 介面，而 <paramref name="match" /> 則包含採用 <c>MyClass</c> 的方法及採用 <c>IMyClass</c> 的方法。</exception>
        <exception cref="T:System.MissingMethodException">如果是預設繫結器，<paramref name="match" /> 不會包含可以接受 <paramref name="args" /> 中提供之引數的方法。</exception>
        <exception cref="T:System.ArgumentException">如果是預設繫結器 (Binder)，<paramref name="match" /> 會是 <see langword="null" /> 或空白陣列。</exception>
        <altmember cref="T:System.Reflection.MethodBase" />
      </Docs>
    </Member>
    <Member MemberName="CanChangeType">
      <MemberSignature Language="C#" Value="public virtual bool CanChangeType (object value, Type type, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanChangeType(object value, class System.Type type, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Binder.CanChangeType(System.Object,System.Type,System.Globalization.CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanChangeType(System::Object ^ value, Type ^ type, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="abstract member CanChangeType : obj * Type * System.Globalization.CultureInfo -&gt; bool&#xA;override this.CanChangeType : obj * Type * System.Globalization.CultureInfo -&gt; bool" Usage="binder.CanChangeType (value, type, culture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="xamarinios-10.8" />
        <Parameter Name="type" Type="System.Type" Index="1" FrameworkAlternate="xamarinios-10.8" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" Index="2" FrameworkAlternate="xamarinios-10.8" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="type">To be added.</param>
        <param name="culture">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ChangeType">
      <MemberSignature Language="C#" Value="public abstract object ChangeType (object value, Type type, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ChangeType(object value, class System.Type type, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ ChangeType(System::Object ^ value, Type ^ type, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="abstract member ChangeType : obj * Type * System.Globalization.CultureInfo -&gt; obj" Usage="binder.ChangeType (value, type, culture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="value">要變更為新 <see langword="Type" /> 的物件。</param>
        <param name="type"><paramref name="value" /> 將要變成的新 <see langword="Type" />。</param>
        <param name="culture">用來控制資料型別之強制型轉的 <see cref="T:System.Globalization.CultureInfo" /> 執行個體。 如果 <paramref name="culture" /> 為 <see langword="null" />，會使用目前執行緒的 <see cref="T:System.Globalization.CultureInfo" />。  
  
注意：例如，將表示 1000 的 <see langword="String" /> 轉換為 <see langword="Double" /> 值時必須使用這個參數，因為 1000 在不同文化特性中有不同的表示方式。</param>
        <summary>將指定的 <see langword="Object" /> 型別變更為指定的 <see langword="Type" />。</summary>
        <returns>物件，含有做為新型別的指定值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 反映模型一般類型系統的存取範圍規則。 比方說，如果呼叫端在相同的組件中，呼叫端不會不需要特殊權限的內部成員。 否則，呼叫端需要<xref:System.Security.Permissions.ReflectionPermission>。 這是一致的受保護的成員查閱、 私用等等。  
  
 一般原則是`ChangeType`擴展強制型轉，永遠不會遺失資料只應該執行。 擴展強制型轉的範例將強制轉型為 64 位元帶正負號的整數值的 32 位元帶正負號的整數的值。 這被區別縮小強制，可能會遺失資料。 縮小強制型轉的範例將強制轉型 64 位元帶正負號的整數，32 位元帶正負號的整數。  
  
 下表列出由預設值強制型轉`ChangeType`。  
  
|來源類型|目標類型|  
|-----------------|-----------------|  
|任何型別|基底類型。|  
|任何型別|它所實作的介面。|  
|Char|UInt16、UInt32、Int32、UInt64、Int64、Single、Double|  
|Byte|Char、UInt16、Int16、UInt32、Int32、UInt64、Int64、Single、Double|  
|SByte|Int16、Int32、Int64、Single、Double|  
|UInt16|UInt32、Int32、UInt64、Int64、Single、Double|  
|Int16|Int32、Int64、Single、Double|  
|UInt32|UInt64、Int64、Single、Double|  
|Int32|Int64、Single、Double|  
|UInt64|Single、Double|  
|Int64|Single、Double|  
|Single|Double|  
|非參考|參考。|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReorderArgumentArray">
      <MemberSignature Language="C#" Value="public abstract void ReorderArgumentArray (ref object[] args, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReorderArgumentArray(object[]&amp; args, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub ReorderArgumentArray (ByRef args As Object(), state As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void ReorderArgumentArray(cli::array &lt;System::Object ^&gt; ^ % args, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member ReorderArgumentArray :  * obj -&gt; unit" Usage="binder.ReorderArgumentArray (args, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.Object[]" RefType="ref" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="args">傳入的實質引數。 引數的型別和值都可以被變更。</param>
        <param name="state">繫結器提供的物件，記錄引數重新調整順序。</param>
        <summary>在從 <see cref="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)" /> 傳回時，當 <paramref name="args" /> 引數來自 <see langword="BindToMethod" /> 時，將還原為本來的狀態。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Common language runtime 會呼叫這個方法，如果`state`不是`null`之後傳回`BindToMethod`。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectMethod">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.MethodBase SelectMethod (System.Reflection.BindingFlags bindingAttr, System.Reflection.MethodBase[] match, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodBase SelectMethod(valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.MethodBase[] match, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Binder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function SelectMethod (bindingAttr As BindingFlags, match As MethodBase(), types As Type(), modifiers As ParameterModifier()) As MethodBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Reflection::MethodBase ^ SelectMethod(System::Reflection::BindingFlags bindingAttr, cli::array &lt;System::Reflection::MethodBase ^&gt; ^ match, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member SelectMethod : System.Reflection.BindingFlags * System.Reflection.MethodBase[] * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodBase" Usage="binder.SelectMethod (bindingAttr, match, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodBase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="match" Type="System.Reflection.MethodBase[]" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="bindingAttr"><see cref="T:System.Reflection.BindingFlags" /> 值的位元組合。</param>
        <param name="match">可能相符的方法集合。 例如，當 <see cref="T:System.Reflection.Binder" /> 使用 <see cref="Overload:System.Type.InvokeMember" /> 物件時，這個參數就會指定已由反映判定為可能相符的方法集合，通常是因為這些方法具有正確的成員名稱。 <see cref="P:System.Type.DefaultBinder" /> 所提供的預設實作會變更此陣列的順序。</param>
        <param name="types">用來找出相符方法的參數型別。</param>
        <param name="modifiers">參數修飾詞的陣列，啟用繫結以使用型別已被修改的參數簽章。</param>
        <summary>根據引數型別，從一組指定的方法中選取方法。</summary>
        <returns>符合的方法，如果找到的話，否則為 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法應傳回`null`如果沒有方法符合準則。 這個方法會控制所提供的選取項目`GetConstructor`並`GetMethod`上的方法`Type`。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">如果是預設繫結器，<paramref name="match" /> 將包含同樣都與 <paramref name="types" /> 所描述之參數型別相符的多個方法。 例如，<paramref name="types" /> 中的陣列會包含 <c>MyClass</c> 的 <see cref="T:System.Type" /> 物件，而 <paramref name="match" /> 中的陣列則包含可取得 <c>MyClass</c> 之基底類別的方法，以及可取得 <c>MyClass</c> 所實作之介面的方法。</exception>
        <exception cref="T:System.ArgumentException">如果是預設繫結器 (Binder)，<paramref name="match" /> 會是 <see langword="null" /> 或空白陣列。  
  
-或- 
<paramref name="types" /> 的一個項目衍生自 <see cref="T:System.Type" />，但不是 <see langword="RuntimeType" /> 型別。</exception>
      </Docs>
    </Member>
    <Member MemberName="SelectProperty">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.PropertyInfo SelectProperty (System.Reflection.BindingFlags bindingAttr, System.Reflection.PropertyInfo[] match, Type returnType, Type[] indexes, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo SelectProperty(valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.PropertyInfo[] match, class System.Type returnType, class System.Type[] indexes, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Binder.SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function SelectProperty (bindingAttr As BindingFlags, match As PropertyInfo(), returnType As Type, indexes As Type(), modifiers As ParameterModifier()) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Reflection::PropertyInfo ^ SelectProperty(System::Reflection::BindingFlags bindingAttr, cli::array &lt;System::Reflection::PropertyInfo ^&gt; ^ match, Type ^ returnType, cli::array &lt;Type ^&gt; ^ indexes, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member SelectProperty : System.Reflection.BindingFlags * System.Reflection.PropertyInfo[] * Type * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.PropertyInfo" Usage="binder.SelectProperty (bindingAttr, match, returnType, indexes, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="match" Type="System.Reflection.PropertyInfo[]" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="indexes" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="bindingAttr"><see cref="T:System.Reflection.BindingFlags" /> 值的位元組合。</param>
        <param name="match">可能相符的屬性集合。 例如，當 <see cref="T:System.Reflection.Binder" /> 使用 <see cref="Overload:System.Type.InvokeMember" /> 物件時，這個參數就會指定已由反映判定為可能相符的屬性集合，通常是因為這些屬性具有正確的成員名稱。 <see cref="P:System.Type.DefaultBinder" /> 所提供的預設實作會變更此陣列的順序。</param>
        <param name="returnType">相符屬性必須有的傳回值。</param>
        <param name="indexes">要被搜尋的索引屬性型別。 用於索引屬性，像是類別的索引子。</param>
        <param name="modifiers">參數修飾詞的陣列，啟用繫結以使用型別已被修改的參數簽章。</param>
        <summary>根據指定的條件，從一組指定的屬性中選取屬性。</summary>
        <returns>符合的屬性。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會控制所提供的選取項目`GetProperty`方法`Type`。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">如果是預設繫結器，<paramref name="match" /> 將包含同樣都與 <paramref name="returnType" /> 和 <paramref name="indexes" /> 相符的多個屬性。</exception>
        <exception cref="T:System.ArgumentException">如果是預設繫結器 (Binder)，<paramref name="match" /> 會是 <see langword="null" /> 或空白陣列。</exception>
        <altmember cref="T:System.Reflection.PropertyInfo" />
      </Docs>
    </Member>
  </Members>
</Type>