<Type Name="Binder" FullName="System.Reflection.Binder">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d6121e1819d33e0eb60a38a867d1fc55ab687d47" />
    <Meta Name="ms.sourcegitcommit" Value="c0c07dbd19cd7017243f9ac36915755f79bc8da6" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="11/27/2018" />
    <Meta Name="ms.locfileid" Value="52342100" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class Binder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit Binder extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.Binder" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Binder" />
  <TypeSignature Language="C++ CLI" Value="public ref class Binder abstract" />
  <TypeSignature Language="F#" Value="type Binder = class" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDual)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="31cae-101">從候選者清單中選取成員，並執行型別轉換，從實質引數 (Actual Argument) 型別轉換成型式引數 (Formal Argument) 型別。</span>
      <span class="sxs-lookup">
        <span data-stu-id="31cae-101">Selects a member from a list of candidates, and performs type conversion from actual argument type to formal argument type.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31cae-102">實作<xref:System.Reflection.Binder>類別方法使用的這類<xref:System.Type.InvokeMember%2A?displayProperty=nameWithType>，這會選取從一組可能的成員來執行時，根據一組參數型別和引數的值;<xref:System.Type.GetMethod%2A?displayProperty=nameWithType>，這會選取方法，根據參數型別，依此類推。</span><span class="sxs-lookup"><span data-stu-id="31cae-102">Implementations of the <xref:System.Reflection.Binder> class are used by methods such as <xref:System.Type.InvokeMember%2A?displayProperty=nameWithType>, which selects from a set of possible members to execute, based on a set of parameter types and argument values; <xref:System.Type.GetMethod%2A?displayProperty=nameWithType>, which selects a method based on parameter types; and so on.</span></span>  
  
 <span data-ttu-id="31cae-103">預設實作<xref:System.Reflection.Binder>類別由提供<xref:System.Type.DefaultBinder%2A?displayProperty=nameWithType>屬性。</span><span class="sxs-lookup"><span data-stu-id="31cae-103">A default implementation of the <xref:System.Reflection.Binder> class is provided by the <xref:System.Type.DefaultBinder%2A?displayProperty=nameWithType> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31cae-104">下列範例會實作，並示範的所有成員`Binder`類別。</span><span class="sxs-lookup"><span data-stu-id="31cae-104">The following example implements and demonstrates all members of the `Binder` class.</span></span> <span data-ttu-id="31cae-105">私用方法`CanConvertFrom`尋找指定的型別相容的類型。</span><span class="sxs-lookup"><span data-stu-id="31cae-105">The private method `CanConvertFrom` finds compatible types for a given type.</span></span>  
  
 [!code-cpp[Binder_1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Binder_1/CPP/binder.cpp#1)]
 [!code-csharp[Binder_1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Binder_1/CS/binder.cs#1)]
 [!code-vb[Binder_1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Binder_1/VB/binder.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>
        <span data-ttu-id="31cae-106">當您繼承自<see cref="T:System.Reflection.Binder" />，您必須覆寫下列成員： <see cref="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)" />， <see cref="M:System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)" />， <see cref="M:System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)" />， <see cref="M:System.Reflection.Binder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])" />， <see cref="M:System.Reflection.Binder.SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])" />，和<see cref="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)" />。</span>
        <span class="sxs-lookup">
          <span data-stu-id="31cae-106">When you inherit from <see cref="T:System.Reflection.Binder" />, you must override the following members: <see cref="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)" />, <see cref="M:System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)" />, <see cref="M:System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)" />, <see cref="M:System.Reflection.Binder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])" />, <see cref="M:System.Reflection.Binder.SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])" />, and <see cref="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)" />.</span>
        </span>
      </para>
    </block>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Binder ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Binder.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Binder();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="31cae-107">初始化 <see cref="T:System.Reflection.Binder" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="31cae-107">Initializes a new instance of the <see cref="T:System.Reflection.Binder" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31cae-108">在衍生類別，用來初始化狀態，在這種類型的建構函式會呼叫這個建構函式。</span><span class="sxs-lookup"><span data-stu-id="31cae-108">This constructor is called by the constructors of derived classes, to initialize state in this type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BindToField">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.FieldInfo BindToField (System.Reflection.BindingFlags bindingAttr, System.Reflection.FieldInfo[] match, object value, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.FieldInfo BindToField(valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.FieldInfo[] match, object value, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function BindToField (bindingAttr As BindingFlags, match As FieldInfo(), value As Object, culture As CultureInfo) As FieldInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Reflection::FieldInfo ^ BindToField(System::Reflection::BindingFlags bindingAttr, cli::array &lt;System::Reflection::FieldInfo ^&gt; ^ match, System::Object ^ value, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="abstract member BindToField : System.Reflection.BindingFlags * System.Reflection.FieldInfo[] * obj * System.Globalization.CultureInfo -&gt; System.Reflection.FieldInfo" Usage="binder.BindToField (bindingAttr, match, value, culture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="match" Type="System.Reflection.FieldInfo[]" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="31cae-109">
            <see cref="T:System.Reflection.BindingFlags" /> 值的位元組合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="31cae-109">A bitwise combination of <see cref="T:System.Reflection.BindingFlags" /> values.</span>
          </span>
        </param>
        <param name="match">
          <span data-ttu-id="31cae-110">可能相符的欄位集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="31cae-110">The set of fields that are candidates for matching.</span>
          </span>
          <span data-ttu-id="31cae-111">例如，當 <see cref="T:System.Reflection.Binder" /> 使用 <see cref="Overload:System.Type.InvokeMember" /> 物件時，這個參數就會指定已由反映判定為可能相符的欄位集合，通常是因為這些欄位具有正確的成員名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="31cae-111">For example, when a <see cref="T:System.Reflection.Binder" /> object is used by <see cref="Overload:System.Type.InvokeMember" />, this parameter specifies the set of fields that reflection has determined to be possible matches, typically because they have the correct member name.</span>
          </span>
          <span data-ttu-id="31cae-112">
            <see cref="P:System.Type.DefaultBinder" /> 所提供的預設實作會變更此陣列的順序。</span>
          <span class="sxs-lookup">
            <span data-stu-id="31cae-112">The default implementation provided by <see cref="P:System.Type.DefaultBinder" /> changes the order of this array.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="31cae-113">用來找出相符欄位的欄位值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="31cae-113">The field value used to locate a matching field.</span>
          </span>
        </param>
        <param name="culture">
          <span data-ttu-id="31cae-114">
            <see cref="T:System.Globalization.CultureInfo" /> 的執行個體 (Instance)，用來控制強制型轉型別的繫結器 (Binder) 實作中資料型別的強制型轉 (Coercion)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="31cae-114">An instance of <see cref="T:System.Globalization.CultureInfo" /> that is used to control the coercion of data types, in binder implementations that coerce types.</span>
          </span>
          <span data-ttu-id="31cae-115">如果 <paramref name="culture" /> 為 <see langword="null" />，會使用目前執行緒的 <see cref="T:System.Globalization.CultureInfo" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="31cae-115">If <paramref name="culture" /> is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used.</span>
          </span>
          <span data-ttu-id="31cae-116">注意：例如，如果繫結器實作允許您將字串值強制型轉為數值，則將表示 1000 的 <see langword="String" /> 轉換成 <see langword="Double" /> 值時必須使用這個參數，因為 1000 在不同的文化特性中有不同的表示方式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="31cae-116">Note   For example, if a binder implementation allows coercion of string values to numeric types, this parameter is necessary to convert a <see langword="String" /> that represents 1000 to a <see langword="Double" /> value, because 1000 is represented differently by different cultures.</span>
          </span>
          <span data-ttu-id="31cae-117">預設的繫結器不會處理這種字串強制型轉。</span>
          <span class="sxs-lookup">
            <span data-stu-id="31cae-117">The default binder does not do such string coercions.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="31cae-118">根據指定的條件，從一組指定的欄位中選取欄位。</span>
          <span class="sxs-lookup">
            <span data-stu-id="31cae-118">Selects a field from the given set of fields, based on the specified criteria.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="31cae-119">符合的欄位。</span>
          <span class="sxs-lookup">
            <span data-stu-id="31cae-119">The matching field.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31cae-120">如果`bindingAttr`不包含<xref:System.Reflection.BindingFlags.SetField?displayProperty=nameWithType>，所提供的預設繫結器實作<xref:System.Type.DefaultBinder%2A?displayProperty=nameWithType>只會傳回第一個項目`match`。</span><span class="sxs-lookup"><span data-stu-id="31cae-120">If `bindingAttr` does not include <xref:System.Reflection.BindingFlags.SetField?displayProperty=nameWithType>, the default binder implementation provided by <xref:System.Type.DefaultBinder%2A?displayProperty=nameWithType> simply returns the first element of `match`.</span></span> <span data-ttu-id="31cae-121">沒有選取項目會完成。</span><span class="sxs-lookup"><span data-stu-id="31cae-121">No selection is done.</span></span>  
  
 <span data-ttu-id="31cae-122">這個方法會控制所提供的繫結<xref:System.Type.InvokeMember%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="31cae-122">This method controls the binding provided by <xref:System.Type.InvokeMember%2A?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="31cae-123">如果是預設繫結器，<paramref name="bindingAttr" /> 將包括 <see cref="F:System.Reflection.BindingFlags.SetField" />，而 <paramref name="match" /> 則包含同樣都與 <paramref name="value" /> 相符的多個欄位。</span>
          <span class="sxs-lookup">
            <span data-stu-id="31cae-123">For the default binder, <paramref name="bindingAttr" /> includes <see cref="F:System.Reflection.BindingFlags.SetField" />, and <paramref name="match" /> contains multiple fields that are equally good matches for <paramref name="value" />.</span>
          </span>
          <span data-ttu-id="31cae-124">例如，<paramref name="value" /> 包含的 <c>MyClass</c> 物件會執行 <c>IMyClass</c> 介面，而 <paramref name="match" /> 包含 <c>MyClass</c> 類型的欄位和 <c>IMyClass</c> 類型的欄位。</span>
          <span class="sxs-lookup">
            <span data-stu-id="31cae-124">For example, <paramref name="value" /> contains a <c>MyClass</c> object that implements the <c>IMyClass</c> interface, and <paramref name="match" /> contains a field of type <c>MyClass</c> and a field of type <c>IMyClass</c>.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingFieldException">
          <span data-ttu-id="31cae-125">如果是預設繫結器，<paramref name="bindingAttr" /> 將包括 <see cref="F:System.Reflection.BindingFlags.SetField" />，而 <paramref name="match" /> 則不會包含可以接受 <paramref name="value" /> 的欄位。</span>
          <span class="sxs-lookup">
            <span data-stu-id="31cae-125">For the default binder, <paramref name="bindingAttr" /> includes <see cref="F:System.Reflection.BindingFlags.SetField" />, and <paramref name="match" /> contains no fields that can accept <paramref name="value" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NullReferenceException">
          <span data-ttu-id="31cae-126">如果是預設繫結器，<paramref name="bindingAttr" /> 將包括 <see cref="F:System.Reflection.BindingFlags.SetField" />，而 <paramref name="match" /> 則會是 <see langword="null" /> 或空白陣列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="31cae-126">For the default binder, <paramref name="bindingAttr" /> includes <see cref="F:System.Reflection.BindingFlags.SetField" />, and <paramref name="match" /> is <see langword="null" /> or an empty array.</span>
          </span>
          <span data-ttu-id="31cae-127">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="31cae-127">-or-</span>
          </span>
          <span data-ttu-id="31cae-128">
            <paramref name="bindingAttr" /> 將包括 <see cref="F:System.Reflection.BindingFlags.SetField" />，而 <paramref name="value" /> 則會是 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="31cae-128">
              <paramref name="bindingAttr" /> includes <see cref="F:System.Reflection.BindingFlags.SetField" />, and <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.FieldInfo" />
      </Docs>
    </Member>
    <Member MemberName="BindToMethod">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.MethodBase BindToMethod (System.Reflection.BindingFlags bindingAttr, System.Reflection.MethodBase[] match, ref object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] names, out object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodBase BindToMethod(valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.MethodBase[] match, object[]&amp; args, valuetype System.Reflection.ParameterModifier[] modifiers, class System.Globalization.CultureInfo culture, string[] names, [out] object&amp; state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function BindToMethod (bindingAttr As BindingFlags, match As MethodBase(), ByRef args As Object(), modifiers As ParameterModifier(), culture As CultureInfo, names As String(), ByRef state As Object) As MethodBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Reflection::MethodBase ^ BindToMethod(System::Reflection::BindingFlags bindingAttr, cli::array &lt;System::Reflection::MethodBase ^&gt; ^ match, cli::array &lt;System::Object ^&gt; ^ % args, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers, System::Globalization::CultureInfo ^ culture, cli::array &lt;System::String ^&gt; ^ names, [Runtime::InteropServices::Out] System::Object ^ % state);" />
      <MemberSignature Language="F#" Value="abstract member BindToMethod : System.Reflection.BindingFlags * System.Reflection.MethodBase[] *  * System.Reflection.ParameterModifier[] * System.Globalization.CultureInfo * string[] *  -&gt; System.Reflection.MethodBase" Usage="binder.BindToMethod (bindingAttr, match, args, modifiers, culture, names, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodBase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="match" Type="System.Reflection.MethodBase[]" />
        <Parameter Name="args" Type="System.Object[]" RefType="ref" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="names" Type="System.String[]" />
        <Parameter Name="state" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="31cae-129">
            <see cref="T:System.Reflection.BindingFlags" /> 值的位元組合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="31cae-129">A bitwise combination of <see cref="T:System.Reflection.BindingFlags" /> values.</span>
          </span>
        </param>
        <param name="match">
          <span data-ttu-id="31cae-130">可能相符的方法集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="31cae-130">The set of methods that are candidates for matching.</span>
          </span>
          <span data-ttu-id="31cae-131">例如，當 <see cref="T:System.Reflection.Binder" /> 使用 <see cref="Overload:System.Type.InvokeMember" /> 物件時，這個參數就會指定已由反映判定為可能相符的方法集合，通常是因為這些方法具有正確的成員名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="31cae-131">For example, when a <see cref="T:System.Reflection.Binder" /> object is used by <see cref="Overload:System.Type.InvokeMember" />, this parameter specifies the set of methods that reflection has determined to be possible matches, typically because they have the correct member name.</span>
          </span>
          <span data-ttu-id="31cae-132">
            <see cref="P:System.Type.DefaultBinder" /> 所提供的預設實作會變更此陣列的順序。</span>
          <span class="sxs-lookup">
            <span data-stu-id="31cae-132">The default implementation provided by <see cref="P:System.Type.DefaultBinder" /> changes the order of this array.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="31cae-133">傳入的引數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="31cae-133">The arguments that are passed in.</span>
          </span>
          <span data-ttu-id="31cae-134">繫結器可能會變更此陣列中的引數順序；例如，如果使用 <paramref name="names" /> 參數來指定位置順序以外的其他順序，預設繫結器就會變更引數的順序。</span>
          <span class="sxs-lookup">
            <span data-stu-id="31cae-134">The binder can change the order of the arguments in this array; for example, the default binder changes the order of arguments if the <paramref name="names" /> parameter is used to specify an order other than positional order.</span>
          </span>
          <span data-ttu-id="31cae-135">如果繫結器實作強制型轉了引數型別 (Argument Type)，引數的型別和值也可能會變更。</span>
          <span class="sxs-lookup">
            <span data-stu-id="31cae-135">If a binder implementation coerces argument types, the types and values of the arguments can be changed as well.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="31cae-136">參數修飾詞的陣列，啟用繫結以使用型別已被修改的參數簽章。</span>
          <span class="sxs-lookup">
            <span data-stu-id="31cae-136">An array of parameter modifiers that enable binding to work with parameter signatures in which the types have been modified.</span>
          </span>
          <span data-ttu-id="31cae-137">預設繫結器實作時並不會使用這個參數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="31cae-137">The default binder implementation does not use this parameter.</span>
          </span>
        </param>
        <param name="culture">
          <span data-ttu-id="31cae-138">
            <see cref="T:System.Globalization.CultureInfo" /> 的執行個體 (Instance)，用來控制強制型轉型別的繫結器 (Binder) 實作中資料型別的強制型轉 (Coercion)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="31cae-138">An instance of <see cref="T:System.Globalization.CultureInfo" /> that is used to control the coercion of data types, in binder implementations that coerce types.</span>
          </span>
          <span data-ttu-id="31cae-139">如果 <paramref name="culture" /> 為 <see langword="null" />，會使用目前執行緒的 <see cref="T:System.Globalization.CultureInfo" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="31cae-139">If <paramref name="culture" /> is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used.</span>
          </span>
          <span data-ttu-id="31cae-140">注意：例如，如果繫結器實作允許您將字串值強制型轉為數值，則將表示 1000 的 <see langword="String" /> 轉換成 <see langword="Double" /> 值時必須使用這個參數，因為 1000 在不同的文化特性中有不同的表示方式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="31cae-140">Note   For example, if a binder implementation allows coercion of string values to numeric types, this parameter is necessary to convert a <see langword="String" /> that represents 1000 to a <see langword="Double" /> value, because 1000 is represented differently by different cultures.</span>
          </span>
          <span data-ttu-id="31cae-141">預設的繫結器不會處理這種字串強制型轉。</span>
          <span class="sxs-lookup">
            <span data-stu-id="31cae-141">The default binder does not do such string coercions.</span>
          </span>
        </param>
        <param name="names">
          <span data-ttu-id="31cae-142">如果比對時必須考慮參數名稱，便為參數名稱；如果只將引數視為單純的位置引數，則為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="31cae-142">The parameter names, if parameter names are to be considered when matching, or <see langword="null" /> if arguments are to be treated as purely positional.</span>
          </span>
          <span data-ttu-id="31cae-143">例如，如果位置順序中並未提供引數，您就必須使用參數名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="31cae-143">For example, parameter names must be used if arguments are not supplied in positional order.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="31cae-144">在此方法傳回之後，<paramref name="state" /> 就會包含繫結器提供的物件，用以記錄引數重新調整順序。</span>
          <span class="sxs-lookup">
            <span data-stu-id="31cae-144">After the method returns, <paramref name="state" /> contains a binder-provided object that keeps track of argument reordering.</span>
          </span>
          <span data-ttu-id="31cae-145">繫結器會建立這個物件，而且也是這個物件的唯一使用者。</span>
          <span class="sxs-lookup">
            <span data-stu-id="31cae-145">The binder creates this object, and the binder is the sole consumer of this object.</span>
          </span>
          <span data-ttu-id="31cae-146">如果 <see langword="null" /> 傳回時 <paramref name="state" /> 不是 <see langword="BindToMethod" />，而且您想要將 <paramref name="state" /> 還原成原來的順序，使您可以擷取 <see langword="ref" /> 參數 (在 Visual Basic 中為 <see langword="ByRef" /> 參數) 的值，就必須將 <paramref name="args" /> 傳遞至 <see cref="M:System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)" /> 方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="31cae-146">If <paramref name="state" /> is not <see langword="null" /> when <see langword="BindToMethod" /> returns, you must pass <paramref name="state" /> to the <see cref="M:System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)" /> method if you want to restore <paramref name="args" /> to its original order, for example, so that you can retrieve the values of <see langword="ref" /> parameters (<see langword="ByRef" /> parameters in Visual Basic).</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="31cae-147">根據提供的引數，從一組指定的方法中選取要叫用 (Invoke) 的方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="31cae-147">Selects a method to invoke from the given set of methods, based on the supplied arguments.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="31cae-148">符合的方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="31cae-148">The matching method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31cae-149">預設繫結器會考慮這兩個參數的值和`params`陣列 (`ParamArray` Visual Basic 中的陣列)。</span><span class="sxs-lookup"><span data-stu-id="31cae-149">The default binder takes into account both parameters that have values and `params` arrays (`ParamArray` arrays in Visual Basic).</span></span> <span data-ttu-id="31cae-150">因此，您可在情況下尋找相符項目所在`args`和`match`不包含相同數目的項目。</span><span class="sxs-lookup"><span data-stu-id="31cae-150">Thus, it is possible to find a match in cases where `args` and `match` do not contain the same number of elements.</span></span>  
  
 <span data-ttu-id="31cae-151">繫結器可讓用戶端的引數陣列對應回其原始形式，如果有已操作引數陣列<xref:System.Reflection.Binder.BindToMethod%2A>。</span><span class="sxs-lookup"><span data-stu-id="31cae-151">The binder enables a client to map the array of arguments back to its original form if the argument array has been manipulated by <xref:System.Reflection.Binder.BindToMethod%2A>.</span></span> <span data-ttu-id="31cae-152">使用此重新對應功能，藉由參考引數有這類引數時取得。</span><span class="sxs-lookup"><span data-stu-id="31cae-152">Use this remap capability to get back by-reference arguments when such arguments are present.</span></span> <span data-ttu-id="31cae-153">當您依名稱傳遞引數時，繫結器會重新排列引數陣列。</span><span class="sxs-lookup"><span data-stu-id="31cae-153">When you pass arguments by name, the binder reorders the argument array.</span></span> <span data-ttu-id="31cae-154">`state`參數會持續追蹤的引數重新調整順序，如此可讓繫結器的<xref:System.Reflection.Binder.ReorderArgumentArray%2A>方法，以重新排列成其原始形式的引數陣列。</span><span class="sxs-lookup"><span data-stu-id="31cae-154">The `state` parameter keeps track of argument reordering, thus enabling the binder's <xref:System.Reflection.Binder.ReorderArgumentArray%2A> method to reorder the argument array to its original form.</span></span>  
  
 <span data-ttu-id="31cae-155"><xref:System.Reflection.Binder.BindToMethod%2A>方法由<xref:System.Type.InvokeMember%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="31cae-155">The <xref:System.Reflection.Binder.BindToMethod%2A> method is used by the <xref:System.Type.InvokeMember%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="31cae-156">如果是預設繫結器，<paramref name="match" /> 將包含同樣都與 <paramref name="args" /> 相符的多個方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="31cae-156">For the default binder, <paramref name="match" /> contains multiple methods that are equally good matches for <paramref name="args" />.</span>
          </span>
          <span data-ttu-id="31cae-157">例如，<paramref name="args" /> 包含的 <c>MyClass</c> 物件會實作 <c>IMyClass</c> 介面，而 <paramref name="match" /> 則包含採用 <c>MyClass</c> 的方法及採用 <c>IMyClass</c> 的方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="31cae-157">For example, <paramref name="args" /> contains a <c>MyClass</c> object that implements the <c>IMyClass</c> interface, and <paramref name="match" /> contains a method that takes <c>MyClass</c> and a method that takes <c>IMyClass</c>.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="31cae-158">如果是預設繫結器，<paramref name="match" /> 不會包含可以接受 <paramref name="args" /> 中提供之引數的方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="31cae-158">For the default binder, <paramref name="match" /> contains no methods that can accept the arguments supplied in <paramref name="args" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="31cae-159">如果是預設繫結器 (Binder)，<paramref name="match" /> 會是 <see langword="null" /> 或空白陣列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="31cae-159">For the default binder, <paramref name="match" /> is <see langword="null" /> or an empty array.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.MethodBase" />
      </Docs>
    </Member>
    <Member MemberName="CanChangeType">
      <MemberSignature Language="C#" Value="public virtual bool CanChangeType (object value, Type type, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanChangeType(object value, class System.Type type, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Binder.CanChangeType(System.Object,System.Type,System.Globalization.CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanChangeType(System::Object ^ value, Type ^ type, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="abstract member CanChangeType : obj * Type * System.Globalization.CultureInfo -&gt; bool&#xA;override this.CanChangeType : obj * Type * System.Globalization.CultureInfo -&gt; bool" Usage="binder.CanChangeType (value, type, culture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="type">To be added.</param>
        <param name="culture">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ChangeType">
      <MemberSignature Language="C#" Value="public abstract object ChangeType (object value, Type type, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ChangeType(object value, class System.Type type, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ ChangeType(System::Object ^ value, Type ^ type, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="abstract member ChangeType : obj * Type * System.Globalization.CultureInfo -&gt; obj" Usage="binder.ChangeType (value, type, culture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="31cae-160">要變更為新 <see langword="Type" /> 的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="31cae-160">The object to change into a new <see langword="Type" />.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="31cae-161">
            <paramref name="value" /> 將要變成的新 <see langword="Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="31cae-161">The new <see langword="Type" /> that <paramref name="value" /> will become.</span>
          </span>
        </param>
        <param name="culture">
          <span data-ttu-id="31cae-162">用來控制資料型別之強制型轉的 <see cref="T:System.Globalization.CultureInfo" /> 執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="31cae-162">An instance of <see cref="T:System.Globalization.CultureInfo" /> that is used to control the coercion of data types.</span>
          </span>
          <span data-ttu-id="31cae-163">如果 <paramref name="culture" /> 為 <see langword="null" />，會使用目前執行緒的 <see cref="T:System.Globalization.CultureInfo" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="31cae-163">If <paramref name="culture" /> is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used.</span>
          </span>
          <span data-ttu-id="31cae-164">注意：例如，將表示 1000 的 <see langword="String" /> 轉換為 <see langword="Double" /> 值時必須使用這個參數，因為 1000 在不同文化特性中有不同的表示方式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="31cae-164">Note   For example, this parameter is necessary to convert a <see langword="String" /> that represents 1000 to a <see langword="Double" /> value, because 1000 is represented differently by different cultures.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="31cae-165">將指定的 <see langword="Object" /> 型別變更為指定的 <see langword="Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="31cae-165">Changes the type of the given <see langword="Object" /> to the given <see langword="Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="31cae-166">物件，含有做為新型別的指定值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="31cae-166">An object that contains the given value as the new type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31cae-167">反映模型一般類型系統的存取範圍規則。</span><span class="sxs-lookup"><span data-stu-id="31cae-167">Reflection models the accessibility rules of the common type system.</span></span> <span data-ttu-id="31cae-168">比方說，如果呼叫端在相同的組件中，呼叫端不會不需要特殊權限的內部成員。</span><span class="sxs-lookup"><span data-stu-id="31cae-168">For example, if the caller is in the same assembly, the caller does not need special permissions for internal members.</span></span> <span data-ttu-id="31cae-169">否則，呼叫端需要<xref:System.Security.Permissions.ReflectionPermission>。</span><span class="sxs-lookup"><span data-stu-id="31cae-169">Otherwise, the caller needs <xref:System.Security.Permissions.ReflectionPermission>.</span></span> <span data-ttu-id="31cae-170">這是一致的受保護的成員查閱、 私用等等。</span><span class="sxs-lookup"><span data-stu-id="31cae-170">This is consistent with lookup of members that are protected, private, and so on.</span></span>  
  
 <span data-ttu-id="31cae-171">一般原則是`ChangeType`擴展強制型轉，永遠不會遺失資料只應該執行。</span><span class="sxs-lookup"><span data-stu-id="31cae-171">The general principle is that `ChangeType` should perform only widening coercions, which never lose data.</span></span> <span data-ttu-id="31cae-172">擴展強制型轉的範例將強制轉型為 64 位元帶正負號的整數值的 32 位元帶正負號的整數的值。</span><span class="sxs-lookup"><span data-stu-id="31cae-172">An example of a widening coercion is coercing a value that is a 32-bit signed integer to a value that is a 64-bit signed integer.</span></span> <span data-ttu-id="31cae-173">這被區別縮小強制，可能會遺失資料。</span><span class="sxs-lookup"><span data-stu-id="31cae-173">This is distinguished from a narrowing coercion, which may lose data.</span></span> <span data-ttu-id="31cae-174">縮小強制型轉的範例將強制轉型 64 位元帶正負號的整數，32 位元帶正負號的整數。</span><span class="sxs-lookup"><span data-stu-id="31cae-174">An example of a narrowing coercion is coercing a 64-bit signed integer to a 32-bit signed integer.</span></span>  
  
 <span data-ttu-id="31cae-175">下表列出由預設值強制型轉`ChangeType`。</span><span class="sxs-lookup"><span data-stu-id="31cae-175">The following table lists the coercions performed by the default `ChangeType`.</span></span>  
  
|<span data-ttu-id="31cae-176">來源類型</span><span class="sxs-lookup"><span data-stu-id="31cae-176">Source type</span></span>|<span data-ttu-id="31cae-177">目標類型</span><span class="sxs-lookup"><span data-stu-id="31cae-177">Target type</span></span>|  
|-----------------|-----------------|  
|<span data-ttu-id="31cae-178">任何型別</span><span class="sxs-lookup"><span data-stu-id="31cae-178">Any type</span></span>|<span data-ttu-id="31cae-179">基底類型。</span><span class="sxs-lookup"><span data-stu-id="31cae-179">Its base type.</span></span>|  
|<span data-ttu-id="31cae-180">任何型別</span><span class="sxs-lookup"><span data-stu-id="31cae-180">Any type</span></span>|<span data-ttu-id="31cae-181">它所實作的介面。</span><span class="sxs-lookup"><span data-stu-id="31cae-181">The interface it implements.</span></span>|  
|<span data-ttu-id="31cae-182">Char</span><span class="sxs-lookup"><span data-stu-id="31cae-182">Char</span></span>|<span data-ttu-id="31cae-183">UInt16、UInt32、Int32、UInt64、Int64、Single、Double</span><span class="sxs-lookup"><span data-stu-id="31cae-183">UInt16, UInt32, Int32, UInt64, Int64, Single, Double</span></span>|  
|<span data-ttu-id="31cae-184">Byte</span><span class="sxs-lookup"><span data-stu-id="31cae-184">Byte</span></span>|<span data-ttu-id="31cae-185">Char、UInt16、Int16、UInt32、Int32、UInt64、Int64、Single、Double</span><span class="sxs-lookup"><span data-stu-id="31cae-185">Char, UInt16, Int16, UInt32, Int32, UInt64, Int64, Single, Double</span></span>|  
|<span data-ttu-id="31cae-186">SByte</span><span class="sxs-lookup"><span data-stu-id="31cae-186">SByte</span></span>|<span data-ttu-id="31cae-187">Int16、Int32、Int64、Single、Double</span><span class="sxs-lookup"><span data-stu-id="31cae-187">Int16, Int32, Int64, Single, Double</span></span>|  
|<span data-ttu-id="31cae-188">UInt16</span><span class="sxs-lookup"><span data-stu-id="31cae-188">UInt16</span></span>|<span data-ttu-id="31cae-189">UInt32、Int32、UInt64、Int64、Single、Double</span><span class="sxs-lookup"><span data-stu-id="31cae-189">UInt32, Int32, UInt64, Int64, Single, Double</span></span>|  
|<span data-ttu-id="31cae-190">Int16</span><span class="sxs-lookup"><span data-stu-id="31cae-190">Int16</span></span>|<span data-ttu-id="31cae-191">Int32、Int64、Single、Double</span><span class="sxs-lookup"><span data-stu-id="31cae-191">Int32, Int64, Single, Double</span></span>|  
|<span data-ttu-id="31cae-192">UInt32</span><span class="sxs-lookup"><span data-stu-id="31cae-192">UInt32</span></span>|<span data-ttu-id="31cae-193">UInt64、Int64、Single、Double</span><span class="sxs-lookup"><span data-stu-id="31cae-193">UInt64, Int64, Single, Double</span></span>|  
|<span data-ttu-id="31cae-194">Int32</span><span class="sxs-lookup"><span data-stu-id="31cae-194">Int32</span></span>|<span data-ttu-id="31cae-195">Int64、Single、Double</span><span class="sxs-lookup"><span data-stu-id="31cae-195">Int64, Single, Double</span></span>|  
|<span data-ttu-id="31cae-196">UInt64</span><span class="sxs-lookup"><span data-stu-id="31cae-196">UInt64</span></span>|<span data-ttu-id="31cae-197">Single、Double</span><span class="sxs-lookup"><span data-stu-id="31cae-197">Single, Double</span></span>|  
|<span data-ttu-id="31cae-198">Int64</span><span class="sxs-lookup"><span data-stu-id="31cae-198">Int64</span></span>|<span data-ttu-id="31cae-199">Single、Double</span><span class="sxs-lookup"><span data-stu-id="31cae-199">Single, Double</span></span>|  
|<span data-ttu-id="31cae-200">Single</span><span class="sxs-lookup"><span data-stu-id="31cae-200">Single</span></span>|<span data-ttu-id="31cae-201">Double</span><span class="sxs-lookup"><span data-stu-id="31cae-201">Double</span></span>|  
|<span data-ttu-id="31cae-202">非參考</span><span class="sxs-lookup"><span data-stu-id="31cae-202">Non-reference</span></span>|<span data-ttu-id="31cae-203">參考。</span><span class="sxs-lookup"><span data-stu-id="31cae-203">By-reference.</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReorderArgumentArray">
      <MemberSignature Language="C#" Value="public abstract void ReorderArgumentArray (ref object[] args, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReorderArgumentArray(object[]&amp; args, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub ReorderArgumentArray (ByRef args As Object(), state As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void ReorderArgumentArray(cli::array &lt;System::Object ^&gt; ^ % args, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member ReorderArgumentArray :  * obj -&gt; unit" Usage="binder.ReorderArgumentArray (args, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.Object[]" RefType="ref" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="args">
          <span data-ttu-id="31cae-204">傳入的實質引數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="31cae-204">The actual arguments that are passed in.</span>
          </span>
          <span data-ttu-id="31cae-205">引數的型別和值都可以被變更。</span>
          <span class="sxs-lookup">
            <span data-stu-id="31cae-205">Both the types and values of the arguments can be changed.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="31cae-206">繫結器提供的物件，記錄引數重新調整順序。</span>
          <span class="sxs-lookup">
            <span data-stu-id="31cae-206">A binder-provided object that keeps track of argument reordering.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="31cae-207">在從 <see cref="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)" /> 傳回時，當 <paramref name="args" /> 引數來自 <see langword="BindToMethod" /> 時，將還原為本來的狀態。</span>
          <span class="sxs-lookup">
            <span data-stu-id="31cae-207">Upon returning from <see cref="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)" />, restores the <paramref name="args" /> argument to what it was when it came from <see langword="BindToMethod" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31cae-208">Common language runtime 會呼叫這個方法，如果`state`不是`null`之後傳回`BindToMethod`。</span><span class="sxs-lookup"><span data-stu-id="31cae-208">The common language runtime calls this method if `state` is not `null` after a return from `BindToMethod`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectMethod">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.MethodBase SelectMethod (System.Reflection.BindingFlags bindingAttr, System.Reflection.MethodBase[] match, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodBase SelectMethod(valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.MethodBase[] match, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Binder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function SelectMethod (bindingAttr As BindingFlags, match As MethodBase(), types As Type(), modifiers As ParameterModifier()) As MethodBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Reflection::MethodBase ^ SelectMethod(System::Reflection::BindingFlags bindingAttr, cli::array &lt;System::Reflection::MethodBase ^&gt; ^ match, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member SelectMethod : System.Reflection.BindingFlags * System.Reflection.MethodBase[] * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodBase" Usage="binder.SelectMethod (bindingAttr, match, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodBase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="match" Type="System.Reflection.MethodBase[]" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="31cae-209">
            <see cref="T:System.Reflection.BindingFlags" /> 值的位元組合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="31cae-209">A bitwise combination of <see cref="T:System.Reflection.BindingFlags" /> values.</span>
          </span>
        </param>
        <param name="match">
          <span data-ttu-id="31cae-210">可能相符的方法集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="31cae-210">The set of methods that are candidates for matching.</span>
          </span>
          <span data-ttu-id="31cae-211">例如，當 <see cref="T:System.Reflection.Binder" /> 使用 <see cref="Overload:System.Type.InvokeMember" /> 物件時，這個參數就會指定已由反映判定為可能相符的方法集合，通常是因為這些方法具有正確的成員名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="31cae-211">For example, when a <see cref="T:System.Reflection.Binder" /> object is used by <see cref="Overload:System.Type.InvokeMember" />, this parameter specifies the set of methods that reflection has determined to be possible matches, typically because they have the correct member name.</span>
          </span>
          <span data-ttu-id="31cae-212">
            <see cref="P:System.Type.DefaultBinder" /> 所提供的預設實作會變更此陣列的順序。</span>
          <span class="sxs-lookup">
            <span data-stu-id="31cae-212">The default implementation provided by <see cref="P:System.Type.DefaultBinder" /> changes the order of this array.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="31cae-213">用來找出相符方法的參數型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="31cae-213">The parameter types used to locate a matching method.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="31cae-214">參數修飾詞的陣列，啟用繫結以使用型別已被修改的參數簽章。</span>
          <span class="sxs-lookup">
            <span data-stu-id="31cae-214">An array of parameter modifiers that enable binding to work with parameter signatures in which the types have been modified.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="31cae-215">根據引數型別，從一組指定的方法中選取方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="31cae-215">Selects a method from the given set of methods, based on the argument type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="31cae-216">符合的方法，如果找到的話，否則為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="31cae-216">The matching method, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31cae-217">此方法應傳回`null`如果沒有方法符合準則。</span><span class="sxs-lookup"><span data-stu-id="31cae-217">This method should return `null` if no method matches the criteria.</span></span> <span data-ttu-id="31cae-218">這個方法會控制所提供的選取項目`GetConstructor`並`GetMethod`上的方法`Type`。</span><span class="sxs-lookup"><span data-stu-id="31cae-218">This method controls the selection provided by the `GetConstructor` and `GetMethod` methods on `Type`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="31cae-219">如果是預設繫結器，<paramref name="match" /> 將包含同樣都與 <paramref name="types" /> 所描述之參數型別相符的多個方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="31cae-219">For the default binder, <paramref name="match" /> contains multiple methods that are equally good matches for the parameter types described by <paramref name="types" />.</span>
          </span>
          <span data-ttu-id="31cae-220">例如，<paramref name="types" /> 中的陣列會包含 <c>MyClass</c> 的 <see cref="T:System.Type" /> 物件，而 <paramref name="match" /> 中的陣列則包含可取得 <c>MyClass</c> 之基底類別的方法，以及可取得 <c>MyClass</c> 所實作之介面的方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="31cae-220">For example, the array in <paramref name="types" /> contains a <see cref="T:System.Type" /> object for <c>MyClass</c> and the array in <paramref name="match" /> contains a method that takes a base class of <c>MyClass</c> and a method that takes an interface that <c>MyClass</c> implements.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="31cae-221">如果是預設繫結器 (Binder)，<paramref name="match" /> 會是 <see langword="null" /> 或空白陣列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="31cae-221">For the default binder, <paramref name="match" /> is <see langword="null" /> or an empty array.</span>
          </span>
          <span data-ttu-id="31cae-222">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="31cae-222">-or-</span>
          </span>
          <span data-ttu-id="31cae-223">
            <paramref name="types" /> 的一個項目衍生自 <see cref="T:System.Type" />，但不是 <see langword="RuntimeType" /> 型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="31cae-223">An element of <paramref name="types" /> derives from <see cref="T:System.Type" />, but is not of type <see langword="RuntimeType" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SelectProperty">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.PropertyInfo SelectProperty (System.Reflection.BindingFlags bindingAttr, System.Reflection.PropertyInfo[] match, Type returnType, Type[] indexes, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo SelectProperty(valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.PropertyInfo[] match, class System.Type returnType, class System.Type[] indexes, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Binder.SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function SelectProperty (bindingAttr As BindingFlags, match As PropertyInfo(), returnType As Type, indexes As Type(), modifiers As ParameterModifier()) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Reflection::PropertyInfo ^ SelectProperty(System::Reflection::BindingFlags bindingAttr, cli::array &lt;System::Reflection::PropertyInfo ^&gt; ^ match, Type ^ returnType, cli::array &lt;Type ^&gt; ^ indexes, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member SelectProperty : System.Reflection.BindingFlags * System.Reflection.PropertyInfo[] * Type * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.PropertyInfo" Usage="binder.SelectProperty (bindingAttr, match, returnType, indexes, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="match" Type="System.Reflection.PropertyInfo[]" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="indexes" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="31cae-224">
            <see cref="T:System.Reflection.BindingFlags" /> 值的位元組合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="31cae-224">A bitwise combination of <see cref="T:System.Reflection.BindingFlags" /> values.</span>
          </span>
        </param>
        <param name="match">
          <span data-ttu-id="31cae-225">可能相符的屬性集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="31cae-225">The set of properties that are candidates for matching.</span>
          </span>
          <span data-ttu-id="31cae-226">例如，當 <see cref="T:System.Reflection.Binder" /> 使用 <see cref="Overload:System.Type.InvokeMember" /> 物件時，這個參數就會指定已由反映判定為可能相符的屬性集合，通常是因為這些屬性具有正確的成員名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="31cae-226">For example, when a <see cref="T:System.Reflection.Binder" /> object is used by <see cref="Overload:System.Type.InvokeMember" />, this parameter specifies the set of properties that reflection has determined to be possible matches, typically because they have the correct member name.</span>
          </span>
          <span data-ttu-id="31cae-227">
            <see cref="P:System.Type.DefaultBinder" /> 所提供的預設實作會變更此陣列的順序。</span>
          <span class="sxs-lookup">
            <span data-stu-id="31cae-227">The default implementation provided by <see cref="P:System.Type.DefaultBinder" /> changes the order of this array.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="31cae-228">相符屬性必須有的傳回值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="31cae-228">The return value the matching property must have.</span>
          </span>
        </param>
        <param name="indexes">
          <span data-ttu-id="31cae-229">要被搜尋的索引屬性型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="31cae-229">The index types of the property being searched for.</span>
          </span>
          <span data-ttu-id="31cae-230">用於索引屬性，像是類別的索引子。</span>
          <span class="sxs-lookup">
            <span data-stu-id="31cae-230">Used for index properties such as the indexer for a class.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="31cae-231">參數修飾詞的陣列，啟用繫結以使用型別已被修改的參數簽章。</span>
          <span class="sxs-lookup">
            <span data-stu-id="31cae-231">An array of parameter modifiers that enable binding to work with parameter signatures in which the types have been modified.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="31cae-232">根據指定的條件，從一組指定的屬性中選取屬性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="31cae-232">Selects a property from the given set of properties, based on the specified criteria.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="31cae-233">符合的屬性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="31cae-233">The matching property.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31cae-234">這個方法會控制所提供的選取項目`GetProperty`方法`Type`。</span><span class="sxs-lookup"><span data-stu-id="31cae-234">This method controls the selection provided by the `GetProperty` method on `Type`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="31cae-235">如果是預設繫結器，<paramref name="match" /> 將包含同樣都與 <paramref name="returnType" /> 和 <paramref name="indexes" /> 相符的多個屬性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="31cae-235">For the default binder, <paramref name="match" /> contains multiple properties that are equally good matches for <paramref name="returnType" /> and <paramref name="indexes" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="31cae-236">如果是預設繫結器 (Binder)，<paramref name="match" /> 會是 <see langword="null" /> 或空白陣列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="31cae-236">For the default binder, <paramref name="match" /> is <see langword="null" /> or an empty array.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.PropertyInfo" />
      </Docs>
    </Member>
  </Members>
</Type>