<Type Name="ExceptionHandlingClauseOptions" FullName="System.Reflection.ExceptionHandlingClauseOptions">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="0c3f4afb987ee3e5c3fbed5fb2e3136979e957ed" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36638681" />
  </Metadata>
  <TypeSignature Language="C#" Value="public enum ExceptionHandlingClauseOptions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ExceptionHandlingClauseOptions extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.ExceptionHandlingClauseOptions" />
  <TypeSignature Language="VB.NET" Value="Public Enum ExceptionHandlingClauseOptions" />
  <TypeSignature Language="C++ CLI" Value="public enum class ExceptionHandlingClauseOptions" />
  <TypeSignature Language="F#" Value="type ExceptionHandlingClauseOptions = " />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Flags</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>識別例外狀況處理 (Exception Handling) 子句的類型。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要檢查的方法中的例外狀況處理子句，取得<xref:System.Reflection.MethodInfo>物件並呼叫<xref:System.Reflection.MethodBase.GetMethodBody%2A>方法，以取得方法主體。 使用<xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A>屬性，以取得一份<xref:System.Reflection.ExceptionHandlingClause>物件。  
  
> [!NOTE]
>  使用例外狀況處理子句需要瞭解的中繼資料和 Microsoft intermediate language (MSIL) 指令的格式。 可以找到資訊，通用語言基礎結構 (CLI) 文件，尤其是 < 磁碟分割第二部分： 中繼資料定義和語意 > 以及 < 磁碟分割 iii 部分： CIL 指令集 」 中。 您可以線上取得這份文件；請參閱 MSDN 上的 [ECMA C# 和通用語言基礎結構標準](http://go.microsoft.com/fwlink/?LinkID=99212)，以及 Ecma International 網站上的[標準 ECMA-335 - 通用語言基礎結構 (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552)。  
  
   
  
## Examples  
 下列程式碼範例會定義名為的測試方法`MethodBodyExample`，並顯示其本機變數的資訊和例外狀況處理子句。 <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType>方法用來取得<xref:System.Reflection.MethodBody>測試方法的物件。 <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A>屬性用來取得一份<xref:System.Reflection.ExceptionHandlingClause>物件，並顯示其屬性。  
  
> [!NOTE]
>  並非所有電腦的語言可能會都產生篩選子句。 Visual Basic 範例會顯示篩選子句中，使用 Visual Basic`When`運算式，其他語言的範例中會省略。  
  
 這段程式碼是針對所提供之較大範例的一部分<xref:System.Reflection.MethodBody>類別。  
  
 [!code-cpp[MethodBody#2](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#2)]
 [!code-csharp[MethodBody#2](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#2)]
 [!code-vb[MethodBody#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#2)]  
[!code-cpp[MethodBody#4](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#4)]
[!code-csharp[MethodBody#4](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#4)]
[!code-vb[MethodBody#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#4)]  
[!code-cpp[MethodBody#5](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#5)]
[!code-csharp[MethodBody#5](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#5)]
[!code-vb[MethodBody#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#5)]  
[!code-cpp[MethodBody#7](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#7)]
[!code-csharp[MethodBody#7](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#7)]
[!code-vb[MethodBody#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#7)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Reflection.MethodBody" />
    <altmember cref="T:System.Reflection.ExceptionHandlingClause" />
  </Docs>
  <Members>
    <Member MemberName="Clause">
      <MemberSignature Language="C#" Value="Clause" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Reflection.ExceptionHandlingClauseOptions Clause = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.ExceptionHandlingClauseOptions.Clause" />
      <MemberSignature Language="VB.NET" Value="Clause" />
      <MemberSignature Language="C++ CLI" Value="Clause" />
      <MemberSignature Language="F#" Value="Clause = 0" Usage="System.Reflection.ExceptionHandlingClauseOptions.Clause" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ExceptionHandlingClauseOptions</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>此子句會接受所有衍生自指定之型別的例外狀況。</summary>
      </Docs>
    </Member>
    <Member MemberName="Fault">
      <MemberSignature Language="C#" Value="Fault" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Reflection.ExceptionHandlingClauseOptions Fault = int32(4)" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.ExceptionHandlingClauseOptions.Fault" />
      <MemberSignature Language="VB.NET" Value="Fault" />
      <MemberSignature Language="C++ CLI" Value="Fault" />
      <MemberSignature Language="F#" Value="Fault = 4" Usage="System.Reflection.ExceptionHandlingClauseOptions.Fault" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ExceptionHandlingClauseOptions</ReturnType>
      </ReturnValue>
      <MemberValue>4</MemberValue>
      <Docs>
        <summary>發生例外狀況時會執行此子句，但正常的控制流程完成時則不會執行。</summary>
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="Filter" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Reflection.ExceptionHandlingClauseOptions Filter = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.ExceptionHandlingClauseOptions.Filter" />
      <MemberSignature Language="VB.NET" Value="Filter" />
      <MemberSignature Language="C++ CLI" Value="Filter" />
      <MemberSignature Language="F#" Value="Filter = 1" Usage="System.Reflection.ExceptionHandlingClauseOptions.Filter" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ExceptionHandlingClauseOptions</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>此子句含有使用者指定的指令，可決定是否應忽略例外狀況 (亦即，正常性執行是否應繼續進行)、是否應由關聯的處理常式處理例外狀況，或者是否應將例外狀況傳遞至下一個子句。</summary>
      </Docs>
    </Member>
    <Member MemberName="Finally">
      <MemberSignature Language="C#" Value="Finally" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Reflection.ExceptionHandlingClauseOptions Finally = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.ExceptionHandlingClauseOptions.Finally" />
      <MemberSignature Language="VB.NET" Value="Finally" />
      <MemberSignature Language="C++ CLI" Value="Finally" />
      <MemberSignature Language="F#" Value="Finally = 2" Usage="System.Reflection.ExceptionHandlingClauseOptions.Finally" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ExceptionHandlingClauseOptions</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>每當 try 區塊結束 (不論是經由正常的控制流程或是由於未處理的例外狀況) 時，都會執行此子句。</summary>
      </Docs>
    </Member>
  </Members>
</Type>