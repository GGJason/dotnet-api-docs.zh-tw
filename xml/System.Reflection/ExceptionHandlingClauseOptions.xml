<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ExceptionHandlingClauseOptions.xml" source-language="en-US" target-language="zh-TW">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5392d3cbc4a7aaa362797299233bcbad4451106f3.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">392d3cbc4a7aaa362797299233bcbad4451106f3</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Reflection.ExceptionHandlingClauseOptions">
          <source>Identifies kinds of exception-handling clauses.</source>
          <target state="translated">識別例外狀況處理 (Exception Handling) 子句的類型。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.ExceptionHandlingClauseOptions">
          <source>To examine the exception-handling clauses in a method, obtain a <ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph> object and call the <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetMethodBody%2A&gt;</ph> method to obtain the method body.</source>
          <target state="translated">若要檢查的方法中的例外狀況處理子句，取得<ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph>物件並呼叫<ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetMethodBody%2A&gt;</ph>方法，以取得方法主體。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.ExceptionHandlingClauseOptions">
          <source>Use the <ph id="ph1">&lt;xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A&gt;</ph> property to obtain a list of <ph id="ph2">&lt;xref:System.Reflection.ExceptionHandlingClause&gt;</ph> objects.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A&gt;</ph>屬性，以取得一份<ph id="ph2">&lt;xref:System.Reflection.ExceptionHandlingClause&gt;</ph>物件。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.ExceptionHandlingClauseOptions">
          <source>Working with exception-handling clauses requires a thorough understanding of metadata and Microsoft intermediate language (MSIL) instruction formats.</source>
          <target state="translated">使用例外狀況處理子句需要瞭解的中繼資料和 Microsoft intermediate language (MSIL) 指令的格式。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.ExceptionHandlingClauseOptions">
          <source>Information can be found in the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</source>
          <target state="translated">可以找到資訊，通用語言基礎結構 (CLI) 文件，尤其是 &lt; 磁碟分割第二部分： 中繼資料定義和語意 &gt; 以及 &lt; 磁碟分割 iii 部分： CIL 指令集 」 中。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.ExceptionHandlingClauseOptions">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">您可以線上取得這份文件；請參閱 MSDN 上的 <bpt id="p1">[</bpt>ECMA C# 和通用語言基礎結構標準<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept>，以及 Ecma International 網站上的<bpt id="p2">[</bpt>標準 ECMA-335 - 通用語言基礎結構 (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept>。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.ExceptionHandlingClauseOptions">
          <source>The following code example defines a test method named <ph id="ph1">`MethodBodyExample`</ph>, and displays its local variable information and exception-handling clauses.</source>
          <target state="translated">下列程式碼範例會定義名為的測試方法<ph id="ph1">`MethodBodyExample`</ph>，並顯示其本機變數的資訊和例外狀況處理子句。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.ExceptionHandlingClauseOptions">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType&gt;</ph> method is used to obtain a <ph id="ph2">&lt;xref:System.Reflection.MethodBody&gt;</ph> object for the test method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType&gt;</ph>方法用來取得<ph id="ph2">&lt;xref:System.Reflection.MethodBody&gt;</ph>測試方法的物件。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.ExceptionHandlingClauseOptions">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A&gt;</ph> property is used to obtain a list of <ph id="ph2">&lt;xref:System.Reflection.ExceptionHandlingClause&gt;</ph> objects and display their properties.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A&gt;</ph>屬性用來取得一份<ph id="ph2">&lt;xref:System.Reflection.ExceptionHandlingClause&gt;</ph>物件，並顯示其屬性。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.ExceptionHandlingClauseOptions">
          <source>Not all computer languages can generate Filter clauses.</source>
          <target state="translated">並非所有電腦的語言可能會都產生篩選子句。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.ExceptionHandlingClauseOptions">
          <source>The Visual Basic example shows a filter clause, using a Visual Basic <ph id="ph1">`When`</ph> expression, which is omitted from the examples for other languages.</source>
          <target state="translated">Visual Basic 範例會顯示篩選子句中，使用 Visual Basic<ph id="ph1">`When`</ph>運算式，其他語言的範例中會省略。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.ExceptionHandlingClauseOptions">
          <source>This code is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Reflection.MethodBody&gt;</ph> class.</source>
          <target state="translated">這段程式碼是針對所提供之較大範例的一部分<ph id="ph1">&lt;xref:System.Reflection.MethodBody&gt;</ph>類別。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="F:System.Reflection.ExceptionHandlingClauseOptions.Clause">
          <source>The clause accepts all exceptions that derive from a specified type.</source>
          <target state="translated">此子句會接受所有衍生自指定之型別的例外狀況。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="F:System.Reflection.ExceptionHandlingClauseOptions.Fault">
          <source>The clause is executed if an exception occurs, but not on completion of normal control flow.</source>
          <target state="translated">發生例外狀況時會執行此子句，但正常的控制流程完成時則不會執行。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="F:System.Reflection.ExceptionHandlingClauseOptions.Filter">
          <source>The clause contains user-specified instructions that determine whether the exception should be ignored (that is, whether normal execution should resume), be handled by the associated handler, or be passed on to the next clause.</source>
          <target state="translated">此子句含有使用者指定的指令，可決定是否應忽略例外狀況 (亦即，正常性執行是否應繼續進行)、是否應由關聯的處理常式處理例外狀況，或者是否應將例外狀況傳遞至下一個子句。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="F:System.Reflection.ExceptionHandlingClauseOptions.Finally">
          <source>The clause is executed whenever the try block exits, whether through normal control flow or because of an unhandled exception.</source>
          <target state="translated">每當 try 區塊結束 (不論是經由正常的控制流程或是由於未處理的例外狀況) 時，都會執行此子句。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>