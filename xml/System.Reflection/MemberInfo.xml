<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="MemberInfo.xml" source-language="en-US" target-language="zh-TW">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac58db62a3ed31bdc693e0000017df74ab65286b3e5.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8db62a3ed31bdc693e0000017df74ab65286b3e5</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Reflection.MemberInfo">
          <source>Obtains information about the attributes of a member and provides access to member metadata.</source>
          <target state="translated">取得成員的屬性相關資訊，並提供成員中繼資料的存取。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.MemberInfo">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.MemberInfo&gt;</ph> class is the abstract base class for classes used to obtain information about all members of a class (constructors, events, fields, methods, and properties).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.MemberInfo&gt;</ph>類別是用來取得類別 （建構函式、 事件、 欄位、 方法和屬性） 的所有成員的相關資訊的類別的抽象基底類別。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.MemberInfo">
          <source>This class introduces the basic functionality that all members provide.</source>
          <target state="translated">此類別引進了所有成員都提供的基本功能。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.MemberInfo">
          <source>This example shows how to use various reflection classes to analyze the metadata contained in an assembly.</source>
          <target state="translated">這個範例示範如何使用不同的反映類別來分析的組件中包含的中繼資料。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.MemberInfo">
          <source>for full trust for inheritors.</source>
          <target state="translated">針對繼承者完全信任。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.MemberInfo">
          <source>This class cannot be inherited by partially trusted code.</source>
          <target state="translated">這個類別無法被繼承，部分信任程式碼。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.MemberInfo">
          <source>This type is thread safe.</source>
          <target state="translated">此型別具備執行緒安全。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.MemberInfo">
          <source>When you inherit from <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> you must override the following members: <ph id="ph2">&lt;see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /&gt;</ph> and <ph id="ph3">&lt;see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" /&gt;</ph>.</source>
          <target state="translated">當您繼承自<ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph>必須覆寫下列成員：<ph id="ph2">&lt;see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /&gt;</ph>和<ph id="ph3">&lt;see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.#ctor">
          <source>Only a derived class can create this <ph id="ph1">`MemberInfo`</ph> class.</source>
          <target state="translated">只有在衍生的類別可以建立這<ph id="ph1">`MemberInfo`</ph>類別。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="P:System.Reflection.MemberInfo.CustomAttributes">
          <source>Gets a collection that contains this member's custom attributes.</source>
          <target state="translated">取得包含此成員之自訂屬性的集合。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.CustomAttributes">
          <source>A collection that contains this member's custom attributes.</source>
          <target state="translated">包含此成員之自訂屬性的集合。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="P:System.Reflection.MemberInfo.DeclaringType">
          <source>Gets the class that declares this member.</source>
          <target state="translated">取得宣告這個成員的類別。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.DeclaringType">
          <source>The <ph id="ph1">&lt;see langword="Type" /&gt;</ph> object for the class that declares this member.</source>
          <target state="translated">宣告這個成員之類別的 <ph id="ph1">&lt;see langword="Type" /&gt;</ph> 物件。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.DeclaringType">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.MemberInfo.DeclaringType%2A&gt;</ph> property retrieves a reference to the <ph id="ph2">&lt;xref:System.Type&gt;</ph> object for the type that declares this member.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.MemberInfo.DeclaringType%2A&gt;</ph>屬性擷取參考<ph id="ph2">&lt;xref:System.Type&gt;</ph>宣告這個成員的型別物件。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.DeclaringType">
          <source>A member of a type is either declared by the type or inherited from a base type, so the <ph id="ph1">`Type`</ph> object returned by the <ph id="ph2">&lt;xref:System.Reflection.MemberInfo.DeclaringType%2A&gt;</ph> property might not be the same as the <ph id="ph3">`Type`</ph> object used to obtain the current <ph id="ph4">&lt;xref:System.Reflection.MemberInfo&gt;</ph> object.</source>
          <target state="translated">型別成員類型所宣告或繼承自基底類型，所以<ph id="ph1">`Type`</ph>所傳回物件<ph id="ph2">&lt;xref:System.Reflection.MemberInfo.DeclaringType%2A&gt;</ph>屬性可能不是相同<ph id="ph3">`Type`</ph>用來取得目前物件<ph id="ph4">&lt;xref:System.Reflection.MemberInfo&gt;</ph>物件。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.DeclaringType">
          <source>If the <ph id="ph1">`Type`</ph> object from which this <ph id="ph2">`MemberInfo`</ph> object was obtained did not declare this member, the <ph id="ph3">&lt;xref:System.Reflection.MemberInfo.DeclaringType%2A&gt;</ph> property will represent one of its base types.</source>
          <target state="translated">如果<ph id="ph1">`Type`</ph>從這個物件<ph id="ph2">`MemberInfo`</ph>取得物件沒有宣告此成員<ph id="ph3">&lt;xref:System.Reflection.MemberInfo.DeclaringType%2A&gt;</ph>屬性會表示其基底型別。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.DeclaringType">
          <source>If the <ph id="ph1">`MemberInfo`</ph> object is a global member (that is, if it was obtained from the <ph id="ph2">&lt;xref:System.Reflection.Module.GetMethods%2A?displayProperty=nameWithType&gt;</ph> method, which returns global methods on a module), the returned <ph id="ph3">&lt;xref:System.Reflection.MemberInfo.DeclaringType%2A&gt;</ph> will be <ph id="ph4">`null`</ph>.</source>
          <target state="translated">如果<ph id="ph1">`MemberInfo`</ph>物件是全域的成員 (亦即，如果從取得<ph id="ph2">&lt;xref:System.Reflection.Module.GetMethods%2A?displayProperty=nameWithType&gt;</ph>方法，這個方法會傳回全域方法，在模組上)，傳回<ph id="ph3">&lt;xref:System.Reflection.MemberInfo.DeclaringType%2A&gt;</ph>將<ph id="ph4">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.DeclaringType">
          <source>The following example defines an interface, <ph id="ph1">`IValue`</ph>, with a single member, <ph id="ph2">`GetValue`</ph>.</source>
          <target state="translated">下列範例會定義介面， <ph id="ph1">`IValue`</ph>，具有單一成員， <ph id="ph2">`GetValue`</ph>。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.DeclaringType">
          <source>It also defines four classes: <ph id="ph1">`A`</ph>, a base class that implements the <ph id="ph2">`IValue`</ph> interface; <ph id="ph3">`B`</ph>, which inherits from <ph id="ph4">`A`</ph> and hides its implementation of <ph id="ph5">`GetValue`</ph> from the base class implementation; <ph id="ph6">`C`</ph>, which simply inherits from <ph id="ph7">`A`</ph>; and <ph id="ph8">`D`</ph>, which inherits from <ph id="ph9">`A`</ph> and overrides its <ph id="ph10">`GetValue`</ph> method.</source>
          <target state="translated">它也會定義四個類別： <ph id="ph1">`A`</ph>，基底類別實作<ph id="ph2">`IValue`</ph>介面;<ph id="ph3">`B`</ph>，後者繼承自<ph id="ph4">`A`</ph>並隱藏它的實作<ph id="ph5">`GetValue`</ph>基底類別實作。<ph id="ph6">`C`</ph>，只是繼承自<ph id="ph7">`A`</ph>; 和<ph id="ph8">`D`</ph>，後者繼承自<ph id="ph9">`A`</ph>和覆寫其<ph id="ph10">`GetValue`</ph>方法。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.DeclaringType">
          <source>The example then retrieves a <ph id="ph1">&lt;xref:System.Reflection.MemberInfo&gt;</ph> object for each member of the type (including members inherited from <ph id="ph2">&lt;xref:System.Object&gt;</ph>) and displays the value of its <ph id="ph3">&lt;xref:System.Reflection.MemberInfo.DeclaringType%2A&gt;</ph> property.</source>
          <target state="translated">此範例接著會擷取<ph id="ph1">&lt;xref:System.Reflection.MemberInfo&gt;</ph>型別的各個成員的物件 (包括成員繼承自<ph id="ph2">&lt;xref:System.Object&gt;</ph>) 顯示的值和其<ph id="ph3">&lt;xref:System.Reflection.MemberInfo.DeclaringType%2A&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.DeclaringType">
          <source>Note that the declaring type of <ph id="ph1">`A.GetValue`</ph> is <ph id="ph2">`A`</ph>, that <ph id="ph3">`B`</ph> includes two <ph id="ph4">`GetValue`</ph> methods, one declared by <ph id="ph5">`A`</ph> and one by <ph id="ph6">`B`</ph>, and that the declaring type of <ph id="ph7">`D.GetValue`</ph> is <ph id="ph8">`D`</ph>.</source>
          <target state="translated">宣告類型的附註<ph id="ph1">`A.GetValue`</ph>是<ph id="ph2">`A`</ph>、 該<ph id="ph3">`B`</ph>包含兩個<ph id="ph4">`GetValue`</ph>方法，來宣告一個<ph id="ph5">`A`</ph>，一個由<ph id="ph6">`B`</ph>的宣告類型和<ph id="ph7">`D.GetValue`</ph>是<ph id="ph8">`D`</ph>。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.DeclaringType">
          <source><ph id="ph1">`DeclaringType`</ph> returns only the member names and the names of their declaring types.</source>
          <target state="translated"><ph id="ph1">`DeclaringType`</ph> 傳回成員名稱，以及其宣告類型的名稱。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.DeclaringType">
          <source>To return the member names with their prototypes, call <ph id="ph1">`MemberInfo.ToString`</ph>.</source>
          <target state="translated">若要傳回的成員具有其原型的名稱，請呼叫<ph id="ph1">`MemberInfo.ToString`</ph>。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.Equals(System.Object)">
          <source>An object to compare with this instance, or <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">與這個執行個體相比較的物件，或 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.Equals(System.Object)">
          <source>Returns a value that indicates whether this instance is equal to a specified object.</source>
          <target state="translated">傳回值，這個值指出此執行個體是否與指定的物件相等。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> equals the type and value of this instance; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph1">&lt;see langword="true" /&gt;</ph> 和這個執行個體具有相同的類型和值，則為 <ph id="ph2">&lt;paramref name="obj" /&gt;</ph>否則為 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="T:System.Reflection.MemberInfo">
          <source>When overridden in a derived class, returns custom attributes applied to this member.</source>
          <target state="translated">在衍生類別中覆寫時，傳回套用至此成員的自訂屬性。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to search this member's inheritance chain to find the attributes; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> 表示要搜尋這個成員的繼承鏈結以尋找屬性；否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)">
          <source>This parameter is ignored for properties and events.</source>
          <target state="translated">這個參數會忽略屬性和事件。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)">
          <source>When overridden in a derived class, returns an array of all custom attributes applied to this member.</source>
          <target state="translated">在衍生類別中覆寫時，傳回套用至此成員之所有自訂屬性的陣列。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)">
          <source>An array that contains all the custom attributes applied to this member, or an array with zero elements if no attributes are defined.</source>
          <target state="translated">包含套用至此成員之所有自訂屬性的陣列，如果沒有定義屬性，則為包含零個元素的陣列。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)">
          <source>This method ignores the <ph id="ph1">`inherit`</ph> parameter for properties and events.</source>
          <target state="translated">這個方法會忽略<ph id="ph1">`inherit`</ph>參數屬性和事件。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)">
          <source>To search the inheritance chain for attributes on properties and events, use the appropriate overloads of the <ph id="ph1">&lt;xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">若要搜尋的屬性和事件屬性的繼承鏈結，使用的適當多載<ph id="ph1">&lt;xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)">
          <source>In the .NET Framework version 2.0, this method returns security attributes on methods, constructors, and types if they are stored in the new metadata format.</source>
          <target state="translated">在.NET Framework 2.0 版中，這個方法會傳回安全性屬性方法、 建構函式和類型上如果它們儲存在新的中繼資料格式。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)">
          <source>Assemblies compiled with version 2.0 use this format.</source>
          <target state="translated">以版本 2.0 所編譯的組件會使用此格式。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)">
          <source>Dynamic assemblies and assemblies compiled with earlier versions of the .NET Framework use the old XML format.</source>
          <target state="translated">動態組件和舊版的.NET Framework 編譯的組件使用舊的 XML 格式。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)">
          <source>See <bpt id="p1">[</bpt>Emitting Declarative Security Attributes<ept id="p1">](http://msdn.microsoft.com/library/9eeddee8-ca89-4440-b84b-fd613f590cd5)</ept>.</source>
          <target state="translated">請參閱<bpt id="p1">[</bpt>發出宣告式安全性屬性<ept id="p1">](http://msdn.microsoft.com/library/9eeddee8-ca89-4440-b84b-fd613f590cd5)</ept>。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)">
          <source>The following example defines a custom attribute and associates the attribute with <ph id="ph1">`MyClass.MyMethod`</ph>, retrieves the attribute at run time, and displays the result.</source>
          <target state="translated">下列範例定義的自訂屬性，並將相關聯的屬性<ph id="ph1">`MyClass.MyMethod`</ph>、 擷取屬性，在執行階段，並顯示結果。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)">
          <source>This member belongs to a type that is loaded into the reflection-only context.</source>
          <target state="translated">這個成員所屬的型別已載入僅限反映的內容中。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)">
          <source>See <bpt id="p1">[</bpt>How to: Load Assemblies into the Reflection-Only Context<ept id="p1">](~/docs/framework/reflection-and-codedom/how-to-load-assemblies-into-the-reflection-only-context.md)</ept>.</source>
          <target state="translated">請參閱<bpt id="p1">[</bpt>如何：將組件載入僅限反映的內容<ept id="p1">](~/docs/framework/reflection-and-codedom/how-to-load-assemblies-into-the-reflection-only-context.md)</ept>。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)">
          <source>A custom attribute type could not be loaded.</source>
          <target state="translated">無法載入自訂屬性型別。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>The type of attribute to search for.</source>
          <target state="translated">要搜尋的屬性類型。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>Only attributes that are assignable to this type are returned.</source>
          <target state="translated">只會傳回可指派給這種類型的屬性。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to search this member's inheritance chain to find the attributes; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> 表示要搜尋這個成員的繼承鏈結以尋找屬性；否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>This parameter is ignored for properties and events.</source>
          <target state="translated">這個參數會忽略屬性和事件。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>When overridden in a derived class, returns an array of custom attributes applied to this member and identified by <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph>.</source>
          <target state="translated">當在衍生的類別中覆寫時，會傳回套用至這個成員的自訂屬性陣列，並以 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 識別。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>An array of custom attributes applied to this member, or an array with zero elements if no attributes assignable to <ph id="ph1">&lt;paramref name="attributeType" /&gt;</ph> have been applied.</source>
          <target state="translated">套用至這個成員的自訂屬性陣列，或如果 <ph id="ph1">&lt;paramref name="attributeType" /&gt;</ph> 沒有套用任何可指派的屬性，則為零個項目的陣列。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>This method ignores the <ph id="ph1">`inherit`</ph> parameter for properties and events.</source>
          <target state="translated">這個方法會忽略<ph id="ph1">`inherit`</ph>參數屬性和事件。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>To search the inheritance chain for attributes on properties and events, use the appropriate overloads of the <ph id="ph1">&lt;xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">若要搜尋的屬性和事件屬性的繼承鏈結，使用的適當多載<ph id="ph1">&lt;xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>In the .NET Framework version 2.0, this method returns security attributes on methods, constructors, and types if the attributes are stored in the new metadata format.</source>
          <target state="translated">在.NET Framework 2.0 版中，這個方法會傳回安全性屬性方法、 建構函式和類型上如果屬性儲存在新的中繼資料格式。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>Assemblies compiled with version 2.0 use this format.</source>
          <target state="translated">以版本 2.0 所編譯的組件會使用此格式。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>Dynamic assemblies and assemblies compiled with earlier versions of the .NET Framework use the old XML format.</source>
          <target state="translated">動態組件和舊版的.NET Framework 編譯的組件使用舊的 XML 格式。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>See <bpt id="p1">[</bpt>Emitting Declarative Security Attributes<ept id="p1">](http://msdn.microsoft.com/library/9eeddee8-ca89-4440-b84b-fd613f590cd5)</ept>.</source>
          <target state="translated">請參閱<bpt id="p1">[</bpt>發出宣告式安全性屬性<ept id="p1">](http://msdn.microsoft.com/library/9eeddee8-ca89-4440-b84b-fd613f590cd5)</ept>。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>The following example defines a class named <ph id="ph1">`BaseClass`</ph> that has two non-inherited members: a thread static field named <ph id="ph2">`total`</ph> and a non-CLS-compliant method named <ph id="ph3">`MethodA`</ph>.</source>
          <target state="translated">下列範例會定義名為類別<ph id="ph1">`BaseClass`</ph>具有兩個非繼承的成員： 名為的執行緒靜態欄位<ph id="ph2">`total`</ph>和符合 CLS 標準的方法，名為<ph id="ph3">`MethodA`</ph>。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>A class named <ph id="ph1">`DerivedClass`</ph> inherits from <ph id="ph2">`BaseClass`</ph> and overrides its <ph id="ph3">`MethodA`</ph> method.</source>
          <target state="translated">類別，名為<ph id="ph1">`DerivedClass`</ph>繼承自<ph id="ph2">`BaseClass`</ph>和覆寫其<ph id="ph3">`MethodA`</ph>方法。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>Note that no attributes are applied to the members of <ph id="ph1">`DerivedClass`</ph>.</source>
          <target state="translated">請注意，沒有屬性會套用到的成員<ph id="ph1">`DerivedClass`</ph>。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>The example iterates the members of <ph id="ph1">`DerivedClass`</ph> to determine whether the <ph id="ph2">&lt;xref:System.CLSCompliantAttribute&gt;</ph> or <ph id="ph3">&lt;xref:System.ThreadStaticAttribute&gt;</ph> attribute as been applied to them.</source>
          <target state="translated">此範例會逐一查看的成員<ph id="ph1">`DerivedClass`</ph>來判斷是否<ph id="ph2">&lt;xref:System.CLSCompliantAttribute&gt;</ph>或<ph id="ph3">&lt;xref:System.ThreadStaticAttribute&gt;</ph>屬性已套用至它們。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>Because <ph id="ph1">`inherit`</ph> is <ph id="ph2">`true`</ph>, the method searches the inheritance hierarchy of <ph id="ph3">`DerivedClass`</ph> for the specified attribute.</source>
          <target state="translated">因為<ph id="ph1">`inherit`</ph>是<ph id="ph2">`true`</ph>，方法會搜尋的繼承階層架構<ph id="ph3">`DerivedClass`</ph>指定屬性。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>As the output from the example shows, the <ph id="ph1">`total`</ph> field is decorated with the <ph id="ph2">&lt;xref:System.ThreadStaticAttribute&gt;</ph> attribute, and the <ph id="ph3">`MethodA`</ph> method is decorated with the <ph id="ph4">&lt;xref:System.CLSCompliantAttribute&gt;</ph> attribute.</source>
          <target state="translated">做為範例所示，從輸出<ph id="ph1">`total`</ph>欄位以裝飾<ph id="ph2">&lt;xref:System.ThreadStaticAttribute&gt;</ph>屬性，而<ph id="ph3">`MethodA`</ph>方法以裝飾<ph id="ph4">&lt;xref:System.CLSCompliantAttribute&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>A custom attribute type cannot be loaded.</source>
          <target state="translated">無法載入自訂屬性型別。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>If <ph id="ph1">&lt;paramref name="attributeType" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph1">&lt;paramref name="attributeType" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>This member belongs to a type that is loaded into the reflection-only context.</source>
          <target state="translated">這個成員所屬的型別已載入僅限反映的內容中。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>See <bpt id="p1">[</bpt>How to: Load Assemblies into the Reflection-Only Context<ept id="p1">](~/docs/framework/reflection-and-codedom/how-to-load-assemblies-into-the-reflection-only-context.md)</ept>.</source>
          <target state="translated">請參閱<bpt id="p1">[</bpt>如何：將組件載入僅限反映的內容<ept id="p1">](~/docs/framework/reflection-and-codedom/how-to-load-assemblies-into-the-reflection-only-context.md)</ept>。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.GetCustomAttributesData">
          <source>Returns a list of <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeData" /&gt;</ph> objects representing data about the attributes that have been applied to the target member.</source>
          <target state="translated">傳回 <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeData" /&gt;</ph> 物件的清單，表示已套用至目標成員之屬性的資料。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.GetCustomAttributesData">
          <source>A generic list of <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeData" /&gt;</ph> objects representing data about the attributes that have been applied to the target member.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeData" /&gt;</ph> 物件的泛型清單，表示已套用至目標成員之屬性的相關資料。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributesData">
          <source>Use this method to examine the custom attributes of code in the reflection-only context, in cases where the custom attributes themselves are defined in code that is loaded into the reflection-only context.</source>
          <target state="translated">若要檢查之自訂屬性的程式碼，在僅限反映的內容中，在其中已載入僅限反映之內容的程式碼中定義的自訂屬性本身的情況下使用這個方法。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributesData">
          <source>Methods like <ph id="ph1">&lt;xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Reflection.MemberInfo.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph> cannot be used in such cases, because they create instances of the attributes.</source>
          <target state="translated">方法類似<ph id="ph1">&lt;xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph>和<ph id="ph2">&lt;xref:System.Reflection.MemberInfo.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph>不能在這種情況下，因為它們可以建立屬性的執行個體。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributesData">
          <source>Code in the reflection-only context cannot be executed.</source>
          <target state="translated">無法執行僅限反映的內容中的程式碼。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributesData">
          <source>For more information and for example code, see the <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData&gt;</ph> class.</source>
          <target state="translated">如需詳細資訊和如需範例程式碼，請參閱<ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData&gt;</ph>類別。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributesData">
          <source>This method gets custom attribute data for types, nested types, and type members, because the <ph id="ph1">&lt;xref:System.Type&gt;</ph> class and the classes in the <ph id="ph2">&lt;xref:System.Reflection&gt;</ph> namespace that represent type members all derive from <ph id="ph3">&lt;xref:System.Reflection.MemberInfo&gt;</ph>.</source>
          <target state="translated">此方法會取得自訂屬性資料類型、 巢狀的類型和類型成員，因為<ph id="ph1">&lt;xref:System.Type&gt;</ph>中和類別<ph id="ph2">&lt;xref:System.Reflection&gt;</ph>代表類型成員都是衍生自的命名空間<ph id="ph3">&lt;xref:System.Reflection.MemberInfo&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.GetHashCode">
          <source>Returns the hash code for this instance.</source>
          <target state="translated">傳回這個執行個體的雜湊碼。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.GetHashCode">
          <source>A 32-bit signed integer hash code.</source>
          <target state="translated">32 位元帶正負號的整數雜湊碼。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)">
          <source>The type of custom attribute to search for.</source>
          <target state="translated">要搜尋的自訂屬性型別。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)">
          <source>The search includes derived types.</source>
          <target state="translated">此搜尋包括衍生型別。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to search this member's inheritance chain to find the attributes; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> 表示要搜尋這個成員的繼承鏈結以尋找屬性；否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)">
          <source>This parameter is ignored for properties and events.</source>
          <target state="translated">這個參數會忽略屬性和事件。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)">
          <source>When overridden in a derived class, indicates whether one or more attributes of the specified type or of its derived types is applied to this member.</source>
          <target state="translated">在衍生類別中覆寫時，表示是否已有一個或多個具有指定型別或其衍生型別的屬性套用至這個成員。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if one or more instances of <ph id="ph2">&lt;paramref name="attributeType" /&gt;</ph> or any of its derived types is applied to this member; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果已有 <ph id="ph2">&lt;paramref name="attributeType" /&gt;</ph> 或其任何衍生型別的一個或多個執行個體套用至這個成員，則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)">
          <source>This method ignores the <ph id="ph1">`inherit`</ph> parameter for properties and events.</source>
          <target state="translated">這個方法會忽略<ph id="ph1">`inherit`</ph>參數屬性和事件。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)">
          <source>To search the inheritance chain for attributes on properties and events, use the appropriate overloads of the <ph id="ph1">&lt;xref:System.Attribute.IsDefined%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">若要搜尋的屬性和事件屬性的繼承鏈結，使用的適當多載<ph id="ph1">&lt;xref:System.Attribute.IsDefined%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)">
          <source>In the .NET Framework version 2.0, this method returns <ph id="ph1">`true`</ph> if a type, method, or constructor has security attributes stored in the new metadata format.</source>
          <target state="translated">在.NET Framework 2.0 版中，這個方法會傳回<ph id="ph1">`true`</ph>型別、 方法或建構函式是否儲存在新的中繼資料格式的安全性屬性。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)">
          <source>Assemblies compiled with version 2.0 use this format.</source>
          <target state="translated">以版本 2.0 所編譯的組件會使用此格式。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)">
          <source>Dynamic assemblies and assemblies compiled with earlier versions of the .NET Framework use the old XML format.</source>
          <target state="translated">動態組件和舊版的.NET Framework 編譯的組件使用舊的 XML 格式。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)">
          <source>See <bpt id="p1">[</bpt>Emitting Declarative Security Attributes<ept id="p1">](http://msdn.microsoft.com/library/9eeddee8-ca89-4440-b84b-fd613f590cd5)</ept>.</source>
          <target state="translated">請參閱<bpt id="p1">[</bpt>發出宣告式安全性屬性<ept id="p1">](http://msdn.microsoft.com/library/9eeddee8-ca89-4440-b84b-fd613f590cd5)</ept>。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)">
          <source>The following example determines whether the specified attribute is applied to the specified member.</source>
          <target state="translated">下列範例會判斷是否要將指定的屬性套用至指定的成員。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="P:System.Reflection.MemberInfo.MemberType">
          <source>When overridden in a derived class, gets a <ph id="ph1">&lt;see cref="T:System.Reflection.MemberTypes" /&gt;</ph> value indicating the type of the member — method, constructor, event, and so on.</source>
          <target state="translated">在衍生類別中覆寫時，取得 <ph id="ph1">&lt;see cref="T:System.Reflection.MemberTypes" /&gt;</ph> 值，指出成員類型︰方法、建構函式、事件等。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.MemberType">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MemberTypes" /&gt;</ph> value indicating the type of member.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.MemberTypes" /&gt;</ph> 值，表示成員類型。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.MemberType">
          <source>This property is overridden in derived classes, and the override returns the appropriate member type.</source>
          <target state="translated">在衍生類別中，覆寫這個屬性，並覆寫傳回適當的成員類型。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.MemberType">
          <source>Therefore, when you examine a set of <ph id="ph1">&lt;xref:System.Reflection.MemberInfo&gt;</ph> objects — for example, the array returned by <ph id="ph2">&lt;xref:System.Type.GetMembers%2A&gt;</ph> — the <ph id="ph3">&lt;xref:System.Reflection.MemberInfo.MemberType%2A&gt;</ph> property can be used to determine the member type of any given member.</source>
          <target state="translated">因此，當您檢查一組<ph id="ph1">&lt;xref:System.Reflection.MemberInfo&gt;</ph>物件 — 例如，將所傳回的陣列<ph id="ph2">&lt;xref:System.Type.GetMembers%2A&gt;</ph>—<ph id="ph3">&lt;xref:System.Reflection.MemberInfo.MemberType%2A&gt;</ph>屬性可以用來判斷任何特定成員的成員類型。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.MemberType">
          <source>To get the <ph id="ph1">`MemberType`</ph> property, get the class <ph id="ph2">&lt;xref:System.Type&gt;</ph>.</source>
          <target state="translated">若要取得<ph id="ph1">`MemberType`</ph>屬性，取得類別<ph id="ph2">&lt;xref:System.Type&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.MemberType">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> array.</source>
          <target state="translated">從<ph id="ph1">`Type`</ph>，取得<ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph>陣列。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.MemberType">
          <source>From the <ph id="ph1">`MethodInfo`</ph> array, get the <ph id="ph2">`MemberTypes`</ph>.</source>
          <target state="translated">從<ph id="ph1">`MethodInfo`</ph>陣列，請取得<ph id="ph2">`MemberTypes`</ph>。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.MemberType">
          <source>The following example displays the member name and type of a specified class.</source>
          <target state="translated">下列範例會顯示指定之類別的類型與成員名稱。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="P:System.Reflection.MemberInfo.MetadataToken">
          <source>Gets a value that identifies a metadata element.</source>
          <target state="translated">取得值，這個值可識別中繼資料項目。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.MetadataToken">
          <source>A value which, in combination with <ph id="ph1">&lt;see cref="P:System.Reflection.MemberInfo.Module" /&gt;</ph>, uniquely identifies a metadata element.</source>
          <target state="translated">將此值與 <ph id="ph1">&lt;see cref="P:System.Reflection.MemberInfo.Module" /&gt;</ph> 相結合，即可唯一識別中繼資料項目。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.MetadataToken">
          <source>The tokens obtained using this property can be passed to the unmanaged reflection API.</source>
          <target state="translated">使用這個屬性取得的權杖可以傳遞至 unmanaged 反映 API。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.MetadataToken">
          <source>For more information, please see <bpt id="p1">[</bpt>Unmanaged Reflection API<ept id="p1">](http://msdn.microsoft.com/library/0c5bb9de-0cf6-438d-ba47-134e6c775fb8)</ept>.</source>
          <target state="translated">如需詳細資訊，請參閱<bpt id="p1">[</bpt>Unmanaged 反映 API<ept id="p1">](http://msdn.microsoft.com/library/0c5bb9de-0cf6-438d-ba47-134e6c775fb8)</ept>。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.MetadataToken">
          <source>Using the unmanaged reflection API requires familiarity with the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</source>
          <target state="translated">使用 unmanaged 的反映 API，必須熟悉的通用語言基礎結構 (CLI) 文件，尤其是 &lt; 磁碟分割第二部分： 中繼資料定義和語意 &gt; 以及 &lt; 磁碟分割 iii 部分： CIL 指令集 」。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.MetadataToken">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">您可以線上取得這份文件；請參閱 MSDN 上的 <bpt id="p1">[</bpt>ECMA C# 和通用語言基礎結構標準<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept>，以及 Ecma International 網站上的<bpt id="p2">[</bpt>標準 ECMA-335 - 通用語言基礎結構 (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept>。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="P:System.Reflection.MemberInfo.MetadataToken">
          <source>The current <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> represents an array method, such as <ph id="ph2">&lt;see langword="Address" /&gt;</ph>, on an array type whose element type is a dynamic type that has not been completed.</source>
          <target state="translated">目前的 <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> 在其項目類型為尚未完成之動態類型的陣列類型上代表陣列方法 (例如 <ph id="ph2">&lt;see langword="Address" /&gt;</ph>)。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="P:System.Reflection.MemberInfo.MetadataToken">
          <source>To get a metadata token in this case, pass the <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> object to the <ph id="ph2">&lt;see cref="M:System.Reflection.Emit.ModuleBuilder.GetMethodToken(System.Reflection.MethodInfo)" /&gt;</ph> method; or use the <ph id="ph3">&lt;see cref="M:System.Reflection.Emit.ModuleBuilder.GetArrayMethodToken(System.Type,System.String,System.Reflection.CallingConventions,System.Type,System.Type[])" /&gt;</ph> method to get the token directly, instead of using the <ph id="ph4">&lt;see cref="M:System.Reflection.Emit.ModuleBuilder.GetArrayMethod(System.Type,System.String,System.Reflection.CallingConventions,System.Type,System.Type[])" /&gt;</ph> method to get a <ph id="ph5">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> first.</source>
          <target state="translated">若要在此情況下取得中繼資料權杖，請將 <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> 物件傳遞給 <ph id="ph2">&lt;see cref="M:System.Reflection.Emit.ModuleBuilder.GetMethodToken(System.Reflection.MethodInfo)" /&gt;</ph> 方法；或使用 <ph id="ph3">&lt;see cref="M:System.Reflection.Emit.ModuleBuilder.GetArrayMethodToken(System.Type,System.String,System.Reflection.CallingConventions,System.Type,System.Type[])" /&gt;</ph> 方法直接取得權杖，而不是先使用 <ph id="ph4">&lt;see cref="M:System.Reflection.Emit.ModuleBuilder.GetArrayMethod(System.Type,System.String,System.Reflection.CallingConventions,System.Type,System.Type[])" /&gt;</ph> 方法來取得 <ph id="ph5">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="P:System.Reflection.MemberInfo.Module">
          <source>Gets the module in which the type that declares the member represented by the current <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> is defined.</source>
          <target state="translated">取得用於定義型別的模組，該型別宣告以目前 <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> 表示的成員。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.Module">
          <source>The <ph id="ph1">&lt;see cref="T:System.Reflection.Module" /&gt;</ph> in which the type that declares the member represented by the current <ph id="ph2">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> is defined.</source>
          <target state="translated">用於定義型別的 <ph id="ph1">&lt;see cref="T:System.Reflection.Module" /&gt;</ph>，該型別宣告以目前 <ph id="ph2">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> 表示的成員。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.Module">
          <source>This property is provided as a convenience.</source>
          <target state="translated">為了方便起見，已提供這個屬性。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.Module">
          <source>It is equivalent to using the <ph id="ph1">&lt;xref:System.Reflection.MemberInfo.DeclaringType%2A&gt;</ph> property to get the type in which the method is declared, and then calling the <ph id="ph2">&lt;xref:System.Type.Module%2A&gt;</ph> property of the resulting <ph id="ph3">&lt;xref:System.Type&gt;</ph> object.</source>
          <target state="translated">它相當於使用<ph id="ph1">&lt;xref:System.Reflection.MemberInfo.DeclaringType%2A&gt;</ph>屬性來取得在其中宣告方法，型別，然後呼叫<ph id="ph2">&lt;xref:System.Type.Module%2A&gt;</ph>屬性產生<ph id="ph3">&lt;xref:System.Type&gt;</ph>物件。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.Module">
          <source>The following code example declares a class that inherits <ph id="ph1">&lt;xref:System.Object&gt;</ph> and overrides <ph id="ph2">&lt;xref:System.Object.ToString%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">下列程式碼範例會宣告繼承的類別<ph id="ph1">&lt;xref:System.Object&gt;</ph>和覆寫<ph id="ph2">&lt;xref:System.Object.ToString%2A?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.Module">
          <source>The example obtains <ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph> objects for the class's <ph id="ph2">`ToString`</ph> method and for the inherited <ph id="ph3">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> method, and displays the names of the modules in which the two methods are declared.</source>
          <target state="translated">此範例會取得<ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph>類別的物件<ph id="ph2">`ToString`</ph>方法及繼承<ph id="ph3">&lt;xref:System.Object.GetHashCode%2A&gt;</ph>方法，並顯示在宣告兩個方法之模組的名稱。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="P:System.Reflection.MemberInfo.Module">
          <source>This method is not implemented.</source>
          <target state="translated">這個方法尚未實作。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="P:System.Reflection.MemberInfo.Name">
          <source>Gets the name of the current member.</source>
          <target state="translated">取得目前成員的名稱。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.Name">
          <source>A <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> containing the name of this member.</source>
          <target state="translated">含有這個成員名稱的 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.Name">
          <source>Only the simple name of the member is returned, not the fully qualified name.</source>
          <target state="translated">成員的簡單名稱傳回時，不是完整限定的名稱。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.Name">
          <source>To get the <ph id="ph1">&lt;xref:System.Reflection.MemberInfo.Name%2A&gt;</ph> property, get the class <ph id="ph2">&lt;xref:System.Type&gt;</ph>.</source>
          <target state="translated">若要取得<ph id="ph1">&lt;xref:System.Reflection.MemberInfo.Name%2A&gt;</ph>屬性，取得類別<ph id="ph2">&lt;xref:System.Type&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.Name">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">&lt;xref:System.Reflection.MemberInfo&gt;</ph> array.</source>
          <target state="translated">從<ph id="ph1">`Type`</ph>，取得<ph id="ph2">&lt;xref:System.Reflection.MemberInfo&gt;</ph>陣列。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.Name">
          <source>From a <ph id="ph1">`MemberInfo`</ph> element of the array, obtain the <ph id="ph2">`Name`</ph> property.</source>
          <target state="translated">從<ph id="ph1">`MemberInfo`</ph>陣列的項目取得<ph id="ph2">`Name`</ph>屬性。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.Name">
          <source>This example lists the <ph id="ph1">`Name`</ph> and <ph id="ph2">`DeclaringType`</ph> property of each member of the specified class.</source>
          <target state="translated">這個範例會列出<ph id="ph1">`Name`</ph>和<ph id="ph2">`DeclaringType`</ph>指定類別的每個成員的屬性。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.op_Equality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> to compare to <bpt id="p1">&lt;c&gt;</bpt>right<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">要與 <bpt id="p1">&lt;c&gt;</bpt>right<ept id="p1">&lt;/c&gt;</ept> 比較的 <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.op_Equality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> to compare to <bpt id="p1">&lt;c&gt;</bpt>left<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">要與 <bpt id="p1">&lt;c&gt;</bpt>left<ept id="p1">&lt;/c&gt;</ept> 比較的 <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.op_Equality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)">
          <source>Indicates whether two <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> objects are equal.</source>
          <target state="translated">表示兩個 <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> 物件是否相等。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.op_Equality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="left" /&gt;</ph> is equal to <ph id="ph3">&lt;paramref name="right" /&gt;</ph>; otherwise <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph2">&lt;paramref name="left" /&gt;</ph> 等於 <ph id="ph3">&lt;paramref name="right" /&gt;</ph>，則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.op_Inequality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> to compare to <bpt id="p1">&lt;c&gt;</bpt>right<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">要與 <bpt id="p1">&lt;c&gt;</bpt>right<ept id="p1">&lt;/c&gt;</ept> 比較的 <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.op_Inequality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> to compare to <bpt id="p1">&lt;c&gt;</bpt>left<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">要與 <bpt id="p1">&lt;c&gt;</bpt>left<ept id="p1">&lt;/c&gt;</ept> 比較的 <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.op_Inequality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)">
          <source>Indicates whether two <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> objects are not equal.</source>
          <target state="translated">表示兩個 <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> 物件是否不相等。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.op_Inequality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="left" /&gt;</ph> is not equal to <ph id="ph3">&lt;paramref name="right" /&gt;</ph>; otherwise <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph2">&lt;paramref name="left" /&gt;</ph> 不等於 <ph id="ph3">&lt;paramref name="right" /&gt;</ph>，則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="P:System.Reflection.MemberInfo.ReflectedType">
          <source>Gets the class object that was used to obtain this instance of <ph id="ph1">&lt;see langword="MemberInfo" /&gt;</ph>.</source>
          <target state="translated">取得類別物件，是用來取得這個 <ph id="ph1">&lt;see langword="MemberInfo" /&gt;</ph> 的執行個體。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.ReflectedType">
          <source>The <ph id="ph1">&lt;see langword="Type" /&gt;</ph> object through which this <ph id="ph2">&lt;see langword="MemberInfo" /&gt;</ph> object was obtained.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Type" /&gt;</ph> 物件，用來取得這個 <ph id="ph2">&lt;see langword="MemberInfo" /&gt;</ph> 物件。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.ReflectedType">
          <source>The <ph id="ph1">`ReflectedType`</ph> property retrieves the <ph id="ph2">&lt;xref:System.Type&gt;</ph> object that was used to obtain this instance of <ph id="ph3">`MemberInfo`</ph>.</source>
          <target state="translated"><ph id="ph1">`ReflectedType`</ph>屬性擷取<ph id="ph2">&lt;xref:System.Type&gt;</ph>物件，用來取得這個執行個體<ph id="ph3">`MemberInfo`</ph>。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.ReflectedType">
          <source>This may differ from the value of the <ph id="ph1">&lt;xref:System.Reflection.MemberInfo.DeclaringType%2A&gt;</ph> property if this <ph id="ph2">&lt;xref:System.Reflection.MemberInfo&gt;</ph> object represents a member that is inherited from a base class.</source>
          <target state="translated">這可能與不同的值<ph id="ph1">&lt;xref:System.Reflection.MemberInfo.DeclaringType%2A&gt;</ph>屬性，如果這個<ph id="ph2">&lt;xref:System.Reflection.MemberInfo&gt;</ph>物件代表繼承自基底類別的成員。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.ReflectedType">
          <source>If the <ph id="ph1">`MemberInfo`</ph> object is a global member (that is, if it was obtained from the <ph id="ph2">&lt;xref:System.Reflection.Module.GetMethods%2A?displayProperty=nameWithType&gt;</ph> method, which returns global methods on a module), the returned <ph id="ph3">&lt;xref:System.Reflection.MemberInfo.DeclaringType%2A&gt;</ph> will be <ph id="ph4">`null`</ph>.</source>
          <target state="translated">如果<ph id="ph1">`MemberInfo`</ph>物件是全域的成員 (亦即，如果從取得<ph id="ph2">&lt;xref:System.Reflection.Module.GetMethods%2A?displayProperty=nameWithType&gt;</ph>方法，這個方法會傳回全域方法，在模組上)，傳回<ph id="ph3">&lt;xref:System.Reflection.MemberInfo.DeclaringType%2A&gt;</ph>將<ph id="ph4">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.ReflectedType">
          <source>The following code example shows how the <ph id="ph1">&lt;xref:System.Reflection.MemberInfo.ReflectedType%2A&gt;</ph> changes when the member <ph id="ph2">&lt;xref:System.Object.ToString%2A?displayProperty=nameWithType&gt;</ph> is viewed from a <ph id="ph3">&lt;xref:System.Reflection.MemberInfo&gt;</ph> obtained from type <ph id="ph4">&lt;xref:System.Object&gt;</ph> and from a <ph id="ph5">&lt;xref:System.Reflection.MemberInfo&gt;</ph> obtained from the <ph id="ph6">&lt;xref:System.Reflection.MemberInfo&gt;</ph> class itself, which inherits <ph id="ph7">&lt;xref:System.Object&gt;</ph> but does not override <ph id="ph8">&lt;xref:System.Object.ToString%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">下列程式碼範例示範如何<ph id="ph1">&lt;xref:System.Reflection.MemberInfo.ReflectedType%2A&gt;</ph>時變更成員<ph id="ph2">&lt;xref:System.Object.ToString%2A?displayProperty=nameWithType&gt;</ph>檢視從<ph id="ph3">&lt;xref:System.Reflection.MemberInfo&gt;</ph>取自類型<ph id="ph4">&lt;xref:System.Object&gt;</ph>來回<ph id="ph5">&lt;xref:System.Reflection.MemberInfo&gt;</ph>取自<ph id="ph6">&lt;xref:System.Reflection.MemberInfo&gt;</ph>類別本身，則是繼承<ph id="ph7">&lt;xref:System.Object&gt;</ph>但不會覆寫<ph id="ph8">&lt;xref:System.Object.ToString%2A?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Reserved for future use.</source>
          <target state="translated">保留供未來使用。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Must be IID_NULL.</source>
          <target state="translated">必須是 IID_NULL。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Passed-in array of names to be mapped.</source>
          <target state="translated">要對應之傳入的名稱陣列。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Count of the names to be mapped.</source>
          <target state="translated">要對應的名稱計數。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>The locale context in which to interpret the names.</source>
          <target state="translated">用於解譯名稱的地區設定內容。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Caller-allocated array which receives the IDs corresponding to the names.</source>
          <target state="translated">呼叫端配置的陣列，用於接收對應於名稱的 ID。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Maps a set of names to a corresponding set of dispatch identifiers.</source>
          <target state="translated">將一組名稱對應至一組對應的分派識別項 (Dispatch Identifier)。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">這個方法會從 unmanaged 程式碼，是對存取 managed 類別，並不應該從 managed 程式碼呼叫。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::GetIDsOfNames`</ph>, see the MSDN Library.</source>
          <target state="translated">如需有關<ph id="ph1">`IDispatch::GetIDsOfNames`</ph>，請參閱 MSDN Library。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>The method is called late-bound using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface.</source>
          <target state="translated">方法使用 COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> 介面進行晚期繫結呼叫。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetType">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object representing the <ph id="ph2">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> class.</source>
          <target state="translated">取得 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 物件，表示 <ph id="ph2">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> 類別。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetType">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object representing the <ph id="ph2">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 物件，表示 <ph id="ph2">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> 類別。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>The type information to return.</source>
          <target state="translated">要傳回的類型資訊。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>The locale identifier for the type information.</source>
          <target state="translated">類型資訊的地區設定識別項。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Receives a pointer to the requested type information object.</source>
          <target state="translated">接收要求的類型資訊物件的指標。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Retrieves the type information for an object, which can then be used to get the type information for an interface.</source>
          <target state="translated">擷取物件的類型資訊，可以用來取得介面的類型資訊。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">這個方法會從 unmanaged 程式碼，是對存取 managed 類別，並不應該從 managed 程式碼呼叫。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::GetTypeInfo`</ph>, see the MSDN Library.</source>
          <target state="translated">如需有關<ph id="ph1">`IDispatch::GetTypeInfo`</ph>，請參閱 MSDN Library。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>The method is called late-bound using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface.</source>
          <target state="translated">方法使用 COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> 介面進行晚期繫結呼叫。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfoCount(System.UInt32@)">
          <source>Points to a location that receives the number of type information interfaces provided by the object.</source>
          <target state="translated">指向接收物件提供的類型資訊介面數目的位置。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfoCount(System.UInt32@)">
          <source>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</source>
          <target state="translated">擷取物件提供的類型資訊介面數目 (0 或 1)。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfoCount(System.UInt32@)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">這個方法會從 unmanaged 程式碼，是對存取 managed 類別，並不應該從 managed 程式碼呼叫。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfoCount(System.UInt32@)">
          <source>For more information about <ph id="ph1">`IDispatch::GetTypeInfoCount`</ph>, see the MSDN Library.</source>
          <target state="translated">如需有關<ph id="ph1">`IDispatch::GetTypeInfoCount`</ph>，請參閱 MSDN Library。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfoCount(System.UInt32@)">
          <source>The method is called late-bound using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface.</source>
          <target state="translated">方法使用 COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> 介面進行晚期繫結呼叫。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Identifies the member.</source>
          <target state="translated">辨識成員。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Reserved for future use.</source>
          <target state="translated">保留供未來使用。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Must be IID_NULL.</source>
          <target state="translated">必須是 IID_NULL。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>The locale context in which to interpret arguments.</source>
          <target state="translated">地區設定內容，用於解譯引數。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Flags describing the context of the call.</source>
          <target state="translated">描述呼叫之內容的旗標。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</source>
          <target state="translated">結構的指標，此結構包含引數陣列、指名引數之 DISPID 引數的陣列，以及陣列中項目數目的計數。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to the location where the result is to be stored.</source>
          <target state="translated">指向用於儲存結果之位置的指標。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to a structure that contains exception information.</source>
          <target state="translated">包含例外狀況資訊的結構指標。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>The index of the first argument that has an error.</source>
          <target state="translated">第一個有錯誤的引數索引。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Provides access to properties and methods exposed by an object.</source>
          <target state="translated">提供物件所公開的屬性和方法的存取權。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">這個方法會從 unmanaged 程式碼，是對存取 managed 類別，並不應該從 managed 程式碼呼叫。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::Invoke`</ph>, see the MSDN Library.</source>
          <target state="translated">如需有關<ph id="ph1">`IDispatch::Invoke`</ph>，請參閱 MSDN Library。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>The method is called late-bound using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface.</source>
          <target state="translated">方法使用 COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> 介面進行晚期繫結呼叫。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>