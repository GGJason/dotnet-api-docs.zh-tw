<Type Name="BigInteger" FullName="System.Numerics.BigInteger">
  <Metadata><Meta Name="ms.openlocfilehash" Value="543603710cce3c1d634b60d8e3346e2c1552d821" /><Meta Name="ms.sourcegitcommit" Value="c0c07dbd19cd7017243f9ac36915755f79bc8da6" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="11/27/2018" /><Meta Name="ms.locfileid" Value="52372520" /></Metadata><TypeSignature Language="C#" Value="public struct BigInteger : IComparable, IComparable&lt;System.Numerics.BigInteger&gt;, IEquatable&lt;System.Numerics.BigInteger&gt;, IFormattable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable sealed beforefieldinit BigInteger extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;valuetype System.Numerics.BigInteger&gt;, class System.IEquatable`1&lt;valuetype System.Numerics.BigInteger&gt;, class System.IFormattable" />
  <TypeSignature Language="DocId" Value="T:System.Numerics.BigInteger" />
  <TypeSignature Language="VB.NET" Value="Public Structure BigInteger&#xA;Implements IComparable, IComparable(Of BigInteger), IEquatable(Of BigInteger), IFormattable" />
  <TypeSignature Language="C++ CLI" Value="public value class BigInteger : IComparable, IComparable&lt;System::Numerics::BigInteger&gt;, IEquatable&lt;System::Numerics::BigInteger&gt;, IFormattable" />
  <TypeSignature Language="F#" Value="type BigInteger = struct&#xA;    interface IFormattable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Numerics</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Numerics</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;System.Numerics.BigInteger&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Numerics.BigInteger&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.1;netcore-2.2">
      <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="e4975-101">表示任意大、帶正負號的整數。</span><span class="sxs-lookup"><span data-stu-id="e4975-101">Represents an arbitrarily large signed integer.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-102"><xref:System.Numerics.BigInteger>類型是不可變的類型表示任意大整數，其值在理論上沒有上限或下限。</span><span class="sxs-lookup"><span data-stu-id="e4975-102">The <xref:System.Numerics.BigInteger> type is an immutable type that represents an arbitrarily large integer whose value in theory has no upper or lower bounds.</span></span> <span data-ttu-id="e4975-103">成員<xref:System.Numerics.BigInteger>型別極為相似的其他整數類資料類型 ( <xref:System.Byte>， <xref:System.Int16>， <xref:System.Int32>， <xref:System.Int64>， <xref:System.SByte>， <xref:System.UInt16>， <xref:System.UInt32>，和<xref:System.UInt64>類型)。</span><span class="sxs-lookup"><span data-stu-id="e4975-103">The members of the <xref:System.Numerics.BigInteger> type closely parallel those of other integral types (the <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.Int64>, <xref:System.SByte>, <xref:System.UInt16>, <xref:System.UInt32>, and <xref:System.UInt64> types).</span></span> <span data-ttu-id="e4975-104">此型別不同於其他整數類資料類型中[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]，其具有所指定的範圍及其`MinValue`和`MaxValue`屬性。</span><span class="sxs-lookup"><span data-stu-id="e4975-104">This type differs from the other integral types in the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)], which have a range indicated by their `MinValue` and `MaxValue` properties.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e4975-105">因為<xref:System.Numerics.BigInteger>型別是不可變 (請參閱[可變動性和 BigInteger 結構](#mutability))，因為它有沒有上限或下限的界限，<xref:System.OutOfMemoryException>可能會導致任何作業中擲回<xref:System.Numerics.BigInteger>太成長值大型。</span><span class="sxs-lookup"><span data-stu-id="e4975-105">Because the <xref:System.Numerics.BigInteger> type is immutable (see [Mutability and the BigInteger Structure](#mutability)) and because it has no upper or lower bounds, an <xref:System.OutOfMemoryException> can be thrown for any operation that causes a <xref:System.Numerics.BigInteger> value to grow too large.</span></span>  
  
## <a name="instantiating-a-biginteger-object"></a><span data-ttu-id="e4975-106">BigInteger 物件具現化</span><span class="sxs-lookup"><span data-stu-id="e4975-106">Instantiating a BigInteger Object</span></span>  
 <span data-ttu-id="e4975-107">您可以具現化<xref:System.Numerics.BigInteger>物件以數種方式：</span><span class="sxs-lookup"><span data-stu-id="e4975-107">You can instantiate a <xref:System.Numerics.BigInteger> object in several ways:</span></span>  
  
-   <span data-ttu-id="e4975-108">您可以使用`new`關鍵字，並做為參數提供的任何整數或浮點值<xref:System.Numerics.BigInteger>建構函式。</span><span class="sxs-lookup"><span data-stu-id="e4975-108">You can use the `new` keyword and provide any integral or floating-point value as a parameter to the <xref:System.Numerics.BigInteger> constructor.</span></span> <span data-ttu-id="e4975-109">(浮點數的值會被截斷，才能指派給<xref:System.Numerics.BigInteger>。)下列範例說明如何使用`new`關鍵字來具現化<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="e4975-109">(Floating-point values are truncated before they are assigned to the <xref:System.Numerics.BigInteger>.) The following example illustrates how to use the `new` keyword to instantiate <xref:System.Numerics.BigInteger> values.</span></span>  
  
     [!code-csharp[System.Numerics.BigInteger.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/cs/BigInteger_Examples.cs#1)]
     [!code-vb[System.Numerics.BigInteger.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/vb/BigInteger_Examples.vb#1)]  
  
-   <span data-ttu-id="e4975-110">您可以宣告<xref:System.Numerics.BigInteger>變數並指派值，就像您一樣任何數值類型，只要該值是整數型別。</span><span class="sxs-lookup"><span data-stu-id="e4975-110">You can declare a <xref:System.Numerics.BigInteger> variable and assign it a value just as you would any numeric type, as long as that value is an integral type.</span></span> <span data-ttu-id="e4975-111">下列範例會使用指派來建立<xref:System.Numerics.BigInteger>值從<xref:System.Int64>。</span><span class="sxs-lookup"><span data-stu-id="e4975-111">The following example uses assignment to create a <xref:System.Numerics.BigInteger> value from an <xref:System.Int64>.</span></span>  
  
     [!code-csharp[System.Numerics.BigInteger.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/cs/BigInteger_Examples.cs#2)]
     [!code-vb[System.Numerics.BigInteger.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/vb/BigInteger_Examples.vb#2)]  
  
-   <span data-ttu-id="e4975-112">您可以指派十進位或浮點數的值給<xref:System.Numerics.BigInteger>物件，如果您將值轉換，或先將它轉換。</span><span class="sxs-lookup"><span data-stu-id="e4975-112">You can assign a decimal or floating-point value to a <xref:System.Numerics.BigInteger> object if you cast the value or convert it first.</span></span> <span data-ttu-id="e4975-113">下列範例明確轉換 （在 C# 中)，或將轉換 （在 Visual Basic)<xref:System.Double>並<xref:System.Decimal>值<xref:System.Numerics.BigInteger>。</span><span class="sxs-lookup"><span data-stu-id="e4975-113">The following example explicitly casts (in C#) or converts (in Visual Basic) a <xref:System.Double> and a <xref:System.Decimal> value to a <xref:System.Numerics.BigInteger>.</span></span>  
  
     [!code-csharp[System.Numerics.BigInteger.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/cs/BigInteger_Examples.cs#3)]
     [!code-vb[System.Numerics.BigInteger.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/vb/BigInteger_Examples.vb#3)]  
  
 <span data-ttu-id="e4975-114">這些方法可讓您具現化<xref:System.Numerics.BigInteger>物件，其值為其中一個現有的數字的範圍中的類型才。</span><span class="sxs-lookup"><span data-stu-id="e4975-114">These methods enable you to instantiate a <xref:System.Numerics.BigInteger> object whose value is in the range of one of the existing numeric types only.</span></span> <span data-ttu-id="e4975-115">您可以具現化<xref:System.Numerics.BigInteger>物件，其值可能會超過三種方式之一中的現有數值類型的範圍：</span><span class="sxs-lookup"><span data-stu-id="e4975-115">You can instantiate a <xref:System.Numerics.BigInteger> object whose value can exceed the range of the existing numeric types in one of three ways:</span></span>  
  
-   <span data-ttu-id="e4975-116">您可以使用`new`關鍵字，並提供任何大小的位元組陣列<xref:System.Numerics.BigInteger.%23ctor%2A?displayProperty=nameWithType>建構函式。</span><span class="sxs-lookup"><span data-stu-id="e4975-116">You can use the `new` keyword and provide a byte array of any size to the <xref:System.Numerics.BigInteger.%23ctor%2A?displayProperty=nameWithType> constructor.</span></span> <span data-ttu-id="e4975-117">例如: </span><span class="sxs-lookup"><span data-stu-id="e4975-117">For example:</span></span>  
  
     [!code-csharp[System.Numerics.BigInteger.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/cs/BigInteger_Examples.cs#4)]
     [!code-vb[System.Numerics.BigInteger.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/vb/BigInteger_Examples.vb#4)]  
  
-   <span data-ttu-id="e4975-118">您可以呼叫<xref:System.Numerics.BigInteger.Parse%2A>或是<xref:System.Numerics.BigInteger.TryParse%2A>方法，將轉換的數字的字串表示<xref:System.Numerics.BigInteger>。</span><span class="sxs-lookup"><span data-stu-id="e4975-118">You can call the <xref:System.Numerics.BigInteger.Parse%2A> or <xref:System.Numerics.BigInteger.TryParse%2A> methods to convert the string representation of a number to a <xref:System.Numerics.BigInteger>.</span></span> <span data-ttu-id="e4975-119">例如: </span><span class="sxs-lookup"><span data-stu-id="e4975-119">For example:</span></span>  
  
     [!code-csharp[System.Numerics.BigInteger.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/cs/BigInteger_Examples.cs#5)]
     [!code-vb[System.Numerics.BigInteger.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/vb/BigInteger_Examples.vb#5)]  
  
-   <span data-ttu-id="e4975-120">您可以呼叫`static`(`Shared` Visual Basic 中)<xref:System.Numerics.BigInteger>方法，執行數值運算式上的某項作業，並傳回導出<xref:System.Numerics.BigInteger>結果。</span><span class="sxs-lookup"><span data-stu-id="e4975-120">You can call a `static` (`Shared` in Visual Basic) <xref:System.Numerics.BigInteger> method that performs some operation on a numeric expression and returns a calculated <xref:System.Numerics.BigInteger> result.</span></span> <span data-ttu-id="e4975-121">下列範例會藉由 cube<xref:System.UInt64.MaxValue?displayProperty=nameWithType>並指派結果<xref:System.Numerics.BigInteger>。</span><span class="sxs-lookup"><span data-stu-id="e4975-121">The following example does this by cubing <xref:System.UInt64.MaxValue?displayProperty=nameWithType> and assigning the result to a <xref:System.Numerics.BigInteger>.</span></span>  
  
     [!code-csharp[System.Numerics.BigInteger.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/cs/BigInteger_Examples.cs#6)]
     [!code-vb[System.Numerics.BigInteger.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/vb/BigInteger_Examples.vb#6)]  
  
 <span data-ttu-id="e4975-122">未初始化的值<xref:System.Numerics.BigInteger>是<xref:System.Numerics.BigInteger.Zero%2A>。</span><span class="sxs-lookup"><span data-stu-id="e4975-122">The uninitialized value of a <xref:System.Numerics.BigInteger> is <xref:System.Numerics.BigInteger.Zero%2A>.</span></span>  
  
## <a name="performing-operations-on-biginteger-values"></a><span data-ttu-id="e4975-123">BigInteger 值上執行的作業</span><span class="sxs-lookup"><span data-stu-id="e4975-123">Performing Operations on BigInteger Values</span></span>  
 <span data-ttu-id="e4975-124">您可以使用<xref:System.Numerics.BigInteger>像您使用任何其他整數類資料類型執行個體。</span><span class="sxs-lookup"><span data-stu-id="e4975-124">You can use a <xref:System.Numerics.BigInteger> instance as you would use any other integral type.</span></span> <span data-ttu-id="e4975-125"><xref:System.Numerics.BigInteger> 可讓您執行基本數學運算，例如加法、 減法、 部門、 乘法、 減法、 負號、 和一元負運算的標準數值運算子會多載。</span><span class="sxs-lookup"><span data-stu-id="e4975-125"><xref:System.Numerics.BigInteger> overloads the standard numeric operators to enable you to perform basic mathematical operations such as addition, subtraction, division, multiplication, subtraction, negation, and unary negation.</span></span> <span data-ttu-id="e4975-126">您也可以使用標準數值運算子比較兩個<xref:System.Numerics.BigInteger>彼此的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-126">You can also use the standard numeric operators to compare two <xref:System.Numerics.BigInteger> values with each other.</span></span> <span data-ttu-id="e4975-127">像其他整數類資料類型，<xref:System.Numerics.BigInteger>也支援 位元`And`， `Or`， `XOr`，左 shift 鍵和向右移位運算子。</span><span class="sxs-lookup"><span data-stu-id="e4975-127">Like the other integral types, <xref:System.Numerics.BigInteger> also supports the bitwise `And`, `Or`, `XOr`, left shift, and right shift operators.</span></span> <span data-ttu-id="e4975-128">語言不支援自訂運算子<xref:System.Numerics.BigInteger>結構也會提供用於執行數學運算的對等方法。</span><span class="sxs-lookup"><span data-stu-id="e4975-128">For languages that do not support custom operators, the <xref:System.Numerics.BigInteger> structure also provides equivalent methods for performing mathematical operations.</span></span> <span data-ttu-id="e4975-129">其中包括<xref:System.Numerics.BigInteger.Add%2A>， <xref:System.Numerics.BigInteger.Divide%2A>， <xref:System.Numerics.BigInteger.Multiply%2A>， <xref:System.Numerics.BigInteger.Negate%2A>， <xref:System.Numerics.BigInteger.Subtract%2A>，和其他許多選項。</span><span class="sxs-lookup"><span data-stu-id="e4975-129">These include <xref:System.Numerics.BigInteger.Add%2A>, <xref:System.Numerics.BigInteger.Divide%2A>, <xref:System.Numerics.BigInteger.Multiply%2A>, <xref:System.Numerics.BigInteger.Negate%2A>, <xref:System.Numerics.BigInteger.Subtract%2A>, and several others.</span></span>  
  
 <span data-ttu-id="e4975-130">許多成員的<xref:System.Numerics.BigInteger>結構會直接對應至整數類資料類型的成員。</span><span class="sxs-lookup"><span data-stu-id="e4975-130">Many members of the <xref:System.Numerics.BigInteger> structure correspond directly to members of the other integral types.</span></span> <span data-ttu-id="e4975-131">颾魤 ㄛ<xref:System.Numerics.BigInteger>新增成員，如下所示：</span><span class="sxs-lookup"><span data-stu-id="e4975-131">In addition, <xref:System.Numerics.BigInteger> adds members such as the following:</span></span>  
  
-   <span data-ttu-id="e4975-132"><xref:System.Numerics.BigInteger.Sign%2A>它會傳回值，表示正負號的<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="e4975-132"><xref:System.Numerics.BigInteger.Sign%2A>, which returns a value that indicates the sign of a <xref:System.Numerics.BigInteger> value.</span></span>  
  
-   <span data-ttu-id="e4975-133"><xref:System.Numerics.BigInteger.Abs%2A>它會傳回數值的絕對值<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="e4975-133"><xref:System.Numerics.BigInteger.Abs%2A>, which returns the absolute value of a <xref:System.Numerics.BigInteger> value.</span></span>  
  
-   <span data-ttu-id="e4975-134"><xref:System.Numerics.BigInteger.DivRem%2A>它會傳回商數及除法運算的餘數。</span><span class="sxs-lookup"><span data-stu-id="e4975-134"><xref:System.Numerics.BigInteger.DivRem%2A>, which returns both the quotient and remainder of a division operation.</span></span>  
  
-   <span data-ttu-id="e4975-135"><xref:System.Numerics.BigInteger.GreatestCommonDivisor%2A>它會傳回兩個最大公因數<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="e4975-135"><xref:System.Numerics.BigInteger.GreatestCommonDivisor%2A>, which returns the greatest common divisor of two <xref:System.Numerics.BigInteger> values.</span></span>  
  
 <span data-ttu-id="e4975-136">許多這些額外的成員對應至的成員<xref:System.Math>類別，可提供基本數值類型所使用的功能。</span><span class="sxs-lookup"><span data-stu-id="e4975-136">Many of these additional members correspond to the members of the <xref:System.Math> class, which provides the functionality to work with the primitive numeric types.</span></span>  
  
<a name="mutability"></a>   
## <a name="mutability-and-the-biginteger-structure"></a><span data-ttu-id="e4975-137">可變動性和 BigInteger 結構</span><span class="sxs-lookup"><span data-stu-id="e4975-137">Mutability and the BigInteger Structure</span></span>  
 <span data-ttu-id="e4975-138">下列範例會具現化<xref:System.Numerics.BigInteger>物件，然後逐一遞增其值。</span><span class="sxs-lookup"><span data-stu-id="e4975-138">The following example instantiates a <xref:System.Numerics.BigInteger> object and then increments its value by one.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Class.Mutability#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.Mutability/cs/Mutability_Examples.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Class.Mutability#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.Mutability/vb/Mutability_Examples.vb#1)]  
  
 <span data-ttu-id="e4975-139">雖然此範例中會出現來修改現有值，但這不是物件的如此。</span><span class="sxs-lookup"><span data-stu-id="e4975-139">Although this example appears to modify the value of the existing object, this is not the case.</span></span> <span data-ttu-id="e4975-140"><xref:System.Numerics.BigInteger> 物件是不可變的這表示在內部，common language runtime 實際上會建立新<xref:System.Numerics.BigInteger>物件，並將其指派的值大於其先前的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-140"><xref:System.Numerics.BigInteger> objects are immutable, which means that internally, the common language runtime actually creates a new <xref:System.Numerics.BigInteger> object and assigns it a value one greater than its previous value.</span></span> <span data-ttu-id="e4975-141">然後會將這個新物件傳回給呼叫者。</span><span class="sxs-lookup"><span data-stu-id="e4975-141">This new object is then returned to the caller.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e4975-142">.NET Framework 中的其他數值類型也是不可變的。</span><span class="sxs-lookup"><span data-stu-id="e4975-142">The other numeric types in the .NET Framework are also immutable.</span></span> <span data-ttu-id="e4975-143">不過，因為<xref:System.Numerics.BigInteger>類型沒有沒有上限或下限的界限，其值可以變得非常大，對效能造成可觀的衝擊。</span><span class="sxs-lookup"><span data-stu-id="e4975-143">However, because the <xref:System.Numerics.BigInteger> type has no upper or lower bounds, its values can grow extremely large and have a measurable impact on performance.</span></span>  
  
 <span data-ttu-id="e4975-144">雖然此程序是呼叫端透明的就會產生對效能帶來負面影響。</span><span class="sxs-lookup"><span data-stu-id="e4975-144">Although this process is transparent to the caller, it does incur a performance penalty.</span></span> <span data-ttu-id="e4975-145">在某些情況下，尤其是當重複的作業將會在迴圈中上非常大<xref:System.Numerics.BigInteger>值，該效能產生負面影響可能更為顯著。</span><span class="sxs-lookup"><span data-stu-id="e4975-145">In some cases, especially when repeated operations are performed in a loop on very large <xref:System.Numerics.BigInteger> values, that performance penalty can be significant.</span></span> <span data-ttu-id="e4975-146">例如，在下列範例中，作業回應達百萬次和<xref:System.Numerics.BigInteger>值都會加一每次作業成功。</span><span class="sxs-lookup"><span data-stu-id="e4975-146">For example, in the following example, an operation is performed repetitively up to a million times, and a <xref:System.Numerics.BigInteger> value is incremented by one every time the operation succeeds.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Class.Mutability#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.Mutability/cs/Mutability_Examples.cs#12)]
 [!code-vb[System.Numerics.BigInteger.Class.Mutability#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.Mutability/vb/Mutability_Examples.vb#12)]  
  
 <span data-ttu-id="e4975-147">在此情況下，您可以改善效能，藉由執行的所有中繼指派<xref:System.Int32>變數。</span><span class="sxs-lookup"><span data-stu-id="e4975-147">In such a case, you can improve performance by performing all intermediate assignments to an <xref:System.Int32> variable.</span></span> <span data-ttu-id="e4975-148">最後一個變數的值再指派給<xref:System.Numerics.BigInteger>迴圈結束時的物件。</span><span class="sxs-lookup"><span data-stu-id="e4975-148">The final value of the variable can then be assigned to the <xref:System.Numerics.BigInteger> object when the loop exits.</span></span> <span data-ttu-id="e4975-149">下列範例提供一個實例。</span><span class="sxs-lookup"><span data-stu-id="e4975-149">The following example provides an illustration.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Class.Mutability#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.Mutability/cs/Mutability_Examples.cs#3)]
 [!code-vb[System.Numerics.BigInteger.Class.Mutability#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.Mutability/vb/Mutability_Examples.vb#3)]  
  
## <a name="working-with-byte-arrays-and-hexadecimal-strings"></a><span data-ttu-id="e4975-150">使用位元組陣列與十六進位字串</span><span class="sxs-lookup"><span data-stu-id="e4975-150">Working with Byte Arrays and Hexadecimal Strings</span></span>  
 <span data-ttu-id="e4975-151">如果您將轉換<xref:System.Numerics.BigInteger>值為位元組陣列，或如果您將轉換的位元組陣列，以<xref:System.Numerics.BigInteger>值，您必須考慮的位元組順序。</span><span class="sxs-lookup"><span data-stu-id="e4975-151">If you convert <xref:System.Numerics.BigInteger> values to byte arrays, or if you convert byte arrays to <xref:System.Numerics.BigInteger> values, you must consider the order of bytes.</span></span> <span data-ttu-id="e4975-152"><xref:System.Numerics.BigInteger>結構會預期要有個別的位元組才會出現在 little-endian 順序的位元組陣列 （也就是低序位位元組值的前面的高序位位元組）。</span><span class="sxs-lookup"><span data-stu-id="e4975-152">The <xref:System.Numerics.BigInteger> structure expects the individual bytes in a byte array to appear in little-endian order (that is, the lower-order bytes of the value precede the higher-order bytes).</span></span> <span data-ttu-id="e4975-153">您可以往返<xref:System.Numerics.BigInteger>值，藉由呼叫<xref:System.Numerics.BigInteger.ToByteArray%2A>方法，然後再將傳遞產生的位元組陣列<xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29>建構函式，如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="e4975-153">You can round-trip a <xref:System.Numerics.BigInteger> value by calling the <xref:System.Numerics.BigInteger.ToByteArray%2A> method and then passing the resulting byte array to the <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructor, as the following example shows.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Class.ByteAndHex#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/cs/ByteAndHex_Examples.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Class.ByteAndHex#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/vb/ByteAndHex_Examples.vb#1)]  
  
 <span data-ttu-id="e4975-154">若要具現化<xref:System.Numerics.BigInteger>值，您可以從位元組陣列，代表某些其他整數類資料類型的值，傳遞將整數值<xref:System.BitConverter.GetBytes%2A?displayProperty=nameWithType>方法，然後再產生的位元組陣列的傳遞<xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29>建構函式。</span><span class="sxs-lookup"><span data-stu-id="e4975-154">To instantiate a <xref:System.Numerics.BigInteger> value from a byte array that represents a value of some other integral type, you can pass the integral value to the <xref:System.BitConverter.GetBytes%2A?displayProperty=nameWithType> method, and then pass the resulting byte array to the <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructor.</span></span> <span data-ttu-id="e4975-155">下列範例會具現化<xref:System.Numerics.BigInteger>值從位元組陣列，表示<xref:System.Int16>值。</span><span class="sxs-lookup"><span data-stu-id="e4975-155">The following example instantiates a <xref:System.Numerics.BigInteger> value from a byte array that represents an <xref:System.Int16> value.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Class.ByteAndHex#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/cs/ByteAndHex_Examples.cs#2)]
 [!code-vb[System.Numerics.BigInteger.Class.ByteAndHex#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/vb/ByteAndHex_Examples.vb#2)]  
  
 <span data-ttu-id="e4975-156"><xref:System.Numerics.BigInteger>結構假設，負值會儲存使用二補數表示。</span><span class="sxs-lookup"><span data-stu-id="e4975-156">The <xref:System.Numerics.BigInteger> structure assumes that negative values are stored by using two's complement representation.</span></span> <span data-ttu-id="e4975-157">因為<xref:System.Numerics.BigInteger>結構代表數值，但是沒有固定的長度，<xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29>建構函式一律會解譯為正負號位元陣列中的最後一個位元組的最大顯著性位元。</span><span class="sxs-lookup"><span data-stu-id="e4975-157">Because the <xref:System.Numerics.BigInteger> structure represents a numeric value with no fixed length, the <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructor always interprets the most significant bit of the last byte in the array as a sign bit.</span></span> <span data-ttu-id="e4975-158">若要避免<xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29>從令人困惑的二補數表示負值正值，正值的正負號和大小表示的建構函式中的值的最高有效位元的位元組陣列中的最後一個位元組一般被視為集合應該包含額外的位元組，其值為 0。</span><span class="sxs-lookup"><span data-stu-id="e4975-158">To prevent the <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructor from confusing the two's complement representation of a negative value with the sign and magnitude representation of a positive value, positive values in which the most significant bit of the last byte in the byte array would ordinarily be set should include an additional byte whose value is 0.</span></span> <span data-ttu-id="e4975-159">比方說，0xC0 0xBD 0xF0 0xFF 是-1,000,000 或 4,293,967,296 由小到大十六進位表示法。</span><span class="sxs-lookup"><span data-stu-id="e4975-159">For example, 0xC0 0xBD 0xF0 0xFF is the little-endian hexadecimal representation of either -1,000,000 or 4,293,967,296.</span></span> <span data-ttu-id="e4975-160">因為此陣列中的最後一個位元組的最大顯著性位元上，會由解譯的位元組陣列值<xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29>-1,000,000 為建構函式。</span><span class="sxs-lookup"><span data-stu-id="e4975-160">Because the most significant bit of the last byte in this array is on, the value of the byte array would be interpreted by the <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructor as -1,000,000.</span></span> <span data-ttu-id="e4975-161">若要具現化<xref:System.Numerics.BigInteger>其值為正數，位元組陣列，其元素為 0xC0 0xBD 0xF0 0xFF 0x00 必須傳遞給建構函式。</span><span class="sxs-lookup"><span data-stu-id="e4975-161">To instantiate a <xref:System.Numerics.BigInteger> whose value is positive, a byte array whose elements are 0xC0 0xBD 0xF0 0xFF 0x00 must be passed to the constructor.</span></span> <span data-ttu-id="e4975-162">下列範例將說明這點。</span><span class="sxs-lookup"><span data-stu-id="e4975-162">The following example illustrates this.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Class.ByteAndHex#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/cs/ByteAndHex_Examples.cs#3)]
 [!code-vb[System.Numerics.BigInteger.Class.ByteAndHex#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/vb/ByteAndHex_Examples.vb#3)]  
  
 <span data-ttu-id="e4975-163">所建立的位元組陣列<xref:System.Numerics.BigInteger.ToByteArray%2A>正值方法包含此額外的零值的位元組。</span><span class="sxs-lookup"><span data-stu-id="e4975-163">Byte arrays created by the <xref:System.Numerics.BigInteger.ToByteArray%2A> method from positive values include this extra zero-value byte.</span></span> <span data-ttu-id="e4975-164">因此，<xref:System.Numerics.BigInteger>結構可以成功地反覆存取值所指派，然後將它們還原從位元組陣列，如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="e4975-164">Therefore, the <xref:System.Numerics.BigInteger> structure can successfully round-trip values by assigning them to, and then restoring them from, byte arrays, as the following example shows.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Class.ByteAndHex#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/cs/ByteAndHex_Examples.cs#4)]
 [!code-vb[System.Numerics.BigInteger.Class.ByteAndHex#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/vb/ByteAndHex_Examples.vb#4)]  
  
 <span data-ttu-id="e4975-165">不過，您可能需要將此額外的零值位元組至位元組陣列，動態地建立開發人員，或將不帶正負號的整數轉換成位元組陣列的方法所傳回的 (例如<xref:System.BitConverter.GetBytes%28System.UInt16%29?displayProperty=nameWithType>， <xref:System.BitConverter.GetBytes%28System.UInt32%29?displayProperty=nameWithType>，和<xref:System.BitConverter.GetBytes%28System.UInt64%29?displayProperty=nameWithType>)。</span><span class="sxs-lookup"><span data-stu-id="e4975-165">However, you may need to add this additional zero-value byte to byte arrays that are created dynamically by the developer or that are returned by methods that convert unsigned integers to byte arrays (such as <xref:System.BitConverter.GetBytes%28System.UInt16%29?displayProperty=nameWithType>, <xref:System.BitConverter.GetBytes%28System.UInt32%29?displayProperty=nameWithType>, and <xref:System.BitConverter.GetBytes%28System.UInt64%29?displayProperty=nameWithType>).</span></span>  
  
 <span data-ttu-id="e4975-166">剖析十六進位的字串，當<xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=nameWithType>和<xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29?displayProperty=nameWithType>方法會假設，如果字串中的第一個位元組的最大顯著性位元設定，或如果字串的第一個十六進位數字表示較低的四位元的位元組值，這個值是表示使用二補數表示。</span><span class="sxs-lookup"><span data-stu-id="e4975-166">When parsing a hexadecimal string, the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=nameWithType> and <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29?displayProperty=nameWithType> methods assume that if the most significant bit of the first byte in the string is set, or if the first hexadecimal digit of the string represents the lower four bits of a byte value, the value is represented by using two's complement representation.</span></span> <span data-ttu-id="e4975-167">例如，"FF01"和"F01 」 代表-255 的十進位值。</span><span class="sxs-lookup"><span data-stu-id="e4975-167">For example, both "FF01" and "F01" represent the decimal value -255.</span></span> <span data-ttu-id="e4975-168">若要區分正從負數值，正值應該包含前置零。</span><span class="sxs-lookup"><span data-stu-id="e4975-168">To differentiate positive from negative values, positive values should include a leading zero.</span></span> <span data-ttu-id="e4975-169">相關的多載<xref:System.Numerics.BigInteger.ToString%2A>方法，傳遞"X"格式字串時加入前置零的正數值傳回十六進位的字串。</span><span class="sxs-lookup"><span data-stu-id="e4975-169">The relevant overloads of the <xref:System.Numerics.BigInteger.ToString%2A> method, when they are passed the "X" format string, add a leading zero to the returned hexadecimal string for positive values.</span></span> <span data-ttu-id="e4975-170">這使得來回<xref:System.Numerics.BigInteger>使用的值<xref:System.Numerics.BigInteger.ToString%2A>和<xref:System.Numerics.BigInteger.Parse%2A>方法，如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="e4975-170">This makes it possible to round-trip <xref:System.Numerics.BigInteger> values by using the <xref:System.Numerics.BigInteger.ToString%2A> and <xref:System.Numerics.BigInteger.Parse%2A> methods, as the following example shows.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Class.ByteAndHex#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/cs/ByteAndHex_Examples.cs#5)]
 [!code-vb[System.Numerics.BigInteger.Class.ByteAndHex#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/vb/ByteAndHex_Examples.vb#5)]  
  
 <span data-ttu-id="e4975-171">不過，將十六進位字串建立藉由呼叫`ToString`其他整數型別或多載的方法<xref:System.Convert.ToString%2A>方法，包括`toBase`參數並不表示正負號的值或從其來源資料類型衍生的十六進位字串。</span><span class="sxs-lookup"><span data-stu-id="e4975-171">However, the hexadecimal strings created by calling the `ToString` methods of the other integral types or the overloads of the <xref:System.Convert.ToString%2A> method that include a `toBase` parameter do not indicate the sign of the value or the source data type from which the hexadecimal string was derived.</span></span> <span data-ttu-id="e4975-172">已成功具現化<xref:System.Numerics.BigInteger>從這類字串的值需要某些額外邏輯。</span><span class="sxs-lookup"><span data-stu-id="e4975-172">Successfully instantiating a <xref:System.Numerics.BigInteger> value from such a string requires some additional logic.</span></span> <span data-ttu-id="e4975-173">下列範例提供一個可能的實作。</span><span class="sxs-lookup"><span data-stu-id="e4975-173">The following example provides one possible implementation.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Class.ByteAndHex#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/cs/ByteAndHex_Examples2.cs#6)]
 [!code-vb[System.Numerics.BigInteger.Class.ByteAndHex#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/vb/ByteAndHex_Examples2.vb#6)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e4975-174">初始化 <see cref="T:System.Numerics.BigInteger" /> 結構的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="e4975-174">Initializes a new instance of the <see cref="T:System.Numerics.BigInteger" /> structure.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BigInteger (byte[] value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.#ctor(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BigInteger(cli::array &lt;System::Byte&gt; ^ value);" />
      <MemberSignature Language="F#" Value="new System.Numerics.BigInteger : byte[] -&gt; System.Numerics.BigInteger" Usage="new System.Numerics.BigInteger value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="value" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e4975-175">位元組由小到大順序的位元組值陣列。</span><span class="sxs-lookup"><span data-stu-id="e4975-175">An array of byte values in little-endian order.</span></span></param>
        <summary><span data-ttu-id="e4975-176">使用位元組陣列中的值，初始化 <see cref="T:System.Numerics.BigInteger" /> 結構的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="e4975-176">Initializes a new instance of the <see cref="T:System.Numerics.BigInteger" /> structure using the values in a byte array.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-177">中的個別位元組`value`陣列應該是位元組由小到大順序，從最低順序最高序位位元組的位元組。</span><span class="sxs-lookup"><span data-stu-id="e4975-177">The individual bytes in the `value` array should be in little-endian order, from lowest-order byte to highest-order byte.</span></span> <span data-ttu-id="e4975-178">例如，數值 1,000,000,000,000 表示下表所示：</span><span class="sxs-lookup"><span data-stu-id="e4975-178">For example, the numeric value 1,000,000,000,000 is represented as shown in the following table:</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e4975-179">十六進位字串</span><span class="sxs-lookup"><span data-stu-id="e4975-179">Hexadecimal string</span></span>|<span data-ttu-id="e4975-180">E8D4A51000</span><span class="sxs-lookup"><span data-stu-id="e4975-180">E8D4A51000</span></span>|  
|<span data-ttu-id="e4975-181">位元組陣列 （第一次最低索引）</span><span class="sxs-lookup"><span data-stu-id="e4975-181">Byte array (lowest index first)</span></span>|<span data-ttu-id="e4975-182">00 10 A5 D4 E8 00</span><span class="sxs-lookup"><span data-stu-id="e4975-182">00 10 A5 D4 E8 00</span></span>|  
  
 <span data-ttu-id="e4975-183">大部分的方法，例如將數值轉換成位元組陣列，請<xref:System.Numerics.BigInteger.ToByteArray%2A?displayProperty=nameWithType>和<xref:System.BitConverter.GetBytes%2A?displayProperty=nameWithType>，以位元組由小到大的順序傳回位元組陣列。</span><span class="sxs-lookup"><span data-stu-id="e4975-183">Most methods that convert numeric values to byte arrays, such as <xref:System.Numerics.BigInteger.ToByteArray%2A?displayProperty=nameWithType> and <xref:System.BitConverter.GetBytes%2A?displayProperty=nameWithType>, return byte arrays in little-endian order.</span></span>  
  
 <span data-ttu-id="e4975-184">建構函式會預期要有正數值来使用標誌大小表示法，而負數的值来使用二補數表示的位元組陣列。</span><span class="sxs-lookup"><span data-stu-id="e4975-184">The constructor expects positive values in the byte array to use sign-and-magnitude representation, and negative values to use two's complement representation.</span></span> <span data-ttu-id="e4975-185">換句話說，如果最高順序位元中的最高序位位元組`value`設定，產生<xref:System.Numerics.BigInteger>值為負數。</span><span class="sxs-lookup"><span data-stu-id="e4975-185">In other words, if the highest-order bit of the highest-order byte in `value` is set, the resulting <xref:System.Numerics.BigInteger> value is negative.</span></span> <span data-ttu-id="e4975-186">根據位元組陣列的來源，這可能會導致正值以被錯誤解譯為負數值。</span><span class="sxs-lookup"><span data-stu-id="e4975-186">Depending on the source of the byte array, this may cause a positive value to be misinterpreted as a negative value.</span></span> <span data-ttu-id="e4975-187">位元組陣列通常是透過下列方式產生：</span><span class="sxs-lookup"><span data-stu-id="e4975-187">Byte arrays are typically generated in the following ways:</span></span>  
  
-   <span data-ttu-id="e4975-188">藉由呼叫<xref:System.Numerics.BigInteger.ToByteArray%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="e4975-188">By calling the <xref:System.Numerics.BigInteger.ToByteArray%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="e4975-189">因為這個方法會傳回最高序位位元組的最高序位位元的位元組陣列中的陣列設定為零的正數值，絕不會發生的錯誤解譯為否定是正數值。</span><span class="sxs-lookup"><span data-stu-id="e4975-189">Because this method returns a byte array with the highest-order bit of the highest-order byte in the array set to zero for positive values, there is no chance of misinterpreting a positive value as negative.</span></span> <span data-ttu-id="e4975-190">未修改的方式所建立的位元組陣列<xref:System.Numerics.BigInteger.ToByteArray%2A>方法永遠成功地反覆存取時傳遞至<xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29>建構函式。</span><span class="sxs-lookup"><span data-stu-id="e4975-190">Unmodified byte arrays created by the <xref:System.Numerics.BigInteger.ToByteArray%2A> method always successfully round-trip when they are passed to the <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructor.</span></span>  
  
-   <span data-ttu-id="e4975-191">藉由呼叫<xref:System.BitConverter.GetBytes%2A?displayProperty=nameWithType>方法，並將其做為參數傳遞的帶正負號的整數。</span><span class="sxs-lookup"><span data-stu-id="e4975-191">By calling the <xref:System.BitConverter.GetBytes%2A?displayProperty=nameWithType> method and passing it a signed integer as a parameter.</span></span> <span data-ttu-id="e4975-192">帶正負號的整數處理標誌大小表示和二補數表示法，因為沒有可能的錯誤解譯為否定是正數值。</span><span class="sxs-lookup"><span data-stu-id="e4975-192">Because signed integers handle both sign-and-magnitude representation and two's complement representation, there is no chance of misinterpreting a positive value as negative.</span></span>  
  
-   <span data-ttu-id="e4975-193">藉由呼叫<xref:System.BitConverter.GetBytes%2A?displayProperty=nameWithType>方法，並將其做為參數傳遞的不帶正負號的整數。</span><span class="sxs-lookup"><span data-stu-id="e4975-193">By calling the <xref:System.BitConverter.GetBytes%2A?displayProperty=nameWithType> method and passing it an unsigned integer as a parameter.</span></span> <span data-ttu-id="e4975-194">因為其大小只表示不帶正負號的整數，正值可以被錯誤解譯為負數值。</span><span class="sxs-lookup"><span data-stu-id="e4975-194">Because unsigned integers are represented by their magnitude only, positive values can be misinterpreted as negative values.</span></span> <span data-ttu-id="e4975-195">若要避免這個錯誤解譯，您可以將零位元組的值加入陣列結尾。</span><span class="sxs-lookup"><span data-stu-id="e4975-195">To prevent this misinterpretation, you can add a zero-byte value to the end of the array.</span></span> <span data-ttu-id="e4975-196">下一節中的範例提供說明。</span><span class="sxs-lookup"><span data-stu-id="e4975-196">The example in the next section provides an illustration.</span></span>  
  
-   <span data-ttu-id="e4975-197">藉由建立位元組陣列可能動態或靜態方式不一定呼叫任何先前的方法，或是藉由修改現有的位元組陣列。</span><span class="sxs-lookup"><span data-stu-id="e4975-197">By creating a byte array either dynamically or statically without necessarily calling any of the previous methods, or by modifying an existing byte array.</span></span> <span data-ttu-id="e4975-198">若要避免正值會錯誤解譯為負數值，您可以將零位元組的值加入陣列結尾。</span><span class="sxs-lookup"><span data-stu-id="e4975-198">To prevent positive values from being misinterpreted as negative values, you can add a zero-byte value to the end of the array.</span></span>  
  
 <span data-ttu-id="e4975-199">如果`value`為空<xref:System.Byte>array，新<xref:System.Numerics.BigInteger>物件會初始化為值<xref:System.Numerics.BigInteger.Zero%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="e4975-199">If `value` is an empty <xref:System.Byte> array, the new <xref:System.Numerics.BigInteger> object is initialized to a value of <xref:System.Numerics.BigInteger.Zero%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="e4975-200">如果`value`已`null`，建構函式會擲回<xref:System.ArgumentNullException>。</span><span class="sxs-lookup"><span data-stu-id="e4975-200">If `value` is `null`, the constructor throws an <xref:System.ArgumentNullException>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e4975-201">下列範例會具現化<xref:System.Numerics.BigInteger>{5，4，3，2，1}，其值是 5 個元素位元組陣列中的物件。</span><span class="sxs-lookup"><span data-stu-id="e4975-201">The following example instantiates a <xref:System.Numerics.BigInteger> object from a 5-element byte array whose value is {5, 4, 3, 2, 1}.</span></span> <span data-ttu-id="e4975-202">然後它會顯示<xref:System.Numerics.BigInteger>值，表示為十進位和十六進位數字，到主控台。</span><span class="sxs-lookup"><span data-stu-id="e4975-202">It then displays the <xref:System.Numerics.BigInteger> value, represented as both decimal and hexadecimal numbers, to the console.</span></span> <span data-ttu-id="e4975-203">輸入陣列的文字輸出的比較可以清楚為什麼的這個多載<xref:System.Numerics.BigInteger>類別建構函式建立<xref:System.Numerics.BigInteger>物件，其值為 4328719365 （或 0x102030405）。</span><span class="sxs-lookup"><span data-stu-id="e4975-203">A comparison of the input array with the text output makes it clear why this overload of the <xref:System.Numerics.BigInteger> class constructor creates a <xref:System.Numerics.BigInteger> object whose value is 4328719365 (or 0x102030405).</span></span> <span data-ttu-id="e4975-204">位元組陣列，其值為 5，第一個項目定義的最低序位位元組值<xref:System.Numerics.BigInteger>物件，它是 0x05:sp。</span><span class="sxs-lookup"><span data-stu-id="e4975-204">The first element of the byte array, whose value is 5, defines the value of the lowest-order byte of the <xref:System.Numerics.BigInteger> object, which is 0x05.</span></span> <span data-ttu-id="e4975-205">位元組陣列，其值為 4，第二個項目定義的第二個位元組的值<xref:System.Numerics.BigInteger>物件，也就是 0x04，依此類推。</span><span class="sxs-lookup"><span data-stu-id="e4975-205">The second element of the byte array, whose value is 4, defines the value of the second byte of the <xref:System.Numerics.BigInteger> object, which is 0x04, and so on.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ctors#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.ctors#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example1.vb#1)]  
  
 <span data-ttu-id="e4975-206">下列範例會具現化正和負<xref:System.Numerics.BigInteger>值，請將它們傳遞至<xref:System.Numerics.BigInteger.ToByteArray%2A>方法，然後還原原始<xref:System.Numerics.BigInteger>產生的位元組陣列中的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-206">The following example instantiates a positive and a negative <xref:System.Numerics.BigInteger> value, passes them to the <xref:System.Numerics.BigInteger.ToByteArray%2A> method, and then restores the original <xref:System.Numerics.BigInteger> values from the resulting byte array.</span></span> <span data-ttu-id="e4975-207">請注意兩個值都由相同的位元組陣列。</span><span class="sxs-lookup"><span data-stu-id="e4975-207">Note that the two values are represented by identical byte arrays.</span></span> <span data-ttu-id="e4975-208">兩者之間唯一的差別是在最大顯著性位元的位元組陣列中的最後一個元素。</span><span class="sxs-lookup"><span data-stu-id="e4975-208">The only difference between them is in the most significant bit of the last element in the byte array.</span></span> <span data-ttu-id="e4975-209">此位元會設定 （位元組的值是 0xFF），如果陣列從負建立<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="e4975-209">This bit is set (the value of the byte is 0xFF) if the array is created from a negative <xref:System.Numerics.BigInteger> value.</span></span> <span data-ttu-id="e4975-210">位元未設定 （位元組的值為零），如果陣列從正建立<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="e4975-210">The bit is not set (the value of the byte is zero), if the array is created from a positive <xref:System.Numerics.BigInteger> value.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ctors#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example1.cs#2)]
 [!code-vb[System.Numerics.BigInteger.ctors#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example1.vb#2)]  
  
 <span data-ttu-id="e4975-211">下列範例說明如何確認，正值會不正確具現化為負值加上其值為陣列結尾的零位元組。</span><span class="sxs-lookup"><span data-stu-id="e4975-211">The following example illustrates how to make sure that a positive value is not incorrectly instantiated as a negative value by adding a byte whose value is zero to the end of the array.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ctors#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example1.cs#3)]
 [!code-vb[System.Numerics.BigInteger.ctors#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e4975-212"><paramref name="value" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-212"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Numerics.BigInteger.ToByteArray" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BigInteger (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.#ctor(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BigInteger(System::Decimal value);" />
      <MemberSignature Language="F#" Value="new System.Numerics.BigInteger : decimal -&gt; System.Numerics.BigInteger" Usage="new System.Numerics.BigInteger value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e4975-213">十進位數字。</span><span class="sxs-lookup"><span data-stu-id="e4975-213">A decimal number.</span></span></param>
        <summary><span data-ttu-id="e4975-214">使用 <see cref="T:System.Numerics.BigInteger" /> 值，初始化 <see cref="T:System.Decimal" /> 結構的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="e4975-214">Initializes a new instance of the <see cref="T:System.Numerics.BigInteger" /> structure using a <see cref="T:System.Decimal" /> value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-215">呼叫這個建構函式的結果會等於明確指派<xref:System.Decimal>值<xref:System.Numerics.BigInteger>變數。</span><span class="sxs-lookup"><span data-stu-id="e4975-215">The result of calling this constructor is identical to explicitly assigning a <xref:System.Decimal> value to a <xref:System.Numerics.BigInteger> variable.</span></span>  
  
 <span data-ttu-id="e4975-216">呼叫這個建構函式可能會導致資料遺失。任何小數部分`value`具現化時，會被截斷<xref:System.Numerics.BigInteger>物件。</span><span class="sxs-lookup"><span data-stu-id="e4975-216">Calling this constructor can cause data loss; any fractional part of `value` is truncated when instantiating a <xref:System.Numerics.BigInteger> object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e4975-217">下列範例示範如何將<xref:System.Numerics.BigInteger.%23ctor%28System.Decimal%29>建構函式來具現化<xref:System.Numerics.BigInteger>物件。</span><span class="sxs-lookup"><span data-stu-id="e4975-217">The following example illustrates the use of the <xref:System.Numerics.BigInteger.%23ctor%28System.Decimal%29> constructor to instantiate a <xref:System.Numerics.BigInteger> object.</span></span> <span data-ttu-id="e4975-218">它會定義各種<xref:System.Decimal>值，然後接著會將每個值傳遞<xref:System.Numerics.BigInteger.%23ctor%28System.Decimal%29>建構函式。</span><span class="sxs-lookup"><span data-stu-id="e4975-218">It defines an array of <xref:System.Decimal> values, and then passes each value to the <xref:System.Numerics.BigInteger.%23ctor%28System.Decimal%29> constructor.</span></span> <span data-ttu-id="e4975-219">請注意，<xref:System.Decimal>就會截斷值而不是四捨五入時將它指派給<xref:System.Numerics.BigInteger>物件。</span><span class="sxs-lookup"><span data-stu-id="e4975-219">Note that the <xref:System.Decimal> value is truncated instead of rounded when it is assigned to the <xref:System.Numerics.BigInteger> object.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ctors#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example2.cs#4)]
 [!code-vb[System.Numerics.BigInteger.ctors#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example2.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BigInteger (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.#ctor(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BigInteger(double value);" />
      <MemberSignature Language="F#" Value="new System.Numerics.BigInteger : double -&gt; System.Numerics.BigInteger" Usage="new System.Numerics.BigInteger value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e4975-220">雙精確度浮點值。</span><span class="sxs-lookup"><span data-stu-id="e4975-220">A double-precision floating-point value.</span></span></param>
        <summary><span data-ttu-id="e4975-221">使用雙精確度浮點值，初始化 <see cref="T:System.Numerics.BigInteger" /> 結構的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="e4975-221">Initializes a new instance of the <see cref="T:System.Numerics.BigInteger" /> structure using a double-precision floating-point value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-222">任何小數部分`value`具現化時，參數會被截斷<xref:System.Numerics.BigInteger>物件。</span><span class="sxs-lookup"><span data-stu-id="e4975-222">Any fractional part of the `value` parameter is truncated when instantiating a <xref:System.Numerics.BigInteger> object.</span></span>  
  
 <span data-ttu-id="e4975-223">因為缺少有效位數<xref:System.Double>資料型別，呼叫這個建構函式可能會導致資料遺失。</span><span class="sxs-lookup"><span data-stu-id="e4975-223">Because of the lack of precision of the <xref:System.Double> data type, calling this constructor can cause data loss.</span></span>  
  
 <span data-ttu-id="e4975-224"><xref:System.Numerics.BigInteger>由呼叫這個建構函式產生的值等於值所產生明確指派<xref:System.Double>值<xref:System.Numerics.BigInteger>。</span><span class="sxs-lookup"><span data-stu-id="e4975-224">The <xref:System.Numerics.BigInteger> value that results from calling this constructor is identical to the value that results from explicitly assigning a <xref:System.Double> value to a <xref:System.Numerics.BigInteger>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e4975-225">下列範例示範如何將<xref:System.Numerics.BigInteger.%23ctor%28System.Double%29>建構函式來具現化<xref:System.Numerics.BigInteger>物件。</span><span class="sxs-lookup"><span data-stu-id="e4975-225">The following example illustrates the use of the <xref:System.Numerics.BigInteger.%23ctor%28System.Double%29> constructor to instantiate a <xref:System.Numerics.BigInteger> object.</span></span> <span data-ttu-id="e4975-226">它也會說明當您使用時，可能會發生的精確度遺失的<xref:System.Double>資料型別。</span><span class="sxs-lookup"><span data-stu-id="e4975-226">It also illustrates the loss of precision that may occur when you use the <xref:System.Double> data type.</span></span> <span data-ttu-id="e4975-227">A<xref:System.Double>指派較大的值，然後指派給<xref:System.Numerics.BigInteger>物件。</span><span class="sxs-lookup"><span data-stu-id="e4975-227">A <xref:System.Double> is assigned a large value, which is then assigned to a <xref:System.Numerics.BigInteger> object.</span></span> <span data-ttu-id="e4975-228">如輸出所示，這個作業牽涉到遺失有效位數。</span><span class="sxs-lookup"><span data-stu-id="e4975-228">As the output shows, this assignment involves a loss of precision.</span></span> <span data-ttu-id="e4975-229">這兩個值則是以 1 遞增。</span><span class="sxs-lookup"><span data-stu-id="e4975-229">Both values are then incremented by one.</span></span> <span data-ttu-id="e4975-230">輸出顯示<xref:System.Numerics.BigInteger>物件會反映變更的值，而<xref:System.Double>物件則否。</span><span class="sxs-lookup"><span data-stu-id="e4975-230">The output shows that the <xref:System.Numerics.BigInteger> object reflects the changed value, whereas the <xref:System.Double> object does not.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ctors#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example2.cs#5)]
 [!code-vb[System.Numerics.BigInteger.ctors#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example2.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="e4975-231"><paramref name="value" /> 的值是 <see cref="F:System.Double.NaN" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-231">The value of <paramref name="value" /> is <see cref="F:System.Double.NaN" />.</span></span>  
  
<span data-ttu-id="e4975-232">-或-</span><span class="sxs-lookup"><span data-stu-id="e4975-232">-or-</span></span> 
<span data-ttu-id="e4975-233"><paramref name="value" /> 的值是 <see cref="F:System.Double.NegativeInfinity" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-233">The value of <paramref name="value" /> is <see cref="F:System.Double.NegativeInfinity" />.</span></span>  
  
<span data-ttu-id="e4975-234">-或-</span><span class="sxs-lookup"><span data-stu-id="e4975-234">-or-</span></span> 
<span data-ttu-id="e4975-235"><paramref name="value" /> 的值是 <see cref="F:System.Double.PositiveInfinity" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-235">The value of <paramref name="value" /> is <see cref="F:System.Double.PositiveInfinity" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BigInteger (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BigInteger(int value);" />
      <MemberSignature Language="F#" Value="new System.Numerics.BigInteger : int -&gt; System.Numerics.BigInteger" Usage="new System.Numerics.BigInteger value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e4975-236">32 位元帶正負號的整數。</span><span class="sxs-lookup"><span data-stu-id="e4975-236">A 32-bit signed integer.</span></span></param>
        <summary><span data-ttu-id="e4975-237">使用 32 位元帶正負號的整數值，初始化 <see cref="T:System.Numerics.BigInteger" /> 結構的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="e4975-237">Initializes a new instance of the <see cref="T:System.Numerics.BigInteger" /> structure using a 32-bit signed integer value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-238">具現化時不會遺失任何精確度的<xref:System.Numerics.BigInteger>使用這個建構函式的物件。</span><span class="sxs-lookup"><span data-stu-id="e4975-238">There is no loss of precision when instantiating a <xref:System.Numerics.BigInteger> object by using this constructor.</span></span>  
  
 <span data-ttu-id="e4975-239"><xref:System.Numerics.BigInteger>由呼叫這個建構函式產生的值完全相同的值所產生的指派<xref:System.Int32>值<xref:System.Numerics.BigInteger>。</span><span class="sxs-lookup"><span data-stu-id="e4975-239">The <xref:System.Numerics.BigInteger> value that results from calling this constructor is identical to the value that results from assigning an <xref:System.Int32> value to a <xref:System.Numerics.BigInteger>.</span></span>  
  
 <span data-ttu-id="e4975-240"><xref:System.Numerics.BigInteger>結構不包含的型別參數的建構函式<xref:System.Byte>， <xref:System.Int16>， <xref:System.SByte>，或<xref:System.UInt16>。</span><span class="sxs-lookup"><span data-stu-id="e4975-240">The <xref:System.Numerics.BigInteger> structure does not include constructors with a parameter of type <xref:System.Byte>, <xref:System.Int16>, <xref:System.SByte>, or <xref:System.UInt16>.</span></span> <span data-ttu-id="e4975-241">不過，<xref:System.Int32>型別支援 8 位元和 16 位元帶正負號和不帶正負號的整數隱含轉換為帶正負號的 32 位元整數。</span><span class="sxs-lookup"><span data-stu-id="e4975-241">However, the <xref:System.Int32> type supports the implicit conversion of 8-bit and 16-bit signed and unsigned integers to signed 32-bit integers.</span></span> <span data-ttu-id="e4975-242">如果，如此一來，呼叫這個建構函式`value`是這四個整數類資料類型的任何一個。</span><span class="sxs-lookup"><span data-stu-id="e4975-242">As a result, this constructor is called if `value` is any one of these four integral types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e4975-243">下列範例會呼叫<xref:System.Numerics.BigInteger.%23ctor%28System.Int32%29>建構函式來具現化<xref:System.Numerics.BigInteger>32 位元整數的陣列中的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-243">The following example calls the <xref:System.Numerics.BigInteger.%23ctor%28System.Int32%29> constructor to instantiate <xref:System.Numerics.BigInteger> values from an array of 32-bit integers.</span></span> <span data-ttu-id="e4975-244">它也會使用隱含轉換將每個 32 位元整數值指派給<xref:System.Numerics.BigInteger>變數。</span><span class="sxs-lookup"><span data-stu-id="e4975-244">It also uses implicit conversion to assign each 32-bit integer value to a <xref:System.Numerics.BigInteger> variable.</span></span> <span data-ttu-id="e4975-245">然後它會比較兩個值來建立產生<xref:System.Numerics.BigInteger>值都相同。</span><span class="sxs-lookup"><span data-stu-id="e4975-245">It then compares the two values to establish that the resulting <xref:System.Numerics.BigInteger> values are the same.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ctors#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example2.cs#6)]
 [!code-vb[System.Numerics.BigInteger.ctors#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example2.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BigInteger (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.#ctor(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BigInteger(long value);" />
      <MemberSignature Language="F#" Value="new System.Numerics.BigInteger : int64 -&gt; System.Numerics.BigInteger" Usage="new System.Numerics.BigInteger value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e4975-246">64 位元帶正負號的整數。</span><span class="sxs-lookup"><span data-stu-id="e4975-246">A 64-bit signed integer.</span></span></param>
        <summary><span data-ttu-id="e4975-247">使用 64 位元帶正負號的整數值，初始化 <see cref="T:System.Numerics.BigInteger" /> 結構的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="e4975-247">Initializes a new instance of the <see cref="T:System.Numerics.BigInteger" /> structure using a 64-bit signed integer value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-248">具現化時不會遺失任何精確度的<xref:System.Numerics.BigInteger>使用這個建構函式的物件。</span><span class="sxs-lookup"><span data-stu-id="e4975-248">There is no loss of precision when instantiating a <xref:System.Numerics.BigInteger> object by using this constructor.</span></span>  
  
 <span data-ttu-id="e4975-249"><xref:System.Numerics.BigInteger>由呼叫這個建構函式產生的值完全相同的值所產生的指派<xref:System.Int64>值<xref:System.Numerics.BigInteger>。</span><span class="sxs-lookup"><span data-stu-id="e4975-249">The <xref:System.Numerics.BigInteger> value that results from calling this constructor is identical to the value that results from assigning an <xref:System.Int64> value to a <xref:System.Numerics.BigInteger>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e4975-250">下列範例會呼叫<xref:System.Numerics.BigInteger.%23ctor%28System.Int64%29>建構函式來具現化<xref:System.Numerics.BigInteger>64 位元整數的陣列中的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-250">The following example calls the <xref:System.Numerics.BigInteger.%23ctor%28System.Int64%29> constructor to instantiate <xref:System.Numerics.BigInteger> values from an array of 64-bit integers.</span></span> <span data-ttu-id="e4975-251">它也會使用隱含轉換將每個 64 位元整數值指派給<xref:System.Numerics.BigInteger>變數。</span><span class="sxs-lookup"><span data-stu-id="e4975-251">It also uses implicit conversion to assign each 64-bit integer value to a <xref:System.Numerics.BigInteger> variable.</span></span> <span data-ttu-id="e4975-252">然後它會比較兩個值來建立產生<xref:System.Numerics.BigInteger>值都相同。</span><span class="sxs-lookup"><span data-stu-id="e4975-252">It then compares the two values to establish that the resulting <xref:System.Numerics.BigInteger> values are the same.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ctors#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example2.cs#7)]
 [!code-vb[System.Numerics.BigInteger.ctors#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example2.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BigInteger (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.#ctor(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BigInteger(float value);" />
      <MemberSignature Language="F#" Value="new System.Numerics.BigInteger : single -&gt; System.Numerics.BigInteger" Usage="new System.Numerics.BigInteger value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e4975-253">單精確度浮點值。</span><span class="sxs-lookup"><span data-stu-id="e4975-253">A single-precision floating-point value.</span></span></param>
        <summary><span data-ttu-id="e4975-254">使用單精確度浮點值，初始化 <see cref="T:System.Numerics.BigInteger" /> 結構的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="e4975-254">Initializes a new instance of the <see cref="T:System.Numerics.BigInteger" /> structure using a single-precision floating-point value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-255">任何小數部分`value`具現化時，參數會被截斷<xref:System.Numerics.BigInteger>物件。</span><span class="sxs-lookup"><span data-stu-id="e4975-255">Any fractional part of the `value` parameter is truncated when instantiating a <xref:System.Numerics.BigInteger> object.</span></span>  
  
 <span data-ttu-id="e4975-256">因為缺少有效位數<xref:System.Single>資料型別，呼叫這個建構函式可能會導致資料遺失。</span><span class="sxs-lookup"><span data-stu-id="e4975-256">Because of the lack of precision of the <xref:System.Single> data type, calling this constructor can result in data loss.</span></span>  
  
 <span data-ttu-id="e4975-257"><xref:System.Numerics.BigInteger>由呼叫這個建構函式產生的值等於值所產生明確指派<xref:System.Single>值<xref:System.Numerics.BigInteger>。</span><span class="sxs-lookup"><span data-stu-id="e4975-257">The <xref:System.Numerics.BigInteger> value that results from calling this constructor is identical to the value that results from explicitly assigning a <xref:System.Single> value to a <xref:System.Numerics.BigInteger>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e4975-258">下列範例示範如何將<xref:System.Numerics.BigInteger.%23ctor%28System.Single%29>建構函式來具現化<xref:System.Numerics.BigInteger>物件。</span><span class="sxs-lookup"><span data-stu-id="e4975-258">The following example illustrates the use of the <xref:System.Numerics.BigInteger.%23ctor%28System.Single%29> constructor to instantiate a <xref:System.Numerics.BigInteger> object.</span></span> <span data-ttu-id="e4975-259">它也會說明當您使用時，可能會發生的精確度遺失的<xref:System.Single>資料型別。</span><span class="sxs-lookup"><span data-stu-id="e4975-259">It also illustrates the loss of precision that may occur when you use the <xref:System.Single> data type.</span></span> <span data-ttu-id="e4975-260">A<xref:System.Single>會指派一個大型的負數值，它接著會指派給<xref:System.Numerics.BigInteger>物件。</span><span class="sxs-lookup"><span data-stu-id="e4975-260">A <xref:System.Single> is assigned a large negative value, which is then assigned to a <xref:System.Numerics.BigInteger> object.</span></span> <span data-ttu-id="e4975-261">如輸出所示，這個作業牽涉到遺失有效位數。</span><span class="sxs-lookup"><span data-stu-id="e4975-261">As the output shows, this assignment involves a loss of precision.</span></span> <span data-ttu-id="e4975-262">這兩個值則是以 1 遞增。</span><span class="sxs-lookup"><span data-stu-id="e4975-262">Both values are then incremented by one.</span></span> <span data-ttu-id="e4975-263">輸出顯示<xref:System.Numerics.BigInteger>物件會反映變更的值，而<xref:System.Single>物件則否。</span><span class="sxs-lookup"><span data-stu-id="e4975-263">The output shows that the <xref:System.Numerics.BigInteger> object reflects the changed value, whereas the <xref:System.Single> object does not.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ctors#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example2.cs#8)]
 [!code-vb[System.Numerics.BigInteger.ctors#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example2.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="e4975-264"><paramref name="value" /> 的值是 <see cref="F:System.Single.NaN" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-264">The value of <paramref name="value" /> is <see cref="F:System.Single.NaN" />.</span></span>  
  
<span data-ttu-id="e4975-265">-或-</span><span class="sxs-lookup"><span data-stu-id="e4975-265">-or-</span></span> 
<span data-ttu-id="e4975-266"><paramref name="value" /> 的值是 <see cref="F:System.Single.NegativeInfinity" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-266">The value of <paramref name="value" /> is <see cref="F:System.Single.NegativeInfinity" />.</span></span>  
  
<span data-ttu-id="e4975-267">-或-</span><span class="sxs-lookup"><span data-stu-id="e4975-267">-or-</span></span> 
<span data-ttu-id="e4975-268"><paramref name="value" /> 的值是 <see cref="F:System.Single.PositiveInfinity" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-268">The value of <paramref name="value" /> is <see cref="F:System.Single.PositiveInfinity" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BigInteger (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.#ctor(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BigInteger(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="new System.Numerics.BigInteger : uint32 -&gt; System.Numerics.BigInteger" Usage="new System.Numerics.BigInteger value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e4975-269">32 位元不帶正負號的整數值。</span><span class="sxs-lookup"><span data-stu-id="e4975-269">An unsigned 32-bit integer value.</span></span></param>
        <summary><span data-ttu-id="e4975-270">使用不帶正負號的 32 位元整數值，初始化 <see cref="T:System.Numerics.BigInteger" /> 結構的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="e4975-270">Initializes a new instance of the <see cref="T:System.Numerics.BigInteger" /> structure using an unsigned 32-bit integer value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-271">具現化時不會遺失任何精確度的<xref:System.Numerics.BigInteger>使用這個建構函式。</span><span class="sxs-lookup"><span data-stu-id="e4975-271">There is no loss of precision when instantiating a <xref:System.Numerics.BigInteger> using this constructor.</span></span>  
  
 <span data-ttu-id="e4975-272"><xref:System.Numerics.BigInteger>由呼叫這個建構函式產生的值完全相同的值所產生的指派<xref:System.UInt32>值<xref:System.Numerics.BigInteger>。</span><span class="sxs-lookup"><span data-stu-id="e4975-272">The <xref:System.Numerics.BigInteger> value that results from calling this constructor is identical to the value that results from assigning a <xref:System.UInt32> value to a <xref:System.Numerics.BigInteger>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e4975-273">下列範例會使用<xref:System.Numerics.BigInteger.%23ctor%28System.UInt32%29>建構函式和指派陳述式來初始化<xref:System.Numerics.BigInteger>不帶正負號的 32 位元整數的陣列中的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-273">The following example uses the <xref:System.Numerics.BigInteger.%23ctor%28System.UInt32%29> constructor and an assignment statement to initialize <xref:System.Numerics.BigInteger> values from an array of unsigned 32-bit integers.</span></span> <span data-ttu-id="e4975-274">然後它會比較兩個值来示範兩種初始化<xref:System.Numerics.BigInteger>值產生相同的結果。</span><span class="sxs-lookup"><span data-stu-id="e4975-274">It then compares the two values to demonstrate that the two methods of initializing a <xref:System.Numerics.BigInteger> value produce identical results.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ctors#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example2.cs#9)]
 [!code-vb[System.Numerics.BigInteger.ctors#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example2.vb#9)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Numerics.BigInteger.#ctor(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BigInteger (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.#ctor(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BigInteger(System::UInt64 value);" />
      <MemberSignature Language="F#" Value="new System.Numerics.BigInteger : uint64 -&gt; System.Numerics.BigInteger" Usage="new System.Numerics.BigInteger value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e4975-275">不帶正負號的 64 位元整數。</span><span class="sxs-lookup"><span data-stu-id="e4975-275">An unsigned 64-bit integer.</span></span></param>
        <summary><span data-ttu-id="e4975-276">使用不帶正負號的 64 位元整數值，初始化 <see cref="T:System.Numerics.BigInteger" /> 結構的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="e4975-276">Initializes a new instance of the <see cref="T:System.Numerics.BigInteger" /> structure with an unsigned 64-bit integer value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-277">具現化時不會遺失任何精確度的<xref:System.Numerics.BigInteger>使用這個建構函式。</span><span class="sxs-lookup"><span data-stu-id="e4975-277">There is no loss of precision when instantiating a <xref:System.Numerics.BigInteger> using this constructor.</span></span>  
  
 <span data-ttu-id="e4975-278"><xref:System.Numerics.BigInteger>由呼叫這個建構函式產生的值完全相同的值所產生的指派<xref:System.UInt64>值<xref:System.Numerics.BigInteger>。</span><span class="sxs-lookup"><span data-stu-id="e4975-278">The <xref:System.Numerics.BigInteger> value that results from calling this constructor is identical to the value that results from assigning a <xref:System.UInt64> value to a <xref:System.Numerics.BigInteger>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e4975-279">下列範例會使用<xref:System.Numerics.BigInteger.%23ctor%28System.UInt64%29>建構函式來具現化<xref:System.Numerics.BigInteger>物件，其值等於<xref:System.UInt64.MaxValue>。</span><span class="sxs-lookup"><span data-stu-id="e4975-279">The following example uses the <xref:System.Numerics.BigInteger.%23ctor%28System.UInt64%29> constructor to instantiate a <xref:System.Numerics.BigInteger> object whose value is equal to <xref:System.UInt64.MaxValue>.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ctors#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example2.cs#10)]
 [!code-vb[System.Numerics.BigInteger.ctors#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example2.vb#10)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Numerics.BigInteger.#ctor(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BigInteger (ReadOnlySpan&lt;byte&gt; value, bool isUnsigned = false, bool isBigEndian = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; value, bool isUnsigned, bool isBigEndian) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.#ctor(System.ReadOnlySpan{System.Byte},System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As ReadOnlySpan(Of Byte), Optional isUnsigned As Boolean = false, Optional isBigEndian As Boolean = false)" />
      <MemberSignature Language="F#" Value="new System.Numerics.BigInteger : ReadOnlySpan&lt;byte&gt; * bool * bool -&gt; System.Numerics.BigInteger" Usage="new System.Numerics.BigInteger (value, isUnsigned, isBigEndian)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="isUnsigned" Type="System.Boolean" />
        <Parameter Name="isBigEndian" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="isUnsigned">To be added.</param>
        <param name="isBigEndian">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Abs">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Abs (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Abs(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Abs(System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Abs (value As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger Abs(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member Abs : System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.Abs value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e4975-280">數字。</span><span class="sxs-lookup"><span data-stu-id="e4975-280">A number.</span></span></param>
        <summary><span data-ttu-id="e4975-281">取得 <see cref="T:System.Numerics.BigInteger" /> 物件的絕對值。</span><span class="sxs-lookup"><span data-stu-id="e4975-281">Gets the absolute value of a <see cref="T:System.Numerics.BigInteger" /> object.</span></span></summary>
        <returns><span data-ttu-id="e4975-282"><paramref name="value" /> 的絕對值。</span><span class="sxs-lookup"><span data-stu-id="e4975-282">The absolute value of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-283">下表所示，數字的絕對值是沒有正負號，該數字。</span><span class="sxs-lookup"><span data-stu-id="e4975-283">The absolute value of a number is that number without its sign, as shown in the following table.</span></span>  
  
|<span data-ttu-id="e4975-284">`value` 參數</span><span class="sxs-lookup"><span data-stu-id="e4975-284">`value` parameter</span></span>|<span data-ttu-id="e4975-285">傳回值</span><span class="sxs-lookup"><span data-stu-id="e4975-285">Return value</span></span>|  
|-----------------------|------------------|  
|<span data-ttu-id="e4975-286">`value` >= 0</span><span class="sxs-lookup"><span data-stu-id="e4975-286">`value` >= 0</span></span>|`value`|  
|<span data-ttu-id="e4975-287">`value` < 0</span><span class="sxs-lookup"><span data-stu-id="e4975-287">`value` < 0</span></span>|<span data-ttu-id="e4975-288">`value` \* -1</span><span class="sxs-lookup"><span data-stu-id="e4975-288">`value` \* -1</span></span>|  
  
 <span data-ttu-id="e4975-289"><xref:System.Numerics.BigInteger.Abs%2A>方法就相當於<xref:System.Math.Abs%2A?displayProperty=nameWithType>基本數值類型的方法。</span><span class="sxs-lookup"><span data-stu-id="e4975-289">The <xref:System.Numerics.BigInteger.Abs%2A> method is equivalent to the <xref:System.Math.Abs%2A?displayProperty=nameWithType> method for the primitive numeric types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e4975-290">下列範例會使用<xref:System.Numerics.BigInteger.Abs%2A>方法，將轉換<xref:System.Numerics.BigInteger>二補數表示序列化至檔案之前的標誌大小表示的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-290">The following example uses the <xref:System.Numerics.BigInteger.Abs%2A> method to convert a <xref:System.Numerics.BigInteger> value from two's complement representation to sign-and-magnitude representation before serializing it to a file.</span></span> <span data-ttu-id="e4975-291">檔案中的資料然後還原序列化，並指派給新<xref:System.Numerics.BigInteger>物件。</span><span class="sxs-lookup"><span data-stu-id="e4975-291">Data in the file is then deserialized and assigned to a new <xref:System.Numerics.BigInteger> object.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Abs#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Abs/cs/Abs1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Abs#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Abs/vb/Abs1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Math.Abs(System.SByte)" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Add (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Add(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Add(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Add (left As BigInteger, right As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger Add(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member Add : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.Add (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="e4975-292">要相加的第一個值。</span><span class="sxs-lookup"><span data-stu-id="e4975-292">The first value to add.</span></span></param>
        <param name="right"><span data-ttu-id="e4975-293">要相加的第二個值。</span><span class="sxs-lookup"><span data-stu-id="e4975-293">The second value to add.</span></span></param>
        <summary><span data-ttu-id="e4975-294">兩個 <see cref="T:System.Numerics.BigInteger" /> 值相加，並傳回結果。</span><span class="sxs-lookup"><span data-stu-id="e4975-294">Adds two <see cref="T:System.Numerics.BigInteger" /> values and returns the result.</span></span></summary>
        <returns><span data-ttu-id="e4975-295"><paramref name="left" /> 和 <paramref name="right" /> 的總和。</span><span class="sxs-lookup"><span data-stu-id="e4975-295">The sum of <paramref name="left" /> and <paramref name="right" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-296">可以使用運算子多載或自訂運算子不支援的語言<xref:System.Numerics.BigInteger.Add%2A>方法，以執行加法使用<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="e4975-296">Languages that do not support operator overloading or custom operators can use the <xref:System.Numerics.BigInteger.Add%2A> method to perform addition using <xref:System.Numerics.BigInteger> values.</span></span>  
  
 <span data-ttu-id="e4975-297"><xref:System.Numerics.BigInteger.Add%2A>具現化時，方法是加法運算子的有用替代<xref:System.Numerics.BigInteger>變數將它指派加法，產生的總和，如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="e4975-297">The <xref:System.Numerics.BigInteger.Add%2A> method is a useful substitute for the addition operator when instantiating a <xref:System.Numerics.BigInteger> variable by assigning it a sum that results from addition, as shown in the following example.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.OperationMethods#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/cs/Multiply1.cs#2)]
 [!code-vb[System.Numerics.BigInteger.OperationMethods#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/vb/Multiply1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.op_Addition(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Compare(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (left As BigInteger, right As BigInteger) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member Compare : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; int" Usage="System.Numerics.BigInteger.Compare (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="e4975-298">要比較的第一個值。</span><span class="sxs-lookup"><span data-stu-id="e4975-298">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="e4975-299">要比較的第二個值。</span><span class="sxs-lookup"><span data-stu-id="e4975-299">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="e4975-300">比較兩個 <see cref="T:System.Numerics.BigInteger" /> 值並傳回整數，這個整數表示第一個值小於、等於或大於第二個值。</span><span class="sxs-lookup"><span data-stu-id="e4975-300">Compares two <see cref="T:System.Numerics.BigInteger" /> values and returns an integer that indicates whether the first value is less than, equal to, or greater than the second value.</span></span></summary>
        <returns><span data-ttu-id="e4975-301">帶正負號的整數，表示 <paramref name="left" /> 和 <paramref name="right" /> 的相對值，如下表所示。</span><span class="sxs-lookup"><span data-stu-id="e4975-301">A signed integer that indicates the relative values of <paramref name="left" /> and <paramref name="right" />, as shown in the following table.</span></span>  
  
 <list type="table"><listheader><term> <span data-ttu-id="e4975-302">值</span><span class="sxs-lookup"><span data-stu-id="e4975-302">Value</span></span> 
 </term><description> <span data-ttu-id="e4975-303">條件</span><span class="sxs-lookup"><span data-stu-id="e4975-303">Condition</span></span> 
 </description></listheader><item><term> <span data-ttu-id="e4975-304">小於零</span><span class="sxs-lookup"><span data-stu-id="e4975-304">Less than zero</span></span> 
 </term><description><span data-ttu-id="e4975-305"><paramref name="left" /> 小於 <paramref name="right" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-305"><paramref name="left" /> is less than <paramref name="right" />.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="e4975-306">零</span><span class="sxs-lookup"><span data-stu-id="e4975-306">Zero</span></span> 
 </term><description><span data-ttu-id="e4975-307"><paramref name="left" />等於 <paramref name="right" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-307"><paramref name="left" /> equals <paramref name="right" />.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="e4975-308">大於零</span><span class="sxs-lookup"><span data-stu-id="e4975-308">Greater than zero</span></span> 
 </term><description><span data-ttu-id="e4975-309"><paramref name="left" /> 大於 <paramref name="right" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-309"><paramref name="left" /> is greater than <paramref name="right" />.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-310">雖然<xref:System.Numerics.BigInteger>類型的任何固定的範圍比較<xref:System.Numerics.BigInteger>缺乏特性的比較浮點數的有效位數不特性值。</span><span class="sxs-lookup"><span data-stu-id="e4975-310">Although the <xref:System.Numerics.BigInteger> type has no fixed range, comparisons of <xref:System.Numerics.BigInteger> values are not characterized by the lack of precision that characterizes the comparison of floating-point numbers.</span></span> <span data-ttu-id="e4975-311">下列範例會比較兩個<xref:System.Numerics.BigInteger>一個且每個不同的值有 1,896 的數字。</span><span class="sxs-lookup"><span data-stu-id="e4975-311">The following example compares two <xref:System.Numerics.BigInteger> values that differ by one and that each have 1,896 digits.</span></span> <span data-ttu-id="e4975-312"><xref:System.Numerics.BigInteger.Compare%2A>方法會正確報告兩個值是否不相等。</span><span class="sxs-lookup"><span data-stu-id="e4975-312">The <xref:System.Numerics.BigInteger.Compare%2A> method correctly reports that the two values are not equal.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Compare#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Compare/cs/Compare1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Compare#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Compare/vb/Compare1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.CompareTo" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CompareTo">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e4975-313">比較這個執行個體的值與另一個值，並且傳回整數，這個整數表示這個執行個體的值小於、等於或大於另一個值。</span><span class="sxs-lookup"><span data-stu-id="e4975-313">Compares the value of this instance with another value and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the other value.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (long other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 CompareTo(int64 other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.CompareTo(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (other As Long) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int CompareTo(long other);" />
      <MemberSignature Language="F#" Value="member this.CompareTo : int64 -&gt; int" Usage="bigInteger.CompareTo other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="e4975-314">要比較的帶正負號 64 位元整數。</span><span class="sxs-lookup"><span data-stu-id="e4975-314">The signed 64-bit integer to compare.</span></span></param>
        <summary><span data-ttu-id="e4975-315">比較這個執行個體與帶正負號的 64 位元整數，並且傳回整數，這個整數表示這個執行個體的值小於、等於或大於帶正負號 64 位元整數的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-315">Compares this instance to a signed 64-bit integer and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the signed 64-bit integer.</span></span></summary>
        <returns><span data-ttu-id="e4975-316">帶正負號的整數值，表示這個執行個體與 <paramref name="other" /> 的關聯性，如下表所示。</span><span class="sxs-lookup"><span data-stu-id="e4975-316">A signed integer value that indicates the relationship of this instance to <paramref name="other" />, as shown in the following table.</span></span>  
  
 <list type="table"><listheader><term> <span data-ttu-id="e4975-317">傳回值</span><span class="sxs-lookup"><span data-stu-id="e4975-317">Return value</span></span> 
 </term><description> <span data-ttu-id="e4975-318">描述</span><span class="sxs-lookup"><span data-stu-id="e4975-318">Description</span></span> 
 </description></listheader><item><term> <span data-ttu-id="e4975-319">小於零</span><span class="sxs-lookup"><span data-stu-id="e4975-319">Less than zero</span></span> 
 </term><description> <span data-ttu-id="e4975-320">目前的執行個體小於 <paramref name="other" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-320">The current instance is less than <paramref name="other" />.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="e4975-321">零</span><span class="sxs-lookup"><span data-stu-id="e4975-321">Zero</span></span> 
 </term><description> <span data-ttu-id="e4975-322">目前的執行個體等於 <paramref name="other" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-322">The current instance equals <paramref name="other" />.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="e4975-323">大於零</span><span class="sxs-lookup"><span data-stu-id="e4975-323">Greater than zero</span></span> 
 </term><description> <span data-ttu-id="e4975-324">目前的執行個體大於 <paramref name="other" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-324">The current instance is greater than <paramref name="other" />.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-325">如果`other`是<xref:System.Byte>， <xref:System.Int16>， <xref:System.Int32>， <xref:System.SByte>， <xref:System.UInt16>，或<xref:System.UInt32>的值，則會隱含地轉換成<xref:System.Int64>值<xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29>呼叫方法。</span><span class="sxs-lookup"><span data-stu-id="e4975-325">If `other` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29> method is called.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e4975-326">下列範例說明呼叫<xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29>具有整數值的方法。</span><span class="sxs-lookup"><span data-stu-id="e4975-326">The following example illustrates the result of calling the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29> method with integral values.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.CompareTo#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.CompareTo/cs/Example2.cs#3)]
 [!code-vb[System.Numerics.BigInteger.CompareTo#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.CompareTo/vb/Example2.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (System.Numerics.BigInteger other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(valuetype System.Numerics.BigInteger other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.CompareTo(System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (other As BigInteger) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(System::Numerics::BigInteger other);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : System.Numerics.BigInteger -&gt; int&#xA;override this.CompareTo : System.Numerics.BigInteger -&gt; int" Usage="bigInteger.CompareTo other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable`1.CompareTo(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="e4975-327">要比較的物件。</span><span class="sxs-lookup"><span data-stu-id="e4975-327">The object to compare.</span></span></param>
        <summary><span data-ttu-id="e4975-328">比較這個執行個體與第二個 <see cref="T:System.Numerics.BigInteger" />，並且傳回整數，這個整數表示這個執行個體的值小於、等於或大於指定之物件的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-328">Compares this instance to a second <see cref="T:System.Numerics.BigInteger" /> and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified object.</span></span></summary>
        <returns><span data-ttu-id="e4975-329">帶正負號的整數值，表示這個執行個體與 <paramref name="other" /> 的關聯性，如下表所示。</span><span class="sxs-lookup"><span data-stu-id="e4975-329">A signed integer value that indicates the relationship of this instance to <paramref name="other" />, as shown in the following table.</span></span>  
  
 <list type="table"><listheader><term> <span data-ttu-id="e4975-330">傳回值</span><span class="sxs-lookup"><span data-stu-id="e4975-330">Return value</span></span> 
 </term><description> <span data-ttu-id="e4975-331">描述</span><span class="sxs-lookup"><span data-stu-id="e4975-331">Description</span></span> 
 </description></listheader><item><term> <span data-ttu-id="e4975-332">小於零</span><span class="sxs-lookup"><span data-stu-id="e4975-332">Less than zero</span></span> 
 </term><description> <span data-ttu-id="e4975-333">目前的執行個體小於 <paramref name="other" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-333">The current instance is less than <paramref name="other" />.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="e4975-334">零</span><span class="sxs-lookup"><span data-stu-id="e4975-334">Zero</span></span> 
 </term><description> <span data-ttu-id="e4975-335">目前的執行個體等於 <paramref name="other" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-335">The current instance equals <paramref name="other" />.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="e4975-336">大於零</span><span class="sxs-lookup"><span data-stu-id="e4975-336">Greater than zero</span></span> 
 </term><description> <span data-ttu-id="e4975-337">目前的執行個體大於 <paramref name="other" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-337">The current instance is greater than <paramref name="other" />.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-338">這個多載<xref:System.Numerics.BigInteger.CompareTo%2A>方法會實作<xref:System.IComparable%601.CompareTo%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="e4975-338">This overload of the <xref:System.Numerics.BigInteger.CompareTo%2A> method implements the <xref:System.IComparable%601.CompareTo%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="e4975-339">它是泛型集合物件所用來排序的項目集合中。</span><span class="sxs-lookup"><span data-stu-id="e4975-339">It is used by generic collection objects to order the items in the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e4975-340">下列範例示範如何將<xref:System.Numerics.BigInteger.CompareTo%28System.Numerics.BigInteger%29>方法來排序的清單`StarInfo`物件。</span><span class="sxs-lookup"><span data-stu-id="e4975-340">The following example illustrates the use of the <xref:System.Numerics.BigInteger.CompareTo%28System.Numerics.BigInteger%29> method to order a list of `StarInfo` objects.</span></span> <span data-ttu-id="e4975-341">每個`StarInfo`物件會提供有關星號的名稱和其英哩地球的距離資訊。</span><span class="sxs-lookup"><span data-stu-id="e4975-341">Each `StarInfo` object provides information about a star's name and its distance from the Earth in miles.</span></span> <span data-ttu-id="e4975-342">`StarInfo` 會實作<xref:System.IComparable%601>介面，可讓`StarInfo`要排序的泛型集合類別的物件。</span><span class="sxs-lookup"><span data-stu-id="e4975-342">`StarInfo` implements the <xref:System.IComparable%601> interface, which enables `StarInfo` objects to be sorted by generic collection classes.</span></span> <span data-ttu-id="e4975-343">其<xref:System.IComparable%601.CompareTo%2A?displayProperty=nameWithType>實作包裝起來呼叫<xref:System.Numerics.BigInteger.CompareTo%28System.Numerics.BigInteger%29>。</span><span class="sxs-lookup"><span data-stu-id="e4975-343">Its <xref:System.IComparable%601.CompareTo%2A?displayProperty=nameWithType> implementation just wraps a call to <xref:System.Numerics.BigInteger.CompareTo%28System.Numerics.BigInteger%29>.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.CompareTo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.CompareTo/cs/Example1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.CompareTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.CompareTo/vb/Example1.vb#1)]  
  
 <span data-ttu-id="e4975-344">下列程式碼接著會執行個體化四`StarInfo`物件，並將它們儲存在泛型<xref:System.Collections.Generic.List%601>物件。</span><span class="sxs-lookup"><span data-stu-id="e4975-344">The following code then instantiates four `StarInfo` objects and stores them in a generic <xref:System.Collections.Generic.List%601> object.</span></span> <span data-ttu-id="e4975-345">在後<xref:System.Collections.Generic.List%601.Sort%2A?displayProperty=nameWithType>呼叫方法時，`StarInfo`物件會顯示在地球的距離的順序。</span><span class="sxs-lookup"><span data-stu-id="e4975-345">After the <xref:System.Collections.Generic.List%601.Sort%2A?displayProperty=nameWithType> method is called, `StarInfo` objects are displayed in order of their distance from the Earth.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.CompareTo#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.CompareTo/cs/Example1.cs#2)]
 [!code-vb[System.Numerics.BigInteger.CompareTo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.CompareTo/vb/Example1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.Compare(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
        <altmember cref="T:System.IComparable`1" />
        <altmember cref="M:System.Numerics.BigInteger.Equals(System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (obj As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : obj -&gt; int&#xA;override this.CompareTo : obj -&gt; int" Usage="bigInteger.CompareTo obj" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="e4975-346">要比較的物件。</span><span class="sxs-lookup"><span data-stu-id="e4975-346">The object to compare.</span></span></param>
        <summary><span data-ttu-id="e4975-347">比較這個執行個體與特定物件，並且傳回一個整數，指出這個執行個體的值是小於、等於或大於特定物件的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-347">Compares this instance to a specified object and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified object.</span></span></summary>
        <returns><span data-ttu-id="e4975-348">帶正負號的整數，表示目前執行個體與 <paramref name="obj" /> 參數的關聯性，如下表所示。</span><span class="sxs-lookup"><span data-stu-id="e4975-348">A signed integer that indicates the relationship of the current instance to the <paramref name="obj" /> parameter, as shown in the following table.</span></span>  
  
 <list type="table"><listheader><term> <span data-ttu-id="e4975-349">傳回值</span><span class="sxs-lookup"><span data-stu-id="e4975-349">Return value</span></span> 
 </term><description> <span data-ttu-id="e4975-350">描述</span><span class="sxs-lookup"><span data-stu-id="e4975-350">Description</span></span> 
 </description></listheader><item><term> <span data-ttu-id="e4975-351">小於零</span><span class="sxs-lookup"><span data-stu-id="e4975-351">Less than zero</span></span> 
 </term><description> <span data-ttu-id="e4975-352">目前的執行個體小於 <paramref name="obj" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-352">The current instance is less than <paramref name="obj" />.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="e4975-353">零</span><span class="sxs-lookup"><span data-stu-id="e4975-353">Zero</span></span> 
 </term><description> <span data-ttu-id="e4975-354">目前的執行個體等於 <paramref name="obj" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-354">The current instance equals <paramref name="obj" />.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="e4975-355">大於零</span><span class="sxs-lookup"><span data-stu-id="e4975-355">Greater than zero</span></span> 
 </term><description> <span data-ttu-id="e4975-356">目前執行個體大於 <paramref name="obj" />，或者 <paramref name="obj" /> 參數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-356">The current instance is greater than <paramref name="obj" />, or the <paramref name="obj" /> parameter is <see langword="null" />.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-357">這個多載<xref:System.Numerics.BigInteger.CompareTo%2A>方法會實作<xref:System.IComparable.CompareTo%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="e4975-357">This overload of the <xref:System.Numerics.BigInteger.CompareTo%2A> method implements the <xref:System.IComparable.CompareTo%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="e4975-358">若要排序的項目集合中，它供非泛型集合物件。</span><span class="sxs-lookup"><span data-stu-id="e4975-358">It is used by non-generic collection objects to order the items in the collection.</span></span>  
  
 <span data-ttu-id="e4975-359">`obj`參數必須是下列其中之一：</span><span class="sxs-lookup"><span data-stu-id="e4975-359">The `obj` parameter must be one of the following:</span></span>  
  
-   <span data-ttu-id="e4975-360">物件，其執行階段型別為<xref:System.Numerics.BigInteger>。</span><span class="sxs-lookup"><span data-stu-id="e4975-360">An object whose run-time type is <xref:System.Numerics.BigInteger>.</span></span>  
  
-   <span data-ttu-id="e4975-361"><xref:System.Object>變數，其值為`null`。</span><span class="sxs-lookup"><span data-stu-id="e4975-361">An <xref:System.Object> variable whose value is `null`.</span></span> <span data-ttu-id="e4975-362">如果值`obj`參數是`null`，則方法會傳回 1，表示目前的執行個體大於`obj`。</span><span class="sxs-lookup"><span data-stu-id="e4975-362">If the value of the `obj` parameter is `null`, the method returns 1, which indicates that that the current instance is greater than `obj`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e4975-363">下列範例會呼叫<xref:System.Numerics.BigInteger.CompareTo%28System.Object%29>方法來比較<xref:System.Numerics.BigInteger>每個項目的物件陣列中的值</span><span class="sxs-lookup"><span data-stu-id="e4975-363">The following example calls the <xref:System.Numerics.BigInteger.CompareTo%28System.Object%29> method to compare a <xref:System.Numerics.BigInteger> value with each element in an object array</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.CompareTo#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.CompareTo/cs/Example2.cs#4)]
 [!code-vb[System.Numerics.BigInteger.CompareTo#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.CompareTo/vb/Example2.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e4975-364"><paramref name="obj" /> 不是 <see cref="T:System.Numerics.BigInteger" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-364"><paramref name="obj" /> is not a <see cref="T:System.Numerics.BigInteger" />.</span></span></exception>
        <altmember cref="T:System.IComparable" />
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (ulong other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 CompareTo(unsigned int64 other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.CompareTo(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (other As ULong) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int CompareTo(System::UInt64 other);" />
      <MemberSignature Language="F#" Value="member this.CompareTo : uint64 -&gt; int" Usage="bigInteger.CompareTo other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="e4975-365">要比較的不帶正負號 64 位元整數。</span><span class="sxs-lookup"><span data-stu-id="e4975-365">The unsigned 64-bit integer to compare.</span></span></param>
        <summary><span data-ttu-id="e4975-366">比較這個執行個體與不帶正負號的 64 位元整數，並且傳回整數，這個整數表示這個執行個體的值小於、等於或大於不帶正負號 64 位元整數的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-366">Compares this instance to an unsigned 64-bit integer and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the unsigned 64-bit integer.</span></span></summary>
        <returns><span data-ttu-id="e4975-367">帶正負號的整數，表示這個執行個體與 <paramref name="other" /> 的相對值，如下表所示。</span><span class="sxs-lookup"><span data-stu-id="e4975-367">A signed integer that indicates the relative value of this instance and <paramref name="other" />, as shown in the following table.</span></span>  
  
 <list type="table"><listheader><term> <span data-ttu-id="e4975-368">傳回值</span><span class="sxs-lookup"><span data-stu-id="e4975-368">Return value</span></span> 
 </term><description> <span data-ttu-id="e4975-369">描述</span><span class="sxs-lookup"><span data-stu-id="e4975-369">Description</span></span> 
 </description></listheader><item><term> <span data-ttu-id="e4975-370">小於零</span><span class="sxs-lookup"><span data-stu-id="e4975-370">Less than zero</span></span> 
 </term><description> <span data-ttu-id="e4975-371">目前的執行個體小於 <paramref name="other" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-371">The current instance is less than <paramref name="other" />.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="e4975-372">零</span><span class="sxs-lookup"><span data-stu-id="e4975-372">Zero</span></span> 
 </term><description> <span data-ttu-id="e4975-373">目前的執行個體等於 <paramref name="other" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-373">The current instance equals <paramref name="other" />.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="e4975-374">大於零</span><span class="sxs-lookup"><span data-stu-id="e4975-374">Greater than zero</span></span> 
 </term><description> <span data-ttu-id="e4975-375">目前的執行個體大於 <paramref name="other" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-375">The current instance is greater than <paramref name="other" />.</span></span>  
  
 </description></item></list></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Divide">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Divide (System.Numerics.BigInteger dividend, System.Numerics.BigInteger divisor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Divide(valuetype System.Numerics.BigInteger dividend, valuetype System.Numerics.BigInteger divisor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Divide(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Divide (dividend As BigInteger, divisor As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger Divide(System::Numerics::BigInteger dividend, System::Numerics::BigInteger divisor);" />
      <MemberSignature Language="F#" Value="static member Divide : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.Divide (dividend, divisor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dividend" Type="System.Numerics.BigInteger" />
        <Parameter Name="divisor" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="dividend"><span data-ttu-id="e4975-376">做為被除數的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-376">The value to be divided.</span></span></param>
        <param name="divisor"><span data-ttu-id="e4975-377">做為除數的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-377">The value to divide by.</span></span></param>
        <summary><span data-ttu-id="e4975-378">某個 <see cref="T:System.Numerics.BigInteger" /> 值除以另一個值，並且傳回結果。</span><span class="sxs-lookup"><span data-stu-id="e4975-378">Divides one <see cref="T:System.Numerics.BigInteger" /> value by another and returns the result.</span></span></summary>
        <returns><span data-ttu-id="e4975-379">相除的商數。</span><span class="sxs-lookup"><span data-stu-id="e4975-379">The quotient of the division.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-380"><xref:System.Numerics.BigInteger.Divide%2A>方法執行整數除法運算，會捨棄任何所得相除的餘數。</span><span class="sxs-lookup"><span data-stu-id="e4975-380">The <xref:System.Numerics.BigInteger.Divide%2A> method performs integer division; any remainder that results from the division is discarded.</span></span> <span data-ttu-id="e4975-381">若要執行整數除法，同時保留其餘部分，呼叫<xref:System.Numerics.BigInteger.DivRem%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e4975-381">To perform integer division while preserving the remainder, call the <xref:System.Numerics.BigInteger.DivRem%2A> method.</span></span> <span data-ttu-id="e4975-382">若要擷取的其餘部分，請呼叫<xref:System.Numerics.BigInteger.Remainder%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e4975-382">To retrieve only the remainder, call the <xref:System.Numerics.BigInteger.Remainder%2A> method.</span></span>  
  
 <span data-ttu-id="e4975-383"><xref:System.Numerics.BigInteger.Divide%2A>方法可供不支援運算子多載的語言。</span><span class="sxs-lookup"><span data-stu-id="e4975-383">The <xref:System.Numerics.BigInteger.Divide%2A> method can be used by languages that do not support operator overloading.</span></span> <span data-ttu-id="e4975-384">它的行為等同於使用除法運算子的除法。</span><span class="sxs-lookup"><span data-stu-id="e4975-384">Its behavior is identical to division using the division operator.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e4975-385">下列範例會建立陣列<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="e4975-385">The following example creates an array of <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="e4975-386">然後它會使用每個項目為在除法運算中使用的商數<xref:System.Numerics.BigInteger.Divide%2A>方法，除法運算子 （/），而<xref:System.Numerics.BigInteger.DivRem%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e4975-386">It then uses each element as the quotient in a division operation that uses the <xref:System.Numerics.BigInteger.Divide%2A> method, the division operator (/), and the <xref:System.Numerics.BigInteger.DivRem%2A> method.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Divide#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Divide/cs/Divide1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Divide#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Divide/vb/Divide1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.DivideByZeroException"><span data-ttu-id="e4975-387"><paramref name="divisor" /> 是 0 (零)。</span><span class="sxs-lookup"><span data-stu-id="e4975-387"><paramref name="divisor" /> is 0 (zero).</span></span></exception>
        <altmember cref="M:System.Numerics.BigInteger.op_Division(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
        <altmember cref="M:System.Numerics.BigInteger.DivRem(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger@)" />
        <altmember cref="M:System.Numerics.BigInteger.Remainder(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="DivRem">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger DivRem (System.Numerics.BigInteger dividend, System.Numerics.BigInteger divisor, out System.Numerics.BigInteger remainder);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger DivRem(valuetype System.Numerics.BigInteger dividend, valuetype System.Numerics.BigInteger divisor, [out] valuetype System.Numerics.BigInteger&amp; remainder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.DivRem(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DivRem (dividend As BigInteger, divisor As BigInteger, ByRef remainder As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger DivRem(System::Numerics::BigInteger dividend, System::Numerics::BigInteger divisor, [Runtime::InteropServices::Out] System::Numerics::BigInteger % remainder);" />
      <MemberSignature Language="F#" Value="static member DivRem : System.Numerics.BigInteger * System.Numerics.BigInteger *  -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.DivRem (dividend, divisor, remainder)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dividend" Type="System.Numerics.BigInteger" />
        <Parameter Name="divisor" Type="System.Numerics.BigInteger" />
        <Parameter Name="remainder" Type="System.Numerics.BigInteger" RefType="out" />
      </Parameters>
      <Docs>
        <param name="dividend"><span data-ttu-id="e4975-388">做為被除數的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-388">The value to be divided.</span></span></param>
        <param name="divisor"><span data-ttu-id="e4975-389">做為除數的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-389">The value to divide by.</span></span></param>
        <param name="remainder"><span data-ttu-id="e4975-390">當這個方法傳回時，會包含表示相除餘數的 <see cref="T:System.Numerics.BigInteger" /> 值。</span><span class="sxs-lookup"><span data-stu-id="e4975-390">When this method returns, contains a <see cref="T:System.Numerics.BigInteger" /> value that represents the remainder from the division.</span></span> <span data-ttu-id="e4975-391">這個參數會以未初始化的狀態傳遞。</span><span class="sxs-lookup"><span data-stu-id="e4975-391">This parameter is passed uninitialized.</span></span></param>
        <summary><span data-ttu-id="e4975-392">某個 <see cref="T:System.Numerics.BigInteger" /> 值除以另一個值，傳回結果，並在輸出參數中傳回餘數。</span><span class="sxs-lookup"><span data-stu-id="e4975-392">Divides one <see cref="T:System.Numerics.BigInteger" /> value by another, returns the result, and returns the remainder in an output parameter.</span></span></summary>
        <returns><span data-ttu-id="e4975-393">相除的商數。</span><span class="sxs-lookup"><span data-stu-id="e4975-393">The quotient of the division.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-394">這個方法會保留的商數和所產生的整數除法的餘數。</span><span class="sxs-lookup"><span data-stu-id="e4975-394">This method preserves both the quotient and the remainder that results from integer division.</span></span> <span data-ttu-id="e4975-395">如果您不想要的其餘部分中，使用<xref:System.Numerics.BigInteger.Divide%2A>只想要了解其餘部分，方法或除法運算子; 如果您是使用<xref:System.Numerics.BigInteger.Remainder%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e4975-395">If you are not interested in the remainder, use the <xref:System.Numerics.BigInteger.Divide%2A> method or the division operator; if you are only interested in the remainder, use the <xref:System.Numerics.BigInteger.Remainder%2A> method.</span></span>  
  
 <span data-ttu-id="e4975-396">傳回登`remainder`值是相同的正負號`dividend`參數。</span><span class="sxs-lookup"><span data-stu-id="e4975-396">The sign of the returned `remainder` value is the same as the sign of the `dividend` parameter.</span></span>  
  
 <span data-ttu-id="e4975-397">行為<xref:System.Numerics.BigInteger.DivRem%2A>方法有相同的<xref:System.Math.DivRem%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="e4975-397">The behavior of the <xref:System.Numerics.BigInteger.DivRem%2A> method is identical to that of the <xref:System.Math.DivRem%2A?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e4975-398">下列範例會建立陣列<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="e4975-398">The following example creates an array of <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="e4975-399">然後它會使用每個項目為在除法運算中使用的商數<xref:System.Numerics.BigInteger.Divide%2A>方法，除法運算子 （/），而<xref:System.Numerics.BigInteger.DivRem%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e4975-399">It then uses each element as the quotient in a division operation that uses the <xref:System.Numerics.BigInteger.Divide%2A> method, the division operator (/), and the <xref:System.Numerics.BigInteger.DivRem%2A> method.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Divide#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Divide/cs/Divide1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Divide#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Divide/vb/Divide1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.DivideByZeroException"><span data-ttu-id="e4975-400"><paramref name="divisor" /> 是 0 (零)。</span><span class="sxs-lookup"><span data-stu-id="e4975-400"><paramref name="divisor" /> is 0 (zero).</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e4975-401">傳回值，這個值表示兩個數值是否相等。</span><span class="sxs-lookup"><span data-stu-id="e4975-401">Returns a value that indicates whether two numeric values are equal.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (long other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Equals(int64 other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Equals(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(long other);" />
      <MemberSignature Language="F#" Value="override this.Equals : int64 -&gt; bool" Usage="bigInteger.Equals other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="e4975-402">要比較的帶正負號 64 位元整數值。</span><span class="sxs-lookup"><span data-stu-id="e4975-402">The signed 64-bit integer value to compare.</span></span></param>
        <summary><span data-ttu-id="e4975-403">傳回值，這個值表示目前執行個體與帶正負號的 64 位元整數是否有相同的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-403">Returns a value that indicates whether the current instance and a signed 64-bit integer have the same value.</span></span></summary>
        <returns><span data-ttu-id="e4975-404">如果帶正負號的 64 位元整數與目前執行個體有相同的值，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-404"><see langword="true" /> if the signed 64-bit integer and the current instance have the same value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-405">如果`other`已<xref:System.Byte>， <xref:System.Int16>， <xref:System.Int32>， <xref:System.SByte>， <xref:System.UInt16>，或<xref:System.UInt32>的值，則會隱含地轉換成<xref:System.Int64>時呼叫該方法的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-405">If `other` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the method is called.</span></span>  
  
 <span data-ttu-id="e4975-406">若要判斷兩個物件，而不是只測試是否相等之間的關聯性，請呼叫<xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="e4975-406">To determine the relationship between the two objects instead of just testing for equality, call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e4975-407">下列範例會具現化<xref:System.Numerics.BigInteger>以外的每個整數類資料類型從物件<xref:System.UInt64>。</span><span class="sxs-lookup"><span data-stu-id="e4975-407">The following example instantiates a <xref:System.Numerics.BigInteger> object from each integral type except <xref:System.UInt64>.</span></span> <span data-ttu-id="e4975-408">然後它會呼叫<xref:System.Numerics.BigInteger.Equals%28System.Int64%29>方法來比較<xref:System.Numerics.BigInteger>值與原始的整數值傳遞給<xref:System.Numerics.BigInteger>建構函式。</span><span class="sxs-lookup"><span data-stu-id="e4975-408">It then calls the <xref:System.Numerics.BigInteger.Equals%28System.Int64%29> method to compare the <xref:System.Numerics.BigInteger> value with the original integer value that was passed to the <xref:System.Numerics.BigInteger> constructor.</span></span> <span data-ttu-id="e4975-409">如輸出所示，就有一個值相等在每個案例。</span><span class="sxs-lookup"><span data-stu-id="e4975-409">As the output shows, the values are equal in each case.</span></span>  
  
 [!code-cpp[System.Numerics.BigInteger.Equals#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/cpp/equals.cpp#1)]
 [!code-csharp[System.Numerics.BigInteger.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/cs/EqualsExample1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/vb/EqualsExample1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Numerics.BigInteger other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype System.Numerics.BigInteger other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Equals(System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(System::Numerics::BigInteger other);" />
      <MemberSignature Language="F#" Value="override this.Equals : System.Numerics.BigInteger -&gt; bool" Usage="bigInteger.Equals other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="e4975-410">要比較的物件。</span><span class="sxs-lookup"><span data-stu-id="e4975-410">The object to compare.</span></span></param>
        <summary><span data-ttu-id="e4975-411">傳回值，這個值表示目前執行個體與指定的 <see cref="T:System.Numerics.BigInteger" /> 物件是否有相同的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-411">Returns a value that indicates whether the current instance and a specified <see cref="T:System.Numerics.BigInteger" /> object have the same value.</span></span></summary>
        <returns><span data-ttu-id="e4975-412">如果這個 <see cref="T:System.Numerics.BigInteger" /> 物件與 <paramref name="other" /> 有相同的值，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-412"><see langword="true" /> if this <see cref="T:System.Numerics.BigInteger" /> object and <paramref name="other" /> have the same value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-413">這個方法會實作<xref:System.IEquatable%601>介面並執行稍微優於<xref:System.Numerics.BigInteger.Equals%28System.Object%29>因為它沒有轉換`other`參數來<xref:System.Numerics.BigInteger>物件。</span><span class="sxs-lookup"><span data-stu-id="e4975-413">This method implements the <xref:System.IEquatable%601> interface and performs slightly better than <xref:System.Numerics.BigInteger.Equals%28System.Object%29> because it does not have to convert the `other` parameter to a <xref:System.Numerics.BigInteger> object.</span></span>  
  
 <span data-ttu-id="e4975-414">若要判斷兩者之間的關聯性<xref:System.Numerics.BigInteger>物件，而非只測試是否相等，呼叫<xref:System.Numerics.BigInteger.CompareTo%28System.Numerics.BigInteger%29?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="e4975-414">To determine the relationship between the two <xref:System.Numerics.BigInteger> objects instead of just testing for equality, call the <xref:System.Numerics.BigInteger.CompareTo%28System.Numerics.BigInteger%29?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e4975-415">下列範例會比較從地球幾顆星的近似距離 Epsilon 指出，從以判斷它們是否相等的地球的距離。</span><span class="sxs-lookup"><span data-stu-id="e4975-415">The following example compares the approximate distance of several stars from Earth with the distance of Epsilon Indi from Earth to determine whether they are equal.</span></span> <span data-ttu-id="e4975-416">此範例會使用的每個多載<xref:System.Numerics.BigInteger.Equals%2A>方法來測試是否相等。</span><span class="sxs-lookup"><span data-stu-id="e4975-416">The example uses each overload of the <xref:System.Numerics.BigInteger.Equals%2A> method to test for equality.</span></span>  
  
 [!code-cpp[System.Numerics.BigInteger.Equals#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/cpp/equals2.cpp#2)]
 [!code-csharp[System.Numerics.BigInteger.Equals#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/cs/EqualsExample1.cs#2)]
 [!code-vb[System.Numerics.BigInteger.Equals#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/vb/EqualsExample1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="bigInteger.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="e4975-417">要比較的物件。</span><span class="sxs-lookup"><span data-stu-id="e4975-417">The object to compare.</span></span></param>
        <summary><span data-ttu-id="e4975-418">傳回值，這個值表示目前執行個體與指定的物件是否有相同的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-418">Returns a value that indicates whether the current instance and a specified object have the same value.</span></span></summary>
        <returns><span data-ttu-id="e4975-419">如果 <paramref name="obj" /> 引數為 <see cref="T:System.Numerics.BigInteger" /> 物件，且其值等於目前 <see cref="T:System.Numerics.BigInteger" /> 執行個體的值，則為 <see langword="true" />；否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-419"><see langword="true" /> if the <paramref name="obj" /> argument is a <see cref="T:System.Numerics.BigInteger" /> object, and its value is equal to the value of the current <see cref="T:System.Numerics.BigInteger" /> instance; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-420">如果`obj`引數不是<xref:System.Numerics.BigInteger>值，此方法會傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="e4975-420">If the `obj` argument is not a <xref:System.Numerics.BigInteger> value, the method returns `false`.</span></span> <span data-ttu-id="e4975-421">此方法會傳回`true`只有當`obj`是<xref:System.Numerics.BigInteger>其值等於目前的執行個體的執行個體。</span><span class="sxs-lookup"><span data-stu-id="e4975-421">The method returns `true` only if `obj` is a <xref:System.Numerics.BigInteger> instance whose value is equal to the current instance.</span></span>  
  
 <span data-ttu-id="e4975-422">若要判斷兩個物件，而不是只測試是否相等之間的關聯性，請呼叫<xref:System.Numerics.BigInteger.CompareTo%28System.Object%29>方法。</span><span class="sxs-lookup"><span data-stu-id="e4975-422">To determine the relationship between the two objects instead of just testing for equality, call the <xref:System.Numerics.BigInteger.CompareTo%28System.Object%29> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e4975-423">下列範例會定義平行<xref:System.Object>和<xref:System.Numerics.BigInteger>陣列。</span><span class="sxs-lookup"><span data-stu-id="e4975-423">The following example defines parallel <xref:System.Object> and <xref:System.Numerics.BigInteger> arrays.</span></span> <span data-ttu-id="e4975-424">其中一個陣列的每個項目具有相同的值為第二個陣列的對應元素。</span><span class="sxs-lookup"><span data-stu-id="e4975-424">Each element of one array has the same value as the corresponding element of the second array.</span></span> <span data-ttu-id="e4975-425">範例所示，在執行個體的輸出<xref:System.Numerics.BigInteger>陣列會被視為等於中的執行個體<xref:System.Object>陣列才後者<xref:System.Numerics.BigInteger>和其值是否相等。</span><span class="sxs-lookup"><span data-stu-id="e4975-425">As the output from the example shows, the instance in the <xref:System.Numerics.BigInteger> array is considered to be equal to the instance in the <xref:System.Object> array only if the latter is a <xref:System.Numerics.BigInteger> and their values are equal.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Equals#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/cs/Equals_Obj1.cs#3)]
 [!code-vb[System.Numerics.BigInteger.Equals#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/vb/Equals_Obj1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (ulong other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Equals(unsigned int64 other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Equals(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As ULong) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(System::UInt64 other);" />
      <MemberSignature Language="F#" Value="override this.Equals : uint64 -&gt; bool" Usage="bigInteger.Equals other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="e4975-426">要比較的不帶正負號 64 位元整數。</span><span class="sxs-lookup"><span data-stu-id="e4975-426">The unsigned 64-bit integer to compare.</span></span></param>
        <summary><span data-ttu-id="e4975-427">傳回值，這個值表示目前執行個體與不帶正負號的 64 位元整數是否有相同的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-427">Returns a value that indicates whether the current instance and an unsigned 64-bit integer have the same value.</span></span></summary>
        <returns><span data-ttu-id="e4975-428">如果目前執行個體與不帶正負號的 64 位元整數有相同的值，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-428"><see langword="true" /> if the current instance and the unsigned 64-bit integer have the same value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-429">若要判斷兩個物件，而不是只測試是否相等之間的關聯性，請呼叫<xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="e4975-429">To determine the relationship between the two objects instead of just testing for equality, call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e4975-430">下列範例會比較從地球幾顆星的近似距離 Epsilon 指出，從以判斷它們是否相等的地球的距離。</span><span class="sxs-lookup"><span data-stu-id="e4975-430">The following example compares the approximate distance of several stars from Earth with the distance of Epsilon Indi from Earth to determine whether they are equal.</span></span> <span data-ttu-id="e4975-431">此範例會使用的每個多載<xref:System.Numerics.BigInteger.Equals%2A>方法來測試是否相等。</span><span class="sxs-lookup"><span data-stu-id="e4975-431">The example uses each overload of the <xref:System.Numerics.BigInteger.Equals%2A> method to test for equality.</span></span>  
  
 [!code-cpp[System.Numerics.BigInteger.Equals#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/cpp/equals2.cpp#2)]
 [!code-csharp[System.Numerics.BigInteger.Equals#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/cs/EqualsExample1.cs#2)]
 [!code-vb[System.Numerics.BigInteger.Equals#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/vb/EqualsExample1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public int GetByteCount (bool isUnsigned = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetByteCount(bool isUnsigned) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.GetByteCount(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetByteCount (Optional isUnsigned As Boolean = false) As Integer" />
      <MemberSignature Language="F#" Value="member this.GetByteCount : bool -&gt; int" Usage="bigInteger.GetByteCount isUnsigned" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isUnsigned" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="isUnsigned">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="bigInteger.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e4975-432">傳回目前 <see cref="T:System.Numerics.BigInteger" /> 物件的雜湊碼。</span><span class="sxs-lookup"><span data-stu-id="e4975-432">Returns the hash code for the current <see cref="T:System.Numerics.BigInteger" /> object.</span></span></summary>
        <returns><span data-ttu-id="e4975-433">32 位元帶正負號的整數雜湊碼。</span><span class="sxs-lookup"><span data-stu-id="e4975-433">A 32-bit signed integer hash code.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GreatestCommonDivisor">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger GreatestCommonDivisor (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger GreatestCommonDivisor(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.GreatestCommonDivisor(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GreatestCommonDivisor (left As BigInteger, right As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger GreatestCommonDivisor(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member GreatestCommonDivisor : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.GreatestCommonDivisor (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="e4975-434">第一個值。</span><span class="sxs-lookup"><span data-stu-id="e4975-434">The first value.</span></span></param>
        <param name="right"><span data-ttu-id="e4975-435">第二個值。</span><span class="sxs-lookup"><span data-stu-id="e4975-435">The second value.</span></span></param>
        <summary><span data-ttu-id="e4975-436">求兩個 <see cref="T:System.Numerics.BigInteger" /> 值的最大公因數。</span><span class="sxs-lookup"><span data-stu-id="e4975-436">Finds the greatest common divisor of two <see cref="T:System.Numerics.BigInteger" /> values.</span></span></summary>
        <returns><span data-ttu-id="e4975-437"><paramref name="left" /> 和 <paramref name="right" /> 的最大公因數。</span><span class="sxs-lookup"><span data-stu-id="e4975-437">The greatest common divisor of <paramref name="left" /> and <paramref name="right" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-438">最大公因數是最大的數字，其中兩個<xref:System.Numerics.BigInteger>可以分割成的值，而不會傳回餘數。</span><span class="sxs-lookup"><span data-stu-id="e4975-438">The greatest common divisor is the largest number into which the two <xref:System.Numerics.BigInteger> values can be divided without returning a remainder.</span></span>  
  
 <span data-ttu-id="e4975-439">如果`left`和`right`參數為非零的數字，此方法一律會傳回最小值為 1，因為所有數字除以 1。</span><span class="sxs-lookup"><span data-stu-id="e4975-439">If the `left` and `right` parameters are non-zero numbers, the method always returns at least a value of 1 because all numbers can be divided by 1.</span></span> <span data-ttu-id="e4975-440">如果其中一個參數為零，則方法會傳回非零參數的絕對值。</span><span class="sxs-lookup"><span data-stu-id="e4975-440">If either parameter is zero, the method returns the absolute value of the non-zero parameter.</span></span> <span data-ttu-id="e4975-441">如果這兩個值都是零，則該方法會傳回零。</span><span class="sxs-lookup"><span data-stu-id="e4975-441">If both values are zero, the method returns zero.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e4975-442">運算的很大的值的最大公因數`left`和`right`可以是非常耗時的作業。</span><span class="sxs-lookup"><span data-stu-id="e4975-442">Computing the greatest common divisor of very large values of `left` and `right` can be a very time-consuming operation.</span></span>  
  
 <span data-ttu-id="e4975-443">所傳回的值<xref:System.Numerics.BigInteger.GreatestCommonDivisor%2A>方法一律是正數的正負號不論`left`和`right`參數。</span><span class="sxs-lookup"><span data-stu-id="e4975-443">The value returned by the <xref:System.Numerics.BigInteger.GreatestCommonDivisor%2A> method is always positive regardless of the sign of the `left` and `right` parameters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e4975-444">下列範例說明呼叫<xref:System.Numerics.BigInteger.GreatestCommonDivisor%2A>方法和例外狀況處理所需的實用資訊提供有關<xref:System.ArgumentOutOfRangeException>。</span><span class="sxs-lookup"><span data-stu-id="e4975-444">The following example illustrates a call to the <xref:System.Numerics.BigInteger.GreatestCommonDivisor%2A> method and the exception handling necessary to provide useful information about an <xref:System.ArgumentOutOfRangeException>.</span></span> <span data-ttu-id="e4975-445">結果會指出這兩個數字的最大公因數是 1。</span><span class="sxs-lookup"><span data-stu-id="e4975-445">The result indicates that the greatest common divisor of these two numbers is 1.</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#10)]
 [!code-vb[System.Numeric.BigInteger.Class#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEven">
      <MemberSignature Language="C#" Value="public bool IsEven { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEven" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.BigInteger.IsEven" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEven As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEven { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEven : bool" Usage="System.Numerics.BigInteger.IsEven" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e4975-446">表示目前 <see cref="T:System.Numerics.BigInteger" /> 物件的值是否為偶數。</span><span class="sxs-lookup"><span data-stu-id="e4975-446">Indicates whether the value of the current <see cref="T:System.Numerics.BigInteger" /> object is an even number.</span></span></summary>
        <value><span data-ttu-id="e4975-447">如果 <see cref="T:System.Numerics.BigInteger" /> 物件的值為偶數，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-447"><see langword="true" /> if the value of the <see cref="T:System.Numerics.BigInteger" /> object is an even number; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-448">這個屬性是方便的功能，指出是否<xref:System.Numerics.BigInteger>值是可由兩個。</span><span class="sxs-lookup"><span data-stu-id="e4975-448">This property is a convenience feature that indicates whether a <xref:System.Numerics.BigInteger> value is evenly divisible by two.</span></span> <span data-ttu-id="e4975-449">相當於下列運算式：</span><span class="sxs-lookup"><span data-stu-id="e4975-449">It is equivalent to the following expression:</span></span>  
  
```csharp   
value % 2 == 0;  
```  
  
```vb  
value Mod 2 = 0  
```  
  
 <span data-ttu-id="e4975-450">如果目前的值<xref:System.Numerics.BigInteger>物件是否<xref:System.Numerics.BigInteger.Zero%2A?displayProperty=nameWithType>，此屬性傳回`true`。</span><span class="sxs-lookup"><span data-stu-id="e4975-450">If the value of the current <xref:System.Numerics.BigInteger> object is <xref:System.Numerics.BigInteger.Zero%2A?displayProperty=nameWithType>, the property returns `true`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOne">
      <MemberSignature Language="C#" Value="public bool IsOne { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsOne" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.BigInteger.IsOne" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsOne As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsOne { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsOne : bool" Usage="System.Numerics.BigInteger.IsOne" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e4975-451">表示目前 <see cref="T:System.Numerics.BigInteger" /> 物件的值是否為 <see cref="P:System.Numerics.BigInteger.One" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-451">Indicates whether the value of the current <see cref="T:System.Numerics.BigInteger" /> object is <see cref="P:System.Numerics.BigInteger.One" />.</span></span></summary>
        <value><span data-ttu-id="e4975-452">如果 <see cref="T:System.Numerics.BigInteger" /> 物件的值為 <see cref="P:System.Numerics.BigInteger.One" />，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-452"><see langword="true" /> if the value of the <see cref="T:System.Numerics.BigInteger" /> object is <see cref="P:System.Numerics.BigInteger.One" />; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-453">這個屬性提供的效能明顯優於其他的比較，例如`thisBigInteger.Equals(BigInteger.One)`。</span><span class="sxs-lookup"><span data-stu-id="e4975-453">This property offers significantly better performance than other comparisons with one, such as `thisBigInteger.Equals(BigInteger.One)`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Numerics.BigInteger.One" />
      </Docs>
    </Member>
    <Member MemberName="IsPowerOfTwo">
      <MemberSignature Language="C#" Value="public bool IsPowerOfTwo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPowerOfTwo" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.BigInteger.IsPowerOfTwo" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPowerOfTwo As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPowerOfTwo { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsPowerOfTwo : bool" Usage="System.Numerics.BigInteger.IsPowerOfTwo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e4975-454">表示目前 <see cref="T:System.Numerics.BigInteger" /> 物件的值是否為二乘冪。</span><span class="sxs-lookup"><span data-stu-id="e4975-454">Indicates whether the value of the current <see cref="T:System.Numerics.BigInteger" /> object is a power of two.</span></span></summary>
        <value><span data-ttu-id="e4975-455">如果 <see cref="T:System.Numerics.BigInteger" /> 物件的值為二乘冪，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-455"><see langword="true" /> if the value of the <see cref="T:System.Numerics.BigInteger" /> object is a power of two; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-456">此屬性會決定是否<xref:System.Numerics.BigInteger>值已設定的單一非零位元。</span><span class="sxs-lookup"><span data-stu-id="e4975-456">This property determines whether a <xref:System.Numerics.BigInteger> value has a single non-zero bit set.</span></span> <span data-ttu-id="e4975-457">這表示，它會傳回`true`如果目前的值<xref:System.Numerics.BigInteger>物件為 1 (也就是 2<sup>0</sup>) 或任何大於 2 的乘冪。</span><span class="sxs-lookup"><span data-stu-id="e4975-457">This means that it returns `true` if the value of the current <xref:System.Numerics.BigInteger> object is 1 (that is, 2<sup>0</sup>) or any greater power of two.</span></span> <span data-ttu-id="e4975-458">它會傳回`false`如果目前的值<xref:System.Numerics.BigInteger>物件為 0。</span><span class="sxs-lookup"><span data-stu-id="e4975-458">It returns `false` if the value of the current <xref:System.Numerics.BigInteger> object is 0.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsZero">
      <MemberSignature Language="C#" Value="public bool IsZero { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsZero" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.BigInteger.IsZero" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsZero As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsZero { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsZero : bool" Usage="System.Numerics.BigInteger.IsZero" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e4975-459">表示目前 <see cref="T:System.Numerics.BigInteger" /> 物件的值是否為 <see cref="P:System.Numerics.BigInteger.Zero" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-459">Indicates whether the value of the current <see cref="T:System.Numerics.BigInteger" /> object is <see cref="P:System.Numerics.BigInteger.Zero" />.</span></span></summary>
        <value><span data-ttu-id="e4975-460">如果 <see cref="T:System.Numerics.BigInteger" /> 物件的值為 <see cref="P:System.Numerics.BigInteger.Zero" />，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-460"><see langword="true" /> if the value of the <see cref="T:System.Numerics.BigInteger" /> object is <see cref="P:System.Numerics.BigInteger.Zero" />; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-461">這個屬性會提供效能明顯優於`BigInteger.Equals(BigInteger.Zero)`。</span><span class="sxs-lookup"><span data-stu-id="e4975-461">This property offers significantly better performance than `BigInteger.Equals(BigInteger.Zero)`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Numerics.BigInteger.Zero" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Log">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e4975-462">傳回指定數字的對數。</span><span class="sxs-lookup"><span data-stu-id="e4975-462">Returns the logarithm of a specified number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Log">
      <MemberSignature Language="C#" Value="public static double Log (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Log(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Log(System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Log (value As BigInteger) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Log(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member Log : System.Numerics.BigInteger -&gt; double" Usage="System.Numerics.BigInteger.Log value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e4975-463">要找出其對數的數字。</span><span class="sxs-lookup"><span data-stu-id="e4975-463">The number whose logarithm is to be found.</span></span></param>
        <summary><span data-ttu-id="e4975-464">傳回指定數字的自然 (底數為 <see langword="e" />) 對數。</span><span class="sxs-lookup"><span data-stu-id="e4975-464">Returns the natural (base <see langword="e" />) logarithm of a specified number.</span></span></summary>
        <returns><span data-ttu-id="e4975-465"><paramref name="value" /> 的 (以 <see langword="e" /> 為底數) 自然對數，如＜備註＞一節中的表格所示。</span><span class="sxs-lookup"><span data-stu-id="e4975-465">The natural (base <see langword="e" />) logarithm of <paramref name="value" />, as shown in the table in the Remarks section.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-466">`value`參數指定為基底 10 的數字。</span><span class="sxs-lookup"><span data-stu-id="e4975-466">The `value` parameter is specified as a base 10 number.</span></span>  
  
 <span data-ttu-id="e4975-467">這個方法的值取決於的正負號的確切傳回`value`，如下表所示。</span><span class="sxs-lookup"><span data-stu-id="e4975-467">The precise return value of this method depends on the sign of `value`, as the following table shows.</span></span>  
  
|<span data-ttu-id="e4975-468">登入的`value`參數</span><span class="sxs-lookup"><span data-stu-id="e4975-468">Sign of `value` parameter</span></span>|<span data-ttu-id="e4975-469">傳回值</span><span class="sxs-lookup"><span data-stu-id="e4975-469">Return value</span></span>|  
|-------------------------------|------------------|  
|<span data-ttu-id="e4975-470">正</span><span class="sxs-lookup"><span data-stu-id="e4975-470">Positive</span></span>|<span data-ttu-id="e4975-471">自然對數`value`; 也就是 ln `value`，或 log e`value`。</span><span class="sxs-lookup"><span data-stu-id="e4975-471">The natural logarithm of `value`; that is, ln `value`, or log e`value`.</span></span>|  
|<span data-ttu-id="e4975-472">零</span><span class="sxs-lookup"><span data-stu-id="e4975-472">Zero</span></span>|<span data-ttu-id="e4975-473"><xref:System.Double.NegativeInfinity>.</span><span class="sxs-lookup"><span data-stu-id="e4975-473"><xref:System.Double.NegativeInfinity>.</span></span>|  
|<span data-ttu-id="e4975-474">負</span><span class="sxs-lookup"><span data-stu-id="e4975-474">Negative</span></span>|<span data-ttu-id="e4975-475"><xref:System.Double.NaN>.</span><span class="sxs-lookup"><span data-stu-id="e4975-475"><xref:System.Double.NaN>.</span></span>|  
  
 <span data-ttu-id="e4975-476">若要計算的基底 10 對數<xref:System.Numerics.BigInteger>值，請呼叫<xref:System.Numerics.BigInteger.Log10%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e4975-476">To calculate the base 10 logarithm of a <xref:System.Numerics.BigInteger> value, call the <xref:System.Numerics.BigInteger.Log10%2A> method.</span></span> <span data-ttu-id="e4975-477">若要計算在另一個基底中數字的對數，呼叫<xref:System.Numerics.BigInteger.Log%28System.Numerics.BigInteger%2CSystem.Double%29>方法。</span><span class="sxs-lookup"><span data-stu-id="e4975-477">To calculate the logarithm of a number in another base, call the <xref:System.Numerics.BigInteger.Log%28System.Numerics.BigInteger%2CSystem.Double%29> method.</span></span>  
  
 <span data-ttu-id="e4975-478">您可以找到數字的平方根，藉由呼叫<xref:System.Numerics.BigInteger.Log%2A>方法，連同<xref:System.Math.Exp%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="e4975-478">You can find the square root of a number by calling the <xref:System.Numerics.BigInteger.Log%2A> method along with the <xref:System.Math.Exp%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="e4975-479">請注意，結果是<xref:System.Double.PositiveInfinity?displayProperty=nameWithType>如果結果大於<xref:System.Double.MaxValue?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="e4975-479">Note that the result is <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> if the result is greater than <xref:System.Double.MaxValue?displayProperty=nameWithType>.</span></span> <span data-ttu-id="e4975-480">下列範例會計算陣列中每個項目的平方根<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="e4975-480">The following example calculates the square root of each element in an array of <xref:System.Numerics.BigInteger> values.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Log#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.biginteger.log/cs/log1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Log#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.biginteger.log/vb/log1.vb#1)]
  
 <span data-ttu-id="e4975-481">這個方法會對應至<xref:System.Math.Log%28System.Double%29?displayProperty=nameWithType>基本數值類型的方法。</span><span class="sxs-lookup"><span data-stu-id="e4975-481">This method corresponds to the <xref:System.Math.Log%28System.Double%29?displayProperty=nameWithType> method for the primitive numeric types.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e4975-482"><paramref name="value" /> 的自然對數超出 <see cref="T:System.Double" /> 資料型別範圍。</span><span class="sxs-lookup"><span data-stu-id="e4975-482">The natural log of <paramref name="value" /> is out of range of the <see cref="T:System.Double" /> data type.</span></span></exception>
        <altmember cref="M:System.Numerics.BigInteger.Log10(System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="Log">
      <MemberSignature Language="C#" Value="public static double Log (System.Numerics.BigInteger value, double baseValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Log(valuetype System.Numerics.BigInteger value, float64 baseValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Log(System.Numerics.BigInteger,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Log (value As BigInteger, baseValue As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Log(System::Numerics::BigInteger value, double baseValue);" />
      <MemberSignature Language="F#" Value="static member Log : System.Numerics.BigInteger * double -&gt; double" Usage="System.Numerics.BigInteger.Log (value, baseValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
        <Parameter Name="baseValue" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e4975-483">要找出其對數的數字。</span><span class="sxs-lookup"><span data-stu-id="e4975-483">A number whose logarithm is to be found.</span></span></param>
        <param name="baseValue"><span data-ttu-id="e4975-484">對數的底數。</span><span class="sxs-lookup"><span data-stu-id="e4975-484">The base of the logarithm.</span></span></param>
        <summary><span data-ttu-id="e4975-485">傳回指定底數中指定數字的對數。</span><span class="sxs-lookup"><span data-stu-id="e4975-485">Returns the logarithm of a specified number in a specified base.</span></span></summary>
        <returns><span data-ttu-id="e4975-486"><paramref name="baseValue" /> 的以 <paramref name="value" /> 為底數的對數，如＜備註＞一節中的表格所示。</span><span class="sxs-lookup"><span data-stu-id="e4975-486">The base <paramref name="baseValue" /> logarithm of <paramref name="value" />, as shown in the table in the Remarks section.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-487">`value`和`baseValue`參數會指定做為基底 10 的數字。</span><span class="sxs-lookup"><span data-stu-id="e4975-487">The `value` and `baseValue` parameters are specified as base 10 numbers.</span></span>  
  
 <span data-ttu-id="e4975-488">精確傳回方法的值而定的符號`value`正負號和值在`baseValue`，如下表所示。</span><span class="sxs-lookup"><span data-stu-id="e4975-488">The precise return value of the method depends on the sign of `value` and on the sign and value of `baseValue`, as the following table shows.</span></span>  
  
|<span data-ttu-id="e4975-489">`value` 參數</span><span class="sxs-lookup"><span data-stu-id="e4975-489">`value` parameter</span></span>|<span data-ttu-id="e4975-490">`baseValue` 參數</span><span class="sxs-lookup"><span data-stu-id="e4975-490">`baseValue` parameter</span></span>|<span data-ttu-id="e4975-491">傳回值</span><span class="sxs-lookup"><span data-stu-id="e4975-491">Return value</span></span>|  
|-----------------------|---------------------------|------------------|  
|<span data-ttu-id="e4975-492">`value` > 0</span><span class="sxs-lookup"><span data-stu-id="e4975-492">`value` > 0</span></span>|<span data-ttu-id="e4975-493">(0 < `baseValue` < 1)-(`baseValue` > 1)</span><span class="sxs-lookup"><span data-stu-id="e4975-493">(0 < `baseValue` < 1) -or-(`baseValue` > 1)</span></span>|<span data-ttu-id="e4975-494">logbaseValue (`value`)</span><span class="sxs-lookup"><span data-stu-id="e4975-494">logbaseValue(`value`)</span></span>|  
|<span data-ttu-id="e4975-495">`value` < 0</span><span class="sxs-lookup"><span data-stu-id="e4975-495">`value` < 0</span></span>|<span data-ttu-id="e4975-496">(任意值)</span><span class="sxs-lookup"><span data-stu-id="e4975-496">(any value)</span></span>|<xref:System.Double.NaN?displayProperty=nameWithType>|  
|<span data-ttu-id="e4975-497">(任意值)</span><span class="sxs-lookup"><span data-stu-id="e4975-497">(any value)</span></span>|<span data-ttu-id="e4975-498">`baseValue` < 0</span><span class="sxs-lookup"><span data-stu-id="e4975-498">`baseValue` < 0</span></span>|<xref:System.Double.NaN?displayProperty=nameWithType>|  
|<span data-ttu-id="e4975-499">`value` != 1</span><span class="sxs-lookup"><span data-stu-id="e4975-499">`value` != 1</span></span>|<span data-ttu-id="e4975-500">`baseValue` = 0</span><span class="sxs-lookup"><span data-stu-id="e4975-500">`baseValue` = 0</span></span>|<xref:System.Double.NaN?displayProperty=nameWithType>|  
|<span data-ttu-id="e4975-501">`value` != 1</span><span class="sxs-lookup"><span data-stu-id="e4975-501">`value` != 1</span></span>|`baseValue` = <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>|<xref:System.Double.NaN?displayProperty=nameWithType>|  
|<span data-ttu-id="e4975-502">(任意值)</span><span class="sxs-lookup"><span data-stu-id="e4975-502">(any value)</span></span>|`baseValue` = <xref:System.Double.NaN?displayProperty=nameWithType>|<xref:System.Double.NaN?displayProperty=nameWithType>|  
|<span data-ttu-id="e4975-503">(任意值)</span><span class="sxs-lookup"><span data-stu-id="e4975-503">(any value)</span></span>|<span data-ttu-id="e4975-504">`baseValue` = 1</span><span class="sxs-lookup"><span data-stu-id="e4975-504">`baseValue` = 1</span></span>|<xref:System.Double.NaN?displayProperty=nameWithType>|  
|<span data-ttu-id="e4975-505">`value` = 0</span><span class="sxs-lookup"><span data-stu-id="e4975-505">`value` = 0</span></span>|<span data-ttu-id="e4975-506">0 < `baseValue` < 1</span><span class="sxs-lookup"><span data-stu-id="e4975-506">0 < `baseValue` < 1</span></span>|<xref:System.Double.PositiveInfinity?displayProperty=nameWithType>|  
|<span data-ttu-id="e4975-507">`value` = 0</span><span class="sxs-lookup"><span data-stu-id="e4975-507">`value` = 0</span></span>|<span data-ttu-id="e4975-508">`baseValue` > 1</span><span class="sxs-lookup"><span data-stu-id="e4975-508">`baseValue` > 1</span></span>|<xref:System.Double.PositiveInfinity?displayProperty=nameWithType>|  
|<span data-ttu-id="e4975-509">`value` = 1</span><span class="sxs-lookup"><span data-stu-id="e4975-509">`value` = 1</span></span>|<span data-ttu-id="e4975-510">`baseValue` = 0</span><span class="sxs-lookup"><span data-stu-id="e4975-510">`baseValue` = 0</span></span>|<span data-ttu-id="e4975-511">0</span><span class="sxs-lookup"><span data-stu-id="e4975-511">0</span></span>|  
|<span data-ttu-id="e4975-512">`value` = 1</span><span class="sxs-lookup"><span data-stu-id="e4975-512">`value` = 1</span></span>|`baseValue` = <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>|<span data-ttu-id="e4975-513">0</span><span class="sxs-lookup"><span data-stu-id="e4975-513">0</span></span>|  
  
 <span data-ttu-id="e4975-514">若要計算的基底 10 對數<xref:System.Numerics.BigInteger>值，請呼叫<xref:System.Numerics.BigInteger.Log10%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e4975-514">To calculate the base 10 logarithm of a <xref:System.Numerics.BigInteger> value, call the <xref:System.Numerics.BigInteger.Log10%2A> method.</span></span> <span data-ttu-id="e4975-515">若要計算數字的自然對數，呼叫<xref:System.Numerics.BigInteger.Log%28System.Numerics.BigInteger%29>方法。</span><span class="sxs-lookup"><span data-stu-id="e4975-515">To calculate the natural logarithm of a number, call the <xref:System.Numerics.BigInteger.Log%28System.Numerics.BigInteger%29> method.</span></span>  
  
 <span data-ttu-id="e4975-516">這個方法會對應至<xref:System.Math.Log%2A?displayProperty=nameWithType>基本數值類型的方法。</span><span class="sxs-lookup"><span data-stu-id="e4975-516">This method corresponds to the <xref:System.Math.Log%2A?displayProperty=nameWithType> method for the primitive numeric types.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e4975-517"><paramref name="value" /> 的對數超出 <see cref="T:System.Double" /> 資料型別範圍。</span><span class="sxs-lookup"><span data-stu-id="e4975-517">The log of <paramref name="value" /> is out of range of the <see cref="T:System.Double" /> data type.</span></span></exception>
        <altmember cref="M:System.Numerics.BigInteger.Log10(System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="Log10">
      <MemberSignature Language="C#" Value="public static double Log10 (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Log10(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Log10(System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Log10 (value As BigInteger) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Log10(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member Log10 : System.Numerics.BigInteger -&gt; double" Usage="System.Numerics.BigInteger.Log10 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e4975-518">要找出其對數的數字。</span><span class="sxs-lookup"><span data-stu-id="e4975-518">A number whose logarithm is to be found.</span></span></param>
        <summary><span data-ttu-id="e4975-519">傳回指定數字的以 10 為底數的對數。</span><span class="sxs-lookup"><span data-stu-id="e4975-519">Returns the base 10 logarithm of a specified number.</span></span></summary>
        <returns><span data-ttu-id="e4975-520"><paramref name="value" /> 的以 10 為底數的對數，如＜備註＞一節中的表格所示。</span><span class="sxs-lookup"><span data-stu-id="e4975-520">The base 10 logarithm of <paramref name="value" />, as shown in the table in the Remarks section.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-521">`value`參數指定為基底 10 的數字。</span><span class="sxs-lookup"><span data-stu-id="e4975-521">The `value` parameter is specified as a base 10 number.</span></span>  
  
 <span data-ttu-id="e4975-522">方法的值而定的正負號的確切傳回`value`，如下表所示。</span><span class="sxs-lookup"><span data-stu-id="e4975-522">The precise return value of the method depends on the sign of `value`, as the following table shows.</span></span>  
  
|<span data-ttu-id="e4975-523">Value 參數的符號</span><span class="sxs-lookup"><span data-stu-id="e4975-523">Sign of value parameter</span></span>|<span data-ttu-id="e4975-524">傳回值</span><span class="sxs-lookup"><span data-stu-id="e4975-524">Return value</span></span>|  
|-----------------------------|------------------|  
|<span data-ttu-id="e4975-525">正</span><span class="sxs-lookup"><span data-stu-id="e4975-525">Positive</span></span>|<span data-ttu-id="e4975-526">基底 10 的對數`value`; 也就是說，log10`value`。</span><span class="sxs-lookup"><span data-stu-id="e4975-526">The base 10 log of `value`; that is, log10`value`.</span></span>|  
|<span data-ttu-id="e4975-527">零</span><span class="sxs-lookup"><span data-stu-id="e4975-527">Zero</span></span>|<span data-ttu-id="e4975-528"><xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="e4975-528"><xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span></span>|  
|<span data-ttu-id="e4975-529">負</span><span class="sxs-lookup"><span data-stu-id="e4975-529">Negative</span></span>|<span data-ttu-id="e4975-530"><xref:System.Double.NaN?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="e4975-530"><xref:System.Double.NaN?displayProperty=nameWithType>.</span></span>|  
  
 <span data-ttu-id="e4975-531">若要計算自然對數<xref:System.Numerics.BigInteger>值，請呼叫<xref:System.Numerics.BigInteger.Log%28System.Numerics.BigInteger%29?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="e4975-531">To calculate the natural logarithm of a <xref:System.Numerics.BigInteger> value, call the <xref:System.Numerics.BigInteger.Log%28System.Numerics.BigInteger%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="e4975-532">若要計算在另一個基底中數字的對數，呼叫<xref:System.Numerics.BigInteger.Log%28System.Numerics.BigInteger%2CSystem.Double%29?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="e4975-532">To calculate the logarithm of a number in another base, call the <xref:System.Numerics.BigInteger.Log%28System.Numerics.BigInteger%2CSystem.Double%29?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="e4975-533">這個方法會對應至<xref:System.Math.Log10%2A?displayProperty=nameWithType>基本數值類型的方法。</span><span class="sxs-lookup"><span data-stu-id="e4975-533">This method corresponds to the <xref:System.Math.Log10%2A?displayProperty=nameWithType> method for the primitive numeric types.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e4975-534"><paramref name="value" /> 的底數 10 對數超出 <see cref="T:System.Double" /> 資料型別範圍。</span><span class="sxs-lookup"><span data-stu-id="e4975-534">The base 10 log of <paramref name="value" /> is out of range of the <see cref="T:System.Double" /> data type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Max (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Max(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Max(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Max (left As BigInteger, right As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger Max(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member Max : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.Max (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="e4975-535">要比較的第一個值。</span><span class="sxs-lookup"><span data-stu-id="e4975-535">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="e4975-536">要比較的第二個值。</span><span class="sxs-lookup"><span data-stu-id="e4975-536">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="e4975-537">傳回兩個 <see cref="T:System.Numerics.BigInteger" /> 值的較大值。</span><span class="sxs-lookup"><span data-stu-id="e4975-537">Returns the larger of two <see cref="T:System.Numerics.BigInteger" /> values.</span></span></summary>
        <returns><span data-ttu-id="e4975-538"><paramref name="left" /> 或 <paramref name="right" /> 參數，擇一較大者。</span><span class="sxs-lookup"><span data-stu-id="e4975-538">The <paramref name="left" /> or <paramref name="right" /> parameter, whichever is larger.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-539">這個方法會對應至<xref:System.Math.Max%2A?displayProperty=nameWithType>基本數值類型的方法。</span><span class="sxs-lookup"><span data-stu-id="e4975-539">This method corresponds to the <xref:System.Math.Max%2A?displayProperty=nameWithType> method for primitive numeric types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e4975-540">下列範例會使用<xref:System.Numerics.BigInteger.Max%2A>方法來選取陣列中的最大數字<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="e4975-540">The following example uses the <xref:System.Numerics.BigInteger.Max%2A> method to select the largest number in an array of <xref:System.Numerics.BigInteger> values.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Max#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Max/cs/Max1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Max#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Max/vb/Max1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.Min(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Min (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Min(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Min(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Min (left As BigInteger, right As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger Min(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member Min : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.Min (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="e4975-541">要比較的第一個值。</span><span class="sxs-lookup"><span data-stu-id="e4975-541">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="e4975-542">要比較的第二個值。</span><span class="sxs-lookup"><span data-stu-id="e4975-542">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="e4975-543">傳回兩個 <see cref="T:System.Numerics.BigInteger" /> 值的較小值。</span><span class="sxs-lookup"><span data-stu-id="e4975-543">Returns the smaller of two <see cref="T:System.Numerics.BigInteger" /> values.</span></span></summary>
        <returns><span data-ttu-id="e4975-544"><paramref name="left" /> 或 <paramref name="right" /> 參數，擇一較小者。</span><span class="sxs-lookup"><span data-stu-id="e4975-544">The <paramref name="left" /> or <paramref name="right" /> parameter, whichever is smaller.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-545">這個方法會對應至<xref:System.Math.Min%2A?displayProperty=nameWithType>基本數值類型的方法。</span><span class="sxs-lookup"><span data-stu-id="e4975-545">This method corresponds to the <xref:System.Math.Min%2A?displayProperty=nameWithType> method for primitive numeric types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e4975-546">下列範例會使用<xref:System.Numerics.BigInteger.Min%2A>方法來選取陣列中的最小的數字<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="e4975-546">The following example uses the <xref:System.Numerics.BigInteger.Min%2A> method to select the smallest number in an array of <xref:System.Numerics.BigInteger> values.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Min#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Min/cs/Min1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Min#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Min/vb/Min1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.Max(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="MinusOne">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger MinusOne { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Numerics.BigInteger MinusOne" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.BigInteger.MinusOne" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MinusOne As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Numerics::BigInteger MinusOne { System::Numerics::BigInteger get(); };" />
      <MemberSignature Language="F#" Value="member this.MinusOne : System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.MinusOne" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e4975-547">取得表示數字負一 (-1) 的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-547">Gets a value that represents the number negative one (-1).</span></span></summary>
        <value><span data-ttu-id="e4975-548">值為負一 (-1) 的整數。</span><span class="sxs-lookup"><span data-stu-id="e4975-548">An integer whose value is negative one (-1).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-549"><xref:System.Numerics.BigInteger.MinusOne%2A>屬性用來比較<xref:System.Numerics.BigInteger>值為-1，或指派-1 表示<xref:System.Numerics.BigInteger>物件。</span><span class="sxs-lookup"><span data-stu-id="e4975-549">The <xref:System.Numerics.BigInteger.MinusOne%2A> property is used to compare a <xref:System.Numerics.BigInteger> value to -1 or to assign -1 to a <xref:System.Numerics.BigInteger> object.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Numerics.BigInteger.One" />
        <altmember cref="P:System.Numerics.BigInteger.IsOne" />
      </Docs>
    </Member>
    <Member MemberName="ModPow">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger ModPow (System.Numerics.BigInteger value, System.Numerics.BigInteger exponent, System.Numerics.BigInteger modulus);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger ModPow(valuetype System.Numerics.BigInteger value, valuetype System.Numerics.BigInteger exponent, valuetype System.Numerics.BigInteger modulus) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.ModPow(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ModPow (value As BigInteger, exponent As BigInteger, modulus As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger ModPow(System::Numerics::BigInteger value, System::Numerics::BigInteger exponent, System::Numerics::BigInteger modulus);" />
      <MemberSignature Language="F#" Value="static member ModPow : System.Numerics.BigInteger * System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.ModPow (value, exponent, modulus)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
        <Parameter Name="exponent" Type="System.Numerics.BigInteger" />
        <Parameter Name="modulus" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e4975-550">具有乘冪數 <paramref name="exponent" /> 的數字。</span><span class="sxs-lookup"><span data-stu-id="e4975-550">The number to raise to the <paramref name="exponent" /> power.</span></span></param>
        <param name="exponent"><span data-ttu-id="e4975-551"><paramref name="value" /> 的乘冪指數。</span><span class="sxs-lookup"><span data-stu-id="e4975-551">The exponent to raise <paramref name="value" /> by.</span></span></param>
        <param name="modulus"><span data-ttu-id="e4975-552">要除以具有乘冪數 <paramref name="value" /> 之 <paramref name="exponent" /> 的數字。</span><span class="sxs-lookup"><span data-stu-id="e4975-552">The number by which to divide <paramref name="value" /> raised to the <paramref name="exponent" /> power.</span></span></param>
        <summary><span data-ttu-id="e4975-553">一個數目自乘至另一個數目的乘冪後，執行模數除法。</span><span class="sxs-lookup"><span data-stu-id="e4975-553">Performs modulus division on a number raised to the power of another number.</span></span></summary>
        <returns><span data-ttu-id="e4975-554"><paramref name="value" /><sup>指數</sup> 除以 <paramref name="modulus" /> 後的餘數。</span><span class="sxs-lookup"><span data-stu-id="e4975-554">The remainder after dividing <paramref name="value" /><sup>exponent</sup> by <paramref name="modulus" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-555"><xref:System.Numerics.BigInteger.ModPow%2A>方法會評估下列運算式：</span><span class="sxs-lookup"><span data-stu-id="e4975-555">The <xref:System.Numerics.BigInteger.ModPow%2A> method evaluates the following expression:</span></span>  
  
 <span data-ttu-id="e4975-556">(baseValue ^ 指數)Mod 的模數</span><span class="sxs-lookup"><span data-stu-id="e4975-556">(baseValue ^ exponent) Mod modulus</span></span>  
  
 <span data-ttu-id="e4975-557">若要執行上的乘冪<xref:System.Numerics.BigInteger>值而模數除法不使用<xref:System.Numerics.BigInteger.Pow%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e4975-557">To perform exponentiation on <xref:System.Numerics.BigInteger> values without modulus division, use the <xref:System.Numerics.BigInteger.Pow%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e4975-558">下列範例提供簡單說明呼叫<xref:System.Numerics.BigInteger.ModPow%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e4975-558">The following example provides a simple illustration of calling the <xref:System.Numerics.BigInteger.ModPow%2A> method.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ModPow#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ModPow/cs/ModPow1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.ModPow#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ModPow/vb/ModPow1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.DivideByZeroException"><span data-ttu-id="e4975-559"><paramref name="modulus" /> 為零。</span><span class="sxs-lookup"><span data-stu-id="e4975-559"><paramref name="modulus" /> is zero.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e4975-560"><paramref name="exponent" /> 為負。</span><span class="sxs-lookup"><span data-stu-id="e4975-560"><paramref name="exponent" /> is negative.</span></span></exception>
        <altmember cref="M:System.Numerics.BigInteger.Pow(System.Numerics.BigInteger,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Multiply (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Multiply(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Multiply (left As BigInteger, right As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger Multiply(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member Multiply : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.Multiply (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="e4975-561">要相乘的第一個數字。</span><span class="sxs-lookup"><span data-stu-id="e4975-561">The first number to multiply.</span></span></param>
        <param name="right"><span data-ttu-id="e4975-562">要相乘的第二個數字。</span><span class="sxs-lookup"><span data-stu-id="e4975-562">The second number to multiply.</span></span></param>
        <summary><span data-ttu-id="e4975-563">傳回兩個 <see cref="T:System.Numerics.BigInteger" /> 值的乘積。</span><span class="sxs-lookup"><span data-stu-id="e4975-563">Returns the product of two <see cref="T:System.Numerics.BigInteger" /> values.</span></span></summary>
        <returns><span data-ttu-id="e4975-564"><paramref name="left" /> 和 <paramref name="right" /> 參數的乘積。</span><span class="sxs-lookup"><span data-stu-id="e4975-564">The product of the <paramref name="left" /> and <paramref name="right" /> parameters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-565"><xref:System.Numerics.BigInteger.Multiply%2A>方法的實作不支援運算子多載的語言。</span><span class="sxs-lookup"><span data-stu-id="e4975-565">The <xref:System.Numerics.BigInteger.Multiply%2A> method is implemented for languages that do not support operator overloading.</span></span> <span data-ttu-id="e4975-566">它的行為等同於使用乘法運算子的乘法。</span><span class="sxs-lookup"><span data-stu-id="e4975-566">Its behavior is identical to multiplication using the multiplication operator.</span></span> <span data-ttu-id="e4975-567">颾魤 ㄛ<xref:System.Numerics.BigInteger.Multiply%2A>具現化時，方法是乘法運算子的有用替代<xref:System.Numerics.BigInteger>變數指派給產品所產生的乘法，如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="e4975-567">In addition, the <xref:System.Numerics.BigInteger.Multiply%2A> method is a useful substitute for the multiplication operator when instantiating a <xref:System.Numerics.BigInteger> variable by assigning it a product that results from multiplication, as shown in the following example.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.OperationMethods#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/cs/Multiply1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.OperationMethods#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/vb/Multiply1.vb#1)]  
  
 <span data-ttu-id="e4975-568">如果有必要，這個方法會自動執行的其他整數類資料類型的隱含轉換<xref:System.Numerics.BigInteger>物件。</span><span class="sxs-lookup"><span data-stu-id="e4975-568">If necessary, this method automatically performs implicit conversion of other integral types to <xref:System.Numerics.BigInteger> objects.</span></span> <span data-ttu-id="e4975-569">在下一步 區段中，此範例所示所在<xref:System.Numerics.BigInteger.Multiply%2A>方法會傳遞兩個<xref:System.Int64>值。</span><span class="sxs-lookup"><span data-stu-id="e4975-569">This is illustrated in the example in the next section, where the <xref:System.Numerics.BigInteger.Multiply%2A> method is passed two <xref:System.Int64> values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e4975-570">下列範例會嘗試執行乘法與兩個長整數。</span><span class="sxs-lookup"><span data-stu-id="e4975-570">The following example tries to perform multiplication with two long integers.</span></span> <span data-ttu-id="e4975-571">結果超出範圍的長整數，因為<xref:System.OverflowException>就會擲回，而<xref:System.Numerics.BigInteger.Multiply%2A>呼叫方法來處理乘法運算。</span><span class="sxs-lookup"><span data-stu-id="e4975-571">Because the result exceeds the range of a long integer, an <xref:System.OverflowException> is thrown, and the <xref:System.Numerics.BigInteger.Multiply%2A> method is called to handle the multiplication.</span></span> <span data-ttu-id="e4975-572">請注意，C# 需要使用任何一種`checked`關鍵字 （如此範例所示） 或`/checked+`編譯器選項，請確定在數值溢位上擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="e4975-572">Note that C# requires that you use either the `checked` keyword (as in this example) or the `/checked+` compiler option to make sure an exception is thrown on a numeric overflow.</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#7)]
 [!code-vb[System.Numeric.BigInteger.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.op_Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="Negate">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Negate (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Negate(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Negate(System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Negate (value As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger Negate(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member Negate : System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.Negate value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e4975-573">要變換正負號的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-573">The value to negate.</span></span></param>
        <summary><span data-ttu-id="e4975-574">將指定的 <see cref="T:System.Numerics.BigInteger" /> 值變換正負號。</span><span class="sxs-lookup"><span data-stu-id="e4975-574">Negates a specified <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="e4975-575"><paramref name="value" /> 參數乘以負一 (-1) 的結果。</span><span class="sxs-lookup"><span data-stu-id="e4975-575">The result of the <paramref name="value" /> parameter multiplied by negative one (-1).</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-576">否定取得數字的加法反元素。</span><span class="sxs-lookup"><span data-stu-id="e4975-576">Negation obtains the additive inverse of a number.</span></span> <span data-ttu-id="e4975-577">數字的加法反元素為它新增至原始的數字時，會產生值為零的數字。</span><span class="sxs-lookup"><span data-stu-id="e4975-577">The additive inverse of a number is a number that produces a value of zero when it is added to the original number.</span></span>  
  
 <span data-ttu-id="e4975-578"><xref:System.Numerics.BigInteger.Negate%2A>方法的實作不支援自訂運算子的語言。</span><span class="sxs-lookup"><span data-stu-id="e4975-578">The <xref:System.Numerics.BigInteger.Negate%2A> method is implemented for languages that do not support custom operators.</span></span> <span data-ttu-id="e4975-579">它的行為等同於使用一元負運算子的否定運算。</span><span class="sxs-lookup"><span data-stu-id="e4975-579">Its behavior is identical to negation using the unary negation operator.</span></span> <span data-ttu-id="e4975-580">颾魤 ㄛ<xref:System.Numerics.BigInteger.Negate%2A>具現化時，方法是負運算子的有用替代<xref:System.Numerics.BigInteger>變數，如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="e4975-580">In addition, the <xref:System.Numerics.BigInteger.Negate%2A> method is a useful substitute for the negation operator when instantiating a <xref:System.Numerics.BigInteger> variable, as shown in the following example.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.OperationMethods#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/cs/Multiply1.cs#4)]
 [!code-vb[System.Numerics.BigInteger.OperationMethods#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/vb/Multiply1.vb#4)]  
  
   
  
## Examples  
 <span data-ttu-id="e4975-581">下列範例說明要變換正負號的值的三種方式<xref:System.Numerics.BigInteger>物件。</span><span class="sxs-lookup"><span data-stu-id="e4975-581">The following example illustrates three ways to negate the value of a <xref:System.Numerics.BigInteger> object.</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#16)]
 [!code-vb[System.Numeric.BigInteger.Class#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#16)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.op_UnaryNegation(System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="One">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger One { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Numerics.BigInteger One" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.BigInteger.One" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property One As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Numerics::BigInteger One { System::Numerics::BigInteger get(); };" />
      <MemberSignature Language="F#" Value="member this.One : System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.One" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e4975-582">取得表示數字一 (1) 的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-582">Gets a value that represents the number one (1).</span></span></summary>
        <value><span data-ttu-id="e4975-583">值為一 (1) 的物件。</span><span class="sxs-lookup"><span data-stu-id="e4975-583">An object whose value is one (1).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-584"><xref:System.Numerics.BigInteger.One%2A>屬性通常用來比較<xref:System.Numerics.BigInteger>值為 1，或指派 1 到<xref:System.Numerics.BigInteger>物件。</span><span class="sxs-lookup"><span data-stu-id="e4975-584">The <xref:System.Numerics.BigInteger.One%2A> property is usually used to compare a <xref:System.Numerics.BigInteger> value to 1 or to assign 1 to a <xref:System.Numerics.BigInteger> object.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Numerics.BigInteger.IsOne" />
        <altmember cref="P:System.Numerics.BigInteger.MinusOne" />
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator + (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Addition(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Addition(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (left As BigInteger, right As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator +(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( + ) : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="left + right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="e4975-585">要相加的第一個值。</span><span class="sxs-lookup"><span data-stu-id="e4975-585">The first value to add.</span></span></param>
        <param name="right"><span data-ttu-id="e4975-586">要相加的第二個值。</span><span class="sxs-lookup"><span data-stu-id="e4975-586">The second value to add.</span></span></param>
        <summary><span data-ttu-id="e4975-587">兩個指定之 <see cref="T:System.Numerics.BigInteger" /> 物件的值相加。</span><span class="sxs-lookup"><span data-stu-id="e4975-587">Adds the values of two specified <see cref="T:System.Numerics.BigInteger" /> objects.</span></span></summary>
        <returns><span data-ttu-id="e4975-588"><paramref name="left" /> 和 <paramref name="right" /> 的總和。</span><span class="sxs-lookup"><span data-stu-id="e4975-588">The sum of <paramref name="left" /> and <paramref name="right" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-589"><xref:System.Numerics.BigInteger.op_Addition%2A>方法來定義加法運算，如<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="e4975-589">The <xref:System.Numerics.BigInteger.op_Addition%2A> method defines the addition operation for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="e4975-590">它可讓程式碼，如下所示：</span><span class="sxs-lookup"><span data-stu-id="e4975-590">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#12)]
 [!code-vb[System.Numeric.BigInteger.Class#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#12)]  
  
 <span data-ttu-id="e4975-591">不支援自訂運算子的語言可以呼叫<xref:System.Numerics.BigInteger.Add%2A>方法改為。</span><span class="sxs-lookup"><span data-stu-id="e4975-591">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Add%2A> method instead.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.Add(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="op_BitwiseAnd">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator &amp; (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_BitwiseAnd(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_BitwiseAnd(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator And (left As BigInteger, right As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator &amp;(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( &amp;&amp;&amp; ) : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="left &amp;&amp;&amp; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="e4975-592">第一個值。</span><span class="sxs-lookup"><span data-stu-id="e4975-592">The first value.</span></span></param>
        <param name="right"><span data-ttu-id="e4975-593">第二個值。</span><span class="sxs-lookup"><span data-stu-id="e4975-593">The second value.</span></span></param>
        <summary><span data-ttu-id="e4975-594">對兩個 <see cref="T:System.Numerics.BigInteger" /> 值執行位元 <see langword="And" /> 運算。</span><span class="sxs-lookup"><span data-stu-id="e4975-594">Performs a bitwise <see langword="And" /> operation on two <see cref="T:System.Numerics.BigInteger" /> values.</span></span></summary>
        <returns><span data-ttu-id="e4975-595">位元 <see langword="And" /> 運算的結果。</span><span class="sxs-lookup"><span data-stu-id="e4975-595">The result of the bitwise <see langword="And" /> operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-596"><xref:System.Numerics.BigInteger.op_BitwiseAnd%2A>方法定義的位元`And`作業<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="e4975-596">The <xref:System.Numerics.BigInteger.op_BitwiseAnd%2A> method defines the bitwise `And` operation for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="e4975-597">位元`And`作業會設定結果位元只有當對應的位元`left`和`right`也設定下, 表所示。</span><span class="sxs-lookup"><span data-stu-id="e4975-597">The bitwise `And` operation sets a result bit only if the corresponding bits in `left` and `right` are also set, as shown in the following table.</span></span>  
  
|<span data-ttu-id="e4975-598">位元 `left`</span><span class="sxs-lookup"><span data-stu-id="e4975-598">Bit in `left`</span></span>|<span data-ttu-id="e4975-599">位元 `right`</span><span class="sxs-lookup"><span data-stu-id="e4975-599">Bit in `right`</span></span>|<span data-ttu-id="e4975-600">在結果中的位元</span><span class="sxs-lookup"><span data-stu-id="e4975-600">Bit in result</span></span>|  
|-------------------|--------------------|-------------------|  
|<span data-ttu-id="e4975-601">0</span><span class="sxs-lookup"><span data-stu-id="e4975-601">0</span></span>|<span data-ttu-id="e4975-602">0</span><span class="sxs-lookup"><span data-stu-id="e4975-602">0</span></span>|<span data-ttu-id="e4975-603">0</span><span class="sxs-lookup"><span data-stu-id="e4975-603">0</span></span>|  
|<span data-ttu-id="e4975-604">1</span><span class="sxs-lookup"><span data-stu-id="e4975-604">1</span></span>|<span data-ttu-id="e4975-605">0</span><span class="sxs-lookup"><span data-stu-id="e4975-605">0</span></span>|<span data-ttu-id="e4975-606">0</span><span class="sxs-lookup"><span data-stu-id="e4975-606">0</span></span>|  
|<span data-ttu-id="e4975-607">1</span><span class="sxs-lookup"><span data-stu-id="e4975-607">1</span></span>|<span data-ttu-id="e4975-608">1</span><span class="sxs-lookup"><span data-stu-id="e4975-608">1</span></span>|<span data-ttu-id="e4975-609">1</span><span class="sxs-lookup"><span data-stu-id="e4975-609">1</span></span>|  
|<span data-ttu-id="e4975-610">0</span><span class="sxs-lookup"><span data-stu-id="e4975-610">0</span></span>|<span data-ttu-id="e4975-611">1</span><span class="sxs-lookup"><span data-stu-id="e4975-611">1</span></span>|<span data-ttu-id="e4975-612">0</span><span class="sxs-lookup"><span data-stu-id="e4975-612">0</span></span>|  
  
 <span data-ttu-id="e4975-613"><xref:System.Numerics.BigInteger.op_BitwiseAnd%2A>方法可讓程式碼，如下所示：</span><span class="sxs-lookup"><span data-stu-id="e4975-613">The <xref:System.Numerics.BigInteger.op_BitwiseAnd%2A> method enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Operators#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#1)]  
  
 <span data-ttu-id="e4975-614"><xref:System.Numerics.BigInteger.op_BitwiseAnd%2A>方法會執行位元`And`對兩個作業<xref:System.Numerics.BigInteger>值如同它們是在二補數具有表示虛擬的正負號擴充。</span><span class="sxs-lookup"><span data-stu-id="e4975-614">The <xref:System.Numerics.BigInteger.op_BitwiseAnd%2A> method performs the bitwise `And` operation on two <xref:System.Numerics.BigInteger> values as if they were both in two's complement representation with virtual sign extension.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_BitwiseOr">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator | (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_BitwiseOr(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_BitwiseOr(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator Or (left As BigInteger, right As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator |(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( ||| ) : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="left ||| right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="e4975-615">第一個值。</span><span class="sxs-lookup"><span data-stu-id="e4975-615">The first value.</span></span></param>
        <param name="right"><span data-ttu-id="e4975-616">第二個值。</span><span class="sxs-lookup"><span data-stu-id="e4975-616">The second value.</span></span></param>
        <summary><span data-ttu-id="e4975-617">對兩個 <see cref="T:System.Numerics.BigInteger" /> 值執行位元 <see langword="Or" /> 運算。</span><span class="sxs-lookup"><span data-stu-id="e4975-617">Performs a bitwise <see langword="Or" /> operation on two <see cref="T:System.Numerics.BigInteger" /> values.</span></span></summary>
        <returns><span data-ttu-id="e4975-618">位元 <see langword="Or" /> 運算的結果。</span><span class="sxs-lookup"><span data-stu-id="e4975-618">The result of the bitwise <see langword="Or" /> operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-619"><xref:System.Numerics.BigInteger.op_BitwiseOr%2A>方法定義的位元`Or`作業<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="e4975-619">The <xref:System.Numerics.BigInteger.op_BitwiseOr%2A> method defines the bitwise `Or` operation for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="e4975-620">位元`Or`作業會設定結果位元只有當一個或兩個對應位元`left`和`right`設定下, 表所示。</span><span class="sxs-lookup"><span data-stu-id="e4975-620">The bitwise `Or` operation sets a result bit only if either or both of the corresponding bits in `left` and `right` are set, as shown in the following table.</span></span>  
  
|<span data-ttu-id="e4975-621">位元 `left`</span><span class="sxs-lookup"><span data-stu-id="e4975-621">Bit in `left`</span></span>|<span data-ttu-id="e4975-622">位元 `right`</span><span class="sxs-lookup"><span data-stu-id="e4975-622">Bit in `right`</span></span>|<span data-ttu-id="e4975-623">在結果中的位元</span><span class="sxs-lookup"><span data-stu-id="e4975-623">Bit in result</span></span>|  
|-------------------|--------------------|-------------------|  
|<span data-ttu-id="e4975-624">0</span><span class="sxs-lookup"><span data-stu-id="e4975-624">0</span></span>|<span data-ttu-id="e4975-625">0</span><span class="sxs-lookup"><span data-stu-id="e4975-625">0</span></span>|<span data-ttu-id="e4975-626">0</span><span class="sxs-lookup"><span data-stu-id="e4975-626">0</span></span>|  
|<span data-ttu-id="e4975-627">1</span><span class="sxs-lookup"><span data-stu-id="e4975-627">1</span></span>|<span data-ttu-id="e4975-628">0</span><span class="sxs-lookup"><span data-stu-id="e4975-628">0</span></span>|<span data-ttu-id="e4975-629">1</span><span class="sxs-lookup"><span data-stu-id="e4975-629">1</span></span>|  
|<span data-ttu-id="e4975-630">1</span><span class="sxs-lookup"><span data-stu-id="e4975-630">1</span></span>|<span data-ttu-id="e4975-631">1</span><span class="sxs-lookup"><span data-stu-id="e4975-631">1</span></span>|<span data-ttu-id="e4975-632">1</span><span class="sxs-lookup"><span data-stu-id="e4975-632">1</span></span>|  
|<span data-ttu-id="e4975-633">0</span><span class="sxs-lookup"><span data-stu-id="e4975-633">0</span></span>|<span data-ttu-id="e4975-634">1</span><span class="sxs-lookup"><span data-stu-id="e4975-634">1</span></span>|<span data-ttu-id="e4975-635">1</span><span class="sxs-lookup"><span data-stu-id="e4975-635">1</span></span>|  
  
 <span data-ttu-id="e4975-636"><xref:System.Numerics.BigInteger.op_BitwiseOr%2A>方法可讓程式碼，如下所示：</span><span class="sxs-lookup"><span data-stu-id="e4975-636">The <xref:System.Numerics.BigInteger.op_BitwiseOr%2A> method enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#2)]
 [!code-vb[System.Numerics.BigInteger.Operators#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#2)]  
  
 <span data-ttu-id="e4975-637"><xref:System.Numerics.BigInteger.op_BitwiseOr%2A>方法會執行位元`Or`對兩個作業<xref:System.Numerics.BigInteger>值如同它們是在二補數具有表示虛擬的正負號擴充。</span><span class="sxs-lookup"><span data-stu-id="e4975-637">The <xref:System.Numerics.BigInteger.op_BitwiseOr%2A> method performs the bitwise `Or` operation on two <xref:System.Numerics.BigInteger> values as if they were both in two's complement representation with virtual sign extension.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Decrement">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator -- (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Decrement(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Decrement(System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared op_Decrement (value As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator --(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member op_Decrement : System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.op_Decrement value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e4975-638">要遞減的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-638">The value to decrement.</span></span></param>
        <summary><span data-ttu-id="e4975-639"><see cref="T:System.Numerics.BigInteger" /> 值遞減 1。</span><span class="sxs-lookup"><span data-stu-id="e4975-639">Decrements a <see cref="T:System.Numerics.BigInteger" /> value by 1.</span></span></summary>
        <returns><span data-ttu-id="e4975-640"><paramref name="value" /> 參數遞減 1 後的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-640">The value of the <paramref name="value" /> parameter decremented by 1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-641"><xref:System.Numerics.BigInteger.op_Decrement%2A>方法定義的遞減運算<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="e4975-641">The <xref:System.Numerics.BigInteger.op_Decrement%2A> method defines the decrement operation for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="e4975-642">它可讓程式碼，如下所示：</span><span class="sxs-lookup"><span data-stu-id="e4975-642">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#17)]  
  
 <span data-ttu-id="e4975-643">不支援自訂運算子的語言可以呼叫<xref:System.Numerics.BigInteger.Subtract%2A>方法改為。</span><span class="sxs-lookup"><span data-stu-id="e4975-643">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Subtract%2A> method instead.</span></span> <span data-ttu-id="e4975-644">例如: </span><span class="sxs-lookup"><span data-stu-id="e4975-644">For example:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#3)]
 [!code-vb[System.Numerics.BigInteger.Operators#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#3)]  
  
 <span data-ttu-id="e4975-645">因為<xref:System.Numerics.BigInteger>物件是不可變的<xref:System.Numerics.BigInteger.op_Decrement%2A>運算子會建立新<xref:System.Numerics.BigInteger>物件，其值為一個小於<xref:System.Numerics.BigInteger>所表示的物件`value`。</span><span class="sxs-lookup"><span data-stu-id="e4975-645">Because <xref:System.Numerics.BigInteger> objects are immutable, the <xref:System.Numerics.BigInteger.op_Decrement%2A> operator creates a new <xref:System.Numerics.BigInteger> object whose value is one less than the <xref:System.Numerics.BigInteger> object represented by `value`.</span></span> <span data-ttu-id="e4975-646">這表示，重複呼叫<xref:System.Numerics.BigInteger.op_Decrement%2A>可能很昂貴。</span><span class="sxs-lookup"><span data-stu-id="e4975-646">This means that repeated calls to <xref:System.Numerics.BigInteger.op_Decrement%2A> may be expensive.</span></span>  
  
 <span data-ttu-id="e4975-647">這個運算子的對等方法是<xref:System.Numerics.BigInteger.Subtract%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="e4975-647">The equivalent method for this operator is <xref:System.Numerics.BigInteger.Subtract%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.op_Increment(System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="op_Division">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator / (System.Numerics.BigInteger dividend, System.Numerics.BigInteger divisor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Division(valuetype System.Numerics.BigInteger dividend, valuetype System.Numerics.BigInteger divisor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Division(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator / (dividend As BigInteger, divisor As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator /(System::Numerics::BigInteger dividend, System::Numerics::BigInteger divisor);" />
      <MemberSignature Language="F#" Value="static member ( / ) : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="dividend / divisor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dividend" Type="System.Numerics.BigInteger" />
        <Parameter Name="divisor" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="dividend"><span data-ttu-id="e4975-648">做為被除數的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-648">The value to be divided.</span></span></param>
        <param name="divisor"><span data-ttu-id="e4975-649">做為除數的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-649">The value to divide by.</span></span></param>
        <summary><span data-ttu-id="e4975-650">使用整數除法，將指定的 <see cref="T:System.Numerics.BigInteger" /> 值除以另一個指定的 <see cref="T:System.Numerics.BigInteger" /> 值。</span><span class="sxs-lookup"><span data-stu-id="e4975-650">Divides a specified <see cref="T:System.Numerics.BigInteger" /> value by another specified <see cref="T:System.Numerics.BigInteger" /> value by using integer division.</span></span></summary>
        <returns><span data-ttu-id="e4975-651">相除的整數結果。</span><span class="sxs-lookup"><span data-stu-id="e4975-651">The integral result of the division.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-652"><xref:System.Numerics.BigInteger.op_Division%2A>方法定義的除法運算<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="e4975-652">The <xref:System.Numerics.BigInteger.op_Division%2A> method defines the division operation for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="e4975-653">它可讓程式碼，如下所示：</span><span class="sxs-lookup"><span data-stu-id="e4975-653">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#13)]
 [!code-vb[System.Numeric.BigInteger.Class#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#13)]  
  
 <span data-ttu-id="e4975-654">不支援自訂運算子和運算子多載的語言可以呼叫<xref:System.Numerics.BigInteger.Divide%2A>方法改為。</span><span class="sxs-lookup"><span data-stu-id="e4975-654">Languages that do not support custom operators and operator overloading can call the <xref:System.Numerics.BigInteger.Divide%2A> method instead.</span></span>  
  
 <span data-ttu-id="e4975-655">這個運算子的對等方法是 <xref:System.Numerics.BigInteger.Divide%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="e4975-655">The equivalent method for this operator is <xref:System.Numerics.BigInteger.Divide%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType></span></span>  
  
## Examples  
 <span data-ttu-id="e4975-656">下列範例會建立陣列<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="e4975-656">The following example creates an array of <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="e4975-657">然後它會使用每個項目為在除法運算中使用的商數<xref:System.Numerics.BigInteger.Divide%2A>方法，除法運算子 （/），而<xref:System.Numerics.BigInteger.DivRem%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e4975-657">It then uses each element as the quotient in a division operation that uses the <xref:System.Numerics.BigInteger.Divide%2A> method, the division operator (/), and the <xref:System.Numerics.BigInteger.DivRem%2A> method.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Divide#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Divide/cs/Divide1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Divide#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Divide/vb/Divide1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.DivideByZeroException"><span data-ttu-id="e4975-658"><paramref name="divisor" /> 是 0 (零)。</span><span class="sxs-lookup"><span data-stu-id="e4975-658"><paramref name="divisor" /> is 0 (zero).</span></span></exception>
        <altmember cref="M:System.Numerics.BigInteger.Divide(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Equality">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e4975-659">傳回值，這個值表示兩個值是否相等。</span><span class="sxs-lookup"><span data-stu-id="e4975-659">Returns a value that indicates whether two values are equal.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (long left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(int64 left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Equality(System.Int64,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As Long, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(long left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : int64 * System.Numerics.BigInteger -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Int64" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="e4975-660">要比較的第一個值。</span><span class="sxs-lookup"><span data-stu-id="e4975-660">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="e4975-661">要比較的第二個值。</span><span class="sxs-lookup"><span data-stu-id="e4975-661">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="e4975-662">傳回值，這個值表示帶正負號長整數值與 <see cref="T:System.Numerics.BigInteger" /> 值是否相等。</span><span class="sxs-lookup"><span data-stu-id="e4975-662">Returns a value that indicates whether a signed long integer value and a <see cref="T:System.Numerics.BigInteger" /> value are equal.</span></span></summary>
        <returns><span data-ttu-id="e4975-663">如果 <paramref name="left" /> 與 <paramref name="right" /> 參數有相同的值，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-663"><see langword="true" /> if the <paramref name="left" /> and <paramref name="right" /> parameters have the same value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-664"><xref:System.Numerics.BigInteger.op_Equality%28System.Int64%2CSystem.Numerics.BigInteger%29>方法定義的相等比較運算<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="e4975-664">The <xref:System.Numerics.BigInteger.op_Equality%28System.Int64%2CSystem.Numerics.BigInteger%29> method defines the equality comparison operation for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="e4975-665">它可讓程式碼，如下所示：</span><span class="sxs-lookup"><span data-stu-id="e4975-665">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#4)]
 [!code-vb[System.Numerics.BigInteger.Operators#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#4)]  
  
 <span data-ttu-id="e4975-666">不支援自訂運算子的語言可以呼叫<xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=nameWithType>改為執行個體方法。</span><span class="sxs-lookup"><span data-stu-id="e4975-666">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=nameWithType> instance method instead.</span></span>  
  
 <span data-ttu-id="e4975-667">如果`left`已<xref:System.Byte>， <xref:System.Int16>， <xref:System.Int32>， <xref:System.SByte>， <xref:System.UInt16>，或<xref:System.UInt32>的值，則會隱含地轉換成<xref:System.Int64>值執行作業時。</span><span class="sxs-lookup"><span data-stu-id="e4975-667">If `left` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.</span></span>  
  
 <span data-ttu-id="e4975-668">這個運算子的對等方法是<xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="e4975-668">The equivalent method for this operator is <xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_Inequality" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Numerics.BigInteger left, long right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Numerics.BigInteger left, int64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As BigInteger, right As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Numerics::BigInteger left, long right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Numerics.BigInteger * int64 -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="e4975-669">要比較的第一個值。</span><span class="sxs-lookup"><span data-stu-id="e4975-669">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="e4975-670">要比較的第二個值。</span><span class="sxs-lookup"><span data-stu-id="e4975-670">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="e4975-671">傳回值，這個值表示 <see cref="T:System.Numerics.BigInteger" /> 值與帶正負號長整數值是否相等。</span><span class="sxs-lookup"><span data-stu-id="e4975-671">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value and a signed long integer value are equal.</span></span></summary>
        <returns><span data-ttu-id="e4975-672">如果 <paramref name="left" /> 與 <paramref name="right" /> 參數有相同的值，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-672"><see langword="true" /> if the <paramref name="left" /> and <paramref name="right" /> parameters have the same value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-673"><xref:System.Numerics.BigInteger.op_Equality%28System.Numerics.BigInteger%2CSystem.Int64%29>方法定義的相等比較運算<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="e4975-673">The <xref:System.Numerics.BigInteger.op_Equality%28System.Numerics.BigInteger%2CSystem.Int64%29> method defines the equality comparison operation for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="e4975-674">它可讓程式碼，如下所示：</span><span class="sxs-lookup"><span data-stu-id="e4975-674">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#5)]
 [!code-vb[System.Numerics.BigInteger.Operators#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#5)]  
  
 <span data-ttu-id="e4975-675">不支援自訂運算子的語言可以呼叫<xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=nameWithType>改為執行個體方法。</span><span class="sxs-lookup"><span data-stu-id="e4975-675">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=nameWithType> instance method instead.</span></span>  
  
 <span data-ttu-id="e4975-676">如果`right`已<xref:System.Byte>， <xref:System.Int16>， <xref:System.Int32>， <xref:System.SByte>， <xref:System.UInt16>，或<xref:System.UInt32>的值，則會隱含地轉換成<xref:System.Int64>值執行作業時。</span><span class="sxs-lookup"><span data-stu-id="e4975-676">If `right` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.</span></span>  
  
 <span data-ttu-id="e4975-677">這個運算子的對等方法是<xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="e4975-677">The equivalent method for this operator is <xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_Inequality" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As BigInteger, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="e4975-678">要比較的第一個值。</span><span class="sxs-lookup"><span data-stu-id="e4975-678">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="e4975-679">要比較的第二個值。</span><span class="sxs-lookup"><span data-stu-id="e4975-679">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="e4975-680">傳回值，這個值表示兩個 <see cref="T:System.Numerics.BigInteger" /> 物件的值是否相等。</span><span class="sxs-lookup"><span data-stu-id="e4975-680">Returns a value that indicates whether the values of two <see cref="T:System.Numerics.BigInteger" /> objects are equal.</span></span></summary>
        <returns><span data-ttu-id="e4975-681">如果 <paramref name="left" /> 與 <paramref name="right" /> 參數有相同的值，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-681"><see langword="true" /> if the <paramref name="left" /> and <paramref name="right" /> parameters have the same value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-682"><xref:System.Numerics.BigInteger.op_Equality%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29>方法來定義等號比較運算子的營運<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="e4975-682">The <xref:System.Numerics.BigInteger.op_Equality%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29> method defines the operation of the equality operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="e4975-683">它可讓程式碼，如下所示：</span><span class="sxs-lookup"><span data-stu-id="e4975-683">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#19)]
 [!code-vb[System.Numeric.BigInteger.Class#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#19)]  
  
 <span data-ttu-id="e4975-684">不支援自訂運算子的語言可以呼叫<xref:System.Numerics.BigInteger.Equals%28System.Numerics.BigInteger%29?displayProperty=nameWithType>改為執行個體方法。</span><span class="sxs-lookup"><span data-stu-id="e4975-684">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Equals%28System.Numerics.BigInteger%29?displayProperty=nameWithType> instance method instead.</span></span>  
  
 <span data-ttu-id="e4975-685">這個運算子的對等方法是<xref:System.Numerics.BigInteger.Equals%28System.Numerics.BigInteger%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="e4975-685">The equivalent method for this operator is <xref:System.Numerics.BigInteger.Equals%28System.Numerics.BigInteger%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.Equals" />
        <altmember cref="Overload:System.Numerics.BigInteger.op_Inequality" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Numerics.BigInteger left, ulong right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Numerics.BigInteger left, unsigned int64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As BigInteger, right As ULong) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Numerics::BigInteger left, System::UInt64 right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Numerics.BigInteger * uint64 -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="e4975-686">要比較的第一個值。</span><span class="sxs-lookup"><span data-stu-id="e4975-686">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="e4975-687">要比較的第二個值。</span><span class="sxs-lookup"><span data-stu-id="e4975-687">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="e4975-688">傳回值，這個值表示 <see cref="T:System.Numerics.BigInteger" /> 值與不帶正負號長整數值是否相等。</span><span class="sxs-lookup"><span data-stu-id="e4975-688">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value and an unsigned long integer value are equal.</span></span></summary>
        <returns><span data-ttu-id="e4975-689">如果 <paramref name="left" /> 與 <paramref name="right" /> 參數有相同的值，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-689"><see langword="true" /> if the <paramref name="left" /> and <paramref name="right" /> parameters have the same value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-690"><xref:System.Numerics.BigInteger.op_Equality%28System.Numerics.BigInteger%2CSystem.UInt64%29>方法定義的相等比較運算<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="e4975-690">The <xref:System.Numerics.BigInteger.op_Equality%28System.Numerics.BigInteger%2CSystem.UInt64%29> method defines the equality comparison operation for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="e4975-691">它可讓程式碼，如下所示：</span><span class="sxs-lookup"><span data-stu-id="e4975-691">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#6)]
 [!code-vb[System.Numerics.BigInteger.Operators#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#6)]  
  
 <span data-ttu-id="e4975-692">不支援自訂運算子的語言可以呼叫<xref:System.Numerics.BigInteger.Equals%28System.UInt64%29?displayProperty=nameWithType>改為執行個體方法。</span><span class="sxs-lookup"><span data-stu-id="e4975-692">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Equals%28System.UInt64%29?displayProperty=nameWithType> instance method instead.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_Inequality" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (ulong left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(unsigned int64 left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Equality(System.UInt64,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As ULong, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::UInt64 left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : uint64 * System.Numerics.BigInteger -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.UInt64" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="e4975-693">要比較的第一個值。</span><span class="sxs-lookup"><span data-stu-id="e4975-693">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="e4975-694">要比較的第二個值。</span><span class="sxs-lookup"><span data-stu-id="e4975-694">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="e4975-695">傳回值，這個值表示不帶正負號長整數值與 <see cref="T:System.Numerics.BigInteger" /> 值是否相等。</span><span class="sxs-lookup"><span data-stu-id="e4975-695">Returns a value that indicates whether an unsigned long integer value and a <see cref="T:System.Numerics.BigInteger" /> value are equal.</span></span></summary>
        <returns><span data-ttu-id="e4975-696">如果 <paramref name="left" /> 與 <paramref name="right" /> 參數有相同的值，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-696"><see langword="true" /> if the <paramref name="left" /> and <paramref name="right" /> parameters have the same value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-697"><xref:System.Numerics.BigInteger.op_Equality%28System.UInt64%2CSystem.Numerics.BigInteger%29>方法定義的相等比較運算<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="e4975-697">The <xref:System.Numerics.BigInteger.op_Equality%28System.UInt64%2CSystem.Numerics.BigInteger%29> method defines the equality comparison operation for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="e4975-698">它可讓程式碼，如下所示：</span><span class="sxs-lookup"><span data-stu-id="e4975-698">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#7)]
 [!code-vb[System.Numerics.BigInteger.Operators#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#7)]  
  
 <span data-ttu-id="e4975-699">不支援自訂運算子的語言可以呼叫<xref:System.Numerics.BigInteger.Equals%28System.UInt64%29?displayProperty=nameWithType>改為執行個體方法。</span><span class="sxs-lookup"><span data-stu-id="e4975-699">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Equals%28System.UInt64%29?displayProperty=nameWithType> instance method instead.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_Inequality" />
      </Docs>
    </Member>
    <Member MemberName="op_ExclusiveOr">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator ^ (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_ExclusiveOr(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_ExclusiveOr(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator Xor (left As BigInteger, right As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator ^(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( ^^^ ) : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="left ^^^ right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="e4975-700">第一個值。</span><span class="sxs-lookup"><span data-stu-id="e4975-700">The first value.</span></span></param>
        <param name="right"><span data-ttu-id="e4975-701">第二個值。</span><span class="sxs-lookup"><span data-stu-id="e4975-701">The second value.</span></span></param>
        <summary><span data-ttu-id="e4975-702">對兩個 <see cref="T:System.Numerics.BigInteger" /> 值執行位元互斥 <see langword="Or" /> (<see langword="XOr" />) 運算。</span><span class="sxs-lookup"><span data-stu-id="e4975-702">Performs a bitwise exclusive <see langword="Or" /> (<see langword="XOr" />) operation on two <see cref="T:System.Numerics.BigInteger" /> values.</span></span></summary>
        <returns><span data-ttu-id="e4975-703">位元 <see langword="Or" /> 運算的結果。</span><span class="sxs-lookup"><span data-stu-id="e4975-703">The result of the bitwise <see langword="Or" /> operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-704">結果的位元互斥`Or`作業`true`如果兩個位元的值不同，否則為，則是`false`。</span><span class="sxs-lookup"><span data-stu-id="e4975-704">The result of a bitwise exclusive `Or` operation is `true` if the values of the two bits are different; otherwise, it is `false`.</span></span> <span data-ttu-id="e4975-705">下表說明專用`Or`作業。</span><span class="sxs-lookup"><span data-stu-id="e4975-705">The following table illustrates the exclusive `Or` operation.</span></span>  
  
|<span data-ttu-id="e4975-706">中的位元 x `left`</span><span class="sxs-lookup"><span data-stu-id="e4975-706">Bit x in `left`</span></span>|<span data-ttu-id="e4975-707">中的位元 x `right`</span><span class="sxs-lookup"><span data-stu-id="e4975-707">Bit x in `right`</span></span>|<span data-ttu-id="e4975-708">傳回值</span><span class="sxs-lookup"><span data-stu-id="e4975-708">Return value</span></span>|  
|---------------------|----------------------|------------------|  
|<span data-ttu-id="e4975-709">0</span><span class="sxs-lookup"><span data-stu-id="e4975-709">0</span></span>|<span data-ttu-id="e4975-710">0</span><span class="sxs-lookup"><span data-stu-id="e4975-710">0</span></span>|<span data-ttu-id="e4975-711">0</span><span class="sxs-lookup"><span data-stu-id="e4975-711">0</span></span>|  
|<span data-ttu-id="e4975-712">0</span><span class="sxs-lookup"><span data-stu-id="e4975-712">0</span></span>|<span data-ttu-id="e4975-713">1</span><span class="sxs-lookup"><span data-stu-id="e4975-713">1</span></span>|<span data-ttu-id="e4975-714">1</span><span class="sxs-lookup"><span data-stu-id="e4975-714">1</span></span>|  
|<span data-ttu-id="e4975-715">1</span><span class="sxs-lookup"><span data-stu-id="e4975-715">1</span></span>|<span data-ttu-id="e4975-716">0</span><span class="sxs-lookup"><span data-stu-id="e4975-716">0</span></span>|<span data-ttu-id="e4975-717">1</span><span class="sxs-lookup"><span data-stu-id="e4975-717">1</span></span>|  
|<span data-ttu-id="e4975-718">1</span><span class="sxs-lookup"><span data-stu-id="e4975-718">1</span></span>|<span data-ttu-id="e4975-719">1</span><span class="sxs-lookup"><span data-stu-id="e4975-719">1</span></span>|<span data-ttu-id="e4975-720">0</span><span class="sxs-lookup"><span data-stu-id="e4975-720">0</span></span>|  
  
 <span data-ttu-id="e4975-721"><xref:System.Numerics.BigInteger.op_ExclusiveOr%2A>方法可讓程式碼，如下所示：</span><span class="sxs-lookup"><span data-stu-id="e4975-721">The <xref:System.Numerics.BigInteger.op_ExclusiveOr%2A> method enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#8)]
 [!code-vb[System.Numerics.BigInteger.Operators#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#8)]  
  
 <span data-ttu-id="e4975-722"><xref:System.Numerics.BigInteger.op_ExclusiveOr%2A>方法會執行位元互斥`Or`對兩個作業<xref:System.Numerics.BigInteger>值如同它們是在二補數具有表示虛擬的正負號擴充。</span><span class="sxs-lookup"><span data-stu-id="e4975-722">The <xref:System.Numerics.BigInteger.op_ExclusiveOr%2A> method performs the bitwise exclusive `Or` operation on two <xref:System.Numerics.BigInteger> values as if they were both in two's complement representation with virtual sign extension.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Explicit">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e4975-723">定義 <see cref="T:System.Numerics.BigInteger" /> 物件與另一個類型之間的明確轉換。</span><span class="sxs-lookup"><span data-stu-id="e4975-723">Defines an explicit conversion between a <see cref="T:System.Numerics.BigInteger" /> object and another type.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator System.Numerics.BigInteger (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Explicit(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As Decimal) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Numerics::BigInteger(System::Decimal value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : decimal -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e4975-724">要轉換為 <see cref="T:System.Numerics.BigInteger" /> 的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-724">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</span></span></param>
        <summary><span data-ttu-id="e4975-725">定義從 <see cref="T:System.Decimal" /> 物件到 <see cref="T:System.Numerics.BigInteger" /> 值的明確轉換。</span><span class="sxs-lookup"><span data-stu-id="e4975-725">Defines an explicit conversion of a <see cref="T:System.Decimal" /> object to a <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="e4975-726">物件，包含 <paramref name="value" /> 參數的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-726">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-727">任何小數部分`value`轉換前的參數會被截斷。</span><span class="sxs-lookup"><span data-stu-id="e4975-727">Any fractional part of the `value` parameter is truncated before conversion.</span></span>

 <span data-ttu-id="e4975-728">多載<xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger>方法定義的類型，其中或從中<xref:System.Numerics.BigInteger>物件可以轉換。</span><span class="sxs-lookup"><span data-stu-id="e4975-728">The overloads of the <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> method define the types to which or from which a <xref:System.Numerics.BigInteger> object can be converted.</span></span> <span data-ttu-id="e4975-729">因為從轉換<xref:System.Decimal>要<xref:System.Numerics.BigInteger>可能是截斷的任何小數部分`value`，語言編譯器不要自動執行這項轉換。</span><span class="sxs-lookup"><span data-stu-id="e4975-729">Because the conversion from <xref:System.Decimal> to <xref:System.Numerics.BigInteger> can involve truncating any fractional part of `value`, language compilers do not perform this conversion automatically.</span></span> <span data-ttu-id="e4975-730">相反地，它們執行轉換 （在 C# 中) 轉型運算子或轉換函式時，才可以 (例如`CType`Visual Basic 中) 使用。</span><span class="sxs-lookup"><span data-stu-id="e4975-730">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` in Visual Basic) is used.</span></span> <span data-ttu-id="e4975-731">否則，它們會顯示編譯器錯誤。</span><span class="sxs-lookup"><span data-stu-id="e4975-731">Otherwise, they display a compiler error.</span></span>   

 <span data-ttu-id="e4975-732">不支援自訂運算子的語言，另一種方法是<xref:System.Numerics.BigInteger.%23ctor%28System.Decimal%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="e4975-732">For languages that do not support custom operators, the alternative method is <xref:System.Numerics.BigInteger.%23ctor%28System.Decimal%29?displayProperty=nameWithType>.</span></span>


## Examples
 <span data-ttu-id="e4975-733">下列範例會將陣列中的個別項目<xref:System.Decimal>值來<xref:System.Numerics.BigInteger>物件，並接著會顯示每個轉換的結果。</span><span class="sxs-lookup"><span data-stu-id="e4975-733">The following example converts the individual elements in an array of <xref:System.Decimal> values to <xref:System.Numerics.BigInteger> objects, and then displays the result of each conversion.</span></span> <span data-ttu-id="e4975-734">請注意，任何小數部分的<xref:System.Decimal>在轉換期間截斷值。</span><span class="sxs-lookup"><span data-stu-id="e4975-734">Note that any fractional part of a <xref:System.Decimal> value is truncated during the conversion.</span></span>   

 [!code-csharp[System.Numerics.BigInteger.Explicit#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Explicit/cs/Explicit1.cs#1)]   
 [!code-vb[System.Numerics.BigInteger.Explicit#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Explicit/vb/Explicit1.vb#1)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator System.Numerics.BigInteger (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Explicit(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Double)~System.Numerics.BigInteger" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As Double) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Numerics::BigInteger(double value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : double -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e4975-735">要轉換為 <see cref="T:System.Numerics.BigInteger" /> 的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-735">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</span></span></param>
        <summary><span data-ttu-id="e4975-736">定義從 <see cref="T:System.Double" /> 值到 <see cref="T:System.Numerics.BigInteger" /> 值的明確轉換。</span><span class="sxs-lookup"><span data-stu-id="e4975-736">Defines an explicit conversion of a <see cref="T:System.Double" /> value to a <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="e4975-737">物件，包含 <paramref name="value" /> 參數的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-737">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-738">任何小數部分`value`轉換前的參數會被截斷。</span><span class="sxs-lookup"><span data-stu-id="e4975-738">Any fractional part of the `value` parameter is truncated before conversion.</span></span>

 <span data-ttu-id="e4975-739">多載<xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger>方法定義的類型，其中或從中<xref:System.Numerics.BigInteger>物件可以轉換。</span><span class="sxs-lookup"><span data-stu-id="e4975-739">The overloads of the <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> method define the types to which or from which a <xref:System.Numerics.BigInteger> object can be converted.</span></span> <span data-ttu-id="e4975-740">因為從轉換<xref:System.Double>要<xref:System.Numerics.BigInteger>可能是截斷的任何小數部分`value`，語言編譯器不要自動執行這項轉換。</span><span class="sxs-lookup"><span data-stu-id="e4975-740">Because the conversion from <xref:System.Double> to <xref:System.Numerics.BigInteger> can involve truncating any fractional part of `value`, language compilers do not perform this conversion automatically.</span></span> <span data-ttu-id="e4975-741">相反地，它們執行轉換 （在 C# 中) 轉型運算子或轉換函式時，才可以 (例如`CType`Visual Basic 中) 使用。</span><span class="sxs-lookup"><span data-stu-id="e4975-741">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` in Visual Basic) is used.</span></span> <span data-ttu-id="e4975-742">否則，它們會顯示編譯器錯誤。</span><span class="sxs-lookup"><span data-stu-id="e4975-742">Otherwise, they display a compiler error.</span></span>

 <span data-ttu-id="e4975-743">不支援自訂運算子的語言，另一種方法是<xref:System.Numerics.BigInteger.%23ctor%28System.Double%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="e4975-743">For languages that do not support custom operators, the alternative method is <xref:System.Numerics.BigInteger.%23ctor%28System.Double%29?displayProperty=nameWithType>.</span></span>


## Examples
 <span data-ttu-id="e4975-744">下列範例會將陣列中的個別項目<xref:System.Double>值來<xref:System.Numerics.BigInteger>物件，並接著會顯示每個轉換的結果。</span><span class="sxs-lookup"><span data-stu-id="e4975-744">The following example converts the individual elements in an array of <xref:System.Double> values to <xref:System.Numerics.BigInteger> objects, and then displays the result of each conversion.</span></span> <span data-ttu-id="e4975-745">請注意，任何小數部分的<xref:System.Double>在轉換期間截斷值。</span><span class="sxs-lookup"><span data-stu-id="e4975-745">Note that any fractional part of a <xref:System.Double> value is truncated during the conversion.</span></span>   
    
 [!code-csharp[System.Numerics.BigInteger.Explicit#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Explicit/cs/Explicit1.cs#2)]   
 [!code-vb[System.Numerics.BigInteger.Explicit#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Explicit/vb/Explicit1.vb#2)]   

 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="e4975-746"><paramref name="value" /> 的值是 <see cref="F:System.Double.NaN" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-746">The value of <paramref name="value" /> is <see cref="F:System.Double.NaN" />.</span></span>  
  
<span data-ttu-id="e4975-747">-或-</span><span class="sxs-lookup"><span data-stu-id="e4975-747">-or-</span></span> 
<span data-ttu-id="e4975-748"><paramref name="value" /> 的值是 <see cref="F:System.Double.PositiveInfinity" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-748">The value of <paramref name="value" /> is <see cref="F:System.Double.PositiveInfinity" />.</span></span>
  
<span data-ttu-id="e4975-749">-或-</span><span class="sxs-lookup"><span data-stu-id="e4975-749">-or-</span></span> 
<span data-ttu-id="e4975-750"><paramref name="value" /> 的值是 <see cref="F:System.Double.NegativeInfinity" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-750">The value of <paramref name="value" /> is <see cref="F:System.Double.NegativeInfinity" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator byte (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname unsigned int8 op_Explicit(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Byte" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As BigInteger) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Byte(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Numerics.BigInteger -&gt; byte" Usage="System.Numerics.BigInteger.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e4975-751">要轉換為 <see cref="T:System.Byte" /> 的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-751">The value to convert to a <see cref="T:System.Byte" />.</span></span></param>
        <summary><span data-ttu-id="e4975-752">定義從 <see cref="T:System.Numerics.BigInteger" /> 物件到不帶正負號位元組值的明確轉換。</span><span class="sxs-lookup"><span data-stu-id="e4975-752">Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to an unsigned byte value.</span></span></summary>
        <returns><span data-ttu-id="e4975-753">物件，包含 <paramref name="value" /> 參數的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-753">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-754">多載<xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger>方法定義的類型，其中或從中<xref:System.Numerics.BigInteger>物件可以轉換。</span><span class="sxs-lookup"><span data-stu-id="e4975-754">The overloads of the <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> method define the types to which or from which a <xref:System.Numerics.BigInteger> object can be converted.</span></span> <span data-ttu-id="e4975-755">語言編譯器不會執行這項轉換會自動因為它可能會遺失資料。</span><span class="sxs-lookup"><span data-stu-id="e4975-755">Language compilers do not perform this conversion automatically because it can involve data loss.</span></span> <span data-ttu-id="e4975-756">相反地，它們執行轉換 （在 C# 中) 轉型運算子或轉換函式時，才可以 (例如`CType`或`CByte`Visual Basic 中) 使用。</span><span class="sxs-lookup"><span data-stu-id="e4975-756">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` or `CByte` in Visual Basic) is used.</span></span> <span data-ttu-id="e4975-757">否則，它們會顯示編譯器錯誤。</span><span class="sxs-lookup"><span data-stu-id="e4975-757">Otherwise, they display a compiler error.</span></span>   

 <span data-ttu-id="e4975-758">由於這項作業定義的縮小轉換，仍會擲回<xref:System.OverflowException>如果在執行階段<xref:System.Numerics.BigInteger>的值超出範圍<xref:System.Byte>資料型別。</span><span class="sxs-lookup"><span data-stu-id="e4975-758">Because this operation defines a narrowing conversion, it can throw an <xref:System.OverflowException> at run time if the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.Byte> data type.</span></span> <span data-ttu-id="e4975-759">不會在產生的有效位數遺失任何<xref:System.Byte>值，如果轉換成功。</span><span class="sxs-lookup"><span data-stu-id="e4975-759">There is no loss of precision in the resulting <xref:System.Byte> value if the conversion is successful.</span></span>

## Examples
 <span data-ttu-id="e4975-760">下列範例說明轉換<xref:System.Numerics.BigInteger>至<xref:System.Byte>值。</span><span class="sxs-lookup"><span data-stu-id="e4975-760">The following example illustrates the conversion of <xref:System.Numerics.BigInteger> to <xref:System.Byte> values.</span></span> <span data-ttu-id="e4975-761">它也會處理<xref:System.OverflowException>因為擲回<xref:System.Numerics.BigInteger>的值超出範圍<xref:System.Byte>資料型別。</span><span class="sxs-lookup"><span data-stu-id="e4975-761">It also handles an <xref:System.OverflowException> that is thrown because the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.Byte> data type.</span></span>   
    
 [!code-csharp[System.Numeric.BigInteger.Explicit#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/cs/System.Numeric.BigInteger.Explicit.cs#1)]   
 [!code-vb[System.Numeric.BigInteger.Explicit#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/vb/System.Numeric.BigInteger.Explicit.vb#1)]   

 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="e4975-762"><paramref name="value" /> 值小於 <see cref="F:System.Byte.MinValue" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-762">The value of <paramref name="value" /> is less than <see cref="F:System.Byte.MinValue" />.</span></span>  
  
<span data-ttu-id="e4975-763">-或-</span><span class="sxs-lookup"><span data-stu-id="e4975-763">-or-</span></span> 
<span data-ttu-id="e4975-764"><paramref name="value" /> 值大於 <see cref="F:System.Byte.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-764">The value of <paramref name="value" /> is greater than <see cref="F:System.Byte.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator decimal (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Decimal op_Explicit(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Decimal" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As BigInteger) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Decimal(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Numerics.BigInteger -&gt; decimal" Usage="System.Numerics.BigInteger.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e4975-765">要轉換為 <see cref="T:System.Decimal" /> 的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-765">The value to convert to a <see cref="T:System.Decimal" />.</span></span></param>
        <summary><span data-ttu-id="e4975-766">定義從 <see cref="T:System.Numerics.BigInteger" /> 物件到 <see cref="T:System.Decimal" /> 值的明確轉換。</span><span class="sxs-lookup"><span data-stu-id="e4975-766">Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to a <see cref="T:System.Decimal" /> value.</span></span></summary>
        <returns><span data-ttu-id="e4975-767">物件，包含 <paramref name="value" /> 參數的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-767">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-768">多載<xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger>方法定義的類型，其中或從中<xref:System.Numerics.BigInteger>物件可以轉換。</span><span class="sxs-lookup"><span data-stu-id="e4975-768">The overloads of the <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> method define the types to which or from which a <xref:System.Numerics.BigInteger> object can be converted.</span></span> <span data-ttu-id="e4975-769">語言編譯器不會執行這項轉換會自動因為它可能會遺失資料。</span><span class="sxs-lookup"><span data-stu-id="e4975-769">Language compilers do not perform this conversion automatically because it can involve data loss.</span></span> <span data-ttu-id="e4975-770">相反地，它們執行轉換 （在 C# 中) 轉型運算子或轉換函式時，才可以 (例如`CType`或`CDec`Visual Basic 中) 使用。</span><span class="sxs-lookup"><span data-stu-id="e4975-770">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` or `CDec` in Visual Basic) is used.</span></span>   

 <span data-ttu-id="e4975-771">由於這項作業定義的縮小轉換，仍會擲回<xref:System.OverflowException>如果在執行階段<xref:System.Numerics.BigInteger>的值超出範圍<xref:System.Decimal>資料型別。</span><span class="sxs-lookup"><span data-stu-id="e4975-771">Because this operation defines a narrowing conversion, it can throw an <xref:System.OverflowException> at run time if the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.Decimal> data type.</span></span> 

## Examples
 <span data-ttu-id="e4975-772">下列範例說明轉換<xref:System.Numerics.BigInteger>至<xref:System.Decimal>值。</span><span class="sxs-lookup"><span data-stu-id="e4975-772">The following example illustrates the conversion of <xref:System.Numerics.BigInteger> to <xref:System.Decimal> values.</span></span> <span data-ttu-id="e4975-773">它也會處理<xref:System.OverflowException>因為擲回<xref:System.Numerics.BigInteger>的值超出範圍<xref:System.Decimal>資料型別。</span><span class="sxs-lookup"><span data-stu-id="e4975-773">It also handles an <xref:System.OverflowException> that is thrown because the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.Decimal> data type.</span></span>   
    
 [!code-csharp[System.Numeric.BigInteger.Explicit#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/cs/System.Numeric.BigInteger.Explicit.cs#2)]
 [!code-vb[System.Numeric.BigInteger.Explicit#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/vb/System.Numeric.BigInteger.Explicit.vb#2)]  

 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="e4975-774"><paramref name="value" /> 值小於 <see cref="F:System.Decimal.MinValue" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-774">The value of <paramref name="value" /> is less than <see cref="F:System.Decimal.MinValue" />.</span></span>  
  
<span data-ttu-id="e4975-775">-或-</span><span class="sxs-lookup"><span data-stu-id="e4975-775">-or-</span></span> 
<span data-ttu-id="e4975-776"><paramref name="value" /> 值大於 <see cref="F:System.Decimal.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-776">The value of <paramref name="value" /> is greater than <see cref="F:System.Decimal.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator double (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname float64 op_Explicit(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Double" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As BigInteger) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator double(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Numerics.BigInteger -&gt; double" Usage="System.Numerics.BigInteger.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e4975-777">要轉換為 <see cref="T:System.Double" /> 的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-777">The value to convert to a <see cref="T:System.Double" />.</span></span></param>
        <summary><span data-ttu-id="e4975-778">定義從 <see cref="T:System.Numerics.BigInteger" /> 物件到 <see cref="T:System.Double" /> 值的明確轉換。</span><span class="sxs-lookup"><span data-stu-id="e4975-778">Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to a <see cref="T:System.Double" /> value.</span></span></summary>
        <returns><span data-ttu-id="e4975-779">物件，包含 <paramref name="value" /> 參數的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-779">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-780">多載<xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger>方法定義的類型，其中或從中<xref:System.Numerics.BigInteger>物件可以轉換。</span><span class="sxs-lookup"><span data-stu-id="e4975-780">The overloads of the <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> method define the types to which or from which a <xref:System.Numerics.BigInteger> object can be converted.</span></span> <span data-ttu-id="e4975-781">語言編譯器不會執行這項轉換會自動因為它可能會遺失資料。</span><span class="sxs-lookup"><span data-stu-id="e4975-781">Language compilers do not perform this conversion automatically because it can involve data loss.</span></span> <span data-ttu-id="e4975-782">相反地，它們執行轉換 （在 C# 中) 轉型運算子或轉換函式時，才可以 (例如`CType`或`CDbl`Visual Basic 中) 使用。</span><span class="sxs-lookup"><span data-stu-id="e4975-782">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` or `CDbl` in Visual Basic) is used.</span></span>   

 <span data-ttu-id="e4975-783">因為<xref:System.Numerics.BigInteger>值可以是範圍之外的<xref:System.Double>資料類型，這項作業是縮小轉換。</span><span class="sxs-lookup"><span data-stu-id="e4975-783">Because the <xref:System.Numerics.BigInteger> value can be outside the range of the <xref:System.Double> data type, this operation is a narrowing conversion.</span></span> <span data-ttu-id="e4975-784">如果轉換失敗，它不會擲回<xref:System.OverflowException>。</span><span class="sxs-lookup"><span data-stu-id="e4975-784">If the conversion is unsuccessful, it does not throw an <xref:System.OverflowException>.</span></span> <span data-ttu-id="e4975-785">相反地，如果<xref:System.Numerics.BigInteger>值是小於<xref:System.Double.MinValue?displayProperty=nameWithType>，產生<xref:System.Double>的值是<xref:System.Double.NegativeInfinity?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="e4975-785">Instead, if the <xref:System.Numerics.BigInteger> value is less than <xref:System.Double.MinValue?displayProperty=nameWithType>, the resulting <xref:System.Double> value is <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span></span> <span data-ttu-id="e4975-786">如果<xref:System.Numerics.BigInteger>值大於<xref:System.Double.MaxValue?displayProperty=nameWithType>，產生<xref:System.Double>的值是<xref:System.Double.PositiveInfinity?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="e4975-786">If the <xref:System.Numerics.BigInteger> value is greater than <xref:System.Double.MaxValue?displayProperty=nameWithType>, the resulting <xref:System.Double> value is <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>.</span></span>
 
 <span data-ttu-id="e4975-787">轉換<xref:System.Numerics.BigInteger>至<xref:System.Double>可能會遺失有效位數。</span><span class="sxs-lookup"><span data-stu-id="e4975-787">The conversion of a <xref:System.Numerics.BigInteger> to a <xref:System.Double> may involve a loss of precision.</span></span> <span data-ttu-id="e4975-788">在某些情況下，遺失有效位數可能會導致成功轉型或轉換作業即使<xref:System.Numerics.BigInteger>的值超出範圍<xref:System.Double>資料型別。</span><span class="sxs-lookup"><span data-stu-id="e4975-788">In some cases, the loss of precision may cause the casting or conversion operation to succeed even if the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.Double> data type.</span></span> <span data-ttu-id="e4975-789">下列範例提供一個實例。</span><span class="sxs-lookup"><span data-stu-id="e4975-789">The following example provides an illustration.</span></span> <span data-ttu-id="e4975-790">它會將指派的最大值<xref:System.Double>有兩個<xref:System.Numerics.BigInteger>變數，會遞增一個<xref:System.Numerics.BigInteger>9.999e291，然後測試是否相等的兩個變數的變數。</span><span class="sxs-lookup"><span data-stu-id="e4975-790">It assigns the maximum value of a <xref:System.Double> to two <xref:System.Numerics.BigInteger> variables, increments one <xref:System.Numerics.BigInteger> variable by 9.999e291, and tests the two variables for equality.</span></span> <span data-ttu-id="e4975-791">如預期般呼叫<xref:System.Numerics.BigInteger.Equals%28System.Numerics.BigInteger%29?displayProperty=nameWithType>方法會顯示不相等。</span><span class="sxs-lookup"><span data-stu-id="e4975-791">As expected, the call to the <xref:System.Numerics.BigInteger.Equals%28System.Numerics.BigInteger%29?displayProperty=nameWithType> method shows that they are unequal.</span></span> <span data-ttu-id="e4975-792">不過，較大的轉換<xref:System.Numerics.BigInteger>值反向<xref:System.Double>成功，雖然<xref:System.Numerics.BigInteger>值現在超過<xref:System.Double.MaxValue?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="e4975-792">However, the conversion of the larger <xref:System.Numerics.BigInteger> value back to a <xref:System.Double> succeeds, although the <xref:System.Numerics.BigInteger> value now exceeds <xref:System.Double.MaxValue?displayProperty=nameWithType>.</span></span>   
    
 [!code-csharp[System.Numerics.BigInteger.Explicit#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Explicit/cs/Explicit1.cs#4)]   
 [!code-vb[System.Numerics.BigInteger.Explicit#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Explicit/vb/Explicit1.vb#4)]   



## Examples
 <span data-ttu-id="e4975-793">下列範例說明轉換<xref:System.Numerics.BigInteger>至<xref:System.Double>值。</span><span class="sxs-lookup"><span data-stu-id="e4975-793">The following example illustrates the conversion of <xref:System.Numerics.BigInteger> to <xref:System.Double> values.</span></span>   
    
 [!code-csharp[System.Numeric.BigInteger.Explicit#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/cs/System.Numeric.BigInteger.Explicit.cs#3)]   
 [!code-vb[System.Numeric.BigInteger.Explicit#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/vb/System.Numeric.BigInteger.Explicit.vb#3)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator short (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname int16 op_Explicit(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Int16" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As BigInteger) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator short(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Numerics.BigInteger -&gt; int16" Usage="System.Numerics.BigInteger.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e4975-794">要轉換為 16 位元帶正負號整數的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-794">The value to convert to a 16-bit signed integer.</span></span></param>
        <summary><span data-ttu-id="e4975-795">定義從 <see cref="T:System.Numerics.BigInteger" /> 物件到 16 位元帶正負號整數值的明確轉換。</span><span class="sxs-lookup"><span data-stu-id="e4975-795">Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to a 16-bit signed integer value.</span></span></summary>
        <returns><span data-ttu-id="e4975-796">物件，包含 <paramref name="value" /> 參數的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-796">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-797">多載<xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger>方法定義的類型，其中或從中<xref:System.Numerics.BigInteger>物件可以轉換。</span><span class="sxs-lookup"><span data-stu-id="e4975-797">The overloads of the <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> method define the types to which or from which a <xref:System.Numerics.BigInteger> object can be converted.</span></span> <span data-ttu-id="e4975-798">語言編譯器不會執行這項轉換會自動因為它可能會遺失資料。</span><span class="sxs-lookup"><span data-stu-id="e4975-798">Language compilers do not perform this conversion automatically because it can involve data loss.</span></span> <span data-ttu-id="e4975-799">相反地，它們執行轉換 （在 C# 中) 轉型運算子或轉換函式時，才可以 (例如`CType`或`CShort`Visual Basic 中) 使用。</span><span class="sxs-lookup"><span data-stu-id="e4975-799">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` or `CShort` in Visual Basic) is used.</span></span> <span data-ttu-id="e4975-800">否則，它們會顯示編譯器錯誤。</span><span class="sxs-lookup"><span data-stu-id="e4975-800">Otherwise, they display a compiler error.</span></span>   

 <span data-ttu-id="e4975-801">由於這項作業定義的縮小轉換，仍會擲回<xref:System.OverflowException>如果在執行階段<xref:System.Numerics.BigInteger>的值超出範圍<xref:System.Int16>資料型別。</span><span class="sxs-lookup"><span data-stu-id="e4975-801">Because this operation defines a narrowing conversion, it can throw an <xref:System.OverflowException> at run time if the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.Int16> data type.</span></span> <span data-ttu-id="e4975-802">不會在產生的有效位數遺失任何<xref:System.Int16>值，如果轉換成功。</span><span class="sxs-lookup"><span data-stu-id="e4975-802">There is no loss of precision in the resulting <xref:System.Int16> value if the conversion is successful.</span></span>

## Examples
 <span data-ttu-id="e4975-803">下列範例說明轉換<xref:System.Numerics.BigInteger>至<xref:System.Int16>值。</span><span class="sxs-lookup"><span data-stu-id="e4975-803">The following example illustrates the conversion of <xref:System.Numerics.BigInteger> to <xref:System.Int16> values.</span></span> <span data-ttu-id="e4975-804">它也會處理<xref:System.OverflowException>因為擲回<xref:System.Numerics.BigInteger>的值超出範圍<xref:System.Int16>資料型別。</span><span class="sxs-lookup"><span data-stu-id="e4975-804">It also handles an <xref:System.OverflowException> that is thrown because the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.Int16> data type.</span></span>   
    
 [!code-csharp[System.Numeric.BigInteger.Explicit#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/cs/System.Numeric.BigInteger.Explicit.cs#4)]   
 [!code-vb[System.Numeric.BigInteger.Explicit#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/vb/System.Numeric.BigInteger.Explicit.vb#4)]   

 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="e4975-805"><paramref name="value" /> 值小於 <see cref="F:System.Int16.MinValue" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-805">The value of <paramref name="value" /> is less than <see cref="F:System.Int16.MinValue" />.</span></span>  
  
<span data-ttu-id="e4975-806">-或-</span><span class="sxs-lookup"><span data-stu-id="e4975-806">-or-</span></span> 
<span data-ttu-id="e4975-807"><paramref name="value" /> 值大於 <see cref="F:System.Int16.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-807">The value of <paramref name="value" /> is greater than <see cref="F:System.Int16.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator int (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname int32 op_Explicit(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Int32" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As BigInteger) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator int(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Numerics.BigInteger -&gt; int" Usage="System.Numerics.BigInteger.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e4975-808">要轉換為 32 位元帶正負號整數的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-808">The value to convert to a 32-bit signed integer.</span></span></param>
        <summary><span data-ttu-id="e4975-809">定義從 <see cref="T:System.Numerics.BigInteger" /> 物件到 32 位元帶正負號整數值的明確轉換。</span><span class="sxs-lookup"><span data-stu-id="e4975-809">Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to a 32-bit signed integer value.</span></span></summary>
        <returns><span data-ttu-id="e4975-810">物件，包含 <paramref name="value" /> 參數的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-810">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-811">多載<xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger>方法定義的類型，其中或從中<xref:System.Numerics.BigInteger>物件可以轉換。</span><span class="sxs-lookup"><span data-stu-id="e4975-811">The overloads of the <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> method define the types to which or from which a <xref:System.Numerics.BigInteger> object can be converted.</span></span> <span data-ttu-id="e4975-812">語言編譯器不會執行這項轉換會自動因為它可能會遺失資料。</span><span class="sxs-lookup"><span data-stu-id="e4975-812">Language compilers do not perform this conversion automatically because it can involve data loss.</span></span> <span data-ttu-id="e4975-813">相反地，它們執行轉換 （在 C# 中) 轉型運算子或轉換函式時，才可以 (例如`CType`或`CInt`Visual Basic 中) 使用。</span><span class="sxs-lookup"><span data-stu-id="e4975-813">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` or `CInt` in Visual Basic) is used.</span></span> <span data-ttu-id="e4975-814">否則，它們會顯示編譯器錯誤。</span><span class="sxs-lookup"><span data-stu-id="e4975-814">Otherwise, they display a compiler error.</span></span>   

 <span data-ttu-id="e4975-815">由於這項作業定義的縮小轉換，仍會擲回<xref:System.OverflowException>如果在執行階段<xref:System.Numerics.BigInteger>的值超出範圍<xref:System.Int32>資料型別。</span><span class="sxs-lookup"><span data-stu-id="e4975-815">Because this operation defines a narrowing conversion, it can throw an <xref:System.OverflowException> at run time if the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.Int32> data type.</span></span> <span data-ttu-id="e4975-816">不會在產生的有效位數遺失任何<xref:System.Int16>值，如果轉換成功。</span><span class="sxs-lookup"><span data-stu-id="e4975-816">There is no loss of precision in the resulting <xref:System.Int16> value if the conversion is successful.</span></span>

## Examples
 <span data-ttu-id="e4975-817">下列範例說明轉換<xref:System.Numerics.BigInteger>至<xref:System.Int32>值。</span><span class="sxs-lookup"><span data-stu-id="e4975-817">The following example illustrates the conversion of <xref:System.Numerics.BigInteger> to <xref:System.Int32> values.</span></span> <span data-ttu-id="e4975-818">它也會處理<xref:System.OverflowException>因為擲回<xref:System.Numerics.BigInteger>的值超出範圍<xref:System.Int32>資料型別。</span><span class="sxs-lookup"><span data-stu-id="e4975-818">It also handles an <xref:System.OverflowException> that is thrown because the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.Int32> data type.</span></span>   
    
 [!code-csharp[System.Numeric.BigInteger.Explicit#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/cs/System.Numeric.BigInteger.Explicit.cs#5)]   
 [!code-vb[System.Numeric.BigInteger.Explicit#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/vb/System.Numeric.BigInteger.Explicit.vb#5)]   

 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="e4975-819"><paramref name="value" /> 值小於 <see cref="F:System.Int32.MinValue" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-819">The value of <paramref name="value" /> is less than <see cref="F:System.Int32.MinValue" />.</span></span>  
  
<span data-ttu-id="e4975-820">-或-</span><span class="sxs-lookup"><span data-stu-id="e4975-820">-or-</span></span> 
<span data-ttu-id="e4975-821"><paramref name="value" /> 值大於 <see cref="F:System.Int32.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-821">The value of <paramref name="value" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator long (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname int64 op_Explicit(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Int64" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As BigInteger) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator long(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Numerics.BigInteger -&gt; int64" Usage="System.Numerics.BigInteger.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e4975-822">要轉換為 64 位元帶正負號整數的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-822">The value to convert to a 64-bit signed integer.</span></span></param>
        <summary><span data-ttu-id="e4975-823">定義從 <see cref="T:System.Numerics.BigInteger" /> 物件到 64 位元帶正負號整數值的明確轉換。</span><span class="sxs-lookup"><span data-stu-id="e4975-823">Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to a 64-bit signed integer value.</span></span></summary>
        <returns><span data-ttu-id="e4975-824">物件，包含 <paramref name="value" /> 參數的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-824">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-825">多載<xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger>方法定義的類型，其中或從中<xref:System.Numerics.BigInteger>物件可以轉換。</span><span class="sxs-lookup"><span data-stu-id="e4975-825">The overloads of the <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> method define the types to which or from which a <xref:System.Numerics.BigInteger> object can be converted.</span></span> <span data-ttu-id="e4975-826">語言編譯器不會執行這項轉換會自動因為它可能會遺失資料。</span><span class="sxs-lookup"><span data-stu-id="e4975-826">Language compilers do not perform this conversion automatically because it can involve data loss.</span></span> <span data-ttu-id="e4975-827">相反地，它們執行轉換 （在 C# 中) 轉型運算子或轉換函式時，才可以 (例如`CType`或`CLng`Visual Basic 中) 使用。</span><span class="sxs-lookup"><span data-stu-id="e4975-827">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` or `CLng` in Visual Basic) is used.</span></span> <span data-ttu-id="e4975-828">否則，它們會顯示編譯器錯誤。</span><span class="sxs-lookup"><span data-stu-id="e4975-828">Otherwise, they display a compiler error.</span></span>  

 <span data-ttu-id="e4975-829">由於這項作業定義的縮小轉換，仍會擲回<xref:System.OverflowException>如果在執行階段<xref:System.Numerics.BigInteger>的值超出範圍<xref:System.Int64>資料型別。</span><span class="sxs-lookup"><span data-stu-id="e4975-829">Because this operation defines a narrowing conversion, it can throw an <xref:System.OverflowException> at run time if the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.Int64> data type.</span></span> 

## Examples
 <span data-ttu-id="e4975-830">下列範例說明轉換<xref:System.Numerics.BigInteger>至<xref:System.Int64>值。</span><span class="sxs-lookup"><span data-stu-id="e4975-830">The following example illustrates the conversion of <xref:System.Numerics.BigInteger> to <xref:System.Int64> values.</span></span> <span data-ttu-id="e4975-831">它也會處理<xref:System.OverflowException>因為擲回<xref:System.Numerics.BigInteger>的值超出範圍<xref:System.Int64>資料型別。</span><span class="sxs-lookup"><span data-stu-id="e4975-831">It also handles an <xref:System.OverflowException> that is thrown because the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.Int64> data type.</span></span>   
    
 [!code-csharp[System.Numeric.BigInteger.Explicit#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/cs/System.Numeric.BigInteger.Explicit.cs#6)]   
 [!code-vb[System.Numeric.BigInteger.Explicit#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/vb/System.Numeric.BigInteger.Explicit.vb#6)]   

 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="e4975-832"><paramref name="value" /> 值小於 <see cref="F:System.Int64.MinValue" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-832">The value of <paramref name="value" /> is less than <see cref="F:System.Int64.MinValue" />.</span></span>  
  
<span data-ttu-id="e4975-833">-或-</span><span class="sxs-lookup"><span data-stu-id="e4975-833">-or-</span></span> 
<span data-ttu-id="e4975-834"><paramref name="value" /> 值大於 <see cref="F:System.Int64.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-834">The value of <paramref name="value" /> is greater than <see cref="F:System.Int64.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator sbyte (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname int8 op_Explicit(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.SByte" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As BigInteger) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::SByte(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Numerics.BigInteger -&gt; sbyte" Usage="System.Numerics.BigInteger.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e4975-835">要轉換為帶正負號 8 位元值的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-835">The value to convert to a signed 8-bit value.</span></span></param>
        <summary><span data-ttu-id="e4975-836">定義從 <see cref="T:System.Numerics.BigInteger" /> 物件到帶正負號 8 位元值的明確轉換。</span><span class="sxs-lookup"><span data-stu-id="e4975-836">Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to a signed 8-bit value.</span></span>  
  
<span data-ttu-id="e4975-837">此應用程式開發介面不符合 CLS 標準。</span><span class="sxs-lookup"><span data-stu-id="e4975-837">This API is not CLS-compliant.</span></span> <span data-ttu-id="e4975-838">符合規範的替代項目為 <see cref="T:System.Int16" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-838">The compliant alternative is <see cref="T:System.Int16" />.</span></span></summary>
        <returns><span data-ttu-id="e4975-839">物件，包含 <paramref name="value" /> 參數的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-839">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-840">多載<xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger>方法定義的類型，其中或從中<xref:System.Numerics.BigInteger>物件可以轉換。</span><span class="sxs-lookup"><span data-stu-id="e4975-840">The overloads of the <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> method define the types to which or from which a <xref:System.Numerics.BigInteger> object can be converted.</span></span> <span data-ttu-id="e4975-841">語言編譯器不會執行這項轉換會自動因為它可能會遺失資料。</span><span class="sxs-lookup"><span data-stu-id="e4975-841">Language compilers do not perform this conversion automatically because it can involve data loss.</span></span> <span data-ttu-id="e4975-842">相反地，它們執行轉換 （在 C# 中) 轉型運算子或轉換函式時，才可以 (例如`CType`或`CSByte`Visual Basic 中) 使用。</span><span class="sxs-lookup"><span data-stu-id="e4975-842">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` or `CSByte` in Visual Basic) is used.</span></span> <span data-ttu-id="e4975-843">否則，它們會顯示編譯器錯誤。</span><span class="sxs-lookup"><span data-stu-id="e4975-843">Otherwise, they display a compiler error.</span></span>  

 <span data-ttu-id="e4975-844">由於這項作業定義的縮小轉換，仍會擲回<xref:System.OverflowException>如果在執行階段<xref:System.Numerics.BigInteger>的值超出範圍<xref:System.SByte>資料型別。</span><span class="sxs-lookup"><span data-stu-id="e4975-844">Because this operation defines a narrowing conversion, it can throw an <xref:System.OverflowException> at run time if the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.SByte> data type.</span></span> <span data-ttu-id="e4975-845">不會在產生的有效位數遺失任何<xref:System.SByte>值，如果轉換成功。</span><span class="sxs-lookup"><span data-stu-id="e4975-845">There is no loss of precision in the resulting <xref:System.SByte> value if the conversion is successful.</span></span>

## Examples
 <span data-ttu-id="e4975-846">下列範例說明轉換<xref:System.Numerics.BigInteger>至<xref:System.SByte>值。</span><span class="sxs-lookup"><span data-stu-id="e4975-846">The following example illustrates the conversion of <xref:System.Numerics.BigInteger> to <xref:System.SByte> values.</span></span> <span data-ttu-id="e4975-847">它也會處理<xref:System.OverflowException>因為擲回<xref:System.Numerics.BigInteger>的值超出範圍<xref:System.SByte>資料型別。</span><span class="sxs-lookup"><span data-stu-id="e4975-847">It also handles an <xref:System.OverflowException> that is thrown because the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.SByte> data type.</span></span>   
    
 [!code-csharp[System.Numeric.BigInteger.Explicit#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/cs/System.Numeric.BigInteger.Explicit.cs#7)]   
 [!code-vb[System.Numeric.BigInteger.Explicit#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/vb/System.Numeric.BigInteger.Explicit.vb#7)]   

 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="e4975-848"><paramref name="value" /> 值小於 <see cref="F:System.SByte.MinValue" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-848">The value of <paramref name="value" /> is less than <see cref="F:System.SByte.MinValue" />.</span></span>  
  
<span data-ttu-id="e4975-849">-或-</span><span class="sxs-lookup"><span data-stu-id="e4975-849">-or-</span></span> 
<span data-ttu-id="e4975-850"><paramref name="value" /> 值大於 <see cref="F:System.SByte.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-850">The value of <paramref name="value" /> is greater than <see cref="F:System.SByte.MaxValue" />.</span></span></exception>
        <altCompliant cref="T:System.Int16" />
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator float (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname float32 op_Explicit(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Single" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As BigInteger) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator float(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Numerics.BigInteger -&gt; single" Usage="System.Numerics.BigInteger.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e4975-851">要轉換為單精確度浮點值的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-851">The value to convert to a single-precision floating-point value.</span></span></param>
        <summary><span data-ttu-id="e4975-852">定義從 <see cref="T:System.Numerics.BigInteger" /> 物件到單精確度浮點值的明確轉換。</span><span class="sxs-lookup"><span data-stu-id="e4975-852">Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to a single-precision floating-point value.</span></span></summary>
        <returns><span data-ttu-id="e4975-853">物件，包含 <paramref name="value" /> 參數的最接近的可能表示。</span><span class="sxs-lookup"><span data-stu-id="e4975-853">An object that contains the closest possible representation of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-854">多載<xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger>方法定義的類型，其中或從中<xref:System.Numerics.BigInteger>物件可以轉換。</span><span class="sxs-lookup"><span data-stu-id="e4975-854">The overloads of the <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> method define the types to which or from which a <xref:System.Numerics.BigInteger> object can be converted.</span></span> <span data-ttu-id="e4975-855">語言編譯器不會執行這項轉換會自動因為可能遺失資料或遺失有效位數。</span><span class="sxs-lookup"><span data-stu-id="e4975-855">Language compilers do not perform this conversion automatically because it can involve data loss or a loss of precision.</span></span> <span data-ttu-id="e4975-856">相反地，它們執行轉換 （在 C# 中) 轉型運算子或轉換函式時，才可以 (例如`CType`或`CSng`Visual Basic 中) 使用。</span><span class="sxs-lookup"><span data-stu-id="e4975-856">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` or `CSng` in Visual Basic) is used.</span></span> <span data-ttu-id="e4975-857">否則，它們會顯示編譯器錯誤。</span><span class="sxs-lookup"><span data-stu-id="e4975-857">Otherwise, they display a compiler error.</span></span>    

 <span data-ttu-id="e4975-858">因為<xref:System.Numerics.BigInteger>值可以是範圍之外的<xref:System.Single>資料類型，這項作業是縮小轉換。</span><span class="sxs-lookup"><span data-stu-id="e4975-858">Because the <xref:System.Numerics.BigInteger> value can be outside the range of the <xref:System.Single> data type, this operation is a narrowing conversion.</span></span> <span data-ttu-id="e4975-859">如果轉換失敗，它不會擲回<xref:System.OverflowException>。</span><span class="sxs-lookup"><span data-stu-id="e4975-859">If the conversion is unsuccessful, it does not throw an <xref:System.OverflowException>.</span></span> <span data-ttu-id="e4975-860">相反地，如果<xref:System.Numerics.BigInteger>值是小於<xref:System.Single.MinValue?displayProperty=nameWithType>，產生<xref:System.Single>的值是<xref:System.Single.NegativeInfinity?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="e4975-860">Instead, if the <xref:System.Numerics.BigInteger> value is less than <xref:System.Single.MinValue?displayProperty=nameWithType>, the resulting <xref:System.Single> value is <xref:System.Single.NegativeInfinity?displayProperty=nameWithType>.</span></span> <span data-ttu-id="e4975-861">如果<xref:System.Numerics.BigInteger>值大於<xref:System.Single.MaxValue?displayProperty=nameWithType>，產生<xref:System.Single>的值是<xref:System.Single.PositiveInfinity?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="e4975-861">If the <xref:System.Numerics.BigInteger> value is greater than <xref:System.Single.MaxValue?displayProperty=nameWithType>, the resulting <xref:System.Single> value is <xref:System.Single.PositiveInfinity?displayProperty=nameWithType>.</span></span>

 <span data-ttu-id="e4975-862">轉換<xref:System.Numerics.BigInteger>至<xref:System.Single>可能會遺失有效位數。</span><span class="sxs-lookup"><span data-stu-id="e4975-862">The conversion of a <xref:System.Numerics.BigInteger> to a <xref:System.Single> may involve a loss of precision.</span></span> <span data-ttu-id="e4975-863">在某些情況下，遺失有效位數可能會導致成功轉型或轉換作業即使<xref:System.Numerics.BigInteger>的值超出範圍<xref:System.Single>資料型別。</span><span class="sxs-lookup"><span data-stu-id="e4975-863">In some cases, the loss of precision may cause the casting or conversion operation to succeed even if the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.Single> data type.</span></span> <span data-ttu-id="e4975-864">下列範例提供一個實例。</span><span class="sxs-lookup"><span data-stu-id="e4975-864">The following example provides an illustration.</span></span> <span data-ttu-id="e4975-865">它會將指派的最大值<xref:System.Single>有兩個<xref:System.Numerics.BigInteger>變數，會遞增一個<xref:System.Numerics.BigInteger>9.999e291，然後測試是否相等的兩個變數的變數。</span><span class="sxs-lookup"><span data-stu-id="e4975-865">It assigns the maximum value of a <xref:System.Single> to two <xref:System.Numerics.BigInteger> variables, increments one <xref:System.Numerics.BigInteger> variable by 9.999e291, and tests the two variables for equality.</span></span> <span data-ttu-id="e4975-866">如預期般呼叫<xref:System.Numerics.BigInteger.Equals%28System.Numerics.BigInteger%29?displayProperty=nameWithType>方法會顯示不相等。</span><span class="sxs-lookup"><span data-stu-id="e4975-866">As expected, the call to the <xref:System.Numerics.BigInteger.Equals%28System.Numerics.BigInteger%29?displayProperty=nameWithType> method shows that they are unequal.</span></span> <span data-ttu-id="e4975-867">不過，較大的轉換<xref:System.Numerics.BigInteger>值反向<xref:System.Single>成功，雖然<xref:System.Numerics.BigInteger>值現在超過<xref:System.Single.MaxValue?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="e4975-867">However, the conversion of the larger <xref:System.Numerics.BigInteger> value back to a <xref:System.Single> succeeds, although the <xref:System.Numerics.BigInteger> value now exceeds <xref:System.Single.MaxValue?displayProperty=nameWithType>.</span></span>   
    
 [!code-csharp[System.Numerics.BigInteger.Explicit#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Explicit/cs/Explicit1.cs#5)]   
 [!code-vb[System.Numerics.BigInteger.Explicit#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Explicit/vb/Explicit1.vb#5)]   



## Examples
 <span data-ttu-id="e4975-868">下列範例說明轉換<xref:System.Numerics.BigInteger>至<xref:System.Single>值。</span><span class="sxs-lookup"><span data-stu-id="e4975-868">The following example illustrates the conversion of <xref:System.Numerics.BigInteger> to <xref:System.Single> values.</span></span>   
     
 [!code-csharp[System.Numeric.BigInteger.Explicit#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/cs/System.Numeric.BigInteger.Explicit.cs#8)]   
 [!code-vb[System.Numeric.BigInteger.Explicit#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/vb/System.Numeric.BigInteger.Explicit.vb#8)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator ushort (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname unsigned int16 op_Explicit(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UInt16" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As BigInteger) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::UInt16(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Numerics.BigInteger -&gt; uint16" Usage="System.Numerics.BigInteger.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e4975-869">要轉換為不帶正負號 16 位元整數的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-869">The value to convert to an unsigned 16-bit integer.</span></span></param>
        <summary><span data-ttu-id="e4975-870">定義從 <see cref="T:System.Numerics.BigInteger" /> 物件到不帶正負號 16 位元整數值的明確轉換。</span><span class="sxs-lookup"><span data-stu-id="e4975-870">Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to an unsigned 16-bit integer value.</span></span>  
  
<span data-ttu-id="e4975-871">此應用程式開發介面不符合 CLS 標準。</span><span class="sxs-lookup"><span data-stu-id="e4975-871">This API is not CLS-compliant.</span></span> <span data-ttu-id="e4975-872">符合規範的替代項目為 <see cref="T:System.Int32" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-872">The compliant alternative is <see cref="T:System.Int32" />.</span></span></summary>
        <returns><span data-ttu-id="e4975-873">物件，包含 <paramref name="value" /> 參數的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-873">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-874">多載<xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger>方法定義的類型，其中或從中<xref:System.Numerics.BigInteger>物件可以轉換。</span><span class="sxs-lookup"><span data-stu-id="e4975-874">The overloads of the <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> method define the types to which or from which a <xref:System.Numerics.BigInteger> object can be converted.</span></span> <span data-ttu-id="e4975-875">語言編譯器不會執行這項轉換會自動因為它可能會遺失資料。</span><span class="sxs-lookup"><span data-stu-id="e4975-875">Language compilers do not perform this conversion automatically because it can involve data loss.</span></span> <span data-ttu-id="e4975-876">相反地，它們執行轉換 （在 C# 中) 轉型運算子或轉換函式時，才可以 (例如`CType`或`CUShort`Visual Basic 中) 使用。</span><span class="sxs-lookup"><span data-stu-id="e4975-876">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` or `CUShort` in Visual Basic) is used.</span></span> <span data-ttu-id="e4975-877">否則，它們會顯示編譯器錯誤。</span><span class="sxs-lookup"><span data-stu-id="e4975-877">Otherwise, they display a compiler error.</span></span>    

 <span data-ttu-id="e4975-878">由於這項作業定義的縮小轉換，仍會擲回<xref:System.OverflowException>如果在執行階段<xref:System.Numerics.BigInteger>的值超出範圍<xref:System.UInt16>資料型別。</span><span class="sxs-lookup"><span data-stu-id="e4975-878">Because this operation defines a narrowing conversion, it can throw an <xref:System.OverflowException> at run time if the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.UInt16> data type.</span></span> <span data-ttu-id="e4975-879">不會在產生的有效位數遺失任何<xref:System.UInt16>值，如果轉換成功。</span><span class="sxs-lookup"><span data-stu-id="e4975-879">There is no loss of precision in the resulting <xref:System.UInt16> value if the conversion is successful.</span></span>

## Examples
 <span data-ttu-id="e4975-880">下列範例說明轉換<xref:System.Numerics.BigInteger>至<xref:System.UInt16>值。</span><span class="sxs-lookup"><span data-stu-id="e4975-880">The following example illustrates the conversion of <xref:System.Numerics.BigInteger> to <xref:System.UInt16> values.</span></span> <span data-ttu-id="e4975-881">它也會處理<xref:System.OverflowException>因為擲回<xref:System.Numerics.BigInteger>的值超出範圍<xref:System.UInt16>資料型別。</span><span class="sxs-lookup"><span data-stu-id="e4975-881">It also handles an <xref:System.OverflowException> that is thrown because the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.UInt16> data type.</span></span>   
    
 [!code-csharp[System.Numeric.BigInteger.Explicit#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/cs/System.Numeric.BigInteger.Explicit.cs#9)]   
 [!code-vb[System.Numeric.BigInteger.Explicit#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/vb/System.Numeric.BigInteger.Explicit.vb#9)]   

 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="e4975-882"><paramref name="value" /> 值小於 <see cref="F:System.UInt16.MinValue" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-882">The value of <paramref name="value" /> is less than <see cref="F:System.UInt16.MinValue" />.</span></span>  
  
<span data-ttu-id="e4975-883">-或-</span><span class="sxs-lookup"><span data-stu-id="e4975-883">-or-</span></span> 
<span data-ttu-id="e4975-884"><paramref name="value" /> 值大於 <see cref="F:System.UInt16.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-884">The value of <paramref name="value" /> is greater than <see cref="F:System.UInt16.MaxValue" />.</span></span></exception>
        <altCompliant cref="T:System.Int32" />
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator uint (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname unsigned int32 op_Explicit(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UInt32" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As BigInteger) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::UInt32(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Numerics.BigInteger -&gt; uint32" Usage="System.Numerics.BigInteger.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e4975-885">要轉換為不帶正負號 32 位元整數的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-885">The value to convert to an unsigned 32-bit integer.</span></span></param>
        <summary><span data-ttu-id="e4975-886">定義從 <see cref="T:System.Numerics.BigInteger" /> 物件到不帶正負號 32 位元整數值的明確轉換。</span><span class="sxs-lookup"><span data-stu-id="e4975-886">Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to an unsigned 32-bit integer value.</span></span>  
  
<span data-ttu-id="e4975-887">此應用程式開發介面不符合 CLS 標準。</span><span class="sxs-lookup"><span data-stu-id="e4975-887">This API is not CLS-compliant.</span></span> <span data-ttu-id="e4975-888">符合規範的替代項目為 <see cref="T:System.Int64" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-888">The compliant alternative is <see cref="T:System.Int64" />.</span></span></summary>
        <returns><span data-ttu-id="e4975-889">物件，包含 <paramref name="value" /> 參數的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-889">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-890">多載<xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger>方法定義的類型，其中或從中<xref:System.Numerics.BigInteger>物件可以轉換。</span><span class="sxs-lookup"><span data-stu-id="e4975-890">The overloads of the <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> method define the types to which or from which a <xref:System.Numerics.BigInteger> object can be converted.</span></span> <span data-ttu-id="e4975-891">語言編譯器不會執行這項轉換會自動因為它可能會遺失資料。</span><span class="sxs-lookup"><span data-stu-id="e4975-891">Language compilers do not perform this conversion automatically because it can involve data loss.</span></span> <span data-ttu-id="e4975-892">相反地，它們執行轉換 （在 C# 中) 轉型運算子或轉換函式時，才可以 (例如`CType`或`CUInt`Visual Basic 中) 使用。</span><span class="sxs-lookup"><span data-stu-id="e4975-892">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` or `CUInt` in Visual Basic) is used.</span></span> <span data-ttu-id="e4975-893">否則，它們會顯示編譯器錯誤。</span><span class="sxs-lookup"><span data-stu-id="e4975-893">Otherwise, they display a compiler error.</span></span>    

 <span data-ttu-id="e4975-894">由於這項作業定義的縮小轉換，仍會擲回<xref:System.OverflowException>如果在執行階段<xref:System.Numerics.BigInteger>的值超出範圍<xref:System.UInt32>資料型別。</span><span class="sxs-lookup"><span data-stu-id="e4975-894">Because this operation defines a narrowing conversion, it can throw an <xref:System.OverflowException> at run time if the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.UInt32> data type.</span></span> <span data-ttu-id="e4975-895">不會在產生的有效位數遺失任何<xref:System.UInt32>值，如果轉換成功。</span><span class="sxs-lookup"><span data-stu-id="e4975-895">There is no loss of precision in the resulting <xref:System.UInt32> value if the conversion is successful.</span></span>

## Examples
 <span data-ttu-id="e4975-896">下列範例說明轉換<xref:System.Numerics.BigInteger>至<xref:System.UInt32>值。</span><span class="sxs-lookup"><span data-stu-id="e4975-896">The following example illustrates the conversion of <xref:System.Numerics.BigInteger> to <xref:System.UInt32> values.</span></span> <span data-ttu-id="e4975-897">它也會處理<xref:System.OverflowException>因為擲回<xref:System.Numerics.BigInteger>的值超出範圍<xref:System.UInt32>資料型別。</span><span class="sxs-lookup"><span data-stu-id="e4975-897">It also handles an <xref:System.OverflowException> that is thrown because the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.UInt32> data type.</span></span>   
    
 [!code-csharp[System.Numeric.BigInteger.Explicit#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/cs/System.Numeric.BigInteger.Explicit.cs#10)]   
 [!code-vb[System.Numeric.BigInteger.Explicit#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/vb/System.Numeric.BigInteger.Explicit.vb#10)]   

 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="e4975-898"><paramref name="value" /> 值小於 <see cref="F:System.UInt32.MinValue" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-898">The value of <paramref name="value" /> is less than <see cref="F:System.UInt32.MinValue" />.</span></span>  
  
<span data-ttu-id="e4975-899">-或-</span><span class="sxs-lookup"><span data-stu-id="e4975-899">-or-</span></span> 
<span data-ttu-id="e4975-900"><paramref name="value" /> 值大於 <see cref="F:System.UInt32.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-900">The value of <paramref name="value" /> is greater than <see cref="F:System.UInt32.MaxValue" />.</span></span></exception>
        <altCompliant cref="T:System.Int64" />
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator ulong (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname unsigned int64 op_Explicit(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UInt64" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As BigInteger) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::UInt64(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Numerics.BigInteger -&gt; uint64" Usage="System.Numerics.BigInteger.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e4975-901">要轉換為不帶正負號 64 位元整數的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-901">The value to convert to an unsigned 64-bit integer.</span></span></param>
        <summary><span data-ttu-id="e4975-902">定義從 <see cref="T:System.Numerics.BigInteger" /> 物件到不帶正負號 64 位元整數值的明確轉換。</span><span class="sxs-lookup"><span data-stu-id="e4975-902">Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to an unsigned 64-bit integer value.</span></span>  
  
<span data-ttu-id="e4975-903">此應用程式開發介面不符合 CLS 標準。</span><span class="sxs-lookup"><span data-stu-id="e4975-903">This API is not CLS-compliant.</span></span> <span data-ttu-id="e4975-904">符合規範的替代項目為 <see cref="T:System.Double" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-904">The compliant alternative is <see cref="T:System.Double" />.</span></span></summary>
        <returns><span data-ttu-id="e4975-905">物件，包含 <paramref name="value" /> 參數的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-905">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-906">多載<xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger>方法定義的類型，其中或從中<xref:System.Numerics.BigInteger>物件可以轉換。</span><span class="sxs-lookup"><span data-stu-id="e4975-906">The overloads of the <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> method define the types to which or from which a <xref:System.Numerics.BigInteger> object can be converted.</span></span> <span data-ttu-id="e4975-907">語言編譯器不會執行這項轉換會自動因為它可能會遺失資料。</span><span class="sxs-lookup"><span data-stu-id="e4975-907">Language compilers do not perform this conversion automatically because it can involve data loss.</span></span> <span data-ttu-id="e4975-908">相反地，它們執行轉換 （在 C# 中) 轉型運算子或轉換函式時，才可以 (例如`CType`或`CULng`Visual Basic 中) 使用。</span><span class="sxs-lookup"><span data-stu-id="e4975-908">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` or `CULng` in Visual Basic) is used.</span></span> <span data-ttu-id="e4975-909">否則，它們會顯示編譯器錯誤。</span><span class="sxs-lookup"><span data-stu-id="e4975-909">Otherwise, they display a compiler error.</span></span>    

 <span data-ttu-id="e4975-910">由於這項作業定義的縮小轉換，仍會擲回<xref:System.OverflowException>如果在執行階段<xref:System.Numerics.BigInteger>的值超出範圍<xref:System.UInt64>資料型別。</span><span class="sxs-lookup"><span data-stu-id="e4975-910">Because this operation defines a narrowing conversion, it can throw an <xref:System.OverflowException> at run time if the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.UInt64> data type.</span></span> <span data-ttu-id="e4975-911">不會在產生的有效位數遺失任何<xref:System.UInt64>值，如果轉換成功。</span><span class="sxs-lookup"><span data-stu-id="e4975-911">There is no loss of precision in the resulting <xref:System.UInt64> value if the conversion is successful.</span></span>

## Examples
 <span data-ttu-id="e4975-912">下列範例說明轉換<xref:System.Numerics.BigInteger>至<xref:System.UInt64>值。</span><span class="sxs-lookup"><span data-stu-id="e4975-912">The following example illustrates the conversion of <xref:System.Numerics.BigInteger> to <xref:System.UInt64> values.</span></span> <span data-ttu-id="e4975-913">它也會處理<xref:System.OverflowException>因為擲回<xref:System.Numerics.BigInteger>的值超出範圍<xref:System.UInt64>資料型別。</span><span class="sxs-lookup"><span data-stu-id="e4975-913">It also handles an <xref:System.OverflowException> that is thrown because the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.UInt64> data type.</span></span>   
    
 [!code-csharp[System.Numeric.BigInteger.Explicit#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/cs/System.Numeric.BigInteger.Explicit.cs#11)]   
 [!code-vb[System.Numeric.BigInteger.Explicit#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/vb/System.Numeric.BigInteger.Explicit.vb#11)]   

 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="e4975-914"><paramref name="value" /> 值小於 <see cref="F:System.UInt64.MinValue" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-914">The value of <paramref name="value" /> is less than <see cref="F:System.UInt64.MinValue" />.</span></span>  
  
<span data-ttu-id="e4975-915">-或-</span><span class="sxs-lookup"><span data-stu-id="e4975-915">-or-</span></span> 
<span data-ttu-id="e4975-916"><paramref name="value" /> 值大於 <see cref="F:System.UInt64.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-916">The value of <paramref name="value" /> is greater than <see cref="F:System.UInt64.MaxValue" />.</span></span></exception>
        <altCompliant cref="T:System.Double" />
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator System.Numerics.BigInteger (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Explicit(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Single)~System.Numerics.BigInteger" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As Single) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Numerics::BigInteger(float value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : single -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e4975-917">要轉換為 <see cref="T:System.Numerics.BigInteger" /> 的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-917">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</span></span></param>
        <summary><span data-ttu-id="e4975-918">定義從 <see cref="T:System.Single" /> 值到 <see cref="T:System.Numerics.BigInteger" /> 值的明確轉換。</span><span class="sxs-lookup"><span data-stu-id="e4975-918">Defines an explicit conversion of a <see cref="T:System.Single" /> value to a <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="e4975-919">物件，包含 <paramref name="value" /> 參數的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-919">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-920">任何小數部分`value`轉換前的參數會被截斷。</span><span class="sxs-lookup"><span data-stu-id="e4975-920">Any fractional part of the `value` parameter is truncated before conversion.</span></span>
 
 <span data-ttu-id="e4975-921">多載<xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger>方法定義的類型，其中或從中<xref:System.Numerics.BigInteger>物件可以轉換。</span><span class="sxs-lookup"><span data-stu-id="e4975-921">The overloads of the <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> method define the types to which or from which a <xref:System.Numerics.BigInteger> object can be converted.</span></span> <span data-ttu-id="e4975-922">因為從轉換<xref:System.Single>要<xref:System.Numerics.BigInteger>可能是截斷的任何小數部分`value`，語言編譯器不要自動執行這項轉換。</span><span class="sxs-lookup"><span data-stu-id="e4975-922">Because the conversion from <xref:System.Single> to <xref:System.Numerics.BigInteger> can involve truncating any fractional part of `value`, language compilers do not perform this conversion automatically.</span></span> <span data-ttu-id="e4975-923">相反地，它們執行轉換 （在 C# 中) 轉型運算子或轉換函式時，才可以 (例如`CType`Visual Basic 中) 使用。</span><span class="sxs-lookup"><span data-stu-id="e4975-923">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` in Visual Basic) is used.</span></span> <span data-ttu-id="e4975-924">否則，它們會顯示編譯器錯誤。</span><span class="sxs-lookup"><span data-stu-id="e4975-924">Otherwise, they display a compiler error.</span></span>

 <span data-ttu-id="e4975-925">不支援自訂運算子的語言，另一種方法是<xref:System.Numerics.BigInteger.%23ctor%28System.Single%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="e4975-925">For languages that do not support custom operators, the alternative method is <xref:System.Numerics.BigInteger.%23ctor%28System.Single%29?displayProperty=nameWithType>.</span></span>


## Examples
 <span data-ttu-id="e4975-926">下列範例會將陣列中的個別項目<xref:System.Single>值來<xref:System.Numerics.BigInteger>物件，並接著會顯示每個轉換的結果。</span><span class="sxs-lookup"><span data-stu-id="e4975-926">The following example converts the individual elements in an array of <xref:System.Single> values to <xref:System.Numerics.BigInteger> objects, and then displays the result of each conversion.</span></span> <span data-ttu-id="e4975-927">請注意，任何小數部分的<xref:System.Single>在轉換期間截斷值。</span><span class="sxs-lookup"><span data-stu-id="e4975-927">Note that any fractional part of a <xref:System.Single> value is truncated during the conversion.</span></span>
 
 [!code-csharp[System.Numerics.BigInteger.Explicit#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Explicit/cs/Explicit1.cs#3)]   
 [!code-vb[System.Numerics.BigInteger.Explicit#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Explicit/vb/Explicit1.vb#3)]   

 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="e4975-928"><paramref name="value" /> 的值是 <see cref="F:System.Single.NaN" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-928">The value of <paramref name="value" /> is <see cref="F:System.Single.NaN" />.</span></span>  
  
<span data-ttu-id="e4975-929">-或-</span><span class="sxs-lookup"><span data-stu-id="e4975-929">-or-</span></span> 
<span data-ttu-id="e4975-930"><paramref name="value" /> 的值是 <see cref="F:System.Single.PositiveInfinity" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-930">The value of <paramref name="value" /> is <see cref="F:System.Single.PositiveInfinity" />.</span></span>
  
<span data-ttu-id="e4975-931">-或-</span><span class="sxs-lookup"><span data-stu-id="e4975-931">-or-</span></span> 
<span data-ttu-id="e4975-932"><paramref name="value" /> 的值是 <see cref="F:System.Single.NegativeInfinity" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-932">The value of <paramref name="value" /> is <see cref="F:System.Single.NegativeInfinity" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_GreaterThan">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e4975-933">傳回值，這個值表示指定的值是否大於另一個指定的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-933">Returns a value that indicates whether a specified value is greater than another specified value.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool operator &gt; (long left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(int64 left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_GreaterThan(System.Int64,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt; (left As Long, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;(long left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( &gt; ) : int64 * System.Numerics.BigInteger -&gt; bool" Usage="left &gt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Int64" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="e4975-934">要比較的第一個值。</span><span class="sxs-lookup"><span data-stu-id="e4975-934">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="e4975-935">要比較的第二個值。</span><span class="sxs-lookup"><span data-stu-id="e4975-935">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="e4975-936">傳回值，這個值表示 64 位元帶正負號的整數是否大於 <see cref="T:System.Numerics.BigInteger" /> 值。</span><span class="sxs-lookup"><span data-stu-id="e4975-936">Returns a value that indicates whether a 64-bit signed integer is greater than a <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="e4975-937">如果 <see langword="true" /> 大於 <paramref name="left" /> 則為 <paramref name="right" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-937"><see langword="true" /> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-938"><xref:System.Numerics.BigInteger.op_GreaterThan%2A>方法定義的作業 greater than 運算子<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="e4975-938">The <xref:System.Numerics.BigInteger.op_GreaterThan%2A> method defines the operation of the greater than operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="e4975-939">它可讓程式碼，如下所示：</span><span class="sxs-lookup"><span data-stu-id="e4975-939">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#9)]
 [!code-vb[System.Numerics.BigInteger.Operators#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#9)]  
  
 <span data-ttu-id="e4975-940">不支援自訂運算子的語言可以呼叫<xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>改為執行個體方法。</span><span class="sxs-lookup"><span data-stu-id="e4975-940">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> instance method instead.</span></span> <span data-ttu-id="e4975-941">某些語言也可以呼叫<xref:System.Numerics.BigInteger.op_GreaterThan%28System.Int64%2CSystem.Numerics.BigInteger%29>方法直接，如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="e4975-941">Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThan%28System.Int64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#10)]  
  
 <span data-ttu-id="e4975-942">如果`left`已<xref:System.Byte>， <xref:System.Int16>， <xref:System.Int32>， <xref:System.SByte>， <xref:System.UInt16>，或<xref:System.UInt32>的值，則會隱含地轉換成<xref:System.Int64>值執行作業時。</span><span class="sxs-lookup"><span data-stu-id="e4975-942">If `left` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.</span></span>  
  
 <span data-ttu-id="e4975-943">這個運算子的對等方法是<xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="e4975-943">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_GreaterThanOrEqual" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool operator &gt; (System.Numerics.BigInteger left, long right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(valuetype System.Numerics.BigInteger left, int64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt; (left As BigInteger, right As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;(System::Numerics::BigInteger left, long right);" />
      <MemberSignature Language="F#" Value="static member ( &gt; ) : System.Numerics.BigInteger * int64 -&gt; bool" Usage="left &gt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="e4975-944">要比較的第一個值。</span><span class="sxs-lookup"><span data-stu-id="e4975-944">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="e4975-945">要比較的第二個值。</span><span class="sxs-lookup"><span data-stu-id="e4975-945">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="e4975-946">傳回值，這個值表示 <see cref="T:System.Numerics.BigInteger" /> 是否大於 64 位元帶正負號的整數值。</span><span class="sxs-lookup"><span data-stu-id="e4975-946">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> is greater than a 64-bit signed integer value.</span></span></summary>
        <returns><span data-ttu-id="e4975-947">如果 <see langword="true" /> 大於 <paramref name="left" /> 則為 <paramref name="right" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-947"><see langword="true" /> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-948"><xref:System.Numerics.BigInteger.op_GreaterThan%2A>方法定義的作業 greater than 運算子<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="e4975-948">The <xref:System.Numerics.BigInteger.op_GreaterThan%2A> method defines the operation of the greater than operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="e4975-949">它可讓程式碼，如下所示：</span><span class="sxs-lookup"><span data-stu-id="e4975-949">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#11)]
 [!code-vb[System.Numerics.BigInteger.Operators#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#11)]  
  
 <span data-ttu-id="e4975-950">不支援自訂運算子的語言可以呼叫<xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>方法改為。</span><span class="sxs-lookup"><span data-stu-id="e4975-950">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="e4975-951">某些語言也可以呼叫<xref:System.Numerics.BigInteger.op_GreaterThan%28System.Numerics.BigInteger%2CSystem.Int64%29>方法直接，如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="e4975-951">Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThan%28System.Numerics.BigInteger%2CSystem.Int64%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#12)]  
  
 <span data-ttu-id="e4975-952">如果`right`已<xref:System.Byte>， <xref:System.Int16>， <xref:System.Int32>， <xref:System.SByte>， <xref:System.UInt16>，或<xref:System.UInt32>的值，則會隱含地轉換成<xref:System.Int64>值執行作業時。</span><span class="sxs-lookup"><span data-stu-id="e4975-952">If `right` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.</span></span>  
  
 <span data-ttu-id="e4975-953">這個運算子的對等方法是<xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="e4975-953">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_GreaterThanOrEqual" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool operator &gt; (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt; (left As BigInteger, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( &gt; ) : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; bool" Usage="left &gt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="e4975-954">要比較的第一個值。</span><span class="sxs-lookup"><span data-stu-id="e4975-954">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="e4975-955">要比較的第二個值。</span><span class="sxs-lookup"><span data-stu-id="e4975-955">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="e4975-956">傳回值，這個值表示 <see cref="T:System.Numerics.BigInteger" /> 值是否大於另一個 <see cref="T:System.Numerics.BigInteger" /> 值。</span><span class="sxs-lookup"><span data-stu-id="e4975-956">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is greater than another <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="e4975-957">如果 <see langword="true" /> 大於 <paramref name="left" /> 則為 <paramref name="right" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-957"><see langword="true" /> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-958"><xref:System.Numerics.BigInteger.op_GreaterThan%2A>方法定義的作業 greater than 運算子<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="e4975-958">The <xref:System.Numerics.BigInteger.op_GreaterThan%2A> method defines the operation of the greater than operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="e4975-959">它可讓程式碼，如下所示：</span><span class="sxs-lookup"><span data-stu-id="e4975-959">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#20](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#20)]
 [!code-vb[System.Numeric.BigInteger.Class#20](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#20)]  
  
 <span data-ttu-id="e4975-960">不支援自訂運算子的語言可以呼叫<xref:System.Numerics.BigInteger.Compare%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType>方法改為。</span><span class="sxs-lookup"><span data-stu-id="e4975-960">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Compare%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="e4975-961">它們也可以呼叫<xref:System.Numerics.BigInteger.op_GreaterThan%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29>方法直接，如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="e4975-961">They can also call the <xref:System.Numerics.BigInteger.op_GreaterThan%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numeric.BigInteger.Class#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#21)]  
  
 <span data-ttu-id="e4975-962">這個運算子的對等方法是<xref:System.Numerics.BigInteger.CompareTo(System.Numerics.BigInteger)?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="e4975-962">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo(System.Numerics.BigInteger)?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_GreaterThanOrEqual" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool operator &gt; (System.Numerics.BigInteger left, ulong right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(valuetype System.Numerics.BigInteger left, unsigned int64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt; (left As BigInteger, right As ULong) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;(System::Numerics::BigInteger left, System::UInt64 right);" />
      <MemberSignature Language="F#" Value="static member ( &gt; ) : System.Numerics.BigInteger * uint64 -&gt; bool" Usage="left &gt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="e4975-963">要比較的第一個值。</span><span class="sxs-lookup"><span data-stu-id="e4975-963">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="e4975-964">要比較的第二個值。</span><span class="sxs-lookup"><span data-stu-id="e4975-964">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="e4975-965">傳回值，這個值表示 <see cref="T:System.Numerics.BigInteger" /> 值是否大於 64 位元不帶正負號的整數。</span><span class="sxs-lookup"><span data-stu-id="e4975-965">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is greater than a 64-bit unsigned integer.</span></span></summary>
        <returns><span data-ttu-id="e4975-966">如果 <see langword="true" /> 大於 <paramref name="left" /> 則為 <paramref name="right" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-966"><see langword="true" /> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-967"><xref:System.Numerics.BigInteger.op_GreaterThan%2A>方法定義的作業 greater than 運算子<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="e4975-967">The <xref:System.Numerics.BigInteger.op_GreaterThan%2A> method defines the operation of the greater than operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="e4975-968">它可讓程式碼，如下所示：</span><span class="sxs-lookup"><span data-stu-id="e4975-968">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#13)]
 [!code-vb[System.Numerics.BigInteger.Operators#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#13)]  
  
 <span data-ttu-id="e4975-969">不支援自訂運算子的語言可以呼叫<xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>方法改為。</span><span class="sxs-lookup"><span data-stu-id="e4975-969">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="e4975-970">某些語言也可以呼叫<xref:System.Numerics.BigInteger.op_GreaterThan%28System.Numerics.BigInteger%2CSystem.UInt64%29>方法直接，如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="e4975-970">Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThan%28System.Numerics.BigInteger%2CSystem.UInt64%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool operator &gt; (ulong left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(unsigned int64 left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_GreaterThan(System.UInt64,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt; (left As ULong, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;(System::UInt64 left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( &gt; ) : uint64 * System.Numerics.BigInteger -&gt; bool" Usage="left &gt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.UInt64" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="e4975-971">要比較的第一個值。</span><span class="sxs-lookup"><span data-stu-id="e4975-971">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="e4975-972">要比較的第二個值。</span><span class="sxs-lookup"><span data-stu-id="e4975-972">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="e4975-973">傳回值，這個值表示 <see cref="T:System.Numerics.BigInteger" /> 值是否大於 64 位元不帶正負號的整數。</span><span class="sxs-lookup"><span data-stu-id="e4975-973">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is greater than a 64-bit unsigned integer.</span></span></summary>
        <returns><span data-ttu-id="e4975-974">如果 <see langword="true" /> 大於 <paramref name="left" /> 則為 <paramref name="right" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-974"><see langword="true" /> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-975"><xref:System.Numerics.BigInteger.op_GreaterThan%2A>方法定義的作業 greater than 運算子<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="e4975-975">The <xref:System.Numerics.BigInteger.op_GreaterThan%2A> method defines the operation of the greater than operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="e4975-976">它可讓程式碼，如下所示：</span><span class="sxs-lookup"><span data-stu-id="e4975-976">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#15)]
 [!code-vb[System.Numerics.BigInteger.Operators#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#15)]  
  
 <span data-ttu-id="e4975-977">不支援自訂運算子的語言可以呼叫<xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>方法改為。</span><span class="sxs-lookup"><span data-stu-id="e4975-977">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="e4975-978">某些語言也可以呼叫<xref:System.Numerics.BigInteger.op_GreaterThan%28System.UInt64%2CSystem.Numerics.BigInteger%29>方法直接，如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="e4975-978">Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThan%28System.UInt64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_GreaterThanOrEqual" />
      </Docs>
    </Member>
    <MemberGroup MemberName="op_GreaterThanOrEqual">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e4975-979">傳回值，這個值表示指定的值是否大於或等於另一個指定的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-979">Returns a value that indicates whether a specified value is greater than or equal to another specified value.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &gt;= (long left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(int64 left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Int64,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt;= (left As Long, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;=(long left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( &gt;= ) : int64 * System.Numerics.BigInteger -&gt; bool" Usage="left &gt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Int64" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="e4975-980">要比較的第一個值。</span><span class="sxs-lookup"><span data-stu-id="e4975-980">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="e4975-981">要比較的第二個值。</span><span class="sxs-lookup"><span data-stu-id="e4975-981">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="e4975-982">傳回值，這個值表示 64 位元帶正負號的整數是否大於或等於 <see cref="T:System.Numerics.BigInteger" /> 值。</span><span class="sxs-lookup"><span data-stu-id="e4975-982">Returns a value that indicates whether a 64-bit signed integer is greater than or equal to a <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="e4975-983">如果 <see langword="true" /> 大於 <paramref name="left" /> 則為 <paramref name="right" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-983"><see langword="true" /> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-984"><xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A>方法來定義大於或等於運算子的營運<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="e4975-984">The <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A> method defines the operation of the greater than or equal to operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="e4975-985">它可讓程式碼，如下所示：</span><span class="sxs-lookup"><span data-stu-id="e4975-985">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#17)]
 [!code-vb[System.Numerics.BigInteger.Operators#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#17)]  
  
 <span data-ttu-id="e4975-986">不支援自訂運算子的語言可以呼叫<xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>方法改為。</span><span class="sxs-lookup"><span data-stu-id="e4975-986">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="e4975-987">某些語言也可以呼叫<xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.Int64%2CSystem.Numerics.BigInteger%29>方法直接，如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="e4975-987">Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.Int64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#18)]  
  
 <span data-ttu-id="e4975-988">如果`left`已<xref:System.Byte>， <xref:System.Int16>， <xref:System.Int32>， <xref:System.SByte>， <xref:System.UInt16>，或<xref:System.UInt32>的值，則會隱含地轉換成<xref:System.Int64>值執行作業時。</span><span class="sxs-lookup"><span data-stu-id="e4975-988">If `left` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.</span></span>  
  
 <span data-ttu-id="e4975-989">這個運算子的對等方法是<xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="e4975-989">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_GreaterThan" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &gt;= (System.Numerics.BigInteger left, long right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(valuetype System.Numerics.BigInteger left, int64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt;= (left As BigInteger, right As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;=(System::Numerics::BigInteger left, long right);" />
      <MemberSignature Language="F#" Value="static member ( &gt;= ) : System.Numerics.BigInteger * int64 -&gt; bool" Usage="left &gt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="e4975-990">要比較的第一個值。</span><span class="sxs-lookup"><span data-stu-id="e4975-990">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="e4975-991">要比較的第二個值。</span><span class="sxs-lookup"><span data-stu-id="e4975-991">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="e4975-992">傳回值，這個值表示 <see cref="T:System.Numerics.BigInteger" /> 值是否大於或等於 64 位元帶正負號的整數值。</span><span class="sxs-lookup"><span data-stu-id="e4975-992">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is greater than or equal to a 64-bit signed integer value.</span></span></summary>
        <returns><span data-ttu-id="e4975-993">如果 <see langword="true" /> 大於 <paramref name="left" /> 則為 <paramref name="right" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-993"><see langword="true" /> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-994"><xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A>方法來定義大於或等於運算子的營運<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="e4975-994">The <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A> method defines the operation of the greater than or equal to operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="e4975-995">它可讓程式碼，如下所示：</span><span class="sxs-lookup"><span data-stu-id="e4975-995">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#19)]
 [!code-vb[System.Numerics.BigInteger.Operators#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#19)]  
  
 <span data-ttu-id="e4975-996">不支援自訂運算子的語言可以呼叫<xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>方法改為。</span><span class="sxs-lookup"><span data-stu-id="e4975-996">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="e4975-997">某些語言也可以呼叫<xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.Numerics.BigInteger%2CSystem.Int64%29>方法直接，如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="e4975-997">Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.Numerics.BigInteger%2CSystem.Int64%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#20](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#20)]  
  
 <span data-ttu-id="e4975-998">如果`right`已<xref:System.Byte>， <xref:System.Int16>， <xref:System.Int32>， <xref:System.SByte>， <xref:System.UInt16>，或<xref:System.UInt32>的值，則會隱含地轉換成<xref:System.Int64>值執行作業時。</span><span class="sxs-lookup"><span data-stu-id="e4975-998">If `right` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.</span></span>  
  
 <span data-ttu-id="e4975-999">這個運算子的對等方法是<xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="e4975-999">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_GreaterThan" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &gt;= (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt;= (left As BigInteger, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;=(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( &gt;= ) : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; bool" Usage="left &gt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="e4975-1000">要比較的第一個值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1000">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="e4975-1001">要比較的第二個值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1001">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="e4975-1002">傳回值，這個值表示 <see cref="T:System.Numerics.BigInteger" /> 值是否大於或等於另一個 <see cref="T:System.Numerics.BigInteger" /> 值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1002">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is greater than or equal to another <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="e4975-1003">如果 <see langword="true" /> 大於 <paramref name="left" /> 則為 <paramref name="right" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-1003"><see langword="true" /> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-1004"><xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A>方法來定義大於或等於運算子的營運<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1004">The <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A> method defines the operation of the greater than or equal to operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="e4975-1005">它可讓程式碼，如下所示：</span><span class="sxs-lookup"><span data-stu-id="e4975-1005">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#22)]
 [!code-vb[System.Numeric.BigInteger.Class#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#22)]  
  
 <span data-ttu-id="e4975-1006">不支援自訂運算子的語言可以呼叫<xref:System.Numerics.BigInteger.Compare%2A?displayProperty=nameWithType>方法改為。</span><span class="sxs-lookup"><span data-stu-id="e4975-1006">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Compare%2A?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="e4975-1007">某些語言也可以呼叫<xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29>方法直接，如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="e4975-1007">Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numeric.BigInteger.Class#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#23)]  
  
 <span data-ttu-id="e4975-1008">這個運算子的對等方法是<xref:System.Numerics.BigInteger.CompareTo(System.Numerics.BigInteger)?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="e4975-1008">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo(System.Numerics.BigInteger)?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_GreaterThan" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &gt;= (System.Numerics.BigInteger left, ulong right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(valuetype System.Numerics.BigInteger left, unsigned int64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt;= (left As BigInteger, right As ULong) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;=(System::Numerics::BigInteger left, System::UInt64 right);" />
      <MemberSignature Language="F#" Value="static member ( &gt;= ) : System.Numerics.BigInteger * uint64 -&gt; bool" Usage="left &gt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="e4975-1009">要比較的第一個值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1009">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="e4975-1010">要比較的第二個值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1010">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="e4975-1011">傳回值，這個值表示 <see cref="T:System.Numerics.BigInteger" /> 值是否大於或等於 64 位元不帶正負號的整數值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1011">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is greater than or equal to a 64-bit unsigned integer value.</span></span></summary>
        <returns><span data-ttu-id="e4975-1012">如果 <see langword="true" /> 大於 <paramref name="left" /> 則為 <paramref name="right" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-1012"><see langword="true" /> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-1013"><xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A>方法來定義大於或等於運算子的營運<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1013">The <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A> method defines the operation of the greater than or equal to operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="e4975-1014">它可讓程式碼，如下所示：</span><span class="sxs-lookup"><span data-stu-id="e4975-1014">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#21)]
 [!code-vb[System.Numerics.BigInteger.Operators#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#21)]  
  
 <span data-ttu-id="e4975-1015">不支援自訂運算子的語言可以呼叫<xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>方法改為。</span><span class="sxs-lookup"><span data-stu-id="e4975-1015">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="e4975-1016">某些語言也可以呼叫<xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.Numerics.BigInteger%2CSystem.UInt64%29>方法直接，如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="e4975-1016">Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.Numerics.BigInteger%2CSystem.UInt64%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#22)]  
  
 <span data-ttu-id="e4975-1017">這個運算子的對等方法是<xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="e4975-1017">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_GreaterThan" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &gt;= (ulong left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(unsigned int64 left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.UInt64,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt;= (left As ULong, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;=(System::UInt64 left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( &gt;= ) : uint64 * System.Numerics.BigInteger -&gt; bool" Usage="left &gt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.UInt64" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="e4975-1018">要比較的第一個值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1018">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="e4975-1019">要比較的第二個值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1019">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="e4975-1020">傳回值，這個值表示 64 位元不帶正負號的整數是否大於或等於 <see cref="T:System.Numerics.BigInteger" /> 值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1020">Returns a value that indicates whether a 64-bit unsigned integer is greater than or equal to a <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="e4975-1021">如果 <see langword="true" /> 大於 <paramref name="left" /> 則為 <paramref name="right" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-1021"><see langword="true" /> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-1022"><xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A>方法來定義大於或等於運算子的營運<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1022">The <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A> method defines the operation of the greater than or equal to operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="e4975-1023">它可讓程式碼，如下所示：</span><span class="sxs-lookup"><span data-stu-id="e4975-1023">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#23)]
 [!code-vb[System.Numerics.BigInteger.Operators#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#23)]  
  
 <span data-ttu-id="e4975-1024">不支援自訂運算子的語言可以呼叫<xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>方法改為。</span><span class="sxs-lookup"><span data-stu-id="e4975-1024">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="e4975-1025">某些語言也可以呼叫<xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.UInt64%2CSystem.Numerics.BigInteger%29>方法直接，如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="e4975-1025">Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.UInt64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#24](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#24)]  
  
 <span data-ttu-id="e4975-1026">這個運算子的對等方法是<xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="e4975-1026">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_GreaterThan" />
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Implicit">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e4975-1027">定義 <see cref="T:System.Numerics.BigInteger" /> 物件與另一個型別之間的隱含轉換。</span><span class="sxs-lookup"><span data-stu-id="e4975-1027">Defines an implicit conversion between a <see cref="T:System.Numerics.BigInteger" /> object and another type.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.BigInteger (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Implicit(unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As Byte) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::BigInteger(System::Byte value);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : byte -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e4975-1028">要轉換為 <see cref="T:System.Numerics.BigInteger" /> 的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1028">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</span></span></param>
        <summary><span data-ttu-id="e4975-1029">定義從不帶正負號的位元組到 <see cref="T:System.Numerics.BigInteger" /> 值的隱含轉換。</span><span class="sxs-lookup"><span data-stu-id="e4975-1029">Defines an implicit conversion of an unsigned byte to a <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="e4975-1030">物件，包含 <paramref name="value" /> 參數的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1030">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-1031">任何小數部分`value`轉換前的參數會被截斷。</span><span class="sxs-lookup"><span data-stu-id="e4975-1031">Any fractional part of the `value` parameter is truncated before conversion.</span></span>

 <span data-ttu-id="e4975-1032">不支援隱含運算子的語言，另一種方法是<xref:System.Numerics.BigInteger.%23ctor%28System.Int32%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="e4975-1032">For languages that do not support implicit operators, the alternative method is <xref:System.Numerics.BigInteger.%23ctor%28System.Int32%29?displayProperty=nameWithType>.</span></span>   

 <span data-ttu-id="e4975-1033">多載<xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger>方法會定義類型，或從自動轉換編譯器可以<xref:System.Numerics.BigInteger>而不需要明確轉型運算子 （在 C# 中) 或 （在 Visual Basic) 的轉換函式呼叫的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1033">The overloads of the <xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger> method define the types to which or from which a compiler can automatically convert a <xref:System.Numerics.BigInteger> value without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic).</span></span> <span data-ttu-id="e4975-1034">它們擴展轉換不會涉及資料遺失，並不會擲回<xref:System.OverflowException>。</span><span class="sxs-lookup"><span data-stu-id="e4975-1034">They are widening conversions that do not involve data loss and do not throw an <xref:System.OverflowException>.</span></span> <span data-ttu-id="e4975-1035">這個多載可讓編譯器處理從不<xref:System.Byte>值<xref:System.Numerics.BigInteger>值，如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="e4975-1035">This overload lets the compiler handle conversions from a <xref:System.Byte> value to a <xref:System.Numerics.BigInteger> value, as the following example shows.</span></span>   
   
 [!code-csharp[System.Numeric.BigInteger.Implicit#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/cs/Implicit1.cs#1)]   
 [!code-vb[System.Numeric.BigInteger.Implicit#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/vb/Implicit1.vb#1)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.BigInteger (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Implicit(int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Implicit(System.Int16)~System.Numerics.BigInteger" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As Short) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::BigInteger(short value);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : int16 -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e4975-1036">要轉換為 <see cref="T:System.Numerics.BigInteger" /> 的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1036">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</span></span></param>
        <summary><span data-ttu-id="e4975-1037">定義從帶正負號的 16 位元整數到 <see cref="T:System.Numerics.BigInteger" /> 值的隱含轉換。</span><span class="sxs-lookup"><span data-stu-id="e4975-1037">Defines an implicit conversion of a signed 16-bit integer to a <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="e4975-1038">物件，包含 <paramref name="value" /> 參數的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1038">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-1039">不支援隱含運算子的語言，另一種方法是<xref:System.Numerics.BigInteger.%23ctor%28System.Int32%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="e4975-1039">For languages that do not support implicit operators, the alternative method is <xref:System.Numerics.BigInteger.%23ctor%28System.Int32%29?displayProperty=nameWithType>.</span></span>   

 <span data-ttu-id="e4975-1040">多載<xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger>方法會定義類型，或從自動轉換編譯器可以<xref:System.Numerics.BigInteger>而不需要明確轉型運算子 （在 C# 中) 或 （在 Visual Basic) 的轉換函式呼叫的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1040">The overloads of the <xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger> method define the types to which or from which a compiler can automatically convert a <xref:System.Numerics.BigInteger> value without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic).</span></span> <span data-ttu-id="e4975-1041">它們擴展轉換不會涉及資料遺失，並不會擲回<xref:System.OverflowException>。</span><span class="sxs-lookup"><span data-stu-id="e4975-1041">They are widening conversions that do not involve data loss and do not throw an <xref:System.OverflowException>.</span></span> <span data-ttu-id="e4975-1042">這個多載可讓編譯器處理從不<xref:System.Int16>值<xref:System.Numerics.BigInteger>值，如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="e4975-1042">This overload lets the compiler handle conversions from a <xref:System.Int16> value to a <xref:System.Numerics.BigInteger> value, as the following example shows.</span></span>   
   
 [!code-csharp[System.Numeric.BigInteger.Implicit#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/cs/Implicit1.cs#2)]   
 [!code-vb[System.Numeric.BigInteger.Implicit#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/vb/Implicit1.vb#2)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.BigInteger (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Implicit(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Implicit(System.Int32)~System.Numerics.BigInteger" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As Integer) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::BigInteger(int value);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : int -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e4975-1043">要轉換為 <see cref="T:System.Numerics.BigInteger" /> 的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1043">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</span></span></param>
        <summary><span data-ttu-id="e4975-1044">定義從帶正負號的 32 位元整數到 <see cref="T:System.Numerics.BigInteger" /> 值的隱含轉換。</span><span class="sxs-lookup"><span data-stu-id="e4975-1044">Defines an implicit conversion of a signed 32-bit integer to a <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="e4975-1045">物件，包含 <paramref name="value" /> 參數的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1045">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-1046">不支援隱含運算子的語言，另一種方法是<xref:System.Numerics.BigInteger.%23ctor%28System.Int32%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="e4975-1046">For languages that do not support implicit operators, the alternative method is <xref:System.Numerics.BigInteger.%23ctor%28System.Int32%29?displayProperty=nameWithType>.</span></span>  

 <span data-ttu-id="e4975-1047">多載<xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger>方法會定義類型，或從自動轉換編譯器可以<xref:System.Numerics.BigInteger>而不需要明確轉型運算子 （在 C# 中) 或 （在 Visual Basic) 的轉換函式呼叫的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1047">The overloads of the <xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger> method define the types to which or from which a compiler can automatically convert a <xref:System.Numerics.BigInteger> value without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic).</span></span> <span data-ttu-id="e4975-1048">它們擴展轉換不會涉及資料遺失，並不會擲回<xref:System.OverflowException>。</span><span class="sxs-lookup"><span data-stu-id="e4975-1048">They are widening conversions that do not involve data loss and do not throw an <xref:System.OverflowException>.</span></span> <span data-ttu-id="e4975-1049">這個多載可讓編譯器處理從不<xref:System.Int32>值<xref:System.Numerics.BigInteger>值，如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="e4975-1049">This overload lets the compiler handle conversions from a <xref:System.Int32> value to a <xref:System.Numerics.BigInteger> value, as the following example shows.</span></span>   
   
 [!code-csharp[System.Numeric.BigInteger.Implicit#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/cs/Implicit1.cs#3)]   
 [!code-vb[System.Numeric.BigInteger.Implicit#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/vb/Implicit1.vb#3)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.BigInteger (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Implicit(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Implicit(System.Int64)~System.Numerics.BigInteger" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As Long) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::BigInteger(long value);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : int64 -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e4975-1050">要轉換為 <see cref="T:System.Numerics.BigInteger" /> 的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1050">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</span></span></param>
        <summary><span data-ttu-id="e4975-1051">定義從帶正負號的 64 位元整數到 <see cref="T:System.Numerics.BigInteger" /> 值的隱含轉換。</span><span class="sxs-lookup"><span data-stu-id="e4975-1051">Defines an implicit conversion of a signed 64-bit integer to a <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="e4975-1052">物件，包含 <paramref name="value" /> 參數的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1052">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-1053">不支援隱含運算子的語言，另一種方法是<xref:System.Numerics.BigInteger.%23ctor%28System.Int64%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="e4975-1053">For languages that do not support implicit operators, the alternative method is <xref:System.Numerics.BigInteger.%23ctor%28System.Int64%29?displayProperty=nameWithType>.</span></span>   
 
 <span data-ttu-id="e4975-1054">多載<xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger>方法會定義類型，或從自動轉換編譯器可以<xref:System.Numerics.BigInteger>而不需要明確轉型運算子 （在 C# 中) 或 （在 Visual Basic) 的轉換函式呼叫的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1054">The overloads of the <xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger> method define the types to which or from which a compiler can automatically convert a <xref:System.Numerics.BigInteger> value without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic).</span></span> <span data-ttu-id="e4975-1055">它們擴展轉換不會涉及資料遺失，並不會擲回<xref:System.OverflowException>。</span><span class="sxs-lookup"><span data-stu-id="e4975-1055">They are widening conversions that do not involve data loss and do not throw an <xref:System.OverflowException>.</span></span> <span data-ttu-id="e4975-1056">這個多載可讓編譯器處理從不<xref:System.Int64>值<xref:System.Numerics.BigInteger>值，如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="e4975-1056">This overload lets the compiler handle conversions from a <xref:System.Int64> value to a <xref:System.Numerics.BigInteger> value, as the following example shows.</span></span>   
   
 [!code-csharp[System.Numeric.BigInteger.Implicit#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/cs/Implicit1.cs#4)]   
 [!code-vb[System.Numeric.BigInteger.Implicit#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/vb/Implicit1.vb#4)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.BigInteger (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Implicit(int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Implicit(System.SByte)~System.Numerics.BigInteger" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As SByte) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::BigInteger(System::SByte value);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : sbyte -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e4975-1057">要轉換為 <see cref="T:System.Numerics.BigInteger" /> 的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1057">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</span></span></param>
        <summary><span data-ttu-id="e4975-1058">定義從 8 位元帶正負號的整數到 <see cref="T:System.Numerics.BigInteger" /> 值的隱含轉換。</span><span class="sxs-lookup"><span data-stu-id="e4975-1058">Defines an implicit conversion of an 8-bit signed integer to a <see cref="T:System.Numerics.BigInteger" /> value.</span></span>  
  
<span data-ttu-id="e4975-1059">此應用程式開發介面不符合 CLS 標準。</span><span class="sxs-lookup"><span data-stu-id="e4975-1059">This API is not CLS-compliant.</span></span> <span data-ttu-id="e4975-1060">符合規範的替代項目為 <see cref="M:System.Numerics.BigInteger.#ctor(System.Int32)" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-1060">The compliant alternative is <see cref="M:System.Numerics.BigInteger.#ctor(System.Int32)" />.</span></span></summary>
        <returns><span data-ttu-id="e4975-1061">物件，包含 <paramref name="value" /> 參數的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1061">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-1062">不支援隱含運算子的語言，另一種方法是<xref:System.Numerics.BigInteger.%23ctor%28System.Int32%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="e4975-1062">For languages that do not support implicit operators, the alternative method is <xref:System.Numerics.BigInteger.%23ctor%28System.Int32%29?displayProperty=nameWithType>.</span></span>   

 <span data-ttu-id="e4975-1063">多載<xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger>方法會定義類型，或從自動轉換編譯器可以<xref:System.Numerics.BigInteger>而不需要明確轉型運算子 （在 C# 中) 或 （在 Visual Basic) 的轉換函式呼叫的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1063">The overloads of the <xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger> method define the types to which or from which a compiler can automatically convert a <xref:System.Numerics.BigInteger> value without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic).</span></span> <span data-ttu-id="e4975-1064">它們擴展轉換不會涉及資料遺失，並不會擲回<xref:System.OverflowException>。</span><span class="sxs-lookup"><span data-stu-id="e4975-1064">They are widening conversions that do not involve data loss and do not throw an <xref:System.OverflowException>.</span></span> <span data-ttu-id="e4975-1065">這個多載可讓編譯器處理從不<xref:System.SByte>值<xref:System.Numerics.BigInteger>值，如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="e4975-1065">This overload lets the compiler handle conversions from a <xref:System.SByte> value to a <xref:System.Numerics.BigInteger> value, as the following example shows.</span></span>   
   
 [!code-csharp[System.Numeric.BigInteger.Implicit#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/cs/Implicit1.cs#5)]   
 [!code-vb[System.Numeric.BigInteger.Implicit#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/vb/Implicit1.vb#5)]   

 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Numerics.BigInteger.#ctor(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.BigInteger (ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Implicit(unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Implicit(System.UInt16)~System.Numerics.BigInteger" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As UShort) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::BigInteger(System::UInt16 value);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : uint16 -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e4975-1066">要轉換為 <see cref="T:System.Numerics.BigInteger" /> 的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1066">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</span></span></param>
        <summary><span data-ttu-id="e4975-1067">定義從 16 位元不帶正負號的整數到 <see cref="T:System.Numerics.BigInteger" /> 值的隱含轉換。</span><span class="sxs-lookup"><span data-stu-id="e4975-1067">Defines an implicit conversion of a 16-bit unsigned integer to a <see cref="T:System.Numerics.BigInteger" /> value.</span></span>  
  
<span data-ttu-id="e4975-1068">此應用程式開發介面不符合 CLS 標準。</span><span class="sxs-lookup"><span data-stu-id="e4975-1068">This API is not CLS-compliant.</span></span> <span data-ttu-id="e4975-1069">符合規範的替代項目為 <see cref="M:System.Numerics.BigInteger.op_Implicit(System.Int32)~System.Numerics.BigInteger" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-1069">The compliant alternative is <see cref="M:System.Numerics.BigInteger.op_Implicit(System.Int32)~System.Numerics.BigInteger" />.</span></span></summary>
        <returns><span data-ttu-id="e4975-1070">物件，包含 <paramref name="value" /> 參數的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1070">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-1071">不支援隱含運算子的語言，另一種方法是<xref:System.Numerics.BigInteger.%23ctor%28System.UInt32%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="e4975-1071">For languages that do not support implicit operators, the alternative method is <xref:System.Numerics.BigInteger.%23ctor%28System.UInt32%29?displayProperty=nameWithType>.</span></span>   

 <span data-ttu-id="e4975-1072">多載<xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger>方法會定義類型，或從自動轉換編譯器可以<xref:System.Numerics.BigInteger>而不需要明確轉型運算子 （在 C# 中) 或 （在 Visual Basic) 的轉換函式呼叫的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1072">The overloads of the <xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger> method define the types to which or from which a compiler can automatically convert a <xref:System.Numerics.BigInteger> value without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic).</span></span> <span data-ttu-id="e4975-1073">它們擴展轉換不會涉及資料遺失，並不會擲回<xref:System.OverflowException>。</span><span class="sxs-lookup"><span data-stu-id="e4975-1073">They are widening conversions that do not involve data loss and do not throw an <xref:System.OverflowException>.</span></span> <span data-ttu-id="e4975-1074">這個多載可讓編譯器處理從不<xref:System.UInt16>值<xref:System.Numerics.BigInteger>值，如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="e4975-1074">This overload lets the compiler handle conversions from a <xref:System.UInt16> value to a <xref:System.Numerics.BigInteger> value, as the following example shows.</span></span>   
   
 [!code-csharp[System.Numeric.BigInteger.Implicit#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/cs/Implicit1.cs#6)]   
 [!code-vb[System.Numeric.BigInteger.Implicit#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/vb/Implicit1.vb#6)]   

 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Numerics.BigInteger.op_Implicit(System.Int32)~System.Numerics.BigInteger" />
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.BigInteger (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Implicit(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Implicit(System.UInt32)~System.Numerics.BigInteger" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As UInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::BigInteger(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : uint32 -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e4975-1075">要轉換為 <see cref="T:System.Numerics.BigInteger" /> 的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1075">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</span></span></param>
        <summary><span data-ttu-id="e4975-1076">定義從 32 位元不帶正負號的整數到 <see cref="T:System.Numerics.BigInteger" /> 值的隱含轉換。</span><span class="sxs-lookup"><span data-stu-id="e4975-1076">Defines an implicit conversion of a 32-bit unsigned integer to a <see cref="T:System.Numerics.BigInteger" /> value.</span></span>  
  
<span data-ttu-id="e4975-1077">此應用程式開發介面不符合 CLS 標準。</span><span class="sxs-lookup"><span data-stu-id="e4975-1077">This API is not CLS-compliant.</span></span> <span data-ttu-id="e4975-1078">符合規範的替代項目為 <see cref="M:System.Numerics.BigInteger.op_Implicit(System.Int64)~System.Numerics.BigInteger" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-1078">The compliant alternative is <see cref="M:System.Numerics.BigInteger.op_Implicit(System.Int64)~System.Numerics.BigInteger" />.</span></span></summary>
        <returns><span data-ttu-id="e4975-1079">物件，包含 <paramref name="value" /> 參數的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1079">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-1080">不支援隱含運算子的語言，另一種方法是<xref:System.Numerics.BigInteger.%23ctor%28System.UInt32%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="e4975-1080">For languages that do not support implicit operators, the alternative method is <xref:System.Numerics.BigInteger.%23ctor%28System.UInt32%29?displayProperty=nameWithType>.</span></span>   

 <span data-ttu-id="e4975-1081">多載<xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger>方法會定義類型，或從自動轉換編譯器可以<xref:System.Numerics.BigInteger>而不需要明確轉型運算子 （在 C# 中) 或 （在 Visual Basic) 的轉換函式呼叫的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1081">The overloads of the <xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger> method define the types to which or from which a compiler can automatically convert a <xref:System.Numerics.BigInteger> value without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic).</span></span> <span data-ttu-id="e4975-1082">它們擴展轉換不會涉及資料遺失，並不會擲回<xref:System.OverflowException>。</span><span class="sxs-lookup"><span data-stu-id="e4975-1082">They are widening conversions that do not involve data loss and do not throw an <xref:System.OverflowException>.</span></span> <span data-ttu-id="e4975-1083">這個多載可讓編譯器處理從不<xref:System.UInt32>值<xref:System.Numerics.BigInteger>值，如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="e4975-1083">This overload lets the compiler handle conversions from a <xref:System.UInt32> value to a <xref:System.Numerics.BigInteger> value, as the following example shows.</span></span>   
   
 [!code-csharp[System.Numeric.BigInteger.Implicit#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/cs/Implicit1.cs#7)]   
 [!code-vb[System.Numeric.BigInteger.Implicit#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/vb/Implicit1.vb#7)]   

 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Numerics.BigInteger.op_Implicit(System.Int64)~System.Numerics.BigInteger" />
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.BigInteger (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Implicit(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Implicit(System.UInt64)~System.Numerics.BigInteger" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As ULong) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::BigInteger(System::UInt64 value);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : uint64 -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e4975-1084">要轉換為 <see cref="T:System.Numerics.BigInteger" /> 的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1084">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</span></span></param>
        <summary><span data-ttu-id="e4975-1085">定義從 64 位元不帶正負號的整數到 <see cref="T:System.Numerics.BigInteger" /> 值的隱含轉換。</span><span class="sxs-lookup"><span data-stu-id="e4975-1085">Defines an implicit conversion of a 64-bit unsigned integer to a <see cref="T:System.Numerics.BigInteger" /> value.</span></span>  
  
<span data-ttu-id="e4975-1086">此應用程式開發介面不符合 CLS 標準。</span><span class="sxs-lookup"><span data-stu-id="e4975-1086">This API is not CLS-compliant.</span></span> <span data-ttu-id="e4975-1087">符合規範的替代項目為 <see cref="T:System.Double" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-1087">The compliant alternative is <see cref="T:System.Double" />.</span></span></summary>
        <returns><span data-ttu-id="e4975-1088">物件，包含 <paramref name="value" /> 參數的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1088">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-1089">不支援隱含運算子的語言，另一種方法是<xref:System.Numerics.BigInteger.%23ctor%28System.UInt64%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="e4975-1089">For languages that do not support implicit operators, the alternative method is <xref:System.Numerics.BigInteger.%23ctor%28System.UInt64%29?displayProperty=nameWithType>.</span></span>   

 <span data-ttu-id="e4975-1090">多載<xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger>方法會定義類型，或從自動轉換編譯器可以<xref:System.Numerics.BigInteger>而不需要明確轉型運算子 （在 C# 中) 或 （在 Visual Basic) 的轉換函式呼叫的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1090">The overloads of the <xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger> method define the types to which or from which a compiler can automatically convert a <xref:System.Numerics.BigInteger> value without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic).</span></span> <span data-ttu-id="e4975-1091">它們擴展轉換不會涉及資料遺失，並不會擲回<xref:System.OverflowException>。</span><span class="sxs-lookup"><span data-stu-id="e4975-1091">They are widening conversions that do not involve data loss and do not throw an <xref:System.OverflowException>.</span></span> <span data-ttu-id="e4975-1092">這個多載可讓編譯器處理從不<xref:System.UInt64>值<xref:System.Numerics.BigInteger>值，如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="e4975-1092">This overload lets the compiler handle conversions from a <xref:System.UInt64> value to a <xref:System.Numerics.BigInteger> value, as the following example shows.</span></span>   
   
 [!code-csharp[System.Numeric.BigInteger.Implicit#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/cs/Implicit1.cs#8)]   
 [!code-vb[System.Numeric.BigInteger.Implicit#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/vb/Implicit1.vb#8)]   

 ]]></format>
        </remarks>
        <altCompliant cref="T:System.Double" />
      </Docs>
    </Member>
    <Member MemberName="op_Increment">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator ++ (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Increment(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Increment(System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared op_Increment (value As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator ++(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member op_Increment : System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.op_Increment value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e4975-1093">要遞增的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1093">The value to increment.</span></span></param>
        <summary><span data-ttu-id="e4975-1094"><see cref="T:System.Numerics.BigInteger" /> 值遞增 1。</span><span class="sxs-lookup"><span data-stu-id="e4975-1094">Increments a <see cref="T:System.Numerics.BigInteger" /> value by 1.</span></span></summary>
        <returns><span data-ttu-id="e4975-1095"><paramref name="value" /> 參數遞增 1 後的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1095">The value of the <paramref name="value" /> parameter incremented by 1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-1096"><xref:System.Numerics.BigInteger.op_Increment%2A>方法定義的遞增作業<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1096">The <xref:System.Numerics.BigInteger.op_Increment%2A> method defines the increment operation for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="e4975-1097">它可讓程式碼，如下所示：</span><span class="sxs-lookup"><span data-stu-id="e4975-1097">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#24](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#24)]  
  
 <span data-ttu-id="e4975-1098">某些語言 （例如 Visual Basic) 缺少遞增運算子，或不支援運算子多載可以呼叫<xref:System.Numerics.BigInteger.op_Increment%2A>方法直接，如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="e4975-1098">Some languages (such as Visual Basic) that lack an increment operator or do not support operator overloading can call the <xref:System.Numerics.BigInteger.op_Increment%2A> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numeric.BigInteger.Class#25](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#25)]  
  
 <span data-ttu-id="e4975-1099">因為<xref:System.Numerics.BigInteger>物件是不可變的<xref:System.Numerics.BigInteger.op_Increment%2A>運算子會建立新<xref:System.Numerics.BigInteger>物件，其值為一個以上<xref:System.Numerics.BigInteger>所表示的物件`value`。</span><span class="sxs-lookup"><span data-stu-id="e4975-1099">Because <xref:System.Numerics.BigInteger> objects are immutable, the <xref:System.Numerics.BigInteger.op_Increment%2A> operator creates a new <xref:System.Numerics.BigInteger> object whose value is one more than the <xref:System.Numerics.BigInteger> object represented by `value`.</span></span> <span data-ttu-id="e4975-1100">因此，重複呼叫<xref:System.Numerics.BigInteger.op_Increment%2A>可能很昂貴。</span><span class="sxs-lookup"><span data-stu-id="e4975-1100">Therefore, repeated calls to <xref:System.Numerics.BigInteger.op_Increment%2A> may be expensive.</span></span>  
  
 <span data-ttu-id="e4975-1101">這個運算子的對等方法是<xref:System.Numerics.BigInteger.Add%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="e4975-1101">The equivalent method for this operator is <xref:System.Numerics.BigInteger.Add%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.op_Decrement(System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Inequality">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e4975-1102">傳回值，這個值表示兩個數值是否不相等。</span><span class="sxs-lookup"><span data-stu-id="e4975-1102">Returns a value that indicates whether two numeric values are not equal.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (long left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(int64 left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Inequality(System.Int64,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As Long, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(long left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : int64 * System.Numerics.BigInteger -&gt; bool" Usage="System.Numerics.BigInteger.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Int64" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="e4975-1103">要比較的第一個值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1103">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="e4975-1104">要比較的第二個值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1104">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="e4975-1105">傳回值，這個值表示 64 位元帶正負號的整數與 <see cref="T:System.Numerics.BigInteger" /> 值是否不相等。</span><span class="sxs-lookup"><span data-stu-id="e4975-1105">Returns a value that indicates whether a 64-bit signed integer and a <see cref="T:System.Numerics.BigInteger" /> value are not equal.</span></span></summary>
        <returns><span data-ttu-id="e4975-1106">如果 <paramref name="left" /> 和 <paramref name="right" /> 不相等，則為 <see langword="true" />；否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-1106"><see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-1107"><xref:System.Numerics.BigInteger.op_Inequality%2A>方法定義的不等比較運算子的營運<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1107">The <xref:System.Numerics.BigInteger.op_Inequality%2A> method defines the operation of the inequality operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="e4975-1108">它可讓程式碼，如下所示：</span><span class="sxs-lookup"><span data-stu-id="e4975-1108">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#25](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#25)]
 [!code-vb[System.Numerics.BigInteger.Operators#25](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#25)]  
  
 <span data-ttu-id="e4975-1109">不支援自訂運算子的語言可以使用其中一個下列技巧來測試不相等：</span><span class="sxs-lookup"><span data-stu-id="e4975-1109">Languages that do not support custom operators can test for inequality by using one of the following techniques:</span></span>  
  
-   <span data-ttu-id="e4975-1110">呼叫<xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>執行個體方法，這表示之間的關聯性<xref:System.Numerics.BigInteger>和帶正負號的長整數值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1110">Calling the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> instance method, which indicates the relationship between a <xref:System.Numerics.BigInteger> and a signed long integer value.</span></span>  
  
-   <span data-ttu-id="e4975-1111">呼叫<xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=nameWithType>執行個體方法，並反轉其值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1111">Calling the <xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=nameWithType> instance method and reversing its value.</span></span>  
  
 <span data-ttu-id="e4975-1112">如果`left`已<xref:System.Byte>， <xref:System.Int16>， <xref:System.Int32>， <xref:System.SByte>， <xref:System.UInt16>，或<xref:System.UInt32>的值，則會隱含地轉換成<xref:System.Int64>值執行作業時。</span><span class="sxs-lookup"><span data-stu-id="e4975-1112">If `left` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_Equality" />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Numerics.BigInteger left, long right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Numerics.BigInteger left, int64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As BigInteger, right As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Numerics::BigInteger left, long right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Numerics.BigInteger * int64 -&gt; bool" Usage="System.Numerics.BigInteger.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="e4975-1113">要比較的第一個值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1113">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="e4975-1114">要比較的第二個值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1114">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="e4975-1115">傳回值，這個值表示 <see cref="T:System.Numerics.BigInteger" /> 值與 64 位元帶正負號的整數是否不相等。</span><span class="sxs-lookup"><span data-stu-id="e4975-1115">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value and a 64-bit signed integer are not equal.</span></span></summary>
        <returns><span data-ttu-id="e4975-1116">如果 <paramref name="left" /> 和 <paramref name="right" /> 不相等，則為 <see langword="true" />；否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-1116"><see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-1117"><xref:System.Numerics.BigInteger.op_Inequality%2A>方法定義的不等比較運算子的營運<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1117">The <xref:System.Numerics.BigInteger.op_Inequality%2A> method defines the operation of the inequality operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="e4975-1118">它可讓程式碼，如下所示：</span><span class="sxs-lookup"><span data-stu-id="e4975-1118">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#26](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#26)]
 [!code-vb[System.Numerics.BigInteger.Operators#26](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#26)]  
  
 <span data-ttu-id="e4975-1119">不支援自訂運算子的語言可以使用其中一個下列技巧來測試不相等：</span><span class="sxs-lookup"><span data-stu-id="e4975-1119">Languages that do not support custom operators can test for inequality by using one of the following techniques:</span></span>  
  
-   <span data-ttu-id="e4975-1120">呼叫<xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>方法，即表示之間的關聯性<xref:System.Numerics.BigInteger>和帶正負號的長整數值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1120">Calling the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> method, which indicates the relationship between a <xref:System.Numerics.BigInteger> and a signed long integer value.</span></span>  
  
-   <span data-ttu-id="e4975-1121">呼叫<xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=nameWithType>方法，並反轉其值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1121">Calling the <xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=nameWithType> method and reversing its value.</span></span>  
  
 <span data-ttu-id="e4975-1122">如果`right`已<xref:System.Byte>， <xref:System.Int16>， <xref:System.Int32>， <xref:System.SByte>， <xref:System.UInt16>，或<xref:System.UInt32>的值，則會隱含地轉換成<xref:System.Int64>值執行作業時。</span><span class="sxs-lookup"><span data-stu-id="e4975-1122">If `right` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.</span></span>  
  
 <span data-ttu-id="e4975-1123">這個運算子的對等方法是<xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="e4975-1123">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_Equality" />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As BigInteger, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; bool" Usage="System.Numerics.BigInteger.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="e4975-1124">要比較的第一個值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1124">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="e4975-1125">要比較的第二個值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1125">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="e4975-1126">傳回值，指出兩個 <see cref="T:System.Numerics.BigInteger" /> 物件是否有不同的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1126">Returns a value that indicates whether two <see cref="T:System.Numerics.BigInteger" /> objects have different values.</span></span></summary>
        <returns><span data-ttu-id="e4975-1127">如果 <paramref name="left" /> 和 <paramref name="right" /> 不相等，則為 <see langword="true" />；否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-1127"><see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-1128"><xref:System.Numerics.BigInteger.op_Inequality%2A>方法定義的不等比較運算子的營運<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1128">The <xref:System.Numerics.BigInteger.op_Inequality%2A> method defines the operation of the inequality operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="e4975-1129">它可讓程式碼，如下所示：</span><span class="sxs-lookup"><span data-stu-id="e4975-1129">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#26](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#26)]
 [!code-vb[System.Numeric.BigInteger.Class#26](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#26)]  
  
 <span data-ttu-id="e4975-1130">不支援自訂運算子的語言可以使用其中一個下列技巧來測試不相等：</span><span class="sxs-lookup"><span data-stu-id="e4975-1130">Languages that do not support custom operators can test for inequality by using one of the following techniques:</span></span>  
  
-   <span data-ttu-id="e4975-1131">呼叫<xref:System.Numerics.BigInteger.Compare%2A?displayProperty=nameWithType>方法，即表示兩個之間的關聯性<xref:System.Numerics.BigInteger>物件。</span><span class="sxs-lookup"><span data-stu-id="e4975-1131">Calling the <xref:System.Numerics.BigInteger.Compare%2A?displayProperty=nameWithType> method, which indicates the relationship between two <xref:System.Numerics.BigInteger> objects.</span></span>  
  
-   <span data-ttu-id="e4975-1132">呼叫<xref:System.Numerics.BigInteger.Equals%28System.Numerics.BigInteger%29?displayProperty=nameWithType>方法，並反轉其值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1132">Calling the <xref:System.Numerics.BigInteger.Equals%28System.Numerics.BigInteger%29?displayProperty=nameWithType> method and reversing its value.</span></span>  
  
 <span data-ttu-id="e4975-1133">這個運算子的對等方法是<xref:System.Numerics.BigInteger.Compare%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="e4975-1133">The equivalent method for this operator is <xref:System.Numerics.BigInteger.Compare%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_Equality" />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Numerics.BigInteger left, ulong right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Numerics.BigInteger left, unsigned int64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As BigInteger, right As ULong) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Numerics::BigInteger left, System::UInt64 right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Numerics.BigInteger * uint64 -&gt; bool" Usage="System.Numerics.BigInteger.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="e4975-1134">要比較的第一個值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1134">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="e4975-1135">要比較的第二個值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1135">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="e4975-1136">傳回值，這個值表示 <see cref="T:System.Numerics.BigInteger" /> 值與 64 位元不帶正負號的整數是否不相等。</span><span class="sxs-lookup"><span data-stu-id="e4975-1136">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value and a 64-bit unsigned integer are not equal.</span></span></summary>
        <returns><span data-ttu-id="e4975-1137">如果 <paramref name="left" /> 和 <paramref name="right" /> 不相等，則為 <see langword="true" />；否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-1137"><see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-1138"><xref:System.Numerics.BigInteger.op_Inequality%2A>方法定義的不等比較運算子的營運<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1138">The <xref:System.Numerics.BigInteger.op_Inequality%2A> method defines the operation of the inequality operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="e4975-1139">它可讓程式碼，如下所示：</span><span class="sxs-lookup"><span data-stu-id="e4975-1139">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#27](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#27)]
 [!code-vb[System.Numerics.BigInteger.Operators#27](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#27)]  
  
 <span data-ttu-id="e4975-1140">不支援自訂運算子的語言可以使用其中一個下列技巧來測試不相等：</span><span class="sxs-lookup"><span data-stu-id="e4975-1140">Languages that do not support custom operators can test for inequality by using one of the following techniques:</span></span>  
  
-   <span data-ttu-id="e4975-1141">呼叫<xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>方法，即表示之間的關聯性<xref:System.Numerics.BigInteger>和不帶正負號的長整數值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1141">Calling the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> method, which indicates the relationship between a <xref:System.Numerics.BigInteger> and an unsigned long integer value.</span></span>  
  
-   <span data-ttu-id="e4975-1142">呼叫<xref:System.Numerics.BigInteger.Equals%28System.UInt64%29?displayProperty=nameWithType>方法，並反轉其值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1142">Calling the <xref:System.Numerics.BigInteger.Equals%28System.UInt64%29?displayProperty=nameWithType> method and reversing its value.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_Equality" />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (ulong left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(unsigned int64 left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Inequality(System.UInt64,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As ULong, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::UInt64 left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : uint64 * System.Numerics.BigInteger -&gt; bool" Usage="System.Numerics.BigInteger.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.UInt64" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="e4975-1143">要比較的第一個值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1143">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="e4975-1144">要比較的第二個值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1144">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="e4975-1145">傳回值，這個值表示 64 位元不帶正負號的整數與 <see cref="T:System.Numerics.BigInteger" /> 值是否不相等。</span><span class="sxs-lookup"><span data-stu-id="e4975-1145">Returns a value that indicates whether a 64-bit unsigned integer and a <see cref="T:System.Numerics.BigInteger" /> value are not equal.</span></span></summary>
        <returns><span data-ttu-id="e4975-1146">如果 <paramref name="left" /> 和 <paramref name="right" /> 不相等，則為 <see langword="true" />；否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-1146"><see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-1147"><xref:System.Numerics.BigInteger.op_Inequality%2A>方法定義的不等比較運算子的營運<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1147">The <xref:System.Numerics.BigInteger.op_Inequality%2A> method defines the operation of the inequality operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="e4975-1148">它可讓程式碼，如下所示：</span><span class="sxs-lookup"><span data-stu-id="e4975-1148">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#28](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#28)]
 [!code-vb[System.Numerics.BigInteger.Operators#28](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#28)]  
  
 <span data-ttu-id="e4975-1149">不支援自訂運算子的語言可以使用其中一個下列技巧來測試不相等：</span><span class="sxs-lookup"><span data-stu-id="e4975-1149">Languages that do not support custom operators can test for inequality by using one of the following techniques:</span></span>  
  
-   <span data-ttu-id="e4975-1150">呼叫<xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>方法，即表示之間的關聯性<xref:System.Numerics.BigInteger>和不帶正負號的長整數值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1150">Calling the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> method, which indicates the relationship between a <xref:System.Numerics.BigInteger> and an unsigned long integer value.</span></span>  
  
-   <span data-ttu-id="e4975-1151">呼叫<xref:System.Numerics.BigInteger.Equals%28System.UInt64%29?displayProperty=nameWithType>方法，並反轉其值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1151">Calling the <xref:System.Numerics.BigInteger.Equals%28System.UInt64%29?displayProperty=nameWithType> method and reversing its value.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_Equality" />
      </Docs>
    </Member>
    <Member MemberName="op_LeftShift">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator &lt;&lt; (System.Numerics.BigInteger value, int shift);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_LeftShift(valuetype System.Numerics.BigInteger value, int32 shift) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_LeftShift(System.Numerics.BigInteger,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;&lt; (value As BigInteger, shift As Integer) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator &lt;&lt;(System::Numerics::BigInteger value, int shift);" />
      <MemberSignature Language="F#" Value="static member ( &lt;&lt;&lt; ) : System.Numerics.BigInteger * int -&gt; System.Numerics.BigInteger" Usage="value &lt;&lt;&lt; shift" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
        <Parameter Name="shift" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e4975-1152">要執行位元移位的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1152">The value whose bits are to be shifted.</span></span></param>
        <param name="shift"><span data-ttu-id="e4975-1153"><paramref name="value" /> 向左移位的位元數。</span><span class="sxs-lookup"><span data-stu-id="e4975-1153">The number of bits to shift <paramref name="value" /> to the left.</span></span></param>
        <summary><span data-ttu-id="e4975-1154">將 <see cref="T:System.Numerics.BigInteger" /> 值向左移動指定的位元數。</span><span class="sxs-lookup"><span data-stu-id="e4975-1154">Shifts a <see cref="T:System.Numerics.BigInteger" /> value a specified number of bits to the left.</span></span></summary>
        <returns><span data-ttu-id="e4975-1155">已經向左移動指定之位元數的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1155">A value that has been shifted to the left by the specified number of bits.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-1156"><xref:System.Numerics.BigInteger.op_LeftShift%2A>方法定義的位元左移運算子操作<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1156">The <xref:System.Numerics.BigInteger.op_LeftShift%2A> method defines the operation of the bitwise left-shift operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="e4975-1157">它可讓程式碼，如下所示：</span><span class="sxs-lookup"><span data-stu-id="e4975-1157">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#29](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#29)]
 [!code-vb[System.Numerics.BigInteger.Operators#29](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#29)]  
  
> [!NOTE]
>  <span data-ttu-id="e4975-1158">不同位元左移運算與整數基本項目中，於<xref:System.Numerics.BigInteger.op_LeftShift%2A>方法會保留原始的正負號<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1158">Unlike the bitwise left-shift operation with integer primitives, the <xref:System.Numerics.BigInteger.op_LeftShift%2A> method preserves the sign of the original <xref:System.Numerics.BigInteger> value.</span></span>  
  
 <span data-ttu-id="e4975-1159">不支援自訂運算子的語言可以執行位元左移運算，乘以`value`由`BigInteger.Pow(2, shift)`。</span><span class="sxs-lookup"><span data-stu-id="e4975-1159">Languages that do not support custom operators can perform a bitwise left-shift operation by multiplying `value` by `BigInteger.Pow(2, shift)`.</span></span> <span data-ttu-id="e4975-1160">下列範例示範結果會使用這個運算子的結果相同。</span><span class="sxs-lookup"><span data-stu-id="e4975-1160">The following example shows that the results are identical to the results of using this operator.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#30](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#30)]
 [!code-vb[System.Numerics.BigInteger.Operators#30](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.op_RightShift(System.Numerics.BigInteger,System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="op_LessThan">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e4975-1161">傳回值，這個值表示指定的值是否小於第二個指定的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1161">Returns a value that indicates whether a specified value is less than a second specified value.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool operator &lt; (long left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(int64 left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_LessThan(System.Int64,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt; (left As Long, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;(long left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( &lt; ) : int64 * System.Numerics.BigInteger -&gt; bool" Usage="left &lt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Int64" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="e4975-1162">要比較的第一個值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1162">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="e4975-1163">要比較的第二個值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1163">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="e4975-1164">傳回值，這個值表示 64 位元帶正負號的整數是否小於 <see cref="T:System.Numerics.BigInteger" /> 值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1164">Returns a value that indicates whether a 64-bit signed integer is less than a <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="e4975-1165">如果 <paramref name="left" /> 小於 <paramref name="right" />，則為 <see langword="true" />；否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-1165"><see langword="true" /> if <paramref name="left" /> is less than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-1166"><xref:System.Numerics.BigInteger.op_LessThan%2A>方法會定義為小於運算子的作業<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1166">The <xref:System.Numerics.BigInteger.op_LessThan%2A> method defines the operation of the less than operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="e4975-1167">它可讓程式碼，如下所示：</span><span class="sxs-lookup"><span data-stu-id="e4975-1167">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#31](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#31)]
 [!code-vb[System.Numerics.BigInteger.Operators#31](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#31)]  
  
 <span data-ttu-id="e4975-1168">不支援自訂運算子的語言可以呼叫<xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>方法改為。</span><span class="sxs-lookup"><span data-stu-id="e4975-1168">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="e4975-1169">某些語言也可以呼叫<xref:System.Numerics.BigInteger.op_LessThan%28System.Int64%2CSystem.Numerics.BigInteger%29>方法直接，如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="e4975-1169">Some languages can also call the <xref:System.Numerics.BigInteger.op_LessThan%28System.Int64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#32](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#32)]  
  
 <span data-ttu-id="e4975-1170">如果`left`已<xref:System.Byte>， <xref:System.Int16>， <xref:System.Int32>， <xref:System.SByte>， <xref:System.UInt16>，或<xref:System.UInt32>的值，則會隱含地轉換成<xref:System.Int64>值執行作業時。</span><span class="sxs-lookup"><span data-stu-id="e4975-1170">If `left` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.</span></span>  
  
 <span data-ttu-id="e4975-1171">這個運算子的對等方法是<xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="e4975-1171">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_LessThanOrEqual" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool operator &lt; (System.Numerics.BigInteger left, long right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(valuetype System.Numerics.BigInteger left, int64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt; (left As BigInteger, right As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;(System::Numerics::BigInteger left, long right);" />
      <MemberSignature Language="F#" Value="static member ( &lt; ) : System.Numerics.BigInteger * int64 -&gt; bool" Usage="left &lt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="e4975-1172">要比較的第一個值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1172">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="e4975-1173">要比較的第二個值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1173">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="e4975-1174">傳回值，這個值表示 <see cref="T:System.Numerics.BigInteger" /> 值是否小於 64 位元帶正負號的整數。</span><span class="sxs-lookup"><span data-stu-id="e4975-1174">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is less than a 64-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="e4975-1175">如果 <paramref name="left" /> 小於 <paramref name="right" />，則為 <see langword="true" />；否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-1175"><see langword="true" /> if <paramref name="left" /> is less than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-1176"><xref:System.Numerics.BigInteger.op_LessThan%2A>方法會定義為小於運算子的作業<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1176">The <xref:System.Numerics.BigInteger.op_LessThan%2A> method defines the operation of the less than operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="e4975-1177">它可讓程式碼，如下所示：</span><span class="sxs-lookup"><span data-stu-id="e4975-1177">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#33](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#33)]
 [!code-vb[System.Numerics.BigInteger.Operators#33](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#33)]  
  
 <span data-ttu-id="e4975-1178">不支援自訂運算子的語言可以呼叫<xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>方法改為。</span><span class="sxs-lookup"><span data-stu-id="e4975-1178">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="e4975-1179">某些語言也可以呼叫<xref:System.Numerics.BigInteger.op_LessThan%28System.Numerics.BigInteger%2CSystem.Int64%29>方法直接，如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="e4975-1179">Some languages can also call the <xref:System.Numerics.BigInteger.op_LessThan%28System.Numerics.BigInteger%2CSystem.Int64%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#34](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#34)]  
  
 <span data-ttu-id="e4975-1180">如果`right`已<xref:System.Byte>， <xref:System.Int16>， <xref:System.Int32>， <xref:System.SByte>， <xref:System.UInt16>，或<xref:System.UInt32>的值，則會隱含地轉換成<xref:System.Int64>值執行作業時。</span><span class="sxs-lookup"><span data-stu-id="e4975-1180">If `right` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.</span></span>  
  
 <span data-ttu-id="e4975-1181">這個運算子的對等方法是<xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="e4975-1181">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_LessThanOrEqual" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool operator &lt; (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt; (left As BigInteger, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( &lt; ) : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; bool" Usage="left &lt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="e4975-1182">要比較的第一個值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1182">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="e4975-1183">要比較的第二個值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1183">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="e4975-1184">傳回值，這個值表示 <see cref="T:System.Numerics.BigInteger" /> 值是否小於另一個 <see cref="T:System.Numerics.BigInteger" /> 值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1184">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is less than another <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="e4975-1185">如果 <paramref name="left" /> 小於 <paramref name="right" />，則為 <see langword="true" />；否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-1185"><see langword="true" /> if <paramref name="left" /> is less than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-1186"><xref:System.Numerics.BigInteger.op_LessThan%2A>方法會定義為小於運算子的作業<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1186">The <xref:System.Numerics.BigInteger.op_LessThan%2A> method defines the operation of the less than operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="e4975-1187">它可讓程式碼，如下所示：</span><span class="sxs-lookup"><span data-stu-id="e4975-1187">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#27](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#27)]
 [!code-vb[System.Numeric.BigInteger.Class#27](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#27)]  
  
 <span data-ttu-id="e4975-1188">不支援自訂運算子的語言可以呼叫<xref:System.Numerics.BigInteger.Compare%2A?displayProperty=nameWithType>方法改為。</span><span class="sxs-lookup"><span data-stu-id="e4975-1188">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Compare%2A?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="e4975-1189">某些語言也可以呼叫<xref:System.Numerics.BigInteger.op_LessThan%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29>方法直接，如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="e4975-1189">Some languages can also call the <xref:System.Numerics.BigInteger.op_LessThan%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numeric.BigInteger.Class#28](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#28)]  
  
 <span data-ttu-id="e4975-1190">這個運算子的對等方法是<xref:System.Numerics.BigInteger.Compare%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="e4975-1190">The equivalent method for this operator is <xref:System.Numerics.BigInteger.Compare%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_LessThanOrEqual" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool operator &lt; (System.Numerics.BigInteger left, ulong right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(valuetype System.Numerics.BigInteger left, unsigned int64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt; (left As BigInteger, right As ULong) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;(System::Numerics::BigInteger left, System::UInt64 right);" />
      <MemberSignature Language="F#" Value="static member ( &lt; ) : System.Numerics.BigInteger * uint64 -&gt; bool" Usage="left &lt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="e4975-1191">要比較的第一個值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1191">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="e4975-1192">要比較的第二個值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1192">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="e4975-1193">傳回值，這個值表示 <see cref="T:System.Numerics.BigInteger" /> 值是否小於 64 位元不帶正負號的整數。</span><span class="sxs-lookup"><span data-stu-id="e4975-1193">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is less than a 64-bit unsigned integer.</span></span></summary>
        <returns><span data-ttu-id="e4975-1194">如果 <paramref name="left" /> 小於 <paramref name="right" />，則為 <see langword="true" />；否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-1194"><see langword="true" /> if <paramref name="left" /> is less than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-1195"><xref:System.Numerics.BigInteger.op_LessThan%2A>方法會定義為小於運算子的作業<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1195">The <xref:System.Numerics.BigInteger.op_LessThan%2A> method defines the operation of the less than operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="e4975-1196">它可讓程式碼，如下所示：</span><span class="sxs-lookup"><span data-stu-id="e4975-1196">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#35](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#35)]
 [!code-vb[System.Numerics.BigInteger.Operators#35](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#35)]  
  
 <span data-ttu-id="e4975-1197">不支援自訂運算子的語言可以呼叫<xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>方法改為。</span><span class="sxs-lookup"><span data-stu-id="e4975-1197">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="e4975-1198">它們也可以呼叫<xref:System.Numerics.BigInteger.op_LessThan%28System.Numerics.BigInteger%2CSystem.UInt64%29>方法直接，如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="e4975-1198">They can also call the <xref:System.Numerics.BigInteger.op_LessThan%28System.Numerics.BigInteger%2CSystem.UInt64%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#36](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#36)]  
  
 <span data-ttu-id="e4975-1199">這個運算子的對等方法是<xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="e4975-1199">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_LessThanOrEqual" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool operator &lt; (ulong left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(unsigned int64 left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_LessThan(System.UInt64,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt; (left As ULong, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;(System::UInt64 left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( &lt; ) : uint64 * System.Numerics.BigInteger -&gt; bool" Usage="left &lt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.UInt64" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="e4975-1200">要比較的第一個值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1200">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="e4975-1201">要比較的第二個值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1201">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="e4975-1202">傳回值，這個值表示 64 位元不帶正負號的整數是否小於 <see cref="T:System.Numerics.BigInteger" /> 值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1202">Returns a value that indicates whether a 64-bit unsigned integer is less than a <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="e4975-1203">如果 <paramref name="left" /> 小於 <paramref name="right" />，則為 <see langword="true" />；否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-1203"><see langword="true" /> if <paramref name="left" /> is less than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-1204"><xref:System.Numerics.BigInteger.op_LessThan%2A>方法會定義為小於運算子的作業<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1204">The <xref:System.Numerics.BigInteger.op_LessThan%2A> method defines the operation of the less than operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="e4975-1205">它可讓程式碼，如下所示：</span><span class="sxs-lookup"><span data-stu-id="e4975-1205">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#37](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#37)]
 [!code-vb[System.Numerics.BigInteger.Operators#37](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#37)]  
  
 <span data-ttu-id="e4975-1206">不支援自訂運算子的語言可以呼叫<xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>方法改為。</span><span class="sxs-lookup"><span data-stu-id="e4975-1206">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="e4975-1207">它們也可以呼叫<xref:System.Numerics.BigInteger.op_LessThan%28System.UInt64%2CSystem.Numerics.BigInteger%29>方法直接，如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="e4975-1207">They can also call the <xref:System.Numerics.BigInteger.op_LessThan%28System.UInt64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#38](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#38)]  
  
 <span data-ttu-id="e4975-1208">這個運算子的對等方法是<xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="e4975-1208">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_LessThanOrEqual" />
      </Docs>
    </Member>
    <MemberGroup MemberName="op_LessThanOrEqual">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e4975-1209">傳回值，這個值表示指定的值是否小於或等於另一個指定的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1209">Returns a value that indicates whether a specified value is less than or equal to another specified value.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &lt;= (long left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(int64 left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Int64,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;= (left As Long, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;=(long left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( &lt;= ) : int64 * System.Numerics.BigInteger -&gt; bool" Usage="left &lt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Int64" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="e4975-1210">要比較的第一個值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1210">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="e4975-1211">要比較的第二個值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1211">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="e4975-1212">傳回值，這個值表示 64 位元帶正負號的整數是否小於或等於 <see cref="T:System.Numerics.BigInteger" /> 值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1212">Returns a value that indicates whether a 64-bit signed integer is less than or equal to a <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="e4975-1213">如果 <paramref name="left" /> 小於或等於 <paramref name="right" />，則為 <see langword="true" />；否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-1213"><see langword="true" /> if <paramref name="left" /> is less than or equal to <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-1214"><xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A>方法定義作業的運算子的小於或等於<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1214">The <xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A> method defines the operation of the less than or equal to operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="e4975-1215">它可讓程式碼，如下所示：</span><span class="sxs-lookup"><span data-stu-id="e4975-1215">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#39](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#39)]
 [!code-vb[System.Numerics.BigInteger.Operators#39](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#39)]  
  
 <span data-ttu-id="e4975-1216">不支援自訂運算子的語言可以呼叫<xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>方法改為。</span><span class="sxs-lookup"><span data-stu-id="e4975-1216">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="e4975-1217">它們也可以呼叫<xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.Int64%2CSystem.Numerics.BigInteger%29>方法直接，如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="e4975-1217">They can also call the <xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.Int64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#40](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#40)]  
  
 <span data-ttu-id="e4975-1218">如果`left`已<xref:System.Byte>， <xref:System.Int16>， <xref:System.Int32>， <xref:System.SByte>， <xref:System.UInt16>，或<xref:System.UInt32>的值，則會隱含地轉換成<xref:System.Int64>值執行作業時。</span><span class="sxs-lookup"><span data-stu-id="e4975-1218">If `left` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.</span></span>  
  
 <span data-ttu-id="e4975-1219">這個運算子的對等方法是<xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="e4975-1219">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_LessThan" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &lt;= (System.Numerics.BigInteger left, long right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(valuetype System.Numerics.BigInteger left, int64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;= (left As BigInteger, right As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;=(System::Numerics::BigInteger left, long right);" />
      <MemberSignature Language="F#" Value="static member ( &lt;= ) : System.Numerics.BigInteger * int64 -&gt; bool" Usage="left &lt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="e4975-1220">要比較的第一個值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1220">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="e4975-1221">要比較的第二個值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1221">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="e4975-1222">傳回值，這個值表示 <see cref="T:System.Numerics.BigInteger" /> 值是否小於或等於 64 位元帶正負號的整數。</span><span class="sxs-lookup"><span data-stu-id="e4975-1222">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is less than or equal to a 64-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="e4975-1223">如果 <paramref name="left" /> 小於或等於 <paramref name="right" />，則為 <see langword="true" />；否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-1223"><see langword="true" /> if <paramref name="left" /> is less than or equal to <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-1224"><xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A>方法定義作業的運算子的小於或等於<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1224">The <xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A> method defines the operation of the less than or equal to operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="e4975-1225">它可讓程式碼，如下所示：</span><span class="sxs-lookup"><span data-stu-id="e4975-1225">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#41](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#41)]
 [!code-vb[System.Numerics.BigInteger.Operators#41](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#41)]  
  
 <span data-ttu-id="e4975-1226">不支援自訂運算子的語言可以呼叫<xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>方法改為。</span><span class="sxs-lookup"><span data-stu-id="e4975-1226">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="e4975-1227">它們也可以呼叫<xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.Numerics.BigInteger%2CSystem.Int64%29>方法直接，如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="e4975-1227">They can also call the <xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.Numerics.BigInteger%2CSystem.Int64%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#42](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#42)]  
  
 <span data-ttu-id="e4975-1228">如果`right`已<xref:System.Byte>， <xref:System.Int16>， <xref:System.Int32>， <xref:System.SByte>， <xref:System.UInt16>，或<xref:System.UInt32>的值，則會隱含地轉換成<xref:System.Int64>值執行作業時。</span><span class="sxs-lookup"><span data-stu-id="e4975-1228">If `right` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.</span></span>  
  
 <span data-ttu-id="e4975-1229">這個運算子的對等方法是<xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="e4975-1229">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_LessThan" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &lt;= (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;= (left As BigInteger, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;=(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( &lt;= ) : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; bool" Usage="left &lt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="e4975-1230">要比較的第一個值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1230">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="e4975-1231">要比較的第二個值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1231">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="e4975-1232">傳回值，這個值表示 <see cref="T:System.Numerics.BigInteger" /> 值是否小於或等於另一個 <see cref="T:System.Numerics.BigInteger" /> 值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1232">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is less than or equal to another <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="e4975-1233">如果 <paramref name="left" /> 小於或等於 <paramref name="right" />，則為 <see langword="true" />；否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-1233"><see langword="true" /> if <paramref name="left" /> is less than or equal to <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-1234"><xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A>方法定義作業的運算子的小於或等於<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1234">The <xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A> method defines the operation of the less than or equal to operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="e4975-1235">它可讓程式碼，如下所示：</span><span class="sxs-lookup"><span data-stu-id="e4975-1235">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#29](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#29)]
 [!code-vb[System.Numeric.BigInteger.Class#29](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#29)]  
  
 <span data-ttu-id="e4975-1236">不支援自訂運算子的語言可以呼叫<xref:System.Numerics.BigInteger.Compare%2A>方法改為。</span><span class="sxs-lookup"><span data-stu-id="e4975-1236">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Compare%2A> method instead.</span></span> <span data-ttu-id="e4975-1237">它們也可以呼叫<xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29>方法直接，如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="e4975-1237">They can also call the <xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numeric.BigInteger.Class#30](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#30)]  
  
 <span data-ttu-id="e4975-1238">這個運算子的對等方法是<xref:System.Numerics.BigInteger.Compare%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="e4975-1238">The equivalent method for this operator is <xref:System.Numerics.BigInteger.Compare%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_LessThan" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &lt;= (System.Numerics.BigInteger left, ulong right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(valuetype System.Numerics.BigInteger left, unsigned int64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;= (left As BigInteger, right As ULong) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;=(System::Numerics::BigInteger left, System::UInt64 right);" />
      <MemberSignature Language="F#" Value="static member ( &lt;= ) : System.Numerics.BigInteger * uint64 -&gt; bool" Usage="left &lt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="e4975-1239">要比較的第一個值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1239">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="e4975-1240">要比較的第二個值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1240">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="e4975-1241">傳回值，這個值表示 <see cref="T:System.Numerics.BigInteger" /> 值是否小於或等於 64 位元不帶正負號的整數。</span><span class="sxs-lookup"><span data-stu-id="e4975-1241">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is less than or equal to a 64-bit unsigned integer.</span></span></summary>
        <returns><span data-ttu-id="e4975-1242">如果 <paramref name="left" /> 小於或等於 <paramref name="right" />，則為 <see langword="true" />；否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-1242"><see langword="true" /> if <paramref name="left" /> is less than or equal to <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-1243"><xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A>方法定義作業的運算子的小於或等於<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1243">The <xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A> method defines the operation of the less than or equal to operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="e4975-1244">它可讓程式碼，如下所示：</span><span class="sxs-lookup"><span data-stu-id="e4975-1244">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#43](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#43)]
 [!code-vb[System.Numerics.BigInteger.Operators#43](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#43)]  
  
 <span data-ttu-id="e4975-1245">不支援自訂運算子的語言可以呼叫<xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>方法改為。</span><span class="sxs-lookup"><span data-stu-id="e4975-1245">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="e4975-1246">它們也可以呼叫<xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.Numerics.BigInteger%2CSystem.UInt64%29>方法直接，如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="e4975-1246">They can also call the <xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.Numerics.BigInteger%2CSystem.UInt64%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#44](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#44)]  
  
 <span data-ttu-id="e4975-1247">這個運算子的對等方法是<xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="e4975-1247">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_LessThan" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &lt;= (ulong left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(unsigned int64 left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.UInt64,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;= (left As ULong, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;=(System::UInt64 left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( &lt;= ) : uint64 * System.Numerics.BigInteger -&gt; bool" Usage="left &lt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.UInt64" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="e4975-1248">要比較的第一個值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1248">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="e4975-1249">要比較的第二個值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1249">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="e4975-1250">傳回值，這個值表示 64 位元不帶正負號的整數是否小於或等於 <see cref="T:System.Numerics.BigInteger" /> 值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1250">Returns a value that indicates whether a 64-bit unsigned integer is less than or equal to a <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="e4975-1251">如果 <paramref name="left" /> 小於或等於 <paramref name="right" />，則為 <see langword="true" />；否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-1251"><see langword="true" /> if <paramref name="left" /> is less than or equal to <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-1252"><xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A>方法定義作業的運算子的小於或等於<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1252">The <xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A> method defines the operation of the less than or equal to operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="e4975-1253">它可讓程式碼，如下所示：</span><span class="sxs-lookup"><span data-stu-id="e4975-1253">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#45](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#45)]
 [!code-vb[System.Numerics.BigInteger.Operators#45](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#45)]  
  
 <span data-ttu-id="e4975-1254">不支援自訂運算子的語言可以呼叫<xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>方法改為。</span><span class="sxs-lookup"><span data-stu-id="e4975-1254">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="e4975-1255">它們也可以呼叫<xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.UInt64%2CSystem.Numerics.BigInteger%29>方法直接，如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="e4975-1255">They can also call the <xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.UInt64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#46](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#46)]  
  
 <span data-ttu-id="e4975-1256">這個運算子的對等方法是<xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="e4975-1256">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_LessThan" />
      </Docs>
    </Member>
    <Member MemberName="op_Modulus">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator % (System.Numerics.BigInteger dividend, System.Numerics.BigInteger divisor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Modulus(valuetype System.Numerics.BigInteger dividend, valuetype System.Numerics.BigInteger divisor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Modulus(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator Mod (dividend As BigInteger, divisor As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator %(System::Numerics::BigInteger dividend, System::Numerics::BigInteger divisor);" />
      <MemberSignature Language="F#" Value="static member ( % ) : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="dividend % divisor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dividend" Type="System.Numerics.BigInteger" />
        <Parameter Name="divisor" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="dividend"><span data-ttu-id="e4975-1257">做為被除數的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1257">The value to be divided.</span></span></param>
        <param name="divisor"><span data-ttu-id="e4975-1258">做為除數的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1258">The value to divide by.</span></span></param>
        <summary><span data-ttu-id="e4975-1259">傳回從兩個指定的 <see cref="T:System.Numerics.BigInteger" /> 值相除所得的餘數。</span><span class="sxs-lookup"><span data-stu-id="e4975-1259">Returns the remainder that results from division with two specified <see cref="T:System.Numerics.BigInteger" /> values.</span></span></summary>
        <returns><span data-ttu-id="e4975-1260">相除所得到的餘數。</span><span class="sxs-lookup"><span data-stu-id="e4975-1260">The remainder that results from the division.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-1261"><xref:System.Numerics.BigInteger.op_Modulus%2A>方法定義的模數運算子操作<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1261">The <xref:System.Numerics.BigInteger.op_Modulus%2A> method defines the operation of the modulus operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="e4975-1262">它可讓程式碼，如下所示：</span><span class="sxs-lookup"><span data-stu-id="e4975-1262">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#31](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#31)]
 [!code-vb[System.Numeric.BigInteger.Class#31](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#31)]  
  
 <span data-ttu-id="e4975-1263">不支援自訂運算子的語言可以呼叫<xref:System.Numerics.BigInteger.Remainder%2A?displayProperty=nameWithType>方法改為。</span><span class="sxs-lookup"><span data-stu-id="e4975-1263">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Remainder%2A?displayProperty=nameWithType> method instead.</span></span>  
  
 <span data-ttu-id="e4975-1264">正負號的模數作業所傳回的值而定的符號`dividend`： 如果`dividend`是正數，模數作業會傳回正數的結果; 如果它是負數，模數運算會傳回負的結果。</span><span class="sxs-lookup"><span data-stu-id="e4975-1264">The sign of the value returned by the modulus operation depends on the sign of `dividend`: If `dividend` is positive, the modulus operation returns a positive result; if it is negative, the modulus operation returns a negative result.</span></span> <span data-ttu-id="e4975-1265">模數作業的行為<xref:System.Numerics.BigInteger>值等同於與其他整數類資料類型的模數運算。</span><span class="sxs-lookup"><span data-stu-id="e4975-1265">The behavior of the modulus operation with <xref:System.Numerics.BigInteger> values is identical to the modulus operation with other integral types.</span></span>  
  
 <span data-ttu-id="e4975-1266">這個運算子的對等方法是<xref:System.Numerics.BigInteger.Remainder%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="e4975-1266">The equivalent method for this operator is <xref:System.Numerics.BigInteger.Remainder%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <exception cref="T:System.DivideByZeroException"><span data-ttu-id="e4975-1267"><paramref name="divisor" /> 是 0 (零)。</span><span class="sxs-lookup"><span data-stu-id="e4975-1267"><paramref name="divisor" /> is 0 (zero).</span></span></exception>
        <altmember cref="M:System.Numerics.BigInteger.op_Division(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
        <altmember cref="M:System.Numerics.BigInteger.DivRem(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger@)" />
      </Docs>
    </Member>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator * (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Multiply(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator * (left As BigInteger, right As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator *(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( * ) : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="left * right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="e4975-1268">要相乘的第一個值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1268">The first value to multiply.</span></span></param>
        <param name="right"><span data-ttu-id="e4975-1269">要相乘的第二個值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1269">The second value to multiply.</span></span></param>
        <summary><span data-ttu-id="e4975-1270">將兩個指定的 <see cref="T:System.Numerics.BigInteger" /> 值相乘。</span><span class="sxs-lookup"><span data-stu-id="e4975-1270">Multiplies two specified <see cref="T:System.Numerics.BigInteger" /> values.</span></span></summary>
        <returns><span data-ttu-id="e4975-1271"><paramref name="left" /> 與 <paramref name="right" /> 的乘積。</span><span class="sxs-lookup"><span data-stu-id="e4975-1271">The product of <paramref name="left" /> and <paramref name="right" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-1272"><xref:System.Numerics.BigInteger.op_Multiply%2A>方法定義的乘法運算子操作<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1272">The <xref:System.Numerics.BigInteger.op_Multiply%2A> method defines the operation of the multiplication operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="e4975-1273">它可讓程式碼，如下所示：</span><span class="sxs-lookup"><span data-stu-id="e4975-1273">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#11)]
 [!code-vb[System.Numeric.BigInteger.Class#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#11)]  
  
 <span data-ttu-id="e4975-1274">這個運算子的對等方法是<xref:System.Numerics.BigInteger.Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="e4975-1274">The equivalent method for this operator is <xref:System.Numerics.BigInteger.Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="op_OnesComplement">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator ~ (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_OnesComplement(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_OnesComplement(System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator Not (value As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator ~(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member op_OnesComplement : System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.op_OnesComplement value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e4975-1275">整數值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1275">An integer value.</span></span></param>
        <summary><span data-ttu-id="e4975-1276">傳回 <see cref="T:System.Numerics.BigInteger" /> 值的位元一進位補數。</span><span class="sxs-lookup"><span data-stu-id="e4975-1276">Returns the bitwise one's complement of a <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="e4975-1277"><paramref name="value" /> 的位元一進位補數。</span><span class="sxs-lookup"><span data-stu-id="e4975-1277">The bitwise one's complement of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-1278"><xref:System.Numerics.BigInteger.op_OnesComplement%2A>方法定義作業的位元一補數運算子的<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1278">The <xref:System.Numerics.BigInteger.op_OnesComplement%2A> method defines the operation of the bitwise one's complement operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="e4975-1279">位元一補數運算子會反轉每個位元的數字的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1279">The bitwise one's complement operator reverses each bit in a numeric value.</span></span> <span data-ttu-id="e4975-1280">也就是位元在`value`屬於 0 會設定為結果中的 1 和 1 的位元會設為 0，結果中。</span><span class="sxs-lookup"><span data-stu-id="e4975-1280">That is, bits in `value` that are 0 are set to 1 in the result, and bits that are 1 are set to 0 in the result.</span></span> <span data-ttu-id="e4975-1281"><xref:System.Numerics.BigInteger.op_OnesComplement%2A>方法可讓程式碼，如下所示：</span><span class="sxs-lookup"><span data-stu-id="e4975-1281">The <xref:System.Numerics.BigInteger.op_OnesComplement%2A> method enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.OnesComplement#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.OnesComplement/cs/OnesComplement1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.OnesComplement#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.OnesComplement/vb/OnesComplement1.vb#1)]  
  
 <span data-ttu-id="e4975-1282">不支援自訂運算子的語言或許可以呼叫<xref:System.Numerics.BigInteger.op_OnesComplement%2A>方法直接以執行位元一進位補數作業。</span><span class="sxs-lookup"><span data-stu-id="e4975-1282">Languages that do not support custom operators may be able to call the <xref:System.Numerics.BigInteger.op_OnesComplement%2A> method directly to perform a bitwise one's complement operation.</span></span> <span data-ttu-id="e4975-1283">例如: </span><span class="sxs-lookup"><span data-stu-id="e4975-1283">For example:</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.OnesComplement#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.OnesComplement/vb/onescomplement2.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_RightShift">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator &gt;&gt; (System.Numerics.BigInteger value, int shift);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_RightShift(valuetype System.Numerics.BigInteger value, int32 shift) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_RightShift(System.Numerics.BigInteger,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt;&gt; (value As BigInteger, shift As Integer) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator &gt;&gt;(System::Numerics::BigInteger value, int shift);" />
      <MemberSignature Language="F#" Value="static member ( &gt;&gt;&gt; ) : System.Numerics.BigInteger * int -&gt; System.Numerics.BigInteger" Usage="value &gt;&gt;&gt; shift" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
        <Parameter Name="shift" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e4975-1284">要執行位元移位的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1284">The value whose bits are to be shifted.</span></span></param>
        <param name="shift"><span data-ttu-id="e4975-1285"><paramref name="value" /> 向右移位的位元數。</span><span class="sxs-lookup"><span data-stu-id="e4975-1285">The number of bits to shift <paramref name="value" /> to the right.</span></span></param>
        <summary><span data-ttu-id="e4975-1286">將 <see cref="T:System.Numerics.BigInteger" /> 值向右移動指定的位元數。</span><span class="sxs-lookup"><span data-stu-id="e4975-1286">Shifts a <see cref="T:System.Numerics.BigInteger" /> value a specified number of bits to the right.</span></span></summary>
        <returns><span data-ttu-id="e4975-1287">已經向右移動指定之位元數的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1287">A value that has been shifted to the right by the specified number of bits.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-1288"><xref:System.Numerics.BigInteger.op_RightShift%2A>方法定義的位元右移位運算子操作<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1288">The <xref:System.Numerics.BigInteger.op_RightShift%2A> method defines the operation of the bitwise right-shift operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="e4975-1289">它可讓程式碼，如下所示：</span><span class="sxs-lookup"><span data-stu-id="e4975-1289">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#47](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/RightShift1.cs#47)]
 [!code-vb[System.Numerics.BigInteger.Operators#47](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#47)]  
  
 <span data-ttu-id="e4975-1290">不支援自訂運算子的語言可以執行位元右移運算，除以`value`所`BigInteger.Pow(2, shift)`，然後減去 1 次`shift`負值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1290">Languages that do not support custom operators can perform a bitwise right-shift operation by dividing `value` by `BigInteger.Pow(2, shift)` and subtracting 1 times `shift` for negative values.</span></span> <span data-ttu-id="e4975-1291">下列範例示範結果會使用這個運算子的結果相同。</span><span class="sxs-lookup"><span data-stu-id="e4975-1291">The following example shows that the results are identical to the results of using this operator.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#48](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/RightShift1.cs#48)]
 [!code-vb[System.Numerics.BigInteger.Operators#48](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#48)]  
  
 <span data-ttu-id="e4975-1292">如果`shift`大於或等於是肯定的位元數<xref:System.Numerics.BigInteger>的值，向右移位作業的結果是<xref:System.Numerics.BigInteger.Zero%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="e4975-1292">If `shift` is greater than or equal to the number of bits in a positive <xref:System.Numerics.BigInteger> value, the result of the right-shift operation is <xref:System.Numerics.BigInteger.Zero%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="e4975-1293">如果`shift`負值的位元數大於<xref:System.Numerics.BigInteger>的值，向右移位作業的結果是<xref:System.Numerics.BigInteger.MinusOne%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="e4975-1293">If `shift` is greater than the number of bits in a negative <xref:System.Numerics.BigInteger> value, the result of the right-shift operation is <xref:System.Numerics.BigInteger.MinusOne%2A?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.op_LeftShift(System.Numerics.BigInteger,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator - (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Subtraction(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Subtraction(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (left As BigInteger, right As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator -(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( - ) : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="left - right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="e4975-1294">要被減的值 (被減數)。</span><span class="sxs-lookup"><span data-stu-id="e4975-1294">The value to subtract from (the minuend).</span></span></param>
        <param name="right"><span data-ttu-id="e4975-1295">要減去的值 (減數)。</span><span class="sxs-lookup"><span data-stu-id="e4975-1295">The value to subtract (the subtrahend).</span></span></param>
        <summary><span data-ttu-id="e4975-1296">將某個 <see cref="T:System.Numerics.BigInteger" /> 值減去另一個 <see cref="T:System.Numerics.BigInteger" /> 值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1296">Subtracts a <see cref="T:System.Numerics.BigInteger" /> value from another <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="e4975-1297"><paramref name="right" /> 減去 <paramref name="left" /> 的結果。</span><span class="sxs-lookup"><span data-stu-id="e4975-1297">The result of subtracting <paramref name="right" /> from <paramref name="left" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-1298"><xref:System.Numerics.BigInteger.op_Subtraction%2A>方法定義之減法運算子的作業<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1298">The <xref:System.Numerics.BigInteger.op_Subtraction%2A> method defines the operation of the subtraction operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="e4975-1299">它可讓程式碼，如下所示：</span><span class="sxs-lookup"><span data-stu-id="e4975-1299">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#14)]
 [!code-vb[System.Numeric.BigInteger.Class#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#14)]  
  
 <span data-ttu-id="e4975-1300">不支援自訂運算子的語言可以呼叫<xref:System.Numerics.BigInteger.Subtract%2A?displayProperty=nameWithType>方法改為。</span><span class="sxs-lookup"><span data-stu-id="e4975-1300">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Subtract%2A?displayProperty=nameWithType> method instead.</span></span>  
  
 <span data-ttu-id="e4975-1301">這個運算子的對等方法是<xref:System.Numerics.BigInteger.Subtract%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="e4975-1301">The equivalent method for this operator is <xref:System.Numerics.BigInteger.Subtract%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.Subtract(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="op_UnaryNegation">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator - (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_UnaryNegation(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_UnaryNegation(System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (value As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator -(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member ( ~- ) : System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="- value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e4975-1302">要變換正負號的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1302">The value to negate.</span></span></param>
        <summary><span data-ttu-id="e4975-1303">將指定的 BigInteger 值變換正負號。</span><span class="sxs-lookup"><span data-stu-id="e4975-1303">Negates a specified BigInteger value.</span></span></summary>
        <returns><span data-ttu-id="e4975-1304"><paramref name="value" /> 參數乘以負一 (-1) 的結果。</span><span class="sxs-lookup"><span data-stu-id="e4975-1304">The result of the <paramref name="value" /> parameter multiplied by negative one (-1).</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-1305"><xref:System.Numerics.BigInteger.op_UnaryNegation%2A>方法定義的一元負運算子 （或加法反元素運算子） 作業<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1305">The <xref:System.Numerics.BigInteger.op_UnaryNegation%2A> method defines the operation of the unary negation operator (or the additive inverse operator) for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="e4975-1306">作業會產生值，它會新增至原始的數字時，導致 0 （零）。</span><span class="sxs-lookup"><span data-stu-id="e4975-1306">The operation produces a value that results in 0 (zero) when it is added to the original number.</span></span> <span data-ttu-id="e4975-1307">不支援自訂運算子的語言可以呼叫<xref:System.Numerics.BigInteger.Negate%2A>方法改為。</span><span class="sxs-lookup"><span data-stu-id="e4975-1307">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Negate%2A> method instead.</span></span>  
  
 <span data-ttu-id="e4975-1308">這個運算子的對等方法是 <xref:System.Numerics.BigInteger.Negate%28System.Numerics.BigInteger%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="e4975-1308">The equivalent method for this operator is <xref:System.Numerics.BigInteger.Negate%28System.Numerics.BigInteger%29?displayProperty=nameWithType></span></span>  
  
## Examples  
 <span data-ttu-id="e4975-1309">下列範例說明三種不同的方式，要變換正負號的值<xref:System.Numerics.BigInteger>物件。</span><span class="sxs-lookup"><span data-stu-id="e4975-1309">The following example illustrates three different ways to negate the value of a <xref:System.Numerics.BigInteger> object.</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#16)]
 [!code-vb[System.Numeric.BigInteger.Class#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#16)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_UnaryPlus">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator + (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_UnaryPlus(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_UnaryPlus(System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (value As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator +(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member ( ~+ ) : System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="+ value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e4975-1310">整數值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1310">An integer value.</span></span></param>
        <summary><span data-ttu-id="e4975-1311">傳回 <see cref="T:System.Numerics.BigInteger" /> 運算元的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1311">Returns the value of the <see cref="T:System.Numerics.BigInteger" /> operand.</span></span> <span data-ttu-id="e4975-1312">(運算元的正負號不會變更)。</span><span class="sxs-lookup"><span data-stu-id="e4975-1312">(The sign of the operand is unchanged.)</span></span></summary>
        <returns><span data-ttu-id="e4975-1313"><paramref name="value" /> 運算元的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1313">The value of the <paramref name="value" /> operand.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-1314"><xref:System.Numerics.BigInteger.op_UnaryPlus%2A>方法來定義一元正運算子，用於操作<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1314">The <xref:System.Numerics.BigInteger.op_UnaryPlus%2A> method defines the operation of the unary positive operator for <xref:System.Numerics.BigInteger> values.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e4975-1315">將數字的字串表示，轉換為其相等的 <see cref="T:System.Numerics.BigInteger" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-1315">Converts the string representation of a number to its <see cref="T:System.Numerics.BigInteger" /> equivalent.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Parse (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Parse(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (value As String) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger Parse(System::String ^ value);" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.Parse value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e4975-1316">字串，包含要轉換的數字。</span><span class="sxs-lookup"><span data-stu-id="e4975-1316">A string that contains the number to convert.</span></span></param>
        <summary><span data-ttu-id="e4975-1317">將數字的字串表示，轉換為其相等的 <see cref="T:System.Numerics.BigInteger" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-1317">Converts the string representation of a number to its <see cref="T:System.Numerics.BigInteger" /> equivalent.</span></span></summary>
        <returns><span data-ttu-id="e4975-1318">值，相當於以 <paramref name="value" /> 參數指定的數字。</span><span class="sxs-lookup"><span data-stu-id="e4975-1318">A value that is equivalent to the number specified in the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-1319">`value`參數應該是下列格式之數字的字串表示。</span><span class="sxs-lookup"><span data-stu-id="e4975-1319">The `value` parameter should be the string representation of a number in the following form.</span></span>  
  
 <span data-ttu-id="e4975-1320">[*ws*][*sign*]*digits*[*ws*]</span><span class="sxs-lookup"><span data-stu-id="e4975-1320">[*ws*][*sign*]*digits*[*ws*]</span></span>  
  
 <span data-ttu-id="e4975-1321">在方括號 ([ 和 ]) 中的項目是選擇性的項目。</span><span class="sxs-lookup"><span data-stu-id="e4975-1321">Elements in square brackets ([ and ]) are optional.</span></span> <span data-ttu-id="e4975-1322">下表說明每個元素。</span><span class="sxs-lookup"><span data-stu-id="e4975-1322">The following table describes each element.</span></span>  
  
|<span data-ttu-id="e4975-1323">元素</span><span class="sxs-lookup"><span data-stu-id="e4975-1323">Element</span></span>|<span data-ttu-id="e4975-1324">描述</span><span class="sxs-lookup"><span data-stu-id="e4975-1324">Description</span></span>|  
|-------------|-----------------|  
|<span data-ttu-id="e4975-1325">*ws*</span><span class="sxs-lookup"><span data-stu-id="e4975-1325">*ws*</span></span>|<span data-ttu-id="e4975-1326">選擇性的泛空白字元。</span><span class="sxs-lookup"><span data-stu-id="e4975-1326">Optional white space.</span></span>|  
|<span data-ttu-id="e4975-1327">*簽署*</span><span class="sxs-lookup"><span data-stu-id="e4975-1327">*sign*</span></span>|<span data-ttu-id="e4975-1328">選擇性正負號。</span><span class="sxs-lookup"><span data-stu-id="e4975-1328">An optional sign.</span></span> <span data-ttu-id="e4975-1329">有效的符號字元由<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=nameWithType>和<xref:System.Globalization.NumberFormatInfo.PositiveSign%2A?displayProperty=nameWithType>目前文化特性的屬性。</span><span class="sxs-lookup"><span data-stu-id="e4975-1329">Valid sign characters are determined by the <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=nameWithType> and <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A?displayProperty=nameWithType> properties of the current culture.</span></span>|  
|<span data-ttu-id="e4975-1330">*digits*</span><span class="sxs-lookup"><span data-stu-id="e4975-1330">*digits*</span></span>|<span data-ttu-id="e4975-1331">範圍從 0 到 9 的數字順序。</span><span class="sxs-lookup"><span data-stu-id="e4975-1331">A sequence of digits ranging from 0 to 9.</span></span> <span data-ttu-id="e4975-1332">任何前置的零都會被忽略。</span><span class="sxs-lookup"><span data-stu-id="e4975-1332">Any leading zeros are ignored.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="e4975-1333">所指定的字串`value`參數會解譯使用<xref:System.Globalization.NumberStyles.Integer?displayProperty=nameWithType>樣式。</span><span class="sxs-lookup"><span data-stu-id="e4975-1333">The string specified by the `value` parameter is interpreted by using the <xref:System.Globalization.NumberStyles.Integer?displayProperty=nameWithType> style.</span></span> <span data-ttu-id="e4975-1334">它不能包含任何的群組分隔符號或小數分隔符號，而且不得有小數部分。</span><span class="sxs-lookup"><span data-stu-id="e4975-1334">It cannot contain any group separators or decimal separator, and it cannot have a decimal portion.</span></span>  
  
 <span data-ttu-id="e4975-1335">`value`參數會剖析使用的格式設定資訊中<xref:System.Globalization.NumberFormatInfo?displayProperty=nameWithType>初始化目前系統文化特性的物件。</span><span class="sxs-lookup"><span data-stu-id="e4975-1335">The `value` parameter is parsed by using the formatting information in a <xref:System.Globalization.NumberFormatInfo?displayProperty=nameWithType> object that is initialized for the current system culture.</span></span> <span data-ttu-id="e4975-1336">如需詳細資訊，請參閱<xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="e4975-1336">For more information, see <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="e4975-1337">若要將字串剖析使用特定文化特性格式資訊，請使用<xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.IFormatProvider%29>方法。</span><span class="sxs-lookup"><span data-stu-id="e4975-1337">To parse a string by using the formatting information of a specific culture, use the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.IFormatProvider%29> method.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="e4975-1338">如果您使用<xref:System.Numerics.BigInteger.Parse%2A>方法，以往返的字串表示的<xref:System.Numerics.BigInteger>所輸出的值<xref:System.Numerics.BigInteger.ToString%2A>方法，您應該使用<xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=nameWithType>使用"R"格式規範，以產生的字串表示的方法<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1338">If you use the <xref:System.Numerics.BigInteger.Parse%2A> method to round-trip the string representation of a <xref:System.Numerics.BigInteger> value that was output by the <xref:System.Numerics.BigInteger.ToString%2A> method, you should use the <xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=nameWithType> method with the "R" format specifier to generate the string representation of the <xref:System.Numerics.BigInteger> value.</span></span> <span data-ttu-id="e4975-1339">否則的字串表示法<xref:System.Numerics.BigInteger>會保留 50 的原始值和資料的最高有效位數時可能會遺失您使用僅<xref:System.Numerics.BigInteger.Parse%2A>方法，以還原<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1339">Otherwise, the string representation of the <xref:System.Numerics.BigInteger> preserves only the 50 most significant digits of the original value, and data may be lost when you use the <xref:System.Numerics.BigInteger.Parse%2A> method to restore the <xref:System.Numerics.BigInteger> value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e4975-1340">下列範例會使用<xref:System.Numerics.BigInteger.Parse%28System.String%29>方法具現化兩個<xref:System.Numerics.BigInteger>物件。</span><span class="sxs-lookup"><span data-stu-id="e4975-1340">The following example uses the <xref:System.Numerics.BigInteger.Parse%28System.String%29> method to instantiate two <xref:System.Numerics.BigInteger> objects.</span></span> <span data-ttu-id="e4975-1341">乘以每個物件，另一個數字，然後再呼叫<xref:System.Numerics.BigInteger.Compare%2A>方法，以判斷兩個值之間的關聯性。</span><span class="sxs-lookup"><span data-stu-id="e4975-1341">It multiplies each object by another number and then calls the <xref:System.Numerics.BigInteger.Compare%2A> method to determine the relationship between the two values.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Parse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/cs/Parse1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Parse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/vb/Parse1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e4975-1342"><paramref name="value" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-1342"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="e4975-1343"><paramref name="value" /> 的格式不正確。</span><span class="sxs-lookup"><span data-stu-id="e4975-1343"><paramref name="value" /> is not in the correct format.</span></span></exception>
        <altmember cref="Overload:System.Numerics.BigInteger.TryParse" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Parse (string value, System.Globalization.NumberStyles style);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Parse(string value, valuetype System.Globalization.NumberStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Parse(System.String,System.Globalization.NumberStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (value As String, style As NumberStyles) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger Parse(System::String ^ value, System::Globalization::NumberStyles style);" />
      <MemberSignature Language="F#" Value="static member Parse : string * System.Globalization.NumberStyles -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.Parse (value, style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e4975-1344">字串，包含要轉換的數字。</span><span class="sxs-lookup"><span data-stu-id="e4975-1344">A string that contains a number to convert.</span></span></param>
        <param name="style"><span data-ttu-id="e4975-1345">指定 <paramref name="value" /> 可以使用的格式之列舉值的位元組合。</span><span class="sxs-lookup"><span data-stu-id="e4975-1345">A bitwise combination of the enumeration values that specify the permitted format of <paramref name="value" />.</span></span></param>
        <summary><span data-ttu-id="e4975-1346">將指定樣式中數字的字串表示轉換為其相等的 <see cref="T:System.Numerics.BigInteger" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-1346">Converts the string representation of a number in a specified style to its <see cref="T:System.Numerics.BigInteger" /> equivalent.</span></span></summary>
        <returns><span data-ttu-id="e4975-1347">值，相當於以 <paramref name="value" /> 參數指定的數字。</span><span class="sxs-lookup"><span data-stu-id="e4975-1347">A value that is equivalent to the number specified in the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-1348">`style`參數定義中允許的樣式項目 （例如空白字元、 正數或負數符號、 群組分隔符號或小數點符號）`value`剖析作業成功的參數。</span><span class="sxs-lookup"><span data-stu-id="e4975-1348">The `style` parameter defines the style elements (such as white space, the positive or negative sign symbol, the group separator symbol, or the decimal point symbol) that are allowed in the `value` parameter for the parse operation to succeed.</span></span> <span data-ttu-id="e4975-1349">`styles` 必須是從位元旗標組合<xref:System.Globalization.NumberStyles>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="e4975-1349">`styles` must be a combination of bit flags from the <xref:System.Globalization.NumberStyles> enumeration.</span></span> <span data-ttu-id="e4975-1350">`style`參數可讓這個方法多載有用的時機`value`包含十六進位值的字串表示，當所表示之數字系統，（十進位或十六進位）`value`已知只能在執行階段，或當您不允許空白字元，或登符號在`value`。</span><span class="sxs-lookup"><span data-stu-id="e4975-1350">The `style` parameter makes this method overload useful when `value` contains the string representation of a hexadecimal value, when the number system (decimal or hexadecimal) represented by `value` is known only at run time, or when you want to disallow white space or a sign symbol in `value`.</span></span>  
  
 <span data-ttu-id="e4975-1351">值而定`style`，則`value`參數可能包括下列項目：</span><span class="sxs-lookup"><span data-stu-id="e4975-1351">Depending on the value of `style`, the `value` parameter may include the following elements:</span></span>  
  
 <span data-ttu-id="e4975-1352">[*ws*][*$*][*sign*][*digits*,]*digits*[.*fractional_digits*][E[*sign*]*exponential_digits*][*ws*]</span><span class="sxs-lookup"><span data-stu-id="e4975-1352">[*ws*][*$*][*sign*][*digits*,]*digits*[.*fractional_digits*][E[*sign*]*exponential_digits*][*ws*]</span></span>  
  
 <span data-ttu-id="e4975-1353">如果`style`包含<xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType>，則`value`參數可能包含下列項目：</span><span class="sxs-lookup"><span data-stu-id="e4975-1353">If `style` includes <xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType>, the `value` parameter may contain the following elements:</span></span>  
  
 <span data-ttu-id="e4975-1354">[*ws*]*hexdigits*[*ws*]</span><span class="sxs-lookup"><span data-stu-id="e4975-1354">[*ws*]*hexdigits*[*ws*]</span></span>  
  
 <span data-ttu-id="e4975-1355">在方括號 ([ 和 ]) 中的項目是選擇性的項目。</span><span class="sxs-lookup"><span data-stu-id="e4975-1355">Elements in square brackets ([ and ]) are optional.</span></span> <span data-ttu-id="e4975-1356">下表說明每個元素。</span><span class="sxs-lookup"><span data-stu-id="e4975-1356">The following table describes each element.</span></span>  
  
|<span data-ttu-id="e4975-1357">元素</span><span class="sxs-lookup"><span data-stu-id="e4975-1357">Element</span></span>|<span data-ttu-id="e4975-1358">描述</span><span class="sxs-lookup"><span data-stu-id="e4975-1358">Description</span></span>|  
|-------------|-----------------|  
|<span data-ttu-id="e4975-1359">*ws*</span><span class="sxs-lookup"><span data-stu-id="e4975-1359">*ws*</span></span>|<span data-ttu-id="e4975-1360">選擇性的泛空白字元。</span><span class="sxs-lookup"><span data-stu-id="e4975-1360">Optional white space.</span></span> <span data-ttu-id="e4975-1361">空白字元可以出現在開頭`value`如果`style`包含<xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType>旗標，也可以顯示在結尾`value`如果`style`包含<xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType>旗標。</span><span class="sxs-lookup"><span data-stu-id="e4975-1361">White space can appear at the start of `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> flag, and it can appear at the end of `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType> flag.</span></span>|  
|*$*|<span data-ttu-id="e4975-1362">特定文化特性的貨幣符號。</span><span class="sxs-lookup"><span data-stu-id="e4975-1362">A culture-specific currency symbol.</span></span> <span data-ttu-id="e4975-1363">在字串中的位置由定義<xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=nameWithType>和<xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=nameWithType>目前文化特性的屬性。</span><span class="sxs-lookup"><span data-stu-id="e4975-1363">Its position in the string is defined by the <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=nameWithType> and <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=nameWithType> properties of the current culture.</span></span> <span data-ttu-id="e4975-1364">目前的文化特性的貨幣符號會出現在`value`如果`style`包含<xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType>旗標。</span><span class="sxs-lookup"><span data-stu-id="e4975-1364">The current culture's currency symbol can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="e4975-1365">*簽署*</span><span class="sxs-lookup"><span data-stu-id="e4975-1365">*sign*</span></span>|<span data-ttu-id="e4975-1366">選擇性正負號。</span><span class="sxs-lookup"><span data-stu-id="e4975-1366">An optional sign.</span></span> <span data-ttu-id="e4975-1367">符號可以出現在開頭`value`如果`style`包含<xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType>旗標，也可以顯示在結尾`value`如果`style`包含<xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType>旗標。</span><span class="sxs-lookup"><span data-stu-id="e4975-1367">The sign can appear at the start of `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType> flag, and it can appear at the end of `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="e4975-1368">可用於括號`value`表示負值`style`包含<xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType>旗標。</span><span class="sxs-lookup"><span data-stu-id="e4975-1368">Parentheses can be used in `value` to indicate a negative value if `style` includes the <xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="e4975-1369">*digits*</span><span class="sxs-lookup"><span data-stu-id="e4975-1369">*digits*</span></span><br /><br /> <span data-ttu-id="e4975-1370">*fractional_digits*</span><span class="sxs-lookup"><span data-stu-id="e4975-1370">*fractional_digits*</span></span><br /><br /> <span data-ttu-id="e4975-1371">*exponential_digits*</span><span class="sxs-lookup"><span data-stu-id="e4975-1371">*exponential_digits*</span></span>|<span data-ttu-id="e4975-1372">從 0 到 9 的數字序列。</span><span class="sxs-lookup"><span data-stu-id="e4975-1372">A sequence of digits from 0 through 9.</span></span> <span data-ttu-id="e4975-1373">針對*fractional_digits*，只有數字 0 是有效。</span><span class="sxs-lookup"><span data-stu-id="e4975-1373">For *fractional_digits*, only the digit 0 is valid.</span></span>|  
|<span data-ttu-id="e4975-1374">*、*</span><span class="sxs-lookup"><span data-stu-id="e4975-1374">*,*</span></span>|<span data-ttu-id="e4975-1375">特定文化特性的群組分隔符號。</span><span class="sxs-lookup"><span data-stu-id="e4975-1375">A culture-specific group separator symbol.</span></span> <span data-ttu-id="e4975-1376">目前的文化特性的群組分隔符號可以出現在`value`如果`style`包含<xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType>旗標。</span><span class="sxs-lookup"><span data-stu-id="e4975-1376">The current culture's group separator can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="e4975-1377">*.*</span><span class="sxs-lookup"><span data-stu-id="e4975-1377">*.*</span></span>|<span data-ttu-id="e4975-1378">特定文化特性的貨幣符號。</span><span class="sxs-lookup"><span data-stu-id="e4975-1378">A culture-specific decimal point symbol.</span></span> <span data-ttu-id="e4975-1379">目前的文化特性的貨幣符號會出現在`value`如果`style`包含<xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType>旗標。</span><span class="sxs-lookup"><span data-stu-id="e4975-1379">The current culture's decimal point symbol can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="e4975-1380">只是數字 0 會顯示為小數位數的剖析作業才會成功;如果*fractional_digits*包含任何其他數字，<xref:System.FormatException>就會擲回。</span><span class="sxs-lookup"><span data-stu-id="e4975-1380">Only the digit 0 can appear as a fractional digit for the parse operation to succeed; if *fractional_digits* includes any other digit, a <xref:System.FormatException> is thrown.</span></span>|  
|<span data-ttu-id="e4975-1381">E</span><span class="sxs-lookup"><span data-stu-id="e4975-1381">E</span></span>|<span data-ttu-id="e4975-1382">"E"或者"E"字元，表示代表的值時，會以指數 （科學記號） 標記法。</span><span class="sxs-lookup"><span data-stu-id="e4975-1382">The "e" or "E" character, which indicates that the value is represented in exponential (scientific) notation.</span></span> <span data-ttu-id="e4975-1383">`value`參數可代表指數標記法之數字，如果`style`包含<xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType>旗標。</span><span class="sxs-lookup"><span data-stu-id="e4975-1383">The `value` parameter can represent a number in exponential notation if `style` includes the <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="e4975-1384">*hexdigits*</span><span class="sxs-lookup"><span data-stu-id="e4975-1384">*hexdigits*</span></span>|<span data-ttu-id="e4975-1385">一連串的從 0 到 f 或 0 到 f 的十六進位數字</span><span class="sxs-lookup"><span data-stu-id="e4975-1385">A sequence of hexadecimal digits from 0 through f, or 0 through F.</span></span>|  
  
> [!NOTE]
> <span data-ttu-id="e4975-1386">中的任何終止 NUL (u+0000) 字元`s`剖析作業中，不論值會忽略`style`引數。</span><span class="sxs-lookup"><span data-stu-id="e4975-1386">Any terminating NUL (U+0000) characters in `s` are ignored by the parsing operation, regardless of the value of the `style` argument.</span></span>

 <span data-ttu-id="e4975-1387">只有數字的字串 (對應至<xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType>樣式) 一律會成功剖析。</span><span class="sxs-lookup"><span data-stu-id="e4975-1387">A string with digits only (which corresponds to the <xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType> style) always parses successfully.</span></span> <span data-ttu-id="e4975-1388">大部分的其餘<xref:System.Globalization.NumberStyles>成員控制可能存在，但不是一定要出現在輸入字串的項目。</span><span class="sxs-lookup"><span data-stu-id="e4975-1388">Most of the remaining <xref:System.Globalization.NumberStyles> members control elements that may be present, but are not required to be present, in the input string.</span></span> <span data-ttu-id="e4975-1389">下表指出如何個別<xref:System.Globalization.NumberStyles>成員會影響可能會出現在項目`value`。</span><span class="sxs-lookup"><span data-stu-id="e4975-1389">The following table indicates how individual <xref:System.Globalization.NumberStyles> members affect the elements that may be present in `value`.</span></span>  
  
|<span data-ttu-id="e4975-1390">`NumberStyles` 值</span><span class="sxs-lookup"><span data-stu-id="e4975-1390">`NumberStyles` value</span></span>|<span data-ttu-id="e4975-1391">中的項目允許`value`除了數字</span><span class="sxs-lookup"><span data-stu-id="e4975-1391">Elements permitted in `value` in addition to digits</span></span>|  
|--------------------------|---------------------------------------------------------|  
|<xref:System.Globalization.NumberStyles.None>|<span data-ttu-id="e4975-1392">*數字*只有項目。</span><span class="sxs-lookup"><span data-stu-id="e4975-1392">The *digits* element only.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowDecimalPoint>|<span data-ttu-id="e4975-1393">小數點 （.） 及*小數位數*項目。</span><span class="sxs-lookup"><span data-stu-id="e4975-1393">The decimal point (.) and *fractional-digits* elements.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowExponent>|<span data-ttu-id="e4975-1394">"E"或"E"字元，這表示指數標記法，連同*exponential_digits*。</span><span class="sxs-lookup"><span data-stu-id="e4975-1394">The "e" or "E" character, which indicates exponential notation, along with *exponential_digits*.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowLeadingWhite>|<span data-ttu-id="e4975-1395">*Ws*開頭的項目`value`。</span><span class="sxs-lookup"><span data-stu-id="e4975-1395">The *ws* element at the start of `value`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowTrailingWhite>|<span data-ttu-id="e4975-1396">*Ws*結尾的項目`value`。</span><span class="sxs-lookup"><span data-stu-id="e4975-1396">The *ws* element at the end of `value`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowLeadingSign>|<span data-ttu-id="e4975-1397">*號*開頭的項目`value`。</span><span class="sxs-lookup"><span data-stu-id="e4975-1397">The *sign* element at the start of `value`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowTrailingSign>|<span data-ttu-id="e4975-1398">*號*結尾的項目`value`。</span><span class="sxs-lookup"><span data-stu-id="e4975-1398">The *sign* element at the end of `value`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowParentheses>|<span data-ttu-id="e4975-1399">*號*括號括住的數字值的形式的項目。</span><span class="sxs-lookup"><span data-stu-id="e4975-1399">The *sign* element in the form of parentheses enclosing the numeric value.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowThousands>|<span data-ttu-id="e4975-1400">群組分隔符號 （，） 項目。</span><span class="sxs-lookup"><span data-stu-id="e4975-1400">The group separator (,) element.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowCurrencySymbol>|<span data-ttu-id="e4975-1401">貨幣 （$） 的項目。</span><span class="sxs-lookup"><span data-stu-id="e4975-1401">The currency ($) element.</span></span>|  
|<xref:System.Globalization.NumberStyles.Currency>|<span data-ttu-id="e4975-1402">所有項目。</span><span class="sxs-lookup"><span data-stu-id="e4975-1402">All elements.</span></span> <span data-ttu-id="e4975-1403">不過，`value`無法表示十六進位數字或指數標記法之數字。</span><span class="sxs-lookup"><span data-stu-id="e4975-1403">However, `value` cannot represent a hexadecimal number or a number in exponential notation.</span></span>|  
|<xref:System.Globalization.NumberStyles.Float>|<span data-ttu-id="e4975-1404">*Ws*開頭或結尾的項目`value`，*登*開頭`value`，並在小數點 (*。*) 符號。</span><span class="sxs-lookup"><span data-stu-id="e4975-1404">The *ws* element at the start or end of `value`, *sign* at the start of `value`, and the decimal point (*.*) symbol.</span></span> <span data-ttu-id="e4975-1405">`value`參數也可以使用指數標記法。</span><span class="sxs-lookup"><span data-stu-id="e4975-1405">The `value` parameter can also use exponential notation.</span></span>|  
|<xref:System.Globalization.NumberStyles.Number>|<span data-ttu-id="e4975-1406">`ws`， `sign`、 群組分隔符號 (*，*)，和小數點 (*。*) 項目。</span><span class="sxs-lookup"><span data-stu-id="e4975-1406">The `ws`, `sign`, group separator (*,*), and decimal point (*.*) elements.</span></span>|  
|<xref:System.Globalization.NumberStyles.Any>|<span data-ttu-id="e4975-1407">所有項目。</span><span class="sxs-lookup"><span data-stu-id="e4975-1407">All elements.</span></span> <span data-ttu-id="e4975-1408">不過，`value`無法代表十六進位數字。</span><span class="sxs-lookup"><span data-stu-id="e4975-1408">However, `value` cannot represent a hexadecimal number.</span></span>|  
  
> [!IMPORTANT]
>  <span data-ttu-id="e4975-1409">如果您使用<xref:System.Numerics.BigInteger.Parse%2A>方法，以往返的字串表示的<xref:System.Numerics.BigInteger>所輸出的值<xref:System.Numerics.BigInteger.ToString%2A>方法，您應該使用<xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=nameWithType>使用"R"格式規範，以產生的字串表示的方法<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1409">If you use the <xref:System.Numerics.BigInteger.Parse%2A> method to round-trip the string representation of a <xref:System.Numerics.BigInteger> value that was output by the <xref:System.Numerics.BigInteger.ToString%2A> method, you should use the <xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=nameWithType> method with the "R" format specifier to generate the string representation of the <xref:System.Numerics.BigInteger> value.</span></span> <span data-ttu-id="e4975-1410">否則的字串表示法<xref:System.Numerics.BigInteger>會保留 50 的原始值和資料的最高有效位數時可能會遺失您使用僅<xref:System.Numerics.BigInteger.Parse%2A>方法，以還原<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1410">Otherwise, the string representation of the <xref:System.Numerics.BigInteger> preserves only the 50 most significant digits of the original value, and data may be lost when you use the <xref:System.Numerics.BigInteger.Parse%2A> method to restore the <xref:System.Numerics.BigInteger> value.</span></span>  
  
 <span data-ttu-id="e4975-1411">不同於其他<xref:System.Globalization.NumberStyles>的值，允許，但不是需要，在特定的樣式項目出現與否`value`，則<xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType>樣式值表示，在個別的數字字元`value`一律會解譯為十六進位字元。</span><span class="sxs-lookup"><span data-stu-id="e4975-1411">Unlike the other <xref:System.Globalization.NumberStyles> values, which allow for, but do not require, the presence of particular style elements in `value`, the <xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType> style value means that the individual numeric characters in `value` are always interpreted as hexadecimal characters.</span></span> <span data-ttu-id="e4975-1412">有效的十六進位字元是 0-9、 A-F 和 a-f。</span><span class="sxs-lookup"><span data-stu-id="e4975-1412">Valid hexadecimal characters are 0-9, A-F, and a-f.</span></span> <span data-ttu-id="e4975-1413">只有其他旗標，可以結合`style`參數都<xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType>和<xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="e4975-1413">The only other flags that can be combined with the `style` parameter are <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> and <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType>.</span></span> <span data-ttu-id="e4975-1414">(<xref:System.Globalization.NumberStyles>列舉會包含複合的數字樣式<xref:System.Globalization.NumberStyles.HexNumber>，其中包含這兩個空格旗標。)</span><span class="sxs-lookup"><span data-stu-id="e4975-1414">(The <xref:System.Globalization.NumberStyles> enumeration includes a composite number style, <xref:System.Globalization.NumberStyles.HexNumber>, that includes both white-space flags.)</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e4975-1415">如果`value`的字串表示法的十六進位數字，它無法加上任何裝飾 (例如`0x`或`&h`)，區隔其為十六進位的數字。</span><span class="sxs-lookup"><span data-stu-id="e4975-1415">If `value` is the string representation of a hexadecimal number, it cannot be preceded by any decoration (such as `0x` or `&h`) that differentiates it as a hexadecimal number.</span></span> <span data-ttu-id="e4975-1416">這會導致轉換失敗。</span><span class="sxs-lookup"><span data-stu-id="e4975-1416">This causes the conversion to fail.</span></span>  
  
 <span data-ttu-id="e4975-1417">如果`value`是十六進位字串，<xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%29>方法會解譯`value`為負數儲存透過其前兩個十六進位數字是否大於或等於二補數表示`0x80`。</span><span class="sxs-lookup"><span data-stu-id="e4975-1417">If `value` is a hexadecimal string, the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%29> method interprets `value` as a negative number stored by using two's complement representation if its first two hexadecimal digits are greater than or equal to `0x80`.</span></span> <span data-ttu-id="e4975-1418">換句話說，此方法會解譯中的第一個位元組的最高序位位元`value`為正負號位元。</span><span class="sxs-lookup"><span data-stu-id="e4975-1418">In other words, the method interprets the highest-order bit of the first byte in `value` as the sign bit.</span></span> <span data-ttu-id="e4975-1419">若要確定為正數中的第一個數字會正確解譯為十六進位字串`value`必須具有值為零。</span><span class="sxs-lookup"><span data-stu-id="e4975-1419">To make sure that a hexadecimal string is correctly interpreted as a positive number, the first digit in `value` must have a value of zero.</span></span> <span data-ttu-id="e4975-1420">比方說，此方法會將解譯`0x80`為負數值，但它會解譯其中一個`0x080`或`0x0080`為正值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1420">For example, the method interprets `0x80` as a negative value, but it interprets either `0x080` or `0x0080` as a positive value.</span></span> <span data-ttu-id="e4975-1421">下列範例說明十六進位的字串代表負數和正數的值之間的差異。</span><span class="sxs-lookup"><span data-stu-id="e4975-1421">The following example illustrates the difference between hexadecimal strings that represent negative and positive values.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Parse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/cs/ParseHex1.cs#3)]
 [!code-vb[System.Numerics.BigInteger.Parse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/vb/ParseHex1.vb#3)]  
  
 <span data-ttu-id="e4975-1422">`value`參數會剖析使用的格式設定資訊中<xref:System.Globalization.NumberFormatInfo>初始化目前系統文化特性的物件。</span><span class="sxs-lookup"><span data-stu-id="e4975-1422">The `value` parameter is parsed by using the formatting information in a <xref:System.Globalization.NumberFormatInfo> object that is initialized for the current system culture.</span></span> <span data-ttu-id="e4975-1423">若要指定的文化特性的格式資訊用於剖析作業，請呼叫<xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29>多載。</span><span class="sxs-lookup"><span data-stu-id="e4975-1423">To specify the culture whose formatting information is used for the parse operation, call the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> overload.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e4975-1424">下列範例說明如何呼叫<xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%29>方法有數個可能的值為`style`參數。</span><span class="sxs-lookup"><span data-stu-id="e4975-1424">The following example illustrates calls to the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%29> method with several possible values for the `style` parameter.</span></span> <span data-ttu-id="e4975-1425">它說明如何將字串解譯為十六進位值時，以及如何不允許空格和登入的符號。</span><span class="sxs-lookup"><span data-stu-id="e4975-1425">It illustrates how to interpret a string as a hexadecimal value, and how to disallow spaces and sign symbols.</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Parse#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Parse/cs/System.Numeric.BigInteger.Parse.cs#5)]
 [!code-vb[System.Numeric.BigInteger.Parse#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Parse/vb/System.Numeric.BigInteger.Parse.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e4975-1426"><paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1426"><paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.</span></span>  
  
<span data-ttu-id="e4975-1427">-或-</span><span class="sxs-lookup"><span data-stu-id="e4975-1427">-or-</span></span> 
 <span data-ttu-id="e4975-1428"><paramref name="style" /> 包含 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 或 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 旗標和其他值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1428"><paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> or <see cref="F:System.Globalization.NumberStyles.HexNumber" /> flag along with another value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e4975-1429"><paramref name="value" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-1429"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="e4975-1430"><paramref name="value" /> 不符合由 <see cref="T:System.Globalization.NumberStyles" /> 所指定的輸入模式。</span><span class="sxs-lookup"><span data-stu-id="e4975-1430"><paramref name="value" /> does not comply with the input pattern specified by <see cref="T:System.Globalization.NumberStyles" />.</span></span></exception>
        <altmember cref="Overload:System.Numerics.BigInteger.TryParse" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Parse (string value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Parse(string value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Parse(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (value As String, provider As IFormatProvider) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger Parse(System::String ^ value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member Parse : string * IFormatProvider -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.Parse (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e4975-1431">字串，包含要轉換的數字。</span><span class="sxs-lookup"><span data-stu-id="e4975-1431">A string that contains a number to convert.</span></span></param>
        <param name="provider"><span data-ttu-id="e4975-1432">提供關於 <paramref name="value" /> 之特定文化特性格式資訊的物件。</span><span class="sxs-lookup"><span data-stu-id="e4975-1432">An object that provides culture-specific formatting information about <paramref name="value" />.</span></span></param>
        <summary><span data-ttu-id="e4975-1433">將使用指定特定文化特性格式之數字的字串表示轉換為其相等的 <see cref="T:System.Numerics.BigInteger" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-1433">Converts the string representation of a number in a specified culture-specific format to its <see cref="T:System.Numerics.BigInteger" /> equivalent.</span></span></summary>
        <returns><span data-ttu-id="e4975-1434">值，相當於以 <paramref name="value" /> 參數指定的數字。</span><span class="sxs-lookup"><span data-stu-id="e4975-1434">A value that is equivalent to the number specified in the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-1435">`value`參數應該是下列格式之數字的字串表示：</span><span class="sxs-lookup"><span data-stu-id="e4975-1435">The `value` parameter should be the string representation of a number in the following form:</span></span>  
  
 <span data-ttu-id="e4975-1436">[*ws*][*sign*]*digits*[*ws*]</span><span class="sxs-lookup"><span data-stu-id="e4975-1436">[*ws*][*sign*]*digits*[*ws*]</span></span>  
  
 <span data-ttu-id="e4975-1437">在方括號 ([ 和 ]) 中的項目是選擇性的項目。</span><span class="sxs-lookup"><span data-stu-id="e4975-1437">Elements in square brackets ([ and ]) are optional.</span></span> <span data-ttu-id="e4975-1438">下表說明每個元素。</span><span class="sxs-lookup"><span data-stu-id="e4975-1438">The following table describes each element.</span></span>  
  
|<span data-ttu-id="e4975-1439">元素</span><span class="sxs-lookup"><span data-stu-id="e4975-1439">Element</span></span>|<span data-ttu-id="e4975-1440">描述</span><span class="sxs-lookup"><span data-stu-id="e4975-1440">Description</span></span>|  
|-------------|-----------------|  
|<span data-ttu-id="e4975-1441">*ws*</span><span class="sxs-lookup"><span data-stu-id="e4975-1441">*ws*</span></span>|<span data-ttu-id="e4975-1442">選擇性的泛空白字元。</span><span class="sxs-lookup"><span data-stu-id="e4975-1442">Optional white space.</span></span>|  
|<span data-ttu-id="e4975-1443">*簽署*</span><span class="sxs-lookup"><span data-stu-id="e4975-1443">*sign*</span></span>|<span data-ttu-id="e4975-1444">選擇性正負號。</span><span class="sxs-lookup"><span data-stu-id="e4975-1444">An optional sign.</span></span> <span data-ttu-id="e4975-1445">有效的符號字元由<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=nameWithType>並<xref:System.Globalization.NumberFormatInfo.PositiveSign%2A?displayProperty=nameWithType>的屬性<xref:System.Globalization.NumberFormatInfo>所傳回的物件`provider`物件的<xref:System.IFormatProvider.GetFormat%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e4975-1445">Valid sign characters are determined by the <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=nameWithType> and <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A?displayProperty=nameWithType> properties of the <xref:System.Globalization.NumberFormatInfo> object that is returned by the `provider` object's <xref:System.IFormatProvider.GetFormat%2A> method.</span></span>|  
|<span data-ttu-id="e4975-1446">*digits*</span><span class="sxs-lookup"><span data-stu-id="e4975-1446">*digits*</span></span>|<span data-ttu-id="e4975-1447">範圍從 0 到 9 的數字順序。</span><span class="sxs-lookup"><span data-stu-id="e4975-1447">A sequence of digits ranging from 0 to 9.</span></span> <span data-ttu-id="e4975-1448">任何前置的零都會被忽略。</span><span class="sxs-lookup"><span data-stu-id="e4975-1448">Any leading zeros are ignored.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="e4975-1449">所指定的字串`value`參數會解譯使用<xref:System.Globalization.NumberStyles.Integer?displayProperty=nameWithType>樣式。</span><span class="sxs-lookup"><span data-stu-id="e4975-1449">The string specified by the `value` parameter is interpreted using the <xref:System.Globalization.NumberStyles.Integer?displayProperty=nameWithType> style.</span></span> <span data-ttu-id="e4975-1450">它不能包含任何的群組分隔符號或小數分隔符號，而且不得有小數部分。</span><span class="sxs-lookup"><span data-stu-id="e4975-1450">It cannot contain any group separators or decimal separator, and it cannot have a decimal portion.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="e4975-1451">如果您使用<xref:System.Numerics.BigInteger.Parse%2A>方法，以往返的字串表示的<xref:System.Numerics.BigInteger>所輸出的值<xref:System.Numerics.BigInteger.ToString%2A>方法，您應該使用<xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=nameWithType>使用"R"格式規範，以產生的字串表示的方法<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1451">If you use the <xref:System.Numerics.BigInteger.Parse%2A> method to round-trip the string representation of a <xref:System.Numerics.BigInteger> value that was output by the <xref:System.Numerics.BigInteger.ToString%2A> method, you should use the <xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=nameWithType> method with the "R" format specifier to generate the string representation of the <xref:System.Numerics.BigInteger> value.</span></span> <span data-ttu-id="e4975-1452">否則的字串表示法<xref:System.Numerics.BigInteger>會保留 50 的原始值和資料的最高有效位數時可能會遺失您使用僅<xref:System.Numerics.BigInteger.Parse%2A>方法，以還原<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1452">Otherwise, the string representation of the <xref:System.Numerics.BigInteger> preserves only the 50 most significant digits of the original value, and data may be lost when you use the <xref:System.Numerics.BigInteger.Parse%2A> method to restore the <xref:System.Numerics.BigInteger> value.</span></span>  
  
 <span data-ttu-id="e4975-1453">`provider`參數是<xref:System.IFormatProvider>實作其<xref:System.IFormatProvider.GetFormat%2A>方法會傳回<xref:System.Globalization.NumberFormatInfo>提供特定文化特性格式資訊的物件。</span><span class="sxs-lookup"><span data-stu-id="e4975-1453">The `provider` parameter is an <xref:System.IFormatProvider> implementation whose <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific formatting information.</span></span> <span data-ttu-id="e4975-1454">當<xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.IFormatProvider%29>叫用方法時，它會呼叫`provider`參數的<xref:System.IFormatProvider.GetFormat%2A>方法並將它傳遞<xref:System.Type>物件，表示<xref:System.Globalization.NumberFormatInfo>型別。</span><span class="sxs-lookup"><span data-stu-id="e4975-1454">When the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.IFormatProvider%29> method is invoked, it calls the `provider` parameter's <xref:System.IFormatProvider.GetFormat%2A> method and passes it a <xref:System.Type> object that represents the <xref:System.Globalization.NumberFormatInfo> type.</span></span> <span data-ttu-id="e4975-1455"><xref:System.IFormatProvider.GetFormat%2A>方法接著會傳回<xref:System.Globalization.NumberFormatInfo>物件，提供格式的相關資訊`value`參數。</span><span class="sxs-lookup"><span data-stu-id="e4975-1455">The <xref:System.IFormatProvider.GetFormat%2A> method then returns the <xref:System.Globalization.NumberFormatInfo> object that provides information about the format of the `value` parameter.</span></span> <span data-ttu-id="e4975-1456">若要使用的三種方式`provider`參數來提供自訂格式化剖析作業資訊：</span><span class="sxs-lookup"><span data-stu-id="e4975-1456">There are three ways to use the `provider` parameter to supply custom formatting information to the parse operation:</span></span>  
  
-   <span data-ttu-id="e4975-1457">您可以傳遞<xref:System.Globalization.CultureInfo>物件，表示提供的格式資訊的文化特性。</span><span class="sxs-lookup"><span data-stu-id="e4975-1457">You can pass a <xref:System.Globalization.CultureInfo> object that represents the culture that supplies formatting information.</span></span> <span data-ttu-id="e4975-1458">其<xref:System.Globalization.CultureInfo.GetFormat%2A>方法會傳回<xref:System.Globalization.NumberFormatInfo>提供用於該文化特性的數值格式資訊的物件。</span><span class="sxs-lookup"><span data-stu-id="e4975-1458">Its <xref:System.Globalization.CultureInfo.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information for that culture.</span></span>  
  
-   <span data-ttu-id="e4975-1459">您可以傳遞的實際<xref:System.Globalization.NumberFormatInfo>提供數值格式資訊的物件。</span><span class="sxs-lookup"><span data-stu-id="e4975-1459">You can pass the actual <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information.</span></span> <span data-ttu-id="e4975-1460">(其實作的<xref:System.Globalization.NumberFormatInfo.GetFormat%2A>只會傳回本身。)</span><span class="sxs-lookup"><span data-stu-id="e4975-1460">(Its implementation of <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> just returns itself.)</span></span>  
  
-   <span data-ttu-id="e4975-1461">您可以傳遞自訂物件實作<xref:System.IFormatProvider>。</span><span class="sxs-lookup"><span data-stu-id="e4975-1461">You can pass a custom object that implements <xref:System.IFormatProvider>.</span></span> <span data-ttu-id="e4975-1462">其<xref:System.IFormatProvider.GetFormat%2A>方法具現化，並傳回<xref:System.Globalization.NumberFormatInfo>提供格式設定資訊的物件。</span><span class="sxs-lookup"><span data-stu-id="e4975-1462">Its <xref:System.IFormatProvider.GetFormat%2A> method instantiates and returns the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.</span></span>  
  
 <span data-ttu-id="e4975-1463">如果`provider`已`null`的格式化`value`解譯根據<xref:System.Globalization.NumberFormatInfo>目前文化特性的物件。</span><span class="sxs-lookup"><span data-stu-id="e4975-1463">If `provider` is `null`, the formatting of `value` is interpreted based on the <xref:System.Globalization.NumberFormatInfo> object of the current culture.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e4975-1464">下列範例會顯示兩種方式可定義波狀符號 （~） 為格式化的負號<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1464">The following examples show two ways to define the tilde (~) as a negative sign for formatting <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="e4975-1465">請注意，顯示<xref:System.Numerics.BigInteger>相同的格式為原始字串中的值，您的程式碼必須呼叫<xref:System.Numerics.BigInteger.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>方法並將它傳遞<xref:System.Globalization.NumberFormatInfo>提供格式設定資訊的物件。</span><span class="sxs-lookup"><span data-stu-id="e4975-1465">Note that to display the <xref:System.Numerics.BigInteger> values in the same format as the original strings, your code must call the <xref:System.Numerics.BigInteger.ToString%28System.IFormatProvider%29?displayProperty=nameWithType> method and pass it the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.</span></span>  
  
 <span data-ttu-id="e4975-1466">第一個範例中定義類別可實作<xref:System.IFormatProvider>並用<xref:System.IFormatProvider.GetFormat%2A>方法來傳回<xref:System.Globalization.NumberFormatInfo>提供格式設定資訊的物件。</span><span class="sxs-lookup"><span data-stu-id="e4975-1466">The first example defines a class that implements <xref:System.IFormatProvider> and uses the <xref:System.IFormatProvider.GetFormat%2A> method to return the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Parse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Parse/cs/System.Numeric.BigInteger.Parse.cs#2)]
 [!code-vb[System.Numeric.BigInteger.Parse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Parse/vb/System.Numeric.BigInteger.Parse.vb#2)]  
  
 <span data-ttu-id="e4975-1467">A<xref:System.Numerics.BigInteger>可以然後具現化物件為下列程式碼：</span><span class="sxs-lookup"><span data-stu-id="e4975-1467">A <xref:System.Numerics.BigInteger> object can then be instantiated with the following code:</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Parse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Parse/cs/System.Numeric.BigInteger.Parse.cs#3)]
 [!code-vb[System.Numeric.BigInteger.Parse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Parse/vb/System.Numeric.BigInteger.Parse.vb#3)]  
  
 <span data-ttu-id="e4975-1468">第二個範例是更簡單。</span><span class="sxs-lookup"><span data-stu-id="e4975-1468">The second example is more straightforward.</span></span> <span data-ttu-id="e4975-1469">它會傳遞<xref:System.Globalization.NumberFormatInfo>物件，提供格式設定資訊給`provider`參數。</span><span class="sxs-lookup"><span data-stu-id="e4975-1469">It passes the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information to the `provider` parameter.</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Parse#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Parse/cs/System.Numeric.BigInteger.Parse.cs#4)]
 [!code-vb[System.Numeric.BigInteger.Parse#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Parse/vb/System.Numeric.BigInteger.Parse.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e4975-1470"><paramref name="value" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-1470"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="e4975-1471"><paramref name="value" /> 的格式不正確。</span><span class="sxs-lookup"><span data-stu-id="e4975-1471"><paramref name="value" /> is not in the correct format.</span></span></exception>
        <altmember cref="Overload:System.Numerics.BigInteger.TryParse" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Parse (ReadOnlySpan&lt;char&gt; value, System.Globalization.NumberStyles style = System.Globalization.NumberStyles.Integer, IFormatProvider provider = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Parse(valuetype System.ReadOnlySpan`1&lt;char&gt; value, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (value As ReadOnlySpan(Of Char), Optional style As NumberStyles = System.Globalization.NumberStyles.Integer, Optional provider As IFormatProvider = null) As BigInteger" />
      <MemberSignature Language="F#" Value="static member Parse : ReadOnlySpan&lt;char&gt; * System.Globalization.NumberStyles * IFormatProvider -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.Parse (value, style, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="style">To be added.</param>
        <param name="provider">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Parse (string value, System.Globalization.NumberStyles style, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Parse(string value, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (value As String, style As NumberStyles, provider As IFormatProvider) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger Parse(System::String ^ value, System::Globalization::NumberStyles style, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member Parse : string * System.Globalization.NumberStyles * IFormatProvider -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.Parse (value, style, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e4975-1472">字串，包含要轉換的數字。</span><span class="sxs-lookup"><span data-stu-id="e4975-1472">A string that contains a number to convert.</span></span></param>
        <param name="style"><span data-ttu-id="e4975-1473">指定 <paramref name="value" /> 可以使用的格式之列舉值的位元組合。</span><span class="sxs-lookup"><span data-stu-id="e4975-1473">A bitwise combination of the enumeration values that specify the permitted format of <paramref name="value" />.</span></span></param>
        <param name="provider"><span data-ttu-id="e4975-1474">提供關於 <paramref name="value" /> 之特定文化特性格式資訊的物件。</span><span class="sxs-lookup"><span data-stu-id="e4975-1474">An object that provides culture-specific formatting information about <paramref name="value" />.</span></span></param>
        <summary><span data-ttu-id="e4975-1475">將數字的字串表示 (使用指定樣式和特定文化特性的格式) 轉換為其相等的 <see cref="T:System.Numerics.BigInteger" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-1475">Converts the string representation of a number in a specified style and culture-specific format to its <see cref="T:System.Numerics.BigInteger" /> equivalent.</span></span></summary>
        <returns><span data-ttu-id="e4975-1476">值，相當於以 <paramref name="value" /> 參數指定的數字。</span><span class="sxs-lookup"><span data-stu-id="e4975-1476">A value that is equivalent to the number specified in the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-1477">`style`參數定義中允許的樣式項目 （例如空白字元、 正數或負數符號、 群組分隔符號或小數點符號）`value`剖析作業成功的參數。</span><span class="sxs-lookup"><span data-stu-id="e4975-1477">The `style` parameter defines the style elements (such as white space, the positive or negative sign symbol, the group separator symbol, or the decimal point symbol) that are allowed in the `value` parameter for the parse operation to succeed.</span></span> <span data-ttu-id="e4975-1478">`styles` 必須是從位元旗標組合<xref:System.Globalization.NumberStyles>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="e4975-1478">`styles` must be a combination of bit flags from the <xref:System.Globalization.NumberStyles> enumeration.</span></span> <span data-ttu-id="e4975-1479">`style`參數可讓這個方法多載有用的時機`value`包含十六進位值的字串表示，當所表示之數字系統，（十進位或十六進位）`value`已知只能在執行階段，或當您不允許空白字元，或登符號在`value`。</span><span class="sxs-lookup"><span data-stu-id="e4975-1479">The `style` parameter makes this method overload useful when `value` contains the string representation of a hexadecimal value, when the number system (decimal or hexadecimal) represented by `value` is known only at run time, or when you want to disallow white space or a sign symbol in `value`.</span></span>  
  
 <span data-ttu-id="e4975-1480">值而定`style`，則`value`參數可能包括下列項目：</span><span class="sxs-lookup"><span data-stu-id="e4975-1480">Depending on the value of `style`, the `value` parameter may include the following elements:</span></span>  
  
 <span data-ttu-id="e4975-1481">[*ws*][*$*][*sign*][*digits*,]*digits*[*.fractional_digits*][E[*sign*]*exponential_digits*][*ws*]</span><span class="sxs-lookup"><span data-stu-id="e4975-1481">[*ws*][*$*][*sign*][*digits*,]*digits*[*.fractional_digits*][E[*sign*]*exponential_digits*][*ws*]</span></span>  
  
 <span data-ttu-id="e4975-1482">如果`style`包含<xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType>，則`value`參數可能包括下列項目：</span><span class="sxs-lookup"><span data-stu-id="e4975-1482">If `style` includes <xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType>, the `value` parameter may include the following elements:</span></span>  
  
 <span data-ttu-id="e4975-1483">[*ws*]*hexdigits*[*ws*]</span><span class="sxs-lookup"><span data-stu-id="e4975-1483">[*ws*]*hexdigits*[*ws*]</span></span>  
  
 <span data-ttu-id="e4975-1484">在方括號 ([ 和 ]) 中的項目是選擇性的項目。</span><span class="sxs-lookup"><span data-stu-id="e4975-1484">Elements in square brackets ([ and ]) are optional.</span></span> <span data-ttu-id="e4975-1485">下表說明每個元素。</span><span class="sxs-lookup"><span data-stu-id="e4975-1485">The following table describes each element.</span></span>  
  
|<span data-ttu-id="e4975-1486">元素</span><span class="sxs-lookup"><span data-stu-id="e4975-1486">Element</span></span>|<span data-ttu-id="e4975-1487">描述</span><span class="sxs-lookup"><span data-stu-id="e4975-1487">Description</span></span>|  
|-------------|-----------------|  
|<span data-ttu-id="e4975-1488">*ws*</span><span class="sxs-lookup"><span data-stu-id="e4975-1488">*ws*</span></span>|<span data-ttu-id="e4975-1489">選擇性的泛空白字元。</span><span class="sxs-lookup"><span data-stu-id="e4975-1489">Optional white space.</span></span> <span data-ttu-id="e4975-1490">空白字元可以出現在開頭`value`如果`style`包含<xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType>旗標，也可以顯示在結尾`value`如果`style`包含<xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType>旗標。</span><span class="sxs-lookup"><span data-stu-id="e4975-1490">White space can appear at the start of `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> flag, and it can appear at the end of `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType> flag.</span></span>|  
|*$*|<span data-ttu-id="e4975-1491">特定文化特性的貨幣符號。</span><span class="sxs-lookup"><span data-stu-id="e4975-1491">A culture-specific currency symbol.</span></span> <span data-ttu-id="e4975-1492">在字串中的位置由定義<xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=nameWithType>並<xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=nameWithType>所指定的文化特性屬性`provider`參數。</span><span class="sxs-lookup"><span data-stu-id="e4975-1492">Its position in the string is defined by the <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=nameWithType> and <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=nameWithType> properties of the culture indicated by the `provider` parameter.</span></span> <span data-ttu-id="e4975-1493">目前的文化特性的貨幣符號會出現在`value`如果`style`包含<xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType>旗標。</span><span class="sxs-lookup"><span data-stu-id="e4975-1493">The current culture's currency symbol can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="e4975-1494">*簽署*</span><span class="sxs-lookup"><span data-stu-id="e4975-1494">*sign*</span></span>|<span data-ttu-id="e4975-1495">選擇性正負號。</span><span class="sxs-lookup"><span data-stu-id="e4975-1495">An optional sign.</span></span> <span data-ttu-id="e4975-1496">符號可以出現在開頭`value`如果`style`包含<xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType>旗標，也可以顯示在結尾`value`如果`style`包含<xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType>旗標。</span><span class="sxs-lookup"><span data-stu-id="e4975-1496">The sign can appear at the start of `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType> flag, and it can appear at the end of `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="e4975-1497">可用於括號`value`表示負值`style`包含<xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType>旗標。</span><span class="sxs-lookup"><span data-stu-id="e4975-1497">Parentheses can be used in `value` to indicate a negative value if `style` includes the <xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="e4975-1498">*digits*</span><span class="sxs-lookup"><span data-stu-id="e4975-1498">*digits*</span></span><br /><br /> <span data-ttu-id="e4975-1499">*fractional_digits*</span><span class="sxs-lookup"><span data-stu-id="e4975-1499">*fractional_digits*</span></span><br /><br /> <span data-ttu-id="e4975-1500">*exponential_digits*</span><span class="sxs-lookup"><span data-stu-id="e4975-1500">*exponential_digits*</span></span>|<span data-ttu-id="e4975-1501">從 0 到 9 的數字序列。</span><span class="sxs-lookup"><span data-stu-id="e4975-1501">A sequence of digits from 0 through 9.</span></span> <span data-ttu-id="e4975-1502">針對*fractional_digits*，只有數字 0 是有效。</span><span class="sxs-lookup"><span data-stu-id="e4975-1502">For *fractional_digits*, only the digit 0 is valid.</span></span>|  
|<span data-ttu-id="e4975-1503">*、*</span><span class="sxs-lookup"><span data-stu-id="e4975-1503">*,*</span></span>|<span data-ttu-id="e4975-1504">特定文化特性的群組分隔符號。</span><span class="sxs-lookup"><span data-stu-id="e4975-1504">A culture-specific group separator symbol.</span></span> <span data-ttu-id="e4975-1505">指定的文化特性的群組分隔符號`provider`可以出現在`value`如果`style`包含<xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType>旗標。</span><span class="sxs-lookup"><span data-stu-id="e4975-1505">The group separator symbol of the culture specified by `provider` can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="e4975-1506">*.*</span><span class="sxs-lookup"><span data-stu-id="e4975-1506">*.*</span></span>|<span data-ttu-id="e4975-1507">特定文化特性的貨幣符號。</span><span class="sxs-lookup"><span data-stu-id="e4975-1507">A culture-specific decimal point symbol.</span></span> <span data-ttu-id="e4975-1508">所指定的文化特性的小數點符號`provider`可以出現在`value`如果`style`包含<xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType>旗標。</span><span class="sxs-lookup"><span data-stu-id="e4975-1508">The decimal point symbol of the culture designated by `provider` can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="e4975-1509">只是數字 0 會顯示為小數位數的剖析作業才會成功;如果*fractional_digits*包含任何其他數字，<xref:System.FormatException>就會擲回。</span><span class="sxs-lookup"><span data-stu-id="e4975-1509">Only the digit 0 can appear as a fractional digit for the parse operation to succeed; if *fractional_digits* includes any other digit, a <xref:System.FormatException> is thrown.</span></span>|  
|<span data-ttu-id="e4975-1510">E</span><span class="sxs-lookup"><span data-stu-id="e4975-1510">E</span></span>|<span data-ttu-id="e4975-1511">"E"或者"E"字元，表示代表的值時，會以指數 （科學記號） 標記法。</span><span class="sxs-lookup"><span data-stu-id="e4975-1511">The "e" or "E" character, which indicates that the value is represented in exponential (scientific) notation.</span></span> <span data-ttu-id="e4975-1512">`value`參數可代表指數標記法之數字，如果`style`包含<xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType>旗標。</span><span class="sxs-lookup"><span data-stu-id="e4975-1512">The `value` parameter can represent a number in exponential notation if `style` includes the <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="e4975-1513">*hexdigits*</span><span class="sxs-lookup"><span data-stu-id="e4975-1513">*hexdigits*</span></span>|<span data-ttu-id="e4975-1514">一連串的從 0 到 f 或 0 到 f 的十六進位數字</span><span class="sxs-lookup"><span data-stu-id="e4975-1514">A sequence of hexadecimal digits from 0 through f, or 0 through F.</span></span>|  
  
> [!NOTE]
> <span data-ttu-id="e4975-1515">中的任何終止 NUL (u+0000) 字元`s`剖析作業中，不論值會忽略`style`引數。</span><span class="sxs-lookup"><span data-stu-id="e4975-1515">Any terminating NUL (U+0000) characters in `s` are ignored by the parsing operation, regardless of the value of the `style` argument.</span></span>

 <span data-ttu-id="e4975-1516">只有數字的字串 (對應至<xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType>樣式) 一律會成功剖析。</span><span class="sxs-lookup"><span data-stu-id="e4975-1516">A string with digits only (which corresponds to the <xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType> style) always parses successfully.</span></span> <span data-ttu-id="e4975-1517">大部分的其餘<xref:System.Globalization.NumberStyles>成員控制可能存在，但不是一定要出現在輸入字串的項目。</span><span class="sxs-lookup"><span data-stu-id="e4975-1517">Most of the remaining <xref:System.Globalization.NumberStyles> members control elements that may be present, but are not required to be present, in the input string.</span></span> <span data-ttu-id="e4975-1518">下表指出如何個別<xref:System.Globalization.NumberStyles>成員會影響可能會出現在項目`value`。</span><span class="sxs-lookup"><span data-stu-id="e4975-1518">The following table indicates how individual <xref:System.Globalization.NumberStyles> members affect the elements that may be present in `value`.</span></span>  
  
|<span data-ttu-id="e4975-1519">NumberStyles 值</span><span class="sxs-lookup"><span data-stu-id="e4975-1519">NumberStyles value</span></span>|<span data-ttu-id="e4975-1520">除了數字的值中允許的項目</span><span class="sxs-lookup"><span data-stu-id="e4975-1520">Elements permitted in value in addition to digits</span></span>|  
|------------------------|-------------------------------------------------------|  
|<xref:System.Globalization.NumberStyles.None>|<span data-ttu-id="e4975-1521">*數字*只有項目。</span><span class="sxs-lookup"><span data-stu-id="e4975-1521">The *digits* element only.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowDecimalPoint>|<span data-ttu-id="e4975-1522">小數點 （.） 及*小數位數*項目。</span><span class="sxs-lookup"><span data-stu-id="e4975-1522">The decimal point (.) and *fractional-digits* elements.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowExponent>|<span data-ttu-id="e4975-1523">"E"或者"E"字元，這表示指數標記法。</span><span class="sxs-lookup"><span data-stu-id="e4975-1523">The "e" or "E" character, which indicates exponential notation.</span></span> <span data-ttu-id="e4975-1524">連同*exponential_digits*。</span><span class="sxs-lookup"><span data-stu-id="e4975-1524">along with *exponential_digits*.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowLeadingWhite>|<span data-ttu-id="e4975-1525">*Ws*開頭的項目`value`。</span><span class="sxs-lookup"><span data-stu-id="e4975-1525">The *ws* element at the start of `value`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowTrailingWhite>|<span data-ttu-id="e4975-1526">*Ws*結尾的項目`value`。</span><span class="sxs-lookup"><span data-stu-id="e4975-1526">The *ws* element at the end of `value`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowLeadingSign>|<span data-ttu-id="e4975-1527">*號*開頭的項目`value`。</span><span class="sxs-lookup"><span data-stu-id="e4975-1527">The *sign* element at the start of `value`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowTrailingSign>|<span data-ttu-id="e4975-1528">*號*結尾的項目`value`。</span><span class="sxs-lookup"><span data-stu-id="e4975-1528">The *sign* element at the end of `value`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowParentheses>|<span data-ttu-id="e4975-1529">*號*括號括住的數字值的形式的項目。</span><span class="sxs-lookup"><span data-stu-id="e4975-1529">The *sign* element in the form of parentheses enclosing the numeric value.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowThousands>|<span data-ttu-id="e4975-1530">群組分隔符號 （，） 項目。</span><span class="sxs-lookup"><span data-stu-id="e4975-1530">The group separator (,) element.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowCurrencySymbol>|<span data-ttu-id="e4975-1531">貨幣 （$） 的項目。</span><span class="sxs-lookup"><span data-stu-id="e4975-1531">The currency ($) element.</span></span>|  
|<xref:System.Globalization.NumberStyles.Currency>|<span data-ttu-id="e4975-1532">所有項目。</span><span class="sxs-lookup"><span data-stu-id="e4975-1532">All elements.</span></span> <span data-ttu-id="e4975-1533">不過，`value`無法表示十六進位數字或指數標記法之數字。</span><span class="sxs-lookup"><span data-stu-id="e4975-1533">However, `value` cannot represent a hexadecimal number or a number in exponential notation.</span></span>|  
|<xref:System.Globalization.NumberStyles.Float>|<span data-ttu-id="e4975-1534">*Ws*開頭或結尾的項目`value`，*登*開頭`value`，且小數點 （.） 的符號。</span><span class="sxs-lookup"><span data-stu-id="e4975-1534">The *ws* element at the start or end of `value`, *sign* at the start of `value`, and the decimal point (.) symbol.</span></span> <span data-ttu-id="e4975-1535">`value`參數也可以使用指數標記法。</span><span class="sxs-lookup"><span data-stu-id="e4975-1535">The `value` parameter can also use exponential notation.</span></span>|  
|<xref:System.Globalization.NumberStyles.Number>|<span data-ttu-id="e4975-1536">`ws`， `sign`、 群組分隔符號 （、）、 和小數點 （.） 項目。</span><span class="sxs-lookup"><span data-stu-id="e4975-1536">The `ws`, `sign`, group separator (,), and decimal point (.) elements.</span></span>|  
|<xref:System.Globalization.NumberStyles.Any>|<span data-ttu-id="e4975-1537">所有項目。</span><span class="sxs-lookup"><span data-stu-id="e4975-1537">All elements.</span></span> <span data-ttu-id="e4975-1538">不過，`value`無法代表十六進位數字。</span><span class="sxs-lookup"><span data-stu-id="e4975-1538">However, `value` cannot represent a hexadecimal number.</span></span>|  
  
> [!IMPORTANT]
>  <span data-ttu-id="e4975-1539">如果您使用<xref:System.Numerics.BigInteger.Parse%2A>方法，以往返的字串表示的<xref:System.Numerics.BigInteger>所輸出的值<xref:System.Numerics.BigInteger.ToString%2A>方法，您應該使用<xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=nameWithType>使用"R"格式規範，以產生的字串表示的方法<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1539">If you use the <xref:System.Numerics.BigInteger.Parse%2A> method to round-trip the string representation of a <xref:System.Numerics.BigInteger> value that was output by the <xref:System.Numerics.BigInteger.ToString%2A> method, you should use the <xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=nameWithType> method with the "R" format specifier to generate the string representation of the <xref:System.Numerics.BigInteger> value.</span></span> <span data-ttu-id="e4975-1540">否則的字串表示法<xref:System.Numerics.BigInteger>會保留 50 的原始值和資料的最高有效位數時可能會遺失您使用僅<xref:System.Numerics.BigInteger.Parse%2A>方法，以還原<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1540">Otherwise, the string representation of the <xref:System.Numerics.BigInteger> preserves only the 50 most significant digits of the original value, and data may be lost when you use the <xref:System.Numerics.BigInteger.Parse%2A> method to restore the <xref:System.Numerics.BigInteger> value.</span></span>  
  
 <span data-ttu-id="e4975-1541">不同於其他<xref:System.Globalization.NumberStyles>的值，允許，但不是需要特定的 style 項目出現與否`value`，則<xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType>樣式值表示，在個別的數字字元`value`一律會解譯為十六進位字元。</span><span class="sxs-lookup"><span data-stu-id="e4975-1541">Unlike the other <xref:System.Globalization.NumberStyles> values, which allow for but do not require the presence of particular style elements in `value`, the <xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType> style value means that the individual numeric characters in `value` are always interpreted as hexadecimal characters.</span></span> <span data-ttu-id="e4975-1542">有效的十六進位字元是 0-9、 A-F 和 a-f。</span><span class="sxs-lookup"><span data-stu-id="e4975-1542">Valid hexadecimal characters are 0-9, A-F, and a-f.</span></span> <span data-ttu-id="e4975-1543">只有其他旗標，可以結合`style`參數都<xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType>和<xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="e4975-1543">The only other flags that can be combined with the `style` parameter are <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> and <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType>.</span></span> <span data-ttu-id="e4975-1544">(<xref:System.Globalization.NumberStyles>列舉會包含複合的數字樣式<xref:System.Globalization.NumberStyles.HexNumber>，其中包含這兩個空格旗標。)</span><span class="sxs-lookup"><span data-stu-id="e4975-1544">(The <xref:System.Globalization.NumberStyles> enumeration includes a composite number style, <xref:System.Globalization.NumberStyles.HexNumber>, that includes both white-space flags.)</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e4975-1545">如果`value`的字串表示法的十六進位數字，它無法加上任何裝飾 (例如`0x`或`&h`)，區隔其為十六進位的數字。</span><span class="sxs-lookup"><span data-stu-id="e4975-1545">If `value` is the string representation of a hexadecimal number, it cannot be preceded by any decoration (such as `0x` or `&h`) that differentiates it as a hexadecimal number.</span></span> <span data-ttu-id="e4975-1546">這會導致轉換失敗。</span><span class="sxs-lookup"><span data-stu-id="e4975-1546">This causes the conversion to fail.</span></span>  
  
 <span data-ttu-id="e4975-1547">如果`value`是十六進位字串，<xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%29>方法會解譯`value`為負數儲存透過其前兩個十六進位數字是否大於或等於二補數表示`0x80`。</span><span class="sxs-lookup"><span data-stu-id="e4975-1547">If `value` is a hexadecimal string, the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%29> method interprets `value` as a negative number stored by using two's complement representation if its first two hexadecimal digits are greater than or equal to `0x80`.</span></span> <span data-ttu-id="e4975-1548">換句話說，此方法會解譯中的第一個位元組的最高序位位元`value`為正負號位元。</span><span class="sxs-lookup"><span data-stu-id="e4975-1548">In other words, the method interprets the highest-order bit of the first byte in `value` as the sign bit.</span></span> <span data-ttu-id="e4975-1549">若要確定為正數中的第一個數字會正確解譯為十六進位字串`value`必須具有值為零。</span><span class="sxs-lookup"><span data-stu-id="e4975-1549">To make sure that a hexadecimal string is correctly interpreted as a positive number, the first digit in `value` must have a value of zero.</span></span> <span data-ttu-id="e4975-1550">比方說，此方法會將解譯`0x80`為負數值，但它會解譯其中一個`0x080`或`0x0080`為正值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1550">For example, the method interprets `0x80` as a negative value, but it interprets either `0x080` or `0x0080` as a positive value.</span></span> <span data-ttu-id="e4975-1551">下列範例說明十六進位的字串代表負數和正數的值之間的差異。</span><span class="sxs-lookup"><span data-stu-id="e4975-1551">The following example illustrates the difference between hexadecimal strings that represent negative and positive values.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Parse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/cs/ParseHex1.cs#3)]
 [!code-vb[System.Numerics.BigInteger.Parse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/vb/ParseHex1.vb#3)]  
  
 <span data-ttu-id="e4975-1552">`provider`參數是<xref:System.IFormatProvider>實作。</span><span class="sxs-lookup"><span data-stu-id="e4975-1552">The `provider` parameter is an <xref:System.IFormatProvider> implementation.</span></span> <span data-ttu-id="e4975-1553">其<xref:System.IFormatProvider.GetFormat%2A>方法會傳回<xref:System.Globalization.NumberFormatInfo>物件，提供特定文化特性格式資訊`value`。</span><span class="sxs-lookup"><span data-stu-id="e4975-1553">Its <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific information about the format of `value`.</span></span> <span data-ttu-id="e4975-1554">一般而言，`provider`可以是下列任一項：</span><span class="sxs-lookup"><span data-stu-id="e4975-1554">Typically, `provider` can be any one of the following:</span></span>  
  
-   <span data-ttu-id="e4975-1555">A<xref:System.Globalization.CultureInfo>物件，表示提供數值格式資訊的文化特性。</span><span class="sxs-lookup"><span data-stu-id="e4975-1555">A <xref:System.Globalization.CultureInfo> object that represents the culture that provides numeric formatting information.</span></span> <span data-ttu-id="e4975-1556">其<xref:System.Globalization.CultureInfo.GetFormat%2A>方法會傳回<xref:System.Globalization.NumberFormatInfo>提供數值格式資訊的物件。</span><span class="sxs-lookup"><span data-stu-id="e4975-1556">Its <xref:System.Globalization.CultureInfo.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information.</span></span>  
  
-   <span data-ttu-id="e4975-1557">A<xref:System.Globalization.NumberFormatInfo>提供格式設定資訊的物件。</span><span class="sxs-lookup"><span data-stu-id="e4975-1557">A <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.</span></span> <span data-ttu-id="e4975-1558">(其實作的<xref:System.Globalization.NumberFormatInfo.GetFormat%2A>只會傳回本身。)</span><span class="sxs-lookup"><span data-stu-id="e4975-1558">(Its implementation of <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> just returns itself.)</span></span>  
  
-   <span data-ttu-id="e4975-1559">自訂物件實作<xref:System.IFormatProvider>並用<xref:System.Globalization.NumberFormatInfo.GetFormat%2A>方法來具現化，並傳回<xref:System.Globalization.NumberFormatInfo>提供格式設定資訊的物件。</span><span class="sxs-lookup"><span data-stu-id="e4975-1559">A custom object that implements <xref:System.IFormatProvider> and uses the <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> method to instantiate and return the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.</span></span>  
  
 <span data-ttu-id="e4975-1560">如果`provider`已`null`，則<xref:System.Globalization.NumberFormatInfo>物件會使用目前的文化特性。</span><span class="sxs-lookup"><span data-stu-id="e4975-1560">If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> object for the current culture is used.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e4975-1561">下列範例使數次呼叫<xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29>方法使用的值的各種組合`style`和`provider`參數。</span><span class="sxs-lookup"><span data-stu-id="e4975-1561">The following example makes several calls to the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> method using various combinations of values for the `style` and `provider` parameters.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Parse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/cs/Parse1.cs#2)]
 [!code-vb[System.Numerics.BigInteger.Parse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/vb/Parse1.vb#2)]  
  
 <span data-ttu-id="e4975-1562">個別的呼叫數<xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29>方法傳遞執行個體的下列`BigIntegerFormatProvider`類別，定義為負號的波狀符號 （~）。</span><span class="sxs-lookup"><span data-stu-id="e4975-1562">A number of the individual calls to the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> method pass an instance of the following `BigIntegerFormatProvider` class, which defines a tilde (~) as the negative sign.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Parse#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/cs/Parse1.cs#4)]
 [!code-vb[System.Numerics.BigInteger.Parse#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/vb/Parse1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e4975-1563"><paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1563"><paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.</span></span>  
  
<span data-ttu-id="e4975-1564">-或-</span><span class="sxs-lookup"><span data-stu-id="e4975-1564">-or-</span></span> 
 <span data-ttu-id="e4975-1565"><paramref name="style" /> 包含 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 或 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 旗標和其他值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1565"><paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> or <see cref="F:System.Globalization.NumberStyles.HexNumber" /> flag along with another value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e4975-1566"><paramref name="value" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-1566"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="e4975-1567"><paramref name="value" /> 不符合由 <paramref name="style" /> 所指定的輸入模式。</span><span class="sxs-lookup"><span data-stu-id="e4975-1567"><paramref name="value" /> does not comply with the input pattern specified by <paramref name="style" />.</span></span></exception>
        <altmember cref="Overload:System.Numerics.BigInteger.TryParse" />
      </Docs>
    </Member>
    <Member MemberName="Pow">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Pow (System.Numerics.BigInteger value, int exponent);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Pow(valuetype System.Numerics.BigInteger value, int32 exponent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Pow(System.Numerics.BigInteger,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Pow (value As BigInteger, exponent As Integer) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger Pow(System::Numerics::BigInteger value, int exponent);" />
      <MemberSignature Language="F#" Value="static member Pow : System.Numerics.BigInteger * int -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.Pow (value, exponent)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
        <Parameter Name="exponent" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e4975-1568">具有乘冪數 <paramref name="exponent" /> 的數字。</span><span class="sxs-lookup"><span data-stu-id="e4975-1568">The number to raise to the <paramref name="exponent" /> power.</span></span></param>
        <param name="exponent"><span data-ttu-id="e4975-1569"><paramref name="value" /> 的乘冪指數。</span><span class="sxs-lookup"><span data-stu-id="e4975-1569">The exponent to raise <paramref name="value" /> by.</span></span></param>
        <summary><span data-ttu-id="e4975-1570"><see cref="T:System.Numerics.BigInteger" /> 值自乘至指定之值的乘冪。</span><span class="sxs-lookup"><span data-stu-id="e4975-1570">Raises a <see cref="T:System.Numerics.BigInteger" /> value to the power of a specified value.</span></span></summary>
        <returns><span data-ttu-id="e4975-1571"><paramref name="value" /> 自乘至 <paramref name="exponent" /> 乘冪的結果。</span><span class="sxs-lookup"><span data-stu-id="e4975-1571">The result of raising <paramref name="value" /> to the <paramref name="exponent" /> power.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-1572"><xref:System.Numerics.BigInteger.Pow%2A>指數參數的值為 0，則方法會傳回 1 的值`value`和`exponent`參數為 0。</span><span class="sxs-lookup"><span data-stu-id="e4975-1572">The <xref:System.Numerics.BigInteger.Pow%2A> method returns 1 if the value of the exponent parameter is 0, or if the values of both the `value` and `exponent` parameters are 0.</span></span> <span data-ttu-id="e4975-1573">如果`exponent`為 1，<xref:System.Numerics.BigInteger.Pow%2A>方法會傳回`value`。</span><span class="sxs-lookup"><span data-stu-id="e4975-1573">If `exponent` is 1, the <xref:System.Numerics.BigInteger.Pow%2A> method returns `value`.</span></span> <span data-ttu-id="e4975-1574">如果`value`是負數，此方法會傳回負的結果。</span><span class="sxs-lookup"><span data-stu-id="e4975-1574">If `value` is negative, the method returns a negative result.</span></span>  
  
 <span data-ttu-id="e4975-1575">這個方法會對應至<xref:System.Math.Pow%2A?displayProperty=nameWithType>基本數值類型的方法。</span><span class="sxs-lookup"><span data-stu-id="e4975-1575">This method corresponds to the <xref:System.Math.Pow%2A?displayProperty=nameWithType> method for primitive numeric types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e4975-1576">下列範例說明使用乘冪<xref:System.Numerics.BigInteger>值和其值範圍從 0 到 10 的指數。</span><span class="sxs-lookup"><span data-stu-id="e4975-1576">The following example illustrates exponentiation using a <xref:System.Numerics.BigInteger> value and an exponent whose value ranges from 0 to 10.</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#32](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#32)]
 [!code-vb[System.Numeric.BigInteger.Class#32](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e4975-1577"><paramref name="exponent" /> 參數的值是負數。</span><span class="sxs-lookup"><span data-stu-id="e4975-1577">The value of the <paramref name="exponent" /> parameter is negative.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Remainder">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Remainder (System.Numerics.BigInteger dividend, System.Numerics.BigInteger divisor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Remainder(valuetype System.Numerics.BigInteger dividend, valuetype System.Numerics.BigInteger divisor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Remainder(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Remainder (dividend As BigInteger, divisor As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger Remainder(System::Numerics::BigInteger dividend, System::Numerics::BigInteger divisor);" />
      <MemberSignature Language="F#" Value="static member Remainder : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.Remainder (dividend, divisor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dividend" Type="System.Numerics.BigInteger" />
        <Parameter Name="divisor" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="dividend"><span data-ttu-id="e4975-1578">做為被除數的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1578">The value to be divided.</span></span></param>
        <param name="divisor"><span data-ttu-id="e4975-1579">做為除數的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1579">The value to divide by.</span></span></param>
        <summary><span data-ttu-id="e4975-1580">對兩個 <see cref="T:System.Numerics.BigInteger" /> 值執行整數除法運算，並傳回餘數。</span><span class="sxs-lookup"><span data-stu-id="e4975-1580">Performs integer division on two <see cref="T:System.Numerics.BigInteger" /> values and returns the remainder.</span></span></summary>
        <returns><span data-ttu-id="e4975-1581"><paramref name="dividend" /> 除以 <paramref name="divisor" /> 後的餘數。</span><span class="sxs-lookup"><span data-stu-id="e4975-1581">The remainder after dividing <paramref name="dividend" /> by <paramref name="divisor" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-1582">餘數的正負號是`dividend`參數。</span><span class="sxs-lookup"><span data-stu-id="e4975-1582">The sign of the remainder is the sign of the `dividend` parameter.</span></span>  
  
 <span data-ttu-id="e4975-1583"><xref:System.Numerics.BigInteger.Remainder%2A>方法的實作不支援自訂運算子的語言。</span><span class="sxs-lookup"><span data-stu-id="e4975-1583">The <xref:System.Numerics.BigInteger.Remainder%2A> method is implemented for languages that do not support custom operators.</span></span> <span data-ttu-id="e4975-1584">它的行為等同於使用模數運算子的除法。</span><span class="sxs-lookup"><span data-stu-id="e4975-1584">Its behavior is identical to division using the modulus operator.</span></span>  
  
 <span data-ttu-id="e4975-1585">如果有必要，方法會自動執行的其他整數類資料類型的隱含轉換<xref:System.Numerics.BigInteger>物件再執行模數運算。</span><span class="sxs-lookup"><span data-stu-id="e4975-1585">If necessary, the method automatically performs implicit conversion of other integral types to <xref:System.Numerics.BigInteger> objects before it performs the modulus operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e4975-1586">下列範例會比較從餘數<xref:System.Numerics.BigInteger.DivRem%2A>方法所傳回的其餘<xref:System.Numerics.BigInteger.Remainder%2A>方法，以建立兩種方法計算相同的餘數。</span><span class="sxs-lookup"><span data-stu-id="e4975-1586">The following example compares the remainder from the <xref:System.Numerics.BigInteger.DivRem%2A> method with the remainder returned by the <xref:System.Numerics.BigInteger.Remainder%2A> method to establish that the two methods calculate identical remainders.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Remainder#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Remainder/cs/Remainder1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Remainder#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Remainder/vb/Remainder1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.DivideByZeroException"><span data-ttu-id="e4975-1587"><paramref name="divisor" /> 是 0 (零)。</span><span class="sxs-lookup"><span data-stu-id="e4975-1587"><paramref name="divisor" /> is 0 (zero).</span></span></exception>
        <altmember cref="M:System.Numerics.BigInteger.DivRem(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger@)" />
        <altmember cref="M:System.Numerics.BigInteger.op_Modulus(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="Sign">
      <MemberSignature Language="C#" Value="public int Sign { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Sign" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.BigInteger.Sign" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Sign As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Sign { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Sign : int" Usage="System.Numerics.BigInteger.Sign" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e4975-1588">取得數字，這個數字表示目前 <see cref="T:System.Numerics.BigInteger" /> 物件的正負號 (負數、正數或零)。</span><span class="sxs-lookup"><span data-stu-id="e4975-1588">Gets a number that indicates the sign (negative, positive, or zero) of the current <see cref="T:System.Numerics.BigInteger" /> object.</span></span></summary>
        <value><span data-ttu-id="e4975-1589">數字，表示 <see cref="T:System.Numerics.BigInteger" /> 物件的正負號，如下表所示。</span><span class="sxs-lookup"><span data-stu-id="e4975-1589">A number that indicates the sign of the <see cref="T:System.Numerics.BigInteger" /> object, as shown in the following table.</span></span>  
  
 <list type="table"><listheader><term> <span data-ttu-id="e4975-1590">number</span><span class="sxs-lookup"><span data-stu-id="e4975-1590">Number</span></span> 
 </term><description> <span data-ttu-id="e4975-1591">描述</span><span class="sxs-lookup"><span data-stu-id="e4975-1591">Description</span></span> 
 </description></listheader><item><term> <span data-ttu-id="e4975-1592">-1</span><span class="sxs-lookup"><span data-stu-id="e4975-1592">-1</span></span> 
 </term><description> <span data-ttu-id="e4975-1593">這個物件的值為負數。</span><span class="sxs-lookup"><span data-stu-id="e4975-1593">The value of this object is negative.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="e4975-1594">0</span><span class="sxs-lookup"><span data-stu-id="e4975-1594">0</span></span> 
 </term><description> <span data-ttu-id="e4975-1595">這個物件的值為 0 (零)。</span><span class="sxs-lookup"><span data-stu-id="e4975-1595">The value of this object is 0 (zero).</span></span>  
  
 </description></item><item><term> <span data-ttu-id="e4975-1596">1</span><span class="sxs-lookup"><span data-stu-id="e4975-1596">1</span></span> 
 </term><description> <span data-ttu-id="e4975-1597">這個物件的值為正數。</span><span class="sxs-lookup"><span data-stu-id="e4975-1597">The value of this object is positive.</span></span>  
  
 </description></item></list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-1598"><xref:System.Numerics.BigInteger.Sign%2A>屬性就相當於<xref:System.Math.Sign%2A?displayProperty=nameWithType>基本數值類型的方法。</span><span class="sxs-lookup"><span data-stu-id="e4975-1598">The <xref:System.Numerics.BigInteger.Sign%2A> property is equivalent to the <xref:System.Math.Sign%2A?displayProperty=nameWithType> method for the primitive numeric types.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Subtract (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Subtract(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Subtract(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Subtract (left As BigInteger, right As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger Subtract(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member Subtract : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.Subtract (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="e4975-1599">要被減的值 (被減數)。</span><span class="sxs-lookup"><span data-stu-id="e4975-1599">The value to subtract from (the minuend).</span></span></param>
        <param name="right"><span data-ttu-id="e4975-1600">要減去的值 (減數)。</span><span class="sxs-lookup"><span data-stu-id="e4975-1600">The value to subtract (the subtrahend).</span></span></param>
        <summary><span data-ttu-id="e4975-1601">某個 <see cref="T:System.Numerics.BigInteger" /> 值減去另一個值，並且傳回結果。</span><span class="sxs-lookup"><span data-stu-id="e4975-1601">Subtracts one <see cref="T:System.Numerics.BigInteger" /> value from another and returns the result.</span></span></summary>
        <returns><span data-ttu-id="e4975-1602"><paramref name="right" /> 減去 <paramref name="left" /> 的結果。</span><span class="sxs-lookup"><span data-stu-id="e4975-1602">The result of subtracting <paramref name="right" /> from <paramref name="left" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-1603">可以使用不支援自訂運算子的語言<xref:System.Numerics.BigInteger.Subtract%2A>方法，以執行減法使用<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1603">Languages that do not support custom operators can use the <xref:System.Numerics.BigInteger.Subtract%2A> method to perform subtraction using <xref:System.Numerics.BigInteger> values.</span></span>  
  
 <span data-ttu-id="e4975-1604"><xref:System.Numerics.BigInteger.Subtract%2A>具現化時，方法是減法運算子的有用替代<xref:System.Numerics.BigInteger>變數將它指派減法，產生的差異，如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="e4975-1604">The <xref:System.Numerics.BigInteger.Subtract%2A> method is a useful substitute for the subtraction operator when instantiating a <xref:System.Numerics.BigInteger> variable by assigning it the difference that results from subtraction, as shown in the following example.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.OperationMethods#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/cs/Multiply1.cs#3)]
 [!code-vb[System.Numerics.BigInteger.OperationMethods#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/vb/Multiply1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.op_Subtraction(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.System#IComparable#CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (obj As Object) As Integer Implements IComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IComparable.CompareTo(System::Object ^ obj) = IComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToByteArray">
      <MemberSignature Language="C#" Value="public byte[] ToByteArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] ToByteArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.ToByteArray" />
      <MemberSignature Language="VB.NET" Value="Public Function ToByteArray () As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ ToByteArray();" />
      <MemberSignature Language="F#" Value="member this.ToByteArray : unit -&gt; byte[]" Usage="bigInteger.ToByteArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e4975-1605">將 <see cref="T:System.Numerics.BigInteger" /> 值轉換成位元組陣列。</span><span class="sxs-lookup"><span data-stu-id="e4975-1605">Converts a <see cref="T:System.Numerics.BigInteger" /> value to a byte array.</span></span></summary>
        <returns><span data-ttu-id="e4975-1606">目前 <see cref="T:System.Numerics.BigInteger" /> 物件的值，已轉換為位元組陣列。</span><span class="sxs-lookup"><span data-stu-id="e4975-1606">The value of the current <see cref="T:System.Numerics.BigInteger" /> object converted to an array of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-1607">這個方法所傳回陣列中個別的位元組由小到大順序出現。</span><span class="sxs-lookup"><span data-stu-id="e4975-1607">The individual bytes in the array returned by this method appear in little-endian order.</span></span> <span data-ttu-id="e4975-1608">也就是低序位位元組值的前面的高序位位元組。</span><span class="sxs-lookup"><span data-stu-id="e4975-1608">That is, the lower-order bytes of the value precede the higher-order bytes.</span></span> <span data-ttu-id="e4975-1609">陣列的第一個位元組會反映第一個八位元<xref:System.Numerics.BigInteger>第二個位元組的值會反映，接下來的八個位元，依此類推。</span><span class="sxs-lookup"><span data-stu-id="e4975-1609">The first byte of the array reflects the first eight bits of the <xref:System.Numerics.BigInteger> value, the second byte reflects the next eight bits, and so on.</span></span> <span data-ttu-id="e4975-1610">例如，值為 1024 或 0x0400，儲存為下列兩個位元組的陣列：</span><span class="sxs-lookup"><span data-stu-id="e4975-1610">For example, the value 1024, or 0x0400, is stored as the following array of two bytes:</span></span>  
  
|<span data-ttu-id="e4975-1611">元素</span><span class="sxs-lookup"><span data-stu-id="e4975-1611">Element</span></span>|<span data-ttu-id="e4975-1612">位元組值</span><span class="sxs-lookup"><span data-stu-id="e4975-1612">Byte value</span></span>|  
|-------------|----------------|  
|<span data-ttu-id="e4975-1613">0</span><span class="sxs-lookup"><span data-stu-id="e4975-1613">0</span></span>|<span data-ttu-id="e4975-1614">0x00</span><span class="sxs-lookup"><span data-stu-id="e4975-1614">0x00</span></span>|  
|<span data-ttu-id="e4975-1615">1</span><span class="sxs-lookup"><span data-stu-id="e4975-1615">1</span></span>|<span data-ttu-id="e4975-1616">0x04</span><span class="sxs-lookup"><span data-stu-id="e4975-1616">0x04</span></span>|  
  
 <span data-ttu-id="e4975-1617">負值會寫入到陣列中的最精簡的格式可能使用二補數表示法。</span><span class="sxs-lookup"><span data-stu-id="e4975-1617">Negative values are written to the array using two's complement representation in the most compact form possible.</span></span> <span data-ttu-id="e4975-1618">例如，-1 以其值是單一位元組`0xFF`而不是以多個項目時，陣列這類`0xFF`，`0xFF`或`0xFF`， `0xFF`， `0xFF`， `0xFF`。</span><span class="sxs-lookup"><span data-stu-id="e4975-1618">For example, -1 is represented as a single byte whose value is `0xFF` instead of as an array with multiple elements, such as `0xFF`, `0xFF` or `0xFF`, `0xFF`, `0xFF`, `0xFF`.</span></span>  
  
 <span data-ttu-id="e4975-1619">因為二補數表示一律會解譯陣列中的最後一個位元組的最高序位位元 (位置處的位元組<xref:System.Array.Length%2A?displayProperty=nameWithType> `- 1`) 做為正負號位元，方法會傳回額外的項目，其值為零的位元組陣列至釐清正數值，否則無法解譯為具有其正負號位元都設定。</span><span class="sxs-lookup"><span data-stu-id="e4975-1619">Because two's complement representation always interprets the highest-order bit of the last byte in the array (the byte at position <xref:System.Array.Length%2A?displayProperty=nameWithType>`- 1`) as the sign bit, the method returns a byte array with an extra element whose value is zero to disambiguate positive values that could otherwise be interpreted as having their sign bits set.</span></span> <span data-ttu-id="e4975-1620">比方說，120 的值或`0x78`表示為單一位元組陣列： `0x78`。</span><span class="sxs-lookup"><span data-stu-id="e4975-1620">For example, the value 120 or `0x78` is represented as a single-byte array: `0x78`.</span></span> <span data-ttu-id="e4975-1621">不過，128，或是`0x80`，表示為兩個位元組陣列： `0x80`， `0x00`。</span><span class="sxs-lookup"><span data-stu-id="e4975-1621">However, 128, or `0x80`, is represented as a two-byte array: `0x80`, `0x00`.</span></span>  
  
 <span data-ttu-id="e4975-1622">您可以往返<xref:System.Numerics.BigInteger>值，將其儲存為位元組陣列，然後再還原使用<xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29>建構函式。</span><span class="sxs-lookup"><span data-stu-id="e4975-1622">You can round-trip a <xref:System.Numerics.BigInteger> value by storing it to a byte array and then restoring it using the <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructor.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="e4975-1623">如果您的程式碼修改個別陣列中的位元組之前它會還原值，這個方法所傳回的值，您必須確定，您不小心變更正負號位元。</span><span class="sxs-lookup"><span data-stu-id="e4975-1623">If your code modifies the value of individual bytes in the array returned by this method before it restores the value, you must make sure that you do not unintentionally change the sign bit.</span></span> <span data-ttu-id="e4975-1624">例如，如果您修改增加正數值，使最高順序位元的位元組陣列的最後一個元素會變成設定，您可以加入新的位元組，其值為陣列結尾的零。</span><span class="sxs-lookup"><span data-stu-id="e4975-1624">For example, if your modifications increase a positive value so that the highest-order bit in the last element of the byte array becomes set, you can add a new byte whose value is zero to the end of the array.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e4975-1625">下列範例將說明一些<xref:System.Numerics.BigInteger>值都表示位元組陣列。</span><span class="sxs-lookup"><span data-stu-id="e4975-1625">The following example illustrates how some <xref:System.Numerics.BigInteger> values are represented in byte arrays.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ToByteArray#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ToByteArray/cs/ToByteArray1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.ToByteArray#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ToByteArray/vb/ToByteArray1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToByteArray">
      <MemberSignature Language="C#" Value="public byte[] ToByteArray (bool isUnsigned = false, bool isBigEndian = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] ToByteArray(bool isUnsigned, bool isBigEndian) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.ToByteArray(System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToByteArray (Optional isUnsigned As Boolean = false, Optional isBigEndian As Boolean = false) As Byte()" />
      <MemberSignature Language="F#" Value="member this.ToByteArray : bool * bool -&gt; byte[]" Usage="bigInteger.ToByteArray (isUnsigned, isBigEndian)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isUnsigned" Type="System.Boolean" />
        <Parameter Name="isBigEndian" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="isUnsigned">To be added.</param>
        <param name="isBigEndian">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e4975-1626">將目前 <see cref="T:System.Numerics.BigInteger" /> 物件的數值，轉換為其相等的字串表示。</span><span class="sxs-lookup"><span data-stu-id="e4975-1626">Converts the numeric value of the current <see cref="T:System.Numerics.BigInteger" /> object to its equivalent string representation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="bigInteger.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e4975-1627">將目前 <see cref="T:System.Numerics.BigInteger" /> 物件的數值，轉換為其相等的字串表示。</span><span class="sxs-lookup"><span data-stu-id="e4975-1627">Converts the numeric value of the current <see cref="T:System.Numerics.BigInteger" /> object to its equivalent string representation.</span></span></summary>
        <returns><span data-ttu-id="e4975-1628">目前 <see cref="T:System.Numerics.BigInteger" /> 值的字串表示。</span><span class="sxs-lookup"><span data-stu-id="e4975-1628">The string representation of the current <see cref="T:System.Numerics.BigInteger" /> value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-1629"><xref:System.Numerics.BigInteger.ToString>方法格式<xref:System.Numerics.BigInteger>"R"或反覆存取，目前的文化特性的格式中的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1629">The <xref:System.Numerics.BigInteger.ToString> method formats a <xref:System.Numerics.BigInteger> value in the "R", or round-trip, format of the current culture.</span></span> <span data-ttu-id="e4975-1630">如果您想要指定不同的格式或文化特性，使用的其他多載<xref:System.Numerics.BigInteger.ToString%2A>方法，如下所示：</span><span class="sxs-lookup"><span data-stu-id="e4975-1630">If you want to specify a different format or culture, use the other overloads of the <xref:System.Numerics.BigInteger.ToString%2A> method, as follows:</span></span>  
  
|<span data-ttu-id="e4975-1631">若要使用格式</span><span class="sxs-lookup"><span data-stu-id="e4975-1631">To use format</span></span>|<span data-ttu-id="e4975-1632">文化特性</span><span class="sxs-lookup"><span data-stu-id="e4975-1632">For culture</span></span>|<span data-ttu-id="e4975-1633">使用多載</span><span class="sxs-lookup"><span data-stu-id="e4975-1633">Use the overload</span></span>|  
|-------------------|-----------------|----------------------|  
|<span data-ttu-id="e4975-1634">Round-trip ("R") 格式</span><span class="sxs-lookup"><span data-stu-id="e4975-1634">Round-trip ("R") format</span></span>|<span data-ttu-id="e4975-1635">特定文化特性</span><span class="sxs-lookup"><span data-stu-id="e4975-1635">A specific culture</span></span>|<xref:System.Numerics.BigInteger.ToString%2A>|  
|<span data-ttu-id="e4975-1636">以特定格式</span><span class="sxs-lookup"><span data-stu-id="e4975-1636">A specific format</span></span>|<span data-ttu-id="e4975-1637">預設值 （目前） 的文化特性</span><span class="sxs-lookup"><span data-stu-id="e4975-1637">Default (current) culture</span></span>|<xref:System.Numerics.BigInteger.ToString%28System.String%29>|  
|<span data-ttu-id="e4975-1638">以特定格式</span><span class="sxs-lookup"><span data-stu-id="e4975-1638">A specific format</span></span>|<span data-ttu-id="e4975-1639">特定文化特性</span><span class="sxs-lookup"><span data-stu-id="e4975-1639">A specific culture</span></span>|<xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29>|  
  
 <span data-ttu-id="e4975-1640">字串表示<xref:System.Numerics.BigInteger>值包含負號，如果其值為負數，且沒有前置零範圍從 0 到 9 的數字順序。</span><span class="sxs-lookup"><span data-stu-id="e4975-1640">The string representation of the <xref:System.Numerics.BigInteger> value includes a negative sign if its value is negative, and a sequence of digits ranging from 0 to 9 without leading zeros.</span></span> <span data-ttu-id="e4975-1641">所定義的負號<xref:System.Globalization.NumberFormatInfo>目前的文化特性的物件。</span><span class="sxs-lookup"><span data-stu-id="e4975-1641">The negative sign is defined by the <xref:System.Globalization.NumberFormatInfo> object for the current culture.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e4975-1642">下列範例會顯示<xref:System.Numerics.BigInteger>使用預設值<xref:System.Numerics.BigInteger.ToString>方法。</span><span class="sxs-lookup"><span data-stu-id="e4975-1642">The following example displays a <xref:System.Numerics.BigInteger> value by using the default <xref:System.Numerics.BigInteger.ToString> method.</span></span> <span data-ttu-id="e4975-1643">它也會顯示的字串表示<xref:System.Numerics.BigInteger>無法使用某些標準格式規範所產生的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1643">It also displays the string representations of the <xref:System.Numerics.BigInteger> value that results from using some standard format specifiers.</span></span> <span data-ttu-id="e4975-1644">範例會顯示使用 EN-US 文化特性的格式化慣例。</span><span class="sxs-lookup"><span data-stu-id="e4975-1644">The examples are displayed using the formatting conventions of the en-US culture.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ToString/cs/ToString1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ToString/vb/ToString1.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/base-types/standard-numeric-format-strings.md"><span data-ttu-id="e4975-1645">標準數值格式字串</span><span class="sxs-lookup"><span data-stu-id="e4975-1645">Standard Numeric Format Strings</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/custom-numeric-format-strings.md"><span data-ttu-id="e4975-1646">自訂數值格式字串</span><span class="sxs-lookup"><span data-stu-id="e4975-1646">Custom Numeric Format Strings</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="override this.ToString : IFormatProvider -&gt; string" Usage="bigInteger.ToString provider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="e4975-1647">物件，提供特定文化特性格式資訊。</span><span class="sxs-lookup"><span data-stu-id="e4975-1647">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="e4975-1648">使用指定的文化特性特定格式資訊，將目前 <see cref="T:System.Numerics.BigInteger" /> 物件的數值轉換為其對等字串表示。</span><span class="sxs-lookup"><span data-stu-id="e4975-1648">Converts the numeric value of the current <see cref="T:System.Numerics.BigInteger" /> object to its equivalent string representation by using the specified culture-specific formatting information.</span></span></summary>
        <returns><span data-ttu-id="e4975-1649">目前 <see cref="T:System.Numerics.BigInteger" /> 值的字串表示，採用 <paramref name="provider" /> 參數所指定的格式。</span><span class="sxs-lookup"><span data-stu-id="e4975-1649">The string representation of the current <see cref="T:System.Numerics.BigInteger" /> value in the format specified by the <paramref name="provider" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-1650"><xref:System.Numerics.BigInteger.ToString%28System.IFormatProvider%29>方法格式<xref:System.Numerics.BigInteger>值中的"R"或反覆存取，使用格式化<xref:System.Globalization.NumberFormatInfo>指定文化特性的物件。</span><span class="sxs-lookup"><span data-stu-id="e4975-1650">The <xref:System.Numerics.BigInteger.ToString%28System.IFormatProvider%29> method formats a <xref:System.Numerics.BigInteger> value in the "R", or round-trip, format by using the <xref:System.Globalization.NumberFormatInfo> object of a specified culture.</span></span> <span data-ttu-id="e4975-1651">如果您想要指定不同的格式或目前的文化特性，使用的其他多載<xref:System.Numerics.BigInteger.ToString%2A>方法，如下所示：</span><span class="sxs-lookup"><span data-stu-id="e4975-1651">If you want to specify a different format or the current culture, use the other overloads of the <xref:System.Numerics.BigInteger.ToString%2A> method, as follows:</span></span>  
  
|<span data-ttu-id="e4975-1652">若要使用格式</span><span class="sxs-lookup"><span data-stu-id="e4975-1652">To use format</span></span>|<span data-ttu-id="e4975-1653">文化特性</span><span class="sxs-lookup"><span data-stu-id="e4975-1653">For culture</span></span>|<span data-ttu-id="e4975-1654">使用多載</span><span class="sxs-lookup"><span data-stu-id="e4975-1654">Use the overload</span></span>|  
|-------------------|-----------------|----------------------|  
|<span data-ttu-id="e4975-1655">Round-trip ("R") 格式</span><span class="sxs-lookup"><span data-stu-id="e4975-1655">Round-trip ("R") format</span></span>|<span data-ttu-id="e4975-1656">預設值 （目前） 的文化特性</span><span class="sxs-lookup"><span data-stu-id="e4975-1656">Default (current) culture</span></span>|<xref:System.Numerics.BigInteger.ToString>|  
|<span data-ttu-id="e4975-1657">以特定格式</span><span class="sxs-lookup"><span data-stu-id="e4975-1657">A specific format</span></span>|<span data-ttu-id="e4975-1658">預設值 （目前） 的文化特性</span><span class="sxs-lookup"><span data-stu-id="e4975-1658">Default (current) culture</span></span>|<xref:System.Numerics.BigInteger.ToString%28System.String%29>|  
|<span data-ttu-id="e4975-1659">以特定格式</span><span class="sxs-lookup"><span data-stu-id="e4975-1659">A specific format</span></span>|<span data-ttu-id="e4975-1660">特定文化特性</span><span class="sxs-lookup"><span data-stu-id="e4975-1660">A specific culture</span></span>|<xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29>|  
  
 <span data-ttu-id="e4975-1661">`provider`參數是<xref:System.IFormatProvider>實作。</span><span class="sxs-lookup"><span data-stu-id="e4975-1661">The `provider` parameter is an <xref:System.IFormatProvider> implementation.</span></span> <span data-ttu-id="e4975-1662">其<xref:System.IFormatProvider.GetFormat%2A>方法會傳回<xref:System.Globalization.NumberFormatInfo>提供特定文化特性格式資訊的字串，這個方法所傳回的物件。</span><span class="sxs-lookup"><span data-stu-id="e4975-1662">Its <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific information about the format of the string returned by this method.</span></span> <span data-ttu-id="e4975-1663">如果`provider`已`null`，則<xref:System.Numerics.BigInteger>值的格式使用<xref:System.Globalization.NumberFormatInfo>目前文化特性的物件。</span><span class="sxs-lookup"><span data-stu-id="e4975-1663">If `provider` is `null`, the <xref:System.Numerics.BigInteger> value is formatted using the <xref:System.Globalization.NumberFormatInfo> object of the current culture.</span></span> <span data-ttu-id="e4975-1664">唯一的屬性<xref:System.Globalization.NumberFormatInfo>控制項的字串表示的物件<xref:System.Numerics.BigInteger>使用一般格式規範的值是<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=nameWithType>，它會定義表示的負號的字元。</span><span class="sxs-lookup"><span data-stu-id="e4975-1664">The only property of the <xref:System.Globalization.NumberFormatInfo> object that controls the string representation of the <xref:System.Numerics.BigInteger> value using the general format specifier is <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=nameWithType>, which defines the character that represents the negative sign.</span></span>  
  
 <span data-ttu-id="e4975-1665">`provider`參數可以是下列其中之一：</span><span class="sxs-lookup"><span data-stu-id="e4975-1665">The `provider` parameter can be one of the following:</span></span>  
  
-   <span data-ttu-id="e4975-1666">A<xref:System.Globalization.CultureInfo>物件，表示提供的格式資訊的文化特性。</span><span class="sxs-lookup"><span data-stu-id="e4975-1666">A <xref:System.Globalization.CultureInfo> object that represents the culture that supplies formatting information.</span></span>  
  
-   <span data-ttu-id="e4975-1667"><xref:System.Globalization.NumberFormatInfo>物件，提供格式設定資訊。</span><span class="sxs-lookup"><span data-stu-id="e4975-1667">The <xref:System.Globalization.NumberFormatInfo> object that supplies formatting information.</span></span>  
  
-   <span data-ttu-id="e4975-1668">自訂物件實作<xref:System.IFormatProvider>。</span><span class="sxs-lookup"><span data-stu-id="e4975-1668">A custom object that implements <xref:System.IFormatProvider>.</span></span> <span data-ttu-id="e4975-1669">其<xref:System.IFormatProvider.GetFormat%2A>方法會傳回<xref:System.Globalization.NumberFormatInfo>提供的格式資訊的物件。</span><span class="sxs-lookup"><span data-stu-id="e4975-1669">Its <xref:System.IFormatProvider.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that supplies formatting information.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e4975-1670">下列範例會具現化自訂<xref:System.Globalization.NumberFormatInfo>波狀符號 （~） 中定義的負號的物件。</span><span class="sxs-lookup"><span data-stu-id="e4975-1670">The following example instantiates a custom <xref:System.Globalization.NumberFormatInfo> object that defines the tilde (~) as a negative sign.</span></span> <span data-ttu-id="e4975-1671"><xref:System.Numerics.BigInteger.ToString%28System.IFormatProvider%29>方法接著會使用自訂<xref:System.Globalization.NumberFormatInfo>物件，以顯示負<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1671">The <xref:System.Numerics.BigInteger.ToString%28System.IFormatProvider%29> method then uses the custom <xref:System.Globalization.NumberFormatInfo> object to display a negative <xref:System.Numerics.BigInteger> value.</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.ToString/cs/System.Numeric.BigInteger.ToString.cs#1)]
 [!code-vb[System.Numeric.BigInteger.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.ToString/vb/System.Numeric.BigInteger.ToString.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.ToString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(System::String ^ format);" />
      <MemberSignature Language="F#" Value="override this.ToString : string -&gt; string" Usage="bigInteger.ToString format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="e4975-1672">標準或自訂數值格式字串。</span><span class="sxs-lookup"><span data-stu-id="e4975-1672">A standard or custom numeric format string.</span></span></param>
        <summary><span data-ttu-id="e4975-1673">使用指定的格式，將目前 <see cref="T:System.Numerics.BigInteger" /> 物件的值，轉換為其相等字串表示。</span><span class="sxs-lookup"><span data-stu-id="e4975-1673">Converts the numeric value of the current <see cref="T:System.Numerics.BigInteger" /> object to its equivalent string representation by using the specified format.</span></span></summary>
        <returns><span data-ttu-id="e4975-1674">目前 <see cref="T:System.Numerics.BigInteger" /> 值的字串表示，採用 <paramref name="format" /> 參數所指定的格式。</span><span class="sxs-lookup"><span data-stu-id="e4975-1674">The string representation of the current <see cref="T:System.Numerics.BigInteger" /> value in the format specified by the <paramref name="format" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-1675"><xref:System.Numerics.BigInteger.ToString%28System.String%29>方法格式<xref:System.Numerics.BigInteger>中指定的格式，使用值<xref:System.Globalization.NumberFormatInfo>物件，表示目前的文化特性的慣例。</span><span class="sxs-lookup"><span data-stu-id="e4975-1675">The <xref:System.Numerics.BigInteger.ToString%28System.String%29> method formats a <xref:System.Numerics.BigInteger> value in a specified format by using a <xref:System.Globalization.NumberFormatInfo> object that represents the conventions of the current culture.</span></span> <span data-ttu-id="e4975-1676">如果您想要使用"R"或反覆存取時，格式化或指定不同的文化特性，請使用的其他多載<xref:System.Numerics.BigInteger.ToString%2A>方法，如下所示：</span><span class="sxs-lookup"><span data-stu-id="e4975-1676">If you want to use the "R", or round-trip, format or specify a different culture, use the other overloads of the <xref:System.Numerics.BigInteger.ToString%2A> method, as follows:</span></span>  
  
|<span data-ttu-id="e4975-1677">若要使用格式</span><span class="sxs-lookup"><span data-stu-id="e4975-1677">To use format</span></span>|<span data-ttu-id="e4975-1678">文化特性</span><span class="sxs-lookup"><span data-stu-id="e4975-1678">For culture</span></span>|<span data-ttu-id="e4975-1679">使用多載</span><span class="sxs-lookup"><span data-stu-id="e4975-1679">Use the overload</span></span>|  
|-------------------|-----------------|----------------------|  
|<span data-ttu-id="e4975-1680">Round-trip ("R") 格式</span><span class="sxs-lookup"><span data-stu-id="e4975-1680">Round-trip ("R") format</span></span>|<span data-ttu-id="e4975-1681">預設值 （目前） 的文化特性</span><span class="sxs-lookup"><span data-stu-id="e4975-1681">Default (current) culture</span></span>|<xref:System.Numerics.BigInteger.ToString>|  
|<span data-ttu-id="e4975-1682">Round-trip ("R") 格式</span><span class="sxs-lookup"><span data-stu-id="e4975-1682">Round-trip ("R") format</span></span>|<span data-ttu-id="e4975-1683">特定文化特性</span><span class="sxs-lookup"><span data-stu-id="e4975-1683">A specific culture</span></span>|<xref:System.Numerics.BigInteger.ToString%28System.IFormatProvider%29>|  
|<span data-ttu-id="e4975-1684">以特定格式</span><span class="sxs-lookup"><span data-stu-id="e4975-1684">A specific format</span></span>|<span data-ttu-id="e4975-1685">特定文化特性</span><span class="sxs-lookup"><span data-stu-id="e4975-1685">A specific culture</span></span>|<xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29>|  
  
 <span data-ttu-id="e4975-1686">`format`參數可以是任何有效[標準數值字串](~/docs/standard/base-types/standard-numeric-format-strings.md)，或任何組合[自訂數值格式字串](~/docs/standard/base-types/custom-numeric-format-strings.md)。</span><span class="sxs-lookup"><span data-stu-id="e4975-1686">The `format` parameter can be any valid [standard numeric string](~/docs/standard/base-types/standard-numeric-format-strings.md), or any combination of [custom numeric format strings](~/docs/standard/base-types/custom-numeric-format-strings.md).</span></span> <span data-ttu-id="e4975-1687">如果`format`等於<xref:System.String.Empty?displayProperty=nameWithType>是否`null`，目前的傳回值<xref:System.Numerics.BigInteger>物件的格式使用來回行程格式規範 ("R")。</span><span class="sxs-lookup"><span data-stu-id="e4975-1687">If `format` is equal to <xref:System.String.Empty?displayProperty=nameWithType> or is `null`, the return value of the current <xref:System.Numerics.BigInteger> object is formatted with the round-trip format specifier ("R").</span></span> <span data-ttu-id="e4975-1688">如果`format`是任何其他值，則方法會擲回<xref:System.FormatException>。</span><span class="sxs-lookup"><span data-stu-id="e4975-1688">If `format` is any other value, the method throws a <xref:System.FormatException>.</span></span>  
  
 <span data-ttu-id="e4975-1689">.NET Framework 會提供廣泛的格式化支援，這會在下列格式化主題中的更詳細地說明：</span><span class="sxs-lookup"><span data-stu-id="e4975-1689">The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:</span></span>  
  
-   <span data-ttu-id="e4975-1690">如需有關數值格式規範的詳細資訊，請參閱[標準數值格式字串](~/docs/standard/base-types/standard-numeric-format-strings.md)並[自訂數值格式字串](~/docs/standard/base-types/custom-numeric-format-strings.md)。</span><span class="sxs-lookup"><span data-stu-id="e4975-1690">For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).</span></span>  
  
-   <span data-ttu-id="e4975-1691">如需在.NET Framework 格式支援的詳細資訊，請參閱[格式化型別](~/docs/standard/base-types/formatting-types.md)。</span><span class="sxs-lookup"><span data-stu-id="e4975-1691">For more information about support for formatting in the .NET Framework, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).</span></span>  
  
 <span data-ttu-id="e4975-1692">傳回字串的格式取決於<xref:System.Globalization.NumberFormatInfo>目前的文化特性的物件。</span><span class="sxs-lookup"><span data-stu-id="e4975-1692">The format of the returned string is determined by the <xref:System.Globalization.NumberFormatInfo> object for the current culture.</span></span> <span data-ttu-id="e4975-1693">取決於`format`參數，這個物件可控制例如負號、 群組分隔符號和小數點符號，輸出字串中的符號。</span><span class="sxs-lookup"><span data-stu-id="e4975-1693">Depending on the `format` parameter, this object controls symbols such as the negative sign, the group separator, and the decimal point symbol in the output string.</span></span> <span data-ttu-id="e4975-1694">若要提供目前的文化特性以外的文化特性格式資訊，請呼叫<xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29>多載。</span><span class="sxs-lookup"><span data-stu-id="e4975-1694">To provide formatting information for cultures other than the current culture, call the <xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29> overload.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e4975-1695">下列範例會初始化<xref:System.Numerics.BigInteger>值並將它顯示使用每個標準格式字串和一些自訂格式字串。</span><span class="sxs-lookup"><span data-stu-id="e4975-1695">The following example initializes a <xref:System.Numerics.BigInteger> value and displays it by using each standard format string and some custom format strings.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ToString#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ToString/cs/ToString1.cs#3)]
 [!code-vb[System.Numerics.BigInteger.ToString#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ToString/vb/ToString1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="e4975-1696"><paramref name="format" /> 不是有效的格式字串。</span><span class="sxs-lookup"><span data-stu-id="e4975-1696"><paramref name="format" /> is not a valid format string.</span></span></exception>
        <related type="Article" href="~/docs/standard/base-types/standard-numeric-format-strings.md"><span data-ttu-id="e4975-1697">標準數值格式字串</span><span class="sxs-lookup"><span data-stu-id="e4975-1697">Standard Numeric Format Strings</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/custom-numeric-format-strings.md"><span data-ttu-id="e4975-1698">自訂數值格式字串</span><span class="sxs-lookup"><span data-stu-id="e4975-1698">Custom Numeric Format Strings</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(System::String ^ format, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="override this.ToString : string * IFormatProvider -&gt; string" Usage="bigInteger.ToString (format, provider)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="e4975-1699">標準或自訂數值格式字串。</span><span class="sxs-lookup"><span data-stu-id="e4975-1699">A standard or custom numeric format string.</span></span></param>
        <param name="provider"><span data-ttu-id="e4975-1700">物件，提供特定文化特性格式資訊。</span><span class="sxs-lookup"><span data-stu-id="e4975-1700">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="e4975-1701">使用指定的格式和特定文化特性的格式資訊，將目前 <see cref="T:System.Numerics.BigInteger" /> 物件的數值，轉換為其相等的字串表示。</span><span class="sxs-lookup"><span data-stu-id="e4975-1701">Converts the numeric value of the current <see cref="T:System.Numerics.BigInteger" /> object to its equivalent string representation by using the specified format and culture-specific format information.</span></span></summary>
        <returns><span data-ttu-id="e4975-1702">目前 <see cref="T:System.Numerics.BigInteger" /> 值的字串表示 (如 <paramref name="format" /> 和 <paramref name="provider" /> 參數所指定)。</span><span class="sxs-lookup"><span data-stu-id="e4975-1702">The string representation of the current <see cref="T:System.Numerics.BigInteger" /> value as specified by the <paramref name="format" /> and <paramref name="provider" /> parameters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-1703"><xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29>方法格式<xref:System.Numerics.BigInteger>中指定的格式，使用值<xref:System.Globalization.NumberFormatInfo>指定文化特性的物件。</span><span class="sxs-lookup"><span data-stu-id="e4975-1703">The <xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29> method formats a <xref:System.Numerics.BigInteger> value in a specified format by using the <xref:System.Globalization.NumberFormatInfo> object of a specified culture.</span></span> <span data-ttu-id="e4975-1704">如果您想要使用的來回行程格式或預設文化特性設定，使用的其他多載<xref:System.Numerics.BigInteger.ToString%2A>方法，如下所示：</span><span class="sxs-lookup"><span data-stu-id="e4975-1704">If you want to use the round-trip format or default culture settings, use the other overloads of the <xref:System.Numerics.BigInteger.ToString%2A> method, as follows:</span></span>  
  
|<span data-ttu-id="e4975-1705">若要使用格式</span><span class="sxs-lookup"><span data-stu-id="e4975-1705">To use format</span></span>|<span data-ttu-id="e4975-1706">文化特性</span><span class="sxs-lookup"><span data-stu-id="e4975-1706">For culture</span></span>|<span data-ttu-id="e4975-1707">使用多載</span><span class="sxs-lookup"><span data-stu-id="e4975-1707">Use the overload</span></span>|  
|-------------------|-----------------|----------------------|  
|<span data-ttu-id="e4975-1708">Round-trip ("R") 格式</span><span class="sxs-lookup"><span data-stu-id="e4975-1708">Round-trip ("R") format</span></span>|<span data-ttu-id="e4975-1709">預設值 （目前） 的文化特性</span><span class="sxs-lookup"><span data-stu-id="e4975-1709">Default (current) culture</span></span>|<xref:System.Numerics.BigInteger.ToString>|  
|<span data-ttu-id="e4975-1710">Round-trip ("R") 格式</span><span class="sxs-lookup"><span data-stu-id="e4975-1710">Round-trip ("R") format</span></span>|<span data-ttu-id="e4975-1711">特定文化特性</span><span class="sxs-lookup"><span data-stu-id="e4975-1711">A specific culture</span></span>|<xref:System.Numerics.BigInteger.ToString%28System.IFormatProvider%29>|  
|<span data-ttu-id="e4975-1712">以特定格式</span><span class="sxs-lookup"><span data-stu-id="e4975-1712">A specific format</span></span>|<span data-ttu-id="e4975-1713">預設值 （目前） 的文化特性</span><span class="sxs-lookup"><span data-stu-id="e4975-1713">Default (current) culture</span></span>|<xref:System.Numerics.BigInteger.ToString%28System.String%29>|  
  
 <span data-ttu-id="e4975-1714">`format`參數可以是任何有效[標準數值字串](~/docs/standard/base-types/standard-numeric-format-strings.md)，或任何組合[自訂數值格式字串](~/docs/standard/base-types/custom-numeric-format-strings.md)。</span><span class="sxs-lookup"><span data-stu-id="e4975-1714">The `format` parameter can be any valid  [standard numeric string](~/docs/standard/base-types/standard-numeric-format-strings.md), or any combination of [custom numeric format strings](~/docs/standard/base-types/custom-numeric-format-strings.md).</span></span> <span data-ttu-id="e4975-1715">如果`format`等於<xref:System.String.Empty?displayProperty=nameWithType>是否`null`，目前的傳回值<xref:System.Numerics.BigInteger>物件的格式使用來回行程格式規範 ("R")。</span><span class="sxs-lookup"><span data-stu-id="e4975-1715">If `format` is equal to <xref:System.String.Empty?displayProperty=nameWithType> or is `null`, the return value of the current <xref:System.Numerics.BigInteger> object is formatted with the round-trip format specifier ("R").</span></span> <span data-ttu-id="e4975-1716">如果`format`是任何其他值，則方法會擲回<xref:System.FormatException>。</span><span class="sxs-lookup"><span data-stu-id="e4975-1716">If `format` is any other value, the method throws a <xref:System.FormatException>.</span></span>  
  
 <span data-ttu-id="e4975-1717">.NET Framework 會提供廣泛的格式化支援，這會在下列格式化主題中的更詳細地說明：</span><span class="sxs-lookup"><span data-stu-id="e4975-1717">The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:</span></span>  
  
-   <span data-ttu-id="e4975-1718">如需有關數值格式規範的詳細資訊，請參閱[標準數值格式字串](~/docs/standard/base-types/standard-numeric-format-strings.md)並[自訂數值格式字串](~/docs/standard/base-types/custom-numeric-format-strings.md)。</span><span class="sxs-lookup"><span data-stu-id="e4975-1718">For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).</span></span>  
  
-   <span data-ttu-id="e4975-1719">如需在.NET Framework 格式支援的詳細資訊，請參閱[格式化型別](~/docs/standard/base-types/formatting-types.md)。</span><span class="sxs-lookup"><span data-stu-id="e4975-1719">For more information about support for formatting in the .NET Framework, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).</span></span>  
  
 <span data-ttu-id="e4975-1720">`provider`參數是<xref:System.IFormatProvider>實作。</span><span class="sxs-lookup"><span data-stu-id="e4975-1720">The `provider` parameter is an <xref:System.IFormatProvider> implementation.</span></span> <span data-ttu-id="e4975-1721">其<xref:System.IFormatProvider.GetFormat%2A>方法會傳回<xref:System.Globalization.NumberFormatInfo>提供特定文化特性格式資訊的字串，這個方法所傳回的物件。</span><span class="sxs-lookup"><span data-stu-id="e4975-1721">Its <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific information about the format of the string returned by this method.</span></span> <span data-ttu-id="e4975-1722">當<xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29>叫用方法時，它會呼叫`provider`參數的<xref:System.IFormatProvider.GetFormat%2A>方法並將它傳遞<xref:System.Type>物件，表示<xref:System.Globalization.NumberFormatInfo>型別。</span><span class="sxs-lookup"><span data-stu-id="e4975-1722">When the <xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29> method is invoked, it calls the `provider` parameter's <xref:System.IFormatProvider.GetFormat%2A> method and passes it a <xref:System.Type> object that represents the <xref:System.Globalization.NumberFormatInfo> type.</span></span> <span data-ttu-id="e4975-1723"><xref:System.IFormatProvider.GetFormat%2A>方法接著會傳回<xref:System.Globalization.NumberFormatInfo>物件，提供格式化資訊`value`參數，例如負號、 群組分隔符號或小數點符號。</span><span class="sxs-lookup"><span data-stu-id="e4975-1723">The <xref:System.IFormatProvider.GetFormat%2A> method then returns the <xref:System.Globalization.NumberFormatInfo> object that provides information for formatting the `value` parameter, such as the negative sign symbol, the group separator symbol, or the decimal point symbol.</span></span> <span data-ttu-id="e4975-1724">若要使用的三種方式`provider`參數來提供格式設定資訊給<xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29>方法：</span><span class="sxs-lookup"><span data-stu-id="e4975-1724">There are three ways to use the `provider` parameter to supply formatting information to the <xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29> method:</span></span>  
  
-   <span data-ttu-id="e4975-1725">您可以傳遞<xref:System.Globalization.CultureInfo>物件，表示提供的格式資訊的文化特性。</span><span class="sxs-lookup"><span data-stu-id="e4975-1725">You can pass a <xref:System.Globalization.CultureInfo> object that represents the culture that supplies formatting information.</span></span> <span data-ttu-id="e4975-1726">其<xref:System.Globalization.CultureInfo.GetFormat%2A>方法會傳回<xref:System.Globalization.NumberFormatInfo>提供用於該文化特性的數值格式資訊的物件。</span><span class="sxs-lookup"><span data-stu-id="e4975-1726">Its <xref:System.Globalization.CultureInfo.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information for that culture.</span></span>  
  
-   <span data-ttu-id="e4975-1727">您可以傳遞的實際<xref:System.Globalization.NumberFormatInfo>提供數值格式資訊的物件。</span><span class="sxs-lookup"><span data-stu-id="e4975-1727">You can pass the actual <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information.</span></span> <span data-ttu-id="e4975-1728">(其實作的<xref:System.Globalization.NumberFormatInfo.GetFormat%2A>只會傳回本身。)</span><span class="sxs-lookup"><span data-stu-id="e4975-1728">(Its implementation of <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> just returns itself.)</span></span>  
  
-   <span data-ttu-id="e4975-1729">您可以傳遞自訂物件實作<xref:System.IFormatProvider>。</span><span class="sxs-lookup"><span data-stu-id="e4975-1729">You can pass a custom object that implements <xref:System.IFormatProvider>.</span></span> <span data-ttu-id="e4975-1730">其<xref:System.IFormatProvider.GetFormat%2A>方法具現化，並傳回<xref:System.Globalization.NumberFormatInfo>提供格式設定資訊的物件。</span><span class="sxs-lookup"><span data-stu-id="e4975-1730">Its <xref:System.IFormatProvider.GetFormat%2A> method instantiates and returns the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.</span></span>  
  
 <span data-ttu-id="e4975-1731">如果`provider`已`null`，傳回字串的格式根據<xref:System.Globalization.NumberFormatInfo>目前文化特性的物件。</span><span class="sxs-lookup"><span data-stu-id="e4975-1731">If `provider` is `null`, the formatting of the returned string is based on the <xref:System.Globalization.NumberFormatInfo> object of the current culture.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e4975-1732">下列範例會初始化<xref:System.Numerics.BigInteger>值，並將它顯示到主控台使用的標準格式字串和<xref:System.Globalization.NumberFormatInfo>波狀符號 （~） 中定義的負號的物件。</span><span class="sxs-lookup"><span data-stu-id="e4975-1732">The following example initializes a <xref:System.Numerics.BigInteger> value, and displays it to the console using a standard format string and a <xref:System.Globalization.NumberFormatInfo> object that defines the tilde (~) as a negative sign.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ToString#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ToString/cs/ToString1.cs#4)]
 [!code-vb[System.Numerics.BigInteger.ToString#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ToString/vb/ToString1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="e4975-1733"><paramref name="format" /> 不是有效的格式字串。</span><span class="sxs-lookup"><span data-stu-id="e4975-1733"><paramref name="format" /> is not a valid format string.</span></span></exception>
        <related type="Article" href="~/docs/standard/base-types/standard-numeric-format-strings.md"><span data-ttu-id="e4975-1734">標準數值格式字串</span><span class="sxs-lookup"><span data-stu-id="e4975-1734">Standard Numeric Format Strings</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/custom-numeric-format-strings.md"><span data-ttu-id="e4975-1735">自訂數值格式字串</span><span class="sxs-lookup"><span data-stu-id="e4975-1735">Custom Numeric Format Strings</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TryFormat">
      <MemberSignature Language="C#" Value="public bool TryFormat (Span&lt;char&gt; destination, out int charsWritten, ReadOnlySpan&lt;char&gt; format = null, IFormatProvider provider = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryFormat(valuetype System.Span`1&lt;char&gt; destination, [out] int32&amp; charsWritten, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryFormat (destination As Span(Of Char), ByRef charsWritten As Integer, Optional format As ReadOnlySpan(Of Char) = null, Optional provider As IFormatProvider = null) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryFormat : Span&lt;char&gt; *  * ReadOnlySpan&lt;char&gt; * IFormatProvider -&gt; bool" Usage="bigInteger.TryFormat (destination, charsWritten, format, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" />
        <Parameter Name="charsWritten" Type="System.Int32" RefType="out" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="destination">To be added.</param>
        <param name="charsWritten">To be added.</param>
        <param name="format">To be added.</param>
        <param name="provider">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e4975-1736">嘗試將數字的字串表示轉換成其相等的 <see cref="T:System.Numerics.BigInteger" />，並傳回一個值表示轉換是否成功。</span><span class="sxs-lookup"><span data-stu-id="e4975-1736">Tries to convert the string representation of a number to its <see cref="T:System.Numerics.BigInteger" /> equivalent, and returns a value that indicates whether the conversion succeeded.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; value, out System.Numerics.BigInteger result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; value, [out] valuetype System.Numerics.BigInteger&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.TryParse(System.ReadOnlySpan{System.Char},System.Numerics.BigInteger@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (value As ReadOnlySpan(Of Char), ByRef result As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; value, [Runtime::InteropServices::Out] System::Numerics::BigInteger % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; *  -&gt; bool" Usage="System.Numerics.BigInteger.TryParse (value, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="result" Type="System.Numerics.BigInteger" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string value, out System.Numerics.BigInteger result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string value, [out] valuetype System.Numerics.BigInteger&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.TryParse(System.String,System.Numerics.BigInteger@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (value As String, ByRef result As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ value, [Runtime::InteropServices::Out] System::Numerics::BigInteger % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string *  -&gt; bool" Usage="System.Numerics.BigInteger.TryParse (value, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="result" Type="System.Numerics.BigInteger" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e4975-1737">數字的字串表示。</span><span class="sxs-lookup"><span data-stu-id="e4975-1737">The string representation of a number.</span></span></param>
        <param name="result"><span data-ttu-id="e4975-1738">當這個方法傳回時，如果轉換成功，則會包含相當於 <paramref name="value" /> 中所含之數字的 <see cref="T:System.Numerics.BigInteger" />；如果轉換失敗則為零 (0)。</span><span class="sxs-lookup"><span data-stu-id="e4975-1738">When this method returns, contains the <see cref="T:System.Numerics.BigInteger" /> equivalent to the number that is contained in <paramref name="value" />, or zero (0) if the conversion fails.</span></span> <span data-ttu-id="e4975-1739">轉換失敗的狀況包括：如果 <paramref name="value" /> 參數為 <see langword="null" /> 或不是正確的格式。</span><span class="sxs-lookup"><span data-stu-id="e4975-1739">The conversion fails if the <paramref name="value" /> parameter is <see langword="null" /> or is not of the correct format.</span></span> <span data-ttu-id="e4975-1740">這個參數會以未初始化的狀態傳遞。</span><span class="sxs-lookup"><span data-stu-id="e4975-1740">This parameter is passed uninitialized.</span></span></param>
        <summary><span data-ttu-id="e4975-1741">嘗試將數字的字串表示轉換成其相等的 <see cref="T:System.Numerics.BigInteger" />，並傳回一個值表示轉換是否成功。</span><span class="sxs-lookup"><span data-stu-id="e4975-1741">Tries to convert the string representation of a number to its <see cref="T:System.Numerics.BigInteger" /> equivalent, and returns a value that indicates whether the conversion succeeded.</span></span></summary>
        <returns><span data-ttu-id="e4975-1742">如果 <see langword="true" /> 轉換成功，則為 <paramref name="value" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-1742"><see langword="true" /> if <paramref name="value" /> was converted successfully; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-1743"><xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Numerics.BigInteger%40%29>方法就像<xref:System.Numerics.BigInteger.Parse%28System.String%29>方法，但是它不會擲回例外狀況如果轉換失敗。</span><span class="sxs-lookup"><span data-stu-id="e4975-1743">The <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Numerics.BigInteger%40%29> method is like the <xref:System.Numerics.BigInteger.Parse%28System.String%29> method, except that it does not throw an exception if the conversion fails.</span></span> <span data-ttu-id="e4975-1744">這個方法就不需要使用例外狀況處理來測試<xref:System.FormatException>如果`value`無效，無法成功剖析。</span><span class="sxs-lookup"><span data-stu-id="e4975-1744">This method eliminates the need to use exception handling to test for a <xref:System.FormatException> if `value` is invalid and cannot be successfully parsed.</span></span>  
  
 <span data-ttu-id="e4975-1745">`value`參數應該是以下列形式的十進位數字的字串表示：</span><span class="sxs-lookup"><span data-stu-id="e4975-1745">The `value` parameter should be the string representation of a decimal number in the following form:</span></span>  
  
 <span data-ttu-id="e4975-1746">[*ws*][*sign*]*digits*[*ws*]</span><span class="sxs-lookup"><span data-stu-id="e4975-1746">[*ws*][*sign*]*digits*[*ws*]</span></span>  
  
 <span data-ttu-id="e4975-1747">在方括號 ([ 和 ]) 中的項目是選擇性的項目。</span><span class="sxs-lookup"><span data-stu-id="e4975-1747">Elements in square brackets ([ and ]) are optional.</span></span> <span data-ttu-id="e4975-1748">下表說明每個元素。</span><span class="sxs-lookup"><span data-stu-id="e4975-1748">The following table describes each element.</span></span>  
  
|<span data-ttu-id="e4975-1749">元素</span><span class="sxs-lookup"><span data-stu-id="e4975-1749">Element</span></span>|<span data-ttu-id="e4975-1750">描述</span><span class="sxs-lookup"><span data-stu-id="e4975-1750">Description</span></span>|  
|-------------|-----------------|  
|<span data-ttu-id="e4975-1751">*ws*</span><span class="sxs-lookup"><span data-stu-id="e4975-1751">*ws*</span></span>|<span data-ttu-id="e4975-1752">選擇性的泛空白字元。</span><span class="sxs-lookup"><span data-stu-id="e4975-1752">Optional white space.</span></span>|  
|<span data-ttu-id="e4975-1753">*簽署*</span><span class="sxs-lookup"><span data-stu-id="e4975-1753">*sign*</span></span>|<span data-ttu-id="e4975-1754">選擇性正負號。</span><span class="sxs-lookup"><span data-stu-id="e4975-1754">An optional sign.</span></span> <span data-ttu-id="e4975-1755">有效的符號字元由<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=nameWithType>和<xref:System.Globalization.NumberFormatInfo.PositiveSign%2A?displayProperty=nameWithType>目前文化特性的屬性。</span><span class="sxs-lookup"><span data-stu-id="e4975-1755">Valid sign characters are determined by the <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=nameWithType> and <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A?displayProperty=nameWithType> properties of the current culture.</span></span>|  
|<span data-ttu-id="e4975-1756">*digits*</span><span class="sxs-lookup"><span data-stu-id="e4975-1756">*digits*</span></span>|<span data-ttu-id="e4975-1757">範圍從 0 到 9 的十進位數字的序列。</span><span class="sxs-lookup"><span data-stu-id="e4975-1757">A sequence of decimal digits ranging from 0 to 9.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="e4975-1758">所指定的字串`value`參數不能包含任何的群組分隔符號或小數分隔符號，而且它不能有小數部分。</span><span class="sxs-lookup"><span data-stu-id="e4975-1758">The string specified by the `value` parameter cannot contain any group separators or decimal separator, and it cannot have a decimal portion.</span></span>  
  
 <span data-ttu-id="e4975-1759">`value`參數會解譯使用<xref:System.Globalization.NumberStyles.Integer?displayProperty=nameWithType>樣式。</span><span class="sxs-lookup"><span data-stu-id="e4975-1759">The `value` parameter is interpreted by using the <xref:System.Globalization.NumberStyles.Integer?displayProperty=nameWithType> style.</span></span> <span data-ttu-id="e4975-1760">除了十進位數字，只允許前置和尾端空格取代前置正負號。</span><span class="sxs-lookup"><span data-stu-id="e4975-1760">In addition to the decimal digits, only leading and trailing spaces with a leading sign are allowed.</span></span> <span data-ttu-id="e4975-1761">明確地定義使用中會有特定文化特性格式資訊的樣式項目`value`，呼叫<xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29>方法。</span><span class="sxs-lookup"><span data-stu-id="e4975-1761">To explicitly define the style elements with the culture-specific formatting information that can be present in `value`, call the <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29> method.</span></span>  
  
 <span data-ttu-id="e4975-1762">`value`參數會剖析使用的格式設定資訊中<xref:System.Globalization.NumberFormatInfo>目前的文化特性的物件。</span><span class="sxs-lookup"><span data-stu-id="e4975-1762">The `value` parameter is parsed by using the formatting information in a <xref:System.Globalization.NumberFormatInfo> object for the current culture.</span></span> <span data-ttu-id="e4975-1763">如需詳細資訊，請參閱<xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="e4975-1763">For more information, see <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="e4975-1764">這個多載會解譯中的所有位數`value`參數做為十進位數字。</span><span class="sxs-lookup"><span data-stu-id="e4975-1764">This overload interprets all digits in the `value` parameter as decimal digits.</span></span> <span data-ttu-id="e4975-1765">若要剖析的十六進位數字的字串表示，呼叫<xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29>改為多載。</span><span class="sxs-lookup"><span data-stu-id="e4975-1765">To parse the string representation of a hexadecimal number, call the <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29> overload instead.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e4975-1766">下列範例會使用<xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Numerics.BigInteger%40%29>方法具現化兩個<xref:System.Numerics.BigInteger>物件。</span><span class="sxs-lookup"><span data-stu-id="e4975-1766">The following example uses the <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Numerics.BigInteger%40%29> method to instantiate two <xref:System.Numerics.BigInteger> objects.</span></span> <span data-ttu-id="e4975-1767">如果轉換成功，乘以另一個數字的每個物件，然後再呼叫<xref:System.Numerics.BigInteger.Compare%2A>方法，以判斷兩個物件之間的關聯性。</span><span class="sxs-lookup"><span data-stu-id="e4975-1767">If the conversions succeed, it multiplies each object by another number and then calls the <xref:System.Numerics.BigInteger.Compare%2A> method to determine the relationship between the two objects.</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.TryParse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.TryParse/cs/System.Numeric.BigInteger.TryParse.cs#1)]
 [!code-vb[System.Numeric.BigInteger.TryParse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.TryParse/vb/System.Numeric.BigInteger.TryParse.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e4975-1768"><paramref name="value" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-1768"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Numerics.BigInteger.ToString(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; value, System.Globalization.NumberStyles style, IFormatProvider provider, out System.Numerics.BigInteger result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; value, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider, [out] valuetype System.Numerics.BigInteger&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.Numerics.BigInteger@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (value As ReadOnlySpan(Of Char), style As NumberStyles, provider As IFormatProvider, ByRef result As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; value, System::Globalization::NumberStyles style, IFormatProvider ^ provider, [Runtime::InteropServices::Out] System::Numerics::BigInteger % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; * System.Globalization.NumberStyles * IFormatProvider *  -&gt; bool" Usage="System.Numerics.BigInteger.TryParse (value, style, provider, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="result" Type="System.Numerics.BigInteger" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="style">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string value, System.Globalization.NumberStyles style, IFormatProvider provider, out System.Numerics.BigInteger result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string value, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider, [out] valuetype System.Numerics.BigInteger&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Numerics.BigInteger@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (value As String, style As NumberStyles, provider As IFormatProvider, ByRef result As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ value, System::Globalization::NumberStyles style, IFormatProvider ^ provider, [Runtime::InteropServices::Out] System::Numerics::BigInteger % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string * System.Globalization.NumberStyles * IFormatProvider *  -&gt; bool" Usage="System.Numerics.BigInteger.TryParse (value, style, provider, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="result" Type="System.Numerics.BigInteger" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e4975-1769">數字的字串表示。</span><span class="sxs-lookup"><span data-stu-id="e4975-1769">The string representation of a number.</span></span> <span data-ttu-id="e4975-1770">這個字串使用 <paramref name="style" /> 指定的樣式來解譯。</span><span class="sxs-lookup"><span data-stu-id="e4975-1770">The string is interpreted using the style specified by <paramref name="style" />.</span></span></param>
        <param name="style"><span data-ttu-id="e4975-1771">列舉值的位元組合，表示 <paramref name="value" /> 中可以存在的樣式項目。</span><span class="sxs-lookup"><span data-stu-id="e4975-1771">A bitwise combination of enumeration values that indicates the style elements that can be present in <paramref name="value" />.</span></span> <span data-ttu-id="e4975-1772">一般會指定的值是 <see cref="F:System.Globalization.NumberStyles.Integer" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-1772">A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</span></span></param>
        <param name="provider"><span data-ttu-id="e4975-1773">物件，提供關於 <paramref name="value" /> 的特定文化特性格式資訊。</span><span class="sxs-lookup"><span data-stu-id="e4975-1773">An object that supplies culture-specific formatting information about <paramref name="value" />.</span></span></param>
        <param name="result"><span data-ttu-id="e4975-1774">當這個方法傳回時，如果轉換成功，則會包含相當於 <paramref name="value" /> 中所含之數字的 <see cref="T:System.Numerics.BigInteger" />；如果轉換失敗則為 <see cref="P:System.Numerics.BigInteger.Zero" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-1774">When this method returns, contains the <see cref="T:System.Numerics.BigInteger" /> equivalent to the number that is contained in <paramref name="value" />, or <see cref="P:System.Numerics.BigInteger.Zero" /> if the conversion failed.</span></span> <span data-ttu-id="e4975-1775">轉換失敗的狀況包括：如果 <paramref name="value" /> 參數為 <see langword="null" /> 或格式不符合 <paramref name="style" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-1775">The conversion fails if the <paramref name="value" /> parameter is <see langword="null" /> or is not in a format that is compliant with <paramref name="style" />.</span></span> <span data-ttu-id="e4975-1776">這個參數會以未初始化的狀態傳遞。</span><span class="sxs-lookup"><span data-stu-id="e4975-1776">This parameter is passed uninitialized.</span></span></param>
        <summary><span data-ttu-id="e4975-1777">使用指定的文化特性特定格式資訊和格式樣式，將日期和時間的指定字串表示轉換為其對等的 <see cref="T:System.Numerics.BigInteger" />，並傳回值，這個值表示轉換是否成功。</span><span class="sxs-lookup"><span data-stu-id="e4975-1777">Tries to convert the string representation of a number in a specified style and culture-specific format to its <see cref="T:System.Numerics.BigInteger" /> equivalent, and returns a value that indicates whether the conversion succeeded.</span></span></summary>
        <returns><span data-ttu-id="e4975-1778">如果 <see langword="true" /> 參數轉換成功，則為 <paramref name="value" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e4975-1778"><see langword="true" /> if the <paramref name="value" /> parameter was converted successfully; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-1779"><xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29>方法就像<xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29>方法，但是它不會擲回例外狀況如果轉換失敗。</span><span class="sxs-lookup"><span data-stu-id="e4975-1779">The <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29> method is like the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> method, except that it does not throw an exception if the conversion fails.</span></span> <span data-ttu-id="e4975-1780">這個方法就不需要使用例外狀況處理來測試<xref:System.FormatException>如果`value`無效，無法成功剖析。</span><span class="sxs-lookup"><span data-stu-id="e4975-1780">This method eliminates the need to use exception handling to test for a <xref:System.FormatException> if `value` is invalid and cannot be parsed successfully.</span></span>  
  
 <span data-ttu-id="e4975-1781">`style`參數定義中允許的樣式項目 （例如空格或正的或負號）`value`剖析作業成功的參數。</span><span class="sxs-lookup"><span data-stu-id="e4975-1781">The `style` parameter defines the style elements (such as white space or a positive or negative sign) that are allowed in the `value` parameter for the parse operation to succeed.</span></span> <span data-ttu-id="e4975-1782">它必須是從位元旗標的組合<xref:System.Globalization.NumberStyles>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="e4975-1782">It must be a combination of bit flags from the <xref:System.Globalization.NumberStyles> enumeration.</span></span> <span data-ttu-id="e4975-1783">值而定`style`，則`value`參數可能包括下列項目：</span><span class="sxs-lookup"><span data-stu-id="e4975-1783">Depending on the value of `style`, the `value` parameter may include the following elements:</span></span>  
  
 <span data-ttu-id="e4975-1784">[*ws*][*$*][*sign*][*digits*,]*digits*[.*fractional_digits*][E[*sign*]*exponential_digits*][*ws*]</span><span class="sxs-lookup"><span data-stu-id="e4975-1784">[*ws*][*$*][*sign*][*digits*,]*digits*[.*fractional_digits*][E[*sign*]*exponential_digits*][*ws*]</span></span>  
  
 <span data-ttu-id="e4975-1785">如果`style`參數包含<xref:System.Globalization.NumberStyles.AllowHexSpecifier>，則`value`參數可能包括下列項目：</span><span class="sxs-lookup"><span data-stu-id="e4975-1785">If the `style` parameter includes <xref:System.Globalization.NumberStyles.AllowHexSpecifier>, the `value` parameter may include the following elements:</span></span>  
  
 <span data-ttu-id="e4975-1786">[*ws*]*hexdigits*[*ws*]</span><span class="sxs-lookup"><span data-stu-id="e4975-1786">[*ws*]*hexdigits*[*ws*]</span></span>  
  
 <span data-ttu-id="e4975-1787">在方括號 ([ 和 ]) 中的項目是選擇性的項目。</span><span class="sxs-lookup"><span data-stu-id="e4975-1787">Elements in square brackets ([ and ]) are optional.</span></span> <span data-ttu-id="e4975-1788">下表說明每個元素。</span><span class="sxs-lookup"><span data-stu-id="e4975-1788">The following table describes each element.</span></span>  
  
|<span data-ttu-id="e4975-1789">元素</span><span class="sxs-lookup"><span data-stu-id="e4975-1789">Element</span></span>|<span data-ttu-id="e4975-1790">描述</span><span class="sxs-lookup"><span data-stu-id="e4975-1790">Description</span></span>|  
|-------------|-----------------|  
|<span data-ttu-id="e4975-1791">*ws*</span><span class="sxs-lookup"><span data-stu-id="e4975-1791">*ws*</span></span>|<span data-ttu-id="e4975-1792">選擇性的泛空白字元。</span><span class="sxs-lookup"><span data-stu-id="e4975-1792">Optional white space.</span></span> <span data-ttu-id="e4975-1793">空白字元可以出現在開頭`value`如果`style`包含<xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType>旗標，或在結尾`value`如果`style`包含<xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType>旗標。</span><span class="sxs-lookup"><span data-stu-id="e4975-1793">White space can appear at the start of `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> flag, or at the end of `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType> flag.</span></span>|  
|*$*|<span data-ttu-id="e4975-1794">特定文化特性的貨幣符號。</span><span class="sxs-lookup"><span data-stu-id="e4975-1794">A culture-specific currency symbol.</span></span> <span data-ttu-id="e4975-1795">在字串中的位置由定義<xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A>的屬性<xref:System.Globalization.NumberFormatInfo>所傳回的物件<xref:System.IFormatProvider.GetFormat%2A>方法`provider`參數。</span><span class="sxs-lookup"><span data-stu-id="e4975-1795">Its position in the string is defined by the <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A> property of the <xref:System.Globalization.NumberFormatInfo> object returned by the <xref:System.IFormatProvider.GetFormat%2A> method of the `provider` parameter.</span></span> <span data-ttu-id="e4975-1796">貨幣符號會出現在`value`如果`style`包含<xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType>旗標。</span><span class="sxs-lookup"><span data-stu-id="e4975-1796">The currency symbol can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="e4975-1797">*簽署*</span><span class="sxs-lookup"><span data-stu-id="e4975-1797">*sign*</span></span>|<span data-ttu-id="e4975-1798">選擇性正負號。</span><span class="sxs-lookup"><span data-stu-id="e4975-1798">An optional sign.</span></span> <span data-ttu-id="e4975-1799">符號可以出現在開頭`value`如果`style`包含<xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType>旗標，也可以顯示在結尾`value`如果`style`包含<xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType>旗標。</span><span class="sxs-lookup"><span data-stu-id="e4975-1799">The sign can appear at the start of `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType> flag, and it can appear at the end of `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="e4975-1800">可用於括號`value`表示負值`style`包含<xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType>旗標。</span><span class="sxs-lookup"><span data-stu-id="e4975-1800">Parentheses can be used in `value` to indicate a negative value if `style` includes the <xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="e4975-1801">*digits*</span><span class="sxs-lookup"><span data-stu-id="e4975-1801">*digits*</span></span>|<span data-ttu-id="e4975-1802">從 0 到 9 的數字序列。</span><span class="sxs-lookup"><span data-stu-id="e4975-1802">A sequence of digits from 0 through 9.</span></span>|  
|<span data-ttu-id="e4975-1803">*、*</span><span class="sxs-lookup"><span data-stu-id="e4975-1803">*,*</span></span>|<span data-ttu-id="e4975-1804">特定文化特性的群組分隔符號。</span><span class="sxs-lookup"><span data-stu-id="e4975-1804">A culture-specific group separator.</span></span> <span data-ttu-id="e4975-1805">指定的文化特性的群組分隔符號`provider`可以出現在`value`如果`style`包含<xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType>旗標。</span><span class="sxs-lookup"><span data-stu-id="e4975-1805">The group separator of the culture specified by `provider` can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="e4975-1806">*.*</span><span class="sxs-lookup"><span data-stu-id="e4975-1806">*.*</span></span>|<span data-ttu-id="e4975-1807">特定文化特性的貨幣符號。</span><span class="sxs-lookup"><span data-stu-id="e4975-1807">A culture-specific decimal point symbol.</span></span> <span data-ttu-id="e4975-1808">指定的文化特性的小數點符號`provider`可以出現在`value`如果`style`包含<xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType>旗標。</span><span class="sxs-lookup"><span data-stu-id="e4975-1808">The decimal point symbol of the culture specified by `provider` can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="e4975-1809">*fractional_digits*</span><span class="sxs-lookup"><span data-stu-id="e4975-1809">*fractional_digits*</span></span>|<span data-ttu-id="e4975-1810">數字 0 的一或多個項目。</span><span class="sxs-lookup"><span data-stu-id="e4975-1810">One or more occurrences of the digit 0.</span></span> <span data-ttu-id="e4975-1811">小數點後數字可以出現在`value`只有當`style`包含<xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType>旗標。</span><span class="sxs-lookup"><span data-stu-id="e4975-1811">Fractional digits can appear in `value` only if `style` includes the <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="e4975-1812">E</span><span class="sxs-lookup"><span data-stu-id="e4975-1812">E</span></span>|<span data-ttu-id="e4975-1813">"E"或者"E"字元，表示代表的值時，會以指數 （科學記號） 標記法。</span><span class="sxs-lookup"><span data-stu-id="e4975-1813">The "e" or "E" character, which indicates that the value is represented in exponential (scientific) notation.</span></span> <span data-ttu-id="e4975-1814">`value`參數可代表指數標記法之數字，如果`style`包含<xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType>旗標。</span><span class="sxs-lookup"><span data-stu-id="e4975-1814">The `value` parameter can represent a number in exponential notation if `style` includes the <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="e4975-1815">*exponential_digits*</span><span class="sxs-lookup"><span data-stu-id="e4975-1815">*exponential_digits*</span></span>|<span data-ttu-id="e4975-1816">從 0 到 9 的數字序列。</span><span class="sxs-lookup"><span data-stu-id="e4975-1816">A sequence of digits from 0 through 9.</span></span> <span data-ttu-id="e4975-1817">`value`參數可代表指數標記法之數字，如果`style`包含<xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType>旗標。</span><span class="sxs-lookup"><span data-stu-id="e4975-1817">The `value` parameter can represent a number in exponential notation if `style` includes the <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="e4975-1818">*hexdigits*</span><span class="sxs-lookup"><span data-stu-id="e4975-1818">*hexdigits*</span></span>|<span data-ttu-id="e4975-1819">一連串的從 0 到 f 或 0 到 f 的十六進位數字</span><span class="sxs-lookup"><span data-stu-id="e4975-1819">A sequence of hexadecimal digits from 0 through f, or 0 through F.</span></span>|  
  
> [!NOTE]
> <span data-ttu-id="e4975-1820">中的任何終止 NUL (u+0000) 字元`s`剖析作業中，不論值會忽略`style`引數。</span><span class="sxs-lookup"><span data-stu-id="e4975-1820">Any terminating NUL (U+0000) characters in `s` are ignored by the parsing operation, regardless of the value of the `style` argument.</span></span>

 <span data-ttu-id="e4975-1821">十進位數字的字串 (對應至<xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType>旗標) 一律會成功剖析。</span><span class="sxs-lookup"><span data-stu-id="e4975-1821">A string with decimal digits only (which corresponds to the <xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType> flag) always parses successfully.</span></span> <span data-ttu-id="e4975-1822">大部分的其餘<xref:System.Globalization.NumberStyles>成員控制可能存在，但不是一定要存在，在此輸入字串中的項目。</span><span class="sxs-lookup"><span data-stu-id="e4975-1822">Most of the remaining <xref:System.Globalization.NumberStyles> members control elements that may be present, but are not required to be present, in this input string.</span></span> <span data-ttu-id="e4975-1823">下表指出如何個別<xref:System.Globalization.NumberStyles>成員會影響可能會出現在項目`value`。</span><span class="sxs-lookup"><span data-stu-id="e4975-1823">The following table indicates how individual <xref:System.Globalization.NumberStyles> members affect the elements that may be present in `value`.</span></span>  
  
|<span data-ttu-id="e4975-1824">非複合`NumberStyles`值</span><span class="sxs-lookup"><span data-stu-id="e4975-1824">Non-composite `NumberStyles` values</span></span>|<span data-ttu-id="e4975-1825">除了數字的值中允許的項目</span><span class="sxs-lookup"><span data-stu-id="e4975-1825">Elements permitted in value in addition to digits</span></span>|  
|------------------------------------------|-------------------------------------------------------|  
|<xref:System.Globalization.NumberStyles.None>|<span data-ttu-id="e4975-1826">只有小數位數。</span><span class="sxs-lookup"><span data-stu-id="e4975-1826">Decimal digits only.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowDecimalPoint>|<span data-ttu-id="e4975-1827">小數點 (*。*) 和*fractional_digits*項目。</span><span class="sxs-lookup"><span data-stu-id="e4975-1827">The decimal point (*.*) and *fractional_digits* elements.</span></span> <span data-ttu-id="e4975-1828">不過， *fractional_digits*必須包含一個或多個 0 數字，或是這個方法會傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="e4975-1828">However, *fractional_digits* must consist of only one or more 0 digits, or the method returns `false`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowExponent>|<span data-ttu-id="e4975-1829">"E"或"E"字元，這表示指數標記法，連同*exponential_digits*。</span><span class="sxs-lookup"><span data-stu-id="e4975-1829">The "e" or "E" character, which indicates exponential notation, along with *exponential_digits*.</span></span> <span data-ttu-id="e4975-1830">如果`value`代表一個數字以指數標記法，它不能有非零的小數點後的元件。</span><span class="sxs-lookup"><span data-stu-id="e4975-1830">If `value` represents a number in exponential notation, it cannot have a non-zero, fractional component.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowLeadingWhite>|<span data-ttu-id="e4975-1831">*Ws*開頭的項目`value`。</span><span class="sxs-lookup"><span data-stu-id="e4975-1831">The *ws* element at the start of `value`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowTrailingWhite>|<span data-ttu-id="e4975-1832">*Ws*結尾的項目`value`。</span><span class="sxs-lookup"><span data-stu-id="e4975-1832">The *ws* element at the end of `value`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowLeadingSign>|<span data-ttu-id="e4975-1833">*號*項目之前*位數*。</span><span class="sxs-lookup"><span data-stu-id="e4975-1833">The *sign* element before *digits*.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowTrailingSign>|<span data-ttu-id="e4975-1834">*號*之後的項目*位數*。</span><span class="sxs-lookup"><span data-stu-id="e4975-1834">The *sign* element after *digits*.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowParentheses>|<span data-ttu-id="e4975-1835">*號*括號括住的數字值的形式的項目。</span><span class="sxs-lookup"><span data-stu-id="e4975-1835">The *sign* element in the form of parentheses enclosing the numeric value.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowThousands>|<span data-ttu-id="e4975-1836">群組分隔符號 (*，*) 項目。</span><span class="sxs-lookup"><span data-stu-id="e4975-1836">The group separator (*,*) element.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowCurrencySymbol>|<span data-ttu-id="e4975-1837">貨幣 (*$*) 項目。</span><span class="sxs-lookup"><span data-stu-id="e4975-1837">The currency (*$*) element.</span></span>|  
|<xref:System.Globalization.NumberStyles.Currency>|<span data-ttu-id="e4975-1838">所有項目。</span><span class="sxs-lookup"><span data-stu-id="e4975-1838">All elements.</span></span> <span data-ttu-id="e4975-1839">不過，`value`無法表示十六進位數字或指數標記法之數字。</span><span class="sxs-lookup"><span data-stu-id="e4975-1839">However, `value` cannot represent a hexadecimal number or a number in exponential notation.</span></span>|  
|<xref:System.Globalization.NumberStyles.Float>|<span data-ttu-id="e4975-1840">*Ws*開頭或結尾的項目`value`，*登*開頭`value`，並在小數點 (*。*) 符號。</span><span class="sxs-lookup"><span data-stu-id="e4975-1840">The *ws* element at the start or end of `value`, *sign* at the start of `value`, and the decimal point (*.*) symbol.</span></span> <span data-ttu-id="e4975-1841">`value`參數也可以使用指數標記法。</span><span class="sxs-lookup"><span data-stu-id="e4975-1841">The `value` parameter can also use exponential notation.</span></span>|  
|<xref:System.Globalization.NumberStyles.Number>|<span data-ttu-id="e4975-1842">*Ws*，*號*，群組分隔符號 (*，*)，和小數點 (*。*) 項目。</span><span class="sxs-lookup"><span data-stu-id="e4975-1842">The *ws*, *sign*, group separator (*,*), and decimal point (*.*) elements.</span></span>|  
|<xref:System.Globalization.NumberStyles.Any>|<span data-ttu-id="e4975-1843">所有項目。</span><span class="sxs-lookup"><span data-stu-id="e4975-1843">All elements.</span></span> <span data-ttu-id="e4975-1844">不過，`value`無法代表十六進位數字。</span><span class="sxs-lookup"><span data-stu-id="e4975-1844">However, `value` cannot represent a hexadecimal number.</span></span>|  
  
> [!IMPORTANT]
>  <span data-ttu-id="e4975-1845">如果您使用<xref:System.Numerics.BigInteger.TryParse%2A>方法，以往返的字串表示的<xref:System.Numerics.BigInteger>所輸出的值<xref:System.Numerics.BigInteger.ToString%2A>方法，您應該使用<xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=nameWithType>使用"R"格式規範，以產生的字串表示的方法<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1845">If you use the <xref:System.Numerics.BigInteger.TryParse%2A> method to round-trip the string representation of a <xref:System.Numerics.BigInteger> value that was output by the <xref:System.Numerics.BigInteger.ToString%2A> method, you should use the <xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=nameWithType> method with the "R" format specifier to generate the string representation of the <xref:System.Numerics.BigInteger> value.</span></span> <span data-ttu-id="e4975-1846">否則的字串表示法<xref:System.Numerics.BigInteger>會保留 50 的原始值和資料的最高有效位數時可能會遺失您使用僅<xref:System.Numerics.BigInteger.TryParse%2A>方法，以還原<xref:System.Numerics.BigInteger>值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1846">Otherwise, the string representation of the <xref:System.Numerics.BigInteger> preserves only the 50 most significant digits of the original value, and data may be lost when you use the <xref:System.Numerics.BigInteger.TryParse%2A> method to restore the <xref:System.Numerics.BigInteger> value.</span></span>  
  
 <span data-ttu-id="e4975-1847">如果<xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType>旗標用，`value`必須是十六進位的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1847">If the <xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType> flag is used, `value` must be a hexadecimal value.</span></span> <span data-ttu-id="e4975-1848">只有其他旗標可存在於`style`都<xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType>和<xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="e4975-1848">The only other flags that can be present in `style` are <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> and <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType>.</span></span> <span data-ttu-id="e4975-1849">(<xref:System.Globalization.NumberStyles>列舉型別有複合樣式， <xref:System.Globalization.NumberStyles.HexNumber>，其中包含這兩個空格旗標。)</span><span class="sxs-lookup"><span data-stu-id="e4975-1849">(The <xref:System.Globalization.NumberStyles> enumeration has a composite style, <xref:System.Globalization.NumberStyles.HexNumber>, that includes both white-space flags.)</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e4975-1850">如果`value`的字串表示法的十六進位數字，它無法加上任何裝飾 (例如`0x`或`&h`)，區隔其為十六進位的數字。</span><span class="sxs-lookup"><span data-stu-id="e4975-1850">If `value` is the string representation of a hexadecimal number, it cannot be preceded by any decoration (such as `0x` or `&h`) that differentiates it as a hexadecimal number.</span></span> <span data-ttu-id="e4975-1851">這會導致轉換失敗。</span><span class="sxs-lookup"><span data-stu-id="e4975-1851">This causes the conversion to fail.</span></span>  
  
 <span data-ttu-id="e4975-1852">如果`value`是十六進位字串，<xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29>方法會解譯`value`為負數儲存透過其前兩個十六進位數字是否大於或等於二補數表示`0x80`。</span><span class="sxs-lookup"><span data-stu-id="e4975-1852">If `value` is a hexadecimal string, the <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29> method interprets `value` as a negative number stored by using two's complement representation if its first two hexadecimal digits are greater than or equal to `0x80`.</span></span> <span data-ttu-id="e4975-1853">換句話說，此方法會解譯中的第一個位元組的最高序位位元`value`為正負號位元。</span><span class="sxs-lookup"><span data-stu-id="e4975-1853">In other words, the method interprets the highest-order bit of the first byte in `value` as the sign bit.</span></span> <span data-ttu-id="e4975-1854">若要確定為正數中的第一個數字會正確解譯為十六進位字串`value`必須具有值為零。</span><span class="sxs-lookup"><span data-stu-id="e4975-1854">To make sure that a hexadecimal string is correctly interpreted as a positive number, the first digit in `value` must have a value of zero.</span></span> <span data-ttu-id="e4975-1855">比方說，此方法會將解譯`0x80`為負數值，但它會解譯其中一個`0x080`或`0x0080`為正值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1855">For example, the method interprets `0x80` as a negative value, but it interprets either `0x080` or `0x0080` as a positive value.</span></span> <span data-ttu-id="e4975-1856">下列範例說明十六進位的字串代表負數和正數的值之間的差異。</span><span class="sxs-lookup"><span data-stu-id="e4975-1856">The following example illustrates the difference between hexadecimal strings that represent negative and positive values.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.TryParse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.TryParse/cs/TryParseHex1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.TryParse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.TryParse/vb/TryParseHex1.vb#1)]  
  
 <span data-ttu-id="e4975-1857">`provider`參數是<xref:System.IFormatProvider>實作。</span><span class="sxs-lookup"><span data-stu-id="e4975-1857">The `provider` parameter is an <xref:System.IFormatProvider> implementation.</span></span> <span data-ttu-id="e4975-1858">其<xref:System.IFormatProvider.GetFormat%2A>方法會傳回<xref:System.Globalization.NumberFormatInfo>物件，提供特定文化特性格式資訊`value`。</span><span class="sxs-lookup"><span data-stu-id="e4975-1858">Its <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific information about the format of `value`.</span></span> <span data-ttu-id="e4975-1859">`provider`參數可以是下列任一項：</span><span class="sxs-lookup"><span data-stu-id="e4975-1859">The `provider` parameter can be any one of the following:</span></span>  
  
-   <span data-ttu-id="e4975-1860">A<xref:System.Globalization.CultureInfo>物件，表示提供的格式資訊的文化特性。</span><span class="sxs-lookup"><span data-stu-id="e4975-1860">A <xref:System.Globalization.CultureInfo> object that represents the culture that supplies formatting information.</span></span> <span data-ttu-id="e4975-1861">其<xref:System.Globalization.CultureInfo.GetFormat%2A>方法會傳回<xref:System.Globalization.NumberFormatInfo>提供用於該文化特性的數值格式資訊的物件。</span><span class="sxs-lookup"><span data-stu-id="e4975-1861">Its <xref:System.Globalization.CultureInfo.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information for that culture.</span></span>  
  
-   <span data-ttu-id="e4975-1862">A<xref:System.Globalization.NumberFormatInfo>提供數值格式資訊的物件。</span><span class="sxs-lookup"><span data-stu-id="e4975-1862">A <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information.</span></span> <span data-ttu-id="e4975-1863">(其實作的<xref:System.Globalization.NumberFormatInfo.GetFormat%2A>只會傳回本身。)</span><span class="sxs-lookup"><span data-stu-id="e4975-1863">(Its implementation of <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> just returns itself.)</span></span>  
  
-   <span data-ttu-id="e4975-1864">自訂物件實作<xref:System.IFormatProvider>。</span><span class="sxs-lookup"><span data-stu-id="e4975-1864">A custom object that implements <xref:System.IFormatProvider>.</span></span> <span data-ttu-id="e4975-1865">其<xref:System.IFormatProvider.GetFormat%2A>方法具現化，並傳回<xref:System.Globalization.NumberFormatInfo>提供格式設定資訊的物件。</span><span class="sxs-lookup"><span data-stu-id="e4975-1865">Its <xref:System.IFormatProvider.GetFormat%2A> method instantiates and returns the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.</span></span>  
  
 <span data-ttu-id="e4975-1866">如果`provider`已`null`，則<xref:System.Globalization.NumberFormatInfo>物件會使用目前的文化特性。</span><span class="sxs-lookup"><span data-stu-id="e4975-1866">If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> object for the current culture is used.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e4975-1867">下列範例會呼叫<xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29>方法使用的值的各種組合`style`和`provider`參數。</span><span class="sxs-lookup"><span data-stu-id="e4975-1867">The following example makes some calls to the <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29> method using various combinations of values for the `style` and `provider` parameters.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.TryParse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.TryParse/cs/TryParse1.cs#2)]
 [!code-vb[System.Numerics.BigInteger.TryParse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.TryParse/vb/TryParse1.vb#2)]  
  
 <span data-ttu-id="e4975-1868">個別的呼叫數<xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29>方法傳遞執行個體的下列`BigIntegerFormatProvider`類別，定義為負號的波狀符號 （~）。</span><span class="sxs-lookup"><span data-stu-id="e4975-1868">A number of the individual calls to the <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29> method pass an instance of the following `BigIntegerFormatProvider` class, which defines a tilde (~) as the negative sign.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.TryParse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.TryParse/cs/TryParse1.cs#3)]
 [!code-vb[System.Numerics.BigInteger.TryParse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.TryParse/vb/TryParse1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e4975-1869"><paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1869"><paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.</span></span>  
  
<span data-ttu-id="e4975-1870">-或-</span><span class="sxs-lookup"><span data-stu-id="e4975-1870">-or-</span></span> 
 <span data-ttu-id="e4975-1871"><paramref name="style" /> 包含 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 或 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 旗標和其他值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1871"><paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> or <see cref="F:System.Globalization.NumberStyles.HexNumber" /> flag along with another value.</span></span></exception>
        <altmember cref="Overload:System.Numerics.BigInteger.ToString" />
      </Docs>
    </Member>
    <Member MemberName="TryWriteBytes">
      <MemberSignature Language="C#" Value="public bool TryWriteBytes (Span&lt;byte&gt; destination, out int bytesWritten, bool isUnsigned = false, bool isBigEndian = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryWriteBytes(valuetype System.Span`1&lt;unsigned int8&gt; destination, [out] int32&amp; bytesWritten, bool isUnsigned, bool isBigEndian) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.TryWriteBytes(System.Span{System.Byte},System.Int32@,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryWriteBytes (destination As Span(Of Byte), ByRef bytesWritten As Integer, Optional isUnsigned As Boolean = false, Optional isBigEndian As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryWriteBytes : Span&lt;byte&gt; *  * bool * bool -&gt; bool" Usage="bigInteger.TryWriteBytes (destination, bytesWritten, isUnsigned, isBigEndian)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" />
        <Parameter Name="isUnsigned" Type="System.Boolean" />
        <Parameter Name="isBigEndian" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="destination">To be added.</param>
        <param name="bytesWritten">To be added.</param>
        <param name="isUnsigned">To be added.</param>
        <param name="isBigEndian">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Zero">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Zero { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Numerics.BigInteger Zero" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.BigInteger.Zero" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Zero As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Numerics::BigInteger Zero { System::Numerics::BigInteger get(); };" />
      <MemberSignature Language="F#" Value="member this.Zero : System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.Zero" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e4975-1872">取得表示數字 0 (零) 的值。</span><span class="sxs-lookup"><span data-stu-id="e4975-1872">Gets a value that represents the number 0 (zero).</span></span></summary>
        <value><span data-ttu-id="e4975-1873">值為 0 (零) 的整數。</span><span class="sxs-lookup"><span data-stu-id="e4975-1873">An integer whose value is 0 (zero).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4975-1874"><xref:System.Numerics.BigInteger>這個屬性所傳回的物件提供用於指派和比較方便零值的來源。</span><span class="sxs-lookup"><span data-stu-id="e4975-1874">The <xref:System.Numerics.BigInteger> object returned by this property provides a convenient source of a zero value for use in assignments and comparisons.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Numerics.BigInteger.IsZero" />
      </Docs>
    </Member>
  </Members>
</Type>