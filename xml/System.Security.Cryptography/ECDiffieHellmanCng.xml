<Type Name="ECDiffieHellmanCng" FullName="System.Security.Cryptography.ECDiffieHellmanCng">
  <Metadata><Meta Name="ms.openlocfilehash" Value="389755fff34f179240e56cc3589128a3335be628" /><Meta Name="ms.sourcegitcommit" Value="756d085f27705e86604f1bba5f2086ee23761acf" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="01/30/2019" /><Meta Name="ms.locfileid" Value="55342491" /></Metadata><TypeSignature Language="C#" Value="public sealed class ECDiffieHellmanCng : System.Security.Cryptography.ECDiffieHellman" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ECDiffieHellmanCng extends System.Security.Cryptography.ECDiffieHellman" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.ECDiffieHellmanCng" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ECDiffieHellmanCng&#xA;Inherits ECDiffieHellman" />
  <TypeSignature Language="C++ CLI" Value="public ref class ECDiffieHellmanCng sealed : System::Security::Cryptography::ECDiffieHellman" />
  <TypeSignature Language="F#" Value="type ECDiffieHellmanCng = class&#xA;    inherit ECDiffieHellman" />
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Security.Cryptography.Cng</AssemblyName>
    <AssemblyVersion>4.3.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.Cryptography.ECDiffieHellman</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="8cd51-101">提供 Elliptic Curve Diffie-Hellman (ECDH) 演算法的 Cryptography Next Generation (CNG) 實作。</span><span class="sxs-lookup"><span data-stu-id="8cd51-101">Provides a Cryptography Next Generation (CNG) implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm.</span></span> <span data-ttu-id="8cd51-102">這個類別是用來執行密碼編譯作業。</span><span class="sxs-lookup"><span data-stu-id="8cd51-102">This class is used to perform cryptographic operations.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8cd51-103"><xref:System.Security.Cryptography.ECDiffieHellmanCng>類別可讓兩個合作對象，交換私人金鑰的內容，即使它們透過公用的通道進行通訊。</span><span class="sxs-lookup"><span data-stu-id="8cd51-103">The <xref:System.Security.Cryptography.ECDiffieHellmanCng> class enables two parties to exchange private key material even if they are communicating through a public channel.</span></span>  <span data-ttu-id="8cd51-104">這兩個合作對象可以計算相同的祕密值，指*密碼協議*managed Diffie Hellman 類別中。</span><span class="sxs-lookup"><span data-stu-id="8cd51-104">Both parties can calculate the same secret value, which is referred to as the *secret agreement* in the managed Diffie-Hellman classes.</span></span> <span data-ttu-id="8cd51-105">密碼協議可用的各種不同的用途，包括做為對稱金鑰。</span><span class="sxs-lookup"><span data-stu-id="8cd51-105">The secret agreement can then be used for a variety of purposes, including as a symmetric key.</span></span> <span data-ttu-id="8cd51-106">不過，而不是直接公開密碼協議<xref:System.Security.Cryptography.ECDiffieHellmanCng>類別會先提供值的協議後置處理。</span><span class="sxs-lookup"><span data-stu-id="8cd51-106">However, instead of exposing the secret agreement directly, the <xref:System.Security.Cryptography.ECDiffieHellmanCng> class does some post-processing on the agreement before providing the value.</span></span> <span data-ttu-id="8cd51-107">這個後置處理指*金鑰衍生函式 (KDF)*; 您可以選取您想要使用和 Diffie Hellman 物件的執行個體上設定它的參數，透過一組屬性的 KDF。</span><span class="sxs-lookup"><span data-stu-id="8cd51-107">This post processing is referred to as the *key derivation function (KDF)*; you can select which KDF you want to use and set its parameters through a set of properties on the instance of the Diffie-Hellman object.</span></span>  
  
|<span data-ttu-id="8cd51-108">金鑰衍生函式</span><span class="sxs-lookup"><span data-stu-id="8cd51-108">Key derivation function</span></span>|<span data-ttu-id="8cd51-109">屬性</span><span class="sxs-lookup"><span data-stu-id="8cd51-109">Properties</span></span>|  
|-----------------------------|----------------|  
|<xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash>|<span data-ttu-id="8cd51-110"><xref:System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm%2A> 用來處理密碼協議-雜湊演算法。</span><span class="sxs-lookup"><span data-stu-id="8cd51-110"><xref:System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm%2A> - The hash algorithm that is used to process the secret agreement.</span></span><br /><br /> <span data-ttu-id="8cd51-111"><xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend%2A> -若要在前面加上密碼協議之前進行雜湊選用的位元組陣列。</span><span class="sxs-lookup"><span data-stu-id="8cd51-111"><xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend%2A> - An optional byte array to prepend to the secret agreement before hashing it.</span></span><br /><br /> <span data-ttu-id="8cd51-112"><xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend%2A> -要附加至密碼協議之前進行雜湊選用的位元組陣列。</span><span class="sxs-lookup"><span data-stu-id="8cd51-112"><xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend%2A> - An optional byte array to append to the secret agreement before hashing it.</span></span>|  
|<xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac>|<span data-ttu-id="8cd51-113"><xref:System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm%2A> 用來處理密碼協議-雜湊演算法。</span><span class="sxs-lookup"><span data-stu-id="8cd51-113"><xref:System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm%2A> - The hash algorithm that is used to process the secret agreement.</span></span><br /><br /> <span data-ttu-id="8cd51-114"><xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend%2A>-若要在前面加上密碼協議之前進行雜湊選用的位元組陣列。</span><span class="sxs-lookup"><span data-stu-id="8cd51-114"><xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend%2A>- An optional byte array to prepend to the secret agreement before hashing it.</span></span><br /><br /> <span data-ttu-id="8cd51-115"><xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend%2A> -要附加至密碼協議之前進行雜湊選用的位元組陣列。</span><span class="sxs-lookup"><span data-stu-id="8cd51-115"><xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend%2A> - An optional byte array to append to the secret agreement before hashing it.</span></span>|  
|<xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls>|<span data-ttu-id="8cd51-116"><xref:System.Security.Cryptography.ECDiffieHellmanCng.Label%2A> -金鑰衍生標籤。</span><span class="sxs-lookup"><span data-stu-id="8cd51-116"><xref:System.Security.Cryptography.ECDiffieHellmanCng.Label%2A> - The label for key derivation.</span></span><br /><br /> <span data-ttu-id="8cd51-117"><xref:System.Security.Cryptography.ECDiffieHellmanCng.Seed%2A> 金鑰衍生-種子。</span><span class="sxs-lookup"><span data-stu-id="8cd51-117"><xref:System.Security.Cryptography.ECDiffieHellmanCng.Seed%2A> - The seed for key derivation.</span></span>|  
  
 <span data-ttu-id="8cd51-118">傳遞密碼協議，透過金鑰衍生函式的結果是可做為您的應用程式的金鑰內容的位元組陣列。</span><span class="sxs-lookup"><span data-stu-id="8cd51-118">The result of passing the secret agreement through the key derivation function is a byte array that may be used as key material for your application.</span></span> <span data-ttu-id="8cd51-119">產生的金鑰內容的位元組數目是取決於金鑰衍生函式;比方說，SHA-256 會產生 256 位元的金鑰材料，而 SHA-512 會產生 512 位元的金鑰材料。ECDH 金鑰交換的基本流程如下所示：</span><span class="sxs-lookup"><span data-stu-id="8cd51-119">The number of bytes of key material generated is dependent on the key derivation function; for example, SHA-256 will generate 256 bits of key material, whereas SHA-512 will generate 512 bits of key material.The basic flow of an ECDH key exchange is as follows:</span></span>  
  
1.  <span data-ttu-id="8cd51-120">Alice 和 Bob 建立 Diffie-hellman 金鑰交換作業来使用的金鑰組</span><span class="sxs-lookup"><span data-stu-id="8cd51-120">Alice and Bob create a key pair to use for the Diffie-Hellman key exchange operation</span></span>  
  
2.  <span data-ttu-id="8cd51-121">Alice 和 Bob 設定 KDF 上同意使用的參數。</span><span class="sxs-lookup"><span data-stu-id="8cd51-121">Alice and Bob configure the KDF using parameters the agree on.</span></span>  
  
3.  <span data-ttu-id="8cd51-122">Alice 在她的公開金鑰傳送 Bob。</span><span class="sxs-lookup"><span data-stu-id="8cd51-122">Alice sends Bob her public key.</span></span>  
  
4.  <span data-ttu-id="8cd51-123">Bob 在他的公開金鑰時，都會傳送 Alice。</span><span class="sxs-lookup"><span data-stu-id="8cd51-123">Bob sends Alice his public key.</span></span>  
  
5.  <span data-ttu-id="8cd51-124">Alice 和 Bob 使用彼此的公用金鑰來產生密碼協議，並套用 KDF 密碼協議來產生金鑰內容。</span><span class="sxs-lookup"><span data-stu-id="8cd51-124">Alice and Bob use each other's public keys to generate the secret agreement, and apply the KDF to the secret agreement to generate key material.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8cd51-125">下列範例示範如何使用<xref:System.Security.Cryptography.ECDiffieHellmanCng>類別來建立金鑰交換，以及如何使用該金鑰來加密的訊息，可以透過公用通道傳送，並由接收者解密。</span><span class="sxs-lookup"><span data-stu-id="8cd51-125">The following example shows how to use the <xref:System.Security.Cryptography.ECDiffieHellmanCng> class to establish a key exchange and how to use that key to encrypt a message that can be sent over a public channel and decrypted by the receiver.</span></span>  
  
 [!code-csharp[ECDiffieHellmanCng#1](~/samples/snippets/csharp/VS_Snippets_CLR/ecdiffiehellmancng/cs/program.cs#1)]
 [!code-vb[ECDiffieHellmanCng#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ecdiffiehellmancng/vb/program.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8cd51-126">初始化 <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="8cd51-126">Initializes a new instance of the <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ECDiffieHellmanCng ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ECDiffieHellmanCng();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Cng</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8cd51-127">使用隨機金鑰組，初始化 <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="8cd51-127">Initializes a new instance of the <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> class with a random key pair.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8cd51-128">隨機金鑰組具有預設公用 521 位元的金鑰長度。</span><span class="sxs-lookup"><span data-stu-id="8cd51-128">The random key pair has a default public key length of 521 bits.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ECDiffieHellmanCng (int keySize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 keySize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (keySize As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ECDiffieHellmanCng(int keySize);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.ECDiffieHellmanCng : int -&gt; System.Security.Cryptography.ECDiffieHellmanCng" Usage="new System.Security.Cryptography.ECDiffieHellmanCng keySize" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Cng</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.5;netframework-4.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="keySize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="keySize"><span data-ttu-id="8cd51-129">金鑰的大小。</span><span class="sxs-lookup"><span data-stu-id="8cd51-129">The size of the key.</span></span> <span data-ttu-id="8cd51-130">有效的金鑰大小為 256、384 和 521 位元。</span><span class="sxs-lookup"><span data-stu-id="8cd51-130">Valid key sizes are 256, 384, and 521 bits.</span></span></param>
        <summary><span data-ttu-id="8cd51-131">使用指定金鑰大小的隨機金鑰組，初始化 <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="8cd51-131">Initializes a new instance of the <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> class with a random key pair, using the specified key size.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8cd51-132">隨機金鑰組將具有所定義的公開金鑰長度`keySize`參數。</span><span class="sxs-lookup"><span data-stu-id="8cd51-132">The random key pair will have the public key length defined by the `keySize` parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8cd51-133"><paramref name="keySize" /> 指定了無效的長度。</span><span class="sxs-lookup"><span data-stu-id="8cd51-133"><paramref name="keySize" /> specifies an invalid length.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="8cd51-134">這個系統不支援新一代密碼編譯 (CNG) 類別。</span><span class="sxs-lookup"><span data-stu-id="8cd51-134">Cryptography Next Generation (CNG) classes are not supported on this system.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ECDiffieHellmanCng (System.Security.Cryptography.CngKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Security.Cryptography.CngKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.#ctor(System.Security.Cryptography.CngKey)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (key As CngKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ECDiffieHellmanCng(System::Security::Cryptography::CngKey ^ key);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.ECDiffieHellmanCng : System.Security.Cryptography.CngKey -&gt; System.Security.Cryptography.ECDiffieHellmanCng" Usage="new System.Security.Cryptography.ECDiffieHellmanCng key" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Cng</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.5;netframework-4.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="key" Type="System.Security.Cryptography.CngKey" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="8cd51-135">要用為目前物件所執行之密碼編譯作業的輸入的索引鍵。</span><span class="sxs-lookup"><span data-stu-id="8cd51-135">The key that will be used as input to the cryptographic operations performed by the current object.</span></span></param>
        <summary><span data-ttu-id="8cd51-136">使用指定的 <see cref="T:System.Security.Cryptography.CngKey" /> 物件，初始化 <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="8cd51-136">Initializes a new instance of the <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> class by using the specified <see cref="T:System.Security.Cryptography.CngKey" /> object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8cd51-137"><paramref name="key" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="8cd51-137"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8cd51-138"><paramref name="key" /> 不會指定 Elliptic Curve Diffie-Hellman (ECDH) 演算法群組。</span><span class="sxs-lookup"><span data-stu-id="8cd51-138"><paramref name="key" /> does not specify an Elliptic Curve Diffie-Hellman (ECDH) algorithm group.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="8cd51-139">這個系統不支援新一代密碼編譯 (CNG) 類別。</span><span class="sxs-lookup"><span data-stu-id="8cd51-139">Cryptography Next Generation (CNG) classes are not supported on this system.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ECDiffieHellmanCng (System.Security.Cryptography.ECCurve curve);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Security.Cryptography.ECCurve curve) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.#ctor(System.Security.Cryptography.ECCurve)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (curve As ECCurve)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ECDiffieHellmanCng(System::Security::Cryptography::ECCurve curve);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.ECDiffieHellmanCng : System.Security.Cryptography.ECCurve -&gt; System.Security.Cryptography.ECDiffieHellmanCng" Usage="new System.Security.Cryptography.ECDiffieHellmanCng curve" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Cng</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="curve" Type="System.Security.Cryptography.ECCurve" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-2.1;netcore-2.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="curve"><span data-ttu-id="8cd51-140">用來產生公開/私密金鑰組的曲線。</span><span class="sxs-lookup"><span data-stu-id="8cd51-140">The curve used to generate the public/private key pair.</span></span></param>
        <summary><span data-ttu-id="8cd51-141">建立 <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> 類別的新執行個體，其公開/私密金鑰組是在指定的曲線上所產生。</span><span class="sxs-lookup"><span data-stu-id="8cd51-141">Creates a new instance of the <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> class whose public/private key pair is generated over the specified curve.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8cd51-142">`curve` 必須驗證 (也就是它必須傳回`true`) 時傳遞至<xref:System.Security.Cryptography.ECCurve.Validate%2A?displayProperty=nameWithType>方法，而且必須是具名或明確的質數。</span><span class="sxs-lookup"><span data-stu-id="8cd51-142">`curve` must validate (that is, it must return `true`) when passed to the <xref:System.Security.Cryptography.ECCurve.Validate%2A?displayProperty=nameWithType> method and must be either a named or explicit prime.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="8cd51-143"><paramref name="curve" /> 不會驗證。</span><span class="sxs-lookup"><span data-stu-id="8cd51-143"><paramref name="curve" /> does not validate.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DeriveKeyFromHash">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8cd51-144">使用雜湊函式衍生可用來做為金鑰的位元組。</span><span class="sxs-lookup"><span data-stu-id="8cd51-144">Derives bytes that can be used as a key using a hash function .</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DeriveKeyFromHash">
      <MemberSignature Language="C#" Value="public override byte[] DeriveKeyFromHash (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, byte[] secretPrepend, byte[] secretAppend);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] DeriveKeyFromHash(class System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm, unsigned int8[] secretPrepend, unsigned int8[] secretAppend) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function DeriveKeyFromHash (otherPartyPublicKey As ECDiffieHellmanPublicKey, hashAlgorithm As HashAlgorithmName, secretPrepend As Byte(), secretAppend As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Byte&gt; ^ DeriveKeyFromHash(System::Security::Cryptography::ECDiffieHellmanPublicKey ^ otherPartyPublicKey, System::Security::Cryptography::HashAlgorithmName hashAlgorithm, cli::array &lt;System::Byte&gt; ^ secretPrepend, cli::array &lt;System::Byte&gt; ^ secretAppend);" />
      <MemberSignature Language="F#" Value="override this.DeriveKeyFromHash : System.Security.Cryptography.ECDiffieHellmanPublicKey * System.Security.Cryptography.HashAlgorithmName * byte[] * byte[] -&gt; byte[]" Usage="eCDiffieHellmanCng.DeriveKeyFromHash (otherPartyPublicKey, hashAlgorithm, secretPrepend, secretAppend)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Cng</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherPartyPublicKey" Type="System.Security.Cryptography.ECDiffieHellmanPublicKey" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-2.1;netcore-2.2;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-2.1;netcore-2.2;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="secretPrepend" Type="System.Byte[]" Index="2" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-2.1;netcore-2.2;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="secretAppend" Type="System.Byte[]" Index="3" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-2.1;netcore-2.2;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="otherPartyPublicKey"><span data-ttu-id="8cd51-145">另一方的公開金鑰。</span><span class="sxs-lookup"><span data-stu-id="8cd51-145">The other party's public key.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="8cd51-146">要用來衍生金鑰內容的雜湊演算法。</span><span class="sxs-lookup"><span data-stu-id="8cd51-146">The hash algorithm  to use to derive the key material.</span></span></param>
        <param name="secretPrepend"><span data-ttu-id="8cd51-147">雜湊之前要加在衍生密碼前面的值。</span><span class="sxs-lookup"><span data-stu-id="8cd51-147">A value to prepend to the derived secret before hashing.</span></span></param>
        <param name="secretAppend"><span data-ttu-id="8cd51-148">雜湊之前要附加至衍生密碼的值。</span><span class="sxs-lookup"><span data-stu-id="8cd51-148">A value to append to the derived secret before hashing.</span></span></param>
        <summary><span data-ttu-id="8cd51-149">使用雜湊函式衍生可用來做為金鑰的位元組，指定另一方的公開金鑰、雜湊演算法的名稱、前面加上的值及附加值。</span><span class="sxs-lookup"><span data-stu-id="8cd51-149">Derives bytes that can be used as a key using a hash function, given another party's public key, hash algorithm's name, a prepend value and an append value.</span></span></summary>
        <returns><span data-ttu-id="8cd51-150">金鑰的金鑰內容會與另一方公開金鑰交換。</span><span class="sxs-lookup"><span data-stu-id="8cd51-150">The key material from the key exchange with the other party's public key.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8cd51-151">如果值`secretPrepend`或是`secretAppend`是`null`，它們會被視為是空陣列。</span><span class="sxs-lookup"><span data-stu-id="8cd51-151">If the value of `secretPrepend` or `secretAppend` is `null`, they are treated as empty arrays.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8cd51-152"><paramref name="otherPartyPublicKey" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="8cd51-152"><paramref name="otherPartyPublicKey" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8cd51-153"><paramref name="otherPartyPublicKey" /> 不是 ECDH 金鑰，或其大小不正確。</span><span class="sxs-lookup"><span data-stu-id="8cd51-153"><paramref name="otherPartyPublicKey" /> is not an ECDH key, or it is not the correct size.</span></span>  
  
<span data-ttu-id="8cd51-154">-或-</span><span class="sxs-lookup"><span data-stu-id="8cd51-154">-or-</span></span> 
 <span data-ttu-id="8cd51-155"><paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /></span><span class="sxs-lookup"><span data-stu-id="8cd51-155"><paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /></span></span> <span data-ttu-id="8cd51-156">為 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="8cd51-156">is <see langword="null" /> or <see cref="F:System.String.Empty" />.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="8cd51-157">所有其他錯誤。</span><span class="sxs-lookup"><span data-stu-id="8cd51-157">All other errors.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DeriveKeyFromHmac">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8cd51-158">使用雜湊式訊息驗證碼 (HMAC) 衍生可用來做為金鑰的位元組。</span><span class="sxs-lookup"><span data-stu-id="8cd51-158">Derives bytes that can be used as a key using a Hash-based Message Authentication Code (HMAC).</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DeriveKeyFromHmac">
      <MemberSignature Language="C#" Value="public override byte[] DeriveKeyFromHmac (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, byte[] hmacKey, byte[] secretPrepend, byte[] secretAppend);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] DeriveKeyFromHmac(class System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm, unsigned int8[] hmacKey, unsigned int8[] secretPrepend, unsigned int8[] secretAppend) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[],System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function DeriveKeyFromHmac (otherPartyPublicKey As ECDiffieHellmanPublicKey, hashAlgorithm As HashAlgorithmName, hmacKey As Byte(), secretPrepend As Byte(), secretAppend As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Byte&gt; ^ DeriveKeyFromHmac(System::Security::Cryptography::ECDiffieHellmanPublicKey ^ otherPartyPublicKey, System::Security::Cryptography::HashAlgorithmName hashAlgorithm, cli::array &lt;System::Byte&gt; ^ hmacKey, cli::array &lt;System::Byte&gt; ^ secretPrepend, cli::array &lt;System::Byte&gt; ^ secretAppend);" />
      <MemberSignature Language="F#" Value="override this.DeriveKeyFromHmac : System.Security.Cryptography.ECDiffieHellmanPublicKey * System.Security.Cryptography.HashAlgorithmName * byte[] * byte[] * byte[] -&gt; byte[]" Usage="eCDiffieHellmanCng.DeriveKeyFromHmac (otherPartyPublicKey, hashAlgorithm, hmacKey, secretPrepend, secretAppend)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Cng</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherPartyPublicKey" Type="System.Security.Cryptography.ECDiffieHellmanPublicKey" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-2.1;netcore-2.2;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-2.1;netcore-2.2;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="hmacKey" Type="System.Byte[]" Index="2" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-2.1;netcore-2.2;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="secretPrepend" Type="System.Byte[]" Index="3" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-2.1;netcore-2.2;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="secretAppend" Type="System.Byte[]" Index="4" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-2.1;netcore-2.2;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="otherPartyPublicKey"><span data-ttu-id="8cd51-159">另一方的公開金鑰。</span><span class="sxs-lookup"><span data-stu-id="8cd51-159">The other party's public key.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="8cd51-160">要用來衍生金鑰內容的雜湊演算法。</span><span class="sxs-lookup"><span data-stu-id="8cd51-160">The hash algorithm to use to derive the key material.</span></span></param>
        <param name="hmacKey"><span data-ttu-id="8cd51-161">HMAC 的金鑰。</span><span class="sxs-lookup"><span data-stu-id="8cd51-161">The key for the HMAC.</span></span></param>
        <param name="secretPrepend"><span data-ttu-id="8cd51-162">雜湊之前要加在衍生密碼前面的值。</span><span class="sxs-lookup"><span data-stu-id="8cd51-162">A value to prepend to the derived secret before hashing.</span></span></param>
        <param name="secretAppend"><span data-ttu-id="8cd51-163">雜湊之前要附加至衍生密碼的值。</span><span class="sxs-lookup"><span data-stu-id="8cd51-163">A value to append to the derived secret before hashing.</span></span></param>
        <summary><span data-ttu-id="8cd51-164">使用雜湊式訊息驗證碼 (HMAC) 衍生可用來做為金鑰的位元組。</span><span class="sxs-lookup"><span data-stu-id="8cd51-164">Derives bytes that can be used as a key using a Hash-based Message Authentication Code (HMAC).</span></span></summary>
        <returns><span data-ttu-id="8cd51-165">金鑰的金鑰內容會與另一方公開金鑰交換。</span><span class="sxs-lookup"><span data-stu-id="8cd51-165">The key material from the key exchange with the other party's public key.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8cd51-166">如果值`secretPrepend`或是`secretAppend`是`null`，它們會被視為是空陣列。</span><span class="sxs-lookup"><span data-stu-id="8cd51-166">If the value of `secretPrepend` or `secretAppend` is `null`, they are treated as empty arrays.</span></span> <span data-ttu-id="8cd51-167">如果值`hmacKey`是`null`，Elliptic Curve Diffie-hellman (ECDH) 演算法的結果將用於做為 HMAC 金鑰。</span><span class="sxs-lookup"><span data-stu-id="8cd51-167">If the value of `hmacKey` is `null`, the result of the Elliptic Curve Diffie-Hellman (ECDH) algorithm will be used as the HMAC key.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8cd51-168"><paramref name="otherPartyPublicKey" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="8cd51-168"><paramref name="otherPartyPublicKey" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8cd51-169"><paramref name="otherPartyPublicKey" /> 不是 ECDH 金鑰，或其大小不正確。</span><span class="sxs-lookup"><span data-stu-id="8cd51-169"><paramref name="otherPartyPublicKey" /> is not an ECDH key, or it is not the correct size.</span></span>  
  
<span data-ttu-id="8cd51-170">-或-</span><span class="sxs-lookup"><span data-stu-id="8cd51-170">-or-</span></span> 
 <span data-ttu-id="8cd51-171"><paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /></span><span class="sxs-lookup"><span data-stu-id="8cd51-171"><paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /></span></span> <span data-ttu-id="8cd51-172">為 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="8cd51-172">is <see langword="null" /> or <see cref="F:System.String.Empty" />.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="8cd51-173">所有其他錯誤。</span><span class="sxs-lookup"><span data-stu-id="8cd51-173">All other errors.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DeriveKeyMaterial">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8cd51-174">衍生金鑰內容，該內容產生自雙方的密碼協議。</span><span class="sxs-lookup"><span data-stu-id="8cd51-174">Derives the key material that is generated from the secret agreement between two parties.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8cd51-175">Elliptic Curve Diffie-hellman (ECDH) 演算法可接受的私用金鑰和其他一方的公開金鑰，做為輸入，並會產生密碼協議做為輸出。</span><span class="sxs-lookup"><span data-stu-id="8cd51-175">The Elliptic Curve Diffie-Hellman (ECDH) algorithm accepts the private key and the other party's public key as input, and produces the secret agreement as output.</span></span> <span data-ttu-id="8cd51-176">金鑰衍生函式 (KDF) 再接受密碼協議，並產生金鑰內容，做為輸出。</span><span class="sxs-lookup"><span data-stu-id="8cd51-176">The key derivation function (KDF) then takes the secret agreement and produces the key material as output.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="DeriveKeyMaterial">
      <MemberSignature Language="C#" Value="public byte[] DeriveKeyMaterial (System.Security.Cryptography.CngKey otherPartyPublicKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] DeriveKeyMaterial(class System.Security.Cryptography.CngKey otherPartyPublicKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyMaterial(System.Security.Cryptography.CngKey)" />
      <MemberSignature Language="VB.NET" Value="Public Function DeriveKeyMaterial (otherPartyPublicKey As CngKey) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ DeriveKeyMaterial(System::Security::Cryptography::CngKey ^ otherPartyPublicKey);" />
      <MemberSignature Language="F#" Value="override this.DeriveKeyMaterial : System.Security.Cryptography.CngKey -&gt; byte[]" Usage="eCDiffieHellmanCng.DeriveKeyMaterial otherPartyPublicKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Cng</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.5;netframework-4.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherPartyPublicKey" Type="System.Security.Cryptography.CngKey" />
      </Parameters>
      <Docs>
        <param name="otherPartyPublicKey"><span data-ttu-id="8cd51-177">物件，該物件包含金鑰交換中，另一方 Elliptic Curve Diffie-Hellman (ECDH) 金鑰的公開部分。</span><span class="sxs-lookup"><span data-stu-id="8cd51-177">An object that contains the public part of the Elliptic Curve Diffie-Hellman (ECDH) key from the other party in the key exchange.</span></span></param>
        <summary><span data-ttu-id="8cd51-178">衍生金鑰內容，該內容產生自雙方的密碼協議 (如果 <see cref="T:System.Security.Cryptography.CngKey" /> 物件包含另一方的公開金鑰)。</span><span class="sxs-lookup"><span data-stu-id="8cd51-178">Derives the key material that is generated from the secret agreement between two parties, given a <see cref="T:System.Security.Cryptography.CngKey" /> object that contains the second party's public key.</span></span></summary>
        <returns><span data-ttu-id="8cd51-179">包含金鑰內容的位元組陣列。</span><span class="sxs-lookup"><span data-stu-id="8cd51-179">A byte array that contains the key material.</span></span> <span data-ttu-id="8cd51-180">這項資訊產生自密碼協議，該協議是從目前物件的私密金鑰和指定的公開金鑰計算而得。</span><span class="sxs-lookup"><span data-stu-id="8cd51-180">This information is generated from the secret agreement that is calculated from the current object's private key and the specified public key.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8cd51-181"><paramref name="otherPartyPublicKey" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="8cd51-181"><paramref name="otherPartyPublicKey" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8cd51-182"><paramref name="otherPartyPublicKey" /> 無效。</span><span class="sxs-lookup"><span data-stu-id="8cd51-182"><paramref name="otherPartyPublicKey" /> is invalid.</span></span> <span data-ttu-id="8cd51-183">可能是其 <see cref="P:System.Security.Cryptography.CngKey.AlgorithmGroup" /> 屬性未指定 <see cref="P:System.Security.Cryptography.CngAlgorithmGroup.ECDiffieHellman" />，或其金鑰大小與這個執行個體的金鑰大小不相符。</span><span class="sxs-lookup"><span data-stu-id="8cd51-183">Either its <see cref="P:System.Security.Cryptography.CngKey.AlgorithmGroup" /> property does not specify <see cref="P:System.Security.Cryptography.CngAlgorithmGroup.ECDiffieHellman" /> or its key size does not match the key size of this instance.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8cd51-184">這個物件的 <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction" /> 屬性會指定 <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls" /> 金鑰衍生函數，但是 <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.Label" /> 或 <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.Seed" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="8cd51-184">This object's <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction" /> property specifies the <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls" /> key derivation function, but either <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.Label" /> or <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.Seed" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="8cd51-185">所有其他錯誤。</span><span class="sxs-lookup"><span data-stu-id="8cd51-185">All other errors.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DeriveKeyMaterial">
      <MemberSignature Language="C#" Value="public override byte[] DeriveKeyMaterial (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] DeriveKeyMaterial(class System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyMaterial(System.Security.Cryptography.ECDiffieHellmanPublicKey)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function DeriveKeyMaterial (otherPartyPublicKey As ECDiffieHellmanPublicKey) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Byte&gt; ^ DeriveKeyMaterial(System::Security::Cryptography::ECDiffieHellmanPublicKey ^ otherPartyPublicKey);" />
      <MemberSignature Language="F#" Value="override this.DeriveKeyMaterial : System.Security.Cryptography.ECDiffieHellmanPublicKey -&gt; byte[]" Usage="eCDiffieHellmanCng.DeriveKeyMaterial otherPartyPublicKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Cng</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherPartyPublicKey" Type="System.Security.Cryptography.ECDiffieHellmanPublicKey" />
      </Parameters>
      <Docs>
        <param name="otherPartyPublicKey"><span data-ttu-id="8cd51-186">來自金鑰交換中另一方的公開金鑰。</span><span class="sxs-lookup"><span data-stu-id="8cd51-186">The public key from the other party in the key exchange.</span></span></param>
        <summary><span data-ttu-id="8cd51-187">衍生金鑰內容，該內容產生自雙方的密碼協議 (如果 <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> 物件包含另一方的公開金鑰)。</span><span class="sxs-lookup"><span data-stu-id="8cd51-187">Derives the key material that is generated from the secret agreement between two parties, given an <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> object that contains the second party's public key.</span></span></summary>
        <returns><span data-ttu-id="8cd51-188">包含金鑰內容的位元組陣列。</span><span class="sxs-lookup"><span data-stu-id="8cd51-188">A byte array that contains the key material.</span></span> <span data-ttu-id="8cd51-189">這項資訊產生自密碼協議，該協議是從目前物件的私密金鑰和指定的公開金鑰計算而得。</span><span class="sxs-lookup"><span data-stu-id="8cd51-189">This information is generated from the secret agreement that is calculated from the current object's private key and the specified public key.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8cd51-190"><paramref name="otherPartyPublicKey" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="8cd51-190"><paramref name="otherPartyPublicKey" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8cd51-191"><paramref name="otherPartyPublicKey" /> 不是 <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" /> 金鑰。</span><span class="sxs-lookup"><span data-stu-id="8cd51-191"><paramref name="otherPartyPublicKey" /> is not an <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" /> key.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DeriveKeyTls">
      <MemberSignature Language="C#" Value="public override byte[] DeriveKeyTls (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, byte[] prfLabel, byte[] prfSeed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] DeriveKeyTls(class System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, unsigned int8[] prfLabel, unsigned int8[] prfSeed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyTls(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Byte[],System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function DeriveKeyTls (otherPartyPublicKey As ECDiffieHellmanPublicKey, prfLabel As Byte(), prfSeed As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Byte&gt; ^ DeriveKeyTls(System::Security::Cryptography::ECDiffieHellmanPublicKey ^ otherPartyPublicKey, cli::array &lt;System::Byte&gt; ^ prfLabel, cli::array &lt;System::Byte&gt; ^ prfSeed);" />
      <MemberSignature Language="F#" Value="override this.DeriveKeyTls : System.Security.Cryptography.ECDiffieHellmanPublicKey * byte[] * byte[] -&gt; byte[]" Usage="eCDiffieHellmanCng.DeriveKeyTls (otherPartyPublicKey, prfLabel, prfSeed)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Cng</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherPartyPublicKey" Type="System.Security.Cryptography.ECDiffieHellmanPublicKey" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-2.1;netcore-2.2;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="prfLabel" Type="System.Byte[]" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-2.1;netcore-2.2;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="prfSeed" Type="System.Byte[]" Index="2" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-2.1;netcore-2.2;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="otherPartyPublicKey"><span data-ttu-id="8cd51-192">另一方的公開金鑰。</span><span class="sxs-lookup"><span data-stu-id="8cd51-192">The other party's public key.</span></span></param>
        <param name="prfLabel"><span data-ttu-id="8cd51-193">ASCII 編碼的 PRF 標籤。</span><span class="sxs-lookup"><span data-stu-id="8cd51-193">The ASCII-encoded PRF label.</span></span></param>
        <param name="prfSeed"><span data-ttu-id="8cd51-194">64 位元組的 PRF 種子。</span><span class="sxs-lookup"><span data-stu-id="8cd51-194">The 64-byte PRF seed.</span></span></param>
        <summary><span data-ttu-id="8cd51-195">使用傳輸層安全性 (TLS) 似隨機函式 (PRF) 衍生演算法，衍生可用來做為金鑰的位元組。</span><span class="sxs-lookup"><span data-stu-id="8cd51-195">Derives bytes that can be used as a key using a Transport Layer Security (TLS) Pseudo-Random Function (PRF) derivation algorithm.</span></span></summary>
        <returns><span data-ttu-id="8cd51-196">金鑰的金鑰內容會與另一方公開金鑰交換。</span><span class="sxs-lookup"><span data-stu-id="8cd51-196">The key material from the key exchange with the other party's public key.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8cd51-197"><paramref name="otherPartyPublicKey" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="8cd51-197"><paramref name="otherPartyPublicKey" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="8cd51-198">-或-</span><span class="sxs-lookup"><span data-stu-id="8cd51-198">-or-</span></span> 
 <span data-ttu-id="8cd51-199"><paramref name="prfLabel" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="8cd51-199"><paramref name="prfLabel" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="8cd51-200">-或-</span><span class="sxs-lookup"><span data-stu-id="8cd51-200">-or-</span></span> 
 <span data-ttu-id="8cd51-201"><paramref name="prfSeed" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="8cd51-201"><paramref name="prfSeed" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8cd51-202"><paramref name="otherPartyPublicKey" /> 不是 ECDH 金鑰，或其大小不正確。</span><span class="sxs-lookup"><span data-stu-id="8cd51-202"><paramref name="otherPartyPublicKey" /> is not an ECDH key, or it is not the correct size.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="8cd51-203"><paramref name="prfSeed" /> 的長度不是正好 64 位元組。</span><span class="sxs-lookup"><span data-stu-id="8cd51-203"><paramref name="prfSeed" /> is not exactly 64 bytes in length.</span></span>  
  
<span data-ttu-id="8cd51-204">-或-</span><span class="sxs-lookup"><span data-stu-id="8cd51-204">-or-</span></span> 
<span data-ttu-id="8cd51-205">所有其他密碼編譯錯誤。</span><span class="sxs-lookup"><span data-stu-id="8cd51-205">All other cryptographic errors.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DeriveSecretAgreementHandle">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8cd51-206">取得雙方所產生密碼協議的控制代碼。</span><span class="sxs-lookup"><span data-stu-id="8cd51-206">Gets a handle to the secret agreement generated between two parties.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8cd51-207"><xref:System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle%2A>方法多載是針對需要原始密碼協議，而不是將金鑰內容的控制代碼的進階使用者。</span><span class="sxs-lookup"><span data-stu-id="8cd51-207">The <xref:System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle%2A> method overloads are for advanced users who need a handle to the raw secret agreement instead of the key material.</span></span> <span data-ttu-id="8cd51-208">密碼協議的控制代碼可用於平台叫用呼叫的工作，不會由包裝<xref:System.Security.Cryptography.ECDiffieHellmanCng>類別。</span><span class="sxs-lookup"><span data-stu-id="8cd51-208">The secret agreement handle can be used in platform invoke calls to perform any work that is not wrapped by the <xref:System.Security.Cryptography.ECDiffieHellmanCng> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="DeriveSecretAgreementHandle">
      <MemberSignature Language="C#" Value="public Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle DeriveSecretAgreementHandle (System.Security.Cryptography.CngKey otherPartyPublicKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle DeriveSecretAgreementHandle(class System.Security.Cryptography.CngKey otherPartyPublicKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle(System.Security.Cryptography.CngKey)" />
      <MemberSignature Language="VB.NET" Value="Public Function DeriveSecretAgreementHandle (otherPartyPublicKey As CngKey) As SafeNCryptSecretHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Win32::SafeHandles::SafeNCryptSecretHandle ^ DeriveSecretAgreementHandle(System::Security::Cryptography::CngKey ^ otherPartyPublicKey);" />
      <MemberSignature Language="F#" Value="member this.DeriveSecretAgreementHandle : System.Security.Cryptography.CngKey -&gt; Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle" Usage="eCDiffieHellmanCng.DeriveSecretAgreementHandle otherPartyPublicKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Cng</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherPartyPublicKey" Type="System.Security.Cryptography.CngKey" />
      </Parameters>
      <Docs>
        <param name="otherPartyPublicKey"><span data-ttu-id="8cd51-209">物件，該物件包含金鑰交換中，另一方 Elliptic Curve Diffie-Hellman (ECDH) 金鑰的公開部分。</span><span class="sxs-lookup"><span data-stu-id="8cd51-209">An object that contains the public part of the Elliptic Curve Diffie-Hellman (ECDH) key from the other party in the key exchange.</span></span></param>
        <summary><span data-ttu-id="8cd51-210">取得雙方所產生密碼協議的控制代碼 (如果 <see cref="T:System.Security.Cryptography.CngKey" /> 物件包含另一方的公開金鑰)。</span><span class="sxs-lookup"><span data-stu-id="8cd51-210">Gets a handle to the secret agreement generated between two parties, given a <see cref="T:System.Security.Cryptography.CngKey" /> object that contains the second party's public key.</span></span></summary>
        <returns><span data-ttu-id="8cd51-211">密碼協議的控制代碼。</span><span class="sxs-lookup"><span data-stu-id="8cd51-211">A handle to the secret agreement.</span></span> <span data-ttu-id="8cd51-212">這項資訊是從目前物件的私密金鑰和指定的公開金鑰計算而得。</span><span class="sxs-lookup"><span data-stu-id="8cd51-212">This information is calculated from the current object's private key and the specified public key.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8cd51-213"><paramref name="otherPartyPublicKey" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="8cd51-213"><paramref name="otherPartyPublicKey" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8cd51-214"><paramref name="otherPartyPublicKey" /> 不是 ECDH 金鑰，或其大小不正確。</span><span class="sxs-lookup"><span data-stu-id="8cd51-214"><paramref name="otherPartyPublicKey" /> is not an ECDH key, or it is not the correct size.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="8cd51-215">所有其他錯誤。</span><span class="sxs-lookup"><span data-stu-id="8cd51-215">All other errors.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="8cd51-216">呼叫 unmanaged 程式碼的權限。</span><span class="sxs-lookup"><span data-stu-id="8cd51-216">for permission to call unmanaged code.</span></span> <span data-ttu-id="8cd51-217">要求值： <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />。</span><span class="sxs-lookup"><span data-stu-id="8cd51-217">Demand value: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span></span> <span data-ttu-id="8cd51-218">相關聯的列舉型別： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="8cd51-218">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="DeriveSecretAgreementHandle">
      <MemberSignature Language="C#" Value="public Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle DeriveSecretAgreementHandle (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle DeriveSecretAgreementHandle(class System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle(System.Security.Cryptography.ECDiffieHellmanPublicKey)" />
      <MemberSignature Language="VB.NET" Value="Public Function DeriveSecretAgreementHandle (otherPartyPublicKey As ECDiffieHellmanPublicKey) As SafeNCryptSecretHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Win32::SafeHandles::SafeNCryptSecretHandle ^ DeriveSecretAgreementHandle(System::Security::Cryptography::ECDiffieHellmanPublicKey ^ otherPartyPublicKey);" />
      <MemberSignature Language="F#" Value="member this.DeriveSecretAgreementHandle : System.Security.Cryptography.ECDiffieHellmanPublicKey -&gt; Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle" Usage="eCDiffieHellmanCng.DeriveSecretAgreementHandle otherPartyPublicKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Cng</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherPartyPublicKey" Type="System.Security.Cryptography.ECDiffieHellmanPublicKey" />
      </Parameters>
      <Docs>
        <param name="otherPartyPublicKey"><span data-ttu-id="8cd51-219">來自金鑰交換中另一方的公開金鑰。</span><span class="sxs-lookup"><span data-stu-id="8cd51-219">The public key from the other party in the key exchange.</span></span></param>
        <summary><span data-ttu-id="8cd51-220">取得雙方所產生密碼協議的控制代碼 (如果 <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> 物件包含另一方的公開金鑰)。</span><span class="sxs-lookup"><span data-stu-id="8cd51-220">Gets a handle to the secret agreement generated between two parties, given an <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> object that contains the second party's public key.</span></span></summary>
        <returns><span data-ttu-id="8cd51-221">密碼協議的控制代碼。</span><span class="sxs-lookup"><span data-stu-id="8cd51-221">A handle to the secret agreement.</span></span> <span data-ttu-id="8cd51-222">這項資訊是從目前物件的私密金鑰和指定的公開金鑰計算而得。</span><span class="sxs-lookup"><span data-stu-id="8cd51-222">This information is calculated from the current object's private key and the specified public key.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8cd51-223"><paramref name="otherPartyPublicKey" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="8cd51-223"><paramref name="otherPartyPublicKey" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8cd51-224"><paramref name="otherPartyPublicKey" /> 不是 <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> 金鑰。</span><span class="sxs-lookup"><span data-stu-id="8cd51-224"><paramref name="otherPartyPublicKey" /> is not an <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> key.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="eCDiffieHellmanCng.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Cng</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExportExplicitParameters">
      <MemberSignature Language="C#" Value="public override System.Security.Cryptography.ECParameters ExportExplicitParameters (bool includePrivateParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.Security.Cryptography.ECParameters ExportExplicitParameters(bool includePrivateParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.ExportExplicitParameters(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ExportExplicitParameters (includePrivateParameters As Boolean) As ECParameters" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Security::Cryptography::ECParameters ExportExplicitParameters(bool includePrivateParameters);" />
      <MemberSignature Language="F#" Value="override this.ExportExplicitParameters : bool -&gt; System.Security.Cryptography.ECParameters" Usage="eCDiffieHellmanCng.ExportExplicitParameters includePrivateParameters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Cng</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.ECParameters</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="includePrivateParameters" Type="System.Boolean" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-2.1;netcore-2.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="includePrivateParameters"><span data-ttu-id="8cd51-225">如果要包含私用參數，則為 <see langword="true" />；否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8cd51-225"><see langword="true" /> to include private parameters; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="8cd51-226">將 <see cref="T:System.Security.Cryptography.ECCurve" /> 物件所使用的金鑰和明確的曲線參數匯出至 <see cref="T:System.Security.Cryptography.ECParameters" /> 物件。</span><span class="sxs-lookup"><span data-stu-id="8cd51-226">Exports the key and explicit curve parameters used by the <see cref="T:System.Security.Cryptography.ECCurve" /> object into an <see cref="T:System.Security.Cryptography.ECParameters" /> object.</span></span></summary>
        <returns><span data-ttu-id="8cd51-227"><see cref="T:System.Security.Cryptography.ECCurve" /> 物件所使用的金鑰和明確的曲線參數。</span><span class="sxs-lookup"><span data-stu-id="8cd51-227">The key and explicit curve parameters used by the <see cref="T:System.Security.Cryptography.ECCurve" /> object.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="8cd51-228">這個方法無法取得曲線值。</span><span class="sxs-lookup"><span data-stu-id="8cd51-228">The method cannot obtain curve values.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="8cd51-229">這個平台不支援明確的匯出。</span><span class="sxs-lookup"><span data-stu-id="8cd51-229">Explicit export is not supported by this platform.</span></span> <span data-ttu-id="8cd51-230">需要 Windows 10 或更高版本。</span><span class="sxs-lookup"><span data-stu-id="8cd51-230">Windows 10 or higher is required.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ExportParameters">
      <MemberSignature Language="C#" Value="public override System.Security.Cryptography.ECParameters ExportParameters (bool includePrivateParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.Security.Cryptography.ECParameters ExportParameters(bool includePrivateParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.ExportParameters(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ExportParameters (includePrivateParameters As Boolean) As ECParameters" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Security::Cryptography::ECParameters ExportParameters(bool includePrivateParameters);" />
      <MemberSignature Language="F#" Value="override this.ExportParameters : bool -&gt; System.Security.Cryptography.ECParameters" Usage="eCDiffieHellmanCng.ExportParameters includePrivateParameters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Cng</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.ECParameters</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="includePrivateParameters" Type="System.Boolean" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-2.1;netcore-2.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="includePrivateParameters"><span data-ttu-id="8cd51-231">如果要包含私用參數，則為 <see langword="true" />；否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8cd51-231"><see langword="true" /> to include private parameters; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="8cd51-232">將 <see cref="T:System.Security.Cryptography.ECCurve" /> 物件所使用的金鑰匯出到 <see cref="T:System.Security.Cryptography.ECParameters" /> 物件中。</span><span class="sxs-lookup"><span data-stu-id="8cd51-232">Exports the key used by the <see cref="T:System.Security.Cryptography.ECCurve" /> object into an <see cref="T:System.Security.Cryptography.ECParameters" /> object.</span></span></summary>
        <returns><span data-ttu-id="8cd51-233"><see cref="T:System.Security.Cryptography.ECCurve" /> 物件所使用的金鑰和具名曲線參數。</span><span class="sxs-lookup"><span data-stu-id="8cd51-233">The key and named curve parameters used by the <see cref="T:System.Security.Cryptography.ECCurve" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8cd51-234">如果索引鍵已建立具名曲線，為<xref:System.Security.Cryptography.ECParameters.Curve?displayProperty=nameWithType>欄位包含具名的曲線參數。         否則，它會包含明確的參數。</span><span class="sxs-lookup"><span data-stu-id="8cd51-234">If the key was created as a named curve, the <xref:System.Security.Cryptography.ECParameters.Curve?displayProperty=nameWithType> field contains named curve parameters;          otherwise,  it contains explicit parameters.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="8cd51-235">這個方法無法取得曲線值。</span><span class="sxs-lookup"><span data-stu-id="8cd51-235">The method cannot obtain curve values.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="FromXmlString">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8cd51-236">從 XML 字串還原序列化金鑰資訊。</span><span class="sxs-lookup"><span data-stu-id="8cd51-236">Deserializes the key information from an XML string.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FromXmlString">
      <MemberSignature Language="C#" Value="public override void FromXmlString (string xmlString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void FromXmlString(string xmlString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub FromXmlString (xmlString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void FromXmlString(System::String ^ xmlString);" />
      <MemberSignature Language="F#" Value="override this.FromXmlString : string -&gt; unit" Usage="eCDiffieHellmanCng.FromXmlString xmlString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Cng</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xmlString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="xmlString"><span data-ttu-id="8cd51-237">要序列化的 XML 索引鍵資訊。</span><span class="sxs-lookup"><span data-stu-id="8cd51-237">The XML-based key information to be deserialized.</span></span></param>
        <summary><span data-ttu-id="8cd51-238">這個方法尚未實作。</span><span class="sxs-lookup"><span data-stu-id="8cd51-238">This method is not implemented.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8cd51-239">若要還原序列化的 XML 索引鍵，使用<xref:System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString%28System.String%2CSystem.Security.Cryptography.ECKeyXmlFormat%29>改為多載。</span><span class="sxs-lookup"><span data-stu-id="8cd51-239">To deserialize an XML key, use the <xref:System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString%28System.String%2CSystem.Security.Cryptography.ECKeyXmlFormat%29> overload instead.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="8cd51-240">這個執行個體不會覆寫這個方法。</span><span class="sxs-lookup"><span data-stu-id="8cd51-240">This method was not overridden for this instance.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="FromXmlString">
      <MemberSignature Language="C#" Value="public void FromXmlString (string xml, System.Security.Cryptography.ECKeyXmlFormat format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FromXmlString(string xml, valuetype System.Security.Cryptography.ECKeyXmlFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString(System.String,System.Security.Cryptography.ECKeyXmlFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FromXmlString (xml As String, format As ECKeyXmlFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FromXmlString(System::String ^ xml, System::Security::Cryptography::ECKeyXmlFormat format);" />
      <MemberSignature Language="F#" Value="override this.FromXmlString : string * System.Security.Cryptography.ECKeyXmlFormat -&gt; unit" Usage="eCDiffieHellmanCng.FromXmlString (xml, format)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Cng</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xml" Type="System.String" />
        <Parameter Name="format" Type="System.Security.Cryptography.ECKeyXmlFormat" />
      </Parameters>
      <Docs>
        <param name="xml"><span data-ttu-id="8cd51-241">要序列化的 XML 索引鍵資訊。</span><span class="sxs-lookup"><span data-stu-id="8cd51-241">The XML-based key information to be deserialized.</span></span></param>
        <param name="format"><span data-ttu-id="8cd51-242">其中一個列舉值，指定 XML 字串的格式。</span><span class="sxs-lookup"><span data-stu-id="8cd51-242">One of the enumeration values that specifies the format of the XML string.</span></span> <span data-ttu-id="8cd51-243">目前唯一接受的格式為 <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />。</span><span class="sxs-lookup"><span data-stu-id="8cd51-243">The only currently accepted format is <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />.</span></span></param>
        <summary><span data-ttu-id="8cd51-244">使用指定的格式從 XML 字串還原金鑰資訊的序列化。</span><span class="sxs-lookup"><span data-stu-id="8cd51-244">Deserializes the key information from an XML string by using the specified format.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8cd51-245"><paramref name="xml" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="8cd51-245"><paramref name="xml" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8cd51-246"><paramref name="xml" /> 的格式不正確。</span><span class="sxs-lookup"><span data-stu-id="8cd51-246"><paramref name="xml" /> is malformed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8cd51-247"><paramref name="format" /> 指定了無效的格式。</span><span class="sxs-lookup"><span data-stu-id="8cd51-247"><paramref name="format" /> specifies an invalid format.</span></span> <span data-ttu-id="8cd51-248">唯一接受的值為 <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />。</span><span class="sxs-lookup"><span data-stu-id="8cd51-248">The only accepted value is <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="8cd51-249">所有其他錯誤。</span><span class="sxs-lookup"><span data-stu-id="8cd51-249">All other errors.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GenerateKey">
      <MemberSignature Language="C#" Value="public override void GenerateKey (System.Security.Cryptography.ECCurve curve);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void GenerateKey(valuetype System.Security.Cryptography.ECCurve curve) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.GenerateKey(System.Security.Cryptography.ECCurve)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub GenerateKey (curve As ECCurve)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void GenerateKey(System::Security::Cryptography::ECCurve curve);" />
      <MemberSignature Language="F#" Value="override this.GenerateKey : System.Security.Cryptography.ECCurve -&gt; unit" Usage="eCDiffieHellmanCng.GenerateKey curve" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Cng</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="curve" Type="System.Security.Cryptography.ECCurve" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-2.1;netcore-2.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="curve"><span data-ttu-id="8cd51-250">用來產生暫時性公開/私密金鑰組的曲線。</span><span class="sxs-lookup"><span data-stu-id="8cd51-250">The curve used to generate an ephemeral public/private key pair.</span></span></param>
        <summary><span data-ttu-id="8cd51-251">針對指定的曲線產生新的暫時性公開/私密金鑰組。</span><span class="sxs-lookup"><span data-stu-id="8cd51-251">Generates a new ephemeral public/private key pair for the specified curve.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8cd51-252">`curve` 必須驗證 (也就是它必須傳回 true 時傳遞至<xref:System.Security.Cryptography.ECCurve.Validate%2A?displayProperty=nameWithType>方法)，且不得為隱含。</span><span class="sxs-lookup"><span data-stu-id="8cd51-252">`curve` must validate (that is, it must return true when passed to the <xref:System.Security.Cryptography.ECCurve.Validate%2A?displayProperty=nameWithType> method) and must not be implicit.</span></span>  
  
 <span data-ttu-id="8cd51-253">在 Windows 上不支援的特性 2 曲線。</span><span class="sxs-lookup"><span data-stu-id="8cd51-253">Characteristic-2 curves are not supported on Windows.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="8cd51-254"><paramref name="curve" /> 不會驗證。</span><span class="sxs-lookup"><span data-stu-id="8cd51-254"><paramref name="curve" /> does not validate.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="HashAlgorithm">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.CngAlgorithm HashAlgorithm { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.CngAlgorithm HashAlgorithm" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm" />
      <MemberSignature Language="VB.NET" Value="Public Property HashAlgorithm As CngAlgorithm" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Cryptography::CngAlgorithm ^ HashAlgorithm { System::Security::Cryptography::CngAlgorithm ^ get(); void set(System::Security::Cryptography::CngAlgorithm ^ value); };" />
      <MemberSignature Language="F#" Value="member this.HashAlgorithm : System.Security.Cryptography.CngAlgorithm with get, set" Usage="System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Cng</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.CngAlgorithm</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8cd51-255">取得或設定產生金鑰內容時使用的雜湊演算法。</span><span class="sxs-lookup"><span data-stu-id="8cd51-255">Gets or sets the hash algorithm to use when generating key material.</span></span></summary>
        <value><span data-ttu-id="8cd51-256">指定雜湊演算法的物件。</span><span class="sxs-lookup"><span data-stu-id="8cd51-256">An object that specifies the hash algorithm.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8cd51-257">這個屬性由 Cryptography Next Generation (CNG) 物件才<xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash>或是<xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac>值會設定<xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="8cd51-257">This property is used by Cryptography Next Generation (CNG) objects only if the <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash> or <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac> value is set in the <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> property.</span></span>  
  
 <span data-ttu-id="8cd51-258">此屬性接受下列演算法： <xref:System.Security.Cryptography.CngAlgorithm.MD5%2A>， <xref:System.Security.Cryptography.CngAlgorithm.Sha1%2A>， <xref:System.Security.Cryptography.CngAlgorithm.Sha256%2A>， <xref:System.Security.Cryptography.CngAlgorithm.Sha384%2A>，和<xref:System.Security.Cryptography.CngAlgorithm.Sha512%2A>。</span><span class="sxs-lookup"><span data-stu-id="8cd51-258">This property accepts the following algorithms: <xref:System.Security.Cryptography.CngAlgorithm.MD5%2A>, <xref:System.Security.Cryptography.CngAlgorithm.Sha1%2A>, <xref:System.Security.Cryptography.CngAlgorithm.Sha256%2A>, <xref:System.Security.Cryptography.CngAlgorithm.Sha384%2A>, and <xref:System.Security.Cryptography.CngAlgorithm.Sha512%2A>.</span></span>  
  
 <span data-ttu-id="8cd51-259">也可能使用其他自訂的雜湊演算法。</span><span class="sxs-lookup"><span data-stu-id="8cd51-259">Other custom hash algorithms may also be used.</span></span>  
  
 <span data-ttu-id="8cd51-260">預設的演算法是<xref:System.Security.Cryptography.CngAlgorithm.Sha256%2A>。</span><span class="sxs-lookup"><span data-stu-id="8cd51-260">The default algorithm is <xref:System.Security.Cryptography.CngAlgorithm.Sha256%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8cd51-261">值為 <see langword="null." />。</span><span class="sxs-lookup"><span data-stu-id="8cd51-261">The value is <see langword="null." /></span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="HmacKey">
      <MemberSignature Language="C#" Value="public byte[] HmacKey { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] HmacKey" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.ECDiffieHellmanCng.HmacKey" />
      <MemberSignature Language="VB.NET" Value="Public Property HmacKey As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ HmacKey { cli::array &lt;System::Byte&gt; ^ get(); void set(cli::array &lt;System::Byte&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.HmacKey : byte[] with get, set" Usage="System.Security.Cryptography.ECDiffieHellmanCng.HmacKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Cng</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8cd51-262">取得或設定「雜湊式訊息驗證碼」(Hash-based Message Authentication Code，HMAC) 金鑰，以便在衍生金鑰內容時使用。</span><span class="sxs-lookup"><span data-stu-id="8cd51-262">Gets or sets the Hash-based Message Authentication Code (HMAC) key to use when deriving key material.</span></span></summary>
        <value><span data-ttu-id="8cd51-263">在衍生金鑰內容時使用的「雜湊式訊息驗證碼」(Hash-based Message Authentication Code，HMAC) 金鑰。</span><span class="sxs-lookup"><span data-stu-id="8cd51-263">The Hash-based Message Authentication Code (HMAC) key to use when deriving key material.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8cd51-264">這個屬性時，才適用<xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac>值會設定<xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A>屬性，而<xref:System.Security.Cryptography.ECDiffieHellmanCng.UseSecretAgreementAsHmacKey%2A>屬性是`false`。</span><span class="sxs-lookup"><span data-stu-id="8cd51-264">This property applies only when the <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac> value is set in the <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> property, and the <xref:System.Security.Cryptography.ECDiffieHellmanCng.UseSecretAgreementAsHmacKey%2A> property is `false`.</span></span> <span data-ttu-id="8cd51-265">預設值為 `null`。</span><span class="sxs-lookup"><span data-stu-id="8cd51-265">By default, the value is `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImportParameters">
      <MemberSignature Language="C#" Value="public override void ImportParameters (System.Security.Cryptography.ECParameters parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ImportParameters(valuetype System.Security.Cryptography.ECParameters parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.ImportParameters(System.Security.Cryptography.ECParameters)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub ImportParameters (parameters As ECParameters)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void ImportParameters(System::Security::Cryptography::ECParameters parameters);" />
      <MemberSignature Language="F#" Value="override this.ImportParameters : System.Security.Cryptography.ECParameters -&gt; unit" Usage="eCDiffieHellmanCng.ImportParameters parameters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Cng</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="System.Security.Cryptography.ECParameters" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-2.1;netcore-2.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="parameters"><span data-ttu-id="8cd51-266">要匯入的曲線參數。</span><span class="sxs-lookup"><span data-stu-id="8cd51-266">The curve's parameters to import.</span></span></param>
        <summary><span data-ttu-id="8cd51-267">將 <see cref="T:System.Security.Cryptography.ECCurve" /> 物件的指定參數當做金鑰匯入至目前的執行個體。</span><span class="sxs-lookup"><span data-stu-id="8cd51-267">Imports the specified parameters for an <see cref="T:System.Security.Cryptography.ECCurve" /> object as a key into the current instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8cd51-268"><xref:System.Security.Cryptography.ECDiffieHellmanCng.ImportParameters%2A>方法會取代現有的金鑰，這個物件使用藉由建立新<xref:System.Security.Cryptography.CngKey>物件。</span><span class="sxs-lookup"><span data-stu-id="8cd51-268">The <xref:System.Security.Cryptography.ECDiffieHellmanCng.ImportParameters%2A> method replaces the existing key that this object is working with by creating a         new <xref:System.Security.Cryptography.CngKey> object.</span></span> <span data-ttu-id="8cd51-269">如果`parameters`僅包含<xref:System.Security.Cryptography.ECParameters.Q>欄位，則只是公開金鑰匯入。</span><span class="sxs-lookup"><span data-stu-id="8cd51-269">If `parameters` contains only the <xref:System.Security.Cryptography.ECParameters.Q> field, then only a public key is imported.</span></span>         <span data-ttu-id="8cd51-270">如果`parameters`也包含<xref:System.Security.Cryptography.ECParameters.D>，則會匯入完整金鑰組。</span><span class="sxs-lookup"><span data-stu-id="8cd51-270">If `parameters` also contains <xref:System.Security.Cryptography.ECParameters.D>, then a full key pair is be imported.</span></span> <span data-ttu-id="8cd51-271">`parameter` <xref:System.Security.Cryptography.ECParameters.Curve>值會指定要匯入的曲線類型。</span><span class="sxs-lookup"><span data-stu-id="8cd51-271">The `parameter` <xref:System.Security.Cryptography.ECParameters.Curve> value specifies the type of the curve to import.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="8cd51-272"><paramref name="parameters" /> 不會驗證。</span><span class="sxs-lookup"><span data-stu-id="8cd51-272"><paramref name="parameters" /> does not validate.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="8cd51-273"><paramref name="parameters" /> 參考無法匯入的曲線。</span><span class="sxs-lookup"><span data-stu-id="8cd51-273"><paramref name="parameters" /> references a curve that cannot be imported.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="8cd51-274"><paramref name="parameters" /> 參考這個平台不支援的曲線。</span><span class="sxs-lookup"><span data-stu-id="8cd51-274"><paramref name="parameters" /> references a curve that is not supported by this platform.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Key">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.CngKey Key { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.CngKey Key" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.ECDiffieHellmanCng.Key" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Key As CngKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Cryptography::CngKey ^ Key { System::Security::Cryptography::CngKey ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Key : System.Security.Cryptography.CngKey" Usage="System.Security.Cryptography.ECDiffieHellmanCng.Key" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Cng</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.CngKey</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8cd51-275">指定 <see cref="T:System.Security.Cryptography.CngKey" />，由目前物件用於密碼編譯作業。</span><span class="sxs-lookup"><span data-stu-id="8cd51-275">Specifies the <see cref="T:System.Security.Cryptography.CngKey" /> that is used by the current object for cryptographic operations.</span></span></summary>
        <value><span data-ttu-id="8cd51-276">這個物件使用的金鑰組，用來執行密碼編譯作業。</span><span class="sxs-lookup"><span data-stu-id="8cd51-276">The key pair used by this object to perform cryptographic operations.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyDerivationFunction">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction KeyDerivationFunction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction KeyDerivationFunction" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction" />
      <MemberSignature Language="VB.NET" Value="Public Property KeyDerivationFunction As ECDiffieHellmanKeyDerivationFunction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Cryptography::ECDiffieHellmanKeyDerivationFunction KeyDerivationFunction { System::Security::Cryptography::ECDiffieHellmanKeyDerivationFunction get(); void set(System::Security::Cryptography::ECDiffieHellmanKeyDerivationFunction value); };" />
      <MemberSignature Language="F#" Value="member this.KeyDerivationFunction : System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction with get, set" Usage="System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Cng</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8cd51-277">取得或設定 <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> 類別的金鑰衍生函數。</span><span class="sxs-lookup"><span data-stu-id="8cd51-277">Gets or sets the key derivation function for the <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> class.</span></span></summary>
        <value><span data-ttu-id="8cd51-278">其中一個 <see cref="T:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction" /> 列舉值：<see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash" />、<see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac" /> 或 <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls" />。</span><span class="sxs-lookup"><span data-stu-id="8cd51-278">One of the <see cref="T:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction" /> enumeration values: <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash" />, <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac" />, or <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls" />.</span></span> <span data-ttu-id="8cd51-279">預設值為 <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash" />。</span><span class="sxs-lookup"><span data-stu-id="8cd51-279">The default value is <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8cd51-280">此屬性會指定用來轉換成金鑰內容的密碼協議的金鑰衍生函式。</span><span class="sxs-lookup"><span data-stu-id="8cd51-280">This property specifies the key derivation function that is used to transform the secret agreement into key material.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8cd51-281">列舉值超出範圍。</span><span class="sxs-lookup"><span data-stu-id="8cd51-281">The enumeration value is out of range.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="KeySize">
      <MemberSignature Language="C#" Value="public override int KeySize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 KeySize" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.ECDiffieHellmanCng.KeySize" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property KeySize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int KeySize { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.KeySize : int with get, set" Usage="System.Security.Cryptography.ECDiffieHellmanCng.KeySize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Cng</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Label">
      <MemberSignature Language="C#" Value="public byte[] Label { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] Label" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.ECDiffieHellmanCng.Label" />
      <MemberSignature Language="VB.NET" Value="Public Property Label As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ Label { cli::array &lt;System::Byte&gt; ^ get(); void set(cli::array &lt;System::Byte&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Label : byte[] with get, set" Usage="System.Security.Cryptography.ECDiffieHellmanCng.Label" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Cng</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8cd51-282">取得或設定標籤值，用於金鑰衍生。</span><span class="sxs-lookup"><span data-stu-id="8cd51-282">Gets or sets the label value that is used for key derivation.</span></span></summary>
        <value><span data-ttu-id="8cd51-283">標籤值。</span><span class="sxs-lookup"><span data-stu-id="8cd51-283">The label value.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8cd51-284">如果使用此值的金鑰衍生<xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls>值會設定<xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="8cd51-284">This value is used for key derivation if the <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls> value is set in the <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> property.</span></span> <span data-ttu-id="8cd51-285">根據預設，它是`null`。</span><span class="sxs-lookup"><span data-stu-id="8cd51-285">By default, it is `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LegalKeySizes">
      <MemberSignature Language="C#" Value="public override System.Security.Cryptography.KeySizes[] LegalKeySizes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.KeySizes[] LegalKeySizes" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.ECDiffieHellmanCng.LegalKeySizes" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property LegalKeySizes As KeySizes()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property cli::array &lt;System::Security::Cryptography::KeySizes ^&gt; ^ LegalKeySizes { cli::array &lt;System::Security::Cryptography::KeySizes ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LegalKeySizes : System.Security.Cryptography.KeySizes[]" Usage="System.Security.Cryptography.ECDiffieHellmanCng.LegalKeySizes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Cng</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.KeySizes[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PublicKey">
      <MemberSignature Language="C#" Value="public override System.Security.Cryptography.ECDiffieHellmanPublicKey PublicKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.ECDiffieHellmanPublicKey PublicKey" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.ECDiffieHellmanCng.PublicKey" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property PublicKey As ECDiffieHellmanPublicKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Security::Cryptography::ECDiffieHellmanPublicKey ^ PublicKey { System::Security::Cryptography::ECDiffieHellmanPublicKey ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PublicKey : System.Security.Cryptography.ECDiffieHellmanPublicKey" Usage="System.Security.Cryptography.ECDiffieHellmanCng.PublicKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Cng</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.5;netframework-4.0">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.ECDiffieHellmanPublicKey</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8cd51-286">取得公開金鑰，可讓其他 <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> 物件用來產生共用的密碼協議。</span><span class="sxs-lookup"><span data-stu-id="8cd51-286">Gets the public key that can be used by another <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> object to generate a shared secret agreement.</span></span></summary>
        <value><span data-ttu-id="8cd51-287">與這個 <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> 物件執行個體相關聯的公開金鑰。</span><span class="sxs-lookup"><span data-stu-id="8cd51-287">The public key that is associated with this instance of the <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> object.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SecretAppend">
      <MemberSignature Language="C#" Value="public byte[] SecretAppend { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] SecretAppend" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend" />
      <MemberSignature Language="VB.NET" Value="Public Property SecretAppend As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ SecretAppend { cli::array &lt;System::Byte&gt; ^ get(); void set(cli::array &lt;System::Byte&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SecretAppend : byte[] with get, set" Usage="System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Cng</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8cd51-288">取得或設定值，該值將在產生金鑰內容時附加到密碼協議。</span><span class="sxs-lookup"><span data-stu-id="8cd51-288">Gets or sets a value that will be appended to the secret agreement when generating key material.</span></span></summary>
        <value><span data-ttu-id="8cd51-289">附加到密碼協議的值。</span><span class="sxs-lookup"><span data-stu-id="8cd51-289">The value that is appended to the secret agreement.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8cd51-290">如果使用此值的金鑰衍生<xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash>或<xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac>金鑰衍生函式 (KDF) 可用。</span><span class="sxs-lookup"><span data-stu-id="8cd51-290">This value is used for key derivation if the <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash> or <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac> key derivation function (KDF) is used.</span></span> <span data-ttu-id="8cd51-291">值會附加至密碼協議，並結合的值會傳遞至 KDF 來產生金鑰內容。</span><span class="sxs-lookup"><span data-stu-id="8cd51-291">The value is appended to the secret agreement, and the combined value is passed to the KDF to generate the key material.</span></span> <span data-ttu-id="8cd51-292">預設值為 `null`。</span><span class="sxs-lookup"><span data-stu-id="8cd51-292">By default, the value is `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SecretPrepend">
      <MemberSignature Language="C#" Value="public byte[] SecretPrepend { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] SecretPrepend" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend" />
      <MemberSignature Language="VB.NET" Value="Public Property SecretPrepend As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ SecretPrepend { cli::array &lt;System::Byte&gt; ^ get(); void set(cli::array &lt;System::Byte&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SecretPrepend : byte[] with get, set" Usage="System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Cng</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8cd51-293">取得或設定值，該值將在衍生金鑰內容時加入至密碼協議的開頭。</span><span class="sxs-lookup"><span data-stu-id="8cd51-293">Gets or sets a value that will be added to the beginning of the secret agreement when deriving key material.</span></span></summary>
        <value><span data-ttu-id="8cd51-294">在金鑰衍生期間附加至密碼協議開頭的值。</span><span class="sxs-lookup"><span data-stu-id="8cd51-294">The value that is appended to the beginning of the secret agreement during key derivation.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8cd51-295">如果使用此值的金鑰衍生<xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A>屬性設定為下列值之一：</span><span class="sxs-lookup"><span data-stu-id="8cd51-295">This value is used for key derivation if the <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> property is set to one of the following values:</span></span>  
  
-   <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash>  
  
-   <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac>  
  
 <span data-ttu-id="8cd51-296">值會附加至密碼協議，並結合的值會傳遞至要產生金鑰內容的金鑰衍生函式 (KDF)。</span><span class="sxs-lookup"><span data-stu-id="8cd51-296">The value is prepended to the secret agreement, and the combined value is passed to the key derivation function (KDF) to generate the key material.</span></span> <span data-ttu-id="8cd51-297">預設值為 `null`。</span><span class="sxs-lookup"><span data-stu-id="8cd51-297">By default, the value is `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Seed">
      <MemberSignature Language="C#" Value="public byte[] Seed { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] Seed" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.ECDiffieHellmanCng.Seed" />
      <MemberSignature Language="VB.NET" Value="Public Property Seed As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ Seed { cli::array &lt;System::Byte&gt; ^ get(); void set(cli::array &lt;System::Byte&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Seed : byte[] with get, set" Usage="System.Security.Cryptography.ECDiffieHellmanCng.Seed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Cng</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8cd51-298">取得或設定值，該值將在衍生金鑰內容時使用。</span><span class="sxs-lookup"><span data-stu-id="8cd51-298">Gets or sets the seed value that will be used when deriving key material.</span></span></summary>
        <value><span data-ttu-id="8cd51-299">種子值。</span><span class="sxs-lookup"><span data-stu-id="8cd51-299">The seed value.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8cd51-300">如果使用此值的金鑰衍生<xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A>屬性設定為<xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls>。</span><span class="sxs-lookup"><span data-stu-id="8cd51-300">This value is used for key derivation if the <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> property is set to <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls>.</span></span> <span data-ttu-id="8cd51-301">預設值為 `null`。</span><span class="sxs-lookup"><span data-stu-id="8cd51-301">By default, the value is `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToXmlString">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8cd51-302">將金鑰資訊序列化成 XML 字串。</span><span class="sxs-lookup"><span data-stu-id="8cd51-302">Serializes the key information to an XML string.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToXmlString">
      <MemberSignature Language="C#" Value="public override string ToXmlString (bool includePrivateParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToXmlString(bool includePrivateParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToXmlString (includePrivateParameters As Boolean) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToXmlString(bool includePrivateParameters);" />
      <MemberSignature Language="F#" Value="override this.ToXmlString : bool -&gt; string" Usage="eCDiffieHellmanCng.ToXmlString includePrivateParameters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Cng</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="includePrivateParameters" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="includePrivateParameters"><span data-ttu-id="8cd51-303">如果要包含私用參數，則為 <see langword="true" />；否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8cd51-303"><see langword="true" /> to include private parameters; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="8cd51-304">這個方法尚未實作。</span><span class="sxs-lookup"><span data-stu-id="8cd51-304">This method is not implemented.</span></span></summary>
        <returns><span data-ttu-id="8cd51-305">不適用。</span><span class="sxs-lookup"><span data-stu-id="8cd51-305">Not applicable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8cd51-306">若要將目前的索引鍵轉換成 XML 表示法中，使用<xref:System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString%28System.Security.Cryptography.ECKeyXmlFormat%29>改為多載。</span><span class="sxs-lookup"><span data-stu-id="8cd51-306">To convert the current key to an XML representation, use the <xref:System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString%28System.Security.Cryptography.ECKeyXmlFormat%29> overload instead.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="8cd51-307">這個執行個體不會覆寫這個方法。</span><span class="sxs-lookup"><span data-stu-id="8cd51-307">This method was not overridden for this instance.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToXmlString">
      <MemberSignature Language="C#" Value="public string ToXmlString (System.Security.Cryptography.ECKeyXmlFormat format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToXmlString(valuetype System.Security.Cryptography.ECKeyXmlFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString(System.Security.Cryptography.ECKeyXmlFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToXmlString (format As ECKeyXmlFormat) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToXmlString(System::Security::Cryptography::ECKeyXmlFormat format);" />
      <MemberSignature Language="F#" Value="override this.ToXmlString : System.Security.Cryptography.ECKeyXmlFormat -&gt; string" Usage="eCDiffieHellmanCng.ToXmlString format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Cng</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Security.Cryptography.ECKeyXmlFormat" />
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="8cd51-308">其中一個列舉值，指定 XML 字串的格式。</span><span class="sxs-lookup"><span data-stu-id="8cd51-308">One of the enumeration values that specifies the format of the XML string.</span></span> <span data-ttu-id="8cd51-309">目前唯一接受的格式為 <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />。</span><span class="sxs-lookup"><span data-stu-id="8cd51-309">The only currently accepted format is <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />.</span></span></param>
        <summary><span data-ttu-id="8cd51-310">使用指定的格式將金鑰資訊序列化成 XML 字串。</span><span class="sxs-lookup"><span data-stu-id="8cd51-310">Serializes the key information to an XML string by using the specified format.</span></span></summary>
        <returns><span data-ttu-id="8cd51-311">包含金鑰資訊的字串物件會根據要求的格式序列化成 XML 字串。</span><span class="sxs-lookup"><span data-stu-id="8cd51-311">A string object that contains the key information, serialized to an XML string, according to the requested format.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8cd51-312"><paramref name="format" /> 指定了無效的格式。</span><span class="sxs-lookup"><span data-stu-id="8cd51-312"><paramref name="format" /> specifies an invalid format.</span></span> <span data-ttu-id="8cd51-313">唯一接受的值為 <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />。</span><span class="sxs-lookup"><span data-stu-id="8cd51-313">The only accepted value is <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="UseSecretAgreementAsHmacKey">
      <MemberSignature Language="C#" Value="public bool UseSecretAgreementAsHmacKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseSecretAgreementAsHmacKey" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.ECDiffieHellmanCng.UseSecretAgreementAsHmacKey" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UseSecretAgreementAsHmacKey As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseSecretAgreementAsHmacKey { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.UseSecretAgreementAsHmacKey : bool" Usage="System.Security.Cryptography.ECDiffieHellmanCng.UseSecretAgreementAsHmacKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Cng</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8cd51-314">取得值，表示密碼協議是否做為「雜湊式訊息驗證碼」(Hash-based Message Authentication Code，HMAC) 金鑰用來衍生金鑰內容。</span><span class="sxs-lookup"><span data-stu-id="8cd51-314">Gets a value that indicates whether the secret agreement is used as a Hash-based Message Authentication Code (HMAC) key to derive key material.</span></span></summary>
        <value><span data-ttu-id="8cd51-315">如果密碼協議做為 HMAC 金鑰用來衍生金鑰內容，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8cd51-315"><see langword="true" /> if the secret agreement is used as an HMAC key to derive key material; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
-   <span data-ttu-id="8cd51-316">如果使用此值的金鑰衍生<xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A>屬性設定為<xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac>。</span><span class="sxs-lookup"><span data-stu-id="8cd51-316">This value is used for key derivation if the <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> property is set to <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac>.</span></span> <span data-ttu-id="8cd51-317">預設值為 `false`。</span><span class="sxs-lookup"><span data-stu-id="8cd51-317">By default, the value is `false`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>