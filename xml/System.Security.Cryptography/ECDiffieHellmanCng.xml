<Type Name="ECDiffieHellmanCng" FullName="System.Security.Cryptography.ECDiffieHellmanCng">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="75483415824486b97203441fb036211f367aa896" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37624808" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ECDiffieHellmanCng : System.Security.Cryptography.ECDiffieHellman" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ECDiffieHellmanCng extends System.Security.Cryptography.ECDiffieHellman" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.ECDiffieHellmanCng" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ECDiffieHellmanCng&#xA;Inherits ECDiffieHellman" />
  <TypeSignature Language="C++ CLI" Value="public ref class ECDiffieHellmanCng sealed : System::Security::Cryptography::ECDiffieHellman" />
  <TypeSignature Language="F#" Value="type ECDiffieHellmanCng = class&#xA;    inherit ECDiffieHellman" />
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.Cryptography.ECDiffieHellman</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="4d8cd-101">Provides a Cryptography Next Generation (CNG) implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm.</span>
      <span class="sxs-lookup">
        <span data-stu-id="4d8cd-101">Provides a Cryptography Next Generation (CNG) implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm.</span>
      </span>
      <span data-ttu-id="4d8cd-102">This class is used to perform cryptographic operations.</span>
      <span class="sxs-lookup">
        <span data-stu-id="4d8cd-102">This class is used to perform cryptographic operations.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d8cd-103"><xref:System.Security.Cryptography.ECDiffieHellmanCng>類別可讓兩個合作對象，交換私人金鑰的內容，即使它們透過公用的通道進行通訊。</span><span class="sxs-lookup"><span data-stu-id="4d8cd-103">The <xref:System.Security.Cryptography.ECDiffieHellmanCng> class enables two parties to exchange private key material even if they are communicating through a public channel.</span></span>  <span data-ttu-id="4d8cd-104">這兩個合作對象可以計算相同的祕密值，指*密碼協議*managed Diffie Hellman 類別中。</span><span class="sxs-lookup"><span data-stu-id="4d8cd-104">Both parties can calculate the same secret value, which is referred to as the *secret agreement* in the managed Diffie-Hellman classes.</span></span> <span data-ttu-id="4d8cd-105">密碼協議可用的各種不同的用途，包括做為對稱金鑰。</span><span class="sxs-lookup"><span data-stu-id="4d8cd-105">The secret agreement can then be used for a variety of purposes, including as a symmetric key.</span></span> <span data-ttu-id="4d8cd-106">不過，而不是直接公開密碼協議<xref:System.Security.Cryptography.ECDiffieHellmanCng>類別會先提供值的協議後置處理。</span><span class="sxs-lookup"><span data-stu-id="4d8cd-106">However, instead of exposing the secret agreement directly, the <xref:System.Security.Cryptography.ECDiffieHellmanCng> class does some post-processing on the agreement before providing the value.</span></span> <span data-ttu-id="4d8cd-107">這個後置處理指*金鑰衍生函式 (KDF)*; 您可以選取您想要使用和 Diffie Hellman 物件的執行個體上設定它的參數，透過一組屬性的 KDF。</span><span class="sxs-lookup"><span data-stu-id="4d8cd-107">This post processing is referred to as the *key derivation function (KDF)*; you can select which KDF you want to use and set its parameters through a set of properties on the instance of the Diffie-Hellman object.</span></span>  
  
|<span data-ttu-id="4d8cd-108">金鑰衍生函式</span><span class="sxs-lookup"><span data-stu-id="4d8cd-108">Key derivation function</span></span>|<span data-ttu-id="4d8cd-109">屬性</span><span class="sxs-lookup"><span data-stu-id="4d8cd-109">Properties</span></span>|  
|-----------------------------|----------------|  
|<xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash>|<span data-ttu-id="4d8cd-110"><xref:System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm%2A> 用來處理密碼協議-雜湊演算法。</span><span class="sxs-lookup"><span data-stu-id="4d8cd-110"><xref:System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm%2A> - The hash algorithm that is used to process the secret agreement.</span></span><br /><br /> <span data-ttu-id="4d8cd-111"><xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend%2A> -若要在前面加上密碼協議之前進行雜湊選用的位元組陣列。</span><span class="sxs-lookup"><span data-stu-id="4d8cd-111"><xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend%2A> - An optional byte array to prepend to the secret agreement before hashing it.</span></span><br /><br /> <span data-ttu-id="4d8cd-112"><xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend%2A> -要附加至密碼協議之前進行雜湊選用的位元組陣列。</span><span class="sxs-lookup"><span data-stu-id="4d8cd-112"><xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend%2A> - An optional byte array to append to the secret agreement before hashing it.</span></span>|  
|<xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac>|<span data-ttu-id="4d8cd-113"><xref:System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm%2A> 用來處理密碼協議-雜湊演算法。</span><span class="sxs-lookup"><span data-stu-id="4d8cd-113"><xref:System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm%2A> - The hash algorithm that is used to process the secret agreement.</span></span><br /><br /> <span data-ttu-id="4d8cd-114"><xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend%2A>-若要在前面加上密碼協議之前進行雜湊選用的位元組陣列。</span><span class="sxs-lookup"><span data-stu-id="4d8cd-114"><xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend%2A>- An optional byte array to prepend to the secret agreement before hashing it.</span></span><br /><br /> <span data-ttu-id="4d8cd-115"><xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend%2A> -要附加至密碼協議之前進行雜湊選用的位元組陣列。</span><span class="sxs-lookup"><span data-stu-id="4d8cd-115"><xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend%2A> - An optional byte array to append to the secret agreement before hashing it.</span></span>|  
|<xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls>|<span data-ttu-id="4d8cd-116"><xref:System.Security.Cryptography.ECDiffieHellmanCng.Label%2A> -金鑰衍生標籤。</span><span class="sxs-lookup"><span data-stu-id="4d8cd-116"><xref:System.Security.Cryptography.ECDiffieHellmanCng.Label%2A> - The label for key derivation.</span></span><br /><br /> <span data-ttu-id="4d8cd-117"><xref:System.Security.Cryptography.ECDiffieHellmanCng.Seed%2A> 金鑰衍生-種子。</span><span class="sxs-lookup"><span data-stu-id="4d8cd-117"><xref:System.Security.Cryptography.ECDiffieHellmanCng.Seed%2A> - The seed for key derivation.</span></span>|  
  
 <span data-ttu-id="4d8cd-118">傳遞密碼協議，透過金鑰衍生函式的結果是可做為您的應用程式的金鑰內容的位元組陣列。</span><span class="sxs-lookup"><span data-stu-id="4d8cd-118">The result of passing the secret agreement through the key derivation function is a byte array that may be used as key material for your application.</span></span> <span data-ttu-id="4d8cd-119">產生的金鑰內容的位元組數目是取決於金鑰衍生函式;比方說，SHA-256 會產生 256 位元的金鑰材料，而 SHA-512 會產生 512 位元的金鑰材料。ECDH 金鑰交換的基本流程如下所示：</span><span class="sxs-lookup"><span data-stu-id="4d8cd-119">The number of bytes of key material generated is dependent on the key derivation function; for example, SHA-256 will generate 256 bits of key material, whereas SHA-512 will generate 512 bits of key material.The basic flow of an ECDH key exchange is as follows:</span></span>  
  
1.  <span data-ttu-id="4d8cd-120">Alice 和 Bob 建立 Diffie-hellman 金鑰交換作業来使用的金鑰組</span><span class="sxs-lookup"><span data-stu-id="4d8cd-120">Alice and Bob create a key pair to use for the Diffie-Hellman key exchange operation</span></span>  
  
2.  <span data-ttu-id="4d8cd-121">Alice 和 Bob 設定 KDF 上同意使用的參數。</span><span class="sxs-lookup"><span data-stu-id="4d8cd-121">Alice and Bob configure the KDF using parameters the agree on.</span></span>  
  
3.  <span data-ttu-id="4d8cd-122">Alice 在她的公開金鑰傳送 Bob。</span><span class="sxs-lookup"><span data-stu-id="4d8cd-122">Alice sends Bob her public key.</span></span>  
  
4.  <span data-ttu-id="4d8cd-123">Bob 在他的公開金鑰時，都會傳送 Alice。</span><span class="sxs-lookup"><span data-stu-id="4d8cd-123">Bob sends Alice his public key.</span></span>  
  
5.  <span data-ttu-id="4d8cd-124">Alice 和 Bob 使用彼此的公用金鑰來產生密碼協議，並套用 KDF 密碼協議來產生金鑰內容。</span><span class="sxs-lookup"><span data-stu-id="4d8cd-124">Alice and Bob use each other's public keys to generate the secret agreement, and apply the KDF to the secret agreement to generate key material.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d8cd-125">下列範例示範如何使用<xref:System.Security.Cryptography.ECDiffieHellmanCng>類別來建立金鑰交換，以及如何使用該金鑰來加密的訊息，可以透過公用通道傳送，並由接收者解密。</span><span class="sxs-lookup"><span data-stu-id="4d8cd-125">The following example shows how to use the <xref:System.Security.Cryptography.ECDiffieHellmanCng> class to establish a key exchange and how to use that key to encrypt a message that can be sent over a public channel and decrypted by the receiver.</span></span>  
  
 [!code-csharp[ECDiffieHellmanCng#1](~/samples/snippets/csharp/VS_Snippets_CLR/ecdiffiehellmancng/cs/program.cs#1)]
 [!code-vb[ECDiffieHellmanCng#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ecdiffiehellmancng/vb/program.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="4d8cd-126">Initializes a new instance of the <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-126">Initializes a new instance of the <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ECDiffieHellmanCng ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ECDiffieHellmanCng();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="4d8cd-127">Initializes a new instance of the <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> class with a random key pair.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-127">Initializes a new instance of the <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> class with a random key pair.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d8cd-128">隨機金鑰組具有預設公用 521 位元的金鑰長度。</span><span class="sxs-lookup"><span data-stu-id="4d8cd-128">The random key pair has a default public key length of 521 bits.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ECDiffieHellmanCng (int keySize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 keySize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (keySize As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ECDiffieHellmanCng(int keySize);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.ECDiffieHellmanCng : int -&gt; System.Security.Cryptography.ECDiffieHellmanCng" Usage="new System.Security.Cryptography.ECDiffieHellmanCng keySize" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="keySize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="keySize">
          <span data-ttu-id="4d8cd-129">The size of the key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-129">The size of the key.</span>
          </span>
          <span data-ttu-id="4d8cd-130">Valid key sizes are 256, 384, and 521 bits.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-130">Valid key sizes are 256, 384, and 521 bits.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d8cd-131">Initializes a new instance of the <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> class with a random key pair, using the specified key size.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-131">Initializes a new instance of the <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> class with a random key pair, using the specified key size.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d8cd-132">隨機金鑰組將具有所定義的公開金鑰長度`keySize`參數。</span><span class="sxs-lookup"><span data-stu-id="4d8cd-132">The random key pair will have the public key length defined by the `keySize` parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4d8cd-133">
            <paramref name="keySize" /> specifies an invalid length.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-133">
              <paramref name="keySize" /> specifies an invalid length.</span>
          </span>
        </exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="4d8cd-134">Cryptography Next Generation (CNG) classes are not supported on this system.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-134">Cryptography Next Generation (CNG) classes are not supported on this system.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ECDiffieHellmanCng (System.Security.Cryptography.CngKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Security.Cryptography.CngKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.#ctor(System.Security.Cryptography.CngKey)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (key As CngKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ECDiffieHellmanCng(System::Security::Cryptography::CngKey ^ key);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.ECDiffieHellmanCng : System.Security.Cryptography.CngKey -&gt; System.Security.Cryptography.ECDiffieHellmanCng" Usage="new System.Security.Cryptography.ECDiffieHellmanCng key" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="key" Type="System.Security.Cryptography.CngKey" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="4d8cd-135">The key that will be used as input to the cryptographic operations performed by the current object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-135">The key that will be used as input to the cryptographic operations performed by the current object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d8cd-136">Initializes a new instance of the <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> class by using the specified <see cref="T:System.Security.Cryptography.CngKey" /> object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-136">Initializes a new instance of the <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> class by using the specified <see cref="T:System.Security.Cryptography.CngKey" /> object.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4d8cd-137">
            <paramref name="key" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-137">
              <paramref name="key" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4d8cd-138">
            <paramref name="key" /> does not specify an Elliptic Curve Diffie-Hellman (ECDH) algorithm group.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-138">
              <paramref name="key" /> does not specify an Elliptic Curve Diffie-Hellman (ECDH) algorithm group.</span>
          </span>
        </exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="4d8cd-139">Cryptography Next Generation (CNG) classes are not supported on this system.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-139">Cryptography Next Generation (CNG) classes are not supported on this system.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ECDiffieHellmanCng (System.Security.Cryptography.ECCurve curve);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Security.Cryptography.ECCurve curve) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.#ctor(System.Security.Cryptography.ECCurve)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (curve As ECCurve)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ECDiffieHellmanCng(System::Security::Cryptography::ECCurve curve);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.ECDiffieHellmanCng : System.Security.Cryptography.ECCurve -&gt; System.Security.Cryptography.ECDiffieHellmanCng" Usage="new System.Security.Cryptography.ECDiffieHellmanCng curve" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="curve" Type="System.Security.Cryptography.ECCurve" />
      </Parameters>
      <Docs>
        <param name="curve">
          <span data-ttu-id="4d8cd-140">The curve used to generate the public/private key pair.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-140">The curve used to generate the public/private key pair.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d8cd-141">Creates a new instance of the <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> class whose public/private key pair is generated over the specified curve.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-141">Creates a new instance of the <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> class whose public/private key pair is generated over the specified curve.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d8cd-142">`curve` 必須驗證 (也就是它必須傳回`true`) 時傳遞至<xref:System.Security.Cryptography.ECCurve.Validate%2A?displayProperty=nameWithType>方法，而且必須是具名或明確的質數。</span><span class="sxs-lookup"><span data-stu-id="4d8cd-142">`curve` must validate (that is, it must return `true`) when passed to the <xref:System.Security.Cryptography.ECCurve.Validate%2A?displayProperty=nameWithType> method and must be either a named or explicit prime.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <span data-ttu-id="4d8cd-143">
            <paramref name="curve" /> does not validate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-143">
              <paramref name="curve" /> does not validate.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DeriveKeyFromHash">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="4d8cd-144">Derives bytes that can be used as a key using a hash function .</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-144">Derives bytes that can be used as a key using a hash function .</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DeriveKeyFromHash">
      <MemberSignature Language="C#" Value="public override byte[] DeriveKeyFromHash (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, byte[] secretPrepend, byte[] secretAppend);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] DeriveKeyFromHash(class System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm, unsigned int8[] secretPrepend, unsigned int8[] secretAppend) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function DeriveKeyFromHash (otherPartyPublicKey As ECDiffieHellmanPublicKey, hashAlgorithm As HashAlgorithmName, secretPrepend As Byte(), secretAppend As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Byte&gt; ^ DeriveKeyFromHash(System::Security::Cryptography::ECDiffieHellmanPublicKey ^ otherPartyPublicKey, System::Security::Cryptography::HashAlgorithmName hashAlgorithm, cli::array &lt;System::Byte&gt; ^ secretPrepend, cli::array &lt;System::Byte&gt; ^ secretAppend);" />
      <MemberSignature Language="F#" Value="override this.DeriveKeyFromHash : System.Security.Cryptography.ECDiffieHellmanPublicKey * System.Security.Cryptography.HashAlgorithmName * byte[] * byte[] -&gt; byte[]" Usage="eCDiffieHellmanCng.DeriveKeyFromHash (otherPartyPublicKey, hashAlgorithm, secretPrepend, secretAppend)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherPartyPublicKey" Type="System.Security.Cryptography.ECDiffieHellmanPublicKey" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" />
        <Parameter Name="secretPrepend" Type="System.Byte[]" />
        <Parameter Name="secretAppend" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="otherPartyPublicKey">
          <span data-ttu-id="4d8cd-145">The other party's public key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-145">The other party's public key.</span>
          </span>
        </param>
        <param name="hashAlgorithm">
          <span data-ttu-id="4d8cd-146">The hash algorithm  to use to derive the key material.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-146">The hash algorithm  to use to derive the key material.</span>
          </span>
        </param>
        <param name="secretPrepend">
          <span data-ttu-id="4d8cd-147">A value to prepend to the derived secret before hashing.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-147">A value to prepend to the derived secret before hashing.</span>
          </span>
        </param>
        <param name="secretAppend">
          <span data-ttu-id="4d8cd-148">A value to append to the derived secret before hashing.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-148">A value to append to the derived secret before hashing.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d8cd-149">Derives bytes that can be used as a key using a hash function, given another party's public key, hash algorithm's name, a prepend value and an append value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-149">Derives bytes that can be used as a key using a hash function, given another party's public key, hash algorithm's name, a prepend value and an append value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d8cd-150">The key material from the key exchange with the other party’s public key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-150">The key material from the key exchange with the other party’s public key.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d8cd-151">如果值`secretPrepend`或是`secretAppend`是`null`，它們會被視為是空陣列。</span><span class="sxs-lookup"><span data-stu-id="4d8cd-151">If the value of `secretPrepend` or `secretAppend` is `null`, they are treated as empty arrays.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4d8cd-152">
            <paramref name="otherPartyPublicKey" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-152">
              <paramref name="otherPartyPublicKey" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4d8cd-153">
            <paramref name="otherPartyPublicKey" /> is not an ECDH key, or it is not the correct size.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-153">
              <paramref name="otherPartyPublicKey" /> is not an ECDH key, or it is not the correct size.</span>
          </span>
          <span data-ttu-id="4d8cd-154">-or-  <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-154">-or-  <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /></span>
          </span>
          <span data-ttu-id="4d8cd-155">is <see langword="null" /> or <see cref="F:System.String.Empty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-155">is <see langword="null" /> or <see cref="F:System.String.Empty" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <span data-ttu-id="4d8cd-156">All other errors.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-156">All other errors.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DeriveKeyFromHmac">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="4d8cd-157">Derives bytes that can be used as a key using a Hash-based Message Authentication Code (HMAC).</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-157">Derives bytes that can be used as a key using a Hash-based Message Authentication Code (HMAC).</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DeriveKeyFromHmac">
      <MemberSignature Language="C#" Value="public override byte[] DeriveKeyFromHmac (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, byte[] hmacKey, byte[] secretPrepend, byte[] secretAppend);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] DeriveKeyFromHmac(class System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm, unsigned int8[] hmacKey, unsigned int8[] secretPrepend, unsigned int8[] secretAppend) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[],System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function DeriveKeyFromHmac (otherPartyPublicKey As ECDiffieHellmanPublicKey, hashAlgorithm As HashAlgorithmName, hmacKey As Byte(), secretPrepend As Byte(), secretAppend As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Byte&gt; ^ DeriveKeyFromHmac(System::Security::Cryptography::ECDiffieHellmanPublicKey ^ otherPartyPublicKey, System::Security::Cryptography::HashAlgorithmName hashAlgorithm, cli::array &lt;System::Byte&gt; ^ hmacKey, cli::array &lt;System::Byte&gt; ^ secretPrepend, cli::array &lt;System::Byte&gt; ^ secretAppend);" />
      <MemberSignature Language="F#" Value="override this.DeriveKeyFromHmac : System.Security.Cryptography.ECDiffieHellmanPublicKey * System.Security.Cryptography.HashAlgorithmName * byte[] * byte[] * byte[] -&gt; byte[]" Usage="eCDiffieHellmanCng.DeriveKeyFromHmac (otherPartyPublicKey, hashAlgorithm, hmacKey, secretPrepend, secretAppend)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherPartyPublicKey" Type="System.Security.Cryptography.ECDiffieHellmanPublicKey" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" />
        <Parameter Name="hmacKey" Type="System.Byte[]" />
        <Parameter Name="secretPrepend" Type="System.Byte[]" />
        <Parameter Name="secretAppend" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="otherPartyPublicKey">
          <span data-ttu-id="4d8cd-158">The other party's public key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-158">The other party's public key.</span>
          </span>
        </param>
        <param name="hashAlgorithm">
          <span data-ttu-id="4d8cd-159">The hash algorithm to use to derive the key material.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-159">The hash algorithm to use to derive the key material.</span>
          </span>
        </param>
        <param name="hmacKey">
          <span data-ttu-id="4d8cd-160">The key for the HMAC.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-160">The key for the HMAC.</span>
          </span>
        </param>
        <param name="secretPrepend">
          <span data-ttu-id="4d8cd-161">A value to prepend to the derived secret before hashing.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-161">A value to prepend to the derived secret before hashing.</span>
          </span>
        </param>
        <param name="secretAppend">
          <span data-ttu-id="4d8cd-162">A value to append to the derived secret before hashing.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-162">A value to append to the derived secret before hashing.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d8cd-163">Derives bytes that can be used as a key using a Hash-based Message Authentication Code (HMAC).</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-163">Derives bytes that can be used as a key using a Hash-based Message Authentication Code (HMAC).</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d8cd-164">The key material from the key exchange with the other party’s public key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-164">The key material from the key exchange with the other party’s public key.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d8cd-165">如果值`secretPrepend`或是`secretAppend`是`null`，它們會被視為是空陣列。</span><span class="sxs-lookup"><span data-stu-id="4d8cd-165">If the value of `secretPrepend` or `secretAppend` is `null`, they are treated as empty arrays.</span></span> <span data-ttu-id="4d8cd-166">如果值`hmacKey`是`null`，Elliptic Curve Diffie-hellman (ECDH) 演算法的結果將用於做為 HMAC 金鑰。</span><span class="sxs-lookup"><span data-stu-id="4d8cd-166">If the value of `hmacKey` is `null`, the result of the Elliptic Curve Diffie-Hellman (ECDH) algorithm will be used as the HMAC key.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4d8cd-167">
            <paramref name="otherPartyPublicKey" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-167">
              <paramref name="otherPartyPublicKey" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4d8cd-168">
            <paramref name="otherPartyPublicKey" /> is not an ECDH key, or it is not the correct size.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-168">
              <paramref name="otherPartyPublicKey" /> is not an ECDH key, or it is not the correct size.</span>
          </span>
          <span data-ttu-id="4d8cd-169">-or-  <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-169">-or-  <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /></span>
          </span>
          <span data-ttu-id="4d8cd-170">is <see langword="null" /> or <see cref="F:System.String.Empty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-170">is <see langword="null" /> or <see cref="F:System.String.Empty" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <span data-ttu-id="4d8cd-171">All other errors.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-171">All other errors.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DeriveKeyMaterial">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="4d8cd-172">Derives the key material that is generated from the secret agreement between two parties.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-172">Derives the key material that is generated from the secret agreement between two parties.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d8cd-173">Elliptic Curve Diffie-hellman (ECDH) 演算法可接受的私用金鑰和其他一方的公開金鑰，做為輸入，並會產生密碼協議做為輸出。</span><span class="sxs-lookup"><span data-stu-id="4d8cd-173">The Elliptic Curve Diffie-Hellman (ECDH) algorithm accepts the private key and the other party’s public key as input, and produces the secret agreement as output.</span></span> <span data-ttu-id="4d8cd-174">金鑰衍生函式 (KDF) 再接受密碼協議，並產生金鑰內容，做為輸出。</span><span class="sxs-lookup"><span data-stu-id="4d8cd-174">The key derivation function (KDF) then takes the secret agreement and produces the key material as output.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="DeriveKeyMaterial">
      <MemberSignature Language="C#" Value="public byte[] DeriveKeyMaterial (System.Security.Cryptography.CngKey otherPartyPublicKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] DeriveKeyMaterial(class System.Security.Cryptography.CngKey otherPartyPublicKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyMaterial(System.Security.Cryptography.CngKey)" />
      <MemberSignature Language="VB.NET" Value="Public Function DeriveKeyMaterial (otherPartyPublicKey As CngKey) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ DeriveKeyMaterial(System::Security::Cryptography::CngKey ^ otherPartyPublicKey);" />
      <MemberSignature Language="F#" Value="override this.DeriveKeyMaterial : System.Security.Cryptography.CngKey -&gt; byte[]" Usage="eCDiffieHellmanCng.DeriveKeyMaterial otherPartyPublicKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherPartyPublicKey" Type="System.Security.Cryptography.CngKey" />
      </Parameters>
      <Docs>
        <param name="otherPartyPublicKey">
          <span data-ttu-id="4d8cd-175">An object that contains the public part of the Elliptic Curve Diffie-Hellman (ECDH) key from the other party in the key exchange.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-175">An object that contains the public part of the Elliptic Curve Diffie-Hellman (ECDH) key from the other party in the key exchange.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d8cd-176">Derives the key material that is generated from the secret agreement between two parties, given a <see cref="T:System.Security.Cryptography.CngKey" /> object that contains the second party's public key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-176">Derives the key material that is generated from the secret agreement between two parties, given a <see cref="T:System.Security.Cryptography.CngKey" /> object that contains the second party's public key.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d8cd-177">A byte array that contains the key material.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-177">A byte array that contains the key material.</span>
          </span>
          <span data-ttu-id="4d8cd-178">This information is generated from the secret agreement that is calculated from the current object's private key and the specified public key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-178">This information is generated from the secret agreement that is calculated from the current object's private key and the specified public key.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4d8cd-179">
            <paramref name="otherPartyPublicKey" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-179">
              <paramref name="otherPartyPublicKey" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4d8cd-180">
            <paramref name="otherPartyPublicKey" /> is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-180">
              <paramref name="otherPartyPublicKey" /> is invalid.</span>
          </span>
          <span data-ttu-id="4d8cd-181">Either its <see cref="P:System.Security.Cryptography.CngKey.AlgorithmGroup" /> property does not specify <see cref="P:System.Security.Cryptography.CngAlgorithmGroup.ECDiffieHellman" /> or its key size does not match the key size of this instance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-181">Either its <see cref="P:System.Security.Cryptography.CngKey.AlgorithmGroup" /> property does not specify <see cref="P:System.Security.Cryptography.CngAlgorithmGroup.ECDiffieHellman" /> or its key size does not match the key size of this instance.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="4d8cd-182">This object's <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction" /> property specifies the <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls" /> key derivation function, but either <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.Label" /> or <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.Seed" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-182">This object's <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction" /> property specifies the <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls" /> key derivation function, but either <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.Label" /> or <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.Seed" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <span data-ttu-id="4d8cd-183">All other errors.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-183">All other errors.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="DeriveKeyMaterial">
      <MemberSignature Language="C#" Value="public override byte[] DeriveKeyMaterial (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] DeriveKeyMaterial(class System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyMaterial(System.Security.Cryptography.ECDiffieHellmanPublicKey)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function DeriveKeyMaterial (otherPartyPublicKey As ECDiffieHellmanPublicKey) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Byte&gt; ^ DeriveKeyMaterial(System::Security::Cryptography::ECDiffieHellmanPublicKey ^ otherPartyPublicKey);" />
      <MemberSignature Language="F#" Value="override this.DeriveKeyMaterial : System.Security.Cryptography.ECDiffieHellmanPublicKey -&gt; byte[]" Usage="eCDiffieHellmanCng.DeriveKeyMaterial otherPartyPublicKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherPartyPublicKey" Type="System.Security.Cryptography.ECDiffieHellmanPublicKey" />
      </Parameters>
      <Docs>
        <param name="otherPartyPublicKey">
          <span data-ttu-id="4d8cd-184">The public key from the other party in the key exchange.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-184">The public key from the other party in the key exchange.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d8cd-185">Derives the key material that is generated from the secret agreement between two parties, given an <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> object that contains the second party's public key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-185">Derives the key material that is generated from the secret agreement between two parties, given an <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> object that contains the second party's public key.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d8cd-186">A byte array that contains the key material.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-186">A byte array that contains the key material.</span>
          </span>
          <span data-ttu-id="4d8cd-187">This information is generated from the secret agreement that is calculated from the current object's private key and the specified public key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-187">This information is generated from the secret agreement that is calculated from the current object's private key and the specified public key.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4d8cd-188">
            <paramref name="otherPartyPublicKey" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-188">
              <paramref name="otherPartyPublicKey" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4d8cd-189">
            <paramref name="otherPartyPublicKey" /> is not an <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" /> key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-189">
              <paramref name="otherPartyPublicKey" /> is not an <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" /> key.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="DeriveKeyTls">
      <MemberSignature Language="C#" Value="public override byte[] DeriveKeyTls (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, byte[] prfLabel, byte[] prfSeed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] DeriveKeyTls(class System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, unsigned int8[] prfLabel, unsigned int8[] prfSeed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyTls(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Byte[],System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function DeriveKeyTls (otherPartyPublicKey As ECDiffieHellmanPublicKey, prfLabel As Byte(), prfSeed As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Byte&gt; ^ DeriveKeyTls(System::Security::Cryptography::ECDiffieHellmanPublicKey ^ otherPartyPublicKey, cli::array &lt;System::Byte&gt; ^ prfLabel, cli::array &lt;System::Byte&gt; ^ prfSeed);" />
      <MemberSignature Language="F#" Value="override this.DeriveKeyTls : System.Security.Cryptography.ECDiffieHellmanPublicKey * byte[] * byte[] -&gt; byte[]" Usage="eCDiffieHellmanCng.DeriveKeyTls (otherPartyPublicKey, prfLabel, prfSeed)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherPartyPublicKey" Type="System.Security.Cryptography.ECDiffieHellmanPublicKey" />
        <Parameter Name="prfLabel" Type="System.Byte[]" />
        <Parameter Name="prfSeed" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="otherPartyPublicKey">
          <span data-ttu-id="4d8cd-190">The other party's public key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-190">The other party's public key.</span>
          </span>
        </param>
        <param name="prfLabel">
          <span data-ttu-id="4d8cd-191">The ASCII-encoded PRF label.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-191">The ASCII-encoded PRF label.</span>
          </span>
        </param>
        <param name="prfSeed">
          <span data-ttu-id="4d8cd-192">The 64-byte PRF seed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-192">The 64-byte PRF seed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d8cd-193">Derives bytes that can be used as a key using a Transport Layer Security (TLS) Pseudo-Random Function (PRF) derivation algorithm.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-193">Derives bytes that can be used as a key using a Transport Layer Security (TLS) Pseudo-Random Function (PRF) derivation algorithm.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d8cd-194">The key material from the key exchange with the other party’s public key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-194">The key material from the key exchange with the other party’s public key.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4d8cd-195">
            <paramref name="otherPartyPublicKey" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-195">
              <paramref name="otherPartyPublicKey" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="4d8cd-196">-or-  <paramref name="prfLabel" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-196">-or-  <paramref name="prfLabel" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="4d8cd-197">-or-  <paramref name="prfSeed" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-197">-or-  <paramref name="prfSeed" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4d8cd-198">
            <paramref name="otherPartyPublicKey" /> is not an ECDH key, or it is not the correct size.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-198">
              <paramref name="otherPartyPublicKey" /> is not an ECDH key, or it is not the correct size.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <span data-ttu-id="4d8cd-199">
            <paramref name="prfSeed" /> is not exactly 64 bytes in length.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-199">
              <paramref name="prfSeed" /> is not exactly 64 bytes in length.</span>
          </span>
          <span data-ttu-id="4d8cd-200">-or-  All other cryptographic errors.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-200">-or-  All other cryptographic errors.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DeriveSecretAgreementHandle">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="4d8cd-201">Gets a handle to the secret agreement generated between two parties.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-201">Gets a handle to the secret agreement generated between two parties.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d8cd-202"><xref:System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle%2A>方法多載是針對需要原始密碼協議，而不是將金鑰內容的控制代碼的進階使用者。</span><span class="sxs-lookup"><span data-stu-id="4d8cd-202">The <xref:System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle%2A> method overloads are for advanced users who need a handle to the raw secret agreement instead of the key material.</span></span> <span data-ttu-id="4d8cd-203">密碼協議的控制代碼可用於平台叫用呼叫的工作，不會由包裝<xref:System.Security.Cryptography.ECDiffieHellmanCng>類別。</span><span class="sxs-lookup"><span data-stu-id="4d8cd-203">The secret agreement handle can be used in platform invoke calls to perform any work that is not wrapped by the <xref:System.Security.Cryptography.ECDiffieHellmanCng> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="DeriveSecretAgreementHandle">
      <MemberSignature Language="C#" Value="public Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle DeriveSecretAgreementHandle (System.Security.Cryptography.CngKey otherPartyPublicKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle DeriveSecretAgreementHandle(class System.Security.Cryptography.CngKey otherPartyPublicKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle(System.Security.Cryptography.CngKey)" />
      <MemberSignature Language="VB.NET" Value="Public Function DeriveSecretAgreementHandle (otherPartyPublicKey As CngKey) As SafeNCryptSecretHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Win32::SafeHandles::SafeNCryptSecretHandle ^ DeriveSecretAgreementHandle(System::Security::Cryptography::CngKey ^ otherPartyPublicKey);" />
      <MemberSignature Language="F#" Value="member this.DeriveSecretAgreementHandle : System.Security.Cryptography.CngKey -&gt; Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle" Usage="eCDiffieHellmanCng.DeriveSecretAgreementHandle otherPartyPublicKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherPartyPublicKey" Type="System.Security.Cryptography.CngKey" />
      </Parameters>
      <Docs>
        <param name="otherPartyPublicKey">
          <span data-ttu-id="4d8cd-204">An object that contains the public part of the Elliptic Curve Diffie-Hellman (ECDH) key from the other party in the key exchange.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-204">An object that contains the public part of the Elliptic Curve Diffie-Hellman (ECDH) key from the other party in the key exchange.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d8cd-205">Gets a handle to the secret agreement generated between two parties, given a <see cref="T:System.Security.Cryptography.CngKey" /> object that contains the second party's public key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-205">Gets a handle to the secret agreement generated between two parties, given a <see cref="T:System.Security.Cryptography.CngKey" /> object that contains the second party's public key.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d8cd-206">A handle to the secret agreement.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-206">A handle to the secret agreement.</span>
          </span>
          <span data-ttu-id="4d8cd-207">This information is calculated from the current object's private key and the specified public key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-207">This information is calculated from the current object's private key and the specified public key.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4d8cd-208">
            <paramref name="otherPartyPublicKey" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-208">
              <paramref name="otherPartyPublicKey" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4d8cd-209">
            <paramref name="otherPartyPublicKey" /> is not an ECDH key, or it is not the correct size.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-209">
              <paramref name="otherPartyPublicKey" /> is not an ECDH key, or it is not the correct size.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <span data-ttu-id="4d8cd-210">All other errors.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-210">All other errors.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="4d8cd-211">呼叫 unmanaged 程式碼的權限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-211">for permission to call unmanaged code.</span>
          </span>
          <span data-ttu-id="4d8cd-212">要求值： <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-212">Demand value: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span>
          </span>
          <span data-ttu-id="4d8cd-213">相關聯的列舉型別： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-213">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="DeriveSecretAgreementHandle">
      <MemberSignature Language="C#" Value="public Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle DeriveSecretAgreementHandle (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle DeriveSecretAgreementHandle(class System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle(System.Security.Cryptography.ECDiffieHellmanPublicKey)" />
      <MemberSignature Language="VB.NET" Value="Public Function DeriveSecretAgreementHandle (otherPartyPublicKey As ECDiffieHellmanPublicKey) As SafeNCryptSecretHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Win32::SafeHandles::SafeNCryptSecretHandle ^ DeriveSecretAgreementHandle(System::Security::Cryptography::ECDiffieHellmanPublicKey ^ otherPartyPublicKey);" />
      <MemberSignature Language="F#" Value="member this.DeriveSecretAgreementHandle : System.Security.Cryptography.ECDiffieHellmanPublicKey -&gt; Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle" Usage="eCDiffieHellmanCng.DeriveSecretAgreementHandle otherPartyPublicKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherPartyPublicKey" Type="System.Security.Cryptography.ECDiffieHellmanPublicKey" />
      </Parameters>
      <Docs>
        <param name="otherPartyPublicKey">
          <span data-ttu-id="4d8cd-214">The public key from the other party in the key exchange.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-214">The public key from the other party in the key exchange.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d8cd-215">Gets a handle to the secret agreement generated between two parties, given an <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> object that contains the second party's public key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-215">Gets a handle to the secret agreement generated between two parties, given an <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> object that contains the second party's public key.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d8cd-216">A handle to the secret agreement.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-216">A handle to the secret agreement.</span>
          </span>
          <span data-ttu-id="4d8cd-217">This information is calculated from the current object's private key and the specified public key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-217">This information is calculated from the current object's private key and the specified public key.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4d8cd-218">
            <paramref name="otherPartyPublicKey" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-218">
              <paramref name="otherPartyPublicKey" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4d8cd-219">
            <paramref name="otherPartyPublicKey" /> is not an <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-219">
              <paramref name="otherPartyPublicKey" /> is not an <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> key.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="eCDiffieHellmanCng.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExportExplicitParameters">
      <MemberSignature Language="C#" Value="public override System.Security.Cryptography.ECParameters ExportExplicitParameters (bool includePrivateParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.Security.Cryptography.ECParameters ExportExplicitParameters(bool includePrivateParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.ExportExplicitParameters(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ExportExplicitParameters (includePrivateParameters As Boolean) As ECParameters" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Security::Cryptography::ECParameters ExportExplicitParameters(bool includePrivateParameters);" />
      <MemberSignature Language="F#" Value="override this.ExportExplicitParameters : bool -&gt; System.Security.Cryptography.ECParameters" Usage="eCDiffieHellmanCng.ExportExplicitParameters includePrivateParameters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.ECParameters</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="includePrivateParameters" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="includePrivateParameters">
          <span data-ttu-id="4d8cd-220">
            <see langword="true" /> to include private parameters; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-220">
              <see langword="true" /> to include private parameters; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d8cd-221">Exports the key and explicit curve parameters used by the <see cref="T:System.Security.Cryptography.ECCurve" /> object into an <see cref="T:System.Security.Cryptography.ECParameters" /> object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-221">Exports the key and explicit curve parameters used by the <see cref="T:System.Security.Cryptography.ECCurve" /> object into an <see cref="T:System.Security.Cryptography.ECParameters" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d8cd-222">The key and explicit curve parameters used by the <see cref="T:System.Security.Cryptography.ECCurve" /> object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-222">The key and explicit curve parameters used by the <see cref="T:System.Security.Cryptography.ECCurve" /> object.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <span data-ttu-id="4d8cd-223">The method cannot obtain curve values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-223">The method cannot obtain curve values.</span>
          </span>
        </exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="4d8cd-224">Explicit export is not supported by this platform.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-224">Explicit export is not supported by this platform.</span>
          </span>
          <span data-ttu-id="4d8cd-225">Windows 10 or higher is required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-225">Windows 10 or higher is required.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ExportParameters">
      <MemberSignature Language="C#" Value="public override System.Security.Cryptography.ECParameters ExportParameters (bool includePrivateParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.Security.Cryptography.ECParameters ExportParameters(bool includePrivateParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.ExportParameters(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ExportParameters (includePrivateParameters As Boolean) As ECParameters" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Security::Cryptography::ECParameters ExportParameters(bool includePrivateParameters);" />
      <MemberSignature Language="F#" Value="override this.ExportParameters : bool -&gt; System.Security.Cryptography.ECParameters" Usage="eCDiffieHellmanCng.ExportParameters includePrivateParameters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.ECParameters</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="includePrivateParameters" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="includePrivateParameters">
          <span data-ttu-id="4d8cd-226">
            <see langword="true" /> to include private parameters; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-226">
              <see langword="true" /> to include private parameters; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d8cd-227">Exports the key used by the <see cref="T:System.Security.Cryptography.ECCurve" /> object into an <see cref="T:System.Security.Cryptography.ECParameters" /> object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-227">Exports the key used by the <see cref="T:System.Security.Cryptography.ECCurve" /> object into an <see cref="T:System.Security.Cryptography.ECParameters" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d8cd-228">The key and named curve parameters used by the <see cref="T:System.Security.Cryptography.ECCurve" /> object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-228">The key and named curve parameters used by the <see cref="T:System.Security.Cryptography.ECCurve" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d8cd-229">如果索引鍵已建立具名曲線，為<xref:System.Security.Cryptography.ECParameters.Curve?displayProperty=nameWithType>欄位包含具名的曲線參數。         否則，它會包含明確的參數。</span><span class="sxs-lookup"><span data-stu-id="4d8cd-229">If the key was created as a named curve, the <xref:System.Security.Cryptography.ECParameters.Curve?displayProperty=nameWithType> field contains named curve parameters;          otherwise,  it contains explicit parameters.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <span data-ttu-id="4d8cd-230">The method cannot obtain curve values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-230">The method cannot obtain curve values.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="FromXmlString">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="4d8cd-231">Deserializes the key information from an XML string.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-231">Deserializes the key information from an XML string.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FromXmlString">
      <MemberSignature Language="C#" Value="public override void FromXmlString (string xmlString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void FromXmlString(string xmlString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub FromXmlString (xmlString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void FromXmlString(System::String ^ xmlString);" />
      <MemberSignature Language="F#" Value="abstract member FromXmlString : string -&gt; unit&#xA;override this.FromXmlString : string -&gt; unit" Usage="eCDiffieHellmanCng.FromXmlString xmlString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xmlString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="xmlString">
          <span data-ttu-id="4d8cd-232">The XML-based key information to be deserialized.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-232">The XML-based key information to be deserialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d8cd-233">This method is not implemented.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-233">This method is not implemented.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d8cd-234">若要還原序列化的 XML 索引鍵，使用<xref:System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString%28System.String%2CSystem.Security.Cryptography.ECKeyXmlFormat%29>改為多載。</span><span class="sxs-lookup"><span data-stu-id="4d8cd-234">To deserialize an XML key, use the <xref:System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString%28System.String%2CSystem.Security.Cryptography.ECKeyXmlFormat%29> overload instead.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="4d8cd-235">This method was not overridden for this instance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-235">This method was not overridden for this instance.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="FromXmlString">
      <MemberSignature Language="C#" Value="public void FromXmlString (string xml, System.Security.Cryptography.ECKeyXmlFormat format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FromXmlString(string xml, valuetype System.Security.Cryptography.ECKeyXmlFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString(System.String,System.Security.Cryptography.ECKeyXmlFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FromXmlString (xml As String, format As ECKeyXmlFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FromXmlString(System::String ^ xml, System::Security::Cryptography::ECKeyXmlFormat format);" />
      <MemberSignature Language="F#" Value="member this.FromXmlString : string * System.Security.Cryptography.ECKeyXmlFormat -&gt; unit" Usage="eCDiffieHellmanCng.FromXmlString (xml, format)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xml" Type="System.String" />
        <Parameter Name="format" Type="System.Security.Cryptography.ECKeyXmlFormat" />
      </Parameters>
      <Docs>
        <param name="xml">
          <span data-ttu-id="4d8cd-236">The XML-based key information to be deserialized.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-236">The XML-based key information to be deserialized.</span>
          </span>
        </param>
        <param name="format">
          <span data-ttu-id="4d8cd-237">One of the enumeration values that specifies the format of the XML string.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-237">One of the enumeration values that specifies the format of the XML string.</span>
          </span>
          <span data-ttu-id="4d8cd-238">The only currently accepted format is <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-238">The only currently accepted format is <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d8cd-239">Deserializes the key information from an XML string by using the specified format.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-239">Deserializes the key information from an XML string by using the specified format.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4d8cd-240">
            <paramref name="xml" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-240">
              <paramref name="xml" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4d8cd-241">
            <paramref name="xml" /> is malformed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-241">
              <paramref name="xml" /> is malformed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="4d8cd-242">
            <paramref name="format" /> specifies an invalid format.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-242">
              <paramref name="format" /> specifies an invalid format.</span>
          </span>
          <span data-ttu-id="4d8cd-243">The only accepted value is <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-243">The only accepted value is <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <span data-ttu-id="4d8cd-244">All other errors.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-244">All other errors.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GenerateKey">
      <MemberSignature Language="C#" Value="public override void GenerateKey (System.Security.Cryptography.ECCurve curve);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void GenerateKey(valuetype System.Security.Cryptography.ECCurve curve) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.GenerateKey(System.Security.Cryptography.ECCurve)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub GenerateKey (curve As ECCurve)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void GenerateKey(System::Security::Cryptography::ECCurve curve);" />
      <MemberSignature Language="F#" Value="override this.GenerateKey : System.Security.Cryptography.ECCurve -&gt; unit" Usage="eCDiffieHellmanCng.GenerateKey curve" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="curve" Type="System.Security.Cryptography.ECCurve" />
      </Parameters>
      <Docs>
        <param name="curve">
          <span data-ttu-id="4d8cd-245">The curve used to generate an ephemeral public/private key pair.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-245">The curve used to generate an ephemeral public/private key pair.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d8cd-246">Generates a new ephemeral public/private key pair for the specified curve.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-246">Generates a new ephemeral public/private key pair for the specified curve.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d8cd-247">`curve` 必須驗證 (也就是它必須傳回 true 時傳遞至<xref:System.Security.Cryptography.ECCurve.Validate%2A?displayProperty=nameWithType>方法)，且不得為隱含。</span><span class="sxs-lookup"><span data-stu-id="4d8cd-247">`curve` must validate (that is, it must return true when passed to the <xref:System.Security.Cryptography.ECCurve.Validate%2A?displayProperty=nameWithType> method) and must not be implicit.</span></span>  
  
 <span data-ttu-id="4d8cd-248">在 Windows 上不支援的特性 2 曲線。</span><span class="sxs-lookup"><span data-stu-id="4d8cd-248">Characteristic-2 curves are not supported on Windows.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <span data-ttu-id="4d8cd-249">
            <paramref name="curve" /> does not validate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-249">
              <paramref name="curve" /> does not validate.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="HashAlgorithm">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.CngAlgorithm HashAlgorithm { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.CngAlgorithm HashAlgorithm" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm" />
      <MemberSignature Language="VB.NET" Value="Public Property HashAlgorithm As CngAlgorithm" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Cryptography::CngAlgorithm ^ HashAlgorithm { System::Security::Cryptography::CngAlgorithm ^ get(); void set(System::Security::Cryptography::CngAlgorithm ^ value); };" />
      <MemberSignature Language="F#" Value="member this.HashAlgorithm : System.Security.Cryptography.CngAlgorithm with get, set" Usage="System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.CngAlgorithm</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4d8cd-250">Gets or sets the hash algorithm to use when generating key material.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-250">Gets or sets the hash algorithm to use when generating key material.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4d8cd-251">指定的雜湊演算法的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-251">An object that specifies the hash algorithm.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d8cd-252">這個屬性由 Cryptography Next Generation (CNG) 物件才<xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash>或是<xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac>值會設定<xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="4d8cd-252">This property is used by Cryptography Next Generation (CNG) objects only if the <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash> or <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac> value is set in the <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> property.</span></span>  
  
 <span data-ttu-id="4d8cd-253">此屬性接受下列演算法： <xref:System.Security.Cryptography.CngAlgorithm.MD5%2A>， <xref:System.Security.Cryptography.CngAlgorithm.Sha1%2A>， <xref:System.Security.Cryptography.CngAlgorithm.Sha256%2A>， <xref:System.Security.Cryptography.CngAlgorithm.Sha384%2A>，和<xref:System.Security.Cryptography.CngAlgorithm.Sha512%2A>。</span><span class="sxs-lookup"><span data-stu-id="4d8cd-253">This property accepts the following algorithms: <xref:System.Security.Cryptography.CngAlgorithm.MD5%2A>, <xref:System.Security.Cryptography.CngAlgorithm.Sha1%2A>, <xref:System.Security.Cryptography.CngAlgorithm.Sha256%2A>, <xref:System.Security.Cryptography.CngAlgorithm.Sha384%2A>, and <xref:System.Security.Cryptography.CngAlgorithm.Sha512%2A>.</span></span>  
  
 <span data-ttu-id="4d8cd-254">也可能使用其他自訂的雜湊演算法。</span><span class="sxs-lookup"><span data-stu-id="4d8cd-254">Other custom hash algorithms may also be used.</span></span>  
  
 <span data-ttu-id="4d8cd-255">預設的演算法是<xref:System.Security.Cryptography.CngAlgorithm.Sha256%2A>。</span><span class="sxs-lookup"><span data-stu-id="4d8cd-255">The default algorithm is <xref:System.Security.Cryptography.CngAlgorithm.Sha256%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4d8cd-256">The value is <see langword="null." /></span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-256">The value is <see langword="null." /></span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="HmacKey">
      <MemberSignature Language="C#" Value="public byte[] HmacKey { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] HmacKey" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.ECDiffieHellmanCng.HmacKey" />
      <MemberSignature Language="VB.NET" Value="Public Property HmacKey As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ HmacKey { cli::array &lt;System::Byte&gt; ^ get(); void set(cli::array &lt;System::Byte&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.HmacKey : byte[] with get, set" Usage="System.Security.Cryptography.ECDiffieHellmanCng.HmacKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4d8cd-257">Gets or sets the Hash-based Message Authentication Code (HMAC) key to use when deriving key material.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-257">Gets or sets the Hash-based Message Authentication Code (HMAC) key to use when deriving key material.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4d8cd-258">要使用衍生金鑰內容時的雜湊式訊息驗證碼 (HMAC) 金鑰。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-258">The Hash-based Message Authentication Code (HMAC) key to use when deriving key material.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d8cd-259">這個屬性時，才適用<xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac>值會設定<xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A>屬性，而<xref:System.Security.Cryptography.ECDiffieHellmanCng.UseSecretAgreementAsHmacKey%2A>屬性是`false`。</span><span class="sxs-lookup"><span data-stu-id="4d8cd-259">This property applies only when the <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac> value is set in the <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> property, and the <xref:System.Security.Cryptography.ECDiffieHellmanCng.UseSecretAgreementAsHmacKey%2A> property is `false`.</span></span> <span data-ttu-id="4d8cd-260">預設值為 `null`。</span><span class="sxs-lookup"><span data-stu-id="4d8cd-260">By default, the value is `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImportParameters">
      <MemberSignature Language="C#" Value="public override void ImportParameters (System.Security.Cryptography.ECParameters parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ImportParameters(valuetype System.Security.Cryptography.ECParameters parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.ImportParameters(System.Security.Cryptography.ECParameters)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub ImportParameters (parameters As ECParameters)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void ImportParameters(System::Security::Cryptography::ECParameters parameters);" />
      <MemberSignature Language="F#" Value="override this.ImportParameters : System.Security.Cryptography.ECParameters -&gt; unit" Usage="eCDiffieHellmanCng.ImportParameters parameters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="System.Security.Cryptography.ECParameters" />
      </Parameters>
      <Docs>
        <param name="parameters">
          <span data-ttu-id="4d8cd-261">The curve's parameters to import.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-261">The curve's parameters to import.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d8cd-262">Imports the specified parameters for an <see cref="T:System.Security.Cryptography.ECCurve" /> object as a key into the current instance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-262">Imports the specified parameters for an <see cref="T:System.Security.Cryptography.ECCurve" /> object as a key into the current instance.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d8cd-263"><xref:System.Security.Cryptography.ECDiffieHellmanCng.ImportParameters%2A>方法會取代現有的金鑰，這個物件使用藉由建立新<xref:System.Security.Cryptography.CngKey>物件。</span><span class="sxs-lookup"><span data-stu-id="4d8cd-263">The <xref:System.Security.Cryptography.ECDiffieHellmanCng.ImportParameters%2A> method replaces the existing key that this object is working with by creating a         new <xref:System.Security.Cryptography.CngKey> object.</span></span> <span data-ttu-id="4d8cd-264">如果`parameters`僅包含<xref:System.Security.Cryptography.ECParameters.Q>欄位，則只是公開金鑰匯入。</span><span class="sxs-lookup"><span data-stu-id="4d8cd-264">If `parameters` contains only the <xref:System.Security.Cryptography.ECParameters.Q> field, then only a public key is imported.</span></span>         <span data-ttu-id="4d8cd-265">如果`parameters`也包含<xref:System.Security.Cryptography.ECParameters.D>，則會匯入完整金鑰組。</span><span class="sxs-lookup"><span data-stu-id="4d8cd-265">If `parameters` also contains <xref:System.Security.Cryptography.ECParameters.D>, then a full key pair is be imported.</span></span> <span data-ttu-id="4d8cd-266">`parameter` <xref:System.Security.Cryptography.ECParameters.Curve>值會指定要匯入的曲線類型。</span><span class="sxs-lookup"><span data-stu-id="4d8cd-266">The `parameter` <xref:System.Security.Cryptography.ECParameters.Curve> value specifies the type of the curve to import.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <span data-ttu-id="4d8cd-267">
            <paramref name="parameters" /> does not validate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-267">
              <paramref name="parameters" /> does not validate.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="4d8cd-268">
            <paramref name="parameters" /> references a curve that cannot be imported..</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-268">
              <paramref name="parameters" /> references a curve that cannot be imported..</span>
          </span>
        </exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="4d8cd-269">
            <paramref name="parameters" /> references a curve that is not supported by this platform.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-269">
              <paramref name="parameters" /> references a curve that is not supported by this platform.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Key">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.CngKey Key { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.CngKey Key" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.ECDiffieHellmanCng.Key" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Key As CngKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Cryptography::CngKey ^ Key { System::Security::Cryptography::CngKey ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Key : System.Security.Cryptography.CngKey" Usage="System.Security.Cryptography.ECDiffieHellmanCng.Key" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.CngKey</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4d8cd-270">Specifies the <see cref="T:System.Security.Cryptography.CngKey" /> that is used by the current object for cryptographic operations.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-270">Specifies the <see cref="T:System.Security.Cryptography.CngKey" /> that is used by the current object for cryptographic operations.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4d8cd-271">執行密碼編譯作業，這個物件所使用的金鑰組。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-271">The key pair used by this object to perform cryptographic operations.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyDerivationFunction">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction KeyDerivationFunction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction KeyDerivationFunction" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction" />
      <MemberSignature Language="VB.NET" Value="Public Property KeyDerivationFunction As ECDiffieHellmanKeyDerivationFunction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Cryptography::ECDiffieHellmanKeyDerivationFunction KeyDerivationFunction { System::Security::Cryptography::ECDiffieHellmanKeyDerivationFunction get(); void set(System::Security::Cryptography::ECDiffieHellmanKeyDerivationFunction value); };" />
      <MemberSignature Language="F#" Value="member this.KeyDerivationFunction : System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction with get, set" Usage="System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4d8cd-272">Gets or sets the key derivation function for the <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-272">Gets or sets the key derivation function for the <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> class.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4d8cd-273">其中一個<see cref="T:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction" />列舉值： <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash" />， <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac" />，或<see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-273">One of the <see cref="T:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction" /> enumeration values: <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash" />, <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac" />, or <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls" />.</span>
          </span>
          <span data-ttu-id="4d8cd-274">預設值是 <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-274">The default value is <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d8cd-275">此屬性會指定用來轉換成金鑰內容的密碼協議的金鑰衍生函式。</span><span class="sxs-lookup"><span data-stu-id="4d8cd-275">This property specifies the key derivation function that is used to transform the secret agreement into key material.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="4d8cd-276">The enumeration value is out of range.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-276">The enumeration value is out of range.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Label">
      <MemberSignature Language="C#" Value="public byte[] Label { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] Label" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.ECDiffieHellmanCng.Label" />
      <MemberSignature Language="VB.NET" Value="Public Property Label As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ Label { cli::array &lt;System::Byte&gt; ^ get(); void set(cli::array &lt;System::Byte&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Label : byte[] with get, set" Usage="System.Security.Cryptography.ECDiffieHellmanCng.Label" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4d8cd-277">Gets or sets the label value that is used for key derivation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-277">Gets or sets the label value that is used for key derivation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4d8cd-278">標籤值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-278">The label value.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d8cd-279">如果使用此值的金鑰衍生<xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls>值會設定<xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="4d8cd-279">This value is used for key derivation if the <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls> value is set in the <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> property.</span></span> <span data-ttu-id="4d8cd-280">根據預設，它是`null`。</span><span class="sxs-lookup"><span data-stu-id="4d8cd-280">By default, it is `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PublicKey">
      <MemberSignature Language="C#" Value="public override System.Security.Cryptography.ECDiffieHellmanPublicKey PublicKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.ECDiffieHellmanPublicKey PublicKey" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.ECDiffieHellmanCng.PublicKey" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property PublicKey As ECDiffieHellmanPublicKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Security::Cryptography::ECDiffieHellmanPublicKey ^ PublicKey { System::Security::Cryptography::ECDiffieHellmanPublicKey ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PublicKey : System.Security.Cryptography.ECDiffieHellmanPublicKey" Usage="System.Security.Cryptography.ECDiffieHellmanCng.PublicKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.ECDiffieHellmanPublicKey</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4d8cd-281">Gets the public key that can be used by another <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> object to generate a shared secret agreement.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-281">Gets the public key that can be used by another <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> object to generate a shared secret agreement.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4d8cd-282">與這個執行個體相關聯的公開金鑰<see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" />物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-282">The public key that is associated with this instance of the <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> object.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SecretAppend">
      <MemberSignature Language="C#" Value="public byte[] SecretAppend { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] SecretAppend" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend" />
      <MemberSignature Language="VB.NET" Value="Public Property SecretAppend As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ SecretAppend { cli::array &lt;System::Byte&gt; ^ get(); void set(cli::array &lt;System::Byte&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SecretAppend : byte[] with get, set" Usage="System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4d8cd-283">Gets or sets a value that will be appended to the secret agreement when generating key material.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-283">Gets or sets a value that will be appended to the secret agreement when generating key material.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4d8cd-284">可附加至密碼協議的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-284">The value that is appended to the secret agreement.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d8cd-285">如果使用此值的金鑰衍生<xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash>或<xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac>金鑰衍生函式 (KDF) 可用。</span><span class="sxs-lookup"><span data-stu-id="4d8cd-285">This value is used for key derivation if the <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash> or <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac> key derivation function (KDF) is used.</span></span> <span data-ttu-id="4d8cd-286">值會附加至密碼協議，並結合的值會傳遞至 KDF 來產生金鑰內容。</span><span class="sxs-lookup"><span data-stu-id="4d8cd-286">The value is appended to the secret agreement, and the combined value is passed to the KDF to generate the key material.</span></span> <span data-ttu-id="4d8cd-287">預設值為 `null`。</span><span class="sxs-lookup"><span data-stu-id="4d8cd-287">By default, the value is `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SecretPrepend">
      <MemberSignature Language="C#" Value="public byte[] SecretPrepend { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] SecretPrepend" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend" />
      <MemberSignature Language="VB.NET" Value="Public Property SecretPrepend As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ SecretPrepend { cli::array &lt;System::Byte&gt; ^ get(); void set(cli::array &lt;System::Byte&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SecretPrepend : byte[] with get, set" Usage="System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4d8cd-288">Gets or sets a value that will be added to the beginning of the secret agreement when deriving key material.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-288">Gets or sets a value that will be added to the beginning of the secret agreement when deriving key material.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4d8cd-289">附加至密碼協議金鑰衍生期間的開始值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-289">The value that is appended to the beginning of the secret agreement during key derivation.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d8cd-290">如果使用此值的金鑰衍生<xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A>屬性設定為下列值之一：</span><span class="sxs-lookup"><span data-stu-id="4d8cd-290">This value is used for key derivation if the <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> property is set to one of the following values:</span></span>  
  
-   <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash>  
  
-   <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac>  
  
 <span data-ttu-id="4d8cd-291">值會附加至密碼協議，並結合的值會傳遞至要產生金鑰內容的金鑰衍生函式 (KDF)。</span><span class="sxs-lookup"><span data-stu-id="4d8cd-291">The value is prepended to the secret agreement, and the combined value is passed to the key derivation function (KDF) to generate the key material.</span></span> <span data-ttu-id="4d8cd-292">預設值為 `null`。</span><span class="sxs-lookup"><span data-stu-id="4d8cd-292">By default, the value is `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Seed">
      <MemberSignature Language="C#" Value="public byte[] Seed { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] Seed" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.ECDiffieHellmanCng.Seed" />
      <MemberSignature Language="VB.NET" Value="Public Property Seed As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ Seed { cli::array &lt;System::Byte&gt; ^ get(); void set(cli::array &lt;System::Byte&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Seed : byte[] with get, set" Usage="System.Security.Cryptography.ECDiffieHellmanCng.Seed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4d8cd-293">Gets or sets the seed value that will be used when deriving key material.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-293">Gets or sets the seed value that will be used when deriving key material.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4d8cd-294">種子值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-294">The seed value.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d8cd-295">如果使用此值的金鑰衍生<xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A>屬性設定為<xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls>。</span><span class="sxs-lookup"><span data-stu-id="4d8cd-295">This value is used for key derivation if the <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> property is set to <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls>.</span></span> <span data-ttu-id="4d8cd-296">預設值為 `null`。</span><span class="sxs-lookup"><span data-stu-id="4d8cd-296">By default, the value is `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToXmlString">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="4d8cd-297">Serializes the key information to an XML string.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-297">Serializes the key information to an XML string.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToXmlString">
      <MemberSignature Language="C#" Value="public override string ToXmlString (bool includePrivateParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToXmlString(bool includePrivateParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToXmlString (includePrivateParameters As Boolean) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToXmlString(bool includePrivateParameters);" />
      <MemberSignature Language="F#" Value="abstract member ToXmlString : bool -&gt; string&#xA;override this.ToXmlString : bool -&gt; string" Usage="eCDiffieHellmanCng.ToXmlString includePrivateParameters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="includePrivateParameters" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="includePrivateParameters">
          <span data-ttu-id="4d8cd-298">
            <see langword="true" /> to include private parameters; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-298">
              <see langword="true" /> to include private parameters; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d8cd-299">This method is not implemented.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-299">This method is not implemented.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d8cd-300">Not applicable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-300">Not applicable.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d8cd-301">若要將目前的索引鍵轉換成 XML 表示法中，使用<xref:System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString%28System.Security.Cryptography.ECKeyXmlFormat%29>改為多載。</span><span class="sxs-lookup"><span data-stu-id="4d8cd-301">To convert the current key to an XML representation, use the <xref:System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString%28System.Security.Cryptography.ECKeyXmlFormat%29> overload instead.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="4d8cd-302">This method was not overridden for this instance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-302">This method was not overridden for this instance.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToXmlString">
      <MemberSignature Language="C#" Value="public string ToXmlString (System.Security.Cryptography.ECKeyXmlFormat format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToXmlString(valuetype System.Security.Cryptography.ECKeyXmlFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString(System.Security.Cryptography.ECKeyXmlFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToXmlString (format As ECKeyXmlFormat) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToXmlString(System::Security::Cryptography::ECKeyXmlFormat format);" />
      <MemberSignature Language="F#" Value="member this.ToXmlString : System.Security.Cryptography.ECKeyXmlFormat -&gt; string" Usage="eCDiffieHellmanCng.ToXmlString format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Security.Cryptography.ECKeyXmlFormat" />
      </Parameters>
      <Docs>
        <param name="format">
          <span data-ttu-id="4d8cd-303">One of the enumeration values that specifies the format of the XML string.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-303">One of the enumeration values that specifies the format of the XML string.</span>
          </span>
          <span data-ttu-id="4d8cd-304">The only currently accepted format is <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-304">The only currently accepted format is <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d8cd-305">Serializes the key information to an XML string by using the specified format.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-305">Serializes the key information to an XML string by using the specified format.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d8cd-306">A string object that contains the key information, serialized to an XML string, according to the requested format.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-306">A string object that contains the key information, serialized to an XML string, according to the requested format.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="4d8cd-307">
            <paramref name="format" /> specifies an invalid format.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-307">
              <paramref name="format" /> specifies an invalid format.</span>
          </span>
          <span data-ttu-id="4d8cd-308">The only accepted value is <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-308">The only accepted value is <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="UseSecretAgreementAsHmacKey">
      <MemberSignature Language="C#" Value="public bool UseSecretAgreementAsHmacKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseSecretAgreementAsHmacKey" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.ECDiffieHellmanCng.UseSecretAgreementAsHmacKey" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UseSecretAgreementAsHmacKey As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseSecretAgreementAsHmacKey { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.UseSecretAgreementAsHmacKey : bool" Usage="System.Security.Cryptography.ECDiffieHellmanCng.UseSecretAgreementAsHmacKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4d8cd-309">Gets a value that indicates whether the secret agreement is used as a Hash-based Message Authentication Code (HMAC) key to derive key material.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-309">Gets a value that indicates whether the secret agreement is used as a Hash-based Message Authentication Code (HMAC) key to derive key material.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4d8cd-310">
            <see langword="true" /> 如果密碼協議做為 HMAC 金鑰用來衍生金鑰內容;否則， <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d8cd-310">
              <see langword="true" /> if the secret agreement is used as an HMAC key to derive key material; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
-   <span data-ttu-id="4d8cd-311">如果使用此值的金鑰衍生<xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A>屬性設定為<xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac>。</span><span class="sxs-lookup"><span data-stu-id="4d8cd-311">This value is used for key derivation if the <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> property is set to <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac>.</span></span> <span data-ttu-id="4d8cd-312">預設值為 `false`。</span><span class="sxs-lookup"><span data-stu-id="4d8cd-312">By default, the value is `false`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>