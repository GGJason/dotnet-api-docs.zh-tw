<Type Name="DataProtector" FullName="System.Security.Cryptography.DataProtector">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d4e4bce52f8586be414a74c5308080a771fe7937" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36625340" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class DataProtector" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit DataProtector extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.DataProtector" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class DataProtector" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataProtector abstract" />
  <TypeSignature Language="F#" Value="type DataProtector = class" />
  <AssemblyInfo>
    <AssemblyName>System.Security</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>為資料保護裝置提供基底類別。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個類別會儲存的資料保護檢視和竄改。 受保護資料的存取被透過建立這個類別的執行個體，並使用正確的目的字串用來保護資料。  呼叫端不需要保護，或是取消保護資料的索引鍵。 加密演算法所提供的金鑰。  
  
 在衍生的類別必須覆寫<xref:System.Security.Cryptography.DataProtector.ProviderProtect%2A>和<xref:System.Security.Cryptography.DataProtector.Unprotect%2A>方法，其中<xref:System.Security.Cryptography.DataProtector>基底類別呼叫回。 它們也必須覆寫<xref:System.Security.Cryptography.DataProtector.IsReprotectRequired%2A>方法，可以傳回`true`與潛在喪失些微的效率，當應用程式重新整理其資料庫的預存的加密文字。 衍生的類別必須提供的建構函式呼叫基底類別建構函式，設定<xref:System.Security.Cryptography.DataProtector.ApplicationName%2A>， <xref:System.Security.Cryptography.DataProtector.SpecificPurposes%2A>，和<xref:System.Security.Cryptography.DataProtector.PrimaryPurpose%2A>屬性。  
  
   
  
## Examples  
 下列範例會示範如何建立資料的選項會使用保護類別的額外 entropy 的保護裝置。 根據預設，<xref:System.Security.Cryptography.DataProtector>類別前面加上用途屬性，以加密資料的雜湊。 您可以關閉該功能，並呼叫的額外 entropy 選項，將資料保護裝置時，使用雜湊的用途為額外的 entropy。  
  
 [!code-csharp[Cryptography.DataProtector#1](~/samples/snippets/csharp/VS_Snippets_CLR/cryptography.dataprotector/cs/class1.cs#1)]
 [!code-vb[Cryptography.DataProtector#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/cryptography.dataprotector/vb/class1.vb#1)]  
  
 下列範例會示範簡單資料保護裝置使用<xref:System.Security.Cryptography.DataProtector.PrependHashedPurposeToPlaintext%2A>功能<xref:System.Security.Cryptography.DataProtector>類別。  
  
 [!code-csharp[Cryptography.MemoryProtector#1](~/samples/snippets/csharp/VS_Snippets_CLR/cryptography.memoryprotector/cs/class1.cs#1)]
 [!code-vb[Cryptography.MemoryProtector#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/cryptography.memoryprotector/vb/class1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DataProtector (string applicationName, string primaryPurpose, string[] specificPurposes);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(string applicationName, string primaryPurpose, string[] specificPurposes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DataProtector.#ctor(System.String,System.String,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (applicationName As String, primaryPurpose As String, specificPurposes As String())" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DataProtector(System::String ^ applicationName, System::String ^ primaryPurpose, cli::array &lt;System::String ^&gt; ^ specificPurposes);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.DataProtector : string * string * string[] -&gt; System.Security.Cryptography.DataProtector" Usage="new System.Security.Cryptography.DataProtector (applicationName, primaryPurpose, specificPurposes)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="applicationName" Type="System.String" />
        <Parameter Name="primaryPurpose" Type="System.String" />
        <Parameter Name="specificPurposes" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="applicationName">應用程式的名稱。</param>
        <param name="primaryPurpose">受保護資料的主要目的。</param>
        <param name="specificPurposes">受保護資料之特定用途。</param>
        <summary>使用提供的應用程式名稱、主要用途和特定用途，建立的新執行個體 <see cref="T:System.Security.Cryptography.DataProtector" /> 類別。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個建構函式設定<xref:System.Security.Cryptography.DataProtector.ApplicationName%2A>， <xref:System.Security.Cryptography.DataProtector.PrimaryPurpose%2A>，和<xref:System.Security.Cryptography.DataProtector.SpecificPurposes%2A>屬性。 這三個屬性的組合必須唯一識別您要保護的資料。 如果無法唯一識別資料，您可能會不小心讀取錯誤的資料，或其他資料可能會取代為您自己。 主要和特定目的配對的範例是 「 發票 」 和發票號碼、"禮品卡 」 和禮品卡號、 「 密碼 」 和 URL 字串。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="applicationName" /> 為空字串或 <see langword="null" />。  -或-  <paramref name="primaryPurpose" /> 為空字串或 <see langword="null" />。  -或-  <paramref name="specificPurposes" /> 包含空字串或 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="ApplicationName">
      <MemberSignature Language="C#" Value="protected string ApplicationName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ApplicationName" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.DataProtector.ApplicationName" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property ApplicationName As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::String ^ ApplicationName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ApplicationName : string" Usage="System.Security.Cryptography.DataProtector.ApplicationName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得應用程式的名稱。</summary>
        <value>應用程式的名稱。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.DataProtector Create (string providerClass, string applicationName, string primaryPurpose, params string[] specificPurposes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.DataProtector Create(string providerClass, string applicationName, string primaryPurpose, string[] specificPurposes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DataProtector.Create(System.String,System.String,System.String,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (providerClass As String, applicationName As String, primaryPurpose As String, ParamArray specificPurposes As String()) As DataProtector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::Cryptography::DataProtector ^ Create(System::String ^ providerClass, System::String ^ applicationName, System::String ^ primaryPurpose, ... cli::array &lt;System::String ^&gt; ^ specificPurposes);" />
      <MemberSignature Language="F#" Value="static member Create : string * string * string * string[] -&gt; System.Security.Cryptography.DataProtector" Usage="System.Security.Cryptography.DataProtector.Create (providerClass, applicationName, primaryPurpose, specificPurposes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.DataProtector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="providerClass" Type="System.String" />
        <Parameter Name="applicationName" Type="System.String" />
        <Parameter Name="primaryPurpose" Type="System.String" />
        <Parameter Name="specificPurposes" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="providerClass">資料保護裝置的類別名稱。</param>
        <param name="applicationName">應用程式的名稱。</param>
        <param name="primaryPurpose">受保護資料的主要目的。</param>
        <param name="specificPurposes">受保護資料之特定用途。</param>
        <summary>使用指定的資料保護裝置名稱、應用程式名稱、主要用途和特定用途，建立資料保護裝置實作的執行個體。</summary>
        <returns>資料保護裝置實作物件。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="providerClass" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetHashedPurpose">
      <MemberSignature Language="C#" Value="protected virtual byte[] GetHashedPurpose ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance unsigned int8[] GetHashedPurpose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DataProtector.GetHashedPurpose" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetHashedPurpose () As Byte()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual cli::array &lt;System::Byte&gt; ^ GetHashedPurpose();" />
      <MemberSignature Language="F#" Value="abstract member GetHashedPurpose : unit -&gt; byte[]&#xA;override this.GetHashedPurpose : unit -&gt; byte[]" Usage="dataProtector.GetHashedPurpose " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>建立建構函式所指定之屬性值的雜湊。</summary>
        <returns>包含 <see cref="P:System.Security.Cryptography.DataProtector.ApplicationName" />、<see cref="P:System.Security.Cryptography.DataProtector.PrimaryPurpose" /> 及 <see cref="P:System.Security.Cryptography.DataProtector.SpecificPurposes" /> 屬性之雜湊的位元組陣列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Cryptography.DataProtector.GetHashedPurpose%2A> 計算的雜湊的應用程式名稱和完整的用途。  完整的目的是串連所有<xref:System.Security.Cryptography.DataProtector.PrimaryPurpose%2A>和<xref:System.Security.Cryptography.DataProtector.SpecificPurposes%2A>屬性。  每三個部分前面加上其長度以便能夠反轉雜湊。  
  
   
  
## Examples  
 下列範例示範如何使用<xref:System.Security.Cryptography.DataProtector.GetHashedPurpose%2A>雜湊做為額外的 entropy 的用途屬性的方法。  它是針對較大的程式碼範例的一部分<xref:System.Security.Cryptography.DataProtector>類別。  
  
 [!code-csharp[Cryptography.DataProtector#3](~/samples/snippets/csharp/VS_Snippets_CLR/cryptography.dataprotector/cs/class1.cs#3)]
 [!code-vb[Cryptography.DataProtector#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/cryptography.dataprotector/vb/class1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReprotectRequired">
      <MemberSignature Language="C#" Value="public abstract bool IsReprotectRequired (byte[] encryptedData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsReprotectRequired(unsigned int8[] encryptedData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DataProtector.IsReprotectRequired(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function IsReprotectRequired (encryptedData As Byte()) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool IsReprotectRequired(cli::array &lt;System::Byte&gt; ^ encryptedData);" />
      <MemberSignature Language="F#" Value="abstract member IsReprotectRequired : byte[] -&gt; bool" Usage="dataProtector.IsReprotectRequired encryptedData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encryptedData" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="encryptedData">要評估的加密的資料。</param>
        <summary>判斷指定的已加密資料是否需要重新加密。</summary>
        <returns>如果必須將資料重新加密，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrependHashedPurposeToPlaintext">
      <MemberSignature Language="C#" Value="protected virtual bool PrependHashedPurposeToPlaintext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool PrependHashedPurposeToPlaintext" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.DataProtector.PrependHashedPurposeToPlaintext" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property PrependHashedPurposeToPlaintext As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property bool PrependHashedPurposeToPlaintext { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.PrependHashedPurposeToPlaintext : bool" Usage="System.Security.Cryptography.DataProtector.PrependHashedPurposeToPlaintext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指定是否已在加密前將雜湊預先附加至文字陣列。</summary>
        <value>一定是 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 根據預設，它會假設衍生的類別會在前面加上的雜湊<xref:System.Security.Cryptography.DataProtector.ApplicationName%2A>， <xref:System.Security.Cryptography.DataProtector.PrimaryPurpose%2A>，和<xref:System.Security.Cryptography.DataProtector.SpecificPurposes%2A>屬性以純文字加密，並將之前檢查和驗證雜湊期間解密。  如果想要自行指定預留的資料的衍生的類別 （例如做為選擇性的熵值），這個屬性可以覆寫而設定為傳回`false`。  如果<xref:System.Security.Cryptography.DataProtector.PrependHashedPurposeToPlaintext%2A>是`false`，<xref:System.Security.Cryptography.DataProtector.Protect%2A>和<xref:System.Security.Cryptography.DataProtector.Unprotect%2A>直接傳遞給<xref:System.Security.Cryptography.DataProtector.ProviderProtect%2A>和<xref:System.Security.Cryptography.DataProtector.ProviderUnprotect%2A>會覆寫，而不需變更的位元組陣列。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PrimaryPurpose">
      <MemberSignature Language="C#" Value="protected string PrimaryPurpose { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PrimaryPurpose" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.DataProtector.PrimaryPurpose" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property PrimaryPurpose As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::String ^ PrimaryPurpose { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PrimaryPurpose : string" Usage="System.Security.Cryptography.DataProtector.PrimaryPurpose" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得受保護資料的主要目的。</summary>
        <value>受保護資料的主要目的。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Protect">
      <MemberSignature Language="C#" Value="public byte[] Protect (byte[] userData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] Protect(unsigned int8[] userData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DataProtector.Protect(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Protect (userData As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ Protect(cli::array &lt;System::Byte&gt; ^ userData);" />
      <MemberSignature Language="F#" Value="member this.Protect : byte[] -&gt; byte[]" Usage="dataProtector.Protect userData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userData" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="userData">要保護的資料。</param>
        <summary>保護指定的使用者資料。</summary>
        <returns>包含加密資料的位元組陣列。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="userData" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="ProviderProtect">
      <MemberSignature Language="C#" Value="protected abstract byte[] ProviderProtect (byte[] userData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance unsigned int8[] ProviderProtect(unsigned int8[] userData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DataProtector.ProviderProtect(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function ProviderProtect (userData As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract cli::array &lt;System::Byte&gt; ^ ProviderProtect(cli::array &lt;System::Byte&gt; ^ userData);" />
      <MemberSignature Language="F#" Value="abstract member ProviderProtect : byte[] -&gt; byte[]" Usage="dataProtector.ProviderProtect userData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userData" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="userData">要加密的資料。</param>
        <summary>指定衍生類別中的委派方法，基底類別中的 <see cref="M:System.Security.Cryptography.DataProtector.Protect(System.Byte[])" /> 方法會回呼。</summary>
        <returns>包含加密資料的位元組陣列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列範例會示範 <xref:System.Security.Cryptography.DataProtector.ProviderProtect%2A> 方法的實作。  它是針對較大的程式碼範例的一部分<xref:System.Security.Cryptography.DataProtector>類別。  
  
 [!code-csharp[Cryptography.MemoryProtector#3](~/samples/snippets/csharp/VS_Snippets_CLR/cryptography.memoryprotector/cs/class1.cs#3)]
 [!code-vb[Cryptography.MemoryProtector#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/cryptography.memoryprotector/vb/class1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProviderUnprotect">
      <MemberSignature Language="C#" Value="protected abstract byte[] ProviderUnprotect (byte[] encryptedData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance unsigned int8[] ProviderUnprotect(unsigned int8[] encryptedData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DataProtector.ProviderUnprotect(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function ProviderUnprotect (encryptedData As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract cli::array &lt;System::Byte&gt; ^ ProviderUnprotect(cli::array &lt;System::Byte&gt; ^ encryptedData);" />
      <MemberSignature Language="F#" Value="abstract member ProviderUnprotect : byte[] -&gt; byte[]" Usage="dataProtector.ProviderUnprotect encryptedData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encryptedData" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="encryptedData">要解密的資料。</param>
        <summary>指定衍生類別中的委派方法，基底類別中的 <see cref="M:System.Security.Cryptography.DataProtector.Unprotect(System.Byte[])" /> 方法會回呼。</summary>
        <returns>已解密的資料。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列範例會示範 <xref:System.Security.Cryptography.DataProtector.ProviderUnprotect%2A> 方法的實作。  它是針對較大的程式碼範例的一部分<xref:System.Security.Cryptography.DataProtector>類別。  
  
 [!code-csharp[Cryptography.MemoryProtector#4](~/samples/snippets/csharp/VS_Snippets_CLR/cryptography.memoryprotector/cs/class1.cs#4)]
 [!code-vb[Cryptography.MemoryProtector#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/cryptography.memoryprotector/vb/class1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpecificPurposes">
      <MemberSignature Language="C#" Value="protected System.Collections.Generic.IEnumerable&lt;string&gt; SpecificPurposes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;string&gt; SpecificPurposes" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.DataProtector.SpecificPurposes" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property SpecificPurposes As IEnumerable(Of String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ SpecificPurposes { System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SpecificPurposes : seq&lt;string&gt;" Usage="System.Security.Cryptography.DataProtector.SpecificPurposes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得受保護資料之特定用途。</summary>
        <value>受保護資料之特定用途的集合。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Unprotect">
      <MemberSignature Language="C#" Value="public byte[] Unprotect (byte[] encryptedData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] Unprotect(unsigned int8[] encryptedData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DataProtector.Unprotect(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Unprotect (encryptedData As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ Unprotect(cli::array &lt;System::Byte&gt; ^ encryptedData);" />
      <MemberSignature Language="F#" Value="member this.Unprotect : byte[] -&gt; byte[]" Usage="dataProtector.Unprotect encryptedData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encryptedData" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="encryptedData">要解除保護的已加密資料。</param>
        <summary>取消保護指定的受保護資料。</summary>
        <returns>包含純文字資料的位元組陣列。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="encryptedData" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <paramref name="encryptedData" /> 包含無效的用途。</exception>
      </Docs>
    </Member>
  </Members>
</Type>