<Type Name="HMACRIPEMD160" FullName="System.Security.Cryptography.HMACRIPEMD160">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e0b34af2262f2b203030c070b90e6276aedd82a2" /><Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="10/04/2018" /><Meta Name="ms.locfileid" Value="48670477" /></Metadata><TypeSignature Language="C#" Value="public class HMACRIPEMD160 : System.Security.Cryptography.HMAC" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit HMACRIPEMD160 extends System.Security.Cryptography.HMAC" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.HMACRIPEMD160" />
  <TypeSignature Language="VB.NET" Value="Public Class HMACRIPEMD160&#xA;Inherits HMAC" />
  <TypeSignature Language="C++ CLI" Value="public ref class HMACRIPEMD160 : System::Security::Cryptography::HMAC" />
  <TypeSignature Language="F#" Value="type HMACRIPEMD160 = class&#xA;    inherit HMAC" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.Cryptography.HMAC</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="f73fd-101">使用 <see cref="T:System.Security.Cryptography.RIPEMD160" /> 雜湊函式，計算雜湊架構訊息驗證碼 (Hash-based Message Authentication Code，HMAC)。</span><span class="sxs-lookup"><span data-stu-id="f73fd-101">Computes a Hash-based Message Authentication Code (HMAC) by using the <see cref="T:System.Security.Cryptography.RIPEMD160" /> hash function.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f73fd-102"><xref:System.Security.Cryptography.HMACRIPEMD160> 是一種是建構自 RIPEMD-160 雜湊函式，用做為雜湊式訊息驗證碼 (HMAC) 的索引鍵的雜湊演算法。</span><span class="sxs-lookup"><span data-stu-id="f73fd-102"><xref:System.Security.Cryptography.HMACRIPEMD160> is a type of keyed hash algorithm that is constructed from the RIPEMD-160 hash function and used as a Hash-based Message Authentication Code (HMAC).</span></span> <span data-ttu-id="f73fd-103">HMAC 程序會混合包含訊息資料的秘密金鑰、 雜湊的雜湊函式的結果、 同樣地，混合使用秘密金鑰的雜湊值，然後套用第二次雜湊函式的資料。</span><span class="sxs-lookup"><span data-stu-id="f73fd-103">The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time.</span></span> <span data-ttu-id="f73fd-104">輸出雜湊是 160 位元的長度。</span><span class="sxs-lookup"><span data-stu-id="f73fd-104">The output hash is 160 bits in length.</span></span>  
  
 <span data-ttu-id="f73fd-105">HMAC 可用來判斷透過不安全的通道傳送的訊息是否遭竄改的寄件者和接收者共用祕密金鑰。</span><span class="sxs-lookup"><span data-stu-id="f73fd-105">An HMAC can be used to determine whether a message sent over an insecure channel has been tampered with, provided that the sender and receiver share a secret key.</span></span> <span data-ttu-id="f73fd-106">寄件者計算原始資料的雜湊值，並將原始資料和雜湊值傳送為單一訊息。</span><span class="sxs-lookup"><span data-stu-id="f73fd-106">The sender computes the hash value for the original data and sends both the original data and the hash value as a single message.</span></span> <span data-ttu-id="f73fd-107">接收者接收的訊息上的雜湊值將會重新計算，並檢查所計算的 HMAC 符合傳輸的 HMAC。</span><span class="sxs-lookup"><span data-stu-id="f73fd-107">The receiver recalculates the hash value on the received message and checks that the computed HMAC matches the transmitted HMAC.</span></span>  
  
 <span data-ttu-id="f73fd-108">對資料或雜湊值的任何變更會導致不相符，因為祕密金鑰的知識，才可變更的訊息，並重現的正確雜湊值。</span><span class="sxs-lookup"><span data-stu-id="f73fd-108">Any change to the data or the hash value results in a mismatch, because knowledge of the secret key is required to change the message and reproduce the correct hash value.</span></span> <span data-ttu-id="f73fd-109">因此，如果原始和計算的雜湊值相符，驗證訊息。</span><span class="sxs-lookup"><span data-stu-id="f73fd-109">Therefore, if the original and computed hash values match, the message is authenticated.</span></span>  
  
 <span data-ttu-id="f73fd-110"><xref:System.Security.Cryptography.HMACRIPEMD160> 接受的任何大小的索引鍵，並產生雜湊序列 160 位元長。</span><span class="sxs-lookup"><span data-stu-id="f73fd-110"><xref:System.Security.Cryptography.HMACRIPEMD160> accepts keys of any size, and produces a hash sequence that is 160 bits long.</span></span>  
  
 <span data-ttu-id="f73fd-111">由歐洲敞開專案所開發的 RIPEMD 雜湊演算法和其後續任務。</span><span class="sxs-lookup"><span data-stu-id="f73fd-111">The RIPEMD hash algorithm and its successors were developed by the European RIPE project.</span></span> <span data-ttu-id="f73fd-112">原始的 RIPEMD 演算法會專門用來取代 MD4 和 MD5 和更新版本再加並重新命名 RIPEMD-160。</span><span class="sxs-lookup"><span data-stu-id="f73fd-112">The original RIPEMD algorithm was designed to replace MD4 and MD5 and was later strengthened and renamed RIPEMD-160.</span></span> <span data-ttu-id="f73fd-113">RIPEMD-160 雜湊演算法會產生 160 位元雜湊值。</span><span class="sxs-lookup"><span data-stu-id="f73fd-113">The RIPEMD-160 hash algorithm produces a 160-bit hash value.</span></span> <span data-ttu-id="f73fd-114">此演算法的設計工具將它置於公用網域。</span><span class="sxs-lookup"><span data-stu-id="f73fd-114">The algorithm's designers have placed it in the public domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f73fd-115">下列範例示範如何使用簽署檔案<xref:System.Security.Cryptography.HMACRIPEMD160>物件，然後如何確認該檔案。</span><span class="sxs-lookup"><span data-stu-id="f73fd-115">The following example shows how to sign a file by using the <xref:System.Security.Cryptography.HMACRIPEMD160> object and then how to verify the file.</span></span>  
  
 [!code-cpp[HMACRIPEMD160#1](~/samples/snippets/cpp/VS_Snippets_CLR/HMACRIPEMD160/CPP/hmacripemd160.cpp#1)]
 [!code-csharp[HMACRIPEMD160#1](~/samples/snippets/csharp/VS_Snippets_CLR/HMACRIPEMD160/CS/hmacripemd160.cs#1)]
 [!code-vb[HMACRIPEMD160#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/HMACRIPEMD160/vb/hmacripemd160.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/standard/security/cryptographic-services.md"><span data-ttu-id="f73fd-116">密碼編譯服務</span><span class="sxs-lookup"><span data-stu-id="f73fd-116">Cryptographic Services</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f73fd-117">初始化 <see cref="T:System.Security.Cryptography.HMACRIPEMD160" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="f73fd-117">Initializes a new instance of the <see cref="T:System.Security.Cryptography.HMACRIPEMD160" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HMACRIPEMD160 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HMACRIPEMD160.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HMACRIPEMD160();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f73fd-118">使用隨機產生的 64 位元組金鑰，初始化 <see cref="T:System.Security.Cryptography.HMACRIPEMD160" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="f73fd-118">Initializes a new instance of the <see cref="T:System.Security.Cryptography.HMACRIPEMD160" /> class with a randomly generated 64-byte key.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f73fd-119"><xref:System.Security.Cryptography.HMACRIPEMD160> 是一種是建構自 RIPEMD-160 雜湊函式，用做為雜湊式訊息驗證碼 (HMAC) 的索引鍵的雜湊演算法。</span><span class="sxs-lookup"><span data-stu-id="f73fd-119"><xref:System.Security.Cryptography.HMACRIPEMD160> is a type of keyed hash algorithm that is constructed from the RIPEMD-160 hash function and used as a Hash-based Message Authentication Code (HMAC).</span></span> <span data-ttu-id="f73fd-120">HMAC 程序會混合包含訊息資料的秘密金鑰、 雜湊的雜湊函式的結果、 同樣地，混合使用秘密金鑰的雜湊值，然後套用第二次雜湊函式的資料。</span><span class="sxs-lookup"><span data-stu-id="f73fd-120">The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time.</span></span> <span data-ttu-id="f73fd-121">輸出雜湊是 160 個位元組的長度。</span><span class="sxs-lookup"><span data-stu-id="f73fd-121">The output hash is 160 bytes in length.</span></span>  
  
 <span data-ttu-id="f73fd-122">這個建構函式會使用 64 位元隨機產生的金鑰。</span><span class="sxs-lookup"><span data-stu-id="f73fd-122">This constructor uses a 64-byte, randomly generated key.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/security/cryptographic-services.md"><span data-ttu-id="f73fd-123">密碼編譯服務</span><span class="sxs-lookup"><span data-stu-id="f73fd-123">Cryptographic Services</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HMACRIPEMD160 (byte[] key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HMACRIPEMD160.#ctor(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (key As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HMACRIPEMD160(cli::array &lt;System::Byte&gt; ^ key);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.HMACRIPEMD160 : byte[] -&gt; System.Security.Cryptography.HMACRIPEMD160" Usage="new System.Security.Cryptography.HMACRIPEMD160 key" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="key" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="f73fd-124"><see cref="T:System.Security.Cryptography.HMACRIPEMD160" /> 加密的秘密金鑰。</span><span class="sxs-lookup"><span data-stu-id="f73fd-124">The secret key for <see cref="T:System.Security.Cryptography.HMACRIPEMD160" /> encryption.</span></span> <span data-ttu-id="f73fd-125">金鑰可以是任何長度，但其長度若超過 64 個位元組，便會使用 SHA-1 進行雜湊，以衍生 64 位元組金鑰。</span><span class="sxs-lookup"><span data-stu-id="f73fd-125">The key can be any length, but if it is more than 64 bytes long it is hashed (using SHA-1) to derive a 64-byte key.</span></span> <span data-ttu-id="f73fd-126">因此，秘密金鑰的建議大小為 64 個位元組。</span><span class="sxs-lookup"><span data-stu-id="f73fd-126">Therefore, the recommended size of the secret key is 64 bytes.</span></span></param>
        <summary><span data-ttu-id="f73fd-127">使用指定的金鑰資料，初始化 <see cref="T:System.Security.Cryptography.HMACRIPEMD160" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="f73fd-127">Initializes a new instance of the <see cref="T:System.Security.Cryptography.HMACRIPEMD160" /> class with the specified key data.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f73fd-128"><xref:System.Security.Cryptography.HMACRIPEMD160> 是一種是建構自 RIPEMD-160 雜湊函式，用做為雜湊式訊息驗證碼 (HMAC) 的索引鍵的雜湊演算法。</span><span class="sxs-lookup"><span data-stu-id="f73fd-128"><xref:System.Security.Cryptography.HMACRIPEMD160> is a type of keyed hash algorithm that is constructed from the RIPEMD-160 hash function and used as a Hash-based Message Authentication Code (HMAC).</span></span> <span data-ttu-id="f73fd-129">HMAC 程序會混合包含訊息資料的秘密金鑰、 雜湊的雜湊函式的結果、 同樣地，混合使用秘密金鑰的雜湊值，然後套用第二次雜湊函式的資料。</span><span class="sxs-lookup"><span data-stu-id="f73fd-129">The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time.</span></span> <span data-ttu-id="f73fd-130">輸出雜湊是 160 個位元組的長度。</span><span class="sxs-lookup"><span data-stu-id="f73fd-130">The output hash is 160 bytes in length.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f73fd-131">如需如何使用這個建構函式的範例，請參閱<xref:System.Security.Cryptography.HMACRIPEMD160>類別。</span><span class="sxs-lookup"><span data-stu-id="f73fd-131">For an example of how to use this constructor, see the <xref:System.Security.Cryptography.HMACRIPEMD160> class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f73fd-132"><paramref name="key" /> 參數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f73fd-132">The <paramref name="key" /> parameter is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/security/cryptographic-services.md"><span data-ttu-id="f73fd-133">密碼編譯服務</span><span class="sxs-lookup"><span data-stu-id="f73fd-133">Cryptographic Services</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>