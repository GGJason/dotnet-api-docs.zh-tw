<Type Name="ECDiffieHellmanKeyDerivationFunction" FullName="System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7a634ff01a3a994d3a0b31437a4b4d75a485b964" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="08/24/2018" />
    <Meta Name="ms.locfileid" Value="37464227" />
  </Metadata>
  <TypeSignature Language="C#" Value="public enum ECDiffieHellmanKeyDerivationFunction" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ECDiffieHellmanKeyDerivationFunction extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction" />
  <TypeSignature Language="VB.NET" Value="Public Enum ECDiffieHellmanKeyDerivationFunction" />
  <TypeSignature Language="C++ CLI" Value="public enum class ECDiffieHellmanKeyDerivationFunction" />
  <TypeSignature Language="F#" Value="type ECDiffieHellmanKeyDerivationFunction = " />
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>指定金鑰衍生函式，<see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> 類別會使用此函式將密碼協議轉換成金鑰內容。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction>列舉會定義將用來轉換成金鑰內容的原始密碼協議的演算法的類型。 密碼協議是從私用金鑰和其他合作對象的公開金鑰，做為金鑰交換的一部分產生的值。 它是所產生的金鑰材料的種子值<xref:System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyMaterial%2A>方法。  
  
 <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A>屬性取得的金鑰衍生函式中使用這個列舉型別<xref:System.Security.Cryptography.ECDiffieHellmanCng>類別。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Hash">
      <MemberSignature Language="C#" Value="Hash" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction Hash = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash" />
      <MemberSignature Language="VB.NET" Value="Hash" />
      <MemberSignature Language="C++ CLI" Value="Hash" />
      <MemberSignature Language="F#" Value="Hash = 0" Usage="System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>雜湊演算法可用來產生金鑰內容。 <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm" /> 屬性會指定所使用演算法的名稱。 如果未指定演算法名稱，則會使用 <see cref="T:System.Security.Cryptography.SHA256" /> 做為預設演算法。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您也可以指定<xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend%2A>和<xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend%2A>屬性，但它們並非必要項。  
  
 產生的金鑰材料數量相當於指定的演算法的雜湊值的大小。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Hmac">
      <MemberSignature Language="C#" Value="Hmac" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction Hmac = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac" />
      <MemberSignature Language="VB.NET" Value="Hmac" />
      <MemberSignature Language="C++ CLI" Value="Hmac" />
      <MemberSignature Language="F#" Value="Hmac = 1" Usage="System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>雜湊架構訊息驗證碼 (HMAC) 演算法可用來產生金鑰內容。 <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.HmacKey" /> 屬性會指定要使用的金鑰。 這個屬性必須設定，或是 <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.UseSecretAgreementAsHmacKey" /> 屬性必須設為 <see langword="true" />，否則當您使用 <see cref="T:System.Security.Cryptography.CryptographicException" /> 時，會擲出 <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac" />。 如果同時設定這兩個值，則會使用密碼協議做為 HMAC 金鑰。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您也可以指定<xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend%2A>和<xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend%2A>屬性，但它們並非必要項。  
  
 產生的金鑰材料的量等於 HMAC 值的大小。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tls">
      <MemberSignature Language="C#" Value="Tls" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction Tls = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls" />
      <MemberSignature Language="VB.NET" Value="Tls" />
      <MemberSignature Language="C++ CLI" Value="Tls" />
      <MemberSignature Language="F#" Value="Tls = 2" Usage="System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>傳輸層安全性 (TLS) 通訊協定可用來產生金鑰內容。 <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.Seed" /> 和 <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.Label" /> 屬性必須設定，否則當您使用 <see cref="T:System.Security.Cryptography.CryptographicException" /> 時，會擲回 <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個值會產生 160 位元的金鑰材料。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>