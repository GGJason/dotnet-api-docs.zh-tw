<Type Name="ECDiffieHellman" FullName="System.Security.Cryptography.ECDiffieHellman">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="fd8bdcf8d387c5cd918cc87c907cdfc17e234b6e" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36625112" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class ECDiffieHellman : System.Security.Cryptography.AsymmetricAlgorithm" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ECDiffieHellman extends System.Security.Cryptography.AsymmetricAlgorithm" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.ECDiffieHellman" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ECDiffieHellman&#xA;Inherits AsymmetricAlgorithm" />
  <TypeSignature Language="C++ CLI" Value="public ref class ECDiffieHellman abstract : System::Security::Cryptography::AsymmetricAlgorithm" />
  <TypeSignature Language="F#" Value="type ECDiffieHellman = class&#xA;    inherit AsymmetricAlgorithm" />
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
    <AssemblyVersion>4.3.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.Cryptography.AsymmetricAlgorithm</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="d46e8-101">提供 Elliptic Curve Diffie-Hellman (ECDH) 演算法實作可從中衍生的抽象基底類別。</span>
      <span class="sxs-lookup">
        <span data-stu-id="d46e8-101">Provides an abstract base class that Elliptic Curve Diffie-Hellman (ECDH) algorithm implementations can derive from.</span>
      </span>
      <span data-ttu-id="d46e8-102">這個類別提供一組所有 ECDH 實作都必須支援的基本作業。</span>
      <span class="sxs-lookup">
        <span data-stu-id="d46e8-102">This class provides the basic set of operations that all ECDH implementations must support.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d46e8-103">這個類別可做為 ECDH 實作抽象基底類別。</span><span class="sxs-lookup"><span data-stu-id="d46e8-103">This class serves as the abstract base class for ECDH implementations.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ECDiffieHellman ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellman.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ECDiffieHellman();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d46e8-104">初始化 <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d46e8-104">Initializes a new instance of the <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d46e8-105">衍生自的類別會呼叫這個建構函式<xref:System.Security.Cryptography.ECDiffieHellman>類別。</span><span class="sxs-lookup"><span data-stu-id="d46e8-105">This constructor is called by classes that derive from the <xref:System.Security.Cryptography.ECDiffieHellman> class.</span></span> <span data-ttu-id="d46e8-106"><xref:System.Security.Cryptography.ECDiffieHellmanCng>類別是目前包含在唯一實作[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="d46e8-106">The <xref:System.Security.Cryptography.ECDiffieHellmanCng> class is the only implementation that is currently included in the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)].</span></span> <span data-ttu-id="d46e8-107">如需如何建立新的實作 Elliptic Curve Diffie-hellman (ECDH) 演算法的資訊，請參閱<xref:System.Security.Cryptography.ECDiffieHellman.Create%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="d46e8-107">For information about how to create a new implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm, see the <xref:System.Security.Cryptography.ECDiffieHellman.Create%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Create">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d46e8-108">建立 Elliptic Curve Diffie-Hellman (ECDH) 演算法實作的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d46e8-108">Creates a new instance of an implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.ECDiffieHellman Create ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.ECDiffieHellman Create() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellman.Create" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create () As ECDiffieHellman" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::Cryptography::ECDiffieHellman ^ Create();" />
      <MemberSignature Language="F#" Value="static member Create : unit -&gt; System.Security.Cryptography.ECDiffieHellman" Usage="System.Security.Cryptography.ECDiffieHellman.Create " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.ECDiffieHellman</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d46e8-109">建立 Elliptic Curve Diffie-Hellman (ECDH) 演算法預設實作的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d46e8-109">Creates a new instance of the default implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d46e8-110">這個類別預設實作的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d46e8-110">A new instance of the default implementation of this class.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.ECDiffieHellman Create (System.Security.Cryptography.ECCurve curve);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.ECDiffieHellman Create(valuetype System.Security.Cryptography.ECCurve curve) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellman.Create(System.Security.Cryptography.ECCurve)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (curve As ECCurve) As ECDiffieHellman" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::Cryptography::ECDiffieHellman ^ Create(System::Security::Cryptography::ECCurve curve);" />
      <MemberSignature Language="F#" Value="static member Create : System.Security.Cryptography.ECCurve -&gt; System.Security.Cryptography.ECDiffieHellman" Usage="System.Security.Cryptography.ECDiffieHellman.Create curve" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.ECDiffieHellman</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="curve" Type="System.Security.Cryptography.ECCurve" />
      </Parameters>
      <Docs>
        <param name="curve">
          <span data-ttu-id="d46e8-111">用來產生新公用/私密金鑰組的曲線。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d46e8-111">The curve to use to generate a new public/private key-pair.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d46e8-112">使用在指定曲線上產生的新公開/私密金鑰組，來建立橢圓曲線 Diffie-Hellman (ECDH) 演算法之預設實作的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d46e8-112">Creates a new instance of the default implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm with a new public/private key-pair generated over the specified curve.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d46e8-113">橢圓曲線 Diffie-Hellman (ECDH) 演算法之預設實作的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d46e8-113">A new instance of the default implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d46e8-114">曲線必須驗證 (也就是它必須傳回 true 時傳遞至<xref:System.Security.Cryptography.ECCurve.Validate%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="d46e8-114">curve must validate (that is, it must return true when passed to the <xref:System.Security.Cryptography.ECCurve.Validate%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="d46e8-115">在 Windows 上不支援特性 2 曲線。</span><span class="sxs-lookup"><span data-stu-id="d46e8-115">Characteristic-2 curves are not supported on Windows.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <span data-ttu-id="d46e8-116">
            <paramref name="curve" /> 不會驗證。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d46e8-116">
              <paramref name="curve" /> does not validate.</span>
          </span>
        </exception>
        <altmember cref="M:System.Security.Cryptography.ECDiffieHellman.GenerateKey(System.Security.Cryptography.ECCurve)" />
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.ECDiffieHellman Create (System.Security.Cryptography.ECParameters parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.ECDiffieHellman Create(valuetype System.Security.Cryptography.ECParameters parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellman.Create(System.Security.Cryptography.ECParameters)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (parameters As ECParameters) As ECDiffieHellman" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::Cryptography::ECDiffieHellman ^ Create(System::Security::Cryptography::ECParameters parameters);" />
      <MemberSignature Language="F#" Value="static member Create : System.Security.Cryptography.ECParameters -&gt; System.Security.Cryptography.ECDiffieHellman" Usage="System.Security.Cryptography.ECDiffieHellman.Create parameters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.ECDiffieHellman</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="System.Security.Cryptography.ECParameters" />
      </Parameters>
      <Docs>
        <param name="parameters">
          <span data-ttu-id="d46e8-117">適用於橢圓曲線密碼編譯 (ECC) 演算法的參數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d46e8-117">The parameters  for the elliptic curve cryptography (ECC) algorithm.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d46e8-118">使用指定 <see cref="T:System.Security.Cryptography.ECParameters" /> 物件所指定的金鑰，來建立橢圓曲線 Diffie-Hellman (ECDH) 演算法之預設實作的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d46e8-118">Creates a new instance of the default implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm with the key described by the specified  <see cref="T:System.Security.Cryptography.ECParameters" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d46e8-119">橢圓曲線 Diffie-Hellman (ECDH) 演算法之預設實作的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d46e8-119">A new instance of the default implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d46e8-120">`parameters` 必須驗證 (也就是它必須傳回`true`) 時傳遞至<xref:System.Security.Cryptography.ECParameters.Validate%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="d46e8-120">`parameters` must validate (that is, it must return `true`) when passed to the <xref:System.Security.Cryptography.ECParameters.Validate%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="d46e8-121">不支援透過隱含曲線的參數。</span><span class="sxs-lookup"><span data-stu-id="d46e8-121">Parameters over implicit curves are not supported.</span></span>  
  
 <span data-ttu-id="d46e8-122">在 Windows 上不支援特性 2 曲線。</span><span class="sxs-lookup"><span data-stu-id="d46e8-122">Characteristic-2 curves are not supported on Windows.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <span data-ttu-id="d46e8-123">
            <paramref name="parameters" /> 不會驗證。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d46e8-123">
              <paramref name="parameters" /> does not validate.</span>
          </span>
        </exception>
        <altmember cref="M:System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)" />
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.ECDiffieHellman Create (string algorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.ECDiffieHellman Create(string algorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellman.Create(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (algorithm As String) As ECDiffieHellman" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::Cryptography::ECDiffieHellman ^ Create(System::String ^ algorithm);" />
      <MemberSignature Language="F#" Value="static member Create : string -&gt; System.Security.Cryptography.ECDiffieHellman" Usage="System.Security.Cryptography.ECDiffieHellman.Create algorithm" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.ECDiffieHellman</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="algorithm" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="algorithm">
          <span data-ttu-id="d46e8-124">ECDH 演算法的實作名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d46e8-124">The name of an implementation of the ECDH algorithm.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d46e8-125">建立橢圓曲線 Diffie-Hellman (ECDH) 演算法的指定實作新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d46e8-125">Creates a new instance of the specified implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d46e8-126">此類別之指定實作的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d46e8-126">A new instance of the specified implementation of this class.</span>
          </span>
          <span data-ttu-id="d46e8-127">如果指定的演算法名稱未對應到 ECDH 實作，這個方法會傳回 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d46e8-127">If the specified algorithm name does not map to an ECDH implementation, this method returns <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d46e8-128">如果您要開發自己的實作<xref:System.Security.Cryptography.ECDiffieHellman>物件，您可以使用<xref:System.Security.Cryptography.ECDiffieHellman.Create%28System.String%29>方法多載來建立自訂`algorithm`字串，指定您的實作。</span><span class="sxs-lookup"><span data-stu-id="d46e8-128">If you develop your own implementation of an <xref:System.Security.Cryptography.ECDiffieHellman> object, you can use the <xref:System.Security.Cryptography.ECDiffieHellman.Create%28System.String%29> method overload to create a custom `algorithm` string that specifies your implementation.</span></span>  
  
 <span data-ttu-id="d46e8-129">`algorithm`參數會指定名稱的 ECDH 演算法的實作。</span><span class="sxs-lookup"><span data-stu-id="d46e8-129">The `algorithm` parameter specifies the name of an implementation of the ECDH algorithm.</span></span> <span data-ttu-id="d46e8-130">下列字串全部參考相同的實作，也就是 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 中目前支援的唯一實作。</span><span class="sxs-lookup"><span data-stu-id="d46e8-130">The following strings all refer to the same implementation, which is the only implementation currently supported in the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]:</span></span>  
  
-   <span data-ttu-id="d46e8-131">"ECDH"</span><span class="sxs-lookup"><span data-stu-id="d46e8-131">"ECDH"</span></span>  
  
-   <span data-ttu-id="d46e8-132">「 ECDiffieHellman"</span><span class="sxs-lookup"><span data-stu-id="d46e8-132">"ECDiffieHellman"</span></span>  
  
-   <span data-ttu-id="d46e8-133">「 ECDiffieHellmanCng"</span><span class="sxs-lookup"><span data-stu-id="d46e8-133">"ECDiffieHellmanCng"</span></span>  
  
-   <span data-ttu-id="d46e8-134">"System.Security.Cryptography.ECDiffieHellmanCng"</span><span class="sxs-lookup"><span data-stu-id="d46e8-134">"System.Security.Cryptography.ECDiffieHellmanCng"</span></span>  
  
 <span data-ttu-id="d46e8-135">您也可以提供名稱的自訂 ECDH 實作`algorithm`參數。</span><span class="sxs-lookup"><span data-stu-id="d46e8-135">You can also provide the name of a custom ECDH implementation for the `algorithm` parameter.</span></span> <span data-ttu-id="d46e8-136">如果您這樣做，請<xref:System.Security.Cryptography.CryptoConfig>物件將會使用它來判斷是否可以建立 ECDH 物件。</span><span class="sxs-lookup"><span data-stu-id="d46e8-136">If you do that, the <xref:System.Security.Cryptography.CryptoConfig> object will use it to determine whether an ECDH object can be created.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d46e8-137">
            <paramref name="algorithm" /> 參數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d46e8-137">The <paramref name="algorithm" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DeriveKeyFromHash">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d46e8-138">使用雜湊函式衍生可用來做為金鑰的位元組。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d46e8-138">Derives bytes that can be used as a key using a hash function .</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DeriveKeyFromHash">
      <MemberSignature Language="C#" Value="public byte[] DeriveKeyFromHash (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] DeriveKeyFromHash(class System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName)" />
      <MemberSignature Language="VB.NET" Value="Public Function DeriveKeyFromHash (otherPartyPublicKey As ECDiffieHellmanPublicKey, hashAlgorithm As HashAlgorithmName) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ DeriveKeyFromHash(System::Security::Cryptography::ECDiffieHellmanPublicKey ^ otherPartyPublicKey, System::Security::Cryptography::HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="F#" Value="member this.DeriveKeyFromHash : System.Security.Cryptography.ECDiffieHellmanPublicKey * System.Security.Cryptography.HashAlgorithmName -&gt; byte[]" Usage="eCDiffieHellman.DeriveKeyFromHash (otherPartyPublicKey, hashAlgorithm)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherPartyPublicKey" Type="System.Security.Cryptography.ECDiffieHellmanPublicKey" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" />
      </Parameters>
      <Docs>
        <param name="otherPartyPublicKey">
          <span data-ttu-id="d46e8-139">另一方的公開金鑰。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d46e8-139">The other party's public key.</span>
          </span>
        </param>
        <param name="hashAlgorithm">
          <span data-ttu-id="d46e8-140">要用來衍生金鑰內容的雜湊演算法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d46e8-140">The hash algorithm  to use to derive the key material.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d46e8-141">指定另一方的公開金鑰和雜湊演算法的名稱，使用雜湊函式衍生可用來做為金鑰的位元組。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d46e8-141">Derives bytes that can be used as a key using a hash function, given another party's public key and hash algorithm's name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d46e8-142">金鑰的金鑰內容會與另一方的公開金鑰交換。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d46e8-142">The key material from the key exchange with the other party’s public key.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d46e8-143">這個多載呼叫<xref:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash%2A>方法傳遞`null`前面加上為附加的值。</span><span class="sxs-lookup"><span data-stu-id="d46e8-143">This overload calls the <xref:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash%2A> method passing `null` as the prepend and append values.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeriveKeyFromHash">
      <MemberSignature Language="C#" Value="public virtual byte[] DeriveKeyFromHash (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, byte[] secretPrepend, byte[] secretAppend);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int8[] DeriveKeyFromHash(class System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm, unsigned int8[] secretPrepend, unsigned int8[] secretAppend) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeriveKeyFromHash (otherPartyPublicKey As ECDiffieHellmanPublicKey, hashAlgorithm As HashAlgorithmName, secretPrepend As Byte(), secretAppend As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Byte&gt; ^ DeriveKeyFromHash(System::Security::Cryptography::ECDiffieHellmanPublicKey ^ otherPartyPublicKey, System::Security::Cryptography::HashAlgorithmName hashAlgorithm, cli::array &lt;System::Byte&gt; ^ secretPrepend, cli::array &lt;System::Byte&gt; ^ secretAppend);" />
      <MemberSignature Language="F#" Value="abstract member DeriveKeyFromHash : System.Security.Cryptography.ECDiffieHellmanPublicKey * System.Security.Cryptography.HashAlgorithmName * byte[] * byte[] -&gt; byte[]&#xA;override this.DeriveKeyFromHash : System.Security.Cryptography.ECDiffieHellmanPublicKey * System.Security.Cryptography.HashAlgorithmName * byte[] * byte[] -&gt; byte[]" Usage="eCDiffieHellman.DeriveKeyFromHash (otherPartyPublicKey, hashAlgorithm, secretPrepend, secretAppend)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherPartyPublicKey" Type="System.Security.Cryptography.ECDiffieHellmanPublicKey" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" />
        <Parameter Name="secretPrepend" Type="System.Byte[]" />
        <Parameter Name="secretAppend" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="otherPartyPublicKey">
          <span data-ttu-id="d46e8-144">另一方的公開金鑰。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d46e8-144">The other party's public key.</span>
          </span>
        </param>
        <param name="hashAlgorithm">
          <span data-ttu-id="d46e8-145">要用來衍生金鑰內容的雜湊演算法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d46e8-145">The hash algorithm  to use to derive the key material.</span>
          </span>
        </param>
        <param name="secretPrepend">
          <span data-ttu-id="d46e8-146">雜湊之前要加在衍生密碼前面的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d46e8-146">A value to prepend to the derived secret before hashing.</span>
          </span>
        </param>
        <param name="secretAppend">
          <span data-ttu-id="d46e8-147">雜湊之前要附加至衍生密碼的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d46e8-147">A value to append to the derived secret before hashing.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d46e8-148">在衍生的類別中實作時，使用雜湊函式衍生可用來做為金鑰的位元組，指定另一方的公開金鑰、雜湊演算法的名稱、前面加上的值及附加值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d46e8-148">When implemented in a derived class, derives bytes that can be used as a key using a hash function, given another party's public key, hash algorithm's name, a prepend value and an append value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d46e8-149">金鑰的金鑰內容會與另一方的公開金鑰交換。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d46e8-149">The key material from the key exchange with the other party’s public key.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="d46e8-150">衍生的類別必須覆寫這個方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d46e8-150">A derived class must override this method.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DeriveKeyFromHmac">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d46e8-151">使用雜湊式訊息驗證碼 (HMAC) 衍生可用來做為金鑰的位元組。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d46e8-151">Derives bytes that can be used as a key using a Hash-based Message Authentication Code (HMAC).</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DeriveKeyFromHmac">
      <MemberSignature Language="C#" Value="public byte[] DeriveKeyFromHmac (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, byte[] hmacKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] DeriveKeyFromHmac(class System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm, unsigned int8[] hmacKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function DeriveKeyFromHmac (otherPartyPublicKey As ECDiffieHellmanPublicKey, hashAlgorithm As HashAlgorithmName, hmacKey As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ DeriveKeyFromHmac(System::Security::Cryptography::ECDiffieHellmanPublicKey ^ otherPartyPublicKey, System::Security::Cryptography::HashAlgorithmName hashAlgorithm, cli::array &lt;System::Byte&gt; ^ hmacKey);" />
      <MemberSignature Language="F#" Value="member this.DeriveKeyFromHmac : System.Security.Cryptography.ECDiffieHellmanPublicKey * System.Security.Cryptography.HashAlgorithmName * byte[] -&gt; byte[]" Usage="eCDiffieHellman.DeriveKeyFromHmac (otherPartyPublicKey, hashAlgorithm, hmacKey)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherPartyPublicKey" Type="System.Security.Cryptography.ECDiffieHellmanPublicKey" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" />
        <Parameter Name="hmacKey" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="otherPartyPublicKey">
          <span data-ttu-id="d46e8-152">另一方的公開金鑰。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d46e8-152">The other party's public key.</span>
          </span>
        </param>
        <param name="hashAlgorithm">
          <span data-ttu-id="d46e8-153">要用來衍生金鑰內容的雜湊演算法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d46e8-153">The hash algorithm to use to derive the key material.</span>
          </span>
        </param>
        <param name="hmacKey">
          <span data-ttu-id="d46e8-154">HMAC 的金鑰。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d46e8-154">The key for the HMAC.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d46e8-155">使用雜湊式訊息驗證碼 (HMAC) 衍生可用來做為金鑰的位元組。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d46e8-155">Derives bytes that can be used as a key using a Hash-based Message Authentication Code (HMAC).</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d46e8-156">金鑰的金鑰內容會與另一方的公開金鑰交換。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d46e8-156">The key material from the key exchange with the other party’s public key.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d46e8-157">這個多載呼叫<xref:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac%2A>方法傳遞`null`前面加上為附加的值。</span><span class="sxs-lookup"><span data-stu-id="d46e8-157">This overload calls the <xref:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac%2A> method passing `null` as the prepend and append values.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeriveKeyFromHmac">
      <MemberSignature Language="C#" Value="public virtual byte[] DeriveKeyFromHmac (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, byte[] hmacKey, byte[] secretPrepend, byte[] secretAppend);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int8[] DeriveKeyFromHmac(class System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm, unsigned int8[] hmacKey, unsigned int8[] secretPrepend, unsigned int8[] secretAppend) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[],System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeriveKeyFromHmac (otherPartyPublicKey As ECDiffieHellmanPublicKey, hashAlgorithm As HashAlgorithmName, hmacKey As Byte(), secretPrepend As Byte(), secretAppend As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Byte&gt; ^ DeriveKeyFromHmac(System::Security::Cryptography::ECDiffieHellmanPublicKey ^ otherPartyPublicKey, System::Security::Cryptography::HashAlgorithmName hashAlgorithm, cli::array &lt;System::Byte&gt; ^ hmacKey, cli::array &lt;System::Byte&gt; ^ secretPrepend, cli::array &lt;System::Byte&gt; ^ secretAppend);" />
      <MemberSignature Language="F#" Value="abstract member DeriveKeyFromHmac : System.Security.Cryptography.ECDiffieHellmanPublicKey * System.Security.Cryptography.HashAlgorithmName * byte[] * byte[] * byte[] -&gt; byte[]&#xA;override this.DeriveKeyFromHmac : System.Security.Cryptography.ECDiffieHellmanPublicKey * System.Security.Cryptography.HashAlgorithmName * byte[] * byte[] * byte[] -&gt; byte[]" Usage="eCDiffieHellman.DeriveKeyFromHmac (otherPartyPublicKey, hashAlgorithm, hmacKey, secretPrepend, secretAppend)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherPartyPublicKey" Type="System.Security.Cryptography.ECDiffieHellmanPublicKey" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" />
        <Parameter Name="hmacKey" Type="System.Byte[]" />
        <Parameter Name="secretPrepend" Type="System.Byte[]" />
        <Parameter Name="secretAppend" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="otherPartyPublicKey">
          <span data-ttu-id="d46e8-158">另一方的公開金鑰。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d46e8-158">The other party's public key.</span>
          </span>
        </param>
        <param name="hashAlgorithm">
          <span data-ttu-id="d46e8-159">要用來衍生金鑰內容的雜湊演算法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d46e8-159">The hash algorithm to use to derive the key material.</span>
          </span>
        </param>
        <param name="hmacKey">
          <span data-ttu-id="d46e8-160">HMAC 的金鑰。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d46e8-160">The key for the HMAC.</span>
          </span>
        </param>
        <param name="secretPrepend">
          <span data-ttu-id="d46e8-161">雜湊之前要加在衍生密碼前面的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d46e8-161">A value to prepend to the derived secret before hashing.</span>
          </span>
        </param>
        <param name="secretAppend">
          <span data-ttu-id="d46e8-162">雜湊之前要附加至衍生密碼的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d46e8-162">A value to append to the derived secret before hashing.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d46e8-163">在衍生類別中實作時，使用雜湊式訊息驗證碼 (HMAC) 衍生可用來做為金鑰的位元組。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d46e8-163">When implemented in a derived class, derives bytes that can be used as a key using a Hash-based Message Authentication Code (HMAC).</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d46e8-164">金鑰的金鑰內容會與另一方的公開金鑰交換。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d46e8-164">The key material from the key exchange with the other party’s public key.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="d46e8-165">衍生的類別必須覆寫這個方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d46e8-165">A derived class must override this method.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="DeriveKeyMaterial">
      <MemberSignature Language="C#" Value="public virtual byte[] DeriveKeyMaterial (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int8[] DeriveKeyMaterial(class System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyMaterial(System.Security.Cryptography.ECDiffieHellmanPublicKey)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeriveKeyMaterial (otherPartyPublicKey As ECDiffieHellmanPublicKey) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Byte&gt; ^ DeriveKeyMaterial(System::Security::Cryptography::ECDiffieHellmanPublicKey ^ otherPartyPublicKey);" />
      <MemberSignature Language="F#" Value="abstract member DeriveKeyMaterial : System.Security.Cryptography.ECDiffieHellmanPublicKey -&gt; byte[]&#xA;override this.DeriveKeyMaterial : System.Security.Cryptography.ECDiffieHellmanPublicKey -&gt; byte[]" Usage="eCDiffieHellman.DeriveKeyMaterial otherPartyPublicKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherPartyPublicKey" Type="System.Security.Cryptography.ECDiffieHellmanPublicKey" />
      </Parameters>
      <Docs>
        <param name="otherPartyPublicKey">
          <span data-ttu-id="d46e8-166">另一方的公開金鑰。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d46e8-166">The other party's public key.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d46e8-167">衍生可用來做為金鑰的位元組，只要有提供另一方的公開金鑰。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d46e8-167">Derives bytes that can be used as a key, given another party's public key.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d46e8-168">金鑰的金鑰內容會與另一方的公開金鑰交換。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d46e8-168">The key material from the key exchange with the other party’s public key.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d46e8-169">如需公開金鑰的詳細資訊，請參閱<xref:System.Security.Cryptography.ECDiffieHellmanPublicKey>類別。</span><span class="sxs-lookup"><span data-stu-id="d46e8-169">For more information about public keys, see the <xref:System.Security.Cryptography.ECDiffieHellmanPublicKey> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeriveKeyTls">
      <MemberSignature Language="C#" Value="public virtual byte[] DeriveKeyTls (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, byte[] prfLabel, byte[] prfSeed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int8[] DeriveKeyTls(class System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, unsigned int8[] prfLabel, unsigned int8[] prfSeed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyTls(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Byte[],System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeriveKeyTls (otherPartyPublicKey As ECDiffieHellmanPublicKey, prfLabel As Byte(), prfSeed As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Byte&gt; ^ DeriveKeyTls(System::Security::Cryptography::ECDiffieHellmanPublicKey ^ otherPartyPublicKey, cli::array &lt;System::Byte&gt; ^ prfLabel, cli::array &lt;System::Byte&gt; ^ prfSeed);" />
      <MemberSignature Language="F#" Value="abstract member DeriveKeyTls : System.Security.Cryptography.ECDiffieHellmanPublicKey * byte[] * byte[] -&gt; byte[]&#xA;override this.DeriveKeyTls : System.Security.Cryptography.ECDiffieHellmanPublicKey * byte[] * byte[] -&gt; byte[]" Usage="eCDiffieHellman.DeriveKeyTls (otherPartyPublicKey, prfLabel, prfSeed)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherPartyPublicKey" Type="System.Security.Cryptography.ECDiffieHellmanPublicKey" />
        <Parameter Name="prfLabel" Type="System.Byte[]" />
        <Parameter Name="prfSeed" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="otherPartyPublicKey">
          <span data-ttu-id="d46e8-170">另一方的公開金鑰。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d46e8-170">The other party's public key.</span>
          </span>
        </param>
        <param name="prfLabel">
          <span data-ttu-id="d46e8-171">ASCII 編碼的 PRF 標籤。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d46e8-171">The ASCII-encoded PRF label.</span>
          </span>
        </param>
        <param name="prfSeed">
          <span data-ttu-id="d46e8-172">64 位元組的 PRF 種子。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d46e8-172">The 64-byte PRF seed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d46e8-173">在衍生類別中實作時，使用傳輸層安全性 (TLS) 似隨機函式 (PRF) 衍生演算法，衍生可用來做為金鑰的位元組。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d46e8-173">When implemented in a derived class, derives bytes that can be used as a key using a Transport Layer Security (TLS) Pseudo-Random Function (PRF) derivation algorithm.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d46e8-174">金鑰的金鑰內容會與另一方的公開金鑰交換。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d46e8-174">The key material from the key exchange with the other party’s public key.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="d46e8-175">衍生的類別必須覆寫這個方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d46e8-175">A derived class must override this method.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ExportExplicitParameters">
      <MemberSignature Language="C#" Value="public virtual System.Security.Cryptography.ECParameters ExportExplicitParameters (bool includePrivateParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Security.Cryptography.ECParameters ExportExplicitParameters(bool includePrivateParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellman.ExportExplicitParameters(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ExportExplicitParameters (includePrivateParameters As Boolean) As ECParameters" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Security::Cryptography::ECParameters ExportExplicitParameters(bool includePrivateParameters);" />
      <MemberSignature Language="F#" Value="abstract member ExportExplicitParameters : bool -&gt; System.Security.Cryptography.ECParameters&#xA;override this.ExportExplicitParameters : bool -&gt; System.Security.Cryptography.ECParameters" Usage="eCDiffieHellman.ExportExplicitParameters includePrivateParameters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.ECParameters</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="includePrivateParameters" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="includePrivateParameters">
          <span data-ttu-id="d46e8-176">如果要包含私用參數，則為 <see langword="true" />；否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d46e8-176">
              <see langword="true" /> to include private parameters; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d46e8-177">在衍生類別中覆寫時，會使用明確的曲線形式，將公開或公開和私密金鑰資訊從運作中的 <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> 金鑰匯出至 <see cref="T:System.Security.Cryptography.ECParameters" /> 結構，讓您可將它傳遞至 <see cref="M:System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)" /> 方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d46e8-177">When overridden in a derived class, exports either the public or the public and private key information using the explicit curve form from a working <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> key to an <see cref="T:System.Security.Cryptography.ECParameters" /> structure so that it can be passed to the <see cref="M:System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d46e8-178">物件，使用明確的曲線格式，表示此金鑰在曲線上的點。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d46e8-178">An object that represents the point on the curve for this key, using the explicit curve format.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="d46e8-179">衍生的類別必須覆寫這個方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d46e8-179">A derived class must override this method.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ExportParameters">
      <MemberSignature Language="C#" Value="public virtual System.Security.Cryptography.ECParameters ExportParameters (bool includePrivateParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Security.Cryptography.ECParameters ExportParameters(bool includePrivateParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellman.ExportParameters(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ExportParameters (includePrivateParameters As Boolean) As ECParameters" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Security::Cryptography::ECParameters ExportParameters(bool includePrivateParameters);" />
      <MemberSignature Language="F#" Value="abstract member ExportParameters : bool -&gt; System.Security.Cryptography.ECParameters&#xA;override this.ExportParameters : bool -&gt; System.Security.Cryptography.ECParameters" Usage="eCDiffieHellman.ExportParameters includePrivateParameters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.ECParameters</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="includePrivateParameters" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="includePrivateParameters">
          <span data-ttu-id="d46e8-180">
            <see langword="true" /> 表示要包含私用參數，否則，<see langword="false" /> 表示僅包含公用參數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d46e8-180">
              <see langword="true" /> to include private parameters; otehrwise,  <see langword="false" /> to include public parameters only.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d46e8-181">在衍生類別中覆寫時，會將公開或公開和私密金鑰資訊從運作中的 <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> 金鑰匯出至 <see cref="T:System.Security.Cryptography.ECParameters" /> 結構，讓您可將它傳遞至 <see cref="M:System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)" /> 方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d46e8-181">When overridden in a derived class, exports either the public or the public and private key information from a working <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> key to an <see cref="T:System.Security.Cryptography.ECParameters" /> structure so that it can be passed to the <see cref="M:System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d46e8-182">物件，表示此金鑰在曲線上的點。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d46e8-182">An object that represents the point on the curve for this key.</span>
          </span>
          <span data-ttu-id="d46e8-183">可將它傳遞至 <see cref="M:System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)" /> 方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d46e8-183">It can be passed to the <see cref="M:System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)" /> method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d46e8-184">曲線有一個名稱，如果<xref:System.Security.Cryptography.ECParameters.Curve>屬性包含具名的曲線參數; 否則它會包含明確的參數。</span><span class="sxs-lookup"><span data-stu-id="d46e8-184">If the curve has a name, the <xref:System.Security.Cryptography.ECParameters.Curve> property contains named curve parameters; otherwise, it will contain explicit parameters.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="d46e8-185">衍生的類別必須覆寫這個方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d46e8-185">A derived class must override this method.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="FromXmlString">
      <MemberSignature Language="C#" Value="public override void FromXmlString (string xmlString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void FromXmlString(string xmlString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellman.FromXmlString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub FromXmlString (xmlString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void FromXmlString(System::String ^ xmlString);" />
      <MemberSignature Language="F#" Value="override this.FromXmlString : string -&gt; unit" Usage="eCDiffieHellman.FromXmlString xmlString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xmlString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="xmlString">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateKey">
      <MemberSignature Language="C#" Value="public virtual void GenerateKey (System.Security.Cryptography.ECCurve curve);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GenerateKey(valuetype System.Security.Cryptography.ECCurve curve) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellman.GenerateKey(System.Security.Cryptography.ECCurve)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GenerateKey (curve As ECCurve)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GenerateKey(System::Security::Cryptography::ECCurve curve);" />
      <MemberSignature Language="F#" Value="abstract member GenerateKey : System.Security.Cryptography.ECCurve -&gt; unit&#xA;override this.GenerateKey : System.Security.Cryptography.ECCurve -&gt; unit" Usage="eCDiffieHellman.GenerateKey curve" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="curve" Type="System.Security.Cryptography.ECCurve" />
      </Parameters>
      <Docs>
        <param name="curve">
          <span data-ttu-id="d46e8-186">用來產生暫時性公開/私密金鑰組的曲線。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d46e8-186">The curve used to generate an ephemeral public/private key pair.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d46e8-187">在衍生類別中覆寫時，會針對指定的曲線產生新的暫時性公開/私密金鑰組。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d46e8-187">When overridden in a derived class, generates a new ephemeral public/private key pair for the specified curve.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d46e8-188">`curve` 必須驗證 (也就是它必須傳回`true`) 時傳遞至<xref:System.Security.Cryptography.ECCurve.Validate%2A?displayProperty=nameWithType>方法)，且不得為隱含。</span><span class="sxs-lookup"><span data-stu-id="d46e8-188">`curve` must validate (that is, it must return `true`) when passed to the <xref:System.Security.Cryptography.ECCurve.Validate%2A?displayProperty=nameWithType> method) and must not be implicit.</span></span>  
  
 <span data-ttu-id="d46e8-189">在 Windows 上不支援特性 2 曲線。</span><span class="sxs-lookup"><span data-stu-id="d46e8-189">Characteristic-2 curves are not supported on Windows.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <span data-ttu-id="d46e8-190">
            <paramref name="curve" /> 不會驗證。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d46e8-190">
              <paramref name="curve" /> does not validate.</span>
          </span>
        </exception>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="d46e8-191">衍生的類別必須覆寫這個方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d46e8-191">A derived class must override this method.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ImportParameters">
      <MemberSignature Language="C#" Value="public virtual void ImportParameters (System.Security.Cryptography.ECParameters parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ImportParameters(valuetype System.Security.Cryptography.ECParameters parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ImportParameters (parameters As ECParameters)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ImportParameters(System::Security::Cryptography::ECParameters parameters);" />
      <MemberSignature Language="F#" Value="abstract member ImportParameters : System.Security.Cryptography.ECParameters -&gt; unit&#xA;override this.ImportParameters : System.Security.Cryptography.ECParameters -&gt; unit" Usage="eCDiffieHellman.ImportParameters parameters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="System.Security.Cryptography.ECParameters" />
      </Parameters>
      <Docs>
        <param name="parameters">
          <span data-ttu-id="d46e8-192">要匯入的曲線參數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d46e8-192">The curve's parameters to import.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d46e8-193">在衍生類別中覆寫時，會將 <see cref="T:System.Security.Cryptography.ECCurve" /> 的指定參數做為暫時性金鑰匯入目前的 <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> 物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d46e8-193">When overridden in a derived class, imports the specified parameters for an <see cref="T:System.Security.Cryptography.ECCurve" /> as an ephemeral key into the current <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d46e8-194">`parameters` 必須驗證 (也就是它必須傳回`true`) 時傳遞至<xref:System.Security.Cryptography.ECParameters.Validate%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="d46e8-194">`parameters` must validate (that is, it must return `true`) when passed to the <xref:System.Security.Cryptography.ECParameters.Validate%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="d46e8-195">不支援透過隱含曲線的參數。</span><span class="sxs-lookup"><span data-stu-id="d46e8-195">Parameters over implicit curves are not supported.</span></span>  
  
 <span data-ttu-id="d46e8-196">在 Windows 上不支援特性 2 曲線。</span><span class="sxs-lookup"><span data-stu-id="d46e8-196">Characteristic-2 curves are not supported on Windows.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <span data-ttu-id="d46e8-197">
            <paramref name="parameters" /> 不會驗證。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d46e8-197">
              <paramref name="parameters" /> does not validate.</span>
          </span>
        </exception>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="d46e8-198">衍生的類別必須覆寫這個方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d46e8-198">A derived class must override this method.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="KeyExchangeAlgorithm">
      <MemberSignature Language="C#" Value="public override string KeyExchangeAlgorithm { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string KeyExchangeAlgorithm" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.ECDiffieHellman.KeyExchangeAlgorithm" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property KeyExchangeAlgorithm As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ KeyExchangeAlgorithm { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.KeyExchangeAlgorithm : string" Usage="System.Security.Cryptography.ECDiffieHellman.KeyExchangeAlgorithm" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d46e8-199">取得金鑰交換演算法的名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d46e8-199">Gets the name of the key exchange algorithm.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d46e8-200">金鑰交換演算法的名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d46e8-200">The name of the key exchange algorithm.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d46e8-201">這個屬性的預設值 （非覆寫） 實作會傳回字串"ECDiffieHellman"。</span><span class="sxs-lookup"><span data-stu-id="d46e8-201">The default (non-overridden) implementation of this property returns the string "ECDiffieHellman".</span></span>  
  
 <span data-ttu-id="d46e8-202">這個屬性繼承自<xref:System.Security.Cryptography.AsymmetricAlgorithm>基底類別。</span><span class="sxs-lookup"><span data-stu-id="d46e8-202">This property is inherited from the <xref:System.Security.Cryptography.AsymmetricAlgorithm> base class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PublicKey">
      <MemberSignature Language="C#" Value="public abstract System.Security.Cryptography.ECDiffieHellmanPublicKey PublicKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.ECDiffieHellmanPublicKey PublicKey" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.ECDiffieHellman.PublicKey" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property PublicKey As ECDiffieHellmanPublicKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Security::Cryptography::ECDiffieHellmanPublicKey ^ PublicKey { System::Security::Cryptography::ECDiffieHellmanPublicKey ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PublicKey : System.Security.Cryptography.ECDiffieHellmanPublicKey" Usage="System.Security.Cryptography.ECDiffieHellman.PublicKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.ECDiffieHellmanPublicKey</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d46e8-203">取得目前的 Elliptic Curve Diffie-Hellman (ECDH) 執行個體正在使用的公開金鑰。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d46e8-203">Gets the public key that is being used by the current Elliptic Curve Diffie-Hellman (ECDH) instance.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d46e8-204">這個 <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> 執行個體正在使用的 ECDH 金鑰組的公開部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d46e8-204">The public part of the ECDH key pair that is being used by this <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> instance.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SignatureAlgorithm">
      <MemberSignature Language="C#" Value="public override string SignatureAlgorithm { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SignatureAlgorithm" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.ECDiffieHellman.SignatureAlgorithm" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property SignatureAlgorithm As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ SignatureAlgorithm { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SignatureAlgorithm : string" Usage="System.Security.Cryptography.ECDiffieHellman.SignatureAlgorithm" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d46e8-205">取得簽章演算法的名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d46e8-205">Gets the name of the signature algorithm.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d46e8-206">一定是 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d46e8-206">Always <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d46e8-207">這個屬性繼承自<xref:System.Security.Cryptography.AsymmetricAlgorithm>基底類別。</span><span class="sxs-lookup"><span data-stu-id="d46e8-207">This property is inherited from the <xref:System.Security.Cryptography.AsymmetricAlgorithm> base class.</span></span>  
  
 <span data-ttu-id="d46e8-208">Elliptic Curve Diffie-hellman (ECDH) 演算法的金鑰衍生，用於產生沒有數位簽章。</span><span class="sxs-lookup"><span data-stu-id="d46e8-208">The Elliptic Curve Diffie-Hellman (ECDH) algorithm is used for key derivation, not digital signature generation.</span></span> <span data-ttu-id="d46e8-209">因此，這個屬性會傳回`null`。</span><span class="sxs-lookup"><span data-stu-id="d46e8-209">Therefore, this property returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToXmlString">
      <MemberSignature Language="C#" Value="public override string ToXmlString (bool includePrivateParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToXmlString(bool includePrivateParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellman.ToXmlString(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToXmlString (includePrivateParameters As Boolean) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToXmlString(bool includePrivateParameters);" />
      <MemberSignature Language="F#" Value="override this.ToXmlString : bool -&gt; string" Usage="eCDiffieHellman.ToXmlString includePrivateParameters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="includePrivateParameters" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="includePrivateParameters">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>