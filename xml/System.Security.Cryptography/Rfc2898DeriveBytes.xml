<Type Name="Rfc2898DeriveBytes" FullName="System.Security.Cryptography.Rfc2898DeriveBytes">
  <Metadata><Meta Name="ms.openlocfilehash" Value="fe2954dbcd53683e9e6b09c8f6884b68f974a105" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58688271" /></Metadata><TypeSignature Language="C#" Value="public class Rfc2898DeriveBytes : System.Security.Cryptography.DeriveBytes" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Rfc2898DeriveBytes extends System.Security.Cryptography.DeriveBytes" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.Rfc2898DeriveBytes" />
  <TypeSignature Language="VB.NET" Value="Public Class Rfc2898DeriveBytes&#xA;Inherits DeriveBytes" />
  <TypeSignature Language="C++ CLI" Value="public ref class Rfc2898DeriveBytes : System::Security::Cryptography::DeriveBytes" />
  <TypeSignature Language="F#" Value="type Rfc2898DeriveBytes = class&#xA;    inherit DeriveBytes" />
  <AssemblyInfo>
    <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.3.0.0</AssemblyVersion>
    <AssemblyVersion>4.3.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.Cryptography.DeriveBytes</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="812c2-101">依據 <see cref="T:System.Security.Cryptography.HMACSHA1" /> 使用虛擬亂數產生器，實作密碼式的金鑰衍生功能 PBKDF2。</span><span class="sxs-lookup"><span data-stu-id="812c2-101">Implements password-based key derivation functionality, PBKDF2, by using a pseudo-random number generator based on <see cref="T:System.Security.Cryptography.HMACSHA1" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="812c2-102"><xref:System.Security.Cryptography.Rfc2898DeriveBytes> 接受密碼、 salt 和反覆計數，並接著會產生金鑰，透過呼叫<xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="812c2-102"><xref:System.Security.Cryptography.Rfc2898DeriveBytes> takes a password, a salt, and an iteration count, and then generates keys through calls to the <xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A> method.</span></span>  
  
 <span data-ttu-id="812c2-103">RFC 2898 包含密碼和 salt，建立索引鍵和初始化向量 (IV) 的方法。</span><span class="sxs-lookup"><span data-stu-id="812c2-103">RFC 2898 includes methods for creating a key and initialization vector (IV) from a password and salt.</span></span> <span data-ttu-id="812c2-104">您可以使用 PBKDF2，密碼為基礎的金鑰衍生函式，來衍生金鑰使用似隨機函式，可讓要產生的幾乎無限制長度的金鑰。</span><span class="sxs-lookup"><span data-stu-id="812c2-104">You can use PBKDF2, a password-based key derivation function, to derive keys using a pseudo-random function that allows keys of virtually unlimited length to be generated.</span></span> <span data-ttu-id="812c2-105"><xref:System.Security.Cryptography.Rfc2898DeriveBytes>類別可以用來產生衍生的金鑰的基底的索引鍵與其他參數。</span><span class="sxs-lookup"><span data-stu-id="812c2-105">The <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class can be used to produce a derived key from a base key and other parameters.</span></span> <span data-ttu-id="812c2-106">密碼為基礎的金鑰衍生函式中的基底的索引鍵是密碼，而其他參數則 salt 值和反覆項目計數。</span><span class="sxs-lookup"><span data-stu-id="812c2-106">In a password-based key derivation function, the base key is a password and the other parameters are a salt value and an iteration count.</span></span>  
  
 <span data-ttu-id="812c2-107">如需 PBKDF2 的詳細資訊，請參閱 RFC 2898，"PKCS #5:Password-based Cryptography Specification Version 2.0，」 上可用[註解的網站要求](https://go.microsoft.com/fwlink/?LinkID=37119)。</span><span class="sxs-lookup"><span data-stu-id="812c2-107">For more information about PBKDF2, see RFC 2898, "PKCS #5: Password-Based Cryptography Specification Version 2.0," available on the [Request for Comments Web site](https://go.microsoft.com/fwlink/?LinkID=37119).</span></span> <span data-ttu-id="812c2-108">完整的詳細資訊，請參閱區段 5.2，"PBKDF2"。</span><span class="sxs-lookup"><span data-stu-id="812c2-108">See section 5.2, "PBKDF2," for complete details.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="812c2-109">永遠不會硬式編碼在原始程式碼中的密碼。</span><span class="sxs-lookup"><span data-stu-id="812c2-109">Never hard-code a password within your source code.</span></span>  <span data-ttu-id="812c2-110">可以從組件擷取硬式編碼的密碼，利用[Ildasm.exe （IL 反組譯工具）](~/docs/framework/tools/ildasm-exe-il-disassembler.md)、 使用十六進位編輯器，或只開啟 Notepad.exe 之類的文字編輯器中的組件。</span><span class="sxs-lookup"><span data-stu-id="812c2-110">Hard-coded passwords can be retrieved from an assembly by using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), by using a hexadecimal editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="812c2-111">下列程式碼範例會使用<xref:System.Security.Cryptography.Rfc2898DeriveBytes>類別來建立兩個相同的金鑰<xref:System.Security.Cryptography.TripleDES>類別。</span><span class="sxs-lookup"><span data-stu-id="812c2-111">The following code example uses the <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class to create two identical keys for the <xref:System.Security.Cryptography.TripleDES> class.</span></span>  <span data-ttu-id="812c2-112">然後，它會加密並解密相同的索引鍵的資料。</span><span class="sxs-lookup"><span data-stu-id="812c2-112">It then encrypts and decrypts some data using the keys.</span></span>  
  
 [!code-cpp[rfc28981#1](~/samples/snippets/cpp/VS_Snippets_CLR/rfc28981/CPP/rfc28981.cpp#1)]
 [!code-csharp[rfc28981#1](~/samples/snippets/csharp/VS_Snippets_CLR/rfc28981/CS/rfc28981.cs#1)]
 [!code-vb[rfc28981#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/rfc28981/vb/rfc28981.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/standard/security/cryptographic-services.md"><span data-ttu-id="812c2-113">密碼編譯服務</span><span class="sxs-lookup"><span data-stu-id="812c2-113">Cryptographic Services</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="812c2-114">初始化 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="812c2-114">Initializes a new instance of the <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rfc2898DeriveBytes (string password, byte[] salt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string password, unsigned int8[] salt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As String, salt As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Rfc2898DeriveBytes(System::String ^ password, cli::array &lt;System::Byte&gt; ^ salt);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.Rfc2898DeriveBytes : string * byte[] -&gt; System.Security.Cryptography.Rfc2898DeriveBytes" Usage="new System.Security.Cryptography.Rfc2898DeriveBytes (password, salt)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="salt" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="password"><span data-ttu-id="812c2-115">用來衍生金鑰的密碼。</span><span class="sxs-lookup"><span data-stu-id="812c2-115">The password used to derive the key.</span></span></param>
        <param name="salt"><span data-ttu-id="812c2-116">用來衍生金鑰的金鑰 Salt。</span><span class="sxs-lookup"><span data-stu-id="812c2-116">The key salt used to derive the key.</span></span></param>
        <summary><span data-ttu-id="812c2-117">使用密碼和 Salt 來衍生金鑰，以初始化 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="812c2-117">Initializes a new instance of the <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> class using a password and salt to derive the key.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="812c2-118">Salt 大小必須是 8 個位元組或更大。</span><span class="sxs-lookup"><span data-stu-id="812c2-118">The salt size must be 8 bytes or larger.</span></span>  
  
 <span data-ttu-id="812c2-119">RFC 2898 包含密碼和 salt，建立索引鍵和初始化向量 (IV) 的方法。</span><span class="sxs-lookup"><span data-stu-id="812c2-119">RFC 2898 includes methods for creating a key and initialization vector (IV) from a password and salt.</span></span> <span data-ttu-id="812c2-120">您可以使用 PBKDF2，密碼為基礎的金鑰衍生函式，來衍生金鑰使用似隨機函式，可讓要產生的幾乎無限制長度的金鑰。</span><span class="sxs-lookup"><span data-stu-id="812c2-120">You can use PBKDF2, a password-based key derivation function, to derive keys using a pseudo-random function that allows keys of virtually unlimited length to be generated.</span></span> <span data-ttu-id="812c2-121"><xref:System.Security.Cryptography.Rfc2898DeriveBytes>類別可以用來產生衍生的金鑰的基底的索引鍵與其他參數。</span><span class="sxs-lookup"><span data-stu-id="812c2-121">The <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class can be used to produce a derived key from a base key and other parameters.</span></span> <span data-ttu-id="812c2-122">密碼為基礎的金鑰衍生函式中的基底的索引鍵是密碼，而其他參數則 salt 值和反覆項目計數。</span><span class="sxs-lookup"><span data-stu-id="812c2-122">In a password-based key derivation function, the base key is a password and the other parameters are a salt value and an iteration count.</span></span>  
  
 <span data-ttu-id="812c2-123">如需 PBKDF2 的詳細資訊，請參閱 RFC 2898，"PKCS #5:Password-based Cryptography Specification Version 2.0，」 上可用[註解的網站要求](https://go.microsoft.com/fwlink/?LinkID=37119)。</span><span class="sxs-lookup"><span data-stu-id="812c2-123">For more information about PBKDF2, see RFC 2898, "PKCS #5: Password-Based Cryptography Specification Version 2.0," available on the [Request for Comments Web site](https://go.microsoft.com/fwlink/?LinkID=37119).</span></span> <span data-ttu-id="812c2-124">完整的詳細資訊，請參閱區段 5.2，"PBKDF2"。</span><span class="sxs-lookup"><span data-stu-id="812c2-124">See section 5.2, "PBKDF2," for complete details.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="812c2-125">永遠不會硬式編碼在原始程式碼中的密碼。</span><span class="sxs-lookup"><span data-stu-id="812c2-125">Never hard-code a password within your source code.</span></span>  <span data-ttu-id="812c2-126">可以從組件擷取硬式編碼的密碼，利用[Ildasm.exe （IL 反組譯工具）](~/docs/framework/tools/ildasm-exe-il-disassembler.md)、 使用十六進位編輯器，或只開啟 Notepad.exe 之類的文字編輯器中的組件。</span><span class="sxs-lookup"><span data-stu-id="812c2-126">Hard-coded passwords can be retrieved from an assembly by using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), by using a hexadecimal editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="812c2-127">下列程式碼範例會使用<xref:System.Security.Cryptography.Rfc2898DeriveBytes>類別來建立兩個相同的金鑰<xref:System.Security.Cryptography.TripleDES>類別。</span><span class="sxs-lookup"><span data-stu-id="812c2-127">The following code example uses the <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class to create two identical keys for the <xref:System.Security.Cryptography.TripleDES> class.</span></span>  <span data-ttu-id="812c2-128">然後，它會加密並解密相同的索引鍵的資料。</span><span class="sxs-lookup"><span data-stu-id="812c2-128">It then encrypts and decrypts some data using the keys.</span></span>  
  
 [!code-cpp[rfc28981#1](~/samples/snippets/cpp/VS_Snippets_CLR/rfc28981/CPP/rfc28981.cpp#1)]
 [!code-csharp[rfc28981#1](~/samples/snippets/csharp/VS_Snippets_CLR/rfc28981/CS/rfc28981.cs#1)]
 [!code-vb[rfc28981#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/rfc28981/vb/rfc28981.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="812c2-129">指定的 Salt 大小小於 8 個位元組，或反覆計數小於 1。</span><span class="sxs-lookup"><span data-stu-id="812c2-129">The specified salt size is smaller than 8 bytes or the iteration count is less than 1.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="812c2-130">密碼或 Salt 是 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="812c2-130">The password or salt is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/security/cryptographic-services.md"><span data-ttu-id="812c2-131">密碼編譯服務</span><span class="sxs-lookup"><span data-stu-id="812c2-131">Cryptographic Services</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rfc2898DeriveBytes (string password, int saltSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string password, int32 saltSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As String, saltSize As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Rfc2898DeriveBytes(System::String ^ password, int saltSize);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.Rfc2898DeriveBytes : string * int -&gt; System.Security.Cryptography.Rfc2898DeriveBytes" Usage="new System.Security.Cryptography.Rfc2898DeriveBytes (password, saltSize)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="saltSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="password"><span data-ttu-id="812c2-132">用來衍生金鑰的密碼。</span><span class="sxs-lookup"><span data-stu-id="812c2-132">The password used to derive the key.</span></span></param>
        <param name="saltSize"><span data-ttu-id="812c2-133">您希望此類別產生的隨機 Salt 之大小。</span><span class="sxs-lookup"><span data-stu-id="812c2-133">The size of the random salt that you want the class to generate.</span></span></param>
        <summary><span data-ttu-id="812c2-134">使用密碼和 Salt 大小來衍生金鑰，以初始化 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="812c2-134">Initializes a new instance of the <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> class using the password and salt size to derive the key.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="812c2-135">Salt 大小必須是 8 個位元組或更大。</span><span class="sxs-lookup"><span data-stu-id="812c2-135">The salt size must be 8 bytes or larger.</span></span>  
  
 <span data-ttu-id="812c2-136">RFC 2898 包含密碼和 salt，建立索引鍵和初始化向量 (IV) 的方法。</span><span class="sxs-lookup"><span data-stu-id="812c2-136">RFC 2898 includes methods for creating a key and initialization vector (IV) from a password and salt.</span></span> <span data-ttu-id="812c2-137">您可以使用 PBKDF2，密碼為基礎的金鑰衍生函式，來衍生金鑰使用似隨機函式，可讓要產生的幾乎無限制長度的金鑰。</span><span class="sxs-lookup"><span data-stu-id="812c2-137">You can use PBKDF2, a password-based key derivation function, to derive keys using a pseudo-random function that allows keys of virtually unlimited length to be generated.</span></span> <span data-ttu-id="812c2-138"><xref:System.Security.Cryptography.Rfc2898DeriveBytes>類別可以用來產生衍生的金鑰的基底的索引鍵與其他參數。</span><span class="sxs-lookup"><span data-stu-id="812c2-138">The <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class can be used to produce a derived key from a base key and other parameters.</span></span> <span data-ttu-id="812c2-139">密碼為基礎的金鑰衍生函式中的基底的索引鍵是密碼，而其他參數則 salt 值和反覆項目計數。</span><span class="sxs-lookup"><span data-stu-id="812c2-139">In a password-based key derivation function, the base key is a password and the other parameters are a salt value and an iteration count.</span></span>  
  
 <span data-ttu-id="812c2-140">如需 PBKDF2 的詳細資訊，請參閱 RFC 2898，"PKCS #5:Password-based Cryptography Specification Version 2.0，」 上可用[註解的網站要求](https://go.microsoft.com/fwlink/?LinkID=37119)。</span><span class="sxs-lookup"><span data-stu-id="812c2-140">For more information about PBKDF2, see RFC 2898, "PKCS #5: Password-Based Cryptography Specification Version 2.0," available on the [Request for Comments Web site](https://go.microsoft.com/fwlink/?LinkID=37119).</span></span> <span data-ttu-id="812c2-141">完整的詳細資訊，請參閱區段 5.2，"PBKDF2"。</span><span class="sxs-lookup"><span data-stu-id="812c2-141">See section 5.2, "PBKDF2," for complete details.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="812c2-142">永遠不會硬式編碼在原始程式碼中的密碼。</span><span class="sxs-lookup"><span data-stu-id="812c2-142">Never hard-code a password within your source code.</span></span>  <span data-ttu-id="812c2-143">可以從組件擷取硬式編碼的密碼，利用[Ildasm.exe （IL 反組譯工具）](~/docs/framework/tools/ildasm-exe-il-disassembler.md)、 使用十六進位編輯器，或只開啟 Notepad.exe 之類的文字編輯器中的組件。</span><span class="sxs-lookup"><span data-stu-id="812c2-143">Hard-coded passwords can be retrieved from an assembly by using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), by using a hexadecimal editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="812c2-144">指定的 Salt 大小小於 8 個位元組。</span><span class="sxs-lookup"><span data-stu-id="812c2-144">The specified salt size is smaller than 8 bytes.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="812c2-145">密碼或 Salt 是 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="812c2-145">The password or salt is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/security/cryptographic-services.md"><span data-ttu-id="812c2-146">密碼編譯服務</span><span class="sxs-lookup"><span data-stu-id="812c2-146">Cryptographic Services</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rfc2898DeriveBytes (byte[] password, byte[] salt, int iterations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] password, unsigned int8[] salt, int32 iterations) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.Byte[],System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As Byte(), salt As Byte(), iterations As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Rfc2898DeriveBytes(cli::array &lt;System::Byte&gt; ^ password, cli::array &lt;System::Byte&gt; ^ salt, int iterations);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.Rfc2898DeriveBytes : byte[] * byte[] * int -&gt; System.Security.Cryptography.Rfc2898DeriveBytes" Usage="new System.Security.Cryptography.Rfc2898DeriveBytes (password, salt, iterations)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="password" Type="System.Byte[]" />
        <Parameter Name="salt" Type="System.Byte[]" />
        <Parameter Name="iterations" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="password"><span data-ttu-id="812c2-147">用來衍生金鑰的密碼。</span><span class="sxs-lookup"><span data-stu-id="812c2-147">The password used to derive the key.</span></span></param>
        <param name="salt"><span data-ttu-id="812c2-148">用來衍生金鑰的金鑰 Salt。</span><span class="sxs-lookup"><span data-stu-id="812c2-148">The key salt used to derive the key.</span></span></param>
        <param name="iterations"><span data-ttu-id="812c2-149">操作的重複次數。</span><span class="sxs-lookup"><span data-stu-id="812c2-149">The number of iterations for the operation.</span></span></param>
        <summary><span data-ttu-id="812c2-150">使用密碼、Salt 和反覆計數來衍生金鑰，以初始化 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="812c2-150">Initializes a new instance of the <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> class using a password, a salt, and number of iterations to derive the key.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="812c2-151">Salt 大小必須是 8 個位元組或更大且反覆項目計數必須小於或等於零。</span><span class="sxs-lookup"><span data-stu-id="812c2-151">The salt size must be 8 bytes or larger and the iteration count must be greater than zero.</span></span> <span data-ttu-id="812c2-152">反覆項目的最小建議的數目是 1000年。</span><span class="sxs-lookup"><span data-stu-id="812c2-152">The minimum recommended number of iterations is 1000.</span></span>  
  
 <span data-ttu-id="812c2-153">RFC 2898 包含密碼和 salt，建立索引鍵和初始化向量 (IV) 的方法。</span><span class="sxs-lookup"><span data-stu-id="812c2-153">RFC 2898 includes methods for creating a key and initialization vector (IV) from a password and salt.</span></span> <span data-ttu-id="812c2-154">您可以使用 PBKDF2，密碼為基礎的金鑰衍生函式，來衍生金鑰使用似隨機函式，可讓要產生的幾乎無限制長度的金鑰。</span><span class="sxs-lookup"><span data-stu-id="812c2-154">You can use PBKDF2, a password-based key derivation function, to derive keys using a pseudo-random function that allows keys of virtually unlimited length to be generated.</span></span> <span data-ttu-id="812c2-155"><xref:System.Security.Cryptography.Rfc2898DeriveBytes>類別可以用來產生衍生的金鑰的基底的索引鍵與其他參數。</span><span class="sxs-lookup"><span data-stu-id="812c2-155">The <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class can be used to produce a derived key from a base key and other parameters.</span></span> <span data-ttu-id="812c2-156">密碼為基礎的金鑰衍生函式中的基底的索引鍵是密碼，而其他參數則 salt 值和反覆項目計數。</span><span class="sxs-lookup"><span data-stu-id="812c2-156">In a password-based key derivation function, the base key is a password and the other parameters are a salt value and an iteration count.</span></span>  
  
 <span data-ttu-id="812c2-157">如需 PBKDF2 的詳細資訊，請參閱 RFC 2898，"PKCS #5:Password-based Cryptography Specification Version 2.0，」 上可用[註解的網站要求](https://go.microsoft.com/fwlink/?LinkID=37119)。</span><span class="sxs-lookup"><span data-stu-id="812c2-157">For more information about PBKDF2, see RFC 2898, "PKCS #5: Password-Based Cryptography Specification Version 2.0," available on the [Request for Comments Web site](https://go.microsoft.com/fwlink/?LinkID=37119).</span></span> <span data-ttu-id="812c2-158">完整的詳細資訊，請參閱區段 5.2，"PBKDF2"。</span><span class="sxs-lookup"><span data-stu-id="812c2-158">See section 5.2, "PBKDF2," for complete details.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="812c2-159">永遠不會硬式編碼在原始程式碼中的密碼。</span><span class="sxs-lookup"><span data-stu-id="812c2-159">Never hard-code a password within your source code.</span></span>  <span data-ttu-id="812c2-160">可以從組件擷取硬式編碼的密碼，利用[Ildasm.exe （IL 反組譯工具）](~/docs/framework/tools/ildasm-exe-il-disassembler.md)、 使用十六進位編輯器，或只開啟 Notepad.exe 之類的文字編輯器中的組件。</span><span class="sxs-lookup"><span data-stu-id="812c2-160">Hard-coded passwords can be retrieved from an assembly by using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), by using a hexadecimal editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="812c2-161">指定的 Salt 大小小於 8 個位元組，或反覆計數小於 1。</span><span class="sxs-lookup"><span data-stu-id="812c2-161">The specified salt size is smaller than 8 bytes or the iteration count is less than 1.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="812c2-162">密碼或 Salt 是 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="812c2-162">The password or salt is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rfc2898DeriveBytes (string password, byte[] salt, int iterations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string password, unsigned int8[] salt, int32 iterations) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As String, salt As Byte(), iterations As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Rfc2898DeriveBytes(System::String ^ password, cli::array &lt;System::Byte&gt; ^ salt, int iterations);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.Rfc2898DeriveBytes : string * byte[] * int -&gt; System.Security.Cryptography.Rfc2898DeriveBytes" Usage="new System.Security.Cryptography.Rfc2898DeriveBytes (password, salt, iterations)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="salt" Type="System.Byte[]" />
        <Parameter Name="iterations" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="password"><span data-ttu-id="812c2-163">用來衍生金鑰的密碼。</span><span class="sxs-lookup"><span data-stu-id="812c2-163">The password used to derive the key.</span></span></param>
        <param name="salt"><span data-ttu-id="812c2-164">用來衍生金鑰的金鑰 Salt。</span><span class="sxs-lookup"><span data-stu-id="812c2-164">The key salt used to derive the key.</span></span></param>
        <param name="iterations"><span data-ttu-id="812c2-165">操作的重複次數。</span><span class="sxs-lookup"><span data-stu-id="812c2-165">The number of iterations for the operation.</span></span></param>
        <summary><span data-ttu-id="812c2-166">使用密碼、Salt 和反覆計數來衍生金鑰，以初始化 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="812c2-166">Initializes a new instance of the <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> class using a password, a salt, and number of iterations to derive the key.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="812c2-167">Salt 大小必須是 8 個位元組或更大且反覆項目計數必須小於或等於零。</span><span class="sxs-lookup"><span data-stu-id="812c2-167">The salt size must be 8 bytes or larger and the iteration count must be greater than zero.</span></span> <span data-ttu-id="812c2-168">反覆項目的最小建議的數目是 1000年。</span><span class="sxs-lookup"><span data-stu-id="812c2-168">The minimum recommended number of iterations is 1000.</span></span>  
  
 <span data-ttu-id="812c2-169">RFC 2898 包含密碼和 salt，建立索引鍵和初始化向量 (IV) 的方法。</span><span class="sxs-lookup"><span data-stu-id="812c2-169">RFC 2898 includes methods for creating a key and initialization vector (IV) from a password and salt.</span></span> <span data-ttu-id="812c2-170">您可以使用 PBKDF2，密碼為基礎的金鑰衍生函式，來衍生金鑰使用似隨機函式，可讓要產生的幾乎無限制長度的金鑰。</span><span class="sxs-lookup"><span data-stu-id="812c2-170">You can use PBKDF2, a password-based key derivation function, to derive keys using a pseudo-random function that allows keys of virtually unlimited length to be generated.</span></span> <span data-ttu-id="812c2-171"><xref:System.Security.Cryptography.Rfc2898DeriveBytes>類別可以用來產生衍生的金鑰的基底的索引鍵與其他參數。</span><span class="sxs-lookup"><span data-stu-id="812c2-171">The <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class can be used to produce a derived key from a base key and other parameters.</span></span> <span data-ttu-id="812c2-172">密碼為基礎的金鑰衍生函式中的基底的索引鍵是密碼，而其他參數則 salt 值和反覆項目計數。</span><span class="sxs-lookup"><span data-stu-id="812c2-172">In a password-based key derivation function, the base key is a password and the other parameters are a salt value and an iteration count.</span></span>  
  
 <span data-ttu-id="812c2-173">如需 PBKDF2 的詳細資訊，請參閱 RFC 2898，"PKCS #5:Password-based Cryptography Specification Version 2.0，」 上可用[註解的網站要求](https://go.microsoft.com/fwlink/?LinkID=37119)。</span><span class="sxs-lookup"><span data-stu-id="812c2-173">For more information about PBKDF2, see RFC 2898, "PKCS #5: Password-Based Cryptography Specification Version 2.0," available on the [Request for Comments Web site](https://go.microsoft.com/fwlink/?LinkID=37119).</span></span> <span data-ttu-id="812c2-174">完整的詳細資訊，請參閱區段 5.2，"PBKDF2"。</span><span class="sxs-lookup"><span data-stu-id="812c2-174">See section 5.2, "PBKDF2," for complete details.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="812c2-175">永遠不會硬式編碼在原始程式碼中的密碼。</span><span class="sxs-lookup"><span data-stu-id="812c2-175">Never hard-code a password within your source code.</span></span>  <span data-ttu-id="812c2-176">可以從組件擷取硬式編碼的密碼，利用[Ildasm.exe （IL 反組譯工具）](~/docs/framework/tools/ildasm-exe-il-disassembler.md)、 使用十六進位編輯器，或只開啟 Notepad.exe 之類的文字編輯器中的組件。</span><span class="sxs-lookup"><span data-stu-id="812c2-176">Hard-coded passwords can be retrieved from an assembly by using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), by using a hexadecimal editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="812c2-177">下列程式碼範例會使用<xref:System.Security.Cryptography.Rfc2898DeriveBytes>類別來建立兩個相同的金鑰<xref:System.Security.Cryptography.TripleDES>類別。</span><span class="sxs-lookup"><span data-stu-id="812c2-177">The following code example uses the <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class to create two identical keys for the <xref:System.Security.Cryptography.TripleDES> class.</span></span>  <span data-ttu-id="812c2-178">然後，它會加密並解密相同的索引鍵的資料。</span><span class="sxs-lookup"><span data-stu-id="812c2-178">It then encrypts and decrypts some data using the keys.</span></span>  
  
 [!code-cpp[rfc28981#1](~/samples/snippets/cpp/VS_Snippets_CLR/rfc28981/CPP/rfc28981.cpp#1)]
 [!code-csharp[rfc28981#1](~/samples/snippets/csharp/VS_Snippets_CLR/rfc28981/CS/rfc28981.cs#1)]
 [!code-vb[rfc28981#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/rfc28981/vb/rfc28981.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="812c2-179">指定的 Salt 大小小於 8 個位元組，或反覆計數小於 1。</span><span class="sxs-lookup"><span data-stu-id="812c2-179">The specified salt size is smaller than 8 bytes or the iteration count is less than 1.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="812c2-180">密碼或 Salt 是 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="812c2-180">The password or salt is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/security/cryptographic-services.md"><span data-ttu-id="812c2-181">密碼編譯服務</span><span class="sxs-lookup"><span data-stu-id="812c2-181">Cryptographic Services</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rfc2898DeriveBytes (string password, int saltSize, int iterations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string password, int32 saltSize, int32 iterations) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As String, saltSize As Integer, iterations As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Rfc2898DeriveBytes(System::String ^ password, int saltSize, int iterations);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.Rfc2898DeriveBytes : string * int * int -&gt; System.Security.Cryptography.Rfc2898DeriveBytes" Usage="new System.Security.Cryptography.Rfc2898DeriveBytes (password, saltSize, iterations)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="saltSize" Type="System.Int32" />
        <Parameter Name="iterations" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="password"><span data-ttu-id="812c2-182">用來衍生金鑰的密碼。</span><span class="sxs-lookup"><span data-stu-id="812c2-182">The password used to derive the key.</span></span></param>
        <param name="saltSize"><span data-ttu-id="812c2-183">您希望此類別產生的隨機 Salt 之大小。</span><span class="sxs-lookup"><span data-stu-id="812c2-183">The size of the random salt that you want the class to generate.</span></span></param>
        <param name="iterations"><span data-ttu-id="812c2-184">操作的重複次數。</span><span class="sxs-lookup"><span data-stu-id="812c2-184">The number of iterations for the operation.</span></span></param>
        <summary><span data-ttu-id="812c2-185">使用密碼、Salt 大小和反覆計數來衍生金鑰，以初始化 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="812c2-185">Initializes a new instance of the <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> class using a password, a salt size, and number of iterations to derive the key.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="812c2-186">Salt 大小必須是 8 個位元組或更大且反覆項目計數必須小於或等於零。</span><span class="sxs-lookup"><span data-stu-id="812c2-186">The salt size must be 8 bytes or larger and the iteration count must be greater than zero.</span></span> <span data-ttu-id="812c2-187">反覆項目的最小建議的數目是 1000年。</span><span class="sxs-lookup"><span data-stu-id="812c2-187">The minimum recommended number of iterations is 1000.</span></span>  
  
 <span data-ttu-id="812c2-188">RFC 2898 包含密碼和 salt，建立索引鍵和初始化向量 (IV) 的方法。</span><span class="sxs-lookup"><span data-stu-id="812c2-188">RFC 2898 includes methods for creating a key and initialization vector (IV) from a password and salt.</span></span> <span data-ttu-id="812c2-189">您可以使用 PBKDF2，密碼為基礎的金鑰衍生函式，來衍生金鑰使用似隨機函式，可讓要產生的幾乎無限制長度的金鑰。</span><span class="sxs-lookup"><span data-stu-id="812c2-189">You can use PBKDF2, a password-based key derivation function, to derive keys using a pseudo-random function that allows keys of virtually unlimited length to be generated.</span></span> <span data-ttu-id="812c2-190"><xref:System.Security.Cryptography.Rfc2898DeriveBytes>類別可以用來產生衍生的金鑰的基底的索引鍵與其他參數。</span><span class="sxs-lookup"><span data-stu-id="812c2-190">The <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class can be used to produce a derived key from a base key and other parameters.</span></span> <span data-ttu-id="812c2-191">密碼為基礎的金鑰衍生函式中的基底的索引鍵是密碼，而其他參數則 salt 值和反覆項目計數。</span><span class="sxs-lookup"><span data-stu-id="812c2-191">In a password-based key derivation function, the base key is a password and the other parameters are a salt value and an iteration count.</span></span>  
  
 <span data-ttu-id="812c2-192">如需有關 PBKDF2 的詳細資訊，請參閱 RFC 2898，"PKCS #5:Password-based Cryptography Specification Version 2.0，」 上可用[註解的網站要求](https://go.microsoft.com/fwlink/?LinkID=37119)。</span><span class="sxs-lookup"><span data-stu-id="812c2-192">For more information on PBKDF2, see RFC 2898,"PKCS #5: Password-Based Cryptography Specification Version 2.0," available on the [Request for Comments Web site](https://go.microsoft.com/fwlink/?LinkID=37119).</span></span> <span data-ttu-id="812c2-193">完整的詳細資訊，請參閱區段 5.2，"PBKDF2"。</span><span class="sxs-lookup"><span data-stu-id="812c2-193">See section 5.2, "PBKDF2," for complete details.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="812c2-194">永遠不會硬式編碼在原始程式碼中的密碼。</span><span class="sxs-lookup"><span data-stu-id="812c2-194">Never hard-code a password within your source code.</span></span>  <span data-ttu-id="812c2-195">可以從組件擷取硬式編碼的密碼，利用[Ildasm.exe （IL 反組譯工具）](~/docs/framework/tools/ildasm-exe-il-disassembler.md)、 使用十六進位編輯器，或只開啟 Notepad.exe 之類的文字編輯器中的組件。</span><span class="sxs-lookup"><span data-stu-id="812c2-195">Hard-coded passwords can be retrieved from an assembly by using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), by using a hexadecimal editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="812c2-196">指定的 Salt 大小小於 8 個位元組，或反覆計數小於 1。</span><span class="sxs-lookup"><span data-stu-id="812c2-196">The specified salt size is smaller than 8 bytes or the iteration count is less than 1.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="812c2-197">密碼或 Salt 是 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="812c2-197">The password or salt is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="812c2-198"><paramref name="iterations" /> 超出範圍。</span><span class="sxs-lookup"><span data-stu-id="812c2-198"><paramref name="iterations" /> is out of range.</span></span> <span data-ttu-id="812c2-199">這個參數需要非負數的數字。</span><span class="sxs-lookup"><span data-stu-id="812c2-199">This parameter requires a non-negative number.</span></span></exception>
        <related type="Article" href="~/docs/standard/security/cryptographic-services.md"><span data-ttu-id="812c2-200">密碼編譯服務</span><span class="sxs-lookup"><span data-stu-id="812c2-200">Cryptographic Services</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rfc2898DeriveBytes (byte[] password, byte[] salt, int iterations, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] password, unsigned int8[] salt, int32 iterations, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.Byte[],System.Byte[],System.Int32,System.Security.Cryptography.HashAlgorithmName)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As Byte(), salt As Byte(), iterations As Integer, hashAlgorithm As HashAlgorithmName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Rfc2898DeriveBytes(cli::array &lt;System::Byte&gt; ^ password, cli::array &lt;System::Byte&gt; ^ salt, int iterations, System::Security::Cryptography::HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.Rfc2898DeriveBytes : byte[] * byte[] * int * System.Security.Cryptography.HashAlgorithmName -&gt; System.Security.Cryptography.Rfc2898DeriveBytes" Usage="new System.Security.Cryptography.Rfc2898DeriveBytes (password, salt, iterations, hashAlgorithm)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="password" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.7.2;netframework-4.8;netstandard-2.1" />
        <Parameter Name="salt" Type="System.Byte[]" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.7.2;netframework-4.8;netstandard-2.1" />
        <Parameter Name="iterations" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.7.2;netframework-4.8;netstandard-2.1" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.7.2;netframework-4.8;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="password"><span data-ttu-id="812c2-201">用來衍生金鑰的密碼。</span><span class="sxs-lookup"><span data-stu-id="812c2-201">The password to use to derive the key.</span></span></param>
        <param name="salt"><span data-ttu-id="812c2-202">用來衍生金鑰的金鑰 Salt。</span><span class="sxs-lookup"><span data-stu-id="812c2-202">The key salt to use to derive the key.</span></span></param>
        <param name="iterations"><span data-ttu-id="812c2-203">操作的重複次數。</span><span class="sxs-lookup"><span data-stu-id="812c2-203">The number of iterations for the operation.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="812c2-204">要用來衍生金鑰的雜湊演算法。</span><span class="sxs-lookup"><span data-stu-id="812c2-204">The hash algorithm to use to derive the key.</span></span></param>
        <summary><span data-ttu-id="812c2-205">將 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 類別的新執行個體初始化，該類別使用指定的密碼、salt、反覆項目數和雜湊演算法名稱來衍生金鑰。</span><span class="sxs-lookup"><span data-stu-id="812c2-205">Initializes a new instance of the <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> class using the specified password, salt, number of iterations and the hash algorithm name to derive the key.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="812c2-206"><paramref name="saltSize" /> 小於零。</span><span class="sxs-lookup"><span data-stu-id="812c2-206"><paramref name="saltSize" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="812c2-207"><paramref name="hashAlgorithm" /> 的 <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 屬性是 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="812c2-207">The <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> property of <paramref name="hashAlgorithm" /> is either <see langword="null" /> or <see cref="F:System.String.Empty" />.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="812c2-208">雜湊演算法名稱無效。</span><span class="sxs-lookup"><span data-stu-id="812c2-208">Hash algorithm name is invalid.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rfc2898DeriveBytes (string password, byte[] salt, int iterations, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string password, unsigned int8[] salt, int32 iterations, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[],System.Int32,System.Security.Cryptography.HashAlgorithmName)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As String, salt As Byte(), iterations As Integer, hashAlgorithm As HashAlgorithmName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Rfc2898DeriveBytes(System::String ^ password, cli::array &lt;System::Byte&gt; ^ salt, int iterations, System::Security::Cryptography::HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.Rfc2898DeriveBytes : string * byte[] * int * System.Security.Cryptography.HashAlgorithmName -&gt; System.Security.Cryptography.Rfc2898DeriveBytes" Usage="new System.Security.Cryptography.Rfc2898DeriveBytes (password, salt, iterations, hashAlgorithm)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="password" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.7.2;netframework-4.8;netstandard-2.1" />
        <Parameter Name="salt" Type="System.Byte[]" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.7.2;netframework-4.8;netstandard-2.1" />
        <Parameter Name="iterations" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.7.2;netframework-4.8;netstandard-2.1" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.7.2;netframework-4.8;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="password"><span data-ttu-id="812c2-209">用來衍生金鑰的密碼。</span><span class="sxs-lookup"><span data-stu-id="812c2-209">The password to use to derive the key.</span></span></param>
        <param name="salt"><span data-ttu-id="812c2-210">用來衍生金鑰的金鑰 Salt。</span><span class="sxs-lookup"><span data-stu-id="812c2-210">The key salt to use to derive the key.</span></span></param>
        <param name="iterations"><span data-ttu-id="812c2-211">操作的重複次數。</span><span class="sxs-lookup"><span data-stu-id="812c2-211">The number of iterations for the operation.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="812c2-212">要用來衍生金鑰的雜湊演算法。</span><span class="sxs-lookup"><span data-stu-id="812c2-212">The hash algorithm to use to derive the key.</span></span></param>
        <summary><span data-ttu-id="812c2-213">將 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 類別的新執行個體初始化，該類別使用指定的密碼、salt、反覆項目數和雜湊演算法名稱來衍生金鑰。</span><span class="sxs-lookup"><span data-stu-id="812c2-213">Initializes a new instance of the <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> class using the specified password, salt, number of iterations and the hash algorithm name to derive the key.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="812c2-214"><paramref name="hashAlgorithm" /> 的 <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 屬性是 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="812c2-214">The <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> property of <paramref name="hashAlgorithm" /> is either <see langword="null" /> or <see cref="F:System.String.Empty" />.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="812c2-215">雜湊演算法名稱無效。</span><span class="sxs-lookup"><span data-stu-id="812c2-215">Hash algorithm name is invalid.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rfc2898DeriveBytes (string password, int saltSize, int iterations, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string password, int32 saltSize, int32 iterations, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As String, saltSize As Integer, iterations As Integer, hashAlgorithm As HashAlgorithmName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Rfc2898DeriveBytes(System::String ^ password, int saltSize, int iterations, System::Security::Cryptography::HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.Rfc2898DeriveBytes : string * int * int * System.Security.Cryptography.HashAlgorithmName -&gt; System.Security.Cryptography.Rfc2898DeriveBytes" Usage="new System.Security.Cryptography.Rfc2898DeriveBytes (password, saltSize, iterations, hashAlgorithm)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="password" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.7.2;netframework-4.8;netstandard-2.1" />
        <Parameter Name="saltSize" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.7.2;netframework-4.8;netstandard-2.1" />
        <Parameter Name="iterations" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.7.2;netframework-4.8;netstandard-2.1" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.7.2;netframework-4.8;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="password"><span data-ttu-id="812c2-216">用來衍生金鑰的密碼。</span><span class="sxs-lookup"><span data-stu-id="812c2-216">The password to use to derive the key.</span></span></param>
        <param name="saltSize"><span data-ttu-id="812c2-217">您希望此類別產生的隨機 Salt 之大小。</span><span class="sxs-lookup"><span data-stu-id="812c2-217">The size of the random salt that you want the class to generate.</span></span></param>
        <param name="iterations"><span data-ttu-id="812c2-218">操作的重複次數。</span><span class="sxs-lookup"><span data-stu-id="812c2-218">The number of iterations for the operation.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="812c2-219">要用來衍生金鑰的雜湊演算法。</span><span class="sxs-lookup"><span data-stu-id="812c2-219">The hash algorithm to use to derive the key.</span></span></param>
        <summary><span data-ttu-id="812c2-220">將 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 類別的新執行個體初始化，該類別使用指定的密碼、salt 大小、反覆項目數和雜湊演算法名稱來衍生金鑰。</span><span class="sxs-lookup"><span data-stu-id="812c2-220">Initializes a new instance of the <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> class using the specified password, salt size, number of iterations and the hash algorithm name to derive the key.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="812c2-221"><paramref name="saltSize" /> 小於零。</span><span class="sxs-lookup"><span data-stu-id="812c2-221"><paramref name="saltSize" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="812c2-222"><paramref name="hashAlgorithm" /> 的 <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 屬性是 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="812c2-222">The <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> property of <paramref name="hashAlgorithm" /> is either <see langword="null" /> or <see cref="F:System.String.Empty" />.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="812c2-223">雜湊演算法名稱無效。</span><span class="sxs-lookup"><span data-stu-id="812c2-223">Hash algorithm name is invalid.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CryptDeriveKey">
      <MemberSignature Language="C#" Value="public byte[] CryptDeriveKey (string algname, string alghashname, int keySize, byte[] rgbIV);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] CryptDeriveKey(string algname, string alghashname, int32 keySize, unsigned int8[] rgbIV) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.CryptDeriveKey(System.String,System.String,System.Int32,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function CryptDeriveKey (algname As String, alghashname As String, keySize As Integer, rgbIV As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ CryptDeriveKey(System::String ^ algname, System::String ^ alghashname, int keySize, cli::array &lt;System::Byte&gt; ^ rgbIV);" />
      <MemberSignature Language="F#" Value="member this.CryptDeriveKey : string * string * int * byte[] -&gt; byte[]" Usage="rfc2898DeriveBytes.CryptDeriveKey (algname, alghashname, keySize, rgbIV)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="algname" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="alghashname" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="keySize" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="rgbIV" Type="System.Byte[]" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="algname"><span data-ttu-id="812c2-224">用來衍生金鑰的演算法名稱。</span><span class="sxs-lookup"><span data-stu-id="812c2-224">The algorithm name for which to derive the key.</span></span></param>
        <param name="alghashname"><span data-ttu-id="812c2-225">要用來衍生金鑰的雜湊演算法名稱。</span><span class="sxs-lookup"><span data-stu-id="812c2-225">The hash algorithm name to use to derive the key.</span></span></param>
        <param name="keySize"><span data-ttu-id="812c2-226">要衍生的金鑰大小，以位元為單位。</span><span class="sxs-lookup"><span data-stu-id="812c2-226">The size of the key, in bits, to derive.</span></span></param>
        <param name="rgbIV"><span data-ttu-id="812c2-227">用來衍生金鑰的初始化向量 (IV)。</span><span class="sxs-lookup"><span data-stu-id="812c2-227">The initialization vector (IV) to use to derive the key.</span></span></param>
        <summary><span data-ttu-id="812c2-228">從 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 物件衍生密碼編譯金鑰。</span><span class="sxs-lookup"><span data-stu-id="812c2-228">Derives a cryptographic key from the <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> object.</span></span></summary>
        <returns><span data-ttu-id="812c2-229">所衍生金鑰。</span><span class="sxs-lookup"><span data-stu-id="812c2-229">The derived key.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="812c2-230">此函式是 Crypto API 函式 CryptDeriveKey()，包裝函式，要提供與使用 Crypto API 的應用程式的互通性。</span><span class="sxs-lookup"><span data-stu-id="812c2-230">This function is a wrapper for the Crypto API function CryptDeriveKey(), and is intended to offer interoperability with applications using the Crypto API.</span></span>  
  
 <span data-ttu-id="812c2-231">如果`keySize`參數設為 0 位元，使用指定的演算法的預設金鑰大小。</span><span class="sxs-lookup"><span data-stu-id="812c2-231">If the `keySize` parameter is set to 0 bits, the default key size for the specified algorithm is used.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="812c2-232"><paramref name="keySize" /> 參數不正確。</span><span class="sxs-lookup"><span data-stu-id="812c2-232">The <paramref name="keySize" /> parameter is incorrect.</span></span>  
  
<span data-ttu-id="812c2-233">-或-</span><span class="sxs-lookup"><span data-stu-id="812c2-233">-or-</span></span> 
<span data-ttu-id="812c2-234">無法取得密碼編譯服務提供者 (CSP)。</span><span class="sxs-lookup"><span data-stu-id="812c2-234">The cryptographic service provider (CSP) cannot be acquired.</span></span>  
  
<span data-ttu-id="812c2-235">-或-</span><span class="sxs-lookup"><span data-stu-id="812c2-235">-or-</span></span> 
<span data-ttu-id="812c2-236"><paramref name="algname" /> 參數不是有效的演算法名稱。</span><span class="sxs-lookup"><span data-stu-id="812c2-236">The <paramref name="algname" /> parameter is not a valid algorithm name.</span></span>  
  
<span data-ttu-id="812c2-237">-或-</span><span class="sxs-lookup"><span data-stu-id="812c2-237">-or-</span></span> 
<span data-ttu-id="812c2-238"><paramref name="alghashname" /> 參數不是有效的雜湊演算法名稱。</span><span class="sxs-lookup"><span data-stu-id="812c2-238">The <paramref name="alghashname" /> parameter is not a valid hash algorithm name.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="rfc2898DeriveBytes.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="812c2-239"><see langword="true" /> 表示會同時釋放 Managed 和 Unmanaged 資源，<see langword="false" /> 則表示只釋放 Unmanaged 資源。</span><span class="sxs-lookup"><span data-stu-id="812c2-239"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="812c2-240">釋放 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 類別所使用的 Unmanaged 資源，並選擇性地釋放 Managed 資源。</span><span class="sxs-lookup"><span data-stu-id="812c2-240">Releases the unmanaged resources used by the <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> class and optionally releases the managed resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="812c2-241">這個方法會呼叫公用`Dispose()`方法和`Finalize`方法。</span><span class="sxs-lookup"><span data-stu-id="812c2-241">This method is called by the public `Dispose()` method and the `Finalize` method.</span></span> <span data-ttu-id="812c2-242">`Dispose()` 叫用受保護`Dispose(Boolean)`方法`disposing`參數設為`true`。</span><span class="sxs-lookup"><span data-stu-id="812c2-242">`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="812c2-243">`Finalize` 叫用`Dispose`具有`disposing`設定為`false`。</span><span class="sxs-lookup"><span data-stu-id="812c2-243">`Finalize` invokes `Dispose` with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="812c2-244">`disposing` 參數為 `true` 時，這個方法會釋放 <xref:System.Security.Cryptography.Rfc2898DeriveBytes> 參考的任何 Managed 物件所掌握的資源。</span><span class="sxs-lookup"><span data-stu-id="812c2-244">When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Security.Cryptography.Rfc2898DeriveBytes> references.</span></span> <span data-ttu-id="812c2-245">這個方法會叫用每個參考物件的 `Dispose()` 方法。</span><span class="sxs-lookup"><span data-stu-id="812c2-245">This method invokes the `Dispose()` method of each referenced object.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="812c2-246">
            <see langword="Dispose" /> 可以被其他物件呼叫多次。</span><span class="sxs-lookup"><span data-stu-id="812c2-246">
            <see langword="Dispose" /> can be called multiple times by other objects.</span></span> <span data-ttu-id="812c2-247">當覆寫<see langword="Dispose(Boolean)" />，請小心不要參考先前處置呼叫中的物件<see langword="Dispose" />。</span><span class="sxs-lookup"><span data-stu-id="812c2-247">When overriding <see langword="Dispose(Boolean)" />, be careful not to reference objects that have been previously disposed in an earlier call to <see langword="Dispose" />.</span></span> <span data-ttu-id="812c2-248">如需有關如何實作<see langword="Dispose(Boolean)" />，請參閱 &lt;&lt;c2&gt; [ 實作 Dispose 方法](~/docs/standard/garbage-collection/implementing-dispose.md)。</span><span class="sxs-lookup"><span data-stu-id="812c2-248">For more information about how to implement <see langword="Dispose(Boolean)" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
<span data-ttu-id="812c2-249">如需詳細資訊<see langword="Dispose" />並<see langword="Finalize" />，請參閱[清除 Unmanaged 資源總](~/docs/standard/garbage-collection/unmanaged.md)。</span><span class="sxs-lookup"><span data-stu-id="812c2-249">For more information about <see langword="Dispose" /> and <see langword="Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override byte[] GetBytes (int cb);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] GetBytes(int32 cb) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBytes (cb As Integer) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Byte&gt; ^ GetBytes(int cb);" />
      <MemberSignature Language="F#" Value="override this.GetBytes : int -&gt; byte[]" Usage="rfc2898DeriveBytes.GetBytes cb" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cb" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="cb"><span data-ttu-id="812c2-250">要產生的虛擬隨機金鑰位元組數量。</span><span class="sxs-lookup"><span data-stu-id="812c2-250">The number of pseudo-random key bytes to generate.</span></span></param>
        <summary><span data-ttu-id="812c2-251">傳回這個物件的虛擬隨機金鑰。</span><span class="sxs-lookup"><span data-stu-id="812c2-251">Returns the pseudo-random key for this object.</span></span></summary>
        <returns><span data-ttu-id="812c2-252">位元組陣列，以虛擬隨機金鑰位元組填入。</span><span class="sxs-lookup"><span data-stu-id="812c2-252">A byte array filled with pseudo-random key bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="812c2-253"><xref:System.Security.Cryptography.Rfc2898DeriveBytes>類別會實作 PBKDF2 功能使用虛擬亂數產生器根據<xref:System.Security.Cryptography.HMACSHA1>。</span><span class="sxs-lookup"><span data-stu-id="812c2-253">The <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class implements PBKDF2 functionality by using a pseudorandom number generator based on <xref:System.Security.Cryptography.HMACSHA1>.</span></span> <span data-ttu-id="812c2-254"><xref:System.Security.Cryptography.Rfc2898DeriveBytes>類別會使用密碼、 salt 和反覆計數，並接著會產生金鑰，透過呼叫<xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="812c2-254">The <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class takes a password, a salt, and an iteration count, and then generates keys through calls to the <xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A> method.</span></span> <span data-ttu-id="812c2-255">重複的呼叫這個方法不會產生相同的金鑰;相反地，附加的兩個呼叫<xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A>方法`cb`參數值`20`相當於呼叫<xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A>方法一次使用`cb`參數值的`40`。</span><span class="sxs-lookup"><span data-stu-id="812c2-255">Repeated calls to this method will not generate the same key; instead, appending two calls of the <xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A> method with a `cb` parameter value of `20` is the equivalent of calling the <xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A> method once with a `cb` parameter value of `40`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="812c2-256">下列範例示範如何使用<xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A>方法來取得的執行個體的索引鍵<xref:System.Security.Cryptography.Rfc2898DeriveBytes>。</span><span class="sxs-lookup"><span data-stu-id="812c2-256">The following example shows how to use the <xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A> method to get the key for an instance of <xref:System.Security.Cryptography.Rfc2898DeriveBytes>.</span></span> <span data-ttu-id="812c2-257">此程式碼範例是針對提供之較大範例的一部分<xref:System.Security.Cryptography.Rfc2898DeriveBytes>類別。</span><span class="sxs-lookup"><span data-stu-id="812c2-257">This code example is part of a larger example provided for the <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class.</span></span>  
  
 [!code-cpp[rfc28981#2](~/samples/snippets/cpp/VS_Snippets_CLR/rfc28981/CPP/rfc28981.cpp#2)]
 [!code-csharp[rfc28981#2](~/samples/snippets/csharp/VS_Snippets_CLR/rfc28981/CS/rfc28981.cs#2)]
 [!code-vb[rfc28981#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/rfc28981/vb/rfc28981.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="812c2-258"><paramref name="cb" /> 超出範圍。</span><span class="sxs-lookup"><span data-stu-id="812c2-258"><paramref name="cb" /> is out of range.</span></span> <span data-ttu-id="812c2-259">這個參數需要非負數的數字。</span><span class="sxs-lookup"><span data-stu-id="812c2-259">This parameter requires a non-negative number.</span></span></exception>
        <related type="Article" href="~/docs/standard/security/cryptographic-services.md"><span data-ttu-id="812c2-260">密碼編譯服務</span><span class="sxs-lookup"><span data-stu-id="812c2-260">Cryptographic Services</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="HashAlgorithm">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.HashAlgorithmName HashAlgorithm { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.Cryptography.HashAlgorithmName HashAlgorithm" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Rfc2898DeriveBytes.HashAlgorithm" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HashAlgorithm As HashAlgorithmName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Cryptography::HashAlgorithmName HashAlgorithm { System::Security::Cryptography::HashAlgorithmName get(); };" />
      <MemberSignature Language="F#" Value="member this.HashAlgorithm : System.Security.Cryptography.HashAlgorithmName" Usage="System.Security.Cryptography.Rfc2898DeriveBytes.HashAlgorithm" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.HashAlgorithmName</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IterationCount">
      <MemberSignature Language="C#" Value="public int IterationCount { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 IterationCount" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Rfc2898DeriveBytes.IterationCount" />
      <MemberSignature Language="VB.NET" Value="Public Property IterationCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int IterationCount { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.IterationCount : int with get, set" Usage="System.Security.Cryptography.Rfc2898DeriveBytes.IterationCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="812c2-261">取得或設定操作的重複次數。</span><span class="sxs-lookup"><span data-stu-id="812c2-261">Gets or sets the number of iterations for the operation.</span></span></summary>
        <value><span data-ttu-id="812c2-262">操作的重複次數。</span><span class="sxs-lookup"><span data-stu-id="812c2-262">The number of iterations for the operation.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="812c2-263">反覆項目計數是在執行作業的次數。</span><span class="sxs-lookup"><span data-stu-id="812c2-263">Iteration count is the number of times an operation is performed.</span></span> <span data-ttu-id="812c2-264">針對這個方法的計數必須小於或等於零。</span><span class="sxs-lookup"><span data-stu-id="812c2-264">For this method, the count should be greater than zero.</span></span> <span data-ttu-id="812c2-265">反覆項目的最小建議的數目是 1000年。</span><span class="sxs-lookup"><span data-stu-id="812c2-265">The minimum recommended number of iterations is 1000.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="812c2-266">下列範例示範如何使用<xref:System.Security.Cryptography.Rfc2898DeriveBytes.IterationCount%2A>反覆項目中產生的金鑰使用的數字顯示的屬性。</span><span class="sxs-lookup"><span data-stu-id="812c2-266">The following example shows how to use the <xref:System.Security.Cryptography.Rfc2898DeriveBytes.IterationCount%2A> property to display the number of iterations used in the generation of the key.</span></span> <span data-ttu-id="812c2-267">此程式碼範例是針對提供之較大範例的一部分<xref:System.Security.Cryptography.Rfc2898DeriveBytes>類別。</span><span class="sxs-lookup"><span data-stu-id="812c2-267">This code example is part of a larger example provided for the <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class.</span></span>  
  
 [!code-cpp[rfc28981#3](~/samples/snippets/cpp/VS_Snippets_CLR/rfc28981/CPP/rfc28981.cpp#3)]
 [!code-csharp[rfc28981#3](~/samples/snippets/csharp/VS_Snippets_CLR/rfc28981/CS/rfc28981.cs#3)]
 [!code-vb[rfc28981#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/rfc28981/vb/rfc28981.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="812c2-268">反覆計數小於 1。</span><span class="sxs-lookup"><span data-stu-id="812c2-268">The number of iterations is less than 1.</span></span></exception>
        <related type="Article" href="~/docs/standard/security/cryptographic-services.md"><span data-ttu-id="812c2-269">密碼編譯服務</span><span class="sxs-lookup"><span data-stu-id="812c2-269">Cryptographic Services</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public override void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Reset();" />
      <MemberSignature Language="F#" Value="override this.Reset : unit -&gt; unit" Usage="rfc2898DeriveBytes.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="812c2-270">重設作業的狀態。</span><span class="sxs-lookup"><span data-stu-id="812c2-270">Resets the state of the operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="812c2-271">如果已修改的 salt 或反覆項目計數，會自動呼叫這個方法。</span><span class="sxs-lookup"><span data-stu-id="812c2-271">This method is automatically called if the salt or iteration count is modified.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="812c2-272">下列範例會示範如何使用 <xref:System.Security.Cryptography.Rfc2898DeriveBytes.Reset%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="812c2-272">The following example shows how to use the <xref:System.Security.Cryptography.Rfc2898DeriveBytes.Reset%2A> method.</span></span> <span data-ttu-id="812c2-273">此程式碼範例是針對提供之較大範例的一部分<xref:System.Security.Cryptography.Rfc2898DeriveBytes>類別。</span><span class="sxs-lookup"><span data-stu-id="812c2-273">This code example is part of a larger example provided for the <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class.</span></span>  
  
 [!code-cpp[rfc28981#5](~/samples/snippets/cpp/VS_Snippets_CLR/rfc28981/CPP/rfc28981.cpp#5)]
 [!code-csharp[rfc28981#5](~/samples/snippets/csharp/VS_Snippets_CLR/rfc28981/CS/rfc28981.cs#5)]
 [!code-vb[rfc28981#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/rfc28981/vb/rfc28981.vb#5)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/security/cryptographic-services.md"><span data-ttu-id="812c2-274">密碼編譯服務</span><span class="sxs-lookup"><span data-stu-id="812c2-274">Cryptographic Services</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Salt">
      <MemberSignature Language="C#" Value="public byte[] Salt { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] Salt" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Rfc2898DeriveBytes.Salt" />
      <MemberSignature Language="VB.NET" Value="Public Property Salt As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ Salt { cli::array &lt;System::Byte&gt; ^ get(); void set(cli::array &lt;System::Byte&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Salt : byte[] with get, set" Usage="System.Security.Cryptography.Rfc2898DeriveBytes.Salt" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="812c2-275">取得或設定用於操作的金鑰 Salt 值。</span><span class="sxs-lookup"><span data-stu-id="812c2-275">Gets or sets the key salt value for the operation.</span></span></summary>
        <value><span data-ttu-id="812c2-276">用於操作的金鑰 Salt 值。</span><span class="sxs-lookup"><span data-stu-id="812c2-276">The key salt value for the operation.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="812c2-277">Salt，一組隨機位元組，可讓未經授權的解密訊息更困難。</span><span class="sxs-lookup"><span data-stu-id="812c2-277">Salt, a random set of bytes, is used to make unauthorized decrypting of a message more difficult.</span></span> <span data-ttu-id="812c2-278">字典攻擊是攻擊者嘗試藉由比較最可能的索引鍵的先前計算的加密值的加密的值解密加密的訊息。</span><span class="sxs-lookup"><span data-stu-id="812c2-278">A dictionary attack is an attack in which the attacker attempts to decrypt an encrypted message by comparing the encrypted value with previously computed encrypted values for the most likely keys.</span></span> <span data-ttu-id="812c2-279">這種攻擊會藉由引進的 salt，或隨機位元組，結尾的密碼，才能進行金鑰衍生更為困難。</span><span class="sxs-lookup"><span data-stu-id="812c2-279">This attack is made much more difficult by the introduction of salt, or random bytes, at the end of the password before the key derivation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="812c2-280">指定的 Salt 大小小於 8 個位元組。</span><span class="sxs-lookup"><span data-stu-id="812c2-280">The specified salt size is smaller than 8 bytes.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="812c2-281">Salt 是 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="812c2-281">The salt is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/security/cryptographic-services.md"><span data-ttu-id="812c2-282">密碼編譯服務</span><span class="sxs-lookup"><span data-stu-id="812c2-282">Cryptographic Services</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>