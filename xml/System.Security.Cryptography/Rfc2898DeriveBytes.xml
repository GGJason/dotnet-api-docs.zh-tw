<Type Name="Rfc2898DeriveBytes" FullName="System.Security.Cryptography.Rfc2898DeriveBytes">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="fb88d38ba71eab51c03b25070016871c9628d94b" />
    <Meta Name="ms.sourcegitcommit" Value="254e16ae65e82f4aa59360cd8572b36b6b5b2f80" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/05/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Rfc2898DeriveBytes : System.Security.Cryptography.DeriveBytes" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Rfc2898DeriveBytes extends System.Security.Cryptography.DeriveBytes" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.Rfc2898DeriveBytes" />
  <TypeSignature Language="VB.NET" Value="Public Class Rfc2898DeriveBytes&#xA;Inherits DeriveBytes" />
  <TypeSignature Language="C++ CLI" Value="public ref class Rfc2898DeriveBytes : System::Security::Cryptography::DeriveBytes" />
  <AssemblyInfo>
    <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.3.0.0</AssemblyVersion>
    <AssemblyVersion>4.3.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.Cryptography.DeriveBytes</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="caf64-101">依據 <see cref="T:System.Security.Cryptography.HMACSHA1" /> 使用虛擬亂數產生器，實作密碼式的金鑰衍生功能 PBKDF2。</span>
      <span class="sxs-lookup">
        <span data-stu-id="caf64-101">Implements password-based key derivation functionality, PBKDF2, by using a pseudo-random number generator based on <see cref="T:System.Security.Cryptography.HMACSHA1" />.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="caf64-102"><xref:System.Security.Cryptography.Rfc2898DeriveBytes> 接受密碼、 salt 和反覆項目計數，並再產生索引鍵，透過呼叫<xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="caf64-102"><xref:System.Security.Cryptography.Rfc2898DeriveBytes> takes a password, a salt, and an iteration count, and then generates keys through calls to the <xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A> method.</span></span>  
  
 <span data-ttu-id="caf64-103">RFC 2898 包含密碼和 salt，建立金鑰和初始化向量 (IV) 的方法。</span><span class="sxs-lookup"><span data-stu-id="caf64-103">RFC 2898 includes methods for creating a key and initialization vector (IV) from a password and salt.</span></span> <span data-ttu-id="caf64-104">您可以使用 PBKDF2，密碼為基礎的金鑰衍生函式，來衍生金鑰使用的虛擬隨機函式，以產生幾乎不受限制長度的金鑰。</span><span class="sxs-lookup"><span data-stu-id="caf64-104">You can use PBKDF2, a password-based key derivation function, to derive keys using a pseudo-random function that allows keys of virtually unlimited length to be generated.</span></span> <span data-ttu-id="caf64-105"><xref:System.Security.Cryptography.Rfc2898DeriveBytes>類別可以用來產生衍生的金鑰的基底的索引鍵與其他參數。</span><span class="sxs-lookup"><span data-stu-id="caf64-105">The <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class can be used to produce a derived key from a base key and other parameters.</span></span> <span data-ttu-id="caf64-106">密碼金鑰衍生函式中的基底的索引鍵是密碼，而其他參數則是 salt 值和反覆項目計數。</span><span class="sxs-lookup"><span data-stu-id="caf64-106">In a password-based key derivation function, the base key is a password and the other parameters are a salt value and an iteration count.</span></span>  
  
 <span data-ttu-id="caf64-107">如需 PBKDF2 的詳細資訊，請參閱 RFC 2898"PKCS #5： 密碼型密碼編譯規格 2.0 版中，"上可用[要求註解的網站](http://go.microsoft.com/fwlink/?LinkID=37119)。</span><span class="sxs-lookup"><span data-stu-id="caf64-107">For more information about PBKDF2, see RFC 2898, "PKCS #5: Password-Based Cryptography Specification Version 2.0," available on the [Request for Comments Web site](http://go.microsoft.com/fwlink/?LinkID=37119).</span></span> <span data-ttu-id="caf64-108">完整的詳細資訊，請參閱區段 5.2，"PBKDF2，"。</span><span class="sxs-lookup"><span data-stu-id="caf64-108">See section 5.2, "PBKDF2," for complete details.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="caf64-109">永遠不會硬式編碼在原始程式碼中的密碼。</span><span class="sxs-lookup"><span data-stu-id="caf64-109">Never hard-code a password within your source code.</span></span>  <span data-ttu-id="caf64-110">可以從組件擷取硬式編碼的密碼，利用[Ildasm.exe （IL 解譯器）](~/docs/framework/tools/ildasm-exe-il-disassembler.md)、 使用十六進位的編輯器，或藉由直接開啟 Notepad.exe 之類的文字編輯器中的組件。</span><span class="sxs-lookup"><span data-stu-id="caf64-110">Hard-coded passwords can be retrieved from an assembly by using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), by using a hexadecimal editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="caf64-111">下列程式碼範例使用<xref:System.Security.Cryptography.Rfc2898DeriveBytes>類別來建立兩個相同的索引鍵<xref:System.Security.Cryptography.TripleDES>類別。</span><span class="sxs-lookup"><span data-stu-id="caf64-111">The following code example uses the <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class to create two identical keys for the <xref:System.Security.Cryptography.TripleDES> class.</span></span>  <span data-ttu-id="caf64-112">然後它會加密，並解密相同的索引鍵的資料。</span><span class="sxs-lookup"><span data-stu-id="caf64-112">It then encrypts and decrypts some data using the keys.</span></span>  
  
 [!code-cpp[rfc28981#1](~/samples/snippets/cpp/VS_Snippets_CLR/rfc28981/CPP/rfc28981.cpp#1)]
 [!code-csharp[rfc28981#1](~/samples/snippets/csharp/VS_Snippets_CLR/rfc28981/CS/rfc28981.cs#1)]
 [!code-vb[rfc28981#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/rfc28981/vb/rfc28981.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="caf64-113">初始化 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf64-113">Initializes a new instance of the <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rfc2898DeriveBytes (string password, byte[] salt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string password, unsigned int8[] salt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As String, salt As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Rfc2898DeriveBytes(System::String ^ password, cli::array &lt;System::Byte&gt; ^ salt);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="salt" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="password">
          <span data-ttu-id="caf64-114">用來衍生金鑰的密碼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf64-114">The password used to derive the key.</span>
          </span>
        </param>
        <param name="salt">
          <span data-ttu-id="caf64-115">用來衍生金鑰的金鑰 Salt。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf64-115">The key salt used to derive the key.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="caf64-116">使用密碼和 Salt 來衍生金鑰，以初始化 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf64-116">Initializes a new instance of the <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> class using a password and salt to derive the key.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="caf64-117">Salt 大小必須為 8 個位元組或更大。</span><span class="sxs-lookup"><span data-stu-id="caf64-117">The salt size must be 8 bytes or larger.</span></span>  
  
 <span data-ttu-id="caf64-118">RFC 2898 包含密碼和 salt，建立金鑰和初始化向量 (IV) 的方法。</span><span class="sxs-lookup"><span data-stu-id="caf64-118">RFC 2898 includes methods for creating a key and initialization vector (IV) from a password and salt.</span></span> <span data-ttu-id="caf64-119">您可以使用 PBKDF2，密碼為基礎的金鑰衍生函式，來衍生金鑰使用的虛擬隨機函式，以產生幾乎不受限制長度的金鑰。</span><span class="sxs-lookup"><span data-stu-id="caf64-119">You can use PBKDF2, a password-based key derivation function, to derive keys using a pseudo-random function that allows keys of virtually unlimited length to be generated.</span></span> <span data-ttu-id="caf64-120"><xref:System.Security.Cryptography.Rfc2898DeriveBytes>類別可以用來產生衍生的金鑰的基底的索引鍵與其他參數。</span><span class="sxs-lookup"><span data-stu-id="caf64-120">The <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class can be used to produce a derived key from a base key and other parameters.</span></span> <span data-ttu-id="caf64-121">密碼金鑰衍生函式中的基底的索引鍵是密碼，而其他參數則是 salt 值和反覆項目計數。</span><span class="sxs-lookup"><span data-stu-id="caf64-121">In a password-based key derivation function, the base key is a password and the other parameters are a salt value and an iteration count.</span></span>  
  
 <span data-ttu-id="caf64-122">如需 PBKDF2 的詳細資訊，請參閱 RFC 2898"PKCS #5： 密碼型密碼編譯規格 2.0 版中，"上可用[要求註解的網站](http://go.microsoft.com/fwlink/?LinkID=37119)。</span><span class="sxs-lookup"><span data-stu-id="caf64-122">For more information about PBKDF2, see RFC 2898, "PKCS #5: Password-Based Cryptography Specification Version 2.0," available on the [Request for Comments Web site](http://go.microsoft.com/fwlink/?LinkID=37119).</span></span> <span data-ttu-id="caf64-123">完整的詳細資訊，請參閱區段 5.2，"PBKDF2，"。</span><span class="sxs-lookup"><span data-stu-id="caf64-123">See section 5.2, "PBKDF2," for complete details.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="caf64-124">永遠不會硬式編碼在原始程式碼中的密碼。</span><span class="sxs-lookup"><span data-stu-id="caf64-124">Never hard-code a password within your source code.</span></span>  <span data-ttu-id="caf64-125">可以從組件擷取硬式編碼的密碼，利用[Ildasm.exe （IL 解譯器）](~/docs/framework/tools/ildasm-exe-il-disassembler.md)、 使用十六進位的編輯器，或藉由直接開啟 Notepad.exe 之類的文字編輯器中的組件。</span><span class="sxs-lookup"><span data-stu-id="caf64-125">Hard-coded passwords can be retrieved from an assembly by using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), by using a hexadecimal editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="caf64-126">下列程式碼範例使用<xref:System.Security.Cryptography.Rfc2898DeriveBytes>類別來建立兩個相同的索引鍵<xref:System.Security.Cryptography.TripleDES>類別。</span><span class="sxs-lookup"><span data-stu-id="caf64-126">The following code example uses the <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class to create two identical keys for the <xref:System.Security.Cryptography.TripleDES> class.</span></span>  <span data-ttu-id="caf64-127">然後它會加密，並解密相同的索引鍵的資料。</span><span class="sxs-lookup"><span data-stu-id="caf64-127">It then encrypts and decrypts some data using the keys.</span></span>  
  
 [!code-cpp[rfc28981#1](~/samples/snippets/cpp/VS_Snippets_CLR/rfc28981/CPP/rfc28981.cpp#1)]
 [!code-csharp[rfc28981#1](~/samples/snippets/csharp/VS_Snippets_CLR/rfc28981/CS/rfc28981.cs#1)]
 [!code-vb[rfc28981#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/rfc28981/vb/rfc28981.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="caf64-128">指定的 Salt 大小小於 8 個位元組，或反覆計數小於 1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf64-128">The specified salt size is smaller than 8 bytes or the iteration count is less than 1.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="caf64-129">密碼或 Salt 是 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf64-129">The password or salt is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rfc2898DeriveBytes (string password, int saltSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string password, int32 saltSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As String, saltSize As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Rfc2898DeriveBytes(System::String ^ password, int saltSize);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="saltSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="password">
          <span data-ttu-id="caf64-130">用來衍生金鑰的密碼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf64-130">The password used to derive the key.</span>
          </span>
        </param>
        <param name="saltSize">
          <span data-ttu-id="caf64-131">您希望此類別產生之隨機 Salt 的大小。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf64-131">The size of the random salt that you want the class to generate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="caf64-132">使用密碼和 Salt 大小來衍生金鑰，以初始化 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf64-132">Initializes a new instance of the <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> class using the password and salt size to derive the key.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="caf64-133">Salt 大小必須為 8 個位元組或更大。</span><span class="sxs-lookup"><span data-stu-id="caf64-133">The salt size must be 8 bytes or larger.</span></span>  
  
 <span data-ttu-id="caf64-134">RFC 2898 包含密碼和 salt，建立金鑰和初始化向量 (IV) 的方法。</span><span class="sxs-lookup"><span data-stu-id="caf64-134">RFC 2898 includes methods for creating a key and initialization vector (IV) from a password and salt.</span></span> <span data-ttu-id="caf64-135">您可以使用 PBKDF2，密碼為基礎的金鑰衍生函式，來衍生金鑰使用的虛擬隨機函式，以產生幾乎不受限制長度的金鑰。</span><span class="sxs-lookup"><span data-stu-id="caf64-135">You can use PBKDF2, a password-based key derivation function, to derive keys using a pseudo-random function that allows keys of virtually unlimited length to be generated.</span></span> <span data-ttu-id="caf64-136"><xref:System.Security.Cryptography.Rfc2898DeriveBytes>類別可以用來產生衍生的金鑰的基底的索引鍵與其他參數。</span><span class="sxs-lookup"><span data-stu-id="caf64-136">The <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class can be used to produce a derived key from a base key and other parameters.</span></span> <span data-ttu-id="caf64-137">密碼金鑰衍生函式中的基底的索引鍵是密碼，而其他參數則是 salt 值和反覆項目計數。</span><span class="sxs-lookup"><span data-stu-id="caf64-137">In a password-based key derivation function, the base key is a password and the other parameters are a salt value and an iteration count.</span></span>  
  
 <span data-ttu-id="caf64-138">如需 PBKDF2 的詳細資訊，請參閱 RFC 2898"PKCS #5： 密碼型密碼編譯規格 2.0 版中，"上可用[要求註解的網站](http://go.microsoft.com/fwlink/?LinkID=37119)。</span><span class="sxs-lookup"><span data-stu-id="caf64-138">For more information about PBKDF2, see RFC 2898, "PKCS #5: Password-Based Cryptography Specification Version 2.0," available on the [Request for Comments Web site](http://go.microsoft.com/fwlink/?LinkID=37119).</span></span> <span data-ttu-id="caf64-139">完整的詳細資訊，請參閱區段 5.2，"PBKDF2，"。</span><span class="sxs-lookup"><span data-stu-id="caf64-139">See section 5.2, "PBKDF2," for complete details.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="caf64-140">永遠不會硬式編碼在原始程式碼中的密碼。</span><span class="sxs-lookup"><span data-stu-id="caf64-140">Never hard-code a password within your source code.</span></span>  <span data-ttu-id="caf64-141">可以從組件擷取硬式編碼的密碼，利用[Ildasm.exe （IL 解譯器）](~/docs/framework/tools/ildasm-exe-il-disassembler.md)、 使用十六進位的編輯器，或藉由直接開啟 Notepad.exe 之類的文字編輯器中的組件。</span><span class="sxs-lookup"><span data-stu-id="caf64-141">Hard-coded passwords can be retrieved from an assembly by using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), by using a hexadecimal editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="caf64-142">指定的 Salt 大小小於 8 個位元組。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf64-142">The specified salt size is smaller than 8 bytes.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="caf64-143">密碼或 Salt 是 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf64-143">The password or salt is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rfc2898DeriveBytes (byte[] password, byte[] salt, int iterations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] password, unsigned int8[] salt, int32 iterations) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.Byte[],System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As Byte(), salt As Byte(), iterations As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Rfc2898DeriveBytes(cli::array &lt;System::Byte&gt; ^ password, cli::array &lt;System::Byte&gt; ^ salt, int iterations);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="password" Type="System.Byte[]" />
        <Parameter Name="salt" Type="System.Byte[]" />
        <Parameter Name="iterations" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="password">
          <span data-ttu-id="caf64-144">用來衍生金鑰的密碼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf64-144">The password used to derive the key.</span>
          </span>
        </param>
        <param name="salt">
          <span data-ttu-id="caf64-145">用來衍生金鑰的金鑰 Salt。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf64-145">The key salt used to derive the key.</span>
          </span>
        </param>
        <param name="iterations">
          <span data-ttu-id="caf64-146">操作的重複次數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf64-146">The number of iterations for the operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="caf64-147">使用密碼、Salt 和反覆計數來衍生金鑰，以初始化 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf64-147">Initializes a new instance of the <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> class using a password, a salt, and number of iterations to derive the key.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="caf64-148">Salt 大小必須為 8 個位元組或更大，而且反覆項目計數必須小於或等於零。</span><span class="sxs-lookup"><span data-stu-id="caf64-148">The salt size must be 8 bytes or larger and the iteration count must be greater than zero.</span></span> <span data-ttu-id="caf64-149">建議的最小反覆項目數目是 1000年。</span><span class="sxs-lookup"><span data-stu-id="caf64-149">The minimum recommended number of iterations is 1000.</span></span>  
  
 <span data-ttu-id="caf64-150">RFC 2898 包含密碼和 salt，建立金鑰和初始化向量 (IV) 的方法。</span><span class="sxs-lookup"><span data-stu-id="caf64-150">RFC 2898 includes methods for creating a key and initialization vector (IV) from a password and salt.</span></span> <span data-ttu-id="caf64-151">您可以使用 PBKDF2，密碼為基礎的金鑰衍生函式，來衍生金鑰使用的虛擬隨機函式，以產生幾乎不受限制長度的金鑰。</span><span class="sxs-lookup"><span data-stu-id="caf64-151">You can use PBKDF2, a password-based key derivation function, to derive keys using a pseudo-random function that allows keys of virtually unlimited length to be generated.</span></span> <span data-ttu-id="caf64-152"><xref:System.Security.Cryptography.Rfc2898DeriveBytes>類別可以用來產生衍生的金鑰的基底的索引鍵與其他參數。</span><span class="sxs-lookup"><span data-stu-id="caf64-152">The <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class can be used to produce a derived key from a base key and other parameters.</span></span> <span data-ttu-id="caf64-153">密碼金鑰衍生函式中的基底的索引鍵是密碼，而其他參數則是 salt 值和反覆項目計數。</span><span class="sxs-lookup"><span data-stu-id="caf64-153">In a password-based key derivation function, the base key is a password and the other parameters are a salt value and an iteration count.</span></span>  
  
 <span data-ttu-id="caf64-154">如需 PBKDF2 的詳細資訊，請參閱 RFC 2898"PKCS #5： 密碼型密碼編譯規格 2.0 版中，"上可用[要求註解的網站](http://go.microsoft.com/fwlink/?LinkID=37119)。</span><span class="sxs-lookup"><span data-stu-id="caf64-154">For more information about PBKDF2, see RFC 2898, "PKCS #5: Password-Based Cryptography Specification Version 2.0," available on the [Request for Comments Web site](http://go.microsoft.com/fwlink/?LinkID=37119).</span></span> <span data-ttu-id="caf64-155">完整的詳細資訊，請參閱區段 5.2，"PBKDF2，"。</span><span class="sxs-lookup"><span data-stu-id="caf64-155">See section 5.2, "PBKDF2," for complete details.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="caf64-156">永遠不會硬式編碼在原始程式碼中的密碼。</span><span class="sxs-lookup"><span data-stu-id="caf64-156">Never hard-code a password within your source code.</span></span>  <span data-ttu-id="caf64-157">可以從組件擷取硬式編碼的密碼，利用[Ildasm.exe （IL 解譯器）](~/docs/framework/tools/ildasm-exe-il-disassembler.md)、 使用十六進位的編輯器，或藉由直接開啟 Notepad.exe 之類的文字編輯器中的組件。</span><span class="sxs-lookup"><span data-stu-id="caf64-157">Hard-coded passwords can be retrieved from an assembly by using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), by using a hexadecimal editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="caf64-158">指定的 Salt 大小小於 8 個位元組，或反覆計數小於 1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf64-158">The specified salt size is smaller than 8 bytes or the iteration count is less than 1.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="caf64-159">密碼或 Salt 是 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf64-159">The password or salt is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rfc2898DeriveBytes (string password, byte[] salt, int iterations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string password, unsigned int8[] salt, int32 iterations) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As String, salt As Byte(), iterations As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Rfc2898DeriveBytes(System::String ^ password, cli::array &lt;System::Byte&gt; ^ salt, int iterations);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="salt" Type="System.Byte[]" />
        <Parameter Name="iterations" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="password">
          <span data-ttu-id="caf64-160">用來衍生金鑰的密碼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf64-160">The password used to derive the key.</span>
          </span>
        </param>
        <param name="salt">
          <span data-ttu-id="caf64-161">用來衍生金鑰的金鑰 Salt。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf64-161">The key salt used to derive the key.</span>
          </span>
        </param>
        <param name="iterations">
          <span data-ttu-id="caf64-162">操作的重複次數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf64-162">The number of iterations for the operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="caf64-163">使用密碼、Salt 和反覆計數來衍生金鑰，以初始化 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf64-163">Initializes a new instance of the <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> class using a password, a salt, and number of iterations to derive the key.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="caf64-164">Salt 大小必須為 8 個位元組或更大，而且反覆項目計數必須小於或等於零。</span><span class="sxs-lookup"><span data-stu-id="caf64-164">The salt size must be 8 bytes or larger and the iteration count must be greater than zero.</span></span> <span data-ttu-id="caf64-165">建議的最小反覆項目數目是 1000年。</span><span class="sxs-lookup"><span data-stu-id="caf64-165">The minimum recommended number of iterations is 1000.</span></span>  
  
 <span data-ttu-id="caf64-166">RFC 2898 包含密碼和 salt，建立金鑰和初始化向量 (IV) 的方法。</span><span class="sxs-lookup"><span data-stu-id="caf64-166">RFC 2898 includes methods for creating a key and initialization vector (IV) from a password and salt.</span></span> <span data-ttu-id="caf64-167">您可以使用 PBKDF2，密碼為基礎的金鑰衍生函式，來衍生金鑰使用的虛擬隨機函式，以產生幾乎不受限制長度的金鑰。</span><span class="sxs-lookup"><span data-stu-id="caf64-167">You can use PBKDF2, a password-based key derivation function, to derive keys using a pseudo-random function that allows keys of virtually unlimited length to be generated.</span></span> <span data-ttu-id="caf64-168"><xref:System.Security.Cryptography.Rfc2898DeriveBytes>類別可以用來產生衍生的金鑰的基底的索引鍵與其他參數。</span><span class="sxs-lookup"><span data-stu-id="caf64-168">The <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class can be used to produce a derived key from a base key and other parameters.</span></span> <span data-ttu-id="caf64-169">密碼金鑰衍生函式中的基底的索引鍵是密碼，而其他參數則是 salt 值和反覆項目計數。</span><span class="sxs-lookup"><span data-stu-id="caf64-169">In a password-based key derivation function, the base key is a password and the other parameters are a salt value and an iteration count.</span></span>  
  
 <span data-ttu-id="caf64-170">如需 PBKDF2 的詳細資訊，請參閱 RFC 2898"PKCS #5： 密碼型密碼編譯規格 2.0 版中，"上可用[要求註解的網站](http://go.microsoft.com/fwlink/?LinkID=37119)。</span><span class="sxs-lookup"><span data-stu-id="caf64-170">For more information about PBKDF2, see RFC 2898, "PKCS #5: Password-Based Cryptography Specification Version 2.0," available on the [Request for Comments Web site](http://go.microsoft.com/fwlink/?LinkID=37119).</span></span> <span data-ttu-id="caf64-171">完整的詳細資訊，請參閱區段 5.2，"PBKDF2，"。</span><span class="sxs-lookup"><span data-stu-id="caf64-171">See section 5.2, "PBKDF2," for complete details.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="caf64-172">永遠不會硬式編碼在原始程式碼中的密碼。</span><span class="sxs-lookup"><span data-stu-id="caf64-172">Never hard-code a password within your source code.</span></span>  <span data-ttu-id="caf64-173">可以從組件擷取硬式編碼的密碼，利用[Ildasm.exe （IL 解譯器）](~/docs/framework/tools/ildasm-exe-il-disassembler.md)、 使用十六進位的編輯器，或藉由直接開啟 Notepad.exe 之類的文字編輯器中的組件。</span><span class="sxs-lookup"><span data-stu-id="caf64-173">Hard-coded passwords can be retrieved from an assembly by using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), by using a hexadecimal editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="caf64-174">下列程式碼範例使用<xref:System.Security.Cryptography.Rfc2898DeriveBytes>類別來建立兩個相同的索引鍵<xref:System.Security.Cryptography.TripleDES>類別。</span><span class="sxs-lookup"><span data-stu-id="caf64-174">The following code example uses the <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class to create two identical keys for the <xref:System.Security.Cryptography.TripleDES> class.</span></span>  <span data-ttu-id="caf64-175">然後它會加密，並解密相同的索引鍵的資料。</span><span class="sxs-lookup"><span data-stu-id="caf64-175">It then encrypts and decrypts some data using the keys.</span></span>  
  
 [!code-cpp[rfc28981#1](~/samples/snippets/cpp/VS_Snippets_CLR/rfc28981/CPP/rfc28981.cpp#1)]
 [!code-csharp[rfc28981#1](~/samples/snippets/csharp/VS_Snippets_CLR/rfc28981/CS/rfc28981.cs#1)]
 [!code-vb[rfc28981#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/rfc28981/vb/rfc28981.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="caf64-176">指定的 Salt 大小小於 8 個位元組，或反覆計數小於 1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf64-176">The specified salt size is smaller than 8 bytes or the iteration count is less than 1.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="caf64-177">密碼或 Salt 是 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf64-177">The password or salt is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rfc2898DeriveBytes (string password, int saltSize, int iterations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string password, int32 saltSize, int32 iterations) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As String, saltSize As Integer, iterations As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Rfc2898DeriveBytes(System::String ^ password, int saltSize, int iterations);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="saltSize" Type="System.Int32" />
        <Parameter Name="iterations" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="password">
          <span data-ttu-id="caf64-178">用來衍生金鑰的密碼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf64-178">The password used to derive the key.</span>
          </span>
        </param>
        <param name="saltSize">
          <span data-ttu-id="caf64-179">您希望此類別產生之隨機 Salt 的大小。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf64-179">The size of the random salt that you want the class to generate.</span>
          </span>
        </param>
        <param name="iterations">
          <span data-ttu-id="caf64-180">操作的重複次數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf64-180">The number of iterations for the operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="caf64-181">使用密碼、Salt 大小和反覆計數來衍生金鑰，以初始化 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf64-181">Initializes a new instance of the <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> class using a password, a salt size, and number of iterations to derive the key.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="caf64-182">Salt 大小必須為 8 個位元組或更大，而且反覆項目計數必須小於或等於零。</span><span class="sxs-lookup"><span data-stu-id="caf64-182">The salt size must be 8 bytes or larger and the iteration count must be greater than zero.</span></span> <span data-ttu-id="caf64-183">建議的最小反覆項目數目是 1000年。</span><span class="sxs-lookup"><span data-stu-id="caf64-183">The minimum recommended number of iterations is 1000.</span></span>  
  
 <span data-ttu-id="caf64-184">RFC 2898 包含密碼和 salt，建立金鑰和初始化向量 (IV) 的方法。</span><span class="sxs-lookup"><span data-stu-id="caf64-184">RFC 2898 includes methods for creating a key and initialization vector (IV) from a password and salt.</span></span> <span data-ttu-id="caf64-185">您可以使用 PBKDF2，密碼為基礎的金鑰衍生函式，來衍生金鑰使用的虛擬隨機函式，以產生幾乎不受限制長度的金鑰。</span><span class="sxs-lookup"><span data-stu-id="caf64-185">You can use PBKDF2, a password-based key derivation function, to derive keys using a pseudo-random function that allows keys of virtually unlimited length to be generated.</span></span> <span data-ttu-id="caf64-186"><xref:System.Security.Cryptography.Rfc2898DeriveBytes>類別可以用來產生衍生的金鑰的基底的索引鍵與其他參數。</span><span class="sxs-lookup"><span data-stu-id="caf64-186">The <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class can be used to produce a derived key from a base key and other parameters.</span></span> <span data-ttu-id="caf64-187">密碼金鑰衍生函式中的基底的索引鍵是密碼，而其他參數則是 salt 值和反覆項目計數。</span><span class="sxs-lookup"><span data-stu-id="caf64-187">In a password-based key derivation function, the base key is a password and the other parameters are a salt value and an iteration count.</span></span>  
  
 <span data-ttu-id="caf64-188">如需有關 PBKDF2 的詳細資訊，請參閱 RFC 2898"PKCS #5： 密碼型密碼編譯規格 2.0 版中，「 上可用[要求註解的網站](http://go.microsoft.com/fwlink/?LinkID=37119)。</span><span class="sxs-lookup"><span data-stu-id="caf64-188">For more information on PBKDF2, see RFC 2898,"PKCS #5: Password-Based Cryptography Specification Version 2.0," available on the [Request for Comments Web site](http://go.microsoft.com/fwlink/?LinkID=37119).</span></span> <span data-ttu-id="caf64-189">完整的詳細資訊，請參閱區段 5.2，"PBKDF2，"。</span><span class="sxs-lookup"><span data-stu-id="caf64-189">See section 5.2, "PBKDF2," for complete details.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="caf64-190">永遠不會硬式編碼在原始程式碼中的密碼。</span><span class="sxs-lookup"><span data-stu-id="caf64-190">Never hard-code a password within your source code.</span></span>  <span data-ttu-id="caf64-191">可以從組件擷取硬式編碼的密碼，利用[Ildasm.exe （IL 解譯器）](~/docs/framework/tools/ildasm-exe-il-disassembler.md)、 使用十六進位的編輯器，或藉由直接開啟 Notepad.exe 之類的文字編輯器中的組件。</span><span class="sxs-lookup"><span data-stu-id="caf64-191">Hard-coded passwords can be retrieved from an assembly by using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), by using a hexadecimal editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="caf64-192">指定的 Salt 大小小於 8 個位元組，或反覆計數小於 1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf64-192">The specified salt size is smaller than 8 bytes or the iteration count is less than 1.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="caf64-193">密碼或 Salt 是 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf64-193">The password or salt is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="caf64-194">
            <paramref name="iterations" /> 超出範圍。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf64-194">
              <paramref name="iterations" /> is out of range.</span>
          </span>
          <span data-ttu-id="caf64-195">這個參數需要非負數的數字。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf64-195">This parameter requires a non-negative number.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rfc2898DeriveBytes (byte[] password, byte[] salt, int iterations, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] password, unsigned int8[] salt, int32 iterations, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.Byte[],System.Byte[],System.Int32,System.Security.Cryptography.HashAlgorithmName)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As Byte(), salt As Byte(), iterations As Integer, hashAlgorithm As HashAlgorithmName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Rfc2898DeriveBytes(cli::array &lt;System::Byte&gt; ^ password, cli::array &lt;System::Byte&gt; ^ salt, int iterations, System::Security::Cryptography::HashAlgorithmName hashAlgorithm);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="password" Type="System.Byte[]" />
        <Parameter Name="salt" Type="System.Byte[]" />
        <Parameter Name="iterations" Type="System.Int32" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" />
      </Parameters>
      <Docs>
        <param name="password">To be added.</param>
        <param name="salt">To be added.</param>
        <param name="iterations">To be added.</param>
        <param name="hashAlgorithm">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rfc2898DeriveBytes (string password, byte[] salt, int iterations, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string password, unsigned int8[] salt, int32 iterations, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[],System.Int32,System.Security.Cryptography.HashAlgorithmName)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As String, salt As Byte(), iterations As Integer, hashAlgorithm As HashAlgorithmName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Rfc2898DeriveBytes(System::String ^ password, cli::array &lt;System::Byte&gt; ^ salt, int iterations, System::Security::Cryptography::HashAlgorithmName hashAlgorithm);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="salt" Type="System.Byte[]" />
        <Parameter Name="iterations" Type="System.Int32" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" />
      </Parameters>
      <Docs>
        <param name="password">To be added.</param>
        <param name="salt">To be added.</param>
        <param name="iterations">To be added.</param>
        <param name="hashAlgorithm">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rfc2898DeriveBytes (string password, int saltSize, int iterations, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string password, int32 saltSize, int32 iterations, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As String, saltSize As Integer, iterations As Integer, hashAlgorithm As HashAlgorithmName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Rfc2898DeriveBytes(System::String ^ password, int saltSize, int iterations, System::Security::Cryptography::HashAlgorithmName hashAlgorithm);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="saltSize" Type="System.Int32" />
        <Parameter Name="iterations" Type="System.Int32" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" />
      </Parameters>
      <Docs>
        <param name="password">To be added.</param>
        <param name="saltSize">To be added.</param>
        <param name="iterations">To be added.</param>
        <param name="hashAlgorithm">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CryptDeriveKey">
      <MemberSignature Language="C#" Value="public byte[] CryptDeriveKey (string algname, string alghashname, int keySize, byte[] rgbIV);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] CryptDeriveKey(string algname, string alghashname, int32 keySize, unsigned int8[] rgbIV) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.CryptDeriveKey(System.String,System.String,System.Int32,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function CryptDeriveKey (algname As String, alghashname As String, keySize As Integer, rgbIV As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ CryptDeriveKey(System::String ^ algname, System::String ^ alghashname, int keySize, cli::array &lt;System::Byte&gt; ^ rgbIV);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="algname" Type="System.String" />
        <Parameter Name="alghashname" Type="System.String" />
        <Parameter Name="keySize" Type="System.Int32" />
        <Parameter Name="rgbIV" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="algname">
          <span data-ttu-id="caf64-196">用來衍生金鑰的演算法名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf64-196">The algorithm name for which to derive the key.</span>
          </span>
        </param>
        <param name="alghashname">
          <span data-ttu-id="caf64-197">要用來衍生金鑰的雜湊演算法名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf64-197">The hash algorithm name to use to derive the key.</span>
          </span>
        </param>
        <param name="keySize">
          <span data-ttu-id="caf64-198">要衍生的金鑰大小 (以位元為單位)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf64-198">The size of the key, in bits, to derive.</span>
          </span>
        </param>
        <param name="rgbIV">
          <span data-ttu-id="caf64-199">用來衍生金鑰的初始化向量 (IV)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf64-199">The initialization vector (IV) to use to derive the key.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="caf64-200">從 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 物件衍生密碼編譯金鑰。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf64-200">Derives a cryptographic key from the <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="caf64-201">所衍生金鑰。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf64-201">The derived key.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="caf64-202">此函式是 Crypto API 函式 CryptDeriveKey()，包裝函式，為了提供互通性與使用 Crypto API 的應用程式。</span><span class="sxs-lookup"><span data-stu-id="caf64-202">This function is a wrapper for the Crypto API function CryptDeriveKey(), and is intended to offer interoperability with applications using the Crypto API.</span></span>  
  
 <span data-ttu-id="caf64-203">如果`keySize`參數設定為 0 位元時，使用指定的演算法的預設大小。</span><span class="sxs-lookup"><span data-stu-id="caf64-203">If the `keySize` parameter is set to 0 bits, the default key size for the specified algorithm is used.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <span data-ttu-id="caf64-204">
            <paramref name="keySize" /> 參數不正確。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf64-204">The <paramref name="keySize" /> parameter is incorrect.</span>
          </span>
          <span data-ttu-id="caf64-205">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf64-205">-or-</span>
          </span>
          <span data-ttu-id="caf64-206">無法取得密碼編譯服務提供者 (CSP)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf64-206">The cryptographic service provider (CSP) cannot be acquired.</span>
          </span>
          <span data-ttu-id="caf64-207">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf64-207">-or-</span>
          </span>
          <span data-ttu-id="caf64-208">
            <paramref name="algname" /> 參數不是有效的演算法名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf64-208">The <paramref name="algname" /> parameter is not a valid algorithm name.</span>
          </span>
          <span data-ttu-id="caf64-209">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf64-209">-or-</span>
          </span>
          <span data-ttu-id="caf64-210">
            <paramref name="alghashname" /> 參數不是有效的雜湊演算法名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf64-210">The <paramref name="alghashname" /> parameter is not a valid hash algorithm name.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="caf64-211">
            <see langword="true" /> 表示釋放 Managed 和 Unmanaged 資源，<see langword="false" /> 則表示只釋放 Unmanaged 資源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf64-211">
              <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="caf64-212">釋放 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 類別所使用的 Unmanaged 資源，並選擇性地釋放 Managed 資源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf64-212">Releases the unmanaged resources used by the <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> class and optionally releases the managed resources.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="caf64-213">這個方法會呼叫公用`Dispose()`方法和`Finalize`方法。</span><span class="sxs-lookup"><span data-stu-id="caf64-213">This method is called by the public `Dispose()` method and the `Finalize` method.</span></span> <span data-ttu-id="caf64-214">`Dispose()` 叫用受保護`Dispose(Boolean)`方法`disposing`參數設定為`true`。</span><span class="sxs-lookup"><span data-stu-id="caf64-214">`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="caf64-215">`Finalize` 叫用`Dispose`與`disposing`設`false`。</span><span class="sxs-lookup"><span data-stu-id="caf64-215">`Finalize` invokes `Dispose` with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="caf64-216">`disposing` 參數為 `true` 時，這個方法會釋放 <xref:System.Security.Cryptography.Rfc2898DeriveBytes> 參考的任何 Managed 物件所掌握的資源。</span><span class="sxs-lookup"><span data-stu-id="caf64-216">When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Security.Cryptography.Rfc2898DeriveBytes> references.</span></span> <span data-ttu-id="caf64-217">這個方法會叫用每個參考物件的 `Dispose()` 方法。</span><span class="sxs-lookup"><span data-stu-id="caf64-217">This method invokes the `Dispose()` method of each referenced object.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="caf64-218">
              <see langword="Dispose" /> 可以被其他物件呼叫多次。</span>
            <span class="sxs-lookup">
              <span data-stu-id="caf64-218">
                <see langword="Dispose" /> can be called multiple times by other objects.</span>
            </span>
            <span data-ttu-id="caf64-219">在覆寫<see langword="Dispose(Boolean)" />，請小心不要參考到先前處置之前呼叫中的物件<see langword="Dispose" />。</span>
            <span class="sxs-lookup">
              <span data-stu-id="caf64-219">When overriding <see langword="Dispose(Boolean)" />, be careful not to reference objects that have been previously disposed in an earlier call to <see langword="Dispose" />.</span>
            </span>
            <span data-ttu-id="caf64-220">如需有關如何實作<see langword="Dispose(Boolean)" />，請參閱[實作 Dispose 方法](~/docs/standard/garbage-collection/implementing-dispose.md)。</span>
            <span class="sxs-lookup">
              <span data-stu-id="caf64-220">For more information about how to implement <see langword="Dispose(Boolean)" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span>
            </span>
            <span data-ttu-id="caf64-221">如需有關<see langword="Dispose" />和<see langword="Finalize" />，請參閱[清除 Unmanaged 資源上](~/docs/standard/garbage-collection/unmanaged.md)。</span>
            <span class="sxs-lookup">
              <span data-stu-id="caf64-221">For more information about <see langword="Dispose" /> and <see langword="Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override byte[] GetBytes (int cb);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] GetBytes(int32 cb) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBytes (cb As Integer) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Byte&gt; ^ GetBytes(int cb);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cb" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="cb">
          <span data-ttu-id="caf64-222">要產生的似隨機金鑰位元組數量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf64-222">The number of pseudo-random key bytes to generate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="caf64-223">傳回這個物件的似隨機金鑰。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf64-223">Returns the pseudo-random key for this object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="caf64-224">位元組陣列，以虛擬隨機金鑰位元組填入。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf64-224">A byte array filled with pseudo-random key bytes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="caf64-225"><xref:System.Security.Cryptography.Rfc2898DeriveBytes>類別會實作功能 PBKDF2 使用虛擬亂數產生器根據<xref:System.Security.Cryptography.HMACSHA1>。</span><span class="sxs-lookup"><span data-stu-id="caf64-225">The <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class implements PBKDF2 functionality by using a pseudorandom number generator based on <xref:System.Security.Cryptography.HMACSHA1>.</span></span> <span data-ttu-id="caf64-226"><xref:System.Security.Cryptography.Rfc2898DeriveBytes>類別會採用密碼、 salt 和反覆項目計數，然後再產生金鑰，透過呼叫<xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="caf64-226">The <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class takes a password, a salt, and an iteration count, and then generates keys through calls to the <xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A> method.</span></span> <span data-ttu-id="caf64-227">重複的呼叫這個方法不會產生相同的索引鍵。相反地，附加的兩個呼叫<xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A>方法`cb`參數值的`20`就相當於呼叫<xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A>方法一次使用`cb`參數值的`40`。</span><span class="sxs-lookup"><span data-stu-id="caf64-227">Repeated calls to this method will not generate the same key; instead, appending two calls of the <xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A> method with a `cb` parameter value of `20` is the equivalent of calling the <xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A> method once with a `cb` parameter value of `40`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="caf64-228">下列範例示範如何使用<xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A>方法來取得執行個體索引鍵<xref:System.Security.Cryptography.Rfc2898DeriveBytes>。</span><span class="sxs-lookup"><span data-stu-id="caf64-228">The following example shows how to use the <xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A> method to get the key for an instance of <xref:System.Security.Cryptography.Rfc2898DeriveBytes>.</span></span> <span data-ttu-id="caf64-229">這個程式碼範例是針對所提供之較大範例的一部分<xref:System.Security.Cryptography.Rfc2898DeriveBytes>類別。</span><span class="sxs-lookup"><span data-stu-id="caf64-229">This code example is part of a larger example provided for the <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class.</span></span>  
  
 [!code-cpp[rfc28981#2](~/samples/snippets/cpp/VS_Snippets_CLR/rfc28981/CPP/rfc28981.cpp#2)]
 [!code-csharp[rfc28981#2](~/samples/snippets/csharp/VS_Snippets_CLR/rfc28981/CS/rfc28981.cs#2)]
 [!code-vb[rfc28981#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/rfc28981/vb/rfc28981.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="caf64-230">
            <paramref name="cb" /> 超出範圍。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf64-230">
              <paramref name="cb" /> is out of range.</span>
          </span>
          <span data-ttu-id="caf64-231">這個參數需要非負數的數字。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf64-231">This parameter requires a non-negative number.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="HashAlgorithm">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.HashAlgorithmName HashAlgorithm { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.Cryptography.HashAlgorithmName HashAlgorithm" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Rfc2898DeriveBytes.HashAlgorithm" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HashAlgorithm As HashAlgorithmName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Cryptography::HashAlgorithmName HashAlgorithm { System::Security::Cryptography::HashAlgorithmName get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.HashAlgorithmName</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IterationCount">
      <MemberSignature Language="C#" Value="public int IterationCount { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 IterationCount" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Rfc2898DeriveBytes.IterationCount" />
      <MemberSignature Language="VB.NET" Value="Public Property IterationCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int IterationCount { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="caf64-232">取得或設定操作的重複次數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf64-232">Gets or sets the number of iterations for the operation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="caf64-233">操作的重複次數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf64-233">The number of iterations for the operation.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="caf64-234">反覆項目計數是執行作業的次數。</span><span class="sxs-lookup"><span data-stu-id="caf64-234">Iteration count is the number of times an operation is performed.</span></span> <span data-ttu-id="caf64-235">這個方法，計數必須大於零。</span><span class="sxs-lookup"><span data-stu-id="caf64-235">For this method, the count should be greater than zero.</span></span> <span data-ttu-id="caf64-236">建議的最小反覆項目數目是 1000年。</span><span class="sxs-lookup"><span data-stu-id="caf64-236">The minimum recommended number of iterations is 1000.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="caf64-237">下列範例示範如何使用<xref:System.Security.Cryptography.Rfc2898DeriveBytes.IterationCount%2A>屬性來顯示用於產生金鑰的反覆項目數目。</span><span class="sxs-lookup"><span data-stu-id="caf64-237">The following example shows how to use the <xref:System.Security.Cryptography.Rfc2898DeriveBytes.IterationCount%2A> property to display the number of iterations used in the generation of the key.</span></span> <span data-ttu-id="caf64-238">這個程式碼範例是針對所提供之較大範例的一部分<xref:System.Security.Cryptography.Rfc2898DeriveBytes>類別。</span><span class="sxs-lookup"><span data-stu-id="caf64-238">This code example is part of a larger example provided for the <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class.</span></span>  
  
 [!code-cpp[rfc28981#3](~/samples/snippets/cpp/VS_Snippets_CLR/rfc28981/CPP/rfc28981.cpp#3)]
 [!code-csharp[rfc28981#3](~/samples/snippets/csharp/VS_Snippets_CLR/rfc28981/CS/rfc28981.cs#3)]
 [!code-vb[rfc28981#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/rfc28981/vb/rfc28981.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="caf64-239">反覆計數小於 1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf64-239">The number of iterations is less than 1.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public override void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Reset();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="caf64-240">重設作業的狀態。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf64-240">Resets the state of the operation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="caf64-241">如果已修改的 salt 或反覆項目計數，會自動呼叫這個方法。</span><span class="sxs-lookup"><span data-stu-id="caf64-241">This method is automatically called if the salt or iteration count is modified.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="caf64-242">下列範例會示範如何使用 <xref:System.Security.Cryptography.Rfc2898DeriveBytes.Reset%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="caf64-242">The following example shows how to use the <xref:System.Security.Cryptography.Rfc2898DeriveBytes.Reset%2A> method.</span></span> <span data-ttu-id="caf64-243">這個程式碼範例是針對所提供之較大範例的一部分<xref:System.Security.Cryptography.Rfc2898DeriveBytes>類別。</span><span class="sxs-lookup"><span data-stu-id="caf64-243">This code example is part of a larger example provided for the <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class.</span></span>  
  
 [!code-cpp[rfc28981#5](~/samples/snippets/cpp/VS_Snippets_CLR/rfc28981/CPP/rfc28981.cpp#5)]
 [!code-csharp[rfc28981#5](~/samples/snippets/csharp/VS_Snippets_CLR/rfc28981/CS/rfc28981.cs#5)]
 [!code-vb[rfc28981#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/rfc28981/vb/rfc28981.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Salt">
      <MemberSignature Language="C#" Value="public byte[] Salt { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] Salt" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Rfc2898DeriveBytes.Salt" />
      <MemberSignature Language="VB.NET" Value="Public Property Salt As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ Salt { cli::array &lt;System::Byte&gt; ^ get(); void set(cli::array &lt;System::Byte&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="caf64-244">取得或設定用於操作的金鑰 Salt 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf64-244">Gets or sets the key salt value for the operation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="caf64-245">用於操作的金鑰 Salt 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf64-245">The key salt value for the operation.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="caf64-246">Salt，一組隨機的位元組，可用來讓未經授權的解密更加困難的訊息。</span><span class="sxs-lookup"><span data-stu-id="caf64-246">Salt, a random set of bytes, is used to make unauthorized decrypting of a message more difficult.</span></span> <span data-ttu-id="caf64-247">字典攻擊是攻擊者嘗試藉由比較加密的值與最可能的索引鍵的先前計算加密值解密加密的訊息。</span><span class="sxs-lookup"><span data-stu-id="caf64-247">A dictionary attack is an attack in which the attacker attempts to decrypt an encrypted message by comparing the encrypted value with previously computed encrypted values for the most likely keys.</span></span> <span data-ttu-id="caf64-248">這種攻擊進行更為困難的 salt，或隨機位元組，結尾之前的金鑰衍生密碼的簡介。</span><span class="sxs-lookup"><span data-stu-id="caf64-248">This attack is made much more difficult by the introduction of salt, or random bytes, at the end of the password before the key derivation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="caf64-249">指定的 Salt 大小小於 8 個位元組。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf64-249">The specified salt size is smaller than 8 bytes.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="caf64-250">Salt 是 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf64-250">The salt is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>