<Type Name="IFormatProvider" FullName="System.IFormatProvider">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c42bee4f607569959c7c5d7e16c9a5b4bc99c655" />
    <Meta Name="ms.sourcegitcommit" Value="d877ae76e9e11799bf919379507239e2c4072742" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="08/09/2018" />
    <Meta Name="ms.locfileid" Value="39827657" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IFormatProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IFormatProvider" />
  <TypeSignature Language="DocId" Value="T:System.IFormatProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IFormatProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IFormatProvider" />
  <TypeSignature Language="F#" Value="type IFormatProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>提供機制來擷取要控制格式的物件。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IFormatProvider>介面提供格式化和剖析作業中提供的格式資訊的物件。 格式設定作業會將型別的值轉換成該值的字串表示。 典型的格式化方法會`ToString`方法的類型，以及<xref:System.String.Format%2A>。 剖析作業轉換成該類型的值的字串表示。 典型的剖析方法都`Parse`和`TryParse`。  
  
 <xref:System.IFormatProvider>介面所組成的單一方法， <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType>。 <xref:System.IFormatProvider.GetFormat%2A> 是一個回呼方法： 剖析或格式化方法會呼叫它，並將它傳遞<xref:System.Type>物件，表示格式化或剖析方法預期的物件類型將提供格式設定資訊。 <xref:System.IFormatProvider.GetFormat%2A>方法負責傳回該型別的物件。  
  
 <xref:System.IFormatProvider> 實作通常會以隱含方式使用的格式化和剖析方法。 例如，<xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType>方法會隱含地使用<xref:System.IFormatProvider>代表系統的目前文化特性的實作。 <xref:System.IFormatProvider> 實作也可以指定明確的具有類型參數的方法<xref:System.IFormatProvider>，這類<xref:System.Int32.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>和<xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>。  
  
 .NET Framework 包含下列三個預先定義的<xref:System.IFormatProvider>實作，以提供用於格式化或剖析數值及日期和時間值的特定文化特性的資訊：  
  
-   <xref:System.Globalization.NumberFormatInfo>類別，可提供資訊，用來格式化數字，例如貨幣、 千分位分隔符號和特定文化特性的小數點符號。 如需所辨識的預先定義的格式字串<xref:System.Globalization.NumberFormatInfo>物件，並在數值格式化作業中使用，請參閱[標準數值格式字串](~/docs/standard/base-types/standard-numeric-format-strings.md)和[自訂數值格式字串](~/docs/standard/base-types/custom-numeric-format-strings.md).  
  
-   <xref:System.Globalization.DateTimeFormatInfo>類別，可提供用來格式化日期和時間，例如特定文化特性或順序和格式的日期的年、 月和日元件的日期和時間分隔符號符號的資訊。 如需所辨識的預先定義的格式字串<xref:System.Globalization.DateTimeFormatInfo>物件，並在數值格式化作業中使用，請參閱[標準日期和時間格式字串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)和[自訂日期和時間格式字串](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  
  
-   <xref:System.Globalization.CultureInfo>類別，其代表特定文化特性。 其<xref:System.IFormatProvider.GetFormat%2A>方法會傳回特定文化特性<xref:System.Globalization.NumberFormatInfo>或是<xref:System.Globalization.DateTimeFormatInfo>物件，取決於是否<xref:System.Globalization.CultureInfo>物件會在格式化或剖析牽涉到數字或日期和時間的作業。  
  
 .NET Framework 也支援自訂格式。 這通常牽涉到建立會實作格式化類別<xref:System.IFormatProvider>和<xref:System.ICustomFormatter>。 此類別的執行個體則做為參數傳遞至方法，例如執行自訂格式化作業中，<xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>範例說明這類的自訂實作，為的 12 位數客戶編號的數字格式化。  
  
   
  
## Examples  
 下列範例說明如何<xref:System.IFormatProvider>實作可以變更的日期和時間值的表示法。 在此情況下，單一的日期會顯示使用<xref:System.Globalization.CultureInfo>代表四個不同的文化特性的物件。  
  
 [!code-csharp[System.IFormatProvider.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IFormatProvider.Class/cs/provider2.cs#3)]
 [!code-vb[System.IFormatProvider.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IFormatProvider.Class/vb/provider2.vb#3)]  
  
 下列範例示範如何將類別可實作<xref:System.IFormatProvider>介面和<xref:System.IFormatProvider.GetFormat%2A>方法。 `AcctNumberFormat`類別將<xref:System.Int64>表示帳戶號碼的格式化的 12 位數客戶編號值。 其`GetFormat`方法會傳回參考目前`AcctNumberFormat`執行個體，如果`formatType`參數是指實作的類別<xref:System.ICustomFormatter>，否則`GetFormat`傳回`null`。  
  
 [!code-csharp[System.IFormatProvider.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IFormatProvider.Class/cs/Provider.cs#2)]
 [!code-vb[System.IFormatProvider.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IFormatProvider.Class/vb/Provider.vb#2)]  
  
 實作的類別<xref:System.IFormatProvider>然後可以呼叫格式化和剖析作業中使用。 例如，下列程式碼呼叫<xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>方法來產生包含的格式化的 12 位數客戶編號的字串。  
  
 [!code-csharp[System.IFormatProvider.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IFormatProvider.Class/cs/Provider.cs#1)]
 [!code-vb[System.IFormatProvider.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IFormatProvider.Class/vb/Provider.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ICustomFormatter" />
    <altmember cref="T:System.IFormattable" />
  </Docs>
  <Members>
    <Member MemberName="GetFormat">
      <MemberSignature Language="C#" Value="public object GetFormat (Type formatType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetFormat(class System.Type formatType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IFormatProvider.GetFormat(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFormat (formatType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetFormat(Type ^ formatType);" />
      <MemberSignature Language="F#" Value="abstract member GetFormat : Type -&gt; obj" Usage="iFormatProvider.GetFormat formatType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formatType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="formatType">物件，指定要傳回的格式化物件的型別。</param>
        <summary>傳回物件，這個物件為所指定型別提供格式化服務。</summary>
        <returns>如果 <see cref="T:System.IFormatProvider" /> 實作可以提供該型別的物件則為 <paramref name="formatType" /> 所指定的物件執行個體，否則為 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IFormatProvider.GetFormat%2A> 是一個回呼方法，以格式化和剖析方法叫用來擷取在剖析作業或輸出字串在格式化作業中的格式輸入字串的格式的相關資訊。 在 `formatType`參數、 格式化或剖析方法會傳遞執行其作業所需的物件型別。 如果<xref:System.IFormatProvider>實作可以提供這格式化或剖析物件，它會傳回該物件。 如果沒有，它會傳回`null`。  
  
 例如，在呼叫<xref:System.Int32.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>方法，方法引數是<xref:System.IFormatProvider>物件，提供格式化的字串表示，目前的 「 整數 」 執行個體的可能方式的相關資訊。 當執行階段執行方法時，它會呼叫<xref:System.IFormatProvider>物件的<xref:System.IFormatProvider.GetFormat%2A>方法並將它傳遞<xref:System.Type>物件，表示<xref:System.Globalization.NumberFormatInfo>型別。 如果<xref:System.IFormatProvider>物件可以提供<xref:System.Globalization.NumberFormatInfo>物件，它會傳回該物件。 如果它無法提供該類型的物件，它會傳回`null`。  
  
 您可以實作<xref:System.IFormatProvider>介面和<xref:System.IFormatProvider.GetFormat%2A>提供自訂格式化或剖析服務的類別中的方法。 <xref:System.IFormatProvider>實作會再做為引數傳遞至剖析或格式化具有一個型別的參數之方法的任何多載<xref:System.IFormatProvider>，例如<xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>， <xref:System.Int32.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>，或<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>。  
  
   
  
## Examples  
 下列範例示範如何將類別可實作<xref:System.IFormatProvider>介面和<xref:System.IFormatProvider.GetFormat%2A>方法。 `AcctNumberFormat`類別將<xref:System.Int64>表示帳戶號碼的格式化的 12 位數客戶編號值。 其`GetFormat`方法會傳回本身的參考，如果`formatType`參數是指類別可實作<xref:System.ICustomFormatter>; 否則`GetFormat`傳回`null`。  
  
 [!code-csharp[System.IFormatProvider.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IFormatProvider.Class/cs/Provider.cs#2)]
 [!code-vb[System.IFormatProvider.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IFormatProvider.Class/vb/Provider.vb#2)]  
  
 執行個體`AcctNumberFormat`類別接著會做為引數傳遞至方法，提供格式化或剖析服務。 例如，下列程式碼傳遞`AcctNumberFormat`類別來<xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>方法產生的已格式化的 12 位數客戶編號。  
  
 [!code-csharp[System.IFormatProvider.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IFormatProvider.Class/cs/Provider.cs#1)]
 [!code-vb[System.IFormatProvider.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IFormatProvider.Class/vb/Provider.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>