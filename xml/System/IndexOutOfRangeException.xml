<Type Name="IndexOutOfRangeException" FullName="System.IndexOutOfRangeException">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="fa743ca2f45cda07f83e63ffd565711d31756eb5" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30728622" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class IndexOutOfRangeException : SystemException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit IndexOutOfRangeException extends System.SystemException" />
  <TypeSignature Language="DocId" Value="T:System.IndexOutOfRangeException" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class IndexOutOfRangeException&#xA;Inherits SystemException" />
  <TypeSignature Language="C++ CLI" Value="public ref class IndexOutOfRangeException sealed : SystemException" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Exception</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.SystemException</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>嘗試使用陣列或集合以外的索引來存取陣列或集合的項目時所擲回的例外狀況。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IndexOutOfRangeException>使用無效的索引來存取陣列或集合的成員，或是讀取或寫入一個緩衝區中的特定位置時，會擲回例外狀況。 這個例外狀況是繼承自<xref:System.Exception>類別但加入沒有重複的成員。  
  
 一般而言，<xref:System.IndexOutOfRangeException>因為開發人員的錯誤而擲回例外狀況。 而不是處理的例外狀況，您應該診斷錯誤的原因和修正程式碼。 錯誤的常見原因包括：  
  
-   小於其數字的成員或項目，如下列範例說明忘記上限的集合，或以零為起始的陣列其中一個。  
  
     [!code-csharp[System.IndexOutOfRangeException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/length1.cs#3)]
     [!code-vb[System.IndexOutOfRangeException#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/length1.vb#3)]  
  
     若要更正錯誤，您可以使用下列程式碼。  
  
     [!code-csharp[System.IndexOutOfRangeException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/length2.cs#4)]
     [!code-vb[System.IndexOutOfRangeException#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/length2.vb#4)]  
  
     或者，而不是由其索引，逐一查看陣列中的所有項目，您可以使用`foreach`陳述式 （C# 中） 或`For Each`（在 Visual Basic) 陳述式。  
  
-   嘗試指派至另一個陣列，具有不已適當建立維度，且具有較少的項目，比原始陣列的陣列項目。 下列範例會嘗試指派中的最後一個項目`value1`陣列中的相同項目`value2`陣列。 不過，`value2`陣列未正確測量有六個，而不是七個元素。 如此一來，作業會擲回<xref:System.IndexOutOfRangeException>例外狀況。  
  
     [!code-csharp[System.IndexOutOfRangeException#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/Uninit1.cs#10)]
     [!code-vb[System.IndexOutOfRangeException#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/Uninit1.vb#10)]  
  
-   使用值的方法來傳回搜尋來逐一查看該陣列或集合中特定的索引位置開始的一部分。 如果您忘記檢查是否搜尋作業找到相符項目，執行階段會擲回<xref:System.IndexOutOfRangeException>例外狀況，如本範例所示。  
  
     [!code-csharp[System.IndexOutOfRangeException#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/negative1.cs#5)]
     [!code-vb[System.IndexOutOfRangeException#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/negative1.vb#5)]  
  
     在此情況下，<xref:System.Collections.Generic.List%601.IndexOf%2A?displayProperty=nameWithType>方法會傳回-1，無法尋找相符項目時，是無效的索引值。 若要更正這個錯誤，如本範例所示，逐一查看陣列之前檢查搜尋方法的傳回值。  
  
     [!code-csharp[System.IndexOutOfRangeException#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/negative2.cs#6)]
     [!code-vb[System.IndexOutOfRangeException#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/negative2.vb#6)]  
  
-   嘗試使用或列舉的結果集、 集合或未測試傳回的物件是否為有效的任何資料查詢所傳回的陣列。  
  
-   您可以使用計算的值來定義起始的索引、 結束的索引或可重複的項目數。 如果不是預期的計算結果，可能會導致<xref:System.IndexOutOfRangeException>例外狀況。 您應該檢查您的程式邏輯中計算的索引值，並逐一查看陣列或集合之前驗證的值。 下列條件必須全部為 true;否則，<xref:System.IndexOutOfRangeException>擲回例外狀況：  
  
    -   起始的索引必須大於或等於<xref:System.Array.GetLowerBound%2A?displayProperty=nameWithType>之維度的陣列，您想要逐一查看，或大於或等於 0 的集合。  
  
    -   結束索引不能超過<xref:System.Array.GetUpperBound%2A?displayProperty=nameWithType>之維度的陣列，您想要逐一查看，或不能大於或等於`Count`的集合屬性。  
  
    -   下列方程式必須是您想要逐一查看陣列的維度，則為 true:  
  
        ```  
        start_index >= lower_bound And start_index + items_to_iterate – 1 <= upper_bound  
        ```  
  
         集合，如下列方程式必須成立：  
  
        ```  
        start_index >= 0 And start_index + items_to_iterate <= Count  
        ```  
  
        > [!TIP]
        >  在陣列或集合的起始索引不可以是負數值。  
  
-   假設陣列必須有以零為起始的。 您可以建立不是以零為起始的陣列<xref:System.Array.CreateInstance%28System.Type%2CSystem.Int32%5B%5D%2CSystem.Int32%5B%5D%29?displayProperty=nameWithType>方法可以傳回由 COM interop，雖然它們不符合 CLS 標準。 下列範例說明<xref:System.IndexOutOfRangeException>逐一查看非零起始的陣列，所建立時，會擲回<xref:System.Array.CreateInstance%28System.Type%2CSystem.Int32%5B%5D%2CSystem.Int32%5B%5D%29?displayProperty=nameWithType>方法。  
  
     [!code-csharp[System.IndexOutOfRangeException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/nonzero1.cs#1)]
     [!code-vb[System.IndexOutOfRangeException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/nonzero1.vb#1)]  
  
     若要更正這個錯誤，如下列範例會執行，您可以呼叫<xref:System.Array.GetLowerBound%2A>方法而不是做出假設陣列的起始索引。  
  
     [!code-csharp[System.IndexOutOfRangeException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/nonzero2.cs#2)]
     [!code-vb[System.IndexOutOfRangeException#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/nonzero2.vb#2)]  
  
     請注意，當您呼叫<xref:System.Array.GetLowerBound%2A>方法來取得的起始索引的陣列，您也應該呼叫<xref:System.Array.GetUpperBound%28System.Int32%29?displayProperty=nameWithType>方法來取得其結束索引。  
  
-   使人混淆的索引和數字陣列或集合中的索引處的值。 使用時，通常會發生此問題`foreach`陳述式 （C# 中） 或`For Each`（在 Visual Basic) 陳述式。 下面範例會說明此問題。  
  
     [!code-csharp[System.IndexOutOfRangeException#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/foreach1.cs#7)]
     [!code-vb[System.IndexOutOfRangeException#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/foreach1.vb#7)]  
  
     反覆項目建構會傳回陣列或集合，不是它的索引中的每個值。 若要消除例外狀況，請使用此程式碼。  
  
     [!code-csharp[System.IndexOutOfRangeException#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/foreach2.cs#8)]
     [!code-vb[System.IndexOutOfRangeException#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/foreach2.vb#8)]  
  
-   提供無效的資料行名稱給<xref:System.Data.DataView.Sort%2A?displayProperty=nameWithType>屬性。  
  
-   違反執行緒安全。 作業，例如讀取相同<xref:System.IO.StreamReader>物件，寫入至相同<xref:System.IO.StreamWriter>物件，從多個執行緒，或列舉中的物件<xref:System.Collections.Hashtable>從不同執行緒可能會擲回<xref:System.IndexOutOfRangeException>如果不在存取的物件執行緒安全的方式。 這個例外狀況是通常間歇性的因為它是倚賴競爭情形。  
  
 管理陣列使用硬式編碼的索引值是可能擲回例外狀況，如果索引值不正確或無效，或操作的陣列大小是未預期的。 若要避免某項作業擲回<xref:System.IndexOutOfRangeException>例外狀況，您可以執行下列：  
  
-   逐一查看陣列使用的項目[foreach](https://msdn.microsoft.com/library/ttw7t8t6.aspx)陳述式 （C# 中） 或[每個...下一步](https://msdn.microsoft.com/library/5ebk1751.aspx)建構 （在 Visual Basic)，而不是反覆項目索引。  
  
-   開頭為所傳回之索引的索引來逐一查看項目<xref:System.Array.GetLowerBound%2A?displayProperty=nameWithType>方法和索引所傳回的結束<xref:System.Array.GetUpperBound%2A?displayProperty=nameWithType>方法。  
  
-   如果您指派給另一個陣列中的項目，請確定目標陣列有至少多的項目 」 來源陣列藉由比較其<xref:System.Array.Length%2A?displayProperty=nameWithType>屬性。  
  
 如需執行個體的初始屬性值的清單<xref:System.IndexOutOfRangeException>，請參閱<xref:System.IndexOutOfRangeException>建構函式。  
  
 下列中繼語言 (IL) 指示擲回<xref:System.IndexOutOfRangeException>:  
  
-   ldelem.\<type>  
  
-   ldelema  
  
-   stelem.\<type>  
  
 <xref:System.IndexOutOfRangeException> 會使用 HRESULT COR_E_INDEXOUTOFRANGE，0x80131508 的值。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Exception" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.IndexOutOfRangeException" /> 類別的新執行個體。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IndexOutOfRangeException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IndexOutOfRangeException.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IndexOutOfRangeException();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.IndexOutOfRangeException" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個建構函式初始化<xref:System.Exception.Message%2A>屬性的新執行個體的系統提供的訊息描述錯誤，例如"的陣列索引超出範圍。 」 此訊息會考量目前的系統文化特性。  
  
 下表顯示 <xref:System.IndexOutOfRangeException> 執行個體的初始屬性值。  
  
|屬性|值|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|null 參考 (在 Visual Basic 中為 `Nothing`)。|  
|<xref:System.Exception.Message%2A>|當地語系化的錯誤訊息字串。|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IndexOutOfRangeException (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IndexOutOfRangeException.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IndexOutOfRangeException(System::String ^ message);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">描述錯誤的訊息。</param>
        <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.IndexOutOfRangeException" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個建構函式初始化<xref:System.Exception.Message%2A?displayProperty=nameWithType>屬性的新的例外狀況使用`message`參數。 `message` 的內容必須能讓人了解。 這個建構函式的呼叫端必須確保這個字串已經被當地語系化 (為了目前系統的文化特性)。  
  
 下表顯示 <xref:System.IndexOutOfRangeException> 執行個體的初始屬性值。  
  
|屬性|值|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|null 參考 (在 Visual Basic 中為 `Nothing`)。|  
|<xref:System.Exception.Message%2A>|錯誤訊息字串。|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IndexOutOfRangeException (string message, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IndexOutOfRangeException.#ctor(System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String, innerException As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IndexOutOfRangeException(System::String ^ message, Exception ^ innerException);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="message">解釋例外狀況原因的錯誤訊息。</param>
        <param name="innerException">做為目前例外狀況發生原因的例外狀況。 如果 <c>innerException</c> 參數不是 Null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)，則會在處理內部例外狀況的 <see langword="catch" /> 區塊中引發目前的例外狀況。</param>
        <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.IndexOutOfRangeException" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 被擲回以做為前一個例外狀況直接結果的例外狀況，應該在 <xref:System.Exception.InnerException%2A> 屬性中包含對前一個例外狀況的參考。 `InnerException` 屬性會傳回與傳入建構函式中相同的值；如果 `Nothing` 屬性不提供內部例外值給建構函式，則傳回 null 參考 (在 Visual Basic 中為 `InnerException`)。  
  
 下表顯示 <xref:System.IndexOutOfRangeException> 執行個體的初始屬性值。  
  
|屬性|值|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|內部例外狀況參考。|  
|<xref:System.Exception.Message%2A>|錯誤訊息字串。|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Exception" />
      </Docs>
    </Member>
  </Members>
</Type>