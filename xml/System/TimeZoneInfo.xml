<Type Name="TimeZoneInfo" FullName="System.TimeZoneInfo">
  <Metadata><Meta Name="ms.openlocfilehash" Value="25e19b7d157dbe922506010b94767d4a672e028c" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58709137" /></Metadata><TypeSignature Language="C#" Value="public sealed class TimeZoneInfo : IEquatable&lt;TimeZoneInfo&gt;, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit TimeZoneInfo extends System.Object implements class System.IEquatable`1&lt;class System.TimeZoneInfo&gt;, class System.Runtime.Serialization.IDeserializationCallback, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.TimeZoneInfo" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TimeZoneInfo&#xA;Implements IDeserializationCallback, IEquatable(Of TimeZoneInfo), ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class TimeZoneInfo sealed : IEquatable&lt;TimeZoneInfo ^&gt;, System::Runtime::Serialization::IDeserializationCallback, System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type TimeZoneInfo = class&#xA;    interface IEquatable&lt;TimeZoneInfo&gt;&#xA;    interface ISerializable&#xA;    interface IDeserializationCallback" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.TimeZoneInfo&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.IDeserializationCallback</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=2.0.5.0, Culture=Neutral, PublicKeyToken=7cec85d7bea7798e")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.5;xamarinandroid-7.1;xamarinios-10.8;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示世界的任意時區。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 時區是使用相同時間的地理區域。  
  
 <xref:System.TimeZoneInfo>類別會提供顯著的增強功能比<xref:System.TimeZone>類別，可提供有限的功能。  
  
 <xref:System.TimeZone>類別能夠辨識只有當地時區，並將 Coordinated Universal Time (UTC) 與當地時間之間的時間可以轉換。 A<xref:System.TimeZoneInfo>物件可以代表任何時區和方法<xref:System.TimeZoneInfo>類別可用來將一個時區中的時間轉換成任何其他時區中對應的時間。 成員<xref:System.TimeZoneInfo>類別支援下列作業：  
  
-   正在擷取的作業系統已經定義的時區。  
  
-   列舉系統可用的時區。  
  
-   轉換不同的時區之間的時間。  
  
-   建立新的時區，尚未定義作業系統。  
  
-   序列化時間的時區，供日後擷取。  
  
> [!NOTE]
>  執行個體<xref:System.TimeZoneInfo>類別是不變。 一旦具現化物件，則無法修改其值。  
  
 您無法執行個體化<xref:System.TimeZoneInfo>物件使用`new`關鍵字。 相反地，您必須呼叫其中一個靜態成員的<xref:System.TimeZoneInfo>下表所示的類別。  
  
|靜態成員名稱|描述|  
|------------------------|-----------------|  
|<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> 方法|從應用程式所提供的資料建立自訂時區。|  
|<xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> 方法|具現化時區，根據其識別項。|  
|<xref:System.TimeZoneInfo.FromSerializedString%2A> 方法|還原序列化的字串值來重新建立先前序列化<xref:System.TimeZoneInfo>物件。|  
|<xref:System.TimeZoneInfo.GetSystemTimeZones%2A> 方法|傳回可列舉<xref:System.Collections.ObjectModel.ReadOnlyCollection%601>的<xref:System.TimeZoneInfo>物件，表示所有本機系統可用的時區。|  
|<xref:System.TimeZoneInfo.Local%2A> 屬性|具現化<xref:System.TimeZoneInfo>代表當地時區的物件。|  
|<xref:System.TimeZoneInfo.Utc%2A> 屬性|具現化<xref:System.TimeZoneInfo>代表 UTC 時區的物件。|  
  
 您可以使用<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A>方法用來建立本機系統登錄在 Windows 系統或時區中的類別中未定義的時區[ICU 文件庫](http://userguide.icu-project.org/datetime/timezone)Linux 或 macOS 上。 您可以接著使用<xref:System.TimeZoneInfo.ToSerializedString%2A>儲存為字串時，這些都可以儲存至應用程式存取某種形式的時區物件之資訊的屬性。 您可以使用<xref:System.TimeZoneInfo.FromSerializedString%2A>方法，將序列化的字串轉換回<xref:System.TimeZoneInfo>物件。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="BaseUtcOffset">
      <MemberSignature Language="C#" Value="public TimeSpan BaseUtcOffset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan BaseUtcOffset" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.BaseUtcOffset" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BaseUtcOffset As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan BaseUtcOffset { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseUtcOffset : TimeSpan" Usage="System.TimeZoneInfo.BaseUtcOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得目前時區標準時間與國際標準時間 (UTC) 的時差。</summary>
        <value>表示目前時區標準時間與國際標準時間 (UTC) 時差的物件。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 所傳回的時間範圍<xref:System.TimeZoneInfo.BaseUtcOffset%2A>屬性的範圍可以從 14 小時 （14 小時之前 Coordinated Universal Time (UTC) 時區） 到-14 小時 （14 小時 utc 時區）。 時區是 UTC 快有正面的位移。位於 UTC 的時區有負數位移。  
  
 <xref:System.TimeZoneInfo.BaseUtcOffset%2A>值以整數分鐘數表示。 它不能包含小數的分鐘數。  
  
> [!NOTE]
>  因為<xref:System.TimeZoneInfo.BaseUtcOffset%2A>是的屬性<xref:System.TimeZoneInfo>物件而非<xref:System.TimeZoneInfo.AdjustmentRule>物件，<xref:System.TimeZoneInfo>類別適用於單一位移與 UTC 的時區調整所有。 為了反映已修改其相對於 UTC 的時區，您必須建立新的時區使用<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A>方法。  
  
 <xref:System.TimeZoneInfo.BaseUtcOffset%2A>屬性不同於<xref:System.TimeZoneInfo.GetUtcOffset%2A>方法如下：  
  
-   <xref:System.TimeZoneInfo.BaseUtcOffset%2A>屬性會傳回 UTC 與時區標準時間; 之間的差異<xref:System.TimeZoneInfo.GetUtcOffset%2A>方法會傳回 UTC 與時區的時間，在特定時間點之間的差異時間。  
  
-   <xref:System.TimeZoneInfo.GetUtcOffset%2A>方法會反映任何調整規則的應用程式的時區;<xref:System.TimeZoneInfo.BaseUtcOffset%2A>屬性則否。  
  
   
  
## Examples  
 下列範例會使用<xref:System.TimeZoneInfo.BaseUtcOffset%2A>屬性來顯示當地時間與國際標準時間 (UTC) 之間的差異。  
  
 [!code-csharp[System.TimeZone2.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#1)]
 [!code-vb[System.TimeZone2.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.TimeZoneInfo.GetUtcOffset" />
      </Docs>
    </Member>
    <Member MemberName="ClearCachedData">
      <MemberSignature Language="C#" Value="public static void ClearCachedData ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ClearCachedData() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ClearCachedData" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ClearCachedData ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ClearCachedData();" />
      <MemberSignature Language="F#" Value="static member ClearCachedData : unit -&gt; unit" Usage="System.TimeZoneInfo.ClearCachedData " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>清除快取的時區資料。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 快取的時區資料會包含當地時區和國際標準時間 (UTC) 區域上的資料。  
  
 您可能會呼叫`ClearCachedData`方法，以減少記憶體專門提供讓應用程式的快取的時區資訊，或反映的本機系統的時區已變更的事實。  
  
 建議您不要儲存在本機和 UTC 時區的參考。 若要在呼叫之後`ClearCachedData`方法，這些物件的變數會是未定義<xref:System.TimeZoneInfo>不再參考的物件<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>或<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>。 例如，下列程式碼中，第二個呼叫來<xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType>方法會擲回<xref:System.ArgumentException>因為`local`變數不會再視為等於<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>。  
  
 [!code-csharp[System.TimeZone2.BestPractices#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.BestPractices/cs/System.TimeZone2.BestPractices.cs#1)]
 [!code-vb[System.TimeZone2.BestPractices#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.BestPractices/vb/System.TimeZone2.BestPractices.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ConvertTime">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將時間轉換為特定時區的時間。</summary>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">在各時區間轉換時間</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ConvertTime">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTime (DateTime dateTime, TimeZoneInfo destinationTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTime(valuetype System.DateTime dateTime, class System.TimeZoneInfo destinationTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTime(DateTime dateTime, TimeZoneInfo ^ destinationTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTime : DateTime * TimeZoneInfo -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTime (dateTime, destinationTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="xamarinmac-3.0" />
        <Parameter Name="destinationTimeZone" Type="System.TimeZoneInfo" Index="1" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTime">要轉換的日期和時間。</param>
        <param name="destinationTimeZone">要轉換 <paramref name="dateTime" /> 的目標時區。</param>
        <summary>將時間轉換為特定時區的時間。</summary>
        <returns>目的地時區中的日期與時間。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 執行轉換，當<xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29>方法適用於作用中的任何調整規則`destinationTimeZone`時區。  
  
 這個多載<xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%29>方法會判斷來源時區的值從`dateTime`參數的<xref:System.DateTime.Kind%2A>屬性，如下表所示。  
  
|Kind 屬性值|來源時區|方法的行為|  
|-------------------------|----------------------|---------------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Local%2A>|將當地時間轉換成時間`destinationTimeZone`。|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Utc%2A>|將轉換為 Coordinated Universal Time (UTC) 時間`destinationTimeZone`。|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|假設為<xref:System.TimeZoneInfo.Local%2A>。|將當地時間轉換成時間`destinationTimeZone`。|  
  
 <xref:System.DateTime.Kind%2A>屬性傳回之<xref:System.DateTime>值會設定為下表所示。  
  
|條件|傳回類型的屬性值|  
|---------------|----------------------------------|  
|`destinationTimeZone` 為 <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>。|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
|`destinationTimeZone` 為 <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>。|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|  
|所有其他日期和時間值和目的地時區。|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|  
  
 如果值`dateTime`參數是模稜兩可的當地時間，將它解譯為標準時間。 如果`dateTime`參數是無效的當地時間，這個方法會擲回<xref:System.ArgumentException>。  
  
 如果轉換`dateTime`早於日期和時間值會導致<xref:System.DateTime.MinValue?displayProperty=nameWithType>或更晚<xref:System.DateTime.MaxValue?displayProperty=nameWithType>，這個方法會傳回<xref:System.DateTime.MinValue?displayProperty=nameWithType>或<xref:System.DateTime.MaxValue?displayProperty=nameWithType>分別。  
  
 您也可以藉由呼叫轉換至或從 UTC<xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A>和<xref:System.TimeZoneInfo.ConvertTimeToUtc%2A>方法。  
  
   
  
## Examples  
 下列範例會將在美國、 加拿大東部時區時間的日期和時間值的陣列。 它會顯示來源時區，取決於<xref:System.DateTime.Kind%2A?displayProperty=nameWithType>來源屬性<xref:System.DateTime>值。 它也說明了<xref:System.TimeZoneInfo.ConvertTime%2A>方法會採用會調整時區考量，因為時區調整在來源和目的地時區中是發生在上午 2:00 在 2010 年 11 月 7日日。  
  
 [!code-csharp[System.TimeZoneInfo.ConvertTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timezoneinfo.converttime/cs/converttime1.cs#1)]
 [!code-vb[System.TimeZoneInfo.ConvertTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timezoneinfo.converttime/vb/converttime1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="dateTime" /> 參數的值表示無效的時間。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationTimeZone" /> 參數的值為 <see langword="null" />。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">在各時區間轉換時間</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertTime">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ConvertTime (DateTimeOffset dateTimeOffset, TimeZoneInfo destinationTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ConvertTime(valuetype System.DateTimeOffset dateTimeOffset, class System.TimeZoneInfo destinationTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTime(System.DateTimeOffset,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset ConvertTime(DateTimeOffset dateTimeOffset, TimeZoneInfo ^ destinationTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTime : DateTimeOffset * TimeZoneInfo -&gt; DateTimeOffset" Usage="System.TimeZoneInfo.ConvertTime (dateTimeOffset, destinationTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="xamarinmac-3.0" />
        <Parameter Name="destinationTimeZone" Type="System.TimeZoneInfo" Index="1" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">要轉換的日期和時間。</param>
        <param name="destinationTimeZone">要轉換 <paramref name="dateTime" /> 的目標時區。</param>
        <summary>將時間轉換為特定時區的時間。</summary>
        <returns>目的地時區中的日期與時間。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 執行轉換，當<xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29>方法適用於作用中的任何調整規則`destinationTimeZone`時區。  
  
 這個多載與不同的其他多載<xref:System.TimeZoneInfo.ConvertTime%2A>方法接受<xref:System.DateTimeOffset>做為其第一個參數的值。 這會識別的日期和時間為 Coordinated Universal Time (UTC) 的位移，而不是為特定時區的時間與日期。 如此一來，`dateTimeOffset`參數不可以模稜兩可的時間或無效的時間表示。  
  
 在轉換`dateTimeOffset`會考量任何目的地時區中的作用中的調整規則的目的地時區，此方法的時間值。  
  
 如果轉換`dateTimeOffset`早於日期和時間值會導致<xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType>或更晚<xref:System.DateTimeOffset.MaxValue?displayProperty=nameWithType>，這個方法會傳回<xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType>或<xref:System.DateTimeOffset.MaxValue?displayProperty=nameWithType>分別。  
  
   
  
## Examples  
 下列範例會將陣列轉換<xref:System.DateTimeOffset>時間中的美國和加拿大東部時區的值。 它說明了<xref:System.TimeZoneInfo.ConvertTime%2A>方法會採用會調整時區考量，因為時區調整在來源和目的地時區中是發生在上午 2:00 在 2010 年 11 月 7日日。  
  
 [!code-csharp[System.TimeZoneInfo.ConvertTime#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timezoneinfo.converttime/cs/converttime2.cs#2)]
 [!code-vb[System.TimeZoneInfo.ConvertTime#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timezoneinfo.converttime/vb/converttime2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationTimeZone" /> 參數的值為 <see langword="null" />。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">在各時區間轉換時間</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertTime">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTime (DateTime dateTime, TimeZoneInfo sourceTimeZone, TimeZoneInfo destinationTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTime(valuetype System.DateTime dateTime, class System.TimeZoneInfo sourceTimeZone, class System.TimeZoneInfo destinationTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTime(DateTime dateTime, TimeZoneInfo ^ sourceTimeZone, TimeZoneInfo ^ destinationTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTime : DateTime * TimeZoneInfo * TimeZoneInfo -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTime (dateTime, sourceTimeZone, destinationTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="sourceTimeZone" Type="System.TimeZoneInfo" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="destinationTimeZone" Type="System.TimeZoneInfo" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTime">要轉換的日期和時間。</param>
        <param name="sourceTimeZone"><paramref name="dateTime" /> 的時區。</param>
        <param name="destinationTimeZone">要轉換 <paramref name="dateTime" /> 的目標時區。</param>
        <summary>將時間從一個時區轉換為另一個時區。</summary>
        <returns>目的地時區中的日期和時間，對應至來源時區中的 <paramref name="dateTime" /> 參數。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 執行轉換，當<xref:System.TimeZoneInfo.ConvertTime%2A>方法適用於作用中的任何調整規則`destinationTimeZone`時區。  
  
 值<xref:System.DateTime.Kind%2A>的屬性`dateTime`參數必須對應於`sourceTimeZone`參數，如下表所示。  
  
|DateTime.Kind 值|sourceTimeZone 值|方法的行為|  
|-------------------------|--------------------------|---------------------|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|等於<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>。|將轉換`dateTime`目的地時區的時間。|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|不等於<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>。|會擲回<xref:System.ArgumentException>。|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|等於<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>。|將轉換`dateTime`目的地時區的時間。|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|不等於<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>。|會擲回<xref:System.ArgumentException>。|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|任何。|將轉換`dateTime`目的地時區的時間。|  
  
 您也可以轉換至或從 Coordinated Universal Time (UTC)，藉由呼叫<xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A>和<xref:System.TimeZoneInfo.ConvertTimeToUtc%2A>方法。  
  
 <xref:System.DateTime.Kind%2A>屬性傳回之<xref:System.DateTime>值會設定為下表所示。  
  
|條件|傳回類型的屬性值|  
|---------------|----------------------------------|  
|`destinationTimeZone` 引數為 <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>。|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
|`destinationTimeZone` 引數為 <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>。|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|  
|所有其他日期和時間值、 來源時區與目的地時區。|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|  
  
 如果值`dateTime`參數是來源時區中的模稜兩可的時間，將它解譯為標準時間。 如果`dateTime`參數是來源時區中的無效時間，這個方法會擲回<xref:System.ArgumentException>。  
  
 如果轉換`dateTime`早於日期和時間值會導致<xref:System.DateTime.MinValue?displayProperty=nameWithType>或更晚<xref:System.DateTime.MaxValue?displayProperty=nameWithType>，這個方法會傳回<xref:System.DateTime.MinValue?displayProperty=nameWithType>或<xref:System.DateTime.MaxValue?displayProperty=nameWithType>分別。  
  
 <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%2CSystem.TimeZoneInfo%29>方法會擲回<xref:System.ArgumentException>例外狀況如果<xref:System.DateTime.Kind%2A?displayProperty=nameWithType>屬性`dateTime`引數<xref:System.DateTimeKind.Local?displayProperty=nameWithType>但`sourceTimeZone`引數不是<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>。 若要判斷是否為來源時區的當地時區標準時間，方法會測試參考是否相等，而不是測試使用的實值相等<xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29>方法。 請注意，<xref:System.TimeZoneInfo>物件，代表當地時區和，藉由呼叫擷取<xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A>方法就不需要具有參考相等<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>。 此外，<xref:System.TimeZoneInfo>物件，代表本機或通用的時區和，藉由逐一查看所傳回的集合擷取<xref:System.TimeZoneInfo.GetSystemTimeZones%2A>方法就不需要具有參考相等<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>或<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>。 或者，您可以呼叫<xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%28System.DateTime%2CSystem.String%2CSystem.String%29>方法。  
  
   
  
## Examples  
 下列範例示範如何將<xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%2CSystem.TimeZoneInfo%29>方法，將夏威夷標準時間轉換為當地時間。  
  
 [!code-csharp[System.TimeZone2.Concepts#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Concepts/CS/TimeZone2Concepts.cs#9)]
 [!code-vb[System.TimeZone2.Concepts#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Concepts/VB/TimeZone2Concepts.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="dateTime" /> 參數的 <see cref="P:System.DateTime.Kind" /> 屬性為 <see cref="F:System.DateTimeKind.Local" />，但 <paramref name="sourceTimeZone" /> 參數不等於 <see cref="F:System.DateTimeKind.Local" />。  
  
-或- 
<paramref name="dateTime" /> 參數的 <see cref="P:System.DateTime.Kind" /> 屬性為 <see cref="F:System.DateTimeKind.Utc" />，但 <paramref name="sourceTimeZone" /> 參數不等於 <see cref="P:System.TimeZoneInfo.Utc" />。  
  
-或- 
<paramref name="dateTime" /> 參數是無效的時間 (換句話說，它代表了因時區的調整規則而不存在的時間)。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="sourceTimeZone" /> 參數為 <see langword="null" />。  
  
-或- 
<paramref name="destinationTimeZone" /> 參數為 <see langword="null" />。</exception>
        <altmember cref="Overload:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId" />
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">在各時區間轉換時間</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ConvertTimeBySystemTimeZoneId">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>根據時區識別項將時間轉換為另一時區的時間。</summary>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">在各時區間轉換時間</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ConvertTimeBySystemTimeZoneId">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeBySystemTimeZoneId (DateTime dateTime, string destinationTimeZoneId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeBySystemTimeZoneId(valuetype System.DateTime dateTime, string destinationTimeZoneId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(System.DateTime,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeBySystemTimeZoneId(DateTime dateTime, System::String ^ destinationTimeZoneId);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeBySystemTimeZoneId : DateTime * string -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId (dateTime, destinationTimeZoneId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="destinationTimeZoneId" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="dateTime">要轉換的日期和時間。</param>
        <param name="destinationTimeZoneId">目的地時區的識別項。</param>
        <summary>根據時區的識別項將時間轉換為另一時區的時間。</summary>
        <returns>目的地時區中的日期與時間。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 執行轉換，當<xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%2A>方法適用於作用中的任何調整規則`destinationTimeZoneId`時區。  
  
 這個多載會呼叫基本相同<xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%29>方法，但是它可讓您指定目的地時區，依其識別項，而不是由物件參考。 您必須將時間轉換而未擷取對應至它的時區物件，並不需要知道轉換後的時間是標準或日光節約時間時，這個方法是最有用。  
  
 <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%28System.DateTime%2CSystem.String%29>方法會判斷來源時區的值從`dateTime`參數的<xref:System.DateTime.Kind%2A>屬性，如下表所示。  
  
|Kind 屬性值|來源時區|方法的行為|  
|-------------------------|----------------------|---------------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Local%2A>|將當地時間轉換成時間`destinationTimeZone`。|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Utc%2A>|將轉換為 Coordinated Universal Time (UTC) 時間`destinationTimeZone`。|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|假設為<xref:System.TimeZoneInfo.Local%2A>。|將當地時間轉換成時間`destinationTimeZone`。|  
  
 <xref:System.DateTime.Kind%2A>屬性傳回之<xref:System.DateTime>值會設定為下表所示。  
  
|條件|傳回類型的屬性值|  
|---------------|----------------------------------|  
|`destinationTimeZone` 為 `TimeZoneInfo.Utc.Id`。|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
|任何其他`destinationTimeZone`值。|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|  
  
 如果值`dateTime`參數是模稜兩可的當地時間，將它解譯為標準時間。 如果`dateTime`參數是無效的當地時間，這個方法會擲回<xref:System.ArgumentException>。  
  
 如果轉換`dateTime`早於日期和時間值會導致<xref:System.DateTime.MinValue?displayProperty=nameWithType>或更晚<xref:System.DateTime.MaxValue?displayProperty=nameWithType>，這個方法會傳回<xref:System.DateTime.MinValue?displayProperty=nameWithType>或<xref:System.DateTime.MaxValue?displayProperty=nameWithType>分別。  
  
 這個方法會擷取有關所指定識別項的時區`destinationTimeZoneId`從 Windows 系統與登錄中的參數[ICU 文件庫](http://userguide.icu-project.org/datetime/timezone)Linux 和 macOS 上。 無法擷取您建立使用的時區物件<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A>方法。 `destinationTimeZoneId`參數必須確實對應到時區的識別項的長度，但不是在案例中，成功比對發生的事件; 也就是比較`destinationTimeZoneId`時區識別項不區分大小寫。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationTimeZoneId" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidTimeZoneException">找到時區識別項，但登錄資料已損毀。</exception>
        <exception cref="T:System.Security.SecurityException">處理序沒有必要權限可讀取包含時區資訊的登錄機碼。</exception>
        <exception cref="T:System.TimeZoneNotFoundException">在本機系統上找不到 <paramref name="destinationTimeZoneId" /> 識別項。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">在各時區間轉換時間</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertTimeBySystemTimeZoneId">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ConvertTimeBySystemTimeZoneId (DateTimeOffset dateTimeOffset, string destinationTimeZoneId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ConvertTimeBySystemTimeZoneId(valuetype System.DateTimeOffset dateTimeOffset, string destinationTimeZoneId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(System.DateTimeOffset,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset ConvertTimeBySystemTimeZoneId(DateTimeOffset dateTimeOffset, System::String ^ destinationTimeZoneId);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeBySystemTimeZoneId : DateTimeOffset * string -&gt; DateTimeOffset" Usage="System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId (dateTimeOffset, destinationTimeZoneId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="destinationTimeZoneId" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">要轉換的日期和時間。</param>
        <param name="destinationTimeZoneId">目的地時區的識別項。</param>
        <summary>根據時區的識別項將時間轉換為另一時區的時間。</summary>
        <returns>目的地時區中的日期與時間。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 執行轉換，當<xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%2A>方法適用於作用中的任何調整規則`destinationTimeZoneId`時區。  
  
 這個多載等同於呼叫<xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%29>方法，但是它可讓您指定目的地時區，依其識別項，而不是由物件參考。 您必須將時間轉換而未擷取對應至它的時區物件，並不需要知道轉換後的時間是標準或日光節約時間時，這個方法是最有用。  
  
 因為`dateTimeOffset`參數代表的日期和時間當時的位移與 Coordinated Universal Time (UTC)，它不能代表模稜兩可的時間無效。  
  
 這個方法會擷取所指定識別項的時區`destinationTimeZoneId`從 Windows 系統與登錄中的參數[ICU 文件庫](http://userguide.icu-project.org/datetime/timezone)Linux 和 macOS 上。 無法擷取您建立使用的時區物件<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A>方法。 `destinationTimeZoneId`參數必須確實對應到時區的識別項的長度，但不是在案例中，成功比對發生的事件; 也就是比較`destinationTimeZoneId`時區識別項不區分大小寫。  
  
 在轉換`dateTimeOffset`會考量任何目的地時區中的作用中的調整規則的目的地時區，此方法的時間值。  
  
 如果轉換`dateTimeOffset`早於日期和時間值會導致<xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType>或更晚<xref:System.DateTimeOffset.MaxValue?displayProperty=nameWithType>，這個方法會傳回<xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType>或<xref:System.DateTimeOffset.MaxValue?displayProperty=nameWithType>分別。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationTimeZoneId" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidTimeZoneException">找到時區識別項，但登錄資料已損毀。</exception>
        <exception cref="T:System.Security.SecurityException">處理序沒有必要權限可讀取包含時區資訊的登錄機碼。</exception>
        <exception cref="T:System.TimeZoneNotFoundException">在本機系統上找不到 <paramref name="destinationTimeZoneId" /> 識別項。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">在各時區間轉換時間</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertTimeBySystemTimeZoneId">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeBySystemTimeZoneId (DateTime dateTime, string sourceTimeZoneId, string destinationTimeZoneId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeBySystemTimeZoneId(valuetype System.DateTime dateTime, string sourceTimeZoneId, string destinationTimeZoneId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(System.DateTime,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeBySystemTimeZoneId(DateTime dateTime, System::String ^ sourceTimeZoneId, System::String ^ destinationTimeZoneId);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeBySystemTimeZoneId : DateTime * string * string -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId (dateTime, sourceTimeZoneId, destinationTimeZoneId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="sourceTimeZoneId" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="destinationTimeZoneId" Type="System.String" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="dateTime">要轉換的日期和時間。</param>
        <param name="sourceTimeZoneId">來源時區的識別項。</param>
        <param name="destinationTimeZoneId">目的地時區的識別項。</param>
        <summary>根據時區識別項將時間從一個時區轉換為另一個時區。</summary>
        <returns>目的地時區中的日期和時間，對應至來源時區中的 <paramref name="dateTime" /> 參數。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 執行轉換，當<xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%2A>方法適用於作用中的任何調整規則`destinationTimeZoneId`時區。  
  
 雖然類似於<xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType>方法，您可以使用<xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%28System.DateTime%2CSystem.String%2CSystem.String%29?displayProperty=nameWithType>若要指定來源和目的地時區使用其識別碼，而不是其<xref:System.TimeZoneInfo>物件。 您必須將時間轉換而未擷取對應至它的時區物件，並不需要知道轉換後的時間是標準或日光節約時間時，這個方法是最有用。  
  
 這個方法會擷取其識別碼為的時區`sourceTimeZoneId`並`destinationTimeZoneId`從 Windows 系統與登錄中的參數[ICU 文件庫](http://userguide.icu-project.org/datetime/timezone)Linux 和 macOS 上。 無法擷取您所建立使用的時區物件<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A>方法。  
  
 值<xref:System.DateTime.Kind%2A>的屬性`dateTime`參數必須對應於`sourceTimeZoneId`參數，如下表所示。  
  
|DateTime.Kind 值|sourceTimeZone 值|方法的行為|  
|-------------------------|--------------------------|---------------------|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|等於`TimeZoneInfo.Utc.Id`。|將轉換`dateTime`目的地時區的時間。|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|不等於`TimeZoneInfo.Utc.Id`。|會擲回<xref:System.ArgumentException>。|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|等於`TimeZoneInfo.Local.Id`。|將轉換`dateTime`目的地時區的時間。|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|不等於`TimeZoneInfo.Local.Id`。|會擲回<xref:System.ArgumentException>。|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|任何。|將轉換`dateTime`目的地時區的時間。|  
  
 因為它會呼叫依賴<xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A>方法中，<xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%2A>方法會執行不區分大小寫的搜尋，以尋找對應至時區`sourceTimeZoneId`和`destinationTimeZoneId`。  
  
 如果值`dateTime`參數是來源時區中的模稜兩可的時間，將它解譯為標準時間。 如果`dateTime`參數是來源時區中的無效時間，這個方法會擲回<xref:System.ArgumentException>。  
  
 <xref:System.DateTime.Kind%2A>屬性傳回之<xref:System.DateTime>值設定為<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>除非目的地時區是國際標準時間 (UTC)，在此情況下它設定為<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>。  
  
   
  
## Examples  
 下列範例會使用<xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%28System.DateTime%2CSystem.String%2CSystem.String%29?displayProperty=nameWithType>方法，以顯示本機系統時間的世界的八個城市中對應的時間。  
  
 [!code-csharp[System.TimeZone2.Conversions#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Conversions/cs/System.TimeZone2.Conversions.cs#3)]
 [!code-vb[System.TimeZone2.Conversions#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Conversions/vb/System.TimeZone2.Conversions.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="dateTime" /> 參數的 <see cref="P:System.DateTime.Kind" /> 屬性未對應至來源時區。  
  
-或- 
 <paramref name="dateTime" /> 是來源時區中的無效時間。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="sourceTimeZoneId" /> 為 <see langword="null" />。  
  
-或- 
 <paramref name="destinationTimeZoneId" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidTimeZoneException">找到時區識別項，但登錄資料已損毀。</exception>
        <exception cref="T:System.Security.SecurityException">使用者沒有必要權限可讀取保留時區資料的登錄機碼。</exception>
        <exception cref="T:System.TimeZoneNotFoundException">在本機系統上找不到 <paramref name="sourceTimeZoneId" /> 識別項。  
  
-或- 
在本機系統上找不到 <paramref name="destinationTimeZoneId" /> 識別項。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">在各時區間轉換時間</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertTimeFromUtc">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeFromUtc (DateTime dateTime, TimeZoneInfo destinationTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeFromUtc(valuetype System.DateTime dateTime, class System.TimeZoneInfo destinationTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeFromUtc(System.DateTime,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeFromUtc(DateTime dateTime, TimeZoneInfo ^ destinationTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeFromUtc : DateTime * TimeZoneInfo -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeFromUtc (dateTime, destinationTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="destinationTimeZone" Type="System.TimeZoneInfo" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="dateTime">Coordinated Universal Time (UTC)。</param>
        <param name="destinationTimeZone">要轉換 <paramref name="dateTime" /> 的目標時區。</param>
        <summary>將 Coordinated Universal Time (UTC) 轉換為指定時區的時間。</summary>
        <returns>目的地時區中的日期與時間。 如果 <paramref name="destinationTimeZone" /> 為 <see cref="P:System.DateTime.Kind" />，其 <see cref="F:System.DateTimeKind.Utc" /> 屬性為 <see cref="P:System.TimeZoneInfo.Utc" />，否則其 <see cref="P:System.DateTime.Kind" /> 屬性為 <see cref="F:System.DateTimeKind.Unspecified" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 執行轉換，當<xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A>方法適用於作用中的任何調整規則`destinationTimeZone`時區。  
  
 這個方法的精確的行為取決於值<xref:System.DateTime.Kind%2A>屬性`dateTime`參數，如下表所示。  
  
|DateTime.Kind 屬性|轉換|  
|----------------------------|----------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|會擲回<xref:System.ArgumentException>。|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> 或 <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|將國際標準時間 (UTC)。|  
  
 如果轉換`dateTime`早於日期和時間值會導致<xref:System.DateTime.MinValue?displayProperty=nameWithType>或更晚<xref:System.DateTime.MaxValue?displayProperty=nameWithType>，這個方法會傳回<xref:System.DateTime.MinValue?displayProperty=nameWithType>或<xref:System.DateTime.MaxValue?displayProperty=nameWithType>分別。  
  
   
  
## Examples  
 下列範例會將中部時間的 Coordinated Universal Time (UTC)。  
  
 [!code-csharp[System.TimeZone2.Concepts#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Concepts/CS/TimeZone2Concepts.cs#8)]
 [!code-vb[System.TimeZone2.Concepts#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Concepts/VB/TimeZone2Concepts.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="dateTime" /> 的 <see cref="P:System.DateTime.Kind" /> 屬性為 <see cref="F:System.DateTimeKind.Local" />。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationTimeZone" /> 為 <see langword="null" />。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">在各時區間轉換時間</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ConvertTimeToUtc">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將日期和時間轉換為國際標準時間 (UTC)。</summary>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">在各時區間轉換時間</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ConvertTimeToUtc">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeToUtc (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeToUtc(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeToUtc(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeToUtc : DateTime -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeToUtc dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="dateTime">要轉換的日期和時間。</param>
        <summary>將指定的日期和時間轉換為 Coordinated Universal Time (UTC)。</summary>
        <returns>對應至 <paramref name="dateTime" /> 參數的國際標準時間 (UTC)。 <see cref="T:System.DateTime" /> 值的 <see cref="P:System.DateTime.Kind" /> 屬性始終設定為 <see cref="F:System.DateTimeKind.Utc" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 執行的確切轉換取決於 windows 7<xref:System.DateTime.Kind%2A>屬性`dateTime`參數，如下表所示。  
  
|DateTime.Kind 屬性|轉換|  
|----------------------------|----------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|從當地時間轉換為 Coordinated Universal Time (UTC)。|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|假設`dateTime`為本地時間，將從當地時間轉換為 UTC。|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|傳回`dateTime`不變。|  
  
 如果`dateTime`對應為模稜兩可的當地時間，此方法會假設它是標準的當地時間。 如果`dateTime`對應到無效的當地時間，則方法會擲回<xref:System.ArgumentException>。  
  
> [!NOTE]
>  如果目前電腦的本機時區包含多個調整規則，此多載<xref:System.TimeZoneInfo.ConvertTimeToUtc%2A>方法傳回不同的結果<xref:System.TimeZone.ToUniversalTime%2A?displayProperty=nameWithType>和<xref:System.DateTime.ToUniversalTime%2A?displayProperty=nameWithType>方法。 <xref:System.TimeZone.ToUniversalTime%2A?displayProperty=nameWithType> 一律會套用目前的調整規則的時區轉換成是否`dateTime`位於其日期範圍內。 和上執行時[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]，<xref:System.DateTime.ToUniversalTime%2A?displayProperty=nameWithType>也適用於目前的調整規則的時區轉換，zda bude`dateTime`位於其日期範圍內。  
  
 如果 UTC 對應項`dateTime`早於<xref:System.DateTime.MinValue?displayProperty=nameWithType>或更新版本的<xref:System.DateTime.MaxValue?displayProperty=nameWithType>，這個方法會傳回<xref:System.DateTime.MinValue>或<xref:System.DateTime.MaxValue>分別。  
  
   
  
## Examples  
 下列範例說明的轉換時間值的<xref:System.DateTime.Kind%2A>屬性是<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>， <xref:System.DateTimeKind.Local?displayProperty=nameWithType>，和<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>分別。 它也會說明轉換的模稜兩可和無效的次數。  
  
 [!code-csharp[System.TimeZone2.Conversions#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Conversions/cs/System.TimeZone2.Conversions.cs#1)]
 [!code-vb[System.TimeZone2.Conversions#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Conversions/vb/System.TimeZone2.Conversions.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><see langword="TimeZoneInfo.Local.IsInvalidDateTime(" />
          <paramref name="dateTime" />
          <see langword=")" /> 會傳回 <see langword="true" />。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">在各時區間轉換時間</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertTimeToUtc">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeToUtc (DateTime dateTime, TimeZoneInfo sourceTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeToUtc(valuetype System.DateTime dateTime, class System.TimeZoneInfo sourceTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeToUtc(DateTime dateTime, TimeZoneInfo ^ sourceTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeToUtc : DateTime * TimeZoneInfo -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeToUtc (dateTime, sourceTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="sourceTimeZone" Type="System.TimeZoneInfo" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="dateTime">要轉換的日期和時間。</param>
        <param name="sourceTimeZone"><paramref name="dateTime" /> 的時區。</param>
        <summary>將指定時區的時間轉換為國際標準時間 (UTC)。</summary>
        <returns>對應至 <paramref name="dateTime" /> 參數的國際標準時間 (UTC)。 <see cref="T:System.DateTime" /> 物件的 <see cref="P:System.DateTime.Kind" /> 屬性始終設定為 <see cref="F:System.DateTimeKind.Utc" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.DateTime.Kind%2A>的屬性`dateTime`參數等於<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>並`sourceTimeZone`參數等於<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>，這個方法會傳回`dateTime`而不執行任何轉換。  
  
 如果`dateTime`對應模稜兩可的時間，這個方法會假設它是來源時區標準時間。 如果`dateTime`對應到無效的時間，這個方法會擲回<xref:System.ArgumentException>。  
  
 如果的 Coordinated Universal Time (UTC) 對應項`dateTime`早於<xref:System.DateTime.MinValue?displayProperty=nameWithType>或更新版本的<xref:System.DateTime.MaxValue?displayProperty=nameWithType>，這個方法會傳回<xref:System.DateTime.MinValue>或<xref:System.DateTime.MaxValue>分別。  
  
   
  
## Examples  
 下列範例會擷取目前的日期，從本機系統並將它轉換為 Coordinated Universal Time (UTC)，然後將它轉換為東京標準時間中，並最後將從東京標準時間轉換回為 UTC。 請注意，兩個的 UTC 時間相同。  
  
 [!code-csharp[System.TimeZone2.Conversions#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Conversions/cs/convertdt2.cs#2)]
 [!code-vb[System.TimeZone2.Conversions#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Conversions/vb/convertdt2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="dateTime" />.<see langword="Kind" /> 為 <see cref="F:System.DateTimeKind.Utc" /> 且 <paramref name="sourceTimeZone" /> 不等於 <see cref="P:System.TimeZoneInfo.Utc" />。  
  
-或- 
 <paramref name="dateTime" />.<see langword="Kind" /> 為 <see cref="F:System.DateTimeKind.Local" /> 且 <paramref name="sourceTimeZone" /> 不等於 <see cref="P:System.TimeZoneInfo.Local" />。  
  
-或- 
 <paramref name="sourceTimeZone" /><see langword=".IsInvalidDateTime(" /><paramref name="dateTime" /><see langword=")" /> 傳回 <see langword="true" />。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="sourceTimeZone" /> 為 <see langword="null" />。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">在各時區間轉換時間</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateCustomTimeZone">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>定義在本機電腦上找不到的時區。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateCustomTimeZone">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo CreateCustomTimeZone (string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo CreateCustomTimeZone(string id, valuetype System.TimeSpan baseUtcOffset, string displayName, string standardDisplayName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateCustomTimeZone (id As String, baseUtcOffset As TimeSpan, displayName As String, standardDisplayName As String) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ CreateCustomTimeZone(System::String ^ id, TimeSpan baseUtcOffset, System::String ^ displayName, System::String ^ standardDisplayName);" />
      <MemberSignature Language="F#" Value="static member CreateCustomTimeZone : string * TimeSpan * string * string -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.CreateCustomTimeZone (id, baseUtcOffset, displayName, standardDisplayName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="baseUtcOffset" Type="System.TimeSpan" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="displayName" Type="System.String" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="standardDisplayName" Type="System.String" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="id">時區的識別項。</param>
        <param name="baseUtcOffset">物件，代表這個時區與國際標準時間 (UTC) 的時差。</param>
        <param name="displayName">新時區的顯示名稱。</param>
        <param name="standardDisplayName">新時區標準時間的名稱。</param>
        <summary>建立具有指定識別項的自訂時區、國際標準時間 (UTC) 的位移、顯示名稱和標準時間顯示名稱。</summary>
        <returns>新的時區。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個多載<xref:System.TimeZoneInfo.CreateCustomTimeZone%28System.String%2CSystem.TimeSpan%2CSystem.String%2CSystem.String%29>方法適合用來建立具有不會調整 （也就是不支援日光節約時間的時間區域） 的時區。 若要定義包括調整日光節約時間的時區，請使用<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType>或<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType>方法。  
  
 下表顯示提供給參數之間的關聯性<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType>方法和屬性<xref:System.TimeZoneInfo>方法呼叫所傳回的物件。  
  
|CreateCustomTimeZone 參數|TimeZoneInfo 屬性|  
|------------------------------------|---------------------------|  
|`id`|<xref:System.TimeZoneInfo.Id%2A>|  
|`baseUtcOffset`|<xref:System.TimeZoneInfo.BaseUtcOffset%2A>|  
|`displayName`|<xref:System.TimeZoneInfo.DisplayName%2A>|  
|`standardDisplayName`|<xref:System.TimeZoneInfo.StandardName%2A>|  
  
 一般而言，時區標準時間名稱和其識別碼都相同。 不過，時區的識別項的長度不可超過 32 個字元。 將字串傳遞至`displayName`參數會遵循相當標準的格式。 顯示名稱的第一個部分是國際標準時間，會以縮寫 GMT （格林威治標準時間），以括弧括住的時區的基底位移。 這被後面接著識別時區本身，或一或多個城市、 地區或國家/地區的時區，或兩者的字串。 例如：  
  
```  
(GMT+02:00) Athens, Beirut, Istanbul, Minsk  
(GMT-02:00) Mid-Atlantic  
(GMT-07:00) Mountain Time (US & Canada)  
```  
  
   
  
## Examples  
 下列範例會建立自訂的時區，茂遜，荷美灣南極大陸的區域。 然後，它會顯示將當地時間轉換成新的時區時間的結果。  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#1)]
 [!code-vb[System.TimeZone2.CreateTimeZone#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="id" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="id" /> 參數是空字串 ("")。  
  
-或- 
<paramref name="baseUtcOffset" /> 參數不代表整數分鐘數。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="baseUtcOffset" /> 參數大於 14 小時或小於 -14 小時。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a6af8647-7893-4f29-95a9-d94c65a6e8dd">HOW TO：建立沒有調整規則的時區</related>
      </Docs>
    </Member>
    <Member MemberName="CreateCustomTimeZone">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo CreateCustomTimeZone (string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, TimeZoneInfo.AdjustmentRule[] adjustmentRules);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo CreateCustomTimeZone(string id, valuetype System.TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, class System.TimeZoneInfo/AdjustmentRule[] adjustmentRules) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String,System.String,System.TimeZoneInfo.AdjustmentRule[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateCustomTimeZone (id As String, baseUtcOffset As TimeSpan, displayName As String, standardDisplayName As String, daylightDisplayName As String, adjustmentRules As TimeZoneInfo.AdjustmentRule()) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ CreateCustomTimeZone(System::String ^ id, TimeSpan baseUtcOffset, System::String ^ displayName, System::String ^ standardDisplayName, System::String ^ daylightDisplayName, cli::array &lt;TimeZoneInfo::AdjustmentRule ^&gt; ^ adjustmentRules);" />
      <MemberSignature Language="F#" Value="static member CreateCustomTimeZone : string * TimeSpan * string * string * string * TimeZoneInfo.AdjustmentRule[] -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.CreateCustomTimeZone (id, baseUtcOffset, displayName, standardDisplayName, daylightDisplayName, adjustmentRules)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="baseUtcOffset" Type="System.TimeSpan" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="displayName" Type="System.String" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="standardDisplayName" Type="System.String" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="daylightDisplayName" Type="System.String" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="adjustmentRules" Type="System.TimeZoneInfo+AdjustmentRule[]" Index="5" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="id">時區的識別項。</param>
        <param name="baseUtcOffset">物件，代表這個時區與國際標準時間 (UTC) 的時差。</param>
        <param name="displayName">新時區的顯示名稱。</param>
        <param name="standardDisplayName">新時區的標準時間名稱。</param>
        <param name="daylightDisplayName">新時區的日光節約時間名稱。</param>
        <param name="adjustmentRules">針對特定期間擴大基底 UTC 位移的陣列。</param>
        <summary>以指定的識別項、國際標準時間 (UTC) 的位移、顯示名稱、標準時間名稱、日光節約時間名稱和日光節約時間規則，建立自訂時區。</summary>
        <returns>代表新時區的 <see cref="T:System.TimeZoneInfo" /> 物件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個多載<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType>方法適合用來建立支援日光節約時間的時區。 若要定義不支援日光節約時間的時區，請使用<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType>或<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType>方法。  
  
 下表顯示提供給參數之間的關聯性<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType>方法和成員<xref:System.TimeZoneInfo>方法呼叫所傳回的物件。  
  
|CreateCustomTimeZone 參數|TimeZoneInfo 成員|  
|------------------------------------|-------------------------|  
|`id`|<xref:System.TimeZoneInfo.Id%2A>|  
|`baseUtcOffset`|<xref:System.TimeZoneInfo.BaseUtcOffset%2A>|  
|`displayName`|<xref:System.TimeZoneInfo.DisplayName%2A>|  
|`standardDisplayName`|<xref:System.TimeZoneInfo.StandardName%2A>|  
|`daylightDisplayName`|<xref:System.TimeZoneInfo.DaylightName%2A>|  
|`adjustmentRules`|陣列<xref:System.TimeZoneInfo.AdjustmentRule?displayProperty=nameWithType>所傳回的物件<xref:System.TimeZoneInfo.GetAdjustmentRules%2A>方法。|  
  
 一般而言，時區標準時間名稱和其識別碼都相同。 不過，時區的識別項的長度不可超過 32 個字元。 將字串傳遞至`displayName`參數會遵循相當標準的格式。 顯示名稱的第一個部分是國際標準時間，會以縮寫 GMT （格林威治標準時間），以括弧括住的時區的基底位移。 這被後面接著識別時區本身，或一或多個城市、 地區或國家/地區的時區，或兩者的字串。 例如：  
  
```  
(GMT+02:00) Athens, Beirut, Istanbul, Minsk  
(GMT-02:00) Mid-Atlantic  
(GMT-07:00) Mountain Time (US & Canada)  
```  
  
 `baseUtcOffset`參數定義的自訂時區的位移與 Coordinated Universal Time (UTC) 時區的調整規則的所有。 換句話說，<xref:System.TimeZoneInfo>物件模型假設與 UTC 的時區位移的時區，生命週期的常數，且有獨立於特定的調整規則。 為了反映已變更其相對於 UTC 的時區，您必須建立新的時區物件。  
  
 透過下列方式定義的時區調整規則：  
  
1.  呼叫<xref:System.TimeZoneInfo.TransitionTime.CreateFloatingDateRule%2A>或<xref:System.TimeZoneInfo.TransitionTime.CreateFixedDateRule%2A>方法來定義開始和結束轉換每個調整規則的時間。  
  
2.  呼叫<xref:System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule%2A>針對每個調整規則的方法。  
  
3.  將調整規則指派給陣列可以當做傳遞`adjustmentRules`參數。  
  
   
  
## Examples  
 下列範例會建立自訂的時區，帕麥站和爾島南極大陸。 然後它會將當地時間轉換為新時區的時間，並顯示結果。  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#2)]
 [!code-vb[System.TimeZone2.CreateTimeZone#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="id" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="id" /> 參數是空字串 ("")。  
  
-或- 
<paramref name="baseUtcOffset" /> 參數不代表整數分鐘數。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="baseUtcOffset" /> 參數大於 14 小時或小於 -14 小時。</exception>
        <exception cref="T:System.InvalidTimeZoneException"><paramref name="adjustmentRules" /> 參數中指定的調整規則重疊。  
  
-或- 
<paramref name="adjustmentRules" /> 參數中指定的調整規則未依照時間排序。  
  
-或- 
<paramref name="adjustmentRules" /> 中的一個或多個項目為 <see langword="null" />。  
  
-或- 
一個日期可以套用多項調整規則。  
  
-或- 
<paramref name="adjustmentRules" /> 陣列中一個或多個物件的 <paramref name="baseUtcOffset" /> 參數和 <see cref="P:System.TimeZoneInfo.AdjustmentRule.DaylightDelta" /> 值總和大於 14 小時或小於 -14 小時。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/c52ef192-13a9-435f-8015-3b12eae8c47c">HOW TO：建立有調整規則的時區</related>
      </Docs>
    </Member>
    <Member MemberName="CreateCustomTimeZone">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo CreateCustomTimeZone (string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, TimeZoneInfo.AdjustmentRule[] adjustmentRules, bool disableDaylightSavingTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo CreateCustomTimeZone(string id, valuetype System.TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, class System.TimeZoneInfo/AdjustmentRule[] adjustmentRules, bool disableDaylightSavingTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String,System.String,System.TimeZoneInfo.AdjustmentRule[],System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateCustomTimeZone (id As String, baseUtcOffset As TimeSpan, displayName As String, standardDisplayName As String, daylightDisplayName As String, adjustmentRules As TimeZoneInfo.AdjustmentRule(), disableDaylightSavingTime As Boolean) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ CreateCustomTimeZone(System::String ^ id, TimeSpan baseUtcOffset, System::String ^ displayName, System::String ^ standardDisplayName, System::String ^ daylightDisplayName, cli::array &lt;TimeZoneInfo::AdjustmentRule ^&gt; ^ adjustmentRules, bool disableDaylightSavingTime);" />
      <MemberSignature Language="F#" Value="static member CreateCustomTimeZone : string * TimeSpan * string * string * string * TimeZoneInfo.AdjustmentRule[] * bool -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.CreateCustomTimeZone (id, baseUtcOffset, displayName, standardDisplayName, daylightDisplayName, adjustmentRules, disableDaylightSavingTime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="baseUtcOffset" Type="System.TimeSpan" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="displayName" Type="System.String" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="standardDisplayName" Type="System.String" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="daylightDisplayName" Type="System.String" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="adjustmentRules" Type="System.TimeZoneInfo+AdjustmentRule[]" Index="5" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="disableDaylightSavingTime" Type="System.Boolean" Index="6" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="id">時區的識別項。</param>
        <param name="baseUtcOffset"><see cref="T:System.TimeSpan" /> 物件，代表這個時區與國際標準時間 (UTC) 的時差。</param>
        <param name="displayName">新時區的顯示名稱。</param>
        <param name="standardDisplayName">新時區的標準時間名稱。</param>
        <param name="daylightDisplayName">新時區的日光節約時間名稱。</param>
        <param name="adjustmentRules">擴大特定期間基底 UTC 位移的 <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> 物件陣列。</param>
        <param name="disableDaylightSavingTime">若為 <see langword="true" /> 則捨棄任何存在於 <paramref name="adjustmentRules" /> 中具有新物件的日光節約時間相關資訊，否則為 <see langword="false" />。</param>
        <summary>以指定的識別項、國際標準時間 (UTC) 的位移、顯示名稱、標準時間名稱、日光節約時間名稱、日光節約時間規則，以及表示傳回的物件是否反映日光節約時間資訊的值，建立自訂時區。</summary>
        <returns>新的時區。 如果 <paramref name="disableDaylightSavingTime" /> 參數為 <see langword="true" />，則傳回的物件不含日光節約時間資料。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用的這個多載<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType>方法，以建立在執行階段條件可以決定其支援日光節約時間的自訂時區。  
  
 下表顯示提供給參數之間的關聯性<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType>方法和成員<xref:System.TimeZoneInfo>方法呼叫所傳回的物件。  
  
|CreateCustomTimeZone 參數|TimeZoneInfo 屬性|  
|------------------------------------|---------------------------|  
|`id`|<xref:System.TimeZoneInfo.Id%2A>|  
|`baseUtcOffset`|<xref:System.TimeZoneInfo.BaseUtcOffset%2A>|  
|`displayName`|<xref:System.TimeZoneInfo.DisplayName%2A>|  
|`standardDisplayName`|<xref:System.TimeZoneInfo.StandardName%2A>|  
|`daylightDisplayName`|<xref:System.TimeZoneInfo.DaylightName%2A> 如果`disableDaylightSavingTime`是`false`;<xref:System.String.Empty?displayProperty=nameWithType>如果`disableDaylightSavingTime`是`true`。|  
|`adjustmentRules`|陣列<xref:System.TimeZoneInfo.AdjustmentRule>所傳回的物件<xref:System.TimeZoneInfo.GetAdjustmentRules%2A>方法如果`disableDaylightSavingTime`是`false`; 所傳回的空陣列<xref:System.TimeZoneInfo.GetAdjustmentRules%2A>方法如果`disableDaylightSavingTime`是`true`。|  
|`disableDaylightSavingTime`|不<xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A>。|  
  
 一般而言，時區標準時間名稱和其識別碼都相同。 不過，時區的識別項的長度不可超過 32 個字元。 將字串傳遞至`displayName`參數會遵循相當標準的格式。 顯示名稱的第一個部分是國際標準時間，會以縮寫 GMT （格林威治標準時間），以括弧括住的時區的基底位移。 這被後面接著識別時區本身，或一或多個城市、 地區或國家/地區的時區，或兩者的字串。 例如：  
  
```  
(GMT+02:00) Athens, Beirut, Istanbul, Minsk  
(GMT-02:00) Mid-Atlantic  
(GMT-07:00) Mountain Time (US & Canada)  
```  
  
 透過下列方式定義的時區調整規則：  
  
1.  呼叫<xref:System.TimeZoneInfo.TransitionTime.CreateFloatingDateRule%2A>或<xref:System.TimeZoneInfo.TransitionTime.CreateFixedDateRule%2A>方法來定義開始和結束每個調整規則的轉換規則。  
  
2.  呼叫<xref:System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule%2A>針對每個調整規則的方法。  
  
3.  將調整規則指派給陣列可以當做傳遞`adjustmentRules`參數。  
  
 如果`disableDaylightSavingTime`參數是`false`，此方法的作業相當於<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType>多載。 如果`disableDaylightSavingTime`已`true`，傳回的物件包含沒有調整規則和<xref:System.TimeZoneInfo.DaylightName%2A>屬性且值為空字串。  
  
   
  
## Examples  
 下列範例會建立自訂的時區，帕麥站和爾島南極大陸。 它會設定`disableDaylightSavingTime`的呼叫中的參數<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType>方法，以`true`。 然後，它會顯示新時區的日光節約時間名稱，如果有的話，並確認新的時區具有任何日光節約時間資訊的調整規則的數目。  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#3)]
 [!code-vb[System.TimeZone2.CreateTimeZone#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="id" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="id" /> 參數是空字串 ("")。  
  
-或- 
<paramref name="baseUtcOffset" /> 參數不代表整數分鐘數。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="baseUtcOffset" /> 參數大於 14 小時或小於 -14 小時。</exception>
        <exception cref="T:System.InvalidTimeZoneException"><paramref name="adjustmentRules" /> 參數中指定的調整規則重疊。  
  
-或- 
<paramref name="adjustmentRules" /> 參數中指定的調整規則未依照時間排序。  
  
-或- 
<paramref name="adjustmentRules" /> 中的一個或多個項目為 <see langword="null" />。  
  
-或- 
一個日期可以套用多項調整規則。  
  
-或- 
<paramref name="adjustmentRules" /> 陣列中一個或多個物件的 <paramref name="baseUtcOffset" /> 參數和 <see cref="P:System.TimeZoneInfo.AdjustmentRule.DaylightDelta" /> 值總和大於 14 小時或小於 -14 小時。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a6af8647-7893-4f29-95a9-d94c65a6e8dd">HOW TO：建立沒有調整規則的時區</related>
        <related type="Article" href="https://msdn.microsoft.com/library/c52ef192-13a9-435f-8015-3b12eae8c47c">HOW TO：建立有調整規則的時區</related>
      </Docs>
    </Member>
    <Member MemberName="DaylightName">
      <MemberSignature Language="C#" Value="public string DaylightName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DaylightName" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.DaylightName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DaylightName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DaylightName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DaylightName : string" Usage="System.TimeZoneInfo.DaylightName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得目前時區日光節約時間的顯示名稱。</summary>
        <value>時區之日光節約時間的顯示名稱。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 根據 Windows 作業系統安裝的文化特性當地語系化的顯示名稱。  
  
 A<xref:System.TimeZoneInfo.DaylightName%2A>屬性的值不是<xref:System.String.Empty?displayProperty=nameWithType>或`null`不一定表示時區支援日光節約時間。 若要判斷是否時區支援日光節約時間，請檢查的值及其<xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A>屬性。  
  
 在大部分情況下，`DaylightName`不是屬性系統定莪時區<xref:System.String.Empty?displayProperty=nameWithType>或`null`。 不過，<xref:System.TimeZoneInfo.DaylightName%2A>屬性的自訂時區可以設定為<xref:System.String.Empty?displayProperty=nameWithType>。 建立自訂時區時，發生這種的情況<xref:System.TimeZoneInfo.CreateCustomTimeZone%28System.String%2CSystem.TimeSpan%2CSystem.String%2CSystem.String%29?displayProperty=nameWithType>或<xref:System.TimeZoneInfo.CreateCustomTimeZone%28System.String%2CSystem.TimeSpan%2CSystem.String%2CSystem.String%2CSystem.String%2CSystem.TimeZoneInfo.AdjustmentRule%5B%5D%2CSystem.Boolean%29?displayProperty=nameWithType>多載而`disableDaylightSavingTime`參數是`true`。 因此，您的程式碼應該永遠不會假設的值<xref:System.TimeZoneInfo.DaylightName%2A>屬性不是`null`或空白。  
  
 <xref:System.TimeZoneInfo.DaylightName%2A>屬性就相當於<xref:System.TimeZone.DaylightName%2A>屬性<xref:System.TimeZone>類別。  
  
   
  
## Examples  
 下列範例會定義名為的方法`DisplayDateWithTimeZoneName`使用<xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29>方法，以判斷是否要顯示的時區標準時間名稱或日光節約時間名稱。  
  
 [!code-csharp[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/cs/IsDaylightSavingTime.cs#1)]
 [!code-vb[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/vb/IsDaylightSavingTime.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayName">
      <MemberSignature Language="C#" Value="public string DisplayName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DisplayName" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.DisplayName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DisplayName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DisplayName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DisplayName : string" Usage="System.TimeZoneInfo.DisplayName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得表示時區的一般顯示名稱。</summary>
        <value>時區的一般顯示名稱。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 根據 Windows 作業系統安裝的文化特性當地語系化的顯示名稱。  
  
 Windows 系統時區的時區顯示名稱會遵循相當標準的格式。 顯示名稱的第一個部分是國際標準時間，會以縮寫 GMT （格林威治標準時間），以括弧括住的時區的基底位移。 為 Coordinated Universal Time，沒有位移 GMT 縮寫被加括號。  這被後面接著識別時區或一或多個城市、 地區或國家/地區時區的字串。 例如：  
  
```  
(GMT) Greenwich Mean Time : Dublin, Edinburgh, Lisbon, London  
(GMT+02:00) Athens, Beirut, Istanbul, Minsk  
(GMT-02:00) Mid-Atlantic  
(GMT-07:00) Mountain Time (US & Canada)  
```  
  
   
  
## Examples  
 下列範例會擷取<xref:System.TimeZoneInfo>物件，代表當地時區，並將其顯示名稱、 標準時間名稱和日光節約時間名稱的輸出。 輸出會顯示位於美國的系統太平洋標準時區。  
  
 [!code-csharp[System.TimeZone2.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/ShowTimeZoneNames1.cs#2)]
 [!code-vb[System.TimeZone2.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/ShowTimeZoneNames1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>判斷兩個 <see cref="T:System.TimeZoneInfo" /> 物件是否相等。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="timeZoneInfo.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="obj">要和目前物件比較的第二個物件。</param>
        <summary>判斷目前的 <see cref="T:System.TimeZoneInfo" /> 物件與另一個物件是否相等。</summary>
        <returns>如果 <paramref name="obj" /> 是等於目前執行個體的 <see cref="T:System.TimeZoneInfo" /> 物件，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會將轉換或轉換`obj`至<xref:System.TimeZoneInfo>物件，並比較它與目前的執行個體。 等號比較測試根據值的比較。 目前<xref:System.TimeZoneInfo>執行個體和`obj`會被視為相等，在下列情況下：  
  
-   執行階段型別`obj`是<xref:System.TimeZoneInfo>。  
  
-   兩個物件具有相同<xref:System.TimeZoneInfo.Id%2A>屬性值。  
  
-   兩個物件具有相同的調整規則。  
  
 如果 `obj` 為 `null`，這個方法會傳回 `false`。  
  
   
  
## Examples  
 下列範例會使用<xref:System.TimeZoneInfo.Equals%28System.Object%29>方法，以判斷當地時區是太平洋時間或美國東部時間。  
  
 [!code-csharp[System.TimeZoneInfo.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timezoneinfo.equals/cs/equals1.cs#1)]
 [!code-vb[System.TimeZoneInfo.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timezoneinfo.equals/vb/equals1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (TimeZoneInfo other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(class System.TimeZoneInfo other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.Equals(System.TimeZoneInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As TimeZoneInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(TimeZoneInfo ^ other);" />
      <MemberSignature Language="F#" Value="override this.Equals : TimeZoneInfo -&gt; bool" Usage="timeZoneInfo.Equals other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.TimeZoneInfo" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="other">要和目前物件比較的第二個物件。</param>
        <summary>判斷目前的 <see cref="T:System.TimeZoneInfo" /> 物件和另一個 <see cref="T:System.TimeZoneInfo" /> 物件是否相等。</summary>
        <returns>如果兩個 <see cref="T:System.TimeZoneInfo" /> 物件相等則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 等號比較是以值的比較為基礎。 兩個<xref:System.TimeZoneInfo>物件會被視為相等，在下列情況下：  
  
-   值及其<xref:System.TimeZoneInfo.Id%2A>屬性相同時。  
  
-   它們有相同的調整規則。  
  
 <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29?displayProperty=nameWithType> 傳回布林值，評估下列運算式所得結果：  
  
 ```csharp 
 other.Id == this.Id && HasSameRules(other);  
 ```
  
 ```vb
 other.Id = me.Id AndAlso HasSameRules(other)  
 ```

 如果`other`參數未初始化<xref:System.TimeZoneInfo>物件，這個方法會傳回`false`。  
  
   
  
## Examples  
 下列範例會使用<xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29>方法，以判斷當地時區是太平洋時間或美國東部時間。  
  
 [!code-csharp[System.TimeZone2.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#7)]
 [!code-vb[System.TimeZone2.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindSystemTimeZoneById">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo FindSystemTimeZoneById (string id);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo FindSystemTimeZoneById(string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.FindSystemTimeZoneById(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FindSystemTimeZoneById (id As String) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ FindSystemTimeZoneById(System::String ^ id);" />
      <MemberSignature Language="F#" Value="static member FindSystemTimeZoneById : string -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.FindSystemTimeZoneById id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="id">對應於 <see cref="P:System.TimeZoneInfo.Id" /> 屬性的時區識別項。</param>
        <summary>根據新 <see cref="T:System.TimeZoneInfo" /> 物件的識別碼加以具現化。</summary>
        <returns>其識別項是 <paramref name="id" /> 參數之值的物件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `id`參數必須確實對應到時區的識別項的長度，但不是在案例中，成功比對發生的事件; 也就是比較`id`時區識別項不區分大小寫。 如果您想要擷取基礎部分符合結果的時區物件，您可以撰寫使用的唯讀集合的自訂程序<xref:System.TimeZoneInfo>所傳回的物件<xref:System.TimeZoneInfo.GetSystemTimeZones%2A>方法。  
  
 在 Windows 系統上`FindSystemTimeZoneById`會嘗試比對`id`HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Time Zones 分支的登錄子機碼名稱。 在 Linux 和 macOS 上，它會使用提供的時區資訊[ICU 文件庫](http://userguide.icu-project.org/datetime/timezone)。 如果登錄或程式庫並沒有您想要的時區資訊，您可以建立特定的時區是藉由呼叫其中一個多載<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A>方法或來電 800-659-3579<xref:System.TimeZoneInfo.FromSerializedString%2A>還原序列化<xref:System.TimeZoneInfo>物件表示必要的時區。 不過，這些方法呼叫所建立的時區不是系統定義的時間，而且無法使用擷取<xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A>方法。 只有透過所傳回的物件參考，可以存取這些自訂的時區<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A>或<xref:System.TimeZoneInfo.FromSerializedString%2A>方法呼叫。  
  
這個方法會傳回新<xref:System.TimeZoneInfo>每個方法呼叫執行個體; 它不會傳回快取的物件。 這可能會影響呼叫的應用程式的效能`FindSystemTimeZoneById`方法重複使用相同的識別碼。   
  
## Examples  
 下列範例會使用<xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A>方法來擷取東京標準時間區域。 這<xref:System.TimeZoneInfo>東京中轉換為時間的本地時間，並判斷它是否東京標準時間或東京日光節約時間，然後使用物件。  
  
 [!code-csharp[System.TimeZone2.Conversions#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Conversions/cs/convertdt2.cs#2)]
 [!code-vb[System.TimeZone2.Conversions#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Conversions/vb/convertdt2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">系統沒有足夠的記憶體，無法保存時區的相關資訊。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="id" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.TimeZoneNotFoundException">找不到 <paramref name="id" /> 指定的時區識別項。 這意味名稱符合 <paramref name="id" /> 的時區識別碼不存在，或識別碼存在，但不包含任何時區資料。</exception>
        <exception cref="T:System.Security.SecurityException">處理序沒有必要權限可讀取包含時區資訊的登錄機碼。</exception>
        <exception cref="T:System.InvalidTimeZoneException">找到時區識別項，但登錄資料已損毀。</exception>
        <altmember cref="P:System.TimeZoneInfo.Id" />
        <related type="Article" href="https://msdn.microsoft.com/library/8cb620e5-c6a6-4267-a52e-beeb73cd1a34">HOW TO：具現化 TimeZoneInfo 物件</related>
      </Docs>
    </Member>
    <Member MemberName="FromSerializedString">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo FromSerializedString (string source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo FromSerializedString(string source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.FromSerializedString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromSerializedString (source As String) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ FromSerializedString(System::String ^ source);" />
      <MemberSignature Language="F#" Value="static member FromSerializedString : string -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.FromSerializedString source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="source">序列化 <see cref="T:System.TimeZoneInfo" /> 物件的字串表示。</param>
        <summary>還原序列化字串，以重新建立原始的序列化 <see cref="T:System.TimeZoneInfo" /> 物件。</summary>
        <returns>起始已序列化的物件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 沒有提供建立時區，在 Windows 或在登錄中找不到所需的所有程式碼的替代方法[ICU 文件庫](http://userguide.icu-project.org/datetime/timezone)Linux 和 macOS 上。 您可以定義自訂的時區，然後使用<xref:System.TimeZoneInfo.ToSerializedString%2A>獨立可執行檔或應用程式的安裝程式以將時區儲存為字串的使用中的方法。 應用程式可以擷取這個字串從其儲存體位置並使用它具現化<xref:System.TimeZoneInfo.FromSerializedString%2A>方法。  
  
   
  
## Examples  
 下列範例會嘗試擷取南極大陸/南極從本機系統的時區。 如果失敗，此程式碼會嘗試擷取應用程式目錄中的文字檔案的相關時區資訊。 如果此嘗試失敗，程式碼建立時區和時區的相關資訊寫入文字檔。  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#4)]
 [!code-vb[System.TimeZone2.CreateTimeZone#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="source" /> 參數為 <see cref="F:System.String.Empty" />。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" /> 參數為 null 字串。</exception>
        <exception cref="T:System.Runtime.Serialization.SerializationException">來源參數無法還原序列化為 <see cref="T:System.TimeZoneInfo" /> 物件。</exception>
        <altmember cref="M:System.TimeZoneInfo.ToSerializedString" />
        <related type="Article" href="https://msdn.microsoft.com/library/6b7b4de9-da07-47e3-8f4c-823f81798ee7">HOW TO：從內嵌資源還原時區</related>
      </Docs>
    </Member>
    <Member MemberName="GetAdjustmentRules">
      <MemberSignature Language="C#" Value="public TimeZoneInfo.AdjustmentRule[] GetAdjustmentRules ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.TimeZoneInfo/AdjustmentRule[] GetAdjustmentRules() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetAdjustmentRules" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAdjustmentRules () As TimeZoneInfo.AdjustmentRule()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;TimeZoneInfo::AdjustmentRule ^&gt; ^ GetAdjustmentRules();" />
      <MemberSignature Language="F#" Value="member this.GetAdjustmentRules : unit -&gt; TimeZoneInfo.AdjustmentRule[]" Usage="timeZoneInfo.GetAdjustmentRules " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo+AdjustmentRule[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>擷取會套用至目前 <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> 物件的 <see cref="T:System.TimeZoneInfo" /> 物件陣列。</summary>
        <returns>這個時區之物件的陣列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.TimeZoneInfo.GetAdjustmentRules%2A>方法會擷取陣列<xref:System.TimeZoneInfo.AdjustmentRule?displayProperty=nameWithType>物件。 陣列中的每個物件會定義該時區的調整，以及其差異生效的開始和結束日期 （確切的調整會導致時間變更的數量）。 此外，兩個屬性會傳回<xref:System.TimeZoneInfo.TransitionTime?displayProperty=nameWithType>定義每個標準時間的年度轉換發生時的物件。  
  
 如果時間的時區有多個調整規則，它們的一般順序從最早 （位於索引 0） 到最新版本 (位於索引<xref:System.Array.Length%2A>-1)。  
  
 如果時區不具有調整規則<xref:System.TimeZoneInfo.GetAdjustmentRules%2A>方法會傳回空陣列 (陣列的<xref:System.Array.Length%2A>為零)。  
  
 所傳回的陣列的項目修改<xref:System.TimeZoneInfo.GetAdjustmentRules%2A>方法不會反映在屬於特定時區的調整規則。 若要修改的時區調整規則 （例如反映其歷程記錄轉換自日光節約時間） 您必須建立新的時區有適當調整規則，而不是修改現有。  
  
   
  
## Examples  
 下列範例會擷取所有的時區已定義於本機系統，並顯示完成其調整規則資訊至主控台。  
  
 [!code-csharp[System.TimeZone2.AdjustmentRule.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/cs/System.TimeZone2.AdjustmentRule.Class.cs#3)]
 [!code-vb[System.TimeZone2.AdjustmentRule.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/vb/System.TimeZone2.AdjustmentRule.Class.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">系統沒有足夠的記憶體，無法製作調整規則的記憶體中複本。</exception>
        <altmember cref="T:System.TimeZoneInfo.AdjustmentRule" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAmbiguousTimeOffsets">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>傳回不明確的日期和時間可能對應的日期和時間相關資訊。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAmbiguousTimeOffsets">
      <MemberSignature Language="C#" Value="public TimeSpan[] GetAmbiguousTimeOffsets (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan[] GetAmbiguousTimeOffsets(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;TimeSpan&gt; ^ GetAmbiguousTimeOffsets(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.GetAmbiguousTimeOffsets : DateTime -&gt; TimeSpan[]" Usage="timeZoneInfo.GetAmbiguousTimeOffsets dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTime">日期和時間。</param>
        <summary>傳回不明確的日期和時間可能對應的日期和時間相關資訊。</summary>
        <returns>物件的陣列，表示特定日期和時間可對應的可能 Coordinated Universal Time (UTC) 位移。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法的精確的行為取決於之間的關聯性<xref:System.DateTime.Kind%2A>屬性和<xref:System.TimeZoneInfo>物件，如下表所示。  
  
|TimeZoneInfo 物件類型|Kind 屬性值|行為|  
|------------------------------|-------------------------|--------------|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Local?displayProperty=nameWithType> 或 <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|傳回模稜兩可的時間位移`dateTime`。|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|將轉換`dateTime`至當地時間，然後傳回該時間的模稜兩可的時間位移。|  
|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>|任何值。|會擲回<xref:System.ArgumentException>。|  
|任何其他的時區。|<xref:System.DateTimeKind.Local> 或 <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|將轉換`dateTime`到指定的時間區域，然後判斷該時間是否模稜兩可。|  
|任何其他的時區。|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|決定是否`dateTime`模稜兩可在指定的時區。|  
  
 順序<xref:System.TimeSpan>未定義這個方法所傳回陣列中的物件。 不過，您可以判斷哪個項目從時區標準時間表示的位移，藉由比較其值的時區<xref:System.TimeZoneInfo.BaseUtcOffset%2A>屬性。 若要對應至時區標準時間的模稜兩可的時間，請參閱[How to:解決模稜兩可的時間](~/docs/standard/datetime/resolve-ambiguous-times.md)。  
  
   
  
## Examples  
 下列範例會定義名為的方法`ShowPossibleUtcTimes`使用<xref:System.TimeZoneInfo.GetAmbiguousTimeOffsets%28System.DateTime%29>方法，以將模稜兩可的時間對應至可以對應 Coordinated Universal Time (UTC) 時間。  
  
 [!code-csharp[System.TimeZone2.GetAmbiguousTimeOffsets#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.GetAmbiguousTimeOffsets/cs/System.TimeZone2.GetAmbiguousTimeOffsets.cs#1)]
 [!code-vb[System.TimeZone2.GetAmbiguousTimeOffsets#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.GetAmbiguousTimeOffsets/vb/System.TimeZone2.GetAmbiguousTimeOffsets.vb#1)]  
  
 呼叫此方法可以接著使用如下所示的程式碼：  
  
 [!code-csharp[System.TimeZone2.GetAmbiguousTimeOffsets#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.GetAmbiguousTimeOffsets/cs/System.TimeZone2.GetAmbiguousTimeOffsets.cs#2)]
 [!code-vb[System.TimeZone2.GetAmbiguousTimeOffsets#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.GetAmbiguousTimeOffsets/vb/System.TimeZone2.GetAmbiguousTimeOffsets.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="dateTime" /> 不是模稜兩可的時間。</exception>
        <altmember cref="Overload:System.TimeZoneInfo.IsAmbiguousTime" />
        <related type="Article" href="https://msdn.microsoft.com/library/2cf5fb25-492c-4875-9245-98cac8348e97">HOW TO：解決模稜兩可的時間</related>
        <related type="Article" href="https://msdn.microsoft.com/library/bca874ee-5b68-4654-8bbd-3711220ef332">HOW TO：讓的使用者解決模稜兩可的時間</related>
      </Docs>
    </Member>
    <Member MemberName="GetAmbiguousTimeOffsets">
      <MemberSignature Language="C#" Value="public TimeSpan[] GetAmbiguousTimeOffsets (DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan[] GetAmbiguousTimeOffsets(valuetype System.DateTimeOffset dateTimeOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;TimeSpan&gt; ^ GetAmbiguousTimeOffsets(DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="F#" Value="member this.GetAmbiguousTimeOffsets : DateTimeOffset -&gt; TimeSpan[]" Usage="timeZoneInfo.GetAmbiguousTimeOffsets dateTimeOffset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">日期和時間。</param>
        <summary>傳回不明確的日期和時間可能對應的日期和時間相關資訊。</summary>
        <returns>物件的陣列，表示特定日期和時間可對應的可能 Coordinated Universal Time (UTC) 位移。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法的精確的行為取決於之間的關聯性<xref:System.DateTimeOffset.Offset%2A>的屬性`dateTimeOffset`參數和<xref:System.TimeZoneInfo>物件。 如果值<xref:System.DateTimeOffset.Offset%2A>屬性會對應至目前時區的可能位移與 Coordinated Universal Time (UTC) 的日期和時間，方法會傳回可能的位移。 否則，它會將轉換`dateTimeOffset`將目前的時區，然後再傳回可能位移的時間的日期和時間。  
  
 順序<xref:System.TimeSpan>未定義這個方法所傳回陣列中的物件。 不過，您可以判斷哪個項目從時區標準時間表示的位移，藉由比較其值的時區<xref:System.TimeZoneInfo.BaseUtcOffset%2A>屬性。 若要對應至時區標準時間的模稜兩可的時間，請參閱[How to:解決模稜兩可的時間](~/docs/standard/datetime/resolve-ambiguous-times.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="dateTimeOffset" /> 不是模稜兩可的時間。</exception>
        <altmember cref="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)" />
        <related type="Article" href="https://msdn.microsoft.com/library/2cf5fb25-492c-4875-9245-98cac8348e97">HOW TO：解決模稜兩可的時間</related>
        <related type="Article" href="https://msdn.microsoft.com/library/bca874ee-5b68-4654-8bbd-3711220ef332">HOW TO：讓的使用者解決模稜兩可的時間</related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="timeZoneInfo.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>做為雜湊函式，用於雜湊演算法和資料結構，例如雜湊資料表。</summary>
        <returns>32 位元帶正負號的整數，做為這個 <see cref="T:System.TimeZoneInfo" /> 物件的雜湊碼。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如需其他詳細資料<xref:System.TimeZoneInfo.GetHashCode%2A>方法，請參閱<xref:System.Object.GetHashCode%2A>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSystemTimeZones">
      <MemberSignature Language="C#" Value="public static System.Collections.ObjectModel.ReadOnlyCollection&lt;TimeZoneInfo&gt; GetSystemTimeZones ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.TimeZoneInfo&gt; GetSystemTimeZones() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetSystemTimeZones" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetSystemTimeZones () As ReadOnlyCollection(Of TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::ObjectModel::ReadOnlyCollection&lt;TimeZoneInfo ^&gt; ^ GetSystemTimeZones();" />
      <MemberSignature Language="F#" Value="static member GetSystemTimeZones : unit -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;TimeZoneInfo&gt;" Usage="System.TimeZoneInfo.GetSystemTimeZones " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.5">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.5">
          <AttributeName>System.Security.SecurityTreatAsSafe</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.TimeZoneInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回本機系統上有其資訊之所有時區的排序集合。</summary>
        <returns><see cref="T:System.TimeZoneInfo" /> 物件的唯讀集合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.TimeZoneInfo.GetSystemTimeZones%2A>方法會從登錄 HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Time Zones 機碼在 Windows 系統上進出的子機碼來擷取所有可用的時區資訊[ICU文件庫](http://userguide.icu-project.org/datetime/timezone)在 Linux 和 macOS 上。 如果無法成功地擷取及剖析特定的字串屬性的個別值<xref:System.TimeZoneInfo>物件，這個方法會設定它們的值為空字串 ("")。  
  
> [!IMPORTANT]
>  <xref:System.TimeZoneInfo.GetSystemTimeZones%2A>方法傳回的集合<xref:System.TimeZoneInfo>中定義的時區的物件或 ICU 文件庫。 它不包含時區使用多載建立<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A>方法。 這些是只可透過存取時區建立方法所傳回的物件參考。  
  
 這個方法所傳回的集合被排序的 UTC 時差，並針對時區具有相同的 UTC 時差，以使用目前文化特性的顯示名稱。 顯示名稱的詳細資訊，請參閱<xref:System.TimeZoneInfo.DisplayName%2A>。  
  
 <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>這個方法所傳回的物件支援<xref:System.Collections.Generic.IEnumerable%601>介面，這表示使用者可以使用具重複它`foreach`（在 C# 中) 或`For Each…Next`（在 Visual Basic) 陳述式。 迴圈的每個反覆項目提供下一個<xref:System.TimeZoneInfo>集合中的物件。  
  
 集合<xref:System.TimeZoneInfo>物件表示本機電腦上定義的時區，它不一定會提供在所有的時段內所有時區的完整資訊。 如果您的應用程式需要在本機電腦上找不到的時區，您可以建立自訂的時區使用多載<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A>方法。 如需詳細資訊，請參閱[如何：建立沒有調整規則的時區](~/docs/standard/datetime/create-time-zones-without-adjustment-rules.md)和[How to:建立有調整規則的時區](~/docs/standard/datetime/create-time-zones-with-adjustment-rules.md)。  
  
 您也可以判斷是否為個別的時區在本機電腦上所定義呼叫<xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A>方法，並提供您想要擷取做為參數的時區的識別項。  
  
   
  
## Examples  
 下列範例會擷取代表電腦上所定義的時區的時區物件的集合，並將其相關資訊寫入至文字檔。  
  
 [!code-csharp[System.TimeZone2.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/getsystemtimezones1.cs#6)]
 [!code-vb[System.TimeZone2.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/getsystemtimezones1.vb#6)]
  [!code-powershell[System.TimeZone2.Class#6](~/samples/snippets/powershell/VS_Snippets_CLR_System/System.TimeZone2.Class/PS/Timezone2_Examples.ps1)]   
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">記憶體不足，無法儲存所有時區資訊。</exception>
        <exception cref="T:System.Security.SecurityException">使用者沒有讀取包含時區資訊之登錄機碼所需的權限。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetUtcOffset">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>計算這個時區與 Coordinated Universal Time (UTC) 在特定日期和時間的位移和差異。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetUtcOffset">
      <MemberSignature Language="C#" Value="public TimeSpan GetUtcOffset (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan GetUtcOffset(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetUtcOffset(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan GetUtcOffset(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.GetUtcOffset : DateTime -&gt; TimeSpan" Usage="timeZoneInfo.GetUtcOffset dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTime">判斷其位移的日期和時間。</param>
        <summary>計算這個時區與 Coordinated Universal Time (UTC) 在特定日期和時間的位移和差異。</summary>
        <returns>物件，表示兩個時區間的時差。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 傳回的時間範圍會包含目前時區調整規則的應用程式造成的任何差異。 不同於<xref:System.TimeZoneInfo.BaseUtcOffset%2A>屬性，它會傳回 Coordinated Universal Time (UTC) 與時區標準時間之間的差異，因此，不會考慮調整規則。  
  
 如果`dateTime`參數的<xref:System.DateTime.Kind%2A>屬性未對應至時區物件，這個方法會執行傳回結果之前需要的轉換。 比方說，這種情形<xref:System.DateTime.Kind%2A>屬性是<xref:System.DateTimeKind.Local?displayProperty=nameWithType>但時區物件不是當地時區。 如果`dateTime`模稜兩可，或如果模稜兩可的轉換後的時間，這個方法會將解譯為標準時間的模稜兩可的時間。 如果`dateTime`是無效的這個方法會傳回<xref:System.TimeSpan>反映 UTC 與時區標準時間之間的差異的物件。  
  
 <xref:System.TimeZoneInfo.GetUtcOffset%28System.DateTime%29?displayProperty=nameWithType>作業的方法大致<xref:System.TimeZone.GetUtcOffset%2A>方法<xref:System.TimeZone>類別。  
  
   
  
## Examples  
 下列範例示範如何將<xref:System.TimeZoneInfo.GetUtcOffset%28System.DateTime%29>方法搭配不同的時區與具有不同的日期值<xref:System.DateTime.Kind%2A>屬性值。  
  
 [!code-csharp[System.TimeZone2.GetUtcOffset#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.GetUtcOffset/cs/System.TimeZone2.GetUtcOffset.cs#1)]
 [!code-vb[System.TimeZone2.GetUtcOffset#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.GetUtcOffset/vb/System.TimeZone2.GetUtcOffset.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.TimeZoneInfo.BaseUtcOffset" />
      </Docs>
    </Member>
    <Member MemberName="GetUtcOffset">
      <MemberSignature Language="C#" Value="public TimeSpan GetUtcOffset (DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan GetUtcOffset(valuetype System.DateTimeOffset dateTimeOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetUtcOffset(System.DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan GetUtcOffset(DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="F#" Value="member this.GetUtcOffset : DateTimeOffset -&gt; TimeSpan" Usage="timeZoneInfo.GetUtcOffset dateTimeOffset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">判斷其位移的日期和時間。</param>
        <summary>計算這個時區與 Coordinated Universal Time (UTC) 在特定日期和時間的位移和差異。</summary>
        <returns>物件，表示 Coordinated Universal Time (UTC) 與目前時區的時差。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 傳回的時間範圍會包含目前時區調整規則的應用程式造成的任何差異。 不同於<xref:System.TimeZoneInfo.BaseUtcOffset%2A>屬性，它會傳回 Coordinated Universal Time (UTC) 與時區標準時間之間的差異，因此，不會考慮調整規則。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasSameRules">
      <MemberSignature Language="C#" Value="public bool HasSameRules (TimeZoneInfo other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool HasSameRules(class System.TimeZoneInfo other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.HasSameRules(System.TimeZoneInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function HasSameRules (other As TimeZoneInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool HasSameRules(TimeZoneInfo ^ other);" />
      <MemberSignature Language="F#" Value="member this.HasSameRules : TimeZoneInfo -&gt; bool" Usage="timeZoneInfo.HasSameRules other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.TimeZoneInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="other">要與目前 <see cref="T:System.TimeZoneInfo" /> 物件比較的第二個物件。</param>
        <summary>指出目前物件與另一個 <see cref="T:System.TimeZoneInfo" /> 物件是否具有相同的調整規則。</summary>
        <returns>如果兩個時區具有相同的調整規則和基底位移則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 像是<xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29?displayProperty=nameWithType>方法中，<xref:System.TimeZoneInfo.HasSameRules%2A>方法會指示是否兩個時區具有相同的基底位移 (所定義<xref:System.TimeZoneInfo.BaseUtcOffset%2A>屬性) 和相同的調整規則。 不同於<xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29?displayProperty=nameWithType>方法中，<xref:System.TimeZoneInfo.HasSameRules%2A>不會比較時區識別項 (如所定義<xref:System.TimeZoneInfo.Id%2A>屬性)。  
  
   
  
## Examples  
 一般而言，在 Windows 登錄中所定義的時區的數目和[ICU 文件庫](http://userguide.icu-project.org/datetime/timezone)Linux 和 macOS 上有相同的位移，從 Coordinated Universal Time (UTC) 和相同的調整規則。 下列範例會顯示一份這些時區到主控台。  
  
 [!code-csharp[System.TimeZone2.HasSameRules#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.HasSameRules/cs/HasSameRules.cs#1)]
 [!code-vb[System.TimeZone2.HasSameRules#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.HasSameRules/vb/HasSameRules.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="other" /> 參數為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public string Id { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Id" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.Id" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Id As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Id { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Id : string" Usage="System.TimeZoneInfo.Id" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得時區識別項。</summary>
        <value>時區識別項。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 時區識別項會唯一識別特定時區的索引鍵字串。 在 Windows 系統上，它會對應至從 Windows 系統與登錄 HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Time 區域 」 分支的子機碼[ICU 文件庫](http://userguide.icu-project.org/datetime/timezone)Linux 和 macOS 上。 它可以做為參數傳遞<xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A>方法具現化<xref:System.TimeZoneInfo>物件，表示特定時區。  
  
> [!IMPORTANT]
>  雖然在 Windows 登錄中的索引鍵名稱最多可有 255 個字元，但建議您指派給自訂的時區識別項是 32 個字元或更少。 較長的識別項，就越有可能不正確的索引鍵名稱將會提供擷取它時。  
  
 值<xref:System.TimeZoneInfo.Id%2A>屬性通常是，但不是一定相同<xref:System.TimeZoneInfo.StandardName%2A>屬性。 識別項的通用協調是時區的 UTC。  
  
   
  
## Examples  
 下列範例會列出每個在本機電腦上所定義的時區識別的項。  
  
 [!code-csharp[System.TimeZone2.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#5)]
 [!code-vb[System.TimeZone2.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsAmbiguousTime">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>判斷特定時區中的特定日期和時間是否模稜兩可，以及是否可對應到兩個或多個 Coordinated Universal Time (UTC) 時間。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsAmbiguousTime">
      <MemberSignature Language="C#" Value="public bool IsAmbiguousTime (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsAmbiguousTime(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsAmbiguousTime(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.IsAmbiguousTime : DateTime -&gt; bool" Usage="timeZoneInfo.IsAmbiguousTime dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTime">日期和時間值。</param>
        <summary>判斷特定時區中的特定日期和時間是否模稜兩可，以及是否可對應到兩個或多個 Coordinated Universal Time (UTC) 時間。</summary>
        <returns>如果 <paramref name="dateTime" /> 參數模稜兩可則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 模稜兩可的時間落在目前時區的時間範圍內。 這表示它可以是標準時間或時間所產生的調整規則的應用程式。 一般而言，時鐘設定為傳回標準時間到日光節約時間時產生模稜兩可的時間。 請參閱 < 範例 > 一節的說明。  
  
 Coordinated Universal Time (UTC) 有任何模稜兩可的時間;兩者皆非的時間不支援日光節約時間的區域。 因此，這些時區具有沒有調整規則和呼叫<xref:System.TimeZoneInfo.IsAmbiguousTime%2A>方法永遠會傳回`false`。  
  
 遵循日光節約時間的時區，此方法的精確的行為取決於之間的關聯性<xref:System.DateTime.Kind%2A>屬性和<xref:System.TimeZoneInfo>物件，如下表所示。  
  
|TimeZoneInfo 物件類型|Kind 屬性值|行為|  
|------------------------------|-------------------------|--------------|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Local?displayProperty=nameWithType> 或 <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|決定是否`dateTime`參數模稜兩可。|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|將轉換`dateTime`為當地時間，然後決定該時間是否模稜兩可。|  
|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType> 或 <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|傳回 `false`。|  
|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|如果`dateTime`模稜兩可，假設它是標準時間，將它轉換成 UTC，並傳回`false`。|  
|任何其他的時區。|<xref:System.DateTimeKind.Local?displayProperty=nameWithType> 或 <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|將轉換`dateTime`指定時區的時間，然後決定該時間是否模稜兩可。|  
|任何其他的時區。|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|決定是否`dateTime`模稜兩可。|  
  
   
  
## Examples  
 在太平洋時區，日光節約時間結束於上午 2:00 在 2007 年 11 月 4日日。 下列範例會將時間傳遞在一分鐘的時間間隔，從上午 12:59 於 2007 年 11 月 4日日到到上午 2:01 在 2007 年 11 月 4 日，若要<xref:System.TimeZoneInfo.IsAmbiguousTime%28System.DateTime%29>方法的<xref:System.TimeZoneInfo>代表太平洋時區的物件。 主控台輸出指出，所有的時間，從上午 1:00。 在 2007 年 11 月 4日日到至 1:59 A.M.。 在 2007 年 11 月 4 日，是模稜兩可。  
  
 [!code-csharp[System.TimeZone2.Class#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#8)]
 [!code-vb[System.TimeZone2.Class#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="dateTime" /> 值的 <see cref="P:System.DateTime.Kind" /> 屬性是 <see cref="F:System.DateTimeKind.Local" />，而且 <paramref name="dateTime" /> 是無效的時間。</exception>
        <altmember cref="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="IsAmbiguousTime">
      <MemberSignature Language="C#" Value="public bool IsAmbiguousTime (DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsAmbiguousTime(valuetype System.DateTimeOffset dateTimeOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsAmbiguousTime(DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="F#" Value="member this.IsAmbiguousTime : DateTimeOffset -&gt; bool" Usage="timeZoneInfo.IsAmbiguousTime dateTimeOffset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">日期和時間。</param>
        <summary>判斷特定時區中的特定日期和時間是否模稜兩可，以及是否可對應到兩個或多個 Coordinated Universal Time (UTC) 時間。</summary>
        <returns>如果目前時區中的 <paramref name="dateTimeOffset" /> 參數模稜兩可則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 模稜兩可的時間落在目前時區的時間範圍內。 這表示它可以是標準時間或時間所產生的調整規則的應用程式。 一般而言，時鐘設定為傳回標準時間到日光節約時間時產生模稜兩可的時間。 Coordinated Universal Time (UTC) 有任何模稜兩可的時間;兩者皆非的時間不支援日光節約時間的區域。  
  
 方法的精確的行為取決於之間的關聯性<xref:System.DateTimeOffset.Offset%2A>屬性`dateTimeOffset`參數和目前的時區。 如果值<xref:System.DateTimeOffset.Offset%2A>屬性是可能與目前時區的 UTC 位移，則這個方法會判斷是否該日期和時間模稜兩可。 否則，它會將轉換`dateTimeOffset`為目前的時區的時間，然後決定是否該日期和時間模稜兩可。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsDaylightSavingTime">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指出所指定日期和時間是否在目前 <see cref="T:System.TimeZoneInfo" /> 物件之時區的日光節約時間範圍內。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public bool IsDaylightSavingTime (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsDaylightSavingTime(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsDaylightSavingTime(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.IsDaylightSavingTime : DateTime -&gt; bool" Usage="timeZoneInfo.IsDaylightSavingTime dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTime">日期和時間值。</param>
        <summary>表示指定的日期和時間是否在目前 <see cref="T:System.TimeZoneInfo" /> 物件時區的日光節約時間範圍內。</summary>
        <returns>如果 <paramref name="dateTime" /> 參數為日光節約時間則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 傳回值<xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType>所代表的時區之間的關聯性會影響<xref:System.TimeZoneInfo>物件並<xref:System.DateTime.Kind%2A>屬性`dateTime`參數，如下表所示。  
  
|TimeZoneInfo 物件|DateTime.Kind 屬性|結果|  
|-------------------------|----------------------------|------------|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|`DateTimeKind.Local`|決定是否`dateTime`是日光節約時間。|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|`DateTimeKind.Utc`|將轉換`dateTime`與 Coordinated Universal Time (UTC) 為當地時間，並判斷它是否日光節約時間。|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|`DateTimeKind.Unspecified`|假設`dateTime`代表當地時間，並判斷它是否日光節約時間。|  
|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>|`DateTimeKind.Local`、 `DateTimeKind.Unspecified`或 `DateTimeKind.Utc`|傳回`false`（UTC 不支援日光節約時間）。|  
|任何其他<xref:System.TimeZoneInfo>物件。|`DateTimeKind.Local`|將當地時間轉換為相等的時間<xref:System.TimeZoneInfo>物件，並接著會判斷是否後者是日光節約時間。|  
|任何其他<xref:System.TimeZoneInfo>物件。|`DateTimeKind.Utc`|將 UTC 轉換為相等的時間<xref:System.TimeZoneInfo>物件，並接著會判斷是否後者是日光節約時間。|  
|任何其他<xref:System.TimeZoneInfo>物件。|`DateTimeKind.Unspecified`|決定是否`dateTime`是日光節約時間。|  
  
 如果所代表的時區<xref:System.TimeZoneInfo>物件不支援日光節約時間，此方法一律會傳回`false`。 時間區域，其中包括一些<xref:System.TimeZoneInfo.Utc%2A>，不會遵守日光節約時間。  若要判斷是否時區支援日光節約時間，擷取的值及其<xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A>屬性。  
  
 如果`dateTime`參數指定模稜兩可的時間，以目前物件的時區<xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType>方法會解譯`dateTime`做為標準時間，並傳回`false`如果其<xref:System.DateTime.Kind%2A>屬性是<xref:System.DateTimeKind.Local?displayProperty=nameWithType>或<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. 如果<xref:System.DateTime.Kind%2A>屬性是<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>，這個方法會選取正確模稜兩可的時間，並指出它是否為日光節約時間。  
  
 因為<xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29?displayProperty=nameWithType>方法會傳回`false`日期和模稜兩可的時間 （也就是日期和時間表示標準時間或特定時區的日光節約時間）<xref:System.TimeZoneInfo.IsAmbiguousTime%28System.DateTime%29?displayProperty=nameWithType>方法可以搭配<xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29>方法，以判斷時間是否可能日光節約時間。 因為模稜兩可的時間，日光節約時間和標準時間，也是會<xref:System.TimeZoneInfo.IsAmbiguousTime%28System.DateTime%29>可以先呼叫方法，來決定是否將日期和時間可能是日光節約時間。 如果此方法會傳回`false`，則<xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29>可以呼叫方法，來決定是否<xref:System.DateTime>值是日光節約時間。 下列範例說明這項技巧。  
  
 [!code-csharp[System.TimeZone2.IsDaylightSavingTime#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/cs/IsDaylightSavingTime.cs#2)]
 [!code-vb[System.TimeZone2.IsDaylightSavingTime#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/vb/IsDaylightSavingTime.vb#2)]  
  
 如果`dateTime`參數會指定無效的時間，方法呼叫會擲回<xref:System.ArgumentException>如果的值`dateTime`參數的<xref:System.DateTime.Kind%2A>屬性<xref:System.DateTimeKind.Local?displayProperty=nameWithType>; 否則此方法會傳回`false`。  
  
 呼叫<xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType>方法，以判斷是否要使用的時區<xref:System.TimeZoneInfo.StandardName%2A>的值或其<xref:System.TimeZoneInfo.DaylightName%2A>時顯示時區名稱的值。 請參閱 < 範例 > 一節的說明。  
  
   
  
## Examples  
 下列範例會定義名為的方法`DisplayDateWithTimeZoneName`使用<xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType>方法，以判斷是否要顯示的時區標準時間名稱或日光節約時間名稱。  
  
 [!code-csharp[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/cs/IsDaylightSavingTime.cs#1)]
 [!code-vb[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/vb/IsDaylightSavingTime.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="dateTime" /> 值的 <see cref="P:System.DateTime.Kind" /> 屬性是 <see cref="F:System.DateTimeKind.Local" />，而且 <paramref name="dateTime" /> 是無效的時間。</exception>
        <altmember cref="P:System.TimeZoneInfo.SupportsDaylightSavingTime" />
      </Docs>
    </Member>
    <Member MemberName="IsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public bool IsDaylightSavingTime (DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsDaylightSavingTime(valuetype System.DateTimeOffset dateTimeOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsDaylightSavingTime(DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="F#" Value="member this.IsDaylightSavingTime : DateTimeOffset -&gt; bool" Usage="timeZoneInfo.IsDaylightSavingTime dateTimeOffset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">日期和時間值。</param>
        <summary>表示指定的日期和時間是否在目前 <see cref="T:System.TimeZoneInfo" /> 物件時區的日光節約時間範圍內。</summary>
        <returns>如果 <paramref name="dateTimeOffset" /> 參數為日光節約時間則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 傳回值<xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType>所代表的時區之間的關聯性會影響<xref:System.TimeZoneInfo>物件並<xref:System.DateTimeOffset.Offset%2A>屬性`dateTimeOffset`參數。 如果`dateTimeOffset`並未對應到目前時區的位移與 Coordinated Universal Time (UTC)，目前的時區時間的時間方法轉換。 接著會判斷是否該日期和時間為日光節約時間。  
  
 如果所代表的時區<xref:System.TimeZoneInfo>物件不支援日光節約時間，此方法一律會傳回`false`。 若要判斷是否時區支援日光節約時間，擷取的值及其<xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A>屬性。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.TimeZoneInfo.SupportsDaylightSavingTime" />
      </Docs>
    </Member>
    <Member MemberName="IsInvalidTime">
      <MemberSignature Language="C#" Value="public bool IsInvalidTime (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsInvalidTime(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsInvalidTime(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.IsInvalidTime : DateTime -&gt; bool" Usage="timeZoneInfo.IsInvalidTime dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTime">日期和時間值。</param>
        <summary>指出特定日期和時間是否無效。</summary>
        <returns>如果 <paramref name="dateTime" /> 無效則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 無效的時間落在目前的調整規則的應用程式因為無法對應為 Coordinated Universal Time (UTC) 時區的時間範圍內。 一般而言，當時間往前移動日光節約時間，就會發生無效的時間。 請參閱 < 範例 > 一節的說明。  
  
 值<xref:System.DateTime.Kind%2A>的屬性`dateTime`參數會影響是否`dateTime`表示無效的時間，如下表所示。  
  
|DateTime.Kind 屬性|TimeZoneInfo 物件 （如果適用）|行為|  
|----------------------------|-------------------------------------------|--------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|判斷時間是否無效。|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType> 或非當地時區為準。|將轉換`dateTime`的時間<xref:System.TimeZoneInfo>物件，然後傳回`false`。|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|不適用。|假設`dateTime`的時間<xref:System.TimeZoneInfo>物件，並判斷它是否無效。|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|不適用。|傳回 `false`。|  
  
   
  
## Examples  
 在太平洋時區，日光節約時間開始於上午 2:00 2006 年 4 月 2日日。 下列程式碼在一分鐘的時間間隔，從上午 1:59 傳遞時間 2006 年 4 月 2日日到到凌晨 3:01 在 2006 年 4 月 2 日至<xref:System.TimeZoneInfo.IsInvalidTime%2A>方法的<xref:System.TimeZoneInfo>代表太平洋時區的物件。 主控台輸出指出，所有時間，從上午 2:00 2006 年 4 月 2日日到到上午 2:59 在 2006 年 4 月 2 日，均為無效。  
  
 [!code-csharp[System.TimeZone2.Class#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#9)]
 [!code-vb[System.TimeZone2.Class#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.TimeZoneInfo.IsAmbiguousTime" />
      </Docs>
    </Member>
    <Member MemberName="Local">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo Local { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.TimeZoneInfo Local" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.Local" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Local As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property TimeZoneInfo ^ Local { TimeZoneInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Local : TimeZoneInfo" Usage="System.TimeZoneInfo.Local" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.5">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得表示本地時區的 <see cref="T:System.TimeZoneInfo" /> 物件。</summary>
        <value>表示本地時區的物件。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當地時區是程式碼執行所在的電腦上的時區。  
  
> [!IMPORTANT]
>  您應該一律存取透過當地時區為準<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>屬性，而不是指派當地時區指派給<xref:System.TimeZoneInfo>物件變數。 這可防止<xref:System.TimeZoneInfo>物件變數失效呼叫<xref:System.TimeZoneInfo.ClearCachedData%2A>方法。  
  
 在 Windows 系統上<xref:System.TimeZoneInfo>所傳回的物件<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>屬性會反映設定**自動調整日光節約時間的時鐘**核取方塊控制項台中**日期和時間**應用程式。 如果未選取此核取方塊，當地時區的快取的副本就會包含任何日光節約時間資訊。 這表示：  
  
-   當地時區的<xref:System.TimeZoneInfo.GetAdjustmentRules%2A>方法會傳回其長度為零的陣列。  
  
-   當地時區<xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A>屬性會傳回`false`。  
  
-   本地時區已沒有模稜兩可或不正確的時間 (所有對<xref:System.TimeZoneInfo.IsAmbiguousTime%2A>或是<xref:System.TimeZoneInfo.IsInvalidTime%2A>傳回`false`)。  
  
-   所有呼叫<xref:System.TimeZoneInfo.IsDaylightSavingTime%2A>具有個別的本地時間傳回 false。  
  
 這不是 true，不過，如果當地時區的參考會使用擷取<xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A>方法。  
  
 <xref:System.TimeZoneInfo.Local%2A>屬性會對應至<xref:System.TimeZone.CurrentTimeZone%2A>屬性<xref:System.TimeZone>類別。  
  
   
  
## Examples  
 下列範例會擷取<xref:System.TimeZoneInfo>物件，代表當地時區，並將其顯示名稱、 標準時間名稱和日光節約時間名稱的輸出。  
  
 [!code-csharp[System.TimeZone2.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/ShowTimeZoneNames1.cs#2)]
 [!code-vb[System.TimeZone2.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/ShowTimeZoneNames1.vb#2)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/961fb70b-83f0-4dab-a042-cb5fcd817cf5">HOW TO：存取預先定義的 UTC 和當地時區物件</related>
      </Docs>
    </Member>
    <Member MemberName="StandardName">
      <MemberSignature Language="C#" Value="public string StandardName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StandardName" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.StandardName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property StandardName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ StandardName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.StandardName : string" Usage="System.TimeZoneInfo.StandardName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得時區標準時間的顯示名稱。</summary>
        <value>時區的標準時間之名稱。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 根據 Windows 作業系統安裝的文化特性當地語系化的顯示名稱。  
  
 <xref:System.TimeZoneInfo.StandardName%2A>屬性等於<xref:System.TimeZone.StandardName%2A>屬性<xref:System.TimeZone>類別。  
  
 如果作業系統語言是英文的值<xref:System.TimeZoneInfo.StandardName%2A>屬性通常是，但不是一定相同<xref:System.TimeZoneInfo.Id%2A>屬性。  
  
   
  
## Examples  
 下列範例會定義名為的方法`DisplayDateWithTimeZoneName`使用<xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29>方法，以判斷是否要顯示的時區標準時間名稱或日光節約時間名稱。  
  
 [!code-csharp[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/cs/IsDaylightSavingTime.cs#1)]
 [!code-vb[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/vb/IsDaylightSavingTime.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SupportsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public bool SupportsDaylightSavingTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportsDaylightSavingTime" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.SupportsDaylightSavingTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SupportsDaylightSavingTime As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SupportsDaylightSavingTime { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.SupportsDaylightSavingTime : bool" Usage="System.TimeZoneInfo.SupportsDaylightSavingTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，這個值表示時區是否具有任何日光節約時間規則。</summary>
        <value>如果時區支援日光節約時間則為 <see langword="true" />，否則為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A>屬性所傳回本地時區<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>屬性會反映在控制台中設定**日期和時間**應用程式的核取方塊可定義是否系統自動針對日光節約時間調整。 如果它是未選取，或沒有核取方塊會顯示的時區，此屬性的值為`false`。  
  
   
  
## Examples  
 下列範例會擷取集合的所有本機系統可用的時區，並顯示這些不支援日光節約時間名稱。  
  
 [!code-csharp[System.TimeZone2.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#4)]
 [!code-vb[System.TimeZone2.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#4)]
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.IDeserializationCallback.OnDeserialization">
      <MemberSignature Language="C#" Value="void IDeserializationCallback.OnDeserialization (object sender);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub OnDeserialization (sender As Object) Implements IDeserializationCallback.OnDeserialization" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System::Object ^ sender) = System::Runtime::Serialization::IDeserializationCallback::OnDeserialization;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="sender">初始化回呼 (Callback) 的物件。 這個參數的功能目前未實作。</param>
        <summary>在物件完成還原序列化時執行。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Runtime.Serialization.SerializationException"><see cref="T:System.TimeZoneInfo" /> 物件包含無效或損毀的資料。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="info">要填入資料的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 物件。</param>
        <param name="context">這個序列化的目的端 (請參閱 <see cref="T:System.Runtime.Serialization.StreamingContext" />)。</param>
        <summary>使用序列化目前 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 物件所需的資料，填入 <see cref="T:System.TimeZoneInfo" /> 物件。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="info" /> 參數為 <see langword="null" />。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">需要完全信任立即呼叫端。 此成員不能由部分信任或不透明的程式碼。</permission>
      </Docs>
    </Member>
    <Member MemberName="ToSerializedString">
      <MemberSignature Language="C#" Value="public string ToSerializedString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToSerializedString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ToSerializedString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToSerializedString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToSerializedString();" />
      <MemberSignature Language="F#" Value="member this.ToSerializedString : unit -&gt; string" Usage="timeZoneInfo.ToSerializedString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>將目前的 <see cref="T:System.TimeZoneInfo" /> 物件轉換為序列化字串。</summary>
        <returns>代表目前 <see cref="T:System.TimeZoneInfo" /> 物件的字串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常不會在 Windows 系統登錄中定義的時區所依賴的應用程式或[ICU 程式庫](http://userguide.icu-project.org/datetime/timezone)可以使用 Linux 和 macOScan<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A>方法來具現化為的所需的時區<xref:System.TimeZoneInfo>物件。 應用程式接著可以呼叫<xref:System.TimeZoneInfo.ToSerializedString%2A>將時區的物件轉換為字串的方法。  
  
 <xref:System.TimeZoneInfo>物件應該也儲存在其中的應用程式可以擷取它時所需的位置。 可能的位置包括：  
  
-   在 Windows 系統上登錄。  
  
-   應用程式資源檔。  
  
-   外部檔案，例如文字檔案。  
  
   
  
## Examples  
 下列範例會嘗試擷取南極大陸/南極從本機系統的時區。 如果失敗，此程式碼會嘗試擷取應用程式目錄中的文字檔案的相關時區資訊。 如果此嘗試失敗，程式碼會建立時區，並將資訊寫入至文字檔。  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#4)]
 [!code-vb[System.TimeZone2.CreateTimeZone#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeZoneInfo.FromSerializedString(System.String)" />
        <related type="Article" href="https://msdn.microsoft.com/library/3c96d83a-a057-4496-abb0-8f4b12712558">HOW TO：將時區儲存到內嵌資源</related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="timeZoneInfo.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回目前 <see cref="T:System.TimeZoneInfo" /> 物件的顯示名稱。</summary>
        <returns>目前 <see cref="P:System.TimeZoneInfo.DisplayName" /> 物件的 <see cref="T:System.TimeZoneInfo" /> 屬性值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當指派的集合，包含<xref:System.TimeZoneInfo>物件清單控制項，例如<xref:System.Windows.Forms.ListBox>控制項，會自動呼叫控制項<xref:System.TimeZoneInfo.ToString%2A>方法來擷取描述來表示清單中的每個物件的字串。 如此一來，您不需要為字串時，儲存物件的有意義的描述，使用者不需要使用該字串，若要從集合擷取該物件。 請參閱[如何：列舉電腦上展示的時區](~/docs/standard/datetime/enumerate-time-zones.md)如需詳細資訊。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Utc">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo Utc { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.TimeZoneInfo Utc" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.Utc" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Utc As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property TimeZoneInfo ^ Utc { TimeZoneInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Utc : TimeZoneInfo" Usage="System.TimeZoneInfo.Utc" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得表示 Coordinated Universal Time (UTC) 時區的 <see cref="T:System.TimeZoneInfo" /> 物件。</summary>
        <value>表示 Coordinated Universal Time (UTC) 時區的物件。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這是內建的物件;相關的資訊<xref:System.TimeZoneInfo>物件不從 Windows 系統上，以及從登錄擷取[ICU 文件庫](http://userguide.icu-project.org/datetime/timezone)Linux 和 macOS 上。  
  
> [!IMPORTANT]
>  您應該一律存取透過 Coordinated Universal Time (UTC) 區域<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>屬性，而不是指派至 UTC 時區<xref:System.TimeZoneInfo>物件變數。 這可防止<xref:System.TimeZoneInfo>物件變數失效呼叫<xref:System.TimeZoneInfo.ClearCachedData%2A>方法。  
  
 國際標準時間之前稱做為格林威治標準時間 (GMT)。  
  
   
  
## Examples  
 下列範例會擷取<xref:System.TimeZoneInfo>物件，表示 Coordinated Universal Time (UTC)，並將其顯示名稱、 標準時間名稱和日光節約時間名稱的輸出。  
  
 [!code-csharp[System.TimeZone2.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#3)]
 [!code-vb[System.TimeZone2.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#3)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/961fb70b-83f0-4dab-a042-cb5fcd817cf5">HOW TO：存取預先定義的 UTC 和當地時區物件</related>
      </Docs>
    </Member>
  </Members>
</Type>