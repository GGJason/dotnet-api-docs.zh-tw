<Type Name="TimeZoneInfo" FullName="System.TimeZoneInfo">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3190022f4f0c8167570d4dfa17fea05691d4aa2b" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36429334" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class TimeZoneInfo : IEquatable&lt;TimeZoneInfo&gt;, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit TimeZoneInfo extends System.Object implements class System.IEquatable`1&lt;class System.TimeZoneInfo&gt;, class System.Runtime.Serialization.IDeserializationCallback, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.TimeZoneInfo" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TimeZoneInfo&#xA;Implements IDeserializationCallback, IEquatable(Of TimeZoneInfo), ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class TimeZoneInfo sealed : IEquatable&lt;TimeZoneInfo ^&gt;, System::Runtime::Serialization::IDeserializationCallback, System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type TimeZoneInfo = class&#xA;    interface IEquatable&lt;TimeZoneInfo&gt;&#xA;    interface ISerializable&#xA;    interface IDeserializationCallback" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.TimeZoneInfo&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.IDeserializationCallback</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents any time zone in the world.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 時區是使用相同時間的地理區域。  
  
 <xref:System.TimeZoneInfo>類別透過提供顯著的增強功能<xref:System.TimeZone>類別，可提供有限的功能。  
  
 <xref:System.TimeZone>類別會辨識只當地時區，並可以轉換為國際標準時間 (UTC) 與本地時間之間的時間。 A<xref:System.TimeZoneInfo>物件可代表任何時區、 和方法<xref:System.TimeZoneInfo>類別可以用來將一個時區中的時間轉換成任何其他時區中相對應的時間。 成員<xref:System.TimeZoneInfo>類別支援下列作業：  
  
-   正在擷取已定義作業系統的時區。  
  
-   列舉系統可用的時區。  
  
-   轉換不同的時區之間的時間。  
  
-   建立新的時區，尚未定義作業系統。  
  
-   序列化時區，供日後擷取。  
  
> [!NOTE]
>  執行個體<xref:System.TimeZoneInfo>類別是不變。 一旦具現化物件，就無法修改其值。  
  
 您無法具現化<xref:System.TimeZoneInfo>物件使用`new`關鍵字。 相反地，您必須呼叫其中一個靜態成員<xref:System.TimeZoneInfo>類別下表所示。  
  
|靜態成員名稱|描述|  
|------------------------|-----------------|  
|<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> 方法|從應用程式提供的資料，請建立自訂時區。|  
|<xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> 方法|具現化時區識別項為基礎的系統登錄中定義的時區。|  
|<xref:System.TimeZoneInfo.FromSerializedString%2A> 方法|還原序列化字串值來重新建立先前序列化<xref:System.TimeZoneInfo>物件。|  
|<xref:System.TimeZoneInfo.GetSystemTimeZones%2A> 方法|傳回可列舉<xref:System.Collections.ObjectModel.ReadOnlyCollection%601>的<xref:System.TimeZoneInfo>物件，代表所有本機系統可用的時區。|  
|<xref:System.TimeZoneInfo.Local%2A> 屬性|具現化<xref:System.TimeZoneInfo>代表本地時區的物件。|  
|<xref:System.TimeZoneInfo.Utc%2A> 屬性|具現化<xref:System.TimeZoneInfo>代表 UTC 時區的物件。|  
  
 您可以使用<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A>方法來建立本機系統登錄中未定義的時區。 然後您可以使用<xref:System.TimeZoneInfo.ToSerializedString%2A>時區物件的資訊儲存為字串時，可以儲存至應用程式存取某種形式的屬性。 您可以使用<xref:System.TimeZoneInfo.FromSerializedString%2A>方法，將序列化的字串轉換回<xref:System.TimeZoneInfo>物件。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="BaseUtcOffset">
      <MemberSignature Language="C#" Value="public TimeSpan BaseUtcOffset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan BaseUtcOffset" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.BaseUtcOffset" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BaseUtcOffset As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan BaseUtcOffset { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseUtcOffset : TimeSpan" Usage="System.TimeZoneInfo.BaseUtcOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the time difference between the current time zone's standard time and Coordinated Universal Time (UTC).</summary>
        <value>表示目前時區標準時間與國際標準時間 (UTC) 時差的物件。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 所傳回的時間範圍<xref:System.TimeZoneInfo.BaseUtcOffset%2A>屬性範圍 14 個小時 （14 小時晚於 Coordinated Universal Time (UTC) 時區） 到-14 小時 （14 小時 utc 的時區為準）。 晚於 UTC 的時區具有正數的位移。是 utc 的時區具有負數的位移。  
  
 <xref:System.TimeZoneInfo.BaseUtcOffset%2A>值會以整數分鐘數表示。 它不能包含小數的分鐘數。  
  
> [!NOTE]
>  因為<xref:System.TimeZoneInfo.BaseUtcOffset%2A>屬性<xref:System.TimeZoneInfo>物件而非<xref:System.TimeZoneInfo.AdjustmentRule>物件，<xref:System.TimeZoneInfo>類別適用於單一位移與 utc 之間所有時區的調整。 若要反映已經修改，其與 UTC 相差的時區，您必須建立新的時區使用<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A>方法。  
  
 <xref:System.TimeZoneInfo.BaseUtcOffset%2A>屬性不同於<xref:System.TimeZoneInfo.GetUtcOffset%2A>方法，以下列方式：  
  
-   <xref:System.TimeZoneInfo.BaseUtcOffset%2A>屬性會傳回 UTC 時區的標準時間; 之間的差異<xref:System.TimeZoneInfo.GetUtcOffset%2A>方法傳回時間 UTC 時區的時間，在特定時間點之間的差異。  
  
-   <xref:System.TimeZoneInfo.GetUtcOffset%2A>方法會反映應用程式調整規則的時區;<xref:System.TimeZoneInfo.BaseUtcOffset%2A>屬性則否。  
  
   
  
## Examples  
 下列範例會使用<xref:System.TimeZoneInfo.BaseUtcOffset%2A>屬性來顯示當地時間與國際標準時間 (UTC) 之間的差異。  
  
 [!code-csharp[System.TimeZone2.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#1)]
 [!code-vb[System.TimeZone2.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.TimeZoneInfo.GetUtcOffset" />
      </Docs>
    </Member>
    <Member MemberName="ClearCachedData">
      <MemberSignature Language="C#" Value="public static void ClearCachedData ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ClearCachedData() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ClearCachedData" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ClearCachedData ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ClearCachedData();" />
      <MemberSignature Language="F#" Value="static member ClearCachedData : unit -&gt; unit" Usage="System.TimeZoneInfo.ClearCachedData " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Clears cached time zone data.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 快取的時區資料包括當地時區、 國際標準時間 (UTC) 時區，以及藉由使用下列方法擷取任何時區資料<xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A>和<xref:System.TimeZoneInfo.GetSystemTimeZones%2A>。  
  
 您可能會呼叫<xref:System.TimeZoneInfo.ClearCachedData%2A>方法，以減少記憶體專用於應用程式的快取的時區資訊或以反映在本機系統時區已變更的事實。  
  
 建議您不要儲存在本機與 UTC 時區的參考。 若要在呼叫之後<xref:System.TimeZoneInfo.ClearCachedData%2A>方法，這些物件的變數會是未定義<xref:System.TimeZoneInfo>不再參考的物件<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>或<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>。 例如，下列程式碼中，第二個呼叫<xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType>方法會擲回<xref:System.ArgumentException>因為`local`變數就不再被視為等於<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>。  
  
 [!code-csharp[System.TimeZone2.BestPractices#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.BestPractices/cs/System.TimeZone2.BestPractices.cs#1)]
 [!code-vb[System.TimeZone2.BestPractices#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.BestPractices/vb/System.TimeZone2.BestPractices.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ConvertTime">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Converts a time to the time in a particular time zone.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ConvertTime">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTime (DateTime dateTime, TimeZoneInfo destinationTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTime(valuetype System.DateTime dateTime, class System.TimeZoneInfo destinationTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTime(DateTime dateTime, TimeZoneInfo ^ destinationTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTime : DateTime * TimeZoneInfo -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTime (dateTime, destinationTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
        <Parameter Name="destinationTimeZone" Type="System.TimeZoneInfo" />
      </Parameters>
      <Docs>
        <param name="dateTime">The date and time to convert.</param>
        <param name="destinationTimeZone">The time zone to convert <c>dateTime</c> to.</param>
        <summary>Converts a time to the time in a particular time zone.</summary>
        <returns>The date and time in the destination time zone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 執行轉換時<xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29>方法適用於任何調整規則生效的`destinationTimeZone`時區。  
  
 這個多載<xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%29>方法會判斷來源時區的值從`dateTime`參數的<xref:System.DateTime.Kind%2A>屬性，如下表所示。  
  
|Kind 屬性值|來源時區|方法的行為|  
|-------------------------|----------------------|---------------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Local%2A>|將本地時間轉換為時間`destinationTimeZone`。|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Utc%2A>|將轉換為國際標準時間 (UTC) 時間`destinationTimeZone`。|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|假設為<xref:System.TimeZoneInfo.Local%2A>。|將本地時間轉換為時間`destinationTimeZone`。|  
  
 <xref:System.DateTime.Kind%2A>屬性傳回之<xref:System.DateTime>值會設定為下表所示。  
  
|條件|傳回類型的屬性值|  
|---------------|----------------------------------|  
|`destinationTimeZone` 為 <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>。|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
|`destinationTimeZone` 為 <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>。|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|  
|所有其他日期和時間值和目標時區。|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|  
  
 如果值`dateTime`參數是模稜兩可的當地時間，將它解譯為標準時間。 如果`dateTime`參數是無效的本機時間，這個方法會擲回<xref:System.ArgumentException>。  
  
 如果轉換`dateTime`產生的日期和時間值早於<xref:System.DateTime.MinValue?displayProperty=nameWithType>或更晚<xref:System.DateTime.MaxValue?displayProperty=nameWithType>，這個方法會傳回<xref:System.DateTime.MinValue?displayProperty=nameWithType>或<xref:System.DateTime.MaxValue?displayProperty=nameWithType>分別。  
  
 您也可以藉由呼叫轉換或 UTC<xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A>和<xref:System.TimeZoneInfo.ConvertTimeToUtc%2A>方法。  
  
   
  
## Examples  
 下列範例會美國和加拿大的美加東部時區中，將日期和時間值的陣列轉換為時間。 它會顯示來源時區取決於<xref:System.DateTime.Kind%2A?displayProperty=nameWithType>來源的屬性，<xref:System.DateTime>值。 它也說明了<xref:System.TimeZoneInfo.ConvertTime%2A>方法會調整時區列入考量，因為來源和目的地時區中發生上午 2:00 的時區調整 在 2010 年 11 月 7日日。  
  
 [!code-csharp[System.TimeZoneInfo.ConvertTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timezoneinfo.converttime/cs/converttime1.cs#1)]
 [!code-vb[System.TimeZoneInfo.ConvertTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timezoneinfo.converttime/vb/converttime1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The value of the <paramref name="dateTime" /> parameter represents an invalid time.</exception>
        <exception cref="T:System.ArgumentNullException">The value of the <paramref name="destinationTimeZone" /> parameter is <see langword="null" />.</exception>
        <block subset="none" type="usage">
          <para>在 [！INCLUDE[winxp](~/includes/winxp-md.md)] 系統，這個方法會辨識只在目前的調整規則執行轉換，如果<paramref name="dateTime" />會被視為本地時間或<paramref name="destinationTimeZone" />是<see cref="P:System.TimeZoneInfo.Local" />。如此一來，方法可能無法正確地轉換期間，目前的調整規則生效之前的時間。如需詳細資訊，請參閱 &lt; 呼叫者 &gt; 一節中的附註<see cref="P:System.TimeZoneInfo.Local" />屬性。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ConvertTime">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ConvertTime (DateTimeOffset dateTimeOffset, TimeZoneInfo destinationTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ConvertTime(valuetype System.DateTimeOffset dateTimeOffset, class System.TimeZoneInfo destinationTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTime(System.DateTimeOffset,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset ConvertTime(DateTimeOffset dateTimeOffset, TimeZoneInfo ^ destinationTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTime : DateTimeOffset * TimeZoneInfo -&gt; DateTimeOffset" Usage="System.TimeZoneInfo.ConvertTime (dateTimeOffset, destinationTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" />
        <Parameter Name="destinationTimeZone" Type="System.TimeZoneInfo" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">The date and time to convert.</param>
        <param name="destinationTimeZone">The time zone to convert <c>dateTime</c> to.</param>
        <summary>Converts a time to the time in a particular time zone.</summary>
        <returns>The date and time in the destination time zone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 執行轉換時<xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29>方法適用於任何調整規則生效的`destinationTimeZone`時區。  
  
 這個多載不同於其他多載的<xref:System.TimeZoneInfo.ConvertTime%2A>方法接受<xref:System.DateTimeOffset>做為其第一個參數的值。 這會識別的日期和時間與國際標準時間 (UTC) 的位移，而不是日期和時間以特定的時區。 如此一來，`dateTimeOffset`參數不可以模稜兩可的時間或無效的時間表示。  
  
 在轉換`dateTimeOffset`值目的地時區，這個方法的時間會考量任何目的地時區中的作用中的調整規則。  
  
 如果轉換`dateTimeOffset`產生的日期和時間值早於<xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType>或更晚<xref:System.DateTimeOffset.MaxValue?displayProperty=nameWithType>，這個方法會傳回<xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType>或<xref:System.DateTimeOffset.MaxValue?displayProperty=nameWithType>分別。  
  
   
  
## Examples  
 下列範例會將陣列轉換<xref:System.DateTimeOffset>美國和加拿大的美加東部時區的時間值。 它說明了<xref:System.TimeZoneInfo.ConvertTime%2A>方法會調整時區列入考量，因為來源和目的地時區中發生上午 2:00 的時區調整 在 2010 年 11 月 7日日。  
  
 [!code-csharp[System.TimeZoneInfo.ConvertTime#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timezoneinfo.converttime/cs/converttime2.cs#2)]
 [!code-vb[System.TimeZoneInfo.ConvertTime#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timezoneinfo.converttime/vb/converttime2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The value of the <paramref name="destinationTimeZone" /> parameter is <see langword="null" />.</exception>
        <block subset="none" type="usage">
          <para>在 [！INCLUDE[winxp](~/includes/winxp-md.md)] 系統中，這個方法適用於在目前調整規則的時區轉換成<paramref name="dateTimeOffset" />會被視為本地時間或<paramref name="destinationTimeZone" />是<see cref="P:System.TimeZoneInfo.Local" />。如此一來，方法可能無法正確地轉換期間，目前的調整規則生效之前的時間。如需詳細資訊，請參閱 &lt; 呼叫者 &gt; 一節中的附註<see cref="P:System.TimeZoneInfo.Local" />屬性。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ConvertTime">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTime (DateTime dateTime, TimeZoneInfo sourceTimeZone, TimeZoneInfo destinationTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTime(valuetype System.DateTime dateTime, class System.TimeZoneInfo sourceTimeZone, class System.TimeZoneInfo destinationTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTime(DateTime dateTime, TimeZoneInfo ^ sourceTimeZone, TimeZoneInfo ^ destinationTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTime : DateTime * TimeZoneInfo * TimeZoneInfo -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTime (dateTime, sourceTimeZone, destinationTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
        <Parameter Name="sourceTimeZone" Type="System.TimeZoneInfo" />
        <Parameter Name="destinationTimeZone" Type="System.TimeZoneInfo" />
      </Parameters>
      <Docs>
        <param name="dateTime">The date and time to convert.</param>
        <param name="sourceTimeZone">The time zone of <c>dateTime</c>.</param>
        <param name="destinationTimeZone">The time zone to convert <c>dateTime</c> to.</param>
        <summary>Converts a time from one time zone to another.</summary>
        <returns>The date and time in the destination time zone that corresponds to the <paramref name="dateTime" /> parameter in the source time zone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 執行轉換時<xref:System.TimeZoneInfo.ConvertTime%2A>方法適用於任何調整規則生效的`destinationTimeZone`時區。  
  
 值<xref:System.DateTime.Kind%2A>屬性`dateTime`參數必須對應到`sourceTimeZone`參數，如下表所示。  
  
|DateTime.Kind 值|sourceTimeZone 值|方法的行為|  
|-------------------------|--------------------------|---------------------|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|等於<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>。|將轉換`dateTime`目的地時區的時間。|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|不等於<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>。|擲回<xref:System.ArgumentException>。|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|等於<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>。|將轉換`dateTime`目的地時區的時間。|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|不等於<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>。|擲回<xref:System.ArgumentException>。|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|任何。|將轉換`dateTime`目的地時區的時間。|  
  
 您也可以轉換或與國際標準時間 (UTC)，藉由呼叫<xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A>和<xref:System.TimeZoneInfo.ConvertTimeToUtc%2A>方法。  
  
 <xref:System.DateTime.Kind%2A>屬性傳回之<xref:System.DateTime>值會設定為下表所示。  
  
|條件|傳回類型的屬性值|  
|---------------|----------------------------------|  
|`destinationTimeZone` 引數為 <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>。|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
|`destinationTimeZone` 引數為 <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>。|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|  
|所有其他日期和時間值、 來源時區，以及目的地的時區。|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|  
  
 如果值`dateTime`參數是模稜兩可的時間來源時區中，將它解譯為標準時間。 如果`dateTime`參數是無效的時間來源時區中，這個方法會擲回<xref:System.ArgumentException>。  
  
 如果轉換`dateTime`產生的日期和時間值早於<xref:System.DateTime.MinValue?displayProperty=nameWithType>或更晚<xref:System.DateTime.MaxValue?displayProperty=nameWithType>，這個方法會傳回<xref:System.DateTime.MinValue?displayProperty=nameWithType>或<xref:System.DateTime.MaxValue?displayProperty=nameWithType>分別。  
  
 <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%2CSystem.TimeZoneInfo%29>方法會擲回<xref:System.ArgumentException>例外狀況如果<xref:System.DateTime.Kind%2A?displayProperty=nameWithType>屬性`dateTime`引數是<xref:System.DateTimeKind.Local?displayProperty=nameWithType>但`sourceTimeZone`引數不是<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>。 若要判斷來源時區為本地時區或國際標準時間區域，方法會測試而不是測試使用的值是否相等的參考相等<xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29>方法。 請注意，<xref:System.TimeZoneInfo>物件，代表本地時區和，藉由呼叫擷取<xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A>方法就不需要使用參考相等<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>。 此外，<xref:System.TimeZoneInfo>物件，擷取逐一查看所傳回的集合以及代表的本機或通用時區<xref:System.TimeZoneInfo.GetSystemTimeZones%2A>方法就不需要使用參考相等<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>或<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>。 或者，您可以呼叫<xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%28System.DateTime%2CSystem.String%2CSystem.String%29>方法。  
  
   
  
## Examples  
 下列範例說明使用<xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%2CSystem.TimeZoneInfo%29>方法，將從夏威夷標準時間轉換為本地時間。  
  
 [!code-csharp[System.TimeZone2.Concepts#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Concepts/CS/TimeZone2Concepts.cs#9)]
 [!code-vb[System.TimeZone2.Concepts#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Concepts/VB/TimeZone2Concepts.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The <see cref="P:System.DateTime.Kind" /> property of the <paramref name="dateTime" /> parameter is <see cref="F:System.DateTimeKind.Local" />, but the <paramref name="sourceTimeZone" /> parameter does not equal <see cref="F:System.DateTimeKind.Local" />.  -or-  The <see cref="P:System.DateTime.Kind" /> property of the <paramref name="dateTime" /> parameter is <see cref="F:System.DateTimeKind.Utc" />, but the <paramref name="sourceTimeZone" /> parameter does not equal <see cref="P:System.TimeZoneInfo.Utc" />.  -or-  The <paramref name="dateTime" /> parameter is an invalid time (that is, it represents a time that does not exist because of a time zone's adjustment rules).</exception>
        <exception cref="T:System.ArgumentNullException">The <paramref name="sourceTimeZone" /> parameter is <see langword="null" />.  -or-  The <paramref name="destinationTimeZone" /> parameter is <see langword="null" />.</exception>
        <block subset="none" type="usage">
          <para>在 [！INCLUDE[winxp](~/includes/winxp-md.md)] 系統，這個方法會套用在目前調整規則執行轉換，如果時<paramref name="dateTime" />如果視為本地時間、<paramref name="sourceTimeZone" />是<see cref="P:System.TimeZoneInfo.Local" />，或如果<paramref name="destinationTimeZone" />是<see cref="P:System.TimeZoneInfo.Local" />。如此一來，方法可能無法正確地轉換期間，目前的調整規則生效之前的時間。如需詳細資訊，請參閱 &lt; 呼叫者 &gt; 一節中的附註<see cref="P:System.TimeZoneInfo.Local" />屬性。</para>
        </block>
        <altmember cref="Overload:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ConvertTimeBySystemTimeZoneId">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Converts a time to the time in another time zone based on a time zone identifier.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ConvertTimeBySystemTimeZoneId">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeBySystemTimeZoneId (DateTime dateTime, string destinationTimeZoneId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeBySystemTimeZoneId(valuetype System.DateTime dateTime, string destinationTimeZoneId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(System.DateTime,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeBySystemTimeZoneId(DateTime dateTime, System::String ^ destinationTimeZoneId);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeBySystemTimeZoneId : DateTime * string -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId (dateTime, destinationTimeZoneId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
        <Parameter Name="destinationTimeZoneId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dateTime">The date and time to convert.</param>
        <param name="destinationTimeZoneId">The identifier of the destination time zone.</param>
        <summary>Converts a time to the time in another time zone based on the time zone's identifier.</summary>
        <returns>The date and time in the destination time zone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 執行轉換時<xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%2A>方法適用於任何調整規則生效的`destinationTimeZoneId`時區。  
  
 這個多載會類似於呼叫<xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%29>方法，但是它可讓您依其識別項，而不是物件參考所指定目的地的時區。 您必須將時間轉換不擷取對應至它的時區物件和您不需要知道轉換後的時間是否為標準或日光節約時間時，這個方法是最有用。  
  
 <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%28System.DateTime%2CSystem.String%29>方法會判斷來源時區的值從`dateTime`參數的<xref:System.DateTime.Kind%2A>屬性，如下表所示。  
  
|Kind 屬性值|來源時區|方法的行為|  
|-------------------------|----------------------|---------------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Local%2A>|將本地時間轉換為時間`destinationTimeZone`。|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Utc%2A>|將轉換為國際標準時間 (UTC) 時間`destinationTimeZone`。|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|假設為<xref:System.TimeZoneInfo.Local%2A>。|將本地時間轉換為時間`destinationTimeZone`。|  
  
 <xref:System.DateTime.Kind%2A>屬性傳回之<xref:System.DateTime>值會設定為下表所示。  
  
|條件|傳回類型的屬性值|  
|---------------|----------------------------------|  
|`destinationTimeZone` 為 `TimeZoneInfo.Utc.Id`。|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
|任何其他`destinationTimeZone`值。|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|  
  
 如果值`dateTime`參數是模稜兩可的當地時間，將它解譯為標準時間。 如果`dateTime`參數是無效的本機時間，這個方法會擲回<xref:System.ArgumentException>。  
  
 如果轉換`dateTime`產生的日期和時間值早於<xref:System.DateTime.MinValue?displayProperty=nameWithType>或更晚<xref:System.DateTime.MaxValue?displayProperty=nameWithType>，這個方法會傳回<xref:System.DateTime.MinValue?displayProperty=nameWithType>或<xref:System.DateTime.MaxValue?displayProperty=nameWithType>分別。  
  
 這個方法會擷取其識別碼由所指定的時區`destinationTimeZoneId`從登錄參數。 無法擷取您建立使用的時區物件<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A>方法。 `destinationTimeZoneId`參數必須正確對應到時區的登錄機碼的長度，但不是在案例中，成功的相符項目發生; 也就是比較的`destinationTimeZoneId`時區識別項不區分大小寫。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationTimeZoneId" /> is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidTimeZoneException">The time zone identifier was found, but the registry data is corrupted.</exception>
        <exception cref="T:System.Security.SecurityException">The process does not have the permissions required to read from the registry key that contains the time zone information.</exception>
        <exception cref="T:System.TimeZoneNotFoundException">The <paramref name="destinationTimeZoneId" /> identifier was not found on the local system.</exception>
      </Docs>
    </Member>
    <Member MemberName="ConvertTimeBySystemTimeZoneId">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ConvertTimeBySystemTimeZoneId (DateTimeOffset dateTimeOffset, string destinationTimeZoneId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ConvertTimeBySystemTimeZoneId(valuetype System.DateTimeOffset dateTimeOffset, string destinationTimeZoneId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(System.DateTimeOffset,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset ConvertTimeBySystemTimeZoneId(DateTimeOffset dateTimeOffset, System::String ^ destinationTimeZoneId);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeBySystemTimeZoneId : DateTimeOffset * string -&gt; DateTimeOffset" Usage="System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId (dateTimeOffset, destinationTimeZoneId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" />
        <Parameter Name="destinationTimeZoneId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">The date and time to convert.</param>
        <param name="destinationTimeZoneId">The identifier of the destination time zone.</param>
        <summary>Converts a time to the time in another time zone based on the time zone's identifier.</summary>
        <returns>The date and time in the destination time zone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 執行轉換時<xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%2A>方法適用於任何調整規則生效的`destinationTimeZoneId`時區。  
  
 這個多載等同於呼叫<xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%29>方法，但是它可讓您依其識別項，而不是物件參考所指定目的地的時區。 您必須將時間轉換不擷取對應至它的時區物件和您不需要知道轉換後的時間是否為標準或日光節約時間時，這個方法是最有用。  
  
 因為`dateTimeOffset`參數代表的日期，以及該時間的時間與國際標準時間 (UTC) 位移無法代表模稜兩可的時間無效。  
  
 這個方法會擷取其識別碼由所指定的時區`destinationTimeZoneId`從登錄參數。 無法擷取您建立使用的時區物件<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A>方法。 `destinationTimeZoneId`參數必須正確對應到時區的登錄機碼的長度，但不是在案例中，成功的相符項目發生; 也就是比較的`destinationTimeZoneId`時區識別項不區分大小寫。  
  
 在轉換`dateTimeOffset`值目的地時區，該方法的時間會考量任何目的地時區中的作用中的調整規則。  
  
 如果轉換`dateTimeOffset`產生的日期和時間值早於<xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType>或更晚<xref:System.DateTimeOffset.MaxValue?displayProperty=nameWithType>，這個方法會傳回<xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType>或<xref:System.DateTimeOffset.MaxValue?displayProperty=nameWithType>分別。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationTimeZoneId" /> is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidTimeZoneException">The time zone identifier was found but the registry data is corrupted.</exception>
        <exception cref="T:System.Security.SecurityException">The process does not have the permissions required to read from the registry key that contains the time zone information.</exception>
        <exception cref="T:System.TimeZoneNotFoundException">The <paramref name="destinationTimeZoneId" /> identifier was not found on the local system.</exception>
      </Docs>
    </Member>
    <Member MemberName="ConvertTimeBySystemTimeZoneId">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeBySystemTimeZoneId (DateTime dateTime, string sourceTimeZoneId, string destinationTimeZoneId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeBySystemTimeZoneId(valuetype System.DateTime dateTime, string sourceTimeZoneId, string destinationTimeZoneId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(System.DateTime,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeBySystemTimeZoneId(DateTime dateTime, System::String ^ sourceTimeZoneId, System::String ^ destinationTimeZoneId);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeBySystemTimeZoneId : DateTime * string * string -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId (dateTime, sourceTimeZoneId, destinationTimeZoneId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
        <Parameter Name="sourceTimeZoneId" Type="System.String" />
        <Parameter Name="destinationTimeZoneId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dateTime">The date and time to convert.</param>
        <param name="sourceTimeZoneId">The identifier of the source time zone.</param>
        <param name="destinationTimeZoneId">The identifier of the destination time zone.</param>
        <summary>Converts a time from one time zone to another based on time zone identifiers.</summary>
        <returns>The date and time in the destination time zone that corresponds to the <paramref name="dateTime" /> parameter in the source time zone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 執行轉換時<xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%2A>方法適用於任何調整規則生效的`destinationTimeZoneId`時區。  
  
 雖然類似於<xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType>方法，您可以使用<xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%28System.DateTime%2CSystem.String%2CSystem.String%29?displayProperty=nameWithType>來指定來源和目的地時區使用其識別碼，而不是其<xref:System.TimeZoneInfo>物件。 您必須將時間轉換不擷取對應至它的時區物件和您不需要知道轉換後的時間是否為標準或日光節約時間時，這個方法是最有用。  
  
 這個方法會擷取時區的識別項是`sourceTimeZoneId`和`destinationTimeZoneId`從登錄參數。 無法擷取使用所建立的時區物件<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A>方法。  
  
 值<xref:System.DateTime.Kind%2A>屬性`dateTime`參數必須對應到`sourceTimeZoneId`參數，如下表所示。  
  
|DateTime.Kind 值|sourceTimeZone 值|方法的行為|  
|-------------------------|--------------------------|---------------------|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|等於`TimeZoneInfo.Utc.Id`。|將轉換`dateTime`目的地時區的時間。|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|不等於`TimeZoneInfo.Utc.Id`。|擲回<xref:System.ArgumentException>。|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|等於`TimeZoneInfo.Local.Id`。|將轉換`dateTime`目的地時區的時間。|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|不等於`TimeZoneInfo.Local.Id`。|擲回<xref:System.ArgumentException>。|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|任何。|將轉換`dateTime`目的地時區的時間。|  
  
 因為其依賴呼叫<xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A>方法，<xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%2A>方法會執行不區分大小寫的搜尋，找出對應到時區`sourceTimeZoneId`和`destinationTimeZoneId`。  
  
 如果值`dateTime`參數是模稜兩可的時間來源時區中，將它解譯為標準時間。 如果`dateTime`參數是無效的時間來源時區中，這個方法會擲回<xref:System.ArgumentException>。  
  
 <xref:System.DateTime.Kind%2A>屬性傳回之<xref:System.DateTime>值設定為<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>除非目的地時區是國際標準時間 (UTC)，在這種情況下它設定為<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>。  
  
   
  
## Examples  
 下列範例會使用<xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%28System.DateTime%2CSystem.String%2CSystem.String%29?displayProperty=nameWithType>八個城市的世界中，以本機系統時間顯示時間，對應的方法。  
  
 [!code-csharp[System.TimeZone2.Conversions#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Conversions/cs/System.TimeZone2.Conversions.cs#3)]
 [!code-vb[System.TimeZone2.Conversions#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Conversions/vb/System.TimeZone2.Conversions.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The <see cref="P:System.DateTime.Kind" /> property of the <paramref name="dateTime" /> parameter does not correspond to the source time zone.  -or-  <paramref name="dateTime" /> is an invalid time in the source time zone.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sourceTimeZoneId" /> is <see langword="null" />.  -or-  <paramref name="destinationTimeZoneId" /> is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidTimeZoneException">The time zone identifiers were found, but the registry data is corrupted.</exception>
        <exception cref="T:System.Security.SecurityException">The user does not have the permissions required to read from the registry keys that hold time zone data.</exception>
        <exception cref="T:System.TimeZoneNotFoundException">The <paramref name="sourceTimeZoneId" /> identifier was not found on the local system.  -or-  The <paramref name="destinationTimeZoneId" /> identifier was not found on the local system.</exception>
      </Docs>
    </Member>
    <Member MemberName="ConvertTimeFromUtc">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeFromUtc (DateTime dateTime, TimeZoneInfo destinationTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeFromUtc(valuetype System.DateTime dateTime, class System.TimeZoneInfo destinationTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeFromUtc(System.DateTime,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeFromUtc(DateTime dateTime, TimeZoneInfo ^ destinationTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeFromUtc : DateTime * TimeZoneInfo -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeFromUtc (dateTime, destinationTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
        <Parameter Name="destinationTimeZone" Type="System.TimeZoneInfo" />
      </Parameters>
      <Docs>
        <param name="dateTime">The Coordinated Universal Time (UTC).</param>
        <param name="destinationTimeZone">The time zone to convert <c>dateTime</c> to.</param>
        <summary>Converts a Coordinated Universal Time (UTC) to the time in a specified time zone.</summary>
        <returns>The date and time in the destination time zone. Its <see cref="P:System.DateTime.Kind" /> property is <see cref="F:System.DateTimeKind.Utc" /> if <paramref name="destinationTimeZone" /> is <see cref="P:System.TimeZoneInfo.Utc" />; otherwise, its <see cref="P:System.DateTime.Kind" /> property is <see cref="F:System.DateTimeKind.Unspecified" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 執行轉換時<xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A>方法適用於任何調整規則生效的`destinationTimeZone`時區。  
  
 這個方法的精確的行為取決於值<xref:System.DateTime.Kind%2A>屬性`dateTime`參數，如下表所示。  
  
|DateTime.Kind 屬性|轉換|  
|----------------------------|----------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|擲回<xref:System.ArgumentException>。|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> 或 <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|將轉換為國際標準時間 (UTC)。|  
  
 如果轉換`dateTime`產生的日期和時間值早於<xref:System.DateTime.MinValue?displayProperty=nameWithType>或更晚<xref:System.DateTime.MaxValue?displayProperty=nameWithType>，這個方法會傳回<xref:System.DateTime.MinValue?displayProperty=nameWithType>或<xref:System.DateTime.MaxValue?displayProperty=nameWithType>分別。  
  
   
  
## Examples  
 下列範例會將中央時間的國際標準時間 (UTC)。  
  
 [!code-csharp[System.TimeZone2.Concepts#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Concepts/CS/TimeZone2Concepts.cs#8)]
 [!code-vb[System.TimeZone2.Concepts#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Concepts/VB/TimeZone2Concepts.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The <see cref="P:System.DateTime.Kind" /> property of <paramref name="dateTime" /> is <see cref="F:System.DateTimeKind.Local" />.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationTimeZone" /> is <see langword="null" />.</exception>
        <block subset="none" type="usage">
          <para>在 [！INCLUDE[winxp](~/includes/winxp-md.md)] 系統中，這個方法適用於在目前調整規則的時區轉換成<paramref name="destinationTimeZone" />是<see cref="P:System.TimeZoneInfo.Local" />。如此一來，方法可能無法正確地轉換期間，目前的調整規則生效之前的時間。如需詳細資訊，請參閱 &lt; 呼叫者 &gt; 一節中的附註<see cref="P:System.TimeZoneInfo.Local" />屬性。</para>
        </block>
      </Docs>
    </Member>
    <MemberGroup MemberName="ConvertTimeToUtc">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Converts a date and time to Coordinated Universal Time (UTC).</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ConvertTimeToUtc">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeToUtc (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeToUtc(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeToUtc(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeToUtc : DateTime -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeToUtc dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">The date and time to convert.</param>
        <summary>Converts the specified date and time to Coordinated Universal Time (UTC).</summary>
        <returns>The Coordinated Universal Time (UTC) that corresponds to the <paramref name="dateTime" /> parameter. The <see cref="T:System.DateTime" /> value's <see cref="P:System.DateTime.Kind" /> property is always set to <see cref="F:System.DateTimeKind.Utc" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 執行實際的轉換取決於值<xref:System.DateTime.Kind%2A>屬性`dateTime`參數，如下表所示。  
  
|DateTime.Kind 屬性|轉換|  
|----------------------------|----------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|從本地時間轉換為國際標準時間 (UTC)。|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|假設`dateTime`是當地時間，並將從本地時間轉換為 UTC。|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|傳回`dateTime`不變。|  
  
 如果`dateTime`對應模稜兩可的本地時間，此方法會假設它是標準的本地時間。 如果`dateTime`對應到不正確的本機時間，則方法會擲回<xref:System.ArgumentException>。  
  
> [!NOTE]
>  如果目前電腦的本機時間區域包含多個調整規則的這個多載<xref:System.TimeZoneInfo.ConvertTimeToUtc%2A>方法會傳回不同的結果<xref:System.TimeZone.ToUniversalTime%2A?displayProperty=nameWithType>和<xref:System.DateTime.ToUniversalTime%2A?displayProperty=nameWithType>方法。 <xref:System.TimeZone.ToUniversalTime%2A?displayProperty=nameWithType> 一律適用於目前的調整規則的時區轉換是否`dateTime`位於其日期範圍內。 和上執行時[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]，<xref:System.DateTime.ToUniversalTime%2A?displayProperty=nameWithType>也適用於目前的調整規則的時區轉換是否`dateTime`位於其日期範圍內。  
  
 如果 UTC 相當於`dateTime`早於<xref:System.DateTime.MinValue?displayProperty=nameWithType>或更新版本的<xref:System.DateTime.MaxValue?displayProperty=nameWithType>，這個方法會傳回<xref:System.DateTime.MinValue>或<xref:System.DateTime.MaxValue>分別。  
  
   
  
## Examples  
 下列範例說明的轉換時間值的<xref:System.DateTime.Kind%2A>屬性是<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>， <xref:System.DateTimeKind.Local?displayProperty=nameWithType>，和<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>分別。 它也會說明模稜兩可和無效的時間轉換。  
  
 [!code-csharp[System.TimeZone2.Conversions#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Conversions/cs/System.TimeZone2.Conversions.cs#1)]
 [!code-vb[System.TimeZone2.Conversions#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Conversions/vb/System.TimeZone2.Conversions.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see langword="TimeZoneInfo.Local.IsInvalidDateTime(" />
          <paramref name="dateTime" />
          <see langword=")" /> returns <see langword="true" />.</exception>
        <block subset="none" type="usage">
          <para>在 [！INCLUDE[winxp](~/includes/winxp-md.md)] 系統中，這個方法適用於在目前調整規則的時區轉換。如此一來，方法可能無法正確地轉換期間，目前的調整規則生效之前的時間。如需詳細資訊，請參閱 &lt; 呼叫者 &gt; 一節中的附註<see cref="P:System.TimeZoneInfo.Local" />屬性。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ConvertTimeToUtc">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeToUtc (DateTime dateTime, TimeZoneInfo sourceTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeToUtc(valuetype System.DateTime dateTime, class System.TimeZoneInfo sourceTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeToUtc(DateTime dateTime, TimeZoneInfo ^ sourceTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeToUtc : DateTime * TimeZoneInfo -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeToUtc (dateTime, sourceTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
        <Parameter Name="sourceTimeZone" Type="System.TimeZoneInfo" />
      </Parameters>
      <Docs>
        <param name="dateTime">The date and time to convert.</param>
        <param name="sourceTimeZone">The time zone of <c>dateTime</c>.</param>
        <summary>Converts the time in a specified time zone to Coordinated Universal Time (UTC).</summary>
        <returns>The Coordinated Universal Time (UTC) that corresponds to the <paramref name="dateTime" /> parameter. The <see cref="T:System.DateTime" /> object's <see cref="P:System.DateTime.Kind" /> property is always set to <see cref="F:System.DateTimeKind.Utc" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.DateTime.Kind%2A>屬性`dateTime`參數等於<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>和`sourceTimeZone`參數等於<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>，這個方法會傳回`dateTime`而不執行任何轉換。  
  
 如果`dateTime`對應模稜兩可的時間，這個方法會假設它是來源時區標準時間。 如果`dateTime`對應至無效的時間，這個方法會擲回<xref:System.ArgumentException>。  
  
 如果 Coordinated Universal Time (UTC) 相當於`dateTime`早於<xref:System.DateTime.MinValue?displayProperty=nameWithType>或更新版本的<xref:System.DateTime.MaxValue?displayProperty=nameWithType>，這個方法會傳回<xref:System.DateTime.MinValue>或<xref:System.DateTime.MaxValue>分別。  
  
   
  
## Examples  
 下列範例擷取目前的日期，從本機系統，將它轉換為國際標準時間 (UTC)，然後將它轉換為東京標準時間中，並最後將從東京標準時間轉換回 UTC。 請注意，兩個的 UTC 時間相同。  
  
 [!code-csharp[System.TimeZone2.Conversions#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Conversions/cs/convertdt2.cs#2)]
 [!code-vb[System.TimeZone2.Conversions#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Conversions/vb/convertdt2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="dateTime" />
          <see langword=".Kind" /> is <see cref="F:System.DateTimeKind.Utc" /> and <paramref name="sourceTimeZone" /> does not equal <see cref="P:System.TimeZoneInfo.Utc" />.  -or-  <paramref name="dateTime" /><see langword=".Kind" /> is <see cref="F:System.DateTimeKind.Local" /> and <paramref name="sourceTimeZone" /> does not equal <see cref="P:System.TimeZoneInfo.Local" />.  -or-  <paramref name="sourceTimeZone" /><see langword=".IsInvalidDateTime(" /><paramref name="dateTime" /><see langword=")" /> returns <see langword="true" />.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sourceTimeZone" /> is <see langword="null" />.</exception>
        <block subset="none" type="usage">
          <para>在 [！INCLUDE[winxp](~/includes/winxp-md.md)] 系統，此方法適用於只能在目前的調整規則的時區轉換成<paramref name="sourceTimeZone" />是<see cref="P:System.TimeZoneInfo.Local" />。如此一來，方法可能無法正確地轉換期間，目前的調整規則生效之前的時間。如需詳細資訊，請參閱 &lt; 呼叫者 &gt; 一節中的附註<see cref="P:System.TimeZoneInfo.Local" />屬性。</para>
        </block>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateCustomTimeZone">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Defines a time zone that is not found on the local computer.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateCustomTimeZone">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo CreateCustomTimeZone (string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo CreateCustomTimeZone(string id, valuetype System.TimeSpan baseUtcOffset, string displayName, string standardDisplayName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateCustomTimeZone (id As String, baseUtcOffset As TimeSpan, displayName As String, standardDisplayName As String) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ CreateCustomTimeZone(System::String ^ id, TimeSpan baseUtcOffset, System::String ^ displayName, System::String ^ standardDisplayName);" />
      <MemberSignature Language="F#" Value="static member CreateCustomTimeZone : string * TimeSpan * string * string -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.CreateCustomTimeZone (id, baseUtcOffset, displayName, standardDisplayName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="baseUtcOffset" Type="System.TimeSpan" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="standardDisplayName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id">The time zone's identifier.</param>
        <param name="baseUtcOffset">An object that represents the time difference between this time zone and Coordinated Universal Time (UTC).</param>
        <param name="displayName">The display name of the new time zone.</param>
        <param name="standardDisplayName">The name of the new time zone's standard time.</param>
        <summary>Creates a custom time zone with a specified identifier, an offset from Coordinated Universal Time (UTC), a display name, and a standard time display name.</summary>
        <returns>The new time zone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個多載<xref:System.TimeZoneInfo.CreateCustomTimeZone%28System.String%2CSystem.TimeSpan%2CSystem.String%2CSystem.String%29>方法適合用來建立具有沒有進行調整 （也就是不支援日光節約時間的時間區域） 的時區。 若要定義包括調整日光節約時間的時區，請使用<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType>或<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType>方法。  
  
 下表顯示提供給參數之間的關聯性<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType>方法和屬性<xref:System.TimeZoneInfo>方法呼叫所傳回的物件。  
  
|CreateCustomTimeZone 參數|TimeZoneInfo 屬性|  
|------------------------------------|---------------------------|  
|`id`|<xref:System.TimeZoneInfo.Id%2A>|  
|`baseUtcOffset`|<xref:System.TimeZoneInfo.BaseUtcOffset%2A>|  
|`displayName`|<xref:System.TimeZoneInfo.DisplayName%2A>|  
|`standardDisplayName`|<xref:System.TimeZoneInfo.StandardName%2A>|  
  
 一般而言，時區標準時間名稱和其識別碼都相同。 不過，時區的識別項的長度不可超過 32 個字元。 將字串傳遞至`displayName`參數會遵循標準相當的格式。 顯示名稱的第一個部分是國際標準時間的縮寫 GMT （格林威治標準時間），加上括號表示時區的基底位移。 此事件後面是可識別時區本身，或者一個或多個城市、 地區或國家 （地區） 的時區，或兩者的字串。 例如:   
  
```  
(GMT+02:00) Athens, Beirut, Istanbul, Minsk  
(GMT-02:00) Mid-Atlantic  
(GMT-07:00) Mountain Time (US & Canada)  
```  
  
   
  
## Examples  
 下列範例會建立自訂時區茂森和 Holme 槽的區域南極洲。 然後，它會顯示新時區的時間轉換為本地時間的結果。  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#1)]
 [!code-vb[System.TimeZone2.CreateTimeZone#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="id" /> parameter is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">The <paramref name="id" /> parameter is an empty string ("").  -or-  The <paramref name="baseUtcOffset" /> parameter does not represent a whole number of minutes.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="baseUtcOffset" /> parameter is greater than 14 hours or less than -14 hours.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateCustomTimeZone">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo CreateCustomTimeZone (string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, TimeZoneInfo.AdjustmentRule[] adjustmentRules);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo CreateCustomTimeZone(string id, valuetype System.TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, class System.TimeZoneInfo/AdjustmentRule[] adjustmentRules) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String,System.String,System.TimeZoneInfo.AdjustmentRule[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateCustomTimeZone (id As String, baseUtcOffset As TimeSpan, displayName As String, standardDisplayName As String, daylightDisplayName As String, adjustmentRules As TimeZoneInfo.AdjustmentRule()) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ CreateCustomTimeZone(System::String ^ id, TimeSpan baseUtcOffset, System::String ^ displayName, System::String ^ standardDisplayName, System::String ^ daylightDisplayName, cli::array &lt;TimeZoneInfo::AdjustmentRule ^&gt; ^ adjustmentRules);" />
      <MemberSignature Language="F#" Value="static member CreateCustomTimeZone : string * TimeSpan * string * string * string * TimeZoneInfo.AdjustmentRule[] -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.CreateCustomTimeZone (id, baseUtcOffset, displayName, standardDisplayName, daylightDisplayName, adjustmentRules)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="baseUtcOffset" Type="System.TimeSpan" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="standardDisplayName" Type="System.String" />
        <Parameter Name="daylightDisplayName" Type="System.String" />
        <Parameter Name="adjustmentRules" Type="System.TimeZoneInfo+AdjustmentRule[]" />
      </Parameters>
      <Docs>
        <param name="id">The time zone's identifier.</param>
        <param name="baseUtcOffset">An object that represents the time difference between this time zone and Coordinated Universal Time (UTC).</param>
        <param name="displayName">The display name of the new time zone.</param>
        <param name="standardDisplayName">The new time zone's standard time name.</param>
        <param name="daylightDisplayName">The daylight saving time name of the new time zone.</param>
        <param name="adjustmentRules">An array that augments the base UTC offset for a particular period.</param>
        <summary>Creates a custom time zone with a specified identifier, an offset from Coordinated Universal Time (UTC), a display name, a standard time name, a daylight saving time name, and daylight saving time rules.</summary>
        <returns>A <see cref="T:System.TimeZoneInfo" /> object that represents the new time zone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個多載<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType>方法適合用來建立支援日光節約時間的時區。 若要定義不支援日光節約時間的時區，請使用<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType>或<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType>方法。  
  
 下表顯示提供給參數之間的關聯性<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType>方法和成員<xref:System.TimeZoneInfo>方法呼叫所傳回的物件。  
  
|CreateCustomTimeZone 參數|TimeZoneInfo 成員|  
|------------------------------------|-------------------------|  
|`id`|<xref:System.TimeZoneInfo.Id%2A>|  
|`baseUtcOffset`|<xref:System.TimeZoneInfo.BaseUtcOffset%2A>|  
|`displayName`|<xref:System.TimeZoneInfo.DisplayName%2A>|  
|`standardDisplayName`|<xref:System.TimeZoneInfo.StandardName%2A>|  
|`daylightDisplayName`|<xref:System.TimeZoneInfo.DaylightName%2A>|  
|`adjustmentRules`|陣列<xref:System.TimeZoneInfo.AdjustmentRule?displayProperty=nameWithType>所傳回的物件<xref:System.TimeZoneInfo.GetAdjustmentRules%2A>方法。|  
  
 一般而言，時區標準時間名稱和其識別碼都相同。 不過，時區的識別項的長度不可超過 32 個字元。 將字串傳遞至`displayName`參數會遵循標準相當的格式。 顯示名稱的第一個部分是國際標準時間的縮寫 GMT （格林威治標準時間），加上括號表示時區的基底位移。 此事件後面是可識別時區本身，或者一個或多個城市、 地區或國家 （地區） 的時區，或兩者的字串。 例如:   
  
```  
(GMT+02:00) Athens, Beirut, Istanbul, Minsk  
(GMT-02:00) Mid-Atlantic  
(GMT-07:00) Mountain Time (US & Canada)  
```  
  
 `baseUtcOffset`參數定義自訂時區位移與國際標準時間 (UTC) 時區的調整規則的所有。 換句話說，<xref:System.TimeZoneInfo>物件模型會假設 UTC 的時區時差常數存留期時間區域內，且有獨立於特定的調整規則。 若要反映已變更其位移的 UTC 的時區，您必須建立新的時區物件。  
  
 時區調整規則的定義方式執行下列動作：  
  
1.  呼叫<xref:System.TimeZoneInfo.TransitionTime.CreateFloatingDateRule%2A>或<xref:System.TimeZoneInfo.TransitionTime.CreateFixedDateRule%2A>方法定義的起點和終點轉換每個調整規則的時間。  
  
2.  呼叫<xref:System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule%2A>針對每個調整規則的方法。  
  
3.  調整規則指派給陣列可以當做傳遞`adjustmentRules`參數。  
  
   
  
## Examples  
 下列範例會建立自訂時區 Palmer 站台和 Anvers 島南極洲。 然後將本地時間轉換為新時區的時間，並顯示結果。  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#2)]
 [!code-vb[System.TimeZone2.CreateTimeZone#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="id" /> parameter is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">The <paramref name="id" /> parameter is an empty string ("").  -or-  The <paramref name="baseUtcOffset" /> parameter does not represent a whole number of minutes.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="baseUtcOffset" /> parameter is greater than 14 hours or less than -14 hours.</exception>
        <exception cref="T:System.InvalidTimeZoneException">The adjustment rules specified in the <paramref name="adjustmentRules" /> parameter overlap.  -or-  The adjustment rules specified in the <paramref name="adjustmentRules" /> parameter are not in chronological order.  -or-  One or more elements in <paramref name="adjustmentRules" /> are <see langword="null" />.  -or-  A date can have multiple adjustment rules applied to it.  -or-  The sum of the <paramref name="baseUtcOffset" /> parameter and the <see cref="P:System.TimeZoneInfo.AdjustmentRule.DaylightDelta" /> value of one or more objects in the <paramref name="adjustmentRules" /> array is greater than 14 hours or less than -14 hours.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateCustomTimeZone">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo CreateCustomTimeZone (string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, TimeZoneInfo.AdjustmentRule[] adjustmentRules, bool disableDaylightSavingTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo CreateCustomTimeZone(string id, valuetype System.TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, class System.TimeZoneInfo/AdjustmentRule[] adjustmentRules, bool disableDaylightSavingTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String,System.String,System.TimeZoneInfo.AdjustmentRule[],System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateCustomTimeZone (id As String, baseUtcOffset As TimeSpan, displayName As String, standardDisplayName As String, daylightDisplayName As String, adjustmentRules As TimeZoneInfo.AdjustmentRule(), disableDaylightSavingTime As Boolean) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ CreateCustomTimeZone(System::String ^ id, TimeSpan baseUtcOffset, System::String ^ displayName, System::String ^ standardDisplayName, System::String ^ daylightDisplayName, cli::array &lt;TimeZoneInfo::AdjustmentRule ^&gt; ^ adjustmentRules, bool disableDaylightSavingTime);" />
      <MemberSignature Language="F#" Value="static member CreateCustomTimeZone : string * TimeSpan * string * string * string * TimeZoneInfo.AdjustmentRule[] * bool -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.CreateCustomTimeZone (id, baseUtcOffset, displayName, standardDisplayName, daylightDisplayName, adjustmentRules, disableDaylightSavingTime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="baseUtcOffset" Type="System.TimeSpan" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="standardDisplayName" Type="System.String" />
        <Parameter Name="daylightDisplayName" Type="System.String" />
        <Parameter Name="adjustmentRules" Type="System.TimeZoneInfo+AdjustmentRule[]" />
        <Parameter Name="disableDaylightSavingTime" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="id">The time zone's identifier.</param>
        <param name="baseUtcOffset">A <see cref="T:System.TimeSpan" /> object that represents the time difference between this time zone and Coordinated Universal Time (UTC).</param>
        <param name="displayName">The display name of the new time zone.</param>
        <param name="standardDisplayName">The standard time name of the new time zone.</param>
        <param name="daylightDisplayName">The daylight saving time name of the new time zone.</param>
        <param name="adjustmentRules">An array of <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> objects that augment the base UTC offset for a particular period.</param>
        <param name="disableDaylightSavingTime">
          <see langword="true" /> to discard any daylight saving time-related information present in <c>adjustmentRules</c> with the new object; otherwise, <see langword="false" />.</param>
        <summary>Creates a custom time zone with a specified identifier, an offset from Coordinated Universal Time (UTC), a display name, a standard time name, a daylight saving time name, daylight saving time rules, and a value that indicates whether the returned object reflects daylight saving time information.</summary>
        <returns>The new time zone. If the <paramref name="disableDaylightSavingTime" /> parameter is <see langword="true" />, the returned object has no daylight saving time data.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用的這個多載<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType>方法，以建立在執行階段條件可以決定其支援日光節約時間的自訂時區。  
  
 下表顯示提供給參數之間的關聯性<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType>方法和成員<xref:System.TimeZoneInfo>方法呼叫所傳回的物件。  
  
|CreateCustomTimeZone 參數|TimeZoneInfo 屬性|  
|------------------------------------|---------------------------|  
|`id`|<xref:System.TimeZoneInfo.Id%2A>|  
|`baseUtcOffset`|<xref:System.TimeZoneInfo.BaseUtcOffset%2A>|  
|`displayName`|<xref:System.TimeZoneInfo.DisplayName%2A>|  
|`standardDisplayName`|<xref:System.TimeZoneInfo.StandardName%2A>|  
|`daylightDisplayName`|<xref:System.TimeZoneInfo.DaylightName%2A> 如果`disableDaylightSavingTime`是`false`;<xref:System.String.Empty?displayProperty=nameWithType>如果`disableDaylightSavingTime`是`true`。|  
|`adjustmentRules`|陣列<xref:System.TimeZoneInfo.AdjustmentRule>所傳回的物件<xref:System.TimeZoneInfo.GetAdjustmentRules%2A>方法如果`disableDaylightSavingTime`是`false`; 所傳回的空陣列<xref:System.TimeZoneInfo.GetAdjustmentRules%2A>方法如果`disableDaylightSavingTime`是`true`。|  
|`disableDaylightSavingTime`|不<xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A>。|  
  
 一般而言，時區標準時間名稱和其識別碼都相同。 不過，時區的識別項的長度不可超過 32 個字元。 將字串傳遞至`displayName`參數會遵循標準相當的格式。 顯示名稱的第一個部分是國際標準時間的縮寫 GMT （格林威治標準時間），加上括號表示時區的基底位移。 此事件後面是可識別時區本身，或者一個或多個城市、 地區或國家 （地區） 的時區，或兩者的字串。 例如:   
  
```  
(GMT+02:00) Athens, Beirut, Istanbul, Minsk  
(GMT-02:00) Mid-Atlantic  
(GMT-07:00) Mountain Time (US & Canada)  
```  
  
 時區調整規則的定義方式執行下列動作：  
  
1.  呼叫<xref:System.TimeZoneInfo.TransitionTime.CreateFloatingDateRule%2A>或<xref:System.TimeZoneInfo.TransitionTime.CreateFixedDateRule%2A>方法來定義開始和結束每個調整規則的轉換規則。  
  
2.  呼叫<xref:System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule%2A>針對每個調整規則的方法。  
  
3.  調整規則指派給陣列可以當做傳遞`adjustmentRules`參數。  
  
 如果`disableDaylightSavingTime`參數是`false`，此方法的作業等同於<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType>多載。 如果`disableDaylightSavingTime`是`true`，傳回的物件包括沒有調整規則和<xref:System.TimeZoneInfo.DaylightName%2A>屬性其值為空字串。  
  
   
  
## Examples  
 下列範例會建立自訂時區 Palmer 站台和 Anvers 島南極洲。 它會設定`disableDaylightSavingTime`參數在呼叫<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType>方法`true`。 然後，它會顯示新時區的日光節約時間名稱，如果有的話，以及確認新時區具有任何日光節約時間資訊的調整規則的數目。  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#3)]
 [!code-vb[System.TimeZone2.CreateTimeZone#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="id" /> parameter is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">The <paramref name="id" /> parameter is an empty string ("").  -or-  The <paramref name="baseUtcOffset" /> parameter does not represent a whole number of minutes.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="baseUtcOffset" /> parameter is greater than 14 hours or less than -14 hours.</exception>
        <exception cref="T:System.InvalidTimeZoneException">The adjustment rules specified in the <paramref name="adjustmentRules" /> parameter overlap.  -or-  The adjustment rules specified in the <paramref name="adjustmentRules" /> parameter are not in chronological order.  -or-  One or more elements in <paramref name="adjustmentRules" /> are <see langword="null" />.  -or-  A date can have multiple adjustment rules applied to it.  -or-  The sum of the <paramref name="baseUtcOffset" /> parameter and the <see cref="P:System.TimeZoneInfo.AdjustmentRule.DaylightDelta" /> value of one or more objects in the <paramref name="adjustmentRules" /> array is greater than 14 hours or less than -14 hours.</exception>
      </Docs>
    </Member>
    <Member MemberName="DaylightName">
      <MemberSignature Language="C#" Value="public string DaylightName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DaylightName" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.DaylightName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DaylightName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DaylightName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DaylightName : string" Usage="System.TimeZoneInfo.DaylightName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the display name for the current time zone's daylight saving time.</summary>
        <value>時區日光節約時間的顯示名稱。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 根據與 Windows 作業系統一起安裝的文化特性當地語系化的顯示名稱。  
  
 A<xref:System.TimeZoneInfo.DaylightName%2A>屬性其值不是<xref:System.String.Empty?displayProperty=nameWithType>或`null`不一定表示時區支援日光節約時間。 若要判斷是否時區支援日光節約時間，請檢查的值及其<xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A>屬性。  
  
 在大部分情況下，<xref:System.TimeZoneInfo.DaylightName%2A>時區登錄中定義的屬性不是<xref:System.String.Empty?displayProperty=nameWithType>或`null`。 不過，<xref:System.TimeZoneInfo.DaylightName%2A>自訂時區屬性可以設定為<xref:System.String.Empty?displayProperty=nameWithType>。 建立自訂時區時，發生這種的情況<xref:System.TimeZoneInfo.CreateCustomTimeZone%28System.String%2CSystem.TimeSpan%2CSystem.String%2CSystem.String%29?displayProperty=nameWithType>或<xref:System.TimeZoneInfo.CreateCustomTimeZone%28System.String%2CSystem.TimeSpan%2CSystem.String%2CSystem.String%2CSystem.String%2CSystem.TimeZoneInfo.AdjustmentRule%5B%5D%2CSystem.Boolean%29?displayProperty=nameWithType>多載而`disableDaylightSavingTime`參數是`true`。 因此，您的程式碼應該永遠不會假設的值<xref:System.TimeZoneInfo.DaylightName%2A>屬性不是`null`或空白。  
  
 <xref:System.TimeZoneInfo.DaylightName%2A>屬性就相當於<xref:System.TimeZone.DaylightName%2A>屬性<xref:System.TimeZone>類別。  
  
   
  
## Examples  
 下列範例會定義方法，名為`DisplayDateWithTimeZoneName`使用<xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29>方法，以判斷是否要顯示的時區標準時間名稱或日光節約時間名稱。  
  
 [!code-csharp[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/cs/IsDaylightSavingTime.cs#1)]
 [!code-vb[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/vb/IsDaylightSavingTime.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayName">
      <MemberSignature Language="C#" Value="public string DisplayName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DisplayName" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.DisplayName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DisplayName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DisplayName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DisplayName : string" Usage="System.TimeZoneInfo.DisplayName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the general display name that represents the time zone.</summary>
        <value>時區的一般顯示名稱。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 根據與 Windows 作業系統一起安裝的文化特性當地語系化的顯示名稱。  
  
 Windows 系統時區的時區顯示名稱會遵循相當標準格式。 顯示名稱的第一個部分是國際標準時間的縮寫 GMT （格林威治標準時間），加上括號表示時區的基底位移。 時間 Coordinated Universal time，GMT 縮略字，沒有位移加上括弧。  此事件後面是可識別時區或一或多個城市、 地區或國家 （地區） 時區的字串。 例如:   
  
```  
(GMT) Greenwich Mean Time : Dublin, Edinburgh, Lisbon, London  
(GMT+02:00) Athens, Beirut, Istanbul, Minsk  
(GMT-02:00) Mid-Atlantic  
(GMT-07:00) Mountain Time (US & Canada)  
```  
  
   
  
## Examples  
 下列範例會擷取<xref:System.TimeZoneInfo>物件，代表本地時區，並將其顯示名稱、 標準時間名稱和日光節約時間名稱的輸出。 輸出會顯示在美國太平洋時區系統太平洋標準時區。  
  
 [!code-csharp[System.TimeZone2.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/ShowTimeZoneNames1.cs#2)]
 [!code-vb[System.TimeZone2.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/ShowTimeZoneNames1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Determines whether two <see cref="T:System.TimeZoneInfo" /> objects are equal.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="timeZoneInfo.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">A second object to compare with the current object.</param>
        <summary>Determines whether the current <see cref="T:System.TimeZoneInfo" /> object and another object are equal.</summary>
        <returns>
          <see langword="true" /> if <paramref name="obj" /> is a <see cref="T:System.TimeZoneInfo" /> object that is equal to the current instance; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會將轉換或轉換`obj`至<xref:System.TimeZoneInfo>物件，並比較它與目前的執行個體。 相等測試根據值的比較。 目前<xref:System.TimeZoneInfo>執行個體和`obj`會被視為相等，在下列情況下：  
  
-   執行階段類型`obj`是<xref:System.TimeZoneInfo>。  
  
-   兩個物件具有相同<xref:System.TimeZoneInfo.Id%2A>屬性值。  
  
-   兩個物件具有相同的調整規則。  
  
 如果 `obj` 為 `null`，這個方法會傳回 `false`。  
  
   
  
## Examples  
 下列範例會使用<xref:System.TimeZoneInfo.Equals%28System.Object%29>方法，以判斷當地時區是太平洋時間或美國東部時間。  
  
 [!code-csharp[System.TimeZoneInfo.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timezoneinfo.equals/cs/equals1.cs#1)]
 [!code-vb[System.TimeZoneInfo.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timezoneinfo.equals/vb/equals1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (TimeZoneInfo other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(class System.TimeZoneInfo other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.Equals(System.TimeZoneInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As TimeZoneInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(TimeZoneInfo ^ other);" />
      <MemberSignature Language="F#" Value="override this.Equals : TimeZoneInfo -&gt; bool" Usage="timeZoneInfo.Equals other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.TimeZoneInfo" />
      </Parameters>
      <Docs>
        <param name="other">A second object to compare with the current object.</param>
        <summary>Determines whether the current <see cref="T:System.TimeZoneInfo" /> object and another <see cref="T:System.TimeZoneInfo" /> object are equal.</summary>
        <returns>
          <see langword="true" /> if the two <see cref="T:System.TimeZoneInfo" /> objects are equal; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 等號比較為基礎值的比較。 兩個<xref:System.TimeZoneInfo>物件會被視為相等，在下列情況下：  
  
-   值及其<xref:System.TimeZoneInfo.Id%2A>屬性相同時。  
  
-   它們有相同的調整規則。  
  
 <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29?displayProperty=nameWithType> 會傳回下列運算式所得結果的布林值：  
  
 ```csharp 
 other.Id == this.Id && HasSameRules(other);  
 ```
  
 ```vb
 other.Id = me.Id AndAlso HasSameRules(other)  
 ```

 如果`other`參數未初始化<xref:System.TimeZoneInfo>物件，這個方法會傳回`false`。  
  
   
  
## Examples  
 下列範例會使用<xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29>方法，以判斷當地時區是太平洋時間或美國東部時間。  
  
 [!code-csharp[System.TimeZone2.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#7)]
 [!code-vb[System.TimeZone2.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindSystemTimeZoneById">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo FindSystemTimeZoneById (string id);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo FindSystemTimeZoneById(string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.FindSystemTimeZoneById(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FindSystemTimeZoneById (id As String) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ FindSystemTimeZoneById(System::String ^ id);" />
      <MemberSignature Language="F#" Value="static member FindSystemTimeZoneById : string -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.FindSystemTimeZoneById id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id">The time zone identifier, which corresponds to the <see cref="P:System.TimeZoneInfo.Id" /> property.</param>
        <summary>Retrieves a <see cref="T:System.TimeZoneInfo" /> object from the registry based on its identifier.</summary>
        <returns>An object whose identifier is the value of the <paramref name="id" /> parameter.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `id`參數必須正確對應到時區的登錄機碼的長度，但不是在案例中，成功的相符項目發生; 也就是比較的`id`時區識別項不區分大小寫。 如果您想要擷取的部分符合結果為基礎的時區物件，您可以撰寫自訂工作的唯讀集合的程序<xref:System.TimeZoneInfo>所傳回的物件<xref:System.TimeZoneInfo.GetSystemTimeZones%2A>方法。  
  
 <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> 嘗試比對`id`HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Time 區域的分支在 Windows XP 和 Windows Vista 登錄子機碼名稱。 此分支不一定會包含時區識別項的完整清單。 如果應用程式所需，您可以建立特定的時區是透過呼叫其中一個多載<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A>方法或呼叫<xref:System.TimeZoneInfo.FromSerializedString%2A>還原序列化<xref:System.TimeZoneInfo>物件，代表所需的時區。 不過，這些方法呼叫所建立的時區會對不在登錄中，且無法使用擷取<xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A>方法。 這些自訂的時區可以存取所傳回的物件參考只能透過<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A>或<xref:System.TimeZoneInfo.FromSerializedString%2A>方法呼叫。  
  
   
  
## Examples  
 下列範例會使用<xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A>方法來擷取東京標準時間區域。 這<xref:System.TimeZoneInfo>東京中轉換為時間的本地時間，並判斷它是否東京標準時間或東京日光節約時間，然後使用物件。  
  
 [!code-csharp[System.TimeZone2.Conversions#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Conversions/cs/convertdt2.cs#2)]
 [!code-vb[System.TimeZone2.Conversions#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Conversions/vb/convertdt2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">The system does not have enough memory to hold information about the time zone.</exception>
        <exception cref="T:System.ArgumentNullException">The <paramref name="id" /> parameter is <see langword="null" />.</exception>
        <exception cref="T:System.TimeZoneNotFoundException">The time zone identifier specified by <paramref name="id" /> was not found. This means that a registry key whose name matches <paramref name="id" /> does not exist, or that the key exists but does not contain any time zone data.</exception>
        <exception cref="T:System.Security.SecurityException">The process does not have the permissions required to read from the registry key that contains the time zone information.</exception>
        <exception cref="T:System.InvalidTimeZoneException">The time zone identifier was found, but the registry data is corrupted.</exception>
        <altmember cref="P:System.TimeZoneInfo.Id" />
      </Docs>
    </Member>
    <Member MemberName="FromSerializedString">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo FromSerializedString (string source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo FromSerializedString(string source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.FromSerializedString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromSerializedString (source As String) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ FromSerializedString(System::String ^ source);" />
      <MemberSignature Language="F#" Value="static member FromSerializedString : string -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.FromSerializedString source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">The string representation of the serialized <see cref="T:System.TimeZoneInfo" /> object.</param>
        <summary>Deserializes a string to re-create an original serialized <see cref="T:System.TimeZoneInfo" /> object.</summary>
        <returns>The original serialized object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 沒有提供建立登錄中找不到時區時所需的所有程式碼的替代方案。 您可以定義自訂的時區，然後使用<xref:System.TimeZoneInfo.ToSerializedString%2A>獨立可執行檔或應用程式的安裝程式以將時區儲存為字串的使用中的方法。 應用程式可以擷取這個字串從其儲存體位置，然後使用它執行個體化<xref:System.TimeZoneInfo.FromSerializedString%2A>方法。  
  
   
  
## Examples  
 下列範例會嘗試擷取南極洲/南極從本機系統時區。 如果失敗，這個程式碼會嘗試從應用程式目錄中的文字檔擷取時區的相關資訊。 如果此嘗試失敗，程式碼會建立時區和時區的相關資訊寫入文字檔案。  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#4)]
 [!code-vb[System.TimeZone2.CreateTimeZone#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The <paramref name="source" /> parameter is <see cref="F:System.String.Empty" />.</exception>
        <exception cref="T:System.ArgumentNullException">The <paramref name="source" /> parameter is a null string.</exception>
        <exception cref="T:System.Runtime.Serialization.SerializationException">The source parameter cannot be deserialized back into a <see cref="T:System.TimeZoneInfo" /> object.</exception>
        <altmember cref="M:System.TimeZoneInfo.ToSerializedString" />
      </Docs>
    </Member>
    <Member MemberName="GetAdjustmentRules">
      <MemberSignature Language="C#" Value="public TimeZoneInfo.AdjustmentRule[] GetAdjustmentRules ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.TimeZoneInfo/AdjustmentRule[] GetAdjustmentRules() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetAdjustmentRules" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAdjustmentRules () As TimeZoneInfo.AdjustmentRule()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;TimeZoneInfo::AdjustmentRule ^&gt; ^ GetAdjustmentRules();" />
      <MemberSignature Language="F#" Value="member this.GetAdjustmentRules : unit -&gt; TimeZoneInfo.AdjustmentRule[]" Usage="timeZoneInfo.GetAdjustmentRules " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo+AdjustmentRule[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retrieves an array of <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> objects that apply to the current <see cref="T:System.TimeZoneInfo" /> object.</summary>
        <returns>An array of objects for this time zone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.TimeZoneInfo.GetAdjustmentRules%2A>方法擷取陣列<xref:System.TimeZoneInfo.AdjustmentRule?displayProperty=nameWithType>物件。 陣列中的每個物件會定義有效的開始和結束日期的時區調整，以及其差異 （精確調整，讓時間變更的數量）。 此外，兩個屬性會傳回<xref:System.TimeZoneInfo.TransitionTime?displayProperty=nameWithType>定義每個與標準時間的年度轉換發生時的物件。  
  
 如果時區有多項調整規則，它們的一般順序從最早 （位於索引 0） 到最新 (位於索引<xref:System.Array.Length%2A>– 1)。  
  
 如果時區有沒有調整規則，<xref:System.TimeZoneInfo.GetAdjustmentRules%2A>方法會傳回空陣列 (陣列其<xref:System.Array.Length%2A>為零)。  
  
 所傳回的陣列元素的任何修改<xref:System.TimeZoneInfo.GetAdjustmentRules%2A>方法不會反映在屬於特定的時區調整規則。 若要修改的時區調整規則 （例如反映與日光節約時間歷程記錄轉換） 您必須使用適當的調整規則的宣告，建立新的時區而非修改現有。  
  
   
  
## Examples  
 下列範例會擷取所有的本機系統，並顯示完成資訊至主控台其調整規則中定義的時區。  
  
 [!code-csharp[System.TimeZone2.AdjustmentRule.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/cs/System.TimeZone2.AdjustmentRule.Class.cs#3)]
 [!code-vb[System.TimeZone2.AdjustmentRule.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/vb/System.TimeZone2.AdjustmentRule.Class.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">The system does not have enough memory to make an in-memory copy of the adjustment rules.</exception>
        <altmember cref="T:System.TimeZoneInfo.AdjustmentRule" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAmbiguousTimeOffsets">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Returns information about the possible dates and times that an ambiguous date and time can be mapped to.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAmbiguousTimeOffsets">
      <MemberSignature Language="C#" Value="public TimeSpan[] GetAmbiguousTimeOffsets (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan[] GetAmbiguousTimeOffsets(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;TimeSpan&gt; ^ GetAmbiguousTimeOffsets(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.GetAmbiguousTimeOffsets : DateTime -&gt; TimeSpan[]" Usage="timeZoneInfo.GetAmbiguousTimeOffsets dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">A date and time.</param>
        <summary>Returns information about the possible dates and times that an ambiguous date and time can be mapped to.</summary>
        <returns>An array of objects that represents possible Coordinated Universal Time (UTC) offsets that a particular date and time can be mapped to.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法的確切行為取決於之間的關聯性<xref:System.DateTime.Kind%2A>屬性和<xref:System.TimeZoneInfo>物件，如下表所示。  
  
|TimeZoneInfo 物件類型|Kind 屬性值|行為|  
|------------------------------|-------------------------|--------------|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Local?displayProperty=nameWithType> 或 <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|傳回模稜兩可的時間位移`dateTime`。|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|將轉換`dateTime`本機時間，然後傳回該時間位移模稜兩可的時間。|  
|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>|任何值。|擲回<xref:System.ArgumentException>。|  
|任何其他的時區。|<xref:System.DateTimeKind.Local> 或 <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|將轉換`dateTime`至指定的時區，然後決定該時間是否模稜兩可。|  
|任何其他的時區。|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|決定是否`dateTime`模稜兩可在指定的時區。|  
  
 順序<xref:System.TimeSpan>是未定義的這個方法所傳回陣列中的物件。 不過，您可以判斷哪個項目代表時區的標準時間從藉由比較其值的時區位移<xref:System.TimeZoneInfo.BaseUtcOffset%2A>屬性。 若要對應模稜兩可的時間的時區標準時間，請參閱[如何： 解決模稜兩可的時間](~/docs/standard/datetime/resolve-ambiguous-times.md)。  
  
   
  
## Examples  
 下列範例會定義方法，名為`ShowPossibleUtcTimes`使用<xref:System.TimeZoneInfo.GetAmbiguousTimeOffsets%28System.DateTime%29>方法來對應至對應的國際標準時間 (UTC) 時間是可能模稜兩可的時間。  
  
 [!code-csharp[System.TimeZone2.GetAmbiguousTimeOffsets#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.GetAmbiguousTimeOffsets/cs/System.TimeZone2.GetAmbiguousTimeOffsets.cs#1)]
 [!code-vb[System.TimeZone2.GetAmbiguousTimeOffsets#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.GetAmbiguousTimeOffsets/vb/System.TimeZone2.GetAmbiguousTimeOffsets.vb#1)]  
  
 呼叫此方法可以再使用程式碼如下所示：  
  
 [!code-csharp[System.TimeZone2.GetAmbiguousTimeOffsets#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.GetAmbiguousTimeOffsets/cs/System.TimeZone2.GetAmbiguousTimeOffsets.cs#2)]
 [!code-vb[System.TimeZone2.GetAmbiguousTimeOffsets#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.GetAmbiguousTimeOffsets/vb/System.TimeZone2.GetAmbiguousTimeOffsets.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="dateTime" /> is not an ambiguous time.</exception>
        <block subset="none" type="usage">
          <para>在 [！INCLUDE[winxp](~/includes/winxp-md.md)] 系統，這個方法會套用在目前調整規則判斷時是否<paramref name="dateTime" />模稜兩可，如果目前的執行個體<see cref="P:System.TimeZoneInfo.Local" />。如此一來，此方法可能無法正確地報告目前的調整規則生效之前期間的模稜兩可的時間位移。如需詳細資訊，請參閱 &lt; 呼叫者 &gt; 一節中的附註<see cref="P:System.TimeZoneInfo.Local" />屬性。</para>
        </block>
        <altmember cref="Overload:System.TimeZoneInfo.IsAmbiguousTime" />
      </Docs>
    </Member>
    <Member MemberName="GetAmbiguousTimeOffsets">
      <MemberSignature Language="C#" Value="public TimeSpan[] GetAmbiguousTimeOffsets (DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan[] GetAmbiguousTimeOffsets(valuetype System.DateTimeOffset dateTimeOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;TimeSpan&gt; ^ GetAmbiguousTimeOffsets(DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="F#" Value="member this.GetAmbiguousTimeOffsets : DateTimeOffset -&gt; TimeSpan[]" Usage="timeZoneInfo.GetAmbiguousTimeOffsets dateTimeOffset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">A date and time.</param>
        <summary>Returns information about the possible dates and times that an ambiguous date and time can be mapped to.</summary>
        <returns>An array of objects that represents possible Coordinated Universal Time (UTC) offsets that a particular date and time can be mapped to.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法的確切行為取決於之間的關聯性<xref:System.DateTimeOffset.Offset%2A>屬性`dateTimeOffset`參數和<xref:System.TimeZoneInfo>物件。 如果值<xref:System.DateTimeOffset.Offset%2A>屬性會對應至目前時區的可能位移與國際標準時間 (UTC) 的日期和時間，此方法會傳回可能位移。 否則，它會將轉換`dateTimeOffset`目前的時區，然後再傳回可能的位移的時間的日期和時間。  
  
 順序<xref:System.TimeSpan>是未定義的這個方法所傳回陣列中的物件。 不過，您可以判斷哪個項目代表時區的標準時間從藉由比較其值的時區位移<xref:System.TimeZoneInfo.BaseUtcOffset%2A>屬性。 若要對應模稜兩可的時間的時區標準時間，請參閱[如何： 解決模稜兩可的時間](~/docs/standard/datetime/resolve-ambiguous-times.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="dateTimeOffset" /> is not an ambiguous time.</exception>
        <block subset="none" type="usage">
          <para>在 [！INCLUDE[winxp](~/includes/winxp-md.md)] 系統，這個方法會套用在目前調整規則判斷時是否<paramref name="dateTimeOffset" />模稜兩可，如果目前的執行個體<see cref="P:System.TimeZoneInfo.Local" />。如此一來，此方法可能無法正確地報告目前的調整規則生效之前期間的模稜兩可的時間位移。如需詳細資訊，請參閱 &lt; 呼叫者 &gt; 一節中的附註<see cref="P:System.TimeZoneInfo.Local" />屬性。</para>
        </block>
        <altmember cref="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="timeZoneInfo.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Serves as a hash function for hashing algorithms and data structures such as hash tables.</summary>
        <returns>A 32-bit signed integer that serves as the hash code for this <see cref="T:System.TimeZoneInfo" /> object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如需詳細資料，關於<xref:System.TimeZoneInfo.GetHashCode%2A>方法，請參閱<xref:System.Object.GetHashCode%2A>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSystemTimeZones">
      <MemberSignature Language="C#" Value="public static System.Collections.ObjectModel.ReadOnlyCollection&lt;TimeZoneInfo&gt; GetSystemTimeZones ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.TimeZoneInfo&gt; GetSystemTimeZones() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetSystemTimeZones" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetSystemTimeZones () As ReadOnlyCollection(Of TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::ObjectModel::ReadOnlyCollection&lt;TimeZoneInfo ^&gt; ^ GetSystemTimeZones();" />
      <MemberSignature Language="F#" Value="static member GetSystemTimeZones : unit -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;TimeZoneInfo&gt;" Usage="System.TimeZoneInfo.GetSystemTimeZones " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.TimeZoneInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a sorted collection of all the time zones about which information is available on the local system.</summary>
        <returns>A read-only collection of <see cref="T:System.TimeZoneInfo" /> objects.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.TimeZoneInfo.GetSystemTimeZones%2A>方法會從登錄機碼 HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Time 區域的子機碼來擷取所有可用的時區資訊。 如果無法成功地擷取並剖析為個別的特定字串屬性的值<xref:System.TimeZoneInfo>物件，這個方法會設定其值為空字串 ("")。  
  
> [!IMPORTANT]
>  <xref:System.TimeZoneInfo.GetSystemTimeZones%2A>方法傳回的集合<xref:System.TimeZoneInfo>登錄中定義的時區的物件。 它不包含使用的多載所建立的時區<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A>方法。 這些是只可透過存取時區建立方法所傳回的物件參考。  
  
 這個方法所傳回的集合排序以 UTC 的位移和時區具有相同的 UTC 時差，以使用目前文化特性的顯示名稱。 顯示名稱的相關資訊，請參閱<xref:System.TimeZoneInfo.DisplayName%2A>。  
  
 <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>這個方法所傳回的物件支援<xref:System.Collections.Generic.IEnumerable%601>介面，這表示，它可以可重複使用`foreach`（C# 中） 或`For Each…Next`（在 Visual Basic) 陳述式。 迴圈的每個反覆項目提供下一個<xref:System.TimeZoneInfo>集合中的物件。  
  
 集合<xref:System.TimeZoneInfo>物件代表本機電腦上定義的時區，則不需要提供在所有的時段內所有時區的完整資訊。 如果您的應用程式需要在本機電腦上找不到時區，您可以建立使用的多載的自訂時區<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A>方法。 如需詳細資訊，請參閱[How to： 建立沒有調整規則的時區](~/docs/standard/datetime/create-time-zones-without-adjustment-rules.md)和[How to： 建立有調整規則的時區區域](~/docs/standard/datetime/create-time-zones-with-adjustment-rules.md)。  
  
 您也可以判斷個別的時區是否已定義在本機電腦上藉由呼叫<xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A>方法並提供您想要擷取做為參數的時區的識別項。  
  
   
  
## Examples  
 下列範例會擷取代表電腦上所定義的時區的時區物件的集合，並將其資訊寫入至文字檔。  
  
 [!code-csharp[System.TimeZone2.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/getsystemtimezones1.cs#6)]
 [!code-vb[System.TimeZone2.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/getsystemtimezones1.vb#6)]
  [!code-powershell[System.TimeZone2.Class#6](~/samples/snippets/powershell/VS_Snippets_CLR_System/System.TimeZone2.Class/PS/Timezone2_Examples.ps1)]   
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">There is insufficient memory to store all time zone information.</exception>
        <exception cref="T:System.Security.SecurityException">The user does not have permission to read from the registry keys that contain time zone information.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetUtcOffset">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Calculates the offset or difference between the time in this time zone and Coordinated Universal Time (UTC) for a particular date and time.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetUtcOffset">
      <MemberSignature Language="C#" Value="public TimeSpan GetUtcOffset (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan GetUtcOffset(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetUtcOffset(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan GetUtcOffset(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.GetUtcOffset : DateTime -&gt; TimeSpan" Usage="timeZoneInfo.GetUtcOffset dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">The date and time to determine the offset for.</param>
        <summary>Calculates the offset or difference between the time in this time zone and Coordinated Universal Time (UTC) for a particular date and time.</summary>
        <returns>An object that indicates the time difference between the two time zones.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 傳回的時間範圍包括任何差異，因為目前的時區調整規則的應用程式。 不同於<xref:System.TimeZoneInfo.BaseUtcOffset%2A>屬性，傳回 Coordinated Universal Time (UTC) 時區的標準時間的差異，因此，不會考慮調整規則的帳戶。  
  
 如果`dateTime`參數的<xref:System.DateTime.Kind%2A>屬性沒有對應到時區的物件，這個方法會執行傳回結果之前必要的轉換。 例如，可能發生這<xref:System.DateTime.Kind%2A>屬性是<xref:System.DateTimeKind.Local?displayProperty=nameWithType>但時區物件不是當地時區。 如果`dateTime`模稜兩可，或轉換後的時間是否模稜兩可，這個方法會解譯為標準時間的模稜兩可的時間。 如果`dateTime`是無效的這個方法會傳回<xref:System.TimeSpan>會反映 UTC 時區的標準時間之間差異的物件。  
  
 <xref:System.TimeZoneInfo.GetUtcOffset%28System.DateTime%29?displayProperty=nameWithType>方法是在作業類似<xref:System.TimeZone.GetUtcOffset%2A>方法<xref:System.TimeZone>類別。  
  
   
  
## Examples  
 下列範例說明使用<xref:System.TimeZoneInfo.GetUtcOffset%28System.DateTime%29>方法不同的時區，並具有不同的日期值<xref:System.DateTime.Kind%2A>屬性值。  
  
 [!code-csharp[System.TimeZone2.GetUtcOffset#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.GetUtcOffset/cs/System.TimeZone2.GetUtcOffset.cs#1)]
 [!code-vb[System.TimeZone2.GetUtcOffset#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.GetUtcOffset/vb/System.TimeZone2.GetUtcOffset.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>在 [！INCLUDE[winxp](~/includes/winxp-md.md)] 系統，這個方法會套用在目前調整規則計算從 UTC 的位移，如果目前的執行個體時<see cref="P:System.TimeZoneInfo.Local" />。如此一來，方法可能不正確地計算本地時間與 UTC 之間的差異在<paramref name="dateTime" />。如需詳細資訊，請參閱 &lt; 呼叫者 &gt; 一節中的附註<see cref="P:System.TimeZoneInfo.Local" />屬性。</para>
        </block>
        <altmember cref="P:System.TimeZoneInfo.BaseUtcOffset" />
      </Docs>
    </Member>
    <Member MemberName="GetUtcOffset">
      <MemberSignature Language="C#" Value="public TimeSpan GetUtcOffset (DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan GetUtcOffset(valuetype System.DateTimeOffset dateTimeOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetUtcOffset(System.DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan GetUtcOffset(DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="F#" Value="member this.GetUtcOffset : DateTimeOffset -&gt; TimeSpan" Usage="timeZoneInfo.GetUtcOffset dateTimeOffset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">The date and time to determine the offset for.</param>
        <summary>Calculates the offset or difference between the time in this time zone and Coordinated Universal Time (UTC) for a particular date and time.</summary>
        <returns>An object that indicates the time difference between Coordinated Universal Time (UTC) and the current time zone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 傳回的時間範圍包括任何差異，因為目前的時區調整規則的應用程式。 不同於<xref:System.TimeZoneInfo.BaseUtcOffset%2A>屬性，傳回 Coordinated Universal Time (UTC) 時區的標準時間的差異，因此，不會考慮調整規則的帳戶。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>在 [！INCLUDE[winxp](~/includes/winxp-md.md)] 系統，這個方法會套用在目前調整規則計算從 UTC 的位移，如果目前的執行個體時<see cref="P:System.TimeZoneInfo.Local" />。如此一來，方法可能不正確地計算本地時間與 UTC 之間的差異在<paramref name="dateTimeOffset" />。如需詳細資訊，請參閱 &lt; 呼叫者 &gt; 一節中的附註<see cref="P:System.TimeZoneInfo.Local" />屬性。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="HasSameRules">
      <MemberSignature Language="C#" Value="public bool HasSameRules (TimeZoneInfo other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool HasSameRules(class System.TimeZoneInfo other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.HasSameRules(System.TimeZoneInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function HasSameRules (other As TimeZoneInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool HasSameRules(TimeZoneInfo ^ other);" />
      <MemberSignature Language="F#" Value="member this.HasSameRules : TimeZoneInfo -&gt; bool" Usage="timeZoneInfo.HasSameRules other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.TimeZoneInfo" />
      </Parameters>
      <Docs>
        <param name="other">A second object to compare with the current <see cref="T:System.TimeZoneInfo" /> object.</param>
        <summary>Indicates whether the current object and another <see cref="T:System.TimeZoneInfo" /> object have the same adjustment rules.</summary>
        <returns>
          <see langword="true" /> if the two time zones have identical adjustment rules and an identical base offset; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 像<xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29?displayProperty=nameWithType>方法，<xref:System.TimeZoneInfo.HasSameRules%2A>方法表示兩個時區是否具有相同的基底位移 (所定義的<xref:System.TimeZoneInfo.BaseUtcOffset%2A>屬性) 和相同的調整規則。 不同於<xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29?displayProperty=nameWithType>方法，<xref:System.TimeZoneInfo.HasSameRules%2A>不會比較時區識別項 (由<xref:System.TimeZoneInfo.Id%2A>屬性)。  
  
   
  
## Examples  
 一般來說，數目在登錄中定義的時區具有相同的位移，從 Coordinated Universal Time (UTC) 和相同的調整規則。 下列範例會顯示到主控台這些時區的清單。  
  
 [!code-csharp[System.TimeZone2.HasSameRules#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.HasSameRules/cs/HasSameRules.cs#1)]
 [!code-vb[System.TimeZone2.HasSameRules#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.HasSameRules/vb/HasSameRules.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="other" /> parameter is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public string Id { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Id" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.Id" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Id As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Id { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Id : string" Usage="System.TimeZoneInfo.Id" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the time zone identifier.</summary>
        <value>時區識別項。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 時區識別項是索引鍵可唯一識別特定的時區字串。 在 Windows XP 和 Windows Vista 中，它會對應至登錄的 HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Time 區域分支的子機碼。 可以將它傳遞為參數，以<xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A>方法，以從登錄擷取特定的時區。  
  
> [!IMPORTANT]
>  雖然 Windows 登錄中的索引鍵名稱最多可有 255 個字元，但建議您將指派給自訂時區的識別項是 32 個字元或更少。 更長的識別項，就越有可能不正確的索引鍵名稱將會提供擷取它時。  
  
 值<xref:System.TimeZoneInfo.Id%2A>屬性通常是，但不是一定相同<xref:System.TimeZoneInfo.StandardName%2A>屬性。 協調通用時區的識別項會使用 utc 格式。  
  
   
  
## Examples  
 下列範例會列出每個在本機電腦上定義的時區的識別項。  
  
 [!code-csharp[System.TimeZone2.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#5)]
 [!code-vb[System.TimeZone2.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsAmbiguousTime">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Determines whether a particular date and time in a particular time zone is ambiguous and can be mapped to two or more Coordinated Universal Time (UTC) times.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsAmbiguousTime">
      <MemberSignature Language="C#" Value="public bool IsAmbiguousTime (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsAmbiguousTime(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsAmbiguousTime(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.IsAmbiguousTime : DateTime -&gt; bool" Usage="timeZoneInfo.IsAmbiguousTime dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">A date and time value.</param>
        <summary>Determines whether a particular date and time in a particular time zone is ambiguous and can be mapped to two or more Coordinated Universal Time (UTC) times.</summary>
        <returns>
          <see langword="true" /> if the <paramref name="dateTime" /> parameter is ambiguous; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 模稜兩可的時間落在目前時區的時間範圍內。 這表示它可以是標準時間或時間所產生的調整規則的應用程式。 一般而言，時鐘設定為傳回標準時間日光節約時間時造成模稜兩可的時間。 請參閱 < 範例 > 一節。  
  
 國際標準時間 (UTC) 有任何模稜兩可的時間。兩者皆非的時間不支援日光節約時間的區域。 因此，這些時區具有沒有調整規則和呼叫<xref:System.TimeZoneInfo.IsAmbiguousTime%2A>方法一律會傳回`false`。  
  
 遵循日光節約時間的時區，這個方法的確切行為取決於之間的關聯性<xref:System.DateTime.Kind%2A>屬性和<xref:System.TimeZoneInfo>物件，如下表所示。  
  
|TimeZoneInfo 物件類型|Kind 屬性值|行為|  
|------------------------------|-------------------------|--------------|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Local?displayProperty=nameWithType> 或 <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|決定是否`dateTime`參數模稜兩可。|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|將轉換`dateTime`的本機時間，然後決定該時間是否模稜兩可。|  
|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType> 或 <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|傳回 `false`。|  
|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|如果`dateTime`模稜兩可，假設標準時間、 將它轉換成 UTC，並傳回`false`。|  
|任何其他的時區。|<xref:System.DateTimeKind.Local?displayProperty=nameWithType> 或 <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|將轉換`dateTime`指定時區的時間，然後決定該時間是否模稜兩可。|  
|任何其他的時區。|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|決定是否`dateTime`模稜兩可。|  
  
   
  
## Examples  
 以太平洋時區為準，日光節約時間結束上午 2:00 2007 年 11 月 4日日。 下列範例會在一分鐘的時間間隔，從上午 12:59 傳遞時間 2007 年 11 月 4日日到變成上午 2:01。 在 2007 年 11 月 4 日，以<xref:System.TimeZoneInfo.IsAmbiguousTime%28System.DateTime%29>方法<xref:System.TimeZoneInfo>物件，表示太平洋時區。 主控台輸出會指出所有時間，從上午 1:00 2007 年 11 月 4日日到變成上午 1:59。 在 2007 年 11 月 4 日，模稜兩可。  
  
 [!code-csharp[System.TimeZone2.Class#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#8)]
 [!code-vb[System.TimeZone2.Class#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The <see cref="P:System.DateTime.Kind" /> property of the <paramref name="dateTime" /> value is <see cref="F:System.DateTimeKind.Local" /> and <paramref name="dateTime" /> is an invalid time.</exception>
        <block subset="none" type="usage">
          <para>在 [！INCLUDE[winxp](~/includes/winxp-md.md)] 系統，這個方法會套用在目前調整規則如果目前的執行個體<see cref="P:System.TimeZoneInfo.Local" />。如此一來，此方法可能不正確地回報是否<paramref name="dateTime" />是模稜兩可的時間期間，目前的調整規則生效之前。如需詳細資訊，請參閱 &lt; 呼叫者 &gt; 一節中的附註<see cref="P:System.TimeZoneInfo.Local" />屬性。</para>
        </block>
        <altmember cref="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="IsAmbiguousTime">
      <MemberSignature Language="C#" Value="public bool IsAmbiguousTime (DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsAmbiguousTime(valuetype System.DateTimeOffset dateTimeOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsAmbiguousTime(DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="F#" Value="member this.IsAmbiguousTime : DateTimeOffset -&gt; bool" Usage="timeZoneInfo.IsAmbiguousTime dateTimeOffset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">A date and time.</param>
        <summary>Determines whether a particular date and time in a particular time zone is ambiguous and can be mapped to two or more Coordinated Universal Time (UTC) times.</summary>
        <returns>
          <see langword="true" /> if the <paramref name="dateTimeOffset" /> parameter is ambiguous in the current time zone; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 模稜兩可的時間落在目前時區的時間範圍內。 這表示它可以是標準時間或時間所產生的調整規則的應用程式。 一般而言，時鐘設定為傳回標準時間日光節約時間時造成模稜兩可的時間。 國際標準時間 (UTC) 有任何模稜兩可的時間。兩者皆非的時間不支援日光節約時間的區域。  
  
 方法的確切行為取決於之間的關聯性<xref:System.DateTimeOffset.Offset%2A>屬性`dateTimeOffset`參數和目前的時區。 如果值<xref:System.DateTimeOffset.Offset%2A>屬性有可能在與目前時區的 UTC 時差，此方法會判斷是否該日期和時間模稜兩可。 否則，它會將轉換`dateTimeOffset`目前的時區的時間，然後決定是否該日期和時間模稜兩可。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>在 [！INCLUDE[winxp](~/includes/winxp-md.md)] 系統，這個方法會套用在目前調整規則如果目前的執行個體<see cref="P:System.TimeZoneInfo.Local" />。如此一來，此方法可能不正確地回報是否<paramref name="dateTimeOffset" />是模稜兩可的時間期間，目前的調整規則生效之前。如需詳細資訊，請參閱 &lt; 呼叫者 &gt; 一節中的附註<see cref="P:System.TimeZoneInfo.Local" />屬性。</para>
        </block>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsDaylightSavingTime">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Indicates whether a specified date and time falls in the range of daylight saving time for the current <see cref="T:System.TimeZoneInfo" /> object's time zone.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public bool IsDaylightSavingTime (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsDaylightSavingTime(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsDaylightSavingTime(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.IsDaylightSavingTime : DateTime -&gt; bool" Usage="timeZoneInfo.IsDaylightSavingTime dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">A date and time value.</param>
        <summary>Indicates whether a specified date and time falls in the range of daylight saving time for the time zone of the current <see cref="T:System.TimeZoneInfo" /> object.</summary>
        <returns>
          <see langword="true" /> if the <paramref name="dateTime" /> parameter is a daylight saving time; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 傳回值<xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType>所代表的時區之間的關聯性會受到<xref:System.TimeZoneInfo>物件和<xref:System.DateTime.Kind%2A>屬性`dateTime`參數，如下表所示。  
  
|TimeZoneInfo 物件|DateTime.Kind 屬性|結果|  
|-------------------------|----------------------------|------------|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|`DateTimeKind.Local`|決定是否`dateTime`是日光節約時間。|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|`DateTimeKind.Utc`|將轉換`dateTime`與國際標準時間 (UTC) 為當地時間，並判斷是否日光節約時間。|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|`DateTimeKind.Unspecified`|假設`dateTime`代表當地時間，並判斷它是否日光節約時間。|  
|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>|`DateTimeKind.Local`、 `DateTimeKind.Unspecified`或 `DateTimeKind.Utc`|傳回`false`（UTC 不支援日光節約時間）。|  
|任何其他<xref:System.TimeZoneInfo>物件。|`DateTimeKind.Local`|將本地時間轉換為相等的時間<xref:System.TimeZoneInfo>物件，然後決定是否後者日光節約時間。|  
|任何其他<xref:System.TimeZoneInfo>物件。|`DateTimeKind.Utc`|將轉換為相等的時間的 UTC<xref:System.TimeZoneInfo>物件，然後決定是否後者日光節約時間。|  
|任何其他<xref:System.TimeZoneInfo>物件。|`DateTimeKind.Unspecified`|決定是否`dateTime`是日光節約時間。|  
  
 如果以表示時區<xref:System.TimeZoneInfo>物件不支援日光節約時間，此方法一定會傳回`false`。 時間區域，其中包括一些<xref:System.TimeZoneInfo.Utc%2A>，不會遵守日光節約時間。  若要判斷是否時區支援日光節約時間，擷取的值及其<xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A>屬性。  
  
 如果`dateTime`參數指定的模稜兩可的時間以目前物件的時區為準，<xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType>方法解譯`dateTime`做為標準時間，並傳回`false`如果其<xref:System.DateTime.Kind%2A>屬性是<xref:System.DateTimeKind.Local?displayProperty=nameWithType>或<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. 如果<xref:System.DateTime.Kind%2A>屬性是<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>，這個方法會選取正確模稜兩可的時間，表示是否為日光節約時間。  
  
 因為<xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29?displayProperty=nameWithType>方法可以傳回`false`模稜兩可的時間和日期 （亦即，日期和時間表示的標準時間或為特定時區的日光節約時間）<xref:System.TimeZoneInfo.IsAmbiguousTime%28System.DateTime%29?displayProperty=nameWithType>可以搭配方法<xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29>方法，以判斷是否有可能時間日光節約時間。 因為模稜兩可的時間，日光節約時間和標準時間，也是會<xref:System.TimeZoneInfo.IsAmbiguousTime%28System.DateTime%29>可以第一次呼叫方法，來決定是否將日期和時間可能是日光節約時間。 如果此方法會傳回`false`、<xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29>方法可以呼叫以判斷是否<xref:System.DateTime>值是日光節約時間。 下列範例說明這項技巧。  
  
 [!code-csharp[System.TimeZone2.IsDaylightSavingTime#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/cs/IsDaylightSavingTime.cs#2)]
 [!code-vb[System.TimeZone2.IsDaylightSavingTime#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/vb/IsDaylightSavingTime.vb#2)]  
  
 如果`dateTime`參數會指定無效的時間，方法呼叫會擲回<xref:System.ArgumentException>如果的值`dateTime`參數的<xref:System.DateTime.Kind%2A>屬性是<xref:System.DateTimeKind.Local?displayProperty=nameWithType>，否則該方法會傳回`false`。  
  
 呼叫<xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType>方法，以判斷是否要使用的時區<xref:System.TimeZoneInfo.StandardName%2A>值或其<xref:System.TimeZoneInfo.DaylightName%2A>時顯示的時區名稱的值。 請參閱 < 範例 > 一節。  
  
   
  
## Examples  
 下列範例會定義方法，名為`DisplayDateWithTimeZoneName`使用<xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType>方法，以判斷是否要顯示的時區標準時間名稱或日光節約時間名稱。  
  
 [!code-csharp[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/cs/IsDaylightSavingTime.cs#1)]
 [!code-vb[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/vb/IsDaylightSavingTime.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The <see cref="P:System.DateTime.Kind" /> property of the <paramref name="dateTime" /> value is <see cref="F:System.DateTimeKind.Local" /> and <paramref name="dateTime" /> is an invalid time.</exception>
        <block subset="none" type="usage">
          <para>在 [！INCLUDE[winxp](~/includes/winxp-md.md)] 系統，這個方法會套用在目前調整規則如果目前的執行個體<see cref="P:System.TimeZoneInfo.Local" />。如此一來，此方法可能不正確地回報是否<paramref name="dateTime" />日光節約時間為目前的調整規則生效之前的期間。如需詳細資訊，請參閱 &lt; 呼叫者 &gt; 一節中的附註<see cref="P:System.TimeZoneInfo.Local" />屬性。</para>
        </block>
        <altmember cref="P:System.TimeZoneInfo.SupportsDaylightSavingTime" />
      </Docs>
    </Member>
    <Member MemberName="IsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public bool IsDaylightSavingTime (DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsDaylightSavingTime(valuetype System.DateTimeOffset dateTimeOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsDaylightSavingTime(DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="F#" Value="member this.IsDaylightSavingTime : DateTimeOffset -&gt; bool" Usage="timeZoneInfo.IsDaylightSavingTime dateTimeOffset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">A date and time value.</param>
        <summary>Indicates whether a specified date and time falls in the range of daylight saving time for the time zone of the current <see cref="T:System.TimeZoneInfo" /> object.</summary>
        <returns>
          <see langword="true" /> if the <paramref name="dateTimeOffset" /> parameter is a daylight saving time; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 傳回值<xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType>所代表的時區之間的關聯性會受到<xref:System.TimeZoneInfo>物件和<xref:System.DateTimeOffset.Offset%2A>屬性`dateTimeOffset`參數。 如果`dateTimeOffset`並未對應到目前時區位移與國際標準時間 (UTC)，目前的時區時間的時間方法轉換。 然後會判斷該日期和時間是否為日光節約時間。  
  
 如果以表示時區<xref:System.TimeZoneInfo>物件不支援日光節約時間，此方法一定會傳回`false`。 若要判斷是否時區支援日光節約時間，擷取的值及其<xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A>屬性。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>在 [！INCLUDE[winxp](~/includes/winxp-md.md)] 系統，這個方法會套用在目前調整規則如果目前的執行個體<see cref="P:System.TimeZoneInfo.Local" />。如此一來，此方法可能不正確地回報是否<paramref name="dateTimeOffset" />日光節約時間為目前的調整規則生效之前的期間。如需詳細資訊，請參閱 &lt; 呼叫者 &gt; 一節中的附註<see cref="P:System.TimeZoneInfo.Local" />屬性。</para>
        </block>
        <altmember cref="P:System.TimeZoneInfo.SupportsDaylightSavingTime" />
      </Docs>
    </Member>
    <Member MemberName="IsInvalidTime">
      <MemberSignature Language="C#" Value="public bool IsInvalidTime (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsInvalidTime(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsInvalidTime(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.IsInvalidTime : DateTime -&gt; bool" Usage="timeZoneInfo.IsInvalidTime dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">A date and time value.</param>
        <summary>Indicates whether a particular date and time is invalid.</summary>
        <returns>
          <see langword="true" /> if <paramref name="dateTime" /> is invalid; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 無效的時間落在目前的調整規則的應用程式因為無法對應以 Coordinated Universal Time (UTC) 時區的時間範圍內。 一般而言，當時間到日光節約時間的下出現無效的時間。 請參閱 < 範例 > 一節。  
  
 值<xref:System.DateTime.Kind%2A>屬性`dateTime`參數會影響是否`dateTime`表示無效的時間，如下表所示。  
  
|DateTime.Kind 屬性|TimeZoneInfo 物件 （如果適用）|行為|  
|----------------------------|-------------------------------------------|--------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|決定時間是否無效。|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType> 或非當地時區為準。|將轉換`dateTime`的時間<xref:System.TimeZoneInfo>物件並傳回`false`。|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|不適用。|假設`dateTime`的時間<xref:System.TimeZoneInfo>物件，並判斷它是否無效。|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|不適用。|傳回 `false`。|  
  
   
  
## Examples  
 以太平洋時區為準，日光節約時間則是在上午 2:00 開始 2006 年 4 月 2日日。 下列程式碼會在一分鐘的時間間隔，從上午 1:59 傳遞時間 2006 年 4 月 2日日到變成上午 3:01。 2006 年 4 月 2 日到<xref:System.TimeZoneInfo.IsInvalidTime%2A>方法<xref:System.TimeZoneInfo>物件，表示太平洋時區。 主控台輸出會指出，所有時間上午 2:00 2006 年 4 月 2日日到變成上午 2:59。 2006 年 4 月 2 日，是無效的。  
  
 [!code-csharp[System.TimeZone2.Class#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#9)]
 [!code-vb[System.TimeZone2.Class#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#9)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>在 [！INCLUDE[winxp](~/includes/winxp-md.md)] 系統，此方法適用於調整規則的目前執行個體是否<see cref="P:System.TimeZoneInfo.Local" />。如此一來，此方法可能不正確地回報是否<paramref name="dateTime" />是目前的調整規則生效之前的時間無效的時間。如需詳細資訊，請參閱 &lt; 呼叫者 &gt; 一節中的附註<see cref="P:System.TimeZoneInfo.Local" />屬性。</para>
        </block>
        <altmember cref="Overload:System.TimeZoneInfo.IsAmbiguousTime" />
      </Docs>
    </Member>
    <Member MemberName="Local">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo Local { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.TimeZoneInfo Local" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.Local" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Local As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property TimeZoneInfo ^ Local { TimeZoneInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Local : TimeZoneInfo" Usage="System.TimeZoneInfo.Local" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.TimeZoneInfo" /> object that represents the local time zone.</summary>
        <value>代表本地時區的物件。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當地時區是程式碼執行所在的電腦上的時區。  
  
> [!IMPORTANT]
>  您一定要存取透過本地時區<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>屬性，而不是指定本地時間區域以<xref:System.TimeZoneInfo>物件變數。 這可防止<xref:System.TimeZoneInfo>物件變數，使其免於無效的呼叫所<xref:System.TimeZoneInfo.ClearCachedData%2A>方法。  
  
 <xref:System.TimeZoneInfo>所傳回物件<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>屬性會反映的設定**自動調整日光節約時間的時鐘**核取方塊或**自動調整的日光節約時鐘時間**核取方塊，在控制台中**日期和時間**應用程式來進行 Windows XP 和 Windows Vista 中，分別。 如果未選取此核取方塊，本地時區的快取的副本就會包含任何日光節約時間資訊。 這表示：  
  
-   本地時區的<xref:System.TimeZoneInfo.GetAdjustmentRules%2A>方法會傳回長度為零的陣列。  
  
-   本地時區的<xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A>屬性會傳回`false`。  
  
-   當地時區具有任何模稜兩可或無效的時間 (所有呼叫<xref:System.TimeZoneInfo.IsAmbiguousTime%2A>或<xref:System.TimeZoneInfo.IsInvalidTime%2A>傳回`false`)。  
  
-   所有呼叫<xref:System.TimeZoneInfo.IsDaylightSavingTime%2A>與個別的當地時間傳回 false。  
  
 這不為 true，不過，如果使用擷取的當地時區的參考<xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A>方法。  
  
 <xref:System.TimeZoneInfo.Local%2A>屬性會對應至<xref:System.TimeZone.CurrentTimeZone%2A>屬性<xref:System.TimeZone>類別。  
  
   
  
## Examples  
 下列範例會擷取<xref:System.TimeZoneInfo>物件，代表本地時區，並將其顯示名稱、 標準時間名稱和日光節約時間名稱的輸出。  
  
 [!code-csharp[System.TimeZone2.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/ShowTimeZoneNames1.cs#2)]
 [!code-vb[System.TimeZone2.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/ShowTimeZoneNames1.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>在日期和時間，轉換 [！INCLUDE[winxp](~/includes/winxp-md.md)] 會辨識只有目前調整規則，它只適用於所有日期，包括下層日期 （亦即，日期早於目前的調整規則的開始日期）。在 [！INCLUDE[winxp](~/includes/winxp-md.md)]，以防止本機日期和時間資訊所提供<see cref="P:System.TimeZoneInfo.Local" />從為分散在系統匣中，顯示的日期和時間資訊的物件<see cref="T:System.TimeZoneInfo" />所傳回物件<see cref="P:System.TimeZoneInfo.Local" />屬性也適用於目前的調整規則下層的日期。應用程式上執行 [！INCLUDE[winxp](~/includes/winxp-md.md)] 需要在過去精確的本地日期和時間計算使用，必須處理這種行為<see cref="M:System.TimeZoneInfo.FindSystemTimeZoneById(System.String)" />方法來擷取<see cref="T:System.TimeZoneInfo" />對應至本地時區的物件。下列範例說明的 [！在美國太平洋時區 INCLUDE[winxp](~/includes/winxp-md.md)] 系統。因為所有的前三個方法會呼叫使用所傳回的本機時區<see cref="P:System.TimeZoneInfo.Local" />屬性，它們適用於目前的時區調整規則 （這在 2007年進入效果） 為 2006 年的日期。提供轉換到日光節約時間發生的第二個星期日的年 3 月; 目前的調整規則上一個規則，在 2006 中，供轉換到日光節約時間發生在 4 月的第一個星期日，已在作用中。只有第四個方法呼叫，它會使用<see cref="M:System.TimeZoneInfo.FindSystemTimeZoneById(System.String)" />方法來擷取當地時區，精確地執行這個歷程記錄的日期和時間轉換。 [！ code-csharp[System.TimeZoneInfo.ConvertTimeToUtc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timezoneinfo.converttimetoutc/cs/converttimetoutc.cs#1)][！ code-vb[System.TimeZoneInfo.ConvertTimeToUtc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timezoneinfo.converttimetoutc/vb/converttimetoutc.vb#1)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="StandardName">
      <MemberSignature Language="C#" Value="public string StandardName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StandardName" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.StandardName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property StandardName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ StandardName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.StandardName : string" Usage="System.TimeZoneInfo.StandardName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the display name for the time zone's standard time.</summary>
        <value>時區標準時間的顯示名稱。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 根據與 Windows 作業系統一起安裝的文化特性當地語系化的顯示名稱。  
  
 <xref:System.TimeZoneInfo.StandardName%2A>屬性等同於<xref:System.TimeZone.StandardName%2A>屬性<xref:System.TimeZone>類別。  
  
 如果作業系統語言是英文，值<xref:System.TimeZoneInfo.StandardName%2A>屬性通常是，但不是一定相同<xref:System.TimeZoneInfo.Id%2A>屬性。  
  
   
  
## Examples  
 下列範例會定義方法，名為`DisplayDateWithTimeZoneName`使用<xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29>方法，以判斷是否要顯示的時區標準時間名稱或日光節約時間名稱。  
  
 [!code-csharp[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/cs/IsDaylightSavingTime.cs#1)]
 [!code-vb[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/vb/IsDaylightSavingTime.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SupportsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public bool SupportsDaylightSavingTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportsDaylightSavingTime" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.SupportsDaylightSavingTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SupportsDaylightSavingTime As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SupportsDaylightSavingTime { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.SupportsDaylightSavingTime : bool" Usage="System.TimeZoneInfo.SupportsDaylightSavingTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the time zone has any daylight saving time rules.</summary>
        <value>如果時區支援日光節約時間則為 <see langword="true" />，否則為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A>屬性所傳回本地時區<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>屬性會反映的控制台中設定**日期和時間**應用程式的核取方塊可定義是否系統自動針對日光節約時間調整。 如果未選取，或如果沒有核取方塊會顯示時間區域，這個屬性的值是`false`。  
  
   
  
## Examples  
 下列範例會擷取集合的所有本機系統可用的時區，並顯示這些不支援日光節約時間名稱。  
  
 [!code-csharp[System.TimeZone2.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#4)]
 [!code-vb[System.TimeZone2.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#4)]
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.IDeserializationCallback.OnDeserialization">
      <MemberSignature Language="C#" Value="void IDeserializationCallback.OnDeserialization (object sender);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub OnDeserialization (sender As Object) Implements IDeserializationCallback.OnDeserialization" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System::Object ^ sender) = System::Runtime::Serialization::IDeserializationCallback::OnDeserialization;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="sender">The object that initiated the callback. The functionality for this parameter is not currently implemented.</param>
        <summary>Runs when the deserialization of an object has been completed.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Runtime.Serialization.SerializationException">The <see cref="T:System.TimeZoneInfo" /> object contains invalid or corrupted data.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object to populate with data.</param>
        <param name="context">The destination for this serialization (see <see cref="T:System.Runtime.Serialization.StreamingContext" />).</param>
        <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the data needed to serialize the current <see cref="T:System.TimeZoneInfo" /> object.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is <see langword="null" />.</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">需要完全信任立即呼叫者。 這個成員無法供部分信任或安全性透明程式碼。</permission>
      </Docs>
    </Member>
    <Member MemberName="ToSerializedString">
      <MemberSignature Language="C#" Value="public string ToSerializedString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToSerializedString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ToSerializedString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToSerializedString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToSerializedString();" />
      <MemberSignature Language="F#" Value="member this.ToSerializedString : unit -&gt; string" Usage="timeZoneInfo.ToSerializedString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converts the current <see cref="T:System.TimeZoneInfo" /> object to a serialized string.</summary>
        <returns>A string that represents the current <see cref="T:System.TimeZoneInfo" /> object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常不會定義在 Windows 系統登錄中時區所依賴的應用程式可以使用<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A>方法來具現化必要的時區，為<xref:System.TimeZoneInfo>物件。 應用程式可以接著呼叫<xref:System.TimeZoneInfo.ToSerializedString%2A>方法，將時區物件轉換成字串。  
  
 <xref:System.TimeZoneInfo>物件應該也會儲存在應用程式在擷取時所需的位置。 可能的位置包括：  
  
-   登錄中。  
  
-   應用程式資源檔。  
  
-   外部檔案，例如文字檔案。  
  
   
  
## Examples  
 下列範例會嘗試擷取南極洲/南極從本機系統時區。 如果失敗，這個程式碼會嘗試從應用程式目錄中的文字檔擷取時區的相關資訊。 如果此嘗試失敗，程式碼會建立時區，並將其相關資訊寫入到文字檔案。  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#4)]
 [!code-vb[System.TimeZone2.CreateTimeZone#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeZoneInfo.FromSerializedString(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="timeZoneInfo.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the current <see cref="T:System.TimeZoneInfo" /> object's display name.</summary>
        <returns>The value of the <see cref="P:System.TimeZoneInfo.DisplayName" /> property of the current <see cref="T:System.TimeZoneInfo" /> object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當指派的集合包含<xref:System.TimeZoneInfo>物件清單控制項，例如<xref:System.Windows.Forms.ListBox>控制項，控制項自動呼叫<xref:System.TimeZoneInfo.ToString%2A>方法來擷取描述每個物件，表示清單中的字串。 如此一來，您不需要儲存為字串時，物件的有意義的描述，使用者不需要使用該字串從集合中擷取物件。 請參閱[如何： 列舉時區存在電腦上](~/docs/standard/datetime/enumerate-time-zones.md)如需詳細資訊。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Utc">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo Utc { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.TimeZoneInfo Utc" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.Utc" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Utc As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property TimeZoneInfo ^ Utc { TimeZoneInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Utc : TimeZoneInfo" Usage="System.TimeZoneInfo.Utc" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.TimeZoneInfo" /> object that represents the Coordinated Universal Time (UTC) zone.</summary>
        <value>代表國際標準時間 (UTC) 時區的物件。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這是內建的物件。此資訊<xref:System.TimeZoneInfo>物件不會從登錄擷取。  
  
> [!IMPORTANT]
>  您一定要存取國際標準時間 (UTC) 時區透過<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>屬性，而不是指派至 UTC 時區為準<xref:System.TimeZoneInfo>物件變數。 這可防止<xref:System.TimeZoneInfo>物件變數，使其免於無效的呼叫所<xref:System.TimeZoneInfo.ClearCachedData%2A>方法。  
  
 國際標準時間已先前已知為格林威治標準時間 (GMT)。  
  
   
  
## Examples  
 下列範例會擷取<xref:System.TimeZoneInfo>物件，代表國際標準時間 (UTC)，並將其顯示名稱、 標準時間名稱和日光節約時間名稱的輸出。  
  
 [!code-csharp[System.TimeZone2.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#3)]
 [!code-vb[System.TimeZone2.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>