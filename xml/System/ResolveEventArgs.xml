<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ResolveEventArgs.xml" source-language="en-US" target-language="zh-TW">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac53cb36bd1dd61eda00843f278887046151ea3c44b.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3cb36bd1dd61eda00843f278887046151ea3c44b</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ResolveEventArgs">
          <source>Provides data for loader resolution events, such as the <ph id="ph1">&lt;see cref="E:System.AppDomain.TypeResolve" /&gt;</ph>, <ph id="ph2">&lt;see cref="E:System.AppDomain.ResourceResolve" /&gt;</ph>, <ph id="ph3">&lt;see cref="E:System.AppDomain.ReflectionOnlyAssemblyResolve" /&gt;</ph>, and <ph id="ph4">&lt;see cref="E:System.AppDomain.AssemblyResolve" /&gt;</ph> events.</source>
          <target state="translated">提供載入器解析事件 (例如，<ph id="ph1">&lt;see cref="E:System.AppDomain.TypeResolve" /&gt;</ph>、<ph id="ph2">&lt;see cref="E:System.AppDomain.ResourceResolve" /&gt;</ph>、<ph id="ph3">&lt;see cref="E:System.AppDomain.ReflectionOnlyAssemblyResolve" /&gt;</ph> 和 <ph id="ph4">&lt;see cref="E:System.AppDomain.AssemblyResolve" /&gt;</ph> 事件) 的資料。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ResolveEventArgs">
          <source>When the loader cannot resolve an assembly reference and a handler has been provided for the appropriate loader resolution event, the event is raised and the <ph id="ph1">&lt;xref:System.ResolveEventArgs&gt;</ph> contains information about the item to be resolved.</source>
          <target state="translated">當載入器無法解析組件參考和處理常式已提供適當的載入器的解析度事件，就會引發事件和<ph id="ph1">&lt;xref:System.ResolveEventArgs&gt;</ph>包含要解析之項目的相關資訊。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ResolveEventArgs">
          <source>The <ph id="ph1">&lt;xref:System.ResolveEventArgs.Name%2A&gt;</ph> property contains the name of the item to be resolved.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ResolveEventArgs.Name%2A&gt;</ph>屬性包含要解析之項目的名稱。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ResolveEventArgs">
          <source>Beginning with the <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, the <ph id="ph2">&lt;xref:System.ResolveEventArgs.RequestingAssembly%2A&gt;</ph> property contains the assembly that requested an assembly that can provide the named item.</source>
          <target state="translated">開頭為<ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>、<ph id="ph2">&lt;xref:System.ResolveEventArgs.RequestingAssembly%2A&gt;</ph>屬性包含要求的組件，可以提供的具名項目之組件。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ResolveEventArgs">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.ResolveEventArgs.RequestingAssembly%2A&gt;</ph> property.</source>
          <target state="translated">如需詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.ResolveEventArgs.RequestingAssembly%2A&gt;</ph> 屬性 (Property)。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="T:System.ResolveEventArgs">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ResolveEventArgs" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.ResolveEventArgs" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:System.ResolveEventArgs.#ctor(System.String)">
          <source>The name of an item to resolve.</source>
          <target state="translated">要解析的項目名稱。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.ResolveEventArgs.#ctor(System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ResolveEventArgs" /&gt;</ph> class, specifying the name of the item to resolve.</source>
          <target state="translated">藉由指定要解析之項目的名稱，初始化 <ph id="ph1">&lt;see cref="T:System.ResolveEventArgs" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ResolveEventArgs.#ctor(System.String)">
          <source>This constructor is typically called only by the common language runtime.</source>
          <target state="translated">只能由通用語言執行平台，通常會呼叫這個建構函式。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.ResolveEventArgs.#ctor(System.String,System.Reflection.Assembly)">
          <source>The name of an item to resolve.</source>
          <target state="translated">要解析的項目名稱。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.ResolveEventArgs.#ctor(System.String,System.Reflection.Assembly)">
          <source>The assembly whose dependency is being resolved.</source>
          <target state="translated">解析其相依性的組件。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.ResolveEventArgs.#ctor(System.String,System.Reflection.Assembly)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ResolveEventArgs" /&gt;</ph> class, specifying the name of the item to resolve and the assembly whose dependency is being resolved.</source>
          <target state="translated">藉由指定要解析之項目的名稱以及解析其相依性的組件，初始化 <ph id="ph1">&lt;see cref="T:System.ResolveEventArgs" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="P:System.ResolveEventArgs.Name">
          <source>Gets the name of the item to resolve.</source>
          <target state="translated">取得要解析的物件名稱。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ResolveEventArgs.Name">
          <source>The name of the item to resolve.</source>
          <target state="translated">要解析的物件名稱。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ResolveEventArgs.Name">
          <source>For the <ph id="ph1">&lt;xref:System.AppDomain.AssemblyResolve&gt;</ph> event, <ph id="ph2">&lt;xref:System.ResolveEventArgs.Name%2A&gt;</ph> is the assembly name before policy is applied.</source>
          <target state="translated">如<ph id="ph1">&lt;xref:System.AppDomain.AssemblyResolve&gt;</ph>事件，<ph id="ph2">&lt;xref:System.ResolveEventArgs.Name%2A&gt;</ph>是前套用原則的組件名稱。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="P:System.ResolveEventArgs.RequestingAssembly">
          <source>Gets the assembly whose dependency is being resolved.</source>
          <target state="translated">取得解析其相依性的組件。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ResolveEventArgs.RequestingAssembly">
          <source>The assembly that requested the item specified by the <ph id="ph1">&lt;see cref="P:System.ResolveEventArgs.Name" /&gt;</ph> property.</source>
          <target state="translated">要求 <ph id="ph1">&lt;see cref="P:System.ResolveEventArgs.Name" /&gt;</ph> 屬性所指定之項目的組件。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ResolveEventArgs.RequestingAssembly">
          <source>The assembly that is returned by this property is an assembly that was unable to resolve the item specified by the <ph id="ph1">&lt;xref:System.ResolveEventArgs.Name%2A&gt;</ph> property, because the item did not exist in that assembly, in any of its loaded dependencies, or in any dependencies the loader could find through probing.</source>
          <target state="translated">這個屬性所傳回的組件是無法解析指定的項目之組件<ph id="ph1">&lt;xref:System.ResolveEventArgs.Name%2A&gt;</ph>屬性，因為項目不存在於這個組件，或任何相依項目中任何一個載入的相依性，載入器找透過探查找。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ResolveEventArgs.RequestingAssembly">
          <source>For example, suppose the current assembly uses the <ph id="ph1">&lt;xref:System.Reflection.Assembly.LoadFile%2A?displayProperty=nameWithType&gt;</ph> method to load assembly A from a directory outside the probing path, in order to use class CA.</source>
          <target state="translated">例如，假設目前的組件使用<ph id="ph1">&lt;xref:System.Reflection.Assembly.LoadFile%2A?displayProperty=nameWithType&gt;</ph>方法，從外部探查路徑中，目錄中載入組件 A，若要使用類別 CA。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ResolveEventArgs.RequestingAssembly">
          <source>Suppose further that class CA uses class CB, in assembly B, and that assembly A has a compile-time reference to assembly B, also located outside the probing path.</source>
          <target state="translated">假設進一步 CA 該類別會使用類別 CB，組件中 B 和組件 A 的組件 B 的編譯時期參考也位於探查路徑外。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ResolveEventArgs.RequestingAssembly">
          <source>When the current assembly attempts to instantiate CA, the loader attempts to resolve the reference to assembly B. However, because assembly A was loaded by using the <ph id="ph1">&lt;xref:System.Reflection.Assembly.LoadFile%2A?displayProperty=nameWithType&gt;</ph> method, the loader cannot resolve the dependency.</source>
          <target state="translated">當具現化 CA 嘗試目前的組件時，載入器會嘗試解析組件 b 的參考不過，因為組件已載入使用<ph id="ph1">&lt;xref:System.Reflection.Assembly.LoadFile%2A?displayProperty=nameWithType&gt;</ph>方法，載入器無法解析相依性。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ResolveEventArgs.RequestingAssembly">
          <source>If there is a handler for the <ph id="ph1">&lt;xref:System.AppDomain.AssemblyResolve?displayProperty=nameWithType&gt;</ph> event, the event is raised, and the <ph id="ph2">&lt;xref:System.ResolveEventArgs.RequestingAssembly%2A&gt;</ph> property of the resulting <ph id="ph3">&lt;xref:System.ResolveEventArgs&gt;</ph> object contains assembly A, because assembly A is the assembly that is missing a dependency.</source>
          <target state="translated">如果沒有處理常式<ph id="ph1">&lt;xref:System.AppDomain.AssemblyResolve?displayProperty=nameWithType&gt;</ph>引發事件，事件時，和<ph id="ph2">&lt;xref:System.ResolveEventArgs.RequestingAssembly%2A&gt;</ph>屬性產生<ph id="ph3">&lt;xref:System.ResolveEventArgs&gt;</ph>物件包含組件 A，因為組件的組件，缺少相依性。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ResolveEventArgs.RequestingAssembly">
          <source>The semantics of the <ph id="ph1">&lt;xref:System.ResolveEventArgs.RequestingAssembly%2A&gt;</ph> property vary, depending on how the requesting assembly was loaded:</source>
          <target state="translated">語意<ph id="ph1">&lt;xref:System.ResolveEventArgs.RequestingAssembly%2A&gt;</ph>屬性而異的載入要求的組件的方式：</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ResolveEventArgs.RequestingAssembly">
          <source>Load context: The value of the property might be <ph id="ph1">`null`</ph>.</source>
          <target state="translated">載入內容： 屬性的值可能是<ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ResolveEventArgs.RequestingAssembly">
          <source>The load context is load-order independent, and the identity of the requesting assembly is not necessarily meaningful.</source>
          <target state="translated">載入內容，而且載入順序無關的要求識別組件不一定有意義。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ResolveEventArgs.RequestingAssembly">
          <source>A non-null example occurs when the <ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph> method is called and the specified type is not known to the requesting assembly or any of its dependencies.</source>
          <target state="translated">非 null 範例，就會發生時<ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph>方法呼叫，而且指定的型別並不知道提出要求的組件或任何其相依性。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ResolveEventArgs.RequestingAssembly">
          <source>Load-from context: The property can be used as a probing hint, but the event handler should not get more than one request for a given assembly name.</source>
          <target state="translated">載入內容中： 屬性可用來當做探查的提示，但事件處理常式應該不會取得指定的組件名稱的多個要求。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ResolveEventArgs.RequestingAssembly">
          <source>No context (that is, the requesting assembly was loaded by using the <ph id="ph1">&lt;xref:System.Reflection.Assembly.LoadFile%2A?displayProperty=nameWithType&gt;</ph> method, or as a byte stream, or in mixed mode): The handler can use the <ph id="ph2">&lt;xref:System.ResolveEventArgs.RequestingAssembly%2A&gt;</ph> property to load different implementations of the same assembly based on the identity of the requesting assembly.</source>
          <target state="translated">沒有內容 (也就是提出要求的組件已載入使用<ph id="ph1">&lt;xref:System.Reflection.Assembly.LoadFile%2A?displayProperty=nameWithType&gt;</ph>方法，以位元組資料流，或在混合模式中): 處理常式可以使用<ph id="ph2">&lt;xref:System.ResolveEventArgs.RequestingAssembly%2A&gt;</ph>載入相同組件的不同實作的屬性會根據身分識別要求的組件。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>