<Type Name="Lazy&lt;T&gt;" FullName="System.Lazy&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="18f7acfe9be295d345b133ff0702748156b3ca30" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36429892" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Lazy&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Lazy`1&lt;T&gt; extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Lazy`1" />
  <TypeSignature Language="VB.NET" Value="Public Class Lazy(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class Lazy" />
  <TypeSignature Language="F#" Value="type Lazy&lt;'T&gt; = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("ThreadSafetyMode={Mode}, IsValueCreated={IsValueCreated}, IsValueFaulted={IsValueFaulted}, Value={ValueForDebugDisplay}")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.System_LazyDebugView`1))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T">正在延遲初始化的物件類型。</typeparam>
    <summary>提供延遲初始設定的支援。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 延後建立大型或需要大量資源的物件或需要大量資源的工作，執行這類的建立或執行可能不會發生在程式的存留期內時，特別是使用延遲初始設定。  
  
 若要準備延遲初始設定，您建立的執行個體<xref:System.Lazy%601>。 型別引數<xref:System.Lazy%601>您所建立的物件會指定您想要執行延遲初始化的物件型別。 建構函式用來建立<xref:System.Lazy%601>物件可以決定所初始化的特性。 延遲初始化會在第一次存取 <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> 屬性時發生。  
  
 在大部分情況下，選擇建構函式取決於您對兩個問題的答案：  
  
-   會從多個執行緒存取延遲初始化的物件嗎？ 如果是這樣，<xref:System.Lazy%601>物件可能會建立任何執行緒上。 您可以使用其中一種簡單的建構函式的預設行為是建立安全執行緒<xref:System.Lazy%601>物件，因此延遲具現化物件只能有一個執行個體建立無論多少執行緒嘗試存取它。 若要建立<xref:System.Lazy%601>不是安全執行緒的物件，您必須使用可讓您指定沒有執行緒安全的建構函式。  
  
    > [!CAUTION]
    >  進行<xref:System.Lazy%601>物件具備執行緒安全，不會保護延遲初始化的物件。 如果多個執行緒可以存取的延遲初始化的物件，您必須進行其屬性和方法安全地用於多執行緒存取。  
  
-   延遲初始設定是否需要大量程式碼，或延遲初始化的物件是否有預設建構函式不需要而且不會擲回例外狀況的所有內容？ 如果您需要撰寫初始化程式碼，或需要處理的例外狀況，使用其中一個會採用的 factory 方法的建構函式。 撰寫初始化程式碼中的 factory 方法。  
  
 下表顯示哪些建構函式，來選擇，請根據這兩項因素：  
  
|物件會由存取|如果不不需要任何初始設定程式碼 （預設建構函式），使用|如果不需要的初始化程式碼，使用|  
|--------------------------------|------------------------------------------------------------------------|---------------------------------------------|  
|多個執行緒|<xref:System.Lazy%601.%23ctor>|<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>|  
|一個執行緒|<xref:System.Lazy%601.%23ctor%28System.Boolean%29> 與`isThreadSafe`設`false`。|<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> 與`isThreadSafe`設`false`。|  
  
 您可以使用 lambda 運算式來指定此處理站方法。 這會在一個位置中保留所有初始化程式碼。 Lambda 運算式擷取的內容，包括您執行延遲初始化的物件建構函式傳遞任何引數。  
  
 **快取例外狀況**當您使用處理站方法時，會快取例外狀況。 也就是說，如果的 factory 方法，就會擲回例外狀況的第一個階段的執行緒嘗試存取<xref:System.Lazy%601.Value%2A>屬性<xref:System.Lazy%601>物件，每個後續的嘗試會擲回相同的例外狀況。 如此可確保每次呼叫<xref:System.Lazy%601.Value%2A>屬性會產生相同的結果，並避免如果不同的執行緒都會取得不同的結果可能會產生難以察覺的錯誤。 <xref:System.Lazy%601>代表的實際`T`，否則會初始化在某個較早的時間點，通常在啟動期間。 在該較早的時間點失敗是通常是嚴重威脅。 如果沒有可復原的失敗的可能性，我們建議您至初始化常式 （在此情況下，處理站方法），建立重試邏輯，就如同如果您沒有使用延遲初始設定。  
  
 **鎖定的替代方式**在某些情況下，您可能想要避免的額外負荷<xref:System.Lazy%601>物件的預設鎖定行為。 在罕見的情況下，可能會有死結。 在這種情況下，您可以使用<xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29>或<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>建構函式，並指定<xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>。 這可讓<xref:System.Lazy%601>物件以建立數個執行緒的每個上的延遲初始化物件的複本，如果呼叫執行緒<xref:System.Lazy%601.Value%2A>屬性同時。 <xref:System.Lazy%601>物件可確保所有執行緒使用相同的執行個體的延遲初始化的物件，並捨棄未使用的執行個體。 因此，減少鎖定負擔成本是您的程式可能會有時建立，並捨棄高度耗費資源物件的額外複本。 在大部分情況下，這是不太可能項目。 如範例<xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29>和<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>建構函式都會表現此行為。  
  
> [!IMPORTANT]
>  當您指定<xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>，例外狀況會永遠不會快取，即使您指定的 factory 方法。  
  
 **對等的建構函式**除了啟用使用<xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>、<xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29>和<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>建構函式可以複製其他建構函式的功能。 下表顯示對等的行為會產生的參數值。  
  
|若要建立<xref:System.Lazy%601>物件|建構函式具有`LazyThreadSafetyMode``mode`參數，設定`mode`至|建構函式的布林值為`isThreadSafe`參數，設定`isThreadSafe`至|不含任何執行緒安全性參數的建構函式|  
|-------------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------|-------------------------------------------------------|  
|完整具備執行緒安全。使用鎖定來確保只有一個執行緒初始化值。|<xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication>|`true`|所有這類建構函式是完全安全執行緒。|  
|不具備執行緒安全。|<xref:System.Threading.LazyThreadSafetyMode.None>|`false`|不適用。|  
|完整具備執行緒安全。執行緒競爭來初始化值。|<xref:System.Threading.LazyThreadSafetyMode.PublicationOnly>|不適用。|不適用。|  
  
 **其他功能**有關使用<xref:System.Lazy%601>執行緒靜態欄位，或做為備份存放區屬性，請參閱[延遲初始設定](~/docs/framework/performance/lazy-initialization.md)。  
  
   
  
## Examples  
 下列範例示範如何使用<xref:System.Lazy%601>類別，以提供延遲初始設定，以從多個執行緒存取。  
  
> [!NOTE]
>  此範例會使用<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>建構函式。 它也示範如何使用<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29>建構函式 (指定`true`如`isThreadSafe`) 和<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>建構函式 (指定<xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>如`mode`)。 若要切換至不同的建構函式，只要將變更的建構函式標記為註解。  
>   
>  如需示範例外狀況的範例快取使用相同的建構函式，請參閱<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>建構函式。  
  
 這個範例定義將由多個執行緒中的一個執行延遲初始化的 `LargeObject` 類別。 程式碼的四個索引鍵的各節將說明建立初始設定式、 的 factory 方法，實際的初始化和的建構函式`LargeObject`類別，建立物件時，會顯示訊息。 在 `Main` 方法的開頭，此範例會為 `LargeObject` 建立安全執行緒延遲初始設定式:  
  
 [!code-csharp[System.Lazy\`1#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#newlazy)]  
  
 Factory 方法，顯示在建立物件，以進行進一步的初始化預留位置：  
  
 [!code-csharp[System.Lazy\`1#FactoryFunc](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#factoryfunc)]
 [!code-vb[System.Lazy\`1#FactoryFunc](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#factoryfunc)]  
  
 請注意，使用 lambda 函式，無法合併前, 兩個程式碼區段，如下所示：  
  
 [!code-csharp[System.Lazy\`1#InitWithLambda](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/lambda.cs#initwithlambda)]
 [!code-vb[System.Lazy\`1#InitWithLambda](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/lambda.vb#initwithlambda)]  
  
 此範例會暫停，表示沒有期限可能會發生延遲初始設定之前停用。 當您按**Enter**索引鍵，此範例會建立並啟動三個執行緒。 `ThreadProc`方法，以供所有的三個執行緒呼叫<xref:System.Lazy%601.Value%2A>屬性。 發生這種情況，在第一次`LargeObject`建立執行個體：  
  
 [!code-csharp[System.Lazy\`1#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#valueprop)]  
  
 建構函式`LargeObject`類別，其中包含程式碼的最後一節，會顯示訊息和記錄初始化執行緒的識別。 程式的輸出會出現在完整的程式碼清單的結尾。  
  
 [!code-csharp[System.Lazy\`1#LargeCtor](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#largector)]
 [!code-vb[System.Lazy\`1#LargeCtor](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#largector)]  
  
> [!NOTE]
>  為了簡化，這個範例使用 <xref:System.Lazy%601> 的全域執行個體，而且所有方法都是 `static` (Visual Basic 中為 `Shared`)。 這些不是使用延遲初始設定的必要項。  
  
 [!code-csharp[System.Lazy\`1#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#all)]  
  
 ]]></format>
    </remarks>
    <threadsafe>根據預設，所有的 public 和 protected 成員的<see cref="T:System.Lazy`1" />類別都是安全執行緒，且可能會從多個執行緒同時使用。 （選擇性） 和每個執行個體，使用參數的型別建構函式，可能會移除這些執行緒安全性保證。</threadsafe>
    <altmember cref="T:System.Threading.LazyThreadSafetyMode" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Lazy`1" /> 類別的新執行個體。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Lazy`1" /> 類別的新執行個體。 發生延遲初始設定時，會使用目標類型的預設建構函式。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可從多個執行緒同時使用這個建構函式來建立執行個體。  
  
 執行緒安全模式的<xref:System.Lazy%601>會使用這個建構函式初始化的執行個體是<xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>。 執行緒安全模式描述的行為，當多個執行緒嘗試初始化<xref:System.Lazy%601>執行個體。  
  
 A<xref:System.Lazy%601>建立使用這個建構函式的執行個體不會快取例外狀況。 如需詳細資訊，請參閱 <xref:System.Lazy%601> 類別或 <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> 列舉型別。  
  
   
  
## Examples  
 下列範例示範如何使用這個建構函式。 它也說明如何使用<xref:System.Lazy%601.%23ctor%28System.Boolean%29>建構函式 (指定`true`如`isThreadSafe`) 和<xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29>建構函式 (指定<xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>如`mode`)。 若要切換至不同的建構函式，只要將變更的建構函式標記為註解。  
  
 這個範例定義將由多個執行緒中的一個執行延遲初始化的 `LargeObject` 類別。 兩個金鑰在此範例中的程式碼行會建立初始設定式和實際初始化。 在 `Main` 方法的開頭，此範例會為 `LargeObject` 建立安全執行緒延遲初始設定式:  
  
 [!code-csharp[System.Lazy\`1.ctor#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctor/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctor#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctor/vb/example.vb#newlazy)]  
  
 此範例會建立並啟動三個執行緒上封鎖<xref:System.Threading.ManualResetEvent>物件，以便在此範例可以一次釋放執行緒。 `ThreadProc`方法，以供所有的三個執行緒呼叫<xref:System.Lazy%601.Value%2A>屬性來取得`LargeObject`執行個體：  
  
 [!code-csharp[System.Lazy\`1.ctor#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctor/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctor#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctor/vb/example.vb#valueprop)]  
  
 <xref:System.Lazy%601>類別會提供鎖定，因此只有一個執行緒來建立允許`LargeObject`執行個體。 此範例會示範所有其他執行緒都取得相同的執行個體。  
  
> [!NOTE]
>  為了簡化，這個範例使用 <xref:System.Lazy%601> 的全域執行個體，而且所有方法都是 `static` (Visual Basic 中為 `Shared`)。 這些不是使用延遲初始設定的必要項。  
  
 [!code-csharp[System.Lazy\`1.ctor#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctor/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctor#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctor/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (bool isThreadSafe);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool isThreadSafe) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (isThreadSafe As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(bool isThreadSafe);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : bool -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; isThreadSafe" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="isThreadSafe" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="isThreadSafe">
          <see langword="true" /> 表示這個執行個體可供多個執行緒同時使用，<see langword="false" /> 表示執行個體一次只能供一個執行緒使用。</param>
        <summary>初始化 <see cref="T:System.Lazy`1" /> 類別的新執行個體。 當延遲初始設定發生時，會使用目標類型的預設建構函式和指定的初始設定模式。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 執行緒安全模式的<xref:System.Lazy%601>會使用這個建構函式初始化的執行個體是<xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>如果`isThreadSafe`是`true`，否則的模式是<xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>。 執行緒安全模式描述的行為，當多個執行緒嘗試初始化<xref:System.Lazy%601>執行個體。 若要指定<xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>模式中，使用<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>或<xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29>建構函式。  
  
 A<xref:System.Lazy%601>建立使用這個建構函式的執行個體不會快取例外狀況。 如需詳細資訊，請參閱 <xref:System.Lazy%601> 類別或 <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> 列舉型別。  
  
   
  
## Examples  
 下列範例示範如何使用這個建構函式來建立不是安全的延遲初始化的物件的所有存取相同的執行緒上都發生的情況下執行緒延遲初始設定式。 它也示範如何使用<xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29>建構函式 (指定<xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>如`mode`。 若要切換至不同的建構函式，只要將變更的建構函式標記為註解。  
  
> [!NOTE]
>  示範如何在多執行緒案例中使用這個建構函式的程式碼 (指定`true`如`isThreadSafe`)，請參閱範例的<xref:System.Lazy%601.%23ctor>建構函式。  
  
 此範例會定義`LargeObject`將執行延遲初始化的類別。 在`Main`方法，此範例會建立<xref:System.Lazy%601>執行個體，然後暫停。 當您按**Enter**索引鍵，範例會存取<xref:System.Lazy%601.Value%2A>屬性<xref:System.Lazy%601>執行個體，這會導致進行初始化。 建構函式`LargeObject`類別會顯示主控台訊息。  
  
> [!NOTE]
>  為了簡化，這個範例使用 <xref:System.Lazy%601> 的全域執行個體，而且所有方法都是 `static` (Visual Basic 中為 `Shared`)。 這些不是使用延遲初始設定的必要項。  
  
 [!code-csharp[System.Lazy\`1.ctorBool#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorbool/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorBool#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorbool/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (Func&lt;T&gt; valueFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;!T&gt; valueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Func{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (valueFactory As Func(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(Func&lt;T&gt; ^ valueFactory);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : Func&lt;'T&gt; -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; valueFactory" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="valueFactory">委派，需要時會叫用以產生延遲初始化的值。</param>
        <summary>初始化 <see cref="T:System.Lazy`1" /> 類別的新執行個體。 當延遲初始設定發生時，就會使用指定的初始化函式。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可從多個執行緒同時使用這個建構函式來建立執行個體。  
  
 執行緒安全模式的<xref:System.Lazy%601>會使用這個建構函式初始化的執行個體是<xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>。 執行緒安全模式描述的行為，當多個執行緒嘗試初始化<xref:System.Lazy%601>執行個體。  
  
 擲回的例外狀況`valueFactory`會快取。 如需詳細資訊，請參閱 <xref:System.Lazy%601> 類別或 <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> 列舉型別。  
  
   
  
## Examples  
 下列範例示範如何使用這個建構函式，以提供延遲初始設定快取例外狀況。 它也示範如何使用<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29>建構函式 (指定`true`如`isThreadSafe`) 和<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>建構函式 (指定<xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>如`mode`)。 若要切換至不同的建構函式，只要將變更的建構函式標記為註解。  
  
 這個範例定義將由多個執行緒中的一個執行延遲初始化的 `LargeObject` 類別。 程式碼的三個索引鍵的各節將說明建立初始設定式、 實際初始化，以及建構函式`LargeObject`類別，示範快取例外狀況。 在 `Main` 方法的開頭，此範例會為 `LargeObject` 建立安全執行緒延遲初始設定式:  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorFunc#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#newlazy)]  
  
 此範例會建立並啟動三個執行緒。 `ThreadProc`方法，以供所有的三個執行緒呼叫<xref:System.Lazy%601.Value%2A>屬性來取得`LargeObject`執行個體：  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorFunc#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#valueprop)]  
  
 建構函式中`LargeObject`類別，第三個索引鍵段程式碼擲回例外狀況第一次`LargeObject`執行個體建立時，但之後可讓執行個體建立發生：  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#LargeCtor](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#largector)]
 [!code-vb[System.Lazy\`1.ctorFunc#LargeCtor](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#largector)]  
  
 當範例執行時，會嘗試建立的執行個體的第一個執行緒`LargeObject`攔截會失敗，且例外狀況。 您可能預期的下一個執行緒會成功地建立執行個體，但<xref:System.Lazy%601>物件已快取例外狀況。 因為這個緣故，所有三個執行緒擲回例外狀況。  
  
> [!NOTE]
>  為了簡化，這個範例使用 <xref:System.Lazy%601> 的全域執行個體，而且所有方法都是 `static` (Visual Basic 中為 `Shared`)。 這些不是使用延遲初始設定的必要項。  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorFunc#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="valueFactory" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (System.Threading.LazyThreadSafetyMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Threading.LazyThreadSafetyMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (mode As LazyThreadSafetyMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(System::Threading::LazyThreadSafetyMode mode);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : System.Threading.LazyThreadSafetyMode -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; mode" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="mode" Type="System.Threading.LazyThreadSafetyMode" />
      </Parameters>
      <Docs>
        <param name="mode">其中一個列舉值會指定執行緒安全模式。</param>
        <summary>初始化 <see cref="T:System.Lazy`1" /> 類別的新執行個體，這個執行個體會使用 <paramref name="T" /> 的預設建構函式和指定的執行緒安全模式。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 執行緒安全模式的<xref:System.Lazy%601>執行個體描述的行為，當多個執行緒嘗試初始化<xref:System.Lazy%601>執行個體。  
  
 A<xref:System.Lazy%601>建立使用這個建構函式的執行個體不會快取例外狀況。 如需詳細資訊，請參閱 <xref:System.Lazy%601> 類別或 <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> 列舉型別。  
  
   
  
## Examples  
 下列範例示範如何使用這個建構函式來建立延遲初始設定式，可讓多個執行緒執行延遲建立物件的競爭。 多個執行緒可能會成功建立執行個體，但所有執行緒都使用第一次建立的執行個體。  
  
> [!NOTE]
>  如需範例，示範如何在單一執行緒案例中使用這個建構函式 (指定<xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>如`mode`)，請參閱<xref:System.Lazy%601.%23ctor%28System.Boolean%29>建構函式。 如需範例，示範如何使用這個建構函式提供的鎖定而不多執行緒案例中的競爭情形 (指定<xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>如`mode`)，請參閱<xref:System.Lazy%601.%23ctor>建構函式。  
  
 此範例會定義`LargeObject`會由任何多個執行緒執行延遲初始化的類別。 程式碼的三個主要區段說明建立初始設定式、 實際的初始化和建構函式和完成項的`LargeObject`類別。 在開頭`Main`方法，此範例會建立<xref:System.Lazy%601>執行延遲初始化的物件`LargeObject`:  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorLTSM#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#newlazy)]  
  
 此範例會建立並啟動三個執行緒上封鎖<xref:System.Threading.ManualResetEvent>物件，以便在此範例可以一次釋放執行緒。 在`ThreadProc`方法，以供所有的三個執行緒，呼叫<xref:System.Lazy%601.Value%2A>屬性建立`LargeObject`執行個體：  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorLTSM#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#valueprop)]  
  
 因為的建構函式<xref:System.Lazy%601>指定執行個體<xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>，所有三個執行緒都可建立`LargeObject`執行個體。 範例將提供示範顯示主控台訊息，在建構函式和完成項的`LargeObject`類別：  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#CtorFinalizer](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#ctorfinalizer)]
 [!code-vb[System.Lazy\`1.ctorLTSM#CtorFinalizer](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#ctorfinalizer)]  
  
 不過，<xref:System.Lazy%601>物件可確保只有一個執行個體由所有執行緒。 範例輸出會顯示所有的三個執行緒使用相同的執行個體，以及顯示其他兩個執行個體，可以回收進行回收。  
  
> [!NOTE]
>  為了簡化，這個範例使用 <xref:System.Lazy%601> 的全域執行個體，而且所有方法都是 `static` (Visual Basic 中為 `Shared`)。 這些不是使用延遲初始設定的必要項。  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorLTSM#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="mode" /> 包含無效的值。</exception>
        <altmember cref="T:System.Threading.LazyThreadSafetyMode" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(T value);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : 'T -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (Func&lt;T&gt; valueFactory, bool isThreadSafe);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;!T&gt; valueFactory, bool isThreadSafe) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (valueFactory As Func(Of T), isThreadSafe As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(Func&lt;T&gt; ^ valueFactory, bool isThreadSafe);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : Func&lt;'T&gt; * bool -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; (valueFactory, isThreadSafe)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
        <Parameter Name="isThreadSafe" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="valueFactory">委派，需要時會叫用以產生延遲初始化的值。</param>
        <param name="isThreadSafe">
          <see langword="true" /> 表示這個執行個體可供多個執行緒同時使用，<see langword="false" /> 表示這個執行個體一次只能供一個執行緒使用。</param>
        <summary>初始化 <see cref="T:System.Lazy`1" /> 類別的新執行個體。 當延遲初始設定發生時，會使用指定的初始化函式和初始化模式。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 執行緒安全模式的<xref:System.Lazy%601>會使用這個建構函式初始化的執行個體是<xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>如果`isThreadSafe`是`true`，否則的模式是<xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>。 執行緒安全模式描述的行為，當多個執行緒嘗試初始化<xref:System.Lazy%601>執行個體。  
  
 若要指定<xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>模式中，使用<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>或<xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29>建構函式。  
  
 擲回的例外狀況`valueFactory`會快取。 如需詳細資訊，請參閱 <xref:System.Lazy%601> 類別或 <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> 列舉型別。  
  
   
  
## Examples  
 下列範例示範如何使用這個建構函式，以提供延遲初始設定快取，在案例中，以單一執行緒的例外狀況。 它也示範如何使用<xref:System.Lazy%601.%23ctor%2A>建構函式 (指定<xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>如`mode`)。 若要切換至該建構函式，只要將變更的建構函式標記為註解。  
  
> [!NOTE]
>  示範如何在多執行緒案例中使用這個建構函式的程式碼 (指定`true`如`isThreadSafe`)，請參閱範例的<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>建構函式。  
  
 這個範例定義將由多個執行緒中的一個執行延遲初始化的 `LargeObject` 類別。 程式碼的三個索引鍵的各節將說明建立初始設定式、 實際初始化，以及建構函式`LargeObject`類別，示範快取例外狀況。 在 `Main` 方法的開頭，此範例會為 `LargeObject` 建立安全執行緒延遲初始設定式:  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#newlazy)]  
  
 在建構函式，呼叫`isThreadSafe`參數是`false`，因此<xref:System.Lazy%601>不是安全執行緒。 因為它不是安全執行緒，此範例會呼叫<xref:System.Lazy%601.Value%2A>三次的相同執行緒上的屬性：  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#valueprop)]  
  
 建構函式中`LargeObject`類別，第三個索引鍵段程式碼擲回例外狀況第一次`LargeObject`執行個體建立時，但之後可讓執行個體建立發生：  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#LargeCtor](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#largector)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#LargeCtor](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#largector)]  
  
 當範例執行時，第一次嘗試建立的執行個體`LargeObject`攔截會失敗，且例外狀況。 您所料下, 一次的嘗試會成功，但<xref:System.Lazy%601>物件已快取例外狀況。 因為這個緣故，所有的三次嘗試，會擲回例外狀況。  
  
> [!NOTE]
>  為了簡化，這個範例使用 <xref:System.Lazy%601> 的全域執行個體，而且所有方法都是 `static` (Visual Basic 中為 `Shared`)。 這些不是使用延遲初始設定的必要項。  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="valueFactory" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (Func&lt;T&gt; valueFactory, System.Threading.LazyThreadSafetyMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;!T&gt; valueFactory, valuetype System.Threading.LazyThreadSafetyMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (valueFactory As Func(Of T), mode As LazyThreadSafetyMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(Func&lt;T&gt; ^ valueFactory, System::Threading::LazyThreadSafetyMode mode);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : Func&lt;'T&gt; * System.Threading.LazyThreadSafetyMode -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; (valueFactory, mode)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
        <Parameter Name="mode" Type="System.Threading.LazyThreadSafetyMode" />
      </Parameters>
      <Docs>
        <param name="valueFactory">委派，需要時會叫用以產生延遲初始化的值。</param>
        <param name="mode">其中一個列舉值會指定執行緒安全模式。</param>
        <summary>初始化 <see cref="T:System.Lazy`1" /> 類別的新行個體，這個執行個體會使用指定的初始設定函式和執行緒安全模式。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 執行緒安全模式的<xref:System.Lazy%601>執行個體描述的行為，當多個執行緒嘗試初始化<xref:System.Lazy%601>執行個體。  
  
 擲回的例外狀況`valueFactory`會快取，除非`mode`是<xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>。 如需詳細資訊，請參閱 <xref:System.Lazy%601> 類別或 <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> 列舉型別。  
  
   
  
## Examples  
 下列範例示範如何使用這個建構函式來建立延遲初始設定式，可讓多個執行緒執行延遲建立物件的競爭。 多個執行緒可能會成功建立執行個體，但所有執行緒都使用第一次建立的執行個體。 此外，此範例示範的例外狀況會永遠不會快取指定時<xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>，即使延遲建立的類型的預設建構函式的函式，而不是由執行初始化。  
  
> [!NOTE]
>  如需範例，示範如何在單一執行緒案例中使用這個建構函式 (指定<xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>如`mode`)，請參閱<xref:System.Lazy%601.%23ctor%28System.Boolean%29>建構函式。 如需範例，示範如何使用這個建構函式提供的鎖定而不多執行緒案例中的競爭情形 (指定<xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>如`mode`)，請參閱<xref:System.Lazy%601.%23ctor>建構函式。  
  
 此範例會定義`LargeObject`會由任何多個執行緒執行延遲初始化的類別。 程式碼的四個主要區段說明建立初始設定式、 實際初始化、 初始化函式和建構函式和完成項的`LargeObject`類別。 在開頭`Main`方法，此範例會建立<xref:System.Lazy%601>執行延遲初始化的物件`LargeObject`:  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#newlazy)]  
  
 延遲初始設定式會使用函式執行初始化。 在此情況下，功能是必要的所以沒有預設建構函式`LargeObject`類別。  
  
 此範例會建立並啟動三個執行緒上封鎖<xref:System.Threading.ManualResetEvent>物件，以便在此範例可以一次釋放執行緒。 在`ThreadProc`方法，以供所有的三個執行緒，呼叫<xref:System.Lazy%601.Value%2A>屬性建立`LargeObject`執行個體：  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#valueprop)]  
  
 在第三個主要區段中的程式碼，延遲初始設定函式會呼叫建立`LargeObject`執行個體。 此函式會擲回例外狀況的第一次呼叫：  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#FactoryFunc](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#factoryfunc)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#FactoryFunc](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#factoryfunc)]  
  
 與任何其他<xref:System.Threading.LazyThreadSafetyMode>設定，初始化函式處理的例外狀況會快取。 不過，<xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>隱藏快取例外狀況。 範例輸出示範以初始化物件的後續嘗試會成功。  
  
> [!NOTE]
>  例外狀況訊息通常會顯示訊息，指出其他執行緒都已成功初始化物件之後。 這是因為擲回和攔截例外狀況時導入的延遲。  
  
 因為的建構函式<xref:System.Lazy%601>指定執行個體<xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>，所有三個執行緒都可建立`LargeObject`執行個體。 範例將提供示範顯示主控台訊息，在建構函式和完成項的`LargeObject`類別：  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#CtorFinalizer](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#ctorfinalizer)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#CtorFinalizer](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#ctorfinalizer)]  
  
 <xref:System.Lazy%601>物件可確保只有一個執行個體由所有執行緒 （除非初始設定函式擲回例外狀況的執行緒）。 範例輸出顯示這點。  
  
> [!NOTE]
>  為了簡化，這個範例使用 <xref:System.Lazy%601> 的全域執行個體，而且所有方法都是 `static` (Visual Basic 中為 `Shared`)。 這些不是使用延遲初始設定的必要項。  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="mode" /> 包含無效的值。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="valueFactory" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsValueCreated">
      <MemberSignature Language="C#" Value="public bool IsValueCreated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsValueCreated" />
      <MemberSignature Language="DocId" Value="P:System.Lazy`1.IsValueCreated" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsValueCreated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsValueCreated { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsValueCreated : bool" Usage="System.Lazy&lt;'T&gt;.IsValueCreated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，這個值表示是否已建立此 <see cref="T:System.Lazy`1" /> 執行個體的值。</summary>
        <value>如果已建立此 <see cref="T:System.Lazy`1" /> 執行個體的值則為 <see langword="true" />，否則為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當延遲初始設定發生<xref:System.Lazy%601>執行個體，它可能會導致正在建立的值或擲回例外狀況。 如果例外狀況擲回，後續的行為<xref:System.Lazy%601>執行個體取決於快取例外狀況是否作用中。 如果<xref:System.Lazy%601>建立執行個體所使用的建構函式未指定的初始化函式，則快取例外狀況為非作用中。 後續嘗試初始化<xref:System.Lazy%601>可能會成功，並在成功初始化之後<xref:System.Lazy%601.IsValueCreated%2A>屬性會傳回`true`。 如果<xref:System.Lazy%601>初始化函式以建立執行個體 (所指定`valueFactory`參數<xref:System.Lazy%601>建構函式)，則快取例外狀況由執行緒安全模式。  
  
-   如果模式是<xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>或<xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>，來初始化沒有第二個機會<xref:System.Lazy%601>執行個體。 如果發生例外狀況，就會發生的初始化函式中未處理，該例外狀況是快取及重新擲回的後續存取<xref:System.Lazy%601.Value%2A?displayProperty=nameWithType>屬性。 如果擲回例外狀況，因此在這種情況下，任何值則會建立<xref:System.Lazy%601.IsValueCreated%2A>傳回`false`。  
  
-   如果模式是<xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>，成功地執行的初始化函式 （或預設建構函式） 的第一個執行緒建立的值<xref:System.Lazy%601>執行個體。 如果在一個執行緒上初始化函式擲回的例外狀況，其他的執行緒仍可嘗試初始化<xref:System.Lazy%601>執行個體。 值建立，直到<xref:System.Lazy%601.IsValueCreated%2A>屬性會傳回`false`。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.LazyThreadSafetyMode" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="lazy.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>建立並傳回這個執行個體之 <see cref="P:System.Lazy`1.Value" /> 屬性的字串表示。</summary>
        <returns>針對此執行個體在 <see cref="M:System.Object.ToString" /> 屬性上呼叫 <see cref="P:System.Lazy`1.Value" /> 方法的結果，前提是已經建立此值 (也就是說，如果 <see cref="P:System.Lazy`1.IsValueCreated" /> 屬性傳回 <see langword="true" />)。 否則為表示尚未建立值的字串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼叫這個方法不會初始化。  
  
 <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType>屬性可以是`null`後延遲初始設定，如果該處理站方法，為指定`valueFactory`參數<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>， <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>，或<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29>建構函式會傳回`null`。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException">
          <see cref="P:System.Lazy`1.Value" /> 屬性為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public T Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Value" />
      <MemberSignature Language="DocId" Value="P:System.Lazy`1.Value" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Value As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T Value { T get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : 'T" Usage="System.Lazy&lt;'T&gt;.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得目前 <see cref="T:System.Lazy`1" /> 執行個體的延遲初始化值。</summary>
        <value>目前 <see cref="T:System.Lazy`1" /> 執行個體的延遲初始化值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Lazy%601.IsValueCreated%2A?displayProperty=nameWithType>屬性是`false`、 存取<xref:System.Lazy%601.Value%2A>屬性會強制初始化。  
  
 除了所列的例外狀況<xref:System.Lazy%601.Value%2A>屬性可以擲回任何未處理的例外狀況擲回的 factory 方法，傳遞給`valueFactory`參數<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>， <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>，或<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29>建構函式。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <see cref="T:System.Lazy`1" /> 執行個體已初始化為使用延遲初始化型別的預設建構函式，而且存取建構函式的使用權限已遺失。</exception>
        <exception cref="T:System.MissingMemberException">
          <see cref="T:System.Lazy`1" /> 執行個體已初始化為使用延遲初始化型別的預設建構函式，而且該型別沒有公用無參數的建構函式。</exception>
        <exception cref="T:System.InvalidOperationException">初始設定函式嘗試存取這個執行個體的 <see cref="P:System.Lazy`1.Value" />。</exception>
      </Docs>
    </Member>
  </Members>
</Type>