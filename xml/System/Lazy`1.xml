<Type Name="Lazy&lt;T&gt;" FullName="System.Lazy&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9f2183fb6e4009548ee3cd3573c2bc4d71b628b0" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39745682" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Lazy&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Lazy`1&lt;T&gt; extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Lazy`1" />
  <TypeSignature Language="VB.NET" Value="Public Class Lazy(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class Lazy" />
  <TypeSignature Language="F#" Value="type Lazy&lt;'T&gt; = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Diagnostics.DebuggerDisplay("ThreadSafetyMode={Mode}, IsValueCreated={IsValueCreated}, IsValueFaulted={IsValueFaulted}, Value={ValueForDebugDisplay}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.System_LazyDebugView`1))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T">
      <span data-ttu-id="17ec3-101">正在延遲初始化的物件類型。</span>
      <span class="sxs-lookup">
        <span data-stu-id="17ec3-101">The type of object that is being lazily initialized.</span>
      </span>
    </typeparam>
    <summary>
      <span data-ttu-id="17ec3-102">提供延遲初始設定的支援。</span>
      <span class="sxs-lookup">
        <span data-stu-id="17ec3-102">Provides support for lazy initialization.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17ec3-103">延後建立大型或需要大量資源的物件或執行需要大量資源的工作，尤其是這類的建立或執行可能不會發生在程式的存留期間使用延遲初始設定。</span><span class="sxs-lookup"><span data-stu-id="17ec3-103">Use lazy initialization to defer the creation of a large or resource-intensive object, or the execution of a resource-intensive task, particularly when such creation or execution might not occur during the lifetime of the program.</span></span>  
  
 <span data-ttu-id="17ec3-104">若要準備延遲初始設定，您建立的執行個體<xref:System.Lazy%601>。</span><span class="sxs-lookup"><span data-stu-id="17ec3-104">To prepare for lazy initialization, you create an instance of <xref:System.Lazy%601>.</span></span> <span data-ttu-id="17ec3-105">類型引數<xref:System.Lazy%601>您所建立的物件會指定您想要延遲初始化的物件型別。</span><span class="sxs-lookup"><span data-stu-id="17ec3-105">The type argument of the <xref:System.Lazy%601> object that you create specifies the type of the object that you want to initialize lazily.</span></span> <span data-ttu-id="17ec3-106">您用來建立建構函式<xref:System.Lazy%601>物件會決定初始化的特性。</span><span class="sxs-lookup"><span data-stu-id="17ec3-106">The constructor that you use to create the <xref:System.Lazy%601> object determines the characteristics of the initialization.</span></span> <span data-ttu-id="17ec3-107">延遲初始化會在第一次存取 <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> 屬性時發生。</span><span class="sxs-lookup"><span data-stu-id="17ec3-107">Lazy initialization occurs the first time the <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property is accessed.</span></span>  
  
 <span data-ttu-id="17ec3-108">在大部分情況下，選擇一個建構函式取決於您對兩個問題的答案：</span><span class="sxs-lookup"><span data-stu-id="17ec3-108">In most cases, choosing a constructor depends on your answers to two questions:</span></span>  
  
-   <span data-ttu-id="17ec3-109">會從多個執行緒存取延遲初始化的物件嗎？</span><span class="sxs-lookup"><span data-stu-id="17ec3-109">Will the lazily initialized object be accessed from more than one thread?</span></span> <span data-ttu-id="17ec3-110">如果是這樣，<xref:System.Lazy%601>物件可能會在任何執行緒上建立它。</span><span class="sxs-lookup"><span data-stu-id="17ec3-110">If so, the <xref:System.Lazy%601> object might create it on any thread.</span></span> <span data-ttu-id="17ec3-111">您可以使用其中一個簡單的建構函式的預設行為是建立安全執行緒<xref:System.Lazy%601>物件，因此無論多少個執行緒嘗試存取它建立延遲具現化物件的該只有一個執行個體。</span><span class="sxs-lookup"><span data-stu-id="17ec3-111">You can use one of the simple constructors whose default behavior is to create a thread-safe <xref:System.Lazy%601> object, so that only one instance of the lazily instantiated object is created no matter how many threads try to access it.</span></span> <span data-ttu-id="17ec3-112">若要建立<xref:System.Lazy%601>不是安全執行緒的物件，您必須使用可讓您不指定任何執行緒安全的建構函式。</span><span class="sxs-lookup"><span data-stu-id="17ec3-112">To create a <xref:System.Lazy%601> object that is not thread safe, you must use a constructor that enables you to specify no thread safety.</span></span>  
  
    > [!CAUTION]
    >  <span data-ttu-id="17ec3-113">讓<xref:System.Lazy%601>物件具備執行緒安全，並無法保護延遲初始化的物件。</span><span class="sxs-lookup"><span data-stu-id="17ec3-113">Making the <xref:System.Lazy%601> object thread safe does not protect the lazily initialized object.</span></span> <span data-ttu-id="17ec3-114">如果多個執行緒可以存取的延遲初始化的物件，您必須使其屬性和方法進行多執行緒存取的安全。</span><span class="sxs-lookup"><span data-stu-id="17ec3-114">If multiple threads can access the lazily initialized object, you must make its properties and methods safe for multithreaded access.</span></span>  
  
-   <span data-ttu-id="17ec3-115">延遲初始設定是否需要大量程式碼，或延遲初始化的物件是否有預設建構函式不需要而且不會擲回例外狀況的所有內容？</span><span class="sxs-lookup"><span data-stu-id="17ec3-115">Does lazy initialization require a lot of code, or does the lazily initialized object have a default constructor that does everything you need and doesn't throw exceptions?</span></span> <span data-ttu-id="17ec3-116">如果您要撰寫初始化程式碼，或需要處理的例外狀況，請使用其中一個會採用的 factory 方法的建構函式。</span><span class="sxs-lookup"><span data-stu-id="17ec3-116">If you need to write initialization code or if exceptions need to be handled, use one of the constructors that takes a factory method.</span></span> <span data-ttu-id="17ec3-117">Factory 方法中撰寫您的初始化程式碼。</span><span class="sxs-lookup"><span data-stu-id="17ec3-117">Write your initialization code in the factory method.</span></span>  
  
 <span data-ttu-id="17ec3-118">下表顯示的建構函式，若要選擇，根據這兩個因素：</span><span class="sxs-lookup"><span data-stu-id="17ec3-118">The following table shows which constructor to choose, based on these two factors:</span></span>  
  
|<span data-ttu-id="17ec3-119">物件會由存取</span><span class="sxs-lookup"><span data-stu-id="17ec3-119">Object will be accessed by</span></span>|<span data-ttu-id="17ec3-120">如果不不需要任何初始設定程式碼 （預設建構函式），使用</span><span class="sxs-lookup"><span data-stu-id="17ec3-120">If no initialization code is required (default constructor), use</span></span>|<span data-ttu-id="17ec3-121">如果需要初始化程式碼，使用</span><span class="sxs-lookup"><span data-stu-id="17ec3-121">If initialization code is required, use</span></span>|  
|--------------------------------|------------------------------------------------------------------------|---------------------------------------------|  
|<span data-ttu-id="17ec3-122">多個執行緒</span><span class="sxs-lookup"><span data-stu-id="17ec3-122">Multiple threads</span></span>|<xref:System.Lazy%601.%23ctor>|<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>|  
|<span data-ttu-id="17ec3-123">一個執行緒</span><span class="sxs-lookup"><span data-stu-id="17ec3-123">One thread</span></span>|<span data-ttu-id="17ec3-124"><xref:System.Lazy%601.%23ctor%28System.Boolean%29> 具有`isThreadSafe`設定為`false`。</span><span class="sxs-lookup"><span data-stu-id="17ec3-124"><xref:System.Lazy%601.%23ctor%28System.Boolean%29> with `isThreadSafe` set to `false`.</span></span>|<span data-ttu-id="17ec3-125"><xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> 具有`isThreadSafe`設定為`false`。</span><span class="sxs-lookup"><span data-stu-id="17ec3-125"><xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> with `isThreadSafe` set to `false`.</span></span>|  
  
 <span data-ttu-id="17ec3-126">您可以使用 lambda 運算式來指定的 factory 方法。</span><span class="sxs-lookup"><span data-stu-id="17ec3-126">You can use a lambda expression to specify the factory method.</span></span> <span data-ttu-id="17ec3-127">這會在一個位置中保留所有初始化程式碼。</span><span class="sxs-lookup"><span data-stu-id="17ec3-127">This keeps all the initialization code in one place.</span></span> <span data-ttu-id="17ec3-128">Lambda 運算式會擷取的內容，包括任何您傳遞給延遲初始化的物件建構函式的引數。</span><span class="sxs-lookup"><span data-stu-id="17ec3-128">The lambda expression captures the context, including any arguments you pass to the lazily initialized object's constructor.</span></span>  
  
 <span data-ttu-id="17ec3-129">**例外狀況快取**當您使用 factory 方法時，會快取例外狀況。</span><span class="sxs-lookup"><span data-stu-id="17ec3-129">**Exception caching** When you use factory methods, exceptions are cached.</span></span> <span data-ttu-id="17ec3-130">也就是說，如果的 factory 方法，就會擲回的例外狀況的第一個時間的執行緒嘗試存取<xref:System.Lazy%601.Value%2A>屬性<xref:System.Lazy%601>物件，每個後續的嘗試都會擲回相同的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="17ec3-130">That is, if the factory method throws an exception the first time a thread tries to access the <xref:System.Lazy%601.Value%2A> property of the <xref:System.Lazy%601> object, the same exception is thrown on every subsequent attempt.</span></span> <span data-ttu-id="17ec3-131">這可確保每次呼叫<xref:System.Lazy%601.Value%2A>屬性會產生相同的結果，並避免不同的執行緒取得不同的結果可能會引起的細微錯誤。</span><span class="sxs-lookup"><span data-stu-id="17ec3-131">This ensures that every call to the <xref:System.Lazy%601.Value%2A> property produces the same result and avoids subtle errors that might arise if different threads get different results.</span></span> <span data-ttu-id="17ec3-132"><xref:System.Lazy%601>代表實際`T`，否則會初始化後在某個較早的時間點，通常會在啟動期間。</span><span class="sxs-lookup"><span data-stu-id="17ec3-132">The <xref:System.Lazy%601> stands in for an actual `T` that otherwise would have been initialized at some earlier point, usually during startup.</span></span> <span data-ttu-id="17ec3-133">在該較早的時間點失敗是通常嚴重。</span><span class="sxs-lookup"><span data-stu-id="17ec3-133">A failure at that earlier point is usually fatal.</span></span> <span data-ttu-id="17ec3-134">如果沒有可復原的失敗可能，建議您 （在此情況下，處理站方法），在初始化常式到建置重試邏輯，就像您一樣如果您未使用延遲初始設定。</span><span class="sxs-lookup"><span data-stu-id="17ec3-134">If there is a potential for a recoverable failure, we recommend that you build the retry logic into the initialization routine (in this case, the factory method), just as you would if you weren’t using lazy initialization.</span></span>  
  
 <span data-ttu-id="17ec3-135">**鎖定的替代方法**在某些情況下，您可能想要避免的額外負荷<xref:System.Lazy%601>物件的預設鎖定行為。</span><span class="sxs-lookup"><span data-stu-id="17ec3-135">**Alternative to locking** In certain situations, you might want to avoid the overhead of the <xref:System.Lazy%601> object's default locking behavior.</span></span> <span data-ttu-id="17ec3-136">在罕見的情況下，可能會有可能會有死結。</span><span class="sxs-lookup"><span data-stu-id="17ec3-136">In rare situations, there might be a potential for deadlocks.</span></span> <span data-ttu-id="17ec3-137">在這種情況下，您可以使用<xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29>或是<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>建構函式，並指定<xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="17ec3-137">In such cases, you can use the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> or <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructor, and specify <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>.</span></span> <span data-ttu-id="17ec3-138">這可讓<xref:System.Lazy%601>物件，以在每個有數個執行緒上建立一份延遲初始化的物件，如果執行緒呼叫<xref:System.Lazy%601.Value%2A>屬性同時。</span><span class="sxs-lookup"><span data-stu-id="17ec3-138">This enables the <xref:System.Lazy%601> object to create a copy of the lazily initialized object on each of several threads if the threads call the <xref:System.Lazy%601.Value%2A> property simultaneously.</span></span> <span data-ttu-id="17ec3-139"><xref:System.Lazy%601>物件可確保所有執行緒使用相同的執行個體的延遲初始化的物件，並捨棄未使用的執行個體。</span><span class="sxs-lookup"><span data-stu-id="17ec3-139">The <xref:System.Lazy%601> object ensures that all threads use the same instance of the lazily initialized object and discards the instances that are not used.</span></span> <span data-ttu-id="17ec3-140">因此，減少鎖定負擔的成本是物件的您的程式可能有時建立和捨棄的高度耗費資源的額外複本。</span><span class="sxs-lookup"><span data-stu-id="17ec3-140">Thus, the cost of reducing the locking overhead is that your program might sometimes create and discard extra copies of an expensive object.</span></span> <span data-ttu-id="17ec3-141">在大部分情況下，這是不太可能項目。</span><span class="sxs-lookup"><span data-stu-id="17ec3-141">In most cases, this is unlikely.</span></span> <span data-ttu-id="17ec3-142">範例<xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29>和<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>建構函式都會表現此行為。</span><span class="sxs-lookup"><span data-stu-id="17ec3-142">The examples for the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> and <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructors demonstrate this behavior.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="17ec3-143">當您指定<xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>，例外狀況會永遠不會快取，即使您指定的 factory 方法。</span><span class="sxs-lookup"><span data-stu-id="17ec3-143">When you specify <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, exceptions are never cached, even if you specify a factory method.</span></span>  
  
 <span data-ttu-id="17ec3-144">**對等的建構函式**除了會啟用<xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>，則<xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29>和<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>建構函式可以複製的其他建構函式的功能。</span><span class="sxs-lookup"><span data-stu-id="17ec3-144">**Equivalent constructors** In addition to enabling the use of <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> and <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructors can duplicate the functionality of the other constructors.</span></span> <span data-ttu-id="17ec3-145">下表顯示參數值會產生對等的行為。</span><span class="sxs-lookup"><span data-stu-id="17ec3-145">The following table shows the parameter values that produce equivalent behavior.</span></span>  
  
|<span data-ttu-id="17ec3-146">若要建立<xref:System.Lazy%601>物件</span><span class="sxs-lookup"><span data-stu-id="17ec3-146">To create a <xref:System.Lazy%601> object that is</span></span>|<span data-ttu-id="17ec3-147">針對具有建構函式`LazyThreadSafetyMode``mode`參數，設定`mode`至</span><span class="sxs-lookup"><span data-stu-id="17ec3-147">For constructors that have a `LazyThreadSafetyMode` `mode` parameter, set `mode` to</span></span>|<span data-ttu-id="17ec3-148">針對具有布林值的建構函式`isThreadSafe`參數，設定`isThreadSafe`至</span><span class="sxs-lookup"><span data-stu-id="17ec3-148">For constructors that have a Boolean `isThreadSafe` parameter, set `isThreadSafe` to</span></span>|<span data-ttu-id="17ec3-149">針對沒有執行緒安全性參數的建構函式</span><span class="sxs-lookup"><span data-stu-id="17ec3-149">For constructors with no thread safety parameters</span></span>|  
|-------------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------|-------------------------------------------------------|  
|<span data-ttu-id="17ec3-150">完全具備執行緒安全;會使用鎖定來確保只有一個執行緒初始化值。</span><span class="sxs-lookup"><span data-stu-id="17ec3-150">Fully thread safe; uses locking to ensure that only one thread initializes the value.</span></span>|<xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication>|`true`|<span data-ttu-id="17ec3-151">所有這類建構函式都完全是安全執行緒。</span><span class="sxs-lookup"><span data-stu-id="17ec3-151">All such constructors are fully thread safe.</span></span>|  
|<span data-ttu-id="17ec3-152">不具備執行緒安全。</span><span class="sxs-lookup"><span data-stu-id="17ec3-152">Not thread safe.</span></span>|<xref:System.Threading.LazyThreadSafetyMode.None>|`false`|<span data-ttu-id="17ec3-153">不適用。</span><span class="sxs-lookup"><span data-stu-id="17ec3-153">Not applicable.</span></span>|  
|<span data-ttu-id="17ec3-154">完全具備執行緒安全;執行緒競爭，來初始化值。</span><span class="sxs-lookup"><span data-stu-id="17ec3-154">Fully thread safe; threads race to initialize the value.</span></span>|<xref:System.Threading.LazyThreadSafetyMode.PublicationOnly>|<span data-ttu-id="17ec3-155">不適用。</span><span class="sxs-lookup"><span data-stu-id="17ec3-155">Not applicable.</span></span>|<span data-ttu-id="17ec3-156">不適用。</span><span class="sxs-lookup"><span data-stu-id="17ec3-156">Not applicable.</span></span>|  
  
 <span data-ttu-id="17ec3-157">**其他功能**如需有關使用資訊<xref:System.Lazy%601>執行緒靜態欄位或屬性的備份存放區，請參閱[延遲初始設定](~/docs/framework/performance/lazy-initialization.md)。</span><span class="sxs-lookup"><span data-stu-id="17ec3-157">**Other capabilities** For information about the use of <xref:System.Lazy%601> with thread-static fields, or as the backing store for properties, see [Lazy Initialization](~/docs/framework/performance/lazy-initialization.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17ec3-158">下列範例示範如何使用<xref:System.Lazy%601>類別，以提供從多個執行緒存取的延遲初始設定。</span><span class="sxs-lookup"><span data-stu-id="17ec3-158">The following example demonstrates the use of the <xref:System.Lazy%601> class to provide lazy initialization with access from multiple threads.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="17ec3-159">此範例會使用<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>建構函式。</span><span class="sxs-lookup"><span data-stu-id="17ec3-159">The example uses the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> constructor.</span></span> <span data-ttu-id="17ec3-160">它也示範如何使用<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29>建構函式 (指定`true`for `isThreadSafe`) 和<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>建構函式 (指定<xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>如`mode`)。</span><span class="sxs-lookup"><span data-stu-id="17ec3-160">It also demonstrates the use of the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructor (specifying `true` for `isThreadSafe`) and the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`).</span></span> <span data-ttu-id="17ec3-161">若要切換至不同的建構函式，只需變更的建構函式標記為註解。</span><span class="sxs-lookup"><span data-stu-id="17ec3-161">To switch to a different constructor, just change which constructors are commented out.</span></span>  
>   
>  <span data-ttu-id="17ec3-162">如需示範例外狀況的範例快取使用相同的建構函式，請參閱<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>建構函式。</span><span class="sxs-lookup"><span data-stu-id="17ec3-162">For an example that demonstrates exception caching using the same constructors, see the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> constructor.</span></span>  
  
 <span data-ttu-id="17ec3-163">這個範例定義將由多個執行緒中的一個執行延遲初始化的 `LargeObject` 類別。</span><span class="sxs-lookup"><span data-stu-id="17ec3-163">The example defines a `LargeObject` class that will be initialized lazily by one of several threads.</span></span> <span data-ttu-id="17ec3-164">程式碼的四個金鑰各節將說明建立初始設定式、 factory 方法，實際的初始化和的建構函式`LargeObject`類別，建立物件時，會顯示訊息。</span><span class="sxs-lookup"><span data-stu-id="17ec3-164">The four key sections of code illustrate the creation of the initializer, the factory method, the actual initialization, and the constructor of the `LargeObject` class, which displays a message when the object is created.</span></span> <span data-ttu-id="17ec3-165">在 `Main` 方法的開頭，此範例會為 `LargeObject` 建立安全執行緒延遲初始設定式:</span><span class="sxs-lookup"><span data-stu-id="17ec3-165">At the beginning of the `Main` method, the example creates the thread-safe lazy initializer for `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="17ec3-166">Factory 方法顯示如何建立物件，以進行進一步的初始化預留位置：</span><span class="sxs-lookup"><span data-stu-id="17ec3-166">The factory method shows the creation of the object, with a placeholder for further initialization:</span></span>  
  
 [!code-csharp[System.Lazy\`1#FactoryFunc](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#factoryfunc)]
 [!code-vb[System.Lazy\`1#FactoryFunc](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#factoryfunc)]  
  
 <span data-ttu-id="17ec3-167">請注意，使用 lambda 函式，無法合併前, 兩個程式碼區段，如下所示：</span><span class="sxs-lookup"><span data-stu-id="17ec3-167">Note that the first two code sections could be combined by using a lambda function, as shown here:</span></span>  
  
 [!code-csharp[System.Lazy\`1#InitWithLambda](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/lambda.cs#initwithlambda)]
 [!code-vb[System.Lazy\`1#InitWithLambda](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/lambda.vb#initwithlambda)]  
  
 <span data-ttu-id="17ec3-168">此範例會暫停，表示沒有期限在延遲初始設定之前，可能需要經過之後。</span><span class="sxs-lookup"><span data-stu-id="17ec3-168">The example pauses, to indicate that an indeterminate period may elapse before lazy initialization occurs.</span></span> <span data-ttu-id="17ec3-169">當您按下**Enter**索引鍵，此範例會建立並啟動三個執行緒。</span><span class="sxs-lookup"><span data-stu-id="17ec3-169">When you press the **Enter** key, the example creates and starts three threads.</span></span> <span data-ttu-id="17ec3-170">`ThreadProc`方法，可由所有三個執行緒呼叫<xref:System.Lazy%601.Value%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="17ec3-170">The `ThreadProc` method that's used by all three threads calls the <xref:System.Lazy%601.Value%2A> property.</span></span> <span data-ttu-id="17ec3-171">發生這種情況，第一次`LargeObject`建立執行個體：</span><span class="sxs-lookup"><span data-stu-id="17ec3-171">The first time this happens, the `LargeObject` instance is created:</span></span>  
  
 [!code-csharp[System.Lazy\`1#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="17ec3-172">建構函式`LargeObject`類別，其中包含程式碼的最後一節，顯示一則訊息，並記錄初始化執行緒的身分識別。</span><span class="sxs-lookup"><span data-stu-id="17ec3-172">The constructor of the `LargeObject` class, which includes the last key section of code, displays a message and records the identity of the initializing thread.</span></span> <span data-ttu-id="17ec3-173">程式的輸出會顯示完整的程式碼清單的結尾。</span><span class="sxs-lookup"><span data-stu-id="17ec3-173">The output from the program appears at the end of the full code listing.</span></span>  
  
 [!code-csharp[System.Lazy\`1#LargeCtor](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#largector)]
 [!code-vb[System.Lazy\`1#LargeCtor](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#largector)]  
  
> [!NOTE]
>  <span data-ttu-id="17ec3-174">為了簡化，這個範例使用 <xref:System.Lazy%601> 的全域執行個體，而且所有方法都是 `static` (Visual Basic 中為 `Shared`)。</span><span class="sxs-lookup"><span data-stu-id="17ec3-174">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="17ec3-175">這些不是使用延遲初始設定的必要項。</span><span class="sxs-lookup"><span data-stu-id="17ec3-175">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#all)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="17ec3-176">根據預設，所有的 public 和 protected 成員的<see cref="T:System.Lazy`1" />類別都是安全執行緒，且可能會從多個執行緒同時使用。</span>
      <span class="sxs-lookup">
        <span data-stu-id="17ec3-176">By default, all public and protected members of the <see cref="T:System.Lazy`1" /> class are thread safe and may be used concurrently from multiple threads.</span>
      </span>
      <span data-ttu-id="17ec3-177">（選擇性） 和每個執行個體，使用此類型的建構函式的參數，可能會移除這些執行緒安全性保證。</span>
      <span class="sxs-lookup">
        <span data-stu-id="17ec3-177">These thread-safety guarantees may be removed optionally and per instance, using parameters to the type's constructors.</span>
      </span>
    </threadsafe>
    <altmember cref="T:System.Threading.LazyThreadSafetyMode" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="17ec3-178">初始化 <see cref="T:System.Lazy`1" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17ec3-178">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="17ec3-179">初始化 <see cref="T:System.Lazy`1" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17ec3-179">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span>
          </span>
          <span data-ttu-id="17ec3-180">發生延遲初始設定時，會使用目標類型的預設建構函式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17ec3-180">When lazy initialization occurs, the default constructor of the target type is used.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17ec3-181">這個建構函式來建立執行個體可能會從多個執行緒同時使用。</span><span class="sxs-lookup"><span data-stu-id="17ec3-181">An instance that is created with this constructor may be used concurrently from multiple threads.</span></span>  
  
 <span data-ttu-id="17ec3-182">執行緒安全模式的<xref:System.Lazy%601>會使用這個建構函式初始化的執行個體是<xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="17ec3-182">The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>.</span></span> <span data-ttu-id="17ec3-183">執行緒安全模式描述的行為，當多個執行緒嘗試初始化<xref:System.Lazy%601>執行個體。</span><span class="sxs-lookup"><span data-stu-id="17ec3-183">The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="17ec3-184">A<xref:System.Lazy%601>會使用這個建構函式建立的執行個體不會快取例外狀況。</span><span class="sxs-lookup"><span data-stu-id="17ec3-184">A <xref:System.Lazy%601> instance that is created with this constructor does not cache exceptions.</span></span> <span data-ttu-id="17ec3-185">如需詳細資訊，請參閱 <xref:System.Lazy%601> 類別或 <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> 列舉型別。</span><span class="sxs-lookup"><span data-stu-id="17ec3-185">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17ec3-186">下列範例示範如何使用這個建構函式。</span><span class="sxs-lookup"><span data-stu-id="17ec3-186">The following example demonstrates the use of this constructor.</span></span> <span data-ttu-id="17ec3-187">它也說明如何使用<xref:System.Lazy%601.%23ctor%28System.Boolean%29>建構函式 (指定`true`for `isThreadSafe`) 和<xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29>建構函式 (指定<xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>如`mode`)。</span><span class="sxs-lookup"><span data-stu-id="17ec3-187">It also illustrates the use of the <xref:System.Lazy%601.%23ctor%28System.Boolean%29> constructor (specifying `true` for `isThreadSafe`) and the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`).</span></span> <span data-ttu-id="17ec3-188">若要切換至不同的建構函式，只需變更的建構函式標記為註解。</span><span class="sxs-lookup"><span data-stu-id="17ec3-188">To switch to a different constructor, just change which constructors are commented out.</span></span>  
  
 <span data-ttu-id="17ec3-189">這個範例定義將由多個執行緒中的一個執行延遲初始化的 `LargeObject` 類別。</span><span class="sxs-lookup"><span data-stu-id="17ec3-189">The example defines a `LargeObject` class that will be initialized lazily by one of several threads.</span></span> <span data-ttu-id="17ec3-190">在此範例中的程式碼的兩個關鍵程式碼會建立初始設定式和實際初始化。</span><span class="sxs-lookup"><span data-stu-id="17ec3-190">The two key lines of code in this example are the creation of the initializer and the actual initialization.</span></span> <span data-ttu-id="17ec3-191">在 `Main` 方法的開頭，此範例會為 `LargeObject` 建立安全執行緒延遲初始設定式:</span><span class="sxs-lookup"><span data-stu-id="17ec3-191">At the beginning of the `Main` method, the example creates the thread-safe lazy initializer for `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctor#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctor/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctor#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctor/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="17ec3-192">此範例會建立並啟動三個執行緒上封鎖<xref:System.Threading.ManualResetEvent>物件，如此範例可以全部一次釋放執行緒。</span><span class="sxs-lookup"><span data-stu-id="17ec3-192">The example creates and starts three threads that block on a <xref:System.Threading.ManualResetEvent> object, so that the example can release the threads all at once.</span></span> <span data-ttu-id="17ec3-193">`ThreadProc`方法，可由所有三個執行緒呼叫<xref:System.Lazy%601.Value%2A>屬性來取得`LargeObject`執行個體：</span><span class="sxs-lookup"><span data-stu-id="17ec3-193">The `ThreadProc` method that's used by all three threads calls the <xref:System.Lazy%601.Value%2A> property to get the `LargeObject` instance:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctor#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctor/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctor#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctor/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="17ec3-194"><xref:System.Lazy%601>類別會提供鎖定，因此只有一個執行緒可建立`LargeObject`執行個體。</span><span class="sxs-lookup"><span data-stu-id="17ec3-194">The <xref:System.Lazy%601> class provides locking, so that only one thread is allowed to create the `LargeObject` instance.</span></span> <span data-ttu-id="17ec3-195">此範例會示範所有其他執行緒取得相同的執行個體。</span><span class="sxs-lookup"><span data-stu-id="17ec3-195">The example demonstrates that the other threads all get the same instance.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="17ec3-196">為了簡化，這個範例使用 <xref:System.Lazy%601> 的全域執行個體，而且所有方法都是 `static` (Visual Basic 中為 `Shared`)。</span><span class="sxs-lookup"><span data-stu-id="17ec3-196">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="17ec3-197">這些不是使用延遲初始設定的必要項。</span><span class="sxs-lookup"><span data-stu-id="17ec3-197">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctor#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctor/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctor#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctor/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (bool isThreadSafe);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool isThreadSafe) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (isThreadSafe As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(bool isThreadSafe);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : bool -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; isThreadSafe" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="isThreadSafe" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="isThreadSafe">
          <span data-ttu-id="17ec3-198">
            <see langword="true" /> 表示這個執行個體可供多個執行緒同時使用，<see langword="false" /> 表示執行個體一次只能供一個執行緒使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17ec3-198">
              <see langword="true" /> to make this instance usable concurrently by multiple threads; <see langword="false" /> to make the instance usable by only one thread at a time.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17ec3-199">初始化 <see cref="T:System.Lazy`1" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17ec3-199">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span>
          </span>
          <span data-ttu-id="17ec3-200">當延遲初始設定發生時，會使用目標類型的預設建構函式和指定的初始設定模式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17ec3-200">When lazy initialization occurs, the default constructor of the target type and the specified initialization mode are used.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17ec3-201">執行緒安全模式的<xref:System.Lazy%601>會使用這個建構函式初始化的執行個體<xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>如果`isThreadSafe`是`true`; 否則模式是<xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="17ec3-201">The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> if `isThreadSafe` is `true`; otherwise, the mode is <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>.</span></span> <span data-ttu-id="17ec3-202">執行緒安全模式描述的行為，當多個執行緒嘗試初始化<xref:System.Lazy%601>執行個體。</span><span class="sxs-lookup"><span data-stu-id="17ec3-202">The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span> <span data-ttu-id="17ec3-203">若要指定<xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>模式中，使用<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>或<xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29>建構函式。</span><span class="sxs-lookup"><span data-stu-id="17ec3-203">To specify the <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> mode, use the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> or <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor.</span></span>  
  
 <span data-ttu-id="17ec3-204">A<xref:System.Lazy%601>會使用這個建構函式建立的執行個體不會快取例外狀況。</span><span class="sxs-lookup"><span data-stu-id="17ec3-204">A <xref:System.Lazy%601> instance that is created with this constructor does not cache exceptions.</span></span> <span data-ttu-id="17ec3-205">如需詳細資訊，請參閱 <xref:System.Lazy%601> 類別或 <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> 列舉型別。</span><span class="sxs-lookup"><span data-stu-id="17ec3-205">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17ec3-206">下列範例示範如何使用這個建構函式來建立不安全，適合所有存取延遲初始化的物件相同的執行緒上都發生的所在執行緒延遲初始設定式。</span><span class="sxs-lookup"><span data-stu-id="17ec3-206">The following example demonstrates the use of this constructor to create a lazy initializer that is not thread safe, for scenarios where all access to the lazily initialized object occurs on the same thread.</span></span> <span data-ttu-id="17ec3-207">它也示範如何使用<xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29>建構函式 (指定<xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>如`mode`。</span><span class="sxs-lookup"><span data-stu-id="17ec3-207">It also demonstrates the use of the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> for `mode`.</span></span> <span data-ttu-id="17ec3-208">若要切換至不同的建構函式，只需變更的建構函式標記為註解。</span><span class="sxs-lookup"><span data-stu-id="17ec3-208">To switch to a different constructor, just change which constructor is commented out.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="17ec3-209">示範如何在多執行緒案例中使用這個建構函式的程式碼 (指定`true`for `isThreadSafe`)，範例，請參閱<xref:System.Lazy%601.%23ctor>建構函式。</span><span class="sxs-lookup"><span data-stu-id="17ec3-209">For code that demonstrates how to use this constructor in multithreaded scenarios (specifying `true` for `isThreadSafe`), see the example for the <xref:System.Lazy%601.%23ctor> constructor.</span></span>  
  
 <span data-ttu-id="17ec3-210">此範例會定義`LargeObject`會延遲初始化的類別。</span><span class="sxs-lookup"><span data-stu-id="17ec3-210">The example defines a `LargeObject` class that will be initialized lazily.</span></span> <span data-ttu-id="17ec3-211">在 `Main`方法，此範例會建立<xref:System.Lazy%601>執行個體，然後暫停。</span><span class="sxs-lookup"><span data-stu-id="17ec3-211">In the `Main` method, the example creates a <xref:System.Lazy%601> instance and then pauses.</span></span> <span data-ttu-id="17ec3-212">當您按下**Enter**鍵，此範例存取<xref:System.Lazy%601.Value%2A>屬性<xref:System.Lazy%601>執行個體，這會導致進行初始化。</span><span class="sxs-lookup"><span data-stu-id="17ec3-212">When you press the **Enter** key, the example accesses the <xref:System.Lazy%601.Value%2A> property of the <xref:System.Lazy%601> instance, which causes initialization to occur.</span></span> <span data-ttu-id="17ec3-213">建構函式`LargeObject`類別會顯示主控台訊息。</span><span class="sxs-lookup"><span data-stu-id="17ec3-213">The constructor of the `LargeObject` class displays a console message.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="17ec3-214">為了簡化，這個範例使用 <xref:System.Lazy%601> 的全域執行個體，而且所有方法都是 `static` (Visual Basic 中為 `Shared`)。</span><span class="sxs-lookup"><span data-stu-id="17ec3-214">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="17ec3-215">這些不是使用延遲初始設定的必要項。</span><span class="sxs-lookup"><span data-stu-id="17ec3-215">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorBool#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorbool/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorBool#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorbool/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (Func&lt;T&gt; valueFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;!T&gt; valueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Func{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (valueFactory As Func(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(Func&lt;T&gt; ^ valueFactory);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : Func&lt;'T&gt; -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; valueFactory" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="valueFactory">
          <span data-ttu-id="17ec3-216">委派，需要時會叫用以產生延遲初始化的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17ec3-216">The delegate that is invoked to produce the lazily initialized value when it is needed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17ec3-217">初始化 <see cref="T:System.Lazy`1" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17ec3-217">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span>
          </span>
          <span data-ttu-id="17ec3-218">當延遲初始設定發生時，就會使用指定的初始化函式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17ec3-218">When lazy initialization occurs, the specified initialization function is used.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17ec3-219">這個建構函式來建立執行個體可能會從多個執行緒同時使用。</span><span class="sxs-lookup"><span data-stu-id="17ec3-219">An instance that is created with this constructor may be used concurrently from multiple threads.</span></span>  
  
 <span data-ttu-id="17ec3-220">執行緒安全模式的<xref:System.Lazy%601>會使用這個建構函式初始化的執行個體是<xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="17ec3-220">The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>.</span></span> <span data-ttu-id="17ec3-221">執行緒安全模式描述的行為，當多個執行緒嘗試初始化<xref:System.Lazy%601>執行個體。</span><span class="sxs-lookup"><span data-stu-id="17ec3-221">The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="17ec3-222">所擲回的例外狀況`valueFactory`會快取。</span><span class="sxs-lookup"><span data-stu-id="17ec3-222">Exceptions that are thrown by `valueFactory` are cached.</span></span> <span data-ttu-id="17ec3-223">如需詳細資訊，請參閱 <xref:System.Lazy%601> 類別或 <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> 列舉型別。</span><span class="sxs-lookup"><span data-stu-id="17ec3-223">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17ec3-224">下列範例示範如何使用這個建構函式，以提供與例外狀況快取的延遲初始設定。</span><span class="sxs-lookup"><span data-stu-id="17ec3-224">The following example demonstrates the use of this constructor to provide lazy initialization with exception caching.</span></span> <span data-ttu-id="17ec3-225">它也示範如何使用<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29>建構函式 (指定`true`for `isThreadSafe`) 和<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>建構函式 (指定<xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>如`mode`)。</span><span class="sxs-lookup"><span data-stu-id="17ec3-225">It also demonstrates the use of the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructor (specifying `true` for `isThreadSafe`) and the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`).</span></span> <span data-ttu-id="17ec3-226">若要切換至不同的建構函式，只需變更的建構函式標記為註解。</span><span class="sxs-lookup"><span data-stu-id="17ec3-226">To switch to a different constructor, just change which constructors are commented out.</span></span>  
  
 <span data-ttu-id="17ec3-227">這個範例定義將由多個執行緒中的一個執行延遲初始化的 `LargeObject` 類別。</span><span class="sxs-lookup"><span data-stu-id="17ec3-227">The example defines a `LargeObject` class that will be initialized lazily by one of several threads.</span></span> <span data-ttu-id="17ec3-228">程式碼的三個金鑰各節將說明建立初始設定式、 實際的初始化、 及的建構函式`LargeObject`類別，示範例外狀況快取。</span><span class="sxs-lookup"><span data-stu-id="17ec3-228">The three key sections of code illustrate the creation of the initializer, the actual initialization, and the constructor of the `LargeObject` class, which demonstrates exception caching.</span></span> <span data-ttu-id="17ec3-229">在 `Main` 方法的開頭，此範例會為 `LargeObject` 建立安全執行緒延遲初始設定式:</span><span class="sxs-lookup"><span data-stu-id="17ec3-229">At the beginning of the `Main` method, the example creates the thread-safe lazy initializer for `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorFunc#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="17ec3-230">此範例會建立並啟動三個執行緒。</span><span class="sxs-lookup"><span data-stu-id="17ec3-230">The example creates and starts three threads.</span></span> <span data-ttu-id="17ec3-231">`ThreadProc`方法，可由所有三個執行緒呼叫<xref:System.Lazy%601.Value%2A>屬性來取得`LargeObject`執行個體：</span><span class="sxs-lookup"><span data-stu-id="17ec3-231">The `ThreadProc` method that's used by all three threads calls the <xref:System.Lazy%601.Value%2A> property to get the `LargeObject` instance:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorFunc#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="17ec3-232">中的建構函式`LargeObject`類別，程式碼的第三個主要區段會擲回例外狀況的第一次`LargeObject`執行個體建立，但之後可讓您進行的執行個體建立：</span><span class="sxs-lookup"><span data-stu-id="17ec3-232">In the constructor of the `LargeObject` class, the third key section of code throws an exception the first time a `LargeObject` instance is created, but thereafter allows instance creation to occur:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#LargeCtor](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#largector)]
 [!code-vb[System.Lazy\`1.ctorFunc#LargeCtor](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#largector)]  
  
 <span data-ttu-id="17ec3-233">當範例執行時，會嘗試建立的執行個體的第一個執行緒`LargeObject`攔截失敗和例外狀況。</span><span class="sxs-lookup"><span data-stu-id="17ec3-233">When the example is run, the first thread that tries to create an instance of `LargeObject` fails, and the exception is caught.</span></span> <span data-ttu-id="17ec3-234">您可能預期的下一個執行緒會成功地建立執行個體，但<xref:System.Lazy%601>物件已快取例外狀況。</span><span class="sxs-lookup"><span data-stu-id="17ec3-234">You might expect that the next thread would successfully create an instance, but the <xref:System.Lazy%601> object has cached the exception.</span></span> <span data-ttu-id="17ec3-235">因此，所有的三個執行緒擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="17ec3-235">Because of this, all three threads throw the exception.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="17ec3-236">為了簡化，這個範例使用 <xref:System.Lazy%601> 的全域執行個體，而且所有方法都是 `static` (Visual Basic 中為 `Shared`)。</span><span class="sxs-lookup"><span data-stu-id="17ec3-236">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="17ec3-237">這些不是使用延遲初始設定的必要項。</span><span class="sxs-lookup"><span data-stu-id="17ec3-237">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorFunc#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="17ec3-238">
            <paramref name="valueFactory" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17ec3-238">
              <paramref name="valueFactory" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (System.Threading.LazyThreadSafetyMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Threading.LazyThreadSafetyMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (mode As LazyThreadSafetyMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(System::Threading::LazyThreadSafetyMode mode);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : System.Threading.LazyThreadSafetyMode -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; mode" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="mode" Type="System.Threading.LazyThreadSafetyMode" />
      </Parameters>
      <Docs>
        <param name="mode">
          <span data-ttu-id="17ec3-239">其中一個列舉值會指定執行緒安全模式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17ec3-239">One of the enumeration values that specifies the thread safety mode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17ec3-240">初始化 <see cref="T:System.Lazy`1" /> 類別的新執行個體，這個執行個體會使用 <paramref name="T" /> 的預設建構函式和指定的執行緒安全模式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17ec3-240">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class that uses the default constructor of <paramref name="T" /> and the specified thread-safety mode.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17ec3-241">執行緒安全模式的<xref:System.Lazy%601>執行個體描述的行為，當多個執行緒嘗試初始化<xref:System.Lazy%601>執行個體。</span><span class="sxs-lookup"><span data-stu-id="17ec3-241">The thread safety mode of a <xref:System.Lazy%601> instance describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="17ec3-242">A<xref:System.Lazy%601>會使用這個建構函式建立的執行個體不會快取例外狀況。</span><span class="sxs-lookup"><span data-stu-id="17ec3-242">A <xref:System.Lazy%601> instance that is created with this constructor does not cache exceptions.</span></span> <span data-ttu-id="17ec3-243">如需詳細資訊，請參閱 <xref:System.Lazy%601> 類別或 <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> 列舉型別。</span><span class="sxs-lookup"><span data-stu-id="17ec3-243">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17ec3-244">下列範例示範如何使用這個建構函式來建立可讓多個執行緒會爭相延遲建立物件的延遲初始設定式。</span><span class="sxs-lookup"><span data-stu-id="17ec3-244">The following example demonstrates the use of this constructor to create a lazy initializer that enables multiple threads to race to create an object lazily.</span></span> <span data-ttu-id="17ec3-245">多個執行緒可能會成功建立執行個體，但所有執行緒都使用的第一次建立的執行個體。</span><span class="sxs-lookup"><span data-stu-id="17ec3-245">Multiple threads might succeed in creating instances, but all threads use the instance that was created first.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="17ec3-246">如需範例，示範如何在單一執行緒案例中使用這個建構函式 (指定<xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>for `mode`)，請參閱<xref:System.Lazy%601.%23ctor%28System.Boolean%29>建構函式。</span><span class="sxs-lookup"><span data-stu-id="17ec3-246">For an example that demonstrates how to use this constructor in single-threaded scenarios (specifying <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> for `mode`), see the <xref:System.Lazy%601.%23ctor%28System.Boolean%29> constructor.</span></span> <span data-ttu-id="17ec3-247">如需範例，示範如何使用這個建構函式提供鎖定而不多執行緒案例中的競爭情形 (指定<xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>for `mode`)，請參閱<xref:System.Lazy%601.%23ctor>建構函式。</span><span class="sxs-lookup"><span data-stu-id="17ec3-247">For an example that demonstrates how to use this constructor to provide locking instead of race conditions in multithreaded scenarios (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`), see the <xref:System.Lazy%601.%23ctor> constructor.</span></span>  
  
 <span data-ttu-id="17ec3-248">此範例會定義`LargeObject`會由數個執行緒的任何延遲初始化的類別。</span><span class="sxs-lookup"><span data-stu-id="17ec3-248">The example defines a `LargeObject` class that will be initialized lazily by any of several threads.</span></span> <span data-ttu-id="17ec3-249">程式碼的三個主要區段說明建立初始設定式、 實際的初始化和建構函式和完成項的`LargeObject`類別。</span><span class="sxs-lookup"><span data-stu-id="17ec3-249">The three key sections of code illustrate the creation of the initializer, the actual initialization, and the constructor and finalizer of the `LargeObject` class.</span></span> <span data-ttu-id="17ec3-250">在開頭`Main`方法，此範例會建立<xref:System.Lazy%601>執行的延遲初始化物件`LargeObject`:</span><span class="sxs-lookup"><span data-stu-id="17ec3-250">At the beginning of the `Main` method, the example creates the <xref:System.Lazy%601> object that performs lazy initialization of the `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorLTSM#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="17ec3-251">此範例會建立並啟動三個執行緒上封鎖<xref:System.Threading.ManualResetEvent>物件，如此範例可以全部一次釋放執行緒。</span><span class="sxs-lookup"><span data-stu-id="17ec3-251">The example creates and starts three threads that block on a <xref:System.Threading.ManualResetEvent> object, so that the example can release the threads all at once.</span></span> <span data-ttu-id="17ec3-252">在 `ThreadProc`方法，可由所有的三個執行緒，呼叫<xref:System.Lazy%601.Value%2A>屬性會建立`LargeObject`執行個體：</span><span class="sxs-lookup"><span data-stu-id="17ec3-252">In the `ThreadProc` method that's used by all three threads, calling the <xref:System.Lazy%601.Value%2A> property creates the `LargeObject` instance:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorLTSM#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="17ec3-253">因為的建構函式<xref:System.Lazy%601>指定執行個體<xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>，允許所有的三個執行緒建立`LargeObject`執行個體。</span><span class="sxs-lookup"><span data-stu-id="17ec3-253">Because the constructor for the <xref:System.Lazy%601> instance specified <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, all three threads are allowed to create `LargeObject` instances.</span></span> <span data-ttu-id="17ec3-254">此範例會示範這藉由顯示主控台訊息，在建構函式和完成項的`LargeObject`類別：</span><span class="sxs-lookup"><span data-stu-id="17ec3-254">The example demonstrates this by displaying console messages in the constructor and in the finalizer of the `LargeObject` class:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#CtorFinalizer](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#ctorfinalizer)]
 [!code-vb[System.Lazy\`1.ctorLTSM#CtorFinalizer](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#ctorfinalizer)]  
  
 <span data-ttu-id="17ec3-255">不過，<xref:System.Lazy%601>物件可確保該只有一個執行個體由所有執行緒。</span><span class="sxs-lookup"><span data-stu-id="17ec3-255">However, the <xref:System.Lazy%601> object ensures that only one instance is used by all threads.</span></span> <span data-ttu-id="17ec3-256">範例輸出會顯示所有的三個執行緒使用相同的執行個體，以及顯示其他兩個執行個體都可以回收進行回收。</span><span class="sxs-lookup"><span data-stu-id="17ec3-256">The output from the example shows that all three threads use the same instance, and also shows that the other two instances can be reclaimed by garbage collection.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="17ec3-257">為了簡化，這個範例使用 <xref:System.Lazy%601> 的全域執行個體，而且所有方法都是 `static` (Visual Basic 中為 `Shared`)。</span><span class="sxs-lookup"><span data-stu-id="17ec3-257">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="17ec3-258">這些不是使用延遲初始設定的必要項。</span><span class="sxs-lookup"><span data-stu-id="17ec3-258">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorLTSM#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="17ec3-259">
            <paramref name="mode" /> 包含無效的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17ec3-259">
              <paramref name="mode" /> contains an invalid value.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.LazyThreadSafetyMode" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(T value);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : 'T -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (Func&lt;T&gt; valueFactory, bool isThreadSafe);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;!T&gt; valueFactory, bool isThreadSafe) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (valueFactory As Func(Of T), isThreadSafe As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(Func&lt;T&gt; ^ valueFactory, bool isThreadSafe);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : Func&lt;'T&gt; * bool -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; (valueFactory, isThreadSafe)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
        <Parameter Name="isThreadSafe" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="valueFactory">
          <span data-ttu-id="17ec3-260">委派，需要時會叫用以產生延遲初始化的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17ec3-260">The delegate that is invoked to produce the lazily initialized value when it is needed.</span>
          </span>
        </param>
        <param name="isThreadSafe">
          <span data-ttu-id="17ec3-261">
            <see langword="true" /> 表示這個執行個體可供多個執行緒同時使用，<see langword="false" /> 表示這個執行個體一次只能供一個執行緒使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17ec3-261">
              <see langword="true" /> to make this instance usable concurrently by multiple threads; <see langword="false" /> to make this instance usable by only one thread at a time.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17ec3-262">初始化 <see cref="T:System.Lazy`1" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17ec3-262">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span>
          </span>
          <span data-ttu-id="17ec3-263">當延遲初始設定發生時，會使用指定的初始化函式和初始化模式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17ec3-263">When lazy initialization occurs, the specified initialization function and initialization mode are used.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17ec3-264">執行緒安全模式的<xref:System.Lazy%601>會使用這個建構函式初始化的執行個體<xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>如果`isThreadSafe`是`true`; 否則模式是<xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="17ec3-264">The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> if `isThreadSafe` is `true`; otherwise, the mode is <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>.</span></span> <span data-ttu-id="17ec3-265">執行緒安全模式描述的行為，當多個執行緒嘗試初始化<xref:System.Lazy%601>執行個體。</span><span class="sxs-lookup"><span data-stu-id="17ec3-265">The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="17ec3-266">若要指定<xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>模式中，使用<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>或<xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29>建構函式。</span><span class="sxs-lookup"><span data-stu-id="17ec3-266">To specify the <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> mode, use the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> or <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor.</span></span>  
  
 <span data-ttu-id="17ec3-267">所擲回的例外狀況`valueFactory`會快取。</span><span class="sxs-lookup"><span data-stu-id="17ec3-267">Exceptions that are thrown by `valueFactory` are cached.</span></span> <span data-ttu-id="17ec3-268">如需詳細資訊，請參閱 <xref:System.Lazy%601> 類別或 <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> 列舉型別。</span><span class="sxs-lookup"><span data-stu-id="17ec3-268">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17ec3-269">下列範例示範如何使用這個建構函式，以提供例外狀況快取，在案例中，以單一執行緒延遲初始設定。</span><span class="sxs-lookup"><span data-stu-id="17ec3-269">The following example demonstrates the use of this constructor to provide lazy initialization with exception caching, in a scenario with a single thread.</span></span> <span data-ttu-id="17ec3-270">它也示範如何使用<xref:System.Lazy%601.%23ctor%2A>建構函式 (指定<xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>如`mode`)。</span><span class="sxs-lookup"><span data-stu-id="17ec3-270">It also demonstrates the use of the  <xref:System.Lazy%601.%23ctor%2A> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> for `mode`).</span></span> <span data-ttu-id="17ec3-271">若要切換至該建構函式，只需變更的建構函式標記為註解。</span><span class="sxs-lookup"><span data-stu-id="17ec3-271">To switch to that constructor, just change which constructor is commented out.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="17ec3-272">示範如何在多執行緒案例中使用這個建構函式的程式碼 (指定`true`for `isThreadSafe`)，範例，請參閱<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>建構函式。</span><span class="sxs-lookup"><span data-stu-id="17ec3-272">For code that demonstrates how to use this constructor in multithreaded scenarios (specifying `true` for `isThreadSafe`), see the example for the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> constructor.</span></span>  
  
 <span data-ttu-id="17ec3-273">這個範例定義將由多個執行緒中的一個執行延遲初始化的 `LargeObject` 類別。</span><span class="sxs-lookup"><span data-stu-id="17ec3-273">The example defines a `LargeObject` class that will be initialized lazily by one of several threads.</span></span> <span data-ttu-id="17ec3-274">程式碼的三個金鑰各節將說明建立初始設定式、 實際的初始化、 及的建構函式`LargeObject`類別，示範例外狀況快取。</span><span class="sxs-lookup"><span data-stu-id="17ec3-274">The three key sections of code illustrate the creation of the initializer, the actual initialization, and the constructor of the `LargeObject` class, which demonstrates exception caching.</span></span> <span data-ttu-id="17ec3-275">在 `Main` 方法的開頭，此範例會為 `LargeObject` 建立安全執行緒延遲初始設定式:</span><span class="sxs-lookup"><span data-stu-id="17ec3-275">At the beginning of the `Main` method, the example creates the thread-safe lazy initializer for `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="17ec3-276">在建構函式，呼叫`isThreadSafe`參數是`false`，因此<xref:System.Lazy%601>不是安全執行緒。</span><span class="sxs-lookup"><span data-stu-id="17ec3-276">In the call to the constructor, the `isThreadSafe` parameter is `false`, so the <xref:System.Lazy%601> is not thread safe.</span></span> <span data-ttu-id="17ec3-277">因為它不是安全執行緒，此範例會呼叫<xref:System.Lazy%601.Value%2A>三次的相同執行緒上的屬性：</span><span class="sxs-lookup"><span data-stu-id="17ec3-277">Because it's not thread safe, the example calls the <xref:System.Lazy%601.Value%2A> property three times on the same thread:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="17ec3-278">中的建構函式`LargeObject`類別，程式碼的第三個主要區段會擲回例外狀況的第一次`LargeObject`執行個體建立，但之後可讓您進行的執行個體建立：</span><span class="sxs-lookup"><span data-stu-id="17ec3-278">In the constructor of the `LargeObject` class, the third key section of code throws an exception the first time a `LargeObject` instance is created, but thereafter allows instance creation to occur:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#LargeCtor](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#largector)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#LargeCtor](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#largector)]  
  
 <span data-ttu-id="17ec3-279">當範例執行時，第一次嘗試建立的執行個體`LargeObject`攔截失敗和例外狀況。</span><span class="sxs-lookup"><span data-stu-id="17ec3-279">When the example is run, the first attempt to create an instance of `LargeObject` fails, and the exception is caught.</span></span> <span data-ttu-id="17ec3-280">您所料下, 一步 嘗試將會成功，但<xref:System.Lazy%601>物件已快取例外狀況。</span><span class="sxs-lookup"><span data-stu-id="17ec3-280">You might expect that the next attempt would succeed, but the <xref:System.Lazy%601> object has cached the exception.</span></span> <span data-ttu-id="17ec3-281">因為這個緣故，所有的三次嘗試會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="17ec3-281">Because of this, all three attempts throw the exception.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="17ec3-282">為了簡化，這個範例使用 <xref:System.Lazy%601> 的全域執行個體，而且所有方法都是 `static` (Visual Basic 中為 `Shared`)。</span><span class="sxs-lookup"><span data-stu-id="17ec3-282">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="17ec3-283">這些不是使用延遲初始設定的必要項。</span><span class="sxs-lookup"><span data-stu-id="17ec3-283">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="17ec3-284">
            <paramref name="valueFactory" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17ec3-284">
              <paramref name="valueFactory" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (Func&lt;T&gt; valueFactory, System.Threading.LazyThreadSafetyMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;!T&gt; valueFactory, valuetype System.Threading.LazyThreadSafetyMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (valueFactory As Func(Of T), mode As LazyThreadSafetyMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(Func&lt;T&gt; ^ valueFactory, System::Threading::LazyThreadSafetyMode mode);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : Func&lt;'T&gt; * System.Threading.LazyThreadSafetyMode -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; (valueFactory, mode)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
        <Parameter Name="mode" Type="System.Threading.LazyThreadSafetyMode" />
      </Parameters>
      <Docs>
        <param name="valueFactory">
          <span data-ttu-id="17ec3-285">委派，需要時會叫用以產生延遲初始化的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17ec3-285">The delegate that is invoked to produce the lazily initialized value when it is needed.</span>
          </span>
        </param>
        <param name="mode">
          <span data-ttu-id="17ec3-286">其中一個列舉值會指定執行緒安全模式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17ec3-286">One of the enumeration values that specifies the thread safety mode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17ec3-287">初始化 <see cref="T:System.Lazy`1" /> 類別的新行個體，這個執行個體會使用指定的初始設定函式和執行緒安全模式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17ec3-287">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class that uses the specified initialization function and thread-safety mode.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17ec3-288">執行緒安全模式的<xref:System.Lazy%601>執行個體描述的行為，當多個執行緒嘗試初始化<xref:System.Lazy%601>執行個體。</span><span class="sxs-lookup"><span data-stu-id="17ec3-288">The thread safety mode of a <xref:System.Lazy%601> instance describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="17ec3-289">所擲回的例外狀況`valueFactory`會快取，除非`mode`是<xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="17ec3-289">Exceptions that are thrown by `valueFactory` are cached, unless `mode` is <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>.</span></span> <span data-ttu-id="17ec3-290">如需詳細資訊，請參閱 <xref:System.Lazy%601> 類別或 <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> 列舉型別。</span><span class="sxs-lookup"><span data-stu-id="17ec3-290">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17ec3-291">下列範例示範如何使用這個建構函式來建立可讓多個執行緒會爭相延遲建立物件的延遲初始設定式。</span><span class="sxs-lookup"><span data-stu-id="17ec3-291">The following example demonstrates the use of this constructor to create a lazy initializer that enables multiple threads to race to create an object lazily.</span></span> <span data-ttu-id="17ec3-292">多個執行緒可能會成功建立執行個體，但所有執行緒都使用的第一次建立的執行個體。</span><span class="sxs-lookup"><span data-stu-id="17ec3-292">Multiple threads might succeed in creating instances, but all threads use the instance that was created first.</span></span> <span data-ttu-id="17ec3-293">此外，此範例示範的例外狀況在當您指定會永遠不會快取<xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>，即使會由延遲建立型別的預設建構函式執行而不是函式所初始化。</span><span class="sxs-lookup"><span data-stu-id="17ec3-293">In addition, the example demonstrates that exceptions are never cached when you specify <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, even if initialization is performed by a function instead of by the default constructor of the lazily created type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="17ec3-294">如需範例，示範如何在單一執行緒案例中使用這個建構函式 (指定<xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>for `mode`)，請參閱<xref:System.Lazy%601.%23ctor%28System.Boolean%29>建構函式。</span><span class="sxs-lookup"><span data-stu-id="17ec3-294">For an example that demonstrates how to use this constructor in single-threaded scenarios (specifying <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> for `mode`), see the <xref:System.Lazy%601.%23ctor%28System.Boolean%29> constructor.</span></span> <span data-ttu-id="17ec3-295">如需範例，示範如何使用這個建構函式提供鎖定而不多執行緒案例中的競爭情形 (指定<xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>for `mode`)，請參閱<xref:System.Lazy%601.%23ctor>建構函式。</span><span class="sxs-lookup"><span data-stu-id="17ec3-295">For an example that demonstrates how to use this constructor to provide locking instead of race conditions in multithreaded scenarios (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`), see the <xref:System.Lazy%601.%23ctor> constructor.</span></span>  
  
 <span data-ttu-id="17ec3-296">此範例會定義`LargeObject`會由數個執行緒的任何延遲初始化的類別。</span><span class="sxs-lookup"><span data-stu-id="17ec3-296">The example defines a `LargeObject` class that will be initialized lazily by any of several threads.</span></span> <span data-ttu-id="17ec3-297">四個重要小節的程式碼說明建立初始設定式、 實際的初始化、 初始化函式和建構函式和完成項`LargeObject`類別。</span><span class="sxs-lookup"><span data-stu-id="17ec3-297">The four key sections of code illustrate the creation of the initializer, the actual initialization, the initialization function, and the constructor and finalizer of the `LargeObject` class.</span></span> <span data-ttu-id="17ec3-298">在開頭`Main`方法，此範例會建立<xref:System.Lazy%601>執行的延遲初始化物件`LargeObject`:</span><span class="sxs-lookup"><span data-stu-id="17ec3-298">At the beginning of the `Main` method, the example creates the <xref:System.Lazy%601> object that performs lazy initialization of the `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="17ec3-299">延遲初始設定式會使用函式，執行初始化。</span><span class="sxs-lookup"><span data-stu-id="17ec3-299">The lazy initializer uses a function to perform the initialization.</span></span> <span data-ttu-id="17ec3-300">函式在此情況下，是需要因為沒有任何預設建構函式`LargeObject`類別。</span><span class="sxs-lookup"><span data-stu-id="17ec3-300">In this case, a function is required because there is no default constructor for the `LargeObject` class.</span></span>  
  
 <span data-ttu-id="17ec3-301">此範例會建立並啟動三個執行緒上封鎖<xref:System.Threading.ManualResetEvent>物件，如此範例可以全部一次釋放執行緒。</span><span class="sxs-lookup"><span data-stu-id="17ec3-301">The example creates and starts three threads that block on a <xref:System.Threading.ManualResetEvent> object, so that the example can release the threads all at once.</span></span> <span data-ttu-id="17ec3-302">在 `ThreadProc`方法，可由所有的三個執行緒，呼叫<xref:System.Lazy%601.Value%2A>屬性會建立`LargeObject`執行個體：</span><span class="sxs-lookup"><span data-stu-id="17ec3-302">In the `ThreadProc` method that's used by all three threads, calling the <xref:System.Lazy%601.Value%2A> property creates the `LargeObject` instance:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="17ec3-303">延遲初始設定函式呼叫來建立在第三個主要區段中的程式碼，`LargeObject`執行個體。</span><span class="sxs-lookup"><span data-stu-id="17ec3-303">In the third key section of code, the lazy initialization function is called to create the `LargeObject` instance.</span></span> <span data-ttu-id="17ec3-304">此函式會擲回例外狀況的第一次呼叫時：</span><span class="sxs-lookup"><span data-stu-id="17ec3-304">The function throws an exception the first time it's called:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#FactoryFunc](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#factoryfunc)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#FactoryFunc](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#factoryfunc)]  
  
 <span data-ttu-id="17ec3-305">使用任何其他<xref:System.Threading.LazyThreadSafetyMode>設定，初始化函式處理的例外狀況會快取。</span><span class="sxs-lookup"><span data-stu-id="17ec3-305">With any other <xref:System.Threading.LazyThreadSafetyMode> setting, an unhandled exception in the initialization function would be cached.</span></span> <span data-ttu-id="17ec3-306">不過，<xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>抑制例外狀況快取。</span><span class="sxs-lookup"><span data-stu-id="17ec3-306">However, <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> suppresses exception caching.</span></span> <span data-ttu-id="17ec3-307">範例的輸出中會示範在後續的嘗試將物件初始化成功。</span><span class="sxs-lookup"><span data-stu-id="17ec3-307">The output from the example demonstrates that a subsequent attempt to initialize the object succeeds.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="17ec3-308">例外狀況訊息通常會出現訊息指出其他執行緒已成功地初始化物件之後。</span><span class="sxs-lookup"><span data-stu-id="17ec3-308">The exception message usually appears after messages indicating that other threads have successfully initialized the object.</span></span> <span data-ttu-id="17ec3-309">這是因為擲回和攔截例外狀況時導入的延遲。</span><span class="sxs-lookup"><span data-stu-id="17ec3-309">This is because of the delay introduced by throwing and catching the exception.</span></span>  
  
 <span data-ttu-id="17ec3-310">因為的建構函式<xref:System.Lazy%601>指定執行個體<xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>，允許所有的三個執行緒建立`LargeObject`執行個體。</span><span class="sxs-lookup"><span data-stu-id="17ec3-310">Because the constructor for the <xref:System.Lazy%601> instance specified <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, all three threads are allowed to create `LargeObject` instances.</span></span> <span data-ttu-id="17ec3-311">此範例會示範這藉由顯示主控台訊息，在建構函式和完成項的`LargeObject`類別：</span><span class="sxs-lookup"><span data-stu-id="17ec3-311">The example demonstrates this by displaying console messages in the constructor and in the finalizer of the `LargeObject` class:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#CtorFinalizer](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#ctorfinalizer)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#CtorFinalizer](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#ctorfinalizer)]  
  
 <span data-ttu-id="17ec3-312"><xref:System.Lazy%601>物件可確保該只有一個執行個體 （除了其中的初始化函式會擲回例外狀況的執行緒） 的所有執行緒都使用。</span><span class="sxs-lookup"><span data-stu-id="17ec3-312">The <xref:System.Lazy%601> object ensures that only one instance is used by all threads (except the thread where the initialization function throws an exception).</span></span> <span data-ttu-id="17ec3-313">範例輸出顯示這點。</span><span class="sxs-lookup"><span data-stu-id="17ec3-313">The output from the example shows this.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="17ec3-314">為了簡化，這個範例使用 <xref:System.Lazy%601> 的全域執行個體，而且所有方法都是 `static` (Visual Basic 中為 `Shared`)。</span><span class="sxs-lookup"><span data-stu-id="17ec3-314">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="17ec3-315">這些不是使用延遲初始設定的必要項。</span><span class="sxs-lookup"><span data-stu-id="17ec3-315">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="17ec3-316">
            <paramref name="mode" /> 包含無效的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17ec3-316">
              <paramref name="mode" /> contains an invalid value.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="17ec3-317">
            <paramref name="valueFactory" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17ec3-317">
              <paramref name="valueFactory" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="IsValueCreated">
      <MemberSignature Language="C#" Value="public bool IsValueCreated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsValueCreated" />
      <MemberSignature Language="DocId" Value="P:System.Lazy`1.IsValueCreated" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsValueCreated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsValueCreated { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsValueCreated : bool" Usage="System.Lazy&lt;'T&gt;.IsValueCreated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="17ec3-318">取得值，這個值表示是否已建立此 <see cref="T:System.Lazy`1" /> 執行個體的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17ec3-318">Gets a value that indicates whether a value has been created for this <see cref="T:System.Lazy`1" /> instance.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="17ec3-319">如果已建立此 <see cref="T:System.Lazy`1" /> 執行個體的值則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17ec3-319">
              <see langword="true" /> if a value has been created for this <see cref="T:System.Lazy`1" /> instance; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17ec3-320">當延遲初始設定發生<xref:System.Lazy%601>執行個體，它可能會導致所建立的值或擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="17ec3-320">When lazy initialization occurs for a <xref:System.Lazy%601> instance, it may result in either a value being created or an exception being thrown.</span></span> <span data-ttu-id="17ec3-321">如果有例外狀況的擲回，後續行為<xref:System.Lazy%601>取決於例外狀況快取是否作用中的執行個體。</span><span class="sxs-lookup"><span data-stu-id="17ec3-321">If an exception is thrown, subsequent behavior of the <xref:System.Lazy%601> instance depends on whether exception caching is in effect.</span></span> <span data-ttu-id="17ec3-322">如果<xref:System.Lazy%601>使用建構函式未指定的初始化函式中，建立執行個體，則例外狀況快取為非作用中。</span><span class="sxs-lookup"><span data-stu-id="17ec3-322">If the <xref:System.Lazy%601> instance was created by using a constructor that does not specify an initialization function, then exception caching is not in effect.</span></span> <span data-ttu-id="17ec3-323">在後續的嘗試，初始化<xref:System.Lazy%601>可能會成功，並在成功初始化之後<xref:System.Lazy%601.IsValueCreated%2A>屬性會傳回`true`。</span><span class="sxs-lookup"><span data-stu-id="17ec3-323">A subsequent attempt to initialize the <xref:System.Lazy%601> might succeed, and after successful initialization the <xref:System.Lazy%601.IsValueCreated%2A> property returns `true`.</span></span> <span data-ttu-id="17ec3-324">如果<xref:System.Lazy%601>初始化函式建立執行個體 (所指定`valueFactory`參數<xref:System.Lazy%601>建構函式)，則例外狀況快取會受到執行緒安全模式。</span><span class="sxs-lookup"><span data-stu-id="17ec3-324">If the <xref:System.Lazy%601> instance was created with an initialization function (specified by the `valueFactory` parameter of the <xref:System.Lazy%601> constructor), then exception caching is controlled by the thread safety mode.</span></span>  
  
-   <span data-ttu-id="17ec3-325">如果模式是<xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>或是<xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>，沒有初始化任何第二次機會<xref:System.Lazy%601>執行個體。</span><span class="sxs-lookup"><span data-stu-id="17ec3-325">If the mode is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> or <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>, there is no second chance to initialize the <xref:System.Lazy%601> instance.</span></span> <span data-ttu-id="17ec3-326">如果發生例外狀況，並且初始化函式中未處理，該例外狀況快取並重新擲回的後續存取<xref:System.Lazy%601.Value%2A?displayProperty=nameWithType>屬性。</span><span class="sxs-lookup"><span data-stu-id="17ec3-326">If an exception occurs and is unhandled in the initialization function, that exception is cached and rethrown on subsequent accesses of the <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="17ec3-327">如果發生例外狀況，因此在此情況下，任何值則會建立<xref:System.Lazy%601.IsValueCreated%2A>傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="17ec3-327">No value is created if an exception is thrown, so in such cases <xref:System.Lazy%601.IsValueCreated%2A> returns `false`.</span></span>  
  
-   <span data-ttu-id="17ec3-328">如果模式是<xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>，成功地執行的初始化函式 （或預設建構函式） 的第一個執行緒會建立值<xref:System.Lazy%601>執行個體。</span><span class="sxs-lookup"><span data-stu-id="17ec3-328">If the mode is <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, the first thread that succeeds in running the initialization function (or the default constructor) creates the value for the <xref:System.Lazy%601> instance.</span></span> <span data-ttu-id="17ec3-329">如果初始化函式擲回例外狀況，在一個執行緒上，其他執行緒仍可嘗試初始化<xref:System.Lazy%601>執行個體。</span><span class="sxs-lookup"><span data-stu-id="17ec3-329">If the initialization function throws an exception on one thread, other threads can still try to initialize the <xref:System.Lazy%601> instance.</span></span> <span data-ttu-id="17ec3-330">會建立值，直到<xref:System.Lazy%601.IsValueCreated%2A>屬性會傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="17ec3-330">Until the value is created, the <xref:System.Lazy%601.IsValueCreated%2A> property returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.LazyThreadSafetyMode" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="lazy.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="17ec3-331">建立並傳回這個執行個體之 <see cref="P:System.Lazy`1.Value" /> 屬性的字串表示。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17ec3-331">Creates and returns a string representation of the <see cref="P:System.Lazy`1.Value" /> property for this instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="17ec3-332">針對此執行個體在 <see cref="M:System.Object.ToString" /> 屬性上呼叫 <see cref="P:System.Lazy`1.Value" /> 方法的結果，前提是已經建立此值 (也就是說，如果 <see cref="P:System.Lazy`1.IsValueCreated" /> 屬性傳回 <see langword="true" />)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17ec3-332">The result of calling the <see cref="M:System.Object.ToString" /> method on the <see cref="P:System.Lazy`1.Value" /> property for this instance, if the value has been created (that is, if the <see cref="P:System.Lazy`1.IsValueCreated" /> property returns <see langword="true" />).</span>
          </span>
          <span data-ttu-id="17ec3-333">否則為表示尚未建立值的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17ec3-333">Otherwise, a string indicating that the value has not been created.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17ec3-334">呼叫這個方法不會初始化。</span><span class="sxs-lookup"><span data-stu-id="17ec3-334">Calling this method does not cause initialization.</span></span>  
  
 <span data-ttu-id="17ec3-335"><xref:System.Lazy%601.Value%2A?displayProperty=nameWithType>屬性可以是`null`延遲初始設定，如果這是 factory 方法之後指定`valueFactory`參數<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>， <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>，或<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29>建構函式會傳回`null`。</span><span class="sxs-lookup"><span data-stu-id="17ec3-335">The <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property can be `null` after lazy initialization if the factory method that was specified for the `valueFactory` parameter of the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>, <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>, or <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructor returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException">
          <span data-ttu-id="17ec3-336">
            <see cref="P:System.Lazy`1.Value" /> 屬性為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17ec3-336">The <see cref="P:System.Lazy`1.Value" /> property is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public T Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Value" />
      <MemberSignature Language="DocId" Value="P:System.Lazy`1.Value" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Value As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T Value { T get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : 'T" Usage="System.Lazy&lt;'T&gt;.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="17ec3-337">取得目前 <see cref="T:System.Lazy`1" /> 執行個體的延遲初始化值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17ec3-337">Gets the lazily initialized value of the current <see cref="T:System.Lazy`1" /> instance.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="17ec3-338">目前 <see cref="T:System.Lazy`1" /> 執行個體的延遲初始化值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17ec3-338">The lazily initialized value of the current <see cref="T:System.Lazy`1" /> instance.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17ec3-339">如果<xref:System.Lazy%601.IsValueCreated%2A?displayProperty=nameWithType>屬性是`false`，存取<xref:System.Lazy%601.Value%2A>屬性強制執行初始化。</span><span class="sxs-lookup"><span data-stu-id="17ec3-339">If the <xref:System.Lazy%601.IsValueCreated%2A?displayProperty=nameWithType> property is `false`, accessing the <xref:System.Lazy%601.Value%2A> property forces initialization.</span></span>  
  
 <span data-ttu-id="17ec3-340">除了所列的例外狀況<xref:System.Lazy%601.Value%2A>屬性可能會擲回任何未處理的例外狀況傳遞至的 factory 方法所擲回`valueFactory`的參數<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>， <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>，或<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29>建構函式。</span><span class="sxs-lookup"><span data-stu-id="17ec3-340">In addition to the exceptions that are listed, the <xref:System.Lazy%601.Value%2A> property can throw any unhandled exception that is thrown by the factory method that was passed to the `valueFactory` parameter of the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>, <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>, or <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructor.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="17ec3-341">
            <see cref="T:System.Lazy`1" /> 執行個體已初始化為使用延遲初始化型別的預設建構函式，而且存取建構函式的使用權限已遺失。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17ec3-341">The <see cref="T:System.Lazy`1" /> instance is initialized to use the default constructor of the type that is being lazily initialized, and permissions to access the constructor are missing.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMemberException">
          <span data-ttu-id="17ec3-342">
            <see cref="T:System.Lazy`1" /> 執行個體已初始化為使用延遲初始化型別的預設建構函式，而且該型別沒有公用無參數的建構函式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17ec3-342">The <see cref="T:System.Lazy`1" /> instance is initialized to use the default constructor of the type that is being lazily initialized, and that type does not have a public, parameterless constructor.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="17ec3-343">初始設定函式嘗試存取這個執行個體的 <see cref="P:System.Lazy`1.Value" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17ec3-343">The initialization function tries to access <see cref="P:System.Lazy`1.Value" /> on this instance.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>