<Type Name="IComparable" FullName="System.IComparable">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="204519a433353f750a9b8f4cd673d693827bb73c" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37480235" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IComparable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IComparable" />
  <TypeSignature Language="DocId" Value="T:System.IComparable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IComparable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IComparable" />
  <TypeSignature Language="F#" Value="type IComparable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>定義特定通用類型的比較方法，實值類型或類別會實作這個方法，以排列或排序其執行個體。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 實作這個介面是由可以排列或排序其值的型別。 它需要實作的類型會定義單一方法<xref:System.IComparable.CompareTo%28System.Object%29>，指出是否目前的執行個體在排序次序的位置之前，之後，或是與相同類型的第二個物件相同。 執行個體<xref:System.IComparable>實作會自動呼叫方法這類<xref:System.Array.Sort%2A?displayProperty=nameWithType>和<xref:System.Collections.ArrayList.Sort%2A?displayProperty=nameWithType>。  
  
 實作<xref:System.IComparable.CompareTo%28System.Object%29>方法必須傳回<xref:System.Int32>具有三個值之一下, 表所示。  
  
|值|意義|  
|-----------|-------------|  
|小於零|目前的執行個體之前所指定的物件<xref:System.IComparable.CompareTo%2A>在排序次序的方法。|  
|零|此目前執行個體，就會發生在相同位置中的排序次序所指定的物件為<xref:System.IComparable.CompareTo%2A>方法。|  
|大於零|此目前執行個體所指定的物件會遵循<xref:System.IComparable.CompareTo%2A>在排序次序的方法。|  
  
 所有數字類型 (例如<xref:System.Int32>並<xref:System.Double>) 實作<xref:System.IComparable>，就像一樣<xref:System.String>， <xref:System.Char>，和<xref:System.DateTime>。 自訂類型應該也會提供其自己實作的<xref:System.IComparable>排列或排序的物件執行個體。  
  
   
  
## Examples  
 下列範例說明實作<xref:System.IComparable>和必要<xref:System.IComparable.CompareTo%2A>方法。  
  
 [!code-cpp[IComparable Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/IComparable Example/CPP/source.cpp#1)]
 [!code-csharp[IComparable Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/IComparable Example/CS/source.cs#1)]
 [!code-vb[IComparable Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IComparable Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IComparable.CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (obj As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int CompareTo(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : obj -&gt; int" Usage="iComparable.CompareTo obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">與這個執行個體相互比較的物件。</param>
        <summary>將目前的執行個體與相同類型的另一個物件相比較，並傳回整數，這個整數表示目前的執行個體在排序次序中，位於另一個物件之前、之後或相同位置。</summary>
        <returns>值，表示所比較之物件的相對順序。 傳回值具有這些意義：<list type="table"><listheader><term> 值  </term><description> 意義  </description></listheader><item><term> 小於零  </term><description> 這個執行個體位於 <paramref name="obj" /> 之前。</description></item><item><term> 零  </term><description> 這個執行個體出現在排序次序中的位置和 <paramref name="obj" /> 相同。</description></item><item><term> 大於零  </term><description> 這個執行個體在排序次序中會在 <paramref name="obj" /> 之後。  </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IComparable.CompareTo%2A>可以排列或排序其值的型別所實作方法。 它會自動呼叫方法的非泛型集合物件，例如<xref:System.Array.Sort%2A?displayProperty=nameWithType>，以排序陣列的每個成員。 如果自訂類別或結構不會實作<xref:System.IComparable>其成員不會按照順序，排序作業可能會擲回<xref:System.InvalidOperationException>。  
  
 這個方法是只定義，而且必須實作特定類別或實值類型的影響。 傳回值取決於特定實作的 （「 之前 」、 「 發生相同的位置 」，和 「 遵循 」） 一節中所指定的比較的意義。  
  
 根據定義，任何物件會比較大於 （或遵循） `null`，並比較彼此相等的兩個 null 參考。  
  
 參數， `obj`，必須是相同的型別，做為類別或實值型別會實作這個介面; 否則<xref:System.ArgumentException>就會擲回。  
  
   
  
## Examples  
 下列範例示範如何將<xref:System.IComparable.CompareTo%2A>來比較`Temperature`物件，實作<xref:System.IComparable>與另一個物件。 `Temperature`物件會實作<xref:System.IComparable.CompareTo%2A>藉由直接包裝呼叫<xref:System.Int32.CompareTo%2A?displayProperty=nameWithType>方法。  
  
 [!code-cpp[IComparable Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/IComparable Example/CPP/source.cpp#1)]
 [!code-csharp[IComparable Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/IComparable Example/CS/source.cs#1)]
 [!code-vb[IComparable Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IComparable Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="obj" /> 與這個執行個體的型別不同。</exception>
        <block subset="none" type="overrides">
          <para>物件 A、 B 和 C，下列必須為 true: <c>A.CompareTo(A)</c>必須傳回零。如果<c>A.CompareTo(B)</c>傳回零，然後<c>B.CompareTo(A)</c>必須傳回零。如果<c>A.CompareTo(B)</c>會傳回零並<c>B.CompareTo(C)</c>傳回零，然後<c>A.CompareTo(C)</c>必須傳回零。如果<c>A.CompareTo(B)</c>傳回值不是零，然後<c>B.CompareTo(A)</c>必須傳回值的正負號相反。如果<c>A.CompareTo(B)</c>傳回值<paramref name="x" />不等於零，和<c>B.CompareTo(C)</c>傳回的值<paramref name="y" />做為相同的正負號的<paramref name="x" />，然後<c>a。CompareTo(C)</c>必須傳回相同的正負號與值<paramref name="x" />和<paramref name="y" />。</para>
        </block>
        <block subset="none" type="usage">
          <para>使用<see cref="M:System.IComparable.CompareTo(System.Object)" />方法，以判斷類別的執行個體的順序。</para>
        </block>
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
  </Members>
</Type>