<Type Name="Func&lt;T,TResult&gt;" FullName="System.Func&lt;T,TResult&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="0b8e61fc6c0b3a63f6c5b45d2c39e516162e13e0" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39776717" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate TResult Func&lt;in T,out TResult&gt;(T arg);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Func`2&lt;- T, + TResult&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Func`2" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Func(Of In T, Out TResult)(arg As T) As TResult " />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T, typename TResult&gt;&#xA;public delegate TResult Func(T arg);" />
  <TypeSignature Language="F#" Value="type Func&lt;'T, 'Result&gt; = delegate of 'T -&gt; 'Result" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TResult">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=2.0.5.0, Culture=Neutral, PublicKeyToken=7cec85d7bea7798e")</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="arg" Type="T" />
  </Parameters>
  <ReturnValue>
    <ReturnType>TResult</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T">
      <span data-ttu-id="2b5d3-101">這個委派所封裝之方法的參數類型。</span>
      <span class="sxs-lookup">
        <span data-stu-id="2b5d3-101">The type of the parameter of the method that this delegate encapsulates.</span>
      </span>
    </typeparam>
    <typeparam name="TResult">
      <span data-ttu-id="2b5d3-102">這個委派所封裝之方法的傳回值之類型。</span>
      <span class="sxs-lookup">
        <span data-stu-id="2b5d3-102">The type of the return value of the method that this delegate encapsulates.</span>
      </span>
    </typeparam>
    <param name="arg">
      <span data-ttu-id="2b5d3-103">這個委派所封裝之方法的參數。</span>
      <span class="sxs-lookup">
        <span data-stu-id="2b5d3-103">The parameter of the method that this delegate encapsulates.</span>
      </span>
    </param>
    <summary>
      <span data-ttu-id="2b5d3-104">封裝具有一個參數並傳回 <typeparamref name="TResult" /> 參數所指定之型別值的方法。</span>
      <span class="sxs-lookup">
        <span data-stu-id="2b5d3-104">Encapsulates a method that has one parameter and returns a value of the type specified by the <typeparamref name="TResult" /> parameter.</span>
      </span>
    </summary>
    <returns>
      <span data-ttu-id="2b5d3-105">這個委派所封裝之方法的傳回值。</span>
      <span class="sxs-lookup">
        <span data-stu-id="2b5d3-105">The return value of the method that this delegate encapsulates.</span>
      </span>
    </returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2b5d3-106">您可以使用此委派来表示的方法，可以做為參數傳遞，而不必明確宣告自訂委派。</span><span class="sxs-lookup"><span data-stu-id="2b5d3-106">You can use this delegate to represent a method that can be passed as a parameter without explicitly declaring a custom delegate.</span></span> <span data-ttu-id="2b5d3-107">封裝的方法必須對應到這個委派所定義的方法簽章。</span><span class="sxs-lookup"><span data-stu-id="2b5d3-107">The encapsulated method must correspond to the method signature that is defined by this delegate.</span></span> <span data-ttu-id="2b5d3-108">這表示封裝的方法必須由值傳遞給它的一個參數，而且它必須傳回值。</span><span class="sxs-lookup"><span data-stu-id="2b5d3-108">This means that the encapsulated method must have one parameter that is passed to it by value, and that it must return a value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2b5d3-109">若要參考的方法具有一個參數並傳回`void`(或在 Visual Basic 中宣告為`Sub`而`Function`)，使用泛型<xref:System.Action%601>改為委派。</span><span class="sxs-lookup"><span data-stu-id="2b5d3-109">To reference a method that has one parameter and returns `void` (or in Visual Basic, that is declared as a `Sub` rather than as a `Function`), use the generic <xref:System.Action%601> delegate instead.</span></span>  
  
 <span data-ttu-id="2b5d3-110">當您使用<xref:System.Func%602>委派，您不需要明確地定義這個委派會封裝具有單一參數的方法。</span><span class="sxs-lookup"><span data-stu-id="2b5d3-110">When you use the <xref:System.Func%602> delegate, you do not have to explicitly define a delegate that encapsulates a method with a single parameter.</span></span> <span data-ttu-id="2b5d3-111">例如，下列程式碼明確宣告委派，名為`ConvertMethod`，並將指派的參考`UppercaseString`其委派執行個體的方法。</span><span class="sxs-lookup"><span data-stu-id="2b5d3-111">For example, the following code explicitly declares a delegate named `ConvertMethod` and assigns a reference to the `UppercaseString` method to its delegate instance.</span></span>  
  
 [!code-csharp[System.Func~2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~2/cs/Delegate.cs#1)]
 [!code-vb[System.Func~2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~2/vb/Delegate.vb#1)]  
  
 <span data-ttu-id="2b5d3-112">下列範例中簡化這個程式碼，以具現化<xref:System.Func%602>而不是明確地定義新的委派，並為其指派具名的方法的委派。</span><span class="sxs-lookup"><span data-stu-id="2b5d3-112">The following example simplifies this code by instantiating the <xref:System.Func%602> delegate instead of explicitly defining a new delegate and assigning a named method to it.</span></span>  
  
 [!code-csharp[System.Func~2#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~2/cs/Func2_1.cs#2)]
 [!code-vb[System.Func~2#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~2/vb/Func2_1.vb#2)]  
  
 <span data-ttu-id="2b5d3-113">您也可以使用<xref:System.Func%602>具有在 C# 中，匿名方法委派，如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="2b5d3-113">You can also use the <xref:System.Func%602> delegate with anonymous methods in C#, as the following example illustrates.</span></span> <span data-ttu-id="2b5d3-114">(如匿名方法的簡介，請參閱 <<c0> [ 匿名方法](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md)。)</span><span class="sxs-lookup"><span data-stu-id="2b5d3-114">(For an introduction to anonymous methods, see [Anonymous Methods](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)</span></span>  
  
 [!code-csharp[System.Func~2#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~2/cs/Anon.cs#3)]  
  
 <span data-ttu-id="2b5d3-115">您也可以指派至 lambda 運算式<xref:System.Func%602>委派，如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="2b5d3-115">You can also assign a lambda expression to a <xref:System.Func%602> delegate, as the following example illustrates.</span></span> <span data-ttu-id="2b5d3-116">(如需 lambda 運算式，請參閱 < [Lambda 運算式](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)並[Lambda 運算式](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)。)</span><span class="sxs-lookup"><span data-stu-id="2b5d3-116">(For an introduction to lambda expressions, see [Lambda Expressions](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md) and [Lambda Expressions](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)</span></span>  
  
 [!code-csharp[System.Func~2#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~2/cs/Lambda.cs#4)]
 [!code-vb[System.Func~2#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~2/vb/Lambda.vb#4)]  
  
 <span data-ttu-id="2b5d3-117">Lambda 運算式的基礎類型是其中一個泛型`Func`委派。</span><span class="sxs-lookup"><span data-stu-id="2b5d3-117">The underlying type of a lambda expression is one of the generic `Func` delegates.</span></span> <span data-ttu-id="2b5d3-118">這讓您能夠傳遞做為參數的 lambda 運算式，而不需要明確地將它指派給委派。</span><span class="sxs-lookup"><span data-stu-id="2b5d3-118">This makes it possible to pass a lambda expression as a parameter without explicitly assigning it to a delegate.</span></span> <span data-ttu-id="2b5d3-119">特別是，因為有許多方法中的型別<xref:System.Linq>命名空間一定<xref:System.Func%602>參數，您可以將這些方法的 lambda 運算式而不需要明確具現化<xref:System.Func%602>委派。</span><span class="sxs-lookup"><span data-stu-id="2b5d3-119">In particular, because many methods of types in the <xref:System.Linq> namespace have <xref:System.Func%602> parameters, you can pass these methods a lambda expression without explicitly instantiating a <xref:System.Func%602> delegate.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2b5d3-120">下列範例示範如何宣告及使用<xref:System.Func%602>委派。</span><span class="sxs-lookup"><span data-stu-id="2b5d3-120">The following example demonstrates how to declare and use a <xref:System.Func%602> delegate.</span></span> <span data-ttu-id="2b5d3-121">這個範例會宣告<xref:System.Func%602>變數並將其指派的 lambda 運算式，將字串中的字元轉換成大寫。</span><span class="sxs-lookup"><span data-stu-id="2b5d3-121">This example declares a <xref:System.Func%602> variable and assigns it a lambda expression that converts the characters in a string to uppercase.</span></span> <span data-ttu-id="2b5d3-122">委派會封裝這個方法會接著傳遞至<xref:System.Linq.Enumerable.Select%2A?displayProperty=nameWithType>方法，以變更為大寫的字串陣列中的字串。</span><span class="sxs-lookup"><span data-stu-id="2b5d3-122">The delegate that encapsulates this method is subsequently passed to the <xref:System.Linq.Enumerable.Select%2A?displayProperty=nameWithType> method to change the strings in an array of strings to uppercase.</span></span>  
  
 [!code-csharp[System.Func~2#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~2/cs/Example.cs#5)]
 [!code-vb[System.Func~2#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~2/vb/Example.vb#5)]  
  
 ]]></format>
    </remarks>
  </Docs>
</Type>