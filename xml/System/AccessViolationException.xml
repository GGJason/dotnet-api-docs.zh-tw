<Type Name="AccessViolationException" FullName="System.AccessViolationException">
  <Metadata><Meta Name="ms.openlocfilehash" Value="af4cae868333721997233f2ac2270d3287455362" /><Meta Name="ms.sourcegitcommit" Value="2767b5903996fbd7e2b81eda1114dfc9d0d9db63" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="05/02/2019" /><Meta Name="ms.locfileid" Value="65009443" /></Metadata><TypeSignature Language="C#" Value="public class AccessViolationException : SystemException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit AccessViolationException extends System.SystemException" />
  <TypeSignature Language="DocId" Value="T:System.AccessViolationException" />
  <TypeSignature Language="VB.NET" Value="Public Class AccessViolationException&#xA;Inherits SystemException" />
  <TypeSignature Language="C++ CLI" Value="public ref class AccessViolationException : SystemException" />
  <TypeSignature Language="F#" Value="type AccessViolationException = class&#xA;    inherit SystemException" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.SystemException</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="b1cbc-101">嘗試讀取或寫入受保護的記憶體時所擲回的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="b1cbc-101">The exception that is thrown when there is an attempt to read or write protected memory.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1cbc-102">程式碼嘗試讀取或寫入未配置，或它不能存取的記憶體時，unmanaged 或 unsafe 程式碼中發生存取違規。</span><span class="sxs-lookup"><span data-stu-id="b1cbc-102">An access violation occurs in unmanaged or unsafe code when the code attempts to read or write to memory that has not been allocated, or to which it does not have access.</span></span> <span data-ttu-id="b1cbc-103">這通常是因為指標有不正確的值。</span><span class="sxs-lookup"><span data-stu-id="b1cbc-103">This usually occurs because a pointer has a bad value.</span></span> <span data-ttu-id="b1cbc-104">並非所有透過錯誤指標讀取或寫入的動作都會導致存取違規，因此存取違規通常指出已透過錯誤指標執行多次讀取或寫入，且該記憶體可能已毀損。</span><span class="sxs-lookup"><span data-stu-id="b1cbc-104">Not all reads or writes through bad pointers lead to access violations, so an access violation usually indicates that several reads or writes have occurred through bad pointers, and that memory might be corrupted.</span></span> <span data-ttu-id="b1cbc-105">因此，存取違規幾乎一律會指出嚴重的程式設計錯誤。</span><span class="sxs-lookup"><span data-stu-id="b1cbc-105">Thus, access violations almost always indicate serious programming errors.</span></span> <span data-ttu-id="b1cbc-106"><xref:System.AccessViolationException>清楚地識別這些嚴重的錯誤。</span><span class="sxs-lookup"><span data-stu-id="b1cbc-106">An <xref:System.AccessViolationException> clearly identifies these serious errors.</span></span>  
  
 <span data-ttu-id="b1cbc-107">在程式中包含整個可驗證的 managed 程式碼，所有參考都都是有效的就是以 null，而且存取違規不可能。</span><span class="sxs-lookup"><span data-stu-id="b1cbc-107">In programs consisting entirely of verifiable managed code, all references are either valid or null, and access violations are impossible.</span></span> <span data-ttu-id="b1cbc-108">嘗試參考為 null 參考中驗證的程式碼會擲回的任何作業<xref:System.NullReferenceException>例外狀況。</span><span class="sxs-lookup"><span data-stu-id="b1cbc-108">Any operation that attempts to reference a null reference in verifiable code throws a <xref:System.NullReferenceException> exception.</span></span> <span data-ttu-id="b1cbc-109"><xref:System.AccessViolationException>只有當驗證的 managed 程式碼互動時與 unmanaged 程式碼，或使用不安全的 managed 程式碼，就會發生。</span><span class="sxs-lookup"><span data-stu-id="b1cbc-109">An <xref:System.AccessViolationException> occurs only when verifiable managed code interacts with unmanaged code or with unsafe managed code.</span></span>  
  
## <a name="troubleshooting-accessviolationexception-exceptions"></a><span data-ttu-id="b1cbc-110">疑難排解了 AccessViolationException 例外狀況</span><span class="sxs-lookup"><span data-stu-id="b1cbc-110">Troubleshooting AccessViolationException exceptions</span></span>  
 <span data-ttu-id="b1cbc-111"><xref:System.AccessViolationException>只會在不安全的 managed 程式碼發生例外狀況或程式碼與 unmanaged 程式碼時可驗證的管理互動：</span><span class="sxs-lookup"><span data-stu-id="b1cbc-111">An <xref:System.AccessViolationException> exception can occur only in unsafe managed code or when verifiable managed code interacts with unmanaged code:</span></span>  
  
-   <span data-ttu-id="b1cbc-112">在 unsafe managed 程式碼，就會發生存取違規可以表示為其中一個<xref:System.NullReferenceException>例外狀況或<xref:System.AccessViolationException>例外狀況，根據平台。</span><span class="sxs-lookup"><span data-stu-id="b1cbc-112">An access violation that occurs in unsafe managed code can be expressed as either a <xref:System.NullReferenceException> exception or an <xref:System.AccessViolationException> exception, depending on the platform.</span></span>  
  
-   <span data-ttu-id="b1cbc-113">存取違規反昇至 managed 程式碼的 unmanaged 程式碼一律會包裝在<xref:System.AccessViolationException>例外狀況。</span><span class="sxs-lookup"><span data-stu-id="b1cbc-113">An access violation in unmanaged code that bubbles up to managed code is always wrapped in an <xref:System.AccessViolationException> exception.</span></span>  
  
 <span data-ttu-id="b1cbc-114">在任一情況下，您可以識別並更正的原因<xref:System.AccessViolationException>例外狀況，如下所示：</span><span class="sxs-lookup"><span data-stu-id="b1cbc-114">In either case, you can identify and correct the cause of the <xref:System.AccessViolationException> exception as follows:</span></span>  
  
 <span data-ttu-id="b1cbc-115">請確定已配置您嘗試存取的記憶體。</span><span class="sxs-lookup"><span data-stu-id="b1cbc-115">Make sure that the memory that you are attempting to access has been allocated.</span></span>  
 <span data-ttu-id="b1cbc-116"><xref:System.AccessViolationException>嘗試存取受保護的記憶體--也就是，以存取的記憶體，則不會配置或不處理程序所擁有一律擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="b1cbc-116">An <xref:System.AccessViolationException> exception is always thrown by an attempt to access protected memory -- that is, to access memory that is not allocated or that is not owned by a process.</span></span>  
  
 <span data-ttu-id="b1cbc-117">自動記憶體管理是 Common Language Runtime (CLR) 提供的一項服務。</span><span class="sxs-lookup"><span data-stu-id="b1cbc-117">Automatic memory management is one of the services that the common language runtime provides.</span></span> <span data-ttu-id="b1cbc-118">如果 managed 程式碼提供與 unmanaged 程式碼相同的功能，您可能想要移動到 managed 程式碼，以便充分利用這項功能。</span><span class="sxs-lookup"><span data-stu-id="b1cbc-118">If managed code provides the same functionality as your unmanaged code, you may wish to move to managed code to take advantage of this functionality.</span></span> <span data-ttu-id="b1cbc-119">如需詳細資訊，請參閱 [Automatic Memory Management](~/docs/standard/automatic-memory-management.md)。</span><span class="sxs-lookup"><span data-stu-id="b1cbc-119">For more information, see [Automatic Memory Management](~/docs/standard/automatic-memory-management.md).</span></span>  
  
 <span data-ttu-id="b1cbc-120">請確定您嘗試存取的記憶體並未損毀。</span><span class="sxs-lookup"><span data-stu-id="b1cbc-120">Make sure that the memory that you are attempting to access has not been corrupted.</span></span>  
 <span data-ttu-id="b1cbc-121">如果透過損壞的指標進行數次讀取或寫入作業，可能會損毀記憶體。</span><span class="sxs-lookup"><span data-stu-id="b1cbc-121">If several read or write operations have occurred through bad pointers, memory may be corrupted.</span></span> <span data-ttu-id="b1cbc-122">讀取或寫入位址超出預先定義的緩衝區時，就會發生這種發生。</span><span class="sxs-lookup"><span data-stu-id="b1cbc-122">This typically occurs when reading or writing to addresses outside of a predefined buffer.</span></span>  
  
## <a name="accessviolationexception-and-trycatch-blocks"></a><span data-ttu-id="b1cbc-123">AccessViolationException 和 try/catch 區塊</span><span class="sxs-lookup"><span data-stu-id="b1cbc-123">AccessViolationException and try/catch blocks</span></span>  
 <span data-ttu-id="b1cbc-124">開頭[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]， <xref:System.AccessViolationException> common language runtime 所擲回的例外狀況不會由`catch`陳述式中發生例外狀況一般的語言所保留的記憶體之外，結構化例外狀況處理常式執行階段。</span><span class="sxs-lookup"><span data-stu-id="b1cbc-124">Starting with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], <xref:System.AccessViolationException> exceptions thrown by the common language runtime are not handled by the `catch` statement in a structured exception handler if the exception occurs outside of the memory reserved by the common language runtime.</span></span> <span data-ttu-id="b1cbc-125">若要處理這類<xref:System.AccessViolationException>例外狀況，您應該套用<xref:System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute>屬性加入方法中擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="b1cbc-125">To handle such an <xref:System.AccessViolationException> exception, you should apply the  <xref:System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute> attribute to the method in which the exception is thrown.</span></span> <span data-ttu-id="b1cbc-126">這項變更不會影響<xref:System.AccessViolationException>使用者程式碼，可繼續將攔截到擲回的例外狀況`catch`陳述式。</span><span class="sxs-lookup"><span data-stu-id="b1cbc-126">This change does not affect <xref:System.AccessViolationException> exceptions thrown by user code, which can continue to be caught by a `catch` statement.</span></span> <span data-ttu-id="b1cbc-127">針對先前的版本，您想要重新編譯並上修改才能執行的.NET framework 撰寫的程式碼[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]，您可以新增[ \<legacyCorruptedStateExceptionsPolicy >](~/docs/framework/configure-apps/file-schema/runtime/legacycorruptedstateexceptionspolicy-element.md)項目到您應用程式的組態檔。</span><span class="sxs-lookup"><span data-stu-id="b1cbc-127">For code written for previous versions of the .NET Framework that you want to recompile and run without modification on the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], you can add the [\<legacyCorruptedStateExceptionsPolicy>](~/docs/framework/configure-apps/file-schema/runtime/legacycorruptedstateexceptionspolicy-element.md) element to your app's configuration file.</span></span> <span data-ttu-id="b1cbc-128">請注意，您也會收到例外狀況的通知，是否您已經定義的處理常式<xref:System.AppDomain.FirstChanceException?displayProperty=nameWithType>或<xref:System.AppDomain.UnhandledException?displayProperty=nameWithType>事件。</span><span class="sxs-lookup"><span data-stu-id="b1cbc-128">Note that you can also receive notification of the exceptions if you have defined a handler for the <xref:System.AppDomain.FirstChanceException?displayProperty=nameWithType> or <xref:System.AppDomain.UnhandledException?displayProperty=nameWithType> event.</span></span>  
  
## <a name="version-information"></a><span data-ttu-id="b1cbc-129">版本資訊</span><span class="sxs-lookup"><span data-stu-id="b1cbc-129">Version Information</span></span>  
 <span data-ttu-id="b1cbc-130">在.NET Framework 2.0 和更新版本中擲回這個例外狀況。</span><span class="sxs-lookup"><span data-stu-id="b1cbc-130">This exception is thrown in the .NET Framework 2.0 and later versions.</span></span> <span data-ttu-id="b1cbc-131">在舊版的.NET Framework 中，unmanaged 程式碼或 unsafe managed 程式碼中的存取違規由<xref:System.NullReferenceException>managed 程式碼中。</span><span class="sxs-lookup"><span data-stu-id="b1cbc-131">In earlier versions of the .NET Framework, an access violation in unmanaged code or unsafe managed code is represented by a <xref:System.NullReferenceException> in managed code.</span></span> <span data-ttu-id="b1cbc-132">A<xref:System.NullReferenceException>當 null 參考已取值可驗證 managed 程式碼，發生未牽涉到資料損毀，並沒有任何方法來區別兩種情況下，在 1.0 或 1.1 版中也會擲回。</span><span class="sxs-lookup"><span data-stu-id="b1cbc-132">A <xref:System.NullReferenceException> is also thrown when a null reference is dereferenced in verifiable managed code, an occurrence that does not involve data corruption, and there is no way to distinguish between the two situations in versions 1.0 or 1.1.</span></span>  
  
 <span data-ttu-id="b1cbc-133">系統管理員可以允許選取的應用程式還原為.NET Framework 1.1 版的行為。</span><span class="sxs-lookup"><span data-stu-id="b1cbc-133">Administrators can allow selected applications to revert to the behavior of the .NET Framework version 1.1.</span></span> <span data-ttu-id="b1cbc-134">將在下的一行[&lt;執行階段&gt;項目](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md)應用程式組態檔區段：</span><span class="sxs-lookup"><span data-stu-id="b1cbc-134">Place the following line in the [&lt;runtime&gt; Element](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md) section of the configuration file for the application:</span></span>  
  
```  
<legacyNullReferenceExceptionPolicy enabled = "1"/>  
```  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/standard/exceptions/index.md"><span data-ttu-id="b1cbc-135">處理和擲回例外狀況</span><span class="sxs-lookup"><span data-stu-id="b1cbc-135">Handling and Throwing Exceptions</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b1cbc-136">初始化 <see cref="T:System.AccessViolationException" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="b1cbc-136">Initializes a new instance of the <see cref="T:System.AccessViolationException" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AccessViolationException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AccessViolationException.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AccessViolationException();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b1cbc-137">以系統提供的錯誤說明訊息，初始化 <see cref="T:System.AccessViolationException" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="b1cbc-137">Initializes a new instance of the <see cref="T:System.AccessViolationException" /> class with a system-supplied message that describes the error.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1cbc-138">這個建構函式初始化<xref:System.Exception.Message%2A>屬性的新執行個體的系統提供的訊息描述錯誤，例如 「 嘗試讀取或寫入受保護的記憶體。</span><span class="sxs-lookup"><span data-stu-id="b1cbc-138">This constructor initializes the <xref:System.Exception.Message%2A> property of the new instance to a system-supplied message that describes the error, such as "Attempted to read or write protected memory.</span></span> <span data-ttu-id="b1cbc-139">這通常是指出其他記憶體已損毀。 」</span><span class="sxs-lookup"><span data-stu-id="b1cbc-139">This is often an indication that other memory has been corrupted."</span></span> <span data-ttu-id="b1cbc-140">此訊息會考量目前的系統文化特性。</span><span class="sxs-lookup"><span data-stu-id="b1cbc-140">This message takes into account the current system culture.</span></span>  
  
 <span data-ttu-id="b1cbc-141">下表顯示 <xref:System.AccessViolationException> 執行個體的初始屬性值。</span><span class="sxs-lookup"><span data-stu-id="b1cbc-141">The following table shows the initial property values for an instance of <xref:System.AccessViolationException>.</span></span>  
  
|<span data-ttu-id="b1cbc-142">屬性</span><span class="sxs-lookup"><span data-stu-id="b1cbc-142">Property</span></span>|<span data-ttu-id="b1cbc-143">值</span><span class="sxs-lookup"><span data-stu-id="b1cbc-143">Value</span></span>|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|<span data-ttu-id="b1cbc-144">`null`.</span><span class="sxs-lookup"><span data-stu-id="b1cbc-144">`null`.</span></span>|  
|<xref:System.Exception.Message%2A>|<span data-ttu-id="b1cbc-145">當地語系化的錯誤訊息字串。</span><span class="sxs-lookup"><span data-stu-id="b1cbc-145">The localized error message string.</span></span>|  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/exceptions/index.md"><span data-ttu-id="b1cbc-146">處理和擲回例外狀況</span><span class="sxs-lookup"><span data-stu-id="b1cbc-146">Handling and Throwing Exceptions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AccessViolationException (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AccessViolationException.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AccessViolationException(System::String ^ message);" />
      <MemberSignature Language="F#" Value="new AccessViolationException : string -&gt; AccessViolationException" Usage="new System.AccessViolationException message" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message"><span data-ttu-id="b1cbc-147">說明例外狀況的訊息。</span><span class="sxs-lookup"><span data-stu-id="b1cbc-147">The message that describes the exception.</span></span> <span data-ttu-id="b1cbc-148">這個建構函式的呼叫端必須確保這個字串已經被當地語系化 (為了目前系統的文化特性)。</span><span class="sxs-lookup"><span data-stu-id="b1cbc-148">The caller of this constructor is required to ensure that this string has been localized for the current system culture.</span></span></param>
        <summary><span data-ttu-id="b1cbc-149">使用指定的錯誤說明訊息，初始化 <see cref="T:System.AccessViolationException" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="b1cbc-149">Initializes a new instance of the <see cref="T:System.AccessViolationException" /> class with a specified message that describes the error.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1cbc-150">下表顯示 <xref:System.AccessViolationException> 執行個體的初始屬性值。</span><span class="sxs-lookup"><span data-stu-id="b1cbc-150">The following table shows the initial property values for an instance of <xref:System.AccessViolationException>.</span></span>  
  
|<span data-ttu-id="b1cbc-151">屬性</span><span class="sxs-lookup"><span data-stu-id="b1cbc-151">Property</span></span>|<span data-ttu-id="b1cbc-152">值</span><span class="sxs-lookup"><span data-stu-id="b1cbc-152">Value</span></span>|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|<span data-ttu-id="b1cbc-153">`null`.</span><span class="sxs-lookup"><span data-stu-id="b1cbc-153">`null`.</span></span>|  
|<xref:System.Exception.Message%2A>|<span data-ttu-id="b1cbc-154">`message` 中指定的錯誤訊息字串。</span><span class="sxs-lookup"><span data-stu-id="b1cbc-154">The error message string specified in `message`.</span></span>|  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/exceptions/index.md"><span data-ttu-id="b1cbc-155">處理和擲回例外狀況</span><span class="sxs-lookup"><span data-stu-id="b1cbc-155">Handling and Throwing Exceptions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected AccessViolationException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AccessViolationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; AccessViolationException(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="new AccessViolationException : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; AccessViolationException" Usage="new System.AccessViolationException (info, context)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info"><span data-ttu-id="b1cbc-156">含有序列化物件資料的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</span><span class="sxs-lookup"><span data-stu-id="b1cbc-156">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data.</span></span></param>
        <param name="context"><span data-ttu-id="b1cbc-157">包含有關來源或目的端內容資訊的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</span><span class="sxs-lookup"><span data-stu-id="b1cbc-157">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</span></span></param>
        <summary><span data-ttu-id="b1cbc-158">使用序列化資料，初始化 <see cref="T:System.AccessViolationException" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="b1cbc-158">Initializes a new instance of the <see cref="T:System.AccessViolationException" /> class with serialized data.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1cbc-159">進行還原序列化 (Deserialization) 期間會呼叫這個建構函式，以便重新構成經由資料流傳送的例外狀況物件。</span><span class="sxs-lookup"><span data-stu-id="b1cbc-159">This constructor is called during deserialization to reconstitute the exception object transmitted over a stream.</span></span> <span data-ttu-id="b1cbc-160">如需詳細資訊，請參閱 < [XML 和 SOAP 序列化](~/docs/standard/serialization/xml-and-soap-serialization.md)。</span><span class="sxs-lookup"><span data-stu-id="b1cbc-160">For more information, see [XML and SOAP Serialization](~/docs/standard/serialization/xml-and-soap-serialization.md).</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/serialization/xml-and-soap-serialization.md"><span data-ttu-id="b1cbc-161">XML 和 SOAP 序列化</span><span class="sxs-lookup"><span data-stu-id="b1cbc-161">XML and SOAP Serialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AccessViolationException (string message, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AccessViolationException.#ctor(System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String, innerException As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AccessViolationException(System::String ^ message, Exception ^ innerException);" />
      <MemberSignature Language="F#" Value="new AccessViolationException : string * Exception -&gt; AccessViolationException" Usage="new System.AccessViolationException (message, innerException)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="message"><span data-ttu-id="b1cbc-162">說明例外狀況的訊息。</span><span class="sxs-lookup"><span data-stu-id="b1cbc-162">The message that describes the exception.</span></span> <span data-ttu-id="b1cbc-163">這個建構函式的呼叫端必須確保這個字串已經被當地語系化 (為了目前系統的文化特性)。</span><span class="sxs-lookup"><span data-stu-id="b1cbc-163">The caller of this constructor is required to ensure that this string has been localized for the current system culture.</span></span></param>
        <param name="innerException"><span data-ttu-id="b1cbc-164">做為目前例外狀況發生原因的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="b1cbc-164">The exception that is the cause of the current exception.</span></span> <span data-ttu-id="b1cbc-165">如果 <paramref name="innerException" /> 參數不是 <see langword="null" />，則目前的例外狀況會在處理內部例外的 <see langword="catch" /> 區塊中引發。</span><span class="sxs-lookup"><span data-stu-id="b1cbc-165">If the <paramref name="innerException" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</span></span></param>
        <summary><span data-ttu-id="b1cbc-166">使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.AccessViolationException" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="b1cbc-166">Initializes a new instance of the <see cref="T:System.AccessViolationException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1cbc-167">被擲回以做為前一個例外狀況直接結果的例外狀況，應該在 <xref:System.Exception.InnerException%2A> 屬性中包含對前一個例外狀況的參考。</span><span class="sxs-lookup"><span data-stu-id="b1cbc-167">An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <xref:System.Exception.InnerException%2A> property.</span></span> <span data-ttu-id="b1cbc-168"><xref:System.Exception.InnerException%2A> 屬性會傳回與傳入建構函式中相同的值；如果 `null` 屬性沒有提供內部例外值給建構函式，則傳回 <xref:System.Exception.InnerException%2A>。</span><span class="sxs-lookup"><span data-stu-id="b1cbc-168">The <xref:System.Exception.InnerException%2A> property returns the same value that is passed into the constructor, or `null` if the <xref:System.Exception.InnerException%2A> property does not supply the inner exception value to the constructor.</span></span>  
  
 <span data-ttu-id="b1cbc-169">下表顯示 <xref:System.AccessViolationException> 執行個體的初始屬性值。</span><span class="sxs-lookup"><span data-stu-id="b1cbc-169">The following table shows the initial property values for an instance of <xref:System.AccessViolationException>.</span></span>  
  
|<span data-ttu-id="b1cbc-170">屬性</span><span class="sxs-lookup"><span data-stu-id="b1cbc-170">Property</span></span>|<span data-ttu-id="b1cbc-171">值</span><span class="sxs-lookup"><span data-stu-id="b1cbc-171">Value</span></span>|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|<span data-ttu-id="b1cbc-172">`null`.</span><span class="sxs-lookup"><span data-stu-id="b1cbc-172">`null`.</span></span>|  
|<xref:System.Exception.Message%2A>|<span data-ttu-id="b1cbc-173">`message` 中指定的錯誤訊息字串。</span><span class="sxs-lookup"><span data-stu-id="b1cbc-173">The error message string specified in `message`.</span></span>|  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/exceptions/index.md"><span data-ttu-id="b1cbc-174">處理和擲回例外狀況</span><span class="sxs-lookup"><span data-stu-id="b1cbc-174">Handling and Throwing Exceptions</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>