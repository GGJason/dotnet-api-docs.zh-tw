<Type Name="AppContext" FullName="System.AppContext">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="482d52e5b69288b9a8240a5a41deef259168aace" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36433571" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class AppContext" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit AppContext extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.AppContext" />
  <TypeSignature Language="VB.NET" Value="Public Class AppContext" />
  <TypeSignature Language="C++ CLI" Value="public ref class AppContext abstract sealed" />
  <TypeSignature Language="F#" Value="type AppContext = class" />
  <AssemblyInfo>
    <AssemblyName>System.AppContext</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供成員，用於設定和擷取應用程式內容的相關資料。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.AppContext>類別可讓程式庫作者為使用者提供新功能的統一退出機制。 它會建立元件之間的鬆散結合合約，以便溝通退出要求。 變更現有的功能時，此功能通常特別重要。 相反地，已經有新功能的隱含選擇加入。  
  
## <a name="appcontext-for-library-developers"></a>程式庫開發人員 AppContext  
 程式庫使用<xref:System.AppContext>類別來定義並公開相容性切換，而文件庫的使用者可以設定這些參數來影響程式庫行為。 根據預設，程式庫可提供新的功能，且它們只會在已設定此參數時變更它 (亦即，它們提供先前的功能)。  這可讓現有的 api 提供新的行為，但仍繼續支援取決於先前的行為的呼叫端程式庫。  
  
### <a name="defining-the-switch-name"></a>定義參數名稱  
 允許文件庫的取用者選擇不使用變更的最常見方式是行為的定義具名的參數。  其`value`元素是參數的名稱所組成的名稱/值組和其<xref:System.Boolean>值。  根據預設，參數是一律以隱含方式`false`，提供新的行為 （及選擇加入新行為讓預設）。 將參數設定為`true`啟用它，可提供舊版的行為。 明確地將參數設定為`false`也提供新的行為。  
  
 很有幫助的交換器名稱，使用一致的格式，因為它們是程式庫所公開的正式合約。 以下是兩種明顯的格式。  
  
-   *參數*.*命名空間*.*參數名稱*  
  
-   *參數*.*程式庫*.*參數名稱*  
  
 一旦您定義和文件的參數，呼叫端可以使用它藉由使用登錄中，加入[ \<AppContextSwitchOverrides >](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md)元素，其應用程式組態檔，或藉由呼叫<xref:System.AppContext.SetSwitch%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType>方法以程式設計的方式。 請參閱[程式庫的取用者 AppContext](#ForConsumers) > 一節，如需有關如何使用呼叫端，和設定的值<xref:System.AppContext>組態參數。  
  
 當 common language runtime 執行應用程式時，它會自動讀取登錄的相容性設定，並載入以填入應用程式的應用程式組態檔<xref:System.AppContext>執行個體。 因為<xref:System.AppContext>以程式設計方式呼叫端或藉由執行階段，會填入執行個體，您不必採取任何動作，例如呼叫<xref:System.AppContext.SetSwitch%2A>方法，以設定<xref:System.AppContext>執行個體。  
  
### <a name="checking-the-setting"></a>檢查設定  
 然後您可以檢查是否取用者已宣告的參數並藉由呼叫適當的動作值<xref:System.AppContext.TryGetSwitch%2A?displayProperty=nameWithType>方法。 方法會傳回`true`如果`switchName`找到引數，而且此方法傳回時，其`isEnabled`引數指出參數的值。  否則，方法會傳回 `false`。  
  
### <a name="an-example"></a>範例  
 下列範例說明使用<xref:System.AppContext>類別可讓客戶選擇原始程式庫方法的行為。   以下是名為程式庫版本 1.0 `StringLibrary`。 它會定義`SubstringStartsAt`方法，執行序數比較，來決定在較大的字串內子字串的起始索引。  
  
 [!code-csharp[System.AppContext.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/Example4.cs#4)]
 [!code-vb[System.AppContext.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/Example4.vb#4)]  
  
 下列範例接著會使用程式庫"考古學"中尋找子字串"archæ 」 的起始索引。 此方法會執行序數比較，因為無法找到子字串。  
  
 [!code-csharp[System.AppContext.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/Example4.cs#5)]
 [!code-vb[System.AppContext.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/Example4.vb#5)]  
  
 不過，變更文件庫中，第 2 版`SubstringStartsAt`使用區分文化特性的比較方法。  
  
 [!code-csharp[System.AppContext.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/Example6.cs#6)]
 [!code-vb[System.AppContext.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/Example6.vb#6)]  
  
 對新版本的程式庫執行重新編譯應用程式時，它現在會報告子字串"archæ 「 位於 」 考古學"中的索引 4。  
  
 [!code-csharp[System.AppContext.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/Example6.cs#7)]
 [!code-vb[System.AppContext.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/Example6.vb#7)]  
  
 這項變更可以防止中斷的應用程式相依於原始行為，藉由定義[ \<AppContextSwitchOverrides >](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md)切換。 在此情況下，名為交換器`StringLibrary.DoNotUseCultureSensitiveComparison`。 為預設值， `false`，指出程式庫應該執行其版本 2.0 區分文化特性的比較。 `true` 指示文件庫，應該進行其 1.0 版的序數比較。  稍微修改先前的程式碼可讓程式庫取用者設定來判斷此方法會執行的比較類型參數。  
  
 [!code-csharp[System.AppContext.Class#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/Example8.cs#8)]
 [!code-vb[System.AppContext.Class#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/Example8.vb#8)]  
  
 如果應用程式然後可以使用下列組態檔，以還原 1.0 版的行為。  
  
```xml  
  
<configuration>  
   <runtime>  
      <AppContextSwitchOverrides value="StringLibrary.DoNotUseCultureSensitiveComparison=true" />   
   </runtime>  
</configuration>  
  
```  
  
 執行應用程式時，使用組態檔存在，它會產生下列輸出：  
  
```  
'archæ' not found in 'The archaeologist'  
```  
  
<a name="ForConsumers"></a>   
## <a name="appcontext-for-library-consumers"></a>程式庫的取用者 AppContext  
 如果您的程式庫，取用者<xref:System.AppContext>類別可讓您充分利用文件庫或程式庫方法的新功能的退出機制。   您要呼叫的類別庫的個別方法可定義特定的參數可啟用或停用新的行為。 參數的值是布林值。 如果是`false`，通常是預設值，已啟用新的行為; 如果它是`true`、 已停用新的行為，和成員的行為與之前一樣。  
  
 您可以設定參數值中有三種：  
  
-   藉由呼叫<xref:System.AppContext.SetSwitch%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType>程式碼中的方法。  `switchName`引數定義的參數名稱，而`isEnabled`屬性可定義參數的值。 因為<xref:System.AppContext>是靜態類別，它可針對每個應用程式網域。  
  
     呼叫<xref:System.AppContext.SetSwitch%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType>有應用程式的範圍; 也就是說，它會影響應用程式。  
  
-   藉由新增`<AppContextSwitchOverrides>`元素[\<執行階段 >](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md) app.config 檔的區段。 參數具有單一屬性， `value`，其值是字串，表示其中包含參數名稱和其值的索引鍵/值組。  
  
     若要定義多個參數，區隔每個參數中的索引鍵/值組[ \<AppContextSwitchOverrides >](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md)項目的`value`以分號的屬性。 在此情況下，`<AppContextSwitchOverrides>`項目具有下列格式：  
  
    ```xml  
    <AppContextSwitchOverrides value="switchName1=value1;switchName2=value2" />  
    ```  
  
     使用`<AppContextSwitchOverrides>`項目來定義組態設定有應用程式的範圍; 也就是說，它會影響應用程式。  

    > [!NOTE]    
    > 如需.NET Framework 所定義的參數資訊，請參閱[ \<AppContextSwitchOverrides > 項目](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md)。

-   藉由新增字串值，其名稱是參數的名稱來`HKLM\SOFTWARE\Microsoft\.NETFramework\AppContext`登錄中的索引鍵。 其值必須是字串表示法<xref:System.Boolean>，可剖析<xref:System.Boolean.Parse%2A?displayProperty=nameWithType>方法; 也就是說，它必須是"True"，"true"，"False"或"false"。 如果執行階段遇到任何其他值，它會忽略這個參數。  
  
     使用登錄來定義<xref:System.AppContext>交換器有電腦範圍，也就是會影響電腦上執行的每個應用程式。  
  
 如果您將相同的交換器設定一個以上的方式，來判斷哪些設定會覆寫其他的優先順序是：  
  
1.  以程式設計方式設定。  
  
2.  應用程式組態檔中的設定。  
  
3.  登錄設定。  
  
 以下是簡單的應用程式傳遞檔案的 URI 來<xref:System.IO.Path.GetDirectoryName%2A?displayProperty=nameWithType>方法。  當.NET Framework 4.6 下執行，它會擲回<xref:System.ArgumentException>因為`file://`不再有效的組件的檔案路徑。  
  
 [!code-csharp[System.AppContext.Class#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/ForConsumers1.cs#10)]
 [!code-vb[System.AppContext.Class#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/ForConsumers1.vb#10)]  
  
 若要還原方法的舊有行為，並避免這個例外狀況，您可以加入`Switch.System.IO.UseLegacyPathHandling`切換至應用程式組態檔，例如：  
  
```xml  
<configuration>  
    <runtime>  
        <AppContextSwitchOverrides value="Switch.System.IO.UseLegacyPathHandling=true" />    
    </runtime>  
</configuration>  
```  
## <a name="see-also"></a>另請參閱
[AppContext 參數](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md)

 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="BaseDirectory">
      <MemberSignature Language="C#" Value="public static string BaseDirectory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string BaseDirectory" />
      <MemberSignature Language="DocId" Value="P:System.AppContext.BaseDirectory" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property BaseDirectory As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ BaseDirectory { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseDirectory : string" Usage="System.AppContext.BaseDirectory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AppContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得組件解析程式用來探查組件之基底目錄的路徑名稱。</summary>
        <value>組件解析程式用來探查組件之基底目錄的路徑名稱。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這是每個應用程式定義域屬性。 其值會對應到<xref:System.AppDomain.BaseDirectory%2A?displayProperty=nameWithType>目前的應用程式定義域的屬性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetData">
      <MemberSignature Language="C#" Value="public static object GetData (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object GetData(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppContext.GetData(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetData (name As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ GetData(System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member GetData : string -&gt; obj" Usage="System.AppContext.GetData name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AppContext</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">資料元素的名稱。</param>
        <summary>傳回指派給目前應用程式定義域的具名資料元素值。</summary>
        <returns>如果 <paramref name="name" /> 識別出具名的值，則為 <paramref name="name" /> 的值，否則為 <see langword="null" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetSwitch">
      <MemberSignature Language="C#" Value="public static void SetSwitch (string switchName, bool isEnabled);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetSwitch(string switchName, bool isEnabled) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppContext.SetSwitch(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetSwitch (switchName As String, isEnabled As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetSwitch(System::String ^ switchName, bool isEnabled);" />
      <MemberSignature Language="F#" Value="static member SetSwitch : string * bool -&gt; unit" Usage="System.AppContext.SetSwitch (switchName, isEnabled)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AppContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="switchName" Type="System.String" />
        <Parameter Name="isEnabled" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="switchName">參數的名稱。</param>
        <param name="isEnabled">參數的值。</param>
        <summary>設定參數的值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.AppContext>類別可讓程式庫作者為使用者提供新功能的統一退出機制。 它會建立元件之間的鬆散結合合約，以便溝通退出要求。 變更現有的功能時，此功能通常特別重要。 相反地，已經有新功能的隱含選擇加入。  
  
 <xref:System.AppContext.SetSwitch%2A>方法會呼叫應用程式 （或程式庫） 來宣告參數的值 (一律<xref:System.Boolean>值)，定義相依程式庫。 參數是一律以隱含方式`false`，這樣會提供新的行為。 將參數設定為`true`啟用它，可提供舊版的行為。 明確地將參數設定為`false`也提供新的行為。 相依程式庫可以再檢查參數值呼叫<xref:System.AppContext.TryGetSwitch%2A>方法。  
  
> [!NOTE]
>  很有幫助的交換器名稱，使用一致的格式，因為它們是程式庫所公開的正式合約。 以下是兩種明顯的格式。  
>   
>  -   *參數*.*命名空間*.*參數名稱*  
> -   *參數*.*程式庫*.*參數名稱*  
  
 在.NET Framework 中，除了以程式設計的方式，設定參數的值上執行的應用程式它也可以設定：  
  
-   加入參數名稱和值[ \<AppContextSwitchOverrides >](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md)中的項目[\<執行階段 >](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md)應用程式組態檔的區段。 例如，下列定義名為的交換器`Libraries.FPLibrary.UseExactFloatingPointComparison`其實`False`。  
  
    ```xml  
  
    <configuration>  
       <runtime>  
          <AppContextSwitchOverrides value="Libraries.FPLibrary.UseExactFloatingPointComparison=false" />   
       </runtime>  
    </configuration>  
  
    ```  
  
-   藉由新增字串值，其名稱是參數的名稱來`HKLM\SOFTWARE\Microsoft\.NETFramework\AppContext`登錄中的索引鍵。 其值必須是字串表示法<xref:System.Boolean>，可剖析<xref:System.Boolean.Parse%2A?displayProperty=nameWithType>方法; 也就是說，它必須是"True"，"true"，"False"或"false"。  
  
 如果`switchName`已經存在，其值會覆寫由`isEnabled`引數。  也就是最新呼叫<xref:System.AppContext.SetSwitch%2A>方法會在登錄中，應用程式組態檔中，或由先前呼叫所定義的值覆寫<xref:System.AppContext.SetSwitch%2A>方法。  
 
 ### <a name="appcontextsetswitch-and-net-core"></a>AppContext.SetSwitch 和.NET 核心

.NET core 支援以程式設計方式呼叫與<xref:System.AppContext.SetSwitch%2A>只方法。 支援下列參數：

|參數|值|描述|
|--|--|--|
|`System.Net.Http.useSocketsHttpHandler` |`true`|`false`|判斷高階網路應用程式開發介面，例如<xref:System.Net.Http.HttpClient>使用<xref:System.Net.Http.SocketsHttpHandler?displayProperty=nameWithType>(`true`) 或<xref:System.Net.Http.HttpClientHandler?displayProperty=nameWithType>(`false`)。|   
  
## Examples  
 下列程式碼會設定名為的交換器`Switch.AmazingLib.ThrowOnException`至`true`，可讓舊版的行為。 程式庫可以再檢查程式庫的取用者是否已設定參數的值，呼叫<xref:System.AppContext.TryGetSwitch%2A>方法。  
  
 [!code-csharp[System.AppContext.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/TestValue1.cs#1)]
 [!code-vb[System.AppContext.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/TestValue1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="switchName" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="switchName" /> 為 <see cref="F:System.String.Empty" />。</exception>
        <altmember cref="M:System.AppContext.TryGetSwitch(System.String,System.Boolean@)" />
      </Docs>
    </Member>
    <Member MemberName="TargetFrameworkName">
      <MemberSignature Language="C#" Value="public static string TargetFrameworkName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string TargetFrameworkName" />
      <MemberSignature Language="DocId" Value="P:System.AppContext.TargetFrameworkName" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property TargetFrameworkName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ TargetFrameworkName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TargetFrameworkName : string" Usage="System.AppContext.TargetFrameworkName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AppContext</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得目前應用程式設為目標的 Framework 版本名稱。</summary>
        <value>目前應用程式設為目標的 Framework 版本名稱。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 目標 framework 版本的名稱對應至值<xref:System.Runtime.Versioning.TargetFrameworkAttribute.FrameworkName%2A?displayProperty=nameWithType>屬性。 如需.NET Framework 的目標架構名稱的清單，請參閱[ &lt;supportedRuntime&gt;元素](~/docs/framework/configure-apps/file-schema/startup/supportedruntime-element.md)項目。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.Versioning.TargetFrameworkAttribute" />
        <altmember cref="P:System.Runtime.Versioning.TargetFrameworkAttribute.FrameworkName" />
      </Docs>
    </Member>
    <Member MemberName="TryGetSwitch">
      <MemberSignature Language="C#" Value="public static bool TryGetSwitch (string switchName, out bool isEnabled);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetSwitch(string switchName, [out] bool&amp; isEnabled) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppContext.TryGetSwitch(System.String,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryGetSwitch (switchName As String, ByRef isEnabled As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryGetSwitch(System::String ^ switchName, [Runtime::InteropServices::Out] bool % isEnabled);" />
      <MemberSignature Language="F#" Value="static member TryGetSwitch : string *  -&gt; bool" Usage="System.AppContext.TryGetSwitch (switchName, isEnabled)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AppContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="switchName" Type="System.String" />
        <Parameter Name="isEnabled" Type="System.Boolean&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="switchName">參數的名稱。</param>
        <param name="isEnabled">當這個方法傳回時，如果找到 <c>switchName</c>，則會包含 <c>switchName</c> 的值；如果找不到 <c>switchName</c>，則為 <see langword="false" />。 這個參數會以未初始化的狀態傳遞。</param>
        <summary>嘗試取得參數的值。</summary>
        <returns>如果已設定 <paramref name="switchName" /> 且 <paramref name="isEnabled" /> 引數包含參數的值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.AppContext>類別可讓程式庫作者為使用者提供新功能的統一退出機制。 它會建立元件之間的鬆散結合合約，以便溝通退出要求。 變更現有的功能時，此功能通常特別重要。 相反地，已經有新功能的隱含選擇加入。  
  
 Common language runtime 會自動填入參數指派給<xref:System.AppContext>藉由讀取登錄和應用程式的組態檔的執行個體。 然後可以覆寫這些參數的值，並加入新的參數，藉由呼叫<xref:System.AppContext.SetSwitch%2A>方法。  
  
 呼叫程式庫<xref:System.AppContext.TryGetSwitch%2A>檢查其取用者是否已宣告參數的值，然後執行適當的動作上的方法。  預設情況下，如果未定義的參數，就會啟用新功能... 如果定義參數，且其值為`false`，也會啟用新功能。 如果其值為`true`，已啟用舊版行為。  
  
   
  
## Examples  
 下列範例會決定文件庫的取用者是否已設定名為的交換器`Switch.AmazingLib.ThrowOnException`。  
  
 [!code-csharp[System.AppContext.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/TestValue1.cs#2)]
 [!code-vb[System.AppContext.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/TestValue1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="switchName" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="switchName" /> 為 <see cref="F:System.String.Empty" />。</exception>
        <altmember cref="M:System.AppContext.SetSwitch(System.String,System.Boolean)" />
      </Docs>
    </Member>
  </Members>
</Type>