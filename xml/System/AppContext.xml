<Type Name="AppContext" FullName="System.AppContext">
  <TypeSignature Language="C#" Value="public static class AppContext" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit AppContext extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.AppContext" />
  <TypeSignature Language="VB.NET" Value="Public Class AppContext" />
  <TypeSignature Language="C++ CLI" Value="public ref class AppContext abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.AppContext</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="358c3-101">提供成員，用於設定和擷取應用程式內容的相關資料。</span><span class="sxs-lookup"><span data-stu-id="358c3-101">Provides members for setting and retrieving data about an application's context.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="358c3-102"><xref:System.AppContext>類別可讓程式庫作者為使用者提供新功能的統一退出機制。</span><span class="sxs-lookup"><span data-stu-id="358c3-102">The <xref:System.AppContext> class enables library writers to provide a uniform opt-out mechanism for new functionality for their users.</span></span> <span data-ttu-id="358c3-103">它會建立元件之間的鬆散結合合約，以便溝通退出要求。</span><span class="sxs-lookup"><span data-stu-id="358c3-103">It establishes a loosely-coupled contract between components in order to communicate an opt-out request.</span></span> <span data-ttu-id="358c3-104">變更現有的功能時，此功能通常特別重要。</span><span class="sxs-lookup"><span data-stu-id="358c3-104">This capability is typically important when a change is made to existing functionality.</span></span> <span data-ttu-id="358c3-105">相反地，已經有新功能的隱含選擇加入。</span><span class="sxs-lookup"><span data-stu-id="358c3-105">Conversely, there is already an implicit opt-in for new functionality.</span></span>  
  
## <a name="appcontext-for-library-developers"></a><span data-ttu-id="358c3-106">程式庫開發人員 AppContext</span><span class="sxs-lookup"><span data-stu-id="358c3-106">AppContext for library developers</span></span>  
 <span data-ttu-id="358c3-107">程式庫使用<xref:System.AppContext>類別來定義並公開相容性切換，而文件庫的使用者可以設定這些參數來影響程式庫行為。</span><span class="sxs-lookup"><span data-stu-id="358c3-107">Libraries use  the <xref:System.AppContext> class to define and expose compatibility switches, while library users can set those switches to affect the library behavior.</span></span> <span data-ttu-id="358c3-108">根據預設，程式庫可提供新的功能，且它們只會在已設定此參數時變更它 (亦即，它們提供先前的功能)。</span><span class="sxs-lookup"><span data-stu-id="358c3-108">By default, libraries provide the new functionality, and they only alter it (that is, they provide the previous functionality) if the switch is set.</span></span>  <span data-ttu-id="358c3-109">這可讓現有的 api 提供新的行為，但仍繼續支援取決於先前的行為的呼叫端程式庫。</span><span class="sxs-lookup"><span data-stu-id="358c3-109">This allows libraries to provide new behavior for an existing API while continuing to support callers who depend on the previous behavior.</span></span>  
  
### <a name="defining-the-switch-name"></a><span data-ttu-id="358c3-110">定義參數名稱</span><span class="sxs-lookup"><span data-stu-id="358c3-110">Defining the switch name</span></span>  
 <span data-ttu-id="358c3-111">允許文件庫的取用者選擇不使用變更的最常見方式是行為的定義具名的參數。</span><span class="sxs-lookup"><span data-stu-id="358c3-111">The most common way to allow consumers of your library to opt out of a change of behavior is to define a named switch.</span></span>  <span data-ttu-id="358c3-112">其`value`元素是參數的名稱所組成的名稱/值組和其<xref:System.Boolean>值。</span><span class="sxs-lookup"><span data-stu-id="358c3-112">Its `value` element is a name/value pair that consists of the name of a switch and its <xref:System.Boolean> value.</span></span>  <span data-ttu-id="358c3-113">根據預設，參數是一律以隱含方式`false`，提供新的行為 （及選擇加入新行為讓預設）。</span><span class="sxs-lookup"><span data-stu-id="358c3-113">By default, the switch is always implicitly `false`, which provides the new behavior (and makes the new behavior opt-in by default).</span></span> <span data-ttu-id="358c3-114">將參數設定為`true`啟用它，可提供舊版的行為。</span><span class="sxs-lookup"><span data-stu-id="358c3-114">Setting the switch to `true` enables it, which provides the legacy behavior.</span></span> <span data-ttu-id="358c3-115">明確地將參數設定為`false`也提供新的行為。</span><span class="sxs-lookup"><span data-stu-id="358c3-115">Explicitly setting the switch to `false` also provides the new behavior.</span></span>  
  
 <span data-ttu-id="358c3-116">很有幫助的交換器名稱，使用一致的格式，因為它們是程式庫所公開的正式合約。</span><span class="sxs-lookup"><span data-stu-id="358c3-116">It's beneficial to use a consistent format for switch names, since they are a formal contract exposed by a library.</span></span> <span data-ttu-id="358c3-117">以下是兩種明顯的格式。</span><span class="sxs-lookup"><span data-stu-id="358c3-117">The following are two obvious formats.</span></span>  
  
-   <span data-ttu-id="358c3-118">*參數*.*命名空間*.*參數名稱*</span><span class="sxs-lookup"><span data-stu-id="358c3-118">*Switch*.*namespace*.*switchname*</span></span>  
  
-   <span data-ttu-id="358c3-119">*參數*.*程式庫*.*參數名稱*</span><span class="sxs-lookup"><span data-stu-id="358c3-119">*Switch*.*library*.*switchname*</span></span>  
  
 <span data-ttu-id="358c3-120">一旦您定義和文件的參數，呼叫端可以使用它藉由使用登錄中，加入[ \<AppContextSwitchOverrides >](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md)元素，其應用程式組態檔，或藉由呼叫<xref:System.AppContext.SetSwitch%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType>方法以程式設計的方式。</span><span class="sxs-lookup"><span data-stu-id="358c3-120">Once you define and document the switch, callers can use it by using the registry, by adding an  [\<AppContextSwitchOverrides>](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md) element to their application configuration file, or by calling the  <xref:System.AppContext.SetSwitch%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType> method programmatically.</span></span> <span data-ttu-id="358c3-121">請參閱[程式庫的取用者 AppContext](#ForConsumers) > 一節，如需有關如何使用呼叫端，和設定的值<xref:System.AppContext>組態參數。</span><span class="sxs-lookup"><span data-stu-id="358c3-121">See the [AppContext for library consumers](#ForConsumers) section for more information about how callers use and set the value of <xref:System.AppContext> configuration switches.</span></span>  
  
 <span data-ttu-id="358c3-122">當 common language runtime 執行應用程式時，它會自動讀取登錄的相容性設定，並載入以填入應用程式的應用程式組態檔<xref:System.AppContext>執行個體。</span><span class="sxs-lookup"><span data-stu-id="358c3-122">When the common language runtime runs an application, it automatically reads the registry's compatibility settings and loads the application configuration file in order to populate the application's <xref:System.AppContext> instance.</span></span> <span data-ttu-id="358c3-123">因為<xref:System.AppContext>以程式設計方式呼叫端或藉由執行階段，會填入執行個體，您不必採取任何動作，例如呼叫<xref:System.AppContext.SetSwitch%2A>方法，以設定<xref:System.AppContext>執行個體。</span><span class="sxs-lookup"><span data-stu-id="358c3-123">Because the <xref:System.AppContext> instance is populated either programmatically by the caller or by the runtime, you do not have to take any action, such as calling the <xref:System.AppContext.SetSwitch%2A> method,  to configure the <xref:System.AppContext> instance.</span></span>  
  
### <a name="checking-the-setting"></a><span data-ttu-id="358c3-124">檢查設定</span><span class="sxs-lookup"><span data-stu-id="358c3-124">Checking the setting</span></span>  
 <span data-ttu-id="358c3-125">然後您可以檢查是否取用者已宣告的參數並藉由呼叫適當的動作值<xref:System.AppContext.TryGetSwitch%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="358c3-125">You can then check if a consumer has declared the value of the switch and act appropriately by calling the <xref:System.AppContext.TryGetSwitch%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="358c3-126">方法會傳回`true`如果`switchName`找到引數，而且此方法傳回時，其`isEnabled`引數指出參數的值。</span><span class="sxs-lookup"><span data-stu-id="358c3-126">The method returns `true` if the `switchName` argument is found, and when the method returns, its `isEnabled` argument indicates the value of the switch.</span></span>  <span data-ttu-id="358c3-127">否則，方法會傳回 `false`。</span><span class="sxs-lookup"><span data-stu-id="358c3-127">Otherwise, the method returns `false`.</span></span>  
  
### <a name="an-example"></a><span data-ttu-id="358c3-128">範例</span><span class="sxs-lookup"><span data-stu-id="358c3-128">An example</span></span>  
 <span data-ttu-id="358c3-129">下列範例說明使用<xref:System.AppContext>類別可讓客戶選擇原始程式庫方法的行為。</span><span class="sxs-lookup"><span data-stu-id="358c3-129">The following example illustrates the use of the <xref:System.AppContext> class to allow the customer to choose the original behavior of a library method.</span></span>   <span data-ttu-id="358c3-130">以下是名為程式庫版本 1.0 `StringLibrary`。</span><span class="sxs-lookup"><span data-stu-id="358c3-130">The following is version 1.0 of a library named `StringLibrary`.</span></span> <span data-ttu-id="358c3-131">它會定義`SubstringStartsAt`方法，執行序數比較，來決定在較大的字串內子字串的起始索引。</span><span class="sxs-lookup"><span data-stu-id="358c3-131">It defines a `SubstringStartsAt` method that performs an ordinal comparison to determine the starting index of a substring within a larger string.</span></span>  
  
 [!code-csharp[System.AppContext.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/Example4.cs#4)]
 [!code-vb[System.AppContext.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/Example4.vb#4)]  
  
 <span data-ttu-id="358c3-132">下列範例接著會使用程式庫"考古學"中尋找子字串"archæ 」 的起始索引。</span><span class="sxs-lookup"><span data-stu-id="358c3-132">The following example then uses the library to find the starting index of the substring "archæ" in "The archaeologist".</span></span> <span data-ttu-id="358c3-133">此方法會執行序數比較，因為無法找到子字串。</span><span class="sxs-lookup"><span data-stu-id="358c3-133">Because the method performs an ordinal comparison, the substring cannot be found.</span></span>  
  
 [!code-csharp[System.AppContext.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/Example4.cs#5)]
 [!code-vb[System.AppContext.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/Example4.vb#5)]  
  
 <span data-ttu-id="358c3-134">不過，變更文件庫中，第 2 版`SubstringStartsAt`使用區分文化特性的比較方法。</span><span class="sxs-lookup"><span data-stu-id="358c3-134">Version 2 of the library, however, changes the `SubstringStartsAt` method to use culture-sensitive comparison.</span></span>  
  
 [!code-csharp[System.AppContext.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/Example6.cs#6)]
 [!code-vb[System.AppContext.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/Example6.vb#6)]  
  
 <span data-ttu-id="358c3-135">對新版本的程式庫執行重新編譯應用程式時，它現在會報告子字串"archæ 「 位於 」 考古學"中的索引 4。</span><span class="sxs-lookup"><span data-stu-id="358c3-135">When the app is recompiled to run against the new version of the library, it now reports that the substring "archæ" is found at index 4 in "The archaeologist".</span></span>  
  
 [!code-csharp[System.AppContext.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/Example6.cs#7)]
 [!code-vb[System.AppContext.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/Example6.vb#7)]  
  
 <span data-ttu-id="358c3-136">這項變更可以防止中斷的應用程式相依於原始行為，藉由定義[ \<AppContextSwitchOverrides >](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md)切換。</span><span class="sxs-lookup"><span data-stu-id="358c3-136">This change can be prevented from breaking the applications that depend on the original behavior by defining an [\<AppContextSwitchOverrides>](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md) switch.</span></span> <span data-ttu-id="358c3-137">在此情況下，名為交換器`StringLibrary.DoNotUseCultureSensitiveComparison`。</span><span class="sxs-lookup"><span data-stu-id="358c3-137">In this case, the switch is named `StringLibrary.DoNotUseCultureSensitiveComparison`.</span></span> <span data-ttu-id="358c3-138">為預設值， `false`，指出程式庫應該執行其版本 2.0 區分文化特性的比較。</span><span class="sxs-lookup"><span data-stu-id="358c3-138">Its default value, `false`, indicates that the library should perform its version 2.0 culture-sensitive comparison.</span></span> <span data-ttu-id="358c3-139">`true` 指示文件庫，應該進行其 1.0 版的序數比較。</span><span class="sxs-lookup"><span data-stu-id="358c3-139">`true` indicates that the library should perform its version 1.0 ordinal comparison.</span></span>  <span data-ttu-id="358c3-140">稍微修改先前的程式碼可讓程式庫取用者設定來判斷此方法會執行的比較類型參數。</span><span class="sxs-lookup"><span data-stu-id="358c3-140">A slight modification of the previous code allows the library consumer to set the switch to determine the kind of comparison the method performs.</span></span>  
  
 [!code-csharp[System.AppContext.Class#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/Example8.cs#8)]
 [!code-vb[System.AppContext.Class#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/Example8.vb#8)]  
  
 <span data-ttu-id="358c3-141">如果應用程式然後可以使用下列組態檔，以還原 1.0 版的行為。</span><span class="sxs-lookup"><span data-stu-id="358c3-141">If application can then use the following configuration file to restore the version 1.0 behavior.</span></span>  
  
```xml  
  
<configuration>  
   <runtime>  
      <AppContextSwitchOverrides value="StringLibrary.DoNotUseCultureSensitiveComparison=true" />   
   </runtime>  
</configuration>  
  
```  
  
 <span data-ttu-id="358c3-142">執行應用程式時，使用組態檔存在，它會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="358c3-142">When the application is run with the configuration file present, it produces the following output:</span></span>  
  
```  
'archæ' not found in 'The archaeologist'  
```  
  
<a name="ForConsumers"></a>   
## <a name="appcontext-for-library-consumers"></a><span data-ttu-id="358c3-143">程式庫的取用者 AppContext</span><span class="sxs-lookup"><span data-stu-id="358c3-143">AppContext for library consumers</span></span>  
 <span data-ttu-id="358c3-144">如果您的程式庫，取用者<xref:System.AppContext>類別可讓您充分利用文件庫或程式庫方法的新功能的退出機制。</span><span class="sxs-lookup"><span data-stu-id="358c3-144">If you are the consumer of a library, the <xref:System.AppContext> class  allows you to take advantage of a library or library method's opt-out mechanism for new functionality.</span></span>   <span data-ttu-id="358c3-145">您要呼叫的類別庫的個別方法可定義特定的參數可啟用或停用新的行為。</span><span class="sxs-lookup"><span data-stu-id="358c3-145">Individual methods of the class library that you are calling define particular switches that enable or disable a new behavior.</span></span> <span data-ttu-id="358c3-146">參數的值是布林值。</span><span class="sxs-lookup"><span data-stu-id="358c3-146">The value of the switch  is a Boolean.</span></span> <span data-ttu-id="358c3-147">如果是`false`，通常是預設值，已啟用新的行為; 如果它是`true`、 已停用新的行為，和成員的行為與之前一樣。</span><span class="sxs-lookup"><span data-stu-id="358c3-147">If it is `false`, which is typically the default value, the new behavior is enabled; if it is `true`, the new behavior is disabled, and the member behaves as it did previously.</span></span>  
  
 <span data-ttu-id="358c3-148">您可以設定參數值中有三種：</span><span class="sxs-lookup"><span data-stu-id="358c3-148">You can set the value of a switch in one of three ways:</span></span>  
  
-   <span data-ttu-id="358c3-149">藉由呼叫<xref:System.AppContext.SetSwitch%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType>程式碼中的方法。</span><span class="sxs-lookup"><span data-stu-id="358c3-149">By calling the <xref:System.AppContext.SetSwitch%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType> method in your code.</span></span>  <span data-ttu-id="358c3-150">`switchName`引數定義的參數名稱，而`isEnabled`屬性可定義參數的值。</span><span class="sxs-lookup"><span data-stu-id="358c3-150">The `switchName` argument defines the switch name, and the `isEnabled` property defines the value of the switch.</span></span> <span data-ttu-id="358c3-151">因為<xref:System.AppContext>是靜態類別，它可針對每個應用程式網域。</span><span class="sxs-lookup"><span data-stu-id="358c3-151">Because <xref:System.AppContext> is a static class, it is available on a per-application domain basis.</span></span>  
  
     <span data-ttu-id="358c3-152">呼叫<xref:System.AppContext.SetSwitch%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType>有應用程式的範圍; 也就是說，它會影響應用程式。</span><span class="sxs-lookup"><span data-stu-id="358c3-152">Calling the <xref:System.AppContext.SetSwitch%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType> has application scope; that is, it affects only the application.</span></span>  
  
-   <span data-ttu-id="358c3-153">藉由新增`<AppContextSwitchOverrides>`元素[\<執行階段 >](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md) app.config 檔的區段。</span><span class="sxs-lookup"><span data-stu-id="358c3-153">By adding an `<AppContextSwitchOverrides>` element to the [\<runtime>](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md) section of your app.config file.</span></span> <span data-ttu-id="358c3-154">參數具有單一屬性， `value`，其值是字串，表示其中包含參數名稱和其值的索引鍵/值組。</span><span class="sxs-lookup"><span data-stu-id="358c3-154">The switch has a single attribute, `value`, whose value is a string that represents a key/value pair containing both the switch name and its value.</span></span>  
  
     <span data-ttu-id="358c3-155">若要定義多個參數，區隔每個參數中的索引鍵/值組[ \<AppContextSwitchOverrides >](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md)項目的`value`以分號的屬性。</span><span class="sxs-lookup"><span data-stu-id="358c3-155">To define multiple switches, separate each switch's key/value pair in the [\<AppContextSwitchOverrides>](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md) element's `value` attribute with a semicolon.</span></span> <span data-ttu-id="358c3-156">在此情況下，`<AppContextSwitchOverrides>`項目具有下列格式：</span><span class="sxs-lookup"><span data-stu-id="358c3-156">In that case, the `<AppContextSwitchOverrides>` element has the following format:</span></span>  
  
    ```xml  
    <AppContextSwitchOverrides value="switchName1=value1;switchName2=value2" />  
    ```  
  
     <span data-ttu-id="358c3-157">使用`<AppContextSwitchOverrides>`項目來定義組態設定有應用程式的範圍; 也就是說，它會影響應用程式。</span><span class="sxs-lookup"><span data-stu-id="358c3-157">Using the `<AppContextSwitchOverrides>` element to define a configuration setting has application scope; that is, it affects only the application.</span></span>  

    > [!NOTE]    
    > <span data-ttu-id="358c3-158">如需.NET Framework 所定義的參數資訊，請參閱[ \<AppContextSwitchOverrides > 項目](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md)。</span><span class="sxs-lookup"><span data-stu-id="358c3-158">For information on the switches defined by the .NET Framework, see the [\<AppContextSwitchOverrides> element](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md).</span></span>

-   <span data-ttu-id="358c3-159">藉由新增字串值，其名稱是參數的名稱來`HKLM\SOFTWARE\Microsoft\.NETFramework\AppContext`登錄中的索引鍵。</span><span class="sxs-lookup"><span data-stu-id="358c3-159">By adding a string value whose name is the name of the switch to the `HKLM\SOFTWARE\Microsoft\.NETFramework\AppContext` key in the registry.</span></span> <span data-ttu-id="358c3-160">其值必須是字串表示法<xref:System.Boolean>，可剖析<xref:System.Boolean.Parse%2A?displayProperty=nameWithType>方法; 也就是說，它必須是"True"，"true"，"False"或"false"。</span><span class="sxs-lookup"><span data-stu-id="358c3-160">Its value must be the string representation of a <xref:System.Boolean> that can be parsed by the <xref:System.Boolean.Parse%2A?displayProperty=nameWithType> method; that is, it must be "True", "true", "False", or "false".</span></span> <span data-ttu-id="358c3-161">如果執行階段遇到任何其他值，它會忽略這個參數。</span><span class="sxs-lookup"><span data-stu-id="358c3-161">If the runtime encounters any other value, it ignores the switch.</span></span>  
  
     <span data-ttu-id="358c3-162">使用登錄來定義<xref:System.AppContext>交換器有電腦範圍，也就是會影響電腦上執行的每個應用程式。</span><span class="sxs-lookup"><span data-stu-id="358c3-162">Using the registry to define an <xref:System.AppContext> switch has machine scope; that is, it affects every application running on the machine.</span></span>  
  
 <span data-ttu-id="358c3-163">如果您將相同的交換器設定一個以上的方式，來判斷哪些設定會覆寫其他的優先順序是：</span><span class="sxs-lookup"><span data-stu-id="358c3-163">If you set the same switch in more than one way, the order of precedence for determining which setting overrides the others is:</span></span>  
  
1.  <span data-ttu-id="358c3-164">以程式設計方式設定。</span><span class="sxs-lookup"><span data-stu-id="358c3-164">The programmatic setting.</span></span>  
  
2.  <span data-ttu-id="358c3-165">應用程式組態檔中的設定。</span><span class="sxs-lookup"><span data-stu-id="358c3-165">The setting in the app config file.</span></span>  
  
3.  <span data-ttu-id="358c3-166">登錄設定。</span><span class="sxs-lookup"><span data-stu-id="358c3-166">The registry setting.</span></span>  
  
 <span data-ttu-id="358c3-167">以下是簡單的應用程式傳遞檔案的 URI 來<xref:System.IO.Path.GetDirectoryName%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="358c3-167">The following is a simple application that passes a file URI to the <xref:System.IO.Path.GetDirectoryName%2A?displayProperty=nameWithType> method.</span></span>  <span data-ttu-id="358c3-168">當.NET Framework 4.6 下執行，它會擲回<xref:System.ArgumentException>因為`file://`不再有效的組件的檔案路徑。</span><span class="sxs-lookup"><span data-stu-id="358c3-168">When run under the .NET Framework 4.6, it throws an <xref:System.ArgumentException> because `file://` is no longer a valid part of a file path.</span></span>  
  
 [!code-csharp[System.AppContext.Class#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/ForConsumers1.cs#10)]
 [!code-vb[System.AppContext.Class#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/ForConsumers1.vb#10)]  
  
 <span data-ttu-id="358c3-169">若要還原方法的舊有行為，並避免這個例外狀況，您可以加入`Switch.System.IO.UseLegacyPathHandling`切換至應用程式組態檔，例如：</span><span class="sxs-lookup"><span data-stu-id="358c3-169">To restore the method's previous behavior and prevent the exception, you can add the `Switch.System.IO.UseLegacyPathHandling` switch to the application configuration file for the example:</span></span>  
  
```xml  
<configuration>  
    <runtime>  
        <AppContextSwitchOverrides value="Switch.System.IO.UseLegacyPathHandling=true" />    
    </runtime>  
</configuration>  
```  
## <a name="see-also"></a><span data-ttu-id="358c3-170">另請參閱</span><span class="sxs-lookup"><span data-stu-id="358c3-170">See also</span></span>
[<span data-ttu-id="358c3-171">AppContext 參數</span><span class="sxs-lookup"><span data-stu-id="358c3-171">AppContext switch</span></span>](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md)

 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="BaseDirectory">
      <MemberSignature Language="C#" Value="public static string BaseDirectory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string BaseDirectory" />
      <MemberSignature Language="DocId" Value="P:System.AppContext.BaseDirectory" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property BaseDirectory As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ BaseDirectory { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AppContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="358c3-172">取得組件解析程式用來探查組件之基底目錄的路徑名稱。</span><span class="sxs-lookup"><span data-stu-id="358c3-172">Gets the pathname of the base directory that the assembly resolver uses to probe for assemblies.</span></span></summary>
        <value><span data-ttu-id="358c3-173">組件解析程式用來探查組件之基底目錄的路徑名稱。</span><span class="sxs-lookup"><span data-stu-id="358c3-173">the pathname of the base directory that the assembly resolver uses to probe for assemblies.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="358c3-174">這是每個應用程式定義域屬性。</span><span class="sxs-lookup"><span data-stu-id="358c3-174">This is a per application domain property.</span></span> <span data-ttu-id="358c3-175">其值會對應到<xref:System.AppDomain.BaseDirectory%2A?displayProperty=nameWithType>目前的應用程式定義域的屬性。</span><span class="sxs-lookup"><span data-stu-id="358c3-175">Its value corresponds to the <xref:System.AppDomain.BaseDirectory%2A?displayProperty=nameWithType> property of the current application domain.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetData">
      <MemberSignature Language="C#" Value="public static object GetData (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object GetData(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppContext.GetData(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetData (name As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ GetData(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AppContext</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="358c3-176">資料元素的名稱。</span><span class="sxs-lookup"><span data-stu-id="358c3-176">The name of the data element.</span></span></param>
        <summary><span data-ttu-id="358c3-177">傳回指派給目前應用程式定義域的具名資料元素值。</span><span class="sxs-lookup"><span data-stu-id="358c3-177">Returns the value of the named data element assigned to the current application domain.</span></span></summary>
        <returns><span data-ttu-id="358c3-178">如果 <paramref name="name" /> 識別出具名的值，則為 <paramref name="name" /> 的值，否則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="358c3-178">The value of <paramref name="name" />, if <paramref name="name" /> identifies a named value; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetSwitch">
      <MemberSignature Language="C#" Value="public static void SetSwitch (string switchName, bool isEnabled);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetSwitch(string switchName, bool isEnabled) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppContext.SetSwitch(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetSwitch (switchName As String, isEnabled As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetSwitch(System::String ^ switchName, bool isEnabled);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AppContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="switchName" Type="System.String" />
        <Parameter Name="isEnabled" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="switchName"><span data-ttu-id="358c3-179">參數的名稱。</span><span class="sxs-lookup"><span data-stu-id="358c3-179">The name of the switch.</span></span></param>
        <param name="isEnabled"><span data-ttu-id="358c3-180">參數的值。</span><span class="sxs-lookup"><span data-stu-id="358c3-180">The value of the switch.</span></span></param>
        <summary><span data-ttu-id="358c3-181">設定參數的值。</span><span class="sxs-lookup"><span data-stu-id="358c3-181">Sets the value of a switch.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="358c3-182"><xref:System.AppContext>類別可讓程式庫作者為使用者提供新功能的統一退出機制。</span><span class="sxs-lookup"><span data-stu-id="358c3-182">The <xref:System.AppContext> class enables library writers to provide a uniform opt-out mechanism for new functionality for their users.</span></span> <span data-ttu-id="358c3-183">它會建立元件之間的鬆散結合合約，以便溝通退出要求。</span><span class="sxs-lookup"><span data-stu-id="358c3-183">It establishes a loosely-coupled contract between components in order to communicate an opt-out request.</span></span> <span data-ttu-id="358c3-184">變更現有的功能時，此功能通常特別重要。</span><span class="sxs-lookup"><span data-stu-id="358c3-184">This capability is typically important when a change is made to existing functionality.</span></span> <span data-ttu-id="358c3-185">相反地，已經有新功能的隱含選擇加入。</span><span class="sxs-lookup"><span data-stu-id="358c3-185">Conversely, there is already an implicit opt-in for new functionality.</span></span>  
  
 <span data-ttu-id="358c3-186"><xref:System.AppContext.SetSwitch%2A>方法會呼叫應用程式 （或程式庫） 來宣告參數的值 (一律<xref:System.Boolean>值)，定義相依程式庫。</span><span class="sxs-lookup"><span data-stu-id="358c3-186">The <xref:System.AppContext.SetSwitch%2A> method is called by an application (or a library) to declare the value of a switch (which is always a <xref:System.Boolean> value) that a dependent library defines.</span></span> <span data-ttu-id="358c3-187">參數是一律以隱含方式`false`，這樣會提供新的行為。</span><span class="sxs-lookup"><span data-stu-id="358c3-187">The switch is always implicitly `false`, which provides the new behavior.</span></span> <span data-ttu-id="358c3-188">將參數設定為`true`啟用它，可提供舊版的行為。</span><span class="sxs-lookup"><span data-stu-id="358c3-188">Setting the switch to `true` enables it, which provides the legacy behavior.</span></span> <span data-ttu-id="358c3-189">明確地將參數設定為`false`也提供新的行為。</span><span class="sxs-lookup"><span data-stu-id="358c3-189">Explicitly setting the switch to `false` also provides the new behavior.</span></span> <span data-ttu-id="358c3-190">相依程式庫可以再檢查參數值呼叫<xref:System.AppContext.TryGetSwitch%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="358c3-190">The dependent library can then check the value of the switch by calling the <xref:System.AppContext.TryGetSwitch%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="358c3-191">很有幫助的交換器名稱，使用一致的格式，因為它們是程式庫所公開的正式合約。</span><span class="sxs-lookup"><span data-stu-id="358c3-191">It's beneficial to use a consistent format for switch names, since they are a formal contract exposed by a library.</span></span> <span data-ttu-id="358c3-192">以下是兩種明顯的格式。</span><span class="sxs-lookup"><span data-stu-id="358c3-192">The following are two obvious formats.</span></span>  
>   
>  -   <span data-ttu-id="358c3-193">*參數*.*命名空間*.*參數名稱*</span><span class="sxs-lookup"><span data-stu-id="358c3-193">*Switch*.*namespace*.*switchname*</span></span>  
> -   <span data-ttu-id="358c3-194">*參數*.*程式庫*.*參數名稱*</span><span class="sxs-lookup"><span data-stu-id="358c3-194">*Switch*.*library*.*switchname*</span></span>  
  
 <span data-ttu-id="358c3-195">除了以程式設計方式設定參數的值，它也可以設定：</span><span class="sxs-lookup"><span data-stu-id="358c3-195">In addition to setting the value of a switch programmatically, it can also be set:</span></span>  
  
-   <span data-ttu-id="358c3-196">加入參數名稱和值[ \<AppContextSwitchOverrides >](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md)中的項目[\<執行階段 >](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md)應用程式組態檔的區段。</span><span class="sxs-lookup"><span data-stu-id="358c3-196">By adding the switch name and value to the [\<AppContextSwitchOverrides>](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md) element in the [\<runtime>](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md) section of an application configuration file.</span></span> <span data-ttu-id="358c3-197">例如，下列定義名為的交換器`Libraries.FPLibrary.UseExactFloatingPointComparison`其實`False`。</span><span class="sxs-lookup"><span data-stu-id="358c3-197">For example, the following defines a switch named `Libraries.FPLibrary.UseExactFloatingPointComparison` whose value is `False`.</span></span>  
  
    ```xml  
  
    <configuration>  
       <runtime>  
          <AppContextSwitchOverrides value="Libraries.FPLibrary.UseExactFloatingPointComparison=false" />   
       </runtime>  
    </configuration>  
  
    ```  
  
-   <span data-ttu-id="358c3-198">藉由新增字串值，其名稱是參數的名稱來`HKLM\SOFTWARE\Microsoft\.NETFramework\AppContext`登錄中的索引鍵。</span><span class="sxs-lookup"><span data-stu-id="358c3-198">By adding a string value whose name is the name of the switch to the `HKLM\SOFTWARE\Microsoft\.NETFramework\AppContext` key in the registry.</span></span> <span data-ttu-id="358c3-199">其值必須是字串表示法<xref:System.Boolean>，可剖析<xref:System.Boolean.Parse%2A?displayProperty=nameWithType>方法; 也就是說，它必須是"True"，"true"，"False"或"false"。</span><span class="sxs-lookup"><span data-stu-id="358c3-199">Its value must be the string representation of a <xref:System.Boolean> that can be parsed by the <xref:System.Boolean.Parse%2A?displayProperty=nameWithType> method; that is, it must be "True", "true", "False", or "false".</span></span>  
  
 <span data-ttu-id="358c3-200">如果`switchName`已經存在，其值會覆寫由`isEnabled`引數。</span><span class="sxs-lookup"><span data-stu-id="358c3-200">If `switchName` already exists, its value is overwritten by the `isEnabled` argument.</span></span>  <span data-ttu-id="358c3-201">也就是最新呼叫<xref:System.AppContext.SetSwitch%2A>方法會在登錄中，應用程式組態檔中，或由先前呼叫所定義的值覆寫<xref:System.AppContext.SetSwitch%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="358c3-201">That is, the most recent call to the <xref:System.AppContext.SetSwitch%2A> method overrides the value defined in the registry, in an app configuration file, or by previous calls to the <xref:System.AppContext.SetSwitch%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="358c3-202">下列程式碼會設定名為的交換器`Switch.AmazingLib.ThrowOnException`至`true`，可讓舊版的行為。</span><span class="sxs-lookup"><span data-stu-id="358c3-202">The following line of code sets a switch named `Switch.AmazingLib.ThrowOnException` to `true`, which enables a legacy behavior.</span></span> <span data-ttu-id="358c3-203">程式庫可以再檢查程式庫的取用者是否已設定參數的值，呼叫<xref:System.AppContext.TryGetSwitch%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="358c3-203">The library can then check whether a library consumer has set the value of the switch by calling the <xref:System.AppContext.TryGetSwitch%2A> method.</span></span>  
  
 [!code-csharp[System.AppContext.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/TestValue1.cs#1)]
 [!code-vb[System.AppContext.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/TestValue1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="358c3-204"><paramref name="switchName" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="358c3-204"><paramref name="switchName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="358c3-205"><paramref name="switchName" /> 為 <see cref="F:System.String.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="358c3-205"><paramref name="switchName" /> is <see cref="F:System.String.Empty" />.</span></span></exception>
        <altmember cref="M:System.AppContext.TryGetSwitch(System.String,System.Boolean@)" />
      </Docs>
    </Member>
    <Member MemberName="TargetFrameworkName">
      <MemberSignature Language="C#" Value="public static string TargetFrameworkName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string TargetFrameworkName" />
      <MemberSignature Language="DocId" Value="P:System.AppContext.TargetFrameworkName" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property TargetFrameworkName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ TargetFrameworkName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AppContext</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="358c3-206">取得目前應用程式設為目標的 Framework 版本名稱。</span><span class="sxs-lookup"><span data-stu-id="358c3-206">Gets the name of the framework version targeted by the current application.</span></span></summary>
        <value><span data-ttu-id="358c3-207">目前應用程式設為目標的 Framework 版本名稱。</span><span class="sxs-lookup"><span data-stu-id="358c3-207">The name of the framework version targeted by the current application.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="358c3-208">目標 framework 版本的名稱對應至值<xref:System.Runtime.Versioning.TargetFrameworkAttribute.FrameworkName%2A?displayProperty=nameWithType>屬性。</span><span class="sxs-lookup"><span data-stu-id="358c3-208">The name of the target framework version corresponds to the value of the <xref:System.Runtime.Versioning.TargetFrameworkAttribute.FrameworkName%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="358c3-209">如需.NET Framework 的目標架構名稱的清單，請參閱[ &lt;supportedRuntime&gt;元素](~/docs/framework/configure-apps/file-schema/startup/supportedruntime-element.md)項目。</span><span class="sxs-lookup"><span data-stu-id="358c3-209">For a list of target framework names for the .NET Framework, see the [&lt;supportedRuntime&gt; Element](~/docs/framework/configure-apps/file-schema/startup/supportedruntime-element.md) element.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.Versioning.TargetFrameworkAttribute" />
        <altmember cref="P:System.Runtime.Versioning.TargetFrameworkAttribute.FrameworkName" />
      </Docs>
    </Member>
    <Member MemberName="TryGetSwitch">
      <MemberSignature Language="C#" Value="public static bool TryGetSwitch (string switchName, out bool isEnabled);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetSwitch(string switchName, [out] bool&amp; isEnabled) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppContext.TryGetSwitch(System.String,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryGetSwitch (switchName As String, ByRef isEnabled As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryGetSwitch(System::String ^ switchName, [Runtime::InteropServices::Out] bool % isEnabled);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AppContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="switchName" Type="System.String" />
        <Parameter Name="isEnabled" Type="System.Boolean&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="switchName"><span data-ttu-id="358c3-210">參數的名稱。</span><span class="sxs-lookup"><span data-stu-id="358c3-210">The name of the switch.</span></span></param>
        <param name="isEnabled"><span data-ttu-id="358c3-211">當這個方法傳回時，如果找到 <c>switchName</c>，則會包含 <c>switchName</c> 的值；如果找不到 <c>switchName</c>，則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="358c3-211">When this method returns, contains the value of <c>switchName</c> if <c>switchName</c> was found, or <see langword="false" /> if <c>switchName</c> was not found.</span></span> <span data-ttu-id="358c3-212">這個參數會以未初始化的狀態傳遞。</span><span class="sxs-lookup"><span data-stu-id="358c3-212">This parameter is passed uninitialized.</span></span></param>
        <summary><span data-ttu-id="358c3-213">嘗試取得參數的值。</span><span class="sxs-lookup"><span data-stu-id="358c3-213">Tries to get the value of a switch.</span></span></summary>
        <returns>
          <span data-ttu-id="358c3-214">如果已設定 <paramref name="switchName" /> 且 <paramref name="isEnabled" /> 引數包含參數的值，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="358c3-214"><see langword="true" /> if <paramref name="switchName" /> was set and the <paramref name="isEnabled" /> argument contains the value of the switch; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="358c3-215"><xref:System.AppContext>類別可讓程式庫作者為使用者提供新功能的統一退出機制。</span><span class="sxs-lookup"><span data-stu-id="358c3-215">The <xref:System.AppContext> class enables library writers to provide a uniform opt-out mechanism for new functionality for their users.</span></span> <span data-ttu-id="358c3-216">它會建立元件之間的鬆散結合合約，以便溝通退出要求。</span><span class="sxs-lookup"><span data-stu-id="358c3-216">It establishes a loosely-coupled contract between components in order to communicate an opt-out request.</span></span> <span data-ttu-id="358c3-217">變更現有的功能時，此功能通常特別重要。</span><span class="sxs-lookup"><span data-stu-id="358c3-217">This capability is typically important when a change is made to existing functionality.</span></span> <span data-ttu-id="358c3-218">相反地，已經有新功能的隱含選擇加入。</span><span class="sxs-lookup"><span data-stu-id="358c3-218">Conversely, there is already an implicit opt-in for new functionality.</span></span>  
  
 <span data-ttu-id="358c3-219">Common language runtime 會自動填入參數指派給<xref:System.AppContext>藉由讀取登錄和應用程式的組態檔的執行個體。</span><span class="sxs-lookup"><span data-stu-id="358c3-219">The common language runtime automatically populates the switches assigned to an <xref:System.AppContext> instance by reading the registry and the application's configuration file.</span></span> <span data-ttu-id="358c3-220">然後可以覆寫這些參數的值，並加入新的參數，藉由呼叫<xref:System.AppContext.SetSwitch%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="358c3-220">The value of these switches can then be overridden, and new switches added, by calling the <xref:System.AppContext.SetSwitch%2A> method.</span></span>  
  
 <span data-ttu-id="358c3-221">呼叫程式庫<xref:System.AppContext.TryGetSwitch%2A>檢查其取用者是否已宣告參數的值，然後執行適當的動作上的方法。</span><span class="sxs-lookup"><span data-stu-id="358c3-221">A library calls the <xref:System.AppContext.TryGetSwitch%2A> method to check whether its consumers have declared the value of the switch and then act appropriately on it.</span></span>  <span data-ttu-id="358c3-222">預設情況下，如果未定義的參數，就會啟用新功能...</span><span class="sxs-lookup"><span data-stu-id="358c3-222">By default, if the switch is not defined, the new functionality is enabled..</span></span> <span data-ttu-id="358c3-223">如果定義參數，且其值為`false`，也會啟用新功能。</span><span class="sxs-lookup"><span data-stu-id="358c3-223">If the switch is defined and its value is `false`, the new functionality is also enabled.</span></span> <span data-ttu-id="358c3-224">如果其值為`true`，已啟用舊版行為。</span><span class="sxs-lookup"><span data-stu-id="358c3-224">If its value is `true`, the legacy behavior is enabled.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="358c3-225">下列範例會決定文件庫的取用者是否已設定名為的交換器`Switch.AmazingLib.ThrowOnException`。</span><span class="sxs-lookup"><span data-stu-id="358c3-225">The following example determines whether a library consumer has set a switch named `Switch.AmazingLib.ThrowOnException`.</span></span>  
  
 [!code-csharp[System.AppContext.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/TestValue1.cs#2)]
 [!code-vb[System.AppContext.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/TestValue1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="358c3-226"><paramref name="switchName" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="358c3-226"><paramref name="switchName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="358c3-227"><paramref name="switchName" /> 為 <see cref="F:System.String.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="358c3-227"><paramref name="switchName" /> is <see cref="F:System.String.Empty" />.</span></span></exception>
        <altmember cref="M:System.AppContext.SetSwitch(System.String,System.Boolean)" />
      </Docs>
    </Member>
  </Members>
</Type>