<Type Name="FlagsAttribute" FullName="System.FlagsAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="97615c0cc55673df4c0518c94f836c20ffcbede4" />
    <Meta Name="ms.sourcegitcommit" Value="c0c07dbd19cd7017243f9ac36915755f79bc8da6" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="11/27/2018" />
    <Meta Name="ms.locfileid" Value="52376266" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class FlagsAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit FlagsAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.FlagsAttribute" />
  <TypeSignature Language="VB.NET" Value="Public Class FlagsAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class FlagsAttribute : Attribute" />
  <TypeSignature Language="F#" Value="type FlagsAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Enum, Inherited=false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>指出可將列舉視為位元欄位，也就是一組旗標。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 位元欄位通常用於清單的項目可能會出現在組合，而列舉常數通常用於互斥項目的清單。 因此，位元欄位的設計而不是列舉的常數結合以產生未命名的值的位元 OR 運算。 語言差異在相較於列舉常數的位元欄位使用。  
  
## <a name="attributes-of-the-flagsattribute"></a>FlagsAttribute 屬性  
 <xref:System.AttributeUsageAttribute> 套用至這個類別中，並將其<xref:System.AttributeUsageAttribute.Inherited%2A>屬性會指定`false`。 這個屬性只能套用至列舉。  
  
## <a name="guidelines-for-flagsattribute-and-enum"></a>Flagsattribute 標記列舉和列舉的指導方針  
  
-   使用<xref:System.FlagsAttribute>列舉只有位元運算 (AND、 OR、 互斥 OR) 是一個數字值上執行的自訂屬性。  
  
-   定義列舉常數乘冪數，也就是 1、 2、 4、 8 和等等。 這表示在結合的列舉常數的個別旗標不會重疊。  
  
-   請考慮建立列舉的常數常使用的旗標組合。 比方說，如果您有用於檔案 I/O 作業的列舉，包含列舉的常數`Read = 1`並`Write = 2`，請考慮建立的列舉的常數`ReadWrite = Read OR Write`，哪一個結合`Read`和`Write`旗標。 此外，用來結合旗標的位元 OR 運算可能被視為一個進階的概念，在某些情況下，應該不需要簡單的工作。  
  
-   如果您將定義為負數為旗標的列舉常數，因為許多旗標的位置可能會設定為 1，這可能會讓人混淆的程式碼，並鼓勵編碼錯誤，請務必小心。  
  
-   便利的方式來測試是否已設定旗標的數值是執行之間的數值和旗標列舉的常數，可設定為零的旗標未對應的數字值的所有位元的位元 AND 運算然後測試該作業的結果是否等於旗標的列舉常數。  
  
-   使用`None`旗標名稱列舉其值為零的常數。 您無法使用`None`中來測試旗標，因為結果一律為零的位元 AND 運算的列舉的常數。 不過，您可以執行的邏輯不數值之間的位元、 比較和`None`列舉的常數，以判斷是否已設定在數值中的任何位元。  
  
     如果您建立而不是旗標列舉值列舉型別，它是值得建立`None`列舉的常數。 原因是預設的列舉型別所使用的記憶體初始化為零的通用語言執行平台。 因此，如果您沒有定義其值為零的常數，列舉會包含不合法的值建立時。  
  
     如果您的應用程式需要代表的明顯的預設案例，請考慮使用其值為零表示預設值的列舉的常數。 如果沒有任何預設的情況，請考慮使用其值為零的列舉的常數表示的情況下，未表示的任何其他的列舉常數。  
  
-   未定義的列舉值，只是要鏡像的列舉型別本身的狀態。 例如，未定義列舉的常數，只是標記的列舉結尾。 如果您需要判斷列舉的最後一個值，請明確檢查該值。 此外，您可以執行進行範圍檢查的第一個和最後一個列舉的常數，如果範圍內的所有值都都有效。  
  
-   未指定保留供未來使用的列舉的常數。  
  
-   當您定義的方法或屬性會做為值的列舉的常數時，請考慮驗證此值。 原因是，您就可以轉換數值列舉類型，即使在列舉中未定義該數字的值。  
  
   
  
## Examples  
 下列範例示範如何將`FlagsAttribute`屬性，並顯示上的作用<xref:System.Enum.ToString%2A>方法使用`FlagsAttribute`上<xref:System.Enum>宣告。  
  
 [!code-cpp[System.FlagsAttribute#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.FlagsAttribute/CPP/flags.cpp#1)]
 [!code-csharp[System.FlagsAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.FlagsAttribute/CS/flags.cs#1)]
 [!code-vb[System.FlagsAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.FlagsAttribute/VB/flags.vb#1)]  
  
 下列範例會定義兩個色彩相關的列舉`SingleHue`和`MultiHue`。 而後者則擁有`FlagsAttribute`屬性; 前者則否。 當範圍的整數，包括不代表基礎值的列舉型別，則會轉換為列舉型別和其顯示的字串表示法時，範例會示範行為的差異。   比方說，請注意，無法做為以 3`SingleHue`值，因為 3 不是基礎值的任何`SingleHue`成員，而`FlagsAttribute`屬性可讓您為 3 表示`MultiHue`的值`Black, Red`。  
  
 [!code-cpp[System.FlagsAttribute#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.FlagsAttribute/CPP/flags1.cpp#2)]
 [!code-csharp[System.FlagsAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.FlagsAttribute/CS/flags1.cs#2)]
 [!code-vb[System.FlagsAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.FlagsAttribute/VB/flags1.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FlagsAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.FlagsAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FlagsAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.FlagsAttribute" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列範例會定義`PhoneService`列舉，代表表單的電話公司所提供的通訊。 它初始化三個變數，表示服務提供給三個不同的家庭，那麼會指出哪一個家庭有沒有服務時，哪一個家庭有只有行動電話服務，而哪些家庭有行動電話和 land 行服務。 最後，它會隱含呼叫<xref:System.Enum.ToString%28System.String%29?displayProperty=nameWithType>方法，以顯示服務提供給每個家庭成員的類型。  
  
 [!code-cpp[System.FlagsAttribute#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.FlagsAttribute/CPP/flags1.cpp#2)]
 [!code-csharp[System.FlagsAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.FlagsAttribute/CS/flags1.cs#2)]
 [!code-vb[System.FlagsAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.FlagsAttribute/VB/flags1.vb#2)]  
  
 下列範例示範如何將`FlagsAttribute`屬性，並顯示上的作用<xref:System.Enum.ToString%2A>方法使用`FlagsAttribute`上<xref:System.Enum>宣告。  
  
 [!code-cpp[System.FlagsAttribute#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.FlagsAttribute/CPP/flags.cpp#1)]
 [!code-csharp[System.FlagsAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.FlagsAttribute/CS/flags.cs#1)]
 [!code-vb[System.FlagsAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.FlagsAttribute/VB/flags.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>