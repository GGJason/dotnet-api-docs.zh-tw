<Type Name="ICustomFormatter" FullName="System.ICustomFormatter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="440e566843bd8a6f7aa2849b29bdd2300c580fd1" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39853293" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface ICustomFormatter" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ICustomFormatter" />
  <TypeSignature Language="DocId" Value="T:System.ICustomFormatter" />
  <TypeSignature Language="VB.NET" Value="Public Interface ICustomFormatter" />
  <TypeSignature Language="C++ CLI" Value="public interface class ICustomFormatter" />
  <TypeSignature Language="F#" Value="type ICustomFormatter = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="19738-101">定義可支援物件值之自訂格式的方法。</span>
      <span class="sxs-lookup">
        <span data-stu-id="19738-101">Defines a method that supports custom formatting of the value of an object.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19738-102"><xref:System.ICustomFormatter>介面會包含單一方法<xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="19738-102">The <xref:System.ICustomFormatter> interface includes a single method, <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="19738-103">當參考或實值型別，會實作這個介面<xref:System.ICustomFormatter.Format%2A>方法會傳回物件的值的自訂格式的字串表示。</span><span class="sxs-lookup"><span data-stu-id="19738-103">When this interface is implemented by a reference or value type, the <xref:System.ICustomFormatter.Format%2A> method returns a custom-formatted string representation of an object's value.</span></span>  
  
 <span data-ttu-id="19738-104">通常<xref:System.ICustomFormatter>介面透過實作<xref:System.IFormatProvider>介面，以自訂行為的兩個.NET Framework 複合字串格式化方法包含<xref:System.IFormatProvider>參數。</span><span class="sxs-lookup"><span data-stu-id="19738-104">Typically, the <xref:System.ICustomFormatter> interface is implemented with the <xref:System.IFormatProvider> interface to customize the behavior of two .NET Framework composite string formatting methods that include an <xref:System.IFormatProvider> parameter.</span></span> <span data-ttu-id="19738-105">具體而言，<xref:System.ICustomFormatter>介面可以提供自訂格式的值傳遞至物件<xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>和<xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="19738-105">Specifically, the <xref:System.ICustomFormatter> interface can provide custom formatting of the value of an object passed to the <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> and <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> methods.</span></span>  
  
 <span data-ttu-id="19738-106">提供自訂的物件值的表示，需要您下列：</span><span class="sxs-lookup"><span data-stu-id="19738-106">Providing a custom representation of an object's value requires that you do the following:</span></span>  
  
1.  <span data-ttu-id="19738-107">定義類別可實作<xref:System.ICustomFormatter>介面和其單一的成員，<xref:System.ICustomFormatter.Format%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="19738-107">Define a class that implements the <xref:System.ICustomFormatter> interface and its single member, the <xref:System.ICustomFormatter.Format%2A> method.</span></span>  
  
2.  <span data-ttu-id="19738-108">定義類別可實作<xref:System.IFormatProvider>介面和其單一的成員，<xref:System.IFormatProvider.GetFormat%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="19738-108">Define a class that implements the <xref:System.IFormatProvider> interface and its single member, the <xref:System.IFormatProvider.GetFormat%2A> method.</span></span> <span data-ttu-id="19738-109"><xref:System.IFormatProvider.GetFormat%2A>方法傳回的執行個體您<xref:System.ICustomFormatter>實作。</span><span class="sxs-lookup"><span data-stu-id="19738-109">The <xref:System.IFormatProvider.GetFormat%2A> method returns an instance of your <xref:System.ICustomFormatter> implementation.</span></span> <span data-ttu-id="19738-110">通常，單一類別會實作<xref:System.ICustomFormatter>和<xref:System.IFormatProvider>。</span><span class="sxs-lookup"><span data-stu-id="19738-110">Often, a single class implements both <xref:System.ICustomFormatter> and <xref:System.IFormatProvider>.</span></span> <span data-ttu-id="19738-111">在此情況下，類別的`GetFormat`實作只會傳回本身的執行個體。</span><span class="sxs-lookup"><span data-stu-id="19738-111">In that case, the class's `GetFormat` implementation just returns an instance of itself.</span></span>  
  
3.  <span data-ttu-id="19738-112">傳遞<xref:System.IFormatProvider>實作做`provider`引數<xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>方法或類似的方法。</span><span class="sxs-lookup"><span data-stu-id="19738-112">Pass the <xref:System.IFormatProvider> implementation as the `provider` argument of the <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> method or a comparable method.</span></span>  
  
 <span data-ttu-id="19738-113">.NET Framework 方法接著會使用您的自訂格式設定而不它自己。</span><span class="sxs-lookup"><span data-stu-id="19738-113">The .NET Framework method will then use your custom formatting instead of its own.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="19738-114">下列範例會實作<xref:System.ICustomFormatter>允許二進位、 八進位和十六進位格式的整數值。</span><span class="sxs-lookup"><span data-stu-id="19738-114">The following example implements <xref:System.ICustomFormatter> to allow binary, octal, and hexadecimal formatting of integral values.</span></span> <span data-ttu-id="19738-115">在此範例中，單一類別， `IBinaryFormatter`，會實作<xref:System.ICustomFormatter>和<xref:System.IFormatProvider>。</span><span class="sxs-lookup"><span data-stu-id="19738-115">In this example, a single class, `IBinaryFormatter`, implements both <xref:System.ICustomFormatter> and <xref:System.IFormatProvider>.</span></span> <span data-ttu-id="19738-116">其<xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType>方法會判斷是否`formatType`參數代表<xref:System.ICustomFormatter>型別。</span><span class="sxs-lookup"><span data-stu-id="19738-116">Its <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> method determines whether the `formatType` parameter represents an <xref:System.ICustomFormatter> type.</span></span> <span data-ttu-id="19738-117">若是如此，請`BinaryFormatter`傳回的執行個體本身; 否則它會傳回`null`。</span><span class="sxs-lookup"><span data-stu-id="19738-117">If it does, `BinaryFormatter` returns an instance of itself; otherwise, it returns `null`.</span></span> <span data-ttu-id="19738-118">其<xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType>實作會判定 format 參數是否為其中的三個支援的格式字串 ("B"的二進位檔，"O"的八進位和"H"的十六進位) 和格式`arg`參數適當。</span><span class="sxs-lookup"><span data-stu-id="19738-118">Its <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> implementation determines whether the format parameter is one of the three supported format strings ("B" for binary, "O" for octal, and "H" for hexadecimal) and formats the `arg` parameter appropriately.</span></span> <span data-ttu-id="19738-119">否則，如果`arg`不是`null`，它會呼叫`arg`參數的<xref:System.IFormattable.ToString%2A?displayProperty=nameWithType>實作中，如果有的話，或其無參數`ToString`方法，如果其中一則否。</span><span class="sxs-lookup"><span data-stu-id="19738-119">Otherwise, if `arg` is not `null`, it calls the `arg` parameter's <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> implementation, if one exists, or its parameterless `ToString` method, if one does not.</span></span> <span data-ttu-id="19738-120">如果 `arg` 是 `null`，則方法會傳回 <xref:System.String.Empty?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="19738-120">If `arg` is `null`, the method returns <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[System.ICustomFormatter.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#1)]
 [!code-vb[System.ICustomFormatter.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#1)]  
  
 <span data-ttu-id="19738-121">`BinaryFormatter` 然後可以用來提供自訂的格式，藉由傳遞`BinaryFormatter`物件做`provider`參數<xref:System.String.Format%2A>方法，如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="19738-121">`BinaryFormatter` can then be used to provide custom formatting by passing a `BinaryFormatter` object as the `provider` parameter of the <xref:System.String.Format%2A> method, as the following example shows.</span></span>  
  
 [!code-csharp[System.ICustomFormatter.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#2)]
 [!code-vb[System.ICustomFormatter.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#2)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <span data-ttu-id="19738-122">
        <para>Common language runtime 會嘗試使用您<see cref="T:System.ICustomFormatter" />實作複合格式字串中的每個格式項目。如此一來，您應該預期您<see cref="T:System.ICustomFormatter" />實作會呼叫以提供格式化服務物件或它的值不是設計來處理。在這些情況下，您<see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" />方法必須呼叫適當的格式化方法，該物件或值。有兩種類型的<see cref="T:System.ICustomFormatter" />實作： 內建和擴充功能。內建函式的實作都是提供應用程式定義物件的自訂格式的實作。在此情況下，您的實作應該包含下列:-定義物件的格式設定的格式字串的定義。格式字串是選擇性的。一般而言，"G"或"g"格式字串會定義一般的 （或最常使用的） 格式。不過，您可以自由定義任何您選擇的格式字串。您也可以自行決定它們是否區分大小寫或不區分大小寫的。 -測試，以確保物件的型別傳遞至您<see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" />方法是您應用程式定義的類型。如果不是，您應該呼叫物件的<see cref="T:System.IFormattable" />實作中，如果有的話，或其<see cref="M:System.Object.ToString" />方法，如果沒有。您應該準備好處理這些方法呼叫可能會擲回任何例外狀況。 -處理 null 的格式字串，如果您的實作支援格式字串的程式碼。最常見的方法是使用一般格式規範取代為 null 的格式字串。 -程式碼來處理您的實作支援的任何格式字串。 -程式碼來處理不支援的格式字串。最常見的方法是將會擲回<see cref="T:System.FormatException" />，雖然您可以提供預設格式。延伸模組實作都是已格式化支援型別提供自訂格式的實作。例如，您可以定義<c>CustomerNumberFormatter</c>格式化以特定的數字之間的連字號的整數類資料類型。在此情況下，您的實作應該包含下列:-定義的擴充物件的格式設定的格式字串。這些格式字串是必要的但它們必須與現有格式字串的類型衝突。比方說，如果您在擴充格式的<see cref="T:System.Int32" />類型，您不應該實作"C"、"D"、"E"、"F"和"G"格式規範，其他項目。 -物件的型別傳遞至測試您<see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" />方法是其格式設定您的延伸模組支援的類型。如果不是，呼叫物件的<see cref="T:System.IFormattable" />實作中，如果有的話，或物件的無參數<see cref="M:System.Object.ToString" />方法，如果沒有。您應該準備好處理這些方法呼叫可能會擲回任何例外狀況。 -程式碼來處理您的延伸模組支援的任何格式字串。 -程式碼來處理您的延伸模組不支援的任何格式字串。這些應該傳遞至型別的<see cref="T:System.IFormattable" />實作。您應該準備好處理這些方法呼叫可能會擲回任何例外狀況。</para>
      </span>
      <span class="sxs-lookup">
        <span data-stu-id="19738-122">
          <para>The common language runtime attempts to use your <see cref="T:System.ICustomFormatter" /> implementation for every format item in a composite format string. As a result, you should expect that your <see cref="T:System.ICustomFormatter" /> implementation will be called to provide formatting services to objects or values that it is not designed to handle. In these cases, your <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> method must call the appropriate formatting method for that object or value.  There are two kinds of <see cref="T:System.ICustomFormatter" /> implementations: intrinsic and extension.  Intrinsic implementations are implementations that provide custom formatting for an application-defined object. In this case, your implementation should include the following:  -   A definition of format strings that define the formatting of the object. Format strings are optional. Typically, a "G" or "g" format string defines the general (or most commonly used) format. However, you are free to define any format strings that you choose. You are also free to decide whether they are case-sensitive or case-insensitive.  -   A test to ensure that the type of the object passed to your <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> method is your application-defined type. If it is not, you should call the object's <see cref="T:System.IFormattable" /> implementation, if one exists, or its <see cref="M:System.Object.ToString" /> method, if it does not. You should be prepared to handle any exceptions these method calls might throw.  -   Code to handle a null format string, if your implementation supports format strings. The most common approach is to replace a null format string with the general format specifier.  -   Code to handle any format strings that your implementation supports.  -   Code to handle format strings that you do not support. The most common approach is to throw a <see cref="T:System.FormatException" />, although you can provide default formatting.  Extension implementations are implementations that provide custom formatting for a type that already has formatting support. For example, you could define a <c>CustomerNumberFormatter</c> that formats an integral type with hyphens between specific digits. In this case, your implementation should include the following:  -   A definition of format strings that extend the formatting of the object. These format strings are required, but they must not conflict with the type's existing format strings. For example, if you are extending formatting for the <see cref="T:System.Int32" /> type, you should not implement the "C", "D", "E", "F", and "G" format specifiers, among others.  -   A test that the type of the object passed to your <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> method is a type whose formatting your extension supports. If it is not, call the object's <see cref="T:System.IFormattable" /> implementation, if one exists, or the object's parameterless <see cref="M:System.Object.ToString" /> method, if it does not. You should be prepared to handle any exceptions these method calls might throw.  -   Code to handle any format strings that your extension supports.  -   Code to handle any format strings that your extension does not support. These should be passed on to the type's <see cref="T:System.IFormattable" /> implementation. You should be prepared to handle any exceptions these method calls might throw.</para>
        </span>
      </span>
    </block>
    <altmember cref="T:System.IFormatProvider" />
  </Docs>
  <Members>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public string Format (string format, object arg, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Format(string format, object arg, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function Format (format As String, arg As Object, formatProvider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Format(System::String ^ format, System::Object ^ arg, IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="abstract member Format : string * obj * IFormatProvider -&gt; string" Usage="iCustomFormatter.Format (format, arg, formatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">
          <span data-ttu-id="19738-123">包含格式規格的格式字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="19738-123">A format string containing formatting specifications.</span>
          </span>
        </param>
        <param name="arg">
          <span data-ttu-id="19738-124">要格式化的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="19738-124">An object to format.</span>
          </span>
        </param>
        <param name="formatProvider">
          <span data-ttu-id="19738-125">提供關於目前執行個體之格式資訊的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="19738-125">An object that supplies format information about the current instance.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="19738-126">使用指定的格式和特定文化特性的格式資訊，將指定物件的值轉換為相等的字串表示。</span>
          <span class="sxs-lookup">
            <span data-stu-id="19738-126">Converts the value of a specified object to an equivalent string representation using specified format and culture-specific formatting information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="19738-127">
            <paramref name="arg" /> 值的字串表示，由 <paramref name="format" /> 和 <paramref name="formatProvider" /> 根據指示格式化。</span>
          <span class="sxs-lookup">
            <span data-stu-id="19738-127">The string representation of the value of <paramref name="arg" />, formatted as specified by <paramref name="format" /> and <paramref name="formatProvider" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19738-128"><xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> 是一種回呼方法。</span><span class="sxs-lookup"><span data-stu-id="19738-128"><xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> is a callback method.</span></span> <span data-ttu-id="19738-129">它由支援自訂格式，例如方法呼叫<xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>或<xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="19738-129">It is called by a method that supports custom formatting, such as <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> or <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>.</span></span> <span data-ttu-id="19738-130">實作會針對每個格式項目，在呼叫一次[複合格式字串](~/docs/standard/base-types/composite-formatting.md)。</span><span class="sxs-lookup"><span data-stu-id="19738-130">The implementation is called once for each format item in a [composite format string](~/docs/standard/base-types/composite-formatting.md).</span></span> <span data-ttu-id="19738-131">例如，在下列陳述式，<xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType>三次呼叫方法。</span><span class="sxs-lookup"><span data-stu-id="19738-131">For example, in the following statement, the <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> method is called three times.</span></span>  
  
 [!code-csharp[System.ICustomFormatter.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#4)]
 [!code-vb[System.ICustomFormatter.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#4)]  
  
 <span data-ttu-id="19738-132">`arg`參數是以零為起始位置對應至特定的格式項目的索引的物件清單中的物件。</span><span class="sxs-lookup"><span data-stu-id="19738-132">The `arg` parameter is the object in the object list whose zero-based position corresponds to the index of a particular format item.</span></span>  
  
 <span data-ttu-id="19738-133">`format`參數包含格式字串，也就是`formatString`格式項目的元件。</span><span class="sxs-lookup"><span data-stu-id="19738-133">The `format` parameter contains a format string, which is the `formatString` component of a format item.</span></span> <span data-ttu-id="19738-134">如果格式項目沒有`formatString`元件，值`format`是`null`。</span><span class="sxs-lookup"><span data-stu-id="19738-134">If the format item has no `formatString` component, the value of `format` is `null`.</span></span> <span data-ttu-id="19738-135">如果`format`已`null`上的類型，取決於`arg`，您可以使用您選擇的預設格式規格。</span><span class="sxs-lookup"><span data-stu-id="19738-135">If `format` is `null`, depending on the type of `arg`, you may be able to use the default format specification of your choice.</span></span>  
  
 <span data-ttu-id="19738-136">`formatProvider`參數是<xref:System.IFormatProvider>實作，提供格式`arg`。</span><span class="sxs-lookup"><span data-stu-id="19738-136">The `formatProvider` parameter is the <xref:System.IFormatProvider> implementation that provides formatting for `arg`.</span></span> <span data-ttu-id="19738-137">一般來說，這是執行個體您<xref:System.ICustomFormatter>實作。</span><span class="sxs-lookup"><span data-stu-id="19738-137">Typically, it is an instance of your <xref:System.ICustomFormatter> implementation.</span></span> <span data-ttu-id="19738-138">如果`formatProvider`是`null`，略過該參數。</span><span class="sxs-lookup"><span data-stu-id="19738-138">If `formatProvider` is `null`, ignore that parameter.</span></span>  
  
 <span data-ttu-id="19738-139">實作<xref:System.ICustomFormatter.Format%2A>方法必須包含下列功能，因此.NET Framework 才能提供的格式不支援。</span><span class="sxs-lookup"><span data-stu-id="19738-139">Your implementation of the <xref:System.ICustomFormatter.Format%2A> method must include the following functionality so the .NET Framework can provide formatting you do not support.</span></span> <span data-ttu-id="19738-140">如果您格式的方法不支援的格式，判斷是否物件正在格式化實作<xref:System.IFormattable>介面。</span><span class="sxs-lookup"><span data-stu-id="19738-140">If your format method does not support a format, determine whether the object being formatted implements the <xref:System.IFormattable> interface.</span></span> <span data-ttu-id="19738-141">如果它存在，叫用<xref:System.IFormattable.ToString%2A?displayProperty=nameWithType>該介面的方法。</span><span class="sxs-lookup"><span data-stu-id="19738-141">If it does, invoke the <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> method of that interface.</span></span> <span data-ttu-id="19738-142">否則，叫用預設<xref:System.Object.ToString%2A?displayProperty=nameWithType>基礎物件的方法。</span><span class="sxs-lookup"><span data-stu-id="19738-142">Otherwise, invoke the default <xref:System.Object.ToString%2A?displayProperty=nameWithType> method of the underlying object.</span></span> <span data-ttu-id="19738-143">下列程式碼會示範這個模式。</span><span class="sxs-lookup"><span data-stu-id="19738-143">The following code illustrates this pattern.</span></span>  
  
 [!code-csharp[System.ICustomFormatter.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#3)]
 [!code-vb[System.ICustomFormatter.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#3)]  
  
   
  
## Examples  
 <span data-ttu-id="19738-144">下列範例會實作<xref:System.ICustomFormatter>允許二進位、 八進位和十六進位格式的整數值。</span><span class="sxs-lookup"><span data-stu-id="19738-144">The following example implements <xref:System.ICustomFormatter> to allow binary, octal, and hexadecimal formatting of integral values.</span></span> <span data-ttu-id="19738-145">其<xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType>實作會判定 format 參數是否為其中的三個支援的格式字串 ("B"的二進位檔，"O"的八進位和"H"的十六進位) 和格式`arg`參數適當。</span><span class="sxs-lookup"><span data-stu-id="19738-145">Its <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> implementation determines whether the format parameter is one of the three supported format strings ("B" for binary, "O" for octal, and "H" for hexadecimal) and formats the `arg` parameter appropriately.</span></span> <span data-ttu-id="19738-146">否則，如果`arg`不是`null`，它會呼叫`arg`參數的<xref:System.IFormattable.ToString%2A?displayProperty=nameWithType>實作中，如果有的話，或其無參數`ToString`方法，如果其中一則否。</span><span class="sxs-lookup"><span data-stu-id="19738-146">Otherwise, if `arg` is not `null`, it calls the `arg` parameter's <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> implementation, if one exists, or its parameterless `ToString` method, if one does not.</span></span> <span data-ttu-id="19738-147">如果 `arg` 是 `null`，則方法會傳回 <xref:System.String.Empty?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="19738-147">If `arg` is `null`, the method returns <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[System.ICustomFormatter.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#1)]
 [!code-vb[System.ICustomFormatter.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#1)]  
  
 <span data-ttu-id="19738-148">`BinaryFormatter` 然後可以用來提供自訂的格式，藉由傳遞`BinaryFormatter`物件做`provider`參數<xref:System.String.Format%2A>方法，如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="19738-148">`BinaryFormatter` can then be used to provide custom formatting by passing a `BinaryFormatter` object as the `provider` parameter of the <xref:System.String.Format%2A> method, as the following example shows.</span></span>  
  
 [!code-csharp[System.ICustomFormatter.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#2)]
 [!code-vb[System.ICustomFormatter.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IFormattable" />
      </Docs>
    </Member>
  </Members>
</Type>