<Type Name="ICustomFormatter" FullName="System.ICustomFormatter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f54e2e84e8387855c2add6a214afa57814e391c3" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36431010" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface ICustomFormatter" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ICustomFormatter" />
  <TypeSignature Language="DocId" Value="T:System.ICustomFormatter" />
  <TypeSignature Language="VB.NET" Value="Public Interface ICustomFormatter" />
  <TypeSignature Language="C++ CLI" Value="public interface class ICustomFormatter" />
  <TypeSignature Language="F#" Value="type ICustomFormatter = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Defines a method that supports custom formatting of the value of an object.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ICustomFormatter>介面包含單一方法<xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType>。 當此介面由參考或值的類型，實作<xref:System.ICustomFormatter.Format%2A>方法會傳回物件的值的自訂格式字串表示。  
  
 一般而言，<xref:System.ICustomFormatter>與實作介面<xref:System.IFormatProvider>介面可自訂的兩個.NET Framework 複合字串格式方法包含行為<xref:System.IFormatProvider>參數。 具體來說，<xref:System.ICustomFormatter>介面可以提供自訂格式的物件傳遞給值<xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>和<xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>方法。  
  
 提供的自訂物件的值表示需要您下列：  
  
1.  定義類別可實作<xref:System.ICustomFormatter>介面和其單一成員，<xref:System.ICustomFormatter.Format%2A>方法。  
  
2.  定義類別可實作<xref:System.IFormatProvider>介面和其單一成員，<xref:System.IFormatProvider.GetFormat%2A>方法。 <xref:System.IFormatProvider.GetFormat%2A>方法傳回的執行個體您<xref:System.ICustomFormatter>實作。 通常，單一類別同時實作<xref:System.ICustomFormatter>和<xref:System.IFormatProvider>。 在此情況下，類別的`GetFormat`實作只會傳回本身的執行個體。  
  
3.  傳遞<xref:System.IFormatProvider>實作做為`provider`引數的<xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>方法或類似的方法。  
  
 .NET Framework 方法就會使用您的自訂格式設定而非其本身。  
  
   
  
## Examples  
 下列範例會實作<xref:System.ICustomFormatter>允許二進位、 八進位和十六進位格式的整數值。 在此範例中，單一類別， `IBinaryFormatter`，同時實作<xref:System.ICustomFormatter>和<xref:System.IFormatProvider>。 其<xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType>方法會判斷是否`formatType`參數代表<xref:System.ICustomFormatter>型別。 若是如此，`BinaryFormatter`傳回的執行個體本身; 否則它會傳回`null`。 其<xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType>實作可讓您判斷格式參數是否為其中一個三個支援的格式字串 ("B"的二進位檔，"O"的八進位和十六進位的"H") 和格式`arg`參數適當地。 否則，如果`arg`不`null`，它會呼叫`arg`參數的<xref:System.IFormattable.ToString%2A?displayProperty=nameWithType>實作中，如果有的話，或其無參數`ToString`方法，如果其中一個不存在。 如果 `arg` 是 `null`，則方法會傳回 <xref:System.String.Empty?displayProperty=nameWithType>。  
  
 [!code-csharp[System.ICustomFormatter.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#1)]
 [!code-vb[System.ICustomFormatter.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#1)]  
  
 `BinaryFormatter` 然後可以用來提供自訂格式，藉由傳遞`BinaryFormatter`物件當做`provider`參數<xref:System.String.Format%2A>方法，如下列範例所示。  
  
 [!code-csharp[System.ICustomFormatter.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#2)]
 [!code-vb[System.ICustomFormatter.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#2)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Common language runtime 會嘗試使用您<see cref="T:System.ICustomFormatter" />實作複合格式字串中的每個格式項目。如此一來，您應該預期您<see cref="T:System.ICustomFormatter" />實作會呼叫以提供格式化服務物件或它的值不是設計來處理。在這些情況下，您<see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" />方法必須為該物件或值呼叫的適當格式化的方法。有兩種類型的<see cref="T:System.ICustomFormatter" />實作： 內建函式和副檔名。應用程式定義的物件提供自訂格式的實作已內建函式的實作。在此情況下，您的實作應該包含下列:-定義物件的格式設定的格式字串的定義。格式字串是選擇性的。一般而言，"G"或"g"格式字串會定義一般 （或最常使用） 的格式。不過，您可用來定義您所選擇的任何格式字串。您也可以自由決定它們是否區分大小寫或不區分大小寫。 -測試以確保物件的型別傳遞至您<see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" />方法是您應用程式定義的類型。如果不是，您應該呼叫物件的<see cref="T:System.IFormattable" />實作中，如果有的話，或其<see cref="M:System.Object.ToString" />方法，如果不存在。您應該準備處理這些方法呼叫可能會擲回任何例外狀況。 程式碼來處理 null 的格式字串，如果您的實作支援格式字串。最常見的方法是使用一般格式規範取代 null 格式字串。 -程式碼來處理您的實作所支援的任何格式字串。 -程式碼來處理不支援的格式字串。最常見的方法會擲回<see cref="T:System.FormatException" />，不過您可以提供預設格式。延伸項目實作所實作，以提供自訂格式的已使用格式支援的型別。例如，您可以定義<c>CustomerNumberFormatter</c>格式化具有特定的數字之間的連字號的整數類資料型別。在此情況下，您的實作應該包含下列:-定義的擴充物件的格式設定的格式字串。這些格式字串是必要項目，但它們必須與現有格式字串的型別不衝突。比方說，如果您在擴充格式的<see cref="T:System.Int32" />類型，您不應該實作"C"、"D"、"E"、"F"和"G"格式規範，和其他項目。 -物件的類型傳遞給測試您<see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" />方法是格式化您的延伸模組支援的類型。如果不是，呼叫物件的<see cref="T:System.IFormattable" />實作中，如果有的話，或物件的無參數<see cref="M:System.Object.ToString" />方法，如果不存在。您應該準備處理這些方法呼叫可能會擲回任何例外狀況。 -程式碼來處理您的延伸模組支援的任何格式字串。 -程式碼來處理您的擴充功能不支援任何格式字串。這些應該傳遞至型別的<see cref="T:System.IFormattable" />實作。您應該準備處理這些方法呼叫可能會擲回任何例外狀況。</para>
    </block>
    <altmember cref="T:System.IFormatProvider" />
  </Docs>
  <Members>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public string Format (string format, object arg, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Format(string format, object arg, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function Format (format As String, arg As Object, formatProvider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Format(System::String ^ format, System::Object ^ arg, IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="abstract member Format : string * obj * IFormatProvider -&gt; string" Usage="iCustomFormatter.Format (format, arg, formatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">A format string containing formatting specifications.</param>
        <param name="arg">An object to format.</param>
        <param name="formatProvider">An object that supplies format information about the current instance.</param>
        <summary>Converts the value of a specified object to an equivalent string representation using specified format and culture-specific formatting information.</summary>
        <returns>The string representation of the value of <paramref name="arg" />, formatted as specified by <paramref name="format" /> and <paramref name="formatProvider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> 是一種回呼方法。 呼叫此方法的方法，支援自訂格式，例如<xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>或<xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>。 實作會呼叫一次針對每個格式項目[複合格式字串](~/docs/standard/base-types/composite-formatting.md)。 例如，在下列陳述式，<xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType>方法都會呼叫三次。  
  
 [!code-csharp[System.ICustomFormatter.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#4)]
 [!code-vb[System.ICustomFormatter.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#4)]  
  
 `arg`參數是在特定的格式項目的索引以零為起始位置對應的物件清單的物件。  
  
 `format`參數會包含格式字串，這是`formatString`元件的格式項目。 如果格式項目之中未包含任何`formatString`元件、 值`format`是`null`。 如果`format`是`null`上的類型，取決於`arg`，您可以使用您所選擇的預設格式規格。  
  
 `formatProvider`參數是<xref:System.IFormatProvider>實作，提供格式`arg`。 一般來說，這是執行個體您<xref:System.ICustomFormatter>實作。 如果`formatProvider`是`null`，略過該參數。  
  
 實作<xref:System.ICustomFormatter.Format%2A>方法必須包含下列功能，讓.NET Framework 提供的格式不支援。 如果您格式的方法不支援的格式，判斷是否物件正在格式化實作<xref:System.IFormattable>介面。 如果它會叫用<xref:System.IFormattable.ToString%2A?displayProperty=nameWithType>該介面的方法。 否則，叫用預設<xref:System.Object.ToString%2A?displayProperty=nameWithType>基礎物件的方法。 下列程式碼將示範這個模式。  
  
 [!code-csharp[System.ICustomFormatter.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#3)]
 [!code-vb[System.ICustomFormatter.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#3)]  
  
   
  
## Examples  
 下列範例會實作<xref:System.ICustomFormatter>允許二進位、 八進位和十六進位格式的整數值。 其<xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType>實作可讓您判斷格式參數是否為其中一個三個支援的格式字串 ("B"的二進位檔，"O"的八進位和十六進位的"H") 和格式`arg`參數適當地。 否則，如果`arg`不`null`，它會呼叫`arg`參數的<xref:System.IFormattable.ToString%2A?displayProperty=nameWithType>實作中，如果有的話，或其無參數`ToString`方法，如果其中一個不存在。 如果 `arg` 是 `null`，則方法會傳回 <xref:System.String.Empty?displayProperty=nameWithType>。  
  
 [!code-csharp[System.ICustomFormatter.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#1)]
 [!code-vb[System.ICustomFormatter.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#1)]  
  
 `BinaryFormatter` 然後可以用來提供自訂格式，藉由傳遞`BinaryFormatter`物件當做`provider`參數<xref:System.String.Format%2A>方法，如下列範例所示。  
  
 [!code-csharp[System.ICustomFormatter.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#2)]
 [!code-vb[System.ICustomFormatter.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IFormattable" />
      </Docs>
    </Member>
  </Members>
</Type>