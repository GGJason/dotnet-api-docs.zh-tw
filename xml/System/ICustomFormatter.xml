<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ICustomFormatter.xml" source-language="en-US" target-language="zh-TW">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac56002c7bffa27e626bfd04916c139d411974b86fc.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6002c7bffa27e626bfd04916c139d411974b86fc</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ICustomFormatter">
          <source>Defines a method that supports custom formatting of the value of an object.</source>
          <target state="translated">定義可支援物件值之自訂格式的方法。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>The <ph id="ph1">&lt;xref:System.ICustomFormatter&gt;</ph> interface includes a single method, <ph id="ph2">&lt;xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ICustomFormatter&gt;</ph>介面包含單一方法<ph id="ph2">&lt;xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>When this interface is implemented by a reference or value type, the <ph id="ph1">&lt;xref:System.ICustomFormatter.Format%2A&gt;</ph> method returns a custom-formatted string representation of an object's value.</source>
          <target state="translated">當此介面由參考或值的類型，實作<ph id="ph1">&lt;xref:System.ICustomFormatter.Format%2A&gt;</ph>方法會傳回物件的值的自訂格式字串表示。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>Typically, the <ph id="ph1">&lt;xref:System.ICustomFormatter&gt;</ph> interface is implemented with the <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> interface to customize the behavior of two .NET Framework composite string formatting methods that include an <ph id="ph3">&lt;xref:System.IFormatProvider&gt;</ph> parameter.</source>
          <target state="translated">一般而言，<ph id="ph1">&lt;xref:System.ICustomFormatter&gt;</ph>與實作介面<ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph>介面可自訂的兩個.NET Framework 複合字串格式方法包含行為<ph id="ph3">&lt;xref:System.IFormatProvider&gt;</ph>參數。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>Specifically, the <ph id="ph1">&lt;xref:System.ICustomFormatter&gt;</ph> interface can provide custom formatting of the value of an object passed to the <ph id="ph2">&lt;xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType&gt;</ph> and <ph id="ph3">&lt;xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType&gt;</ph> methods.</source>
          <target state="translated">具體來說，<ph id="ph1">&lt;xref:System.ICustomFormatter&gt;</ph>介面可以提供自訂格式的物件傳遞給值<ph id="ph2">&lt;xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType&gt;</ph>和<ph id="ph3">&lt;xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>Providing a custom representation of an object's value requires that you do the following:</source>
          <target state="translated">提供的自訂物件的值表示需要您下列：</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>Define a class that implements the <ph id="ph1">&lt;xref:System.ICustomFormatter&gt;</ph> interface and its single member, the <ph id="ph2">&lt;xref:System.ICustomFormatter.Format%2A&gt;</ph> method.</source>
          <target state="translated">定義類別可實作<ph id="ph1">&lt;xref:System.ICustomFormatter&gt;</ph>介面和其單一成員，<ph id="ph2">&lt;xref:System.ICustomFormatter.Format%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>Define a class that implements the <ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph> interface and its single member, the <ph id="ph2">&lt;xref:System.IFormatProvider.GetFormat%2A&gt;</ph> method.</source>
          <target state="translated">定義類別可實作<ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph>介面和其單一成員，<ph id="ph2">&lt;xref:System.IFormatProvider.GetFormat%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>The <ph id="ph1">&lt;xref:System.IFormatProvider.GetFormat%2A&gt;</ph> method returns an instance of your <ph id="ph2">&lt;xref:System.ICustomFormatter&gt;</ph> implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IFormatProvider.GetFormat%2A&gt;</ph>方法傳回的執行個體您<ph id="ph2">&lt;xref:System.ICustomFormatter&gt;</ph>實作。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>Often, a single class implements both <ph id="ph1">&lt;xref:System.ICustomFormatter&gt;</ph> and <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph>.</source>
          <target state="translated">通常，單一類別同時實作<ph id="ph1">&lt;xref:System.ICustomFormatter&gt;</ph>和<ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>In that case, the class's <ph id="ph1">`GetFormat`</ph> implementation just returns an instance of itself.</source>
          <target state="translated">在此情況下，類別的<ph id="ph1">`GetFormat`</ph>實作只會傳回本身的執行個體。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>Pass the <ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph> implementation as the <ph id="ph2">`provider`</ph> argument of the <ph id="ph3">&lt;xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType&gt;</ph> method or a comparable method.</source>
          <target state="translated">傳遞<ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph>實作做為<ph id="ph2">`provider`</ph>引數的<ph id="ph3">&lt;xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType&gt;</ph>方法或類似的方法。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>The .NET Framework method will then use your custom formatting instead of its own.</source>
          <target state="translated">.NET Framework 方法就會使用您的自訂格式設定而非其本身。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>The following example implements <ph id="ph1">&lt;xref:System.ICustomFormatter&gt;</ph> to allow binary, octal, and hexadecimal formatting of integral values.</source>
          <target state="translated">下列範例會實作<ph id="ph1">&lt;xref:System.ICustomFormatter&gt;</ph>允許二進位、 八進位和十六進位格式的整數值。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>In this example, a single class, <ph id="ph1">`IBinaryFormatter`</ph>, implements both <ph id="ph2">&lt;xref:System.ICustomFormatter&gt;</ph> and <ph id="ph3">&lt;xref:System.IFormatProvider&gt;</ph>.</source>
          <target state="translated">在此範例中，單一類別， <ph id="ph1">`IBinaryFormatter`</ph>，同時實作<ph id="ph2">&lt;xref:System.ICustomFormatter&gt;</ph>和<ph id="ph3">&lt;xref:System.IFormatProvider&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>Its <ph id="ph1">&lt;xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType&gt;</ph> method determines whether the <ph id="ph2">`formatType`</ph> parameter represents an <ph id="ph3">&lt;xref:System.ICustomFormatter&gt;</ph> type.</source>
          <target state="translated">其<ph id="ph1">&lt;xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType&gt;</ph>方法會判斷是否<ph id="ph2">`formatType`</ph>參數代表<ph id="ph3">&lt;xref:System.ICustomFormatter&gt;</ph>型別。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>If it does, <ph id="ph1">`BinaryFormatter`</ph> returns an instance of itself; otherwise, it returns <ph id="ph2">`null`</ph>.</source>
          <target state="translated">若是如此，<ph id="ph1">`BinaryFormatter`</ph>傳回的執行個體本身; 否則它會傳回<ph id="ph2">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>Its <ph id="ph1">&lt;xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType&gt;</ph> implementation determines whether the format parameter is one of the three supported format strings ("B" for binary, "O" for octal, and "H" for hexadecimal) and formats the <ph id="ph2">`arg`</ph> parameter appropriately.</source>
          <target state="translated">其<ph id="ph1">&lt;xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType&gt;</ph>實作可讓您判斷格式參數是否為其中一個三個支援的格式字串 ("B"的二進位檔，"O"的八進位和十六進位的"H") 和格式<ph id="ph2">`arg`</ph>參數適當地。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>Otherwise, if <ph id="ph1">`arg`</ph> is not <ph id="ph2">`null`</ph>, it calls the <ph id="ph3">`arg`</ph> parameter's <ph id="ph4">&lt;xref:System.IFormattable.ToString%2A?displayProperty=nameWithType&gt;</ph> implementation, if one exists, or its parameterless <ph id="ph5">`ToString`</ph> method, if one does not.</source>
          <target state="translated">否則，如果<ph id="ph1">`arg`</ph>不<ph id="ph2">`null`</ph>，它會呼叫<ph id="ph3">`arg`</ph>參數的<ph id="ph4">&lt;xref:System.IFormattable.ToString%2A?displayProperty=nameWithType&gt;</ph>實作中，如果有的話，或其無參數<ph id="ph5">`ToString`</ph>方法，如果其中一個不存在。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>If <ph id="ph1">`arg`</ph> is <ph id="ph2">`null`</ph>, the method returns <ph id="ph3">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph1">`arg`</ph> 是 <ph id="ph2">`null`</ph>，則方法會傳回 <ph id="ph3">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source><ph id="ph1">`BinaryFormatter`</ph> can then be used to provide custom formatting by passing a <ph id="ph2">`BinaryFormatter`</ph> object as the <ph id="ph3">`provider`</ph> parameter of the <ph id="ph4">&lt;xref:System.String.Format%2A&gt;</ph> method, as the following example shows.</source>
          <target state="translated"><ph id="ph1">`BinaryFormatter`</ph> 然後可以用來提供自訂格式，藉由傳遞<ph id="ph2">`BinaryFormatter`</ph>物件當做<ph id="ph3">`provider`</ph>參數<ph id="ph4">&lt;xref:System.String.Format%2A&gt;</ph>方法，如下列範例所示。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>The common language runtime attempts to use your <ph id="ph1">&lt;see cref="T:System.ICustomFormatter" /&gt;</ph> implementation for every format item in a composite format string.</source>
          <target state="translated">Common language runtime 會嘗試使用您<ph id="ph1">&lt;see cref="T:System.ICustomFormatter" /&gt;</ph>實作複合格式字串中的每個格式項目。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>As a result, you should expect that your <ph id="ph1">&lt;see cref="T:System.ICustomFormatter" /&gt;</ph> implementation will be called to provide formatting services to objects or values that it is not designed to handle.</source>
          <target state="translated">如此一來，您應該預期您<ph id="ph1">&lt;see cref="T:System.ICustomFormatter" /&gt;</ph>實作會呼叫以提供格式化服務物件或它的值不是設計來處理。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>In these cases, your <ph id="ph1">&lt;see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /&gt;</ph> method must call the appropriate formatting method for that object or value.</source>
          <target state="translated">在這些情況下，您<ph id="ph1">&lt;see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /&gt;</ph>方法必須為該物件或值呼叫的適當格式化的方法。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>There are two kinds of <ph id="ph1">&lt;see cref="T:System.ICustomFormatter" /&gt;</ph> implementations: intrinsic and extension.</source>
          <target state="translated">有兩種類型的<ph id="ph1">&lt;see cref="T:System.ICustomFormatter" /&gt;</ph>實作： 內建函式和副檔名。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>Intrinsic implementations are implementations that provide custom formatting for an application-defined object.</source>
          <target state="translated">應用程式定義的物件提供自訂格式的實作已內建函式的實作。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>In this case, your implementation should include the following:</source>
          <target state="translated">在此情況下，您的實作應該包含下列各項：</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>A definition of format strings that define the formatting of the object.</source>
          <target state="translated">定義物件的格式設定的格式字串定義。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>Format strings are optional.</source>
          <target state="translated">格式字串是選擇性的。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>Typically, a "G" or "g" format string defines the general (or most commonly used) format.</source>
          <target state="translated">一般而言，"G"或"g"格式字串會定義一般 （或最常使用） 的格式。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>However, you are free to define any format strings that you choose.</source>
          <target state="translated">不過，您可用來定義您所選擇的任何格式字串。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>You are also free to decide whether they are case-sensitive or case-insensitive.</source>
          <target state="translated">您也可以自由決定它們是否區分大小寫或不區分大小寫。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>A test to ensure that the type of the object passed to your <ph id="ph1">&lt;see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /&gt;</ph> method is your application-defined type.</source>
          <target state="translated">測試以確保物件的型別傳遞至您<ph id="ph1">&lt;see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /&gt;</ph>方法是您應用程式定義的類型。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>If it is not, you should call the object's <ph id="ph1">&lt;see cref="T:System.IFormattable" /&gt;</ph> implementation, if one exists, or its <ph id="ph2">&lt;see cref="M:System.Object.ToString" /&gt;</ph> method, if it does not.</source>
          <target state="translated">如果不是，您應該呼叫物件的<ph id="ph1">&lt;see cref="T:System.IFormattable" /&gt;</ph>實作中，如果有的話，或其<ph id="ph2">&lt;see cref="M:System.Object.ToString" /&gt;</ph>方法，如果不存在。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>You should be prepared to handle any exceptions these method calls might throw.</source>
          <target state="translated">您應該準備處理這些方法呼叫可能會擲回任何例外狀況。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>Code to handle a null format string, if your implementation supports format strings.</source>
          <target state="translated">程式碼來處理 null 的格式字串，如果您的實作支援格式字串。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>The most common approach is to replace a null format string with the general format specifier.</source>
          <target state="translated">最常見的方法是使用一般格式規範取代 null 格式字串。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>Code to handle any format strings that your implementation supports.</source>
          <target state="translated">程式碼來處理您的實作所支援的任何格式字串。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>Code to handle format strings that you do not support.</source>
          <target state="translated">程式碼來處理不支援的格式字串。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>The most common approach is to throw a <ph id="ph1">&lt;see cref="T:System.FormatException" /&gt;</ph>, although you can provide default formatting.</source>
          <target state="translated">最常見的方法會擲回<ph id="ph1">&lt;see cref="T:System.FormatException" /&gt;</ph>，不過您可以提供預設格式。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>Extension implementations are implementations that provide custom formatting for a type that already has formatting support.</source>
          <target state="translated">延伸項目實作所實作，以提供自訂格式的已使用格式支援的型別。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>For example, you could define a <bpt id="p1">&lt;c&gt;</bpt>CustomerNumberFormatter<ept id="p1">&lt;/c&gt;</ept> that formats an integral type with hyphens between specific digits.</source>
          <target state="translated">例如，您可以定義<bpt id="p1">&lt;c&gt;</bpt>CustomerNumberFormatter<ept id="p1">&lt;/c&gt;</ept>格式化具有特定的數字之間的連字號的整數類資料型別。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>In this case, your implementation should include the following:</source>
          <target state="translated">在此情況下，您的實作應該包含下列各項：</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>A definition of format strings that extend the formatting of the object.</source>
          <target state="translated">擴充物件的格式設定的格式字串定義。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>These format strings are required, but they must not conflict with the type's existing format strings.</source>
          <target state="translated">這些格式字串是必要項目，但它們必須與現有格式字串的型別不衝突。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>For example, if you are extending formatting for the <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> type, you should not implement the "C", "D", "E", "F", and "G" format specifiers, among others.</source>
          <target state="translated">比方說，如果您在擴充格式的<ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph>類型，您不應該實作"C"、"D"、"E"、"F"和"G"格式規範，和其他項目。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>A test that the type of the object passed to your <ph id="ph1">&lt;see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /&gt;</ph> method is a type whose formatting your extension supports.</source>
          <target state="translated">物件的型別傳遞至測試您<ph id="ph1">&lt;see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /&gt;</ph>方法是格式化您的延伸模組支援的類型。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>If it is not, call the object's <ph id="ph1">&lt;see cref="T:System.IFormattable" /&gt;</ph> implementation, if one exists, or the object's parameterless <ph id="ph2">&lt;see cref="M:System.Object.ToString" /&gt;</ph> method, if it does not.</source>
          <target state="translated">如果不是，呼叫物件的<ph id="ph1">&lt;see cref="T:System.IFormattable" /&gt;</ph>實作中，如果有的話，或物件的無參數<ph id="ph2">&lt;see cref="M:System.Object.ToString" /&gt;</ph>方法，如果不存在。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>You should be prepared to handle any exceptions these method calls might throw.</source>
          <target state="translated">您應該準備處理這些方法呼叫可能會擲回任何例外狀況。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>Code to handle any format strings that your extension supports.</source>
          <target state="translated">程式碼來處理您的延伸模組支援的任何格式字串。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>Code to handle any format strings that your extension does not support.</source>
          <target state="translated">程式碼來處理您的擴充功能不支援任何格式字串。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>These should be passed on to the type's <ph id="ph1">&lt;see cref="T:System.IFormattable" /&gt;</ph> implementation.</source>
          <target state="translated">這些應該傳遞至型別的<ph id="ph1">&lt;see cref="T:System.IFormattable" /&gt;</ph>實作。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>You should be prepared to handle any exceptions these method calls might throw.</source>
          <target state="translated">您應該準備處理這些方法呼叫可能會擲回任何例外狀況。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>A format string containing formatting specifications.</source>
          <target state="translated">包含格式規格的格式字串。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>An object to format.</source>
          <target state="translated">要格式化的物件。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>An object that supplies format information about the current instance.</source>
          <target state="translated">提供關於目前執行個體之格式資訊的物件。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>Converts the value of a specified object to an equivalent string representation using specified format and culture-specific formatting information.</source>
          <target state="translated">使用指定的格式和特定文化特性的格式資訊，將指定物件的值轉換為相等的字串表示。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>The string representation of the value of <ph id="ph1">&lt;paramref name="arg" /&gt;</ph>, formatted as specified by <ph id="ph2">&lt;paramref name="format" /&gt;</ph> and <ph id="ph3">&lt;paramref name="formatProvider" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="arg" /&gt;</ph> 值的字串表示，由 <ph id="ph2">&lt;paramref name="format" /&gt;</ph> 和 <ph id="ph3">&lt;paramref name="formatProvider" /&gt;</ph> 根據指示格式化。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source><ph id="ph1">&lt;xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType&gt;</ph> is a callback method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType&gt;</ph> 是一種回呼方法。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>It is called by a method that supports custom formatting, such as <ph id="ph1">&lt;xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">呼叫此方法的方法，支援自訂格式，例如<ph id="ph1">&lt;xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType&gt;</ph>或<ph id="ph2">&lt;xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>The implementation is called once for each format item in a <bpt id="p1">[</bpt>composite format string<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>.</source>
          <target state="translated">實作會呼叫一次針對每個格式項目<bpt id="p1">[</bpt>複合格式字串<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>For example, in the following statement, the <ph id="ph1">&lt;xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType&gt;</ph> method is called three times.</source>
          <target state="translated">例如，在下列陳述式，<ph id="ph1">&lt;xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType&gt;</ph>方法都會呼叫三次。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>The <ph id="ph1">`arg`</ph> parameter is the object in the object list whose zero-based position corresponds to the index of a particular format item.</source>
          <target state="translated"><ph id="ph1">`arg`</ph>參數是在特定的格式項目的索引以零為起始位置對應的物件清單的物件。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>The <ph id="ph1">`format`</ph> parameter contains a format string, which is the <ph id="ph2">`formatString`</ph> component of a format item.</source>
          <target state="translated"><ph id="ph1">`format`</ph>參數會包含格式字串，這是<ph id="ph2">`formatString`</ph>元件的格式項目。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>If the format item has no <ph id="ph1">`formatString`</ph> component, the value of <ph id="ph2">`format`</ph> is <ph id="ph3">`null`</ph>.</source>
          <target state="translated">如果格式項目之中未包含任何<ph id="ph1">`formatString`</ph>元件、 值<ph id="ph2">`format`</ph>是<ph id="ph3">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>If <ph id="ph1">`format`</ph> is <ph id="ph2">`null`</ph>, depending on the type of <ph id="ph3">`arg`</ph>, you may be able to use the default format specification of your choice.</source>
          <target state="translated">如果<ph id="ph1">`format`</ph>是<ph id="ph2">`null`</ph>上的類型，取決於<ph id="ph3">`arg`</ph>，您可以使用您所選擇的預設格式規格。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>The <ph id="ph1">`formatProvider`</ph> parameter is the <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> implementation that provides formatting for <ph id="ph3">`arg`</ph>.</source>
          <target state="translated"><ph id="ph1">`formatProvider`</ph>參數是<ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph>實作，提供格式<ph id="ph3">`arg`</ph>。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>Typically, it is an instance of your <ph id="ph1">&lt;xref:System.ICustomFormatter&gt;</ph> implementation.</source>
          <target state="translated">一般來說，這是執行個體您<ph id="ph1">&lt;xref:System.ICustomFormatter&gt;</ph>實作。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>If <ph id="ph1">`formatProvider`</ph> is <ph id="ph2">`null`</ph>, ignore that parameter.</source>
          <target state="translated">如果<ph id="ph1">`formatProvider`</ph>是<ph id="ph2">`null`</ph>，略過該參數。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>Your implementation of the <ph id="ph1">&lt;xref:System.ICustomFormatter.Format%2A&gt;</ph> method must include the following functionality so the .NET Framework can provide formatting you do not support.</source>
          <target state="translated">實作<ph id="ph1">&lt;xref:System.ICustomFormatter.Format%2A&gt;</ph>方法必須包含下列功能，讓.NET Framework 提供的格式不支援。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>If your format method does not support a format, determine whether the object being formatted implements the <ph id="ph1">&lt;xref:System.IFormattable&gt;</ph> interface.</source>
          <target state="translated">如果您格式的方法不支援的格式，判斷是否物件正在格式化實作<ph id="ph1">&lt;xref:System.IFormattable&gt;</ph>介面。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>If it does, invoke the <ph id="ph1">&lt;xref:System.IFormattable.ToString%2A?displayProperty=nameWithType&gt;</ph> method of that interface.</source>
          <target state="translated">如果它會叫用<ph id="ph1">&lt;xref:System.IFormattable.ToString%2A?displayProperty=nameWithType&gt;</ph>該介面的方法。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>Otherwise, invoke the default <ph id="ph1">&lt;xref:System.Object.ToString%2A?displayProperty=nameWithType&gt;</ph> method of the underlying object.</source>
          <target state="translated">否則，叫用預設<ph id="ph1">&lt;xref:System.Object.ToString%2A?displayProperty=nameWithType&gt;</ph>基礎物件的方法。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>The following code illustrates this pattern.</source>
          <target state="translated">下列程式碼將示範這個模式。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>The following example implements <ph id="ph1">&lt;xref:System.ICustomFormatter&gt;</ph> to allow binary, octal, and hexadecimal formatting of integral values.</source>
          <target state="translated">下列範例會實作<ph id="ph1">&lt;xref:System.ICustomFormatter&gt;</ph>允許二進位、 八進位和十六進位格式的整數值。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>Its <ph id="ph1">&lt;xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType&gt;</ph> implementation determines whether the format parameter is one of the three supported format strings ("B" for binary, "O" for octal, and "H" for hexadecimal) and formats the <ph id="ph2">`arg`</ph> parameter appropriately.</source>
          <target state="translated">其<ph id="ph1">&lt;xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType&gt;</ph>實作可讓您判斷格式參數是否為其中一個三個支援的格式字串 ("B"的二進位檔，"O"的八進位和十六進位的"H") 和格式<ph id="ph2">`arg`</ph>參數適當地。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>Otherwise, if <ph id="ph1">`arg`</ph> is not <ph id="ph2">`null`</ph>, it calls the <ph id="ph3">`arg`</ph> parameter's <ph id="ph4">&lt;xref:System.IFormattable.ToString%2A?displayProperty=nameWithType&gt;</ph> implementation, if one exists, or its parameterless <ph id="ph5">`ToString`</ph> method, if one does not.</source>
          <target state="translated">否則，如果<ph id="ph1">`arg`</ph>不<ph id="ph2">`null`</ph>，它會呼叫<ph id="ph3">`arg`</ph>參數的<ph id="ph4">&lt;xref:System.IFormattable.ToString%2A?displayProperty=nameWithType&gt;</ph>實作中，如果有的話，或其無參數<ph id="ph5">`ToString`</ph>方法，如果其中一個不存在。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>If <ph id="ph1">`arg`</ph> is <ph id="ph2">`null`</ph>, the method returns <ph id="ph3">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph1">`arg`</ph> 是 <ph id="ph2">`null`</ph>，則方法會傳回 <ph id="ph3">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source><ph id="ph1">`BinaryFormatter`</ph> can then be used to provide custom formatting by passing a <ph id="ph2">`BinaryFormatter`</ph> object as the <ph id="ph3">`provider`</ph> parameter of the <ph id="ph4">&lt;xref:System.String.Format%2A&gt;</ph> method, as the following example shows.</source>
          <target state="translated"><ph id="ph1">`BinaryFormatter`</ph> 然後可以用來提供自訂格式，藉由傳遞<ph id="ph2">`BinaryFormatter`</ph>物件當做<ph id="ph3">`provider`</ph>參數<ph id="ph4">&lt;xref:System.String.Format%2A&gt;</ph>方法，如下列範例所示。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>