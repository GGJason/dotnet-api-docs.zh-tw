<Type Name="ICustomFormatter" FullName="System.ICustomFormatter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6002c7bffa27e626bfd04916c139d411974b86fc" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30728672" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface ICustomFormatter" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ICustomFormatter" />
  <TypeSignature Language="DocId" Value="T:System.ICustomFormatter" />
  <TypeSignature Language="VB.NET" Value="Public Interface ICustomFormatter" />
  <TypeSignature Language="C++ CLI" Value="public interface class ICustomFormatter" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="6bba2-101">定義可支援物件值之自訂格式的方法。</span>
      <span class="sxs-lookup">
        <span data-stu-id="6bba2-101">Defines a method that supports custom formatting of the value of an object.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6bba2-102"><xref:System.ICustomFormatter>介面包含單一方法<xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="6bba2-102">The <xref:System.ICustomFormatter> interface includes a single method, <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="6bba2-103">當此介面由參考或值的類型，實作<xref:System.ICustomFormatter.Format%2A>方法會傳回物件的值的自訂格式字串表示。</span><span class="sxs-lookup"><span data-stu-id="6bba2-103">When this interface is implemented by a reference or value type, the <xref:System.ICustomFormatter.Format%2A> method returns a custom-formatted string representation of an object's value.</span></span>  
  
 <span data-ttu-id="6bba2-104">一般而言，<xref:System.ICustomFormatter>與實作介面<xref:System.IFormatProvider>介面可自訂的兩個.NET Framework 複合字串格式方法包含行為<xref:System.IFormatProvider>參數。</span><span class="sxs-lookup"><span data-stu-id="6bba2-104">Typically, the <xref:System.ICustomFormatter> interface is implemented with the <xref:System.IFormatProvider> interface to customize the behavior of two .NET Framework composite string formatting methods that include an <xref:System.IFormatProvider> parameter.</span></span> <span data-ttu-id="6bba2-105">具體來說，<xref:System.ICustomFormatter>介面可以提供自訂格式的物件傳遞給值<xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>和<xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="6bba2-105">Specifically, the <xref:System.ICustomFormatter> interface can provide custom formatting of the value of an object passed to the <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> and <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> methods.</span></span>  
  
 <span data-ttu-id="6bba2-106">提供的自訂物件的值表示需要您下列：</span><span class="sxs-lookup"><span data-stu-id="6bba2-106">Providing a custom representation of an object's value requires that you do the following:</span></span>  
  
1.  <span data-ttu-id="6bba2-107">定義類別可實作<xref:System.ICustomFormatter>介面和其單一成員，<xref:System.ICustomFormatter.Format%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="6bba2-107">Define a class that implements the <xref:System.ICustomFormatter> interface and its single member, the <xref:System.ICustomFormatter.Format%2A> method.</span></span>  
  
2.  <span data-ttu-id="6bba2-108">定義類別可實作<xref:System.IFormatProvider>介面和其單一成員，<xref:System.IFormatProvider.GetFormat%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="6bba2-108">Define a class that implements the <xref:System.IFormatProvider> interface and its single member, the <xref:System.IFormatProvider.GetFormat%2A> method.</span></span> <span data-ttu-id="6bba2-109"><xref:System.IFormatProvider.GetFormat%2A>方法傳回的執行個體您<xref:System.ICustomFormatter>實作。</span><span class="sxs-lookup"><span data-stu-id="6bba2-109">The <xref:System.IFormatProvider.GetFormat%2A> method returns an instance of your <xref:System.ICustomFormatter> implementation.</span></span> <span data-ttu-id="6bba2-110">通常，單一類別同時實作<xref:System.ICustomFormatter>和<xref:System.IFormatProvider>。</span><span class="sxs-lookup"><span data-stu-id="6bba2-110">Often, a single class implements both <xref:System.ICustomFormatter> and <xref:System.IFormatProvider>.</span></span> <span data-ttu-id="6bba2-111">在此情況下，類別的`GetFormat`實作只會傳回本身的執行個體。</span><span class="sxs-lookup"><span data-stu-id="6bba2-111">In that case, the class's `GetFormat` implementation just returns an instance of itself.</span></span>  
  
3.  <span data-ttu-id="6bba2-112">傳遞<xref:System.IFormatProvider>實作做為`provider`引數的<xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>方法或類似的方法。</span><span class="sxs-lookup"><span data-stu-id="6bba2-112">Pass the <xref:System.IFormatProvider> implementation as the `provider` argument of the <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> method or a comparable method.</span></span>  
  
 <span data-ttu-id="6bba2-113">.NET Framework 方法就會使用您的自訂格式設定而非其本身。</span><span class="sxs-lookup"><span data-stu-id="6bba2-113">The .NET Framework method will then use your custom formatting instead of its own.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6bba2-114">下列範例會實作<xref:System.ICustomFormatter>允許二進位、 八進位和十六進位格式的整數值。</span><span class="sxs-lookup"><span data-stu-id="6bba2-114">The following example implements <xref:System.ICustomFormatter> to allow binary, octal, and hexadecimal formatting of integral values.</span></span> <span data-ttu-id="6bba2-115">在此範例中，單一類別， `IBinaryFormatter`，同時實作<xref:System.ICustomFormatter>和<xref:System.IFormatProvider>。</span><span class="sxs-lookup"><span data-stu-id="6bba2-115">In this example, a single class, `IBinaryFormatter`, implements both <xref:System.ICustomFormatter> and <xref:System.IFormatProvider>.</span></span> <span data-ttu-id="6bba2-116">其<xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType>方法會判斷是否`formatType`參數代表<xref:System.ICustomFormatter>型別。</span><span class="sxs-lookup"><span data-stu-id="6bba2-116">Its <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> method determines whether the `formatType` parameter represents an <xref:System.ICustomFormatter> type.</span></span> <span data-ttu-id="6bba2-117">若是如此，`BinaryFormatter`傳回的執行個體本身; 否則它會傳回`null`。</span><span class="sxs-lookup"><span data-stu-id="6bba2-117">If it does, `BinaryFormatter` returns an instance of itself; otherwise, it returns `null`.</span></span> <span data-ttu-id="6bba2-118">其<xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType>實作可讓您判斷格式參數是否為其中一個三個支援的格式字串 ("B"的二進位檔，"O"的八進位和十六進位的"H") 和格式`arg`參數適當地。</span><span class="sxs-lookup"><span data-stu-id="6bba2-118">Its <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> implementation determines whether the format parameter is one of the three supported format strings ("B" for binary, "O" for octal, and "H" for hexadecimal) and formats the `arg` parameter appropriately.</span></span> <span data-ttu-id="6bba2-119">否則，如果`arg`不`null`，它會呼叫`arg`參數的<xref:System.IFormattable.ToString%2A?displayProperty=nameWithType>實作中，如果有的話，或其無參數`ToString`方法，如果其中一個不存在。</span><span class="sxs-lookup"><span data-stu-id="6bba2-119">Otherwise, if `arg` is not `null`, it calls the `arg` parameter's <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> implementation, if one exists, or its parameterless `ToString` method, if one does not.</span></span> <span data-ttu-id="6bba2-120">如果 `arg` 是 `null`，則方法會傳回 <xref:System.String.Empty?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="6bba2-120">If `arg` is `null`, the method returns <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[System.ICustomFormatter.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#1)]
 [!code-vb[System.ICustomFormatter.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#1)]  
  
 <span data-ttu-id="6bba2-121">`BinaryFormatter` 然後可以用來提供自訂格式，藉由傳遞`BinaryFormatter`物件當做`provider`參數<xref:System.String.Format%2A>方法，如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="6bba2-121">`BinaryFormatter` can then be used to provide custom formatting by passing a `BinaryFormatter` object as the `provider` parameter of the <xref:System.String.Format%2A> method, as the following example shows.</span></span>  
  
 [!code-csharp[System.ICustomFormatter.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#2)]
 [!code-vb[System.ICustomFormatter.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#2)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>
        <span data-ttu-id="6bba2-122">Common language runtime 會嘗試使用您<see cref="T:System.ICustomFormatter" />實作複合格式字串中的每個格式項目。</span>
        <span class="sxs-lookup">
          <span data-stu-id="6bba2-122">The common language runtime attempts to use your <see cref="T:System.ICustomFormatter" /> implementation for every format item in a composite format string.</span>
        </span>
        <span data-ttu-id="6bba2-123">如此一來，您應該預期您<see cref="T:System.ICustomFormatter" />實作會呼叫以提供格式化服務物件或它的值不是設計來處理。</span>
        <span class="sxs-lookup">
          <span data-stu-id="6bba2-123">As a result, you should expect that your <see cref="T:System.ICustomFormatter" /> implementation will be called to provide formatting services to objects or values that it is not designed to handle.</span>
        </span>
        <span data-ttu-id="6bba2-124">在這些情況下，您<see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" />方法必須為該物件或值呼叫的適當格式化的方法。</span>
        <span class="sxs-lookup">
          <span data-stu-id="6bba2-124">In these cases, your <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> method must call the appropriate formatting method for that object or value.</span>
        </span>
        <span data-ttu-id="6bba2-125">有兩種類型的<see cref="T:System.ICustomFormatter" />實作： 內建函式和副檔名。</span>
        <span class="sxs-lookup">
          <span data-stu-id="6bba2-125">There are two kinds of <see cref="T:System.ICustomFormatter" /> implementations: intrinsic and extension.</span>
        </span>
        <span data-ttu-id="6bba2-126">應用程式定義的物件提供自訂格式的實作已內建函式的實作。</span>
        <span class="sxs-lookup">
          <span data-stu-id="6bba2-126">Intrinsic implementations are implementations that provide custom formatting for an application-defined object.</span>
        </span>
        <span data-ttu-id="6bba2-127">在此情況下，您的實作應該包含下列各項：</span>
        <span class="sxs-lookup">
          <span data-stu-id="6bba2-127">In this case, your implementation should include the following:</span>
        </span>  
  
-   <span data-ttu-id="6bba2-128">定義物件的格式設定的格式字串定義。</span><span class="sxs-lookup"><span data-stu-id="6bba2-128">A definition of format strings that define the formatting of the object.</span></span><span data-ttu-id="6bba2-129">格式字串是選擇性的。</span><span class="sxs-lookup"><span data-stu-id="6bba2-129">Format strings are optional.</span></span><span data-ttu-id="6bba2-130">一般而言，"G"或"g"格式字串會定義一般 （或最常使用） 的格式。</span><span class="sxs-lookup"><span data-stu-id="6bba2-130">Typically, a "G" or "g" format string defines the general (or most commonly used) format.</span></span><span data-ttu-id="6bba2-131">不過，您可用來定義您所選擇的任何格式字串。</span><span class="sxs-lookup"><span data-stu-id="6bba2-131">However, you are free to define any format strings that you choose.</span></span><span data-ttu-id="6bba2-132">您也可以自由決定它們是否區分大小寫或不區分大小寫。</span><span class="sxs-lookup"><span data-stu-id="6bba2-132">You are also free to decide whether they are case-sensitive or case-insensitive.</span></span>  
  
-   <span data-ttu-id="6bba2-133">測試以確保物件的型別傳遞至您<see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" />方法是您應用程式定義的類型。</span><span class="sxs-lookup"><span data-stu-id="6bba2-133">A test to ensure that the type of the object passed to your <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> method is your application-defined type.</span></span><span data-ttu-id="6bba2-134">如果不是，您應該呼叫物件的<see cref="T:System.IFormattable" />實作中，如果有的話，或其<see cref="M:System.Object.ToString" />方法，如果不存在。</span><span class="sxs-lookup"><span data-stu-id="6bba2-134">If it is not, you should call the object's <see cref="T:System.IFormattable" /> implementation, if one exists, or its <see cref="M:System.Object.ToString" /> method, if it does not.</span></span><span data-ttu-id="6bba2-135">您應該準備處理這些方法呼叫可能會擲回任何例外狀況。</span><span class="sxs-lookup"><span data-stu-id="6bba2-135">You should be prepared to handle any exceptions these method calls might throw.</span></span>  
  
-   <span data-ttu-id="6bba2-136">程式碼來處理 null 的格式字串，如果您的實作支援格式字串。</span><span class="sxs-lookup"><span data-stu-id="6bba2-136">Code to handle a null format string, if your implementation supports format strings.</span></span><span data-ttu-id="6bba2-137">最常見的方法是使用一般格式規範取代 null 格式字串。</span><span class="sxs-lookup"><span data-stu-id="6bba2-137">The most common approach is to replace a null format string with the general format specifier.</span></span>  
  
-   <span data-ttu-id="6bba2-138">程式碼來處理您的實作所支援的任何格式字串。</span><span class="sxs-lookup"><span data-stu-id="6bba2-138">Code to handle any format strings that your implementation supports.</span></span>  
  
-   <span data-ttu-id="6bba2-139">程式碼來處理不支援的格式字串。</span><span class="sxs-lookup"><span data-stu-id="6bba2-139">Code to handle format strings that you do not support.</span></span><span data-ttu-id="6bba2-140">最常見的方法會擲回<see cref="T:System.FormatException" />，不過您可以提供預設格式。</span><span class="sxs-lookup"><span data-stu-id="6bba2-140">The most common approach is to throw a <see cref="T:System.FormatException" />, although you can provide default formatting.</span></span><span data-ttu-id="6bba2-141">延伸項目實作所實作，以提供自訂格式的已使用格式支援的型別。</span><span class="sxs-lookup"><span data-stu-id="6bba2-141">Extension implementations are implementations that provide custom formatting for a type that already has formatting support.</span></span><span data-ttu-id="6bba2-142">例如，您可以定義<c>CustomerNumberFormatter</c>格式化具有特定的數字之間的連字號的整數類資料型別。</span><span class="sxs-lookup"><span data-stu-id="6bba2-142">For example, you could define a <c>CustomerNumberFormatter</c> that formats an integral type with hyphens between specific digits.</span></span><span data-ttu-id="6bba2-143">在此情況下，您的實作應該包含下列各項：</span><span class="sxs-lookup"><span data-stu-id="6bba2-143">In this case, your implementation should include the following:</span></span>  
  
-   <span data-ttu-id="6bba2-144">擴充物件的格式設定的格式字串定義。</span><span class="sxs-lookup"><span data-stu-id="6bba2-144">A definition of format strings that extend the formatting of the object.</span></span><span data-ttu-id="6bba2-145">這些格式字串是必要項目，但它們必須與現有格式字串的型別不衝突。</span><span class="sxs-lookup"><span data-stu-id="6bba2-145">These format strings are required, but they must not conflict with the type's existing format strings.</span></span><span data-ttu-id="6bba2-146">比方說，如果您在擴充格式的<see cref="T:System.Int32" />類型，您不應該實作"C"、"D"、"E"、"F"和"G"格式規範，和其他項目。</span><span class="sxs-lookup"><span data-stu-id="6bba2-146">For example, if you are extending formatting for the <see cref="T:System.Int32" /> type, you should not implement the "C", "D", "E", "F", and "G" format specifiers, among others.</span></span>  
  
-   <span data-ttu-id="6bba2-147">物件的型別傳遞至測試您<see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" />方法是格式化您的延伸模組支援的類型。</span><span class="sxs-lookup"><span data-stu-id="6bba2-147">A test that the type of the object passed to your <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> method is a type whose formatting your extension supports.</span></span><span data-ttu-id="6bba2-148">如果不是，呼叫物件的<see cref="T:System.IFormattable" />實作中，如果有的話，或物件的無參數<see cref="M:System.Object.ToString" />方法，如果不存在。</span><span class="sxs-lookup"><span data-stu-id="6bba2-148">If it is not, call the object's <see cref="T:System.IFormattable" /> implementation, if one exists, or the object's parameterless <see cref="M:System.Object.ToString" /> method, if it does not.</span></span><span data-ttu-id="6bba2-149">您應該準備處理這些方法呼叫可能會擲回任何例外狀況。</span><span class="sxs-lookup"><span data-stu-id="6bba2-149">You should be prepared to handle any exceptions these method calls might throw.</span></span>  
  
-   <span data-ttu-id="6bba2-150">程式碼來處理您的延伸模組支援的任何格式字串。</span><span class="sxs-lookup"><span data-stu-id="6bba2-150">Code to handle any format strings that your extension supports.</span></span>  
  
-   <span data-ttu-id="6bba2-151">程式碼來處理您的擴充功能不支援任何格式字串。</span><span class="sxs-lookup"><span data-stu-id="6bba2-151">Code to handle any format strings that your extension does not support.</span></span><span data-ttu-id="6bba2-152">這些應該傳遞至型別的<see cref="T:System.IFormattable" />實作。</span><span class="sxs-lookup"><span data-stu-id="6bba2-152">These should be passed on to the type's <see cref="T:System.IFormattable" /> implementation.</span></span><span data-ttu-id="6bba2-153">您應該準備處理這些方法呼叫可能會擲回任何例外狀況。</span><span class="sxs-lookup"><span data-stu-id="6bba2-153">You should be prepared to handle any exceptions these method calls might throw.</span></span></para>
    </block>
    <altmember cref="T:System.IFormatProvider" />
  </Docs>
  <Members>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public string Format (string format, object arg, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Format(string format, object arg, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function Format (format As String, arg As Object, formatProvider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Format(System::String ^ format, System::Object ^ arg, IFormatProvider ^ formatProvider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">
          <span data-ttu-id="6bba2-154">包含格式規格的格式字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6bba2-154">A format string containing formatting specifications.</span>
          </span>
        </param>
        <param name="arg">
          <span data-ttu-id="6bba2-155">要格式化的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6bba2-155">An object to format.</span>
          </span>
        </param>
        <param name="formatProvider">
          <span data-ttu-id="6bba2-156">提供關於目前執行個體之格式資訊的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6bba2-156">An object that supplies format information about the current instance.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6bba2-157">使用指定的格式和特定文化特性的格式資訊，將指定物件的值轉換為相等的字串表示。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6bba2-157">Converts the value of a specified object to an equivalent string representation using specified format and culture-specific formatting information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6bba2-158">
            <paramref name="arg" /> 值的字串表示，由 <paramref name="format" /> 和 <paramref name="formatProvider" /> 根據指示格式化。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6bba2-158">The string representation of the value of <paramref name="arg" />, formatted as specified by <paramref name="format" /> and <paramref name="formatProvider" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6bba2-159"><xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> 是一種回呼方法。</span><span class="sxs-lookup"><span data-stu-id="6bba2-159"><xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> is a callback method.</span></span> <span data-ttu-id="6bba2-160">呼叫此方法的方法，支援自訂格式，例如<xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>或<xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="6bba2-160">It is called by a method that supports custom formatting, such as <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> or <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>.</span></span> <span data-ttu-id="6bba2-161">實作會呼叫一次針對每個格式項目[複合格式字串](~/docs/standard/base-types/composite-formatting.md)。</span><span class="sxs-lookup"><span data-stu-id="6bba2-161">The implementation is called once for each format item in a [composite format string](~/docs/standard/base-types/composite-formatting.md).</span></span> <span data-ttu-id="6bba2-162">例如，在下列陳述式，<xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType>方法都會呼叫三次。</span><span class="sxs-lookup"><span data-stu-id="6bba2-162">For example, in the following statement, the <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> method is called three times.</span></span>  
  
 [!code-csharp[System.ICustomFormatter.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#4)]
 [!code-vb[System.ICustomFormatter.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#4)]  
  
 <span data-ttu-id="6bba2-163">`arg`參數是在特定的格式項目的索引以零為起始位置對應的物件清單的物件。</span><span class="sxs-lookup"><span data-stu-id="6bba2-163">The `arg` parameter is the object in the object list whose zero-based position corresponds to the index of a particular format item.</span></span>  
  
 <span data-ttu-id="6bba2-164">`format`參數會包含格式字串，這是`formatString`元件的格式項目。</span><span class="sxs-lookup"><span data-stu-id="6bba2-164">The `format` parameter contains a format string, which is the `formatString` component of a format item.</span></span> <span data-ttu-id="6bba2-165">如果格式項目之中未包含任何`formatString`元件、 值`format`是`null`。</span><span class="sxs-lookup"><span data-stu-id="6bba2-165">If the format item has no `formatString` component, the value of `format` is `null`.</span></span> <span data-ttu-id="6bba2-166">如果`format`是`null`上的類型，取決於`arg`，您可以使用您所選擇的預設格式規格。</span><span class="sxs-lookup"><span data-stu-id="6bba2-166">If `format` is `null`, depending on the type of `arg`, you may be able to use the default format specification of your choice.</span></span>  
  
 <span data-ttu-id="6bba2-167">`formatProvider`參數是<xref:System.IFormatProvider>實作，提供格式`arg`。</span><span class="sxs-lookup"><span data-stu-id="6bba2-167">The `formatProvider` parameter is the <xref:System.IFormatProvider> implementation that provides formatting for `arg`.</span></span> <span data-ttu-id="6bba2-168">一般來說，這是執行個體您<xref:System.ICustomFormatter>實作。</span><span class="sxs-lookup"><span data-stu-id="6bba2-168">Typically, it is an instance of your <xref:System.ICustomFormatter> implementation.</span></span> <span data-ttu-id="6bba2-169">如果`formatProvider`是`null`，略過該參數。</span><span class="sxs-lookup"><span data-stu-id="6bba2-169">If `formatProvider` is `null`, ignore that parameter.</span></span>  
  
 <span data-ttu-id="6bba2-170">實作<xref:System.ICustomFormatter.Format%2A>方法必須包含下列功能，讓.NET Framework 提供的格式不支援。</span><span class="sxs-lookup"><span data-stu-id="6bba2-170">Your implementation of the <xref:System.ICustomFormatter.Format%2A> method must include the following functionality so the .NET Framework can provide formatting you do not support.</span></span> <span data-ttu-id="6bba2-171">如果您格式的方法不支援的格式，判斷是否物件正在格式化實作<xref:System.IFormattable>介面。</span><span class="sxs-lookup"><span data-stu-id="6bba2-171">If your format method does not support a format, determine whether the object being formatted implements the <xref:System.IFormattable> interface.</span></span> <span data-ttu-id="6bba2-172">如果它會叫用<xref:System.IFormattable.ToString%2A?displayProperty=nameWithType>該介面的方法。</span><span class="sxs-lookup"><span data-stu-id="6bba2-172">If it does, invoke the <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> method of that interface.</span></span> <span data-ttu-id="6bba2-173">否則，叫用預設<xref:System.Object.ToString%2A?displayProperty=nameWithType>基礎物件的方法。</span><span class="sxs-lookup"><span data-stu-id="6bba2-173">Otherwise, invoke the default <xref:System.Object.ToString%2A?displayProperty=nameWithType> method of the underlying object.</span></span> <span data-ttu-id="6bba2-174">下列程式碼將示範這個模式。</span><span class="sxs-lookup"><span data-stu-id="6bba2-174">The following code illustrates this pattern.</span></span>  
  
 [!code-csharp[System.ICustomFormatter.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#3)]
 [!code-vb[System.ICustomFormatter.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#3)]  
  
   
  
## Examples  
 <span data-ttu-id="6bba2-175">下列範例會實作<xref:System.ICustomFormatter>允許二進位、 八進位和十六進位格式的整數值。</span><span class="sxs-lookup"><span data-stu-id="6bba2-175">The following example implements <xref:System.ICustomFormatter> to allow binary, octal, and hexadecimal formatting of integral values.</span></span> <span data-ttu-id="6bba2-176">其<xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType>實作可讓您判斷格式參數是否為其中一個三個支援的格式字串 ("B"的二進位檔，"O"的八進位和十六進位的"H") 和格式`arg`參數適當地。</span><span class="sxs-lookup"><span data-stu-id="6bba2-176">Its <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> implementation determines whether the format parameter is one of the three supported format strings ("B" for binary, "O" for octal, and "H" for hexadecimal) and formats the `arg` parameter appropriately.</span></span> <span data-ttu-id="6bba2-177">否則，如果`arg`不`null`，它會呼叫`arg`參數的<xref:System.IFormattable.ToString%2A?displayProperty=nameWithType>實作中，如果有的話，或其無參數`ToString`方法，如果其中一個不存在。</span><span class="sxs-lookup"><span data-stu-id="6bba2-177">Otherwise, if `arg` is not `null`, it calls the `arg` parameter's <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> implementation, if one exists, or its parameterless `ToString` method, if one does not.</span></span> <span data-ttu-id="6bba2-178">如果 `arg` 是 `null`，則方法會傳回 <xref:System.String.Empty?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="6bba2-178">If `arg` is `null`, the method returns <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[System.ICustomFormatter.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#1)]
 [!code-vb[System.ICustomFormatter.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#1)]  
  
 <span data-ttu-id="6bba2-179">`BinaryFormatter` 然後可以用來提供自訂格式，藉由傳遞`BinaryFormatter`物件當做`provider`參數<xref:System.String.Format%2A>方法，如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="6bba2-179">`BinaryFormatter` can then be used to provide custom formatting by passing a `BinaryFormatter` object as the `provider` parameter of the <xref:System.String.Format%2A> method, as the following example shows.</span></span>  
  
 [!code-csharp[System.ICustomFormatter.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#2)]
 [!code-vb[System.ICustomFormatter.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IFormattable" />
      </Docs>
    </Member>
  </Members>
</Type>