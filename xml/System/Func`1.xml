<Type Name="Func&lt;TResult&gt;" FullName="System.Func&lt;TResult&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="69512d04d7ee64f191d1ea741c2ca953bc1c0e8a" />
    <Meta Name="ms.sourcegitcommit" Value="9dda17222b9f7d3edf130133bfb1370d5b410a4b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="09/22/2018" />
    <Meta Name="ms.locfileid" Value="46630548" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate TResult Func&lt;out TResult&gt;();" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Func`1&lt;+ TResult&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Func`1" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Func(Of Out TResult)() As TResult " />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TResult&gt;&#xA;public delegate TResult Func();" />
  <TypeSignature Language="F#" Value="type Func&lt;'Result&gt; = delegate of unit -&gt; 'Result" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TResult">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=2.0.5.0, Culture=Neutral, PublicKeyToken=7cec85d7bea7798e")</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters />
  <ReturnValue>
    <ReturnType>TResult</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="TResult">
      <span data-ttu-id="76f0e-101">這個委派所封裝之方法的傳回值之類型。</span>
      <span class="sxs-lookup">
        <span data-stu-id="76f0e-101">The type of the return value of the method that this delegate encapsulates.</span>
      </span>
    </typeparam>
    <summary>
      <span data-ttu-id="76f0e-102">封裝沒有參數並傳回 <typeparamref name="TResult" /> 參數所指定之型別值的方法。</span>
      <span class="sxs-lookup">
        <span data-stu-id="76f0e-102">Encapsulates a method that has no parameters and returns a value of the type specified by the <typeparamref name="TResult" /> parameter.</span>
      </span>
    </summary>
    <returns>
      <span data-ttu-id="76f0e-103">這個委派所封裝之方法的傳回值。</span>
      <span class="sxs-lookup">
        <span data-stu-id="76f0e-103">The return value of the method that this delegate encapsulates.</span>
      </span>
    </returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="76f0e-104">您可以使用此委派来表示的方法，可以做為參數傳遞，而不必明確宣告自訂委派。</span><span class="sxs-lookup"><span data-stu-id="76f0e-104">You can use this delegate to represent a method that can be passed as a parameter without explicitly declaring a custom delegate.</span></span> <span data-ttu-id="76f0e-105">封裝的方法必須對應到這個委派所定義的方法簽章。</span><span class="sxs-lookup"><span data-stu-id="76f0e-105">The encapsulated method must correspond to the method signature that is defined by this delegate.</span></span> <span data-ttu-id="76f0e-106">這表示封裝的方法必須有任何參數，而且必須傳回值。</span><span class="sxs-lookup"><span data-stu-id="76f0e-106">This means that the encapsulated method must have no parameters and must return a value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="76f0e-107">若要參考的方法沒有參數並傳回`void`(或在 Visual Basic 中宣告為`Sub`而`Function`)，使用<xref:System.Action>改為委派。</span><span class="sxs-lookup"><span data-stu-id="76f0e-107">To reference a method that has no parameters and returns `void` (or in Visual Basic, that is declared as a `Sub` rather than as a `Function`), use the <xref:System.Action> delegate instead.</span></span>  
  
 <span data-ttu-id="76f0e-108">當您使用<xref:System.Func%601>委派，您不需要明確地定義封裝的無參數方法的委派。</span><span class="sxs-lookup"><span data-stu-id="76f0e-108">When you use the <xref:System.Func%601> delegate, you do not have to explicitly define a delegate that encapsulates a parameterless method.</span></span> <span data-ttu-id="76f0e-109">例如，下列程式碼明確宣告委派，名為`WriteMethod`，並將指派的參考`OutputTarget.SendToFile`執行個體給它的委派執行個體的方法。</span><span class="sxs-lookup"><span data-stu-id="76f0e-109">For example, the following code explicitly declares a delegate named `WriteMethod` and assigns a reference to the `OutputTarget.SendToFile` instance method to its delegate instance.</span></span>  
  
 [!code-csharp[System.Func~1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Delegate.cs#1)]
 [!code-vb[System.Func~1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Delegate.vb#1)]  
  
 <span data-ttu-id="76f0e-110">下列範例中簡化這個程式碼，以具現化<xref:System.Func%601>而不是明確地定義新的委派，並為其指派具名的方法的委派。</span><span class="sxs-lookup"><span data-stu-id="76f0e-110">The following example simplifies this code by instantiating the <xref:System.Func%601> delegate instead of explicitly defining a new delegate and assigning a named method to it.</span></span>  
  
 [!code-csharp[System.Func~1#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Func1.cs#2)]
 [!code-vb[System.Func~1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Func1.vb#2)]  
  
 <span data-ttu-id="76f0e-111">您可以使用<xref:System.Func%601>具有在 C# 中，匿名方法委派，如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="76f0e-111">You can use the <xref:System.Func%601> delegate with anonymous methods in C#, as the following example illustrates.</span></span> <span data-ttu-id="76f0e-112">(如匿名方法的簡介，請參閱 <<c0> [ 匿名方法](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md)。)</span><span class="sxs-lookup"><span data-stu-id="76f0e-112">(For an introduction to anonymous methods, see [Anonymous Methods](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)</span></span>  
  
 [!code-csharp[System.Func~1#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Anon.cs#3)]  
  
 <span data-ttu-id="76f0e-113">您也可以指派至 lambda 運算式<xref:System.Func%602>委派，如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="76f0e-113">You can also assign a lambda expression to a <xref:System.Func%602> delegate, as the following example illustrates.</span></span> <span data-ttu-id="76f0e-114">(如需 lambda 運算式，請參閱 < [Lambda 運算式](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)並[Lambda 運算式](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)。)</span><span class="sxs-lookup"><span data-stu-id="76f0e-114">(For an introduction to lambda expressions, see [Lambda Expressions](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md) and [Lambda Expressions](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)</span></span>  
  
 [!code-csharp[System.Func~1#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Lambda.cs#4)]
 [!code-vb[System.Func~1#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Lambda.vb#4)]  
  
 <span data-ttu-id="76f0e-115">Lambda 運算式的基礎類型是其中一個泛型`Func`委派。</span><span class="sxs-lookup"><span data-stu-id="76f0e-115">The underlying type of a lambda expression is one of the generic `Func` delegates.</span></span> <span data-ttu-id="76f0e-116">這讓您能夠傳遞做為參數的 lambda 運算式，而不需要明確地將它指派給委派。</span><span class="sxs-lookup"><span data-stu-id="76f0e-116">This makes it possible to pass a lambda expression as a parameter without explicitly assigning it to a delegate.</span></span> <span data-ttu-id="76f0e-117">特別是，因為有許多方法中的型別<xref:System.Linq>命名空間一定`Func`參數，您可以將這些方法的 lambda 運算式而不需要明確具現化`Func`委派。</span><span class="sxs-lookup"><span data-stu-id="76f0e-117">In particular, because many methods of types in the <xref:System.Linq> namespace have `Func` parameters, you can pass these methods a lambda expression without explicitly instantiating a `Func` delegate.</span></span>  
  
 <span data-ttu-id="76f0e-118">如果您有想要的結果實際需要時，才執行昂貴的計算，您可以將耗費資源的函式，來指派<xref:System.Func%601>委派。</span><span class="sxs-lookup"><span data-stu-id="76f0e-118">If you have an expensive computation that you want to execute only if the result is actually needed, you can assign the expensive function to a <xref:System.Func%601> delegate.</span></span> <span data-ttu-id="76f0e-119">直到存取值的屬性運算式中使用，然後會延遲執行函式。</span><span class="sxs-lookup"><span data-stu-id="76f0e-119">The execution of the function can then be delayed until a property that accesses the value is used in an expression.</span></span> <span data-ttu-id="76f0e-120">下一節中的範例示範如何執行這項操作。</span><span class="sxs-lookup"><span data-stu-id="76f0e-120">The example in the next section demonstrates how to do this.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="76f0e-121">下列範例示範如何使用未採用參數的委派。</span><span class="sxs-lookup"><span data-stu-id="76f0e-121">The following example demonstrates how to use a delegate that takes no parameters.</span></span> <span data-ttu-id="76f0e-122">此程式碼會建立名為泛型類別`LazyValue`具有型別的欄位<xref:System.Func%601>。</span><span class="sxs-lookup"><span data-stu-id="76f0e-122">This code creates a generic class named `LazyValue` that has a field of type <xref:System.Func%601>.</span></span> <span data-ttu-id="76f0e-123">此委派欄位可以儲存任何型別參數中傳回值的型別對應的函式的參考`LazyValue`物件。</span><span class="sxs-lookup"><span data-stu-id="76f0e-123">This delegate field can store a reference to any function that returns a value of the type that corresponds to the type parameter of the `LazyValue` object.</span></span> <span data-ttu-id="76f0e-124">`LazyValue`型別也有`Value`執行函式 （如果它已經尚未執行） 的屬性，並傳回產生的值。</span><span class="sxs-lookup"><span data-stu-id="76f0e-124">The `LazyValue` type also has a `Value` property that executes the function (if it has not already been executed) and returns the resulting value.</span></span>  
  
 <span data-ttu-id="76f0e-125">此範例會建立兩種方法，並具現化兩個`LazyValue`呼叫這些方法的 lambda 運算式的物件。</span><span class="sxs-lookup"><span data-stu-id="76f0e-125">The example creates two methods and instantiates two `LazyValue` objects with lambda expressions that call these methods.</span></span> <span data-ttu-id="76f0e-126">因為它們只需要呼叫方法的 lambda 運算式不使用參數。</span><span class="sxs-lookup"><span data-stu-id="76f0e-126">The lambda expressions do not take parameters because they just need to call a method.</span></span> <span data-ttu-id="76f0e-127">如輸出所示，會執行兩種方法時，才每個值`LazyValue`擷取物件。</span><span class="sxs-lookup"><span data-stu-id="76f0e-127">As the output shows, the two methods are executed only when the value of each `LazyValue` object is retrieved.</span></span>  
  
 [!code-csharp[System.Func~1#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Example.cs#5)]
 [!code-vb[System.Func~1#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Example.vb#5)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md">
      <span data-ttu-id="76f0e-128">Lambda 運算式 (C# 程式設計手冊)</span>
      <span class="sxs-lookup">
        <span data-stu-id="76f0e-128">Lambda Expressions (C# Programming Guide)</span>
      </span>
    </related>
    <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md">
      <span data-ttu-id="76f0e-129">Lambda 運算式</span>
      <span class="sxs-lookup">
        <span data-stu-id="76f0e-129">Lambda Expressions</span>
      </span>
    </related>
    <related type="Article" href="~/docs/csharp/programming-guide/delegates/index.md">
      <span data-ttu-id="76f0e-130">委派 (C# 程式設計手冊)</span>
      <span class="sxs-lookup">
        <span data-stu-id="76f0e-130">Delegates (C# Programming Guide)</span>
      </span>
    </related>
    <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/delegates/index.md">
      <span data-ttu-id="76f0e-131">在 Visual Basic 中的委派</span>
      <span class="sxs-lookup">
        <span data-stu-id="76f0e-131">Delegates in Visual Basic</span>
      </span>
    </related>
  </Docs>
</Type>