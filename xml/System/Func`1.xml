<Type Name="Func&lt;TResult&gt;" FullName="System.Func&lt;TResult&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1f2b5c1388338f890bf094d7848dc0b5cda8d4c3" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36431218" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate TResult Func&lt;out TResult&gt;();" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Func`1&lt;+ TResult&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Func`1" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Func(Of Out TResult)() As TResult " />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TResult&gt;&#xA;public delegate TResult Func();" />
  <TypeSignature Language="F#" Value="type Func&lt;'Result&gt; = delegate of unit -&gt; 'Result" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TResult">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters />
  <ReturnValue>
    <ReturnType>TResult</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="TResult">這個委派所封裝之方法的傳回值之類型。</typeparam>
    <summary>封裝沒有參數並傳回 <typeparamref name="TResult" /> 參數所指定之型別值的方法。</summary>
    <returns>這個委派所封裝之方法的傳回值。</returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用此委派来表示的方法，可以當做參數傳遞，而不必明確宣告自訂委派。 封裝的方法必須對應至這個委派所定義的方法簽章。 這表示封裝的方法必須有任何參數，而且必須傳回值。  
  
> [!NOTE]
>  若要參考的方法沒有參數並傳回`void`(或在 Visual Basic 中宣告為`Sub`而`Function`)，使用<xref:System.Action>改為委派。  
  
 當您使用<xref:System.Func%601>委派，您不需要明確定義委派所封裝的無參數的方法。 例如，下列程式碼明確宣告委派，名為`WriteMethod`和指派參考`OutputTarget.SendToFile`執行個體其委派執行個體的方法。  
  
 [!code-csharp[System.Func~1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Delegate.cs#1)]
 [!code-vb[System.Func~1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Delegate.vb#1)]  
  
 下列範例會具現化來簡化此程式碼<xref:System.Func%601>而不是明確地定義新的委派，並為其指派具名的方法的委派。  
  
 [!code-csharp[System.Func~1#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Func1.cs#2)]
 [!code-vb[System.Func~1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Func1.vb#2)]  
  
 您可以使用<xref:System.Func%601>委派與 C# 中的匿名方法，如下列範例所示。 (如匿名方法的簡介，請參閱[匿名方法](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md)。)  
  
 [!code-csharp[System.Func~1#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Anon.cs#3)]  
  
 您也可以指派 lambda 運算式給<xref:System.Func%602>委派視為相等，如下列範例所示。 (如需 lambda 運算式的簡介，請參閱[Lambda 運算式](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)和[Lambda 運算式](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)。)  
  
 [!code-csharp[System.Func~1#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Lambda.cs#4)]
 [!code-vb[System.Func~1#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Lambda.vb#4)]  
  
 Lambda 運算式的基礎類型是泛型的其中一個`Func`委派。 這可讓您能夠將 lambda 運算式當做參數傳遞而不明確地將它指派給委派。 特別是，因為許多方法中的型別<xref:System.Linq>命名空間包含`Func`參數，您可以傳遞這些方法的 lambda 運算式不明確具現化`Func`委派。  
  
 如果您有想要實際需要結果時，才執行的昂貴計算成本，您可以指派昂貴的函式<xref:System.Func%601>委派。 然後可以延遲函式的執行，直到存取值屬性用在運算式中。 下一節中的範例示範如何執行這項操作。  
  
   
  
## Examples  
 下列範例會示範如何使用未採用參數的委派。 此程式碼會建立名為泛型類別`LazyValue`具有類型的欄位<xref:System.Func%601>。 此委派欄位可以儲存的對應類型的值傳回型別參數的任何函式的參考`LazyValue`物件。 `LazyValue`型別也有`Value`執行函式 （如果它已經尚未執行） 的屬性，並傳回產生的值。  
  
 此範例建立兩種方法，會呈現兩個`LazyValue`呼叫這些方法的 lambda 運算式的物件。 因為它們只需要呼叫方法的 lambda 運算式不使用參數。 如輸出所示，兩種方法執行只有當每個值`LazyValue`擷取物件。  
  
 [!code-csharp[System.Func~1#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Example.cs#5)]
 [!code-vb[System.Func~1#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Example.vb#5)]  
  
 ]]></format>
    </remarks>
  </Docs>
</Type>