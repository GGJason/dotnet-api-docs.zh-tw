<Type Name="EventHandler" FullName="System.EventHandler">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3058760c0eb1545e669ee6bd61bb90901585ac3e" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30726972" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate void EventHandler(object sender, EventArgs e);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed EventHandler extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.EventHandler" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub EventHandler(sender As Object, e As EventArgs)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void EventHandler(System::Object ^ sender, EventArgs ^ e);" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="sender" Type="System.Object" />
    <Parameter Name="e" Type="System.EventArgs" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="sender">事件的來源。</param>
    <param name="e">不包含事件資料的物件。</param>
    <summary>代表處理不含事件資料之事件的方法。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 .NET Framework 中的事件模型根據具有與其處理常式連接事件的事件委派。 若要引發事件，需要兩個項目：  
  
-   識別將回應提供給事件的方法委派。  
  
-   （選擇性） 如果此事件提供資料保留事件資料的類別。  
  
 委派是可定義簽章，也就是傳回值類型和方法的參數清單類型的類型。 您可以使用委派類型來宣告變數可以參考任何具有相同的簽章與委派的方法。  
  
 標準事件處理常式委派的簽章定義沒有傳回值的方法。 這個方法的第一個參數的類型是<xref:System.Object>和參考引發事件的執行個體。 其第二個參數衍生自類型<xref:System.EventArgs>和保留事件資料。 如果事件不會產生事件資料，第二個參數是只值<xref:System.EventArgs.Empty?displayProperty=nameWithType>欄位。 否則，第二個參數都是衍生自<xref:System.EventArgs>，並提供任何欄位或屬性需要保存事件資料。  
  
 <xref:System.EventHandler>委派是預先定義的委派，特別是表示事件處理常式方法不會產生資料的事件。 如果您的事件會產生資料，您必須使用泛型<xref:System.EventHandler%601>委派類別。  
  
 若要處理事件的方法與關聯事件，加入事件委派的執行個體。 除非您移除委派，否則每當事件發生時就會呼叫事件處理常式。  
  
 如需事件處理常式委派的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下列範例會示範名為事件`ThresholdReached`相關聯<xref:System.EventHandler>委派。 指派給該方法<xref:System.EventHandler>呼叫委派`OnThresholdReached`方法。  
  
 [!code-cpp[EventsOverview#6](~/samples/snippets/cpp/VS_Snippets_CLR/eventsoverview/cpp/programwithdata.cpp#6)]
 [!code-csharp[EventsOverview#6](~/samples/snippets/csharp/VS_Snippets_CLR/eventsoverview/cs/programwithdata.cs#6)]
 [!code-vb[EventsOverview#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventsoverview/vb/module1withdata.vb#6)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.EventHandler`1" />
    <altmember cref="T:System.EventArgs" />
    <altmember cref="T:System.Delegate" />
  </Docs>
</Type>