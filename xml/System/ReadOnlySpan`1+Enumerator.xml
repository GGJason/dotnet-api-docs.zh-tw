<Type Name="ReadOnlySpan&lt;T&gt;+Enumerator" FullName="System.ReadOnlySpan&lt;T&gt;+Enumerator">
  <Metadata><Meta Name="ms.openlocfilehash" Value="21d3a84923de729b6e13f9da922c7da81ff2c0c2" /><Meta Name="ms.sourcegitcommit" Value="1654a92bac785a221098172d9cacd405ceaac9b7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="12/01/2018" /><Meta Name="ms.locfileid" Value="52736277" /></Metadata><TypeSignature Language="C#" Value="public struct ReadOnlySpan&lt;T&gt;.Enumerator" />
  <TypeSignature Language="ILAsm" Value=".class nested public sequential ansi sealed beforefieldinit ReadOnlySpan`1/Enumerator&lt;T&gt; extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.ReadOnlySpan`1.Enumerator" />
  <TypeSignature Language="VB.NET" Value="Public Structure ReadOnlySpan(Of T).Enumerator" />
  <TypeSignature Language="C++ CLI" Value="public: value class ReadOnlySpan&lt;T&gt;::Enumerator" />
  <TypeSignature Language="F#" Value="type ReadOnlySpan&lt;'T&gt;.Enumerator = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.1;netcore-2.2">
      <AttributeName>System.Runtime.CompilerServices.IsByRefLike</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>提供 <see cref="T:System.ReadOnlySpan`1" /> 項目的列舉值。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[C# [foreach](~/docs/csharp/language-reference/keywords/foreach-in.md) C# 語言和[每個...下一步](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md)建構在 Visual Basic 中的會隱藏列舉值的複雜度。 而不要直接操作列舉值，並使用`foreach`或`For Each...Next`建議。 

一開始，列舉值位於第一個元素之前<xref:System.ReadOnlySpan`1>。 在這個位置上，<xref:System.ReadOnlySpan`1.Enumerator.Current> 並未定義。 您必須呼叫<xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A>列舉值前進到中的第一個項目<xref:System.ReadOnlySpan`1>讀取的值之前<xref:System.ReadOnlySpan`1.Enumerator.Current>。

<xref:System.ReadOnlySpan`1.Enumerator.Current> 會傳回相同的值，直到<xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A>呼叫。 <xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A> 設定<xref:System.ReadOnlySpan`1.Enumerator.Current>中的下一個項目<xref:System.ReadOnlySpan`1>。

如果<xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A>通過結尾<xref:System.ReadOnlySpan`1>，<xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A>傳回`false`。 列舉值位於此狀態，後續呼叫<xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A>也會傳回`false`和<xref:System.ReadOnlySpan`1.Enumerator.Current>是未定義。 您無法設定<xref:System.ReadOnlySpan`1.Enumerator.Current>中的第一個項目<xref:System.ReadOnlySpan`1>一次; 您必須改為建立新的列舉值執行個體。 

雖然<xref:System.ReadOnlySpan`1>配置在堆疊上，在其上的基礎資料<xref:System.ReadOnlySpan`1>點，可能無法。 因此，列舉<xref:System.ReadOnlySpan`1>在本質上並非安全執行緒程序。 若要保證列舉期間的執行緒安全，您必須實作自己的同步處理。

不同於在.NET 中，某些其他列舉值結構<xref:System.ReadOnlySpan`1.Enumerator>:

- 不會實作<xref:System.Collections.IEnumerator>或<xref:System.Collections.Generic.IEnumerator`1>介面。 這是因為<xref:System.ReadOnlySpan`1.Enumerator>已[ref struct](~/docs/csharp/language-reference/keywords/ref.md#ref-struct-types)和無法進行 boxed 處理。

- 不包含`Reset`方法，可以將列舉值設定為在範圍中第一個項目之前，其初始位置。 (<xref:System.Collections.IEnumerator.Reset?displayProperty=nameWithType>方法必須實作此介面的一部分，但大部分的實作者會擲回例外狀況，或不提供任何實作。)]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public T&amp; Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance T&amp; modreq(System.Runtime.InteropServices.InAttribute) Current" />
      <MemberSignature Language="DocId" Value="P:System.ReadOnlySpan`1.Enumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As T&amp;" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T&amp; ^ Current { T&amp; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Current : T&amp;" Usage="System.ReadOnlySpan&lt;'T&gt;.Enumerator.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.1;netcore-2.2">
          <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T&amp;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得位於目前列舉值位置的項目參考。</summary>
        <value><see cref="T:System.ReadOnlySpan`1" /> 中位於目前列舉值位置的項目。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[`Current` 未定義下的下列條件： 

- 立即建立列舉值之後，將列舉值位於範圍中的第一個元素之前。 <xref:System.ReadOnlySpan`1.Enumerator.MoveNext*> 將列舉值前進至範圍的第一個項目，再讀取的值時必須呼叫`Current`。

- 在上次呼叫<xref:System.ReadOnlySpan`1.Enumerator.MoveNext*>傳回`false`，表示範圍結尾。 

`Current` 會傳回相同的值，直到<xref:System.ReadOnlySpan`1.Enumerator.MoveNext*>呼叫。 <xref:System.ReadOnlySpan`1.Enumerator.MoveNext*> 設定`Current`範圍中的下一個項目。]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.Enumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool MoveNext();" />
      <MemberSignature Language="F#" Value="member this.MoveNext : unit -&gt; bool" Usage="enumerator.MoveNext " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>將列舉值前移至 <see cref="System.ReadOnlySpan`1" /> 的下一個項目。</summary>
        <returns>如果列舉值成功前移至下一個項目，則為 `true`；如果已傳遞範圍結尾，則為 `false`。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[建立列舉值之後，將它放在範圍內，且第一個呼叫的第一個元素之前`MoveNext`將列舉值前移至範圍中的第一個項目。 

如果`MoveNext`傳遞的範圍內，結尾`MoveNext`傳回`false`。 列舉值位於此狀態，後續呼叫`MoveNext`也會傳回`false`。]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>