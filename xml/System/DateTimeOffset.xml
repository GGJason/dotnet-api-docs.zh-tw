<Type Name="DateTimeOffset" FullName="System.DateTimeOffset">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4f711cc8f71bb8775ef58a365edf5598b676fd1e" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58725711" /></Metadata><TypeSignature Language="C#" Value="public struct DateTimeOffset : IComparable, IComparable&lt;DateTimeOffset&gt;, IEquatable&lt;DateTimeOffset&gt;, IFormattable, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit DateTimeOffset extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;valuetype System.DateTimeOffset&gt;, class System.IEquatable`1&lt;valuetype System.DateTimeOffset&gt;, class System.IFormattable, class System.Runtime.Serialization.IDeserializationCallback, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.DateTimeOffset" />
  <TypeSignature Language="VB.NET" Value="Public Structure DateTimeOffset&#xA;Implements IComparable, IComparable(Of DateTimeOffset), IDeserializationCallback, IEquatable(Of DateTimeOffset), IFormattable, ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public value class DateTimeOffset : IComparable, IComparable&lt;DateTimeOffset&gt;, IEquatable&lt;DateTimeOffset&gt;, IFormattable, System::Runtime::Serialization::IDeserializationCallback, System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type DateTimeOffset = struct&#xA;    interface IFormattable&#xA;    interface ISerializable&#xA;    interface IDeserializationCallback" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;System.DateTimeOffset&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.DateTimeOffset&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.IDeserializationCallback</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netcore-3.0;netstandard-2.1">
      <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示一個時間點，通常以一天的日期和時間表示 (相對於國際標準時間)。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset>結構包含<xref:System.DateTime>值，連同<xref:System.DateTimeOffset.Offset%2A>屬性，定義目前差異<xref:System.DateTimeOffset>執行個體的日期和時間和 Coordinated Universal Time (UTC)。 它只會定義日期和時間相對於 UTC，因為<xref:System.DateTimeOffset>結構不包含`Kind`成員，做為<xref:System.DateTime>結構沒有。 它代表下午 11:59:59，年 12 月 31 到西元 9999年日的日期和時間的 UTC 範圍 12:00:00，年 1 月 1 日午夜 0001 P.m （中古時代） 的值 (C.E.)。  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]

 時間元件的<xref:System.DateTimeOffset>100 奈秒為單位，稱為次滴答聲，則會測量值，且在特定日期的刻度數午夜 12:00，年 1 月 1，西元 0001年 (C.E.)在 <xref:System.Globalization.GregorianCalendar>行事曆。 A<xref:System.DateTimeOffset>值一律表示在內容明確或預設的行事曆。 為能歸因於 leap 秒為單位的刻度未被納入的滴答總數。  
  
 雖然<xref:System.DateTimeOffset>值都含有一個位移，它不是完全時區感知的資料結構。 其中一個特性時區與 UTC 的時差時，它不會明確地識別時區。 執行多個時區會共用相同的 UTC 位移，不僅對單一時區位移變更如果觀察到日光節約時間。 這表示，只要<xref:System.DateTimeOffset>值會從其時區解除關聯，它可以不再清楚明確地連結回到其原始的時區。  
  
 因為<xref:System.DateTimeOffset>是一種結構，<xref:System.DateTimeOffset>已宣告但未初始化的物件包含每個成員欄位的預設值。 這表示，其<xref:System.DateTimeOffset.DateTime%2A>屬性設定為<xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType>及其<xref:System.DateTimeOffset.Offset%2A>屬性設定為<xref:System.TimeSpan.Zero?displayProperty=nameWithType>。  
  
 您可以建立新<xref:System.DateTimeOffset>藉由呼叫其建構函式，類似於的多載建構函式的多任何的載值<xref:System.DateTime>結構。 您也可以建立新<xref:System.DateTimeOffset>值指派給<xref:System.DateTime>值。 這是隱含的轉換;它不需要轉型運算子 （在 C# 中)，或呼叫轉換方法 （在 Visual Basic)。 您也可以初始化<xref:System.DateTimeOffset>值的字串表示的日期和時間，藉由呼叫靜態字串剖析方法，其包括許多<xref:System.DateTimeOffset.Parse%2A>， <xref:System.DateTimeOffset.ParseExact%2A>， <xref:System.DateTimeOffset.TryParse%2A>，和<xref:System.DateTimeOffset.TryParseExact%2A>。  
  
 成員<xref:System.DateTimeOffset>結構提供下列方面的功能：  
  
-   日期和時間運算。  
  
     您可以加入或減去日期或時間間隔，從特定<xref:System.DateTimeOffset>值。 使用算術運算<xref:System.DateTimeOffset>值，不同於具有<xref:System.DateTime>值，調整時間位移的差異時傳回的結果。 例如，下列程式碼會使用<xref:System.DateTime>減去目前的當地時間，從目前的 UTC 時間的變數。 程式碼接著會使用<xref:System.DateTimeOffset>變數，以執行相同的作業。 使用減法<xref:System.DateTime>值與 UTC，傳回本地時區的差異，同時使用減法<xref:System.DateTimeOffset>值傳回<xref:System.TimeSpan.Zero?displayProperty=nameWithType>。  
  
     [!code-csharp[System.DateTimeOffset.Type#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Type/cs/Type.cs#1)]
     [!code-vb[System.DateTimeOffset.Type#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Type/vb/Type.vb#1)]  
  
-   類型的轉換作業。  
  
     您可以將轉換<xref:System.DateTimeOffset>值來<xref:System.DateTimeOffset.DateTime%2A>值，反之亦然。  
  
-   時間的操作和擷取作業。  
  
     您可以擷取日期或時間<xref:System.DateTimeOffset>值。 您也可以擷取的特定值<xref:System.DateTimeOffset>元件，例如它的年份或其月份。  

   > [!NOTE]
   >  如果您正在使用刻度值，您想要轉換成某些其他時間間隔，例如分鐘或秒，您應該使用<xref:System.TimeSpan.TicksPerDay?displayProperty=nameWithType>， <xref:System.TimeSpan.TicksPerHour?displayProperty=nameWithType>， <xref:System.TimeSpan.TicksPerMinute?displayProperty=nameWithType>， <xref:System.TimeSpan.TicksPerSecond?displayProperty=nameWithType>，或<xref:System.TimeSpan.TicksPerMillisecond?displayProperty=nameWithType>常數，以執行轉換。 例如，若要新增的秒數表示所指定的刻度數<xref:System.DateTimeOffset.Second%2A>元件<xref:System.DateTimeOffset>的值，您可以使用運算式`dateValue.Second + nTicks/Timespan.TicksPerSecond`。  
  

-   日期和時間轉換。  
  
     您可以將任何轉換<xref:System.DateTimeOffset>到另一個值<xref:System.DateTimeOffset>值，代表另一個時區的時間相同的點。 不過，只是套用時區調整規則<xref:System.DateTimeOffset.ToLocalTime%2A>方法，它會將轉換<xref:System.DateTimeOffset>「 本機系統 」 區域中的日期和時間值。  
  
-   日期和時間的比較。  
  
     您可以判斷是否有任何特定<xref:System.DateTimeOffset>值是早於、 同於或晚於另一個<xref:System.DateTimeOffset>值。 執行比較之前，所有的值會轉換為 UTC。  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/standard/datetime/choosing-between-datetime.md">在 DateTime、DateTimeOffset、 TimeSpan 和  TimeZoneInfo 之間選擇</related>
    <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/NET-Framework-4-Formatting-9c4dae8d">範例：.NET Framework 4 格式化公用程式</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.DateTimeOffset" /> 結構的新執行個體。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="new DateTimeOffset : DateTime -&gt; DateTimeOffset" Usage="new System.DateTimeOffset dateTime" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">日期和時間。</param>
        <summary>使用指定的 <see cref="T:System.DateTime" /> 值，初始化 <see cref="T:System.DateTimeOffset" /> 結構的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個建構函式的行為取決於 windows 7<xref:System.DateTime.Kind%2A?displayProperty=nameWithType>屬性`dateTime`參數：  
  
-   如果值<xref:System.DateTime.Kind%2A?displayProperty=nameWithType>是<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>，則<xref:System.DateTimeOffset.DateTime%2A>的新執行個體的屬性設定為等於`dateTime`，而<xref:System.DateTimeOffset.Offset%2A>屬性設為等於<xref:System.TimeSpan.Zero>。  
  
-   如果值<xref:System.DateTime.Kind%2A?displayProperty=nameWithType>是<xref:System.DateTimeKind.Local?displayProperty=nameWithType>或<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>，則<xref:System.DateTimeOffset.DateTime%2A>的新執行個體的屬性設定為等於`dateTime`，和<xref:System.DateTimeOffset.Offset%2A>屬性設為等於本機系統的目前設定的時區位移。  
  
   
  
## Examples  
 下列範例說明如何的值<xref:System.DateTime.Kind%2A?displayProperty=nameWithType>屬性`dateTime`參數會影響此建構函式所傳回的日期和時間值。  
  
 [!code-csharp[System.DateTimeOffset.Constructors#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#1)]
 [!code-vb[System.DateTimeOffset.Constructors#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">套用位移所產生的國際標準時間 (UTC) 日期與時間早於 <see cref="F:System.DateTimeOffset.MinValue" />。  
  
-或- 
套用位移所產生的 UTC 日期與時間晚於 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
        <related type="Article" href="~/docs/standard/datetime/instantiating-a-datetimeoffset-object.md">具現化 DateTimeOffset 物件</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (DateTime dateTime, TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.DateTime dateTime, valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.DateTime,System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset(DateTime dateTime, TimeSpan offset);" />
      <MemberSignature Language="F#" Value="new DateTimeOffset : DateTime * TimeSpan -&gt; DateTimeOffset" Usage="new System.DateTimeOffset (dateTime, offset)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="dateTime">日期和時間。</param>
        <param name="offset">國際標準時間 (UTC) 的時間位移。</param>
        <summary>使用指定的 <see cref="T:System.DateTime" /> 值及位移，初始化 <see cref="T:System.DateTimeOffset" /> 結構的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個建構函式的行為部分取決於 windows 7<xref:System.DateTime.Kind%2A>屬性`dateTime`參數：  
  
-   如果值<xref:System.DateTime.Kind%2A>是<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>，值`offset`參數必須是 0 或<xref:System.ArgumentException>就會擲回。  
  
-   如果值<xref:System.DateTime.Kind%2A>是<xref:System.DateTimeKind.Local?displayProperty=nameWithType>，值`offset`該特定的日期，參數必須是等於當地時區的位移與 Coordinated Universal Time (UTC) 或<xref:System.ArgumentException>就會擲回。  
  
-   如果值<xref:System.DateTime.Kind%2A>已<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>，則`offset`參數可以具有任何有效的值。  
  
   
  
## Examples  
 下列範例示範如何初始化<xref:System.DateTimeOffset>物件的日期和時間與當地時區時事先不知道該時區的位移。  
  
 [!code-csharp[System.DateTimeOffset.Constructors#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#3)]
 [!code-vb[System.DateTimeOffset.Constructors#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="dateTime.Kind" /> 等於 <see cref="F:System.DateTimeKind.Utc" />，且 <paramref name="offset" /> 不等於零。  
  
-或- 
 <paramref name="dateTime.Kind" /> 等於 <see cref="F:System.DateTimeKind.Local" />，且 <paramref name="offset" /> 不等於該系統的當地時區位移。  
  
-或- 
 <paramref name="offset" /> 未指定以分鐘為單位。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" /> 小於 -14 小時或大於 14 小時。  
  
-或- 
 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 小於 <see cref="F:System.DateTimeOffset.MinValue" /> 或大於 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
        <related type="Article" href="~/docs/standard/datetime/instantiating-a-datetimeoffset-object.md">具現化 DateTimeOffset 物件</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (long ticks, TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 ticks, valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.Int64,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ticks As Long, offset As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset(long ticks, TimeSpan offset);" />
      <MemberSignature Language="F#" Value="new DateTimeOffset : int64 * TimeSpan -&gt; DateTimeOffset" Usage="new System.DateTimeOffset (ticks, offset)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ticks" Type="System.Int64" />
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="ticks">以 0001 年 1 月 1 日午夜 12:00:00 以來已經過的 100 奈秒間隔數表示的日期和時間。</param>
        <param name="offset">國際標準時間 (UTC) 的時間位移。</param>
        <summary>使用指定數目的刻度和位移，初始化 <see cref="T:System.DateTimeOffset" /> 結構的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一般情況下，嘗試呼叫<xref:System.DateTimeOffset.%23ctor%2A>建構函式來具現化<xref:System.DateTimeOffset>值的位移和本地時間以外，本地時間的區域就會擲回<xref:System.ArgumentException>。 您可以使用的這個多載<xref:System.DateTimeOffset>建構函式，若要解決這項限制。 下列範例會使用當地時間的刻度數，來具現化<xref:System.DateTimeOffset>其位移不一定代表當地時間的值：  
  
 [!code-csharp[System.DateTimeOffset.Constructors#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#4)]
 [!code-vb[System.DateTimeOffset.Constructors#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#4)]  
  
   
  
## Examples  
 下列範例會初始化<xref:System.DateTimeOffset>，位移為-5 任意日期 （在此案例中，2007 年 7 月 16 日到下午 1:32） 中使用的刻度數的物件。  
  
 [!code-csharp[System.DateTimeOffset.Constructors#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#2)]
 [!code-vb[System.DateTimeOffset.Constructors#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="offset" /> 未指定以分鐘為單位。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><see cref="P:System.DateTimeOffset.UtcDateTime" /> 屬性早於 <see cref="F:System.DateTimeOffset.MinValue" /> 或晚於 <see cref="F:System.DateTimeOffset.MaxValue" />。  
  
-或- 
 <paramref name="ticks" /> 小於 <see langword="DateTimeOffset.MinValue.Ticks" /> 或大於 <see langword="DateTimeOffset.MaxValue.Ticks" />。  
  
-或- 
 <paramref name="Offset" /> 小於 -14 小時或大於 14 小時。</exception>
        <related type="Article" href="~/docs/standard/datetime/instantiating-a-datetimeoffset-object.md">具現化 DateTimeOffset 物件</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (int year, int month, int day, int hour, int minute, int second, TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, offset As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset(int year, int month, int day, int hour, int minute, int second, TimeSpan offset);" />
      <MemberSignature Language="F#" Value="new DateTimeOffset : int * int * int * int * int * int * TimeSpan -&gt; DateTimeOffset" Usage="new System.DateTimeOffset (year, month, day, hour, minute, second, offset)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="year">年份 (1 到 9999)。</param>
        <param name="month">月份 (1 到 12)。</param>
        <param name="day">日 (1 到 <paramref name="month" /> 中的天數)。</param>
        <param name="hour">小時 (0 到 23)。</param>
        <param name="minute">分鐘 (0 到 59)。</param>
        <param name="second">秒數 (0 到 59)。</param>
        <param name="offset">國際標準時間 (UTC) 的時間位移。</param>
        <summary>使用指定的年、月、日、時、分、秒和位移，初始化 <see cref="T:System.DateTimeOffset" /> 結構的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個建構函式解譯`year`， `month`，和`day`為年、 月和西曆中的一天。 若要具現化<xref:System.DateTimeOffset>使用另一個日曆，呼叫中的年、 月和日值<xref:System.DateTimeOffset.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.TimeSpan%29>建構函式。  
  
   
  
## Examples  
 下列範例會具現化<xref:System.DateTimeOffset>物件使用<xref:System.DateTimeOffset.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.TimeSpan%29?displayProperty=nameWithType>建構函式多載。  
  
 [!code-csharp[System.DateTimeOffset.Constructors#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#5)]
 [!code-vb[System.DateTimeOffset.Constructors#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="offset" /> 不表示整數分鐘數。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" /> 小於 1 或大於 9999。  
  
-或- 
 <paramref name="month" /> 小於 1 或大於 12。  
  
-或- 
 <paramref name="day" /> 小於 1 或大於 <paramref name="month" /> 中的天數。  
  
-或- 
 <paramref name="hour" /> 小於 0 或大於 23。  
  
-或- 
 <paramref name="minute" /> 小於 0 或大於 59。  
  
-或- 
 <paramref name="second" /> 小於 0 或大於 59。  
  
-或- 
 <paramref name="offset" /> 小於 -14 小時或大於 14 小時。  
  
-或- 
<see cref="P:System.DateTimeOffset.UtcDateTime" /> 屬性早於 <see cref="F:System.DateTimeOffset.MinValue" /> 或晚於 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
        <related type="Article" href="~/docs/standard/datetime/instantiating-a-datetimeoffset-object.md">具現化 DateTimeOffset 物件</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (int year, int month, int day, int hour, int minute, int second, int millisecond, TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, millisecond As Integer, offset As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset(int year, int month, int day, int hour, int minute, int second, int millisecond, TimeSpan offset);" />
      <MemberSignature Language="F#" Value="new DateTimeOffset : int * int * int * int * int * int * int * TimeSpan -&gt; DateTimeOffset" Usage="new System.DateTimeOffset (year, month, day, hour, minute, second, millisecond, offset)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="year">年份 (1 到 9999)。</param>
        <param name="month">月份 (1 到 12)。</param>
        <param name="day">日 (1 到 <paramref name="month" /> 中的天數)。</param>
        <param name="hour">小時 (0 到 23)。</param>
        <param name="minute">分鐘 (0 到 59)。</param>
        <param name="second">秒數 (0 到 59)。</param>
        <param name="millisecond">毫秒 (0 到 999)。</param>
        <param name="offset">國際標準時間 (UTC) 的時間位移。</param>
        <summary>使用指定的年、月、日、時、分、秒、毫秒和位移，初始化 <see cref="T:System.DateTimeOffset" /> 結構的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個建構函式解譯`year`， `month`，和`day`為年、 月和西曆中的一天。 若要具現化<xref:System.DateTimeOffset>使用另一個日曆，呼叫中的年、 月和日值<xref:System.DateTimeOffset.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.TimeSpan%29>建構函式。  
  
   
  
## Examples  
 下列範例會具現化<xref:System.DateTimeOffset>物件使用<xref:System.DateTimeOffset.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.TimeSpan%29?displayProperty=nameWithType>建構函式多載。  
  
 [!code-csharp[System.DateTimeOffset.Constructors#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#7)]
 [!code-vb[System.DateTimeOffset.Constructors#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="offset" /> 不表示整數分鐘數。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" /> 小於 1 或大於 9999。  
  
-或- 
 <paramref name="month" /> 小於 1 或大於 12。  
  
-或- 
 <paramref name="day" /> 小於 1 或大於 <paramref name="month" /> 中的天數。  
  
-或- 
 <paramref name="hour" /> 小於 0 或大於 23。  
  
-或- 
 <paramref name="minute" /> 小於 0 或大於 59。  
  
-或- 
 <paramref name="second" /> 小於 0 或大於 59。  
  
-或- 
 <paramref name="millisecond" /> 小於 0 或大於 999。  
  
-或- 
 <paramref name="offset" /> 小於 -14 或大於 14。  
  
-或- 
<see cref="P:System.DateTimeOffset.UtcDateTime" /> 屬性早於 <see cref="F:System.DateTimeOffset.MinValue" /> 或晚於 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
        <related type="Article" href="~/docs/standard/datetime/instantiating-a-datetimeoffset-object.md">具現化 DateTimeOffset 物件</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (int year, int month, int day, int hour, int minute, int second, int millisecond, System.Globalization.Calendar calendar, TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, class System.Globalization.Calendar calendar, valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar,System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset(int year, int month, int day, int hour, int minute, int second, int millisecond, System::Globalization::Calendar ^ calendar, TimeSpan offset);" />
      <MemberSignature Language="F#" Value="new DateTimeOffset : int * int * int * int * int * int * int * System.Globalization.Calendar * TimeSpan -&gt; DateTimeOffset" Usage="new System.DateTimeOffset (year, month, day, hour, minute, second, millisecond, calendar, offset)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="month" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="day" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="hour" Type="System.Int32" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="minute" Type="System.Int32" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="second" Type="System.Int32" Index="5" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="millisecond" Type="System.Int32" Index="6" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" Index="7" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="offset" Type="System.TimeSpan" Index="8" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="year">年。</param>
        <param name="month">月份 (1 到 12)。</param>
        <param name="day">日 (1 到 <paramref name="month" /> 中的天數)。</param>
        <param name="hour">小時 (0 到 23)。</param>
        <param name="minute">分鐘 (0 到 59)。</param>
        <param name="second">秒數 (0 到 59)。</param>
        <param name="millisecond">毫秒 (0 到 999)。</param>
        <param name="calendar">用以解譯 <paramref name="year" />、<paramref name="month" /> 和 <paramref name="day" /> 的行事曆。</param>
        <param name="offset">國際標準時間 (UTC) 的時間位移。</param>
        <summary>使用指定之曆法的指定年、月、日、時、分、秒、毫秒和位移，初始化 <see cref="T:System.DateTimeOffset" /> 結構的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `year`， `month`， `day`， `hour`， `minute`， `second`，以及`millisecond`參數都會反映所指定的月曆中表示的值`calendar`參數。 如果這些值構成的日期和時間，無法使用此行事曆來表示，則會擲回例外狀況。  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]   

## Examples  
 下列範例會使用兩個執行個體<xref:System.Globalization.HebrewCalendar>類別和<xref:System.Globalization.HijriCalendar>類別來具現化<xref:System.DateTimeOffset>值。 使用個別的曆法和西曆主控台就會再顯示該日期。  
  
 [!code-csharp[System.DateTimeOffset.Constructors#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#8)]
 [!code-vb[System.DateTimeOffset.Constructors#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="offset" /> 不表示整數分鐘數。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="calendar" /> 不可以是 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" /> 小於 <paramref name="calendar" /> 參數的 <see langword="MinSupportedDateTime.Year" /> 或大於 <see langword="MaxSupportedDateTime.Year" />。  
  
-或- 
 <paramref name="month" /> 小於或大於 <paramref name="calendar" /> 中 <paramref name="year" /> 的月數。  
  
-或- 
 <paramref name="day" /> 小於 1 或大於 <paramref name="month" /> 中的天數。  
  
-或- 
 <paramref name="hour" /> 小於 0 或大於 23。  
  
-或- 
 <paramref name="minute" /> 小於 0 或大於 59。  
  
-或- 
 <paramref name="second" /> 小於 0 或大於 59。  
  
-或- 
 <paramref name="millisecond" /> 小於 0 或大於 999。  
  
-或- 
 <paramref name="offset" /> 小於 -14 小時或大於 14 小時。  
  
-或- 
<paramref name="year" />、<paramref name="month" /> 和 <paramref name="day" /> 參數無法以日期和時間值表示。  
  
-或- 
<see cref="P:System.DateTimeOffset.UtcDateTime" /> 屬性早於 <see cref="F:System.DateTimeOffset.MinValue" /> 或晚於 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
        <related type="Article" href="~/docs/standard/datetime/instantiating-a-datetimeoffset-object.md">具現化 DateTimeOffset 物件</related>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public DateTimeOffset Add (TimeSpan timeSpan);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset Add(valuetype System.TimeSpan timeSpan) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Add(System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset Add(TimeSpan timeSpan);" />
      <MemberSignature Language="F#" Value="member this.Add : TimeSpan -&gt; DateTimeOffset" Usage="dateTimeOffset.Add timeSpan" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeSpan" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeSpan"><see cref="T:System.TimeSpan" /> 物件，表示正的或負的時間間隔。</param>
        <summary>傳回新的 <see cref="T:System.DateTimeOffset" /> 物件，將這個執行個體的值加上指定的時間間隔。</summary>
        <returns>物件，其值為目前 <see cref="T:System.DateTimeOffset" /> 物件所表示之日期和時間加上 <paramref name="timeSpan" /> 所表示之時間間隔的總和。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用<xref:System.DateTimeOffset.Add%2A>方法來加入單一作業中的一種以上的時間間隔 （天、 小時、 分鐘、 秒或毫秒為單位）。 這個方法的行為等同於加法運算子。 <xref:System.DateTimeOffset>結構也支援特殊的新增方法 (例如<xref:System.DateTimeOffset.AddDays%2A>， <xref:System.DateTimeOffset.AddHours%2A>，和<xref:System.DateTimeOffset.AddMinutes%2A>) 的每個時間間隔。  
  
> [!NOTE]
>  這個方法會傳回新<xref:System.DateTimeOffset>物件。 它不會修改目前物件的值加上`timeSpan`其日期和時間。  
  
 <xref:System.DateTimeOffset.Add%2A>方法不會影響目前的值<xref:System.DateTimeOffset>物件的<xref:System.DateTimeOffset.Offset%2A>屬性。  
  
 因為<xref:System.DateTimeOffset>物件不代表特定的時區，時間與日期<xref:System.DateTimeOffset.Add%2A>方法不會考慮特定時區的調整規則執行的日期和時間算術時。  
  
 如果`timeSpan`參數是`null`，這個方法會傳回原始項目的值<xref:System.DateTimeOffset>保持不變的物件。  
  
   
  
## Examples  
 下列範例會建立陣列<xref:System.TimeSpan>表示目的地之間的班機時間的物件。 <xref:System.DateTimeOffset.Add%2A>方法接著會將這些時間以<xref:System.DateTimeOffset>代表班機的起飛初始時間的物件。 結果會反映已排程的抵達時間，在每個目的地。  
  
 [!code-csharp[System.DateTimeOffset.Methods#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#1)]
 [!code-vb[System.DateTimeOffset.Methods#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTimeOffset" /> 值小於 <see cref="F:System.DateTimeOffset.MinValue" />。  
  
-或- 
產生的 <see cref="T:System.DateTimeOffset" /> 值大於 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
        <altmember cref="M:System.DateTimeOffset.op_Addition(System.DateTimeOffset,System.TimeSpan)" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">使用日期和時間執行算術運算</related>
      </Docs>
    </Member>
    <Member MemberName="AddDays">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddDays (double days);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddDays(float64 days) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddDays(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddDays (days As Double) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddDays(double days);" />
      <MemberSignature Language="F#" Value="member this.AddDays : double -&gt; DateTimeOffset" Usage="dateTimeOffset.AddDays days" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="days" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="days">整數和小數的天數。 可以是負數或正數。</param>
        <summary>傳回新的 <see cref="T:System.DateTimeOffset" /> 物件，將這個執行個體的值加上指定的整數和小數天數。</summary>
        <returns>物件，其值為目前 <see cref="T:System.DateTimeOffset" /> 物件所表示之日期和時間加上 <paramref name="days" /> 所表示之天數的總和。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 小數點後的部分`days`參數是一天的分數部分。 比方說，4.5 就相當於 4 天、 12 小時，0 分 0 秒，0 毫秒。 `days`參數四捨五入至最接近的毫秒數。  
  
> [!NOTE]
>  這個方法會傳回新<xref:System.DateTimeOffset>物件。 它不會修改目前物件的值加上`days`其日期和時間。  
  
 因為<xref:System.DateTimeOffset>物件不代表特定的時區，時間與日期<xref:System.DateTimeOffset.AddDays%2A>方法不會考慮特定時區的調整規則執行的日期和時間算術時。  
  
 將小於一天的時間間隔轉換成一小部分可能遺失有效位數。 如果這是有問題，您可以使用<xref:System.DateTimeOffset.Add%2A>方法，它可讓您在單一方法呼叫中指定的時間間隔的多個類型，並讓您不需要將時間間隔轉換為一天的小數部分。  
  
   
  
## Examples  
 下列範例會使用<xref:System.DateTimeOffset.AddDays%2A>列出日期落在星期一、 一週開始日工作，在 2008 年 3 月中的方法。  
  
 [!code-csharp[System.DateTimeOffset.Methods#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#2)]
 [!code-vb[System.DateTimeOffset.Methods#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTimeOffset" /> 值小於 <see cref="F:System.DateTimeOffset.MinValue" />。  
  
-或- 
產生的 <see cref="T:System.DateTimeOffset" /> 值大於 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="AddHours">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddHours (double hours);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddHours(float64 hours) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddHours(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddHours (hours As Double) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddHours(double hours);" />
      <MemberSignature Language="F#" Value="member this.AddHours : double -&gt; DateTimeOffset" Usage="dateTimeOffset.AddHours hours" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hours" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="hours">整數和小數的時數。 可以是負數或正數。</param>
        <summary>傳回新的 <see cref="T:System.DateTimeOffset" /> 物件，這個物件將這個執行個體的值加上指定的整數和小數時數。</summary>
        <returns>物件，其值為目前 <see cref="T:System.DateTimeOffset" /> 物件所代表之日期和時間加上 <paramref name="hours" /> 所代表之時數的總和。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 小數點後的部分`hours`參數是一小時的小數部分。 比方說，4.5 就相當於 4 小時 30 分鐘，0 秒，0 毫秒。 `hours`參數四捨五入至最接近的毫秒數。  
  
> [!NOTE]
>  這個方法會傳回新<xref:System.DateTimeOffset>物件。 它不會修改目前物件的值加上`hours`其日期和時間。  
  
 因為<xref:System.DateTimeOffset>物件不代表特定的時區，時間與日期<xref:System.DateTimeOffset.AddHours%2A>方法不會考慮特定時區的調整規則執行的日期和時間算術時。  
  
 將小於一小時的時間間隔轉換成一小部分可能遺失有效位數。 （例如，一分鐘的時間是 0.01666 一小時的時間）。如果這是有問題，您可以使用<xref:System.DateTimeOffset.Add%2A>方法，它可讓您在單一方法呼叫中指定的時間間隔的多個類型，並讓您不需要將時間間隔轉換成一小時的小數部分。  
  
   
  
## Examples  
 下列範例會使用<xref:System.DateTimeOffset.AddHours%2A>方法來列出工作的開始時間移位特定週有每日的兩個八小時值班辦事處。  
  
 [!code-csharp[System.DateTimeOffset.Methods#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#3)]
 [!code-vb[System.DateTimeOffset.Methods#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTimeOffset" /> 值小於 <see cref="F:System.DateTimeOffset.MinValue" />。  
  
-或- 
產生的 <see cref="T:System.DateTimeOffset" /> 值大於 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">使用日期和時間執行算術運算</related>
      </Docs>
    </Member>
    <Member MemberName="AddMilliseconds">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddMilliseconds (double milliseconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddMilliseconds(float64 milliseconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddMilliseconds(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMilliseconds (milliseconds As Double) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddMilliseconds(double milliseconds);" />
      <MemberSignature Language="F#" Value="member this.AddMilliseconds : double -&gt; DateTimeOffset" Usage="dateTimeOffset.AddMilliseconds milliseconds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="milliseconds" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="milliseconds">整數和小數的毫秒數。 可以是負數或正數。</param>
        <summary>傳回新的 <see cref="T:System.DateTimeOffset" /> 物件，將這個執行個體的值加上指定的毫秒數。</summary>
        <returns>物件，其值為目前 <see cref="T:System.DateTimeOffset" /> 物件所表示之日期和時間加上 <paramref name="milliseconds" /> 所表示之整數毫秒數的總和。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 小數點後的部分`milliseconds`參數是 1 毫秒的小數部分。 比方說，4.5 就相當於 4 毫秒以及 5000 次滴答聲，其中一個的毫秒數等於 10000 刻度。 不過，`milliseconds`四捨五入到最接近的毫秒，.5 的或更新版本的所有值會都無條件進位。  
  
> [!NOTE]
>  這個方法會傳回新<xref:System.DateTimeOffset>物件。 它不會修改目前物件的值加上`milliseconds`其日期和時間。  
  
 因為<xref:System.DateTimeOffset>物件不代表特定的時區，時間與日期<xref:System.DateTimeOffset.AddMilliseconds%2A>方法不會考慮特定時區的調整規則執行的日期和時間算術時。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTimeOffset" /> 值小於 <see cref="F:System.DateTimeOffset.MinValue" />。  
  
-或- 
產生的 <see cref="T:System.DateTimeOffset" /> 值大於 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">使用日期和時間執行算術運算</related>
      </Docs>
    </Member>
    <Member MemberName="AddMinutes">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddMinutes (double minutes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddMinutes(float64 minutes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddMinutes(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMinutes (minutes As Double) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddMinutes(double minutes);" />
      <MemberSignature Language="F#" Value="member this.AddMinutes : double -&gt; DateTimeOffset" Usage="dateTimeOffset.AddMinutes minutes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="minutes" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="minutes">整數和小數的分鐘數。 可以是負數或正數。</param>
        <summary>傳回新的 <see cref="T:System.DateTimeOffset" /> 物件，將這個執行個體的值加上指定的整數和小數分鐘數。</summary>
        <returns>物件，其值為目前 <see cref="T:System.DateTimeOffset" /> 物件所表示之日期和時間加上 <paramref name="minutes" /> 所表示之分鐘數的總和。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 小數點後的部分`minutes`參數是一分鐘的小數部分。 比方說，4.5 就相當於 4 分 30 秒，0 毫秒。 `minutes`參數四捨五入至最接近的毫秒數。  
  
> [!NOTE]
>  這個方法會傳回新<xref:System.DateTimeOffset>物件。 它不會修改目前物件的值加上`minutes`其日期和時間。  
  
 因為<xref:System.DateTimeOffset>物件不代表特定的時區，時間與日期<xref:System.DateTimeOffset.AddMinutes%2A>方法不會考慮特定時區的調整規則執行的日期和時間算術時。  
  
 將少於一分鐘的時間間隔轉換成一小部分可能遺失有效位數。 （例如，一秒是 1/60 的 0.01666 一分鐘）。如果這是有問題，您可以使用<xref:System.DateTimeOffset.Add%2A>方法，它可讓您在單一方法呼叫中指定的時間間隔的多個類型，並讓您不需要將時間間隔轉換為一分鐘的小數部分。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTimeOffset" /> 值小於 <see cref="F:System.DateTimeOffset.MinValue" />。  
  
-或- 
產生的 <see cref="T:System.DateTimeOffset" /> 值大於 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">使用日期和時間執行算術運算</related>
      </Docs>
    </Member>
    <Member MemberName="AddMonths">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddMonths (int months);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddMonths(int32 months) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddMonths(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMonths (months As Integer) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddMonths(int months);" />
      <MemberSignature Language="F#" Value="member this.AddMonths : int -&gt; DateTimeOffset" Usage="dateTimeOffset.AddMonths months" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="months" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="months">整數月份數。 可以是負數或正數。</param>
        <summary>傳回新的 <see cref="T:System.DateTimeOffset" /> 物件，將這個執行個體的值加上指定的月數。</summary>
        <returns>物件，其值為目前 <see cref="T:System.DateTimeOffset" /> 物件所表示之日期和時間加上 <paramref name="months" /> 所表示之月份數的總和。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不同於大部分其他的方法，將單一的時間間隔單位 （例如分鐘甚至幾天） 加入至日期和時間值，<xref:System.DateTimeOffset.AddMonths%2A>無法讓您將在當月的小數部分。 若要加入包含其他時間單位，除了幾個月的時間<xref:System.DateTimeOffset>物件，請使用<xref:System.DateTimeOffset.Add%2A>方法。  
  
> [!NOTE]
>  這個方法會傳回新<xref:System.DateTimeOffset>物件。 它不會修改目前物件的值加上`months`其日期和時間。  
  
   
  
## Examples  
 下列範例會使用<xref:System.DateTimeOffset.AddMonths%2A>方法，以顯示每一季的 2007 年的開始日期。  
  
 [!code-csharp[System.DateTimeOffset.Methods#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#4)]
 [!code-vb[System.DateTimeOffset.Methods#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTimeOffset" /> 值小於 <see cref="F:System.DateTimeOffset.MinValue" />。  
  
-或- 
產生的 <see cref="T:System.DateTimeOffset" /> 值大於 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="AddSeconds">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddSeconds (double seconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddSeconds(float64 seconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddSeconds(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddSeconds (seconds As Double) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddSeconds(double seconds);" />
      <MemberSignature Language="F#" Value="member this.AddSeconds : double -&gt; DateTimeOffset" Usage="dateTimeOffset.AddSeconds seconds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="seconds" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="seconds">整數和小數的秒數。 可以是負數或正數。</param>
        <summary>傳回新的 <see cref="T:System.DateTimeOffset" /> 物件，將這個執行個體的值加上指定的整數和小數秒數。</summary>
        <returns>物件，其值為目前 <see cref="T:System.DateTimeOffset" /> 物件所表示之日期和時間加上 <paramref name="seconds" /> 所表示之秒數的總和。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 小數點後的部分`seconds`參數是一秒的小數部分。 下表中，會顯示一秒鐘的小數部分的值。  
  
|第二個值|對等項目|  
|------------------|----------------|  
|.1 的第二個|100 毫秒|  
|0.1 秒|10 毫秒|  
|.001 秒|1 毫秒|  
  
 `seconds`參數四捨五入至最接近的毫秒數。  
  
> [!NOTE]
>  這個方法會傳回新<xref:System.DateTimeOffset>物件。 它不會修改目前物件的值加上`minutes`其日期和時間。  
  
 因為<xref:System.DateTimeOffset>物件不代表特定的時區，時間與日期<xref:System.DateTimeOffset.AddSeconds%2A>方法不會考慮特定時區的調整規則執行的日期和時間算術時。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTimeOffset" /> 值小於 <see cref="F:System.DateTimeOffset.MinValue" />。  
  
-或- 
產生的 <see cref="T:System.DateTimeOffset" /> 值大於 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">使用日期和時間執行算術運算</related>
      </Docs>
    </Member>
    <Member MemberName="AddTicks">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddTicks (long ticks);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddTicks(int64 ticks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddTicks(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddTicks (ticks As Long) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddTicks(long ticks);" />
      <MemberSignature Language="F#" Value="member this.AddTicks : int64 -&gt; DateTimeOffset" Usage="dateTimeOffset.AddTicks ticks" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ticks" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="ticks">100 毫微秒刻度數。 可以是負數或正數。</param>
        <summary>傳回新的 <see cref="T:System.DateTimeOffset" /> 物件，將這個執行個體的值加上指定的刻度數。</summary>
        <returns>物件，其值為目前 <see cref="T:System.DateTimeOffset" /> 物件所表示之日期和時間加上 <paramref name="ticks" /> 所表示之刻度數的總和。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 刻度表示 100 奈秒或 1-10 的第二個。 因為刻度是非常小且更精確的時間間隔，就可以表示任何較大的時間單位的刻度，而不會遺失有效位數的數字。  
  
> [!NOTE]
>  這個方法會傳回新<xref:System.DateTimeOffset>物件。 它不會修改目前物件的值加上`minutes`其日期和時間。  
  
 下表將列出在特定時間間隔的刻度數。  
  
|時間間隔|刻度數|  
|-------------------|---------------------|  
|Second|10,000,000|  
|Minute|600,000,000|  
|Hour|36,000,000,000|  
|Day|864,000,000,000|  
|一週|6,048,000,000,000|  
|月份|取決於中月份的天數。|  
|非閏年|315,360,000,000,000|  
|閏年|316,224,000,000,000|  
  
 因為<xref:System.DateTimeOffset>物件不代表特定的時區，時間與日期<xref:System.DateTimeOffset.AddTicks%2A>方法不會考慮特定時區的調整規則執行的日期和時間算術時。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTimeOffset" /> 值小於 <see cref="F:System.DateTimeOffset.MinValue" />。  
  
-或- 
產生的 <see cref="T:System.DateTimeOffset" /> 值大於 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">使用日期和時間執行算術運算</related>
      </Docs>
    </Member>
    <Member MemberName="AddYears">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddYears (int years);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddYears(int32 years) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddYears(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddYears (years As Integer) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddYears(int years);" />
      <MemberSignature Language="F#" Value="member this.AddYears : int -&gt; DateTimeOffset" Usage="dateTimeOffset.AddYears years" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="years" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="years">年份數。 可以是負數或正數。</param>
        <summary>傳回新的 <see cref="T:System.DateTimeOffset" /> 物件，將這個執行個體的值加上指定的年數。</summary>
        <returns>物件，其值為目前 <see cref="T:System.DateTimeOffset" /> 物件所表示之日期及時間加上 <paramref name="years" /> 所表示之年份數的總和。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不同於大部分其他的方法，將單一的時間間隔單位 （例如分鐘甚至幾天） 加入至日期和時間值，<xref:System.DateTimeOffset.AddYears%2A>無法讓您新增一年的小數部分。 若要加入的其他時間單位，除了 年到未包含的時間<xref:System.DateTimeOffset>物件，請使用<xref:System.DateTimeOffset.Add%2A>方法。  
  
> [!NOTE]
>  這個方法會傳回新<xref:System.DateTimeOffset>物件。 它不會修改目前物件的值加上`months`其日期和時間。  
  
   
  
## Examples  
 在美國，驅動程式的授權無法發行給人員 16 歲。 下列範例會顯示最新的可能日期必須以合法發出駕駛執照誕生個人所在。  
  
 [!code-csharp[System.DateTimeOffset.Methods#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#6)]
 [!code-vb[System.DateTimeOffset.Methods#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTimeOffset" /> 值小於 <see cref="F:System.DateTimeOffset.MinValue" />。  
  
-或- 
產生的 <see cref="T:System.DateTimeOffset" /> 值大於 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (DateTimeOffset first, DateTimeOffset second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(valuetype System.DateTimeOffset first, valuetype System.DateTimeOffset second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Compare(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (first As DateTimeOffset, second As DateTimeOffset) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(DateTimeOffset first, DateTimeOffset second);" />
      <MemberSignature Language="F#" Value="static member Compare : DateTimeOffset * DateTimeOffset -&gt; int" Usage="System.DateTimeOffset.Compare (first, second)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="first" Type="System.DateTimeOffset" />
        <Parameter Name="second" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="first">要比較的第一個物件。</param>
        <param name="second">要比較的第二個物件。</param>
        <summary>比較兩個 <see cref="T:System.DateTimeOffset" /> 物件，並指出第一個日期是早於、等於還是晚於第二個日期。</summary>
        <returns>帶正負號的整數，表示 <paramref name="first" /> 參數的值是早於、晚於或等於 <paramref name="second" /> 參數的值，如下表所示。  
  
 <list type="table"><listheader><term> 傳回值 
 </term><description> 意義 
 </description></listheader><item><term> 小於零 
 </term><description><paramref name="first" /> 早於 <paramref name="second" />。  
  
 </description></item><item><term> 零 
 </term><description><paramref name="first" /> 等於 <paramref name="second" />。  
  
 </description></item><item><term> 大於零 
 </term><description><paramref name="first" /> 晚於 <paramref name="second" />。  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在執行比較，方法會將轉換同時`first`而`second`參數為 Coordinated Universal Time (UTC) 再執行比較。 此方法相當於下列：  
  
 [!code-csharp[System.DateTimeOffset.Syntax#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#1)]
 [!code-vb[System.DateTimeOffset.Syntax#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#1)]  
  
 亦即<xref:System.DateTimeOffset.Compare%2A>方法會判斷兩個<xref:System.DateTimeOffset>物件代表單一點的時間。 它會直接比較或都不日期和時間位移。  
  
   
  
## Examples  
 下列範例說明如何呼叫<xref:System.DateTimeOffset.Compare%2A>方法來比較<xref:System.DateTimeOffset>物件。  
  
 [!code-csharp[System.DateTimeOffset.Methods#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods2.cs#7)]
 [!code-vb[System.DateTimeOffset.Methods#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods2.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (DateTimeOffset other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(valuetype System.DateTimeOffset other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.CompareTo(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (other As DateTimeOffset) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(DateTimeOffset other);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : DateTimeOffset -&gt; int&#xA;override this.CompareTo : DateTimeOffset -&gt; int" Usage="dateTimeOffset.CompareTo other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable`1.CompareTo(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="other">要與目前 <see cref="T:System.DateTimeOffset" /> 物件比較的物件。</param>
        <summary>將目前 <see cref="T:System.DateTimeOffset" /> 物件與指定的 <see cref="T:System.DateTimeOffset" /> 物件進行比較，並指示目前物件是早於、等於還是晚於第二個 <see cref="T:System.DateTimeOffset" /> 物件。</summary>
        <returns>帶正負號的整數，表示目前 <see cref="T:System.DateTimeOffset" /> 物件和 <paramref name="other" /> 之間的關係，如下表所示。  
  
 <list type="table"><listheader><term> 傳回值 
 </term><description> 描述 
 </description></listheader><item><term> 小於零 
 </term><description> 目前 <see cref="T:System.DateTimeOffset" /> 物件早於 <paramref name="other" />。  
  
 </description></item><item><term> 零 
 </term><description> 目前 <see cref="T:System.DateTimeOffset" /> 物件等於 <paramref name="other" />。  
  
 </description></item><item><term> 大於零。  
  
 </term><description> 目前 <see cref="T:System.DateTimeOffset" /> 物件晚於 <paramref name="other" />。  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會比較<xref:System.DateTimeOffset>比較的物件及其<xref:System.DateTimeOffset.UtcDateTime%2A>值; 也就是說，它會判斷兩個物件是否代表的時間，單一的點，並指出目前的物件是否早於、 晚於或等於`other`參數。  
  
   
  
## Examples  
 下列範例說明如何呼叫<xref:System.DateTimeOffset.CompareTo%2A>方法來比較<xref:System.DateTimeOffset>物件。  
  
 [!code-csharp[System.DateTimeOffset.Methods#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods3.cs#8)]
 [!code-vb[System.DateTimeOffset.Methods#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods3.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Date">
      <MemberSignature Language="C#" Value="public DateTime Date { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime Date" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Date" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Date As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime Date { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.Date : DateTime" Usage="System.DateTimeOffset.Date" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得 <see cref="T:System.DateTime" /> 值，這個值表示目前 <see cref="T:System.DateTimeOffset" /> 物件的日期元件。</summary>
        <value><see cref="T:System.DateTime" /> 值，這個值表示目前 <see cref="T:System.DateTimeOffset" /> 物件的日期元件。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個屬性中移除的時間元件的任何重要的一部分<xref:System.DateTimeOffset>物件，並只會傳回其重要日期元件。 比方說，如果<xref:System.DateTimeOffset>物件的日期和時間值為"1/12/07 下午 4 點 01 + 7:30"，屬性會傳回<xref:System.DateTime>值"1/12/07 12:00: 00AM"。 <xref:System.DateTime>然後可以使用任何標準或自訂格式規範顯示日期只顯示值。 （請參閱圖範例 > 一節。）  
  
 值<xref:System.DateTime.Kind%2A?displayProperty=nameWithType>屬性傳回之<xref:System.DateTime>物件永遠都是<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>。 值不影響<xref:System.DateTimeOffset.Offset%2A>屬性。  
  
 若要顯示日期，但沒有時間元件，您也可以使用"D"或者"d"格式規範;如需圖例，請參閱 < 範例 > 一節。  
  
   
  
## Examples  
 下列範例會擷取的值<xref:System.DateTimeOffset.Date%2A>特定日期的屬性。 接著會使用某些日期標準和自訂格式規範在主控台顯示該值。  
  
 [!code-csharp[System.DateTimeOffset.Properties#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#1)]
 [!code-vb[System.DateTimeOffset.Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準 DateTime 格式字串</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">自訂 DateTime 格式字串</related>
      </Docs>
    </Member>
    <Member MemberName="DateTime">
      <MemberSignature Language="C#" Value="public DateTime DateTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime DateTime" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.DateTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DateTime As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime DateTime { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.DateTime : DateTime" Usage="System.DateTimeOffset.DateTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得 <see cref="T:System.DateTime" /> 值，這個值表示目前 <see cref="T:System.DateTimeOffset" /> 物件的日期和時間。</summary>
        <value>目前 <see cref="T:System.DateTimeOffset" /> 物件的日期和時間。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.DateTime%2A>的值不會影響屬性<xref:System.DateTimeOffset.Offset%2A>屬性。  
  
 這個屬性會傳回日期和時間元件<xref:System.DateTimeOffset>物件，使用於執行<xref:System.DateTimeOffset>到<xref:System.DateTime>轉換。 比方說，如果<xref:System.DateTimeOffset>物件的日期和時間值為"1/12/07 下午 4 點 01 + 7:30"，屬性傳回的日期 」 1/12/07 下午 4 點 01 」。  
  
 值<xref:System.DateTime.Kind%2A?displayProperty=nameWithType>屬性傳回之<xref:System.DateTime>物件<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>。  
  
   
  
## Examples  
 下列範例示範如何將<xref:System.DateTimeOffset.DateTime%2A>屬性將傳回的時間轉換<xref:System.DateTimeOffset.Now%2A>並<xref:System.DateTimeOffset.UtcNow%2A>屬性，以<xref:System.DateTime>值。  
  
 [!code-csharp[System.DateTimeOffset.Properties#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#2)]
 [!code-vb[System.DateTimeOffset.Properties#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.LocalDateTime" />
        <related type="Article" href="~/docs/standard/datetime/converting-between-datetime-and-offset.md">在 DateTime 和 DateTimeOffset 之間轉換</related>
      </Docs>
    </Member>
    <Member MemberName="Day">
      <MemberSignature Language="C#" Value="public int Day { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Day" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Day" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Day As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Day { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Day : int" Usage="System.DateTimeOffset.Day" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得由目前 <see cref="T:System.DateTimeOffset" /> 物件所表示之月份中的第幾天。</summary>
        <value>目前 <see cref="T:System.DateTimeOffset" /> 物件的天數元件，以 1 到 31 之間的數值表示。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.Day%2A>的值不會影響屬性<xref:System.DateTimeOffset.Offset%2A>屬性。  
  
 您也可以建立的字串表示法<xref:System.DateTimeOffset>藉由呼叫物件的日元件<xref:System.DateTimeOffset.ToString%2A>方法使用"d"或"dd"自訂格式規範。  
  
   
  
## Examples  
 下列範例顯示的日元件<xref:System.DateTimeOffset>方式有三種物件：  
  
-   所擷取的值<xref:System.DateTimeOffset.Day%2A>屬性。  
  
-   藉由呼叫<xref:System.DateTimeOffset.ToString%28System.String%29>方法使用"d"格式規範。  
  
-   藉由呼叫<xref:System.DateTimeOffset.ToString%28System.String%29>方法與"dd"格式規範。  
  
 [!code-csharp[System.DateTimeOffset.Properties#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#10)]
 [!code-vb[System.DateTimeOffset.Properties#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DayOfWeek">
      <MemberSignature Language="C#" Value="public DayOfWeek DayOfWeek { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DayOfWeek DayOfWeek" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.DayOfWeek" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DayOfWeek As DayOfWeek" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DayOfWeek DayOfWeek { DayOfWeek get(); };" />
      <MemberSignature Language="F#" Value="member this.DayOfWeek : DayOfWeek" Usage="System.DateTimeOffset.DayOfWeek" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DayOfWeek</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得由目前 <see cref="T:System.DateTimeOffset" /> 物件所表示的星期幾。</summary>
        <value>一個列舉值，表示目前 <see cref="T:System.DateTimeOffset" /> 物件的星期幾。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 中之常值<xref:System.DayOfWeek>列舉型別的範圍從<xref:System.DayOfWeek.Sunday?displayProperty=nameWithType>至<xref:System.DayOfWeek.Saturday?displayProperty=nameWithType>。 如果轉型成整數，其值的範圍是從零 (表示<xref:System.DayOfWeek.Sunday?displayProperty=nameWithType>) 到 6 (表示<xref:System.DayOfWeek.Saturday?displayProperty=nameWithType>)。  
  
 您也可以使用"D"格式規範或"dddd"自訂格式規範來顯示特定日期的工作日名稱。 例如：  
  
 [!code-csharp[System.DateTimeOffset.Properties#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#4)]
 [!code-vb[System.DateTimeOffset.Properties#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#4)]  
  
 請注意，字串就會傳回藉由呼叫`ToString`方法的<xref:System.DayOfWeek>列舉的成員，這個屬性會傳回未當地語系化。 若要擷取字串，包含目前文化特性或特定文化特性的工作日名稱，請呼叫<xref:System.DateTimeOffset.ToString%2A>方法使用"dddd"自訂格式規範。 例如，下列程式碼會顯示日期，使用的工作日名稱`fr-fr`文化特性。  
  
 [!code-csharp[System.DateTimeOffset.Properties#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#5)]
 [!code-vb[System.DateTimeOffset.Properties#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#5)]  
  
   
  
## Examples  
 下列範例會顯示 2008 年的每個月的第一天的工作日名稱。  
  
 [!code-csharp[System.DateTimeOffset.Properties#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#3)]
 [!code-vb[System.DateTimeOffset.Properties#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DayOfYear">
      <MemberSignature Language="C#" Value="public int DayOfYear { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 DayOfYear" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.DayOfYear" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DayOfYear As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int DayOfYear { int get(); };" />
      <MemberSignature Language="F#" Value="member this.DayOfYear : int" Usage="System.DateTimeOffset.DayOfYear" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得由目前 <see cref="T:System.DateTimeOffset" /> 物件所表示之一年中的第幾天。</summary>
        <value>目前 <see cref="T:System.DateTimeOffset" /> 物件之一年中的第幾天，以 1 到 366 之間的數值表示。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>判斷兩個 <see cref="T:System.DateTimeOffset" /> 物件是相等，還是 <see cref="T:System.DateTimeOffset" /> 物件等於指定的物件。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (DateTimeOffset other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype System.DateTimeOffset other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Equals(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(DateTimeOffset other);" />
      <MemberSignature Language="F#" Value="override this.Equals : DateTimeOffset -&gt; bool" Usage="dateTimeOffset.Equals other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="other">要與目前的 <see cref="T:System.DateTimeOffset" /> 物件比較的物件。</param>
        <summary>判斷目前 <see cref="T:System.DateTimeOffset" /> 物件與指定的 <see cref="T:System.DateTimeOffset" /> 物件是否代表相同的時間點。</summary>
        <returns>如果兩個 <see cref="T:System.DateTimeOffset" /> 物件具有相同的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 執行比較之前，此方法會將轉換的值<xref:System.DateTimeOffset>物件為 Coordinated Universal Time (UTC)。 此方法相當於下列：  
  
 [!code-csharp[System.DateTimeOffset.Syntax#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#2)]
 [!code-vb[System.DateTimeOffset.Syntax#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#2)]  
  
 亦即<xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%29>方法會判斷兩個<xref:System.DateTimeOffset>物件代表單一點的時間。 它會直接比較或都不日期和時間位移。 若要判斷兩個<xref:System.DateTimeOffset>物件代表相同的時間，而且具有相同的位移的值，使用<xref:System.DateTimeOffset.EqualsExact%2A>方法。  
  
 A<xref:System.DateTimeOffset>不是物件`null`為更新版本 （或更新版本） 會被視為比另一個則是`null`。  
  
 這個多載<xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%29>方法會實作<xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType>方法。 它提供更好的效能比<xref:System.DateTimeOffset.Equals%28System.Object%29?displayProperty=nameWithType>多載，因為`other`參數不必從物件轉換。  
  
   
  
## Examples  
 下列範例說明如何呼叫<xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%29>方法來測試<xref:System.DateTimeOffset>物件是否相等，與目前<xref:System.DateTimeOffset>物件。  
  
 [!code-csharp[System.DateTimeOffset.Methods#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#9)]
 [!code-vb[System.DateTimeOffset.Methods#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.EqualsExact(System.DateTimeOffset)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="dateTimeOffset.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">要與目前 <see cref="T:System.DateTimeOffset" /> 物件進行比較的物件。</param>
        <summary>判斷 <see cref="T:System.DateTimeOffset" /> 物件與指定的物件是否代表相同的時間點。</summary>
        <returns>如果 <paramref name="obj" /> 參數為 <see cref="T:System.DateTimeOffset" /> 物件且與目前 <see cref="T:System.DateTimeOffset" /> 物件代表相同的時間點，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 執行比較之前，此方法會將轉換的目前值<xref:System.DateTimeOffset>物件和`obj`參數為 Coordinated Universal Time (UTC)。 此方法相當於下列：  
  
 [!code-csharp[System.DateTimeOffset.Syntax#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#3)]
 [!code-vb[System.DateTimeOffset.Syntax#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#3)]  
  
 亦即<xref:System.DateTimeOffset.Equals%28System.Object%29?displayProperty=nameWithType>方法會判斷是否目前<xref:System.DateTimeOffset>物件和指定的物件代表單一點的時間。 它會直接比較或都不日期和時間位移。 若要判斷兩個<xref:System.DateTimeOffset>物件代表相同的時間，而且具有相同的位移的值，使用<xref:System.DateTimeOffset.EqualsExact%2A>方法。  
  
 如果`obj`已`null`，或執行階段類型，是否`obj`不是<xref:System.DateTimeOffset>，則方法會傳回`false`。  
  
   
  
## Examples  
 下列範例指出是否目前<xref:System.DateTimeOffset>物件是否等於其他幾個<xref:System.DateTimeOffset>物件，以及以 null 的參考以及<xref:System.DateTime>物件。  
  
 [!code-csharp[System.DateTimeOffset.Methods#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#10)]
 [!code-vb[System.DateTimeOffset.Methods#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.EqualsExact(System.DateTimeOffset)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static bool Equals (DateTimeOffset first, DateTimeOffset second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Equals(valuetype System.DateTimeOffset first, valuetype System.DateTimeOffset second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Equals(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equals (first As DateTimeOffset, second As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Equals(DateTimeOffset first, DateTimeOffset second);" />
      <MemberSignature Language="F#" Value="static member Equals : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="System.DateTimeOffset.Equals (first, second)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="first" Type="System.DateTimeOffset" />
        <Parameter Name="second" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="first">要比較的第一個物件。</param>
        <param name="second">要比較的第二個物件。</param>
        <summary>判斷兩個指定的 <see cref="T:System.DateTimeOffset" /> 物件是否代表相同的時間點。</summary>
        <returns>如果兩個 <see cref="T:System.DateTimeOffset" /> 物件具有相同的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 執行比較之前，此方法會將兩者<xref:System.DateTimeOffset>物件為 Coordinated Universal Time (UTC)。 此方法相當於下列：  
  
 [!code-csharp[System.DateTimeOffset.Syntax#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#4)]
 [!code-vb[System.DateTimeOffset.Syntax#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#4)]  
  
 亦即<xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%2CSystem.DateTimeOffset%29>方法會判斷是否這兩個<xref:System.DateTimeOffset>物件代表單一點的時間。 它會直接比較或都不日期和時間位移。 若要判斷兩個<xref:System.DateTimeOffset>物件代表相同的時間，而且具有相同的位移的值，使用<xref:System.DateTimeOffset.EqualsExact%2A>方法。  
  
   
  
## Examples  
 下列範例說明如何呼叫<xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%2CSystem.DateTimeOffset%29>方法來測試的各種組<xref:System.DateTimeOffset>物件是否相等。  
  
 [!code-csharp[System.DateTimeOffset.Methods#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#11)]
 [!code-vb[System.DateTimeOffset.Methods#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.EqualsExact(System.DateTimeOffset)" />
      </Docs>
    </Member>
    <Member MemberName="EqualsExact">
      <MemberSignature Language="C#" Value="public bool EqualsExact (DateTimeOffset other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool EqualsExact(valuetype System.DateTimeOffset other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.EqualsExact(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Function EqualsExact (other As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool EqualsExact(DateTimeOffset other);" />
      <MemberSignature Language="F#" Value="member this.EqualsExact : DateTimeOffset -&gt; bool" Usage="dateTimeOffset.EqualsExact other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="other">要與目前 <see cref="T:System.DateTimeOffset" /> 物件進行比較的物件。</param>
        <summary>判斷目前 <see cref="T:System.DateTimeOffset" /> 物件與指定的 <see cref="T:System.DateTimeOffset" /> 物件是否代表相同的時間且具有相同的位移。</summary>
        <returns>如果目前 <see cref="T:System.DateTimeOffset" /> 物件與 <paramref name="other" /> 具有相同的日期和時間值以及相同的 <see cref="P:System.DateTimeOffset.Offset" /> 值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 因為多個時區的傳回值的位移`true`不保證目前和`other`物件代表相同的時區時間。  
  
 不同於<xref:System.DateTimeOffset.EqualsExact%2A>方法中，多載<xref:System.DateTimeOffset.Equals%2A>方法判斷兩個是否只<xref:System.DateTimeOffset>值代表單一點的時間。 它們並不表示兩個值都有相同的日期和時間，以及相同的位移。  
  
   
  
## Examples  
 下列範例示範如何將<xref:System.DateTimeOffset.EqualsExact%2A>方法來比較類似<xref:System.DateTimeOffset>物件。  
  
 [!code-csharp[System.DateTimeOffset.Methods#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#12)]
 [!code-vb[System.DateTimeOffset.Methods#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.DateTimeOffset.Equals" />
      </Docs>
    </Member>
    <Member MemberName="FromFileTime">
      <MemberSignature Language="C#" Value="public static DateTimeOffset FromFileTime (long fileTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset FromFileTime(int64 fileTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.FromFileTime(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromFileTime (fileTime As Long) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset FromFileTime(long fileTime);" />
      <MemberSignature Language="F#" Value="static member FromFileTime : int64 -&gt; DateTimeOffset" Usage="System.DateTimeOffset.FromFileTime fileTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileTime" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="fileTime">Windows 檔案時間，以刻度表示。</param>
        <summary>將指定的 Windows 檔案時間轉換成相等的本地時間。</summary>
        <returns>物件，表示位移已經設定為本地時間位移之 <paramref name="fileTime" /> 的日期和時間。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Windows 檔案時間會表示 12:00，年 1 月 1 西元 1601年日午夜起已經過的 100 奈秒間隔數的 64 位元值 (C.E.)國際標準時間 (UTC)。 Windows 會使用檔案的時間，來記錄應用程式建立、 存取，或寫入檔案時。  
  
 藉由呼叫是透過 Windows API 直接存取 Windows 檔案時間`GetFileTime`函式，它會傳回`FILETIME`結構。 單一函式參數是要擷取其檔案的時間資訊的檔案控制代碼。 檔案控制代碼會擷取藉由呼叫`CreateFile`函式。 `FILETIME`結構的`dwHighDateTime`成員會包含四個高序位位元組的檔案的時間，並將其`dwLowDateTime`成員包含四個低序位位元組。 接下來的範例說明如何擷取 Windows 檔案時間值，並將它們轉換成<xref:System.DateTimeOffset>值。  
  
 Windows 檔案時間值也可以建立從<xref:System.DateTime>藉由呼叫的值<xref:System.DateTime.ToFileTime%2A?displayProperty=nameWithType>並<xref:System.DateTime.ToFileTimeUtc%2A?displayProperty=nameWithType>方法，以及從<xref:System.DateTimeOffset>值，藉由呼叫<xref:System.DateTimeOffset.ToFileTime%2A?displayProperty=nameWithType>方法。  
  
   
  
## Examples  
 下列範例會使用 Windows API 來擷取 WordPad 可執行檔的 Windows 檔案時間。  
  
 [!code-csharp[System.DateTimeOffset.FromFileTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.FromFileTime/cs/FileTime.cs#1)]
 [!code-vb[System.DateTimeOffset.FromFileTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.FromFileTime/vb/FileTime.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="filetime" /> 小於零。  
  
-或- 
 <paramref name="filetime" /> 大於 <see langword="DateTimeOffset.MaxValue.Ticks" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="FromUnixTimeMilliseconds">
      <MemberSignature Language="C#" Value="public static DateTimeOffset FromUnixTimeMilliseconds (long milliseconds);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset FromUnixTimeMilliseconds(int64 milliseconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.FromUnixTimeMilliseconds(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromUnixTimeMilliseconds (milliseconds As Long) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset FromUnixTimeMilliseconds(long milliseconds);" />
      <MemberSignature Language="F#" Value="static member FromUnixTimeMilliseconds : int64 -&gt; DateTimeOffset" Usage="System.DateTimeOffset.FromUnixTimeMilliseconds milliseconds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="milliseconds" Type="System.Int64" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="milliseconds">自 1970-01-01T00:00:00Z (1970 年 1 月 1 日上午 12:00 UTC) 以來所經過的 Unix 時間 (以毫秒數表示)。 若是在此日期之前的 Unix 時間點，其值為負數。</param>
        <summary>將自 1970-01-01T00:00:00Z 以來所經過的 Unix 時間 (以毫秒數表示)，轉換成 <see cref="T:System.DateTimeOffset" /> 值。</summary>
        <returns>表示與 Unix 時間相同時間點的日期和時間值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.Offset%2A>傳回的屬性值<xref:System.DateTimeOffset>執行個體是<xref:System.TimeSpan.Zero?displayProperty=nameWithType>，代表國際標準時間。 您可以將它轉換為特定時區的時間，藉由呼叫<xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType>方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="milliseconds" /> 小於 -62,135,596,800,000。  
  
-或- 
 <paramref name="milliseconds" /> 大於 253,402,300,799,999。</exception>
        <altmember cref="M:System.DateTimeOffset.FromUnixTimeSeconds(System.Int64)" />
        <altmember cref="M:System.DateTimeOffset.ToUnixTimeMilliseconds" />
      </Docs>
    </Member>
    <Member MemberName="FromUnixTimeSeconds">
      <MemberSignature Language="C#" Value="public static DateTimeOffset FromUnixTimeSeconds (long seconds);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset FromUnixTimeSeconds(int64 seconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.FromUnixTimeSeconds(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromUnixTimeSeconds (seconds As Long) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset FromUnixTimeSeconds(long seconds);" />
      <MemberSignature Language="F#" Value="static member FromUnixTimeSeconds : int64 -&gt; DateTimeOffset" Usage="System.DateTimeOffset.FromUnixTimeSeconds seconds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="seconds" Type="System.Int64" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="seconds">自 1970-01-01T00:00:00Z (1970 年 1 月 1 日上午 12:00 UTC) 以來所經過的 Unix 時間 (以秒數表示)。 若是在此日期之前的 Unix 時間點，其值為負數。</param>
        <summary>將自 1970-01-01T00:00:00Z 以來所經過的 Unix 時間 (以秒數表示)，轉換成 <see cref="T:System.DateTimeOffset" /> 值。</summary>
        <returns>表示與 Unix 時間相同時間點的日期和時間值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.Offset%2A>傳回的屬性值<xref:System.DateTimeOffset>執行個體是<xref:System.TimeSpan.Zero?displayProperty=nameWithType>，代表國際標準時間。 您可以將它轉換為特定時區的時間，藉由呼叫<xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType>方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="seconds" /> 小於 -62,135,596,800。  
  
-或- 
 <paramref name="seconds" /> 大於 253,402,300,799。</exception>
        <altmember cref="M:System.DateTimeOffset.FromUnixTimeMilliseconds(System.Int64)" />
        <altmember cref="M:System.DateTimeOffset.ToUnixTimeSeconds" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="dateTimeOffset.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回目前 <see cref="T:System.DateTimeOffset" /> 物件的雜湊碼。</summary>
        <returns>32 位元帶正負號的整數雜湊碼。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Hour">
      <MemberSignature Language="C#" Value="public int Hour { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Hour" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Hour" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Hour As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Hour { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Hour : int" Usage="System.DateTimeOffset.Hour" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得目前 <see cref="T:System.DateTimeOffset" /> 物件表示之時間的時數元件。</summary>
        <value>目前 <see cref="T:System.DateTimeOffset" /> 物件的時數元件。 這個屬性使用 24 小時制，且值的範圍從 0 到 23。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.Hour%2A>的值不會影響屬性<xref:System.DateTimeOffset.Offset%2A>屬性。  
  
 您也可以建立的字串表示法<xref:System.DateTimeOffset>物件的時數元件，藉由呼叫<xref:System.DateTimeOffset.ToString%2A>方法使用"H"或"HH"自訂格式規範。  
  
   
  
## Examples  
 下列範例顯示的小時元件<xref:System.DateTimeOffset>方式有三種物件：  
  
-   所擷取的值<xref:System.DateTimeOffset.Hour%2A>屬性。  
  
-   藉由呼叫<xref:System.DateTimeOffset.ToString%28System.String%29>方法使用"H"格式規範。  
  
-   藉由呼叫<xref:System.DateTimeOffset.ToString%28System.String%29>方法使用"HH"格式規範。  
  
 [!code-csharp[System.DateTimeOffset.Properties#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#6)]
 [!code-vb[System.DateTimeOffset.Properties#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalDateTime">
      <MemberSignature Language="C#" Value="public DateTime LocalDateTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime LocalDateTime" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.LocalDateTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LocalDateTime As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime LocalDateTime { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.LocalDateTime : DateTime" Usage="System.DateTimeOffset.LocalDateTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得 <see cref="T:System.DateTime" /> 值，這個值表示目前 <see cref="T:System.DateTimeOffset" /> 物件的本地日期和時間。</summary>
        <value>目前 <see cref="T:System.DateTimeOffset" /> 物件的當地日期和時間。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果有必要，請<xref:System.DateTimeOffset.LocalDateTime%2A>屬性會將目前<xref:System.DateTimeOffset>物件的日期和時間為本機系統的日期和時間。 轉換是兩個步驟的作業：  
  
1.  屬性會將目前<xref:System.DateTimeOffset>物件的時間為 Coordinated Universal Time (UTC)。  
  
2.  然後，此屬性會將 UTC 轉換為當地時間。  
  
 有任何無效的時間，模稜兩可的時間對應至當地時區的標準時間。 (不過，轉換可以在其中建立異常： 如果<xref:System.DateTimeOffset>模稜兩可的日期和時間，值可以轉換為 UTC，然後再設回原始的時間與當地時間，會反映出衍生自本機電腦的值。)執行這項轉換時，該屬性適用於任何在當地時區的調整規則。  
  
 這個屬性會傳回日期和時間元件<xref:System.DateTimeOffset>物件，使用於<xref:System.DateTimeOffset>到<xref:System.DateTime>轉換。 除了執行任何所需的時間轉換，這個屬性會不同於<xref:System.DateTimeOffset.DateTime%2A>屬性所設定的值<xref:System.DateTime.Kind%2A>屬性傳回的<xref:System.DateTime>物件<xref:System.DateTimeKind.Local?displayProperty=nameWithType>。  
  
   
  
## Examples  
 下列範例將說明數個轉換的<xref:System.DateTimeOffset>美國地區的當地時間的值太平洋標準時區。 請注意，最後三次所有模稜兩可;此屬性可讓所有人都對應到單一的日期和時間為太平洋標準時間時區。  
  
 [!code-csharp[System.DateTimeOffset.Properties#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#7)]
 [!code-vb[System.DateTimeOffset.Properties#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="MaxValue">
      <MemberSignature Language="C#" Value="public static readonly DateTimeOffset MaxValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTimeOffset MaxValue" />
      <MemberSignature Language="DocId" Value="F:System.DateTimeOffset.MaxValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MaxValue As DateTimeOffset " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTimeOffset MaxValue;" />
      <MemberSignature Language="F#" Value=" staticval mutable MaxValue : DateTimeOffset" Usage="System.DateTimeOffset.MaxValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="T:System.DateTimeOffset" /> 的最大可能值。 此欄位為唯讀。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個常數的值是 9999 年 12/31/11:59:59 PM + 00:00。  
  
 <xref:System.DateTimeOffset.MaxValue>屬性用來判斷是否新的值<xref:System.DateTimeOffset>物件或<xref:System.DateTimeOffset>算術作業所傳回的值相當於還是早於此最大範圍值。 如果不存在，方法會擲回<xref:System.ArgumentOutOfRangeException>。 任何<xref:System.DateTimeOffset>值會轉換為 Coordinated Universal Time (UTC)，這個方法會比較它與之前<xref:System.DateTimeOffset.MaxValue>。  這表示<xref:System.DateTimeOffset>值的日期和時間會接近最大的範圍，但其位移是負數，可能會擲回例外狀況。 例如，值 12/31/9999 11:00 PM-02:00 je mimo rozsah，因為它是一小時晚於<xref:System.DateTimeOffset.MaxValue>時則會轉換成 UTC。  
  
 有些月曆，這類<xref:System.Globalization.UmAlQuraCalendar>，支援早於上方的日期範圍<xref:System.DateTime.MaxValue>。 在這些情況下，嘗試存取<xref:System.DateTime.MaxValue>變數指派或格式化和剖析作業可能會擲回<xref:System.ArgumentOutOfRangeException>。 而不是擷取的值<xref:System.DateTime.MaxValue?displayProperty=nameWithType>，您可以擷取從指定的文化特性最有效的日期值的<xref:System.Globalization.Calendar.MaxSupportedDateTime%2A?displayProperty=nameWithType>屬性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><see cref="F:System.DateTime.MaxValue" /> 已超出目前或指定的文化特性的預設行事曆範圍。</exception>
      </Docs>
    </Member>
    <Member MemberName="Millisecond">
      <MemberSignature Language="C#" Value="public int Millisecond { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Millisecond" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Millisecond" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Millisecond As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Millisecond { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Millisecond : int" Usage="System.DateTimeOffset.Millisecond" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得目前 <see cref="T:System.DateTimeOffset" /> 物件所表示之時間的毫秒數元件。</summary>
        <value>目前 <see cref="T:System.DateTimeOffset" /> 物件的毫秒數元件，以 0 到 999 之間的整數表示。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您也可以建立的字串表示法<xref:System.DateTimeOffset>物件的毫秒數元件，藉由呼叫<xref:System.DateTimeOffset.ToString%2A>方法使用"fff"自訂格式規範。  
  
 如果您依賴屬性這類<xref:System.DateTimeOffset.Now%2A>或<xref:System.DateTimeOffset.UtcNow%2A>準確地追蹤經過的毫秒數，時間的毫秒部分的有效位數取決於系統時鐘的解析度。 在 Windows NT 3.5 和更新版本和 Windows Vista 作業系統中，時鐘的解析度會是大約為 10-15 毫秒。  
  
   
  
## Examples  
 下列範例會顯示毫秒數<xref:System.DateTimeOffset>物件所使用的自訂格式規範，並藉由直接存取<xref:System.DateTimeOffset.Millisecond%2A>屬性。  
  
 [!code-csharp[System.DateTimeOffset.Properties#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#12)]
 [!code-vb[System.DateTimeOffset.Properties#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Minute">
      <MemberSignature Language="C#" Value="public int Minute { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Minute" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Minute" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Minute As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Minute { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Minute : int" Usage="System.DateTimeOffset.Minute" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得目前 <see cref="T:System.DateTimeOffset" /> 物件所表示之時間的分鐘數元件。</summary>
        <value>目前 <see cref="T:System.DateTimeOffset" /> 物件的分鐘數元件，以 0 到 59 之間的整數表示。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.Minute%2A>的值不會影響屬性<xref:System.DateTimeOffset.Offset%2A>屬性。  
  
 您也可以建立的字串表示法<xref:System.DateTimeOffset>物件的分鐘數元件，藉由呼叫<xref:System.DateTimeOffset.ToString%2A>"m"，或"mm"自訂格式規範的方法。  
  
   
  
## Examples  
 下列範例顯示的分鐘數元件<xref:System.DateTimeOffset>方式有三種物件：  
  
-   所擷取的值<xref:System.DateTimeOffset.Minute%2A>屬性。  
  
-   藉由呼叫<xref:System.DateTimeOffset.ToString%28System.String%29>方法與"m"格式規範。  
  
-   藉由呼叫<xref:System.DateTimeOffset.ToString%28System.String%29>方法與"mm"格式規範。  
  
 [!code-csharp[System.DateTimeOffset.Properties#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#8)]
 [!code-vb[System.DateTimeOffset.Properties#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinValue">
      <MemberSignature Language="C#" Value="public static readonly DateTimeOffset MinValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTimeOffset MinValue" />
      <MemberSignature Language="DocId" Value="F:System.DateTimeOffset.MinValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MinValue As DateTimeOffset " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTimeOffset MinValue;" />
      <MemberSignature Language="F#" Value=" staticval mutable MinValue : DateTimeOffset" Usage="System.DateTimeOffset.MinValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示最早的 <see cref="T:System.DateTimeOffset" /> 可能值。 此欄位為唯讀。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個常數的值是 1/1/0001 上午 12:00:00 + 00:00。  
  
 <xref:System.DateTimeOffset.MinValue>屬性用來判斷是否新的值<xref:System.DateTimeOffset>物件或<xref:System.DateTimeOffset>算術作業所傳回的值相當於還是晚於此最小範圍值。 如果不存在，方法會擲回<xref:System.ArgumentOutOfRangeException>。 任何<xref:System.DateTimeOffset>值會轉換為 Coordinated Universal Time (UTC)，此方法會執行與比較之前<xref:System.DateTimeOffset.MinValue>。  這表示<xref:System.DateTimeOffset>值的日期和時間會接近最小的範圍，但其位移是正數，便可能會擲回例外狀況。 比方說的值時間 0001 年 1/1/1:00:00 + 02:00 je mimo rozsah，因為它是一小時早於<xref:System.DateTimeOffset.MinValue>時則會轉換成 UTC。  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.DateTimeOffset.ParseExact" />
      </Docs>
    </Member>
    <Member MemberName="Month">
      <MemberSignature Language="C#" Value="public int Month { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Month" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Month" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Month As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Month { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Month : int" Usage="System.DateTimeOffset.Month" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得目前 <see cref="T:System.DateTimeOffset" /> 物件所表示之日期的月份元件。</summary>
        <value>目前 <see cref="T:System.DateTimeOffset" /> 物件的月份元件，以 1 到 12 之間的整數表示。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.Month%2A>的值不會影響屬性<xref:System.DateTimeOffset.Offset%2A>屬性。  
  
 您也可以建立的字串表示法<xref:System.DateTimeOffset>藉由呼叫物件的月份元件<xref:System.DateTimeOffset.ToString%2A>方法"M"或"MM"自訂格式規範。  
  
   
  
## Examples  
 下列範例顯示的月份元件<xref:System.DateTimeOffset>方式有三種值：  
  
-   所擷取的值<xref:System.DateTimeOffset.Month%2A>屬性。  
  
-   藉由呼叫<xref:System.DateTimeOffset.ToString%28System.String%29>方法與"M"格式規範。  
  
-   藉由呼叫<xref:System.DateTimeOffset.ToString%28System.String%29>方法與"MM"格式規範。  
  
 [!code-csharp[System.DateTimeOffset.Properties#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#9)]
 [!code-vb[System.DateTimeOffset.Properties#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Now">
      <MemberSignature Language="C#" Value="public static DateTimeOffset Now { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTimeOffset Now" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Now" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Now As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTimeOffset Now { DateTimeOffset get(); };" />
      <MemberSignature Language="F#" Value="member this.Now : DateTimeOffset" Usage="System.DateTimeOffset.Now" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得 <see cref="T:System.DateTimeOffset" /> 物件，這個物件的日期和時間已設定為目前電腦上的目前日期和時間，而位移已設定為本地時間相對於國際標準時間 (UTC) 的位移。</summary>
        <value><see cref="T:System.DateTimeOffset" /> 物件，其日期和時間為目前本地時間，而位移為本地時區相對於國際標準時間 (UTC) 的位移。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 目前的當地時間毫秒部分的有效位數，取決於系統時鐘的解析度。 在 Windows NT 3.5 和更新版本和 Windows Vista 作業系統中，時鐘的解析度會是大約為 10-15 毫秒。  
  
   
  
## Examples  
 下列範例會使用<xref:System.DateTimeOffset.Now%2A>屬性，以擷取目前的日期和時間，並顯示所使用的每個[標準日期和時間格式字串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)受到<xref:System.DateTimeOffset>型別。  
  
 [!code-csharp[System.DateTimeOffset.Now#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.now/cs/now1.cs#1)]
 [!code-vb[System.DateTimeOffset.Now#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetimeoffset.now/vb/now1.vb#1)]  
  
 下列範例會使用<xref:System.DateTimeOffset.Now%2A>和<xref:System.DateTimeOffset.Millisecond%2A>屬性，以決定系統時鐘的解析度。 它會顯示時間只有當其毫秒部分的值已變更。  
  
 [!code-csharp[System.DateTimeOffset.Properties#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#11)]
 [!code-vb[System.DateTimeOffset.Properties#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.UtcNow" />
      </Docs>
    </Member>
    <Member MemberName="Offset">
      <MemberSignature Language="C#" Value="public TimeSpan Offset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan Offset" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Offset" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Offset As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan Offset { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.Offset : TimeSpan" Usage="System.DateTimeOffset.Offset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得 Coordinated Universal Time (UTC) 的時間位移。</summary>
        <value>目前 <see cref="T:System.DateTimeOffset" /> 物件的時間值和 Coordinated Universal Time (UTC) 之間的時差。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.TimeSpan.Hours%2A>屬性傳回的<xref:System.TimeSpan>物件的範圍可以從-14 小時到 14 小時。  
  
 值<xref:System.DateTimeOffset.Offset%2A>屬性是精確到分鐘。  
  
   
  
## Examples  
 下列範例會使用<xref:System.DateTimeOffset.Offset%2A>屬性以顯示本機時間的差異與 Coordinated Universal Time (UTC)。  
  
 [!code-csharp[System.DateTimeOffset.Properties#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#13)]
 [!code-vb[System.DateTimeOffset.Properties#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static DateTimeOffset operator + (DateTimeOffset dateTimeOffset, TimeSpan timeSpan);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTimeOffset op_Addition(valuetype System.DateTimeOffset dateTimeOffset, valuetype System.TimeSpan timeSpan) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Addition(System.DateTimeOffset,System.TimeSpan)" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset operator +(DateTimeOffset dateTimeOffset, TimeSpan timeSpan);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1" />
      <MemberSignature Language="F#" Value="static member ( + ) : DateTimeOffset * TimeSpan -&gt; DateTimeOffset" Usage="dateTimeOffset + timeSpan" FrameworkAlternate="netframework-2.0;netcore-2.2;netstandard-2.1" />
      <MemberSignature Language="C#" Value="public static DateTimeOffset operator + (DateTimeOffset dateTimeTz, TimeSpan timeSpan);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTimeOffset op_Addition(valuetype System.DateTimeOffset dateTimeTz, valuetype System.TimeSpan timeSpan) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset operator +(DateTimeOffset dateTimeTz, TimeSpan timeSpan);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="F#" Value="static member ( + ) : DateTimeOffset * TimeSpan -&gt; DateTimeOffset" Usage="dateTimeTz + timeSpan" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Addition(System.DateTimeOffset,System.TimeSpan)" FrameworkAlternate="netframework-2.0;dotnet-uwp-10.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="dateTimeTz" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
        <Parameter Name="timeSpan" Type="System.TimeSpan" Index="1" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">要在其中加入時間間隔的物件。</param>
        <param name="dateTimeTz">要在其中加入時間間隔的物件。</param>
        <param name="timeSpan">要加入的時間間隔。</param>
        <summary>將指定的時間間隔加入具有指定日期和時間的 <see cref="T:System.DateTimeOffset" /> 物件中，並產生具有新日期和時間的 <see cref="T:System.DateTimeOffset" /> 物件。</summary>
        <returns>物件，其值為 <paramref name="dateTimeTz" /> 和 <paramref name="timeSpan" /> 值的總和。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.op_Addition%2A>方法來定義加法運算，如<xref:System.DateTimeOffset>值。 它可讓程式碼，如下所示：  
  
 [!code-csharp[System.DateTimeOffset.Operators#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#1)]
 [!code-vb[System.DateTimeOffset.Operators#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#1)]  
  
 不支援自訂運算子和運算子多載的語言可以呼叫<xref:System.DateTimeOffset.Add%2A>方法改為。  
  
 這個運算子的對等方法是<xref:System.DateTimeOffset.Add%28System.TimeSpan%29?displayProperty=nameWithType>。]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTimeOffset" /> 值小於 <see cref="F:System.DateTimeOffset.MinValue" />。  
  
-或- 
產生的 <see cref="T:System.DateTimeOffset" /> 值大於 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
        <altmember cref="M:System.DateTimeOffset.Add(System.TimeSpan)" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">使用日期和時間執行算術運算</related>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Equality(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As DateTimeOffset, right As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">要比較的第一個物件。</param>
        <param name="right">要比較的第二個物件。</param>
        <summary>判斷兩個指定的 <see cref="T:System.DateTimeOffset" /> 物件是否代表相同的時間點。</summary>
        <returns>如果兩個 <see cref="T:System.DateTimeOffset" /> 物件具有相同的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.op_Equality%2A>方法來定義等號比較運算子的營運<xref:System.DateTimeOffset>物件。 它可讓程式碼，如下所示：  
  
 [!code-csharp[System.DateTimeOffset.Operators#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#2)]
 [!code-vb[System.DateTimeOffset.Operators#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#2)]  
  
 評估之前，先`left`和`right`等號比較運算子的運算元將這兩個值轉換為 Coordinated Universal Time (UTC)。 此作業相當於下列：  
  
 [!code-csharp[System.DateTimeOffset.Syntax#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#4)]
 [!code-vb[System.DateTimeOffset.Syntax#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#4)]  
  
 亦即<xref:System.DateTimeOffset.op_Equality%2A>方法會判斷是否這兩個<xref:System.DateTimeOffset>物件代表單一點的時間。 它會直接比較或都不日期和時間位移。 若要判斷兩個<xref:System.DateTimeOffset>物件代表相同的時間，而且具有相同的位移的值，使用<xref:System.DateTimeOffset.EqualsExact%2A>方法。  
  
 這個運算子的對等方法是 <xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="Overload:System.DateTimeOffset.Equals" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool operator &gt; (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_GreaterThan(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt; (left As DateTimeOffset, right As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member ( &gt; ) : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="left &gt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">要比較的第一個物件。</param>
        <param name="right">要比較的第二個物件。</param>
        <summary>判斷一個指定的 <see cref="T:System.DateTimeOffset" /> 物件是否大於 (或晚於) 第二個指定的 <see cref="T:System.DateTimeOffset" /> 物件。</summary>
        <returns>如果 <paramref name="left" /> 的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值晚於 <paramref name="right" /> 的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.op_GreaterThan%2A>方法定義的作業 greater than 運算子<xref:System.DateTimeOffset>物件。 它可讓程式碼，如下所示：  
  
 [!code-csharp[System.DateTimeOffset.Operators#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#3)]
 [!code-vb[System.DateTimeOffset.Operators#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#3)]  
  
 不支援自訂運算子的語言可以呼叫<xref:System.DateTimeOffset.Compare%2A>方法改為。 它們也可以呼叫<xref:System.DateTimeOffset.op_GreaterThan%2A>方法直接，如下列範例所示。  
  
 [!code-vb[System.DateTimeOffset.Operators#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#4)]  
  
 評估之前，先`left`和`right`運算元，運算子將這兩個值轉換為 Coordinated Universal Time (UTC)。 此作業相當於下列：  
  
 [!code-csharp[System.DateTimeOffset.Syntax#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#5)]
 [!code-vb[System.DateTimeOffset.Syntax#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#5)]  
  
 這個運算子的對等方法是 <xref:System.DateTimeOffset.Compare%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &gt;= (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_GreaterThanOrEqual(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt;= (left As DateTimeOffset, right As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;=(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member ( &gt;= ) : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="left &gt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">要比較的第一個物件。</param>
        <param name="right">要比較的第二個物件。</param>
        <summary>判斷一個指定的 <see cref="T:System.DateTimeOffset" /> 物件是否大於 (或等於) 第二個指定的 <see cref="T:System.DateTimeOffset" /> 物件。</summary>
        <returns>如果 <paramref name="left" /> 的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值等於或晚於 <paramref name="right" /> 的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.op_GreaterThan%2A>方法來定義大於或等於運算子的營運<xref:System.DateTimeOffset>物件。 它可讓程式碼，如下所示：  
  
 [!code-csharp[System.DateTimeOffset.Operators#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#5)]
 [!code-vb[System.DateTimeOffset.Operators#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#5)]  
  
 不支援自訂運算子的語言可以呼叫<xref:System.DateTimeOffset.Compare%2A>方法改為。 某些語言也可以呼叫<xref:System.DateTimeOffset.op_GreaterThanOrEqual%2A>方法直接，如下列範例所示。  
  
 [!code-vb[System.DateTimeOffset.Operators#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#6)]  
  
 評估之前，先`left`和`right`運算元，運算子將這兩個值轉換為 Coordinated Universal Time (UTC)。 此作業相當於下列：  
  
 [!code-csharp[System.DateTimeOffset.Syntax#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#6)]
 [!code-vb[System.DateTimeOffset.Syntax#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#6)]  
  
 這個運算子的對等方法是 <xref:System.DateTimeOffset.Compare%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator DateTimeOffset (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTimeOffset op_Implicit(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Implicit(System.DateTime)~System.DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator DateTimeOffset(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : DateTime -&gt; DateTimeOffset" Usage="System.DateTimeOffset.op_Implicit dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">要轉換的物件。</param>
        <summary>定義從 <see cref="T:System.DateTime" /> 物件到 <see cref="T:System.DateTimeOffset" /> 物件的隱含轉換。</summary>
        <returns>轉換的物件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.op_Implicit%2A>方法可讓編譯器將會自動轉換<xref:System.DateTime>物件到<xref:System.DateTimeOffset>而不需要明確轉型運算子 （在 C# 中) 或 （在 Visual Basic) 的轉換函式呼叫的物件。 它會定義擴展轉換，不涉及資料遺失，並不會擲回<xref:System.OverflowException>。 <xref:System.DateTimeOffset.op_Implicit%2A>方法會進行下列可能如下的程式碼：  
  
 [!code-csharp[System.DateTimeOffset.Operators#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#7)]
 [!code-vb[System.DateTimeOffset.Operators#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#7)]  
  
 這個方法相當於<xref:System.DateTimeOffset.%23ctor%2A>建構函式。 產生的位移<xref:System.DateTimeOffset>物件的值而定<xref:System.DateTime.Kind%2A?displayProperty=nameWithType>屬性`dateTime`參數：  
  
-   如果值<xref:System.DateTime.Kind%2A?displayProperty=nameWithType>屬性是<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>，日期和時間<xref:System.DateTimeOffset>物件設為等於`dateTime`，並將其<xref:System.DateTimeOffset.Offset%2A>屬性設為等於 0。  
  
-   如果值<xref:System.DateTime.Kind%2A?displayProperty=nameWithType>屬性是<xref:System.DateTimeKind.Local?displayProperty=nameWithType>或<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>，日期和時間<xref:System.DateTimeOffset>物件設定為等於`dateTime`，並將其<xref:System.DateTimeOffset.Offset%2A>屬性設為等於本機系統的目前設定的時區位移。  
  
 這個運算子的對等方法是 <xref:System.DateTimeOffset.%23ctor%28System.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">套用位移所產生的國際標準時間 (UTC) 日期與時間早於 <see cref="F:System.DateTimeOffset.MinValue" />。  
  
-或- 
套用位移所產生的 UTC 日期與時間晚於 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Inequality(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As DateTimeOffset, right As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="System.DateTimeOffset.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">要比較的第一個物件。</param>
        <param name="right">要比較的第二個物件。</param>
        <summary>判斷兩個指定的 <see cref="T:System.DateTimeOffset" /> 物件是否參照不同的時間點。</summary>
        <returns>如果 <paramref name="left" /> 和 <paramref name="right" /> 不具有相同的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.op_Inequality%2A>方法定義的不等比較運算子的營運<xref:System.DateTimeOffset>物件。 它一律會傳回相反的結果從<xref:System.DateTimeOffset.op_Equality%2A>。 <xref:System.DateTimeOffset.op_Inequality%2A>方法可讓程式碼，如下所示：  
  
 [!code-csharp[System.DateTimeOffset.Operators#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#8)]
 [!code-vb[System.DateTimeOffset.Operators#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#8)]  
  
 評估之前，先`left`和`right`等號比較運算子的運算元將這兩個值轉換為 Coordinated Universal Time (UTC)。 此作業相當於下列：  
  
 [!code-csharp[System.DateTimeOffset.Syntax#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#4)]
 [!code-vb[System.DateTimeOffset.Syntax#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#4)]  
  
 亦即<xref:System.DateTimeOffset.op_Inequality%2A>方法會判斷是否這兩個<xref:System.DateTimeOffset>物件代表不同的時間點的時間。 它會直接比較或都不日期和時間位移。  
  
 不支援自訂運算子的語言可以呼叫<xref:System.DateTimeOffset.Compare%2A>方法改為。 此外，也可以呼叫某些語言<xref:System.DateTimeOffset.op_Inequality%2A>方法直接，如下列範例所示。  
  
 [!code-vb[System.DateTimeOffset.Operators#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#9)]  
  
 這個運算子的對等方法是 <xref:System.DateTimeOffset.Compare%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool operator &lt; (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_LessThan(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt; (left As DateTimeOffset, right As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member ( &lt; ) : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="left &lt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">要比較的第一個物件。</param>
        <param name="right">要比較的第二個物件。</param>
        <summary>判斷一個指定的 <see cref="T:System.DateTimeOffset" /> 物件是否小於第二個指定的 <see cref="T:System.DateTimeOffset" /> 物件。</summary>
        <returns>如果 <paramref name="left" /> 的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值早於 <paramref name="right" /> 的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.op_LessThan%2A>方法會定義為小於運算子的作業<xref:System.DateTimeOffset>物件。 它可讓程式碼，如下所示：  
  
 [!code-csharp[System.DateTimeOffset.Operators#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#10)]
 [!code-vb[System.DateTimeOffset.Operators#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#10)]  
  
 評估之前，先`left`和`right`運算元，運算子將兩個運算元都轉換為 Coordinated Universal Time (UTC)。 此作業相當於下列：  
  
 [!code-csharp[System.DateTimeOffset.Syntax#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#8)]
 [!code-vb[System.DateTimeOffset.Syntax#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#8)]  
  
 不支援自訂運算子的語言可以呼叫<xref:System.DateTimeOffset.Compare%2A>方法改為。 此外，也可以呼叫某些語言<xref:System.DateTimeOffset.op_LessThan%2A>方法直接，如下列範例所示。  
  
 [!code-vb[System.DateTimeOffset.Operators#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#11)]  
  
 這個運算子的對等方法是 <xref:System.DateTimeOffset.Compare%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &lt;= (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_LessThanOrEqual(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;= (left As DateTimeOffset, right As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;=(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member ( &lt;= ) : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="left &lt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">要比較的第一個物件。</param>
        <param name="right">要比較的第二個物件。</param>
        <summary>判斷一個指定的 <see cref="T:System.DateTimeOffset" /> 物件是否小於第二個指定的 <see cref="T:System.DateTimeOffset" /> 物件。</summary>
        <returns>如果 <paramref name="left" /> 的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值早於 <paramref name="right" /> 的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.op_LessThanOrEqual%2A>方法定義作業的運算子的小於或等於<xref:System.DateTimeOffset>物件。 它可讓程式碼，如下所示：  
  
 [!code-csharp[System.DateTimeOffset.Operators#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#12)]
 [!code-vb[System.DateTimeOffset.Operators#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#12)]  
  
 不支援自訂運算子的語言可以呼叫<xref:System.DateTimeOffset.Compare%2A>方法改為。 某些語言也可以呼叫<xref:System.DateTimeOffset.op_LessThanOrEqual%2A>方法直接，如下列範例所示。  
  
 [!code-vb[System.DateTimeOffset.Operators#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#13)]  
  
 評估之前，先`left`和`right`運算元，運算子將這兩個值轉換為 Coordinated Universal Time (UTC)。 此作業相當於下列：  
  
 [!code-csharp[System.DateTimeOffset.Syntax#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#9)]
 [!code-vb[System.DateTimeOffset.Syntax#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#9)]  
  
 這個運算子的對等方法是 <xref:System.DateTimeOffset.Compare%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Subtraction">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>從 <see cref="T:System.DateTimeOffset" /> 物件減去指定的 <see cref="T:System.TimeSpan" /> 或 <see cref="T:System.DateTimeOffset" /> 物件。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static TimeSpan operator - (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.TimeSpan op_Subtraction(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Subtraction(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (left As DateTimeOffset, right As DateTimeOffset) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan operator -(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member ( - ) : DateTimeOffset * DateTimeOffset -&gt; TimeSpan" Usage="left - right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">被減數。</param>
        <param name="right">減數。</param>
        <summary>從其他 <see cref="T:System.DateTimeOffset" /> 物件減去一個物件並產生時間間隔。</summary>
        <returns>物件，代表 <paramref name="left" /> 和 <paramref name="right" /> 之間的差。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.op_Subtraction%2A>方法定義的減法運算<xref:System.DateTimeOffset>物件。 它可讓程式碼，如下所示：  
  
 [!code-csharp[System.DateTimeOffset.Operators#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#14)]
 [!code-vb[System.DateTimeOffset.Operators#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#14)]  
  
 不支援自訂運算子和運算子多載的語言可以呼叫<xref:System.DateTimeOffset.Subtract%28System.DateTimeOffset%29?displayProperty=nameWithType>方法改為。  
  
 這個運算子的對等方法是<xref:System.DateTimeOffset.Subtract%28System.TimeSpan%29?displayProperty=nameWithType>。]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.Subtract(System.DateTimeOffset)" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">使用日期和時間執行算術運算</related>
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static DateTimeOffset operator - (DateTimeOffset dateTimeOffset, TimeSpan timeSpan);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTimeOffset op_Subtraction(valuetype System.DateTimeOffset dateTimeOffset, valuetype System.TimeSpan timeSpan) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Subtraction(System.DateTimeOffset,System.TimeSpan)" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset operator -(DateTimeOffset dateTimeOffset, TimeSpan timeSpan);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1" />
      <MemberSignature Language="F#" Value="static member ( - ) : DateTimeOffset * TimeSpan -&gt; DateTimeOffset" Usage="dateTimeOffset - timeSpan" FrameworkAlternate="netframework-2.0;netcore-2.2;netstandard-2.1" />
      <MemberSignature Language="C#" Value="public static DateTimeOffset operator - (DateTimeOffset dateTimeTz, TimeSpan timeSpan);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTimeOffset op_Subtraction(valuetype System.DateTimeOffset dateTimeTz, valuetype System.TimeSpan timeSpan) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset operator -(DateTimeOffset dateTimeTz, TimeSpan timeSpan);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="F#" Value="static member ( - ) : DateTimeOffset * TimeSpan -&gt; DateTimeOffset" Usage="dateTimeTz - timeSpan" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Subtraction(System.DateTimeOffset,System.TimeSpan)" FrameworkAlternate="netframework-2.0;dotnet-uwp-10.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="dateTimeTz" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
        <Parameter Name="timeSpan" Type="System.TimeSpan" Index="1" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">當做被減數的日期和時間物件。</param>
        <param name="dateTimeTz">當做被減數的日期和時間物件。</param>
        <param name="timeSpan">要減去的時間間隔。</param>
        <summary>從指定的日期和時間減去指定的時間間隔，並產生新的日期和時間。</summary>
        <returns>物件，等於 <paramref name="dateTimeOffset" /> 減去 <paramref name="timeSpan" /> 的值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.op_Subtraction%2A>方法定義的減法運算<xref:System.DateTimeOffset>物件。 它可讓程式碼，如下所示：  
  
 [!code-csharp[System.DateTimeOffset.Operators#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#15)]
 [!code-vb[System.DateTimeOffset.Operators#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#15)]  
  
 不支援自訂運算子和運算子多載的語言可以呼叫<xref:System.DateTimeOffset.Subtract%28System.TimeSpan%29?displayProperty=nameWithType>方法改為。  
  
 這個運算子的對等方法是<xref:System.DateTimeOffset.Subtract%28System.TimeSpan%29?displayProperty=nameWithType>。]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTimeOffset" /> 值小於 <see cref="F:System.DateTimeOffset.MinValue" /> 或大於 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
        <altmember cref="M:System.DateTimeOffset.Subtract(System.TimeSpan)" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">使用日期和時間執行算術運算</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將日期和時間的指定字串表示，轉換為其相等的 <see cref="T:System.DateTimeOffset" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]        

         ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTimeOffset Parse (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset Parse(string input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (input As String) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset Parse(System::String ^ input);" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; DateTimeOffset" Usage="System.DateTimeOffset.Parse input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">字串，包含要轉換的日期和時間。</param>
        <summary>將日期、時間和位移的指定字串表示，轉換為其相等的 <see cref="T:System.DateTimeOffset" />。</summary>
        <returns>物件，與 <paramref name="input" /> 中包含的日期和時間相等。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.Parse%28System.String%29> 剖析具有三個項目可以按照任何順序出現，且以泛空白字元分隔的字串。 這三個元素是下表所示。  
  
|元素|範例|  
|-------------|-------------|  
|\<日期 >|"2/10/2007"|  
|\<時間 >|「 下午 1:02:03"|  
|\<Offset>|"-7:30"|  
  
 這些項目都是選擇性的雖然\<位移 > 不能單獨出現。 它必須提供一起\<日期 > 或\<時間 >。 如果\<日期 > 遺漏，其預設值是目前的日期。 如果\<時間 > 遺漏，其預設值為 12:00: 00AM。 如果\<日期 > 存在但其的年份元件只有兩位數，則會轉換成目前的文化特性的現行曆法的值中之年<xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType>屬性。 如果\<位移 > 遺漏，其預設值都是當地時區位移。 \<位移 > 可以表示為負數或正數的位移與 Coordinated Universal Time (UTC)。 在任一情況下，\<位移 > 必須包含正負號。  
  
 `input`使用的格式設定資訊中剖析字串<xref:System.Globalization.DateTimeFormatInfo>初始化目前的文化特性的物件。 若要剖析的字串包含指定的格式不一定會對應至目前的文化特性的格式，使用<xref:System.DateTimeOffset.ParseExact%2A>方法，並提供格式規範。  
  
   
  
## Examples  
 下列範例會呼叫<xref:System.DateTimeOffset.Parse%28System.String%29>方法來剖析日期和時間的數個字串。 範例包括 en-us 文化特性的系統上的 2007 年 3 月 22 日，從輸出-我們。  
  
 [!code-csharp[System.DateTimeOffset.Parse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/cs/ParseExamples.cs#1)]
 [!code-vb[System.DateTimeOffset.Parse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/vb/ParseExamples.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">位移大於 14 小時或小於 -14 小時。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.FormatException"><paramref name="input" /> 不包含日期與時間的有效字串表示。  
  
-或- 
 <paramref name="input" /> 包含不含日期或時間之位移值的字串表示。</exception>
        <altmember cref="Overload:System.DateTimeOffset.TryParse" />
        <altmember cref="Overload:System.DateTimeOffset.ParseExact" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTimeOffset Parse (string input, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset Parse(string input, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Parse(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (input As String, formatProvider As IFormatProvider) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset Parse(System::String ^ input, IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="static member Parse : string * IFormatProvider -&gt; DateTimeOffset" Usage="System.DateTimeOffset.Parse (input, formatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="input">字串，包含要轉換的日期和時間。</param>
        <param name="formatProvider">提供關於 <paramref name="input" /> 之特定文化特性格式資訊的物件。</param>
        <summary>使用指定的特定文化特性格式資訊，將日期和時間的指定字串表示轉換為其相等的 <see cref="T:System.DateTimeOffset" />。</summary>
        <returns>物件，與 <paramref name="input" /> 中包含的日期和時間相等，如 <paramref name="formatProvider" /> 所指定。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會剖析具有三個項目可以按照任何順序出現，且以泛空白字元分隔的字串。 下表中，會顯示這三個元素。  
  
|元素|範例|  
|-------------|-------------|  
|\<日期 >|"2/10/2007"|  
|\<時間 >|「 下午 1:02:03"|  
|\<Offset>|"-7:30"|  
  
 這些項目都是選擇性的雖然\<位移 > 不能單獨出現。 它必須提供一起\<日期 > 或\<時間 >。 如果\<日期 > 遺漏，其預設值是目前的日期。 如果\<日期 > 存在但其的年份元件只有兩位數，則會轉換成中之年`provider`的值為基礎的參數的現行曆法<xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType>屬性。 如果\<時間 > 遺漏，其預設值為 12:00: 00AM。 如果\<位移 > 遺漏，其預設值都是當地時區位移。 \<位移 > 可以表示為負數或正數的位移與 Coordinated Universal Time (UTC)。 在任一情況下，\<位移 > 必須包含正負號。  
  
 這三個元素的格式由所定義`formatProvider`參數，它可以是下列其中一項：  
  
-   A<xref:System.Globalization.CultureInfo>物件，表示其格式設定中使用的文化特性`input`參數。 <xref:System.Globalization.DateTimeFormatInfo>所傳回的物件<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>屬性會定義所使用的格式`input`。  
  
-   A<xref:System.Globalization.DateTimeFormatInfo>定義格式的日期和時間資料的物件。  
  
 如果`formatprovider`已`null`，則<xref:System.Globalization.CultureInfo>使用對應至目前的文化特性的物件。  
  
 正或負號用於\<位移 > 必須是 + 或-。 不由定義<xref:System.Globalization.NumberFormatInfo.PositiveSign%2A>或是<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>的屬性<xref:System.Globalization.NumberFormatInfo>物件`formatProvider`參數。  
  
   
  
## Examples  
 下列範例會剖析日期和時間字串格式化為 fr-fr 文化特性，並顯示它們使用本機系統的預設 en-文化特性。  
  
 [!code-csharp[System.DateTimeOffset.Parse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/cs/ParseExamples.cs#2)]
 [!code-vb[System.DateTimeOffset.Parse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/vb/ParseExamples.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">位移大於 14 小時或小於 -14 小時。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.FormatException"><paramref name="input" /> 不包含日期與時間的有效字串表示。  
  
-或- 
 <paramref name="input" /> 包含不含日期或時間之位移值的字串表示。</exception>
        <altmember cref="Overload:System.DateTimeOffset.TryParse" />
        <altmember cref="Overload:System.DateTimeOffset.ParseExact" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTimeOffset Parse (ReadOnlySpan&lt;char&gt; input, IFormatProvider formatProvider = null, System.Globalization.DateTimeStyles styles = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset Parse(valuetype System.ReadOnlySpan`1&lt;char&gt; input, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (input As ReadOnlySpan(Of Char), Optional formatProvider As IFormatProvider = null, Optional styles As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTimeOffset" />
      <MemberSignature Language="F#" Value="static member Parse : ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTimeOffset" Usage="System.DateTimeOffset.Parse (input, formatProvider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="formatProvider">To be added.</param>
        <param name="styles">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTimeOffset Parse (string input, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset Parse(string input, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (input As String, formatProvider As IFormatProvider, styles As DateTimeStyles) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset Parse(System::String ^ input, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles);" />
      <MemberSignature Language="F#" Value="static member Parse : string * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTimeOffset" Usage="System.DateTimeOffset.Parse (input, formatProvider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="input">字串，包含要轉換的日期和時間。</param>
        <param name="formatProvider">提供關於 <paramref name="input" /> 之特定文化特性格式資訊的物件。</param>
        <param name="styles">列舉值的位元組合，表示 <paramref name="input" /> 所允許的格式。 一般會指定的值是 <see cref="F:System.Globalization.DateTimeStyles.None" />。</param>
        <summary>使用指定的特定文化特性格式資訊和格式樣式，將日期和時間的指定字串表示轉換為其相等的 <see cref="T:System.DateTimeOffset" />。</summary>
        <returns>物件，與 <paramref name="input" /> 中包含的日期和時間相等，如 <paramref name="formatProvider" /> 和 <paramref name="styles" /> 所指定。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會剖析具有三個項目可以按照任何順序出現，且以泛空白字元分隔的字串。 下表中，會顯示這三個元素。  
  
|元素|範例|  
|-------------|-------------|  
|\<日期 >|"2/10/2007"|  
|\<時間 >|「 下午 1:02:03"|  
|\<Offset>|"-7:30"|  
  
 這些項目都是選擇性的雖然\<位移 > 不能單獨出現。 它必須提供一起\<日期 > 或\<時間 >。 如果\<日期 > 遺漏，其預設值是目前的日期。 如果\<日期 > 存在但其的年份元件只有兩位數，則會轉換成中之年`provider`的值為基礎的參數的現行曆法<xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType>屬性。 如果\<時間 > 遺漏，其預設值為 12:00: 00AM。 如果\<位移 > 遺漏，其預設值都是當地時區位移或<xref:System.TimeSpan.Zero?displayProperty=nameWithType>如果<xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType>或是<xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType>中指定值`styles`參數。 如果\<位移 > 已存在，它可以表示為負數或正數的位移與 Coordinated Universal Time (UTC)。 在任一情況下，\<位移 > 必須包含正負號。  
  
 這三個元素的格式由所定義`formatProvider`參數，它可以是下列其中一項：  
  
-   A<xref:System.Globalization.CultureInfo>物件，表示其格式設定中使用的文化特性`input`參數。 <xref:System.Globalization.DateTimeFormatInfo>所傳回的物件<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>屬性會定義所使用的格式`input`。  
  
-   A<xref:System.Globalization.DateTimeFormatInfo>定義格式的日期和時間資料的物件。  
  
 每個項目也可以加前置或尾端泛空白字元，而\<日期 > 和\<時間 > 項目可以包含內部泛空白字元 (例如 6: 00:00). 只有\<位移 > 元件不能包含內部空白字元。  
  
 如果`formatprovider`已`null`，則<xref:System.Globalization.CultureInfo>使用對應至目前的文化特性的物件。  
  
 正或負號用於\<位移 > 必須是 + 或-。 不由定義<xref:System.Globalization.NumberFormatInfo.PositiveSign%2A>或是<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>的屬性<xref:System.Globalization.NumberFormatInfo>所傳回的物件`formatProvider`參數。  
  
 下表顯示的成員<xref:System.Globalization.DateTimeStyles?displayProperty=nameWithType>所支援的列舉型別。  
  
|DateTimeStyles 成員|描述|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|剖析字串，由`input`而且，如果有需要，將它轉換成 UTC。 它相當於剖析的字串，然後呼叫<xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType>方法傳回的<xref:System.DateTimeOffset>物件。|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|雖然有效，但會忽略此值。 在可以使用內部空白字元\<日期 > 和\<時間 > 項目。|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|雖然有效，但會忽略此值。 剖析字串中的每個元件之前，可以使用前置空白字元。|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|雖然有效，但會忽略此值。 剖析字串中的每個元件之前，允許使用尾端泛空白字元。|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|這是預設行為。 它不能覆寫透過提供更具限制性<xref:System.Globalization.DateTimeStyles>列舉值，例如<xref:System.Globalization.DateTimeStyles.None?displayProperty=nameWithType>。|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|表示如果`input`參數缺少\<位移 > 項目，應提供的當地時區位移。 這是預設行為<xref:System.DateTimeOffset.Parse%2A>方法。|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|表示如果`input`參數缺少\<位移 > 項目，應該提供 UTC 時差 (00:00)。|  
|<xref:System.Globalization.DateTimeStyles.None>|雖然有效，這個值會被忽略，而且沒有任何作用。|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|因為<xref:System.DateTimeOffset>結構不包含`Kind`屬性，這個值就沒有作用。|  
  
 只有<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType>不支援的值。 <xref:System.ArgumentException>如果這個值會包含在會擲回`styles`參數。  
  
   
  
## Examples  
 下列範例示範傳遞的影響<xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType>， <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType>，並<xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType>值來`styles`參數<xref:System.DateTimeOffset.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>方法。  
  
 [!code-csharp[System.DateTimeOffset.Parse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/cs/ParseExamples.cs#3)]
 [!code-vb[System.DateTimeOffset.Parse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/vb/ParseExamples.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">位移大於 14 小時或小於 -14 小時。  
  
-或- 
 <paramref name="styles" /> 不是有效的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。  
  
-或- 
 <paramref name="styles" /> 包含不支援的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。  
  
-或- 
 <paramref name="styles" /> 包含無法搭配使用的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.FormatException"><paramref name="input" /> 不包含日期與時間的有效字串表示。  
  
-或- 
 <paramref name="input" /> 包含不含日期或時間之位移值的字串表示。</exception>
        <altmember cref="Overload:System.DateTimeOffset.TryParse" />
        <altmember cref="Overload:System.DateTimeOffset.ParseExact" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ParseExact">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將日期和時間的指定字串表示，轉換為其相等的 <see cref="T:System.DateTimeOffset" />。 字串表示的格式必須完全符合指定的格式。</summary>
        <format type="text/markdown"><![CDATA[  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]        

         ]]></format>
      </Docs>
    </MemberGroup>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ParseExact (string input, string format, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ParseExact(string input, string format, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ParseExact(System.String,System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (input As String, format As String, formatProvider As IFormatProvider) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset ParseExact(System::String ^ input, System::String ^ format, IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string * IFormatProvider -&gt; DateTimeOffset" Usage="System.DateTimeOffset.ParseExact (input, format, formatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="input">字串，包含要轉換的日期和時間。</param>
        <param name="format">格式規範，其定義 <paramref name="input" /> 應有的格式。</param>
        <param name="formatProvider">物件，提供關於 <paramref name="input" /> 的特定文化特性格式資訊。</param>
        <summary>使用指定的格式以及特定文化特性的格式資訊，將日期和時間的指定字串表示，轉換為其相等的 <see cref="T:System.DateTimeOffset" />。 字串表示的格式必須完全符合指定的格式。</summary>
        <returns>物件，與 <paramref name="input" /> 中包含的日期和時間相等，如 <paramref name="format" /> 和 <paramref name="formatProvider" /> 所指定。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29>方法會剖析所定義的格式必須是日期的字串表示`format`參數。 它也需要\<日期 >，\<時間 >，並\<位移 > 日期和時間的字串表示的項目會出現在所指定的順序`format`。 如果`input`字串不符合這`format`參數，此方法會擲回<xref:System.FormatException>。  相反地，<xref:System.DateTimeOffset.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>方法會剖析任何一種格式提供者所辨識的格式的日期的字串表示<xref:System.Globalization.DateTimeFormatInfo>物件。 <xref:System.DateTimeOffset.Parse%2A> 也可讓\<日期 >，\<時間 >，並\<位移 > 要按照任何順序出現的日期和時間的字串表示的項目。  
  
 `format`參數是包含單一標準格式規範或一或多個自訂格式規範會定義所需的格式字串`input`參數。 如需有效的格式化程式碼的詳細資訊，請參閱[標準日期和時間格式字串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)並[自訂日期和時間格式字串](~/docs/standard/base-types/custom-date-and-time-format-strings.md)。 如果`format`包含`z`， `zz`，或`zzz`自訂格式規範，以指出位移必須存在於`input`，該時差必須包含負號或正號。 如果遺漏符號，方法會擲回<xref:System.FormatException>。  
  
 如果`format`要求`input`包含日期而非時間，產生<xref:System.DateTimeOffset>物件指派午夜的時間 (0: 00:00)。 如果`format`要求`input`包含時間但不是日期，產生<xref:System.DateTimeOffset>物件會指派給本機系統上目前的日期。 如果`format`不需要`input`包含位移，產生<xref:System.DateTimeOffset>本機系統時區位移指派給物件。  
  
 特定日期和時間的符號和中使用的字串`input`所定義`formatProvider`參數，因為是精確的格式`input`如果`format`是標準格式規範的字串。 `formatProvider`參數可以是下列其中一項：  
  
-   A<xref:System.Globalization.CultureInfo>代表的文化特性的物件基礎所在`input`解譯。 <xref:System.Globalization.DateTimeFormatInfo>所傳回的物件及其<xref:System.Globalization.CultureInfo.DateTimeFormat%2A>屬性定義的符號和格式設定在`input`。  
  
-   A<xref:System.Globalization.DateTimeFormatInfo>定義格式的日期和時間資料的物件。  
  
 如果`formatprovider`已`null`，則<xref:System.Globalization.CultureInfo>使用對應至目前的文化特性的物件。  
  
   
  
## Examples  
 下列範例會使用<xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>具有標準和自訂格式規範和不變的文化特性剖析數的日期和時間字串的方法。  
  
 [!code-csharp[System.DateTimeOffset.ParseExact#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/cs/ParseExact.cs#1)]
 [!code-vb[System.DateTimeOffset.ParseExact#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/vb/ParseExact.vb#1)]  

下列範例會剖析預期要符合的字串陣列[ISO 8601](~/docs/standard/base-types/standard-date-and-time-format-strings.md#the-round-trip-o-o-format-specifier)。 範例所示的輸出，使用前置或尾端空格的字串無法成功剖析字串與日期和時間超出範圍的項目一樣。

[!code-csharp[Parsing an ISO 8601 string](~/samples/snippets/csharp/api/system/datetimeoffset/parseexact/parseexact-iso8601.cs)]
[!code-vb[Parsing an ISO 8601 string](~/samples/snippets/visualbasic/api/system/datetimeoffset/parseexact/parseexact-iso8601.vb)]


 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">位移大於 14 小時或小於 -14 小時。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> 為 <see langword="null" />。  
  
-或- 
 <paramref name="format" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.FormatException"><paramref name="input" /> 為空字串 ("")。  
  
-或- 
 <paramref name="input" /> 不包含日期與時間的有效字串表示。  
  
-或- 
 <paramref name="format" /> 為空字串。  
  
-或- 
小時元件和 <paramref name="input" /> 中的 AM/PM 指示項不相符。</exception>
        <block subset="none" type="usage"><para>在  [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]，則<see cref="Overload:System.DateTimeOffset.ParseExact" />方法會擲回<see cref="T:System.FormatException" />小時元件和 AM/PM 指示項不在協議中，如果包含要剖析的字串。 在 [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]和舊版本中，AM/PM 指示項會被忽略。</para></block>
        <altmember cref="Overload:System.DateTimeOffset.TryParseExact" />
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準日期和時間格式字串</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">自訂日期和時間格式字串</related>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ParseExact (ReadOnlySpan&lt;char&gt; input, ReadOnlySpan&lt;char&gt; format, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; input, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (input As ReadOnlySpan(Of Char), format As ReadOnlySpan(Of Char), formatProvider As IFormatProvider, Optional styles As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTimeOffset" />
      <MemberSignature Language="F#" Value="static member ParseExact : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTimeOffset" Usage="System.DateTimeOffset.ParseExact (input, format, formatProvider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="input">代表日期和時間的字元範圍。</param>
        <param name="format">包含定義 <paramref name="input" /> 預期格式之格式規範的字元範圍。</param>
        <param name="formatProvider">提供關於 <paramref name="input" /> 之特定文化特性格式資訊的物件。</param>
        <param name="styles">列舉值的位元組合，表示 <paramref name="input" /> 所允許的格式。</param>
        <summary>使用指定的格式、文化特性特定格式資訊與樣式，將代表日期和時間的字元，轉換為其相等的 <see cref="T:System.DateTimeOffset" />。 日期和時間表示的格式必須完全符合指定的格式。</summary>
        <returns>物件，與 <paramref name="input" /> 參數中包含的日期和時間相等，如 <paramref name="format" />、<paramref name="formatProvider" /> 和 <paramref name="styles" /> 參數所指定。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

這個方法會剖析的字元範圍表示中所定義的格式必須是日期`format`參數。 它也需要\<日期 >，\<時間 >，並\<位移 > 日期和時間的字串表示的項目會出現在所指定的順序`format`。 如果`input`se neshoduje`format`模式，方法會擲回<xref:System.FormatException>。  相反地，<xref:System.DateTimeOffset.Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)?displayProperty=nameWithType>方法會剖析任何一種格式提供者所辨識的格式的日期的字串表示<xref:System.Globalization.DateTimeFormatInfo>物件。 <xref:System.DateTimeOffset.Parse%2A> 也可讓\<日期 >，\<時間 >，並\<位移 > 要按照任何順序出現的日期和時間的字串表示的項目。  
  
 `format`參數是包含單一字元的標準格式規範或一或多個自訂格式規範會定義所需的格式的字元範圍`input`參數。 如需有效的格式化程式碼的詳細資訊，請參閱[標準日期和時間格式字串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)並[自訂日期和時間格式字串](~/docs/standard/base-types/custom-date-and-time-format-strings.md)。 如果`format`包含`z`， `zz`，或`zzz`自訂格式規範，以指出位移必須存在於`input`，該時差必須包含負號或正號。 如果遺漏符號，方法會擲回<xref:System.FormatException>。  
  
 如果`format`要求`input`包含日期而非時間，產生<xref:System.DateTimeOffset>物件指派午夜的時間 (0: 00:00)。 如果`format`要求`input`包含時間但不是日期，產生<xref:System.DateTimeOffset>物件會指派給本機系統上目前的日期。 如果`format`不需要`input`包含位移，產生<xref:System.DateTimeOffset>本機系統時區位移指派給物件。  
  
 特定日期和時間的符號和中使用的字串`input`所定義`formatProvider`參數，因為是精確的格式`input`如果`format`是標準格式規範。 `formatProvider`參數可以是下列其中一項：  
  
-   A<xref:System.Globalization.CultureInfo>代表的文化特性的物件基礎所在`input`解譯。 <xref:System.Globalization.DateTimeFormatInfo>所傳回的物件及其<xref:System.Globalization.CultureInfo.DateTimeFormat%2A>屬性定義的符號和格式設定在`input`。  
  
-   A<xref:System.Globalization.DateTimeFormatInfo>定義格式的日期和時間資料的物件。  
  
 如果`formatprovider`已`null`，則<xref:System.Globalization.CultureInfo>使用對應至目前的文化特性的物件。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">位移大於 14 小時或小於 -14 小時。  
-或-  
<paramref name="styles" /> 參數包含不支援的值。  
-或-  
<paramref name="styles" /> 參數包含無法搭配使用的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。</exception>
        <exception cref="T:System.FormatException"><paramref name="input" /> 是空的字元範圍。  
 -或- <paramref name="input" /> 不包含日期和時間的有效字串表示。  
 -或- <paramref name="format" /> 是空的字元範圍。  
 -或-  
 小時元件和 <paramref name="input" /> 中的 AM/PM 指示項不相符。</exception>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ParseExact (ReadOnlySpan&lt;char&gt; input, string[] formats, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; input, string[] formats, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (input As ReadOnlySpan(Of Char), formats As String(), formatProvider As IFormatProvider, Optional styles As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTimeOffset" />
      <MemberSignature Language="F#" Value="static member ParseExact : ReadOnlySpan&lt;char&gt; * string[] * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTimeOffset" Usage="System.DateTimeOffset.ParseExact (input, formats, formatProvider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="formats" Type="System.String[]" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="input">包含要轉換之日期和時間的字元範圍。</param>
        <param name="formats">格式規範陣列，定義 <paramref name="input" /> 的預期格式。</param>
        <param name="formatProvider">物件，提供關於 <paramref name="input" /> 的特定文化特性格式資訊。</param>
        <param name="styles">列舉值的位元組合，表示 <paramref name="input" /> 所允許的格式。</param>
        <summary>使用指定的格式、文化特性特定格式資訊與樣式，將包含日期和時間字串表示的字元範圍，轉換為其相等的 <see cref="T:System.DateTimeOffset" />。 日期和時間表示的格式必須完全符合其中一個指定的格式。</summary>
        <returns>物件，與 <paramref name="input" /> 參數中包含的日期和時間相等，如 <paramref name="formats" />、<paramref name="formatProvider" /> 和 <paramref name="styles" /> 參數所指定。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 
這個方法會剖析表示日期符合任何一個指派給模式的字元範圍`formats`參數。 如果`input`不符合任一這些模式的變化所定義的任何`styles`參數，此方法會擲回<xref:System.FormatException>。 除了比較`input`到多個格式模式，這個多載的行為相同<xref:System.DateTimeOffset.ParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)?displayProperty=nameWithType>方法。  
  
 `formats`參數是字串陣列，其項目包含單一標準格式規範或定義的可能模式的一或多個自訂格式規範`input`參數。 呼叫此方法時，`input`必須符合其中一種模式。 如需有效的格式化程式碼的詳細資訊，請參閱[標準日期和時間格式字串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)並[自訂日期和時間格式字串](~/docs/standard/base-types/custom-date-and-time-format-strings.md)。 如果中的相符項目`formats`包含`z`， `zz`，或`zzz`自訂格式規範，以指出位移必須存在於`input`，該時差必須包含負號或正號。 如果遺漏符號，方法會擲回<xref:System.FormatException>。  
  
> [!IMPORTANT]
>  使用`formats`的這個多載來指定多個格式的參數可協助降低進入日期和時間時，許多使用者體驗的挫折。 特別是，能夠定義多個輸入的模式可讓應用程式來處理可以包含或缺少的幾個月、 天、 小時、 分鐘和秒的前置零的日期和時間表示。
  
 如果中的相符項目`formats`要求`input`包含日期而非時間，產生<xref:System.DateTimeOffset>物件指派午夜的時間 (0: 00:00)。 如果中的相符項目`formats`要求`input`包含時間但不是日期，產生<xref:System.DateTimeOffset>物件會指派給本機系統上目前的日期。 如果中的相符項目`formats`不需要`input`包含位移時，所產生的位移<xref:System.DateTimeOffset>的值取決於物件`styles`參數。 如果`styles`包含<xref:System.Globalization.DateTimeStyles.AssumeLocal>，當地時區位移指派給<xref:System.DateTimeOffset>物件。 如果`styles`包含<xref:System.Globalization.DateTimeStyles.AssumeUniversal>，Coordinated Universal Time (UTC) 位移或 + 00:00，已指派給<xref:System.DateTimeOffset>物件。 如果指定兩個值，則會使用當地時區位移。  
  
 特定日期和時間的符號和中使用的字串`input`所定義`formatProvider`參數。 也是如此的精確格式`input`，如果相符的項目的`formats`是標準格式規範的字串。 `formatProvider`參數可以是下列其中一項：  
  
-   A<xref:System.Globalization.CultureInfo>代表的文化特性的物件基礎所在`input`解譯。 <xref:System.Globalization.DateTimeFormatInfo>所傳回的物件<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>屬性定義的符號和格式設定在`input`。  
  
-   A<xref:System.Globalization.DateTimeFormatInfo>定義格式的日期和時間資料的物件。  
  
 如果`formatprovider`已`null`，則<xref:System.Globalization.CultureInfo>使用對應至目前的文化特性的物件。  
  
 `styles`參數可讓您定義是否允許泛空白字元在輸入字串中，指示如何剖析字串，而不需要明確的位移元件，並支援 UTC 轉換為剖析作業的一部分。 所有成員<xref:System.Globalization.DateTimeStyles>列舉型別支援除了<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>。 下表列出支援的每個成員的效果。  
  
|`DateTimeStyles` 成員|行為|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|剖析`input`而且，如果有需要，將它轉換成 UTC。 它相當於剖析的字串，然後呼叫<xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType>方法傳回的<xref:System.DateTimeOffset>物件。|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|如果中的相符項目`formats`不需要`input`包含位移的值，傳回的<xref:System.DateTimeOffset>物件提供的當地時區位移。 這是預設值。|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|如果中的相符項目`formats`不需要`input`包含位移的值，傳回的<xref:System.DateTimeOffset>物件指定 UTC 時差 （+ 00:00）。|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|可讓`input`包含未指定的內部空白字元`format`。 額外的空白字元可以出現在日期和時間元件之間以及內個別元件 （除了位移），且剖析字串時，會忽略。|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|可讓`input`包含未指定的前置空格`formats`。 剖析字串時，會忽略這些項目。|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|可讓`input`包含尾端空白不由指定`formats`。 剖析字串時，會忽略這些項目。|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|可讓`input`加入不由指定開頭、 結尾，和內部的空白`formats`。 未指定相符的項目中的所有額外泛空白字元`formats`時剖析字串都會被忽略。|  
|<xref:System.Globalization.DateTimeStyles.None>|表示中不允許其他泛空白字元`input`。 空白字元必須出現在指定的完全相同的特定項目中`formats`進行比對。 這是預設行為。|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|沒有任何作用，因為<xref:System.DateTimeOffset>結構不包含`Kind`屬性。|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">位移大於 14 小時或小於 -14 小時。  
-或- <paramref name="styles" /> 包括不支援的值。  
-或-  
<paramref name="styles" /> 參數包含無法搭配使用的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。</exception>
        <exception cref="T:System.FormatException"><paramref name="input" /> 是空的字元範圍。  
-或- <paramref name="input" /> 不包含日期和時間的有效字串表示。  
-或-  
<paramref name="formats" /> 的項目未包含有效的格式規範。  
-或-  
小時元件和 <paramref name="input" /> 中的 AM/PM 指示項不相符。</exception>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ParseExact (string input, string format, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ParseExact(string input, string format, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (input As String, format As String, formatProvider As IFormatProvider, styles As DateTimeStyles) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset ParseExact(System::String ^ input, System::String ^ format, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles);" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTimeOffset" Usage="System.DateTimeOffset.ParseExact (input, format, formatProvider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="input">字串，包含要轉換的日期和時間。</param>
        <param name="format">格式規範，其定義 <paramref name="input" /> 應有的格式。</param>
        <param name="formatProvider">物件，提供關於 <paramref name="input" /> 的特定文化特性格式資訊。</param>
        <param name="styles">列舉值的位元組合，表示 <paramref name="input" /> 所允許的格式。</param>
        <summary>使用指定的格式、特定文化特性格式資訊以及樣式，將日期和時間的指定字串表示，轉換為其相等的 <see cref="T:System.DateTimeOffset" />。 字串表示的格式必須完全符合指定的格式。</summary>
        <returns>物件，與 <paramref name="input" /> 參數中包含的日期和時間相等，如 <paramref name="format" />、<paramref name="formatProvider" /> 和 <paramref name="styles" /> 參數所指定。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>方法會剖析所定義的格式必須是日期的字串表示`format`參數。 它也需要\<日期 >，\<時間 >，並\<位移 > 日期和時間的字串表示的項目會出現在所指定的順序`format`。 如果`input`字串不符合的模式`format`參數，所定義的任何變化`styles`參數，此方法會擲回<xref:System.FormatException>。  相反地，<xref:System.DateTimeOffset.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>方法會剖析任何一種格式提供者所辨識的格式的日期的字串表示<xref:System.Globalization.DateTimeFormatInfo>物件。 <xref:System.DateTimeOffset.Parse%2A> 也可讓\<日期 >，\<時間 >，並\<位移 > 要按照任何順序出現的日期和時間的字串表示的項目。  
  
 `format`參數是字串，包含單一標準格式規範或一或多個自訂格式規範會定義所需的模式`input`參數。 如需有效的格式化程式碼的詳細資訊，請參閱[標準日期和時間格式字串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)並[自訂日期和時間格式字串](~/docs/standard/base-types/custom-date-and-time-format-strings.md)。 如果`format`包含`z`， `zz`，或`zzz`自訂格式規範，以指出位移必須存在於`input`，該時差必須包含負號或正號。 如果遺漏符號，方法會擲回<xref:System.FormatException>。  
  
 如果`format`要求`input`包含日期而非時間，產生<xref:System.DateTimeOffset>物件指派午夜的時間 (0: 00:00)。 如果`format`要求`input`包含時間但不是日期，產生<xref:System.DateTimeOffset>物件會指派給本機系統上目前的日期。 如果`format`不需要`input`包含位移時，所產生的位移<xref:System.DateTimeOffset>的值取決於物件`styles`參數。 如果`styles`包含<xref:System.Globalization.DateTimeStyles.AssumeLocal>，當地時區位移指派給<xref:System.DateTimeOffset>物件。 如果`styles`包含<xref:System.Globalization.DateTimeStyles.AssumeUniversal>，Coordinated Universal Time (UTC) 位移或 + 00:00，已指派給<xref:System.DateTimeOffset>物件。 如果指定兩個值，則會使用當地時區位移。  
  
 特定日期和時間的符號和中使用的字串`input`所定義`formatProvider`參數。 也是如此的精確格式`input`，如果`format`是標準格式規範的字串。 `formatProvider`參數可以是下列其中一項：  
  
-   A<xref:System.Globalization.CultureInfo>代表的文化特性的物件基礎所在`input`解譯。 <xref:System.Globalization.DateTimeFormatInfo>所傳回的物件<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>屬性定義的符號和格式設定在`input`。  
  
-   A<xref:System.Globalization.DateTimeFormatInfo>定義格式的日期和時間資料的物件。  
  
 如果`formatprovider`已`null`，則<xref:System.Globalization.CultureInfo>使用對應至目前的文化特性的物件。  
  
 `styles`參數可讓您定義是否允許泛空白字元在輸入字串中，指示如何剖析字串，而不需要明確的位移元件，並支援 UTC 轉換為剖析作業的一部分。 所有成員<xref:System.Globalization.DateTimeStyles>列舉型別支援除了<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>。 下表列出支援的每個成員的效果。  
  
|`DateTimeStyles` 成員|行為|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|剖析`input`而且，如果有需要，將它轉換成 UTC。 它相當於剖析的字串，然後呼叫<xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType>方法傳回的<xref:System.DateTimeOffset>物件。|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|如果`format`不需要`input`包含位移的值，傳回的<xref:System.DateTimeOffset>物件提供的當地時區位移。 這是預設值。|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|如果`format`不需要`input`包含位移的值，傳回的<xref:System.DateTimeOffset>物件指定 UTC 時差 （+ 00:00）。|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|可讓`input`包含未指定的內部空白字元`format`。 額外的空白字元可以出現日期和時間的元件之間，以及在個別的元件，和剖析字串時，會忽略。|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|可讓`input`包含未指定的前置空格`format`。 剖析字串時，會忽略這些項目。|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|可讓`input`包含尾端空白不由指定`format`。 剖析字串時，會忽略這些項目。|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|可讓`input`加入不由指定開頭、 結尾，和內部的空白`format`。 中未指定的所有額外泛空白字元`format`時剖析字串都會被忽略。|  
|<xref:System.Globalization.DateTimeStyles.None>|表示中不允許其他泛空白字元`input`。 泛空白字元必須出現在確實以指定`format`。 這是預設行為。|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|沒有任何作用，因為<xref:System.DateTimeOffset>結構不包含`Kind`屬性。|  
  
   
  
## Examples  
 下列範例會使用<xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>方法使用標準和自訂格式規範、 文化特性而異，和各種<xref:System.Globalization.DateTimeStyles>剖析數的日期和時間字串的值。  
  
 [!code-csharp[System.DateTimeOffset.ParseExact#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/cs/ParseExact.cs#2)]
 [!code-vb[System.DateTimeOffset.ParseExact#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/vb/ParseExact.vb#2)]  

下列範例會使用各種<xref:System.Globalization.DateTimeStyles>剖析預期要符合的字串陣列的值[ISO 8601](~/docs/standard/base-types/standard-date-and-time-format-strings.md#the-round-trip-o-o-format-specifier)。 如範例輸出所示，正確格式的字串無法剖析如果：

- 它們包含泛空白字元和適當<xref:System.Globalization.DateTimeStyles>旗標 (例如<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces?displayProperty=nameWithType>方法呼叫中尚未提供。

- 它們包含超出範圍的日期和時間的項目。

未指定 UTC 時差的字串會假設的當地時區位移 (在此情況下，-07:00) 除非<xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType>旗標是方法呼叫中提供。 在此情況下，它們會假設為國際標準時間。

[!code-csharp[Parsing ISO 8601 strings](~/samples/snippets/csharp/api/system/datetimeoffset/parseexact/parseexact-iso8601-2.cs)]
[!code-vb[Parsing ISO 8601 strings](~/samples/snippets/visualbasic/api/system/datetimeoffset/parseexact/parseexact-iso8601-2.vb)]


 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">位移大於 14 小時或小於 -14 小時。  
  
-或- 
<paramref name="styles" /> 參數包含不支援的值。  
  
-或- 
<paramref name="styles" /> 參數包含無法搭配使用的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> 為 <see langword="null" />。  
  
-或- 
 <paramref name="format" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.FormatException"><paramref name="input" /> 為空字串 ("")。  
  
-或- 
 <paramref name="input" /> 不包含日期與時間的有效字串表示。  
  
-或- 
 <paramref name="format" /> 為空字串。  
  
-或- 
小時元件和 <paramref name="input" /> 中的 AM/PM 指示項不相符。</exception>
        <block subset="none" type="usage"><para>在  [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]，則<see cref="Overload:System.DateTimeOffset.ParseExact" />方法會擲回<see cref="T:System.FormatException" />小時元件和 AM/PM 指示項不在協議中，如果包含要剖析的字串。 在 [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]和舊版本中，AM/PM 指示項會被忽略。</para></block>
        <altmember cref="Overload:System.DateTimeOffset.TryParseExact" />
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準日期和時間格式字串</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">自訂日期和時間格式字串</related>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ParseExact (string input, string[] formats, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ParseExact(string input, string[] formats, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (input As String, formats As String(), formatProvider As IFormatProvider, styles As DateTimeStyles) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset ParseExact(System::String ^ input, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles);" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string[] * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTimeOffset" Usage="System.DateTimeOffset.ParseExact (input, formats, formatProvider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="input">字串，包含要轉換的日期和時間。</param>
        <param name="formats">格式規範陣列，定義 <paramref name="input" /> 的預期格式。</param>
        <param name="formatProvider">物件，提供關於 <paramref name="input" /> 的特定文化特性格式資訊。</param>
        <param name="styles">列舉值的位元組合，表示 <paramref name="input" /> 所允許的格式。</param>
        <summary>使用指定的格式、特定文化特性格式資訊以及樣式，將日期和時間的指定字串表示，轉換為其相等的 <see cref="T:System.DateTimeOffset" />。 字串表示的格式必須完全符合其中一個指定的格式。</summary>
        <returns>物件，與 <paramref name="input" /> 參數中包含的日期和時間相等，如 <paramref name="formats" />、<paramref name="formatProvider" /> 和 <paramref name="styles" /> 參數所指定。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>方法會剖析的日期字串表示符合任何一個模式指派給`formats`參數。 如果`input`字串不符合任一這些模式的變化所定義的任何`styles`參數，此方法會擲回<xref:System.FormatException>。 除了比較`input`到多個格式模式，這個多載的行為相同<xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>方法。  
  
 `formats`參數是字串陣列，其項目包含單一標準格式規範或定義的可能模式的一或多個自訂格式規範`input`參數。 呼叫此方法時，`input`必須符合其中一種模式。 如需有效的格式化程式碼的詳細資訊，請參閱[標準日期和時間格式字串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)並[自訂日期和時間格式字串](~/docs/standard/base-types/custom-date-and-time-format-strings.md)。 如果中的相符項目`formats`包含`z`， `zz`，或`zzz`自訂格式規範，以指出位移必須存在於`input`，該時差必須包含負號或正號。 如果遺漏符號，方法會擲回<xref:System.FormatException>。  
  
> [!IMPORTANT]
>  使用`formats`的這個多載來指定多個格式的參數可協助降低進入日期和時間時，許多使用者體驗的挫折。 特別是，能夠定義多個輸入的模式可讓應用程式來處理可以包含或缺少的幾個月、 天、 小時、 分鐘和秒的前置零的日期和時間表示。 此圖說明範例。  
  
 如果中的相符項目`formats`要求`input`包含日期而非時間，產生<xref:System.DateTimeOffset>物件指派午夜的時間 (0: 00:00)。 如果中的相符項目`formats`要求`input`包含時間但不是日期，產生<xref:System.DateTimeOffset>物件會指派給本機系統上目前的日期。 如果中的相符項目`formats`不需要`input`包含位移時，所產生的位移<xref:System.DateTimeOffset>的值取決於物件`styles`參數。 如果`styles`包含<xref:System.Globalization.DateTimeStyles.AssumeLocal>，當地時區位移指派給<xref:System.DateTimeOffset>物件。 如果`styles`包含<xref:System.Globalization.DateTimeStyles.AssumeUniversal>，Coordinated Universal Time (UTC) 位移或 + 00:00，已指派給<xref:System.DateTimeOffset>物件。 如果指定兩個值，則會使用當地時區位移。  
  
 特定日期和時間的符號和中使用的字串`input`所定義`formatProvider`參數。 也是如此的精確格式`input`，如果相符的項目的`formats`是標準格式規範的字串。 `formatProvider`參數可以是下列其中一項：  
  
-   A<xref:System.Globalization.CultureInfo>代表的文化特性的物件基礎所在`input`解譯。 <xref:System.Globalization.DateTimeFormatInfo>所傳回的物件<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>屬性定義的符號和格式設定在`input`。  
  
-   A<xref:System.Globalization.DateTimeFormatInfo>定義格式的日期和時間資料的物件。  
  
 如果`formatprovider`已`null`，則<xref:System.Globalization.CultureInfo>使用對應至目前的文化特性的物件。  
  
 `styles`參數可讓您定義是否允許泛空白字元在輸入字串中，指示如何剖析字串，而不需要明確的位移元件，並支援 UTC 轉換為剖析作業的一部分。 所有成員<xref:System.Globalization.DateTimeStyles>列舉型別支援除了<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>。 下表列出支援的每個成員的效果。  
  
|`DateTimeStyles` 成員|行為|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|剖析`input`而且，如果有需要，將它轉換成 UTC。 它相當於剖析的字串，然後呼叫<xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType>方法傳回的<xref:System.DateTimeOffset>物件。|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|如果中的相符項目`formats`不需要`input`包含位移的值，傳回的<xref:System.DateTimeOffset>物件提供的當地時區位移。 這是預設值。|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|如果中的相符項目`formats`不需要`input`包含位移的值，傳回的<xref:System.DateTimeOffset>物件指定 UTC 時差 （+ 00:00）。|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|可讓`input`包含未指定的內部空白字元`format`。 額外的空白字元可以出現在日期和時間元件之間以及內個別元件 （除了位移），且剖析字串時，會忽略。|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|可讓`input`包含未指定的前置空格`formats`。 剖析字串時，會忽略這些項目。|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|可讓`input`包含尾端空白不由指定`formats`。 剖析字串時，會忽略這些項目。|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|可讓`input`加入不由指定開頭、 結尾，和內部的空白`formats`。 未指定相符的項目中的所有額外泛空白字元`formats`時剖析字串都會被忽略。|  
|<xref:System.Globalization.DateTimeStyles.None>|表示中不允許其他泛空白字元`input`。 空白字元必須出現在指定的完全相同的特定項目中`formats`進行比對。 這是預設行為。|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|沒有任何作用，因為<xref:System.DateTimeOffset>結構不包含`Kind`屬性。|  
  
   
  
## Examples  
 下列範例會定義多個輸入的日期與時間和位移的值的字串表示格式，並接著會傳遞由使用者輸入的字串<xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>方法。  
  
 [!code-csharp[System.DateTimeOffset.ParseExact#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/cs/ParseExact.cs#3)]
 [!code-vb[System.DateTimeOffset.ParseExact#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/vb/ParseExact.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">位移大於 14 小時或小於 -14 小時。  
  
-或- 
 <paramref name="styles" /> 包含不支援的值。  
  
-或- 
<paramref name="styles" /> 參數包含無法搭配使用的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.FormatException"><paramref name="input" /> 為空字串 ("")。  
  
-或- 
 <paramref name="input" /> 不包含日期與時間的有效字串表示。  
  
-或- 
<paramref name="formats" /> 的項目未包含有效的格式規範。  
  
-或- 
小時元件和 <paramref name="input" /> 中的 AM/PM 指示項不相符。</exception>
        <block subset="none" type="usage"><para>在  [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]，則<see cref="Overload:System.DateTimeOffset.ParseExact" />方法會擲回<see cref="T:System.FormatException" />小時元件和 AM/PM 指示項不在協議中，如果包含要剖析的字串。 在 [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]和舊版本中，AM/PM 指示項會被忽略。</para></block>
        <altmember cref="Overload:System.DateTimeOffset.TryParseExact" />
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準日期和時間格式字串</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">自訂日期和時間格式字串</related>
      </Docs>
    </Member>
    <Member MemberName="Second">
      <MemberSignature Language="C#" Value="public int Second { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Second" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Second" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Second As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Second { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Second : int" Usage="System.DateTimeOffset.Second" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得目前 <see cref="T:System.DateTimeOffset" /> 物件所表示之時鐘時間的秒數元件。</summary>
        <value><see cref="T:System.DateTimeOffset" /> 物件的秒數元件，以 0 到 59 之間的整數表示。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.Second%2A>的值不會影響屬性<xref:System.DateTimeOffset.Offset%2A>屬性。  
  
 您也可以建立的字串表示法<xref:System.DateTimeOffset>藉由呼叫物件之第二個元件<xref:System.DateTimeOffset.ToString%2A>方法與"s"或"ss"自訂格式規範。  
  
   
  
## Examples  
 下列範例顯示的第二個元件<xref:System.DateTimeOffset>方式有三種物件：  
  
-   所擷取的值<xref:System.DateTimeOffset.Second%2A>屬性。  
  
-   藉由呼叫<xref:System.DateTimeOffset.ToString%28System.String%29>方法與"s"格式規範。  
  
-   藉由呼叫<xref:System.DateTimeOffset.ToString%28System.String%29>方法使用"ss"格式規範。  
  
 [!code-csharp[System.DateTimeOffset.Properties#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#14)]
 [!code-vb[System.DateTimeOffset.Properties#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Subtract">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>從目前 <see cref="T:System.DateTimeOffset" /> 物件減去指定的時間或持續期間。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public TimeSpan Subtract (DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan Subtract(valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Subtract(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Function Subtract (value As DateTimeOffset) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan Subtract(DateTimeOffset value);" />
      <MemberSignature Language="F#" Value="member this.Subtract : DateTimeOffset -&gt; TimeSpan" Usage="dateTimeOffset.Subtract value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="value">物件，表示要減去的值。</param>
        <summary>從目前的 <see cref="T:System.DateTimeOffset" /> 物件減去表示特定日期和時間的 <see cref="T:System.DateTimeOffset" /> 值。</summary>
        <returns>物件，指定兩個 <see cref="T:System.DateTimeOffset" /> 物件的間隔。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會將轉換同時<xref:System.DateTimeOffset>物件為 Coordinated Universal Time (UTC)，然後才計算的時間間隔分隔。 這會移除任何比較，在可能會有不同的 UTC 位移的效果。  
  
> [!NOTE]
>  支援自訂運算子的語言，您也可以使用減法運算子執行日期和時間的減法。 如需詳細資訊，請參閱<xref:System.DateTimeOffset.op_Subtraction%2A>方法。  
  
 因為沒有目前<xref:System.DateTimeOffset>物件也`value`參數代表的日期和時間以特定的時區，<xref:System.DateTimeOffset.Subtract%28System.DateTimeOffset%29>方法不會考慮特定時區的調整規則時它減去日期和時間。  
  
   
  
## Examples  
 下列範例說明使用減法<xref:System.DateTimeOffset.Subtract%28System.DateTimeOffset%29>方法。  
  
 [!code-csharp[System.DateTimeOffset.Methods#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#13)]
 [!code-vb[System.DateTimeOffset.Methods#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#13)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">使用日期和時間執行算術運算</related>
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public DateTimeOffset Subtract (TimeSpan value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset Subtract(valuetype System.TimeSpan value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Subtract(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Subtract (value As TimeSpan) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset Subtract(TimeSpan value);" />
      <MemberSignature Language="F#" Value="member this.Subtract : TimeSpan -&gt; DateTimeOffset" Usage="dateTimeOffset.Subtract value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="value">要減去的時間間隔。</param>
        <summary>從目前 <see cref="T:System.DateTimeOffset" /> 物件減去指定的時間間隔。</summary>
        <returns>物件，等於目前 <see cref="T:System.DateTimeOffset" /> 物件所代表的日期和時間減去 <paramref name="value" /> 所代表的時間間隔。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用<xref:System.DateTimeOffset.Subtract%2A>来減去的時間間隔 （天、 小時、 分鐘、 秒或毫秒為單位） 在單一作業中的多個類型的方法。 其行為完全相同<xref:System.DateTimeOffset.op_Subtraction%28System.DateTimeOffset%2CSystem.TimeSpan%29>方法，以定義減法運算子。 <xref:System.DateTimeOffset>結構也支援特殊的新增方法 (例如<xref:System.DateTimeOffset.AddDays%2A>， <xref:System.DateTimeOffset.AddHours%2A>，和<xref:System.DateTimeOffset.AddMinutes%2A>)，可讓您藉由將負值指派給方法的參數執行減法。  
  
> [!NOTE]
>  這個方法會傳回新<xref:System.DateTimeOffset>物件。 它不會修改目前物件的值加上`timeSpan`其日期和時間。  
  
 <xref:System.DateTimeOffset.Subtract%2A>方法不會影響的值<xref:System.DateTimeOffset>物件的<xref:System.DateTimeOffset.Offset%2A>屬性。 傳回<xref:System.DateTimeOffset>物件具有相同的位移與原始物件。  
  
 因為目前<xref:System.DateTimeOffset>物件不代表特定的時區，時間與日期<xref:System.DateTimeOffset.Subtract%28System.TimeSpan%29>方法不會考慮特定時區的調整規則時它會執行減法運算。  
  
   
  
## Examples  
 下列範例說明使用減法<xref:System.DateTimeOffset.Subtract%2A>方法。  
  
 [!code-csharp[System.DateTimeOffset.Methods#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#14)]
 [!code-vb[System.DateTimeOffset.Methods#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTimeOffset" /> 值小於 <see cref="F:System.DateTimeOffset.MinValue" />。  
  
-或- 
產生的 <see cref="T:System.DateTimeOffset" /> 值大於 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">使用日期和時間執行算術運算</related>
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.System#IComparable#CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (obj As Object) As Integer Implements IComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IComparable.CompareTo(System::Object ^ obj) = IComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">要與目前 <see cref="T:System.DateTimeOffset" /> 物件比較的物件。</param>
        <summary>將目前 <see cref="T:System.DateTimeOffset" /> 物件的值與相同型別的其他物件進行比較。</summary>
        <returns>32 位元帶正負號的整數，表示目前 <see cref="T:System.DateTimeOffset" /> 物件是小於、等於還是大於 <paramref name="obj" />。 方法的傳回值依如下解譯： 
 <list type="table"><listheader><term> 傳回值 
 </term><description> 描述 
 </description></listheader><item><term> 小於零 
 </term><description> 目前 <see cref="T:System.DateTimeOffset" /> 物件小於 (早於) <paramref name="obj" />。  
  
 </description></item><item><term> 零 
 </term><description> 目前 <see cref="T:System.DateTimeOffset" /> 物件等於 <paramref name="obj" /> (時間點相同)。  
  
 </description></item><item><term> 大於零 
 </term><description> 目前 <see cref="T:System.DateTimeOffset" /> 物件大於 (晚於) <paramref name="obj" />。  
  
 </description></item></list></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.IDeserializationCallback.OnDeserialization">
      <MemberSignature Language="C#" Value="void IDeserializationCallback.OnDeserialization (object sender);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub OnDeserialization (sender As Object) Implements IDeserializationCallback.OnDeserialization" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System::Object ^ sender) = System::Runtime::Serialization::IDeserializationCallback::OnDeserialization;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="sender">初始化回呼 (Callback) 的物件。 這個參數的功能目前未實作。</param>
        <summary>在物件完成還原序列化時執行。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="info">要填入資料的物件。</param>
        <param name="context">這個序列化的目的端 (請參閱 <see cref="T:System.Runtime.Serialization.StreamingContext" />)。</param>
        <summary>將序列化目前 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 物件所需的資料填入 <see cref="T:System.DateTimeOffset" /> 物件。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="info" /> 參數為 <see langword="null" />。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">需要完全信任立即呼叫端。 此成員不能由部分信任或不透明的程式碼。</permission>
      </Docs>
    </Member>
    <Member MemberName="Ticks">
      <MemberSignature Language="C#" Value="public long Ticks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Ticks" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Ticks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Ticks As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long Ticks { long get(); };" />
      <MemberSignature Language="F#" Value="member this.Ticks : int64" Usage="System.DateTimeOffset.Ticks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得刻度數，這個值表示目前 <see cref="T:System.DateTimeOffset" /> 物件之時鐘時間的日期和時間。</summary>
        <value><see cref="T:System.DateTimeOffset" /> 物件之時間的刻度數。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.Ticks%2A>的值不會影響屬性<xref:System.DateTimeOffset.Offset%2A>屬性。  
  
 值<xref:System.DateTimeOffset.Ticks%2A>屬性表示 0001 年 1 月 1 日，12:00:00 午夜起已經過的 100 奈秒間隔數 (值<xref:System.DateTimeOffset.MinValue>)。 它不包含刻度將會新增閏秒。 奈秒是一個十億分之一秒;第二個有 10 萬個刻度。 值<xref:System.DateTimeOffset.Ticks%2A>屬性的範圍是從`DateTimeOffset.MinValue.Ticks`至`DateTimeOffset.MaxValue.Ticks`。  
  
 您可以指派至的刻度數<xref:System.DateTimeOffset>物件使用<xref:System.DateTimeOffset.%23ctor%28System.Int64%2CSystem.TimeSpan%29>建構函式多載。  
  
   
  
## Examples  
 下列範例會初始化<xref:System.DateTimeOffset>物件下的刻度數估計日期為 2008 年 7 月 1 日在 1:23:07。 然後，它會顯示日期和主控台表示依該日期的刻度數。  
  
 [!code-csharp[System.DateTimeOffset.Properties#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#15)]
 [!code-vb[System.DateTimeOffset.Properties#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#15)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.UtcDateTime" />
      </Docs>
    </Member>
    <Member MemberName="TimeOfDay">
      <MemberSignature Language="C#" Value="public TimeSpan TimeOfDay { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan TimeOfDay" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.TimeOfDay" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TimeOfDay As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan TimeOfDay { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.TimeOfDay : TimeSpan" Usage="System.DateTimeOffset.TimeOfDay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得目前 <see cref="T:System.DateTimeOffset" /> 物件之一天中的時間。</summary>
        <value>自午夜起已經過之目前日期的時間間隔。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.TimeOfDay%2A>的值不會影響屬性<xref:System.DateTimeOffset.Offset%2A>屬性。  
  
 <xref:System.DateTimeOffset.TimeOfDay%2A>屬性傳回的時間元件<xref:System.DateTimeOffset>物件的形式<xref:System.TimeSpan>物件。 它相當於<xref:System.DateTime.TimeOfDay%2A?displayProperty=nameWithType>屬性。  
  
   
  
## Examples  
 下列範例會使用<xref:System.DateTimeOffset.TimeOfDay%2A>擷取時間，並在主控台中顯示的屬性。  
  
 [!code-csharp[System.DateTimeOffset.Properties#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#16)]
 [!code-vb[System.DateTimeOffset.Properties#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#16)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToFileTime">
      <MemberSignature Language="C#" Value="public long ToFileTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToFileTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToFileTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToFileTime () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToFileTime();" />
      <MemberSignature Language="F#" Value="member this.ToFileTime : unit -&gt; int64" Usage="dateTimeOffset.ToFileTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>將目前 <see cref="T:System.DateTimeOffset" /> 物件的值轉換成 Windows 檔案時間。</summary>
        <returns>目前 <see cref="T:System.DateTimeOffset" /> 物件的值，以 Windows 檔案時間表示。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Windows 檔案時間會表示 12:00，年 1 月 1 西元 1601年日午夜起已經過的 100 奈秒間隔數的 64 位元值 (C.E.)國際標準時間 (UTC)。 Windows 會使用檔案的時間，來記錄應用程式建立、 存取，或寫入檔案時。  
  
 <xref:System.DateTimeOffset.ToFileTime%2A>方法將目前<xref:System.DateTimeOffset>物件的日期和時間轉換為 UTC，再執行轉換。 換句話說，呼叫<xref:System.DateTimeOffset.ToFileTime%2A>方法相當於下列方法呼叫：  
  
```csharp
this.ToUtcDateTime().ToFileTime();  
```  
  
```vb  
Me.ToUtcDateTime().ToFileTime()  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">產生的檔案時間將會表示在西元 1601 年 1 月 1 日午夜以前的日期和時間， 以 Coordinated Universal Time (UTC) 時間計算。</exception>
        <altmember cref="M:System.DateTimeOffset.FromFileTime(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="ToLocalTime">
      <MemberSignature Language="C#" Value="public DateTimeOffset ToLocalTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset ToLocalTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToLocalTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToLocalTime () As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset ToLocalTime();" />
      <MemberSignature Language="F#" Value="member this.ToLocalTime : unit -&gt; DateTimeOffset" Usage="dateTimeOffset.ToLocalTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>將目前 <see cref="T:System.DateTimeOffset" /> 物件轉換為表示本地時間的 <see cref="T:System.DateTimeOffset" /> 物件。</summary>
        <returns>物件，表示轉換為本地時間之目前 <see cref="T:System.DateTimeOffset" /> 物件的日期和時間。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在執行轉換為當地時間，方法首先將目前<xref:System.DateTimeOffset>物件的日期和時間為 Coordinated Universal Time (UTC) 減去的時間位移。 它然後將轉換的 UTC 日期和時間為當地時間加上當地時區位移。 這麼做，需要針對當地時區調整規則的帳戶。  
  
 這兩個值的目前<xref:System.DateTimeOffset>物件，而<xref:System.DateTimeOffset>方法呼叫所傳回的物件代表相同的點的時間。 也就是說，如果兩者當中都會傳遞至<xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>方法，此方法會傳回`true`。  
  
 如果轉換會導致超出範圍的時間<xref:System.DateTimeOffset>型別<xref:System.DateTimeOffset.ToLocalTime%2A>方法會傳回<xref:System.DateTimeOffset>物件的日期和時間設定為 <xref:System.DateTimeOffset.MaxValue>或<xref:System.DateTimeOffset.MinValue>和位移設定為本地時區位移。  
  
   
  
## Examples  
 下列範例會使用<xref:System.DateTimeOffset.ToLocalTime%2A>方法，將轉換<xref:System.DateTimeOffset>為太平洋標準時區的當地時間的值。 它也會說明方法的當地時區的調整規則的支援。  
  
 [!code-csharp[System.DateTimeOffset.Methods#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#15)]
 [!code-vb[System.DateTimeOffset.Methods#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#15)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.ToUniversalTime" />
      </Docs>
    </Member>
    <Member MemberName="ToOffset">
      <MemberSignature Language="C#" Value="public DateTimeOffset ToOffset (TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset ToOffset(valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToOffset(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToOffset (offset As TimeSpan) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset ToOffset(TimeSpan offset);" />
      <MemberSignature Language="F#" Value="member this.ToOffset : TimeSpan -&gt; DateTimeOffset" Usage="dateTimeOffset.ToOffset offset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="offset">要將 <see cref="T:System.DateTimeOffset" /> 值轉換成的位移。</param>
        <summary>將目前 <see cref="T:System.DateTimeOffset" /> 物件的值轉換為位移值指定的日期和時間。</summary>
        <returns>物件，等於起始 <see cref="T:System.DateTimeOffset" /> 物件 (即它們的 <see cref="M:System.DateTimeOffset.ToUniversalTime" /> 方法都會傳回相同的時間點) 但其 <see cref="P:System.DateTimeOffset.Offset" /> 屬性設定成 <paramref name="offset" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.ToOffset%2A>方法是呼叫的替代方式<xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType>方法。 它可以是適用於當已知時區的位移與 Coordinated Universal Time (UTC) 時，執行簡單的從某個時區轉換到另一個項目。 不過，因為沒有原始<xref:System.DateTimeOffset>物件或新<xref:System.DateTimeOffset>方法呼叫所傳回的物件會明確地與特定的時區，方法不套用任何轉換的時區調整規則。  
  
   
  
## Examples  
 下列範例說明如何使用<xref:System.DateTimeOffset.ToOffset%2A>方法，將轉換<xref:System.DateTimeOffset>物件到<xref:System.DateTimeOffset>物件使用不同的位移。  
  
 [!code-csharp[System.DateTimeOffset.ToOffset#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ToOffset/cs/ToOffset.cs#1)]
 [!code-vb[System.DateTimeOffset.ToOffset#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ToOffset/vb/ToOffset.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">產生之 <see cref="T:System.DateTimeOffset" /> 物件的 <see cref="P:System.DateTimeOffset.DateTime" /> 值早於 <see cref="F:System.DateTimeOffset.MinValue" />。  
  
-或- 
產生之 <see cref="T:System.DateTimeOffset" /> 物件的 <see cref="P:System.DateTimeOffset.DateTime" /> 值晚於 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" /> 小於 -14 小時。  
  
-或- 
 <paramref name="offset" /> 大於 14 小時。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將目前 <see cref="T:System.DateTimeOffset" /> 物件的值，轉換為其相等的字串表示。</summary>
        <format type="text/markdown"><![CDATA[  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]        

         ]]></format>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="dateTimeOffset.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>將目前 <see cref="T:System.DateTimeOffset" /> 物件的值，轉換為其相等的字串表示。</summary>
        <returns>包含附加至字串尾端之位移的 <see cref="T:System.DateTimeOffset" /> 物件之字串表示。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法的傳回值是相同<xref:System.DateTime.ToString?displayProperty=nameWithType>方法，只不過它包含空格，後面附加在字串結尾的位移。 換句話說，使用簡短日期模式，而長日期模式的輸出格式化和`zzz`自訂格式字串，從上一個項目，以空格分隔每個項目。 比方說，如果<xref:System.DateTime.ToString?displayProperty=nameWithType>傳回值的時間 2008 年 1 月 12 日下午 6:15:50，<xref:System.DateTimeOffset.ToString>傳回值的時間 2008 年 1 月 12 日下午 6:15:50-08:00，時間是八個小時後置 Coordinated Universal Time (UTC)。  
  
 這個方法會使用衍生自目前的文化特性格式資訊。 如需詳細資訊，請參閱<xref:System.Globalization.CultureInfo.CurrentCulture%2A>。 其他多載<xref:System.DateTimeOffset.ToString%2A>方法可讓您指定的文化特性的格式設定，來使用，以及定義的輸出模式<xref:System.DateTimeOffset>值。  
  
   
  
## Examples  
 下列範例說明如何呼叫<xref:System.DateTimeOffset.ToString>方法，並在其目前的文化特性為 en-us 的系統上顯示其輸出-我們。  
  
 [!code-csharp[System.DateTimeOffset.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/cs/ToString.cs#1)]
 [!code-vb[System.DateTimeOffset.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/vb/ToString.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">日期和時間超出目前文化特性使用之曆法所支援的日期範圍。</exception>
        <block subset="none" type="usage"><para><see cref="M:System.DateTimeOffset.ToString" />方法會傳回在目前的文化特性所使用的行事曆中的日期和時間的字串表示。 如果目前的值<see cref="T:System.DateTimeOffset" />執行個體是早於<see cref="P:System.Globalization.Calendar.MinSupportedDateTime" />或更晚<see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />，此方法會擲回<see cref="T:System.ArgumentOutOfRangeException" />。 下列範例提供一個實例。 它會嘗試將超出範圍的日期格式<see cref="T:System.Globalization.HijriCalendar" />類別，在目前的文化特性為阿拉伯文 （敘利亞）。  
  
[!code-csharp[System.DateTimeOffset.ToString.ArgumentOutOfRangeException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/cs/datetimeoffset.tostring.argumentoutofrangeexception2.cs#2)] [!code-vb[System.DateTimeOffset.ToString.ArgumentOutOfRangeException#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/vb/datetimeoffset.tostring.argumentoutofrangeexception2.vb#2)]</para></block>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (formatProvider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="override this.ToString : IFormatProvider -&gt; string" Usage="dateTimeOffset.ToString formatProvider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="formatProvider">物件，提供特定文化特性格式資訊。</param>
        <summary>使用指定的文化特性特定格式資訊，將目前 <see cref="T:System.DateTimeOffset" /> 物件的值轉換為其對等字串表示。</summary>
        <returns>目前 <see cref="T:System.DateTimeOffset" /> 物件值的字串表示 (如 <paramref name="formatProvider" /> 所指定)。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法的傳回值為其相等的多載的相同<xref:System.DateTime.ToString%2A?displayProperty=nameWithType>方法，只不過它包含空格，後面附加在字串結尾的位移。 換句話說，使用簡短日期模式，而長日期模式的輸出格式化和`zzz`自訂格式字串，從上一個項目，以空格分隔每個項目。  
  
 這三個元素的格式由所定義`formatProvider`參數。 `formatProvider`參數可以是下列其中一項：  
  
-   A<xref:System.Globalization.CultureInfo>物件，表示文化特性的格式化慣例會套用至傳回的字串。 <xref:System.Globalization.DateTimeFormatInfo>所傳回的物件<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>屬性會定義傳回之字串的格式。  
  
-   A<xref:System.Globalization.DateTimeFormatInfo>定義格式的日期和時間資料的物件。  
  
 如果`formatProvider`已`null`，則<xref:System.Globalization.DateTimeFormatInfo>會使用目前文化特性相關聯的物件 (請參閱<xref:System.Globalization.CultureInfo.CurrentCulture%2A>)。  
  
   
  
## Examples  
 下列範例會顯示<xref:System.DateTimeOffset>物件使用<xref:System.Globalization.CultureInfo>代表文化特性而異，以及四個其他文化特性的物件。  
  
 [!code-csharp[System.DateTimeOffset.ToString#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/cs/ToString.cs#2)]
 [!code-vb[System.DateTimeOffset.ToString#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/vb/ToString.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">日期和時間超出 <paramref name="formatProvider" /> 使用之曆法所支援的日期範圍。</exception>
        <block subset="none" type="usage"><para><see cref="M:System.DateTimeOffset.ToString(System.IFormatProvider)" />方法會傳回日期和時間的字串表示中所代表之文化特性所使用的曆法<paramref name="formatProvider" />參數。 其行事曆由定義<see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" />屬性。 如果目前的值<see cref="T:System.DateTimeOffset" />執行個體是早於<see cref="P:System.Globalization.Calendar.MinSupportedDateTime" />或更晚<see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />，此方法會擲回<see cref="T:System.ArgumentOutOfRangeException" />。 下列範例提供一個實例。 它會嘗試將超出範圍的日期格式<see cref="T:System.Globalization.JapaneseCalendar" />類別。  
  
[!code-csharp[System.DateTimeOffset.ToString.ArgumentOutOfRangeException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/cs/datetimeoffset.tostring.argumentoutofrangeexception1.cs#1)] [!code-vb[System.DateTimeOffset.ToString.ArgumentOutOfRangeException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/vb/datetimeoffset.tostring.argumentoutofrangeexception1.vb#1)]</para></block>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(System::String ^ format);" />
      <MemberSignature Language="F#" Value="override this.ToString : string -&gt; string" Usage="dateTimeOffset.ToString format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">格式字串。</param>
        <summary>使用指定的格式，將目前 <see cref="T:System.DateTimeOffset" /> 物件的值，轉換為其相等字串表示。</summary>
        <returns>目前 <see cref="T:System.DateTimeOffset" /> 物件值的字串表示 (如 <paramref name="format" /> 所指定)。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `format`參數應該包含單一格式規範字元 (請參閱 <<c2> [ 標準日期和時間格式字串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)) 或自訂格式模式 (請參閱[自訂日期和時間格式字串](~/docs/standard/base-types/custom-date-and-time-format-strings.md))，定義傳回之字串的格式。 如果`format`是 null 或空字串 ("")，則<xref:System.DateTimeOffset>值會使用預設格式來輸出。  
  
 下表顯示特定的格式規範搭配使用時的確切的作業<xref:System.DateTimeOffset>，這不同於其行為與搭配使用時<xref:System.DateTime>。  
  
|現有的格式規範|新的行為|  
|-------------------------------|------------------|  
|"K"|設計用於反覆存取日期和時間。 使用<xref:System.DateTimeOffset>，對應至"zzz"（位移一律會顯示以小時和分鐘）。 請注意，"K"自訂格式規範;中的單一字元，它不能出現`format`。|  
|"U"|不支援。|  
|"r"|將轉換<xref:System.DateTimeOffset>物件為 Coordinated Universal Time (UTC) 並將其使用的自訂格式字串輸出`ddd, dd MMM yyyy HH:mm:ss GMT`。|  
|"u"|將轉換<xref:System.DateTimeOffset>物件為 UTC，並將輸出的格式`yyyy-MM-dd HH:mm:ssZ`。|  
  
 其餘的標準日期和時間格式規範的行為相同，但<xref:System.DateTimeOffset.ToString%28System.String%29>方法與使用<xref:System.DateTime.ToString%2A>方法。  
  
 這個方法會使用衍生自目前的文化特性格式資訊。 如需詳細資訊，請參閱<xref:System.Globalization.CultureInfo.CurrentCulture%2A>。  
  
   
  
## Examples  
 下列範例會顯示<xref:System.DateTimeOffset>主控台使用每個標準日期和時間格式規範的物件。 使用 en-us 會將輸出格式化為文化特性。  
  
 [!code-csharp[System.DateTimeOffset.ToString#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/cs/ToString.cs#3)]
 [!code-vb[System.DateTimeOffset.ToString#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/vb/ToString.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><paramref name="format" /> 長度為 1，而且不屬於針對 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 定義的標準格式規範字元。  
  
-或- 
 <paramref name="format" /> 不包含有效的自訂格式模式。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">日期和時間超出目前文化特性使用之曆法所支援的日期範圍。</exception>
        <block subset="none" type="usage"><para><see cref="M:System.DateTimeOffset.ToString(System.String)" />方法會傳回在目前的文化特性所使用的行事曆中的日期和時間的字串表示。 如果目前的值<see cref="T:System.DateTimeOffset" />執行個體是早於<see cref="P:System.Globalization.Calendar.MinSupportedDateTime" />或更晚<see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />，此方法會擲回<see cref="T:System.ArgumentOutOfRangeException" />。 下列範例提供一個實例。 它會嘗試將超出範圍的日期格式<see cref="T:System.Globalization.HebrewCalendar" />類別，在目前的文化特性是希伯來文 （以色列）。  
  
[!code-csharp[System.DateTimeOffset.ToString.ArgumentOutOfRangeException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/cs/datetimeoffset.tostring.argumentoutofrangeexception3.cs#3)] [!code-vb[System.DateTimeOffset.ToString.ArgumentOutOfRangeException#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/vb/datetimeoffset.tostring.argumentoutofrangeexception3.vb#3)]</para></block>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準日期和時間格式字串</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">自訂日期和時間格式字串</related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String, formatProvider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(System::String ^ format, IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="override this.ToString : string * IFormatProvider -&gt; string" Usage="dateTimeOffset.ToString (format, formatProvider)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">格式字串。</param>
        <param name="formatProvider">物件，提供特定文化特性格式資訊。</param>
        <summary>使用指定的格式和特定文化特性的格式資訊，將目前 <see cref="T:System.DateTimeOffset" /> 物件的值，轉換為其相等的字串表示。</summary>
        <returns>目前 <see cref="T:System.DateTimeOffset" /> 物件值的字串表示，如 <paramref name="format" /> 及 <paramref name="provider" /> 所指定。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `format`參數應該包含單一格式規範字元 (請參閱 <<c2> [ 標準日期和時間格式字串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)) 或自訂格式模式 (請參閱[自訂日期和時間格式字串](~/docs/standard/base-types/custom-date-and-time-format-strings.md)). 如果`format`是 null 或空字串 ("")，則<xref:System.DateTimeOffset>使用預設格式來輸出物件。  
  
 下表顯示特定的格式規範搭配使用時的確切的作業<xref:System.DateTimeOffset>，這不同於其行為與搭配使用時<xref:System.DateTime>。  
  
|現有的格式規範|新的行為|  
|-------------------------------|------------------|  
|"K"|設計用於反覆存取日期和時間。 使用<xref:System.DateTimeOffset>，對應至"zzz"（位移一律會顯示以小時和分鐘）。 請注意，"K"自訂格式規範;中的單一字元，它不能出現`format`。|  
|"U"|不支援。|  
|"r"|將轉換<xref:System.DateTimeOffset>物件為 Coordinated Universal Time (UTC) 並將其使用的自訂格式字串輸出`ddd, dd MMM yyyy HH:mm:ss GMT`。|  
|"u"|將轉換<xref:System.DateTimeOffset>值為 UTC，並將輸出的格式`yyyy-MM-dd HH:mm:ssZ`。|  
  
 其餘的標準日期和時間格式規範的行為相同，但<xref:System.DateTimeOffset.ToString%28System.String%29>方法與使用<xref:System.DateTime.ToString%2A>方法。  
  
 對應至標準格式規範，以及符號與日期和時間元件的名稱的模式由定義`formatProvider`參數。 `formatProvider`參數可以是下列其中一項：  
  
-   A<xref:System.Globalization.CultureInfo>物件，表示其格式設定中使用的文化特性`input`。 <xref:System.Globalization.DateTimeFormatInfo>所傳回的物件<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>屬性會定義所使用的格式`input`。  
  
-   A<xref:System.Globalization.DateTimeFormatInfo>定義格式的日期和時間資料的物件。  
  
 如果`formatProvider`已`null`，則<xref:System.Globalization.DateTimeFormatInfo>會使用目前文化特性相關聯的物件 (請參閱<xref:System.Globalization.CultureInfo.CurrentCulture%2A>)。  
  
   
  
## Examples  
 下列範例會使用<xref:System.DateTimeOffset.ToString%28System.String%2CSystem.IFormatProvider%29>方法，以顯示<xref:System.DateTimeOffset>物件使用的數個不同的文化特性的自訂格式字串。  
  
 [!code-csharp[System.DateTimeOffset.ToString#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/cs/ToString.cs#4)]
 [!code-vb[System.DateTimeOffset.ToString#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/vb/ToString.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><paramref name="format" /> 長度為 1，而且不屬於針對 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 定義的標準格式規範字元。  
  
-或- 
 <paramref name="format" /> 不包含有效的自訂格式模式。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">日期和時間超出 <paramref name="formatProvider" /> 使用之曆法所支援的日期範圍。</exception>
        <block subset="none" type="usage"><para><see cref="M:System.DateTimeOffset.ToString(System.String,System.IFormatProvider)" />方法會傳回日期和時間的字串表示中所使用的行事曆<paramref name="formatProvider" />參數。 其行事曆由定義<see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" />屬性。 如果目前的值<see cref="T:System.DateTimeOffset" />執行個體是早於<see cref="P:System.Globalization.Calendar.MinSupportedDateTime" />或更晚<see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />，此方法會擲回<see cref="T:System.ArgumentOutOfRangeException" />。 下列範例提供一個實例。 它會嘗試將超出範圍的日期格式<see cref="T:System.Globalization.UmAlQuraCalendar" />類別。  
  
[!code-csharp[System.DateTimeOffset.ToString.ArgumentOutOfRangeException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/cs/datetimeoffset.tostring.argumentoutofrangeexception4.cs#4)] [!code-vb[System.DateTimeOffset.ToString.ArgumentOutOfRangeException#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/vb/datetimeoffset.tostring.argumentoutofrangeexception4.vb#4)]</para></block>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準日期和時間格式字串</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">自訂日期和時間格式字串</related>
        <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/NET-Framework-4-Formatting-9c4dae8d">範例：.NET Framework 4 格式化公用程式</related>
      </Docs>
    </Member>
    <Member MemberName="ToUniversalTime">
      <MemberSignature Language="C#" Value="public DateTimeOffset ToUniversalTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset ToUniversalTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToUniversalTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToUniversalTime () As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset ToUniversalTime();" />
      <MemberSignature Language="F#" Value="member this.ToUniversalTime : unit -&gt; DateTimeOffset" Usage="dateTimeOffset.ToUniversalTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>將目前 <see cref="T:System.DateTimeOffset" /> 物件轉換為表示 Coordinated Universal Time (UTC) 的 <see cref="T:System.DateTimeOffset" /> 值。</summary>
        <returns>物件，表示轉換為 Coordinated Universal Time (UTC) 之目前 <see cref="T:System.DateTimeOffset" /> 物件的日期和時間。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會傳回<xref:System.DateTimeOffset>物件，其<xref:System.DateTimeOffset.Offset%2A>屬性設定為零。  
  
 這兩個值的目前<xref:System.DateTimeOffset>物件，而<xref:System.DateTimeOffset>方法呼叫所傳回的物件代表相同的點的時間。 也就是說，如果兩者當中都會傳遞至<xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>方法，此方法會傳回`true`。  
  
   
  
## Examples  
 下列範例會呼叫<xref:System.DateTimeOffset.ToUniversalTime%2A>方法，以將當地時間和數個其他時間轉換為 Coordinated Universal Time (UTC)。  
  
 [!code-csharp[System.DateTimeOffset.Methods#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#16)]
 [!code-vb[System.DateTimeOffset.Methods#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#16)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.ToLocalTime" />
        <altmember cref="M:System.DateTimeOffset.ToOffset(System.TimeSpan)" />
      </Docs>
    </Member>
    <Member MemberName="ToUnixTimeMilliseconds">
      <MemberSignature Language="C#" Value="public long ToUnixTimeMilliseconds ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToUnixTimeMilliseconds() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToUnixTimeMilliseconds" />
      <MemberSignature Language="VB.NET" Value="Public Function ToUnixTimeMilliseconds () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToUnixTimeMilliseconds();" />
      <MemberSignature Language="F#" Value="member this.ToUnixTimeMilliseconds : unit -&gt; int64" Usage="dateTimeOffset.ToUnixTimeMilliseconds " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回自 1970-01-01T00:00:00.000Z 以來所經過的毫秒數。</summary>
        <returns>自 1970-01-01T00:00:00.000Z 以來所經過的毫秒數。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Unix 時間代表 1970年以來所經過的秒數-01-01T00:00:00Z (January 1，1970，在上午 12:00 UTC)。 它不會考慮閏秒。 這個方法會傳回以 Unix 時間的毫秒數。  
  
 這個方法第一次會轉換成 UTC 的目前執行個體之前傳回它的 Unix 時間的毫秒數。 變成 1970年以前的日期和時間值-01-01T00:00:00Z，這個方法會傳回負值。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.ToUnixTimeSeconds" />
        <altmember cref="M:System.DateTimeOffset.FromUnixTimeMilliseconds(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="ToUnixTimeSeconds">
      <MemberSignature Language="C#" Value="public long ToUnixTimeSeconds ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToUnixTimeSeconds() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToUnixTimeSeconds" />
      <MemberSignature Language="VB.NET" Value="Public Function ToUnixTimeSeconds () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToUnixTimeSeconds();" />
      <MemberSignature Language="F#" Value="member this.ToUnixTimeSeconds : unit -&gt; int64" Usage="dateTimeOffset.ToUnixTimeSeconds " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回自 1970-01-01T00:00:00Z 以來所經過的秒數。</summary>
        <returns>自 1970-01-01T00:00:00Z 以來所經過的秒數。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Unix 時間代表 1970年以來所經過的秒數-01-01T00:00:00Z (January 1，1970，在上午 12:00 UTC)。 它不會考慮閏秒。  
  
 這個方法第一次會轉換成 UTC 的目前執行個體傳回它的 Unix 時間之前。 變成 1970年以前的日期和時間值-01-01T00:00:00Z，這個方法會傳回負值。  
  
   
  
## Examples  
 下列範例會呼叫<xref:System.DateTimeOffset.ToUnixTimeSeconds%2A>方法傳回的值等於短時間內，很快就在前後 1970年的 Unix 時間-01-01T00:00:00Z。  
  
 [!code-csharp[System.DateTimeOffset.ToUnixTimeSeconds#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.tounixtimeseconds/cs/tounixtimeseconds1.cs#1)]
 [!code-vb[System.DateTimeOffset.ToUnixTimeSeconds#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetimeoffset.tounixtimeseconds/vb/tounixtimeseconds1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.FromUnixTimeSeconds(System.Int64)" />
        <altmember cref="M:System.DateTimeOffset.ToUnixTimeMilliseconds" />
      </Docs>
    </Member>
    <Member MemberName="TryFormat">
      <MemberSignature Language="C#" Value="public bool TryFormat (Span&lt;char&gt; destination, out int charsWritten, ReadOnlySpan&lt;char&gt; format = null, IFormatProvider formatProvider = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryFormat(valuetype System.Span`1&lt;char&gt; destination, [out] int32&amp; charsWritten, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryFormat (destination As Span(Of Char), ByRef charsWritten As Integer, Optional format As ReadOnlySpan(Of Char) = null, Optional formatProvider As IFormatProvider = null) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryFormat : Span&lt;char&gt; *  * ReadOnlySpan&lt;char&gt; * IFormatProvider -&gt; bool" Usage="dateTimeOffset.TryFormat (destination, charsWritten, format, formatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="charsWritten" Type="System.Int32" RefType="out" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="destination">To be added.</param>
        <param name="charsWritten">To be added.</param>
        <param name="format">To be added.</param>
        <param name="formatProvider">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將日期和時間之指定的字串表示轉換為其對等的 <see cref="T:System.DateTimeOffset" />。</summary>
        <format type="text/markdown"><![CDATA[  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]        

         ]]></format>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; input, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; input, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParse(System.ReadOnlySpan{System.Char},System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (input As ReadOnlySpan(Of Char), ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; input, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; *  -&gt; bool" Usage="System.DateTimeOffset.TryParse (input, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string input, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string input, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParse(System.String,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (input As String, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ input, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string *  -&gt; bool" Usage="System.DateTimeOffset.TryParse (input, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">字串，包含要轉換的日期和時間。</param>
        <param name="result">如果轉換成功，方法傳回時內含的 <see cref="T:System.DateTimeOffset" /> 就會和 <paramref name="input" /> 的日期和時間相等；如果轉換失敗，則為 <see cref="F:System.DateTimeOffset.MinValue" />。 如果 <paramref name="input" /> 參數為 <see langword="null" />，或者不包含日期和時間的有效字串表示，則轉換會失敗。 這個參數會以未初始化的狀態傳遞。</param>
        <summary>嘗試將日期和時間之指定的字串表示轉換為其相等的 <see cref="T:System.DateTimeOffset" />，並傳回一個值，指出轉換是否成功。</summary>
        <returns>如果 <paramref name="input" /> 參數轉換成功，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個多載<xref:System.DateTimeOffset.TryParse%28System.String%2CSystem.DateTimeOffset%40%29>方法就像<xref:System.DateTimeOffset.Parse%28System.String%29?displayProperty=nameWithType>方法，但是它不會擲回例外狀況如果轉換失敗。 它會剖析具有三個項目可以按照任何順序出現，且以泛空白字元分隔的字串。 下表中，會顯示這三個元素。  
  
|元素|範例|  
|-------------|-------------|  
|\<日期 >|"2/10/2007"|  
|\<時間 >|「 下午 1:02:03"|  
|\<Offset>|"-7:30"|  
  
 這些項目都是選擇性的雖然\<位移 > 不能單獨出現。 它必須提供一起\<日期 > 或\<時間 >。 如果\<日期 > 遺漏，其預設值是目前的日期。 如果\<日期 > 存在但其的年份元件只有兩位數，則會轉換成目前的文化特性的現行曆法的值中之年<xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType>屬性。 如果\<時間 > 遺漏，其預設值為 12:00: 00AM。 如果\<位移 > 遺漏，其預設值都是當地時區位移。 如果\<位移 > 已存在，它可以表示為負數或正數的位移與 Coordinated Universal Time (UTC)。 在任一情況下，\<位移 > 必須包含正負號或這個方法會傳回`false`。  
  
 `input`使用的格式設定資訊中剖析字串<xref:System.Globalization.DateTimeFormatInfo>初始化目前的文化特性的物件。 若要剖析的字串包含指定的格式不一定會對應於目前的文化特性，使用<xref:System.DateTimeOffset.TryParseExact%2A>方法，並提供格式規範。  
  
   
  
## Examples  
 下列範例會呼叫<xref:System.DateTimeOffset.TryParse%28System.String%2CSystem.DateTimeOffset%40%29>方法來剖析數個與各種不同的日期和時間格式的字串。  
  
 [!code-csharp[System.DateTimeOffset.TryParse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.TryParse/cs/TryParse.cs#1)]
 [!code-vb[System.DateTimeOffset.TryParse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.TryParse/vb/TryParse.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.DateTimeOffset.Parse" />
        <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/NET-Framework-4-Formatting-9c4dae8d">範例：.NET Framework 4 格式化公用程式</related>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; input, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; input, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (input As ReadOnlySpan(Of Char), formatProvider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; input, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTimeOffset.TryParse (input, formatProvider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="formatProvider">To be added.</param>
        <param name="styles">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string input, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string input, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (input As String, formatProvider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ input, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTimeOffset.TryParse (input, formatProvider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">字串，包含要轉換的日期和時間。</param>
        <param name="formatProvider">提供關於 <paramref name="input" /> 之特定文化特性格式資訊的物件。</param>
        <param name="styles">列舉值的位元組合，表示 <paramref name="input" /> 所允許的格式。</param>
        <param name="result">如果轉換成功，方法傳回時內含的 <see cref="T:System.DateTimeOffset" /> 值就會和 <paramref name="input" /> 的日期和時間相等，或者，如果轉換失敗，則為 <see cref="F:System.DateTimeOffset.MinValue" />。 如果 <paramref name="input" /> 參數為 <see langword="null" />，或者不包含日期和時間的有效字串表示，則轉換會失敗。 這個參數會以未初始化的狀態傳遞。</param>
        <summary>嘗試將日期和時間的指定字串表示轉換為其相等的 <see cref="T:System.DateTimeOffset" />，並傳回表示轉換是否成功的值。</summary>
        <returns>如果 <paramref name="input" /> 參數轉換成功，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個多載<xref:System.DateTimeOffset.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29>方法就像<xref:System.DateTimeOffset.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>方法，但是它不會擲回例外狀況如果轉換失敗。 方法會剖析具有三個項目可以按照任何順序出現，且以泛空白字元分隔的字串。 下表中，會顯示這三個元素。  
  
|元素|範例|  
|-------------|-------------|  
|\<日期 >|"2/10/2007"|  
|\<時間 >|「 下午 1:02:03"|  
|\<Offset>|"-7:30"|  
  
 這些項目都是選擇性的雖然\<位移 > 不能單獨出現。 它必須提供一起\<日期 > 或\<時間 >。 如果\<日期 > 遺漏，其預設值是目前的日期。 如果\<日期 > 存在但其的年份元件只有兩位數，則會轉換成中之年`provider`的值為基礎的參數的現行曆法<xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType>屬性。 如果\<時間 > 遺漏，其預設值為 12:00: 00AM。 如果\<位移 > 遺漏，其預設值都是當地時區位移或<xref:System.TimeSpan.Zero>如果<xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType>或是<xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType>中指定值`styles`。 如果\<位移 > 已存在，它可以表示為負數或正數的位移與 Coordinated Universal Time (UTC)。 在任一情況下，\<位移 > 必須包含正負號或這個方法會傳回`false`。  
  
 `input`字串會使用特定文化特性格式資訊，在剖析<xref:System.Globalization.DateTimeFormatInfo>提供的物件`formatProvider`參數。 `formatProvider`參數可以是下列其中一項：  
  
-   A<xref:System.Globalization.CultureInfo>物件，表示其格式設定中使用的文化特性`input`。 <xref:System.Globalization.DateTimeFormatInfo>所傳回的物件<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>屬性定義中使用的格式`input`。  
  
-   A<xref:System.Globalization.DateTimeFormatInfo>定義格式的日期和時間資料的物件。  
  
 此外，每個項目可以使用分隔前置或尾端泛空白字元，而\<日期 > 和\<時間 > 元件可以包含內部泛空白字元 (例如 6: 00:00). 只有\<位移 > 元件不能包含內部空白字元。  
  
 如果`provider`已`null`，則<xref:System.Globalization.CultureInfo>使用對應至目前的文化特性的物件。  
  
 正或負號用於\<位移 > 必須是 + 或-。 不由定義<xref:System.Globalization.NumberFormatInfo.PositiveSign%2A>或是<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>的屬性<xref:System.Globalization.NumberFormatInfo>所傳回的物件`formatprovider`參數的<xref:System.Globalization.CultureInfo.NumberFormat%2A>屬性。  
  
 下列成員<xref:System.Globalization.DateTimeStyles>支援列舉型別：  
  
|DateTimeStyles 成員|註解|  
|---------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|剖析字串，由`input`而且，如果有需要，將它轉換成 UTC。 它相當於剖析的字串，並呼叫傳回的物件<xref:System.DateTimeOffset.ToUniversalTime>方法。|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|雖然有效，但會忽略此值。 在 允許內部空白字元\<日期 > 和\<時間 > 元件。|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|雖然有效，但會忽略此值。 剖析字串中的每個元件之前，可以使用前置空白字元。|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|雖然有效，但會忽略此值。 剖析字串中的每個元件之前，允許使用尾端泛空白字元。|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|這是預設行為。 它不能覆寫透過提供更具限制性<xref:System.Globalization.DateTimeStyles>列舉值，例如<xref:System.Globalization.DateTimeStyles.None?displayProperty=nameWithType>。|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|表示如果`input`參數缺少\<位移 > 項目，應提供的當地時區位移。 這是預設行為<xref:System.DateTimeOffset.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29>方法。|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|表示如果`input`參數缺少\<位移 > 項目，應該提供 UTC 時差 (00:00)。|  
|<xref:System.Globalization.DateTimeStyles.None>|雖然有效，這個值會被忽略，而且沒有任何作用。|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|因為<xref:System.DateTimeOffset>結構不包含`Kind`屬性，這個值就沒有作用。|  
  
 只有<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType>不支援的值。 <xref:System.ArgumentException>如果這個值會包含在會擲回`styles`參數。  
  
   
  
## Examples  
 下列範例會呼叫<xref:System.DateTimeOffset.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29>具有各種不同的方法<xref:System.Globalization.DateTimeStyles>剖析一些與各種不同的日期和時間格式字串的值。  
  
 [!code-csharp[System.DateTimeOffset.TryParse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.TryParse/cs/TryParse.cs#2)]
 [!code-vb[System.DateTimeOffset.TryParse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.TryParse/vb/TryParse.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="styles" /> 包含未定義的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。  
  
-或- 
 不支援 <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" />。  
  
-或- 
 <paramref name="styles" /> 包含互斥的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。</exception>
        <altmember cref="Overload:System.DateTimeOffset.Parse" />
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParseExact">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將日期和時間的指定字串表示，轉換為其相等的 <see cref="T:System.DateTimeOffset" />。 字串表示的格式必須完全符合指定的格式。</summary>
        <format type="text/markdown"><![CDATA[  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]        

         ]]></format>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (ReadOnlySpan&lt;char&gt; input, ReadOnlySpan&lt;char&gt; format, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; input, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (input As ReadOnlySpan(Of Char), format As ReadOnlySpan(Of Char), formatProvider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(ReadOnlySpan&lt;char&gt; input, ReadOnlySpan&lt;char&gt; format, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTimeOffset.TryParseExact (input, format, formatProvider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" Index="4" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="input">包含要轉換之日期和時間表示的字元範圍。</param>
        <param name="format">格式規範，其定義 <paramref name="input" /> 所需的格式。</param>
        <param name="formatProvider">物件，提供關於 <paramref name="input" /> 的特定文化特性格式資訊。</param>
        <param name="styles">列舉值的位元組合，表示 <paramref name="input" /> 所允許的格式。 一般會指定的值是 <see cref="F:System.Globalization.DateTimeStyles.None" /></param>
        <param name="result">如果轉換成功，方法傳回時內含的 <see cref="T:System.DateTimeOffset" /> 就會和 <paramref name="input" /> 的日期和時間相等；如果轉換失敗，則為 <see cref="F:System.DateTimeOffset.MinValue" />。 若...，轉換會失敗。</param>
        <summary>使用指定的格式、文化特性特定格式資訊與樣式，將字元範圍內的日期和時間表示，轉換為其相等的 <see cref="System.DateTimeOffset" />。 日期和時間表示的格式必須完全符合指定的格式。</summary>
        <returns>如果 <paramref name="input" /> 參數轉換成功，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

這個多載就像是<xref:System.DateTimeOffset.ParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)?displayProperty=nameWithType>方法，不同之處在於此方法不會擲回例外狀況如果轉換失敗。 它會剖析的日期和時間，必須完全符合指定模式的表示法`format`參數。 如果`input`不符合此模式中，使用一些可能的變化，在所定義的泛空白字元`styles`參數，剖析作業失敗，而且此方法會傳回`false`。  
  
`format`參數是包含單一標準格式規範或一或多個自訂格式規範會定義所需的模式的字元範圍`input`。 如需有效的格式化程式碼的詳細資訊，請參閱[標準日期和時間格式字串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)並[自訂日期和時間格式字串](~/docs/standard/base-types/custom-date-and-time-format-strings.md)。 如果`format`包含`z`， `zz`，或`zzz`自訂格式規範，以指出位移必須存在於`input`，該時差必須包含負號或正號。 如果正負號遺漏，剖析作業失敗，而且此方法會傳回`false`。  
  
如果`format`要求`input`包含日期而非時間，產生<xref:System.DateTimeOffset>物件指派午夜的時間 (0: 00:00)。 如果`format`要求`input`包含時間但不是日期，產生<xref:System.DateTimeOffset>物件會指派給本機系統上目前的日期。 如果`format`不需要`input`包含位移時，所產生的位移<xref:System.DateTimeOffset>的值取決於物件`styles`參數。 如果`styles`包含<xref:System.Globalization.DateTimeStyles.AssumeLocal>，當地時區位移指派給<xref:System.DateTimeOffset>物件。 如果`styles`包含<xref:System.Globalization.DateTimeStyles.AssumeUniversal>，Coordinated Universal Time (UTC) 位移或 + 00:00，已指派給<xref:System.DateTimeOffset>物件。 如果指定兩個值，則會使用當地時區位移。  
  
特定日期和時間的符號和中使用的字串`input`所定義`formatProvider`參數。 也是如此的模式比對的精確`input`如果`format`是標準格式規範的字串。 `formatProvider`參數可以是下列其中一項：  
  
-   A<xref:System.Globalization.CultureInfo>代表的文化特性的物件基礎所在`input`解譯。 <xref:System.Globalization.DateTimeFormatInfo>所傳回的物件<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>屬性會定義符號，且標準的格式接受`input`。  
  
-   A<xref:System.Globalization.DateTimeFormatInfo>定義格式的日期和時間資料的物件。  
  
 如果`formatprovider`已`null`，則<xref:System.Globalization.CultureInfo>使用對應至目前的文化特性的物件。  
  
 `styles`參數可讓您定義是否允許泛空白字元在輸入字串中，指示如何剖析字串，而不需要明確的位移元件，並支援 UTC 轉換為剖析作業的一部分。 所有成員<xref:System.Globalization.DateTimeStyles>列舉型別支援除了<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>。 下表列出支援的每個成員的效果。  
  
|`DateTimeStyles` 成員|行為|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|剖析`input`而且，如果有需要，將它轉換成 UTC。 它相當於剖析日期和時間表示法，然後呼叫<xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType>方法傳回的<xref:System.DateTimeOffset>物件。|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|如果`format`不需要`input`包含位移的值，傳回的<xref:System.DateTimeOffset>物件提供的當地時區位移。 這是預設行為。|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|如果`format`不需要`input`包含位移的值，傳回的<xref:System.DateTimeOffset>物件指定 UTC 時差 （+ 00:00）。|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|可讓`input`包含內部的泛空白字元，未指定的格式。 額外的空白字元可以出現在日期和時間元件之間以及位移，以外的個別元件內且剖析字串時，會忽略。|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|可讓`input`包含未指定的前置空格`format`。 剖析字串時，會忽略這些項目。|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|可讓`input`包含尾端空白不由指定`format`。 剖析字串時，會忽略這些項目。|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|可讓`input`加入不由指定開頭、 結尾，和內部的空白`format`。 中未指定的所有額外泛空白字元`format`時剖析字串都會被忽略。|  
|<xref:System.Globalization.DateTimeStyles.None>|表示中不允許其他泛空白字元`input`。 泛空白字元必須出現在確實以指定`format`。 這是預設行為。|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|沒有任何作用，因為<xref:System.DateTimeOffset>結構不包含`Kind`屬性。|  

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="styles" /> 包含未定義的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。  
-或- 不支援 <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" />。  
-或- <paramref name="styles" /> 包括互斥的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。</exception>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (ReadOnlySpan&lt;char&gt; input, string[] formats, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; input, string[] formats, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (input As ReadOnlySpan(Of Char), formats As String(), formatProvider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(ReadOnlySpan&lt;char&gt; input, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : ReadOnlySpan&lt;char&gt; * string[] * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTimeOffset.TryParseExact (input, formats, formatProvider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="formats" Type="System.String[]" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" Index="4" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="formats">To be added.</param>
        <param name="formatProvider">To be added.</param>
        <param name="styles">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks
 
這個方法會剖析的日期字串表示符合任何一個模式指派給`formats`陣列。 如果`input`不符合任何一個這些模式所定義的任何變化`styles`參數，剖析作業失敗，而且此方法會傳回`false`。 除了比較`input`到多個字串，包含格式規範，這個多載的行為相同<xref:System.DateTimeOffset.ParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)?displayProperty=nameWithType>方法。  
  
 `formats`參數是字串陣列，其項目包含單一標準格式規範或定義的可能模式的一或多個自訂格式規範`input`。 如需有效的格式化程式碼的詳細資訊，請參閱[標準日期和時間格式字串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)並[自訂日期和時間格式字串](~/docs/standard/base-types/custom-date-and-time-format-strings.md)。 如果中的相符項目`formats`包含`z`， `zz`，或`zzz`自訂格式規範，以指出位移必須存在於`input`，該時差必須包含負號或正號。 如果正負號遺漏，剖析作業失敗，而且此方法會傳回`false`。  
  
> [!IMPORTANT]
>  使用`formats`的這個多載來指定多個格式的參數可協助降低進入日期和時間時，許多使用者體驗的挫折。 特別是，能夠定義多個輸入的模式可讓應用程式來處理可以包含或缺少的幾個月、 天、 小時、 分鐘和秒的前置零的日期和時間表示。 此圖說明範例。  
  
 如果中的相符項目`formats`要求`input`包含日期而非時間，產生<xref:System.DateTimeOffset>物件指派午夜的時間 (0: 00:00)。 如果中的相符項目`formats`需要輸入包含時間但不是日期，產生<xref:System.DateTimeOffset>物件會指派給本機系統上目前的日期。 如果中的相符項目`formats`不需要`input`包含位移時，所產生的位移<xref:System.DateTimeOffset>的值取決於物件`styles`參數。 如果`styles`包含<xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType>，當地時區位移指派給<xref:System.DateTimeOffset>物件。 如果`styles`包含<xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType>，Coordinated Universal Time (UTC) 位移或 + 00:00，已指派給<xref:System.DateTimeOffset>物件。 如果指定兩個值，則會使用當地時區位移。  
  
 特定日期和時間中使用的符號`input`所定義`formatProvider`參數。 也是如此的模式比對的精確`input`如果的相符的項目`formats`是標準格式規範的字串。 `formatProvider`參數可以是下列其中一項：  
  
-   A<xref:System.Globalization.CultureInfo>代表的文化特性的物件基礎所在`input`解譯。 <xref:System.Globalization.DateTimeFormatInfo>所傳回的物件<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>屬性定義的符號和格式設定在`input`。  
  
-   A<xref:System.Globalization.DateTimeFormatInfo>定義格式的日期和時間資料的物件。  
  
 如果`formatprovider`已`null`，則<xref:System.Globalization.CultureInfo>使用對應至目前的文化特性的物件。  
  
 `styles`參數可讓您定義是否允許泛空白字元在輸入字串中，指示如何剖析字串，而不需要明確的位移元件，並支援 UTC 轉換為剖析作業的一部分。 所有成員<xref:System.Globalization.DateTimeStyles>列舉型別支援除了<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>。 下表列出支援的每個成員的效果。  
  
|`DateTimeStyles` 成員|行為|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|剖析`input`而且，如果有需要，將它轉換成 UTC。 它相當於剖析的字串，然後呼叫<xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType>方法傳回的<xref:System.DateTimeOffset>物件。|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|如果中的相符項目`formats`不需要`input`包含位移的值，傳回的<xref:System.DateTimeOffset>物件提供的當地時區位移。 這是預設值。|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|如果中的相符項目`formats`不需要`input`包含位移的值，傳回的<xref:System.DateTimeOffset>物件指定 UTC 時差 （+ 00:00）。|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|可讓`input`包含未指定中的項目內部的泛空白字元`formats`。 額外的空白字元可以出現日期和時間的元件之間，以及在個別的元件 （除了位移），並剖析字串時，會忽略。|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|可讓`input`包含前置空格中的項目未指定`formats`。 剖析字串時，會忽略這些項目。|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|可讓`input`包含後端中的項目未指定的空格`formats`。 剖析字串時，會忽略這些項目。|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|可讓`input`包含前置、 尾端，與內部空間中的項目未指定`formats`。 未指定相符的項目中的所有額外泛空白字元`formats`時剖析字串都會被忽略。|  
|<xref:System.Globalization.DateTimeStyles.None>|表示中不允許其他泛空白字元`input`。 空白字元必須出現在完全中特定項目中所指定`formats`成功比對會發生。 這是預設行為。|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|沒有任何作用，因為<xref:System.DateTimeOffset>結構不包含`Kind`屬性。|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="styles" /> 包含未定義的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。  
-或- 不支援 <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" />。  
-或- <paramref name="styles" /> 包括互斥的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。</exception>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string input, string format, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string input, string format, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (input As String, format As String, formatProvider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(System::String ^ input, System::String ^ format, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : string * string * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTimeOffset.TryParseExact (input, format, formatProvider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">字串，包含要轉換的日期和時間。</param>
        <param name="format">格式規範，其定義 <paramref name="input" /> 所需的格式。</param>
        <param name="formatProvider">物件，提供關於 <paramref name="input" /> 的特定文化特性格式資訊。</param>
        <param name="styles">列舉值的位元組合，表示 input 所允許的輸入格式。 一般會指定的值是 <see langword="None" />。</param>
        <param name="result">如果轉換成功，方法傳回時內含的 <see cref="T:System.DateTimeOffset" /> 就會和 <paramref name="input" /> 的日期和時間相等；如果轉換失敗，則為 <see cref="F:System.DateTimeOffset.MinValue" />。 如果 <paramref name="input" /> 參數為 <see langword="null" />，或包含的日期和時間不是採用 <paramref name="format" /> 和 <c>provider</c> 所定義預期格式的有效字串表示。 這個參數會以未初始化的狀態傳遞。</param>
        <summary>使用指定的格式、特定文化特性格式資訊以及樣式，將日期和時間的指定字串表示，轉換為其相等的 <see cref="T:System.DateTimeOffset" />。 字串表示的格式必須完全符合指定的格式。</summary>
        <returns>如果 <paramref name="input" /> 參數轉換成功，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個多載<xref:System.DateTimeOffset.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29>方法就像<xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>方法，不同之處在於此方法不會擲回例外狀況如果轉換失敗。 它會剖析的日期和時間，必須完全符合指定模式的字串表示`format`參數。 如果`input`字串不符合此模式中，使用一些可能的變化，在所定義的泛空白字元`styles`參數，剖析作業失敗，而且此方法會傳回`false`。  
  
 `format`參數是字串，包含單一標準格式規範或一或多個自訂格式規範會定義所需的模式`input`。 如需有效的格式化程式碼的詳細資訊，請參閱[標準日期和時間格式字串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)並[自訂日期和時間格式字串](~/docs/standard/base-types/custom-date-and-time-format-strings.md)。 如果`format`包含`z`， `zz`，或`zzz`自訂格式規範，以指出位移必須存在於`input`，該時差必須包含負號或正號。 如果正負號遺漏，剖析作業失敗，而且此方法會傳回`false`。  
  
 如果`format`要求`input`包含日期而非時間，產生<xref:System.DateTimeOffset>物件指派午夜的時間 (0: 00:00)。 如果`format`要求`input`包含時間但不是日期，產生<xref:System.DateTimeOffset>物件會指派給本機系統上目前的日期。 如果`format`不需要`input`包含位移時，所產生的位移<xref:System.DateTimeOffset>的值取決於物件`styles`參數。 如果`styles`包含<xref:System.Globalization.DateTimeStyles.AssumeLocal>，當地時區位移指派給<xref:System.DateTimeOffset>物件。 如果`styles`包含<xref:System.Globalization.DateTimeStyles.AssumeUniversal>，Coordinated Universal Time (UTC) 位移或 + 00:00，已指派給<xref:System.DateTimeOffset>物件。 如果指定兩個值，則會使用當地時區位移。  
  
 特定日期和時間的符號和中使用的字串`input`所定義`formatProvider`參數。 也是如此的模式比對的精確`input`如果`format`是標準格式規範的字串。 `formatProvider`參數可以是下列其中一項：  
  
-   A<xref:System.Globalization.CultureInfo>代表的文化特性的物件基礎所在`input`解譯。 <xref:System.Globalization.DateTimeFormatInfo>所傳回的物件<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>屬性會定義符號，且標準的格式接受`input`。  
  
-   A<xref:System.Globalization.DateTimeFormatInfo>定義格式的日期和時間資料的物件。  
  
 如果`formatprovider`已`null`，則<xref:System.Globalization.CultureInfo>使用對應至目前的文化特性的物件。  
  
 `styles`參數可讓您定義是否允許泛空白字元在輸入字串中，指示如何剖析字串，而不需要明確的位移元件，並支援 UTC 轉換為剖析作業的一部分。 所有成員<xref:System.Globalization.DateTimeStyles>列舉型別支援除了<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>。 下表列出支援的每個成員的效果。  
  
|`DateTimeStyles` 成員|行為|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|剖析`input`而且，如果有需要，將它轉換成 UTC。 它相當於剖析的字串，然後呼叫<xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType>方法傳回的<xref:System.DateTimeOffset>物件。|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|如果`format`不需要`input`包含位移的值，傳回的<xref:System.DateTimeOffset>物件提供的當地時區位移。 這是預設行為。|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|如果`format`不需要`input`包含位移的值，傳回的<xref:System.DateTimeOffset>物件指定 UTC 時差 （+ 00:00）。|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|可讓`input`包含內部的泛空白字元，未指定的格式。 額外的空白字元可以出現在日期和時間元件之間以及位移，以外的個別元件內且剖析字串時，會忽略。|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|可讓`input`包含未指定的前置空格`format`。 剖析字串時，會忽略這些項目。|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|可讓`input`包含尾端空白不由指定`format`。 剖析字串時，會忽略這些項目。|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|可讓`input`加入不由指定開頭、 結尾，和內部的空白`format`。 中未指定的所有額外泛空白字元`format`時剖析字串都會被忽略。|  
|<xref:System.Globalization.DateTimeStyles.None>|表示中不允許其他泛空白字元`input`。 泛空白字元必須出現在確實以指定`format`。 這是預設行為。|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|沒有任何作用，因為<xref:System.DateTimeOffset>結構不包含`Kind`屬性。|  
  
## Examples 

 下列範例會使用<xref:System.DateTimeOffset.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29>方法使用標準和自訂格式規範、 文化特性而異，和各種<xref:System.Globalization.DateTimeStyles>剖析數的日期和時間字串的值。  
  
 [!code-csharp[System.DateTimeOffset.TryParseExact#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.TryParseExact/cs/TryParseExact.cs#1)]
 [!code-vb[System.DateTimeOffset.TryParseExact#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.TryParseExact/vb/TryParseExact.vb#1)]  

下列範例會使用各種<xref:System.Globalization.DateTimeStyles>剖析預期要符合的字串陣列的值[ISO 8601](~/docs/standard/base-types/standard-date-and-time-format-strings.md#the-round-trip-o-o-format-specifier)。 如範例輸出所示，正確格式的字串無法剖析如果：

- 它們包含泛空白字元和適當<xref:System.Globalization.DateTimeStyles>旗標 (例如<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces?displayProperty=nameWithType>方法呼叫中尚未提供。

- 它們包含超出範圍的日期和時間的項目。

未指定 UTC 時差的字串會假設的當地時區位移 (在此情況下，-07:00，反映的太平洋日光節約時區位移) 除非<xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType>旗標是方法呼叫中提供。 在此情況下，它們會假設為國際標準時間。

[!code-csharp[Parsing ISO 8601 strings](~/samples/snippets/csharp/api/system/datetimeoffset/tryparseexact/tryparseexacto8601-2.cs)]
[!code-vb[Parsing ISO 8601 strings](~/samples/snippets/visualbasic/api/system/datetimeoffset/tryparseexact/tryparseexacto8601-2.vb)]
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="styles" /> 包含未定義的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。  
  
-或- 
 不支援 <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" />。  
  
-或- 
 <paramref name="styles" /> 包含互斥的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。</exception>
        <block subset="none" type="usage"><para>在  [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]，則<see cref="Overload:System.DateTimeOffset.TryParseExact" />傳回<see langword="false" />小時元件和 AM/PM 指示項不在協議中，如果包含要剖析的字串。 在 [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]和舊版本中，AM/PM 指示項會被忽略。</para></block>
        <altmember cref="Overload:System.DateTimeOffset.ParseExact" />
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string input, string[] formats, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string input, string[] formats, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (input As String, formats As String(), formatProvider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(System::String ^ input, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : string * string[] * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTimeOffset.TryParseExact (input, formats, formatProvider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">字串，包含要轉換的日期和時間。</param>
        <param name="formats">陣列，定義 <paramref name="input" /> 的預期格式。</param>
        <param name="formatProvider">物件，提供關於 <paramref name="input" /> 的特定文化特性格式資訊。</param>
        <param name="styles">列舉值的位元組合，表示 input 所允許的輸入格式。 一般會指定的值是 <see langword="None" />。</param>
        <param name="result">如果轉換成功，方法傳回時內含的 <see cref="T:System.DateTimeOffset" /> 就會和 <paramref name="input" /> 的日期和時間相等；如果轉換失敗，則為 <see cref="F:System.DateTimeOffset.MinValue" />。 如果 <paramref name="input" /> 不包含日期和時間的有效字串表示，或者不包含 <paramref name="format" /> 定義之預期格式的日期和時間，或者 <paramref name="formats" /> 為 <see langword="null" />，則轉換會失敗。 這個參數會以未初始化的狀態傳遞。</param>
        <summary>使用指定的格式陣列、特定文化特性格式資訊以及樣式，將日期和時間的指定字串表示，轉換為其相等的 <see cref="T:System.DateTimeOffset" />。 字串表示的格式必須完全符合其中一個指定的格式。</summary>
        <returns>如果 <paramref name="input" /> 參數轉換成功，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29>方法會剖析的日期字串表示符合任何一個模式指派給`formats`陣列。 如果`input`字串不符合任何一個這些模式所定義的任何變化`styles`參數，剖析作業失敗，而且此方法會傳回`false`。 除了比較`input`到多個字串，包含格式規範，這個多載的行為相同<xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>方法。  
  
 `formats`參數是字串陣列，其項目包含單一標準格式規範或定義的可能模式的一或多個自訂格式規範`input`。 如需有效的格式化程式碼的詳細資訊，請參閱[標準日期和時間格式字串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)並[自訂日期和時間格式字串](~/docs/standard/base-types/custom-date-and-time-format-strings.md)。 如果中的相符項目`formats`包含`z`， `zz`，或`zzz`自訂格式規範，以指出位移必須存在於`input`，該時差必須包含負號或正號。 如果正負號遺漏，剖析作業失敗，而且此方法會傳回`false`。  
  
> [!IMPORTANT]
>  使用`formats`的這個多載來指定多個格式的參數可協助降低進入日期和時間時，許多使用者體驗的挫折。 特別是，能夠定義多個輸入的模式可讓應用程式來處理可以包含或缺少的幾個月、 天、 小時、 分鐘和秒的前置零的日期和時間表示。 此圖說明範例。  
  
 如果中的相符項目`formats`要求`input`包含日期而非時間，產生<xref:System.DateTimeOffset>物件指派午夜的時間 (0: 00:00)。 如果中的相符項目`formats`需要輸入包含時間但不是日期，產生<xref:System.DateTimeOffset>物件會指派給本機系統上目前的日期。 如果中的相符項目`formats`不需要`input`包含位移時，所產生的位移<xref:System.DateTimeOffset>的值取決於物件`styles`參數。 如果`styles`包含<xref:System.Globalization.DateTimeStyles.AssumeLocal>，當地時區位移指派給<xref:System.DateTimeOffset>物件。 如果`styles`包含<xref:System.Globalization.DateTimeStyles.AssumeUniversal>，Coordinated Universal Time (UTC) 位移或 + 00:00，已指派給<xref:System.DateTimeOffset>物件。 如果指定兩個值，則會使用當地時區位移。  
  
 特定日期和時間的符號和中使用的字串`input`所定義`formatProvider`參數。 也是如此的模式比對的精確`input`如果的相符的項目`formats`是標準格式規範的字串。 `formatProvider`參數可以是下列其中一項：  
  
-   A<xref:System.Globalization.CultureInfo>代表的文化特性的物件基礎所在`input`解譯。 <xref:System.Globalization.DateTimeFormatInfo>所傳回的物件<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>屬性定義的符號和格式設定在`input`。  
  
-   A<xref:System.Globalization.DateTimeFormatInfo>定義格式的日期和時間資料的物件。  
  
 如果`formatprovider`已`null`，則<xref:System.Globalization.CultureInfo>使用對應至目前的文化特性的物件。  
  
 `styles`參數可讓您定義是否允許泛空白字元在輸入字串中，指示如何剖析字串，而不需要明確的位移元件，並支援 UTC 轉換為剖析作業的一部分。 所有成員<xref:System.Globalization.DateTimeStyles>列舉型別支援除了<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>。 下表列出支援的每個成員的效果。  
  
|`DateTimeStyles` 成員|行為|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|剖析`input`而且，如果有需要，將它轉換成 UTC。 它相當於剖析的字串，然後呼叫<xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType>方法傳回的<xref:System.DateTimeOffset>物件。|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|如果中的相符項目`formats`不需要`input`包含位移的值，傳回的<xref:System.DateTimeOffset>物件提供的當地時區位移。 這是預設值。|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|如果中的相符項目`formats`不需要`input`包含位移的值，傳回的<xref:System.DateTimeOffset>物件指定 UTC 時差 （+ 00:00）。|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|可讓`input`包含未指定中的項目內部的泛空白字元`formats`。 額外的空白字元可以出現日期和時間的元件之間，以及在個別的元件 （除了位移），並剖析字串時，會忽略。|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|可讓`input`包含前置空格中的項目未指定`formats`。 剖析字串時，會忽略這些項目。|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|可讓`input`包含後端中的項目未指定的空格`formats`。 剖析字串時，會忽略這些項目。|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|可讓`input`包含前置、 尾端，與內部空間中的項目未指定`formats`。 未指定相符的項目中的所有額外泛空白字元`formats`時剖析字串都會被忽略。|  
|<xref:System.Globalization.DateTimeStyles.None>|表示中不允許其他泛空白字元`input`。 空白字元必須出現在完全中特定項目中所指定`formats`成功比對會發生。 這是預設行為。|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|沒有任何作用，因為<xref:System.DateTimeOffset>結構不包含`Kind`屬性。|  
  
   
  
## Examples  
 下列範例會定義多個輸入的日期與時間和位移的值的字串表示格式，並接著會傳遞由使用者輸入的字串<xref:System.DateTimeOffset.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29>方法。  
  
 [!code-csharp[System.DateTimeOffset.TryParseExact#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.TryParseExact/cs/TryParseExact.cs#2)]
 [!code-vb[System.DateTimeOffset.TryParseExact#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.TryParseExact/vb/TryParseExact.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="styles" /> 包含未定義的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。  
  
-或- 
 不支援 <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" />。  
  
-或- 
 <paramref name="styles" /> 包含互斥的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。</exception>
        <block subset="none" type="usage"><para>在  [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]，則<see cref="Overload:System.DateTimeOffset.TryParseExact" />傳回<see langword="false" />小時元件和 AM/PM 指示項不在協議中，如果包含要剖析的字串。 在 [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]和舊版本中，AM/PM 指示項會被忽略。</para></block>
      </Docs>
    </Member>
    <Member MemberName="UnixEpoch">
      <MemberSignature Language="C#" Value="public static readonly DateTimeOffset UnixEpoch;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTimeOffset UnixEpoch" />
      <MemberSignature Language="DocId" Value="F:System.DateTimeOffset.UnixEpoch" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UnixEpoch As DateTimeOffset " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTimeOffset UnixEpoch;" />
      <MemberSignature Language="F#" Value=" staticval mutable UnixEpoch : DateTimeOffset" Usage="System.DateTimeOffset.UnixEpoch" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UtcDateTime">
      <MemberSignature Language="C#" Value="public DateTime UtcDateTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime UtcDateTime" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.UtcDateTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UtcDateTime As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime UtcDateTime { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.UtcDateTime : DateTime" Usage="System.DateTimeOffset.UtcDateTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得 <see cref="T:System.DateTime" /> 值，這個值表示目前 <see cref="T:System.DateTimeOffset" /> 物件的 Coordinated Universal Time (UTC) 日期和時間。</summary>
        <value>目前 <see cref="T:System.DateTimeOffset" /> 物件的 Coordinated Universal Time (UTC) 日期和時間。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.UtcDateTime%2A>屬性不會執行雙重轉換：  
  
-   它會將轉換的日期和時間的目前<xref:System.DateTimeOffset>物件為 Coordinated Universal Time (UTC)。 藉由減去的值執行轉換<xref:System.DateTimeOffset.Offset%2A>屬性從目前的時間與日期<xref:System.DateTimeOffset>物件。  
  
-   它會將轉換<xref:System.DateTimeOffset>值<xref:System.DateTime>值。  
  
 <xref:System.DateTime.Kind%2A>屬性傳回之<xref:System.DateTimeOffset.DateTime%2A>值設定為<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>。  
  
 擷取的值<xref:System.DateTimeOffset.UtcDateTime%2A>屬性就相當於呼叫目前<xref:System.DateTimeOffset>物件的`ToUniversalTime.DateTime`屬性，不同之處在於<xref:System.DateTime.Kind%2A>後者的屬性<xref:System.DateTime>值是<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>。  
  
   
  
## Examples  
 下列範例示範如何使用<xref:System.DateTimeOffset.UtcDateTime%2A>屬性來顯示<xref:System.DateTimeOffset>值和其相對應的 UTC 時間。  
  
 [!code-csharp[System.DateTimeOffset.Properties#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#17)]
 [!code-vb[System.DateTimeOffset.Properties#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#17)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UtcNow">
      <MemberSignature Language="C#" Value="public static DateTimeOffset UtcNow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTimeOffset UtcNow" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.UtcNow" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property UtcNow As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTimeOffset UtcNow { DateTimeOffset get(); };" />
      <MemberSignature Language="F#" Value="member this.UtcNow : DateTimeOffset" Usage="System.DateTimeOffset.UtcNow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得 <see cref="T:System.DateTimeOffset" /> 物件，這個物件的日期和時間已設定為目前 Coordinated Universal Time (UTC) 日期和時間，且位移為 <see cref="F:System.TimeSpan.Zero" />。</summary>
        <value>其日期和時間為目前 Coordinated Universal Time (UTC)，且其位移為 <see cref="F:System.TimeSpan.Zero" /> 的物件。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.UtcNow%2A>屬性計算目前全球定位時間 (UTC) 以本機系統的時鐘時間和定義的本機系統的時區位移。  
  
 目前的 UTC 時間毫秒部分的有效位數，取決於系統時鐘的解析度。 在 Windows NT 3.5 和更新版本和 Windows Vista 作業系統中，時鐘的解析度會是大約為 10-15 毫秒。  
  
   
  
## Examples  
 下列範例說明 Coordinated Universal Time (UTC) 與當地時間之間的關聯性。  
  
 [!code-csharp[System.DateTimeOffset.Properties#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#18)]
 [!code-vb[System.DateTimeOffset.Properties#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#18)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.Now" />
      </Docs>
    </Member>
    <Member MemberName="UtcTicks">
      <MemberSignature Language="C#" Value="public long UtcTicks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 UtcTicks" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.UtcTicks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UtcTicks As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long UtcTicks { long get(); };" />
      <MemberSignature Language="F#" Value="member this.UtcTicks : int64" Usage="System.DateTimeOffset.UtcTicks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得刻度數，這個值表示目前 <see cref="T:System.DateTimeOffset" /> 物件之 Coordinated Universal Time (UTC) 的日期和時間。</summary>
        <value><see cref="T:System.DateTimeOffset" /> 物件的 Coordinated Universal Time (UTC) 刻度數。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.DateTimeOffset.UtcTicks%2A>屬性表示 0001 年 1 月 1 日，12:00:00 午夜起已經過的 100 奈秒間隔數 (值<xref:System.DateTimeOffset.MinValue>)。 它不包含刻度將會新增閏秒。 奈秒是一個十億分之一秒;第二個有 10 萬個刻度。 值<xref:System.DateTimeOffset.UtcTicks%2A>屬性的範圍是從`DateTimeOffset.MinValue.Ticks`至`DateTimeOffset.MaxValue.Ticks`。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Year">
      <MemberSignature Language="C#" Value="public int Year { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Year" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Year" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Year As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Year { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Year : int" Usage="System.DateTimeOffset.Year" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得目前 <see cref="T:System.DateTimeOffset" /> 物件所表示之日期的年份元件。</summary>
        <value>目前 <see cref="T:System.DateTimeOffset" /> 物件的年份元件，以 0 到 9999 之間的整數表示。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.Year%2A>的值不會影響屬性<xref:System.DateTimeOffset.Offset%2A>屬性。  
  
 您也可以建立的字串表示法<xref:System.DateTimeOffset>藉由呼叫物件的年份元件<xref:System.DateTimeOffset.ToString%2A>方法使用"y"、"yy"或"yyyy"自訂格式規範。  
  
   
  
## Examples  
 下列範例顯示的年份元件<xref:System.DateTimeOffset>四個不同的方式的值：  
  
-   所擷取的值<xref:System.DateTimeOffset.Year%2A>屬性。  
  
-   藉由呼叫<xref:System.DateTimeOffset.ToString%28System.String%29>方法與"y"格式規範。  
  
-   藉由呼叫<xref:System.DateTimeOffset.ToString%28System.String%29>方法使用"yy"格式規範。  
  
-   藉由呼叫<xref:System.DateTimeOffset.ToString%28System.String%29>方法與"yyyy"格式規範。  
  
 [!code-csharp[System.DateTimeOffset.Properties#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#19)]
 [!code-vb[System.DateTimeOffset.Properties#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#19)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>