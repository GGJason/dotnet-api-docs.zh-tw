<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="EntryPointNotFoundException.xml" source-language="en-US" target-language="zh-TW">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5a06cde606e85e1cdc19126bb4c29455a8086c2a1.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a06cde606e85e1cdc19126bb4c29455a8086c2a1</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.EntryPointNotFoundException">
          <source>The exception that is thrown when an attempt to load a class fails due to the absence of an entry method.</source>
          <target state="translated">當試著載入類別卻因沒有進入方法而告失敗時，所擲回的例外狀況。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EntryPointNotFoundException">
          <source>An <ph id="ph1">&lt;xref:System.EntryPointNotFoundException&gt;</ph> exception is thrown when the common language runtime is unable to load an assembly because it cannot identify the assembly's entry point.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.EntryPointNotFoundException&gt;</ph> Common language runtime 無法載入組件，因為無法識別組件的進入點時，會擲回例外狀況。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EntryPointNotFoundException">
          <source>This exception can be thrown under the following conditions:</source>
          <target state="translated">在下列情況下，可能會擲回這個例外狀況：</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EntryPointNotFoundException">
          <source>The common language runtime is unable to locate an application entry point (typically a <ph id="ph1">`Main`</ph> method) in an executable assembly.</source>
          <target state="translated">Common language runtime 會找不到應用程式進入點 (通常<ph id="ph1">`Main`</ph>方法) 中執行的組件。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EntryPointNotFoundException">
          <source>The application entry point must be a global or <ph id="ph1">`static`</ph> method that has either no parameters or a string array as its only parameter.</source>
          <target state="translated">應用程式進入點必須是全域或<ph id="ph1">`static`</ph>具有無參數或做為其唯一參數的字串陣列的方法。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EntryPointNotFoundException">
          <source>The entry point can return <ph id="ph1">`void`</ph>, or it can return an <ph id="ph2">&lt;xref:System.Int32&gt;</ph> or <ph id="ph3">&lt;xref:System.UInt32&gt;</ph> exit code.</source>
          <target state="translated">進入點可以傳回<ph id="ph1">`void`</ph>，它可以傳回<ph id="ph2">&lt;xref:System.Int32&gt;</ph>或<ph id="ph3">&lt;xref:System.UInt32&gt;</ph>結束代碼。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EntryPointNotFoundException">
          <source>An application assembly cannot define more than one entry point.</source>
          <target state="translated">應用程式組件不能定義一個以上的進入點。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EntryPointNotFoundException">
          <source>The call to a function in a Windows DLL cannot be resolved because the function cannot be found.</source>
          <target state="translated">無法解析 Windows DLL 中的函式呼叫，因為找不到函式。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EntryPointNotFoundException">
          <source>In the following example, an <ph id="ph1">&lt;xref:System.EntryPointNotFoundException&gt;</ph> exception is thrown because User32.dll does not include a function named <ph id="ph2">`GetMyNumber`</ph>.</source>
          <target state="translated">在下列範例中，<ph id="ph1">&lt;xref:System.EntryPointNotFoundException&gt;</ph>因為 User32.dll 不包含名為函式會擲回例外狀況<ph id="ph2">`GetMyNumber`</ph>。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EntryPointNotFoundException">
          <source>The call to a function in a Windows DLL cannot be resolved because the name used in the method call does not match a name found in the assembly.</source>
          <target state="translated">無法解析 Windows DLL 中的函式呼叫，因為在方法呼叫中使用的名稱不符合組件中找到的名稱。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EntryPointNotFoundException">
          <source>Frequently, this occurs because the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling?displayProperty=nameWithType&gt;</ph> field is either implicitly or explicitly set to <ph id="ph2">`true`</ph>, the called method includes one or more string parameters and has both an ANSI and a Unicode version, and the name used in the method call does not correspond to the name of this ANSI or Unicode version.</source>
          <target state="translated">通常，這是因為<ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling?displayProperty=nameWithType&gt;</ph>欄位會以隱含或明確設定為<ph id="ph2">`true`</ph>、 所呼叫的方法包含一或多個字串參數，而且使用 ANSI 和 Unicode 版本和方法呼叫中使用的名稱並不會對應至這個 ANSI 或 Unicode 版本的名稱。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EntryPointNotFoundException">
          <source>The following example provides an illustration by attempting to call the Windows <ph id="ph1">`MessageBox`</ph> function in User32.dll.</source>
          <target state="translated">下列範例將進行示範，嘗試呼叫 Windows <ph id="ph1">`MessageBox`</ph> User32.dll 中的函式。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EntryPointNotFoundException">
          <source>Because the first method definition specifies <ph id="ph1">&lt;xref:System.Runtime.InteropServices.CharSet.Unicode?displayProperty=nameWithType&gt;</ph> for string marshaling, the common language looks for the wide-character version of the function, <ph id="ph2">`MessageBoxW`</ph>, instead of the name used in the method call, <ph id="ph3">`MessageBox`</ph>.</source>
          <target state="translated">因為指定的第一個方法定義<ph id="ph1">&lt;xref:System.Runtime.InteropServices.CharSet.Unicode?displayProperty=nameWithType&gt;</ph>封送處理字串，common language 會尋找函式，寬字元版本<ph id="ph2">`MessageBoxW`</ph>，而不是在方法呼叫時，所使用的名稱<ph id="ph3">`MessageBox`</ph>。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EntryPointNotFoundException">
          <source>The second method definition corrects this problem by calling the <ph id="ph1">`MessageBoxW`</ph> instead of the <ph id="ph2">`MessageBox`</ph> function.</source>
          <target state="translated">第二個方法定義修正此問題，藉由呼叫<ph id="ph1">`MessageBoxW`</ph>而不是<ph id="ph2">`MessageBox`</ph>函式。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EntryPointNotFoundException">
          <source>You are trying to call a function in a dynamic link library by its simple name rather than its decorated name.</source>
          <target state="translated">您嘗試在動態連結程式庫呼叫的函式，由其簡單的名稱，而不是其裝飾的名稱。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EntryPointNotFoundException">
          <source>Typically, the C++ compiler generates a decorated name for DLL functions.</source>
          <target state="translated">通常，c + + 編譯器會產生 DLL 函式的裝飾的名稱。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EntryPointNotFoundException">
          <source>For example, the following C++ code defines a function named <ph id="ph1">`Double`</ph> in a library named TestDll.dll.</source>
          <target state="translated">例如，下列 c + + 程式碼會定義名為函式<ph id="ph1">`Double`</ph>名為 TestDll.dll 文件庫中。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EntryPointNotFoundException">
          <source>When the code in the following example tries to call the function, an <ph id="ph1">&lt;xref:System.EntryPointNotFoundException&gt;</ph> exception is thrown because the <ph id="ph2">`Double`</ph> function cannot be found.</source>
          <target state="translated">下列範例中的程式碼嘗試呼叫函式，當<ph id="ph1">&lt;xref:System.EntryPointNotFoundException&gt;</ph>會擲回例外狀況，因為<ph id="ph2">`Double`</ph>找不到函式。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EntryPointNotFoundException">
          <source>However, if the function is called by using its decorated name (in this case, <ph id="ph1">`?Double@@YAHH@Z`</ph>), the function call succeeds, as the following example shows.</source>
          <target state="translated">不過，如果呼叫的函式是以其裝飾的名稱 (在此情況下， <ph id="ph1">`?Double@@YAHH@Z`</ph>)，函式呼叫成功，如下列範例所示。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EntryPointNotFoundException">
          <source>You can find the decorated names of functions exported by a DLL by using a utility such as Dumpbin.exe.</source>
          <target state="translated">您可以找到使用 Dumpbin.exe 等公用程式 dll 匯出的函式的裝飾的名稱。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EntryPointNotFoundException">
          <source>You are attempting to call a method in a managed assembly as if it were an unmanaged dynamic link library.</source>
          <target state="translated">您嘗試在受管理組件中呼叫的方法，就好像之 unmanaged 動態連結程式庫。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EntryPointNotFoundException">
          <source>To see this in action, compile the following example to an assembly named StringUtilities.dll.</source>
          <target state="translated">若要查看此動作，編譯組件名為 StringUtilities.dll 下列的範例。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EntryPointNotFoundException">
          <source>Then compile and execute the following example, which attempts to call the <ph id="ph1">`StringUtilities.SayGoodMorning`</ph> method in the StringUtilities.dll dynamic link library as if it were unmanaged code.</source>
          <target state="translated">然後編譯並執行下列的範例中，嘗試呼叫<ph id="ph1">`StringUtilities.SayGoodMorning`</ph>StringUtilities.dll 動態連結程式庫中的方法就好像 unmanaged 程式碼。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EntryPointNotFoundException">
          <source>The result is an <ph id="ph1">&lt;xref:System.EntryPointNotFoundException&gt;</ph> exception.</source>
          <target state="translated">結果是<ph id="ph1">&lt;xref:System.EntryPointNotFoundException&gt;</ph>例外狀況。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EntryPointNotFoundException">
          <source>To eliminate the exception, add a reference to the managed assembly and access the <ph id="ph1">`StringUtilities.SayGoodMorning`</ph> method just as you would access any other method in managed code, as the following example does.</source>
          <target state="translated">若要消除例外狀況，將參考加入至 managed 組件及存取<ph id="ph1">`StringUtilities.SayGoodMorning`</ph>方法就像存取任何其他方法在 managed 程式碼，如下列範例會執行。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EntryPointNotFoundException">
          <source>You are trying to call a method in a COM DLL as if it were a Windows DLL.</source>
          <target state="translated">您嘗試在 COM DLL 中呼叫的方法，就好像 Windows DLL。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EntryPointNotFoundException">
          <source>To access a COM DLL, select the <bpt id="p1">**</bpt>Add Reference<ept id="p1">**</ept> option in Visual Studio to add a reference to the project, and then select the type library from the <bpt id="p2">**</bpt>COM<ept id="p2">**</ept> tab.</source>
          <target state="translated">若要存取 COM DLL，請選取<bpt id="p1">**</bpt>加入參考<ept id="p1">**</ept>選項以將參考加入專案，然後選取 [從類型程式庫的 Visual Studio 中<bpt id="p2">**</bpt>COM<ept id="p2">**</ept> ] 索引標籤。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EntryPointNotFoundException">
          <source>For a list of initial property values for an instance of <ph id="ph1">&lt;xref:System.EntryPointNotFoundException&gt;</ph>, see the <ph id="ph2">&lt;xref:System.EntryPointNotFoundException.%23ctor%2A&gt;</ph> constructors.</source>
          <target state="translated">如需執行個體的初始屬性值的清單<ph id="ph1">&lt;xref:System.EntryPointNotFoundException&gt;</ph>，請參閱<ph id="ph2">&lt;xref:System.EntryPointNotFoundException.%23ctor%2A&gt;</ph>建構函式。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="T:System.EntryPointNotFoundException">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.EntryPointNotFoundException" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.EntryPointNotFoundException" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.EntryPointNotFoundException.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.EntryPointNotFoundException" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.EntryPointNotFoundException" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EntryPointNotFoundException.#ctor">
          <source>This constructor initializes the <ph id="ph1">&lt;xref:System.Exception.Message%2A&gt;</ph> property of the new instance to a system-supplied message that describes the error, such as "Entry point was not found."</source>
          <target state="translated">這個建構函式初始化<ph id="ph1">&lt;xref:System.Exception.Message%2A&gt;</ph>屬性的新執行個體的系統提供的訊息描述錯誤，例如 「 進入點已找不到。 」</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EntryPointNotFoundException.#ctor">
          <source>This message takes into account the current system culture.</source>
          <target state="translated">此訊息會考量目前的系統文化特性。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EntryPointNotFoundException.#ctor">
          <source>The following table shows the initial property values for an instance of <ph id="ph1">&lt;xref:System.EntryPointNotFoundException&gt;</ph>.</source>
          <target state="translated">下表顯示 <ph id="ph1">&lt;xref:System.EntryPointNotFoundException&gt;</ph> 執行個體的初始屬性值。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EntryPointNotFoundException.#ctor">
          <source>Property</source>
          <target state="translated">屬性</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EntryPointNotFoundException.#ctor">
          <source>Value</source>
          <target state="translated">值</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EntryPointNotFoundException.#ctor">
          <source>A null reference (<ph id="ph1">`Nothing`</ph> in Visual Basic).</source>
          <target state="translated">null 參考 (在 Visual Basic 中為 <ph id="ph1">`Nothing`</ph>)。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EntryPointNotFoundException.#ctor">
          <source>The localized error message string.</source>
          <target state="translated">當地語系化的錯誤訊息字串。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.EntryPointNotFoundException.#ctor(System.String)">
          <source>The error message that explains the reason for the exception.</source>
          <target state="translated">解釋例外狀況原因的錯誤訊息。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.EntryPointNotFoundException.#ctor(System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.EntryPointNotFoundException" /&gt;</ph> class with a specified error message.</source>
          <target state="translated">使用指定的錯誤訊息，初始化 <ph id="ph1">&lt;see cref="T:System.EntryPointNotFoundException" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EntryPointNotFoundException.#ctor(System.String)">
          <source>The content of <ph id="ph1">`message`</ph> is intended to be understood by humans.</source>
          <target state="translated"><ph id="ph1">`message`</ph> 的內容必須能讓人了解。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EntryPointNotFoundException.#ctor(System.String)">
          <source>The caller of this constructor is required to ensure that this string has been localized for the current system culture.</source>
          <target state="translated">這個建構函式的呼叫端必須確保這個字串已經被當地語系化 (為了目前系統的文化特性)。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EntryPointNotFoundException.#ctor(System.String)">
          <source>The following table shows the initial property values for an instance of <ph id="ph1">&lt;xref:System.EntryPointNotFoundException&gt;</ph>.</source>
          <target state="translated">下表顯示 <ph id="ph1">&lt;xref:System.EntryPointNotFoundException&gt;</ph> 執行個體的初始屬性值。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EntryPointNotFoundException.#ctor(System.String)">
          <source>Property</source>
          <target state="translated">屬性</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EntryPointNotFoundException.#ctor(System.String)">
          <source>Value</source>
          <target state="translated">值</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EntryPointNotFoundException.#ctor(System.String)">
          <source>A null reference (<ph id="ph1">`Nothing`</ph> in Visual Basic).</source>
          <target state="translated">null 參考 (在 Visual Basic 中為 <ph id="ph1">`Nothing`</ph>)。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EntryPointNotFoundException.#ctor(System.String)">
          <source>The error message string.</source>
          <target state="translated">錯誤訊息字串。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.EntryPointNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The object that holds the serialized object data.</source>
          <target state="translated">存放序列物件資料的物件。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.EntryPointNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The contextual information about the source or destination.</source>
          <target state="translated">關於來源或目的端的內容資訊。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.EntryPointNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.EntryPointNotFoundException" /&gt;</ph> class with serialized data.</source>
          <target state="translated">使用序列化資料，初始化 <ph id="ph1">&lt;see cref="T:System.EntryPointNotFoundException" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EntryPointNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>This constructor is called during deserialization to reconstitute the exception object transmitted over a stream.</source>
          <target state="translated">進行還原序列化 (Deserialization) 期間會呼叫這個建構函式，以便重新構成經由資料流傳送的例外狀況物件。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.EntryPointNotFoundException.#ctor(System.String,System.Exception)">
          <source>The error message that explains the reason for the exception.</source>
          <target state="translated">解釋例外狀況原因的錯誤訊息。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.EntryPointNotFoundException.#ctor(System.String,System.Exception)">
          <source>The exception that is the cause of the current exception.</source>
          <target state="translated">做為目前例外狀況發生原因的例外狀況。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.EntryPointNotFoundException.#ctor(System.String,System.Exception)">
          <source>If the <bpt id="p1">&lt;c&gt;</bpt>inner<ept id="p1">&lt;/c&gt;</ept> parameter is not a null reference (<ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> in Visual Basic), the current exception is raised in a <ph id="ph2">&lt;see langword="catch" /&gt;</ph> block that handles the inner exception.</source>
          <target state="translated">如果 <bpt id="p1">&lt;c&gt;</bpt>inner<ept id="p1">&lt;/c&gt;</ept> 參數不是 Null 參考 (在 Visual Basic 中為 <ph id="ph1">&lt;see langword="Nothing" /&gt;</ph>)，則會在處理內部例外狀況的 <ph id="ph2">&lt;see langword="catch" /&gt;</ph> 區塊中引發目前的例外狀況。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.EntryPointNotFoundException.#ctor(System.String,System.Exception)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.EntryPointNotFoundException" /&gt;</ph> class with a specified error message and a reference to the inner exception that is the cause of this exception.</source>
          <target state="translated">使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <ph id="ph1">&lt;see cref="T:System.EntryPointNotFoundException" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EntryPointNotFoundException.#ctor(System.String,System.Exception)">
          <source>An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property.</source>
          <target state="translated">被擲回以做為前一個例外狀況直接結果的例外狀況，應該在 <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> 屬性中包含對前一個例外狀況的參考。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EntryPointNotFoundException.#ctor(System.String,System.Exception)">
          <source>The <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property returns the same value that is passed into the constructor, or a null reference (<ph id="ph2">`Nothing`</ph> in Visual Basic) if the <ph id="ph3">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property does not supply the inner exception value to the constructor.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> 屬性會傳回與傳入建構函式中相同的值；如果 <ph id="ph2">`Nothing`</ph> 屬性不提供內部例外值給建構函式，則傳回 null 參考 (在 Visual Basic 中為 <ph id="ph3">&lt;xref:System.Exception.InnerException%2A&gt;</ph>)。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EntryPointNotFoundException.#ctor(System.String,System.Exception)">
          <source>The following table shows the initial property values for an instance of <ph id="ph1">&lt;xref:System.EntryPointNotFoundException&gt;</ph>.</source>
          <target state="translated">下表顯示 <ph id="ph1">&lt;xref:System.EntryPointNotFoundException&gt;</ph> 執行個體的初始屬性值。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EntryPointNotFoundException.#ctor(System.String,System.Exception)">
          <source>Property</source>
          <target state="translated">屬性</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EntryPointNotFoundException.#ctor(System.String,System.Exception)">
          <source>Value</source>
          <target state="translated">值</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EntryPointNotFoundException.#ctor(System.String,System.Exception)">
          <source>The inner exception reference.</source>
          <target state="translated">內部例外狀況參考。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EntryPointNotFoundException.#ctor(System.String,System.Exception)">
          <source>The error message string.</source>
          <target state="translated">錯誤訊息字串。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>