<Type Name="Exception" FullName="System.Exception">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="2ec562f6edb325afde1f67852f7c9afe4b9d3546" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36431858" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Exception : System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable beforefieldinit Exception extends System.Object implements class System.Runtime.InteropServices._Exception, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Exception" />
  <TypeSignature Language="VB.NET" Value="Public Class Exception&#xA;Implements _Exception, ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Exception : System::Runtime::InteropServices::_Exception, System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type Exception = class&#xA;    interface ISerializable&#xA;    interface _Exception" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.InteropServices._Exception</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._Exception))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="755cb-101">代表應用程式執行期間所發生的錯誤。</span>
      <span class="sxs-lookup">
        <span data-stu-id="755cb-101">Represents errors that occur during application execution.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="755cb-102">這個類別是所有例外狀況的基底類別。</span><span class="sxs-lookup"><span data-stu-id="755cb-102">This class is the base class for all exceptions.</span></span> <span data-ttu-id="755cb-103">發生錯誤時，系統或目前正在執行的應用程式報告它藉由擲回例外狀況，其中包含錯誤的相關資訊。</span><span class="sxs-lookup"><span data-stu-id="755cb-103">When an error occurs, either the system or the currently executing application reports it by throwing an exception that contains information about the error.</span></span> <span data-ttu-id="755cb-104">擲回例外狀況之後，就會處理應用程式或預設的例外狀況處理常式。</span><span class="sxs-lookup"><span data-stu-id="755cb-104">After an exception is thrown, it is handled by the application or by the default exception handler.</span></span>  
  
 <span data-ttu-id="755cb-105">本節內容：</span><span class="sxs-lookup"><span data-stu-id="755cb-105">In this section:</span></span>  
  
 <span data-ttu-id="755cb-106">[錯誤和例外狀況](#Errors) </span><span class="sxs-lookup"><span data-stu-id="755cb-106">[Errors and exceptions](#Errors) </span></span>  
 <span data-ttu-id="755cb-107">[Try/catch 區塊](#TryCatch) </span><span class="sxs-lookup"><span data-stu-id="755cb-107">[Try/catch blocks](#TryCatch) </span></span>  
 <span data-ttu-id="755cb-108">[例外狀況類型的功能](#Features) </span><span class="sxs-lookup"><span data-stu-id="755cb-108">[Exception type features](#Features) </span></span>  
 <span data-ttu-id="755cb-109">[例外狀況類別屬性](#Properties) </span><span class="sxs-lookup"><span data-stu-id="755cb-109">[Exception class properties](#Properties) </span></span>  
 <span data-ttu-id="755cb-110">[效能考量](#Performance) </span><span class="sxs-lookup"><span data-stu-id="755cb-110">[Performance considerations](#Performance) </span></span>  
 <span data-ttu-id="755cb-111">[重新擲回例外狀況](#Rethrow) </span><span class="sxs-lookup"><span data-stu-id="755cb-111">[Re-throwing an exception](#Rethrow) </span></span>  
 <span data-ttu-id="755cb-112">[選擇標準例外狀況](#Standard) </span><span class="sxs-lookup"><span data-stu-id="755cb-112">[Choosing standard exceptions](#Standard) </span></span>  
 [<span data-ttu-id="755cb-113">實作自訂例外狀況</span><span class="sxs-lookup"><span data-stu-id="755cb-113">Implementing custom exceptions</span></span>](#Custom)  
  
<a name="Errors"></a>   
## <a name="errors-and-exceptions"></a><span data-ttu-id="755cb-114">錯誤和例外狀況</span><span class="sxs-lookup"><span data-stu-id="755cb-114">Errors and exceptions</span></span>  
 <span data-ttu-id="755cb-115">有許多原因可能會發生執行階段錯誤。</span><span class="sxs-lookup"><span data-stu-id="755cb-115">Run-time errors can occur for a variety of reasons.</span></span> <span data-ttu-id="755cb-116">不過，並非所有的錯誤應該處理為您的程式碼中的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="755cb-116">However, not all errors should be handled as exceptions in your code.</span></span> <span data-ttu-id="755cb-117">以下是可以在執行的階段和適當的方式來回應這些發生之錯誤的某些類別目錄。</span><span class="sxs-lookup"><span data-stu-id="755cb-117">Here are some categories of errors that can occur at run time and the appropriate ways to respond to them.</span></span>  
  
-   <span data-ttu-id="755cb-118">**使用方式錯誤。**</span><span class="sxs-lookup"><span data-stu-id="755cb-118">**Usage errors.**</span></span> <span data-ttu-id="755cb-119">使用方式錯誤表示可能會導致例外狀況的程式邏輯中的錯誤。</span><span class="sxs-lookup"><span data-stu-id="755cb-119">A usage error represents an error in program logic that can result in an exception.</span></span> <span data-ttu-id="755cb-120">不過，不能透過例外狀況處理，但藉由修改程式碼，應該解決錯誤。</span><span class="sxs-lookup"><span data-stu-id="755cb-120">However, the error should be addressed not through exception handling but by modifying the faulty code.</span></span> <span data-ttu-id="755cb-121">例如的覆寫<xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType>方法，在下列範例會假設`obj`引數必須永遠為非 null。</span><span class="sxs-lookup"><span data-stu-id="755cb-121">For example, the override of the <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> method in the following example assumes that the `obj` argument must always be non-null.</span></span>  
  
     [!code-csharp[System.Exception.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/usageerrors1.cs#4)]
     [!code-vb[System.Exception.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/usageerrors1.vb#4)]  
  
     <span data-ttu-id="755cb-122"><xref:System.NullReferenceException>所產生例外狀況時`obj`是`null`可以藉由修改原始程式碼，以明確地測試是否為 null，然後再呼叫排除<xref:System.Object.Equals%2A?displayProperty=nameWithType>覆寫和重新編譯。</span><span class="sxs-lookup"><span data-stu-id="755cb-122">The <xref:System.NullReferenceException> exception that results when `obj` is `null` can be eliminated by modifying the source code to explicitly test for null before calling the <xref:System.Object.Equals%2A?displayProperty=nameWithType> override and then re-compiling.</span></span> <span data-ttu-id="755cb-123">下列範例包含已更正的原始程式碼處理`null`引數。</span><span class="sxs-lookup"><span data-stu-id="755cb-123">The following example contains the corrected source code that handles a `null` argument.</span></span>  
  
     [!code-csharp[System.Exception.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/usageerrors2.cs#5)]
     [!code-vb[System.Exception.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/usageerrors2.vb#5)]  
  
     <span data-ttu-id="755cb-124">而不是使用使用方式錯誤的例外狀況處理，您可以使用<xref:System.Diagnostics.Debug.Assert%2A?displayProperty=nameWithType>方法，以找出在偵錯組建的使用方式錯誤和<xref:System.Diagnostics.Trace.Assert%2A?displayProperty=nameWithType>方法，以識別使用方式錯誤偵錯和發行組建。</span><span class="sxs-lookup"><span data-stu-id="755cb-124">Instead of using exception handling for usage errors, you can use the <xref:System.Diagnostics.Debug.Assert%2A?displayProperty=nameWithType> method to identify usage errors in debug builds, and the <xref:System.Diagnostics.Trace.Assert%2A?displayProperty=nameWithType> method to identify usage errors in both debug and release builds.</span></span> <span data-ttu-id="755cb-125">如需詳細資訊，請參閱[Managed 程式碼中的判斷提示](/visualstudio/debugger/assertions-in-managed-code)。</span><span class="sxs-lookup"><span data-stu-id="755cb-125">For more information, see [Assertions in Managed Code](/visualstudio/debugger/assertions-in-managed-code).</span></span>  
  
-   <span data-ttu-id="755cb-126">**程式錯誤。**</span><span class="sxs-lookup"><span data-stu-id="755cb-126">**Program errors.**</span></span> <span data-ttu-id="755cb-127">程式錯誤是一定無法避免撰寫無錯誤的程式碼的執行階段錯誤。</span><span class="sxs-lookup"><span data-stu-id="755cb-127">A program error is a run-time error that cannot necessarily be avoided by writing bug-free code.</span></span>  
  
     <span data-ttu-id="755cb-128">在某些情況下，程式錯誤一定能反映預期或常式錯誤狀況。</span><span class="sxs-lookup"><span data-stu-id="755cb-128">In some cases, a program error may reflect an expected or routine error condition.</span></span> <span data-ttu-id="755cb-129">在此情況下，您可能想要避免使用例外狀況處理來處理程式錯誤並改用重試操作。</span><span class="sxs-lookup"><span data-stu-id="755cb-129">In this case, you may want to avoid using exception handling to deal with the program error and instead retry the operation.</span></span> <span data-ttu-id="755cb-130">例如，如果使用者只需要輸入特定格式的日期，您可以剖析日期字串藉由呼叫<xref:System.DateTime.TryParseExact%2A?displayProperty=nameWithType>方法，這個方法會傳回<xref:System.Boolean>值，指出是否剖析作業成功，而不是使用<xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType>方法，就會擲回<xref:System.FormatException>例外狀況，如果日期字串無法轉換成<xref:System.DateTime>值。</span><span class="sxs-lookup"><span data-stu-id="755cb-130">For example, if the user is expected to input a date in a particular format, you can parse the date string by calling the <xref:System.DateTime.TryParseExact%2A?displayProperty=nameWithType> method, which returns a <xref:System.Boolean> value that indicates whether the parse operation succeeded, instead of using the <xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType> method, which throws a <xref:System.FormatException> exception if the date string cannot be converted to a <xref:System.DateTime> value.</span></span> <span data-ttu-id="755cb-131">同樣地，如果使用者嘗試開啟不存在的檔案，您可以先呼叫<xref:System.IO.File.Exists%2A?displayProperty=nameWithType>方法來檢查檔案是否存在，然後，如果沒有出現，請提示使用者是否想要建立它。</span><span class="sxs-lookup"><span data-stu-id="755cb-131">Similarly, if a user tries to open a file that does not exist, you can first call the <xref:System.IO.File.Exists%2A?displayProperty=nameWithType> method to check whether the file exists and, if it does not, prompt the user whether he or she wants to create it.</span></span>  
  
     <span data-ttu-id="755cb-132">在其他情況下，程式錯誤會反映您的程式碼中可處理預期的錯誤狀況。</span><span class="sxs-lookup"><span data-stu-id="755cb-132">In other cases, a program error reflects an unexpected error condition that can be handled in your code.</span></span> <span data-ttu-id="755cb-133">比方說，即使在您檢查檔案存在，它可能會遭到刪除之前，您可以開啟它，或它可能已損毀。</span><span class="sxs-lookup"><span data-stu-id="755cb-133">For example, even if you've checked to ensure that a file exists, it may be deleted before you can open it, or it may be corrupted.</span></span> <span data-ttu-id="755cb-134">在此情況下，嘗試開啟檔案，藉由執行個體化<xref:System.IO.StreamReader>物件或呼叫<xref:System.IO.File.Open%2A>方法可能會擲回<xref:System.IO.FileNotFoundException>例外狀況。</span><span class="sxs-lookup"><span data-stu-id="755cb-134">In that case, trying to open the file by instantiating a <xref:System.IO.StreamReader> object or calling the <xref:System.IO.File.Open%2A> method may throw a <xref:System.IO.FileNotFoundException> exception.</span></span> <span data-ttu-id="755cb-135">在這些情況下，您應該使用例外狀況處理來從錯誤中復原。</span><span class="sxs-lookup"><span data-stu-id="755cb-135">In these cases, you should use exception handling to recover from the error.</span></span>  
  
-   <span data-ttu-id="755cb-136">**系統失敗。**</span><span class="sxs-lookup"><span data-stu-id="755cb-136">**System failures.**</span></span> <span data-ttu-id="755cb-137">在系統失敗是無法以程式設計的方式有意義的方式處理執行階段錯誤。</span><span class="sxs-lookup"><span data-stu-id="755cb-137">A system failure is a run-time error that cannot be handled programmatically in a meaningful way.</span></span> <span data-ttu-id="755cb-138">例如，任何方法可以擲回<xref:System.OutOfMemoryException>例外狀況，如果 common language runtime 無法配置額外的記憶體。</span><span class="sxs-lookup"><span data-stu-id="755cb-138">For example, any method can throw an <xref:System.OutOfMemoryException> exception if the common language runtime is unable to allocate additional memory.</span></span> <span data-ttu-id="755cb-139">一般情況下，使用例外狀況處理不處理系統失敗。</span><span class="sxs-lookup"><span data-stu-id="755cb-139">Ordinarily, system failures are not handled by using exception handling.</span></span> <span data-ttu-id="755cb-140">相反地，您可以使用事件，例如<xref:System.AppDomain.UnhandledException?displayProperty=nameWithType>呼叫<xref:System.Environment.FailFast%2A?displayProperty=nameWithType>記錄例外狀況資訊，並通知使用者失敗的應用程式終止前的方法。</span><span class="sxs-lookup"><span data-stu-id="755cb-140">Instead, you may be able to use an event such as <xref:System.AppDomain.UnhandledException?displayProperty=nameWithType> and call the <xref:System.Environment.FailFast%2A?displayProperty=nameWithType> method to log exception information and notify the user of the failure before the application terminates.</span></span>  
  
<a name="TryCatch"></a>   
## <a name="trycatch-blocks"></a><span data-ttu-id="755cb-141">Try/catch 區塊</span><span class="sxs-lookup"><span data-stu-id="755cb-141">Try/catch blocks</span></span>  
 <span data-ttu-id="755cb-142">Common language runtime 提供的例外狀況處理模型為基礎的例外狀況為物件，表示法和的程式碼和例外狀況處理程式碼到分隔`try`區塊和`catch`區塊。</span><span class="sxs-lookup"><span data-stu-id="755cb-142">The common language runtime provides an exception handling model that is based on the representation of exceptions as objects, and the separation of program code and exception handling code into `try` blocks and `catch` blocks.</span></span> <span data-ttu-id="755cb-143">可以有一或多個`catch`封鎖，每個設計用來處理特定類型的例外狀況或一個設計用來攔截更特定的例外狀況，比另一個區塊的區塊。</span><span class="sxs-lookup"><span data-stu-id="755cb-143">There can be one or more `catch` blocks, each designed to handle a particular type of exception, or one block designed to catch a more specific exception than another block.</span></span>  
  
 <span data-ttu-id="755cb-144">如果應用程式處理的應用程式程式碼執行期間所發生的例外狀況，程式碼必須放置內`try`陳述式，稱為`try`區塊。</span><span class="sxs-lookup"><span data-stu-id="755cb-144">If an application handles exceptions that occur during the execution of a block of application code, the code must be placed within a `try` statement and is called a `try` block.</span></span> <span data-ttu-id="755cb-145">應用程式程式碼會處理所擲回的例外狀況`try`區塊放在`catch`陳述式，稱為`catch`區塊。</span><span class="sxs-lookup"><span data-stu-id="755cb-145">Application code that handles exceptions thrown by a `try` block is placed within a `catch` statement and is called a `catch` block.</span></span> <span data-ttu-id="755cb-146">零或多個`catch`區塊相關聯`try`區塊，以及每個`catch`區塊包含一個會決定它所處理的例外狀況類型的型別篩選。</span><span class="sxs-lookup"><span data-stu-id="755cb-146">Zero or more `catch` blocks are associated with a `try` block, and each `catch` block includes a type filter that determines the types of exceptions it handles.</span></span>  
  
 <span data-ttu-id="755cb-147">中的例外狀況發生時就`try`區塊中，系統會搜尋相關聯`catch`區塊，直到找出應用程式程式碼中出現的順序以`catch`區塊處理例外狀況。</span><span class="sxs-lookup"><span data-stu-id="755cb-147">When an exception occurs in a `try` block, the system searches the associated `catch` blocks in the order they appear in application code, until it locates a `catch` block that handles the exception.</span></span> <span data-ttu-id="755cb-148">A`catch`區塊處理的例外狀況型別的`T`如果指定的 catch 區塊型別篩選`T`或任何類型的`T`衍生自。</span><span class="sxs-lookup"><span data-stu-id="755cb-148">A `catch` block handles an exception of type `T` if the type filter of the catch block specifies `T` or any type that `T` derives from.</span></span> <span data-ttu-id="755cb-149">系統會停止搜尋找到第一個`catch`區塊處理例外狀況。</span><span class="sxs-lookup"><span data-stu-id="755cb-149">The system stops searching after it finds the first `catch` block that handles the exception.</span></span> <span data-ttu-id="755cb-150">基於這個理由，應用程式程式碼中`catch`之前，必須指定處理類型的區塊`catch`區塊處理其基底類型，如遵循本節的範例所示。</span><span class="sxs-lookup"><span data-stu-id="755cb-150">For this reason, in application code, a `catch` block that handles a type must be specified before a `catch` block that handles its base types, as demonstrated in the example that follows this section.</span></span> <span data-ttu-id="755cb-151">處理的 catch 區塊`System.Exception`最後指定。</span><span class="sxs-lookup"><span data-stu-id="755cb-151">A catch block that handles `System.Exception` is specified last.</span></span>  
  
 <span data-ttu-id="755cb-152">如果沒有任何`catch`目前相關聯的區塊`try`區塊處理例外狀況，以及目前`try`區塊巢狀在其他`try`區塊，以在目前呼叫`catch`區塊相關聯的下一步封入`try`區塊會搜尋。</span><span class="sxs-lookup"><span data-stu-id="755cb-152">If none of the `catch` blocks associated with the current `try` block handle the exception, and the current `try` block is nested within other `try` blocks in the current call, the `catch` blocks associated with the next enclosing `try` block are searched.</span></span> <span data-ttu-id="755cb-153">如果沒有`catch`找不到區塊代表例外狀況，系統會搜尋目前的呼叫中先前的巢狀層級。</span><span class="sxs-lookup"><span data-stu-id="755cb-153">If no `catch` block for the exception is found, the system searches previous nesting levels in the current call.</span></span> <span data-ttu-id="755cb-154">如果沒有`catch`封鎖目前的呼叫中找到的例外狀況，呼叫堆疊向上傳遞的例外狀況，且一個堆疊框架會搜尋`catch`區塊處理例外狀況。</span><span class="sxs-lookup"><span data-stu-id="755cb-154">If no `catch` block for the exception is found in the current call, the exception is passed up the call stack, and the previous stack frame is searched for a `catch` block that handles the exception.</span></span> <span data-ttu-id="755cb-155">呼叫堆疊的搜尋會繼續直到例外狀況處理或呼叫堆疊上不存在任何框架。</span><span class="sxs-lookup"><span data-stu-id="755cb-155">The search of the call stack continues until the exception is handled or until no more frames exist on the call stack.</span></span> <span data-ttu-id="755cb-156">如果呼叫堆疊的頂端為止沒有尋找`catch`處理例外狀況，而預設例外狀況處理常式區塊處理它，且應用程式終止。</span><span class="sxs-lookup"><span data-stu-id="755cb-156">If the top of the call stack is reached without finding a `catch` block that handles the exception, the default exception handler handles it and the application terminates.</span></span>  
  
<a name="Features"></a>   
## <a name="exception-type-features"></a><span data-ttu-id="755cb-157">例外狀況類型的功能</span><span class="sxs-lookup"><span data-stu-id="755cb-157">Exception type features</span></span>  
 <span data-ttu-id="755cb-158">例外狀況型別支援下列功能：</span><span class="sxs-lookup"><span data-stu-id="755cb-158">Exception types support the following features:</span></span>  
  
-   <span data-ttu-id="755cb-159">人類看得懂的文字描述錯誤。</span><span class="sxs-lookup"><span data-stu-id="755cb-159">Human-readable text that describes the error.</span></span> <span data-ttu-id="755cb-160">當發生例外狀況時，執行階段會讓的文字訊息通知使用者錯誤的本質，以及建議的動作來解決問題。</span><span class="sxs-lookup"><span data-stu-id="755cb-160">When an exception occurs, the runtime makes a text message available to inform the user of the nature of the error and to suggest action to resolve the problem.</span></span> <span data-ttu-id="755cb-161">此文字訊息保留在<xref:System.Exception.Message%2A>例外狀況物件的屬性。</span><span class="sxs-lookup"><span data-stu-id="755cb-161">This text message is held in the <xref:System.Exception.Message%2A> property of the exception object.</span></span> <span data-ttu-id="755cb-162">建立期間的例外狀況物件，您可以傳遞給建構函式，以描述該特定例外狀況的詳細資料的文字字串。</span><span class="sxs-lookup"><span data-stu-id="755cb-162">During the creation of the exception object, you can pass a text string to the constructor to describe the details of that particular exception.</span></span> <span data-ttu-id="755cb-163">如果沒有錯誤訊息的引數提供給建構函式，會使用預設的錯誤訊息。</span><span class="sxs-lookup"><span data-stu-id="755cb-163">If no error message argument is supplied to the constructor, the default error message is used.</span></span> <span data-ttu-id="755cb-164">如需詳細資訊，請參閱 <xref:System.Exception.Message%2A> 屬性 (Property)。</span><span class="sxs-lookup"><span data-stu-id="755cb-164">For more information, see the <xref:System.Exception.Message%2A> property.</span></span>  
  
-   <span data-ttu-id="755cb-165">呼叫堆疊時擲回例外狀況的狀態。</span><span class="sxs-lookup"><span data-stu-id="755cb-165">The state of the call stack when the exception was thrown.</span></span> <span data-ttu-id="755cb-166"><xref:System.Exception.StackTrace%2A>屬性會有可用來判斷程式碼中發生錯誤的堆疊追蹤。</span><span class="sxs-lookup"><span data-stu-id="755cb-166">The <xref:System.Exception.StackTrace%2A> property carries a stack trace that can be used to determine where the error occurs in the code.</span></span> <span data-ttu-id="755cb-167">堆疊追蹤會列出所有被呼叫的方法和原始程式檔都會呼叫中的行號。</span><span class="sxs-lookup"><span data-stu-id="755cb-167">The stack trace lists all the called methods and the line numbers in the source file where the calls are made.</span></span>  
  
<a name="Properties"></a>   
## <a name="exception-class-properties"></a><span data-ttu-id="755cb-168">例外狀況類別屬性</span><span class="sxs-lookup"><span data-stu-id="755cb-168">Exception class properties</span></span>  
 <span data-ttu-id="755cb-169"><xref:System.Exception>類別包含數個屬性，可協助識別的程式碼位置、 類型、 說明檔，以及例外狀況的原因： <xref:System.Exception.StackTrace%2A>， <xref:System.Exception.InnerException%2A>， <xref:System.Exception.Message%2A>， <xref:System.Exception.HelpLink%2A>， <xref:System.Exception.HResult%2A>， <xref:System.Exception.Source%2A>，<xref:System.Exception.TargetSite%2A>，和<xref:System.Exception.Data%2A>。</span><span class="sxs-lookup"><span data-stu-id="755cb-169">The <xref:System.Exception> class includes a number of properties that help identify the code location, the type, the help file, and the reason for the exception: <xref:System.Exception.StackTrace%2A>, <xref:System.Exception.InnerException%2A>, <xref:System.Exception.Message%2A>, <xref:System.Exception.HelpLink%2A>, <xref:System.Exception.HResult%2A>, <xref:System.Exception.Source%2A>, <xref:System.Exception.TargetSite%2A>, and <xref:System.Exception.Data%2A>.</span></span>  
  
 <span data-ttu-id="755cb-170">當之間兩個或多個例外狀況有因果關係<xref:System.Exception.InnerException%2A>屬性維護這個資訊。</span><span class="sxs-lookup"><span data-stu-id="755cb-170">When a causal relationship exists between two or more exceptions, the <xref:System.Exception.InnerException%2A> property maintains this information.</span></span> <span data-ttu-id="755cb-171">擲回外部例外狀況以回應內部例外狀況。</span><span class="sxs-lookup"><span data-stu-id="755cb-171">The outer exception is thrown in response to this inner exception.</span></span> <span data-ttu-id="755cb-172">處理外部例外狀況的程式碼可以使用從先前的內部例外的資訊以更適當地處理錯誤。</span><span class="sxs-lookup"><span data-stu-id="755cb-172">The code that handles the outer exception can use the information from the earlier inner exception to handle the error more appropriately.</span></span> <span data-ttu-id="755cb-173">例外狀況的補充資訊可以儲存為索引鍵/值組的集合<xref:System.Exception.Data%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="755cb-173">Supplementary information about the exception can be stored as a collection of key/value pairs in the <xref:System.Exception.Data%2A> property.</span></span>  
  
 <span data-ttu-id="755cb-174">傳遞至建構函式的例外狀況物件的建立期間的錯誤訊息字串應該當地語系化，而且可以藉由提供從資源檔<xref:System.Resources.ResourceManager>類別。</span><span class="sxs-lookup"><span data-stu-id="755cb-174">The error message string that is passed to the constructor during the creation of the exception object should be localized and can be supplied from a resource file by using the <xref:System.Resources.ResourceManager> class.</span></span> <span data-ttu-id="755cb-175">如需當地語系化資源的詳細資訊，請參閱[建立附屬組件](~/docs/framework/resources/creating-satellite-assemblies-for-desktop-apps.md)和[封裝和部署資源](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md)主題。</span><span class="sxs-lookup"><span data-stu-id="755cb-175">For more information about localized resources, see the [Creating Satellite Assemblies](~/docs/framework/resources/creating-satellite-assemblies-for-desktop-apps.md) and [Packaging and Deploying Resources](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md) topics.</span></span>  
  
 <span data-ttu-id="755cb-176">為使用者提供更詳盡資訊例外狀況發生的原因，<xref:System.Exception.HelpLink%2A>屬性可以保留 URL （或 URN） 說明檔。</span><span class="sxs-lookup"><span data-stu-id="755cb-176">To provide the user with extensive information about why the exception occurred, the <xref:System.Exception.HelpLink%2A> property can hold a URL (or URN) to a help file.</span></span>  
  
 <span data-ttu-id="755cb-177"><xref:System.Exception>類別會使用 HRESULT COR_E_EXCEPTION，其具有值 0x80131500。</span><span class="sxs-lookup"><span data-stu-id="755cb-177">The <xref:System.Exception> class uses the HRESULT COR_E_EXCEPTION, which has the value 0x80131500.</span></span>  
  
 <span data-ttu-id="755cb-178">如需執行個體的初始屬性值的清單<xref:System.Exception>類別，請參閱<xref:System.Exception.%23ctor%2A>建構函式。</span><span class="sxs-lookup"><span data-stu-id="755cb-178">For a list of initial property values for an instance of the <xref:System.Exception> class, see the <xref:System.Exception.%23ctor%2A> constructors.</span></span>  
  
<a name="Performance"></a>   
## <a name="performance-considerations"></a><span data-ttu-id="755cb-179">效能考量</span><span class="sxs-lookup"><span data-stu-id="755cb-179">Performance considerations</span></span>  
 <span data-ttu-id="755cb-180">擲回或處理例外狀況會耗用大量系統資源和執行時間。</span><span class="sxs-lookup"><span data-stu-id="755cb-180">Throwing or handling an exception consumes a significant amount of system resources and execution time.</span></span> <span data-ttu-id="755cb-181">擲回的例外處理真正的異常狀況，不能處理可預測的事件或流量控制。</span><span class="sxs-lookup"><span data-stu-id="755cb-181">Throw exceptions only to handle truly extraordinary conditions, not to handle predictable events or flow control.</span></span> <span data-ttu-id="755cb-182">例如，在某些情況下，例如當您正在開發的類別庫，它是合理地擲回例外狀況，如果方法引數無效，因為您預期您用有效的參數來呼叫的方法。</span><span class="sxs-lookup"><span data-stu-id="755cb-182">For example, in some cases, such as when you're developing a class library, it's reasonable to throw an exception if a method argument is invalid, because you expect your method to be called with valid parameters.</span></span> <span data-ttu-id="755cb-183">無效的方法引數，如果它不是使用錯誤的結果表示必定已發生。</span><span class="sxs-lookup"><span data-stu-id="755cb-183">An invalid method argument, if it is not the result of a usage error, means that something extraordinary has occurred.</span></span> <span data-ttu-id="755cb-184">相反地，不要擲回例外狀況如果使用者輸入無效，因為您可以預期使用者偶爾輸入無效的資料。</span><span class="sxs-lookup"><span data-stu-id="755cb-184">Conversely, do not throw an exception if user input is invalid, because you can expect users to occasionally enter invalid data.</span></span> <span data-ttu-id="755cb-185">相反地，提供重試機制，讓使用者可以輸入有效的輸入。</span><span class="sxs-lookup"><span data-stu-id="755cb-185">Instead, provide a retry mechanism so users can enter valid input.</span></span> <span data-ttu-id="755cb-186">也不應該使用例外狀況處理使用方式錯誤。</span><span class="sxs-lookup"><span data-stu-id="755cb-186">Nor should you use exceptions to handle usage errors.</span></span> <span data-ttu-id="755cb-187">請改用[判斷提示](/visualstudio/debugger/assertions-in-managed-code)找出並修正使用方式錯誤。</span><span class="sxs-lookup"><span data-stu-id="755cb-187">Instead, use [assertions](/visualstudio/debugger/assertions-in-managed-code) to identify and correct usage errors.</span></span>  
  
 <span data-ttu-id="755cb-188">此外，不擲回例外狀況時，傳回碼已經足夠;不會傳回程式碼轉換成例外狀況。和不定期進行 catch 例外狀況、 略過，並繼續處理。</span><span class="sxs-lookup"><span data-stu-id="755cb-188">In addition, do not throw an exception when a return code is sufficient; do not convert a return code to an exception; and do not routinely catch an exception, ignore it, and then continue processing.</span></span>  
  
<a name="Rethrow"></a>   
## <a name="re-throwing-an-exception"></a><span data-ttu-id="755cb-189">重新擲回例外狀況</span><span class="sxs-lookup"><span data-stu-id="755cb-189">Re-throwing an exception</span></span>  
 <span data-ttu-id="755cb-190">在許多情況下，例外狀況處理常式只是想要傳遞至呼叫端的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="755cb-190">In many cases, an exception handler simply wants to pass the exception on to the caller.</span></span> <span data-ttu-id="755cb-191">這大多發生在：</span><span class="sxs-lookup"><span data-stu-id="755cb-191">This most often occurs in:</span></span>  
  
-   <span data-ttu-id="755cb-192">類別庫，接著會包裝在.NET Framework 類別庫或其他類別庫中的方法的呼叫。</span><span class="sxs-lookup"><span data-stu-id="755cb-192">A class library that in turn wraps calls to methods in the .NET Framework class library or other class libraries.</span></span>  
  
-   <span data-ttu-id="755cb-193">應用程式或遇到嚴重的例外狀況的程式庫。</span><span class="sxs-lookup"><span data-stu-id="755cb-193">An application or library that encounters a fatal exception.</span></span> <span data-ttu-id="755cb-194">例外狀況處理常式可以記錄的例外狀況，並再重新擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="755cb-194">The exception handler can log the exception and then re-throw the exception.</span></span>  
  
 <span data-ttu-id="755cb-195">重新擲回例外狀況的建議的方式是只使用[擲回](~/docs/csharp/language-reference/keywords/throw.md)C# 中的陳述式和[擲回](~/docs/visual-basic/language-reference/statements/throw-statement.md)在 Visual Basic 中的陳述式，但不包含運算式。</span><span class="sxs-lookup"><span data-stu-id="755cb-195">The recommended way to re-throw an exception is to simply use the [throw](~/docs/csharp/language-reference/keywords/throw.md) statement in C# and the [Throw](~/docs/visual-basic/language-reference/statements/throw-statement.md) statement in Visual Basic without including an expression.</span></span> <span data-ttu-id="755cb-196">這可確保例外狀況傳播到呼叫端時，會保留所有的呼叫堆疊資訊。</span><span class="sxs-lookup"><span data-stu-id="755cb-196">This ensures that all call stack information is preserved when the exception is propagated to the caller.</span></span> <span data-ttu-id="755cb-197">下列範例將說明這點。</span><span class="sxs-lookup"><span data-stu-id="755cb-197">The following example illustrates this.</span></span> <span data-ttu-id="755cb-198">字串的擴充方法， `FindOccurrences`，包裝一個或多個呼叫<xref:System.String.IndexOf%28System.String%2CSystem.Int32%29?displayProperty=nameWithType>而不事先驗證它的引數。</span><span class="sxs-lookup"><span data-stu-id="755cb-198">A string extension method, `FindOccurrences`, wraps one or more calls to <xref:System.String.IndexOf%28System.String%2CSystem.Int32%29?displayProperty=nameWithType> without validating its arguments beforehand.</span></span>  
  
 [!code-csharp[System.Exception.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/rethrow1.cs#6)]
 [!code-vb[System.Exception.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/rethrow1.vb#6)]  
  
 <span data-ttu-id="755cb-199">呼叫者接著會呼叫`FindOccurrences`兩次。</span><span class="sxs-lookup"><span data-stu-id="755cb-199">A caller then calls `FindOccurrences` twice.</span></span> <span data-ttu-id="755cb-200">在第二個呼叫`FindOccurrences`，呼叫端傳遞`null`作為搜尋字串，哪些案例<xref:System.String.IndexOf%28System.String%2CSystem.Int32%29?displayProperty=nameWithType>方法會擲回<xref:System.ArgumentNullException>例外狀況。</span><span class="sxs-lookup"><span data-stu-id="755cb-200">In the second call to `FindOccurrences`, the caller passes a `null` as the search string, which cases the <xref:System.String.IndexOf%28System.String%2CSystem.Int32%29?displayProperty=nameWithType> method to throw an <xref:System.ArgumentNullException> exception.</span></span> <span data-ttu-id="755cb-201">這個例外狀況由`FindOccurrences`方法並傳遞的回呼叫端。</span><span class="sxs-lookup"><span data-stu-id="755cb-201">This exception is handled by the `FindOccurrences` method and passed back to the caller.</span></span> <span data-ttu-id="755cb-202">因為 throw 陳述式會使用沒有運算式，範例的輸出會顯示呼叫堆疊會保留。</span><span class="sxs-lookup"><span data-stu-id="755cb-202">Because the throw statement is used with no expression, the output from the example shows that the call stack is preserved.</span></span>  
  
 [!code-csharp[System.Exception.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/rethrow1.cs#7)]
 [!code-vb[System.Exception.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/rethrow1.vb#7)]  
  
 <span data-ttu-id="755cb-203">相反地，如果使用重新擲回例外狀況</span><span class="sxs-lookup"><span data-stu-id="755cb-203">In contrast, if the exception is re-thrown by using the</span></span>  
  
```csharp  
throw e  
```  
  
```vb  
Throw e  
```  
  
 <span data-ttu-id="755cb-204">陳述式中，完整的呼叫堆疊不保留，而且此範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="755cb-204">statement, the full call stack is not preserved, and the example would generate the following output:</span></span>  
  
```Output  
  
'a' occurs at the following character positions: 4, 7, 15  
  
An exception (ArgumentNullException) occurred.  
Message:  
   Value cannot be null.  
Parameter name: value  
  
Stack Trace:  
      at Library.FindOccurrences(String s, String f)  
   at Example.Main()  
  
```  
  
 <span data-ttu-id="755cb-205">稍微較繁瑣的替代方式是擲回新的例外狀況，並保留內部例外狀況的原始例外狀況呼叫堆疊資訊。</span><span class="sxs-lookup"><span data-stu-id="755cb-205">A slightly more cumbersome alternative is to throw a new exception, and to preserve the original exception's call stack information in an inner exception.</span></span> <span data-ttu-id="755cb-206">呼叫端可以再使用新的例外狀況<xref:System.Exception.InnerException%2A>屬性，以擷取堆疊框架，原始的例外狀況的其他資訊。</span><span class="sxs-lookup"><span data-stu-id="755cb-206">The caller can then use the new exception's <xref:System.Exception.InnerException%2A> property to retrieve stack frame and other information about the original exception.</span></span> <span data-ttu-id="755cb-207">在此情況下，是 throw 陳述式：</span><span class="sxs-lookup"><span data-stu-id="755cb-207">In this case, the throw statement is:</span></span>  
  
 [!code-csharp[System.Exception.Class#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/rethrow3.cs#8)]
 [!code-vb[System.Exception.Class#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/rethrow3.vb#8)]  
  
 <span data-ttu-id="755cb-208">處理例外狀況的使用者程式碼必須知道<xref:System.Exception.InnerException%2A>屬性包含原始的例外狀況的相關資訊，如下列的例外狀況處理常式所示。</span><span class="sxs-lookup"><span data-stu-id="755cb-208">The user code that handles the exception has to know that the <xref:System.Exception.InnerException%2A> property contains information about the original exception, as the following exception handler illustrates.</span></span>  
  
 [!code-csharp[System.Exception.Class#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/rethrow3.cs#9)]
 [!code-vb[System.Exception.Class#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/rethrow3.vb#9)]  
  
<a name="Standard"></a>   
## <a name="choosing-standard-exceptions"></a><span data-ttu-id="755cb-209">選擇標準例外狀況</span><span class="sxs-lookup"><span data-stu-id="755cb-209">Choosing standard exceptions</span></span>  
 <span data-ttu-id="755cb-210">當您有會擲回例外狀況時，您可以在.NET Framework，而不是實作自訂的例外狀況，通常使用現有的例外狀況類型。</span><span class="sxs-lookup"><span data-stu-id="755cb-210">When you have to throw an exception, you can often use an existing exception type in the .NET Framework instead of implementing a custom exception.</span></span> <span data-ttu-id="755cb-211">您應該使用這兩項條件底下的標準例外狀況類型：</span><span class="sxs-lookup"><span data-stu-id="755cb-211">You should use a standard exception type under these two conditions:</span></span>  
  
-   <span data-ttu-id="755cb-212">您會擲回例外狀況的使用方式錯誤所造成 (也就是您的方法呼叫者的開發人員所做的程式邏輯中的錯誤)。</span><span class="sxs-lookup"><span data-stu-id="755cb-212">You are throwing an exception that is caused by a usage error (that is, by an error in program logic made by the developer who is calling your method).</span></span> <span data-ttu-id="755cb-213">一般而言，您會擲回例外狀況例如<xref:System.ArgumentException>， <xref:System.ArgumentNullException>， <xref:System.InvalidOperationException>，或<xref:System.NotSupportedException>。</span><span class="sxs-lookup"><span data-stu-id="755cb-213">Typically, you would throw an exception such as <xref:System.ArgumentException>, <xref:System.ArgumentNullException>, <xref:System.InvalidOperationException>, or <xref:System.NotSupportedException>.</span></span> <span data-ttu-id="755cb-214">具現化的例外狀況物件應該會描述錯誤，讓開發人員可以修正此問題時，所提供的例外狀況物件的建構函式的字串。</span><span class="sxs-lookup"><span data-stu-id="755cb-214">The string you supply to the exception object's constructor when instantiating the exception object should describe the error so that the developer can fix it.</span></span> <span data-ttu-id="755cb-215">如需詳細資訊，請參閱 <xref:System.Exception.Message%2A> 屬性 (Property)。</span><span class="sxs-lookup"><span data-stu-id="755cb-215">For more information, see the <xref:System.Exception.Message%2A> property.</span></span>  
  
-   <span data-ttu-id="755cb-216">您要處理的錯誤，可以傳達給呼叫者，現有的.NET Framework 例外狀況。</span><span class="sxs-lookup"><span data-stu-id="755cb-216">You are handling an error that can be communicated to the caller with an existing .NET Framework exception.</span></span> <span data-ttu-id="755cb-217">您應該將最常衍生的例外狀況可能擲回。</span><span class="sxs-lookup"><span data-stu-id="755cb-217">You should throw the most derived exception possible.</span></span> <span data-ttu-id="755cb-218">例如，如果方法需要的是有效的列舉類型成員的引數，則應該擲出<xref:System.ComponentModel.InvalidEnumArgumentException>（最多衍生類別），而非<xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="755cb-218">For example, if a method requires an argument to be a valid member of an enumeration type, you should throw an <xref:System.ComponentModel.InvalidEnumArgumentException> (the most derived class) rather than an <xref:System.ArgumentException>.</span></span>  
  
 <span data-ttu-id="755cb-219">下表列出常見的例外狀況類型以及在其下會擲回它們的條件。</span><span class="sxs-lookup"><span data-stu-id="755cb-219">The following table lists common exception types and the conditions under which you would throw them.</span></span>  
  
|<span data-ttu-id="755cb-220">例外</span><span class="sxs-lookup"><span data-stu-id="755cb-220">Exception</span></span>|<span data-ttu-id="755cb-221">條件</span><span class="sxs-lookup"><span data-stu-id="755cb-221">Condition</span></span>|  
|---------------|---------------|  
|<xref:System.ArgumentException>|<span data-ttu-id="755cb-222">傳遞至方法的非 null 引數無效。</span><span class="sxs-lookup"><span data-stu-id="755cb-222">A non-null argument that is passed to a method is invalid.</span></span>|  
|<xref:System.ArgumentNullException>|<span data-ttu-id="755cb-223">傳遞至方法的引數是`null`。</span><span class="sxs-lookup"><span data-stu-id="755cb-223">An argument that is passed to a method is `null`.</span></span>|  
|<xref:System.ArgumentOutOfRangeException>|<span data-ttu-id="755cb-224">引數超出有效值的範圍。</span><span class="sxs-lookup"><span data-stu-id="755cb-224">An argument is outside the range of valid values.</span></span>|  
|<xref:System.IO.DirectoryNotFoundException>|<span data-ttu-id="755cb-225">部分目錄路徑不是有效的。</span><span class="sxs-lookup"><span data-stu-id="755cb-225">Part of a directory path is not valid.</span></span>|  
|<xref:System.DivideByZeroException>|<span data-ttu-id="755cb-226">以整數分母或<xref:System.Decimal>除法運算為零。</span><span class="sxs-lookup"><span data-stu-id="755cb-226">The denominator in an integer or <xref:System.Decimal> division operation is zero.</span></span>|  
|<xref:System.IO.DriveNotFoundException>|<span data-ttu-id="755cb-227">磁碟機無法使用或不存在。</span><span class="sxs-lookup"><span data-stu-id="755cb-227">A drive is unavailable or does not exist.</span></span>|  
|<xref:System.IO.FileNotFoundException>|<span data-ttu-id="755cb-228">檔案不存在。</span><span class="sxs-lookup"><span data-stu-id="755cb-228">A file does not exist.</span></span>|  
|<xref:System.FormatException>|<span data-ttu-id="755cb-229">值不是適當的格式，以從字串轉換方法例如`Parse`。</span><span class="sxs-lookup"><span data-stu-id="755cb-229">A value is not in an appropriate format to be converted from a string by a conversion method such as `Parse`.</span></span>|  
|<xref:System.IndexOutOfRangeException>|<span data-ttu-id="755cb-230">索引是陣列或集合的範圍外。</span><span class="sxs-lookup"><span data-stu-id="755cb-230">An index is outside the bounds of an array or collection.</span></span>|  
|<xref:System.InvalidOperationException>|<span data-ttu-id="755cb-231">方法呼叫無效物件的目前狀態。</span><span class="sxs-lookup"><span data-stu-id="755cb-231">A method call is invalid in an object's current state.</span></span>|  
|<xref:System.Collections.Generic.KeyNotFoundException>|<span data-ttu-id="755cb-232">找不到指定之索引鍵來存取集合中的成員。</span><span class="sxs-lookup"><span data-stu-id="755cb-232">The specified key for accessing a member in a collection cannot be found.</span></span>|  
|<xref:System.NotImplementedException>|<span data-ttu-id="755cb-233">未實作方法或作業。</span><span class="sxs-lookup"><span data-stu-id="755cb-233">A method or operation is not implemented.</span></span>|  
|<xref:System.NotSupportedException>|<span data-ttu-id="755cb-234">不支援方法或作業。</span><span class="sxs-lookup"><span data-stu-id="755cb-234">A method or operation is not supported.</span></span>|  
|<xref:System.ObjectDisposedException>|<span data-ttu-id="755cb-235">已處置的物件上執行作業。</span><span class="sxs-lookup"><span data-stu-id="755cb-235">An operation is performed on an object that has been disposed.</span></span>|  
|<xref:System.OverflowException>|<span data-ttu-id="755cb-236">算術、 轉型或轉換作業造成溢位。</span><span class="sxs-lookup"><span data-stu-id="755cb-236">An arithmetic, casting, or conversion operation results in an overflow.</span></span>|  
|<xref:System.IO.PathTooLongException>|<span data-ttu-id="755cb-237">路徑或檔案名稱超過系統定義的最大長度。</span><span class="sxs-lookup"><span data-stu-id="755cb-237">A path or file name exceeds the maximum system-defined length.</span></span>|  
|<xref:System.PlatformNotSupportedException>|<span data-ttu-id="755cb-238">目前的平台不支援此作業。</span><span class="sxs-lookup"><span data-stu-id="755cb-238">The operation is not supported on the current platform.</span></span>|  
|<xref:System.RankException>|<span data-ttu-id="755cb-239">具有錯誤維度數目的陣列傳遞至方法時。</span><span class="sxs-lookup"><span data-stu-id="755cb-239">An array with the wrong number of dimensions is passed to a method.</span></span>|  
|<xref:System.TimeoutException>|<span data-ttu-id="755cb-240">分配給作業的時間間隔已過期。</span><span class="sxs-lookup"><span data-stu-id="755cb-240">The time interval allotted to an operation has expired.</span></span>|  
|<xref:System.UriFormatException>|<span data-ttu-id="755cb-241">是無效的統一資源識別元 (URI)。</span><span class="sxs-lookup"><span data-stu-id="755cb-241">An invalid Uniform Resource Identifier (URI) is used.</span></span>|  
  
<a name="Custom"></a>   
## <a name="implementing-custom-exceptions"></a><span data-ttu-id="755cb-242">實作自訂例外狀況</span><span class="sxs-lookup"><span data-stu-id="755cb-242">Implementing custom exceptions</span></span>  
 <span data-ttu-id="755cb-243">在下列情況中，使用現有的.NET Framework 例外狀況處理錯誤狀況不足：</span><span class="sxs-lookup"><span data-stu-id="755cb-243">In the following cases, using an existing .NET Framework exception to handle an error condition is not adequate:</span></span>  
  
-   <span data-ttu-id="755cb-244">當例外狀況會反映無法對應至現有的.NET Framework 例外狀況的唯一程式錯誤。</span><span class="sxs-lookup"><span data-stu-id="755cb-244">When the exception reflects a unique program error that cannot be mapped to an existing .NET Framework exception.</span></span>  
  
-   <span data-ttu-id="755cb-245">需要處理的是不同於適用於現有的.NET Framework 例外狀況或例外狀況處理的例外狀況必須明確地區分類似的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="755cb-245">When the exception requires handling that is different from the handling that is appropriate for an existing .NET Framework exception, or the exception must be disambiguated from a similar exception.</span></span> <span data-ttu-id="755cb-246">例如，如果您擲回<xref:System.ArgumentOutOfRangeException>例外狀況時剖析字串，超出目標整數類資料類型範圍的數字表示，您不想要用於錯誤所產生的呼叫端不提供相同的例外狀況呼叫方法時適當限制的值。</span><span class="sxs-lookup"><span data-stu-id="755cb-246">For example, if you throw an <xref:System.ArgumentOutOfRangeException> exception when parsing the numeric representation of a string that is out of range of the target integral type, you would not want to use the same exception for an error that results from the caller not supplying the appropriate constrained values when calling the method.</span></span>  
  
 <span data-ttu-id="755cb-247"><xref:System.Exception>類別是.NET Framework 中的所有例外狀況的基底類別。</span><span class="sxs-lookup"><span data-stu-id="755cb-247">The <xref:System.Exception> class is the base class of all exceptions in the .NET Framework.</span></span> <span data-ttu-id="755cb-248">許多衍生的類別需要之成員的繼承行為<xref:System.Exception>類別; 它們不覆寫的成員<xref:System.Exception>，也不要定義任何唯一的成員。</span><span class="sxs-lookup"><span data-stu-id="755cb-248">Many derived classes rely on the inherited behavior of the members of the <xref:System.Exception> class; they do not override the members of <xref:System.Exception>, nor do they define any unique members.</span></span>  
  
 <span data-ttu-id="755cb-249">若要定義您自己的例外狀況類別：</span><span class="sxs-lookup"><span data-stu-id="755cb-249">To define your own exception class:</span></span>  
  
1.  <span data-ttu-id="755cb-250">定義類別繼承自<xref:System.Exception>。</span><span class="sxs-lookup"><span data-stu-id="755cb-250">Define a class that inherits from <xref:System.Exception>.</span></span> <span data-ttu-id="755cb-251">如有必要，定義您的類別提供有關例外狀況的其他資訊所需的任何唯一成員。</span><span class="sxs-lookup"><span data-stu-id="755cb-251">If necessary, define any unique members needed by your class to provide additional information about the exception.</span></span> <span data-ttu-id="755cb-252">例如，<xref:System.ArgumentException>類別包含<xref:System.ArgumentException.ParamName%2A>屬性，指定其引數造成的例外狀況，參數的名稱和<xref:System.Text.RegularExpressions.RegexMatchTimeoutException>屬性包含<xref:System.Text.RegularExpressions.RegexMatchTimeoutException.MatchTimeout%2A>屬性，指出逾時間隔。</span><span class="sxs-lookup"><span data-stu-id="755cb-252">For example, the <xref:System.ArgumentException> class includes a <xref:System.ArgumentException.ParamName%2A> property that specifies the name of the parameter whose argument caused the exception, and the <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> property includes a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException.MatchTimeout%2A> property that indicates the time-out interval.</span></span>  
  
2.  <span data-ttu-id="755cb-253">如果有必要，請覆寫任何繼承的成員您想要變更或修改其功能。</span><span class="sxs-lookup"><span data-stu-id="755cb-253">If necessary, override any inherited members whose functionality you want to change or modify.</span></span> <span data-ttu-id="755cb-254">請注意，大部分現有衍生的類別<xref:System.Exception>不會覆寫繼承的成員的行為。</span><span class="sxs-lookup"><span data-stu-id="755cb-254">Note that most existing derived classes of <xref:System.Exception> do not override the behavior of inherited members.</span></span>  
  
3.  <span data-ttu-id="755cb-255">判斷是否可序列化的自訂例外狀況物件。</span><span class="sxs-lookup"><span data-stu-id="755cb-255">Determine whether your custom exception object is serializable.</span></span> <span data-ttu-id="755cb-256">序列化可讓您儲存例外狀況的相關資訊，並允許例外狀況資訊傳回由一部伺服器和用戶端 proxy 的遠端執行功能的內容中的共用。</span><span class="sxs-lookup"><span data-stu-id="755cb-256">Serialization enables you to save information about the exception and permits exception information to be shared by a server and a client proxy in a remoting context.</span></span> <span data-ttu-id="755cb-257">若要進行序列化的例外狀況物件，將它與標示<xref:System.SerializableAttribute>屬性。</span><span class="sxs-lookup"><span data-stu-id="755cb-257">To make the exception object serializable, mark it with the <xref:System.SerializableAttribute> attribute.</span></span>  
  
4.  <span data-ttu-id="755cb-258">定義例外狀況類別的建構函式。</span><span class="sxs-lookup"><span data-stu-id="755cb-258">Define the constructors of your exception class.</span></span> <span data-ttu-id="755cb-259">通常，例外狀況類別具有一或多個下列建構函式：</span><span class="sxs-lookup"><span data-stu-id="755cb-259">Typically, exception classes have one or more of the following constructors:</span></span>  
  
    -   <span data-ttu-id="755cb-260"><xref:System.Exception.%23ctor>其中會使用預設值來初始化新的例外狀況物件的屬性。</span><span class="sxs-lookup"><span data-stu-id="755cb-260"><xref:System.Exception.%23ctor>, which uses default values to initialize the properties of a new exception object.</span></span>  
  
    -   <span data-ttu-id="755cb-261"><xref:System.Exception.%23ctor%28System.String%29>其中，初始化新的例外狀況物件，使用指定的錯誤訊息。</span><span class="sxs-lookup"><span data-stu-id="755cb-261"><xref:System.Exception.%23ctor%28System.String%29>, which initializes a new exception object with a specified error message.</span></span>  
  
    -   <span data-ttu-id="755cb-262"><xref:System.Exception.%23ctor%28System.String%2CSystem.Exception%29>其中，初始化新的例外狀況物件，使用指定的錯誤訊息和內部例外狀況。</span><span class="sxs-lookup"><span data-stu-id="755cb-262"><xref:System.Exception.%23ctor%28System.String%2CSystem.Exception%29>, which initializes a new exception object with a specified error message and inner exception.</span></span>  
  
    -   <span data-ttu-id="755cb-263"><xref:System.Exception.%23ctor%28System.Runtime.Serialization.SerializationInfo%2CSystem.Runtime.Serialization.StreamingContext%29>這是`protected`建構函式，以初始化新的例外狀況物件，從序列化資料。</span><span class="sxs-lookup"><span data-stu-id="755cb-263"><xref:System.Exception.%23ctor%28System.Runtime.Serialization.SerializationInfo%2CSystem.Runtime.Serialization.StreamingContext%29>, which is a `protected` constructor that initializes a new exception object from serialized data.</span></span> <span data-ttu-id="755cb-264">如果您選擇讓例外狀況物件能夠進行序列化，則應該實作這個建構函式。</span><span class="sxs-lookup"><span data-stu-id="755cb-264">You should implement this constructor if you've chosen to make your exception object serializable.</span></span>  
  
 <span data-ttu-id="755cb-265">下列範例說明如何使用自訂例外狀況類別。</span><span class="sxs-lookup"><span data-stu-id="755cb-265">The following example illustrates the use of a custom exception class.</span></span> <span data-ttu-id="755cb-266">它會定義`NotPrimeException`用戶端嘗試擷取一連串的質數藉由指定不是主要的起始數字時，會擲回的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="755cb-266">It defines a `NotPrimeException` exception that is thrown when a client tries to retrieve a sequence of prime numbers by specifying a starting number that is not prime.</span></span> <span data-ttu-id="755cb-267">例外狀況定義新的屬性， `NonPrime`，傳回非-質數造成例外狀況。</span><span class="sxs-lookup"><span data-stu-id="755cb-267">The exception defines a new property, `NonPrime`, that returns the non-prime number that caused the exception.</span></span> <span data-ttu-id="755cb-268">除了實作函式和受保護的無參數建構函式的建構函式<xref:System.Runtime.Serialization.SerializationInfo>和<xref:System.Runtime.Serialization.StreamingContext>參數進行序列化，`NotPrimeException`類別會定義其他三個建構函式支援`NonPrime`屬性。</span><span class="sxs-lookup"><span data-stu-id="755cb-268">Besides implementing a protected parameterless constructor and a constructor with <xref:System.Runtime.Serialization.SerializationInfo> and <xref:System.Runtime.Serialization.StreamingContext> parameters for serialization, the `NotPrimeException` class defines three additional constructors to support the `NonPrime` property.</span></span>  <span data-ttu-id="755cb-269">每個建構函式呼叫的基底類別建構函式，除了保留值的非質數數字。</span><span class="sxs-lookup"><span data-stu-id="755cb-269">Each constructor calls a base class constructor in addition to preserving the value of the non-prime number.</span></span> <span data-ttu-id="755cb-270">`NotPrimeException`類別也會標示為<xref:System.SerializableAttribute>屬性。</span><span class="sxs-lookup"><span data-stu-id="755cb-270">The `NotPrimeException` class is also marked with the <xref:System.SerializableAttribute> attribute.</span></span>  
  
 [!code-csharp[System.Exception.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/notprimeexception.cs#1)]
 [!code-vb[System.Exception.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/notprimeexception.vb#1)]  
  
 <span data-ttu-id="755cb-271">`PrimeNumberGenerator`下列範例所示的類別使用 Sieve Eratosthenes 計算質數 2 限制，用戶端在其類別建構函式呼叫中指定的順序。</span><span class="sxs-lookup"><span data-stu-id="755cb-271">The `PrimeNumberGenerator` class shown in the following example uses the Sieve of Eratosthenes to calculate the sequence of prime numbers from 2 to a limit specified by the client in the call to its class constructor.</span></span> <span data-ttu-id="755cb-272">`GetPrimesFrom`方法會傳回所有大於或等於指定的較低限制的質數，但會擲回`NotPrimeException`如果該下限不是質數。</span><span class="sxs-lookup"><span data-stu-id="755cb-272">The `GetPrimesFrom` method returns all prime numbers that are greater than or equal to a specified lower limit, but throws a `NotPrimeException` if that lower limit is not a prime number.</span></span>  
  
 [!code-csharp[System.Exception.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/primenumbergenerator.cs#2)]
 [!code-vb[System.Exception.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/primenumbergenerator.vb#2)]  
  
 <span data-ttu-id="755cb-273">下列範例使兩個呼叫`GetPrimesFrom`方法與非質數，其中跨越應用程式定義域界限。</span><span class="sxs-lookup"><span data-stu-id="755cb-273">The following example makes two calls to the `GetPrimesFrom` method with non-prime numbers, one of which crosses application domain boundaries.</span></span> <span data-ttu-id="755cb-274">在這兩種情況下，會擲回例外狀況，並將其用戶端程式碼中成功處理中。</span><span class="sxs-lookup"><span data-stu-id="755cb-274">In both cases, the exception is thrown and successfully handled in client code.</span></span>  
  
 [!code-csharp[System.Exception.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/example.cs#3)]
 [!code-vb[System.Exception.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/example.vb#3)]  
  
## <a name="windows-runtime-and-includenetv451includesnet-v451-mdmd"></a><span data-ttu-id="755cb-275">Windows 執行階段和 [!INCLUDE[net_v451](~/includes/net-v451-md.md)]</span><span class="sxs-lookup"><span data-stu-id="755cb-275">Windows Runtime and [!INCLUDE[net_v451](~/includes/net-v451-md.md)]</span></span>  
 <span data-ttu-id="755cb-276">在[!INCLUDE[net_win8_profile](~/includes/net-win8-profile-md.md)]如[!INCLUDE[win8](~/includes/win8-md.md)]，例外狀況傳播透過非.NET Framework 的堆疊框架時，未通常遺失某些例外狀況資訊。</span><span class="sxs-lookup"><span data-stu-id="755cb-276">In [!INCLUDE[net_win8_profile](~/includes/net-win8-profile-md.md)] for [!INCLUDE[win8](~/includes/win8-md.md)], some exception information is typically lost when an exception is propagated through non-.NET Framework stack frames.</span></span> <span data-ttu-id="755cb-277">從開始[!INCLUDE[net_v451](~/includes/net-v451-md.md)]和[!INCLUDE[win81](~/includes/win81-md.md)]，通用語言執行平台會繼續使用原始<xref:System.Exception>除非非.NET Framework 的堆疊框架中修改該例外狀況擲回的物件。</span><span class="sxs-lookup"><span data-stu-id="755cb-277">Starting with the [!INCLUDE[net_v451](~/includes/net-v451-md.md)] and [!INCLUDE[win81](~/includes/win81-md.md)], the common language runtime continues to use the original <xref:System.Exception> object that was thrown unless that exception was modified in a non-.NET Framework stack frame.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="755cb-278">下列範例會示範`catch`區塊定義為處理<xref:System.ArithmeticException>錯誤。</span><span class="sxs-lookup"><span data-stu-id="755cb-278">The following example demonstrates a `catch` block that is defined to handle <xref:System.ArithmeticException> errors.</span></span> <span data-ttu-id="755cb-279">這`catch`也區塊攔截<xref:System.DivideByZeroException>錯誤，因為<xref:System.DivideByZeroException>衍生自<xref:System.ArithmeticException>，而且沒有任何`catch`明確定義的區塊<xref:System.DivideByZeroException>錯誤。</span><span class="sxs-lookup"><span data-stu-id="755cb-279">This `catch` block also catches <xref:System.DivideByZeroException> errors, because <xref:System.DivideByZeroException> derives from <xref:System.ArithmeticException> and there is no `catch` block explicitly defined for <xref:System.DivideByZeroException> errors.</span></span>  
  
 [!code-cpp[CatchException#1](~/samples/snippets/cpp/VS_Snippets_CLR/CatchException/CPP/catchexception.cpp#1)]
 [!code-csharp[CatchException#1](~/samples/snippets/csharp/VS_Snippets_CLR/CatchException/CS/catchexception.cs#1)]
 [!code-vb[CatchException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CatchException/VB/catchexception.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="755cb-280">初始化 <see cref="T:System.Exception" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="755cb-280">Initializes a new instance of the <see cref="T:System.Exception" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Exception ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Exception.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Exception();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="755cb-281">初始化 <see cref="T:System.Exception" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="755cb-281">Initializes a new instance of the <see cref="T:System.Exception" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="755cb-282">這個建構函式會將新執行個體的 <xref:System.Exception.Message%2A> 屬性初始化為系統提供的訊息，該訊息會描述錯誤並考量目前系統的文化特性。</span><span class="sxs-lookup"><span data-stu-id="755cb-282">This constructor initializes the <xref:System.Exception.Message%2A> property of the new instance to a system-supplied message that describes the error and takes into account the current system culture.</span></span>  
  
 <span data-ttu-id="755cb-283">所有衍生的類別必須提供這個預設建構函式。</span><span class="sxs-lookup"><span data-stu-id="755cb-283">All the derived classes should provide this default constructor.</span></span> <span data-ttu-id="755cb-284">下表顯示 <xref:System.Exception> 執行個體的初始屬性值。</span><span class="sxs-lookup"><span data-stu-id="755cb-284">The following table shows the initial property values for an instance of <xref:System.Exception>.</span></span>  
  
|<span data-ttu-id="755cb-285">屬性</span><span class="sxs-lookup"><span data-stu-id="755cb-285">Property</span></span>|<span data-ttu-id="755cb-286">值</span><span class="sxs-lookup"><span data-stu-id="755cb-286">Value</span></span>|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|<span data-ttu-id="755cb-287">null 參考 (在 Visual Basic 中為 `Nothing`)。</span><span class="sxs-lookup"><span data-stu-id="755cb-287">A null reference (`Nothing` in Visual Basic).</span></span>|  
|<xref:System.Exception.Message%2A>|<span data-ttu-id="755cb-288">系統提供的當地語系化描述。</span><span class="sxs-lookup"><span data-stu-id="755cb-288">A system-supplied localized description.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="755cb-289">下列程式碼範例衍生`Exception`使用預先定義的訊息。</span><span class="sxs-lookup"><span data-stu-id="755cb-289">The following code example derives an `Exception` that uses a predefined message.</span></span> <span data-ttu-id="755cb-290">這個程式碼示範使用無參數建構函式在衍生的類別和基底`Exception`類別。</span><span class="sxs-lookup"><span data-stu-id="755cb-290">The code demonstrates the use of the parameterless constructor for the derived class and the base `Exception` class.</span></span>  
  
 [!code-cpp[System.Exception.Ctor#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Exception.Ctor/CPP/new.cpp#1)]
 [!code-csharp[System.Exception.Ctor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Exception.Ctor/CS/new.cs#1)]
 [!code-vb[System.Exception.Ctor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Exception.Ctor/VB/new.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Exception (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Exception.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Exception(System::String ^ message);" />
      <MemberSignature Language="F#" Value="new Exception : string -&gt; Exception" Usage="new System.Exception message" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">
          <span data-ttu-id="755cb-291">描述錯誤的訊息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="755cb-291">The message that describes the error.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="755cb-292">使用指定的錯誤訊息，初始化 <see cref="T:System.Exception" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="755cb-292">Initializes a new instance of the <see cref="T:System.Exception" /> class with a specified error message.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="755cb-293">這個建構函式初始化<xref:System.Exception.Message%2A>屬性使用的新執行個體`message`參數。</span><span class="sxs-lookup"><span data-stu-id="755cb-293">This constructor initializes the <xref:System.Exception.Message%2A> property of the new instance by using the `message` parameter.</span></span> <span data-ttu-id="755cb-294">如果`message`參數是`null`，這等同於呼叫<xref:System.Exception.%23ctor%2A>建構函式。</span><span class="sxs-lookup"><span data-stu-id="755cb-294">If the `message` parameter is `null`, this is the same as calling the <xref:System.Exception.%23ctor%2A> constructor.</span></span>  
  
 <span data-ttu-id="755cb-295">下表顯示 <xref:System.Exception> 執行個體的初始屬性值。</span><span class="sxs-lookup"><span data-stu-id="755cb-295">The following table shows the initial property values for an instance of <xref:System.Exception>.</span></span>  
  
|<span data-ttu-id="755cb-296">屬性</span><span class="sxs-lookup"><span data-stu-id="755cb-296">Property</span></span>|<span data-ttu-id="755cb-297">值</span><span class="sxs-lookup"><span data-stu-id="755cb-297">Value</span></span>|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|<span data-ttu-id="755cb-298">null 參考 (在 Visual Basic 中為 `Nothing`)。</span><span class="sxs-lookup"><span data-stu-id="755cb-298">A null reference (`Nothing` in Visual Basic).</span></span>|  
|<xref:System.Exception.Message%2A>|<span data-ttu-id="755cb-299">錯誤訊息字串。</span><span class="sxs-lookup"><span data-stu-id="755cb-299">The error message string.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="755cb-300">下列程式碼範例衍生`Exception`是否符合特定條件。</span><span class="sxs-lookup"><span data-stu-id="755cb-300">The following code example derives an `Exception` for a specific condition.</span></span> <span data-ttu-id="755cb-301">程式碼會示範如何使用建構函式之呼叫者指定的訊息做為參數，衍生的類別和基底`Exception`類別。</span><span class="sxs-lookup"><span data-stu-id="755cb-301">The code demonstrates the use of the constructor that takes a caller-specified message as a parameter, for both the derived class and the base `Exception` class.</span></span>  
  
 [!code-cpp[System.Exception.Ctor#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Exception.Ctor/CPP/news.cpp#2)]
 [!code-csharp[System.Exception.Ctor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Exception.Ctor/CS/news.cs#2)]
 [!code-vb[System.Exception.Ctor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Exception.Ctor/VB/news.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Exception (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Exception.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Exception(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="new Exception : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; Exception" Usage="new System.Exception (info, context)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">
          <span data-ttu-id="755cb-302">
            <see cref="T:System.Runtime.Serialization.SerializationInfo" />，包含所擲回之例外狀況的相關序列化物件資料。</span>
          <span class="sxs-lookup">
            <span data-stu-id="755cb-302">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="755cb-303">包含有關來源或目的端內容資訊的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="755cb-303">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="755cb-304">使用序列化資料，初始化 <see cref="T:System.Exception" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="755cb-304">Initializes a new instance of the <see cref="T:System.Exception" /> class with serialized data.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="755cb-305">進行還原序列化 (Deserialization) 期間會呼叫這個建構函式，以便重新構成經由資料流傳送的例外狀況物件。</span><span class="sxs-lookup"><span data-stu-id="755cb-305">This constructor is called during deserialization to reconstitute the exception object transmitted over a stream.</span></span> <span data-ttu-id="755cb-306">如需詳細資訊，請參閱[XML 和 SOAP 序列化](~/docs/standard/serialization/xml-and-soap-serialization.md)。</span><span class="sxs-lookup"><span data-stu-id="755cb-306">For more information, see [XML and SOAP Serialization](~/docs/standard/serialization/xml-and-soap-serialization.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="755cb-307">下列程式碼範例會定義衍生可序列化`Exception`類別。</span><span class="sxs-lookup"><span data-stu-id="755cb-307">The following code example defines a derived serializable `Exception` class.</span></span> <span data-ttu-id="755cb-308">此程式碼會強制除以-0 錯誤，並接著會建立衍生的例外狀況使用的執行個體 (<xref:System.Runtime.Serialization.SerializationInfo>， <xref:System.Runtime.Serialization.StreamingContext>) 建構函式。</span><span class="sxs-lookup"><span data-stu-id="755cb-308">The code forces a divide-by-0 error and then creates an instance of the derived exception using the (<xref:System.Runtime.Serialization.SerializationInfo>, <xref:System.Runtime.Serialization.StreamingContext>) constructor.</span></span> <span data-ttu-id="755cb-309">程式碼會序列化至檔案的執行個體，將檔案還原序列化為新的例外狀況，就會擲回，然後會攔截並顯示例外狀況的資料。</span><span class="sxs-lookup"><span data-stu-id="755cb-309">The code serializes the instance to a file, deserializes the file into a new exception, which it throws, and then catches and displays the exception's data.</span></span>  
  
 [!code-cpp[System.Exception.GetObjectData#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Exception.GetObjectData/CPP/getobjdata.cpp#1)]
 [!code-csharp[System.Exception.GetObjectData#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Exception.GetObjectData/CS/getobjdata.cs#1)]
 [!code-vb[System.Exception.GetObjectData#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Exception.GetObjectData/VB/getobjdata.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="755cb-310">
            <paramref name="info" /> 參數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="755cb-310">The <paramref name="info" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Runtime.Serialization.SerializationException">
          <span data-ttu-id="755cb-311">類別名稱為 <see langword="null" /> 或 <see cref="P:System.Exception.HResult" /> 為零 (0)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="755cb-311">The class name is <see langword="null" /> or <see cref="P:System.Exception.HResult" /> is zero (0).</span>
          </span>
        </exception>
        <altmember cref="T:System.Runtime.Serialization.SerializationInfo" />
        <altmember cref="T:System.Runtime.Serialization.StreamingContext" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Exception (string message, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Exception.#ctor(System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String, innerException As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Exception(System::String ^ message, Exception ^ innerException);" />
      <MemberSignature Language="F#" Value="new Exception : string * Exception -&gt; Exception" Usage="new System.Exception (message, innerException)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="message">
          <span data-ttu-id="755cb-312">解釋例外狀況原因的錯誤訊息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="755cb-312">The error message that explains the reason for the exception.</span>
          </span>
        </param>
        <param name="innerException">
          <span data-ttu-id="755cb-313">造成目前例外狀況的例外狀況，若未指定內部例外狀況，則為 null 參考 (Visual Basic 中為 <see langword="Nothing" />)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="755cb-313">The exception that is the cause of the current exception, or a null reference (<see langword="Nothing" /> in Visual Basic) if no inner exception is specified.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="755cb-314">使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.Exception" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="755cb-314">Initializes a new instance of the <see cref="T:System.Exception" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="755cb-315">被擲回以做為前一個例外狀況直接結果的例外狀況，應該在 <xref:System.Exception.InnerException%2A> 屬性中包含對前一個例外狀況的參考。</span><span class="sxs-lookup"><span data-stu-id="755cb-315">An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <xref:System.Exception.InnerException%2A> property.</span></span> <span data-ttu-id="755cb-316"><xref:System.Exception.InnerException%2A> 屬性會傳回與傳入建構函式中相同的值；如果 `Nothing` 屬性不提供內部例外值給建構函式，則傳回 null 參考 (在 Visual Basic 中為 <xref:System.Exception.InnerException%2A>)。</span><span class="sxs-lookup"><span data-stu-id="755cb-316">The <xref:System.Exception.InnerException%2A> property returns the same value that is passed into the constructor, or a null reference (`Nothing` in Visual Basic) if the <xref:System.Exception.InnerException%2A> property does not supply the inner exception value to the constructor.</span></span>  
  
 <span data-ttu-id="755cb-317">下表顯示 <xref:System.Exception> 執行個體的初始屬性值。</span><span class="sxs-lookup"><span data-stu-id="755cb-317">The following table shows the initial property values for an instance of <xref:System.Exception>.</span></span>  
  
|<span data-ttu-id="755cb-318">屬性</span><span class="sxs-lookup"><span data-stu-id="755cb-318">Property</span></span>|<span data-ttu-id="755cb-319">值</span><span class="sxs-lookup"><span data-stu-id="755cb-319">Value</span></span>|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|<span data-ttu-id="755cb-320">內部例外狀況參考。</span><span class="sxs-lookup"><span data-stu-id="755cb-320">The inner exception reference.</span></span>|  
|<xref:System.Exception.Message%2A>|<span data-ttu-id="755cb-321">錯誤訊息字串。</span><span class="sxs-lookup"><span data-stu-id="755cb-321">The error message string.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="755cb-322">下列程式碼範例衍生`Exception`是否符合特定條件。</span><span class="sxs-lookup"><span data-stu-id="755cb-322">The following code example derives an `Exception` for a specific condition.</span></span> <span data-ttu-id="755cb-323">程式碼會示範如何使用建構函式之訊息和內部例外狀況做為參數，衍生的類別和基底`Exception`類別。</span><span class="sxs-lookup"><span data-stu-id="755cb-323">The code demonstrates the use of the constructor that takes a message and an inner exception as parameters, for both the derived class and the base `Exception` class.</span></span>  
  
 [!code-cpp[System.Exception.Ctor#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Exception.Ctor/CPP/newsi.cpp#3)]
 [!code-csharp[System.Exception.Ctor#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Exception.Ctor/CS/newsi.cs#3)]
 [!code-vb[System.Exception.Ctor#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Exception.Ctor/VB/newsi.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Data">
      <MemberSignature Language="C#" Value="public virtual System.Collections.IDictionary Data { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IDictionary Data" />
      <MemberSignature Language="DocId" Value="P:System.Exception.Data" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Data As IDictionary" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Collections::IDictionary ^ Data { System::Collections::IDictionary ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Data : System.Collections.IDictionary" Usage="System.Exception.Data" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="755cb-324">取得提供例外狀況之其他使用者定義相關資訊的索引鍵/值組集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="755cb-324">Gets a collection of key/value pairs that provide additional user-defined information about the exception.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="755cb-325">實作 <see cref="T:System.Collections.IDictionary" /> 介面的物件，含有由使用者定義之索引鍵/值組所組成的集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="755cb-325">An object that implements the <see cref="T:System.Collections.IDictionary" /> interface and contains a collection of user-defined key/value pairs.</span>
          </span>
          <span data-ttu-id="755cb-326">預設為空集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="755cb-326">The default is an empty collection.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="755cb-327">使用<xref:System.Collections.IDictionary?displayProperty=nameWithType>所傳回物件<xref:System.Exception.Data%2A>來儲存和擷取相關的例外狀況的補充資訊的屬性。</span><span class="sxs-lookup"><span data-stu-id="755cb-327">Use the <xref:System.Collections.IDictionary?displayProperty=nameWithType> object returned by the <xref:System.Exception.Data%2A> property to store and retrieve supplementary information relevant to the exception.</span></span> <span data-ttu-id="755cb-328">資訊是任意數目的使用者定義的索引鍵/值組的形式。</span><span class="sxs-lookup"><span data-stu-id="755cb-328">The information is in the form of an arbitrary number of user-defined key/value pairs.</span></span> <span data-ttu-id="755cb-329">每個索引鍵/值組的索引鍵元件通常是物件的識別的字串，而組的值元件可以是物件的任何類型。</span><span class="sxs-lookup"><span data-stu-id="755cb-329">The key component of each key/value pair is typically an identifying string, whereas the value component of the pair can be any type of object.</span></span>  
  
## <a name="keyvalue-pair-security"></a><span data-ttu-id="755cb-330">索引鍵/值組的安全性</span><span class="sxs-lookup"><span data-stu-id="755cb-330">Key/Value Pair Security</span></span>  
 <span data-ttu-id="755cb-331">儲存在所傳回的集合中的索引鍵/值組<xref:System.Exception.Data%2A>屬性並未受到保護。</span><span class="sxs-lookup"><span data-stu-id="755cb-331">The key/value pairs stored in the collection returned by the <xref:System.Exception.Data%2A> property are not secure.</span></span> <span data-ttu-id="755cb-332">如果您的應用程式呼叫一連串巢狀的常式，而且每個常式包含例外狀況處理常式，則產生的呼叫堆疊會包含這些例外狀況處理常式的階層。</span><span class="sxs-lookup"><span data-stu-id="755cb-332">If your application calls a nested series of routines, and each routine contains exception handlers, the resulting call stack contains a hierarchy of those exception handlers.</span></span> <span data-ttu-id="755cb-333">如果較低層級常式擲回例外狀況，呼叫堆疊階層中的任何上層例外狀況處理常式可以讀取及/或修改其他任何例外狀況處理常式儲存在集合中的索引鍵/值組。</span><span class="sxs-lookup"><span data-stu-id="755cb-333">If a lower-level routine throws an exception, any upper-level exception handler in the call stack hierarchy can read and/or modify the key/value pairs stored in the collection by any other exception handler.</span></span> <span data-ttu-id="755cb-334">這表示您必須保證索引鍵/值組中的資訊不是機密，如果索引鍵/值組中的資訊已損毀您的應用程式將會正確運作。</span><span class="sxs-lookup"><span data-stu-id="755cb-334">This means you must guarantee that the information in the key/value pairs is not confidential and that your application will operate correctly if the information in the key/value pairs is corrupted.</span></span>  
  
## <a name="key-conflicts"></a><span data-ttu-id="755cb-335">索引鍵衝突</span><span class="sxs-lookup"><span data-stu-id="755cb-335">Key Conflicts</span></span>  
 <span data-ttu-id="755cb-336">索引鍵衝突發生於不同的例外狀況處理常式指定相同的金鑰存取的索引鍵/值組。</span><span class="sxs-lookup"><span data-stu-id="755cb-336">A key conflict occurs when different exception handlers specify the same key to access a key/value pair.</span></span> <span data-ttu-id="755cb-337">開發應用程式，因為索引鍵衝突的結果較低層級例外狀況處理常式可以與較高層級的例外狀況處理常式不小心進行通訊，且此通訊可能會導致難以察覺的程式錯誤時，請務必小心。</span><span class="sxs-lookup"><span data-stu-id="755cb-337">Use caution when developing your application because the consequence of a key conflict is that lower-level exception handlers can inadvertently communicate with higher-level exception handlers, and this communication might cause subtle program errors.</span></span> <span data-ttu-id="755cb-338">不過，如果您注意您可以使用索引鍵衝突可增強應用程式。</span><span class="sxs-lookup"><span data-stu-id="755cb-338">However, if you are cautious you can use key conflicts to enhance your application.</span></span>  
  
## <a name="avoiding-key-conflicts"></a><span data-ttu-id="755cb-339">避免索引鍵衝突</span><span class="sxs-lookup"><span data-stu-id="755cb-339">Avoiding Key Conflicts</span></span>  
 <span data-ttu-id="755cb-340">採用產生索引鍵/值組的唯一索引鍵的命名慣例，以避免索引鍵衝突。</span><span class="sxs-lookup"><span data-stu-id="755cb-340">Avoid key conflicts by adopting a naming convention to generate unique keys for key/value pairs.</span></span> <span data-ttu-id="755cb-341">例如，命名慣例可能會產生句號分隔應用程式的名稱所組成的索引鍵，則此方法可提供補充有關的配對和唯一識別碼。</span><span class="sxs-lookup"><span data-stu-id="755cb-341">For example, a naming convention might yield a key that consists of the period-delimited name of your application, the method that provides supplementary information for the pair, and a unique identifier.</span></span>  
  
 <span data-ttu-id="755cb-342">假設兩個應用程式，名為產品與供應商，每個有名稱為 Sales 的方法。</span><span class="sxs-lookup"><span data-stu-id="755cb-342">Suppose two applications, named Products and Suppliers, each has a method named Sales.</span></span> <span data-ttu-id="755cb-343">產品應用程式中的 Sales 方法提供產品識別碼 （存貨保持單元或 SKU）。</span><span class="sxs-lookup"><span data-stu-id="755cb-343">The Sales method in the Products application provides the identification number (the stock keeping unit or SKU) of a product.</span></span> <span data-ttu-id="755cb-344">供應商應用程式中的 Sales 方法提供的識別碼或 SID，供應商。</span><span class="sxs-lookup"><span data-stu-id="755cb-344">The Sales method in the Suppliers application provides the identification number, or SID, of a supplier.</span></span> <span data-ttu-id="755cb-345">因此，此範例中的命名慣例，會產生 「 Products.Sales.SKU"和"Suppliers.Sales.SID"索引鍵。</span><span class="sxs-lookup"><span data-stu-id="755cb-345">Consequently, the naming convention for this example yields the keys, "Products.Sales.SKU" and "Suppliers.Sales.SID".</span></span>  
  
## <a name="exploiting-key-conflicts"></a><span data-ttu-id="755cb-346">利用金鑰衝突</span><span class="sxs-lookup"><span data-stu-id="755cb-346">Exploiting Key Conflicts</span></span>  
 <span data-ttu-id="755cb-347">若要控制處理使用的一或多個特殊，按照預先安排的索引鍵存在利用索引鍵衝突。</span><span class="sxs-lookup"><span data-stu-id="755cb-347">Exploit key conflicts by using the presence of one or more special, prearranged keys to control processing.</span></span> <span data-ttu-id="755cb-348">假設在一個案例中，呼叫堆疊階層中最高的層級的例外狀況處理常式會攔截所有較低層級例外狀況處理常式擲回的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="755cb-348">Suppose, in one scenario, the highest level exception handler in the call stack hierarchy catches all exceptions thrown by lower-level exception handlers.</span></span> <span data-ttu-id="755cb-349">高階的例外狀況處理常式的索引鍵/值組與特殊索引鍵存在，如果格式中剩餘的索引鍵/值組<xref:System.Collections.IDictionary>物件使用非標準的方式; 否則一般的方式格式化其餘的索引鍵/值組。</span><span class="sxs-lookup"><span data-stu-id="755cb-349">If a key/value pair with a special key exists, the high-level exception handler formats the remaining key/value pairs in the <xref:System.Collections.IDictionary> object in some nonstandard way; otherwise, the remaining key/value pairs are formatted in some normal manner.</span></span>  
  
 <span data-ttu-id="755cb-350">現在，假設，在另一個案例中，每個階層的層級呼叫堆疊的例外狀況處理常式攔截例外狀況擲回的下一個較低層級例外狀況處理常式。</span><span class="sxs-lookup"><span data-stu-id="755cb-350">Now suppose, in another scenario, the exception handler at each level of the call stack hierarchy catches the exception thrown by the next lower-level exception handler.</span></span> <span data-ttu-id="755cb-351">此外，每個例外狀況處理常式會知道所傳回的集合<xref:System.Exception.Data%2A>屬性包含一組可存取的索引鍵/值組的按照預先安排的索引鍵集。</span><span class="sxs-lookup"><span data-stu-id="755cb-351">In addition, each exception handler knows the collection returned by the <xref:System.Exception.Data%2A> property contains a set of key/value pairs that can be accessed with a prearranged set of keys.</span></span>  
  
 <span data-ttu-id="755cb-352">每個例外狀況處理常式會按照預先安排索引鍵集中，使用該例外狀況處理常式特有的資訊更新對應的索引鍵/值組的值元件。</span><span class="sxs-lookup"><span data-stu-id="755cb-352">Each exception handler uses the prearranged set of keys to update the value component of the corresponding key/value pair with information unique to that exception handler.</span></span> <span data-ttu-id="755cb-353">完成更新程序之後，例外狀況處理常式會擲回的例外狀況下, 一個較高層級的例外狀況處理常式。</span><span class="sxs-lookup"><span data-stu-id="755cb-353">After the update process is complete, the exception handler throws the exception to the next higher-level exception handler.</span></span> <span data-ttu-id="755cb-354">最後，最高的層級的例外狀況處理常式存取的索引鍵/值組，並會顯示合併的更新資訊的較低層級例外狀況處理常式。</span><span class="sxs-lookup"><span data-stu-id="755cb-354">Finally, the highest level exception handler accesses the key/value pairs and displays the consolidated update information from all the lower-level exception handlers.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="755cb-355">下列範例示範如何加入和擷取資訊使用<xref:System.Exception.Data%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="755cb-355">The following example demonstrates how to add and retrieve information using the <xref:System.Exception.Data%2A> property.</span></span>  
  
 [!code-cpp[exception.data#1](~/samples/snippets/cpp/VS_Snippets_CLR/exception.data/CPP/data.cpp#1)]
 [!code-csharp[exception.data#1](~/samples/snippets/csharp/VS_Snippets_CLR/exception.data/CS/data.cs#1)]
 [!code-vb[exception.data#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/exception.data/VB/data.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.DictionaryEntry" />
      </Docs>
    </Member>
    <Member MemberName="GetBaseException">
      <MemberSignature Language="C#" Value="public virtual Exception GetBaseException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Exception GetBaseException() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Exception.GetBaseException" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetBaseException () As Exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Exception ^ GetBaseException();" />
      <MemberSignature Language="F#" Value="abstract member GetBaseException : unit -&gt; Exception&#xA;override this.GetBaseException : unit -&gt; Exception" Usage="exception.GetBaseException " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Exception.GetBaseException</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="755cb-356">在衍生類別中覆寫時，傳回一或多個後續的例外狀況的根本原因 <see cref="T:System.Exception" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="755cb-356">When overridden in a derived class, returns the <see cref="T:System.Exception" /> that is the root cause of one or more subsequent exceptions.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="755cb-357">例外狀況鏈中擲回的第一個例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="755cb-357">The first exception thrown in a chain of exceptions.</span>
          </span>
          <span data-ttu-id="755cb-358">如果目前的例外狀況的 <see cref="P:System.Exception.InnerException" /> 屬性為 null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)，則這個屬性會傳回目前的例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="755cb-358">If the <see cref="P:System.Exception.InnerException" /> property of the current exception is a null reference (<see langword="Nothing" /> in Visual Basic), this property returns the current exception.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="755cb-359">例外狀況鏈結組所組成的例外狀況鏈結中的每個例外狀況擲回做為參考中的例外狀況直接結果，其`InnerException`屬性。</span><span class="sxs-lookup"><span data-stu-id="755cb-359">A chain of exceptions consists of a set of exceptions such that each exception in the chain was thrown as a direct result of the exception referenced in its `InnerException` property.</span></span> <span data-ttu-id="755cb-360">指定的鏈結，可以有一個例外狀況鏈結中的所有例外狀況的根本原因。</span><span class="sxs-lookup"><span data-stu-id="755cb-360">For a given chain, there can be exactly one exception that is the root cause of all other exceptions in the chain.</span></span> <span data-ttu-id="755cb-361">這個例外狀況會呼叫基底例外狀況及其`InnerException`屬性永遠會包含 null 參考。</span><span class="sxs-lookup"><span data-stu-id="755cb-361">This exception is called the base exception and its `InnerException` property always contains a null reference.</span></span>  
  
 <span data-ttu-id="755cb-362">所有例外狀況鏈結中的例外狀況，`GetBaseException`方法必須傳回相同的物件 （基底例外狀況）。</span><span class="sxs-lookup"><span data-stu-id="755cb-362">For all exceptions in a chain of exceptions, the `GetBaseException` method must return the same object (the base exception).</span></span>  
  
 <span data-ttu-id="755cb-363">使用`GetBaseException`方法，當您想要尋找例外狀況的根本原因，但不是需要目前的例外狀況與第一個例外狀況之間所發生的例外狀況的相關資訊。</span><span class="sxs-lookup"><span data-stu-id="755cb-363">Use the `GetBaseException` method when you want to find the root cause of an exception but do not need information about exceptions that may have occurred between the current exception and the first exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="755cb-364">下列程式碼範例會定義兩個衍生`Exception`類別。</span><span class="sxs-lookup"><span data-stu-id="755cb-364">The following code example defines two derived `Exception` classes.</span></span> <span data-ttu-id="755cb-365">它會強制例外狀況，然後擲回它再次與每個衍生的類別。</span><span class="sxs-lookup"><span data-stu-id="755cb-365">It forces an exception and then throws it again with each of the derived classes.</span></span> <span data-ttu-id="755cb-366">程式碼將示範如何使用`GetBaseException`方法來擷取原始的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="755cb-366">The code shows the use of the `GetBaseException` method to retrieve the original exception.</span></span>  
  
 [!code-cpp[System.Exception.GetBaseException#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Exception.GetBaseException/CPP/getbaseexc.cpp#1)]
 [!code-csharp[System.Exception.GetBaseException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Exception.GetBaseException/CS/getbaseexc.cs#1)]
 [!code-vb[System.Exception.GetBaseException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Exception.GetBaseException/VB/getbaseexc.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="755cb-367">
            <para>
              <see langword="GetBaseException" />需要控制的例外狀況內容或格式的類別中覆寫方法。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="755cb-367">
              <para>The <see langword="GetBaseException" /> method is overridden in classes that require control over the exception content or format.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GetObjectData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="abstract member GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit&#xA;override this.GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="exception.GetObjectData (info, context)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
        <InterfaceMember>M:System.Runtime.InteropServices._Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">
          <span data-ttu-id="755cb-368">
            <see cref="T:System.Runtime.Serialization.SerializationInfo" />，包含所擲回之例外狀況的相關序列化物件資料。</span>
          <span class="sxs-lookup">
            <span data-stu-id="755cb-368">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="755cb-369">包含有關來源或目的端內容資訊的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="755cb-369">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="755cb-370">在衍生類別中覆寫時，使用例外狀況的資訊設定 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="755cb-370">When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="755cb-371">`GetObjectData` 會使用所有指定要序列化的例外狀況物件資料來設定 <xref:System.Runtime.Serialization.SerializationInfo>。</span><span class="sxs-lookup"><span data-stu-id="755cb-371">`GetObjectData` sets a <xref:System.Runtime.Serialization.SerializationInfo> with all the exception object data targeted for serialization.</span></span> <span data-ttu-id="755cb-372">在還原序列化期間，從在資料流上傳輸的 `SerializationInfo` 重新組成例外狀況。</span><span class="sxs-lookup"><span data-stu-id="755cb-372">During deserialization, the exception is reconstituted from the `SerializationInfo` transmitted over the stream.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="755cb-373">下列程式碼範例會定義衍生可序列化`Exception`類別可實作`GetObjectData`這樣會微幅變更兩個屬性，然後呼叫的基底類別進行序列化。</span><span class="sxs-lookup"><span data-stu-id="755cb-373">The following code example defines a derived serializable `Exception` class that implements `GetObjectData`, which makes minor changes to two properties and then calls the base class to perform the serialization.</span></span> <span data-ttu-id="755cb-374">此範例會強制除以-0 錯誤，然後建立衍生的例外狀況的執行個體。</span><span class="sxs-lookup"><span data-stu-id="755cb-374">The example forces a divide-by-0 error and then creates an instance of the derived exception.</span></span> <span data-ttu-id="755cb-375">程式碼會序列化至檔案的執行個體，將檔案還原序列化為新的例外狀況，就會擲回，然後會攔截並顯示例外狀況的資料。</span><span class="sxs-lookup"><span data-stu-id="755cb-375">The code serializes the instance to a file, deserializes the file into a new exception, which it throws, and then catches and displays the exception's data.</span></span>  
  
 [!code-cpp[System.Exception.GetObjectData#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Exception.GetObjectData/CPP/getobjdata.cpp#1)]
 [!code-csharp[System.Exception.GetObjectData#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Exception.GetObjectData/CS/getobjdata.cs#1)]
 [!code-vb[System.Exception.GetObjectData#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Exception.GetObjectData/VB/getobjdata.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="755cb-376">
            <paramref name="info" /> 參數是 Null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="755cb-376">The <paramref name="info" /> parameter is a null reference (<see langword="Nothing" /> in Visual Basic).</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="755cb-377">需要完全信任立即呼叫者。</span>
          <span class="sxs-lookup">
            <span data-stu-id="755cb-377">requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="755cb-378">這個成員無法供部分信任或安全性透明程式碼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="755cb-378">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <altmember cref="T:System.Runtime.Serialization.SerializationInfo" />
        <altmember cref="T:System.Runtime.Serialization.StreamingContext" />
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public Type GetType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Exception.GetType" />
      <MemberSignature Language="VB.NET" Value="Public Function GetType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetType();" />
      <MemberSignature Language="F#" Value="override this.GetType : unit -&gt; Type" Usage="exception.GetType " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Exception.GetType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="755cb-379">取得目前執行個體的執行階段類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="755cb-379">Gets the runtime type of the current instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="755cb-380">
            <see cref="T:System.Type" /> 物件，代表目前執行個體的確實執行階段類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="755cb-380">A <see cref="T:System.Type" /> object that represents the exact runtime type of the current instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="755cb-381"><xref:System.Exception.GetType%2A>方法支援.NET Framework 基礎結構存在，且在內部叫用基本的方法， <xref:System.Object.GetType%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="755cb-381">The <xref:System.Exception.GetType%2A> method exists to support the .NET Framework infrastructure, and internally invokes the fundamental method, <xref:System.Object.GetType%2A?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="HelpLink">
      <MemberSignature Language="C#" Value="public virtual string HelpLink { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HelpLink" />
      <MemberSignature Language="DocId" Value="P:System.Exception.HelpLink" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property HelpLink As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ HelpLink { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.HelpLink : string with get, set" Usage="System.Exception.HelpLink" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Exception.HelpLink</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="755cb-382">取得或設定與這個例外狀況相關聯的說明檔連結。</span>
          <span class="sxs-lookup">
            <span data-stu-id="755cb-382">Gets or sets a link to the help file associated with this exception.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="755cb-383">統一資源名稱 (URN) 或統一資源定位器 (URL)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="755cb-383">The Uniform Resource Name (URN) or Uniform Resource Locator (URL).</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="755cb-384">用來表示說明檔的傳回值為 URN 或 URL。</span><span class="sxs-lookup"><span data-stu-id="755cb-384">The return value, which represents a help file, is a URN or URL.</span></span> <span data-ttu-id="755cb-385">例如，`HelpLink`值可以是：</span><span class="sxs-lookup"><span data-stu-id="755cb-385">For example, the `HelpLink` value could be:</span></span>  
  
 <span data-ttu-id="755cb-386">"file:///C:/Applications/Bazzal/help.html#ErrorNum42"</span><span class="sxs-lookup"><span data-stu-id="755cb-386">"file:///C:/Applications/Bazzal/help.html#ErrorNum42"</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="755cb-387">下列程式碼範例會擲回`Exception`設定`HelpLink`屬性，其建構函式，然後攔截例外狀況，並顯示`HelpLink`。</span><span class="sxs-lookup"><span data-stu-id="755cb-387">The following code example throws an `Exception` that sets the `HelpLink` property in its constructor and then catches the exception and displays `HelpLink`.</span></span>  
  
 [!code-cpp[System.Exception.Properties#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Exception.Properties/CPP/properties.cpp#1)]
 [!code-csharp[System.Exception.Properties#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Exception.Properties/CS/properties.cs#1)]
 [!code-vb[System.Exception.Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Exception.Properties/VB/properties.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HResult">
      <MemberSignature Language="C#" Value="public int HResult { get; protected set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 HResult" />
      <MemberSignature Language="DocId" Value="P:System.Exception.HResult" />
      <MemberSignature Language="VB.NET" Value="Public Property HResult As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:  property int HResult {  public:&#xA;int get(); protected:&#xA; void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.HResult : int with get, set" Usage="System.Exception.HResult" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="755cb-388">取得或設定 HRESULT，它是指派給特定例外狀況的編碼數值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="755cb-388">Gets or sets HRESULT, a coded numerical value that is assigned to a specific exception.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="755cb-389">HRESULT 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="755cb-389">The HRESULT value.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="755cb-390">HRESULT 是 32 位元值，分成三個不同的欄位： 嚴重性代碼、 設備碼和錯誤碼。</span><span class="sxs-lookup"><span data-stu-id="755cb-390">HRESULT is a 32-bit value, divided into three different fields: a severity code, a facility code, and an error code.</span></span> <span data-ttu-id="755cb-391">嚴重性代碼指出傳回的值是否代表資訊、 警告或錯誤。</span><span class="sxs-lookup"><span data-stu-id="755cb-391">The severity code indicates whether the return value represents information, warning, or error.</span></span> <span data-ttu-id="755cb-392">設備碼指出系統錯誤負責的區域。</span><span class="sxs-lookup"><span data-stu-id="755cb-392">The facility code identifies the area of the system responsible for the error.</span></span> <span data-ttu-id="755cb-393">錯誤碼是指派給代表例外狀況的唯一數字。</span><span class="sxs-lookup"><span data-stu-id="755cb-393">The error code is a unique number that is assigned to represent the exception.</span></span> <span data-ttu-id="755cb-394">每個例外狀況會對應至不同的 HRESULT。</span><span class="sxs-lookup"><span data-stu-id="755cb-394">Each exception is mapped to a distinct HRESULT.</span></span> <span data-ttu-id="755cb-395">當 managed 程式碼擲回例外狀況時，執行階段會傳遞 HRESULT 給 COM 用戶端。</span><span class="sxs-lookup"><span data-stu-id="755cb-395">When managed code throws an exception, the runtime passes the HRESULT to the COM client.</span></span> <span data-ttu-id="755cb-396">Unmanaged 程式碼會傳回錯誤 HRESULT 會轉換成則由執行階段擲回的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="755cb-396">When unmanaged code returns an error, the HRESULT is converted to an exception, which is then thrown by the runtime.</span></span> <span data-ttu-id="755cb-397">HRESULT 值和其對應的.NET Framework 例外狀況的相關資訊，請參閱[如何： 對應 Hresult 和例外狀況](~/docs/framework/interop/how-to-map-hresults-and-exceptions.md)。</span><span class="sxs-lookup"><span data-stu-id="755cb-397">For information about HRESULT values and their corresponding .NET Framework exceptions, see [How to: Map HRESULTs and Exceptions](~/docs/framework/interop/how-to-map-hresults-and-exceptions.md).</span></span> <span data-ttu-id="755cb-398">請參閱[常見的 HRESULT 值](http://msdn.microsoft.com/library/windows/desktop/aa378137.aspx)中 Windows 文件的清單，您最有可能會遇到的值。</span><span class="sxs-lookup"><span data-stu-id="755cb-398">See [Common HRESULT Values](http://msdn.microsoft.com/library/windows/desktop/aa378137.aspx) in the Windows documentation for a list of the values you are most likely to encounter.</span></span>  
  
 <span data-ttu-id="755cb-399">從開始[!INCLUDE[net_v45](~/includes/net-v45-md.md)]、<xref:System.Exception.HResult%2A>屬性的 setter 受到保護，而其 getter 是公用。</span><span class="sxs-lookup"><span data-stu-id="755cb-399">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], the <xref:System.Exception.HResult%2A> property's setter is protected, whereas its getter is public.</span></span>  <span data-ttu-id="755cb-400">在舊版的.NET Framework 中，會受到保護 getter 和 setter。</span><span class="sxs-lookup"><span data-stu-id="755cb-400">In previous versions of the .NET Framework, both getter and setter are protected.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="755cb-401">下列程式碼範例會定義衍生`Exception`設定的類別`HResult`其建構函式中的自訂值的屬性。</span><span class="sxs-lookup"><span data-stu-id="755cb-401">The following code example defines a derived `Exception` class that sets the `HResult` property to a custom value in its constructor.</span></span>  
  
 [!code-cpp[System.Exception.HResult#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Exception.HResult/CPP/hresult.cpp#1)]
 [!code-csharp[System.Exception.HResult#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Exception.HResult/CS/hresult.cs#1)]
 [!code-vb[System.Exception.HResult#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Exception.HResult/VB/hresult.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InnerException">
      <MemberSignature Language="C#" Value="public Exception InnerException { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Exception InnerException" />
      <MemberSignature Language="DocId" Value="P:System.Exception.InnerException" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InnerException As Exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Exception ^ InnerException { Exception ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InnerException : Exception" Usage="System.Exception.InnerException" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Exception.InnerException</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="755cb-402">取得造成目前例外狀況的 <see cref="T:System.Exception" /> 執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="755cb-402">Gets the <see cref="T:System.Exception" /> instance that caused the current exception.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="755cb-403">物件，描述造成目前例外狀況的錯誤。</span>
          <span class="sxs-lookup">
            <span data-stu-id="755cb-403">An object that describes the error that caused the current exception.</span>
          </span>
          <span data-ttu-id="755cb-404">
            <see cref="P:System.Exception.InnerException" /> 屬性會傳回與傳遞到 <see cref="M:System.Exception.#ctor(System.String,System.Exception)" /> 建構函式中相同的值；如果沒有提供內部例外狀況值給建構函式，則傳回 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="755cb-404">The <see cref="P:System.Exception.InnerException" /> property returns the same value as was passed into the <see cref="M:System.Exception.#ctor(System.String,System.Exception)" /> constructor, or <see langword="null" /> if the inner exception value was not supplied to the constructor.</span>
          </span>
          <span data-ttu-id="755cb-405">這個屬性是唯讀的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="755cb-405">This property is read-only.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="755cb-406">例外狀況時`X`做為前一個例外狀況直接結果擲回`Y`、<xref:System.Exception.InnerException%2A>屬性`X`應該包含參考`Y`。</span><span class="sxs-lookup"><span data-stu-id="755cb-406">When an exception `X` is thrown as a direct result of a previous exception `Y`, the <xref:System.Exception.InnerException%2A> property of `X` should contain a reference to `Y`.</span></span>  
  
 <span data-ttu-id="755cb-407">您可以使用 <xref:System.Exception.InnerException%2A> 屬性來取得造成目前例外狀況的例外狀況集合。</span><span class="sxs-lookup"><span data-stu-id="755cb-407">Use the <xref:System.Exception.InnerException%2A> property to obtain the set of exceptions that led to the current exception.</span></span>  
  
 <span data-ttu-id="755cb-408">您可以建立新的例外狀況，以攔截先前的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="755cb-408">You can create a new exception that catches an earlier exception.</span></span> <span data-ttu-id="755cb-409">處理第二個例外狀況可以使用從先前的例外狀況的其他資訊以更適當地處理錯誤程式碼。</span><span class="sxs-lookup"><span data-stu-id="755cb-409">The code that handles the second exception can make use of the additional information from the earlier exception to handle the error more appropriately.</span></span>  
  
 <span data-ttu-id="755cb-410">假設有讀取檔案，並將該檔案中的資料格式的函式。</span><span class="sxs-lookup"><span data-stu-id="755cb-410">Suppose that there is a function that reads a file and formats the data from that file.</span></span> <span data-ttu-id="755cb-411">在此範例中，為程式碼嘗試讀取檔案，<xref:System.IO.IOException>就會擲回。</span><span class="sxs-lookup"><span data-stu-id="755cb-411">In this example, as the code tries to read the file, an <xref:System.IO.IOException> is thrown.</span></span> <span data-ttu-id="755cb-412">此函式攔截<xref:System.IO.IOException>並擲回<xref:System.IO.FileNotFoundException>。</span><span class="sxs-lookup"><span data-stu-id="755cb-412">The function catches the <xref:System.IO.IOException> and throws a <xref:System.IO.FileNotFoundException>.</span></span> <span data-ttu-id="755cb-413"><xref:System.IO.IOException>無法儲存在<xref:System.Exception.InnerException%2A>屬性<xref:System.IO.FileNotFoundException>，啟用程式碼攔截<xref:System.IO.FileNotFoundException>檢查初始錯誤的原因。</span><span class="sxs-lookup"><span data-stu-id="755cb-413">The <xref:System.IO.IOException> could be saved in the <xref:System.Exception.InnerException%2A> property of the <xref:System.IO.FileNotFoundException>, enabling the code that catches the <xref:System.IO.FileNotFoundException> to examine the cause of the initial error.</span></span>  
  
 <span data-ttu-id="755cb-414"><xref:System.Exception.InnerException%2A>屬性，其中包含內部例外狀況的參考，例外狀況物件的初始設定。</span><span class="sxs-lookup"><span data-stu-id="755cb-414">The <xref:System.Exception.InnerException%2A> property, which holds a reference to the inner exception, is set upon initialization of the exception object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="755cb-415">下列範例示範擲回和攔截例外狀況參考內部的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="755cb-415">The following example demonstrates throwing and catching an exception that references an inner exception.</span></span>  
  
 [!code-cpp[InnerEx#1](~/samples/snippets/cpp/VS_Snippets_CLR/InnerEx/CPP/innerex.cpp#1)]
 [!code-csharp[InnerEx#1](~/samples/snippets/csharp/VS_Snippets_CLR/InnerEx/CS/innerex.cs#1)]
 [!code-vb[InnerEx#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/InnerEx/VB/innerex.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Message">
      <MemberSignature Language="C#" Value="public virtual string Message { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Message" />
      <MemberSignature Language="DocId" Value="P:System.Exception.Message" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Message As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Message { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Message : string" Usage="System.Exception.Message" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Exception.Message</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="755cb-416">取得描述目前例外狀況的訊息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="755cb-416">Gets a message that describes the current exception.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="755cb-417">解釋例外狀況原因的錯誤訊息，或空字串 ("")。</span>
          <span class="sxs-lookup">
            <span data-stu-id="755cb-417">The error message that explains the reason for the exception, or an empty string ("").</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="755cb-418">錯誤訊息為目標的開發人員正在處理例外狀況。</span><span class="sxs-lookup"><span data-stu-id="755cb-418">Error messages target the developer who is handling the exception.</span></span> <span data-ttu-id="755cb-419">文字<xref:System.Exception.Message%2A>屬性應該完整描述錯誤，可能的話，也會說明如何修正錯誤。</span><span class="sxs-lookup"><span data-stu-id="755cb-419">The text of the <xref:System.Exception.Message%2A> property should completely describe the error and, when possible, should also explain how to correct the error.</span></span> <span data-ttu-id="755cb-420">最上層例外狀況處理常式可能會顯示訊息給使用者，因此您應確保文法正確且以句號結尾訊息的每個句子。</span><span class="sxs-lookup"><span data-stu-id="755cb-420">Top-level exception handlers may display the message to end-users, so you should ensure that it is grammatically correct and that each sentence of the message ends with a period.</span></span> <span data-ttu-id="755cb-421">請勿使用問號或驚嘆號。</span><span class="sxs-lookup"><span data-stu-id="755cb-421">Do not use question marks or exclamation points.</span></span> <span data-ttu-id="755cb-422">如果您的應用程式中使用當地語系化的例外狀況訊息，您應該確保它們會正確轉譯。</span><span class="sxs-lookup"><span data-stu-id="755cb-422">If your application uses localized exception messages, you should ensure that they are accurately translated.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="755cb-423">不會揭露例外狀況訊息中的機密資訊而不會檢查適當的權限。</span><span class="sxs-lookup"><span data-stu-id="755cb-423">Do not disclose sensitive information in exception messages without checking for the appropriate permissions.</span></span>  
  
 <span data-ttu-id="755cb-424">值<xref:System.Exception.Message%2A>屬性包含在所傳回的資訊<xref:System.Exception.ToString%2A>。<xref:System.Exception.Message%2A>屬性只有在建立時設定<xref:System.Exception>。</span><span class="sxs-lookup"><span data-stu-id="755cb-424">The value of the <xref:System.Exception.Message%2A> property is included in the information returned by <xref:System.Exception.ToString%2A>.The <xref:System.Exception.Message%2A> property is set only when creating an <xref:System.Exception>.</span></span> <span data-ttu-id="755cb-425">如果目前的執行個體的建構函式提供的任何訊息，則系統會不提供預設的訊息使用目前的系統文化特性進行格式化。</span><span class="sxs-lookup"><span data-stu-id="755cb-425">If no message was supplied to the constructor for the current instance, the system supplies a default message that is formatted using the current system culture.</span></span>  
  
## <a name="windows-runtime-and-includenetv451includesnet-v451-mdmd"></a><span data-ttu-id="755cb-426">Windows 執行階段和 [!INCLUDE[net_v451](~/includes/net-v451-md.md)]</span><span class="sxs-lookup"><span data-stu-id="755cb-426">Windows Runtime and [!INCLUDE[net_v451](~/includes/net-v451-md.md)]</span></span>  
 <span data-ttu-id="755cb-427">從開始[!INCLUDE[net_v451](~/includes/net-v451-md.md)]和[!INCLUDE[win81](~/includes/win81-md.md)]，從 Windows 執行階段型別和成員不是.NET Framework 的一部分，從傳播例外狀況的錯誤訊息精確度已獲得改善。</span><span class="sxs-lookup"><span data-stu-id="755cb-427">Starting with the [!INCLUDE[net_v451](~/includes/net-v451-md.md)] and [!INCLUDE[win81](~/includes/win81-md.md)], the fidelity of error messages from exceptions that are propagated from Windows Runtime types and members that are not part of the .NET Framework is improved.</span></span> <span data-ttu-id="755cb-428">特別是，例外狀況訊息從 Visual c + + 元件擴充功能 (C + + /CX) 現在會傳播回.NET Framework<xref:System.Exception>物件。</span><span class="sxs-lookup"><span data-stu-id="755cb-428">In particular, exception messages from Visual C++ component extensions (C++/CX) are now propagated back into .NET Framework <xref:System.Exception> objects.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="755cb-429">下列程式碼範例會擲回，並接著攔截<xref:System.Exception>例外狀況，並顯示例外狀況的文字訊息使用<xref:System.Exception.Message%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="755cb-429">The following code example throws and then catches an <xref:System.Exception> exception and displays the exception's text message using the <xref:System.Exception.Message%2A> property.</span></span>
  
 [!code-cpp[System.Exception.Properties#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Exception.Properties/CPP/properties.cpp#1)]
 [!code-csharp[System.Exception.Properties#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Exception.Properties/CS/properties.cs#1)]
 [!code-vb[System.Exception.Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Exception.Properties/VB/properties.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="755cb-430">
            <para>如果您擲回例外狀況，從屬性，而且您需要在文字中參考<see cref="P:System.Exception.Message" />您設定或取得的屬性引數，如果要使用 「 值 」 屬性引數的名稱。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="755cb-430">
              <para>If you throw an exception from a property, and you need to refer in the text of <see cref="P:System.Exception.Message" /> to the property argument that you set or get, use "value" as the name of the property argument.</para>
            </span>
          </span>
        </block>
        <block subset="none" type="overrides">
          <span data-ttu-id="755cb-431">
            <para>
              <see cref="P:System.Exception.Message" />需要控制訊息內容或格式的類別中覆寫屬性。需要顯示已攔截到例外狀況的相關資訊時，應用程式程式碼通常存取這個屬性。應該當地語系化的錯誤訊息。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="755cb-431">
              <para>The <see cref="P:System.Exception.Message" /> property is overridden in classes that require control over message content or format. Application code typically accesses this property when it needs to display information about an exception that has been caught.  The error message should be localized.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="SerializeObjectState">
      <MemberSignature Language="C#" Value="protected event EventHandler&lt;System.Runtime.Serialization.SafeSerializationEventArgs&gt; SerializeObjectState;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Runtime.Serialization.SafeSerializationEventArgs&gt; SerializeObjectState" />
      <MemberSignature Language="DocId" Value="E:System.Exception.SerializeObjectState" />
      <MemberSignature Language="VB.NET" Value="Protected Custom Event SerializeObjectState As EventHandler(Of SafeSerializationEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; event EventHandler&lt;System::Runtime::Serialization::SafeSerializationEventArgs ^&gt; ^ SerializeObjectState;" />
      <MemberSignature Language="F#" Value="member this.SerializeObjectState : EventHandler&lt;System.Runtime.Serialization.SafeSerializationEventArgs&gt; " Usage="member this.SerializeObjectState : System.EventHandler&lt;System.Runtime.Serialization.SafeSerializationEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Runtime.Serialization.SafeSerializationEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="755cb-432">當例外狀況序列化，以建立包含例外狀況相關序列化資料的例外狀況狀態物件時，就會發生此事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="755cb-432">Occurs when an exception is serialized to create an exception state object that contains serialized data about the exception.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="755cb-433">例外狀況狀態物件會實作<xref:System.Runtime.Serialization.ISafeSerializationData>介面。</span><span class="sxs-lookup"><span data-stu-id="755cb-433">The exception state object implements the <xref:System.Runtime.Serialization.ISafeSerializationData> interface.</span></span>  
  
 <span data-ttu-id="755cb-434">當<xref:System.Exception.SerializeObjectState>訂閱事件，會還原序列化例外狀況，並將其建立為空的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="755cb-434">When the <xref:System.Exception.SerializeObjectState> event is subscribed to, the exception is deserialized and created as an empty exception.</span></span> <span data-ttu-id="755cb-435">例外狀況的建構函式無法執行，而且也會還原序列化例外狀況狀態。</span><span class="sxs-lookup"><span data-stu-id="755cb-435">The exception's constructor is not run, and the exception state is also deserialized.</span></span> <span data-ttu-id="755cb-436"><xref:System.Runtime.Serialization.ISafeSerializationData.CompleteDeserialization%2A>回呼方法的例外狀況狀態物件然後收到通知，讓它可以將已還原序列化的資料推送至空的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="755cb-436">The <xref:System.Runtime.Serialization.ISafeSerializationData.CompleteDeserialization%2A> callback method of the exception state object is then notified so that it can push deserialized data into the empty exception.</span></span>  
  
 <span data-ttu-id="755cb-437"><xref:System.Exception.SerializeObjectState>事件可讓透明的例外狀況型別序列化和還原序列化例外狀況資料。</span><span class="sxs-lookup"><span data-stu-id="755cb-437">The <xref:System.Exception.SerializeObjectState> event enables transparent exception types to serialize and deserialize exception data.</span></span> <span data-ttu-id="755cb-438">透明程式碼可以運作中，在權限集合界限內執行命令，但無法執行、 呼叫、 衍生自，或包含關鍵程式碼。</span><span class="sxs-lookup"><span data-stu-id="755cb-438">Transparent code can execute commands within the bounds of the permission set it is operating within, but cannot execute, call, derive from, or contain critical code.</span></span>  
  
 <span data-ttu-id="755cb-439">如果<xref:System.Exception.SerializeObjectState>事件未訂閱，還原序列化發生如往常般使用<xref:System.Exception.%23ctor%2A>建構函式。</span><span class="sxs-lookup"><span data-stu-id="755cb-439">If the <xref:System.Exception.SerializeObjectState> event is not subscribed to, deserialization occurs as usual using the <xref:System.Exception.%23ctor%2A> constructor.</span></span>  
  
 <span data-ttu-id="755cb-440">通常，處理常式<xref:System.Exception.SerializeObjectState>其序列化為提供的例外狀況的建構函式中加入事件。</span><span class="sxs-lookup"><span data-stu-id="755cb-440">Typically, a handler for the <xref:System.Exception.SerializeObjectState> event is added in the exception's constructor to provide for its serialization.</span></span> <span data-ttu-id="755cb-441">但因為不是建構函式時執行<xref:System.Exception.SerializeObjectState>事件處理常式執行、 序列化已還原序列化的例外狀況可能會擲回<xref:System.Runtime.Serialization.SerializationException>例外狀況，當您嘗試還原序列化例外狀況。</span><span class="sxs-lookup"><span data-stu-id="755cb-441">But because the constructor is not executed when the <xref:System.Exception.SerializeObjectState> event handler executes, serializing a deserialized exception can throw a <xref:System.Runtime.Serialization.SerializationException> exception when you try to deserialize the exception.</span></span> <span data-ttu-id="755cb-442">若要避免這個問題，您也應該加入的處理常式<xref:System.Exception.SerializeObjectState>中的事件<xref:System.Runtime.Serialization.ISafeSerializationData.CompleteDeserialization%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="755cb-442">To avoid this, you should also add the handler for the <xref:System.Exception.SerializeObjectState> event in the <xref:System.Runtime.Serialization.ISafeSerializationData.CompleteDeserialization%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="755cb-443">請參閱 < 範例 > 一節。</span><span class="sxs-lookup"><span data-stu-id="755cb-443">See the Examples section for an illustration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="755cb-444">下列範例會定義`BadDivisionException`可處理<xref:System.Exception.SerializeObjectState>事件。</span><span class="sxs-lookup"><span data-stu-id="755cb-444">The following example defines a `BadDivisionException` that handles the <xref:System.Exception.SerializeObjectState> event.</span></span> <span data-ttu-id="755cb-445">它也包含狀態的物件，也就是巢狀結構名為`BadDivisionExceptionState`實作<xref:System.Runtime.Serialization.ISafeSerializationData>介面。</span><span class="sxs-lookup"><span data-stu-id="755cb-445">It also contains a state object, which is a nested structure named `BadDivisionExceptionState` that implements the <xref:System.Runtime.Serialization.ISafeSerializationData> interface.</span></span>  
  
 [!code-csharp[System.Exception.SerializeObjectState#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.serializeobjectstate/cs/example2.cs#1)]
 [!code-vb[System.Exception.SerializeObjectState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.serializeobjectstate/vb/example2.vb#1)]  
  
 <span data-ttu-id="755cb-446">`BadDivisionException`浮點除數為零，就會發生時擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="755cb-446">The `BadDivisionException` exception is thrown when a floating-point division by zero occurs.</span></span> <span data-ttu-id="755cb-447">在第一個除數為零，此範例會具現化`BadDivisionException`物件序列化，並擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="755cb-447">During the first division by zero, the example instantiates a `BadDivisionException` object, serializes it, and throws the exception.</span></span> <span data-ttu-id="755cb-448">當發生除以零的後續部門時，例如先前已序列化的物件還原序列化，這和擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="755cb-448">When subsequent divisions by zero occur, the example deserializes the  previously serialized object, reserializes it, and throws the exception.</span></span> <span data-ttu-id="755cb-449">若要提供物件序列化、 還原序列化、 介紹雷同和還原序列化，此範例會將<xref:System.Exception.SerializeObjectState>中的事件處理常式這兩個`BadDivisionException`類別建構函式和<xref:System.Runtime.Serialization.ISafeSerializationData.CompleteDeserialization%2A?displayProperty=nameWithType>實作。</span><span class="sxs-lookup"><span data-stu-id="755cb-449">To provide for object serialization, deserialization, reserialization, and deserialization, the example adds the <xref:System.Exception.SerializeObjectState> event handler both in the `BadDivisionException` class constructor and in the <xref:System.Runtime.Serialization.ISafeSerializationData.CompleteDeserialization%2A?displayProperty=nameWithType> implementation.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="755cb-450">
            <para>如果此事件是訂閱，並使用，請遵循繼承階層架構中的所有衍生型別必須實作相同的序列化機制。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="755cb-450">
              <para>If this event is subscribed to and used, all derived types that follow in the inheritance hierarchy must implement the same serialization mechanism.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Source">
      <MemberSignature Language="C#" Value="public virtual string Source { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Source" />
      <MemberSignature Language="DocId" Value="P:System.Exception.Source" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Source As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Source { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Source : string with get, set" Usage="System.Exception.Source" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Exception.Source</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="755cb-451">取得或設定造成錯誤的應用程式或物件的名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="755cb-451">Gets or sets the name of the application or the object that causes the error.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="755cb-452">造成錯誤的應用程式或物件的名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="755cb-452">The name of the application or the object that causes the error.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="755cb-453">如果<xref:System.Exception.Source%2A>屬性未明確設定、 執行階段會自動將其設為例外狀況的來源組件的名稱。</span><span class="sxs-lookup"><span data-stu-id="755cb-453">If the <xref:System.Exception.Source%2A> property is not set explicitly, the runtime automatically sets it to the name of the assembly in which the exception originated.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="755cb-454">下列範例會擲回`Exception`設定`Source`屬性，其建構函式，然後攔截例外狀況，並顯示`Source`。</span><span class="sxs-lookup"><span data-stu-id="755cb-454">The following example throws an `Exception` that sets the `Source` property in its constructor and then catches the exception and displays `Source`.</span></span>  
  
 [!code-cpp[System.Exception.Properties#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Exception.Properties/CPP/properties.cpp#1)]
 [!code-csharp[System.Exception.Properties#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Exception.Properties/CS/properties.cs#1)]
 [!code-vb[System.Exception.Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Exception.Properties/VB/properties.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="755cb-455">此物件必須是執行階段 <see cref="N:System.Reflection" /> 物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="755cb-455">The object must be a runtime <see cref="N:System.Reflection" /> object</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="StackTrace">
      <MemberSignature Language="C#" Value="public virtual string StackTrace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StackTrace" />
      <MemberSignature Language="DocId" Value="P:System.Exception.StackTrace" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property StackTrace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ StackTrace { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.StackTrace : string" Usage="System.Exception.StackTrace" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Exception.StackTrace</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="755cb-456">取得呼叫堆疊上即時運算框架的字串表示。</span>
          <span class="sxs-lookup">
            <span data-stu-id="755cb-456">Gets a string representation of the immediate frames on the call stack.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="755cb-457">字串，描述呼叫堆疊的立即框架。</span>
          <span class="sxs-lookup">
            <span data-stu-id="755cb-457">A string that describes the immediate frames of the call stack.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="755cb-458">執行堆疊會持續追蹤指定的執行個體的所有執行中方法。</span><span class="sxs-lookup"><span data-stu-id="755cb-458">The execution stack keeps track of all the methods that are in execution at a given instant.</span></span> <span data-ttu-id="755cb-459">方法呼叫的追蹤稱為堆疊追蹤。</span><span class="sxs-lookup"><span data-stu-id="755cb-459">A trace of the method calls is called a stack trace.</span></span> <span data-ttu-id="755cb-460">堆疊追蹤清單可遵循的行號，在方法中發生例外狀況呼叫堆疊。</span><span class="sxs-lookup"><span data-stu-id="755cb-460">The stack trace listing provides a way to follow the call stack to the line number in the method where the exception occurs.</span></span>  
  
 <span data-ttu-id="755cb-461"><xref:System.Exception.StackTrace%2A>屬性傳回的呼叫堆疊框架源自於擲回例外狀況所在的位置。</span><span class="sxs-lookup"><span data-stu-id="755cb-461">The <xref:System.Exception.StackTrace%2A> property returns the frames of the call stack that originate at the location where the exception was thrown.</span></span> <span data-ttu-id="755cb-462">您可以藉由建立的新執行個體取得呼叫堆疊中的其他框架的相關資訊<xref:System.Diagnostics.StackTrace?displayProperty=nameWithType>類別，並使用其<xref:System.Diagnostics.StackTrace.ToString%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="755cb-462">You can obtain information about additional frames in the call stack by creating a new instance of the <xref:System.Diagnostics.StackTrace?displayProperty=nameWithType> class and using its <xref:System.Diagnostics.StackTrace.ToString%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="755cb-463">每當應用程式程式碼中擲回例外狀況時，common language runtime (CLR) 會更新堆疊追蹤 (使用`throw`關鍵字)。</span><span class="sxs-lookup"><span data-stu-id="755cb-463">The common language runtime (CLR) updates the stack trace whenever an exception is thrown in application code (by using the `throw` keyword).</span></span> <span data-ttu-id="755cb-464">如果是不同方法較它原先擲回所在的方法中重新擲回例外狀況，堆疊追蹤包含其中原先擲回例外狀況，方法中的位置和方法中發生例外狀況所在的位置重新擲回。</span><span class="sxs-lookup"><span data-stu-id="755cb-464">If the exception was rethrown in a method that is different than the method where it was originally thrown, the stack trace contains both the location in the method where the exception was originally thrown, and the location in the method where the exception was rethrown.</span></span> <span data-ttu-id="755cb-465">如果例外狀況會擲回，並稍後重新擲回，在相同方法中，堆疊追蹤只會包含重新擲回例外狀況和不包含其中原先擲回例外狀況的位置的位置。</span><span class="sxs-lookup"><span data-stu-id="755cb-465">If the exception is thrown, and later rethrown, in the same method, the stack trace only contains the location where the exception was rethrown and does not include the location where the exception was originally thrown.</span></span>  
  
 <span data-ttu-id="755cb-466"><xref:System.Exception.StackTrace%2A>屬性可能不會報告許多預期方法呼叫轉換之程式碼，因為這類內嵌 （inline)，發生在最佳化期間。</span><span class="sxs-lookup"><span data-stu-id="755cb-466">The <xref:System.Exception.StackTrace%2A> property may not report as many method calls as expected because of code transformations, such as inlining, that occur during optimization.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="755cb-467">下列程式碼範例會擲回`Exception`然後攔截它，並顯示堆疊追蹤使用`StackTrace`屬性。</span><span class="sxs-lookup"><span data-stu-id="755cb-467">The following code example throws an `Exception` and then catches it and displays a stack trace using the `StackTrace` property.</span></span>  
  
 [!code-cpp[System.Exception.Properties#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Exception.Properties/CPP/properties.cpp#1)]
 [!code-csharp[System.Exception.Properties#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Exception.Properties/CS/properties.cs#1)]
 [!code-vb[System.Exception.Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Exception.Properties/VB/properties.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="755cb-468">
            <para>
              <see langword="StackTrace" />需要控制堆疊追蹤內容或格式的類別中覆寫屬性。根據預設，堆疊追蹤會擷取之前擲回例外狀況物件。使用<see cref="P:System.Environment.StackTrace" />時不擲回任何例外狀況取得的堆疊追蹤資訊。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="755cb-468">
              <para>The <see langword="StackTrace" /> property is overridden in classes that require control over the stack trace content or format.  By default, the stack trace is captured immediately before an exception object is thrown. Use <see cref="P:System.Environment.StackTrace" /> to get stack trace information when no exception is being thrown.</para>
            </span>
          </span>
        </block>
        <altmember cref="P:System.Environment.StackTrace" />
      </Docs>
    </Member>
    <Member MemberName="TargetSite">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodBase TargetSite { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MethodBase TargetSite" />
      <MemberSignature Language="DocId" Value="P:System.Exception.TargetSite" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TargetSite As MethodBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::MethodBase ^ TargetSite { System::Reflection::MethodBase ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TargetSite : System.Reflection.MethodBase" Usage="System.Exception.TargetSite" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Exception.TargetSite</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodBase</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="755cb-469">取得擲回目前例外狀況的方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="755cb-469">Gets the method that throws the current exception.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="755cb-470">擲回目前例外狀況的 <see cref="T:System.Reflection.MethodBase" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="755cb-470">The <see cref="T:System.Reflection.MethodBase" /> that threw the current exception.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="755cb-471">如果沒有擲回這個例外狀況的方法和堆疊追蹤不是 null 參考 (`Nothing`在 Visual Basic 中)，<xref:System.Exception.TargetSite%2A>從堆疊追蹤取得方法。</span><span class="sxs-lookup"><span data-stu-id="755cb-471">If the method that throws this exception is not available and the stack trace is not a null reference (`Nothing` in Visual Basic), <xref:System.Exception.TargetSite%2A> obtains the method from the stack trace.</span></span> <span data-ttu-id="755cb-472">如果堆疊追蹤是 null 參考，<xref:System.Exception.TargetSite%2A> 也就會傳回 null 參考。</span><span class="sxs-lookup"><span data-stu-id="755cb-472">If the stack trace is a null reference, <xref:System.Exception.TargetSite%2A> also returns a null reference.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="755cb-473"><xref:System.Exception.TargetSite%2A>屬性可能不正確地回報中擲回例外狀況的例外狀況處理常式處理例外狀況跨應用程式網域界限，如果方法的名稱。</span><span class="sxs-lookup"><span data-stu-id="755cb-473">The <xref:System.Exception.TargetSite%2A> property may not accurately report the name of the method in which an exception was thrown if the exception handler handles an exception across application domain boundaries.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="755cb-474">下列程式碼範例會擲回`Exception`然後攔截它，並顯示原始的方法使用`TargetSite`屬性。</span><span class="sxs-lookup"><span data-stu-id="755cb-474">The following code example throws an `Exception` and then catches it and displays the originating method using the `TargetSite` property.</span></span>  
  
 [!code-cpp[System.Exception.Properties#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Exception.Properties/CPP/properties.cpp#1)]
 [!code-csharp[System.Exception.Properties#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Exception.Properties/CS/properties.cs#1)]
 [!code-vb[System.Exception.Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Exception.Properties/VB/properties.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Exception.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="exception.ToString " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Exception.ToString</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="755cb-475">建立並傳回目前例外狀況的字串表示。</span>
          <span class="sxs-lookup">
            <span data-stu-id="755cb-475">Creates and returns a string representation of the current exception.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="755cb-476">目前例外狀況的字串表示。</span>
          <span class="sxs-lookup">
            <span data-stu-id="755cb-476">A string representation of the current exception.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="755cb-477"><xref:System.Exception.ToString%2A> 傳回表示目前例外狀況，為了能讓人瞭解。</span><span class="sxs-lookup"><span data-stu-id="755cb-477"><xref:System.Exception.ToString%2A> returns a representation of the current exception that is intended to be understood by humans.</span></span> <span data-ttu-id="755cb-478">其中區分文化特性的資料包含的例外狀況，所傳回的字串表示`ToString`無須考慮目前的系統文化特性。</span><span class="sxs-lookup"><span data-stu-id="755cb-478">Where the exception contains culture-sensitive data, the string representation returned by `ToString` is required to take into account the current system culture.</span></span> <span data-ttu-id="755cb-479">雖然傳回之字串的格式沒有實際上的需求，但它應該嘗試反映使用者了解物件的值。</span><span class="sxs-lookup"><span data-stu-id="755cb-479">Although there are no exact requirements for the format of the returned string, it should attempt to reflect the value of the object as perceived by the user.</span></span>  
  
 <span data-ttu-id="755cb-480">預設實作<xref:System.Exception.ToString%2A>會擲回目前例外狀況、 訊息、 呼叫類別的名稱取得<xref:System.Exception.ToString%2A>內部的例外狀況，以及呼叫<xref:System.Environment.StackTrace%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="755cb-480">The default implementation of <xref:System.Exception.ToString%2A> obtains the name of the class that threw the current exception, the message, the result of calling <xref:System.Exception.ToString%2A> on the inner exception, and the result of calling <xref:System.Environment.StackTrace%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="755cb-481">如果有任何這些成員為`null`，其值不包含在傳回的字串。</span><span class="sxs-lookup"><span data-stu-id="755cb-481">If any of these members is `null`, its value is not included in the returned string.</span></span>  
  
 <span data-ttu-id="755cb-482">如果沒有任何錯誤訊息，或者它是空字串 ("")，則會不傳回任何錯誤訊息。</span><span class="sxs-lookup"><span data-stu-id="755cb-482">If there is no error message or if it is an empty string (""), then no error message is returned.</span></span> <span data-ttu-id="755cb-483">如果它們不是，內部例外狀況和堆疊追蹤的名稱就會傳回`null`。</span><span class="sxs-lookup"><span data-stu-id="755cb-483">The name of the inner exception and the stack trace are returned only if they are not `null`.</span></span>  
  
 <span data-ttu-id="755cb-484">這個方法覆寫 <xref:System.Object.ToString%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="755cb-484">This method overrides <xref:System.Object.ToString%2A?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="755cb-485">下列範例會發生例外狀況，並顯示呼叫<xref:System.Exception.ToString%2A>上該例外狀況。</span><span class="sxs-lookup"><span data-stu-id="755cb-485">The following example causes an exception and displays the result of calling <xref:System.Exception.ToString%2A> on that exception.</span></span> <span data-ttu-id="755cb-486">請注意，<xref:System.Exception.ToString%2A?displayProperty=nameWithType>的引數清單中出現的例外狀況類別執行個體時隱含地呼叫方法<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="755cb-486">Note that the <xref:System.Exception.ToString%2A?displayProperty=nameWithType> method is called implicitly when the Exception class instance appears in the argument list of the <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> method.</span></span>  
  
 [!code-cpp[System.Exception.ToString#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.exception.tostring/cpp/ToStringEx1.cpp#1)]
 [!code-csharp[System.Exception.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.tostring/cs/ToStringEx1.cs#1)]
 [!code-vb[System.Exception.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.tostring/vb/ToStringEx1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>