<Type Name="Action" FullName="System.Action">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="0cc9cb3c97f150bba27f4ce746c2b3fa2df79f0d" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37728916" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate void Action();" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Action extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Action" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub Action()" />
  <TypeSignature Language="C++ CLI" Value="public delegate void Action();" />
  <TypeSignature Language="F#" Value="type Action = delegate of unit -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters />
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <summary>
      <span data-ttu-id="7904e-101">封裝沒有參數且沒有傳回值的方法。</span>
      <span class="sxs-lookup">
        <span data-stu-id="7904e-101">Encapsulates a method that has no parameters and does not return a value.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7904e-102">您可以使用此委派要做為參數傳遞給方法，而不必明確宣告自訂委派。</span><span class="sxs-lookup"><span data-stu-id="7904e-102">You can use this delegate to pass a method as a parameter without explicitly declaring a custom delegate.</span></span> <span data-ttu-id="7904e-103">封裝的方法必須對應到這個委派所定義的方法簽章。</span><span class="sxs-lookup"><span data-stu-id="7904e-103">The encapsulated method must correspond to the method signature that is defined by this delegate.</span></span> <span data-ttu-id="7904e-104">這表示封裝的方法必須沒有參數且沒有傳回值。</span><span class="sxs-lookup"><span data-stu-id="7904e-104">This means that the encapsulated method must have no parameters and no return value.</span></span> <span data-ttu-id="7904e-105">(在 C# 中，此方法必須傳回`void`。</span><span class="sxs-lookup"><span data-stu-id="7904e-105">(In C#, the method must return `void`.</span></span> <span data-ttu-id="7904e-106">在 Visual Basic 中，它必須由定義`Sub`...`End Sub`</span><span class="sxs-lookup"><span data-stu-id="7904e-106">In Visual Basic, it must be defined by the `Sub`…`End Sub`</span></span> <span data-ttu-id="7904e-107">建構。</span><span class="sxs-lookup"><span data-stu-id="7904e-107">construct.</span></span> <span data-ttu-id="7904e-108">它也可以傳回值，則會忽略這個值的方法。）通常，這種方法用來執行作業。</span><span class="sxs-lookup"><span data-stu-id="7904e-108">It can also be a method that returns a value that is ignored.) Typically, such a method is used to perform an operation.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7904e-109">若要參考沒有參數且傳回值的方法，使用泛型<xref:System.Func%601>改為委派。</span><span class="sxs-lookup"><span data-stu-id="7904e-109">To reference a method that has no parameters and returns a value, use the generic <xref:System.Func%601> delegate instead.</span></span>  
  
 <span data-ttu-id="7904e-110">當您使用<xref:System.Action>委派，您不需要明確地定義這個委派會封裝的無參數的程序。</span><span class="sxs-lookup"><span data-stu-id="7904e-110">When you use the <xref:System.Action> delegate, you do not have to explicitly define a delegate that encapsulates a parameterless procedure.</span></span> <span data-ttu-id="7904e-111">例如，下列程式碼明確宣告委派，名為`ShowValue`，並將指派的參考`Name.DisplayToWindow`執行個體給它的委派執行個體的方法。</span><span class="sxs-lookup"><span data-stu-id="7904e-111">For example, the following code explicitly declares a delegate named `ShowValue` and assigns a reference to the `Name.DisplayToWindow` instance method to its delegate instance.</span></span>  
  
 [!code-cpp[System.Action.Delegate#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.action.delegate/cpp/delegate.cpp#1)]
 [!code-csharp[System.Action.Delegate#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.action.delegate/cs/delegate.cs#1)]
 [!code-vb[System.Action.Delegate#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.action.delegate/vb/delegate.vb#1)]  
  
 <span data-ttu-id="7904e-112">下列範例中簡化這個程式碼，以具現化<xref:System.Action>而不是明確地定義新的委派，並為其指派具名的方法的委派。</span><span class="sxs-lookup"><span data-stu-id="7904e-112">The following example simplifies this code by instantiating the <xref:System.Action> delegate instead of explicitly defining a new delegate and assigning a named method to it.</span></span>  
  
 [!code-cpp[System.Action#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Action/cpp/action.cpp#2)]
 [!code-csharp[System.Action#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action/cs/Action.cs#2)]
 [!code-vb[System.Action#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action/vb/Action.vb#2)]  
  
 <span data-ttu-id="7904e-113">您也可以使用<xref:System.Action>具有在 C# 中，匿名方法委派，如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="7904e-113">You can also use the <xref:System.Action> delegate with anonymous methods in C#, as the following example illustrates.</span></span> <span data-ttu-id="7904e-114">(如匿名方法的簡介，請參閱 <<c0> [ 匿名方法](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md)。)</span><span class="sxs-lookup"><span data-stu-id="7904e-114">(For an introduction to anonymous methods, see [Anonymous Methods](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)</span></span>  
  
 [!code-csharp[System.Action#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action/cs/Anon.cs#3)]  
  
 <span data-ttu-id="7904e-115">您也可以指派至 lambda 運算式<xref:System.Action>委派執行個體，如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="7904e-115">You can also assign a lambda expression to an <xref:System.Action> delegate instance, as the following example illustrates.</span></span> <span data-ttu-id="7904e-116">(如需 lambda 運算式，請參閱 < [Lambda 運算式](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)。)</span><span class="sxs-lookup"><span data-stu-id="7904e-116">(For an introduction to lambda expressions, see [Lambda Expressions](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)</span></span>  
  
 [!code-csharp[System.Action#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action/cs/Lambda.cs#4)]
 [!code-vb[System.Action#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action/vb/lambda.vb#4)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Func`1" />
  </Docs>
</Type>