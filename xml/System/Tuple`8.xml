<Type Name="Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;" FullName="System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="748dd4b2ec95cbd704aabcd790b51dc2d7fe169a" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30729882" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt; : IComparable, System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Tuple`8&lt;T1, T2, T3, T4, T5, T6, T7, TRest&gt; extends System.Object implements class System.Collections.IStructuralComparable, class System.Collections.IStructuralEquatable, class System.IComparable" />
  <TypeSignature Language="DocId" Value="T:System.Tuple`8" />
  <TypeSignature Language="VB.NET" Value="Public Class Tuple(Of T1, T2, T3, T4, T5, T6, T7, TRest)&#xA;Implements IComparable, IStructuralComparable, IStructuralEquatable" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename TRest&gt;&#xA;public ref class Tuple : IComparable, System::Collections::IStructuralComparable, System::Collections::IStructuralEquatable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T1" />
    <TypeParameter Name="T2" />
    <TypeParameter Name="T3" />
    <TypeParameter Name="T4" />
    <TypeParameter Name="T5" />
    <TypeParameter Name="T6" />
    <TypeParameter Name="T7" />
    <TypeParameter Name="TRest" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IStructuralComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IStructuralEquatable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T1">Tuple 第 1 個元件的型別。</typeparam>
    <typeparam name="T2">Tuple 第 2 個元件的型別。</typeparam>
    <typeparam name="T3">Tuple 第 3 個元件的型別。</typeparam>
    <typeparam name="T4">Tuple 第 4 個元件的型別。</typeparam>
    <typeparam name="T5">Tuple 第 5 個元件的型別。</typeparam>
    <typeparam name="T6">Tuple 第 6 個元件的型別。</typeparam>
    <typeparam name="T7">Tuple 第 7 個元件的型別。</typeparam>
    <typeparam name="TRest">定義 Tuple 其餘元件的類型的任何泛型 <see langword="Tuple" /> 物件。</typeparam>
    <summary>代表 *n*-Tuple，其中 *n* 大於或等於 8。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tuple 是具有特定數量和值序列的資料結構。 <xref:System.Tuple%608>類別代表*n*個 tuple 有八個或多個元件。  
  
 您可以具現化<xref:System.Tuple%608>畾元件，藉由呼叫靜態物件<xref:System.Tuple.Create%2A?displayProperty=nameWithType>方法。 下列範例會建立 8 個 tuple (octuple)，其中包含會小於 20 的質數。 請注意，它會使用類型推斷來判斷每個元件的類型。  
  
 [!code-csharp[System.Tuple.Create#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/createntuple.cs#17)]
 [!code-vb[System.Tuple.Create#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/createntuple.vb#17)]  
  
 您也可以藉由呼叫初始化八個或多個元件的 n 個 tuple 物件<xref:System.Tuple%608.%23ctor%2A>建構函式。 下列範例會使用<xref:System.Tuple%608.%23ctor%2A>建構函式建立 8 個 tuple，相當於前一個範例中所建立的 tuple。  
  
 [!code-csharp[System.Tuple\`8.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.class/cs/octuple1.cs#1)]
 [!code-vb[System.Tuple\`8.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.class/vb/octuple1.vb#1)]  
  
> [!NOTE]
>  若要建立 n-tuple 九個或多個元件，您必須呼叫<xref:System.Tuple%608.%23ctor%2A>建構函式。 靜態 factory 方法<xref:System.Tuple>類別不支援建立`Tuple`超過 8 個元件的物件。  
  
 具現化具有八個或多個元件中的以 n tuple<xref:System.Tuple%608.%23ctor%2A>建構函式，提供泛型`Tuple`物件當做`rest`參數來定義的第八個透過*n*tuple 的第個元件。 巢狀結構泛型`Tuple`如此一來，您可以建立沒有實際限制對其元件數的 tuple 物件。  
  
 下列範例會建立包含城市的底特律，Michigan，如為 2000年 1860年從每個國家 （地區） 人口普查資料母體擴展 17 tuple。 Tuple 中的第一個元件是城市名稱。 第二個元件是開始日期的資料數列，而第三個元件的開始日期的母體擴展。 每個後續元件提供十年的間隔母體擴展。 17 個 tuple 由巢狀<xref:System.Tuple%603>物件內<xref:System.Tuple%608>物件。 (也就是說，<xref:System.Tuple%603>物件提供的值為`rest`中的參數<xref:System.Tuple%608>類別建構函式。)這<xref:System.Tuple%608>物件，接著巢狀方式置於外部<xref:System.Tuple%608>物件。 (也就是說，<xref:System.Tuple%608>物件提供的值為`rest`中外部參數<xref:System.Tuple%608>物件的類別建構函式。)  
  
 [!code-csharp[System.Tuple.Create#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/example.cs#19)]
 [!code-vb[System.Tuple.Create#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/example.vb#19)]  
  
 您可以擷取值的 tuple 的前七個元件所使用的唯讀<xref:System.Tuple%607.Item1%2A>， <xref:System.Tuple%607.Item2%2A>， <xref:System.Tuple%607.Item3%2A>， <xref:System.Tuple%607.Item4%2A>， <xref:System.Tuple%607.Item5%2A>， <xref:System.Tuple%607.Item6%2A>，和<xref:System.Tuple%607.Item7%2A>執行個體屬性。 任何其他元件都巢狀，而且可以擷取從<xref:System.Tuple%608.Rest%2A>屬性。 在上述範例中，<xref:System.Tuple%608.Item1%2A>透過<xref:System.Tuple%608.Item7%2A>屬性擷取的第一到 tuple 的第七個元件。 透過第十四個元件的第八個會包含在 tuple 的第二個層級巢狀類型，而且由`Rest.Item1`透過`Rest.Item7`屬性。 第十五個透過 seventeenth 元件會包含在 tuple 的第三個層級巢狀類型，而且由`Rest.Rest.Item1`雖然`Rest.Rest.Item3`屬性。  
  
 Tuple 常用於四種不同方式：  
  
-   代表單一的資料集。 比方說，tuple 可以代表資料庫記錄，而其元件可以表示個別欄位的記錄。  
  
-   提供讓您輕鬆存取、 和操作的資料集。  
  
-   若要傳回多個值的方法，而不會使用從`out`參數 （在 C#) 或`ByRef`參數 （在 Visual Basic)。 例如前, 一個範例會傳回其計算的統計資料，以及縣 （市） 名稱中,<xref:System.Tuple%607>物件。  
  
-   若要將多個值傳遞至方法，以透過單一參數。 例如，<xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType>方法具有單一參數，可讓您提供一個執行緒啟動時執行之方法的值。 如果您提供<xref:System.Tuple%607>物件做為方法引數中，您可以提供在執行緒啟動常式與資料的七個項目。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Tuple" />
    <altmember cref="T:System.Tuple`1" />
    <altmember cref="T:System.Tuple`2" />
    <altmember cref="T:System.Tuple`3" />
    <altmember cref="T:System.Tuple`4" />
    <altmember cref="T:System.Tuple`5" />
    <altmember cref="T:System.Tuple`6" />
    <altmember cref="T:System.Tuple`7" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Tuple (T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, TRest rest);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T1 item1, !T2 item2, !T3 item3, !T4 item4, !T5 item5, !T6 item6, !T7 item7, !TRest rest) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (item1 As T1, item2 As T2, item3 As T3, item4 As T4, item5 As T5, item6 As T6, item7 As T7, rest As TRest)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Tuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, TRest rest);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="item1" Type="T1" />
        <Parameter Name="item2" Type="T2" />
        <Parameter Name="item3" Type="T3" />
        <Parameter Name="item4" Type="T4" />
        <Parameter Name="item5" Type="T5" />
        <Parameter Name="item6" Type="T6" />
        <Parameter Name="item7" Type="T7" />
        <Parameter Name="rest" Type="TRest" />
      </Parameters>
      <Docs>
        <param name="item1">Tuple 第 1 個元件的值。</param>
        <param name="item2">Tuple 第 2 個元件的值。</param>
        <param name="item3">Tuple 第 3 個元件的值。</param>
        <param name="item4">Tuple 第 4 個元件的值。</param>
        <param name="item5">Tuple 第 5 個元件的值。</param>
        <param name="item6">Tuple 第 6 個元件的值。</param>
        <param name="item7">Tuple 第 7 個元件的值。</param>
        <param name="rest">包含 Tuple 其餘元件之值的任何泛型 <see langword="Tuple" /> 物件。</param>
        <summary>初始化 <see cref="T:System.Tuple`8" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您也可以使用靜態<xref:System.Tuple.Create%2A?displayProperty=nameWithType>方法來起始 8 個 tuple (octuple) 物件而不需要明確指定其元件的類型。 下列範例會使用<xref:System.Tuple.Create%2A?displayProperty=nameWithType>來具現化包含會小於 20 的質數的 8 個 tuple 物件的方法。  
  
 [!code-csharp[System.Tuple.Create#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/createntuple.cs#17)]
 [!code-vb[System.Tuple.Create#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/createntuple.vb#17)]  
  
 這相當於下列呼叫<xref:System.Tuple%607.%23ctor%2A>類別建構函式。  
  
 [!code-csharp[System.Tuple\`8.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.class/cs/octuple1.cs#1)]
 [!code-vb[System.Tuple\`8.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.class/vb/octuple1.vb#1)]  
  
 不過，靜態<xref:System.Tuple.Create%2A?displayProperty=nameWithType>方法無法用於建立 tuple 物件具有八個以上的元件。  
  
 當使用<xref:System.Tuple%608.%23ctor%2A>建構函式建立 n-tuple 八個或多個元件，與您使用`rest`參數來建立巢狀的 n 個 tuple 有一到七個元件。 藉由使用連續巢狀層級，您可以建立 n-tuple 具有幾乎不受限制的多個元件。 例如，若要建立 25 tuple，您具現化<xref:System.Tuple%608>物件的巢狀，三個層級，如下所示：  
  
-   最外層<xref:System.Tuple%608>物件包含的第一到第七個元件。 其<xref:System.Tuple%608.Rest%2A>屬性可存取<xref:System.Tuple%608>在第一個層級的巢狀的物件。  
  
-   最外層的巢狀<xref:System.Tuple%608>物件包含的第八個透過第十四個元件，並將其<xref:System.Tuple%608.Rest%2A>屬性可存取<xref:System.Tuple%608>在第二個層級的巢狀的物件。  
  
-   <xref:System.Tuple%608>在第二個層級的巢狀的物件包含的第十五個到第二十一元件及其<xref:System.Tuple%608.Rest%2A>屬性可存取<xref:System.Tuple%604>第三個層級的巢狀的物件。  
  
-   最內層的 tuple 都是<xref:System.Tuple%604>包含 20 秒到第 25 元件的物件。  
  
   
  
## Examples  
 下列範例會建立包含城市的底特律，Michigan，針對每個 「 人口普查 」 從 1860年到 2000年的母體擴展資料 17 tuple。 Tuple 中的第一個元件是城市名稱。 第二個元件的資料，數列的開始日期並第三個元件為母體的開始日期。 每個後續元件提供十年的間隔母體擴展。 這個範例會使用兩個圖層的巢狀建立 17 tuple： 它會定義 7-tuple 的第三到第七個元件包含母體擴展資料 1860 1900年透過巢狀的 7 個 tuple 包含透過 1970年 1910年母體擴展的資料，以及內部巢狀 3 tuple包含到 2000年 1980年母體擴展的資料。  
  
 [!code-csharp[System.Tuple.Create#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/example.cs#19)]
 [!code-vb[System.Tuple.Create#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/example.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="rest" /> 不是泛型 <see langword="Tuple" /> 物件。</exception>
        <altmember cref="M:System.Tuple.Create``8(``0,``1,``2,``3,``4,``5,``6,``7)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`8.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">與這個執行個體相互比較的物件。</param>
        <summary>傳回值，這個值表示目前的 <see cref="T:System.Tuple`8" /> 物件是否等於指定的物件。</summary>
        <returns>
          如果目前的執行個體和指定的物件相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `obj`參數會被視為等於目前的執行個體符合下列所有條件：  
  
-   它是<xref:System.Tuple%608>物件。  
  
-   它有相同元件的目前執行個體相同的類型總數。  
  
-   元件 （包括其巢狀的元件） 目前的執行個體相等。 每個元件的預設相等比較子來判斷相等。  
  
   
  
## Examples  
 下列範例會定義五個<xref:System.Tuple%608>包含質數的物件。 然後，它會比較的第一個物件，與每個剩餘的物件。 如輸出所示，只有第一個和最後一個<xref:System.Tuple%608>物件相等，因為它們具有相同數目的相同值的元件。  
  
 [!code-csharp[System.Tuple\`8.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.equals/cs/equals1.cs#1)]
 [!code-vb[System.Tuple\`8.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.equals/vb/equals1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`8.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>計算目前 <see cref="T:System.Tuple`8" /> 物件的雜湊碼。</summary>
        <returns>32 位元帶正負號的整數雜湊碼。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item1">
      <MemberSignature Language="C#" Value="public T1 Item1 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T1 Item1" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.Item1" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item1 As T1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T1 Item1 { T1 get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T1</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得目前 <see cref="T:System.Tuple`8" /> 物件之第一個元件的值。</summary>
        <value>目前 <see cref="T:System.Tuple`8" /> 物件之第一個元件的值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以動態決定的型別<xref:System.Tuple%608.Item1%2A>元件中有兩種：  
  
-   藉由呼叫`GetType`方法所傳回的值<xref:System.Tuple%608.Item1%2A>屬性。  
  
-   藉由擷取<xref:System.Type>物件，代表<xref:System.Tuple%608>物件，並擷取第一個項目所傳回的陣列從其<xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType>方法。  
  
   
  
## Examples  
 下列範例會建立包含城市的底特律，Michigan，從 2000 1860年的母體擴展資料 17 tuple 物件。 17 個 tuple 的第一個元件是城市名稱。 此範例會使用<xref:System.Tuple%608.Item1%2A>屬性來顯示資料表標頭中的城市名稱之前顯示母體擴展的資料。  
  
 [!code-csharp[System.Tuple\`8.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`8.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item2">
      <MemberSignature Language="C#" Value="public T2 Item2 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T2 Item2" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.Item2" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item2 As T2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T2 Item2 { T2 get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T2</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得目前 <see cref="T:System.Tuple`8" /> 物件之第二個元件的值。</summary>
        <value>目前 <see cref="T:System.Tuple`8" /> 物件之第二個元件的值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以動態決定的型別<xref:System.Tuple%608.Item2%2A>元件中有兩種：  
  
-   藉由呼叫`GetType`方法所傳回的值<xref:System.Tuple%608.Item2%2A>屬性。  
  
-   藉由擷取<xref:System.Type>物件，代表<xref:System.Tuple%608>物件，並擷取第二個元素所傳回的陣列從其<xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType>方法。  
  
   
  
## Examples  
 下列範例會建立包含城市的底特律，Michigan，從 2000 1860年的母體擴展資料 17 tuple 物件。 17 個 tuple 的第二個元件是資料數列的第一年。 此範例將指派的值<xref:System.Tuple%608.Item2%2A>變數，然後使用該變數來表示年份顯示其資料的屬性。  
  
 [!code-csharp[System.Tuple\`8.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`8.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item3">
      <MemberSignature Language="C#" Value="public T3 Item3 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T3 Item3" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.Item3" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item3 As T3" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T3 Item3 { T3 get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T3</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得目前 <see cref="T:System.Tuple`8" /> 物件之第三個元件的值。</summary>
        <value>目前 <see cref="T:System.Tuple`8" /> 物件之第三個元件的值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以動態決定的型別<xref:System.Tuple%608.Item3%2A>元件中有兩種：  
  
-   藉由呼叫`GetType`方法所傳回的值<xref:System.Tuple%608.Item3%2A>屬性。  
  
-   藉由擷取<xref:System.Type>物件，代表<xref:System.Tuple%608>物件，並擷取第三個元素所傳回的陣列從其<xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType>方法。  
  
   
  
## Examples  
 下列範例會建立包含城市的底特律，Michigan，從 2000 1860年的母體擴展資料 17 tuple 物件。 17 個 tuple 的第三個元件是 1860年中的母體擴展。 此範例會使用<xref:System.Tuple%608.Item3%2A>屬性顯示的母體擴展的值，然後計算每年變動率的母體擴展 1860年和 1870年之間。  
  
 [!code-csharp[System.Tuple\`8.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`8.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item4">
      <MemberSignature Language="C#" Value="public T4 Item4 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T4 Item4" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.Item4" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item4 As T4" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T4 Item4 { T4 get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T4</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得目前 <see cref="T:System.Tuple`8" /> 物件之第四個元件的值。</summary>
        <value>目前 <see cref="T:System.Tuple`8" /> 物件之第四個元件的值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以動態決定的型別<xref:System.Tuple%608.Item4%2A>元件中有兩種：  
  
-   藉由呼叫`GetType`方法所傳回的值<xref:System.Tuple%608.Item4%2A>屬性。  
  
-   藉由擷取<xref:System.Type>物件，代表<xref:System.Tuple%608>物件，並傳回陣列中擷取的第四個項目及其<xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType>方法。  
  
   
  
## Examples  
 下列範例會建立包含城市的底特律，Michigan，從 2000 1860年的母體擴展資料 17 tuple 物件。 17 個 tuple 的第四個元件是 1870年中的母體擴展。 此範例會使用<xref:System.Tuple%608.Item4%2A>屬性顯示的母體擴展的值，然後計算每年變動率的母體擴展 1870年和 1880年之間。  
  
 [!code-csharp[System.Tuple\`8.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`8.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item5">
      <MemberSignature Language="C#" Value="public T5 Item5 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T5 Item5" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.Item5" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item5 As T5" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T5 Item5 { T5 get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T5</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得目前 <see cref="T:System.Tuple`8" /> 物件之第五個元件的值。</summary>
        <value>目前 <see cref="T:System.Tuple`8" /> 物件之第五個元件的值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以動態決定的型別<xref:System.Tuple%608.Item5%2A>元件中有兩種：  
  
-   藉由呼叫`GetType`方法所傳回的值<xref:System.Tuple%608.Item5%2A>屬性。  
  
-   藉由擷取<xref:System.Type>物件，代表<xref:System.Tuple%608>物件，並擷取的第五個項目所傳回的陣列從其<xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType>方法。  
  
   
  
## Examples  
 下列範例會建立包含城市的底特律，Michigan，從 2000 1860年的母體擴展資料 17 tuple 物件。 17 個 tuple 的第五個元件是 1880年中的母體擴展。 此範例會使用<xref:System.Tuple%608.Item5%2A>屬性顯示的母體擴展的值，然後計算每年變動率的母體擴展 1880年和 1890年之間。  
  
 [!code-csharp[System.Tuple\`8.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`8.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item6">
      <MemberSignature Language="C#" Value="public T6 Item6 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T6 Item6" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.Item6" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item6 As T6" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T6 Item6 { T6 get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T6</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得目前 <see cref="T:System.Tuple`8" /> 物件之第六個元件的值。</summary>
        <value>目前 <see cref="T:System.Tuple`8" /> 物件之第六個元件的值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以動態決定的型別<xref:System.Tuple%608.Item6%2A>元件中有兩種：  
  
-   藉由呼叫`GetType`方法所傳回的值<xref:System.Tuple%608.Item6%2A>屬性。  
  
-   藉由擷取<xref:System.Type>物件，代表<xref:System.Tuple%608>物件，並擷取的第六個項目所傳回的陣列從其<xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType>方法。  
  
   
  
## Examples  
 下列範例會建立包含城市的底特律，Michigan，從 2000 1860年的母體擴展資料 17 tuple 物件。 17 個 tuple 的第六個元件是 1890年中的母體擴展。 此範例會使用<xref:System.Tuple%608.Item6%2A>屬性顯示的母體擴展的值，然後計算每年變動率的母體擴展 1890年和 1900年之間。  
  
 [!code-csharp[System.Tuple\`8.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`8.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item7">
      <MemberSignature Language="C#" Value="public T7 Item7 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T7 Item7" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.Item7" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item7 As T7" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T7 Item7 { T7 get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T7</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得目前 <see cref="T:System.Tuple`8" /> 物件之第七個元件的值。</summary>
        <value>目前 <see cref="T:System.Tuple`8" /> 物件之第七個元件的值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以動態決定的型別<xref:System.Tuple%608.Item7%2A>元件中有兩種：  
  
-   藉由呼叫`GetType`方法所傳回的值<xref:System.Tuple%608.Item7%2A>屬性。  
  
-   藉由擷取<xref:System.Type>物件，代表<xref:System.Tuple%608>物件，並擷取第七個項目所傳回的陣列從其<xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType>方法。  
  
   
  
## Examples  
 下列範例會建立包含城市的底特律，Michigan，從 2000 1860年的母體擴展資料 17 tuple 物件。 17 個 tuple 的第七個元件是 1900 母體擴展。 此範例會使用<xref:System.Tuple%608.Item7%2A>屬性顯示母體擴展的值，然後計算每年介於 1900 年 1910年的母體擴展變動率。  
  
 [!code-csharp[System.Tuple\`8.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`8.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rest">
      <MemberSignature Language="C#" Value="public TRest Rest { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TRest Rest" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.Rest" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Rest As TRest" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TRest Rest { TRest get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TRest</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得目前 <see cref="T:System.Tuple`8" /> 物件的其餘元件。</summary>
        <value>目前 <see cref="T:System.Tuple`8" /> 物件的其餘元件。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Tuple%608.Rest%2A>屬性會傳回巢狀`Tuple`物件，但是可讓您存取第八個*n*tuple 的第個元件。 要擷取透過第十四個元件的第八個值的 tuple 中的元件總數，根據從巢狀`Tuple`物件的<xref:System.Tuple%608.Item1%2A>透過<xref:System.Tuple%608.Item7%2A>屬性。 然後您可以使用<xref:System.Tuple%608.Rest%2A>巢狀的屬性<xref:System.Tuple%608>物件，以擷取`Tuple`在下一個層級的巢狀的物件。  
  
 您可以動態地決定中巢狀的元件數目`Tuple`所傳回的物件<xref:System.Tuple%608.Rest%2A>屬性來擷取其型別名稱的數字。 下列範例提供一個實例。  
  
 [!code-vb[System.Tuple\`8.Item1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/rest.vb#2)]  
  
   
  
## Examples  
 下列範例會建立包含城市的底特律，Michigan，從 2000 1860年的母體擴展資料 17 tuple 物件。 17 個 tuple 的第七個元件是 1900 母體擴展。 此範例會使用<xref:System.Tuple%608.Rest%2A>可擷取的第十四個元件，和它的第八個值的屬性使用<xref:System.Tuple%608.Rest%2A>巢狀的屬性<xref:System.Tuple%608>物件來擷取其餘元件的值。  
  
 [!code-csharp[System.Tuple\`8.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`8.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IStructuralComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IStructuralComparable.CompareTo (object other, System.Collections.IComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IStructuralComparable.CompareTo(object other, class System.Collections.IComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (other As Object, comparer As IComparer) As Integer Implements IStructuralComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IStructuralComparable.CompareTo(System::Object ^ other, System::Collections::IComparer ^ comparer) = System::Collections::IStructuralComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
        <Parameter Name="comparer" Type="System.Collections.IComparer" />
      </Parameters>
      <Docs>
        <param name="other">要與目前執行個體比較的物件。</param>
        <param name="comparer">提供自訂規則進行比較的物件。</param>
        <summary>使用指定的比較子將目前的 <see cref="T:System.Tuple`8" /> 物件和指定的物件進行比較，並且傳回一個整數，表示目前的物件在排序順序中位於指定之物件的前面、後面還是相的位置。</summary>
        <returns>帶正負號的整數，可指出此執行個體以及排序次序中 <paramref name="other" /> 的相對位置，如下表所示。  
  
 <list type="table"><listheader><term> 值  
  
 </term><description> 描述  
  
 </description></listheader><item><term> 負整數  
  
 </term><description>這個執行個體位於 <paramref name="other" /> 之前。  
  
 </description></item><item><term> 零  
  
 </term><description>這個執行個體和 <paramref name="other" /> 的排序位置相同。  
  
 </description></item><item><term>正整數  
  
 </term><description>這個執行個體位於 <paramref name="other" /> 之後。  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個成員是明確介面實作。 只有在 <xref:System.Tuple%608> 執行個體轉換成 <xref:System.Collections.IStructuralComparable> 介面時，才能使用這個成員。  
  
 這個方法可讓您定義的自訂的比較<xref:System.Tuple%608>物件。 例如，您可以使用這個方法，以順序<xref:System.Tuple%608>物件為基礎的特定元件的值。  
  
 雖然可以直接呼叫這個方法，它會最常呼叫集合排序方法，包含了<xref:System.Collections.IComparer>參數來排序集合的成員。 例如，由呼叫<xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29?displayProperty=nameWithType>方法和<xref:System.Collections.SortedList.Add%2A>方法<xref:System.Collections.SortedList>具現化所使用的物件<xref:System.Collections.SortedList.%23ctor%28System.Collections.IComparer%29?displayProperty=nameWithType>建構函式。  
  
> [!CAUTION]
>  <xref:System.Tuple%608.System%23Collections%23IStructuralComparable%23CompareTo%2A>方法僅供用於排序作業。 此外，它不應該使用時比較的主要目的是要判斷兩個物件是否相等。 若要判斷兩個物件是否相等，請呼叫<xref:System.Tuple%608.System%23Collections%23IStructuralEquatable%23Equals%2A>方法。  
  
   
  
## Examples  
 下列範例會建立的陣列<xref:System.Tuple%608>包含四個美國城市 1940年從 2000 的母體擴展資料的物件。 Octuple 的第一個元件是城市名稱。 其餘的六個元件則代表母體擴展在 10 年的時間間隔從 1940年為 2000年。  
  
 `PopulationComparer`類別提供<xref:System.Collections.IComparer>實作，可讓 octuples 排序任何一種及其元件的陣列。 兩個值提供給`PopulationComparer`其建構函式中的類別： 定義排序次序中，元件的位置和<xref:System.Boolean>值，指出是否應該以遞增或遞減順序排序的 tuple 物件。  
  
 此範例會顯示未排序的順序陣列中的項目、 依第三個元件 （1950年中母體擴展） 和顯示它們，並再依第 8 個元件 （2000年中母體擴展） 並加以顯示。  
  
 [!code-csharp[System.Tuple\`8.CompareTo#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.compareto/cs/compareto2.cs#2)]
 [!code-vb[System.Tuple\`8.CompareTo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.compareto/vb/compareto2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="other" /> 不是 <see cref="T:System.Tuple`8" /> 物件。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IStructuralEquatable.Equals">
      <MemberSignature Language="C#" Value="bool IStructuralEquatable.Equals (object other, System.Collections.IEqualityComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IStructuralEquatable.Equals(object other, class System.Collections.IEqualityComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`8.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)" />
      <MemberSignature Language="VB.NET" Value="Function Equals (other As Object, comparer As IEqualityComparer) As Boolean Implements IStructuralEquatable.Equals" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IStructuralEquatable.Equals(System::Object ^ other, System::Collections::IEqualityComparer ^ comparer) = System::Collections::IStructuralEquatable::Equals;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
        <Parameter Name="comparer" Type="System.Collections.IEqualityComparer" />
      </Parameters>
      <Docs>
        <param name="other">與這個執行個體相互比較的物件。</param>
        <param name="comparer">物件，定義要用來評估這兩個物件是否相等的方法。</param>
        <summary>傳回值，這個值表示依據指定的比較方法，目前的 <see cref="T:System.Tuple`8" /> 物件是否等於指定的物件。</summary>
        <returns>
          如果目前的執行個體和指定的物件相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個成員是明確介面成員實作， 只有在 <xref:System.Tuple%608> 執行個體轉換成 <xref:System.Collections.IStructuralEquatable> 介面時，才能使用這個成員。  
  
 <xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType>才實作會呼叫`other`不`null`，而且如果它可以是成功轉換 （C# 中） 或 （在 Visual Basic) 轉換成<xref:System.Tuple%608>物件具有相同元件總數 （包括中的巢狀`Tuple`物件) 的目前執行個體相同的類型。 <xref:System.Tuple%608.System%23Collections%23IStructuralEquatable%23Equals%28System.Object%2CSystem.Collections.IEqualityComparer%29>方法的第一個階段<xref:System.Tuple%608.Item1%2A>值<xref:System.Tuple%608>要比較的物件<xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType>實作。 如果這個方法呼叫傳回`true`，方法是呼叫一次，並傳遞<xref:System.Tuple%608.Item2%2A>兩個值<xref:System.Tuple%608>物件。 這會繼續執行直到方法呼叫傳回`false`時，它會比較值或兩個一組特定<xref:System.Tuple%608.Rest%2A>值會傳遞至方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IStructuralEquatable.GetHashCode">
      <MemberSignature Language="C#" Value="int IStructuralEquatable.GetHashCode (System.Collections.IEqualityComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IStructuralEquatable.GetHashCode(class System.Collections.IEqualityComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`8.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)" />
      <MemberSignature Language="VB.NET" Value="Function GetHashCode (comparer As IEqualityComparer) As Integer Implements IStructuralEquatable.GetHashCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IStructuralEquatable.GetHashCode(System::Collections::IEqualityComparer ^ comparer) = System::Collections::IStructuralEquatable::GetHashCode;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.IEqualityComparer" />
      </Parameters>
      <Docs>
        <param name="comparer">其 <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> 方法可以計算目前 <see cref="T:System.Tuple`8" /> 物件之雜湊碼的物件。</param>
        <summary>使用指定的計算方法，計算目前 <see cref="T:System.Tuple`8" /> 物件的雜湊碼。</summary>
        <returns>32 位元帶正負號的整數雜湊碼。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個成員是明確介面成員實作， 只有在 <xref:System.Tuple%608> 執行個體轉換成 <xref:System.Collections.IStructuralEquatable> 介面時，才能使用這個成員。  
  
 方法只會包裝呼叫`comparer`物件的<xref:System.Collections.IEqualityComparer.GetHashCode%2A?displayProperty=nameWithType>實作。  
  
 用來計算雜湊程式碼的演算法應該會傳回相同的雜湊程式碼，其中兩個<xref:System.Tuple%608>會被視為相等的物件。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (obj As Object) As Integer Implements IComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IComparable.CompareTo(System::Object ^ obj) = IComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">要與目前執行個體比較的物件。</param>
        <summary>將目前的 <see cref="T:System.Tuple`8" /> 物件與指定的物件比較，並傳回可指出目前物件在排序次序中，是否在指定物件之前、之後或者相同之位置的整數。</summary>
        <returns>帶正負號的整數，可指出此執行個體以及排序次序中 <paramref name="obj" /> 的相對位置，如下表所示。  
  
 <list type="table"><listheader><term> 值  
  
 </term><description> 描述  
  
 </description></listheader><item><term> 負整數  
  
 </term><description>這個執行個體位於 <paramref name="obj" /> 之前。  
  
 </description></item><item><term> 零  
  
 </term><description>這個執行個體和 <paramref name="obj" /> 的排序位置相同。  
  
 </description></item><item><term>正整數  
  
 </term><description>這個執行個體位於 <paramref name="obj" /> 之後。  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個成員是明確介面成員實作， 只有在 <xref:System.Tuple%608> 執行個體轉換成 <xref:System.IComparable> 介面時，才能使用這個成員。  
  
 這個方法會提供<xref:System.IComparable.CompareTo%2A?displayProperty=nameWithType>實作<xref:System.Tuple%608>類別。 雖然可以直接呼叫的方法，但是最常呼叫此方法的集合排序的預設多載方法，例如<xref:System.Array.Sort%28System.Array%29?displayProperty=nameWithType>和<xref:System.Collections.SortedList.Add%2A?displayProperty=nameWithType>，若要排序之集合的成員。  
  
> [!CAUTION]
>  <xref:System.Tuple%608.System%23IComparable%23CompareTo%2A>方法僅供用於排序作業。 此外，它不應該使用時比較的主要目的是要判斷兩個物件是否相等。 若要判斷兩個物件是否相等，請呼叫<xref:System.Tuple%608.Equals%28System.Object%29?displayProperty=nameWithType>方法。  
  
 這個方法會使用預設物件比較子來比較每個元件。  
  
   
  
## Examples  
 下列範例會建立的 octuples 元件都是包含範圍的質數的整數的陣列。 範例顯示陣列項目的未排序的順序，排序陣列，並接著會顯示依排序順序的陣列。 輸出顯示已依照陣列<xref:System.Tuple%608.Item1%2A>，或 tuple 的第一個元件。 請注意，此範例不會直接呼叫<xref:System.Tuple%608.System%23IComparable%23CompareTo%28System.Object%29>方法。 這個方法會隱含地呼叫<xref:System.Array.Sort%28System.Array%29>陣列中每個項目的方法。  
  
 [!code-csharp[System.Tuple\`8.CompareTo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.compareto/cs/compareto1.cs#1)]
 [!code-vb[System.Tuple\`8.CompareTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.compareto/vb/compareto1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="obj" /> 不是 <see cref="T:System.Tuple`8" /> 物件。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.CompilerServices.ITuple.Item">
      <MemberSignature Language="C#" Value="object System.Runtime.CompilerServices.ITuple.Item[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Runtime.CompilerServices.ITuple.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Item(index As Integer) As Object Implements ITuple.Item" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Runtime.CompilerServices.ITuple.Item[int] { System::Object ^ get(int index); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.CompilerServices.ITuple.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">指定的 <see langword="Tuple" /> 項目索引。 <c>index</c> 的範圍可以從 <see langword="Item1" /> 的 0，到小於 <see langword="Tuple" /> 的元素數目。</param>
        <summary>取得指定的 <see langword="Tuple" /> 項目值。</summary>
        <value>位在指定位置的 <see langword="Tuple" /> 項目值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Tuple%608.System%23Runtime%23CompilerServices%23ITuple%23Item%2A?displayProperty=nameWithType>屬性是明確介面實作。 若要呼叫它，您必須決定要轉型或轉換<xref:System.Tuple%608>物件<xref:System.Runtime.CompilerServices.ITuple>介面物件。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IndexOutOfRangeException">
          <paramref name="index" /> 小於 0。  
  
 -或-  
  
 <paramref name="index" /> 大於或等於 <see cref="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Length" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.CompilerServices.ITuple.Length">
      <MemberSignature Language="C#" Value="int System.Runtime.CompilerServices.ITuple.Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 System.Runtime.CompilerServices.ITuple.Length" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Length" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Length As Integer Implements ITuple.Length" />
      <MemberSignature Language="C++ CLI" Value="property int System.Runtime.CompilerServices.ITuple.Length { int get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.CompilerServices.ITuple.Length</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得 <see langword="Tuple" /> 中的項目數目。</summary>
        <value>
          <see langword="Tuple" /> 中的項目數。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Tuple%608.System%23Runtime%23CompilerServices%23ITuple%23Length%2A>屬性是明確介面實作。 若要呼叫它，您必須決定要轉型或轉換<xref:System.Tuple%608>類型<xref:System.Runtime.CompilerServices.ITuple>介面物件。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`8.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回字串，表示這個 <see cref="T:System.Tuple`8" /> 執行個體的值。</summary>
        <returns>此 <see cref="T:System.Tuple`8" /> 物件的字串表示。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法所傳回的字串形式 (*Item1*， *Item2*， *Item3*， *Item4*， `Item5, Item6, Item7`， *Item8*...)，其中*Item1*， *Item2*， *Item3*， *Item4*， *Item5*， *Item6*，和*Item7*代表的值<xref:System.Tuple%608.Item1%2A>， <xref:System.Tuple%608.Item2%2A>， <xref:System.Tuple%608.Item3%2A>， <xref:System.Tuple%608.Item4%2A>， <xref:System.Tuple%608.Item5%2A>， <xref:System.Tuple%608.Item6%2A>，和<xref:System.Tuple%608.Item7%2A>屬性。 *Item8*代表的值<xref:System.Tuple%608>物件的`Next.Item1`屬性。 任何其他的巢狀元件的值遵循*Item8*。 如果有任何屬性值為`null`，則會呈現為<xref:System.String.Empty?displayProperty=nameWithType>。  
  
   
  
## Examples  
 下列範例會建立包含城市的底特律，Michigan，從 1900 1860年的母體擴展資料 17 tuple。 然後它會使用<xref:System.Tuple%608.ToString%2A>方法，以顯示資料的 tuple。  
  
 [!code-csharp[System.Tuple\`8.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.tostring/cs/tostring1.cs#1)]
 [!code-vb[System.Tuple\`8.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.tostring/vb/tostring1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>