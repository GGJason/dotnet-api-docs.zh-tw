<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Tuple`8.xml" source-language="en-US" target-language="zh-TW">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5748dd4b2ec95cbd704aabcd790b51dc2d7fe169a.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">748dd4b2ec95cbd704aabcd790b51dc2d7fe169a</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>The type of the tuple's first component.</source>
          <target state="translated">Tuple 第 1 個元件的型別。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>The type of the tuple's second component.</source>
          <target state="translated">Tuple 第 2 個元件的型別。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>The type of the tuple's third component.</source>
          <target state="translated">Tuple 第 3 個元件的型別。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>The type of the tuple's fourth component.</source>
          <target state="translated">Tuple 第 4 個元件的型別。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>The type of the tuple's fifth component.</source>
          <target state="translated">Tuple 第 5 個元件的型別。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>The type of the tuple's sixth component.</source>
          <target state="translated">Tuple 第 6 個元件的型別。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>The type of the tuple's seventh component.</source>
          <target state="translated">Tuple 第 7 個元件的型別。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>Any generic <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> object that defines the types of the tuple's remaining components.</source>
          <target state="translated">定義 Tuple 其餘元件的類型的任何泛型 <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> 物件。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="T:System.Tuple`8">
          <source>Represents an <bpt id="p1">*</bpt>n<ept id="p1">*</ept>-tuple, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is 8 or greater.</source>
          <target state="translated">代表 <bpt id="p1">*</bpt>n<ept id="p1">*</ept>-Tuple，其中 <bpt id="p2">*</bpt>n<ept id="p2">*</ept> 大於或等於 8。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>A tuple is a data structure that has a specific number and sequence of values.</source>
          <target state="translated">Tuple 是具有特定數量和值序列的資料結構。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> class represents an <bpt id="p1">*</bpt>n<ept id="p1">*</ept>-tuple that has eight or more components.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph>類別代表<bpt id="p1">*</bpt>n<ept id="p1">*</ept>個 tuple 有八個或多個元件。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>You can instantiate a <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> object with exactly eight components by calling the static <ph id="ph2">&lt;xref:System.Tuple.Create%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">您可以具現化<ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph>畾元件，藉由呼叫靜態物件<ph id="ph2">&lt;xref:System.Tuple.Create%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>The following example creates an 8-tuple (octuple) that contains prime numbers that are less than 20.</source>
          <target state="translated">下列範例會建立 8 個 tuple (octuple)，其中包含會小於 20 的質數。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>Note that it uses type inference to determine the type of each component.</source>
          <target state="translated">請注意，它會使用類型推斷來判斷每個元件的類型。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>You can also instantiate an n-tuple object with eight or more components by calling the <ph id="ph1">&lt;xref:System.Tuple%608.%23ctor%2A&gt;</ph> constructor.</source>
          <target state="translated">您也可以藉由呼叫初始化八個或多個元件的 n 個 tuple 物件<ph id="ph1">&lt;xref:System.Tuple%608.%23ctor%2A&gt;</ph>建構函式。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Tuple%608.%23ctor%2A&gt;</ph> constructor to create an 8-tuple that is equivalent to the tuple created in the previous example.</source>
          <target state="translated">下列範例會使用<ph id="ph1">&lt;xref:System.Tuple%608.%23ctor%2A&gt;</ph>建構函式建立 8 個 tuple，相當於前一個範例中所建立的 tuple。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>To create an n-tuple with nine or more components, you must call the  <ph id="ph1">&lt;xref:System.Tuple%608.%23ctor%2A&gt;</ph> constructor.</source>
          <target state="translated">若要建立 n-tuple 九個或多個元件，您必須呼叫<ph id="ph1">&lt;xref:System.Tuple%608.%23ctor%2A&gt;</ph>建構函式。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>The static factory methods of the <ph id="ph1">&lt;xref:System.Tuple&gt;</ph> class do not support the creation of <ph id="ph2">`Tuple`</ph> objects with more than eight components.</source>
          <target state="translated">靜態 factory 方法<ph id="ph1">&lt;xref:System.Tuple&gt;</ph>類別不支援建立<ph id="ph2">`Tuple`</ph>超過 8 個元件的物件。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>To instantiate an n-tuple that has eight or more components with the <ph id="ph1">&lt;xref:System.Tuple%608.%23ctor%2A&gt;</ph> constructor, you supply a generic <ph id="ph2">`Tuple`</ph> object as the <ph id="ph3">`rest`</ph> parameter to define the eighth through <bpt id="p1">*</bpt>n<ept id="p1">*</ept>th components of the tuple.</source>
          <target state="translated">具現化具有八個或多個元件中的以 n tuple<ph id="ph1">&lt;xref:System.Tuple%608.%23ctor%2A&gt;</ph>建構函式，提供泛型<ph id="ph2">`Tuple`</ph>物件當做<ph id="ph3">`rest`</ph>參數來定義的第八個透過<bpt id="p1">*</bpt>n<ept id="p1">*</ept>tuple 的第個元件。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>By nesting generic <ph id="ph1">`Tuple`</ph> objects in this way, you can create a tuple that has no practical limitation on the number of its components.</source>
          <target state="translated">巢狀結構泛型<ph id="ph1">`Tuple`</ph>如此一來，您可以建立沒有實際限制對其元件數的 tuple 物件。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>The following example creates a 17-tuple that contains population data for the city of Detroit, Michigan, for each national census from 1860 to 2000.</source>
          <target state="translated">下列範例會建立包含城市的底特律，Michigan，如為 2000年 1860年從每個國家 （地區） 人口普查資料母體擴展 17 tuple。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>The first component of the tuple is the city name.</source>
          <target state="translated">Tuple 中的第一個元件是城市名稱。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>The second component is the start date of the data series, and the third component is the population at the start date.</source>
          <target state="translated">第二個元件是開始日期的資料數列，而第三個元件的開始日期的母體擴展。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>Each subsequent component provides the population at decade intervals.</source>
          <target state="translated">每個後續元件提供十年的間隔母體擴展。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>The 17-tuple is created by nesting a <ph id="ph1">&lt;xref:System.Tuple%603&gt;</ph> object inside a <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> object.</source>
          <target state="translated">17 個 tuple 由巢狀<ph id="ph1">&lt;xref:System.Tuple%603&gt;</ph>物件內<ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph>物件。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>(That is, the <ph id="ph1">&lt;xref:System.Tuple%603&gt;</ph> object is supplied as the value of the <ph id="ph2">`rest`</ph> parameter in the <ph id="ph3">&lt;xref:System.Tuple%608&gt;</ph> class constructor.) This <ph id="ph4">&lt;xref:System.Tuple%608&gt;</ph> object is, in turn, nested in an outer <ph id="ph5">&lt;xref:System.Tuple%608&gt;</ph> object.</source>
          <target state="translated">(也就是說，<ph id="ph1">&lt;xref:System.Tuple%603&gt;</ph>物件提供的值為<ph id="ph2">`rest`</ph>中的參數<ph id="ph3">&lt;xref:System.Tuple%608&gt;</ph>類別建構函式。)這<ph id="ph4">&lt;xref:System.Tuple%608&gt;</ph>物件，接著巢狀方式置於外部<ph id="ph5">&lt;xref:System.Tuple%608&gt;</ph>物件。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>(That is, the <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> object is supplied as the value of the <ph id="ph2">`rest`</ph> parameter in the outer <ph id="ph3">&lt;xref:System.Tuple%608&gt;</ph> object's class constructor.)</source>
          <target state="translated">(也就是說，<ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph>物件提供的值為<ph id="ph2">`rest`</ph>中外部參數<ph id="ph3">&lt;xref:System.Tuple%608&gt;</ph>物件的類別建構函式。)</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>You can retrieve the value of the tuple's first seven components by using the read-only <ph id="ph1">&lt;xref:System.Tuple%607.Item1%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Tuple%607.Item2%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Tuple%607.Item3%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Tuple%607.Item4%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Tuple%607.Item5%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Tuple%607.Item6%2A&gt;</ph>, and <ph id="ph7">&lt;xref:System.Tuple%607.Item7%2A&gt;</ph> instance properties.</source>
          <target state="translated">您可以擷取值的 tuple 的前七個元件所使用的唯讀<ph id="ph1">&lt;xref:System.Tuple%607.Item1%2A&gt;</ph>， <ph id="ph2">&lt;xref:System.Tuple%607.Item2%2A&gt;</ph>， <ph id="ph3">&lt;xref:System.Tuple%607.Item3%2A&gt;</ph>， <ph id="ph4">&lt;xref:System.Tuple%607.Item4%2A&gt;</ph>， <ph id="ph5">&lt;xref:System.Tuple%607.Item5%2A&gt;</ph>， <ph id="ph6">&lt;xref:System.Tuple%607.Item6%2A&gt;</ph>，和<ph id="ph7">&lt;xref:System.Tuple%607.Item7%2A&gt;</ph>執行個體屬性。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>Any additional components are nested and can be retrieved from the <ph id="ph1">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph> property.</source>
          <target state="translated">任何其他元件都巢狀，而且可以擷取從<ph id="ph1">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>In the previous example, the <ph id="ph1">&lt;xref:System.Tuple%608.Item1%2A&gt;</ph> through <ph id="ph2">&lt;xref:System.Tuple%608.Item7%2A&gt;</ph> properties retrieve the first through seventh components of the tuple.</source>
          <target state="translated">在上述範例中，<ph id="ph1">&lt;xref:System.Tuple%608.Item1%2A&gt;</ph>透過<ph id="ph2">&lt;xref:System.Tuple%608.Item7%2A&gt;</ph>屬性擷取的第一到 tuple 的第七個元件。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>The eighth through fourteenth components are contained in the tuple that is nested at the second level, and are represented by the <ph id="ph1">`Rest.Item1`</ph> through <ph id="ph2">`Rest.Item7`</ph> properties.</source>
          <target state="translated">透過第十四個元件的第八個會包含在 tuple 的第二個層級巢狀類型，而且由<ph id="ph1">`Rest.Item1`</ph>透過<ph id="ph2">`Rest.Item7`</ph>屬性。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>The fifteenth through seventeenth components are contained in the tuple that is nested at the third level, and are represented by the <ph id="ph1">`Rest.Rest.Item1`</ph> though <ph id="ph2">`Rest.Rest.Item3`</ph> properties.</source>
          <target state="translated">第十五個透過 seventeenth 元件會包含在 tuple 的第三個層級巢狀類型，而且由<ph id="ph1">`Rest.Rest.Item1`</ph>雖然<ph id="ph2">`Rest.Rest.Item3`</ph>屬性。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>Tuples are commonly used in four different ways:</source>
          <target state="translated">Tuple 常用於四種不同方式：</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>To represent a single set of data.</source>
          <target state="translated">代表單一的資料集。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>For example, a tuple can represent a database record, and its components can represent individual fields of the record.</source>
          <target state="translated">比方說，tuple 可以代表資料庫記錄，而其元件可以表示個別欄位的記錄。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>To provide easy access to, and manipulation of, a data set.</source>
          <target state="translated">提供讓您輕鬆存取、 和操作的資料集。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>To return multiple values from a method without the use of <ph id="ph1">`out`</ph> parameters (in C#) or <ph id="ph2">`ByRef`</ph> parameters (in Visual Basic).</source>
          <target state="translated">若要傳回多個值的方法，而不會使用從<ph id="ph1">`out`</ph>參數 （在 C#) 或<ph id="ph2">`ByRef`</ph>參數 （在 Visual Basic)。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>For example, the previous example returns its computed statistics, along with the city name, in a <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> object.</source>
          <target state="translated">例如前, 一個範例會傳回其計算的統計資料，以及縣 （市） 名稱中,<ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph>物件。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>To pass multiple values to a method through a single parameter.</source>
          <target state="translated">若要將多個值傳遞至方法，以透過單一參數。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>For example, the <ph id="ph1">&lt;xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType&gt;</ph> method has a single parameter that lets you supply one value to the method that the thread executes at startup.</source>
          <target state="translated">例如，<ph id="ph1">&lt;xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType&gt;</ph>方法具有單一參數，可讓您提供一個執行緒啟動時執行之方法的值。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>If you supply a <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> object as the method argument, you can supply the thread’s startup routine with seven items of data.</source>
          <target state="translated">如果您提供<ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph>物件做為方法引數中，您可以提供在執行緒啟動常式與資料的七個項目。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>The value of the tuple's first component.</source>
          <target state="translated">Tuple 第 1 個元件的值。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>The value of the tuple's second component.</source>
          <target state="translated">Tuple 第 2 個元件的值。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>The value of the tuple's third component.</source>
          <target state="translated">Tuple 第 3 個元件的值。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>The value of the tuple's fourth component</source>
          <target state="translated">Tuple 第 4 個元件的值。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>The value of the tuple's fifth component.</source>
          <target state="translated">Tuple 第 5 個元件的值。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>The value of the tuple's sixth component.</source>
          <target state="translated">Tuple 第 6 個元件的值。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>The value of the tuple's seventh component.</source>
          <target state="translated">Tuple 第 7 個元件的值。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>Any generic <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> object that contains the values of the tuple's remaining components.</source>
          <target state="translated">包含 Tuple 其餘元件之值的任何泛型 <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> 物件。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>You can also use the static <ph id="ph1">&lt;xref:System.Tuple.Create%2A?displayProperty=nameWithType&gt;</ph> method to instantiate an 8-tuple (octuple) object without having to explicitly specify the types of its components.</source>
          <target state="translated">您也可以使用靜態<ph id="ph1">&lt;xref:System.Tuple.Create%2A?displayProperty=nameWithType&gt;</ph>方法來起始 8 個 tuple (octuple) 物件而不需要明確指定其元件的類型。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Tuple.Create%2A?displayProperty=nameWithType&gt;</ph> method to instantiate an 8-tuple object that contains prime numbers that are less than 20.</source>
          <target state="translated">下列範例會使用<ph id="ph1">&lt;xref:System.Tuple.Create%2A?displayProperty=nameWithType&gt;</ph>來具現化包含會小於 20 的質數的 8 個 tuple 物件的方法。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>This is equivalent to the following call to the <ph id="ph1">&lt;xref:System.Tuple%607.%23ctor%2A&gt;</ph> class constructor.</source>
          <target state="translated">這相當於下列呼叫<ph id="ph1">&lt;xref:System.Tuple%607.%23ctor%2A&gt;</ph>類別建構函式。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>However, the static <ph id="ph1">&lt;xref:System.Tuple.Create%2A?displayProperty=nameWithType&gt;</ph> method cannot be used to create a tuple object with more than eight components.</source>
          <target state="translated">不過，靜態<ph id="ph1">&lt;xref:System.Tuple.Create%2A?displayProperty=nameWithType&gt;</ph>方法無法用於建立 tuple 物件具有八個以上的元件。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>When using the <ph id="ph1">&lt;xref:System.Tuple%608.%23ctor%2A&gt;</ph> constructor to create an n-tuple with eight or more components, you use the <ph id="ph2">`rest`</ph> parameter to create a nested n-tuple that has from one to seven components.</source>
          <target state="translated">當使用<ph id="ph1">&lt;xref:System.Tuple%608.%23ctor%2A&gt;</ph>建構函式建立 n-tuple 八個或多個元件，與您使用<ph id="ph2">`rest`</ph>參數來建立巢狀的 n 個 tuple 有一到七個元件。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>By using successive levels of nesting, you can create an n-tuple that has a virtually unlimited number of components.</source>
          <target state="translated">藉由使用連續巢狀層級，您可以建立 n-tuple 具有幾乎不受限制的多個元件。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>For example, to create a 25-tuple, you instantiate a <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> object with three levels of nesting, as follows:</source>
          <target state="translated">例如，若要建立 25 tuple，您具現化<ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph>物件的巢狀，三個層級，如下所示：</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>The outermost <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> object contains the first through seventh components.</source>
          <target state="translated">最外層<ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph>物件包含的第一到第七個元件。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>Its <ph id="ph1">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph> property provides access to an <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> object at the first level of nesting.</source>
          <target state="translated">其<ph id="ph1">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph>屬性可存取<ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph>在第一個層級的巢狀的物件。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>The outermost nested <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> object contains the eighth through fourteenth components, and its <ph id="ph2">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph> property provides access to an <ph id="ph3">&lt;xref:System.Tuple%608&gt;</ph> object at the second level of nesting.</source>
          <target state="translated">最外層的巢狀<ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph>物件包含的第八個透過第十四個元件，並將其<ph id="ph2">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph>屬性可存取<ph id="ph3">&lt;xref:System.Tuple%608&gt;</ph>在第二個層級的巢狀的物件。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> object at the second level of nesting contains the fifteenth through twenty-first  components, and its <ph id="ph2">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph> property provides access to an <ph id="ph3">&lt;xref:System.Tuple%604&gt;</ph> object at the third level of nesting.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph>在第二個層級的巢狀的物件包含的第十五個到第二十一元件及其<ph id="ph2">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph>屬性可存取<ph id="ph3">&lt;xref:System.Tuple%604&gt;</ph>第三個層級的巢狀的物件。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>The innermost tuple is a <ph id="ph1">&lt;xref:System.Tuple%604&gt;</ph> object that contains the twenty-second through twenty-fifth components.</source>
          <target state="translated">最內層的 tuple 都是<ph id="ph1">&lt;xref:System.Tuple%604&gt;</ph>包含 20 秒到第 25 元件的物件。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>The following example creates a 17-tuple that contains population data for the city of Detroit, Michigan, for each census from 1860 to 2000.</source>
          <target state="translated">下列範例會建立包含城市的底特律，Michigan，針對每個 「 人口普查 」 從 1860年到 2000年的母體擴展資料 17 tuple。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>The first component of the tuple is the city name.</source>
          <target state="translated">Tuple 中的第一個元件是城市名稱。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>The second component is the start date of the series of data, and the third component is the population at the start date.</source>
          <target state="translated">第二個元件的資料，數列的開始日期並第三個元件為母體的開始日期。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>Each subsequent component provides the population at decade intervals.</source>
          <target state="translated">每個後續元件提供十年的間隔母體擴展。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>The example uses two layers of nesting to create the 17-tuple: It defines a 7-tuple whose third through seventh components contain population data for 1860 through 1900, a nested 7-tuple that contains population data for 1910 through 1970, and an inner nested 3-tuple that contains population data for 1980 through 2000.</source>
          <target state="translated">這個範例會使用兩個圖層的巢狀建立 17 tuple： 它會定義 7-tuple 的第三到第七個元件包含母體擴展資料 1860 1900年透過巢狀的 7 個 tuple 包含透過 1970年 1910年母體擴展的資料，以及內部巢狀 3 tuple包含到 2000年 1980年母體擴展的資料。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source><ph id="ph1">&lt;paramref name="rest" /&gt;</ph> is not a generic <ph id="ph2">&lt;see langword="Tuple" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="rest" /&gt;</ph> 不是泛型 <ph id="ph2">&lt;see langword="Tuple" /&gt;</ph> 物件。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.Equals(System.Object)">
          <source>The object to compare with this instance.</source>
          <target state="translated">與這個執行個體相互比較的物件。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.Equals(System.Object)">
          <source>Returns a value that indicates whether the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object is equal to a specified object.</source>
          <target state="translated">傳回值，這個值表示目前的 <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> 物件是否等於指定的物件。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current instance is equal to the specified object; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果目前的執行個體和指定的物件相等，則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.Equals(System.Object)">
          <source>The <ph id="ph1">`obj`</ph> parameter is considered to be equal to the current instance if it meets all the following conditions:</source>
          <target state="translated"><ph id="ph1">`obj`</ph>參數會被視為等於目前的執行個體符合下列所有條件：</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.Equals(System.Object)">
          <source>It is a <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> object.</source>
          <target state="translated">它是<ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph>物件。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.Equals(System.Object)">
          <source>It has the same total number of components that are of the same types as the current instance.</source>
          <target state="translated">它有相同元件的目前執行個體相同的類型總數。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.Equals(System.Object)">
          <source>Its components (including its nested components) are equal to those of the current instance.</source>
          <target state="translated">元件 （包括其巢狀的元件） 目前的執行個體相等。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.Equals(System.Object)">
          <source>Equality is determined by the default equality comparer for each component.</source>
          <target state="translated">每個元件的預設相等比較子來判斷相等。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.Equals(System.Object)">
          <source>The following example defines five <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> objects that contain prime numbers.</source>
          <target state="translated">下列範例會定義五個<ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph>包含質數的物件。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.Equals(System.Object)">
          <source>It then compares the first object with each of the remaining objects.</source>
          <target state="translated">然後，它會比較的第一個物件，與每個剩餘的物件。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.Equals(System.Object)">
          <source>As the output shows, only the first and the last <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> objects are equal, because they have an identical number of components with identical values.</source>
          <target state="translated">如輸出所示，只有第一個和最後一個<ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph>物件相等，因為它們具有相同數目的相同值的元件。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.GetHashCode">
          <source>Calculates the hash code for the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object.</source>
          <target state="translated">計算目前 <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> 物件的雜湊碼。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.GetHashCode">
          <source>A 32-bit signed integer hash code.</source>
          <target state="translated">32 位元帶正負號的整數雜湊碼。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="P:System.Tuple`8.Item1">
          <source>Gets the value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object's first component.</source>
          <target state="translated">取得目前 <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> 物件之第一個元件的值。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item1">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object's first component.</source>
          <target state="translated">目前 <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> 物件之第一個元件的值。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item1">
          <source>You can dynamically determine the type of the <ph id="ph1">&lt;xref:System.Tuple%608.Item1%2A&gt;</ph> component in one of two ways:</source>
          <target state="translated">您可以動態決定的型別<ph id="ph1">&lt;xref:System.Tuple%608.Item1%2A&gt;</ph>元件中有兩種：</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item1">
          <source>By calling the <ph id="ph1">`GetType`</ph> method on the value that is returned by the <ph id="ph2">&lt;xref:System.Tuple%608.Item1%2A&gt;</ph> property.</source>
          <target state="translated">藉由呼叫<ph id="ph1">`GetType`</ph>方法所傳回的值<ph id="ph2">&lt;xref:System.Tuple%608.Item1%2A&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item1">
          <source>By retrieving the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> object, and retrieving the first element from the array that is returned by its <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">藉由擷取<ph id="ph1">&lt;xref:System.Type&gt;</ph>物件，代表<ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph>物件，並擷取第一個項目所傳回的陣列從其<ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item1">
          <source>The following example creates a 17-tuple object that contains population data for the city of Detroit, Michigan, from 1860 to 2000.</source>
          <target state="translated">下列範例會建立包含城市的底特律，Michigan，從 2000 1860年的母體擴展資料 17 tuple 物件。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item1">
          <source>The first component of the 17-tuple is the city name.</source>
          <target state="translated">17 個 tuple 的第一個元件是城市名稱。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item1">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Tuple%608.Item1%2A&gt;</ph> property to display the city name in the table header before displaying the population data.</source>
          <target state="translated">此範例會使用<ph id="ph1">&lt;xref:System.Tuple%608.Item1%2A&gt;</ph>屬性來顯示資料表標頭中的城市名稱之前顯示母體擴展的資料。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="P:System.Tuple`8.Item2">
          <source>Gets the value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object's second component.</source>
          <target state="translated">取得目前 <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> 物件之第二個元件的值。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item2">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object's second component.</source>
          <target state="translated">目前 <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> 物件之第二個元件的值。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item2">
          <source>You can dynamically determine the type of the <ph id="ph1">&lt;xref:System.Tuple%608.Item2%2A&gt;</ph> component in one of two ways:</source>
          <target state="translated">您可以動態決定的型別<ph id="ph1">&lt;xref:System.Tuple%608.Item2%2A&gt;</ph>元件中有兩種：</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item2">
          <source>By calling the <ph id="ph1">`GetType`</ph> method on the value that is returned by the <ph id="ph2">&lt;xref:System.Tuple%608.Item2%2A&gt;</ph> property.</source>
          <target state="translated">藉由呼叫<ph id="ph1">`GetType`</ph>方法所傳回的值<ph id="ph2">&lt;xref:System.Tuple%608.Item2%2A&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item2">
          <source>By retrieving the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> object, and retrieving the second element from the array that is returned by its <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">藉由擷取<ph id="ph1">&lt;xref:System.Type&gt;</ph>物件，代表<ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph>物件，並擷取第二個元素所傳回的陣列從其<ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item2">
          <source>The following example creates a 17-tuple object that contains population data for the city of Detroit, Michigan, from 1860 to 2000.</source>
          <target state="translated">下列範例會建立包含城市的底特律，Michigan，從 2000 1860年的母體擴展資料 17 tuple 物件。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item2">
          <source>The second component of the 17-tuple is the first year of the data series.</source>
          <target state="translated">17 個 tuple 的第二個元件是資料數列的第一年。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item2">
          <source>The example assigns the value of the <ph id="ph1">&lt;xref:System.Tuple%608.Item2%2A&gt;</ph> property to a variable, and then uses that variable to represent the year whose data is displayed.</source>
          <target state="translated">此範例將指派的值<ph id="ph1">&lt;xref:System.Tuple%608.Item2%2A&gt;</ph>變數，然後使用該變數來表示年份顯示其資料的屬性。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="P:System.Tuple`8.Item3">
          <source>Gets the value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object's third component.</source>
          <target state="translated">取得目前 <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> 物件之第三個元件的值。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item3">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object's third component.</source>
          <target state="translated">目前 <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> 物件之第三個元件的值。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item3">
          <source>You can dynamically determine the type of the <ph id="ph1">&lt;xref:System.Tuple%608.Item3%2A&gt;</ph> component in one of two ways:</source>
          <target state="translated">您可以動態決定的型別<ph id="ph1">&lt;xref:System.Tuple%608.Item3%2A&gt;</ph>元件中有兩種：</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item3">
          <source>By calling the <ph id="ph1">`GetType`</ph> method on the value that is returned by the <ph id="ph2">&lt;xref:System.Tuple%608.Item3%2A&gt;</ph> property.</source>
          <target state="translated">藉由呼叫<ph id="ph1">`GetType`</ph>方法所傳回的值<ph id="ph2">&lt;xref:System.Tuple%608.Item3%2A&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item3">
          <source>By retrieving the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> object, and retrieving the third element from the array that is returned by its <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">藉由擷取<ph id="ph1">&lt;xref:System.Type&gt;</ph>物件，代表<ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph>物件，並擷取第三個元素所傳回的陣列從其<ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item3">
          <source>The following example creates a 17-tuple object that contains population data for the city of Detroit, Michigan, from 1860 to 2000.</source>
          <target state="translated">下列範例會建立包含城市的底特律，Michigan，從 2000 1860年的母體擴展資料 17 tuple 物件。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item3">
          <source>The third component of the 17-tuple is the population in 1860.</source>
          <target state="translated">17 個 tuple 的第三個元件是 1860年中的母體擴展。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item3">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Tuple%608.Item3%2A&gt;</ph> property to display the population value and to calculate the annual rate of population change between 1860 and 1870.</source>
          <target state="translated">此範例會使用<ph id="ph1">&lt;xref:System.Tuple%608.Item3%2A&gt;</ph>屬性顯示的母體擴展的值，然後計算每年變動率的母體擴展 1860年和 1870年之間。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="P:System.Tuple`8.Item4">
          <source>Gets the value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object's fourth component.</source>
          <target state="translated">取得目前 <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> 物件之第四個元件的值。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item4">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object's fourth component.</source>
          <target state="translated">目前 <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> 物件之第四個元件的值。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item4">
          <source>You can dynamically determine the type of the <ph id="ph1">&lt;xref:System.Tuple%608.Item4%2A&gt;</ph> component in one of two ways:</source>
          <target state="translated">您可以動態決定的型別<ph id="ph1">&lt;xref:System.Tuple%608.Item4%2A&gt;</ph>元件中有兩種：</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item4">
          <source>By calling the <ph id="ph1">`GetType`</ph> method on the value that is returned by the <ph id="ph2">&lt;xref:System.Tuple%608.Item4%2A&gt;</ph> property.</source>
          <target state="translated">藉由呼叫<ph id="ph1">`GetType`</ph>方法所傳回的值<ph id="ph2">&lt;xref:System.Tuple%608.Item4%2A&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item4">
          <source>By retrieving the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> object, and retrieving the fourth element from the array that is returned by its <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">藉由擷取<ph id="ph1">&lt;xref:System.Type&gt;</ph>物件，代表<ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph>物件，並傳回陣列中擷取的第四個項目及其<ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item4">
          <source>The following example creates a 17-tuple object that contains population data for the city of Detroit, Michigan, from 1860 to 2000.</source>
          <target state="translated">下列範例會建立包含城市的底特律，Michigan，從 2000 1860年的母體擴展資料 17 tuple 物件。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item4">
          <source>The fourth component of the 17-tuple is the population in 1870.</source>
          <target state="translated">17 個 tuple 的第四個元件是 1870年中的母體擴展。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item4">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Tuple%608.Item4%2A&gt;</ph> property to display the population value and to calculate the annual rate of population change between 1870 and 1880.</source>
          <target state="translated">此範例會使用<ph id="ph1">&lt;xref:System.Tuple%608.Item4%2A&gt;</ph>屬性顯示的母體擴展的值，然後計算每年變動率的母體擴展 1870年和 1880年之間。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="P:System.Tuple`8.Item5">
          <source>Gets the value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object's fifth component.</source>
          <target state="translated">取得目前 <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> 物件之第五個元件的值。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item5">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object's fifth component.</source>
          <target state="translated">目前 <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> 物件之第五個元件的值。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item5">
          <source>You can dynamically determine the type of the <ph id="ph1">&lt;xref:System.Tuple%608.Item5%2A&gt;</ph> component in one of two ways:</source>
          <target state="translated">您可以動態決定的型別<ph id="ph1">&lt;xref:System.Tuple%608.Item5%2A&gt;</ph>元件中有兩種：</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item5">
          <source>By calling the <ph id="ph1">`GetType`</ph> method on the value that is returned by the <ph id="ph2">&lt;xref:System.Tuple%608.Item5%2A&gt;</ph> property.</source>
          <target state="translated">藉由呼叫<ph id="ph1">`GetType`</ph>方法所傳回的值<ph id="ph2">&lt;xref:System.Tuple%608.Item5%2A&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item5">
          <source>By retrieving the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> object, and retrieving the fifth element from the array that is returned by its <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">藉由擷取<ph id="ph1">&lt;xref:System.Type&gt;</ph>物件，代表<ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph>物件，並擷取的第五個項目所傳回的陣列從其<ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item5">
          <source>The following example creates a 17-tuple object that contains population data for the city of Detroit, Michigan, from 1860 to 2000.</source>
          <target state="translated">下列範例會建立包含城市的底特律，Michigan，從 2000 1860年的母體擴展資料 17 tuple 物件。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item5">
          <source>The fifth component of the 17-tuple is the population in 1880.</source>
          <target state="translated">17 個 tuple 的第五個元件是 1880年中的母體擴展。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item5">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Tuple%608.Item5%2A&gt;</ph> property to display the population value and to calculate the annual rate of population change between 1880 and 1890.</source>
          <target state="translated">此範例會使用<ph id="ph1">&lt;xref:System.Tuple%608.Item5%2A&gt;</ph>屬性顯示的母體擴展的值，然後計算每年變動率的母體擴展 1880年和 1890年之間。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="P:System.Tuple`8.Item6">
          <source>Gets the value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object's sixth component.</source>
          <target state="translated">取得目前 <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> 物件之第六個元件的值。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item6">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object's sixth component.</source>
          <target state="translated">目前 <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> 物件之第六個元件的值。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item6">
          <source>You can dynamically determine the type of the <ph id="ph1">&lt;xref:System.Tuple%608.Item6%2A&gt;</ph> component in one of two ways:</source>
          <target state="translated">您可以動態決定的型別<ph id="ph1">&lt;xref:System.Tuple%608.Item6%2A&gt;</ph>元件中有兩種：</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item6">
          <source>By calling the <ph id="ph1">`GetType`</ph> method on the value that is returned by the <ph id="ph2">&lt;xref:System.Tuple%608.Item6%2A&gt;</ph> property.</source>
          <target state="translated">藉由呼叫<ph id="ph1">`GetType`</ph>方法所傳回的值<ph id="ph2">&lt;xref:System.Tuple%608.Item6%2A&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item6">
          <source>By retrieving the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> object, and retrieving the sixth element from the array that is returned by its <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">藉由擷取<ph id="ph1">&lt;xref:System.Type&gt;</ph>物件，代表<ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph>物件，並擷取的第六個項目所傳回的陣列從其<ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item6">
          <source>The following example creates a 17-tuple object that contains population data for the city of Detroit, Michigan, from 1860 to 2000.</source>
          <target state="translated">下列範例會建立包含城市的底特律，Michigan，從 2000 1860年的母體擴展資料 17 tuple 物件。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item6">
          <source>The sixth component of the 17-tuple is the population in 1890.</source>
          <target state="translated">17 個 tuple 的第六個元件是 1890年中的母體擴展。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item6">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Tuple%608.Item6%2A&gt;</ph> property to display the population value and to calculate the annual rate of population change between 1890 and 1900.</source>
          <target state="translated">此範例會使用<ph id="ph1">&lt;xref:System.Tuple%608.Item6%2A&gt;</ph>屬性顯示的母體擴展的值，然後計算每年變動率的母體擴展 1890年和 1900年之間。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="P:System.Tuple`8.Item7">
          <source>Gets the value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object's seventh component.</source>
          <target state="translated">取得目前 <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> 物件之第七個元件的值。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item7">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object's seventh component.</source>
          <target state="translated">目前 <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> 物件之第七個元件的值。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item7">
          <source>You can dynamically determine the type of the <ph id="ph1">&lt;xref:System.Tuple%608.Item7%2A&gt;</ph> component in one of two ways:</source>
          <target state="translated">您可以動態決定的型別<ph id="ph1">&lt;xref:System.Tuple%608.Item7%2A&gt;</ph>元件中有兩種：</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item7">
          <source>By calling the <ph id="ph1">`GetType`</ph> method on the value that is returned by the <ph id="ph2">&lt;xref:System.Tuple%608.Item7%2A&gt;</ph> property.</source>
          <target state="translated">藉由呼叫<ph id="ph1">`GetType`</ph>方法所傳回的值<ph id="ph2">&lt;xref:System.Tuple%608.Item7%2A&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item7">
          <source>By retrieving the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> object, and retrieving the seventh element from the array that is returned by its <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">藉由擷取<ph id="ph1">&lt;xref:System.Type&gt;</ph>物件，代表<ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph>物件，並擷取第七個項目所傳回的陣列從其<ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item7">
          <source>The following example creates a 17-tuple object that contains population data for the city of Detroit, Michigan, from 1860 to 2000.</source>
          <target state="translated">下列範例會建立包含城市的底特律，Michigan，從 2000 1860年的母體擴展資料 17 tuple 物件。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item7">
          <source>The seventh component of the 17-tuple is the population in 1900.</source>
          <target state="translated">17 個 tuple 的第七個元件是 1900 母體擴展。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item7">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Tuple%608.Item7%2A&gt;</ph> property to display the population value and to calculate the annual rate of population change between 1900 and 1910.</source>
          <target state="translated">此範例會使用<ph id="ph1">&lt;xref:System.Tuple%608.Item7%2A&gt;</ph>屬性顯示母體擴展的值，然後計算每年介於 1900 年 1910年的母體擴展變動率。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="P:System.Tuple`8.Rest">
          <source>Gets the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object's remaining components.</source>
          <target state="translated">取得目前 <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> 物件的其餘元件。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Rest">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object's remaining components.</source>
          <target state="translated">目前 <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> 物件的其餘元件。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Rest">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph> property returns a nested <ph id="ph2">`Tuple`</ph> object that allows access to the eighth though <bpt id="p1">*</bpt>n<ept id="p1">*</ept>th components of the tuple.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph>屬性會傳回巢狀<ph id="ph2">`Tuple`</ph>物件，但是可讓您存取第八個<bpt id="p1">*</bpt>n<ept id="p1">*</ept>tuple 的第個元件。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Rest">
          <source>Depending on the total number of components in the tuple, the values of the eighth through fourteenth components can be retrieved from the nested <ph id="ph1">`Tuple`</ph> object's <ph id="ph2">&lt;xref:System.Tuple%608.Item1%2A&gt;</ph> through <ph id="ph3">&lt;xref:System.Tuple%608.Item7%2A&gt;</ph> properties.</source>
          <target state="translated">要擷取透過第十四個元件的第八個值的 tuple 中的元件總數，根據從巢狀<ph id="ph1">`Tuple`</ph>物件的<ph id="ph2">&lt;xref:System.Tuple%608.Item1%2A&gt;</ph>透過<ph id="ph3">&lt;xref:System.Tuple%608.Item7%2A&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Rest">
          <source>You can then use the <ph id="ph1">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph> property of a nested <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> object to retrieve the <ph id="ph3">`Tuple`</ph> object at the next level of nesting.</source>
          <target state="translated">然後您可以使用<ph id="ph1">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph>巢狀的屬性<ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph>物件，以擷取<ph id="ph3">`Tuple`</ph>在下一個層級的巢狀的物件。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Rest">
          <source>You can dynamically determine the number of components in a nested <ph id="ph1">`Tuple`</ph> object that is returned by the <ph id="ph2">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph> property by extracting the digit from its type name.</source>
          <target state="translated">您可以動態地決定中巢狀的元件數目<ph id="ph1">`Tuple`</ph>所傳回的物件<ph id="ph2">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph>屬性來擷取其型別名稱的數字。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Rest">
          <source>The following example provides an illustration.</source>
          <target state="translated">下列範例提供一個實例。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Rest">
          <source>The following example creates a 17-tuple object that contains population data for the city of Detroit, Michigan, from 1860 to 2000.</source>
          <target state="translated">下列範例會建立包含城市的底特律，Michigan，從 2000 1860年的母體擴展資料 17 tuple 物件。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Rest">
          <source>The seventh component of the 17-tuple is the population in 1900.</source>
          <target state="translated">17 個 tuple 的第七個元件是 1900 母體擴展。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Rest">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph> property to retrieve the values of the eighth through fourteenth components, and it uses the <ph id="ph2">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph> property of the nested <ph id="ph3">&lt;xref:System.Tuple%608&gt;</ph> object to retrieve the values of the remaining components.</source>
          <target state="translated">此範例會使用<ph id="ph1">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph>可擷取的第十四個元件，和它的第八個值的屬性使用<ph id="ph2">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph>巢狀的屬性<ph id="ph3">&lt;xref:System.Tuple%608&gt;</ph>物件來擷取其餘元件的值。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>An object to compare with the current instance.</source>
          <target state="translated">要與目前執行個體比較的物件。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>An object that provides custom rules for comparison.</source>
          <target state="translated">提供自訂規則進行比較的物件。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>Compares the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object to a specified object by using a specified comparer and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</source>
          <target state="translated">使用指定的比較子將目前的 <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> 物件和指定的物件進行比較，並且傳回一個整數，表示目前的物件在排序順序中位於指定之物件的前面、後面還是相的位置。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>A signed integer that indicates the relative position of this instance and <ph id="ph1">&lt;paramref name="other" /&gt;</ph> in the sort order, as shown in the following table.</source>
          <target state="translated">帶正負號的整數，可指出此執行個體以及排序次序中 <ph id="ph1">&lt;paramref name="other" /&gt;</ph> 的相對位置，如下表所示。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Value</source>
          <target state="translated"><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> 值</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Description</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 描述</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> A negative integer</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 負整數</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance precedes <ph id="ph3">&lt;paramref name="other" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph>這個執行個體位於 <ph id="ph3">&lt;paramref name="other" /&gt;</ph> 之前。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 零</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance and <ph id="ph3">&lt;paramref name="other" /&gt;</ph> have the same position in the sort order.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph>這個執行個體和 <ph id="ph3">&lt;paramref name="other" /&gt;</ph> 的排序位置相同。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> A positive integer</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph>正整數</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance follows <ph id="ph3">&lt;paramref name="other" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph>這個執行個體位於 <ph id="ph3">&lt;paramref name="other" /&gt;</ph> 之後。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>This member is an explicit interface implementation.</source>
          <target state="translated">這個成員是明確介面實作。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Collections.IStructuralComparable&gt;</ph> interface.</source>
          <target state="translated">只有在 <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> 執行個體轉換成 <ph id="ph2">&lt;xref:System.Collections.IStructuralComparable&gt;</ph> 介面時，才能使用這個成員。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>This method lets you define customized comparisons of <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> objects.</source>
          <target state="translated">這個方法可讓您定義的自訂的比較<ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph>物件。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>For example, you can use this method to order <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> objects based on the value of a specific component.</source>
          <target state="translated">例如，您可以使用這個方法，以順序<ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph>物件為基礎的特定元件的值。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>Although this method can be called directly, it is most commonly called by collection-sorting methods that include <ph id="ph1">&lt;xref:System.Collections.IComparer&gt;</ph> parameters to order the members of a collection.</source>
          <target state="translated">雖然可以直接呼叫這個方法，它會最常呼叫集合排序方法，包含了<ph id="ph1">&lt;xref:System.Collections.IComparer&gt;</ph>參數來排序集合的成員。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>For example, it is called by the <ph id="ph1">&lt;xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph2">&lt;xref:System.Collections.SortedList.Add%2A&gt;</ph> method of a <ph id="ph3">&lt;xref:System.Collections.SortedList&gt;</ph> object that is instantiated by using the <ph id="ph4">&lt;xref:System.Collections.SortedList.%23ctor%28System.Collections.IComparer%29?displayProperty=nameWithType&gt;</ph> constructor.</source>
          <target state="translated">例如，由呼叫<ph id="ph1">&lt;xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph2">&lt;xref:System.Collections.SortedList.Add%2A&gt;</ph>方法<ph id="ph3">&lt;xref:System.Collections.SortedList&gt;</ph>具現化所使用的物件<ph id="ph4">&lt;xref:System.Collections.SortedList.%23ctor%28System.Collections.IComparer%29?displayProperty=nameWithType&gt;</ph>建構函式。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%608.System%23Collections%23IStructuralComparable%23CompareTo%2A&gt;</ph> method is intended for use in sorting operations.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Tuple%608.System%23Collections%23IStructuralComparable%23CompareTo%2A&gt;</ph>方法僅供用於排序作業。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>It should not be used when the primary purpose of a comparison is to determine whether two objects are equal.</source>
          <target state="translated">此外，它不應該使用時比較的主要目的是要判斷兩個物件是否相等。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>To determine whether two objects are equal, call the <ph id="ph1">&lt;xref:System.Tuple%608.System%23Collections%23IStructuralEquatable%23Equals%2A&gt;</ph> method.</source>
          <target state="translated">若要判斷兩個物件是否相等，請呼叫<ph id="ph1">&lt;xref:System.Tuple%608.System%23Collections%23IStructuralEquatable%23Equals%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>The following example creates an array of <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> objects that contains population data for four U.S. cities from 1940 to 2000.</source>
          <target state="translated">下列範例會建立的陣列<ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph>包含四個美國城市 1940年從 2000 的母體擴展資料的物件。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>The octuple's first component is the city name.</source>
          <target state="translated">Octuple 的第一個元件是城市名稱。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>The remaining six components represent the population at 10-year intervals from 1940 to 2000.</source>
          <target state="translated">其餘的六個元件則代表母體擴展在 10 年的時間間隔從 1940年為 2000年。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>The <ph id="ph1">`PopulationComparer`</ph> class provides an <ph id="ph2">&lt;xref:System.Collections.IComparer&gt;</ph> implementation that allows the array of octuples to be sorted by any one of its components.</source>
          <target state="translated"><ph id="ph1">`PopulationComparer`</ph>類別提供<ph id="ph2">&lt;xref:System.Collections.IComparer&gt;</ph>實作，可讓 octuples 排序任何一種及其元件的陣列。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>Two values are provided to the <ph id="ph1">`PopulationComparer`</ph> class in its constructor: The position of the component that defines the sort order, and a <ph id="ph2">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the tuple objects should be sorted in ascending or descending order.</source>
          <target state="translated">兩個值提供給<ph id="ph1">`PopulationComparer`</ph>其建構函式中的類別： 定義排序次序中，元件的位置和<ph id="ph2">&lt;xref:System.Boolean&gt;</ph>值，指出是否應該以遞增或遞減順序排序的 tuple 物件。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>The example then displays the elements in the array in unsorted order, sorts them by the third component (the population in 1950) and displays them, and then sorts them by the eighth component (the population in 2000) and displays them.</source>
          <target state="translated">此範例會顯示未排序的順序陣列中的項目、 依第三個元件 （1950年中母體擴展） 和顯示它們，並再依第 8 個元件 （2000年中母體擴展） 並加以顯示。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;paramref name="other" /&gt;</ph> is not a <ph id="ph2">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="other" /&gt;</ph> 不是 <ph id="ph2">&lt;see cref="T:System.Tuple`8" /&gt;</ph> 物件。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>The object to compare with this instance.</source>
          <target state="translated">與這個執行個體相互比較的物件。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>An object that defines the method to use to evaluate whether the two objects are equal.</source>
          <target state="translated">物件，定義要用來評估這兩個物件是否相等的方法。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>Returns a value that indicates whether the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object is equal to a specified object based on a specified comparison method.</source>
          <target state="translated">傳回值，這個值表示依據指定的比較方法，目前的 <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> 物件是否等於指定的物件。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current instance is equal to the specified object; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果目前的執行個體和指定的物件相等，則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">這個成員是明確介面成員實作，</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Collections.IStructuralEquatable&gt;</ph> interface.</source>
          <target state="translated">只有在 <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> 執行個體轉換成 <ph id="ph2">&lt;xref:System.Collections.IStructuralEquatable&gt;</ph> 介面時，才能使用這個成員。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType&gt;</ph> implementation is called only if <ph id="ph2">`other`</ph> is not <ph id="ph3">`null`</ph>, and if it can be successfully cast (in C#) or converted (in Visual Basic) to a <ph id="ph4">&lt;xref:System.Tuple%608&gt;</ph> object that has the same total number of components (including those in nested <ph id="ph5">`Tuple`</ph> objects) of the same types as the current instance.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType&gt;</ph>才實作會呼叫<ph id="ph2">`other`</ph>不<ph id="ph3">`null`</ph>，而且如果它可以是成功轉換 （C# 中） 或 （在 Visual Basic) 轉換成<ph id="ph4">&lt;xref:System.Tuple%608&gt;</ph>物件具有相同元件總數 （包括中的巢狀<ph id="ph5">`Tuple`</ph>物件) 的目前執行個體相同的類型。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%608.System%23Collections%23IStructuralEquatable%23Equals%28System.Object%2CSystem.Collections.IEqualityComparer%29&gt;</ph> method first passes the <ph id="ph2">&lt;xref:System.Tuple%608.Item1%2A&gt;</ph> values of the <ph id="ph3">&lt;xref:System.Tuple%608&gt;</ph> objects to be compared to the <ph id="ph4">&lt;xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType&gt;</ph> implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Tuple%608.System%23Collections%23IStructuralEquatable%23Equals%28System.Object%2CSystem.Collections.IEqualityComparer%29&gt;</ph>方法的第一個階段<ph id="ph2">&lt;xref:System.Tuple%608.Item1%2A&gt;</ph>值<ph id="ph3">&lt;xref:System.Tuple%608&gt;</ph>要比較的物件<ph id="ph4">&lt;xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType&gt;</ph>實作。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>If this method call returns <ph id="ph1">`true`</ph>, the method is called again and passed the <ph id="ph2">&lt;xref:System.Tuple%608.Item2%2A&gt;</ph> values of the two <ph id="ph3">&lt;xref:System.Tuple%608&gt;</ph> objects.</source>
          <target state="translated">如果這個方法呼叫傳回<ph id="ph1">`true`</ph>，方法是呼叫一次，並傳遞<ph id="ph2">&lt;xref:System.Tuple%608.Item2%2A&gt;</ph>兩個值<ph id="ph3">&lt;xref:System.Tuple%608&gt;</ph>物件。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>This continues until the method call returns <ph id="ph1">`false`</ph> when it compares a specific pair of values, or the two <ph id="ph2">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph> values are passed to the method.</source>
          <target state="translated">這會繼續執行直到方法呼叫傳回<ph id="ph1">`false`</ph>時，它會比較值或兩個一組特定<ph id="ph2">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph>值會傳遞至方法。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>An object whose <ph id="ph1">&lt;see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /&gt;</ph> method calculates the hash code of the current <ph id="ph2">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object.</source>
          <target state="translated">其 <ph id="ph1">&lt;see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /&gt;</ph> 方法可以計算目前 <ph id="ph2">&lt;see cref="T:System.Tuple`8" /&gt;</ph> 物件之雜湊碼的物件。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>Calculates the hash code for the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object by using a specified computation method.</source>
          <target state="translated">使用指定的計算方法，計算目前 <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> 物件的雜湊碼。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>A 32-bit signed integer hash code.</source>
          <target state="translated">32 位元帶正負號的整數雜湊碼。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">這個成員是明確介面成員實作，</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Collections.IStructuralEquatable&gt;</ph> interface.</source>
          <target state="translated">只有在 <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> 執行個體轉換成 <ph id="ph2">&lt;xref:System.Collections.IStructuralEquatable&gt;</ph> 介面時，才能使用這個成員。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>The method simply wraps a call to the <ph id="ph1">`comparer`</ph> object's <ph id="ph2">&lt;xref:System.Collections.IEqualityComparer.GetHashCode%2A?displayProperty=nameWithType&gt;</ph> implementation.</source>
          <target state="translated">方法只會包裝呼叫<ph id="ph1">`comparer`</ph>物件的<ph id="ph2">&lt;xref:System.Collections.IEqualityComparer.GetHashCode%2A?displayProperty=nameWithType&gt;</ph>實作。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>The algorithm used to compute the hash code should return the same hash code for two <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> objects that are considered to be equal.</source>
          <target state="translated">用來計算雜湊程式碼的演算法應該會傳回相同的雜湊程式碼，其中兩個<ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph>會被視為相等的物件。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source>An object to compare with the current instance.</source>
          <target state="translated">要與目前執行個體比較的物件。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source>Compares the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object to a specified object and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</source>
          <target state="translated">將目前的 <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> 物件與指定的物件比較，並傳回可指出目前物件在排序次序中，是否在指定物件之前、之後或者相同之位置的整數。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source>A signed integer that indicates the relative position of this instance and <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> in the sort order, as shown in the following table.</source>
          <target state="translated">帶正負號的整數，可指出此執行個體以及排序次序中 <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> 的相對位置，如下表所示。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Value</source>
          <target state="translated"><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> 值</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Description</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 描述</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> A negative integer</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 負整數</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance precedes <ph id="ph3">&lt;paramref name="obj" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph>這個執行個體位於 <ph id="ph3">&lt;paramref name="obj" /&gt;</ph> 之前。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 零</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance and <ph id="ph3">&lt;paramref name="obj" /&gt;</ph> have the same position in the sort order.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph>這個執行個體和 <ph id="ph3">&lt;paramref name="obj" /&gt;</ph> 的排序位置相同。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> A positive integer</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph>正整數</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance follows <ph id="ph3">&lt;paramref name="obj" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph>這個執行個體位於 <ph id="ph3">&lt;paramref name="obj" /&gt;</ph> 之後。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">這個成員是明確介面成員實作，</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.IComparable&gt;</ph> interface.</source>
          <target state="translated">只有在 <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> 執行個體轉換成 <ph id="ph2">&lt;xref:System.IComparable&gt;</ph> 介面時，才能使用這個成員。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source>This method provides the <ph id="ph1">&lt;xref:System.IComparable.CompareTo%2A?displayProperty=nameWithType&gt;</ph> implementation for the <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> class.</source>
          <target state="translated">這個方法會提供<ph id="ph1">&lt;xref:System.IComparable.CompareTo%2A?displayProperty=nameWithType&gt;</ph>實作<ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph>類別。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source>Although the method can be called directly, it is most commonly called by the default overloads of collection-sorting methods, such as <ph id="ph1">&lt;xref:System.Array.Sort%28System.Array%29?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.SortedList.Add%2A?displayProperty=nameWithType&gt;</ph>, to order the members of a collection.</source>
          <target state="translated">雖然可以直接呼叫的方法，但是最常呼叫此方法的集合排序的預設多載方法，例如<ph id="ph1">&lt;xref:System.Array.Sort%28System.Array%29?displayProperty=nameWithType&gt;</ph>和<ph id="ph2">&lt;xref:System.Collections.SortedList.Add%2A?displayProperty=nameWithType&gt;</ph>，若要排序之集合的成員。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%608.System%23IComparable%23CompareTo%2A&gt;</ph> method is intended for use in sorting operations.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Tuple%608.System%23IComparable%23CompareTo%2A&gt;</ph>方法僅供用於排序作業。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source>It should not be used when the primary purpose of a comparison is to determine whether two objects are equal.</source>
          <target state="translated">此外，它不應該使用時比較的主要目的是要判斷兩個物件是否相等。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source>To determine whether two objects are equal, call the <ph id="ph1">&lt;xref:System.Tuple%608.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">若要判斷兩個物件是否相等，請呼叫<ph id="ph1">&lt;xref:System.Tuple%608.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source>This method uses the default object comparer to compare each component.</source>
          <target state="translated">這個方法會使用預設物件比較子來比較每個元件。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source>The following example creates an array of octuples whose components are integers that contain a range of prime numbers.</source>
          <target state="translated">下列範例會建立的 octuples 元件都是包含範圍的質數的整數的陣列。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source>The example displays the elements of the array in unsorted order, sorts the array, and then displays the array in sorted order.</source>
          <target state="translated">範例顯示陣列項目的未排序的順序，排序陣列，並接著會顯示依排序順序的陣列。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source>The output shows that the array has been sorted by <ph id="ph1">&lt;xref:System.Tuple%608.Item1%2A&gt;</ph>, or the tuple's first component.</source>
          <target state="translated">輸出顯示已依照陣列<ph id="ph1">&lt;xref:System.Tuple%608.Item1%2A&gt;</ph>，或 tuple 的第一個元件。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source>Note that the example does not directly call the <ph id="ph1">&lt;xref:System.Tuple%608.System%23IComparable%23CompareTo%28System.Object%29&gt;</ph> method.</source>
          <target state="translated">請注意，此範例不會直接呼叫<ph id="ph1">&lt;xref:System.Tuple%608.System%23IComparable%23CompareTo%28System.Object%29&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source>This method is called implicitly by the <ph id="ph1">&lt;xref:System.Array.Sort%28System.Array%29&gt;</ph> method for each element in the array.</source>
          <target state="translated">這個方法會隱含地呼叫<ph id="ph1">&lt;xref:System.Array.Sort%28System.Array%29&gt;</ph>陣列中每個項目的方法。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;paramref name="obj" /&gt;</ph> is not a <ph id="ph2">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="obj" /&gt;</ph> 不是 <ph id="ph2">&lt;see cref="T:System.Tuple`8" /&gt;</ph> 物件。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source>The index of the specified <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> element.</source>
          <target state="translated">指定的 <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> 項目索引。</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source><bpt id="p1">&lt;c&gt;</bpt>index<ept id="p1">&lt;/c&gt;</ept> can range from 0 for <ph id="ph1">&lt;see langword="Item1" /&gt;</ph> to one less than the number of elements in the <ph id="ph2">&lt;see langword="Tuple" /&gt;</ph>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>index<ept id="p1">&lt;/c&gt;</ept> 的範圍可以從 <ph id="ph1">&lt;see langword="Item1" /&gt;</ph> 的 0，到小於 <ph id="ph2">&lt;see langword="Tuple" /&gt;</ph> 的元素數目。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source>Gets the value of the specified <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> element.</source>
          <target state="translated">取得指定的 <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> 項目值。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source>The value of the <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> element at the specified position.</source>
          <target state="translated">位在指定位置的 <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> 項目值。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%608.System%23Runtime%23CompilerServices%23ITuple%23Item%2A?displayProperty=nameWithType&gt;</ph> property is an explicit interface implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Tuple%608.System%23Runtime%23CompilerServices%23ITuple%23Item%2A?displayProperty=nameWithType&gt;</ph>屬性是明確介面實作。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source>To call it, you must cast or convert the <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> object to an <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.ITuple&gt;</ph> interface object.</source>
          <target state="translated">若要呼叫它，您必須決定要轉型或轉換<ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph>物件<ph id="ph2">&lt;xref:System.Runtime.CompilerServices.ITuple&gt;</ph>介面物件。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" uid="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> 小於 0。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" uid="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source>-or-</source>
          <target state="translated">-或-</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is greater than or equal to <ph id="ph2">&lt;see cref="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Length" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> 大於或等於 <ph id="ph2">&lt;see cref="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Length" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" uid="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Length">
          <source>Gets the number of elements in the <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph>.</source>
          <target state="translated">取得 <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> 中的項目數目。</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Length">
          <source>The number of elements in the <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> 中的項目數。</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Length">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%608.System%23Runtime%23CompilerServices%23ITuple%23Length%2A&gt;</ph> property is an explicit interface implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Tuple%608.System%23Runtime%23CompilerServices%23ITuple%23Length%2A&gt;</ph>屬性是明確介面實作。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Length">
          <source>To call it, you must cast or convert the <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> type to an <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.ITuple&gt;</ph> interface object.</source>
          <target state="translated">若要呼叫它，您必須決定要轉型或轉換<ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph>類型<ph id="ph2">&lt;xref:System.Runtime.CompilerServices.ITuple&gt;</ph>介面物件。</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.ToString">
          <source>Returns a string that represents the value of this <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> instance.</source>
          <target state="translated">傳回字串，表示這個 <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> 執行個體的值。</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.ToString">
          <source>The string representation of this <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object.</source>
          <target state="translated">此 <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> 物件的字串表示。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.ToString">
          <source>The string returned by this method takes the form (<bpt id="p1">*</bpt>Item1<ept id="p1">*</ept>, <bpt id="p2">*</bpt>Item2<ept id="p2">*</ept>, <bpt id="p3">*</bpt>Item3<ept id="p3">*</ept>, <bpt id="p4">*</bpt>Item4<ept id="p4">*</ept>, <ph id="ph1">`Item5, Item6, Item7`</ph>, <bpt id="p5">*</bpt>Item8<ept id="p5">*</ept>…), where <bpt id="p6">*</bpt>Item1<ept id="p6">*</ept>, <bpt id="p7">*</bpt>Item2<ept id="p7">*</ept>, <bpt id="p8">*</bpt>Item3<ept id="p8">*</ept>, <bpt id="p9">*</bpt>Item4<ept id="p9">*</ept>, <bpt id="p10">*</bpt>Item5<ept id="p10">*</ept>, <bpt id="p11">*</bpt>Item6<ept id="p11">*</ept>, and <bpt id="p12">*</bpt>Item7<ept id="p12">*</ept> represent the values of the <ph id="ph2">&lt;xref:System.Tuple%608.Item1%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Tuple%608.Item2%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Tuple%608.Item3%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Tuple%608.Item4%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Tuple%608.Item5%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Tuple%608.Item6%2A&gt;</ph>, and <ph id="ph8">&lt;xref:System.Tuple%608.Item7%2A&gt;</ph> properties.</source>
          <target state="translated">這個方法所傳回的字串形式 (<bpt id="p1">*</bpt>Item1<ept id="p1">*</ept>， <bpt id="p2">*</bpt>Item2<ept id="p2">*</ept>， <bpt id="p3">*</bpt>Item3<ept id="p3">*</ept>， <bpt id="p4">*</bpt>Item4<ept id="p4">*</ept>， <ph id="ph1">`Item5, Item6, Item7`</ph>， <bpt id="p5">*</bpt>Item8<ept id="p5">*</ept>...)，其中<bpt id="p6">*</bpt>Item1<ept id="p6">*</ept>， <bpt id="p7">*</bpt>Item2<ept id="p7">*</ept>， <bpt id="p8">*</bpt>Item3<ept id="p8">*</ept>， <bpt id="p9">*</bpt>Item4<ept id="p9">*</ept>， <bpt id="p10">*</bpt>Item5<ept id="p10">*</ept>， <bpt id="p11">*</bpt>Item6<ept id="p11">*</ept>，和<bpt id="p12">*</bpt>Item7<ept id="p12">*</ept>代表的值<ph id="ph2">&lt;xref:System.Tuple%608.Item1%2A&gt;</ph>， <ph id="ph3">&lt;xref:System.Tuple%608.Item2%2A&gt;</ph>， <ph id="ph4">&lt;xref:System.Tuple%608.Item3%2A&gt;</ph>， <ph id="ph5">&lt;xref:System.Tuple%608.Item4%2A&gt;</ph>， <ph id="ph6">&lt;xref:System.Tuple%608.Item5%2A&gt;</ph>， <ph id="ph7">&lt;xref:System.Tuple%608.Item6%2A&gt;</ph>，和<ph id="ph8">&lt;xref:System.Tuple%608.Item7%2A&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.ToString">
          <source><bpt id="p1">*</bpt>Item8<ept id="p1">*</ept> represents the value of the <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> object's <ph id="ph2">`Next.Item1`</ph> property.</source>
          <target state="translated"><bpt id="p1">*</bpt>Item8<ept id="p1">*</ept>代表的值<ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph>物件的<ph id="ph2">`Next.Item1`</ph>屬性。</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.ToString">
          <source>The value of any additional nested components follow <bpt id="p1">*</bpt>Item8<ept id="p1">*</ept>.</source>
          <target state="translated">任何其他的巢狀元件的值遵循<bpt id="p1">*</bpt>Item8<ept id="p1">*</ept>。</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.ToString">
          <source>If any of the property values is <ph id="ph1">`null`</ph>, it is represented as <ph id="ph2">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">如果有任何屬性值為<ph id="ph1">`null`</ph>，則會呈現為<ph id="ph2">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.ToString">
          <source>The following example creates a 17-tuple that contains population data for the city of Detroit, Michigan, from 1860 to 1900.</source>
          <target state="translated">下列範例會建立包含城市的底特律，Michigan，從 1900 1860年的母體擴展資料 17 tuple。</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.ToString">
          <source>It then uses the <ph id="ph1">&lt;xref:System.Tuple%608.ToString%2A&gt;</ph> method to display the tuple's data.</source>
          <target state="translated">然後它會使用<ph id="ph1">&lt;xref:System.Tuple%608.ToString%2A&gt;</ph>方法，以顯示資料的 tuple。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>