<Type Name="Object" FullName="System.Object">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="15f433904f15b52fc408db54f7fd65e20a71b739" />
    <Meta Name="ms.sourcegitcommit" Value="3907f9a5780957d9c85af2e54c0a5bc2a5bf19ab" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/14/2018" />
    <Meta Name="ms.locfileid" Value="34174245" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit object" />
  <TypeSignature Language="DocId" Value="T:System.Object" />
  <TypeSignature Language="VB.NET" Value="Public Class Object" />
  <TypeSignature Language="C++ CLI" Value="public ref class Object" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDual)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="5bd2a-101">支援 .NET Framework 類別階層架構中的所有類別，提供衍生類別的低階服務。</span>
      <span class="sxs-lookup">
        <span data-stu-id="5bd2a-101">Supports all classes in the .NET Framework class hierarchy and provides low-level services to derived classes.</span>
      </span>
      <span data-ttu-id="5bd2a-102">這是 .NET Framework 中所有類別的超基底類別，是類別階層架構的根。</span>
      <span class="sxs-lookup">
        <span data-stu-id="5bd2a-102">This is the ultimate base class of all classes in the .NET Framework; it is the root of the type hierarchy.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5bd2a-103">語言通常不需要宣告繼承自一個類別<xref:System.Object>因為繼承是隱含的。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-103">Languages typically do not require a class to declare inheritance from <xref:System.Object> because the inheritance is implicit.</span></span>  
  
 <span data-ttu-id="5bd2a-104">因為.NET Framework 中的所有類別都衍生自<xref:System.Object>，每個方法中定義<xref:System.Object>類別系統中是可用於所有物件。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-104">Because all classes in the .NET Framework are derived from <xref:System.Object>, every method defined in the <xref:System.Object> class is available in all objects in the system.</span></span> <span data-ttu-id="5bd2a-105">衍生類別可以和覆寫某些方法，包括：</span><span class="sxs-lookup"><span data-stu-id="5bd2a-105">Derived classes can and do override some of these methods, including:</span></span>  
  
-   <span data-ttu-id="5bd2a-106"><xref:System.Object.Equals%2A> -支援物件之間的比較。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-106"><xref:System.Object.Equals%2A> - Supports comparisons between objects.</span></span>  
  
-   <span data-ttu-id="5bd2a-107"><xref:System.Object.Finalize%2A> -自動收回物件前，請執行清除作業。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-107"><xref:System.Object.Finalize%2A> - Performs cleanup operations before an object is automatically reclaimed.</span></span>  
  
-   <span data-ttu-id="5bd2a-108"><xref:System.Object.GetHashCode%2A> 產生的數字對應到物件的值以支援雜湊資料表的使用。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-108"><xref:System.Object.GetHashCode%2A> - Generates a number corresponding to the value of the object to support the use of a hash table.</span></span>  
  
-   <span data-ttu-id="5bd2a-109"><xref:System.Object.ToString%2A> -製造人類看得懂的文字字串描述類別的執行個體。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-109"><xref:System.Object.ToString%2A> - Manufactures a human-readable text string that describes an instance of the class.</span></span>  
  
## <a name="performance-considerations"></a><span data-ttu-id="5bd2a-110">效能考量</span><span class="sxs-lookup"><span data-stu-id="5bd2a-110">Performance Considerations</span></span>  
 <span data-ttu-id="5bd2a-111">如果您正在設計的類別，例如集合，必須處理任何類型的物件，您可以建立接受的執行個體的類別成員<xref:System.Object>類別。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-111">If you are designing a class, such as a collection, that must handle any type of object, you can create class members that accept instances of the <xref:System.Object> class.</span></span> <span data-ttu-id="5bd2a-112">不過，boxing 和 unboxing 類型的程序會帶來效能成本。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-112">However, the process of boxing and unboxing a type carries a performance cost.</span></span> <span data-ttu-id="5bd2a-113">如果您知道您的新類別會經常處理某些值類型您可以使用其中一個策略 boxing 成本降到最低。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-113">If you know your new class will frequently handle certain value types you can use one of two tactics to minimize the cost of boxing.</span></span>  
  
-   <span data-ttu-id="5bd2a-114">建立一般的方法可接受<xref:System.Object>型別，以及一組特定類型的方法多載會接受每個您預期您經常處理的類別的實值型別。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-114">Create a general method that accepts an <xref:System.Object> type, and a set of type-specific method overloads that accept each value type you expect your class to frequently handle.</span></span> <span data-ttu-id="5bd2a-115">如果特定類型的方法可接受呼叫的參數型別，就會發生任何 boxing，會叫用特定類型的方法。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-115">If a type-specific method exists that accepts the calling parameter type, no boxing occurs and the type-specific method is invoked.</span></span> <span data-ttu-id="5bd2a-116">如果沒有符合呼叫的參數型別沒有方法引數，參數會進行 boxed 處理，會叫用一般的方法。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-116">If there is no method argument that matches the calling parameter type, the parameter is boxed and the general method is invoked.</span></span>  
  
-   <span data-ttu-id="5bd2a-117">設計您的類型和其成員使用泛型。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-117">Design your type and its members to use generics.</span></span> <span data-ttu-id="5bd2a-118">當您建立類別的執行個體，並指定泛型型別引數時，common language runtime 建立封閉泛型類型。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-118">The common language runtime creates a closed generic type when you create an instance of your class and specify a generic type argument.</span></span> <span data-ttu-id="5bd2a-119">泛型方法型別而異，而且會叫用沒有 boxing 呼叫的參數。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-119">The generic method is type-specific and can be invoked without boxing the calling parameter.</span></span>  
  
 <span data-ttu-id="5bd2a-120">雖然有時候是為了開發一般用途的類別，可接受並傳回<xref:System.Object>型別，可以改善效能，也提供特定類型的類別來處理常用的型別。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-120">Although it is sometimes necessary to develop general purpose classes that accept and return <xref:System.Object> types, you can improve performance by also providing a type-specific class to handle a frequently used type.</span></span> <span data-ttu-id="5bd2a-121">例如，提供類別的特定設定和取得布林值會排除 boxing 和 unboxing 的布林值的成本。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-121">For example, providing a class that is specific to setting and getting Boolean values eliminates the cost of boxing and unboxing Boolean values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5bd2a-122">下列範例會定義衍生自點類型<xref:System.Object>類別並覆寫虛擬方法的許多<xref:System.Object>類別。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-122">The following example defines a Point type derived from the <xref:System.Object> class and overrides many of the virtual methods of the <xref:System.Object> class.</span></span> <span data-ttu-id="5bd2a-123">此外，此範例示範如何呼叫許多靜態和執行個體的方法<xref:System.Object>類別。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-123">In addition, the example shows how to call many of the static and instance methods of the <xref:System.Object> class.</span></span>  
  
 [!code-cpp[ObjectX#1](~/samples/snippets/cpp/VS_Snippets_CLR/ObjectX/cpp/ObjectX.cpp#1)]
 [!code-csharp[ObjectX#1](~/samples/snippets/csharp/VS_Snippets_CLR/ObjectX/CS/ObjectX.cs#1)]
 [!code-vb[ObjectX#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ObjectX/vb/objectX.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="5bd2a-124">公用靜態 (<see langword="Shared" />在 Visual Basic 中) 這種類型的成員都具備執行緒安全。</span>
      <span class="sxs-lookup">
        <span data-stu-id="5bd2a-124">Public static (<see langword="Shared" /> in Visual Basic) members of this type are thread safe.</span>
      </span>
      <span data-ttu-id="5bd2a-125">不保證執行個體成員是安全執行緒。</span>
      <span class="sxs-lookup">
        <span data-stu-id="5bd2a-125">Instance members are not guaranteed to be thread-safe.</span>
      </span>
    </threadsafe>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Object ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Object.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Object();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="5bd2a-126">初始化 <see cref="T:System.Object" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5bd2a-126">Initializes a new instance of the <see cref="T:System.Object" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5bd2a-127">這個建構函式會呼叫建構函式在衍生類別中，但它也可用來直接建立的執行個體<xref:System.Object>類別。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-127">This constructor is called by constructors in derived classes, but it can also be used to directly create an instance of the <xref:System.Object> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="5bd2a-128">判斷兩個物件執行個體是否相等。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5bd2a-128">Determines whether two object instances are equal.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public virtual bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Object.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="5bd2a-129">要與目前物件比較的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5bd2a-129">The object to compare with the current object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5bd2a-130">判斷指定的物件是否等於目前的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5bd2a-130">Determines whether the specified object is equal to the current object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5bd2a-131">如果指定的物件等於目前的物件，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5bd2a-131">
              <see langword="true" /> if the specified object  is equal to the current object; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5bd2a-132">比較目前的執行個體之間的類型和`obj`參數，取決於目前的執行個體是參考類型或實值類型。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-132">The type of comparison between the current instance and the `obj` parameter depends on whether the current instance is a reference type or a value type.</span></span>  
  
-   <span data-ttu-id="5bd2a-133">如果目前的執行個體是參考類型，<xref:System.Object.Equals%28System.Object%29>方法測試參考是否相等，而呼叫<xref:System.Object.Equals%28System.Object%29>方法相當於呼叫<xref:System.Object.ReferenceEquals%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-133">If the current instance is a reference type, the <xref:System.Object.Equals%28System.Object%29> method tests for reference equality, and a call to the <xref:System.Object.Equals%28System.Object%29> method is equivalent to a call to the <xref:System.Object.ReferenceEquals%2A> method.</span></span> <span data-ttu-id="5bd2a-134">參考相等，表示要比較的物件變數會參照相同的物件。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-134">Reference equality means that the object variables that are compared refer to the same object.</span></span> <span data-ttu-id="5bd2a-135">下列範例說明這類比較的結果。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-135">The following example illustrates the result of such a comparison.</span></span> <span data-ttu-id="5bd2a-136">它會定義`Person`類別，這是參考類型，並呼叫`Person`類別建構函式來產生兩個新`Person`物件`person1a`和`person2`，必須有相同的值。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-136">It defines a `Person` class, which is a reference type, and calls the `Person` class constructor to instantiate two new `Person` objects, `person1a` and `person2`, which have the same value.</span></span> <span data-ttu-id="5bd2a-137">它也會將指派`person1a`給另一個物件變數， `person1b`。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-137">It also assigns `person1a` to another object variable, `person1b`.</span></span> <span data-ttu-id="5bd2a-138">做為範例所示，從輸出`person1a`和`person1b`相等，因為其參考相同的物件。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-138">As the output from the example shows, `person1a` and `person1b` are equal because they reference the same object.</span></span> <span data-ttu-id="5bd2a-139">不過，`person1a`和`person2`不相等，雖然它們有相同的值。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-139">However, `person1a` and `person2` are not equal, although they have the same value.</span></span>  
  
     [!code-csharp[System.Object.Equals#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.equals/cs/equals_ref.cs#2)]
     [!code-vb[System.Object.Equals#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.equals/vb/equals_ref.vb#2)]  
  
-   <span data-ttu-id="5bd2a-140">如果目前的執行個體是實值類型，<xref:System.Object.Equals%28System.Object%29>方法測試值是否相等。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-140">If the current instance is a value type, the <xref:System.Object.Equals%28System.Object%29> method tests for value equality.</span></span> <span data-ttu-id="5bd2a-141">值相等的意義如下：</span><span class="sxs-lookup"><span data-stu-id="5bd2a-141">Value equality means the following:</span></span>  
  
    -   <span data-ttu-id="5bd2a-142">兩個物件都屬於相同的型別。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-142">The two objects are of the same type.</span></span> <span data-ttu-id="5bd2a-143">如下列範例所示，<xref:System.Byte>有 12 個值的物件不等於<xref:System.Int32>有其值為 12，因為兩個物件具有不同的執行階段類型的物件。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-143">As the following example shows, a <xref:System.Byte> object that has a value of 12 does not equal an <xref:System.Int32> object that has a value of 12, because the two objects have different run-time types.</span></span>  
  
         [!code-csharp[System.Object.Equals#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.equals/cs/equals_val1.cs#3)]
         [!code-vb[System.Object.Equals#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.equals/vb/equals_val1.vb#3)]  
  
    -   <span data-ttu-id="5bd2a-144">兩個物件的公用和私用欄位的值相等。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-144">The values of the public and private fields of the two objects are equal.</span></span> <span data-ttu-id="5bd2a-145">下列範例會測試的值相等。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-145">The following example tests for value equality.</span></span> <span data-ttu-id="5bd2a-146">它會定義`Person`結構，也就是實值類型，並呼叫`Person`類別建構函式來產生兩個新`Person`物件`person1`和`person2`，必須有相同的值。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-146">It defines a `Person` structure, which is a value type, and calls the `Person` class constructor to instantiate two new `Person` objects, `person1` and `person2`, which have the same value.</span></span> <span data-ttu-id="5bd2a-147">範例輸出所示，不過兩個物件變數參考不同的物件，`person1`和`person2`相等，因為它們具有相同的值與私人`personName`欄位。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-147">As the output from the example shows, although the two object variables refer to different objects, `person1` and `person2` are equal because they have the same value for the private `personName` field.</span></span>  
  
         [!code-csharp[System.Object.Equals#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.equals/cs/equals_val2.cs#4)]
         [!code-vb[System.Object.Equals#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.equals/vb/equals_val2.vb#4)]  
  
 <span data-ttu-id="5bd2a-148">因為<xref:System.Object>類別是.NET Framework 中中的所有類型的基底類別<xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType>方法提供對於所有其他類型的預設相等比較。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-148">Because the <xref:System.Object> class is the base class for all types in the .NET Framework, the <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> method provides the default equality comparison for all other types.</span></span> <span data-ttu-id="5bd2a-149">不過，型別通常覆寫<xref:System.Object.Equals%2A>方法，以實作值是否相等。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-149">However, types often override the <xref:System.Object.Equals%2A> method to implement value equality.</span></span> <span data-ttu-id="5bd2a-150">如需詳細資訊，請參閱 < 附註的呼叫端和注意事項繼承者區段。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-150">For more information, see the Notes for Callers and Notes for Inheritors sections.</span></span>  
  
## <a name="notes-for-the-includewrtincludeswrt-mdmd"></a><span data-ttu-id="5bd2a-151">附註 [!INCLUDE[wrt](~/includes/wrt-md.md)]</span><span class="sxs-lookup"><span data-stu-id="5bd2a-151">Notes for the [!INCLUDE[wrt](~/includes/wrt-md.md)]</span></span>  
 <span data-ttu-id="5bd2a-152">當您呼叫<xref:System.Object.Equals%28System.Object%29>中之類別的方法多載[!INCLUDE[wrt](~/includes/wrt-md.md)]，它提供的預設行為不覆寫的類別<xref:System.Object.Equals%28System.Object%29>。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-152">When you call the <xref:System.Object.Equals%28System.Object%29> method overload on a class in the [!INCLUDE[wrt](~/includes/wrt-md.md)], it provides the default behavior for classes that don’t override <xref:System.Object.Equals%28System.Object%29>.</span></span> <span data-ttu-id="5bd2a-153">這是.NET Framework 所提供的支援[!INCLUDE[wrt](~/includes/wrt-md.md)](請參閱[.NET Framework 支援的 Windows 市集應用程式和 Windows 執行階段](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md))。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-153">This is part of the support that the .NET Framework provides for the [!INCLUDE[wrt](~/includes/wrt-md.md)] (see [.NET Framework Support for Windows Store Apps and Windows Runtime](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)).</span></span> <span data-ttu-id="5bd2a-154">中的類別[!INCLUDE[wrt](~/includes/wrt-md.md)]不繼承<xref:System.Object>，且不要只實作目前<xref:System.Object.Equals%28System.Object%29>方法。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-154">Classes in the [!INCLUDE[wrt](~/includes/wrt-md.md)] don’t inherit <xref:System.Object>, and currently don’t implement an <xref:System.Object.Equals%28System.Object%29> method.</span></span> <span data-ttu-id="5bd2a-155">不過，它們便會顯示有<xref:System.Object.ToString%2A>， <xref:System.Object.Equals%28System.Object%29>，和<xref:System.Object.GetHashCode%2A>時您用於您的 C# 或 Visual Basic 程式碼，以及.NET Framework 提供的預設行為，這些方法的方法。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-155">However, they appear to have <xref:System.Object.ToString%2A>, <xref:System.Object.Equals%28System.Object%29>, and <xref:System.Object.GetHashCode%2A> methods when you use them in your C# or Visual Basic code, and the .NET Framework provides the default behavior for these methods.</span></span>  
  
> [!NOTE]
>  [!INCLUDE[wrt](~/includes/wrt-md.md)]<span data-ttu-id="5bd2a-156"> 以 C# 或 Visual Basic 撰寫的類別可以覆寫<xref:System.Object.Equals%28System.Object%29>方法多載。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-156"> classes that are written in C# or Visual Basic can override the <xref:System.Object.Equals%28System.Object%29> method overload.</span></span>  
  
## <a name="notes-for-callers"></a><span data-ttu-id="5bd2a-157">呼叫端資訊</span><span class="sxs-lookup"><span data-stu-id="5bd2a-157">Notes for Callers</span></span>  
 <span data-ttu-id="5bd2a-158">經常衍生的類別覆寫<xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType>方法，以實作值是否相等。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-158">Derived classes frequently override the <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> method to implement value equality.</span></span> <span data-ttu-id="5bd2a-159">此外，型別也經常會提供額外的強型別多載來`Equals`方法，通常是藉由實作<xref:System.IEquatable%601>介面。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-159">In addition, types also frequently provide an additional strongly typed overload to the `Equals` method, typically by implementing the <xref:System.IEquatable%601> interface.</span></span> <span data-ttu-id="5bd2a-160">當您呼叫`Equals`方法來測試是否相等，您應該知道是否會覆寫目前的執行個體<xref:System.Object.Equals%2A?displayProperty=nameWithType>並了解如何在特定呼叫`Equals`方法已解決。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-160">When you call the `Equals` method to test for equality, you should know whether the current instance overrides <xref:System.Object.Equals%2A?displayProperty=nameWithType> and understand how a particular call to an `Equals` method is resolved.</span></span> <span data-ttu-id="5bd2a-161">否則，您可能執行的測試相等，不同於您想要的結果，而且方法可能會傳回非預期的值。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-161">Otherwise, you may be performing a test for equality that is different from what you intended, and the method may return an unexpected value.</span></span>  
  
 <span data-ttu-id="5bd2a-162">下列範例提供一個實例。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-162">The following example provides an illustration.</span></span> <span data-ttu-id="5bd2a-163">它會具現化三個<xref:System.Text.StringBuilder>物件與相同的字串，並接著四個呼叫`Equals`方法。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-163">It instantiates three <xref:System.Text.StringBuilder> objects with identical strings, and then makes four calls to `Equals` methods.</span></span> <span data-ttu-id="5bd2a-164">第一個方法呼叫傳回`true`，和剩餘的三個傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-164">The first method call returns `true`, and the remaining three return `false`.</span></span>  
  
 [!code-csharp[System.Object.Equals#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.equals/cs/equalssb1.cs#5)]
 [!code-vb[System.Object.Equals#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.equals/vb/equalssb1.vb#5)]  
  
 <span data-ttu-id="5bd2a-165">在第一個案例中，強型別<xref:System.Text.StringBuilder.Equals%28System.Text.StringBuilder%29?displayProperty=nameWithType>方法多載，測試值是否相等，會呼叫。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-165">In the first case, the strongly typed <xref:System.Text.StringBuilder.Equals%28System.Text.StringBuilder%29?displayProperty=nameWithType> method overload, which tests for value equality, is called.</span></span> <span data-ttu-id="5bd2a-166">因為字串指派給這兩個<xref:System.Text.StringBuilder>物件是否相等，則方法會傳回`true`。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-166">Because the strings assigned to the two <xref:System.Text.StringBuilder> objects are equal, the method returns `true`.</span></span> <span data-ttu-id="5bd2a-167">不過，<xref:System.Text.StringBuilder>不會覆寫<xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-167">However, <xref:System.Text.StringBuilder> does not override <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType>.</span></span> <span data-ttu-id="5bd2a-168">因為這個緣故時,<xref:System.Text.StringBuilder>物件轉換成<xref:System.Object>，當<xref:System.Text.StringBuilder>執行個體指派給變數的型別<xref:System.Object>，和當<xref:System.Object.Equals%28System.Object%2CSystem.Object%29?displayProperty=nameWithType>方法會傳遞兩個<xref:System.Text.StringBuilder>的物件，預設值<xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType>方法呼叫。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-168">Because of this, when the <xref:System.Text.StringBuilder> object is cast to an <xref:System.Object>, when a <xref:System.Text.StringBuilder> instance is assigned to a variable of type <xref:System.Object>, and when the <xref:System.Object.Equals%28System.Object%2CSystem.Object%29?displayProperty=nameWithType> method is passed two <xref:System.Text.StringBuilder> objects, the default <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> method is called.</span></span> <span data-ttu-id="5bd2a-169">因為<xref:System.Text.StringBuilder>是參考類型，這相當於傳遞兩個<xref:System.Text.StringBuilder>物件加入至<xref:System.Object.ReferenceEquals%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-169">Because <xref:System.Text.StringBuilder> is a reference type, this is equivalent to passing the two <xref:System.Text.StringBuilder> objects to the <xref:System.Object.ReferenceEquals%2A> method.</span></span> <span data-ttu-id="5bd2a-170">雖然這三個<xref:System.Text.StringBuilder>物件包含完全相同的字串，它們會參考至三個相異的物件。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-170">Although all three <xref:System.Text.StringBuilder> objects contain identical strings, they refer to three distinct objects.</span></span> <span data-ttu-id="5bd2a-171">如此一來，這些三個方法呼叫傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-171">As a result, these three method calls return `false`.</span></span>  
  
 <span data-ttu-id="5bd2a-172">您可以藉由呼叫比較目前物件與另一個物件的參考相等性<xref:System.Object.ReferenceEquals%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-172">You can compare the current object to another object for reference equality by calling the <xref:System.Object.ReferenceEquals%2A> method.</span></span> <span data-ttu-id="5bd2a-173">在 Visual Basic 中，您也可以使用`is`關鍵字 (例如， `If Me Is otherObject Then ...`)。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-173">In Visual Basic, you can also use the `is` keyword (for example, `If Me Is otherObject Then ...`).</span></span>  
  
## <a name="notes-for-inheritors"></a><span data-ttu-id="5bd2a-174">繼承者注意事項</span><span class="sxs-lookup"><span data-stu-id="5bd2a-174">Notes for Inheritors</span></span>  
 <span data-ttu-id="5bd2a-175">當您定義自己的型別時，該類型繼承所定義的功能`Equals`其基底型別的方法。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-175">When you define your own type, that type inherits the functionality defined by the `Equals` method of its base type.</span></span> <span data-ttu-id="5bd2a-176">下表列出的預設實作`Equals`方法在.NET Framework 類型的主要類別。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-176">The following table lists the default implementation of the `Equals` method for the major categories of types in the .NET Framework.</span></span>  
  
|<span data-ttu-id="5bd2a-177">型別分類</span><span class="sxs-lookup"><span data-stu-id="5bd2a-177">Type category</span></span>|<span data-ttu-id="5bd2a-178">所定義的相等</span><span class="sxs-lookup"><span data-stu-id="5bd2a-178">Equality defined by</span></span>|<span data-ttu-id="5bd2a-179">註解</span><span class="sxs-lookup"><span data-stu-id="5bd2a-179">Comments</span></span>|  
|-------------------|-------------------------|--------------|  
|<span data-ttu-id="5bd2a-180">直接衍生自類別 <xref:System.Object></span><span class="sxs-lookup"><span data-stu-id="5bd2a-180">Class derived directly from <xref:System.Object></span></span>|<xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType>|<span data-ttu-id="5bd2a-181">參考相等。相當於呼叫<xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-181">Reference equality; equivalent to calling <xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType>.</span></span>|  
|<span data-ttu-id="5bd2a-182">結構</span><span class="sxs-lookup"><span data-stu-id="5bd2a-182">Structure</span></span>|<xref:System.ValueType.Equals%2A?displayProperty=nameWithType>|<span data-ttu-id="5bd2a-183">值相等。直接位元組的比較或欄位的欄位比較使用反映。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-183">Value equality; either direct byte-by-byte comparison or field-by-field comparison using reflection.</span></span>|  
|<span data-ttu-id="5bd2a-184">列舉</span><span class="sxs-lookup"><span data-stu-id="5bd2a-184">Enumeration</span></span>|<xref:System.Enum.Equals%2A?displayProperty=nameWithType>|<span data-ttu-id="5bd2a-185">值必須有相同的列舉類型與相同的基礎值。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-185">Values must have the same enumeration type and the same underlying value.</span></span>|  
|<span data-ttu-id="5bd2a-186">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="5bd2a-186">Delegate</span></span>|<xref:System.MulticastDelegate.Equals%2A?displayProperty=nameWithType>|<span data-ttu-id="5bd2a-187">委派必須具有相同的引動過程清單的相同類型。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-187">Delegates must have the same type with identical invocation lists.</span></span>|  
|<span data-ttu-id="5bd2a-188">介面</span><span class="sxs-lookup"><span data-stu-id="5bd2a-188">Interface</span></span>|<xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType>|<span data-ttu-id="5bd2a-189">參考相等。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-189">Reference equality.</span></span>|  
  
 <span data-ttu-id="5bd2a-190">對於實值類型，您應該一律覆寫<xref:System.Object.Equals%2A>，因為依賴反映的等號比較測試會提供效能不佳。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-190">For a value type, you should always override <xref:System.Object.Equals%2A>, because tests for equality that rely on reflection offer poor performance.</span></span> <span data-ttu-id="5bd2a-191">您也可以覆寫的預設實作<xref:System.Object.Equals%2A>參考類型的值是否相等，而不是參考相等測試，以及定義精確意義的值是否相等。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-191">You can also override the default implementation of <xref:System.Object.Equals%2A> for reference types to test for value equality instead of reference equality and to define the precise meaning of value equality.</span></span> <span data-ttu-id="5bd2a-192">這類實作<xref:System.Object.Equals%2A>傳回`true`如果兩個物件擁有相同的值，即使它們不是相同的執行個體。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-192">Such implementations of <xref:System.Object.Equals%2A> return `true` if the two objects have the same value, even if they are not the same instance.</span></span> <span data-ttu-id="5bd2a-193">型別實作器決定何者構成物件的值，但是它通常是部分或所有儲存的資料物件的執行個體變數中。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-193">The type's implementer decides what constitutes an object's value, but it is typically some or all the data stored in the instance variables of the object.</span></span> <span data-ttu-id="5bd2a-194">例如，值<xref:System.String>物件為基礎的字元字串;<xref:System.String.Equals%28System.Object%29?displayProperty=nameWithType>方法覆寫<xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType>方法以傳回`true`任何兩個字串含有相同的順序中的相同字元的執行個體。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-194">For example, the value of a <xref:System.String> object is based on the characters of the string; the <xref:System.String.Equals%28System.Object%29?displayProperty=nameWithType> method overrides the <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> method to return `true` for any two string instances that contain the same characters in the same order.</span></span>  
  
 <span data-ttu-id="5bd2a-195">下列範例示範如何覆寫<xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType>方法來測試值是否相等。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-195">The following example shows how to override the <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> method to test for value equality.</span></span> <span data-ttu-id="5bd2a-196">它會覆寫<xref:System.Object.Equals%2A>方法`Person`類別。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-196">It overrides the <xref:System.Object.Equals%2A> method for the `Person` class.</span></span> <span data-ttu-id="5bd2a-197">如果`Person`接受等號比較、 其基底類別實作兩個`Person`會等於只有當參考單一物件，這些物件。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-197">If `Person` accepted its base class implementation of equality, two `Person` objects would be equal only if they referenced a single object.</span></span> <span data-ttu-id="5bd2a-198">不過，在此情況下，兩個`Person`物件是否相等，如果它們有相同的值`Person.Id`屬性。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-198">However, in this case, two `Person` objects are equal if they have the same value for the `Person.Id` property.</span></span>  
  
 [!code-csharp[System.Object.Equals#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.equals/cs/equalsoverride.cs#6)]
 [!code-vb[System.Object.Equals#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.equals/vb/equalsoverride.vb#6)]  
  
 <span data-ttu-id="5bd2a-199">除了覆寫<xref:System.Object.Equals%2A>，您可以實作<xref:System.IEquatable%601>介面，以提供強型別的測試是否相等。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-199">In addition to overriding <xref:System.Object.Equals%2A>, you can implement the <xref:System.IEquatable%601> interface to provide a strongly typed test for equality.</span></span>  
  
 <span data-ttu-id="5bd2a-200">下列陳述式必須為 true 的所有實作<xref:System.Object.Equals%28System.Object%29>方法。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-200">The following statements must be true for all implementations of the <xref:System.Object.Equals%28System.Object%29> method.</span></span> <span data-ttu-id="5bd2a-201">在清單中， `x`， `y`，和`z`代表物件參考未**null**。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-201">In the list, `x`, `y`, and `z` represent object references that are not **null**.</span></span>  
  
-   <span data-ttu-id="5bd2a-202">`x.Equals(x)` 傳回`true`，除非在涉及浮點類型的情況下。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-202">`x.Equals(x)` returns `true`, except in cases that involve floating-point types.</span></span> <span data-ttu-id="5bd2a-203">請參閱 ISO/IEC/IEEE 60559:2011，資訊技術-微處理器系統-浮點算術。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-203">See ISO/IEC/IEEE 60559:2011, Information technology -- Microprocessor Systems -- Floating-Point arithmetic.</span></span>  
  
-   <span data-ttu-id="5bd2a-204">`x.Equals(y)` 傳回相同的值做為`y.Equals(x)`。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-204">`x.Equals(y)` returns the same value as `y.Equals(x)`.</span></span>  
  
-   <span data-ttu-id="5bd2a-205">`x.Equals(y)` 傳回`true`如果兩個`x`和`y`是`NaN`。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-205">`x.Equals(y)` returns `true` if both `x` and `y` are `NaN`.</span></span>  
  
-   <span data-ttu-id="5bd2a-206">如果`(x.Equals(y) && y.Equals(z))`傳回`true`，然後`x.Equals(z)`傳回`true`。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-206">If `(x.Equals(y) && y.Equals(z))` returns `true`, then `x.Equals(z)` returns `true`.</span></span>  
  
-   <span data-ttu-id="5bd2a-207">後續呼叫`x.Equals(y)`傳回相同的值，只要參考的物件`x`和`y`不會修改。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-207">Successive calls to `x.Equals(y)` return the same value as long as the objects referenced by `x` and `y` are not modified.</span></span>  
  
-   <span data-ttu-id="5bd2a-208">`x.Equals(null)` 會傳回 `false`。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-208">`x.Equals(null)` returns `false`.</span></span>  
  
 <span data-ttu-id="5bd2a-209">實作<xref:System.Object.Equals%2A>必須不會擲回例外狀況，他們應該一律會傳回的值。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-209">Implementations of <xref:System.Object.Equals%2A> must not throw exceptions; they should always return a value.</span></span> <span data-ttu-id="5bd2a-210">例如，如果`obj`是`null`、<xref:System.Object.Equals%2A>方法應傳回`false`而不是擲回<xref:System.ArgumentNullException>。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-210">For example, if `obj` is `null`, the <xref:System.Object.Equals%2A> method should return `false` instead of throwing an <xref:System.ArgumentNullException>.</span></span>  
  
 <span data-ttu-id="5bd2a-211">覆寫時，請遵循下列方針<xref:System.Object.Equals%28System.Object%29>:</span><span class="sxs-lookup"><span data-stu-id="5bd2a-211">Follow these guidelines when overriding <xref:System.Object.Equals%28System.Object%29>:</span></span>  
  
-   <span data-ttu-id="5bd2a-212">型別都會實作<xref:System.IComparable>必須覆寫<xref:System.Object.Equals%28System.Object%29>。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-212">Types that implement <xref:System.IComparable> must override <xref:System.Object.Equals%28System.Object%29>.</span></span>  
  
-   <span data-ttu-id="5bd2a-213">類型覆寫<xref:System.Object.Equals%28System.Object%29>也必須覆寫<xref:System.Object.GetHashCode%2A>，否則雜湊表可能無法正常運作。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-213">Types that override <xref:System.Object.Equals%28System.Object%29> must also override <xref:System.Object.GetHashCode%2A>; otherwise, hash tables  might not work correctly.</span></span>  
  
-   <span data-ttu-id="5bd2a-214">您應該考慮實作<xref:System.IEquatable%601>介面，以支援強型別測試是否相等。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-214">You should consider implementing the <xref:System.IEquatable%601> interface to support strongly typed tests for equality.</span></span> <span data-ttu-id="5bd2a-215">您<xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType>實作應該傳回一致的結果<xref:System.Object.Equals%2A>。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-215">Your <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> implementation should return results that are consistent with <xref:System.Object.Equals%2A>.</span></span>  
  
-   <span data-ttu-id="5bd2a-216">如果您的程式語言支援運算子多載，而且您多載等號比較運算子，針對指定的型別，您也必須覆寫<xref:System.Object.Equals%28System.Object%29>方法以傳回與等號比較運算子相同的結果。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-216">If your programming language supports operator overloading and you overload the equality operator for a given type, you must also override the <xref:System.Object.Equals%28System.Object%29> method to return the same result as the equality operator.</span></span> <span data-ttu-id="5bd2a-217">這有助於確保會使用該類別程式庫程式碼<xref:System.Object.Equals%2A>(例如<xref:System.Collections.ArrayList>和<xref:System.Collections.Hashtable>) 行為與等號比較運算子由應用程式程式碼的方式一致的方式。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-217">This  helps ensure that class library code that uses <xref:System.Object.Equals%2A> (such as <xref:System.Collections.ArrayList> and <xref:System.Collections.Hashtable>) behaves in a manner that is consistent with the way the equality operator is used by application code.</span></span>  
  
### <a name="guidelines-for-reference-types"></a><span data-ttu-id="5bd2a-218">參考類型的指導方針</span><span class="sxs-lookup"><span data-stu-id="5bd2a-218">Guidelines for Reference Types</span></span>  
 <span data-ttu-id="5bd2a-219">下列指導方針適用於覆寫<xref:System.Object.Equals%28System.Object%29>是參考型別：</span><span class="sxs-lookup"><span data-stu-id="5bd2a-219">The following guidelines apply to overriding <xref:System.Object.Equals%28System.Object%29> for a reference type:</span></span>  
  
-   <span data-ttu-id="5bd2a-220">請考慮覆寫<xref:System.Object.Equals%2A>如果類型的語意是基礎類型所代表的某些值為基礎。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-220">Consider overriding <xref:System.Object.Equals%2A> if the semantics of the type are based on the fact that the type represents some value(s).</span></span>  
  
-   <span data-ttu-id="5bd2a-221">大部分的參考型別必須多載等號比較運算子，即使它們覆寫<xref:System.Object.Equals%2A>。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-221">Most reference types must not overload the equality operator, even if they override <xref:System.Object.Equals%2A>.</span></span> <span data-ttu-id="5bd2a-222">不過，如果您實作的參考類型，這是具有實值語意，例如複數類型，您必須覆寫等號比較運算子。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-222">However, if you are implementing a reference type that is intended to have value semantics, such as a complex number type, you must override the equality operator.</span></span>  
  
-   <span data-ttu-id="5bd2a-223">您不應覆寫<xref:System.Object.Equals%2A>可變動參考類型上。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-223">You should not override <xref:System.Object.Equals%2A> on a mutable reference type.</span></span> <span data-ttu-id="5bd2a-224">這是因為覆寫<xref:System.Object.Equals%2A>需要，您也會覆寫<xref:System.Object.GetHashCode%2A>方法，如前一節中討論。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-224">This is because overriding <xref:System.Object.Equals%2A> requires that you also override the <xref:System.Object.GetHashCode%2A> method, as discussed in the previous section.</span></span> <span data-ttu-id="5bd2a-225">這表示可變動參考類型的執行個體的雜湊程式碼可以在其生命週期，這可能導致遺失物件雜湊表中變更。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-225">This means that the hash code of an instance of a mutable reference type can change during its lifetime, which can cause the object to be lost in a hash table.</span></span>  
  
### <a name="guidelines-for-value-types"></a><span data-ttu-id="5bd2a-226">實值類型的指導方針</span><span class="sxs-lookup"><span data-stu-id="5bd2a-226">Guidelines for Value Types</span></span>  
 <span data-ttu-id="5bd2a-227">下列指導方針適用於覆寫<xref:System.Object.Equals%28System.Object%29>的實值類型：</span><span class="sxs-lookup"><span data-stu-id="5bd2a-227">The following guidelines apply to overriding <xref:System.Object.Equals%28System.Object%29> for a value type:</span></span>  
  
-   <span data-ttu-id="5bd2a-228">如果您要定義實值型別，其中包含一個或多個欄位的值是參考類型，您應該覆寫<xref:System.Object.Equals%28System.Object%29>。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-228">If you are defining a value type that includes one or more fields whose values are reference types, you should override <xref:System.Object.Equals%28System.Object%29>.</span></span> <span data-ttu-id="5bd2a-229"><xref:System.Object.Equals%28System.Object%29>提供實作<xref:System.ValueType>執行位元組的比較的值類型欄位所有實值類型，但它會使用反映來執行其欄位包含參考類型的實值類型欄位的欄位比較。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-229">The <xref:System.Object.Equals%28System.Object%29> implementation provided by <xref:System.ValueType> performs a byte-by-byte comparison for value types whose fields are all value types, but it uses reflection to perform a field-by-field comparison of value types whose fields include reference types.</span></span>  
  
-   <span data-ttu-id="5bd2a-230">如果您覆寫<xref:System.Object.Equals%2A>和您的開發語言支援運算子多載，您必須多載等號比較運算子。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-230">If you override <xref:System.Object.Equals%2A> and your development language supports operator overloading, you must overload the equality operator.</span></span>  
  
-   <span data-ttu-id="5bd2a-231">您應該實作<xref:System.IEquatable%601>介面。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-231">You should implement the <xref:System.IEquatable%601> interface.</span></span> <span data-ttu-id="5bd2a-232">呼叫的強型別<xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType>方法可以避免 boxing`obj`引數。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-232">Calling the strongly typed <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> method avoids boxing the `obj` argument.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5bd2a-233">下列範例所示`Point`類別會覆寫<xref:System.Object.Equals%2A>方法以提供實值相等和`Point3D`類別衍生自`Point`。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-233">The following example shows a `Point` class that overrides the <xref:System.Object.Equals%2A> method to provide value equality, and a `Point3D` class that is derived from `Point`.</span></span> <span data-ttu-id="5bd2a-234">因為`Point`會覆寫<xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType>來測試值是否相等，<xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType>不會呼叫方法。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-234">Because `Point` overrides <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> to test for value equality, the <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> method is not called.</span></span> <span data-ttu-id="5bd2a-235">不過，`Point3D.Equals`呼叫`Point.Equals`因為`Point`實作<xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType>方式提供值是否相等。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-235">However, `Point3D.Equals` calls `Point.Equals` because `Point` implements <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> in a manner that provides value equality.</span></span>  
  
 [!code-csharp[ECMA-System.Object.Equals2#1](~/samples/snippets/csharp/VS_Snippets_CLR/ECMA-System.Object.Equals2/CS/equals2.cs#1)]
 [!code-vb[ECMA-System.Object.Equals2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ECMA-System.Object.Equals2/VB/equals2.vb#1)]  
  
 <span data-ttu-id="5bd2a-236">`Point.Equals`方法會檢查並確定`obj`引數不是**null**並且會參考與此物件相同類型的執行個體。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-236">The `Point.Equals` method checks to make sure that the `obj` argument is not **null** and that it references an instance of the same type as this object.</span></span> <span data-ttu-id="5bd2a-237">如果其中一個檢查失敗，則方法會傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-237">If either check fails, the method returns `false`.</span></span>  
  
 <span data-ttu-id="5bd2a-238">`Point.Equals`方法呼叫<xref:System.Object.GetType%2A>方法，以判斷兩個物件的執行階段類型是否相同。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-238">The `Point.Equals` method calls the <xref:System.Object.GetType%2A> method to determine whether the run-time types of the two objects are identical.</span></span> <span data-ttu-id="5bd2a-239">如果此方法使用表單的核取`obj is Point`在 C# 或`TryCast(obj, Point)`在 Visual Basic 中，會傳回核取`true`萬一其中`obj`的衍生類別的執行個體`Point`，即使`obj`和目前執行個體不是相同的執行階段類型。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-239">If the method used a check of the form `obj is Point` in C# or `TryCast(obj, Point)` in Visual Basic, the check would return `true` in cases where `obj` is an instance of a derived class of `Point`, even though `obj` and the current instance are not of the same run-time type.</span></span> <span data-ttu-id="5bd2a-240">確認兩個物件都屬於相同類型，方法轉換`obj`輸入`Point`並傳回比較兩個物件的執行個體欄位的結果。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-240">Having verified that both objects are of the same type, the method casts `obj` to type `Point` and returns the result of comparing the instance fields of the two objects.</span></span>  
  
 <span data-ttu-id="5bd2a-241">在`Point3D.Equals`，繼承`Point.Equals`方法，它會覆寫<xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType>，任何其他項目完成之前，會叫用。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-241">In `Point3D.Equals`, the inherited `Point.Equals` method, which overrides <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType>, is invoked before anything else is done.</span></span> <span data-ttu-id="5bd2a-242">因為`Point3D`是密封的類別 (`NotInheritable`在 Visual Basic 中)，在表單中的核取`obj is Point`在 C# 或`TryCast(obj, Point)`在 Visual Basic 中是以確保足夠`obj`是`Point3D`物件。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-242">Because `Point3D` is a sealed class (`NotInheritable` in Visual Basic), a check in the form `obj is Point` in C# or `TryCast(obj, Point)` in Visual Basic is adequate to ensure that `obj` is a `Point3D` object.</span></span> <span data-ttu-id="5bd2a-243">如果是`Point3D`物件，它會轉換為`Point`物件，並傳遞至基底類別實作<xref:System.Object.Equals%2A>。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-243">If it is a `Point3D` object, it is cast to a `Point` object and passed to the base class implementation of <xref:System.Object.Equals%2A>.</span></span> <span data-ttu-id="5bd2a-244">只有當繼承`Point.Equals`方法會傳回`true`未方法比較`z`執行個體導入衍生類別中的欄位。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-244">Only when the inherited `Point.Equals` method returns `true` does the method compare the `z` instance fields introduced in the derived class.</span></span>  
  
 <span data-ttu-id="5bd2a-245">下列範例會定義`Rectangle`類別，以在內部實作做為兩個矩形`Point`物件。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-245">The following example defines a `Rectangle` class that internally implements a rectangle as two `Point` objects.</span></span> <span data-ttu-id="5bd2a-246">`Rectangle`類別也會覆寫<xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType>提供的值是否相等。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-246">The `Rectangle` class also overrides <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> to provide for value equality.</span></span>  
  
 [!code-csharp[ECMA-System.Object.Equals3#1](~/samples/snippets/csharp/VS_Snippets_CLR/ECMA-System.Object.Equals3/CS/equals3.cs#1)]
 [!code-vb[ECMA-System.Object.Equals3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ECMA-System.Object.Equals3/VB/equals3.vb#1)]  
  
 <span data-ttu-id="5bd2a-247">某些語言，例如 C# 和 Visual Basic 支援運算子多載。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-247">Some languages such as C# and Visual Basic support operator overloading.</span></span> <span data-ttu-id="5bd2a-248">當類型多載等號比較運算子時，它也必須覆寫<xref:System.Object.Equals%28System.Object%29>方法以提供相同的功能。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-248">When a type overloads the equality operator, it must also override the <xref:System.Object.Equals%28System.Object%29> method to provide the same functionality.</span></span> <span data-ttu-id="5bd2a-249">這通常會透過撰寫<xref:System.Object.Equals%28System.Object%29>方面的多載等號比較運算子，如下列範例所示的方法。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-249">This is typically accomplished by writing the <xref:System.Object.Equals%28System.Object%29> method in terms of the overloaded equality operator, as in the following example.</span></span>  
  
 [!code-csharp[ECMA-System.Object.Equals4#1](~/samples/snippets/csharp/VS_Snippets_CLR/ECMA-System.Object.Equals4/CS/equals4.cs#1)]
 [!code-vb[ECMA-System.Object.Equals4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ECMA-System.Object.Equals4/vb/equals4.vb#1)]  
  
 <span data-ttu-id="5bd2a-250">因為`Complex`是實值類型，不能衍生自。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-250">Because `Complex` is a value type, it cannot be derived from.</span></span>  <span data-ttu-id="5bd2a-251">因此，若要覆寫<xref:System.Object.Equals%28System.Object%29>方法實作不需要呼叫<xref:System.Object.GetType%2A>若要判斷精確的執行階段輸入的每個物件，但改為使用`is`C# 中的運算子或`TypeOf`檢查類型的VisualBasic中的運算子`obj`參數。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-251">Therefore, the override to <xref:System.Object.Equals%28System.Object%29> method need not call <xref:System.Object.GetType%2A> to determine the precise run-time type of each object, but can instead use the `is` operator in C# or the `TypeOf` operator in Visual Basic to check the type of the `obj` parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.ReferenceEquals(System.Object,System.Object)" />
        <altmember cref="M:System.Object.GetHashCode" />
        <altmember cref="T:System.ValueType" />
        <altmember cref="T:System.IComparable" />
        <altmember cref="T:System.Collections.ArrayList" />
        <altmember cref="T:System.Collections.Hashtable" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static bool Equals (object objA, object objB);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Equals(object objA, object objB) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Object.Equals(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equals (objA As Object, objB As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Equals(System::Object ^ objA, System::Object ^ objB);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objA" Type="System.Object" />
        <Parameter Name="objB" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="objA">
          <span data-ttu-id="5bd2a-252">要比較的第一個物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5bd2a-252">The first object to compare.</span>
          </span>
        </param>
        <param name="objB">
          <span data-ttu-id="5bd2a-253">要比較的第二個物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5bd2a-253">The second object to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5bd2a-254">判斷指定的物件執行個體是否視為相等。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5bd2a-254">Determines whether the specified object instances are considered equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5bd2a-255">如果物件可視為相等則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5bd2a-255">
              <see langword="true" /> if the objects are considered equal; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="5bd2a-256">如果 <paramref name="objA" /> 和 <paramref name="objB" /> 皆為 **null**，則這個方法會傳回 <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5bd2a-256">If both <paramref name="objA" /> and <paramref name="objB" /> are **null**, the method returns <see langword="true" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5bd2a-257">靜態<xref:System.Object.Equals%28System.Object%2CSystem.Object%29>方法表示兩個物件是否，`objA`和`objB`，是否相等。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-257">The static <xref:System.Object.Equals%28System.Object%2CSystem.Object%29> method indicates whether two objects, `objA` and  `objB`, are equal.</span></span> <span data-ttu-id="5bd2a-258">它也可讓您測試其值的物件**null**是否相等。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-258">It also enables you to test objects whose value is **null** for equality.</span></span> <span data-ttu-id="5bd2a-259">它會比較`objA`和`objB`是否相等，如下所示：</span><span class="sxs-lookup"><span data-stu-id="5bd2a-259">It compares `objA` and `objB` for equality as follows:</span></span>  
  
-   <span data-ttu-id="5bd2a-260">它會判斷兩個物件是否表示相同的物件參考。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-260">It determines whether the two objects represent the same object reference.</span></span> <span data-ttu-id="5bd2a-261">如果沒有的話，則方法會傳回`true`。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-261">If they do, the method returns `true`.</span></span> <span data-ttu-id="5bd2a-262">這個測試就相當於呼叫<xref:System.Object.ReferenceEquals%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-262">This test is equivalent to calling the <xref:System.Object.ReferenceEquals%2A> method.</span></span> <span data-ttu-id="5bd2a-263">此外，如果這兩個`objA`和`objB`是**null**，方法會傳回`true`。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-263">In addition, if both `objA` and `objB` are **null**, the method returns `true`.</span></span>  
  
-   <span data-ttu-id="5bd2a-264">它會判斷是否可能是`objA`或`objB`是**null**。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-264">It determines whether either `objA` or `objB` is **null**.</span></span> <span data-ttu-id="5bd2a-265">因此，它會傳回如果`false`。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-265">If so, it returns `false`.</span></span>  
  
-   <span data-ttu-id="5bd2a-266">如果兩個物件不代表相同的物件參考，而且兩者都**null**，它會呼叫`objA`。`Equals`(`objB`)，並傳回結果。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-266">If the two objects do not represent the same object reference and neither is **null**, it calls `objA`.`Equals`(`objB`) and returns the result.</span></span> <span data-ttu-id="5bd2a-267">這表示如果`objA`會覆寫<xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType>呼叫方法，此覆寫。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-267">This means that if `objA` overrides the <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> method, this override is called.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5bd2a-268">下列範例說明<xref:System.Object.Equals%28System.Object%2CSystem.Object%29>方法，並比較它與<xref:System.Object.ReferenceEquals%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-268">The following example illustrates the <xref:System.Object.Equals%28System.Object%2CSystem.Object%29> method and compares it with the <xref:System.Object.ReferenceEquals%2A> method.</span></span>  
  
 [!code-csharp[System.Object.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.equals/cs/equals_static2.cs#1)]
 [!code-vb[System.Object.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.equals/vb/equals_static2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.Equals(System.Object)" />
        <altmember cref="M:System.Object.ReferenceEquals(System.Object,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~Object ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Object.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!Object ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="5bd2a-269">在記憶體回收開始前，允許物件嘗試釋放資源，並執行其他清除作業。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5bd2a-269">Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5bd2a-270"><xref:System.Object.Finalize%2A>方法用來在終結物件之前，目前的物件所持有的 unmanaged 資源上執行清除作業。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-270">The <xref:System.Object.Finalize%2A> method is used to perform cleanup operations on unmanaged resources held by the current object before the object is destroyed.</span></span> <span data-ttu-id="5bd2a-271">此方法受到保護，因此只能透過這個類別或衍生類別存取。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-271">The method is protected and therefore is accessible only through this class or through a derived class.</span></span>  
  
 <span data-ttu-id="5bd2a-272">本節內容：</span><span class="sxs-lookup"><span data-stu-id="5bd2a-272">In this section:</span></span>  
  
-   [<span data-ttu-id="5bd2a-273">最終處理的運作方式</span><span class="sxs-lookup"><span data-stu-id="5bd2a-273">How finalization works</span></span>](#How)  
  
-   [<span data-ttu-id="5bd2a-274">實作者注意事項</span><span class="sxs-lookup"><span data-stu-id="5bd2a-274">Notes for implementers</span></span>](#Notes)  
  
-   [<span data-ttu-id="5bd2a-275">SafeHandle 替代方法</span><span class="sxs-lookup"><span data-stu-id="5bd2a-275">The SafeHandle alternative</span></span>](#SafeHandle)  
  
<a name="How"></a>   
## <a name="how-finalization-works"></a><span data-ttu-id="5bd2a-276">最終處理的運作方式</span><span class="sxs-lookup"><span data-stu-id="5bd2a-276">How finalization works</span></span>  
 <span data-ttu-id="5bd2a-277"><xref:System.Object>類別提供的任何實作<xref:System.Object.Finalize%2A>方法，以及記憶體回收行程不會將標示類型衍生自<xref:System.Object>進行最終處理它們會覆寫除非<xref:System.Object.Finalize%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-277">The <xref:System.Object> class provides no implementation for the <xref:System.Object.Finalize%2A> method, and the garbage collector does not mark types derived from <xref:System.Object> for finalization unless they override the <xref:System.Object.Finalize%2A> method.</span></span>  
  
 <span data-ttu-id="5bd2a-278">如果型別沒有覆寫<xref:System.Object.Finalize%2A>方法，記憶體回收行程會將每個執行個體類型的項目加入稱為最終處理佇列的內部結構。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-278">If a type does override the <xref:System.Object.Finalize%2A> method, the garbage collector adds an entry for each instance of the type to an internal structure called the finalization queue.</span></span> <span data-ttu-id="5bd2a-279">最終處理佇列包含 managed 堆積記憶體回收行程回收其記憶體之前，必須執行其最終處理程式碼中的所有物件的項目。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-279">The finalization queue contains entries for all the objects in the managed heap whose finalization code must run before the garbage collector can reclaim their memory.</span></span> <span data-ttu-id="5bd2a-280">記憶體回收行程再呼叫<xref:System.Object.Finalize%2A>在下列情況下自動的方法：</span><span class="sxs-lookup"><span data-stu-id="5bd2a-280">The garbage collector then calls the <xref:System.Object.Finalize%2A> method automatically under the following conditions:</span></span>  
  
-   <span data-ttu-id="5bd2a-281">記憶體回收行程已探索物件是無法存取，除非物件已從最終處理豁免呼叫之後<xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-281">After the garbage collector has discovered that an object is inaccessible, unless the object has been exempted from finalization by a call to the <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> method.</span></span>  
  
-   <span data-ttu-id="5bd2a-282">在關閉應用程式定義域，除非該物件是豁免最終處理。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-282">During shutdown of an application domain, unless the object is exempt from finalization.</span></span> <span data-ttu-id="5bd2a-283">在關機時完成甚至仍然可以存取的物件。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-283">During shutdown, even objects that are still accessible are finalized.</span></span>  
  
 <span data-ttu-id="5bd2a-284"><xref:System.Object.Finalize%2A> 會自動呼叫一次在給定的執行個體，除非物件已重新登錄使用一種機制，例如<xref:System.GC.ReRegisterForFinalize%2A?displayProperty=nameWithType>和<xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType>方法尚未後續呼叫。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-284"><xref:System.Object.Finalize%2A> is automatically called only once on a given instance, unless the object is re-registered by using a mechanism such as <xref:System.GC.ReRegisterForFinalize%2A?displayProperty=nameWithType> and the <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> method has not been subsequently called.</span></span>  
  
 <span data-ttu-id="5bd2a-285"><xref:System.Object.Finalize%2A> 作業會有下列限制：</span><span class="sxs-lookup"><span data-stu-id="5bd2a-285"><xref:System.Object.Finalize%2A> operations have the following limitations:</span></span>  
  
-   <span data-ttu-id="5bd2a-286">當執行完成項的確切時間未定義。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-286">The exact time when the finalizer executes is undefined.</span></span> <span data-ttu-id="5bd2a-287">若要確保您類別的執行個體實作的決定性的資源釋放`Close`方法，或提供<xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>實作。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-287">To ensure deterministic release of resources for instances of your class, implement a `Close` method or provide a <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation.</span></span>  
  
-   <span data-ttu-id="5bd2a-288">即使一個物件參考的其他兩個物件的完成項不保證任何特定的順序執行。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-288">The finalizers of two objects are not guaranteed to run in any specific order, even if one object refers to the other.</span></span> <span data-ttu-id="5bd2a-289">也就是說，如果物件 A 有參考到物件 B，且兩者都有完成項，物件 B 可能已完成的物件的完成項開始時。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-289">That is, if Object A has a reference to Object B and both have finalizers, Object B might have already been finalized when the finalizer of Object A starts.</span></span>  
  
-   <span data-ttu-id="5bd2a-290">未指定執行完成項執行緒。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-290">The thread on which the finalizer runs is unspecified.</span></span>  
  
 <span data-ttu-id="5bd2a-291"><xref:System.Object.Finalize%2A>方法可能不會執行到完成為止，或可能完全無法執行下列例外狀況的情況下：</span><span class="sxs-lookup"><span data-stu-id="5bd2a-291">The <xref:System.Object.Finalize%2A> method might not run to completion or might not run at all under the following exceptional circumstances:</span></span>  
  
-   <span data-ttu-id="5bd2a-292">如果另一個完成項會無限期地封鎖 （進入無限迴圈，嘗試取得的鎖定，它可能永遠不會取得，等等）。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-292">If another finalizer blocks indefinitely (goes into an infinite loop, tries to obtain a lock it can never obtain, and so on).</span></span> <span data-ttu-id="5bd2a-293">執行階段會嘗試執行到完成的完成項，因為其他完成項可能不能呼叫完成項區塊無限期。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-293">Because the runtime tries to run finalizers to completion, other finalizers might not be called if a finalizer blocks indefinitely.</span></span>  
  
-   <span data-ttu-id="5bd2a-294">如果處理序結束，而不讓執行階段有機會以清除。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-294">If the process terminates without giving the runtime a chance to clean up.</span></span> <span data-ttu-id="5bd2a-295">在此情況下，終止處理序的執行階段的第一個通知是 DLL_PROCESS_DETACH 通知。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-295">In this case, the runtime's first notification of process termination is a DLL_PROCESS_DETACH notification.</span></span>  
  
 <span data-ttu-id="5bd2a-296">執行階段會在關機期間完成物件，可進行最終處理物件的數目會繼續減少時，才繼續。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-296">The runtime continues to finalize objects during shutdown only while the number of finalizable objects continues to decrease.</span></span>  
  
 <span data-ttu-id="5bd2a-297">如果<xref:System.Object.Finalize%2A>的覆寫或<xref:System.Object.Finalize%2A>擲回例外狀況和執行階段不會覆寫預設原則的應用程式所裝載，執行階段終止處理程序並沒有作用中`try` / `finally`區塊或會執行完成項。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-297">If <xref:System.Object.Finalize%2A> or an override of <xref:System.Object.Finalize%2A> throws an exception, and the runtime is not hosted by an application that overrides the default policy, the runtime terminates the process and no active `try`/`finally` blocks or finalizers are executed.</span></span> <span data-ttu-id="5bd2a-298">此行為可確保處理程序完整性，如果完成項無法釋放或終結的資源。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-298">This behavior ensures process integrity if the finalizer cannot free or destroy resources.</span></span>  
  
<a name="Notes"></a>   
## <a name="overriding-the-finalize-method"></a><span data-ttu-id="5bd2a-299">覆寫 Finalize 方法</span><span class="sxs-lookup"><span data-stu-id="5bd2a-299">Overriding the Finalize method</span></span> 
 <span data-ttu-id="5bd2a-300">您應該覆寫<xref:System.Object.Finalize%2A>類別使用 unmanaged 的資源，例如檔案控制代碼或使用它們的 managed 的物件在記憶體回收期間捨棄時必須釋放的資料庫連接。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-300">You should override <xref:System.Object.Finalize%2A> for a class that uses unmanaged resources, such as file handles or database connections that must be released when the managed object that uses them is discarded during garbage collection.</span></span> <span data-ttu-id="5bd2a-301">您不應該實作<xref:System.Object.Finalize%2A>方法的 managed 物件，因為記憶體回收行程自動釋放 managed 的資源。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-301">You shouldn't implement a <xref:System.Object.Finalize%2A> method for managed objects because the garbage collector releases managed resources automatically.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="5bd2a-302">如果<xref:System.Runtime.InteropServices.SafeHandle>物件可供使用，包裝您的 unmanaged 的資源，建議的替代做法是實作使用安全控制代碼的處置模式，並不會覆寫<xref:System.Object.Finalize%2A>。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-302">If a <xref:System.Runtime.InteropServices.SafeHandle> object is available that wraps your unmanaged resource, the recommended alternative is to implement the dispose pattern with a safe handle and not override <xref:System.Object.Finalize%2A>.</span></span> <span data-ttu-id="5bd2a-303">如需詳細資訊，請參閱[SafeHandle 替代方法](#SafeHandle)> 一節。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-303">For more information, see [The SafeHandle alternative](#SafeHandle) section.</span></span>  
  
 <span data-ttu-id="5bd2a-304"><xref:System.Object.Finalize%2A?displayProperty=nameWithType>方法則會根據預設，不做任何動作，但是您應該覆寫<xref:System.Object.Finalize%2A>才有必要，而且只釋放 unmanaged 的資源。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-304">The <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method does nothing by default, but you should override <xref:System.Object.Finalize%2A> only if necessary, and only to release unmanaged resources.</span></span> <span data-ttu-id="5bd2a-305">回收記憶體，會花更長時間執行最終處理作業，如果，因為它需要至少兩個記憶體回收。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-305">Reclaiming memory tends to take much longer if a finalization operation runs, because it requires at least two garbage collections.</span></span> <span data-ttu-id="5bd2a-306">此外，您應該覆寫<xref:System.Object.Finalize%2A>只有類型參考的方法。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-306">In addition, you should override the <xref:System.Object.Finalize%2A> method for reference types only.</span></span> <span data-ttu-id="5bd2a-307">Common language runtime 只完成參考型別。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-307">The common language runtime only finalizes reference types.</span></span> <span data-ttu-id="5bd2a-308">它會忽略實值類型上的完成項。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-308">It ignores finalizers on value types.</span></span>  

<span data-ttu-id="5bd2a-309">範圍<xref:System.Object.Finalize%2A?displayProperty=nameWithType>方法`protected`。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-309">The scope of the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method is `protected`.</span></span> <span data-ttu-id="5bd2a-310">當您在類別中覆寫方法時，您應該維護這個限定的範圍。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-310">You should maintain this limited scope when you override the method in your class.</span></span> <span data-ttu-id="5bd2a-311">會保留<xref:System.Object.Finalize%2A>受保護的方法，避免從呼叫物件的應用程式的使用者<xref:System.Object.Finalize%2A>直接的方法。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-311">By keeping a <xref:System.Object.Finalize%2A> method protected, you prevent users of your application from calling an object's <xref:System.Object.Finalize%2A> method directly.</span></span>
  
 <span data-ttu-id="5bd2a-312">每個實作<xref:System.Object.Finalize%2A>衍生類型中必須呼叫其基底類型實作<xref:System.Object.Finalize%2A>。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-312">Every implementation of <xref:System.Object.Finalize%2A> in a derived type must call its base type's implementation of <xref:System.Object.Finalize%2A>.</span></span> <span data-ttu-id="5bd2a-313">這是應用程式的程式碼可以呼叫的唯一情況<xref:System.Object.Finalize%2A>。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-313">This is the only case in which application code is allowed to call <xref:System.Object.Finalize%2A>.</span></span> <span data-ttu-id="5bd2a-314">物件的<xref:System.Object.Finalize%2A>方法不應該在其基底類別以外的其他任何物件上呼叫的方法。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-314">An object's <xref:System.Object.Finalize%2A> method shouldn't call a method on any objects other than that of its base class.</span></span> <span data-ttu-id="5bd2a-315">這是因為其他物件呼叫收集在同一時間作為呼叫物件時，例如在通用語言執行階段關機的情況下。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-315">This is because the other objects being called could be collected at the same time as the calling object, such as in the case of a common language runtime shutdown.</span></span> 
  
> [!NOTE]
>  <span data-ttu-id="5bd2a-316">C# 編譯器不允許您覆寫<xref:System.Object.Finalize%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-316">The C# compiler does not allow you to override the <xref:System.Object.Finalize%2A> method.</span></span> <span data-ttu-id="5bd2a-317">相反地，您提供完成項藉由實作[解構函式](~/docs/csharp/programming-guide/classes-and-structs/destructors.md)為您的類別。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-317">Instead, you provide a finalizer by implementing a [destructor](~/docs/csharp/programming-guide/classes-and-structs/destructors.md) for your class.</span></span> <span data-ttu-id="5bd2a-318">C# 解構函式自動呼叫其基底類別的解構函式。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-318">A C# destructor automatically calls the destructor of its base class.</span></span>  
>   
>  <span data-ttu-id="5bd2a-319">Visual c + + 也提供自己的語法實作<xref:System.Object.Finalize%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-319">Visual C++ also provides its own syntax for implementing the <xref:System.Object.Finalize%2A> method.</span></span> <span data-ttu-id="5bd2a-320">如需詳細資訊，請參閱 < 解構函式和完成項 > 一節[如何： 定義和使用類別和結構 (C + + /CLI)](http://msdn.microsoft.com/library/1c03cb0d-1459-4b5e-af65-97d6b3094fd7)。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-320">For more information, see the "Destructors and finalizers" section of [How to: Define and Consume Classes and Structs (C++/CLI)](http://msdn.microsoft.com/library/1c03cb0d-1459-4b5e-af65-97d6b3094fd7).</span></span>  
  
 <span data-ttu-id="5bd2a-321">因為記憶體回收是不具決定性的所以您不知道記憶體回收行程執行完成時。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-321">Because garbage collection is non-deterministic, you do not know precisely when the garbage collector performs finalization.</span></span> <span data-ttu-id="5bd2a-322">若要釋放資源，您也可以選擇實作[處置模式](~/docs/standard/design-guidelines/dispose-pattern.md)和<xref:System.IDisposable>介面。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-322">To release resources immediately, you can also choose to implement the [dispose pattern](~/docs/standard/design-guidelines/dispose-pattern.md) and the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="5bd2a-323"><xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>實作可以呼叫您類別的取用者釋放 unmanaged 的資源，而且您可以使用<xref:System.Object.Finalize%2A>方法來釋放 unmanaged 的資源的<xref:System.IDisposable.Dispose%2A>不會呼叫方法。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-323">The <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation can be called by consumers of your class to free unmanaged resources, and you can use the <xref:System.Object.Finalize%2A> method to free unmanaged resources in the event that the <xref:System.IDisposable.Dispose%2A> method is not called.</span></span>  
  
 <span data-ttu-id="5bd2a-324"><xref:System.Object.Finalize%2A> 它已被清除記憶體回收期間之後，可以採取幾乎任何的動作，包括 resurrecting 物件 （也就，讓物件能夠存取一次）。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-324"><xref:System.Object.Finalize%2A> can take almost any action, including resurrecting an object (that is, making the object accessible again) after it has been cleaned up during garbage collection.</span></span> <span data-ttu-id="5bd2a-325">不過，此物件可以只復活一次。<xref:System.Object.Finalize%2A>無法在記憶體回收期間重新啟動的物件上呼叫。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-325">However, the object can only be resurrected once; <xref:System.Object.Finalize%2A> cannot be called on resurrected objects during garbage collection.</span></span> <span data-ttu-id="5bd2a-326">沒有一個動作，您的實作<xref:System.Object.Finalize%2A>絕對不應該接受： 它應該絕不會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-326">There is one action that your implementation of <xref:System.Object.Finalize%2A> should never take: it should never throw an exception.</span></span> <span data-ttu-id="5bd2a-327">如果已從呼叫的方法所擲回任何例外狀況<xref:System.Object.Finalize%2A>方法會處理<xref:System.Object.Finalize%2A>方法，執行階段會假設<xref:System.Object.Finalize%2A>方法傳回，並繼續呼叫<xref:System.Object.Finalize%2A>其他物件的方法。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-327">If any exceptions thrown by methods called from the <xref:System.Object.Finalize%2A> method are unhandled by the <xref:System.Object.Finalize%2A> method, the runtime assumes that the <xref:System.Object.Finalize%2A> method returned and continues to call the <xref:System.Object.Finalize%2A> methods of other objects.</span></span> 
  
<a name="SafeHandle"></a>   
## <a name="the-safehandle-alternative"></a><span data-ttu-id="5bd2a-328">SafeHandle 替代方法</span><span class="sxs-lookup"><span data-stu-id="5bd2a-328">The SafeHandle alternative</span></span>  
 <span data-ttu-id="5bd2a-329">建立可靠的完成項通常很困難，因為您不能假設應用程式的狀態相關，而且這類未處理系統例外狀況<xref:System.OutOfMemoryException>和<xref:System.StackOverflowException>終止完成項。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-329">Creating reliable finalizers is often difficult, because you cannot make assumptions about the state of your application, and because unhandled system exceptions such as <xref:System.OutOfMemoryException> and <xref:System.StackOverflowException> terminate the finalizer.</span></span> <span data-ttu-id="5bd2a-330">而不是實作類別的完成項來釋放 unmanaged 的資源，您可以使用衍生自物件<xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType>類別來包裝您的 unmanaged 的資源，並再實作沒有完成項的處置模式。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-330">Instead of implementing a finalizer for your class to release unmanaged resources, you can use an object that is derived from the <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType> class to wrap your unmanaged resources, and then implement the dispose pattern without a finalizer.</span></span> <span data-ttu-id="5bd2a-331">.NET Framework 提供的下列類別<xref:Microsoft.Win32?displayProperty=nameWithType>衍生自命名空間<xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType>:</span><span class="sxs-lookup"><span data-stu-id="5bd2a-331">The .NET Framework provides the following classes in the <xref:Microsoft.Win32?displayProperty=nameWithType> namespace that are derived from <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType>:</span></span>  
  
-   <span data-ttu-id="5bd2a-332"><xref:Microsoft.Win32.SafeHandles.SafeFileHandle> 是的檔案控制代碼的包裝函式類別。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-332"><xref:Microsoft.Win32.SafeHandles.SafeFileHandle> is a wrapper class for a file handle.</span></span>  
  
-   <span data-ttu-id="5bd2a-333"><xref:Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle> 為記憶體對應檔案控制代碼的包裝函式類別。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-333"><xref:Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle> is a wrapper class for memory-mapped file handles.</span></span>  
  
-   <span data-ttu-id="5bd2a-334"><xref:Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle> 是包裝函式類別的 unmanaged 記憶體區塊的指標。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-334"><xref:Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle> is a wrapper class for a pointer to a block of unmanaged memory.</span></span>  
  
-   <span data-ttu-id="5bd2a-335"><xref:Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle><xref:Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle>，和<xref:Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle>是密碼編譯控制代碼的包裝函式類別。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-335"><xref:Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle>, <xref:Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle>, and <xref:Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle> are wrapper classes for cryptographic handles.</span></span>  
  
-   <span data-ttu-id="5bd2a-336"><xref:Microsoft.Win32.SafeHandles.SafePipeHandle> 是管道控制代碼的包裝函式類別。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-336"><xref:Microsoft.Win32.SafeHandles.SafePipeHandle> is a wrapper class for pipe handles.</span></span>  
  
-   <span data-ttu-id="5bd2a-337"><xref:Microsoft.Win32.SafeHandles.SafeRegistryHandle> 是登錄機碼的控制代碼的包裝函式類別。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-337"><xref:Microsoft.Win32.SafeHandles.SafeRegistryHandle> is a wrapper class for a handle to a registry key.</span></span>  
  
-   <span data-ttu-id="5bd2a-338"><xref:Microsoft.Win32.SafeHandles.SafeWaitHandle> 是等候控制代碼的包裝函式類別。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-338"><xref:Microsoft.Win32.SafeHandles.SafeWaitHandle> is a wrapper class for a wait handle.</span></span>  
  
 <span data-ttu-id="5bd2a-339">下列範例會使用[處置模式](~/docs/standard/design-guidelines/dispose-pattern.md)使用安全控制代碼，而不是覆寫<xref:System.Object.Finalize%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-339">The following example uses the [dispose pattern](~/docs/standard/design-guidelines/dispose-pattern.md) with safe handles instead of overriding the <xref:System.Object.Finalize%2A> method.</span></span> <span data-ttu-id="5bd2a-340">它會定義`FileAssociation`包裝應用程式會處理具有特定副檔名的檔案的登錄資訊的類別。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-340">It defines a `FileAssociation` class that wraps registry information about the application that handles files with a particular file extension.</span></span> <span data-ttu-id="5bd2a-341">傳回做為兩個登錄控制代碼`out`windows 參數[RegOpenKeyEx](http://msdn.microsoft.com/library/windows/desktop/ms724897.aspx)函式呼叫會傳遞至<xref:Microsoft.Win32.SafeHandles.SafeRegistryHandle>建構函式。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-341">The two registry handles returned as `out` parameters by Windows [RegOpenKeyEx](http://msdn.microsoft.com/library/windows/desktop/ms724897.aspx) function calls are passed to the <xref:Microsoft.Win32.SafeHandles.SafeRegistryHandle> constructor.</span></span> <span data-ttu-id="5bd2a-342">類型的保護，`Dispose`方法接著呼叫`SafeRegistryHandle.Dispose`方法來釋放這些兩個控點。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-342">The type's protected `Dispose` method then calls the `SafeRegistryHandle.Dispose` method  to free these two handles.</span></span>  
  
 [!code-csharp[System.Object.Finalize#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.finalize/cs/finalize_safe.cs#2)]
 [!code-vb[System.Object.Finalize#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.finalize/vb/finalize_safe.vb#2)]  
  
   
  
## Examples  
 <span data-ttu-id="5bd2a-343">下列範例會確認<xref:System.Object.Finalize%2A>呼叫方法時，會覆寫物件<xref:System.Object.Finalize%2A>終結。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-343">The following example verifies that the <xref:System.Object.Finalize%2A> method is called when an object that overrides <xref:System.Object.Finalize%2A> is destroyed.</span></span> <span data-ttu-id="5bd2a-344">請注意，在實際執行應用程式中，<xref:System.Object.Finalize%2A>會覆寫方法，以釋放這個物件所持有的 unmanaged 的資源。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-344">Note that, in a production application, the <xref:System.Object.Finalize%2A> method would be overridden to release unmanaged resources held by the object.</span></span> <span data-ttu-id="5bd2a-345">也請注意，C# 範例會提供解構函式，而不是覆寫<xref:System.Object.Finalize%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-345">Also note that the C# example provides a destructor instead of overriding the <xref:System.Object.Finalize%2A> method.</span></span>  
  
 [!code-csharp[System.Object.Finalize#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.finalize/cs/finalize1.cs#1)]
 [!code-vb[System.Object.Finalize#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.finalize/vb/finalize1.vb#1)]  
  
 <span data-ttu-id="5bd2a-346">如需其他範例會覆寫<xref:System.Object.Finalize%2A>方法，請參閱<xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-346">For an additional example that overrides the <xref:System.Object.Finalize%2A> method, see the <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.GC.SuppressFinalize(System.Object)" />
        <altmember cref="M:System.GC.ReRegisterForFinalize(System.Object)" />
        <altmember cref="M:System.GC.WaitForPendingFinalizers" />
        <altmember cref="T:System.WeakReference" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public virtual int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Object.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="5bd2a-347">做為預設雜湊函式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5bd2a-347">Serves as the default hash function.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5bd2a-348">目前物件的雜湊碼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5bd2a-348">A hash code for the current object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5bd2a-349">雜湊程式碼是用來插入及識別雜湊為基礎的集合中的物件，例如數值<xref:System.Collections.Generic.Dictionary%602>類別<xref:System.Collections.Hashtable>類別或衍生自<xref:System.Collections.DictionaryBase>類別。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-349">A hash code is a numeric value that is used to insert and identify an object in a hash-based collection such as the <xref:System.Collections.Generic.Dictionary%602> class, the <xref:System.Collections.Hashtable> class, or a type derived from the <xref:System.Collections.DictionaryBase> class.</span></span> <span data-ttu-id="5bd2a-350"><xref:System.Object.GetHashCode%2A>方法可為需要的物件是否相等的快速檢查的演算法來提供此雜湊程式碼。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-350">The <xref:System.Object.GetHashCode%2A> method provides this hash code for algorithms that need quick checks of object equality.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5bd2a-351">如需有關雜湊程式碼的雜湊表中的使用方式資訊以及一些其他的雜湊程式碼演算法，請參閱[雜湊函式](https://en.wikipedia.org/wiki/Hash_function)維基百科中的項目。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-351">For information about how hash codes are used in hash tables and for some additional hash code algorithms, see the [Hash Function](https://en.wikipedia.org/wiki/Hash_function) entry in Wikipedia.</span></span>  
  
 <span data-ttu-id="5bd2a-352">兩個物件相等的等於傳回的雜湊碼。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-352">Two objects that are equal return hash codes that are equal.</span></span> <span data-ttu-id="5bd2a-353">不過，反向並不成立： 等於雜湊程式碼不會表示物件是否相等，因為不同 （相等） 的物件可以有相同的雜湊碼。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-353">However, the reverse is not true: equal hash codes do not imply object equality, because different (unequal) objects can have identical hash codes.</span></span> <span data-ttu-id="5bd2a-354">此外，.NET Framework 並不保證的預設實作<xref:System.Object.GetHashCode%2A>方法，以及這個方法會傳回可能不同.NET Framework 版本與平台，例如 32 位元和 64 位元平台之間的值。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-354">Furthermore, the .NET Framework does not guarantee the default implementation of the <xref:System.Object.GetHashCode%2A> method, and the value this method returns may differ between .NET Framework versions and platforms, such as 32-bit and 64-bit platforms.</span></span> <span data-ttu-id="5bd2a-355">基於這些理由，請勿使用這個方法的預設實作做為唯一物件識別項進行雜湊。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-355">For these reasons, do not use the default implementation of this method as a unique object identifier for hashing purposes.</span></span> <span data-ttu-id="5bd2a-356">從這個，請依照下列兩種結果：</span><span class="sxs-lookup"><span data-stu-id="5bd2a-356">Two consequences follow from this:</span></span>  
  
-   <span data-ttu-id="5bd2a-357">您不應該假設等於雜湊程式碼表示物件是否相等。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-357">You should not assume that equal hash codes imply object equality.</span></span>  
  
-   <span data-ttu-id="5bd2a-358">您應該永遠不會保存，或使用雜湊程式碼中建立的應用程式定義域之外，因為相同的物件可能會跨應用程式定義域、 處理程序和平台的雜湊。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-358">You should never persist or use a hash code outside the application domain in which it was created, because the same object may hash across application domains, processes, and platforms.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="5bd2a-359">雜湊程式碼僅供有效率的插入和雜湊資料表為基礎的集合中的查閱。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-359">A hash code is intended for efficient insertion and lookup in collections that are based on a hash table.</span></span> <span data-ttu-id="5bd2a-360">雜湊程式碼不是永久的值。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-360">A hash code is not a permanent value.</span></span> <span data-ttu-id="5bd2a-361">基於此理由：</span><span class="sxs-lookup"><span data-stu-id="5bd2a-361">For this reason:</span></span>  
>   
>  -   <span data-ttu-id="5bd2a-362">請勿將序列化雜湊碼值或將它們儲存在資料庫中。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-362">Do not serialize hash code values or store them in databases.</span></span>  
> -   <span data-ttu-id="5bd2a-363">請勿從索引鍵的集合中擷取物件中使用索引鍵的雜湊碼。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-363">Do not use the hash code as the key to retrieve an object from a keyed collection.</span></span>  
> -   <span data-ttu-id="5bd2a-364">不要跨應用程式定義域或處理程序傳送雜湊碼。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-364">Do not send hash codes across application domains or processes.</span></span> <span data-ttu-id="5bd2a-365">在某些情況下，雜湊程式碼可能會針對每個處理程序或每個應用程式網域的計算。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-365">In some cases, hash codes may be computed on a per-process or per-application domain basis.</span></span>  
> -   <span data-ttu-id="5bd2a-366">請勿使用雜湊程式碼而不是如果您需要的密碼編譯強式雜湊，密碼編譯雜湊函式所傳回的值。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-366">Do not use the hash code instead of a value returned by a cryptographic hashing function if you need a cryptographically strong hash.</span></span> <span data-ttu-id="5bd2a-367">密碼編譯雜湊，若為使用衍生自類別<xref:System.Security.Cryptography.HashAlgorithm?displayProperty=nameWithType>或<xref:System.Security.Cryptography.KeyedHashAlgorithm?displayProperty=nameWithType>類別。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-367">For cryptographic hashes, use a class derived from the <xref:System.Security.Cryptography.HashAlgorithm?displayProperty=nameWithType> or <xref:System.Security.Cryptography.KeyedHashAlgorithm?displayProperty=nameWithType> class.</span></span>  
> -   <span data-ttu-id="5bd2a-368">不會測試相等的雜湊程式碼，以判斷兩個物件是否相等。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-368">Do not test for equality of hash codes to determine whether two objects are equal.</span></span> <span data-ttu-id="5bd2a-369">（不相等的物件可以有相同的雜湊程式碼）。若要測試是否相等，請呼叫<xref:System.Object.ReferenceEquals%2A>或<xref:System.Object.Equals%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-369">(Unequal objects can have identical hash codes.) To test for equality, call the <xref:System.Object.ReferenceEquals%2A> or <xref:System.Object.Equals%2A> method.</span></span>  
  
 <span data-ttu-id="5bd2a-370"><xref:System.Object.GetHashCode%2A>衍生型別可覆寫方法。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-370">The <xref:System.Object.GetHashCode%2A> method can be overridden by a derived type.</span></span> <span data-ttu-id="5bd2a-371">如果<xref:System.Object.GetHashCode%2A>是未覆寫，雜湊程式碼的參考型別會藉由呼叫計算<xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>基底類別，用來計算雜湊程式碼的方法基礎上物件的參考; 如需詳細資訊，請參閱<xref:System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-371">If <xref:System.Object.GetHashCode%2A> is not overridden, hash codes for reference types are computed by calling the <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType> method of the base class, which computes a hash code based on an object's reference; for more information, see <xref:System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="5bd2a-372">換句話說，兩個物件的<xref:System.Object.ReferenceEquals%2A>方法會傳回`true`有相同的雜湊程式碼。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-372">In other words, two objects for which the <xref:System.Object.ReferenceEquals%2A> method returns `true` have identical hash codes.</span></span> <span data-ttu-id="5bd2a-373">如果實值類型不會覆寫<xref:System.Object.GetHashCode%2A>、<xref:System.ValueType.GetHashCode%2A?displayProperty=nameWithType>基底類別方法會使用反映來計算基礎類型的欄位值的雜湊碼。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-373">If value types do not override <xref:System.Object.GetHashCode%2A>, the <xref:System.ValueType.GetHashCode%2A?displayProperty=nameWithType> method of the base class uses reflection to compute the hash code based on the values of the type's fields.</span></span> <span data-ttu-id="5bd2a-374">換句話說，其欄位具有相等值的實值型別具有相等的雜湊碼。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-374">In other words, value types whose fields have equal values have equal hash codes.</span></span> <span data-ttu-id="5bd2a-375">如需有關覆寫<xref:System.Object.GetHashCode%2A>，請參閱 「 附註繼承者 」 一節。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-375">For more information about overriding <xref:System.Object.GetHashCode%2A>, see the "Notes to Inheritors" section.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="5bd2a-376">如果您覆寫<xref:System.Object.GetHashCode%2A>方法，您也應該覆寫<xref:System.Object.Equals%2A>，反之亦然。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-376">If you override the <xref:System.Object.GetHashCode%2A> method, you should also override <xref:System.Object.Equals%2A>, and vice versa.</span></span> <span data-ttu-id="5bd2a-377">如果您覆寫<xref:System.Object.Equals%2A>方法會傳回`true`兩個物件是否相等，您覆寫進行測試<xref:System.Object.GetHashCode%2A>方法必須傳回相同值的兩個物件。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-377">If your overridden <xref:System.Object.Equals%2A> method returns `true` when two objects are tested for equality, your overridden <xref:System.Object.GetHashCode%2A> method must return the same value for the two objects.</span></span>  
  
 <span data-ttu-id="5bd2a-378">如果當做索引鍵使用雜湊表中的物件不提供的有用實作<xref:System.Object.GetHashCode%2A>，您可以指定雜湊碼提供者藉由提供<xref:System.Collections.IEqualityComparer>至其中的多載實作<xref:System.Collections.Hashtable>類別建構函式。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-378">If an object that is used as a key in a hash table does not provide a useful implementation of <xref:System.Object.GetHashCode%2A>, you can specify a hash code provider by supplying an <xref:System.Collections.IEqualityComparer> implementation to one of the overloads of the <xref:System.Collections.Hashtable> class constructor.</span></span>  
  
## <a name="notes-for-the-includewrtincludeswrt-mdmd"></a><span data-ttu-id="5bd2a-379">附註 [!INCLUDE[wrt](~/includes/wrt-md.md)]</span><span class="sxs-lookup"><span data-stu-id="5bd2a-379">Notes for the [!INCLUDE[wrt](~/includes/wrt-md.md)]</span></span>  
 <span data-ttu-id="5bd2a-380">當您呼叫<xref:System.Object.GetHashCode%2A>中之類別的方法[!INCLUDE[wrt](~/includes/wrt-md.md)]，它提供的預設行為不覆寫的類別<xref:System.Object.GetHashCode%2A>。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-380">When you call the <xref:System.Object.GetHashCode%2A> method on a class in the [!INCLUDE[wrt](~/includes/wrt-md.md)], it provides the default behavior for classes that don’t override <xref:System.Object.GetHashCode%2A>.</span></span> <span data-ttu-id="5bd2a-381">這是.NET Framework 所提供的支援[!INCLUDE[wrt](~/includes/wrt-md.md)](請參閱[.NET Framework 支援的 Windows 市集應用程式和 Windows 執行階段](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md))。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-381">This is part of the support that the .NET Framework provides for the [!INCLUDE[wrt](~/includes/wrt-md.md)] (see [.NET Framework Support for Windows Store Apps and Windows Runtime](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)).</span></span> <span data-ttu-id="5bd2a-382">中的類別[!INCLUDE[wrt](~/includes/wrt-md.md)]不繼承<xref:System.Object>，且不要只實作目前<xref:System.Object.GetHashCode%2A>。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-382">Classes in the [!INCLUDE[wrt](~/includes/wrt-md.md)] don’t inherit <xref:System.Object>, and currently don’t implement a <xref:System.Object.GetHashCode%2A>.</span></span> <span data-ttu-id="5bd2a-383">不過，它們便會顯示有<xref:System.Object.ToString%2A>， <xref:System.Object.Equals%28System.Object%29>，和<xref:System.Object.GetHashCode%2A>時您用於您的 C# 或 Visual Basic 程式碼，以及.NET Framework 提供的預設行為，這些方法的方法。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-383">However, they appear to have <xref:System.Object.ToString%2A>, <xref:System.Object.Equals%28System.Object%29>, and <xref:System.Object.GetHashCode%2A> methods when you use them in your C# or Visual Basic code, and the .NET Framework provides the default behavior for these methods.</span></span>  
  
> [!NOTE]
>  [!INCLUDE[wrt](~/includes/wrt-md.md)]<span data-ttu-id="5bd2a-384"> 以 C# 或 Visual Basic 撰寫的類別可以覆寫<xref:System.Object.GetHashCode%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-384"> classes that are written in C# or Visual Basic can override the <xref:System.Object.GetHashCode%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5bd2a-385">其中一種簡單的方式來計算數值的值具有相同或較小的範圍比雜湊碼<xref:System.Int32>就只會傳回該值為型別。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-385">One of the simplest ways to compute a hash code for a numeric value that has the same or a smaller range than the <xref:System.Int32> type is to simply return that value.</span></span> <span data-ttu-id="5bd2a-386">下列範例示範這類實作`Number`結構。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-386">The following example shows such an implementation for a `Number` structure.</span></span>  
  
 [!code-csharp[System.Object.GetHashCode#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.gethashcode/cs/direct1.cs#1)]
 [!code-vb[System.Object.GetHashCode#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.gethashcode/vb/direct1.vb#1)]  
  
 <span data-ttu-id="5bd2a-387">通常，型別具有可以參與產生雜湊程式碼的多個資料欄位。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-387">Frequently, a type has multiple data fields that can participate in generating the hash code.</span></span> <span data-ttu-id="5bd2a-388">若要產生的雜湊碼的一種方式為結合使用這些欄位`XOR (eXclusive OR)`作業，如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-388">One way to generate a hash code is to combine these fields using an `XOR (eXclusive OR)` operation, as shown in the following example.</span></span>  
  
 [!code-csharp[System.Object.GetHashCode#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.gethashcode/cs/xor1.cs#2)]
 [!code-vb[System.Object.GetHashCode#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.gethashcode/vb/xor1.vb#2)]  
  
 <span data-ttu-id="5bd2a-389">前一個範例會傳回相同的雜湊程式碼 (n1，n2) 和 (n2 n1)，，因此可能會產生較多超過為想要的衝突。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-389">The previous example returns the same hash code for (n1, n2) and (n2, n1), and so may generate more collisions than are desirable.</span></span> <span data-ttu-id="5bd2a-390">幾個解決方案可用，以便在這些情況下的雜湊程式碼並不相同。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-390">A number of solutions are available so that hash codes in these cases are not identical.</span></span> <span data-ttu-id="5bd2a-391">其中是要傳回的雜湊碼`Tuple`物件，以反映每個欄位的順序。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-391">One is to return the hash code of a `Tuple` object that reflects the order of each field.</span></span> <span data-ttu-id="5bd2a-392">下列範例示範可能的實作使用<xref:System.Tuple%602>類別。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-392">The following example shows a possible implementation that uses the <xref:System.Tuple%602> class.</span></span> <span data-ttu-id="5bd2a-393">不過請注意，具現化的效能負荷`Tuple`物件可能會大幅影響將大量的物件儲存雜湊資料表中的應用程式的整體效能。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-393">Note, though, that the performance overhead of instantiating a `Tuple` object may significantly impact the overall performance of an application that stores large numbers of objects in hash tables.</span></span>  
  
 [!code-csharp[System.Object.GetHashCode#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.gethashcode/cs/xor2.cs#3)]
 [!code-vb[System.Object.GetHashCode#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.gethashcode/vb/xor2.vb#3)]  
  
 <span data-ttu-id="5bd2a-394">第二個替代方案牽涉到由左移位連續欄位的雜湊碼由兩個或多個位元加權個別的雜湊碼。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-394">A second alternative solution involves weighting the individual hash codes by left-shifting the hash codes of successive fields by two or more bits.</span></span> <span data-ttu-id="5bd2a-395">以最佳方式，而不是被捨棄，超過 31 位元移位的位元應該圍繞而不會被捨棄。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-395">Optimally, instead of being discarded, bits shifted beyond bit 31 should wrap around rather than be discarded.</span></span> <span data-ttu-id="5bd2a-396">位元左移位運算子在 C# 和 Visual Basic 中捨棄，因為您需要建立左的 shift 包裝方法如下所示：</span><span class="sxs-lookup"><span data-stu-id="5bd2a-396">Since bits are discarded by the left-shift operators in both C# and Visual Basic, this requires creating a left shift-and-wrap method like the following:</span></span>  
  
 [!code-csharp[System.Object.GetHashCode#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.gethashcode/cs/shift1.cs#4)]
 [!code-vb[System.Object.GetHashCode#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.gethashcode/vb/shift1.vb#4)]  
  
 <span data-ttu-id="5bd2a-397">下列範例接著會使用這個 shift 包裝方法來計算的雜湊碼`Point`前一個範例中使用的結構。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-397">The following example then uses this shift-and-wrap method to compute the hash code of the `Point` structure used in the previous examples.</span></span>  
  
 [!code-csharp[System.Object.GetHashCode#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.gethashcode/cs/shift1.cs#5)]
 [!code-vb[System.Object.GetHashCode#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.gethashcode/vb/shift1.vb#5)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="5bd2a-398">
            <para>雜湊函式用來快速產生數字 （雜湊程式碼），會對應至物件的值。雜湊函式通常是每個類型，和唯一性，必須使用至少其中一個執行個體欄位做為輸入。使用靜態欄位的值不應該計算雜湊碼。類別衍生自<see cref="T:System.Object" />、<see langword="GetHashCode" />方法可以委派給基底類別<see cref="M:System.Object.GetHashCode" />衍生的類別定義會參考相等的等號時，才實作。預設實作<see cref="M:System.Object.GetHashCode" />參考型別會傳回相當於所傳回的雜湊碼<see cref="M:System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode(System.Object)" />方法。您可以覆寫<see cref="M:System.Object.GetHashCode" />不可變的參考類型。一般情況下，對於可變動參考類型，您應該覆寫<see cref="M:System.Object.GetHashCode" />才:-您可以計算出雜湊中的程式碼不是可變動; 的欄位或-您可以確保可變動物件的雜湊程式碼不會變更而物件會包含在 collecti上，依賴其雜湊碼。否則，您可能會認為可變動物件將會遺失雜湊表中。如果您選擇要覆寫<see cref="M:System.Object.GetHashCode" />對於可變動參考類型，您的文件應該解釋清楚的使用者，您的型別不應修改物件值，而此物件會儲存雜湊表中。對於實值類型<see cref="M:System.ValueType.GetHashCode" />提供使用反映的預設雜湊程式碼實作。您應該考慮加以覆寫以提升效能。<block subset="none" type="note"><para> 如需詳細資訊和範例，計算雜湊碼的各種不同的方式，請參閱 &lt; 範例 &gt; 一節。</para></block>  雜湊函式必須具有下列屬性:-如果兩個物件比較結果為相等，<see cref="M:System.Object.GetHashCode" />每個物件的方法必須傳回相同的值。不過，如果兩個物件不會比較為相等，<see cref="M:System.Object.GetHashCode" />兩個物件的方法沒有傳回不同的值。 -<see cref="M:System.Object.GetHashCode" />物件方法必須一致地傳回相同雜湊碼，只要未修改的物件狀態，決定傳回值物件之 [System.Object.Equals](xref:System.Object.Equals*) 方法。請注意這是僅針對目前執行的應用程式，則為 true，如果再次執行應用程式，可能會傳回不同的雜湊程式碼。 -針對最佳效能，雜湊函式應該產生所有輸入，包括大量已叢集化的輸入是平均的分配。含意為，小型修改物件的狀態應該會導致大型修改產生的雜湊程式碼中，為了達到最佳的雜湊表效能。 雜湊函式應該計算耗費大量資源。 -<see cref="M:System.Object.GetHashCode" />方法不可擲回例外狀況。例如，實作<see cref="M:System.String.GetHashCode" />所提供的方法<see cref="T:System.String" />類別會傳回相同的字串值相同的雜湊碼。因此，兩個<see cref="T:System.String" />物件傳回相同的雜湊程式碼，如果它們代表相同的字串值。此外，此方法會使用的所有字元在字串中產生合理隨機散發的輸出，即使輸入叢集在特定範圍 (例如，許多使用者可能只包含較低 128 ASCII 字元，即使的字串字串可以包含任何 65,535 的 Unicode 字元）。提供良好的雜湊函式的類別上會大幅影響將這些物件加入至雜湊表的效能。在提供良好的雜湊函式實作的索引鍵的雜湊資料表中，搜尋項目會常數 （例如，一種 o （1） 運算） 的時間。具有不佳函式實作的雜湊的雜湊資料表，搜尋的效能取決於雜湊表中的項目數目 (例如，若為 O('n') 作業，其中 'n' 雜湊表中的項目數目是)。惡意使用者可以輸入資料，從而發生衝突，可能會大幅降低雜湊表，在下列情況下所取決的應用程式的效能數:-當雜湊函式會產生頻繁的衝突。 -當大比例的雜湊表中的物件產生的相等或大約等於另一個雜湊碼。 -當使用者輸入的雜湊程式碼會計算的資料。在衍生類別覆寫<see cref="M:System.Object.GetHashCode" />也必須覆寫<see cref="M:System.Object.Equals(System.Object)" />保證會被視為相等的兩個物件具有相同的雜湊程式碼; 否則<see cref="T:System.Collections.Hashtable" />類型可能無法正常運作。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="5bd2a-398">
              <para>A hash function is used to quickly generate a number (hash code) that corresponds to the value of an object. Hash functions are usually specific to each type and, for uniqueness, must use at least one of the instance fields as input. Hash codes should not be computed by using the values of static fields.  For classes derived from <see cref="T:System.Object" />, the <see langword="GetHashCode" /> method can delegate to the base class <see cref="M:System.Object.GetHashCode" /> implementation only if the derived class defines equality to be reference equality. The default implementation of <see cref="M:System.Object.GetHashCode" /> for reference types returns a hash code that is equivalent to the one returned by the <see cref="M:System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode(System.Object)" /> method. You can override <see cref="M:System.Object.GetHashCode" /> for immutable reference types. In general, for mutable reference types, you should override <see cref="M:System.Object.GetHashCode" /> only if:  -   You can compute the hash code from fields that are not mutable; or  -   You can ensure that the hash code of a mutable object does not change while the object is contained in a collection that relies on its hash code.  Otherwise, you might think that the mutable object is lost in the hash table. If you do choose to override <see cref="M:System.Object.GetHashCode" /> for a mutable reference type, your documentation should make it clear that users of your type should not modify object values while the object is stored in a hash table.  For value types, <see cref="M:System.ValueType.GetHashCode" /> provides a default hash code implementation that uses reflection. You should consider overriding it for better performance.  <block subset="none" type="note"><para> For more information and examples that compute hash codes in a variety of ways, see the Examples section.  </para></block>  A hash function must have the following properties:  -   If two objects compare as equal, the <see cref="M:System.Object.GetHashCode" /> method for each object must return the same value. However, if two objects do not compare as equal, the <see cref="M:System.Object.GetHashCode" /> methods for the two objects do not have to return different values.  -   The <see cref="M:System.Object.GetHashCode" /> method for an object must consistently return the same hash code as long as there is no modification to the object state that determines the return value of the object's [System.Object.Equals](xref:System.Object.Equals*) method. Note that this is true only for the current execution of an application, and that a different hash code can be returned if the application is run again.  -   For the best performance, a hash function should generate an even distribution for all input, including input that is heavily clustered. An implication is that small modifications to object state should result in large modifications to the resulting hash code for best hash table performance.  -   Hash functions should be inexpensive to compute.  -   The <see cref="M:System.Object.GetHashCode" /> method should not throw exceptions.  For example, the implementation of the <see cref="M:System.String.GetHashCode" /> method provided by the <see cref="T:System.String" /> class returns identical hash codes for identical string values. Therefore, two <see cref="T:System.String" /> objects return the same hash code if they represent the same string value. Also, the method uses all the characters in the string to generate reasonably randomly distributed output, even when the input is clustered in certain ranges (for example, many users might have strings that contain only the lower 128 ASCII characters, even though a string can contain any of the 65,535 Unicode characters).  Providing a good hash function on a class can significantly affect the performance of adding those objects to a hash table. In a hash table with keys that provide a good implementation of a hash function, searching for an element takes constant time (for example, an O(1) operation). In a hash table with a poor implementation of a hash function, the performance of a search depends on the number of items in the hash table (for example, an O(`n`) operation, where `n` is the number of items in the hash table). A malicious user can input data that increases the number of collisions, which can significantly degrade the performance of applications that depend on hash tables, under the following conditions:  -   When hash functions produce frequent collisions.  -   When a large proportion of objects in a hash table produce hash codes that are equal or approximately equal to one another.  -   When users input the data from which the hash code is computed.  Derived classes that override <see cref="M:System.Object.GetHashCode" /> must also override <see cref="M:System.Object.Equals(System.Object)" /> to guarantee that two objects considered equal have the same hash code; otherwise, the <see cref="T:System.Collections.Hashtable" /> type might not work correctly.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Collections.Hashtable" />
        <altmember cref="M:System.Object.Equals(System.Object)" />
        <altmember cref="M:System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public Type GetType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Type GetType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Object.GetType" />
      <MemberSignature Language="VB.NET" Value="Public Function GetType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Type ^ GetType();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="5bd2a-399">取得目前執行個體的 <see cref="T:System.Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5bd2a-399">Gets the <see cref="T:System.Type" /> of the current instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5bd2a-400">目前執行個體的確切執行階段類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5bd2a-400">The exact runtime type of the current instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5bd2a-401">因為<xref:System.Object?displayProperty=nameWithType>在.NET Framework 類型系統中，為所有類型的基底類別<xref:System.Object.GetType%2A>方法可以用來傳回<xref:System.Type>代表所有.NET Framework 類型的物件。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-401">Because <xref:System.Object?displayProperty=nameWithType> is the base class for all types in the .NET Framework type system, the <xref:System.Object.GetType%2A> method can be used to return <xref:System.Type> objects that represent all .NET Framework types.</span></span> <span data-ttu-id="5bd2a-402">.NET Framework 可辨識下列五種類型：</span><span class="sxs-lookup"><span data-stu-id="5bd2a-402">The .NET Framework recognizes the following five categories of types:</span></span>  
  
-   <span data-ttu-id="5bd2a-403">類別，衍生自<xref:System.Object?displayProperty=nameWithType>，</span><span class="sxs-lookup"><span data-stu-id="5bd2a-403">Classes, which are derived from <xref:System.Object?displayProperty=nameWithType>,</span></span>  
  
-   <span data-ttu-id="5bd2a-404">實值類型，衍生自<xref:System.ValueType?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-404">Value types, which are derived from <xref:System.ValueType?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="5bd2a-405">介面，衍生自<xref:System.Object?displayProperty=nameWithType>從.NET Framework 2.0 開始。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-405">Interfaces, which are derived from <xref:System.Object?displayProperty=nameWithType> starting with the .NET Framework 2.0.</span></span>  
  
-   <span data-ttu-id="5bd2a-406">列舉型別，衍生自<xref:System.Enum?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-406">Enumerations, which are derived from <xref:System.Enum?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="5bd2a-407">委派，衍生自<xref:System.MulticastDelegate?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-407">Delegates, which are derived from <xref:System.MulticastDelegate?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="5bd2a-408">兩個物件`x`和`y`具有相同的執行階段類型`Object.ReferenceEquals(x.GetType(),y.GetType())`傳回`true`。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-408">For two objects `x` and `y` that have identical runtime types, `Object.ReferenceEquals(x.GetType(),y.GetType())` returns `true`.</span></span> <span data-ttu-id="5bd2a-409">下列範例會使用<xref:System.Object.GetType%2A>方法<xref:System.Object.ReferenceEquals%2A>方法，以判斷兩個數值是否為兩個其他數字的值相同的型別。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-409">The following example uses the <xref:System.Object.GetType%2A> method with the <xref:System.Object.ReferenceEquals%2A> method to determine whether one numeric value is the same type as two other numeric values.</span></span>  
  
 [!code-csharp[System.Object.GetType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.gettype/cs/gettype1.cs#1)]
 [!code-vb[System.Object.GetType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.gettype/vb/gettype1.vb#1)]  
  
> [!NOTE]
>  <span data-ttu-id="5bd2a-410">若要判斷物件是否為特定的型別，您可以使用您語言的型別比較關鍵字，或建構。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-410">To determine whether an object is a specific type, you can use your language's type comparison keyword or construct.</span></span> <span data-ttu-id="5bd2a-411">例如，您可以使用`TypeOf…Is`在 Visual Basic 中建構或`is`C# 中的關鍵字。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-411">For example, you can use the `TypeOf…Is` construct in Visual Basic or the `is` keyword in C#.</span></span>  
  
 <span data-ttu-id="5bd2a-412"><xref:System.Object.GetType%2A>方法繼承自所有型別衍生自<xref:System.Object>。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-412">The <xref:System.Object.GetType%2A> method is inherited by all types that derive from <xref:System.Object>.</span></span> <span data-ttu-id="5bd2a-413">這表示，除了使用您自己的語言比較關鍵字，您可以使用<xref:System.Object.GetType%2A>方法，以判斷特定物件的類型，如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-413">This means that, in addition to using your own language's comparison keyword, you can use the <xref:System.Object.GetType%2A> method to determine the type of a particular object, as the following example shows.</span></span>  
  
 [!code-csharp[System.Object.GetType#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.gettype/cs/GetTypeEx2.cs#2)]
 [!code-vb[System.Object.GetType#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.gettype/vb/GetTypeEx2.vb#2)]  
  
 <span data-ttu-id="5bd2a-414"><xref:System.Type>物件會公開與目前的類別相關聯的中繼資料<xref:System.Object>。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-414">The <xref:System.Type> object exposes the metadata associated with the class of the current <xref:System.Object>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5bd2a-415">下列程式碼範例會示範<xref:System.Object.GetType%2A>傳回目前執行個體的執行階段類型。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-415">The following code example demonstrates that <xref:System.Object.GetType%2A> returns the runtime type of the current instance.</span></span>  
  
 [!code-cpp[ECMA-System.Object.GetType#1](~/samples/snippets/cpp/VS_Snippets_CLR/ECMA-System.Object.GetType/CPP/gettype.cpp#1)]
 [!code-csharp[ECMA-System.Object.GetType#1](~/samples/snippets/csharp/VS_Snippets_CLR/ECMA-System.Object.GetType/CS/gettype.cs#1)]
 [!code-vb[ECMA-System.Object.GetType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ECMA-System.Object.GetType/VB/gettype.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Type" />
      </Docs>
    </Member>
    <Member MemberName="MemberwiseClone">
      <MemberSignature Language="C#" Value="protected object MemberwiseClone ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance object MemberwiseClone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Object.MemberwiseClone" />
      <MemberSignature Language="VB.NET" Value="Protected Function MemberwiseClone () As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Object ^ MemberwiseClone();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="5bd2a-416">建立目前 <see cref="T:System.Object" /> 的淺層複製。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5bd2a-416">Creates a shallow copy of the current <see cref="T:System.Object" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5bd2a-417">目前 <see cref="T:System.Object" /> 的淺層複製。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5bd2a-417">A shallow copy of the current <see cref="T:System.Object" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5bd2a-418"><xref:System.Object.MemberwiseClone%2A>方法建立新的物件，並再將目前物件的非靜態欄位複製到新的物件建立淺層複本。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-418">The <xref:System.Object.MemberwiseClone%2A> method creates a shallow copy by creating a new object, and then copying the nonstatic fields of the current object to the new object.</span></span> <span data-ttu-id="5bd2a-419">如果欄位是實值類型，則會執行位元欄位的複本。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-419">If a field is a value type, a bit-by-bit copy of the field is performed.</span></span> <span data-ttu-id="5bd2a-420">如果欄位是參考類型，則會複製參考，但參考的物件不;因此，原始的物件和其複製參考相同的物件。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-420">If a field is a reference type, the reference is copied but the referred object is not; therefore, the original object and its clone refer to the same object.</span></span>  
  
 <span data-ttu-id="5bd2a-421">例如，請考慮 x 依次參考物件 A 和 B 參考物件 c。X 的淺層複本建立新的物件 X2 參考物件 A 和 b。相反地，X 的深層複本建立新物件 X2 A2 與 B2 a 的新物件和 B.B2 參考新物件 C2，也就是一份 c。此範例說明 shallow 和深層複製作業之間的差異。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-421">For example, consider an object called X that references objects A and B. Object B, in turn, references object C. A shallow copy of X creates new object X2 that also references objects A and B. In contrast, a deep copy of X creates a new object X2 that references the new objects A2 and B2, which are copies of A and B. B2, in turn, references the new object C2, which is a copy of C. The example illustrates the difference between a shallow and a deep copy operation.</span></span>  
  
 <span data-ttu-id="5bd2a-422">透過深層複製作業，實作時所執行的淺層複製作業的許多方式<xref:System.Object.MemberwiseClone%2A>方法不符合您的需求。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-422">There are numerous ways to implement a deep copy operation if the shallow copy operation performed by the <xref:System.Object.MemberwiseClone%2A> method does not meet your needs.</span></span> <span data-ttu-id="5bd2a-423">這些需求包括下列各項：</span><span class="sxs-lookup"><span data-stu-id="5bd2a-423">These include the following:</span></span>  
  
-   <span data-ttu-id="5bd2a-424">呼叫類別建構函式要複製到取自第一個物件的屬性值建立第二個物件的物件。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-424">Call a class constructor of the object to be copied to create a second object with property values taken from the first object.</span></span> <span data-ttu-id="5bd2a-425">這是假設物件的值會完全由其類別建構函式。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-425">This assumes that the values of an object are entirely defined by its class constructor.</span></span>  
  
-   <span data-ttu-id="5bd2a-426">呼叫<xref:System.Object.MemberwiseClone%2A>方法來建立物件的淺層複本，並將指派其值為與原始物件的任何屬性或欄位的值是參考型別相同的新物件。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-426">Call the <xref:System.Object.MemberwiseClone%2A> method to create a shallow copy of an object, and then assign new objects whose values are the same as the original object to any properties or fields whose values are reference types.</span></span> <span data-ttu-id="5bd2a-427">`DeepCopy`方法在此範例將示範這個方法。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-427">The `DeepCopy` method in the example illustrates this approach.</span></span>  
  
-   <span data-ttu-id="5bd2a-428">序列化物件變成深層複製，，然後還原序列化的資料至不同的物件變數。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-428">Serialize the object to be deep copied, and then restore the serialized data to a different object variable.</span></span>  
  
-   <span data-ttu-id="5bd2a-429">使用反映遞迴時，以執行深層複製作業。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-429">Use reflection with recursion to perform the deep copy operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5bd2a-430">下列範例說明<xref:System.Object.MemberwiseClone%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-430">The following example illustrates the <xref:System.Object.MemberwiseClone%2A> method.</span></span> <span data-ttu-id="5bd2a-431">它會定義`ShallowCopy`方法呼叫<xref:System.Object.MemberwiseClone%2A>方法上執行的淺層複製作業`Person`物件。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-431">It defines a `ShallowCopy` method that calls the <xref:System.Object.MemberwiseClone%2A> method to perform a shallow copy operation on a `Person` object.</span></span> <span data-ttu-id="5bd2a-432">它也會定義`DeepCopy`執行深層複製作業的方法`Person`物件。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-432">It also defines a `DeepCopy` method that performs a deep copy operation on a `Person` object.</span></span>  
  
 [!code-csharp[System.Object.MemberwiseClone#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.memberwiseclone/cs/memberwiseclone1.cs#1)]
 [!code-vb[System.Object.MemberwiseClone#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.memberwiseclone/vb/memberwiseclone1.vb#1)]  
  
 <span data-ttu-id="5bd2a-433">在此範例中，`Person.IdInfo`屬性會傳回`IdInfo`物件。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-433">In this example, the `Person.IdInfo` property returns an `IdInfo` object.</span></span> <span data-ttu-id="5bd2a-434">做為範例所示，從輸出時`Person`物件會藉由呼叫複製<xref:System.Object.MemberwiseClone%2A>方法中，複製`Person`物件是原始物件的獨立複本，不同之處在於它們共用相同`Person.IdInfo`物件參考。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-434">As the output from the example shows, when a `Person` object is cloned by calling the <xref:System.Object.MemberwiseClone%2A> method, the cloned `Person` object is an independent copy of the original object, except that they share the same `Person.IdInfo` object reference.</span></span> <span data-ttu-id="5bd2a-435">如此一來，修改複製品的`Person.IdInfo`屬性變更的原始物件`Person.IdInfo`屬性。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-435">As a result, modifying the clone's `Person.IdInfo` property changes the original object's `Person.IdInfo` property.</span></span> <span data-ttu-id="5bd2a-436">相反地，深層複製作業執行時，複製`Person`物件，包括其`Person.IdInfo`屬性，可以修改而不會影響原始物件。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-436">On the other hand, when a deep copy operation is performed, the cloned `Person` object, including its `Person.IdInfo` property, can be modified without affecting the original object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReferenceEquals">
      <MemberSignature Language="C#" Value="public static bool ReferenceEquals (object objA, object objB);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ReferenceEquals(object objA, object objB) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Object.ReferenceEquals(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReferenceEquals (objA As Object, objB As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool ReferenceEquals(System::Object ^ objA, System::Object ^ objB);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objA" Type="System.Object" />
        <Parameter Name="objB" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="objA">
          <span data-ttu-id="5bd2a-437">要比較的第一個物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5bd2a-437">The first object to compare.</span>
          </span>
        </param>
        <param name="objB">
          <span data-ttu-id="5bd2a-438">要比較的第二個物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5bd2a-438">The second object  to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5bd2a-439">判斷指定的 <see cref="T:System.Object" /> 執行個體是否為相同的執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5bd2a-439">Determines whether the specified <see cref="T:System.Object" /> instances are the same instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5bd2a-440">如果 <paramref name="objA" /> 與 <paramref name="objB" /> 為相同的執行個體或兩者皆為 **null**，則為 <see langword="true" />；否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5bd2a-440">
              <see langword="true" /> if <paramref name="objA" /> is the same instance as <paramref name="objB" /> or if both are **null**; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5bd2a-441">不同於<xref:System.Object.Equals%2A>方法和等號比較運算子，<xref:System.Object.ReferenceEquals%2A>無法覆寫方法。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-441">Unlike the <xref:System.Object.Equals%2A> method and the equality operator, the <xref:System.Object.ReferenceEquals%2A> method cannot be overridden.</span></span> <span data-ttu-id="5bd2a-442">因為這個緣故，如果您想要測試兩個物件是否相等的參考，您不確定的實作`Equals`方法，您可以呼叫<xref:System.Object.ReferenceEquals%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-442">Because of this, if you want to test two object references for equality and you are unsure about the implementation of the `Equals` method, you can call the <xref:System.Object.ReferenceEquals%2A> method.</span></span>  
  
 <span data-ttu-id="5bd2a-443">不過，傳回值<xref:System.Object.ReferenceEquals%2A>方法可能會出現在這兩個案例中的異常：</span><span class="sxs-lookup"><span data-stu-id="5bd2a-443">However, the return value of the <xref:System.Object.ReferenceEquals%2A> method may appear to be anomalous in these two scenarios:</span></span>  
  
-   <span data-ttu-id="5bd2a-444">比較值的類型。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-444">When comparing value types.</span></span> <span data-ttu-id="5bd2a-445">如果`objA`和`objB`為實值類型傳遞至之前 boxing 處理<xref:System.Object.ReferenceEquals%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-445">If `objA` and `objB` are value types, they are boxed before they are passed to the <xref:System.Object.ReferenceEquals%2A> method.</span></span> <span data-ttu-id="5bd2a-446">這表示，如果這兩個`objA`和`objB`代表相同的執行個體的實值類型，<xref:System.Object.ReferenceEquals%2A>方法卻傳回`false`，如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-446">This means that if both `objA` and `objB` represent the same instance of a value type, the <xref:System.Object.ReferenceEquals%2A> method nevertheless returns `false`, as the following example shows.</span></span>  
  
     [!code-csharp[System.Object.ReferenceEquals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.referenceequals/cs/referenceequals4.cs#1)]
     [!code-vb[System.Object.ReferenceEquals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.referenceequals/vb/referenceequals4.vb#1)]  
  
     <span data-ttu-id="5bd2a-447">Boxing 實值型別資訊，請參閱[Boxing 和 Unboxing](~/docs/csharp/programming-guide/types/boxing-and-unboxing.md)。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-447">For information on boxing value types, see [Boxing and Unboxing](~/docs/csharp/programming-guide/types/boxing-and-unboxing.md).</span></span>  
  
-   <span data-ttu-id="5bd2a-448">當比較字串。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-448">When comparing strings.</span></span> <span data-ttu-id="5bd2a-449">如果`objA`和`objB`是字串，<xref:System.Object.ReferenceEquals%2A>方法會傳回`true`如果實習的字串。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-449">If `objA` and `objB` are strings, the <xref:System.Object.ReferenceEquals%2A> method returns `true` if the string is interned.</span></span> <span data-ttu-id="5bd2a-450">它不會執行測試的值相等。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-450">It does not perform a test for value equality.</span></span>  <span data-ttu-id="5bd2a-451">在下列範例中，`s1`和`s2`相等，因為它們是兩個執行個體已經保留的單一字串。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-451">In the following example, `s1` and `s2` are equal because they are two instances of a single interned string.</span></span> <span data-ttu-id="5bd2a-452">不過，`s3`和`s4`不相等，因為雖然它們有相同的字串值時，該字串未被保留了。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-452">However, `s3` and `s4` are not equal, because although they are have identical string values, that string is not interned.</span></span>  
  
     [!code-csharp[System.Object.ReferenceEquals#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.referenceequals/cs/referenceequalsa.cs#2)]
     [!code-vb[System.Object.ReferenceEquals#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.referenceequals/vb/referenceequalsa.vb#2)]  
  
     <span data-ttu-id="5bd2a-453">如需有關字串拘留的詳細資訊，請參閱<xref:System.String.IsInterned%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-453">For more information about string interning, see <xref:System.String.IsInterned%2A?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5bd2a-454">下列範例會使用<xref:System.Object.ReferenceEquals%2A>來判斷兩個物件是否相同的執行個體。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-454">The following example uses <xref:System.Object.ReferenceEquals%2A> to determine if two objects are the same instance.</span></span>  
  
 [!code-cpp[ECMA-System.Object.ReferenceEquals#1](~/samples/snippets/cpp/VS_Snippets_CLR/ECMA-System.Object.ReferenceEquals/CPP/referenceequals.cpp#1)]
 [!code-csharp[ECMA-System.Object.ReferenceEquals#1](~/samples/snippets/csharp/VS_Snippets_CLR/ECMA-System.Object.ReferenceEquals/CS/referenceequals.cs#1)]
 [!code-vb[ECMA-System.Object.ReferenceEquals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ECMA-System.Object.ReferenceEquals/vb/referenceequals.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public virtual string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Object.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="5bd2a-455">傳回代表目前物件的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5bd2a-455">Returns a string that represents the current object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5bd2a-456">表示目前物件的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5bd2a-456">A string that represents the current object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5bd2a-457"><xref:System.Object.ToString%2A?displayProperty=nameWithType> 主要格式在.NET Framework 中的方法。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-457"><xref:System.Object.ToString%2A?displayProperty=nameWithType> is the major formatting method in the .NET Framework.</span></span> <span data-ttu-id="5bd2a-458">它將物件轉換為其字串表示，因此適合顯示。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-458">It converts an object to its string representation so that it is suitable for display.</span></span> <span data-ttu-id="5bd2a-459">(如需格式在.NET Framework 的支援資訊，請參閱[格式化型別](~/docs/standard/base-types/formatting-types.md)。)預設實作<xref:System.Object.ToString%2A?displayProperty=nameWithType>方法傳回的物件類型的完整的名稱。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-459">(For information about formatting support in the .NET Framework, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).) Default implementations of the <xref:System.Object.ToString%2A?displayProperty=nameWithType> method return the fully qualified name of the object's type.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="5bd2a-460">您可能會到達此頁面由另一種類型的成員清單中的下列連結。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-460">You may have reached this page by following the link from the member list of another type.</span></span> <span data-ttu-id="5bd2a-461">這是因為該類型不會覆寫<xref:System.Object.ToString%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-461">That is because that type does not override <xref:System.Object.ToString%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="5bd2a-462">相反地，它所繼承的功能<xref:System.Object.ToString%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-462">Instead, it inherits the functionality of the <xref:System.Object.ToString%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="5bd2a-463">型別經常覆寫<xref:System.Object.ToString%2A?displayProperty=nameWithType>方法以提供更適合的字串表示，特定的型別。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-463">Types frequently override the <xref:System.Object.ToString%2A?displayProperty=nameWithType> method to provide a more suitable string representation of a particular type.</span></span> <span data-ttu-id="5bd2a-464">型別也經常多載<xref:System.Object.ToString%2A?displayProperty=nameWithType>方法，以支援的格式字串，或區分文化特性的格式。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-464">Types also frequently overload the <xref:System.Object.ToString%2A?displayProperty=nameWithType> method to provide support for format strings or culture-sensitive formatting.</span></span>  
  
 <span data-ttu-id="5bd2a-465">本節內容：</span><span class="sxs-lookup"><span data-stu-id="5bd2a-465">In this section:</span></span>  
  
 <span data-ttu-id="5bd2a-466">[預設 object.tostring （） 方法](#Default) </span><span class="sxs-lookup"><span data-stu-id="5bd2a-466">[The default Object.ToString() method](#Default) </span></span>  
 <span data-ttu-id="5bd2a-467">[覆寫 object.tostring （） 方法](#Overriding) </span><span class="sxs-lookup"><span data-stu-id="5bd2a-467">[Overriding the Object.ToString() method](#Overriding) </span></span>  
 <span data-ttu-id="5bd2a-468">[ToString 方法多載化](#Overloading) </span><span class="sxs-lookup"><span data-stu-id="5bd2a-468">[Overloading the ToString method](#Overloading) </span></span>  
 <span data-ttu-id="5bd2a-469">[擴充 Object.ToString 方法](#Extending) </span><span class="sxs-lookup"><span data-stu-id="5bd2a-469">[Extending the Object.ToString method](#Extending) </span></span>  
 [<span data-ttu-id="5bd2a-470">Windows 執行階段資訊</span><span class="sxs-lookup"><span data-stu-id="5bd2a-470">Notes for the Windows Runtime</span></span>](#WinRT)  
  
<a name="Default"></a>   
## <a name="the-default-objecttostring-method"></a><span data-ttu-id="5bd2a-471">預設 object.tostring （） 方法</span><span class="sxs-lookup"><span data-stu-id="5bd2a-471">The default Object.ToString() method</span></span>  
 <span data-ttu-id="5bd2a-472">預設實作<xref:System.Object.ToString%2A>方法會傳回型別的完整格式的名稱<xref:System.Object>，如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-472">The default implementation of the <xref:System.Object.ToString%2A> method returns the fully qualified name of the type of the <xref:System.Object>, as the following example shows.</span></span>  
  
 [!code-cpp[System.Object.ToString#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.object.tostring/cpp/tostring1.cpp#1)]
 [!code-csharp[System.Object.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.tostring/cs/tostring1.cs#1)]
 [!code-vb[System.Object.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.tostring/vb/tostring1.vb#1)]  
  
 <span data-ttu-id="5bd2a-473">因為<xref:System.Object>的基底類別的所有參考型別在.NET Framework 中，此行為由參考型別，不會覆寫繼承<xref:System.Object.ToString%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-473">Because <xref:System.Object> is the base class of all reference types in the .NET Framework, this behavior is inherited by reference types that do not override the <xref:System.Object.ToString%2A> method.</span></span> <span data-ttu-id="5bd2a-474">下列範例將說明這點。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-474">The following example illustrates this.</span></span> <span data-ttu-id="5bd2a-475">它會定義名為類別`Object1`接受所有的預設實作<xref:System.Object>成員。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-475">It defines a class named `Object1` that accepts the default implementation of all <xref:System.Object> members.</span></span> <span data-ttu-id="5bd2a-476">其<xref:System.Object.ToString%2A>方法會傳回物件的完整限定的類型名稱。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-476">Its <xref:System.Object.ToString%2A> method returns the object's fully qualified type name.</span></span>  
  
 [!code-cpp[System.Object.ToString#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.object.tostring/cpp/tostring2.cpp#2)]
 [!code-csharp[System.Object.ToString#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.tostring/cs/tostring2.cs#2)]
 [!code-vb[System.Object.ToString#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.tostring/vb/tostring2.vb#2)]  
  
<a name="Overriding"></a>   
## <a name="overriding-the-objecttostring-method"></a><span data-ttu-id="5bd2a-477">覆寫 object.tostring （） 方法</span><span class="sxs-lookup"><span data-stu-id="5bd2a-477">Overriding the Object.ToString() method</span></span>  
 <span data-ttu-id="5bd2a-478">型別通常覆寫<xref:System.Object.ToString%2A?displayProperty=nameWithType>方法以傳回字串，表示物件執行個體。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-478">Types commonly override the <xref:System.Object.ToString%2A?displayProperty=nameWithType> method to return a string that represents the object instance.</span></span> <span data-ttu-id="5bd2a-479">例如，基底類型例如<xref:System.Char>， <xref:System.Int32>，和<xref:System.String>提供<xref:System.Object.ToString%2A>傳回物件所代表之值的字串形式的實作。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-479">For example, the base types such as <xref:System.Char>, <xref:System.Int32>, and <xref:System.String> provide <xref:System.Object.ToString%2A> implementations that return the string form of the value that the object represents.</span></span> <span data-ttu-id="5bd2a-480">下列範例會定義一個類別， `Object2`，會覆寫<xref:System.Object.ToString%2A>方法以傳回型別名稱與其值。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-480">The following example defines a class, `Object2`, that overrides the <xref:System.Object.ToString%2A> method to return the type name along with its value.</span></span>  
  
 [!code-cpp[System.Object.ToString#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.object.tostring/cpp/tostring3.cpp#3)]
 [!code-csharp[System.Object.ToString#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.tostring/cs/tostring3.cs#3)]
 [!code-vb[System.Object.ToString#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.tostring/vb/tostring3.vb#3)]  
  
 <span data-ttu-id="5bd2a-481">下表列出.NET Framework 中的類型分類，並指出是否它們會覆寫<xref:System.Object.ToString%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-481">The following table lists the type categories in the .NET Framework and indicates whether or not they override the <xref:System.Object.ToString%2A?displayProperty=nameWithType> method.</span></span>  
  
|<span data-ttu-id="5bd2a-482">型別分類</span><span class="sxs-lookup"><span data-stu-id="5bd2a-482">Type category</span></span>|<span data-ttu-id="5bd2a-483">覆寫 object.tostring （)</span><span class="sxs-lookup"><span data-stu-id="5bd2a-483">Overrides Object.ToString()</span></span>|<span data-ttu-id="5bd2a-484">行為</span><span class="sxs-lookup"><span data-stu-id="5bd2a-484">Behavior</span></span>|  
|-------------------|-----------------------------------|--------------|  
|<span data-ttu-id="5bd2a-485">類別</span><span class="sxs-lookup"><span data-stu-id="5bd2a-485">Class</span></span>|<span data-ttu-id="5bd2a-486">N/A</span><span class="sxs-lookup"><span data-stu-id="5bd2a-486">n/a</span></span>|<span data-ttu-id="5bd2a-487">N/A</span><span class="sxs-lookup"><span data-stu-id="5bd2a-487">n/a</span></span>|  
|<span data-ttu-id="5bd2a-488">結構</span><span class="sxs-lookup"><span data-stu-id="5bd2a-488">Structure</span></span>|<span data-ttu-id="5bd2a-489">是 (<xref:System.ValueType.ToString%2A?displayProperty=nameWithType>)</span><span class="sxs-lookup"><span data-stu-id="5bd2a-489">Yes (<xref:System.ValueType.ToString%2A?displayProperty=nameWithType>)</span></span>|<span data-ttu-id="5bd2a-490">相同 object.tostring （）</span><span class="sxs-lookup"><span data-stu-id="5bd2a-490">Same as Object.ToString()</span></span>|  
|<span data-ttu-id="5bd2a-491">列舉</span><span class="sxs-lookup"><span data-stu-id="5bd2a-491">Enumeration</span></span>|<span data-ttu-id="5bd2a-492">是 (<xref:System.Enum.ToString?displayProperty=nameWithType>)</span><span class="sxs-lookup"><span data-stu-id="5bd2a-492">Yes (<xref:System.Enum.ToString?displayProperty=nameWithType>)</span></span>|<span data-ttu-id="5bd2a-493">成員名稱</span><span class="sxs-lookup"><span data-stu-id="5bd2a-493">The member name</span></span>|  
|<span data-ttu-id="5bd2a-494">介面</span><span class="sxs-lookup"><span data-stu-id="5bd2a-494">Interface</span></span>|<span data-ttu-id="5bd2a-495">否</span><span class="sxs-lookup"><span data-stu-id="5bd2a-495">No</span></span>|<span data-ttu-id="5bd2a-496">N/A</span><span class="sxs-lookup"><span data-stu-id="5bd2a-496">n/a</span></span>|  
|<span data-ttu-id="5bd2a-497">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="5bd2a-497">Delegate</span></span>|<span data-ttu-id="5bd2a-498">否</span><span class="sxs-lookup"><span data-stu-id="5bd2a-498">No</span></span>|<span data-ttu-id="5bd2a-499">N/A</span><span class="sxs-lookup"><span data-stu-id="5bd2a-499">n/a</span></span>|  
  
 <span data-ttu-id="5bd2a-500">請參閱注意事項繼承者注意事項 > 一節，如需詳細資訊，覆寫<xref:System.Object.ToString%2A>。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-500">See the Notes to Inheritors section for additional information on overriding <xref:System.Object.ToString%2A>.</span></span>  
  
<a name="Overloading"></a>   
## <a name="overloading-the-tostring-method"></a><span data-ttu-id="5bd2a-501">ToString 方法多載化</span><span class="sxs-lookup"><span data-stu-id="5bd2a-501">Overloading the ToString method</span></span>  
 <span data-ttu-id="5bd2a-502">除了覆寫的無參數<xref:System.Object.ToString?displayProperty=nameWithType>方法中，許多型別多載`ToString`方法以提供方法的接受參數的版本。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-502">In addition to overriding the parameterless <xref:System.Object.ToString?displayProperty=nameWithType> method, many types overload the `ToString` method to provide versions of the method that accept parameters.</span></span> <span data-ttu-id="5bd2a-503">大多數情況下，這是為了提供變數的格式和文化特性格式的支援。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-503">Most commonly, this is done to provide support for variable formatting and culture-sensitive formatting.</span></span>  
  
 <span data-ttu-id="5bd2a-504">下列範例會多載`ToString`方法以傳回結果字串，其中包含的各種欄位的值`Automobile`類別。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-504">The following example overloads the `ToString` method to return a result string that includes the value of various fields of an `Automobile` class.</span></span> <span data-ttu-id="5bd2a-505">它會定義四個格式字串： G，會傳回年度，則與模型名稱D，傳回模型名稱、 年和的門。C，傳回模型名稱、 年份和數目的磁柱;和 A，它會傳回所有的四個欄位值的字串。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-505">It defines four format strings: G, which returns the model name and year; D, which returns the model name, year, and number of doors; C, which returns the model name, year, and number of cylinders; and A, which returns a string with all four field values.</span></span>  
  
 [!code-csharp[System.Object.ToString#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.tostring/cs/tostringoverload1.cs#4)]
 [!code-vb[System.Object.ToString#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.tostring/vb/tostringoverload1.vb#4)]  
  
 <span data-ttu-id="5bd2a-506">下列範例會呼叫多載<xref:System.Decimal.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>方法來顯示文化特性的貨幣值的格式。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-506">The following example calls the overloaded <xref:System.Decimal.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> method to display culture-sensitive formatting of a currency value.</span></span>  
  
 [!code-csharp[System.Object.ToString#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.tostring/cs/tostringoverload2.cs#5)]
 [!code-vb[System.Object.ToString#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.tostring/vb/tostringoverload2.vb#5)]  
  
 <span data-ttu-id="5bd2a-507">如需有關格式字串和文化特性格式的詳細資訊，請參閱[格式化型別](~/docs/standard/base-types/formatting-types.md)。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-507">For more information on format strings and culture-sensitive formatting, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).</span></span> <span data-ttu-id="5bd2a-508">支援的數值格式字串，請參閱[標準數值格式字串](~/docs/standard/base-types/standard-numeric-format-strings.md)和[自訂數值格式字串](~/docs/standard/base-types/custom-numeric-format-strings.md)。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-508">For the format strings supported by numeric values, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).</span></span> <span data-ttu-id="5bd2a-509">支援的日期和時間值的格式字串，請參閱[標準日期和時間格式字串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)和[自訂日期和時間格式字串](~/docs/standard/base-types/custom-date-and-time-format-strings.md)。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-509">For the format strings supported by date and time values, see [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md).</span></span>  
  
<a name="Extending"></a>   
## <a name="extending-the-objecttostring-method"></a><span data-ttu-id="5bd2a-510">擴充 Object.ToString 方法</span><span class="sxs-lookup"><span data-stu-id="5bd2a-510">Extending the Object.ToString method</span></span>  
 <span data-ttu-id="5bd2a-511">因為類型會繼承預設<xref:System.Object.ToString%2A?displayProperty=nameWithType>方法，您可能會尋找其行為不想要並想要進行變更。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-511">Because a type inherits the default <xref:System.Object.ToString%2A?displayProperty=nameWithType> method, you may find its behavior undesirable and want to change it.</span></span> <span data-ttu-id="5bd2a-512">特別是陣列和集合類別。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-512">This is particularly true of arrays and collection classes.</span></span> <span data-ttu-id="5bd2a-513">雖然您可能預期`ToString`方法来顯示其成員的值陣列或集合類別，它改為顯示類型的完整限定的類型名稱，如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-513">While you may expect the `ToString` method of an array or collection class to display the values of its members, it instead displays the type fully qualified type name, as the following example shows.</span></span>  
  
 [!code-csharp[System.Object.ToString#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.tostring/cs/array1.cs#6)]
 [!code-vb[System.Object.ToString#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.tostring/vb/array1.vb#6)]  
  
 <span data-ttu-id="5bd2a-514">您有數個選項，以產生您想要的結果字串。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-514">You have several options to produce the result string that you'd like.</span></span>  
  
-   <span data-ttu-id="5bd2a-515">如果類型是陣列、 集合物件或該物件會實作<xref:System.Collections.IEnumerable>或<xref:System.Collections.Generic.IEnumerable%601>介面，您可以使用列舉其項目`foreach`C# 中的陳述式或`For Each...Next`在 Visual Basic 中建構。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-515">If the type is an array, a collection object, or an object that implements the <xref:System.Collections.IEnumerable> or <xref:System.Collections.Generic.IEnumerable%601> interfaces, you can enumerate its elements by using the `foreach` statement in C# or the `For Each...Next` construct in Visual Basic.</span></span>  
  
-   <span data-ttu-id="5bd2a-516">如果類別不是`sealed`（C# 中） 或`NotInheritable`（在 Visual Basic 中)，您可以開發其繼承自基底類別的包裝函數類別<xref:System.Object.ToString%2A?displayProperty=nameWithType>您想要自訂的方法。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-516">If the class is not `sealed` (in C#) or `NotInheritable` (in Visual Basic), you can develop a wrapper class that inherits from the base class whose <xref:System.Object.ToString%2A?displayProperty=nameWithType> method you want to customize.</span></span> <span data-ttu-id="5bd2a-517">最小，這需要您下列：</span><span class="sxs-lookup"><span data-stu-id="5bd2a-517">At a minimum, this requires that you do the following:</span></span>  
  
    1.  <span data-ttu-id="5bd2a-518">實作任何必要的建構函式。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-518">Implement any necessary constructors.</span></span> <span data-ttu-id="5bd2a-519">在衍生的類別不會繼承其基底類別建構函式。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-519">Derived classes do not inherit their base class constructors.</span></span>  
  
    2.  <span data-ttu-id="5bd2a-520">覆寫<xref:System.Object.ToString%2A?displayProperty=nameWithType>方法以傳回您想要的結果字串。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-520">Override the <xref:System.Object.ToString%2A?displayProperty=nameWithType> method to return the result string that you'd like.</span></span>  
  
     <span data-ttu-id="5bd2a-521">下列範例定義的包裝函式類別<xref:System.Collections.Generic.List%601>類別。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-521">The following example defines a wrapper class for the <xref:System.Collections.Generic.List%601> class.</span></span> <span data-ttu-id="5bd2a-522">它會覆寫<xref:System.Object.ToString%2A?displayProperty=nameWithType>方法，以顯示每個方法的集合，而不是完整限定的類型名稱的值。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-522">It overrides the <xref:System.Object.ToString%2A?displayProperty=nameWithType> method to display the value of each method of the collection rather than the fully qualified type name.</span></span>  
  
     [!code-csharp[System.Object.ToString#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.tostring/cs/customize1.cs#7)]
     [!code-vb[System.Object.ToString#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.tostring/vb/customize1.vb#7)]  
  
-   <span data-ttu-id="5bd2a-523">開發[擴充方法](~/docs/standard/design-guidelines/extension-methods.md)傳回您想要的結果字串。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-523">Develop an [extension method](~/docs/standard/design-guidelines/extension-methods.md) that returns the result string that you want.</span></span> <span data-ttu-id="5bd2a-524">請注意，您無法覆寫預設<xref:System.Object.ToString%2A?displayProperty=nameWithType>方法以這種方式 (也就是您的延伸模組類別 （C# 中） 或 （在 Visual Basic) 的模組不能有無參數方法，名為`ToString`，而呼叫取代原始型別`ToString`方法.</span><span class="sxs-lookup"><span data-stu-id="5bd2a-524">Note that you can't override the default <xref:System.Object.ToString%2A?displayProperty=nameWithType> method in this way (that is, your extension class (in C#) or module (in Visual Basic) cannot have a parameterless method named `ToString` that is called in place of the original type's `ToString` method.</span></span> <span data-ttu-id="5bd2a-525">您必須提供其他的名稱為您的無參數`ToString`取代。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-525">You'll have to provide some other name for your parameterless `ToString` replacement.</span></span>  
  
     <span data-ttu-id="5bd2a-526">下列範例會定義兩個方法來擴充<xref:System.Collections.Generic.List%601>類別： 無參數`ToString2`方法，和`ToString`方法<xref:System.String>表示的格式字串參數。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-526">The following example defines two methods that extend the <xref:System.Collections.Generic.List%601> class: a parameterless `ToString2` method, and a `ToString` method with a <xref:System.String> parameter that represents a format string.</span></span>  
  
     [!code-csharp[System.Object.ToString#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.tostring/cs/customize2.cs#8)]
     [!code-vb[System.Object.ToString#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.tostring/vb/customize2.vb#8)]  
  
<a name="WinRT"></a>   
## <a name="notes-for-the-includewrtincludeswrt-mdmd"></a><span data-ttu-id="5bd2a-527">附註 [!INCLUDE[wrt](~/includes/wrt-md.md)]</span><span class="sxs-lookup"><span data-stu-id="5bd2a-527">Notes for the [!INCLUDE[wrt](~/includes/wrt-md.md)]</span></span>  
 <span data-ttu-id="5bd2a-528">當您呼叫<xref:System.Object.ToString%2A>中之類別的方法[!INCLUDE[wrt](~/includes/wrt-md.md)]，它提供的預設行為不覆寫的類別<xref:System.Object.ToString%2A>。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-528">When you call the <xref:System.Object.ToString%2A> method on a class in the [!INCLUDE[wrt](~/includes/wrt-md.md)], it provides the default behavior for classes that don’t override <xref:System.Object.ToString%2A>.</span></span> <span data-ttu-id="5bd2a-529">這是.NET Framework 所提供的支援[!INCLUDE[wrt](~/includes/wrt-md.md)](請參閱[.NET Framework 支援的 Windows 市集應用程式和 Windows 執行階段](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md))。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-529">This is part of the support that the .NET Framework provides for the [!INCLUDE[wrt](~/includes/wrt-md.md)] (see [.NET Framework Support for Windows Store Apps and Windows Runtime](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)).</span></span> <span data-ttu-id="5bd2a-530">中的類別[!INCLUDE[wrt](~/includes/wrt-md.md)]不繼承<xref:System.Object>，且永遠不要只實作<xref:System.Object.ToString%2A>。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-530">Classes in the [!INCLUDE[wrt](~/includes/wrt-md.md)] don’t inherit <xref:System.Object>, and don’t always implement a <xref:System.Object.ToString%2A>.</span></span> <span data-ttu-id="5bd2a-531">不過，它們一定會顯示有<xref:System.Object.ToString%2A>， <xref:System.Object.Equals%28System.Object%29>，和<xref:System.Object.GetHashCode%2A>方法，當您在您的 C# 或 Visual Basic 程式碼，使用與.NET Framework 會提供這些方法中的預設行為。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-531">However, they always appear to have <xref:System.Object.ToString%2A>, <xref:System.Object.Equals%28System.Object%29>, and <xref:System.Object.GetHashCode%2A> methods when you use them in your C# or Visual Basic code, and the .NET Framework provides a default behavior for these methods.</span></span>  
  
 <span data-ttu-id="5bd2a-532">從開始[!INCLUDE[net_v451](~/includes/net-v451-md.md)]，common language runtime 會使用[IStringable.ToString](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.tostring.aspx)上[!INCLUDE[wrt](~/includes/wrt-md.md)]物件的預設實作回到之前<xref:System.Object.ToString%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-532">Starting with the [!INCLUDE[net_v451](~/includes/net-v451-md.md)], the common language runtime will use [IStringable.ToString](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.tostring.aspx) on a [!INCLUDE[wrt](~/includes/wrt-md.md)] object before falling back to the default implementation of <xref:System.Object.ToString%2A?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  [!INCLUDE[wrt](~/includes/wrt-md.md)]<span data-ttu-id="5bd2a-533"> 以 C# 或 Visual Basic 撰寫的類別可以覆寫<xref:System.Object.ToString%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-533"> classes that are written in C# or Visual Basic can override the <xref:System.Object.ToString%2A> method.</span></span>  
  
### <a name="the-includewrtincludeswrt-mdmd-and-the-istringable-interface"></a><span data-ttu-id="5bd2a-534">[!INCLUDE[wrt](~/includes/wrt-md.md)]和 IStringable 介面</span><span class="sxs-lookup"><span data-stu-id="5bd2a-534">The [!INCLUDE[wrt](~/includes/wrt-md.md)] and the IStringable Interface</span></span>  
 <span data-ttu-id="5bd2a-535">從開始[!INCLUDE[win81](~/includes/win81-md.md)]、[!INCLUDE[wrt](~/includes/wrt-md.md)]包含[IStringable](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx)介面方法[IStringable.ToString](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.tostring.aspx)，提供基本格式支援的比較所提供<xref:System.Object.ToString%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-535">Starting with [!INCLUDE[win81](~/includes/win81-md.md)], the [!INCLUDE[wrt](~/includes/wrt-md.md)] includes an [IStringable](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx) interface whose single method, [IStringable.ToString](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.tostring.aspx), provides basic formatting support comparable to that provided by <xref:System.Object.ToString%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="5bd2a-536">若要避免模稜兩可，您不應該實作[IStringable](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx) managed 類型上。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-536">To prevent ambiguity, you should not implement [IStringable](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx) on managed types.</span></span>  
  
 <span data-ttu-id="5bd2a-537">當受管理的物件稱為原生程式碼或程式碼撰寫語言，例如 JavaScript 或 C + + /CX 中，它們會顯示實作[IStringable](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx)。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-537">When managed objects are called by native code or by code written in languages such as JavaScript or C++/CX, they appear to implement [IStringable](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx).</span></span> <span data-ttu-id="5bd2a-538">Common language runtime 會自動路由傳送來自呼叫[IStringable.ToString](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.tostring.aspx)至<xref:System.Object.ToString%2A?displayProperty=nameWithType>在事件[IStringable](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx)未實作在 managed 物件上。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-538">The common language runtime will automatically route calls from [IStringable.ToString](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.tostring.aspx) to <xref:System.Object.ToString%2A?displayProperty=nameWithType> in the event [IStringable](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx) is not implemented on the managed object.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="5bd2a-539">因為 common language runtime 自動實作[IStringable](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx)所有管理中的型別[!INCLUDE[win8_appstore_long](~/includes/win8-appstore-long-md.md)]應用程式中，我們建議您，您不會提供您自己[IStringable](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx)實作。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-539">Because the common language runtime auto-implements [IStringable](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx) for all managed types in [!INCLUDE[win8_appstore_long](~/includes/win8-appstore-long-md.md)] apps, we recommend that you do not provide your own [IStringable](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx) implementation.</span></span> <span data-ttu-id="5bd2a-540">實作[IStringable](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx)呼叫時，可能會導致非預期的行為`ToString`從[!INCLUDE[wrt](~/includes/wrt-md.md)]、 C + + /CX 中或 JavaScript。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-540">Implementing [IStringable](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx) may result in unintended behavior when calling `ToString` from the [!INCLUDE[wrt](~/includes/wrt-md.md)], C++/CX, or JavaScript.</span></span>  
  
 <span data-ttu-id="5bd2a-541">如果您選擇實作[IStringable](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx)中匯出的公用 managed 類型中[!INCLUDE[wrt](~/includes/wrt-md.md)]元件，請套用下列限制：</span><span class="sxs-lookup"><span data-stu-id="5bd2a-541">If you do choose to implement [IStringable](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx) in a public managed type that is exported in a [!INCLUDE[wrt](~/includes/wrt-md.md)] component, the following restrictions apply:</span></span>  
  
-   <span data-ttu-id="5bd2a-542">您可以定義[IStringable](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx)介面只能在 「 類別實作 」 關聯性，例如</span><span class="sxs-lookup"><span data-stu-id="5bd2a-542">You can define the [IStringable](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx) interface only in a "class implements" relationship, such as</span></span>  
  
    ```csharp  
    public class NewClass : IStringable  
    ```  
  
     <span data-ttu-id="5bd2a-543">在 C# 中，或</span><span class="sxs-lookup"><span data-stu-id="5bd2a-543">in C#, or</span></span>  
  
    ```vb  
    Public Class NewClass : Implements IStringable  
    ```  
  
     <span data-ttu-id="5bd2a-544">在 Visual Basic 中。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-544">in Visual Basic.</span></span>  
  
-   <span data-ttu-id="5bd2a-545">您不能實作[IStringable](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx)介面上。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-545">You cannot implement [IStringable](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx) on an interface.</span></span>  
  
-   <span data-ttu-id="5bd2a-546">您無法為型別參數宣告[IStringable](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx)。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-546">You cannot declare a parameter to be of type [IStringable](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx).</span></span>  
  
-   <span data-ttu-id="5bd2a-547">[IStringable](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx)不能是方法、 屬性或欄位的傳回型別。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-547">[IStringable](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx) cannot be the return type of a method, property, or field.</span></span>  
  
-   <span data-ttu-id="5bd2a-548">您無法隱藏您[IStringable](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx)從使用如下所示的方法定義的基底類別的實作：</span><span class="sxs-lookup"><span data-stu-id="5bd2a-548">You cannot hide your [IStringable](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx) implementation from base classes by using a method definition such as the following:</span></span>  
  
    ```csharp  
  
    public class NewClass : IStringable  
    {  
       public new string ToString()  
       {  
          return "New ToString in NewClass";  
       }  
    }  
  
    ```  
  
     <span data-ttu-id="5bd2a-549">相反地， [IStringable.ToString](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.tostring.aspx)實作一律必須覆寫基底類別實作。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-549">Instead, the [IStringable.ToString](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.tostring.aspx) implementation must always override the base class implementation.</span></span> <span data-ttu-id="5bd2a-550">您只能藉由針對強型別類別執行個體叫用 `ToString` 實作來隱藏該實作。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-550">You can hide a `ToString` implementation only by invoking it on a strongly typed class instance.</span></span>  
  
 <span data-ttu-id="5bd2a-551">請注意，在各種不同的條件，從原生程式碼來實作的 managed 類型[IStringable](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx)或隱藏其[ToString](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.tostring.aspx)實作可能會產生非預期的行為。</span><span class="sxs-lookup"><span data-stu-id="5bd2a-551">Note that under a variety of conditions, calls from native code to a managed type that implements [IStringable](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx) or hides its [ToString](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.tostring.aspx) implementation can produce unexpected behavior.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="5bd2a-552">
            <para>當您實作您自己的類型時，您應該覆寫<see cref="M:System.Object.ToString" />方法傳回對這些類型有意義的值。在衍生類別需要更多控制的格式比<see cref="M:System.Object.ToString" />提供可實作<see cref="T:System.IFormattable" />介面。其<see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />方法可讓您定義控制格式的格式字串，並使用<see cref="T:System.IFormatProvider" />可以提供特定文化特性格式化的物件。覆寫的<see cref="M:System.Object.ToString" />方法應該遵循這些指導方針:-友善且由人類可讀取，應傳回的字串。 -傳回的字串應專門用於識別物件的執行個體的值。 -傳回的字串應該越短越好，使其適用於偵錯工具顯示。 -您<see cref="M:System.Object.ToString" />覆寫不應該傳回<see cref="F:System.String.Empty" />或 null 字串。 -您<see cref="M:System.Object.ToString" />覆寫應該不會擲回例外狀況。 -如果執行個體的字串表示區分文化特性，或可以多種方式進行格式化，實作<see cref="T:System.IFormattable" />介面。 -如果傳回的字串包含機密資訊，您應該先要求適當的權限。如果要求成功，您可以傳回的敏感資訊。否則，您應該會傳回不包含機密資訊的字串。 -您<see cref="M:System.Object.ToString" />覆寫應具有任何副作用若要避免在偵錯的複雜性。例如，若要呼叫<see cref="M:System.Object.ToString" />方法不應該變更的執行個體欄位的值。 -如果您的型別所實作之剖析方法 (或<see langword="Parse" />或<see langword="TryParse" />方法、 建構函式或某些其他靜態方法，會具現化的類型從字串的執行個體)，您應該確保所傳回的字串<see cref="M:System.Object.ToString" />方法可以是轉換成物件執行個體。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="5bd2a-552">
              <para>When you implement your own types, you should override the <see cref="M:System.Object.ToString" /> method to return values that are meaningful for those types. Derived classes that require more control over formatting than <see cref="M:System.Object.ToString" /> provides can implement the <see cref="T:System.IFormattable" /> interface. Its <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" /> method enables you to define format strings that control formatting and to use an <see cref="T:System.IFormatProvider" /> object that can provide for culture-specific formatting.  Overrides of the <see cref="M:System.Object.ToString" /> method should follow these guidelines:  -   The returned string should be friendly and readable by humans.  -   The returned string should uniquely identify the value of the object instance.  -   The returned string should be as short as possible so that it is suitable for display by a debugger.  -   Your <see cref="M:System.Object.ToString" /> override should not return <see cref="F:System.String.Empty" /> or a null string.  -   Your <see cref="M:System.Object.ToString" /> override should not throw an exception.  -   If the string representation of an instance is culture-sensitive or can be formatted in multiple ways, implement the <see cref="T:System.IFormattable" /> interface.  -   If the returned string includes sensitive information, you should first demand an appropriate permission. If the demand succeeds, you can return the sensitive information; otherwise, you should return a string that excludes the sensitive information.  -   Your <see cref="M:System.Object.ToString" /> override should have no observable side effects to avoid complications in debugging. For example, a call to the <see cref="M:System.Object.ToString" /> method should not change the value of instance fields.  -   If your type implements a parsing method (or <see langword="Parse" /> or <see langword="TryParse" /> method, a constructor, or some other static method that instantiates an instance of the type from a string), you should ensure that the string returned by the <see cref="M:System.Object.ToString" /> method can be converted to an object instance.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>