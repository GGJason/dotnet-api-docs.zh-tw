<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="InvalidOperationException.xml" source-language="en-US" target-language="zh-TW">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac57eef3c78c550cc2f6c9c891703b21cfbe65f49ec.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7eef3c78c550cc2f6c9c891703b21cfbe65f49ec</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.InvalidOperationException">
          <source>The exception that is thrown when a method call is invalid for the object's current state.</source>
          <target state="translated">當方法呼叫對物件的目前狀態無效時所擲回的例外狀況。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source><ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> is used in cases when the failure to invoke a method is caused by reasons other than invalid arguments.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> 用於情況下，當叫用方法的錯誤無效的引數以外的原因所造成。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>Typically, it is thrown when the state of an object cannot support the method call.</source>
          <target state="translated">通常，它會擲回時，物件的狀態無法支援方法呼叫。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>For example, an <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> exception is thrown by methods such as:</source>
          <target state="translated">例如，<ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph>例外狀況的方法擲回類似：</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A?displayProperty=nameWithType&gt;</ph> if objects of a collection are modified after the enumerator is created.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A?displayProperty=nameWithType&gt;</ph> 如果建立列舉值之後，會修改物件的集合。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>For more information, see <bpt id="p1">[</bpt>Changing a collection while iterating it<ept id="p1">](#Iterating)</ept>.</source>
          <target state="translated">如需詳細資訊，請參閱<bpt id="p1">[</bpt>變更反覆運算它時收集<ept id="p1">](#Iterating)</ept>。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source><ph id="ph1">&lt;xref:System.Resources.ResourceSet.GetString%2A?displayProperty=nameWithType&gt;</ph> if the resource set is closed before the method call is made.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Resources.ResourceSet.GetString%2A?displayProperty=nameWithType&gt;</ph> 如果前已關閉的資源集合則會在方法呼叫。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source><ph id="ph1">&lt;xref:System.Xml.Linq.XContainer.Add%2A?displayProperty=nameWithType&gt;</ph>, if the object or objects to be added would result in an incorrectly structured XML document.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Linq.XContainer.Add%2A?displayProperty=nameWithType&gt;</ph>或多個要加入的物件會不正確的結構化的 XML 文件中產生。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>A method that attempts to manipulate the UI from a thread that is not the main or UI thread.</source>
          <target state="translated">這種方法來操作從非主執行緒或 UI 執行緒 UI 嘗試。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>Because the <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> exception can be thrown in a wide variety of circumstances, it is important to read the exception message returned by the <ph id="ph2">&lt;xref:System.Exception.Message%2A&gt;</ph> property.</source>
          <target state="translated">因為<ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph>擲回例外狀況在各種不同的情況下，務必閱讀所傳回的例外狀況訊息<ph id="ph2">&lt;xref:System.Exception.Message%2A&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>In this section:</source>
          <target state="translated">本節內容：</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source><bpt id="p1">[</bpt>Some common causes of InvalidOperationException exceptions<ept id="p1">](#Causes)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>InvalidOperationException 例外狀況的一些常見原因<ept id="p1">](#Causes)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source><bpt id="p1">[</bpt>Updating a UI thread from a non-UI thread<ept id="p1">](#UI)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>更新 UI 執行緒，從非 UI 執行緒<ept id="p1">](#UI)</ept></target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source><bpt id="p1">[</bpt>Changing a collection while iterating it<ept id="p1">](#Iterating)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>當它逐一查看集合的變更<ept id="p1">](#Iterating)</ept></target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source><bpt id="p1">[</bpt>Sorting an array or collection whose objects cannot be compared<ept id="p1">](#Sorting)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>排序無法比較的物件陣列或集合<ept id="p1">](#Sorting)</ept></target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source><bpt id="p1">[</bpt>Casting a Nullable<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph> that is null to its underlying type<ept id="p1">](#Nullable)</ept><ph id="ph3"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>轉型將<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph>可為 null，為其基礎類型<ept id="p1">](#Nullable)</ept><ph id="ph3"> </ph></target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source><bpt id="p1">[</bpt>Calling a System.Linq.Enumerable method on an empty collection<ept id="p1">](#Empty)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>在空集合上呼叫的 System.Linq.Enumerable 方法<ept id="p1">](#Empty)</ept></target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source><bpt id="p1">[</bpt>Calling Enumerable.Single or Enumerable.SingleOrDefault on a sequence without one element<ept id="p1">](#Single)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>上不含一個元素的順序呼叫 Enumerable.Single 或 Enumerable.SingleOrDefault<ept id="p1">](#Single)</ept></target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source><bpt id="p1">[</bpt>Dynamic cross-application domain field access<ept id="p1">](#Emit)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>動態跨應用程式網域欄位存取權<ept id="p1">](#Emit)</ept></target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source><bpt id="p1">[</bpt>Throwing an InvalidOperationException exception<ept id="p1">](#Throwing)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>擲回 InvalidOperationException 例外狀況<ept id="p1">](#Throwing)</ept></target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source><bpt id="p1">[</bpt>Miscellaneous information<ept id="p1">](#Misc)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>其他資訊<ept id="p1">](#Misc)</ept></target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>Some common causes of InvalidOperationException exceptions</source>
          <target state="translated">InvalidOperationException 例外狀況的一些常見原因</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>The following sections show how some common cases in which in <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> exception is thrown in an app.</source>
          <target state="translated">下列章節將示範一些常見中所在的情況下<ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph>應用程式中擲回例外狀況。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>How you handle the issue depends on the specific situation.</source>
          <target state="translated">處理問題的方式需視特定情況而定。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>Most commonly, however, the exception results from developer error, and the <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> exception can be anticipated and avoided.</source>
          <target state="translated">大多數情況下，然而，例外狀況會導致從開發人員錯誤和<ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph>可以預測並避免例外狀況。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>Updating a UI thread from a non-UI thread</source>
          <target state="translated">更新 UI 執行緒，從非 UI 執行緒</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>Often, worker threads are used to perform some background work that involves gathering data to be displayed in an application's user interface.</source>
          <target state="translated">通常，背景工作執行緒可用來執行某些背景工作，包含收集要在應用程式的使用者介面中顯示的資料。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>However.</source>
          <target state="translated">不過。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>most GUI (graphical user interface) application frameworks for the .NET Framework, such as Windows Forms and Windows Presentation Foundation (WPF),  let you access GUI objects only from the thread that creates and manages the UI (the Main or UI thread).</source>
          <target state="translated">大部分的 GUI （圖形化使用者介面） 應用程式架構，適用於.NET Framework，例如 Windows Form 和 Windows Presentation Foundation (WPF) 可讓您只會從執行緒建立及管理 UI （主要或 UI 執行緒） 存取 GUI 物件。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>An <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> is thrown when you try to access a UI element from a thread other than the UI thread.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph>您嘗試從 UI 執行緒以外的執行緒存取 UI 項目時，會擲回。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>The text of the exception message is shown in the following table.</source>
          <target state="translated">下表中顯示的例外狀況訊息文字。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>Application Type</source>
          <target state="translated">應用程式類型</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>Message</source>
          <target state="translated">訊息</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>WPF app</source>
          <target state="translated">WPF 應用程式</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source><bpt id="p1">**</bpt>The calling thread cannot access this object because a different thread owns it.<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>呼叫執行緒無法存取此物件，因為另一個執行緒。<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>UWP app</source>
          <target state="translated">UWP 應用程式</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source><bpt id="p1">**</bpt>The application called an interface that was marshalled for a different thread.<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>應用程式給不同執行緒中呼叫了封送處理的介面。<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>Windows Forms app</source>
          <target state="translated">Windows Form 應用程式</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source><bpt id="p1">**</bpt>Cross-thread operation not valid: Control 'TextBox1' accessed from a thread other than the thread it was created on.<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>跨執行緒作業無效： 控制項 'TextBox1' 從其所建立的執行緒以外的執行緒存取。<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>UI frameworks for the .NET Framework implement a <bpt id="p1">*</bpt>dispatcher<ept id="p1">*</ept> pattern that includes a method to check whether a call to a member of a UI element is being executed on the UI thread, and other methods to schedule the call on the UI thread:</source>
          <target state="translated">適用於.NET Framework 的 UI 架構實作<bpt id="p1">*</bpt>發送器<ept id="p1">*</ept>模式，其中包含檢查是否正在 UI 執行緒上執行的 UI 元素成員呼叫的方法和 UI 執行緒上排定呼叫的其他方法：</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>In WPF apps, call the <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.CheckAccess%2A?displayProperty=nameWithType&gt;</ph> method to determine if a method is running on a non-UI thread.</source>
          <target state="translated">在 WPF 應用程式中，呼叫<ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.CheckAccess%2A?displayProperty=nameWithType&gt;</ph>方法，以判斷方法是否執行於非 UI 執行緒。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>It returns <ph id="ph1">`true`</ph> if the method is running on the UI thread and <ph id="ph2">`false`</ph> otherwise.</source>
          <target state="translated">它會傳回<ph id="ph1">`true`</ph>如果 UI 執行緒上執行的方法和<ph id="ph2">`false`</ph>否則。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>Call one of the overloads of the <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A?displayProperty=nameWithType&gt;</ph> method to schedule the call on the UI thread.</source>
          <target state="translated">呼叫其中一個多載的<ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A?displayProperty=nameWithType&gt;</ph>UI 執行緒上排定呼叫的方法。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>In UWP apps, call the <bpt id="p1">[</bpt>CoreDispatcher.HasThreadAccess<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/windows.ui.core.coredispatcher.hasthreadaccess.aspx)</ept> method to determine if a method is running on a non-UI thread.</source>
          <target state="translated">在 UWP 應用程式中，呼叫<bpt id="p1">[</bpt>CoreDispatcher.HasThreadAccess<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/windows.ui.core.coredispatcher.hasthreadaccess.aspx)</ept>方法，以判斷方法是否執行於非 UI 執行緒。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>Call the  <bpt id="p1">[</bpt>CoreDispatcher.RunAsync<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/windows.ui.core.coredispatcher.runasync.aspx)</ept> method to execute a delegate that updates the UI thread.</source>
          <target state="translated">呼叫<bpt id="p1">[</bpt>CoreDispatcher.RunAsync<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/windows.ui.core.coredispatcher.runasync.aspx)</ept>方法才能執行更新 UI 執行緒的委派。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>Use the</source>
          <target state="translated">使用</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>In Windows Forms apps, use the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.InvokeRequired%2A?displayProperty=nameWithType&gt;</ph> property to determine if a method is running on a non-UI thread.</source>
          <target state="translated">在 Windows Form 應用程式，使用<ph id="ph1">&lt;xref:System.Windows.Forms.Control.InvokeRequired%2A?displayProperty=nameWithType&gt;</ph>屬性來判斷方法是否執行於非 UI 執行緒。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>Call one of the overloads of the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invoke%2A?displayProperty=nameWithType&gt;</ph> method to execute a delegate that updates the UI thread.</source>
          <target state="translated">呼叫其中一個多載的<ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invoke%2A?displayProperty=nameWithType&gt;</ph>方法才能執行更新 UI 執行緒的委派。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>The following examples illustrate the <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> exception that is thrown when you attempt to update a UI element from a thread other than the thread that created it.</source>
          <target state="translated">下列範例說明<ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph>您嘗試更新 UI 項目從建立它的執行緒以外的執行緒時，會擲回的例外狀況。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>Each example requires that you create two controls:</source>
          <target state="translated">每個範例，您必須建立兩個控制項：</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>A text box control named <ph id="ph1">`textBox1`</ph>.</source>
          <target state="translated">命名文字方塊控制項<ph id="ph1">`textBox1`</ph>。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>In a Windows Forms app, you should set its <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox.Multiline%2A&gt;</ph> property to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">在 Windows Form 應用程式中，您必須設定其<ph id="ph1">&lt;xref:System.Windows.Forms.TextBox.Multiline%2A&gt;</ph>屬性<ph id="ph2">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>A button  control named <ph id="ph1">`threadExampleBtn`</ph>.</source>
          <target state="translated">按鈕控制項，名為<ph id="ph1">`threadExampleBtn`</ph>。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>The example provides a handler, <ph id="ph1">`ThreadsExampleBtn_Click`</ph>, for the button's <ph id="ph2">`Click`</ph> event.</source>
          <target state="translated">這個範例將提供處理常式， <ph id="ph1">`ThreadsExampleBtn_Click`</ph>，按鈕<ph id="ph2">`Click`</ph>事件。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>In each case, the <ph id="ph1">`threadExampleBtn_Click`</ph> event handler calls the <ph id="ph2">`DoSomeWork`</ph> method twice.</source>
          <target state="translated">在每個案例中，<ph id="ph1">`threadExampleBtn_Click`</ph>事件處理常式呼叫<ph id="ph2">`DoSomeWork`</ph>方法兩次。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>The first call runs synchronously and succeeds.</source>
          <target state="translated">第一次呼叫會以同步方式執行，而且會成功。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>But the second call, because it runs asynchronously on a thread pool thread, attempts to update the UI from a non-UI thread.</source>
          <target state="translated">但第二次呼叫，因為它以非同步方式執行在執行緒集區執行緒，嘗試從非 UI 執行緒更新 UI。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>This results in a <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> exception.</source>
          <target state="translated">這會導致<ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph>例外狀況。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>WPF and UWP apps</source>
          <target state="translated">WPF 和 UWP 應用程式</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>The following version of the <ph id="ph1">`DoSomeWork`</ph> method eliminates the exception in a WPF app.</source>
          <target state="translated">下列版本<ph id="ph1">`DoSomeWork`</ph>方法消除 WPF 應用程式中的例外狀況。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>The following version of the <ph id="ph1">`DoSomeWork`</ph> method eliminates the exception in a UWP app.</source>
          <target state="translated">下列版本<ph id="ph1">`DoSomeWork`</ph>方法消除例外狀況的 UWP 應用程式。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>Windows Forms apps</source>
          <target state="translated">Windows Forms 應用程式</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>The following version of the <ph id="ph1">`DoSomeWork`</ph> method eliminates the exception in a Windows Forms app.</source>
          <target state="translated">下列版本<ph id="ph1">`DoSomeWork`</ph>方法會排除在 Windows Form 應用程式中的例外狀況。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>Changing a collection while iterating it</source>
          <target state="translated">當它逐一查看集合的變更</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>The <ph id="ph1">`foreach`</ph> statement in C# or <ph id="ph2">`For Each`</ph> statement in Visual Basic is used to iterate the members of a collection and to read or modify its individual elements.</source>
          <target state="translated"><ph id="ph1">`foreach`</ph> C# 中的陳述式或<ph id="ph2">`For Each`</ph>陳述式在 Visual Basic 中的用來逐一查看集合的成員和讀取或修改其個別項目。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>However, it can't be used to add or remove items from the collection.</source>
          <target state="translated">不過，無法用來新增或移除集合中的項目。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>Doing this throws an  <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> exception with a message that is similar to, "<bpt id="p1">**</bpt>Collection was modified; enumeration operation may not execute.<ept id="p1">**</ept>"</source>
          <target state="translated">如此一來，這會擲回<ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph>以訊息相似，例外狀況 」<bpt id="p1">**</bpt>集合已修改;列舉操作可能無法執行。<ept id="p1">**</ept>"</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>The following example iterates a collection of integers attempts to add the square of each integer to the collection.</source>
          <target state="translated">下列範例會反覆查看加入至集合的每個整數平方嘗試整數的集合。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>The example throws an <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> with the first call to the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Add%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">此範例會擲回<ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph>與第一次呼叫<ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Add%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>You can eliminate the exception in one of two ways, depending on your application logic:</source>
          <target state="translated">您可以根據應用程式邏輯排除中的兩種方式，其中一個例外狀況：</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>If elements must be added to the collection while iterating it, you can iterate it by index using the <ph id="ph1">`for`</ph> statement instead of <ph id="ph2">`foreach`</ph> or <ph id="ph3">`For Each`</ph>.</source>
          <target state="translated">如果項目必須新增至集合中反覆運算它時，可以重複使用索引<ph id="ph1">`for`</ph>陳述式來取代<ph id="ph2">`foreach`</ph>或<ph id="ph3">`For Each`</ph>。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>The following example uses the for statement to add the square of numbers in the collection to the collection.</source>
          <target state="translated">下列範例會使用的陳述式來加入至集合的集合中的數字的平方。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>Note that you must establish the number of iterations before iterating the collection either by using a counter inside the loop that will exit the loop appropraitely, by iterating backward, from <ph id="ph1">`Count`</ph> - 1 to 0, or, as the example does, by assigning the number of elements in the array to a variable and using it to establish the upper bound of the loop.</source>
          <target state="translated">請注意，您必須逐一查看集合藉由使用會逐一查看向後，結束迴圈 appropraitely 中，在迴圈內部計數器之前建立反覆項目數目從<ph id="ph1">`Count`</ph>-1 至 0，或為此範例會執行，藉由指派數目中的項目數的陣列變數，並使用它來建立迴圈的上限。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>Otherwise, if an element is added to the collection on every iteration, an endless loop results.</source>
          <target state="translated">否則，如果項目加入至每個反覆項目上的集合，會無止盡的迴圈。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>If it is not necessary to add elements to the collection while iterating it, you can store the elements to be added in a temporary collection that you add when iterating the collection has finished.</source>
          <target state="translated">如果您不需要將項目加入集合中反覆運算它時，您可以儲存的項目會加入一個暫存集合中您將完成逐一查看集合時。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>The following example uses this approach to add the square of numbers in a collection to a temporary collection, and then to combine the collections into a single array object.</source>
          <target state="translated">下列範例會使用此方式來新增暫時的集合，集合中的數字的平方然後再將合併到單一陣列物件的集合。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>Sorting an array or collection whose objects cannot be compared</source>
          <target state="translated">排序無法比較的物件陣列或集合</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>General-purpose sorting methods, such as the <ph id="ph1">&lt;xref:System.Array.Sort%28System.Array%29?displayProperty=nameWithType&gt;</ph> method or the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Sort?displayProperty=nameWithType&gt;</ph> method, usually require that at least one of the objects to be sorted implement the <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> or the <ph id="ph4">&lt;xref:System.IComparable&gt;</ph> interface.</source>
          <target state="translated">一般用途的排序方法，例如<ph id="ph1">&lt;xref:System.Array.Sort%28System.Array%29?displayProperty=nameWithType&gt;</ph>方法或<ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Sort?displayProperty=nameWithType&gt;</ph>方法，通常需要至少一個要排序的物件實作<ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph>或<ph id="ph4">&lt;xref:System.IComparable&gt;</ph>介面。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>If not, the collection or array cannot be sorted, and the method throws an  <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> exception.</source>
          <target state="translated">如果您沒有，無法排序的集合或陣列，並在方法擲回<ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph>例外狀況。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>The following example defines a <ph id="ph1">`Person`</ph> class, stores two <ph id="ph2">`Person`</ph> objects in a generic <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph> object, and attempts to sort them.</source>
          <target state="translated">下列範例會定義<ph id="ph1">`Person`</ph>類別，兩個存放區<ph id="ph2">`Person`</ph>泛型中的物件<ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph>物件，並嘗試對它們進行排序。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>As the output from the example shows, the call to the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort?displayProperty=nameWithType&gt;</ph> method throws an <ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
          <target state="translated">從範例所示，呼叫輸出<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort?displayProperty=nameWithType&gt;</ph>方法會擲回<ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>You can eliminate the exception in any of three ways:</source>
          <target state="translated">您可以排除任何一種方式中的例外狀況：</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>If you can own the type that you are trying to sort (that is, if you control its source code), you can modify it to implement the <ph id="ph1">&lt;xref:System.IComparable%601&gt;</ph> or the <ph id="ph2">&lt;xref:System.IComparable&gt;</ph> interface.</source>
          <target state="translated">如果您可以擁有想要排序 （也就是如果您要控制其原始碼） 的類型，您可以修改來實作<ph id="ph1">&lt;xref:System.IComparable%601&gt;</ph>或<ph id="ph2">&lt;xref:System.IComparable&gt;</ph>介面。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>This requires that you implement either the <ph id="ph1">&lt;xref:System.IComparable%601.CompareTo%2A?displayProperty=nameWithType&gt;</ph> or the <ph id="ph2">&lt;xref:System.IComparable.CompareTo%2A&gt;</ph> method.</source>
          <target state="translated">這需要，您實作<ph id="ph1">&lt;xref:System.IComparable%601.CompareTo%2A?displayProperty=nameWithType&gt;</ph>或<ph id="ph2">&lt;xref:System.IComparable.CompareTo%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>Adding an interface implementation to an existing type is not a breaking change.</source>
          <target state="translated">介面實作新增至現有的類型不是一項重大變更。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>The following example uses this approach to provide an <ph id="ph1">&lt;xref:System.IComparable%601&gt;</ph> implementation  for the <ph id="ph2">`Person`</ph> class.</source>
          <target state="translated">下列範例會使用這種方法提供<ph id="ph1">&lt;xref:System.IComparable%601&gt;</ph>實作<ph id="ph2">`Person`</ph>類別。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>You can still call the collection or array's general sorting method and, as the output from the example shows, the collection sorts successfully.</source>
          <target state="translated">集合或陣列的一般的排序方法，仍然可以呼叫，如範例輸出所示，成功地排序集合。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>If you cannot modify the source code for the type you are trying to sort, you can define a special-purpose sorting class that implements the <ph id="ph1">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph> interface.</source>
          <target state="translated">如果您無法修改您嘗試排序的類型的原始程式碼，您可以定義特殊用途的排序類別可實作<ph id="ph1">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph>介面。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>You can call an overload of the <ph id="ph1">`Sort`</ph> method that includes an  <ph id="ph2">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph> parameter.</source>
          <target state="translated">您可以呼叫的多載<ph id="ph1">`Sort`</ph>方法包含<ph id="ph2">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph>參數。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>This approach is especially useful if you want to develop a specialized sorting class that can sort objects based on multiple criteria.</source>
          <target state="translated">這個方法是特別有用，如果您想要開發可排序多個準則為基礎的物件的特定排序類別。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>The following example uses the approach by developing a custom <ph id="ph1">`PersonComparer`</ph> class that is used to sort <ph id="ph2">`Person`</ph> collections.</source>
          <target state="translated">下列範例會使用此方法透過開發自訂<ph id="ph1">`PersonComparer`</ph>類別，用來排序<ph id="ph2">`Person`</ph>集合。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>It then passes an instance of this class to the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort%28System.Collections.Generic.IComparer%7B%600%7D%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">接著，將這個類別的執行個體<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort%28System.Collections.Generic.IComparer%7B%600%7D%29?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>If you cannot modify the source code for the type you are trying to sort, you can create a  <ph id="ph1">&lt;xref:System.Comparison%601&gt;</ph> delegate to perform the sorting.</source>
          <target state="translated">如果您無法修改類型的原始程式碼您正在嘗試排序，您可以建立<ph id="ph1">&lt;xref:System.Comparison%601&gt;</ph>委派來執行排序。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>The delegate signature is</source>
          <target state="translated">委派簽章</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>The following example uses the approach by defining a  <ph id="ph1">`PersonComparison`</ph> method that matches the  <ph id="ph2">&lt;xref:System.Comparison%601&gt;</ph> delegate signature.</source>
          <target state="translated">下列範例會使用此方法藉由定義<ph id="ph1">`PersonComparison`</ph>方法符合<ph id="ph2">&lt;xref:System.Comparison%601&gt;</ph>委派簽章。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>It then passes this delegate to the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">接著，將這個委派<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>Casting a Nullable<ph id="ph1">\&lt;</ph>T&gt; that is null to its underlying type</source>
          <target state="translated">轉型將<ph id="ph1">\&lt;</ph>T &gt; 為 null，為其基礎類型</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>Attempting to cast a <ph id="ph1">&lt;xref:System.Nullable%601&gt;</ph> value that is <ph id="ph2">`null`</ph> to its underlying type throws an <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph> exception  and displays the error message, "<bpt id="p1">**</bpt>Nullable object must have a value.<ept id="p1">**</ept></source>
          <target state="translated">嘗試轉換<ph id="ph1">&lt;xref:System.Nullable%601&gt;</ph>值為<ph id="ph2">`null`</ph>轉為其基礎類型會擲回<ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>例外狀況，並顯示錯誤訊息: 「<bpt id="p1">**</bpt>可為 Null 的物件必須具有值。<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>The following example throws an <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> exception  when it attempts to iterate an array that includes a <ph id="ph2">`Nullable(Of Integer)`</ph> value.</source>
          <target state="translated">下列範例會擲回<ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph>例外狀況時，它會嘗試以逐一查看陣列，其中包含<ph id="ph2">`Nullable(Of Integer)`</ph>值。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>To prevent the exception:</source>
          <target state="translated">若要避免這個例外狀況：</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>Use the <ph id="ph1">&lt;xref:System.Nullable%601.HasValue%2A?displayProperty=nameWithType&gt;</ph> property to select only those elements that are not <ph id="ph2">`null`</ph>.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Nullable%601.HasValue%2A?displayProperty=nameWithType&gt;</ph>屬性，以選取那些不是的元素<ph id="ph2">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>Call one of the <ph id="ph1">&lt;xref:System.Nullable%601.GetValueOrDefault%2A?displayProperty=nameWithType&gt;</ph> overloads to provide a default value for a <ph id="ph2">`null`</ph> value.</source>
          <target state="translated">呼叫其中一種<ph id="ph1">&lt;xref:System.Nullable%601.GetValueOrDefault%2A?displayProperty=nameWithType&gt;</ph>提供的預設值的多載<ph id="ph2">`null`</ph>值。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>The following example does both to avoid the  <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> exception.</source>
          <target state="translated">下列範例會執行同時避免<ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph>例外狀況。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>Calling a System.Linq.Enumerable method on an empty collection</source>
          <target state="translated">在空集合上呼叫的 System.Linq.Enumerable 方法</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph2">&lt;xref:System.Linq.Enumerable.Average%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph3">&lt;xref:System.Linq.Enumerable.First%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph4">&lt;xref:System.Linq.Enumerable.Last%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph5">&lt;xref:System.Linq.Enumerable.Max%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph6">&lt;xref:System.Linq.Enumerable.Min%2A?displayProperty=nameWithType&gt;</ph>,  <ph id="ph7">&lt;xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType&gt;</ph>, and <ph id="ph8">&lt;xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType&gt;</ph> methods perform operations on a sequence and return a single result.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%2A?displayProperty=nameWithType&gt;</ph>， <ph id="ph2">&lt;xref:System.Linq.Enumerable.Average%2A?displayProperty=nameWithType&gt;</ph>， <ph id="ph3">&lt;xref:System.Linq.Enumerable.First%2A?displayProperty=nameWithType&gt;</ph>， <ph id="ph4">&lt;xref:System.Linq.Enumerable.Last%2A?displayProperty=nameWithType&gt;</ph>， <ph id="ph5">&lt;xref:System.Linq.Enumerable.Max%2A?displayProperty=nameWithType&gt;</ph>， <ph id="ph6">&lt;xref:System.Linq.Enumerable.Min%2A?displayProperty=nameWithType&gt;</ph>， <ph id="ph7">&lt;xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType&gt;</ph>，和<ph id="ph8">&lt;xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType&gt;</ph>方法在序列上執行作業，並傳回單一結果。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>Some overloads of these methods throw an <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> exception when the sequence is empty, while other overloads return <ph id="ph2">`null`</ph>.</source>
          <target state="translated">這些方法的某些多載會擲回<ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph>例外狀況序列若是空的雖然其他多載會傳回<ph id="ph2">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType&gt;</ph> method also throws an <ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph> exception when the sequence contains more than one element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType&gt;</ph>方法也會擲回<ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph>例外狀況，當序列包含一個以上的項目。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>Most of the methods that throw an <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> exception are overloads.</source>
          <target state="translated">方法會擲回的大部分<ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph>例外狀況會多載。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>Be sure that you understand the behavior of the overload that you choose.</source>
          <target state="translated">請確定您了解您所選擇的多載的行為。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>The following table lists the exception messages from the <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> exception objects thrown by calls to some <ph id="ph2">&lt;xref:System.Linq.Enumerable?displayProperty=nameWithType&gt;</ph> methods.</source>
          <target state="translated">下表列出從例外狀況訊息<ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph>呼叫部分所擲回的例外狀況物件<ph id="ph2">&lt;xref:System.Linq.Enumerable?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>Method</source>
          <target state="translated">方法</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>Message</source>
          <target state="translated">訊息</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source><bpt id="p1">**</bpt>Sequence contains no elements<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>序列未包含元素<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source><bpt id="p1">**</bpt>Sequence contains no matching element<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>序列包含沒有相符項目<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source><bpt id="p1">**</bpt>Sequence contains more than one matching element<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>序列包含一個以上相符的項目<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>How you eliminate or handle the exception depends on your application's assumptions and on the particular method you call.</source>
          <target state="translated">排除或處理例外狀況的方式取決於您的應用程式假設以及在您呼叫的特定方法。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>When you deliberately call one of these methods without checking for an empty sequence, you are assuming that the sequence is not empty, and that an empty sequence is an unexpected occurrence.</source>
          <target state="translated">當您刻意呼叫其中一種方法而不會檢查空的序列時，假設序列不是空白的、 和空的序列是未預期的元素。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>In this case, catching or rethrowing the exception is appropriate .</source>
          <target state="translated">在此情況下，則捕捉或重新擲回例外狀況就適當。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>If your failure to check for an empty sequence was inadvertent, you can  call one of the overloads of the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Any%2A?displayProperty=nameWithType&gt;</ph> overload to determine whether a sequence contains any elements.</source>
          <target state="translated">如果不小心將空序列檢查失敗，您可以呼叫其中一個多載的<ph id="ph1">&lt;xref:System.Linq.Enumerable.Any%2A?displayProperty=nameWithType&gt;</ph>多載來判斷序列是否包含任何項目。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>Calling the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Any%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29?displayProperty=nameWithType&gt;</ph> method before generating a sequence can improve performance if the data to be processed might contain a large number of elements or if operation that generates the sequence is expensive.</source>
          <target state="translated">呼叫<ph id="ph1">&lt;xref:System.Linq.Enumerable.Any%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29?displayProperty=nameWithType&gt;</ph>再產生一連串的方法可以改善效能，如果要處理的資料可能包含大量項目，或如果產生序列的作業是高度耗費資源。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>If you've called a method such as <ph id="ph1">&lt;xref:System.Linq.Enumerable.First%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph2">&lt;xref:System.Linq.Enumerable.Last%2A?displayProperty=nameWithType&gt;</ph>, or <ph id="ph3">&lt;xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType&gt;</ph>, you can substitute an alternate method, such as <ph id="ph4">&lt;xref:System.Linq.Enumerable.FirstOrDefault%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph5">&lt;xref:System.Linq.Enumerable.LastOrDefault%2A?displayProperty=nameWithType&gt;</ph>, or  <ph id="ph6">&lt;xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType&gt;</ph>, that returns a default value instead of a member of the sequence.</source>
          <target state="translated">如果您已呼叫方法，例如<ph id="ph1">&lt;xref:System.Linq.Enumerable.First%2A?displayProperty=nameWithType&gt;</ph>， <ph id="ph2">&lt;xref:System.Linq.Enumerable.Last%2A?displayProperty=nameWithType&gt;</ph>，或<ph id="ph3">&lt;xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType&gt;</ph>，您也可以替代的替代方法，例如<ph id="ph4">&lt;xref:System.Linq.Enumerable.FirstOrDefault%2A?displayProperty=nameWithType&gt;</ph>， <ph id="ph5">&lt;xref:System.Linq.Enumerable.LastOrDefault%2A?displayProperty=nameWithType&gt;</ph>，或<ph id="ph6">&lt;xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType&gt;</ph>，會傳回預設值，而不是成員的順序。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>The examples provide additional detail.</source>
          <target state="translated">範例提供其他詳細資料。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%2A?displayProperty=nameWithType&gt;</ph> method to compute the average of a sequence whose values are greater than 4.</source>
          <target state="translated">下列範例會使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%2A?displayProperty=nameWithType&gt;</ph>方法來計算其值為大於 4 序列的平均值。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>Since no values from the original array exceed 4, no values are included in the sequence, and the method throws an <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> exception.</source>
          <target state="translated">由於原始陣列中的沒有任何值超過 4，任何值會包含在序列中，並且在方法擲回<ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph>例外狀況。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>The exception can be eliminated by calling the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Any%2A&gt;</ph> method to determine whether the sequence contains any elements before calling the method that processes the sequence, as the following example shows.</source>
          <target state="translated">例外狀況可以藉由呼叫排除<ph id="ph1">&lt;xref:System.Linq.Enumerable.Any%2A&gt;</ph>方法來判斷序列是否包含任何項目之前呼叫方法的處理順序，如下列範例所示。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.First%2A?displayProperty=nameWithType&gt;</ph> method returns the first item in a sequence or the first element in a sequence that satisfies a specified condition.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.First%2A?displayProperty=nameWithType&gt;</ph>方法會傳回第一個項目序列中符合指定的條件的順序中的第一個項目。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>If the sequence is empty and therefore does not have a first element, it throws an <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> exception.</source>
          <target state="translated">如果序列是空的因此也沒有第一個項目，它會擲回<ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph>例外狀況。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>In the following example, the <ph id="ph1">&lt;xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29?displayProperty=nameWithType&gt;</ph> method throws an <ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph> exception because the dbQueryResults array doesn't contain an element greater than 4.</source>
          <target state="translated">在下列範例中，<ph id="ph1">&lt;xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29?displayProperty=nameWithType&gt;</ph>方法會擲回<ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph>例外狀況因為 dbQueryResults 陣列沒有包含大於 4 的元素。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>You can call the <ph id="ph1">&lt;xref:System.Linq.Enumerable.FirstOrDefault%2A?displayProperty=nameWithType&gt;</ph> method instead of <ph id="ph2">&lt;xref:System.Linq.Enumerable.First%2A?displayProperty=nameWithType&gt;</ph> to return a specified or default value.</source>
          <target state="translated">您可以呼叫<ph id="ph1">&lt;xref:System.Linq.Enumerable.FirstOrDefault%2A?displayProperty=nameWithType&gt;</ph>方法，而非<ph id="ph2">&lt;xref:System.Linq.Enumerable.First%2A?displayProperty=nameWithType&gt;</ph>，傳回指定或預設值。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>If the method does not find a first element in the sequence, it returns  the default value for that data type.</source>
          <target state="translated">如果方法在序列中找不到第一個項目，它會傳回該資料類型的預設值。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>The default value is <ph id="ph1">`null`</ph> for a reference type, zero for a numeric data type, and <ph id="ph2">&lt;xref:System.DateTime.MinValue?displayProperty=nameWithType&gt;</ph> for the <ph id="ph3">&lt;xref:System.DateTime&gt;</ph> type.</source>
          <target state="translated">預設值是<ph id="ph1">`null`</ph>參考型別，零的數值資料類型，和<ph id="ph2">&lt;xref:System.DateTime.MinValue?displayProperty=nameWithType&gt;</ph>如<ph id="ph3">&lt;xref:System.DateTime&gt;</ph>型別。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>Interpreting the value returned by the <ph id="ph1">&lt;xref:System.Linq.Enumerable.FirstOrDefault%2A?displayProperty=nameWithType&gt;</ph> method is often complicated by the fact that the default value of the type can be a valid value in the sequence.</source>
          <target state="translated">解譯所傳回的值<ph id="ph1">&lt;xref:System.Linq.Enumerable.FirstOrDefault%2A?displayProperty=nameWithType&gt;</ph>方法通常複雜類型的預設值可以是有效的值序列中的事實。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>In this case, you an call the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Any%2A?displayProperty=nameWithType&gt;</ph> method to determine whether the sequence has valid members before calling the <ph id="ph2">&lt;xref:System.Linq.Enumerable.First%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">在此情況下，您呼叫<ph id="ph1">&lt;xref:System.Linq.Enumerable.Any%2A?displayProperty=nameWithType&gt;</ph>方法來判斷序列是否具有有效的成員，然後再呼叫<ph id="ph2">&lt;xref:System.Linq.Enumerable.First%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>The following example calls the  <ph id="ph1">&lt;xref:System.Linq.Enumerable.FirstOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29?displayProperty=nameWithType&gt;</ph> method to prevent the <ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph> exception thrown in the previous example.</source>
          <target state="translated">下列範例會呼叫<ph id="ph1">&lt;xref:System.Linq.Enumerable.FirstOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29?displayProperty=nameWithType&gt;</ph>方法，以防止<ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph>前一個範例中擲回例外狀況。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>Calling Enumerable.Single or Enumerable.SingleOrDefault on a sequence without one element</source>
          <target state="translated">上不含一個元素的順序呼叫 Enumerable.Single 或 Enumerable.SingleOrDefault</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType&gt;</ph> method returns the only element of a sequence, or the only element of a sequence that meets a specified condition.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType&gt;</ph>方法會傳回序列中，只有項目或序列中符合指定的條件的唯一項目。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>If there are no elements in the sequence, or if there is more than one element , the method throws an <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> exception.</source>
          <target state="translated">如果有任何項目在順序中，或如果有多個項目，方法會擲回<ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph>例外狀況。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>You can use the <ph id="ph1">&lt;xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType&gt;</ph> method to return a default value instead of throwing an exception when the sequence contains no elements.</source>
          <target state="translated">您可以使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType&gt;</ph>方法來傳回預設值，而不是擲回例外狀況，當序列中沒有包含任何項目。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>However, the <ph id="ph1">&lt;xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType&gt;</ph> method still throws an <ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph> exception  when the sequence contains more than one element.</source>
          <target state="translated">不過，<ph id="ph1">&lt;xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType&gt;</ph>方法仍會擲回<ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph>例外狀況，當序列包含一個以上的項目。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>The following table lists the exception messages from the <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> exception objects thrown by calls to the <ph id="ph2">&lt;xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph3">&lt;xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType&gt;</ph> methods.</source>
          <target state="translated">下表列出從例外狀況訊息<ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph>呼叫所擲回的例外狀況物件<ph id="ph2">&lt;xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType&gt;</ph>和<ph id="ph3">&lt;xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>Method</source>
          <target state="translated">方法</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>Message</source>
          <target state="translated">訊息</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source><bpt id="p1">**</bpt>Sequence contains no matching element<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>序列包含沒有相符項目<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source><bpt id="p1">**</bpt>Sequence contains more than one matching element<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>序列包含一個以上相符的項目<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>In the following example, the call to the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType&gt;</ph> method throws an <ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph> exception because the sequence doesn't have an element greater than 4.</source>
          <target state="translated">在下列範例中，呼叫<ph id="ph1">&lt;xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType&gt;</ph>方法會擲回<ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph>例外狀況因為順序不會包含大於 4 的元素。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>The following example attempts to prevent the <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> exception thrown when a sequence is empty by instead calling the <ph id="ph2">&lt;xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">下列範例會嘗試防止<ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph>序列是空的改為呼叫時擲回的例外狀況<ph id="ph2">&lt;xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>However, because this sequence returns multiple elements whose value is greater than 2, it also throws an <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> exception.</source>
          <target state="translated">不過，由於此順序會傳回其值大於 2 的多個項目，它也會擲回<ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph>例外狀況。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>Calling the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType&gt;</ph> method assumes that either a sequence or the sequence that meets specified criteria contains only one element.</source>
          <target state="translated">呼叫<ph id="ph1">&lt;xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType&gt;</ph>方法會假設序列或符合指定的準則的順序包含只有一個項目。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType&gt;</ph> assumes a sequence with zero or one result, but no more.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType&gt;</ph> 假設具有零個或一個結果，但沒有更多的順序。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>If this assumption is a deliberate one on your part and these conditions are not met, rethrowing or catching the resulting <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> is appropriate.</source>
          <target state="translated">這項假設您刻意建立一個，而且不符合這些條件，如果重新擲回或攔截產生<ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph>適合。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>Otherwise, or if you expect that invalid conditions will occur with some frequency, you should consider using some other <ph id="ph1">&lt;xref:System.Linq.Enumerable&gt;</ph> method, such as <ph id="ph2">&lt;xref:System.Linq.Enumerable.FirstOrDefault%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Linq.Enumerable.Where%2A&gt;</ph>.</source>
          <target state="translated">否則，或如果您需要無效的條件會以某些頻率發生，您應該考慮使用其他<ph id="ph1">&lt;xref:System.Linq.Enumerable&gt;</ph>方法，例如<ph id="ph2">&lt;xref:System.Linq.Enumerable.FirstOrDefault%2A&gt;</ph>或<ph id="ph3">&lt;xref:System.Linq.Enumerable.Where%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>Dynamic cross-application domain field access</source>
          <target state="translated">動態跨應用程式網域欄位存取權</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.Emit.OpCodes.Ldflda?displayProperty=nameWithType&gt;</ph> Microsoft intermediate language (MSIL) instruction throws an <ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph> exception if the object containing the field whose address you are trying to retrieve is not within the application domain in which your code is executing.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.Emit.OpCodes.Ldflda?displayProperty=nameWithType&gt;</ph> Microsoft intermediate language (MSIL) 指令會擲回<ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph>如果包含的欄位想要擷取其位址的物件不在程式碼執行的應用程式定義域內的例外狀況。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>The address of a field can only be accessed from the application domain in which it resides.</source>
          <target state="translated">只能從它所在的應用程式網域存取欄位的位址。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>Throwing an InvalidOperationException exception</source>
          <target state="translated">擲回 InvalidOperationException 例外狀況</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>You should throw an <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> exception only when the state of your object for some reason does not support a particular method call.</source>
          <target state="translated">您應該擲回<ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph>基於某些原因您物件的狀態不支援特定的方法呼叫時，才例外狀況。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>That is, the method call is valid in some circumstances or contexts, but is invalid in others.</source>
          <target state="translated">也就是方法呼叫無效，在某些情況下或內容中，但不能用在其他人。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>If the method invocation failure is due to invalid arguments, then <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph> or one of its derived classes, <ph id="ph2">&lt;xref:System.ArgumentNullException&gt;</ph> or <ph id="ph3">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph>, should be thrown instead.</source>
          <target state="translated">如果方法引動過程失敗的原因是無效的引數，然後<ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph>或其衍生的類別，其中<ph id="ph2">&lt;xref:System.ArgumentNullException&gt;</ph>或<ph id="ph3">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph>，應該改為擲回。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>Miscellaneous information</source>
          <target state="translated">其他資訊</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source><ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> uses the HRESULT COR_E_INVALIDOPERATION, which has the value 0x80131509.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> 會使用 HRESULT COR_E_INVALIDOPERATION，0x80131509 的值。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.InvalidOperationException">
          <source>For a list of initial property values for an instance of <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph>, see the <ph id="ph2">&lt;xref:System.InvalidOperationException.%23ctor%2A&gt;</ph> constructors.</source>
          <target state="translated">如需執行個體的初始屬性值的清單<ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph>，請參閱<ph id="ph2">&lt;xref:System.InvalidOperationException.%23ctor%2A&gt;</ph>建構函式。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="T:System.InvalidOperationException">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.InvalidOperationException" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.InvalidOperationException" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.InvalidOperationException.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.InvalidOperationException" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.InvalidOperationException" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.InvalidOperationException.#ctor">
          <source>This constructor initializes the <ph id="ph1">&lt;xref:System.Exception.Message%2A&gt;</ph> property of the new instance to a system-supplied message that describes the error, such as "The requested operation cannot be performed."</source>
          <target state="translated">這個建構函式初始化<ph id="ph1">&lt;xref:System.Exception.Message%2A&gt;</ph>屬性的新執行個體的系統提供的訊息描述錯誤，例如 「 無法執行要求的作業。 」</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.InvalidOperationException.#ctor">
          <source>This message takes into account the current system culture.</source>
          <target state="translated">此訊息會考量目前的系統文化特性。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.InvalidOperationException.#ctor">
          <source>The following table shows the initial property values for an instance of <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
          <target state="translated">下表顯示 <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> 執行個體的初始屬性值。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.InvalidOperationException.#ctor">
          <source>Property</source>
          <target state="translated">屬性</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.InvalidOperationException.#ctor">
          <source>Value</source>
          <target state="translated">值</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.InvalidOperationException.#ctor">
          <source>A null reference (<ph id="ph1">`Nothing`</ph> in Visual Basic).</source>
          <target state="translated">null 參考 (在 Visual Basic 中為 <ph id="ph1">`Nothing`</ph>)。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.InvalidOperationException.#ctor">
          <source>The localized error message string.</source>
          <target state="translated">當地語系化的錯誤訊息字串。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.InvalidOperationException.#ctor(System.String)">
          <source>The message that describes the error.</source>
          <target state="translated">描述錯誤的訊息。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="M:System.InvalidOperationException.#ctor(System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.InvalidOperationException" /&gt;</ph> class with a specified error message.</source>
          <target state="translated">使用指定的錯誤訊息，初始化 <ph id="ph1">&lt;see cref="T:System.InvalidOperationException" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.InvalidOperationException.#ctor(System.String)">
          <source>This constructor initializes the <ph id="ph1">&lt;xref:System.Exception.Message%2A?displayProperty=nameWithType&gt;</ph> property of the new exception using the <ph id="ph2">`message`</ph> parameter.</source>
          <target state="translated">這個建構函式初始化<ph id="ph1">&lt;xref:System.Exception.Message%2A?displayProperty=nameWithType&gt;</ph>屬性的新的例外狀況使用<ph id="ph2">`message`</ph>參數。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.InvalidOperationException.#ctor(System.String)">
          <source>The content of <ph id="ph1">`message`</ph> is intended to be understood by humans.</source>
          <target state="translated"><ph id="ph1">`message`</ph> 的內容必須能讓人了解。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.InvalidOperationException.#ctor(System.String)">
          <source>The caller of this constructor is required to ensure that this string has been localized for the current system culture.</source>
          <target state="translated">這個建構函式的呼叫端必須確保這個字串已經被當地語系化 (為了目前系統的文化特性)。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.InvalidOperationException.#ctor(System.String)">
          <source>The following table shows the initial property values for an instance of <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
          <target state="translated">下表顯示 <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> 執行個體的初始屬性值。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.InvalidOperationException.#ctor(System.String)">
          <source>Property</source>
          <target state="translated">屬性</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.InvalidOperationException.#ctor(System.String)">
          <source>Value</source>
          <target state="translated">值</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.InvalidOperationException.#ctor(System.String)">
          <source>A null reference (<ph id="ph1">`Nothing`</ph> in Visual Basic).</source>
          <target state="translated">null 參考 (在 Visual Basic 中為 <ph id="ph1">`Nothing`</ph>)。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.InvalidOperationException.#ctor(System.String)">
          <source>The error message string.</source>
          <target state="translated">錯誤訊息字串。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.InvalidOperationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The object that holds the serialized object data.</source>
          <target state="translated">存放序列物件資料的物件。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.InvalidOperationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The contextual information about the source or destination.</source>
          <target state="translated">關於來源或目的端的內容資訊。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.InvalidOperationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.InvalidOperationException" /&gt;</ph> class with serialized data.</source>
          <target state="translated">使用序列化資料，初始化 <ph id="ph1">&lt;see cref="T:System.InvalidOperationException" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.InvalidOperationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>This constructor is called during deserialization to reconstitute the exception object transmitted over a stream.</source>
          <target state="translated">進行還原序列化 (Deserialization) 期間會呼叫這個建構函式，以便重新構成經由資料流傳送的例外狀況物件。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.InvalidOperationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>For more information, see <bpt id="p1">[</bpt>XML and SOAP Serialization<ept id="p1">](~/docs/standard/serialization/xml-and-soap-serialization.md)</ept>.</source>
          <target state="translated">如需詳細資訊，請參閱<bpt id="p1">[</bpt>XML 和 SOAP 序列化<ept id="p1">](~/docs/standard/serialization/xml-and-soap-serialization.md)</ept>。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="M:System.InvalidOperationException.#ctor(System.String,System.Exception)">
          <source>The error message that explains the reason for the exception.</source>
          <target state="translated">解釋例外狀況原因的錯誤訊息。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:System.InvalidOperationException.#ctor(System.String,System.Exception)">
          <source>The exception that is the cause of the current exception.</source>
          <target state="translated">做為目前例外狀況發生原因的例外狀況。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.InvalidOperationException.#ctor(System.String,System.Exception)">
          <source>If the <bpt id="p1">&lt;c&gt;</bpt>innerException<ept id="p1">&lt;/c&gt;</ept> parameter is not a null reference (<ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> in Visual Basic), the current exception is raised in a <ph id="ph2">&lt;see langword="catch" /&gt;</ph> block that handles the inner exception.</source>
          <target state="translated">如果 <bpt id="p1">&lt;c&gt;</bpt>innerException<ept id="p1">&lt;/c&gt;</ept> 參數不是 Null 參考 (在 Visual Basic 中為 <ph id="ph1">&lt;see langword="Nothing" /&gt;</ph>)，則會在處理內部例外狀況的 <ph id="ph2">&lt;see langword="catch" /&gt;</ph> 區塊中引發目前的例外狀況。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.InvalidOperationException.#ctor(System.String,System.Exception)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.InvalidOperationException" /&gt;</ph> class with a specified error message and a reference to the inner exception that is the cause of this exception.</source>
          <target state="translated">使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <ph id="ph1">&lt;see cref="T:System.InvalidOperationException" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.InvalidOperationException.#ctor(System.String,System.Exception)">
          <source>An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property.</source>
          <target state="translated">被擲回以做為前一個例外狀況直接結果的例外狀況，應該在 <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> 屬性中包含對前一個例外狀況的參考。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.InvalidOperationException.#ctor(System.String,System.Exception)">
          <source>The <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property returns the same value that is passed into the constructor, or a null reference (<ph id="ph2">`Nothing`</ph> in Visual Basic) if the <ph id="ph3">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property does not supply the inner exception value to the constructor.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> 屬性會傳回與傳入建構函式中相同的值；如果 <ph id="ph2">`Nothing`</ph> 屬性不提供內部例外值給建構函式，則傳回 null 參考 (在 Visual Basic 中為 <ph id="ph3">&lt;xref:System.Exception.InnerException%2A&gt;</ph>)。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.InvalidOperationException.#ctor(System.String,System.Exception)">
          <source>The following table shows the initial property values for an instance of <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
          <target state="translated">下表顯示 <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> 執行個體的初始屬性值。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.InvalidOperationException.#ctor(System.String,System.Exception)">
          <source>Property</source>
          <target state="translated">屬性</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.InvalidOperationException.#ctor(System.String,System.Exception)">
          <source>Value</source>
          <target state="translated">值</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.InvalidOperationException.#ctor(System.String,System.Exception)">
          <source>The inner exception reference.</source>
          <target state="translated">內部例外狀況參考。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.InvalidOperationException.#ctor(System.String,System.Exception)">
          <source>The error message string.</source>
          <target state="translated">錯誤訊息字串。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>