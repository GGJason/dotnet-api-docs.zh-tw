<Type Name="InvalidOperationException" FullName="System.InvalidOperationException">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8387d6f6b9e4ac3bdd851181c766e743445ce3ee" />
    <Meta Name="ms.sourcegitcommit" Value="c0c07dbd19cd7017243f9ac36915755f79bc8da6" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="11/27/2018" />
    <Meta Name="ms.locfileid" Value="52342659" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class InvalidOperationException : SystemException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit InvalidOperationException extends System.SystemException" />
  <TypeSignature Language="DocId" Value="T:System.InvalidOperationException" />
  <TypeSignature Language="VB.NET" Value="Public Class InvalidOperationException&#xA;Inherits SystemException" />
  <TypeSignature Language="C++ CLI" Value="public ref class InvalidOperationException : SystemException" />
  <TypeSignature Language="F#" Value="type InvalidOperationException = class&#xA;    inherit SystemException" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Exception</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.SystemException</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="8b2a6-101">當方法呼叫對物件的目前狀態無效時所擲回的例外狀況。</span>
      <span class="sxs-lookup">
        <span data-stu-id="8b2a6-101">The exception that is thrown when a method call is invalid for the object's current state.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b2a6-102"><xref:System.InvalidOperationException> 用於情況下，當叫用方法失敗起因於無效的引數以外的原因。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-102"><xref:System.InvalidOperationException> is used in cases when the failure to invoke a method is caused by reasons other than invalid arguments.</span></span> <span data-ttu-id="8b2a6-103">通常，它會擲回時物件的狀態無法支援方法呼叫。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-103">Typically, it is thrown when the state of an object cannot support the method call.</span></span> <span data-ttu-id="8b2a6-104">比方說，<xref:System.InvalidOperationException>例外狀況由方法擲回這類：</span><span class="sxs-lookup"><span data-stu-id="8b2a6-104">For example, an <xref:System.InvalidOperationException> exception is thrown by methods such as:</span></span>  
  
-   <span data-ttu-id="8b2a6-105"><xref:System.Collections.IEnumerator.MoveNext%2A?displayProperty=nameWithType> 如果建立列舉值之後，會修改物件的集合。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-105"><xref:System.Collections.IEnumerator.MoveNext%2A?displayProperty=nameWithType> if objects of a collection are modified after the enumerator is created.</span></span> <span data-ttu-id="8b2a6-106">如需詳細資訊，請參閱 <<c0> [ 變更時逐一查看它收集](#Iterating)。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-106">For more information, see [Changing a collection while iterating it](#Iterating).</span></span>  
  
-   <span data-ttu-id="8b2a6-107"><xref:System.Resources.ResourceSet.GetString%2A?displayProperty=nameWithType> 如果資源集已關閉之前，進行方法呼叫。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-107"><xref:System.Resources.ResourceSet.GetString%2A?displayProperty=nameWithType> if the resource set is closed before the method call is made.</span></span>  
  
-   <span data-ttu-id="8b2a6-108"><xref:System.Xml.Linq.XContainer.Add%2A?displayProperty=nameWithType>或多個要加入的物件會不正確的結構化的 XML 文件中產生。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-108"><xref:System.Xml.Linq.XContainer.Add%2A?displayProperty=nameWithType>, if the object or objects to be added would result in an incorrectly structured XML document.</span></span>  
  
-   <span data-ttu-id="8b2a6-109">這種方法來操作從非主執行緒或 UI 執行緒 UI 嘗試。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-109">A method that attempts to manipulate the UI from a thread that is not the main or UI thread.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="8b2a6-110">因為<xref:System.InvalidOperationException>擲回例外狀況中各種不同的情況下，務必要讀取所傳回的例外狀況訊息<xref:System.Exception.Message%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-110">Because the <xref:System.InvalidOperationException> exception can be thrown in a wide variety of circumstances, it is important to read the exception message returned by the <xref:System.Exception.Message%2A> property.</span></span>  
  
 <span data-ttu-id="8b2a6-111">本節內容：</span><span class="sxs-lookup"><span data-stu-id="8b2a6-111">In this section:</span></span>  
  
 <span data-ttu-id="8b2a6-112">[InvalidOperationException 例外狀況的一些常見原因](#Causes) </span><span class="sxs-lookup"><span data-stu-id="8b2a6-112">[Some common causes of InvalidOperationException exceptions](#Causes) </span></span>  
 [<span data-ttu-id="8b2a6-113">更新 UI 執行緒，從非 UI 執行緒</span><span class="sxs-lookup"><span data-stu-id="8b2a6-113">Updating a UI thread from a non-UI thread</span></span>](#UI)  
 [<span data-ttu-id="8b2a6-114">變更時逐一查看它收集</span><span class="sxs-lookup"><span data-stu-id="8b2a6-114">Changing a collection while iterating it</span></span>](#Iterating)  
 [<span data-ttu-id="8b2a6-115">排序無法比較的物件陣列或集合</span><span class="sxs-lookup"><span data-stu-id="8b2a6-115">Sorting an array or collection whose objects cannot be compared</span></span>](#Sorting)  
 <span data-ttu-id="8b2a6-116">[將可為 Null 的轉型&lt;T&gt;是 null，為其基礎類型](#Nullable) </span><span class="sxs-lookup"><span data-stu-id="8b2a6-116">[Casting a Nullable&lt;T&gt; that is null to its underlying type](#Nullable) </span></span>  
 [<span data-ttu-id="8b2a6-117">在空集合上呼叫的 System.Linq.Enumerable 方法</span><span class="sxs-lookup"><span data-stu-id="8b2a6-117">Calling a System.Linq.Enumerable method on an empty collection</span></span>](#Empty)  
 [<span data-ttu-id="8b2a6-118">在沒有一個項目序列呼叫 Enumerable.Single 或 Enumerable.SingleOrDefault</span><span class="sxs-lookup"><span data-stu-id="8b2a6-118">Calling Enumerable.Single or Enumerable.SingleOrDefault on a sequence without one element</span></span>](#Single)  
 [<span data-ttu-id="8b2a6-119">動態跨應用程式網域欄位存取</span><span class="sxs-lookup"><span data-stu-id="8b2a6-119">Dynamic cross-application domain field access</span></span>](#Emit)  
[<span data-ttu-id="8b2a6-120">擲回 InvalidOperationException 例外狀況</span><span class="sxs-lookup"><span data-stu-id="8b2a6-120">Throwing an InvalidOperationException exception</span></span>](#Throwing)  
[<span data-ttu-id="8b2a6-121">其他資訊</span><span class="sxs-lookup"><span data-stu-id="8b2a6-121">Miscellaneous information</span></span>](#Misc)  
  
<a name="Causes"></a>   
## <a name="some-common-causes-of-invalidoperationexception-exceptions"></a><span data-ttu-id="8b2a6-122">InvalidOperationException 例外狀況的一些常見原因</span><span class="sxs-lookup"><span data-stu-id="8b2a6-122">Some common causes of InvalidOperationException exceptions</span></span>  
 <span data-ttu-id="8b2a6-123">下列各節將示範一些常見中所在的情況下<xref:System.InvalidOperationException>應用程式中擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-123">The following sections show how some common cases in which in <xref:System.InvalidOperationException> exception is thrown in an app.</span></span> <span data-ttu-id="8b2a6-124">處理此問題的方式取決於特定的情況。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-124">How you handle the issue depends on the specific situation.</span></span> <span data-ttu-id="8b2a6-125">大多數情況下，不過，例外狀況會造成從開發人員錯誤，而<xref:System.InvalidOperationException>可以預測並避免例外狀況。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-125">Most commonly, however, the exception results from developer error, and the <xref:System.InvalidOperationException> exception can be anticipated and avoided.</span></span>  
  
<a name="UI"></a>   
### <a name="updating-a-ui-thread-from-a-non-ui-thread"></a><span data-ttu-id="8b2a6-126">更新 UI 執行緒，從非 UI 執行緒</span><span class="sxs-lookup"><span data-stu-id="8b2a6-126">Updating a UI thread from a non-UI thread</span></span>  
 <span data-ttu-id="8b2a6-127">通常，背景工作執行緒用以執行涉及在應用程式的使用者介面中顯示的資料收集一些背景工作。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-127">Often, worker threads are used to perform some background work that involves gathering data to be displayed in an application's user interface.</span></span> <span data-ttu-id="8b2a6-128">不過。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-128">However.</span></span> <span data-ttu-id="8b2a6-129">大部分的 GUI （圖形化使用者介面） 應用程式架構，適用於.NET Framework，例如 Windows Form 和 Windows Presentation Foundation (WPF) 可讓您只能從建立及管理 UI （主要或 UI 執行緒） 的執行緒存取 GUI 物件。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-129">most GUI (graphical user interface) application frameworks for the .NET Framework, such as Windows Forms and Windows Presentation Foundation (WPF),  let you access GUI objects only from the thread that creates and manages the UI (the Main or UI thread).</span></span> <span data-ttu-id="8b2a6-130"><xref:System.InvalidOperationException>當您嘗試從非 UI 執行緒的執行緒存取 UI 元素時擲回。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-130">An <xref:System.InvalidOperationException> is thrown when you try to access a UI element from a thread other than the UI thread.</span></span>  <span data-ttu-id="8b2a6-131">下表中，會顯示例外狀況訊息的文字。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-131">The text of the exception message is shown in the following table.</span></span>  
  
|<span data-ttu-id="8b2a6-132">應用程式類型</span><span class="sxs-lookup"><span data-stu-id="8b2a6-132">Application Type</span></span>|<span data-ttu-id="8b2a6-133">訊息</span><span class="sxs-lookup"><span data-stu-id="8b2a6-133">Message</span></span>|  
|----------------------|-------------|  
|<span data-ttu-id="8b2a6-134">WPF 應用程式</span><span class="sxs-lookup"><span data-stu-id="8b2a6-134">WPF app</span></span>|<span data-ttu-id="8b2a6-135">**呼叫執行緒無法存取此物件，因為不同的執行緒所擁有。**</span><span class="sxs-lookup"><span data-stu-id="8b2a6-135">**The calling thread cannot access this object because a different thread owns it.**</span></span>|  
|<span data-ttu-id="8b2a6-136">UWP 應用程式</span><span class="sxs-lookup"><span data-stu-id="8b2a6-136">UWP app</span></span>|<span data-ttu-id="8b2a6-137">**應用程式會針對不同的執行緒呼叫已封送處理的介面。**</span><span class="sxs-lookup"><span data-stu-id="8b2a6-137">**The application called an interface that was marshalled for a different thread.**</span></span>|  
|<span data-ttu-id="8b2a6-138">Windows Forms 應用程式</span><span class="sxs-lookup"><span data-stu-id="8b2a6-138">Windows Forms app</span></span>|<span data-ttu-id="8b2a6-139">**跨執行緒作業無效： 控制項 'TextBox1' 從其所建立的執行緒以外的執行緒存取。**</span><span class="sxs-lookup"><span data-stu-id="8b2a6-139">**Cross-thread operation not valid: Control 'TextBox1' accessed from a thread other than the thread it was created on.**</span></span>|  
  
 <span data-ttu-id="8b2a6-140">適用於.NET Framework 的 UI 架構實作*發送器*模式，其中包含檢查是否正在 UI 執行緒上執行的 UI 元素成員呼叫的方法和其他 UI 執行緒上排定呼叫的方法：</span><span class="sxs-lookup"><span data-stu-id="8b2a6-140">UI frameworks for the .NET Framework implement a *dispatcher* pattern that includes a method to check whether a call to a member of a UI element is being executed on the UI thread, and other methods to schedule the call on the UI thread:</span></span>  
  
-   <span data-ttu-id="8b2a6-141">在 WPF 應用程式呼叫<xref:System.Windows.Threading.Dispatcher.CheckAccess%2A?displayProperty=nameWithType>方法，以判斷某個方法在非 UI 執行緒上執行。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-141">In WPF apps, call the <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A?displayProperty=nameWithType> method to determine if a method is running on a non-UI thread.</span></span> <span data-ttu-id="8b2a6-142">它會傳回`true`如果 UI 執行緒上執行的方法和`false`否則。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-142">It returns `true` if the method is running on the UI thread and `false` otherwise.</span></span> <span data-ttu-id="8b2a6-143">呼叫其中一個多載<xref:System.Windows.Threading.Dispatcher.Invoke%2A?displayProperty=nameWithType>UI 執行緒上排定呼叫的方法。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-143">Call one of the overloads of the <xref:System.Windows.Threading.Dispatcher.Invoke%2A?displayProperty=nameWithType> method to schedule the call on the UI thread.</span></span>  
  
-   <span data-ttu-id="8b2a6-144">在 UWP 應用程式，呼叫[CoreDispatcher.HasThreadAccess](https://msdn.microsoft.com/library/windows/apps/windows.ui.core.coredispatcher.hasthreadaccess.aspx)方法，以判斷某個方法在非 UI 執行緒上執行。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-144">In UWP apps, call the [CoreDispatcher.HasThreadAccess](https://msdn.microsoft.com/library/windows/apps/windows.ui.core.coredispatcher.hasthreadaccess.aspx) method to determine if a method is running on a non-UI thread.</span></span> <span data-ttu-id="8b2a6-145">呼叫[CoreDispatcher.RunAsync](https://msdn.microsoft.com/library/windows/apps/windows.ui.core.coredispatcher.runasync.aspx)方法來執行更新 UI 執行緒的委派。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-145">Call the  [CoreDispatcher.RunAsync](https://msdn.microsoft.com/library/windows/apps/windows.ui.core.coredispatcher.runasync.aspx) method to execute a delegate that updates the UI thread.</span></span> <span data-ttu-id="8b2a6-146">使用</span><span class="sxs-lookup"><span data-stu-id="8b2a6-146">Use the</span></span>  
  
-   <span data-ttu-id="8b2a6-147">在 Windows Forms 應用程式，使用<xref:System.Windows.Forms.Control.InvokeRequired%2A?displayProperty=nameWithType>屬性來判斷是否某個方法是否執行於非 UI 執行緒。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-147">In Windows Forms apps, use the <xref:System.Windows.Forms.Control.InvokeRequired%2A?displayProperty=nameWithType> property to determine if a method is running on a non-UI thread.</span></span> <span data-ttu-id="8b2a6-148">呼叫其中一個多載<xref:System.Windows.Forms.Control.Invoke%2A?displayProperty=nameWithType>方法來執行更新 UI 執行緒的委派。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-148">Call one of the overloads of the <xref:System.Windows.Forms.Control.Invoke%2A?displayProperty=nameWithType> method to execute a delegate that updates the UI thread.</span></span>  
  
 <span data-ttu-id="8b2a6-149">下列範例說明<xref:System.InvalidOperationException>，當您嘗試更新 UI 項目，從建立它的執行緒以外的執行緒時，會擲回的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-149">The following examples illustrate the <xref:System.InvalidOperationException> exception that is thrown when you attempt to update a UI element from a thread other than the thread that created it.</span></span>  <span data-ttu-id="8b2a6-150">每個範例，您必須建立兩個控制項：</span><span class="sxs-lookup"><span data-stu-id="8b2a6-150">Each example requires that you create two controls:</span></span>  
  
-   <span data-ttu-id="8b2a6-151">命名文字方塊控制項`textBox1`。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-151">A text box control named `textBox1`.</span></span>  <span data-ttu-id="8b2a6-152">在 Windows Forms 應用程式中，您應該設定其<xref:System.Windows.Forms.TextBox.Multiline%2A>屬性設`true`。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-152">In a Windows Forms app, you should set its <xref:System.Windows.Forms.TextBox.Multiline%2A> property to `true`.</span></span>  
  
-   <span data-ttu-id="8b2a6-153">按鈕控制項，名為`threadExampleBtn`。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-153">A button  control named `threadExampleBtn`.</span></span> <span data-ttu-id="8b2a6-154">這個範例將提供的處理常式`ThreadsExampleBtn_Click`，針對按鈕的`Click`事件。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-154">The example provides a handler, `ThreadsExampleBtn_Click`, for the button's `Click` event.</span></span>  
  
 <span data-ttu-id="8b2a6-155">在每個案例中，`threadExampleBtn_Click`事件處理常式呼叫`DoSomeWork`方法兩次。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-155">In each case, the `threadExampleBtn_Click` event handler calls the `DoSomeWork` method twice.</span></span> <span data-ttu-id="8b2a6-156">第一次呼叫會以同步方式執行，並成功。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-156">The first call runs synchronously and succeeds.</span></span> <span data-ttu-id="8b2a6-157">但是，第二個呼叫，因為它在執行緒集區執行緒，以非同步方式執行，所以會嘗試從非 UI 執行緒更新 UI。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-157">But the second call, because it runs asynchronously on a thread pool thread, attempts to update the UI from a non-UI thread.</span></span> <span data-ttu-id="8b2a6-158">這會導致<xref:System.InvalidOperationException>例外狀況。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-158">This results in a <xref:System.InvalidOperationException> exception.</span></span>  
  
 <span data-ttu-id="8b2a6-159">WPF 和 UWP 應用程式</span><span class="sxs-lookup"><span data-stu-id="8b2a6-159">WPF and UWP apps</span></span>  
 [!code-csharp[System.InvalidOperationException.Threading.WPF1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wpf1/cs/MainWindow.xaml.cs#1)]
 [!code-vb[System.InvalidOperationException.Threading.WPF1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wpf1/vb/MainWindow.xaml.vb#1)]  
  
 <span data-ttu-id="8b2a6-160">下列版本的`DoSomeWork`方法消除在 WPF 應用程式中例外狀況。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-160">The following version of the `DoSomeWork` method eliminates the exception in a WPF app.</span></span>  
  
 [!code-csharp[System.InvalidOperationException.Threading.WPF2#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wpf2/cs/MainWindowDispatcher.xaml.cs#3)]
 [!code-vb[System.InvalidOperationException.Threading.WPF2#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wpf2/vb/MainWindowDispatcher.xaml.vb#3)]  
  
 <span data-ttu-id="8b2a6-161">下列版本的`DoSomeWork`方法消除在 UWP 應用程式中例外狀況。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-161">The following version of the `DoSomeWork` method eliminates the exception in a UWP app.</span></span>  
  
 [!code-csharp[System.InvalidOperationException.Threading.UWP#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception.threading.uwp/cs/MainPage.xaml.cs#4)]
 [!code-vb[System.InvalidOperationException.Threading.UWP#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception.threading.uwp/vb/MainPage.xaml.vb#4)]  
  
 <span data-ttu-id="8b2a6-162">Windows Forms 應用程式</span><span class="sxs-lookup"><span data-stu-id="8b2a6-162">Windows Forms apps</span></span>  
 [!code-csharp[System.InvalidOperationException.Threading.WF#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wf/cs/Form1.cs#2)]
 [!code-vb[System.InvalidOperationException.Threading.WF#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wf/vb/Form1.vb#2)]  
  
 <span data-ttu-id="8b2a6-163">下列版本的`DoSomeWork`方法消除例外狀況中的 Windows Forms 應用程式。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-163">The following version of the `DoSomeWork` method eliminates the exception in a Windows Forms app.</span></span>  
  
 [!code-csharp[System.InvalidOperationException.Threading.WF2#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wf2/cs/Form1.cs#5)]
 [!code-vb[System.InvalidOperationException.Threading.WF2#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wf2/vb/Form1.vb#5)]  
  
<a name="Iterating"></a>   
### <a name="changing-a-collection-while-iterating-it"></a><span data-ttu-id="8b2a6-164">變更時逐一查看它收集</span><span class="sxs-lookup"><span data-stu-id="8b2a6-164">Changing a collection while iterating it</span></span>  
 <span data-ttu-id="8b2a6-165">`foreach` C# 中的陳述式或`For Each`Visual Basic 中的陳述式用來逐一查看集合的成員以及讀取或修改其個別項目。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-165">The `foreach` statement in C# or `For Each` statement in Visual Basic is used to iterate the members of a collection and to read or modify its individual elements.</span></span> <span data-ttu-id="8b2a6-166">不過，它不能用來新增或移除集合中的項目。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-166">However, it can't be used to add or remove items from the collection.</span></span> <span data-ttu-id="8b2a6-167">如此一來，這會擲回<xref:System.InvalidOperationException>例外狀況的訊息，類似，「**集合已修改;列舉作業可能無法執行。**"</span><span class="sxs-lookup"><span data-stu-id="8b2a6-167">Doing this throws an  <xref:System.InvalidOperationException> exception with a message that is similar to, "**Collection was modified; enumeration operation may not execute.**"</span></span>  
  
 <span data-ttu-id="8b2a6-168">下列範例會逐一查看集合的整數會嘗試加入至集合的每個整數的平方。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-168">The following example iterates a collection of integers attempts to add the square of each integer to the collection.</span></span> <span data-ttu-id="8b2a6-169">此範例會擲回<xref:System.InvalidOperationException>與第一次呼叫<xref:System.Collections.Generic.List%601.Add%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-169">The example throws an <xref:System.InvalidOperationException> with the first call to the <xref:System.Collections.Generic.List%601.Add%2A?displayProperty=nameWithType> method.</span></span>  
  
 [!code-csharp[System.InvalidOperationException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Iterating1.cs#1)]
 [!code-vb[System.InvalidOperationException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Iterating1.vb#1)]  
  
 <span data-ttu-id="8b2a6-170">根據您的應用程式邏輯而定，您就可以排除在下列其中一種，例外狀況：</span><span class="sxs-lookup"><span data-stu-id="8b2a6-170">You can eliminate the exception in one of two ways, depending on your application logic:</span></span>  
  
-   <span data-ttu-id="8b2a6-171">如果項目必須新增至集合反覆運算它時，可以重複使用索引`for`陳述式來取代`foreach`或`For Each`。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-171">If elements must be added to the collection while iterating it, you can iterate it by index using the `for` statement instead of `foreach` or `For Each`.</span></span> <span data-ttu-id="8b2a6-172">下列範例會使用陳述式才會加入至集合的集合中的數字的平方。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-172">The following example uses the for statement to add the square of numbers in the collection to the collection.</span></span>  
  
     [!code-csharp[System.InvalidOperationException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Iterating2.cs#2)]
     [!code-vb[System.InvalidOperationException#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Iterating2.vb#2)]  
  
     <span data-ttu-id="8b2a6-173">請注意，您必須逐一查看集合藉由使用會結束迴圈 appropraitely 中，向後，重複迴圈內的計數器之前建立反覆項目數目從`Count`-1 到 0，或像範例一樣，藉由指派數目陣列中的元素至變數，並使用它來建立迴圈的上限。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-173">Note that you must establish the number of iterations before iterating the collection either by using a counter inside the loop that will exit the loop appropraitely, by iterating backward, from `Count` - 1 to 0, or, as the example does, by assigning the number of elements in the array to a variable and using it to establish the upper bound of the loop.</span></span> <span data-ttu-id="8b2a6-174">否則，如果項目加入至集合中每個反覆項目上，結果永無止盡的迴圈。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-174">Otherwise, if an element is added to the collection on every iteration, an endless loop results.</span></span>  
  
-   <span data-ttu-id="8b2a6-175">如果您不需要將項目新增至集合反覆運算它時，您可以儲存要加入一個暫存集合中，新增當完成時逐一查看集合的項目。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-175">If it is not necessary to add elements to the collection while iterating it, you can store the elements to be added in a temporary collection that you add when iterating the collection has finished.</span></span>  <span data-ttu-id="8b2a6-176">下列範例會使用此方式來新增暫時的集合，集合中的數字的平方然後再將合併成單一陣列物件的集合。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-176">The following example uses this approach to add the square of numbers in a collection to a temporary collection, and then to combine the collections into a single array object.</span></span>  
  
     [!code-csharp[System.InvalidOperationException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Iterating3.cs#3)]
     [!code-vb[System.InvalidOperationException#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Iterating3.vb#3)]  
  
<a name="Sorting"></a>   
### <a name="sorting-an-array-or-collection-whose-objects-cannot-be-compared"></a><span data-ttu-id="8b2a6-177">排序無法比較的物件陣列或集合</span><span class="sxs-lookup"><span data-stu-id="8b2a6-177">Sorting an array or collection whose objects cannot be compared</span></span>  
 <span data-ttu-id="8b2a6-178">一般用途的排序方法，例如<xref:System.Array.Sort%28System.Array%29?displayProperty=nameWithType>方法或<xref:System.Collections.Generic.List%601.Sort?displayProperty=nameWithType>方法，通常需要至少一個要排序的物件實作<xref:System.IComparable%601>或<xref:System.IComparable>介面。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-178">General-purpose sorting methods, such as the <xref:System.Array.Sort%28System.Array%29?displayProperty=nameWithType> method or the <xref:System.Collections.Generic.List%601.Sort?displayProperty=nameWithType> method, usually require that at least one of the objects to be sorted implement the <xref:System.IComparable%601> or the <xref:System.IComparable> interface.</span></span> <span data-ttu-id="8b2a6-179">如果不是，無法排序集合或陣列，而且方法會擲回<xref:System.InvalidOperationException>例外狀況。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-179">If not, the collection or array cannot be sorted, and the method throws an  <xref:System.InvalidOperationException> exception.</span></span> <span data-ttu-id="8b2a6-180">下列範例會定義`Person`類別，就會有兩個存放區`Person`物件，在泛型<xref:System.Collections.Generic.List%601>物件，並嘗試加以排序。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-180">The following example defines a `Person` class, stores two `Person` objects in a generic <xref:System.Collections.Generic.List%601> object, and attempts to sort them.</span></span> <span data-ttu-id="8b2a6-181">範例所示，呼叫的輸出<xref:System.Collections.Generic.List%601.Sort?displayProperty=nameWithType>方法會擲回<xref:System.InvalidOperationException>。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-181">As the output from the example shows, the call to the <xref:System.Collections.Generic.List%601.Sort?displayProperty=nameWithType> method throws an <xref:System.InvalidOperationException>.</span></span>  
  
 [!code-csharp[System.InvalidOperationException#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/List_Sort1.cs#12)]
 [!code-vb[System.InvalidOperationException#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/List_Sort1.vb#12)]  
  
 <span data-ttu-id="8b2a6-182">您可以排除任何一種方式中的例外狀況：</span><span class="sxs-lookup"><span data-stu-id="8b2a6-182">You can eliminate the exception in any of three ways:</span></span>  
  
-   <span data-ttu-id="8b2a6-183">如果您可以擁有您嘗試排序 （亦即，如果您控制其原始碼） 的型別，您可以修改它以實作<xref:System.IComparable%601>或<xref:System.IComparable>介面。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-183">If you can own the type that you are trying to sort (that is, if you control its source code), you can modify it to implement the <xref:System.IComparable%601> or the <xref:System.IComparable> interface.</span></span> <span data-ttu-id="8b2a6-184">這需要您實作其中一個<xref:System.IComparable%601.CompareTo%2A?displayProperty=nameWithType>或<xref:System.IComparable.CompareTo%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-184">This requires that you implement either the <xref:System.IComparable%601.CompareTo%2A?displayProperty=nameWithType> or the <xref:System.IComparable.CompareTo%2A> method.</span></span> <span data-ttu-id="8b2a6-185">將介面實作新增至現有的類型不是一項重大變更。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-185">Adding an interface implementation to an existing type is not a breaking change.</span></span>  
  
     <span data-ttu-id="8b2a6-186">下列範例會使用這種方法來提供<xref:System.IComparable%601>實作`Person`類別。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-186">The following example uses this approach to provide an <xref:System.IComparable%601> implementation  for the `Person` class.</span></span> <span data-ttu-id="8b2a6-187">您仍然可以呼叫集合或陣列的一般的排序方法，並如範例輸出所示，成功地排序的集合。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-187">You can still call the collection or array's general sorting method and, as the output from the example shows, the collection sorts successfully.</span></span>  
  
     [!code-csharp[System.InvalidOperationException#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/List_Sort2.cs#13)]
     [!code-vb[System.InvalidOperationException#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/List_Sort2.vb#13)]  
  
-   <span data-ttu-id="8b2a6-188">如果您無法修改您嘗試排序類型的原始程式碼，您可以定義特殊用途的排序類別可實作<xref:System.Collections.Generic.IComparer%601>介面。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-188">If you cannot modify the source code for the type you are trying to sort, you can define a special-purpose sorting class that implements the <xref:System.Collections.Generic.IComparer%601> interface.</span></span>  <span data-ttu-id="8b2a6-189">您可以呼叫的多載`Sort`方法，其中包含<xref:System.Collections.Generic.IComparer%601>參數。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-189">You can call an overload of the `Sort` method that includes an  <xref:System.Collections.Generic.IComparer%601> parameter.</span></span> <span data-ttu-id="8b2a6-190">這個方法會特別有用，如果您想要開發可以排序多個準則為基礎的物件的特定排序類別。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-190">This approach is especially useful if you want to develop a specialized sorting class that can sort objects based on multiple criteria.</span></span>  
  
     <span data-ttu-id="8b2a6-191">下列範例會使用方法開發自訂`PersonComparer`類別，用來排序`Person`集合。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-191">The following example uses the approach by developing a custom `PersonComparer` class that is used to sort `Person` collections.</span></span>  <span data-ttu-id="8b2a6-192">接著，將這個類別的執行個體<xref:System.Collections.Generic.List%601.Sort%28System.Collections.Generic.IComparer%7B%600%7D%29?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-192">It then passes an instance of this class to the <xref:System.Collections.Generic.List%601.Sort%28System.Collections.Generic.IComparer%7B%600%7D%29?displayProperty=nameWithType> method.</span></span>  
  
     [!code-csharp[System.InvalidOperationException#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/List_Sort3.cs#14)]
     [!code-vb[System.InvalidOperationException#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/List_Sort3.vb#14)]  
  
-   <span data-ttu-id="8b2a6-193">如果您無法修改類型的原始程式碼您嘗試排序，您可以建立<xref:System.Comparison%601>執行排序委派。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-193">If you cannot modify the source code for the type you are trying to sort, you can create a  <xref:System.Comparison%601> delegate to perform the sorting.</span></span> <span data-ttu-id="8b2a6-194">委派簽章</span><span class="sxs-lookup"><span data-stu-id="8b2a6-194">The delegate signature is</span></span>  
  
    ```vb  
    Function Comparison(Of T)(x As T, y As T) As Integer  
    ```  
  
    ```csharp  
    int Comparison<T>(T x, T y)  
    ```  
  
     <span data-ttu-id="8b2a6-195">下列範例會使用的方法，藉由定義`PersonComparison`符合方法<xref:System.Comparison%601>委派簽章。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-195">The following example uses the approach by defining a  `PersonComparison` method that matches the  <xref:System.Comparison%601> delegate signature.</span></span>  <span data-ttu-id="8b2a6-196">接著，將這個委派<xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-196">It then passes this delegate to the <xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29?displayProperty=nameWithType> method.</span></span>  
  
     [!code-csharp[System.InvalidOperationException#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/List_Sort4.cs#15)]
     [!code-vb[System.InvalidOperationException#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/List_Sort4.vb#15)]  
  
<a name="Nullable"></a>   
### <a name="casting-a-nullablet-that-is-null-to-its-underlying-type"></a><span data-ttu-id="8b2a6-197">轉換可為 Null\<T > 是 null，為其基礎類型</span><span class="sxs-lookup"><span data-stu-id="8b2a6-197">Casting a Nullable\<T> that is null to its underlying type</span></span>  
 <span data-ttu-id="8b2a6-198">嘗試轉型<xref:System.Nullable%601>值，亦即`null`為其基礎類型會擲回<xref:System.InvalidOperationException>例外狀況，並顯示錯誤訊息: 「**可為 Null 的物件必須有值。**</span><span class="sxs-lookup"><span data-stu-id="8b2a6-198">Attempting to cast a <xref:System.Nullable%601> value that is `null` to its underlying type throws an <xref:System.InvalidOperationException> exception  and displays the error message, "**Nullable object must have a value.**</span></span>  
  
 <span data-ttu-id="8b2a6-199">下列範例會擲回<xref:System.InvalidOperationException>例外狀況時，它會嘗試逐一查看陣列，包含`Nullable(Of Integer)`值。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-199">The following example throws an <xref:System.InvalidOperationException> exception  when it attempts to iterate an array that includes a `Nullable(Of Integer)` value.</span></span>  
  
 [!code-csharp[System.InvalidOperationException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Nullable1.cs#4)]
 [!code-vb[System.InvalidOperationException#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Nullable1.vb#4)]  
  
 <span data-ttu-id="8b2a6-200">若要避免這個例外狀況：</span><span class="sxs-lookup"><span data-stu-id="8b2a6-200">To prevent the exception:</span></span>  
  
-   <span data-ttu-id="8b2a6-201">使用<xref:System.Nullable%601.HasValue%2A?displayProperty=nameWithType>屬性，以選取不是這些項目`null`。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-201">Use the <xref:System.Nullable%601.HasValue%2A?displayProperty=nameWithType> property to select only those elements that are not `null`.</span></span>  
  
-   <span data-ttu-id="8b2a6-202">呼叫其中一種<xref:System.Nullable%601.GetValueOrDefault%2A?displayProperty=nameWithType>提供的預設值的多載`null`值。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-202">Call one of the <xref:System.Nullable%601.GetValueOrDefault%2A?displayProperty=nameWithType> overloads to provide a default value for a `null` value.</span></span>  
  
 <span data-ttu-id="8b2a6-203">下列範例會同時避免<xref:System.InvalidOperationException>例外狀況。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-203">The following example does both to avoid the  <xref:System.InvalidOperationException> exception.</span></span>  
  
 [!code-csharp[System.InvalidOperationException#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Nullable2.cs#5)]
 [!code-vb[System.InvalidOperationException#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Nullable2.vb#5)]  
  
<a name="Empty"></a>   
### <a name="calling-a-systemlinqenumerable-method-on-an-empty-collection"></a><span data-ttu-id="8b2a6-204">在空集合上呼叫的 System.Linq.Enumerable 方法</span><span class="sxs-lookup"><span data-stu-id="8b2a6-204">Calling a System.Linq.Enumerable method on an empty collection</span></span>  
 <span data-ttu-id="8b2a6-205"><xref:System.Linq.Enumerable.Aggregate%2A?displayProperty=nameWithType>， <xref:System.Linq.Enumerable.Average%2A?displayProperty=nameWithType>， <xref:System.Linq.Enumerable.First%2A?displayProperty=nameWithType>， <xref:System.Linq.Enumerable.Last%2A?displayProperty=nameWithType>， <xref:System.Linq.Enumerable.Max%2A?displayProperty=nameWithType>， <xref:System.Linq.Enumerable.Min%2A?displayProperty=nameWithType>， <xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType>，以及<xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType>方法執行一連串作業，並傳回單一結果。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-205">The <xref:System.Linq.Enumerable.Aggregate%2A?displayProperty=nameWithType>, <xref:System.Linq.Enumerable.Average%2A?displayProperty=nameWithType>, <xref:System.Linq.Enumerable.First%2A?displayProperty=nameWithType>, <xref:System.Linq.Enumerable.Last%2A?displayProperty=nameWithType>, <xref:System.Linq.Enumerable.Max%2A?displayProperty=nameWithType>, <xref:System.Linq.Enumerable.Min%2A?displayProperty=nameWithType>,  <xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType>, and <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType> methods perform operations on a sequence and return a single result.</span></span>   <span data-ttu-id="8b2a6-206">這些方法的部分多載會擲回<xref:System.InvalidOperationException>例外狀況時，序列是空的而其他多載會傳回`null`。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-206">Some overloads of these methods throw an <xref:System.InvalidOperationException> exception when the sequence is empty, while other overloads return `null`.</span></span> <span data-ttu-id="8b2a6-207"><xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType>方法也會擲回<xref:System.InvalidOperationException>序列包含一個以上的項目時發生例外狀況。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-207">The <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType> method also throws an <xref:System.InvalidOperationException> exception when the sequence contains more than one element.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8b2a6-208">方法會擲回的大部分<xref:System.InvalidOperationException>例外狀況會多載。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-208">Most of the methods that throw an <xref:System.InvalidOperationException> exception are overloads.</span></span> <span data-ttu-id="8b2a6-209">請確定您了解您所選擇的多載的行為。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-209">Be sure that you understand the behavior of the overload that you choose.</span></span>  
  
 <span data-ttu-id="8b2a6-210">下表列出的例外狀況訊息<xref:System.InvalidOperationException>部分的呼叫所擲回的例外狀況物件<xref:System.Linq.Enumerable?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-210">The following table lists the exception messages from the <xref:System.InvalidOperationException> exception objects thrown by calls to some <xref:System.Linq.Enumerable?displayProperty=nameWithType> methods.</span></span>  
  
|<span data-ttu-id="8b2a6-211">方法</span><span class="sxs-lookup"><span data-stu-id="8b2a6-211">Method</span></span>|<span data-ttu-id="8b2a6-212">訊息</span><span class="sxs-lookup"><span data-stu-id="8b2a6-212">Message</span></span>|  
|------------|-------------|  
|`Aggregate` <br /> `Average` <br /> `Last` <br /> `Max` <br /> `Min`|<span data-ttu-id="8b2a6-213">**序列中沒有包含任何項目**</span><span class="sxs-lookup"><span data-stu-id="8b2a6-213">**Sequence contains no elements**</span></span>|  
|`First`|<span data-ttu-id="8b2a6-214">**序列中沒有包含任何相符的項目**</span><span class="sxs-lookup"><span data-stu-id="8b2a6-214">**Sequence contains no matching element**</span></span>|  
|`Single` <br /> `SingleOrDefault`|<span data-ttu-id="8b2a6-215">**序列包含一個以上相符的項目**</span><span class="sxs-lookup"><span data-stu-id="8b2a6-215">**Sequence contains more than one matching element**</span></span>|  
  
 <span data-ttu-id="8b2a6-216">消除或處理的例外狀況的方式取決於您的應用程式假設以及在您呼叫特定方法。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-216">How you eliminate or handle the exception depends on your application's assumptions and on the particular method you call.</span></span>  
  
-   <span data-ttu-id="8b2a6-217">當您刻意呼叫其中一個方法而不檢查空的序列時，您會假設序列不是空的、 和空的序列是未預期的元素。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-217">When you deliberately call one of these methods without checking for an empty sequence, you are assuming that the sequence is not empty, and that an empty sequence is an unexpected occurrence.</span></span> <span data-ttu-id="8b2a6-218">在此情況下，擷取或重新擲回例外狀況是適當的。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-218">In this case, catching or rethrowing the exception is appropriate .</span></span>  
  
-   <span data-ttu-id="8b2a6-219">如果您要檢查空序列的失敗不小心，您可以呼叫其中一個多載的<xref:System.Linq.Enumerable.Any%2A?displayProperty=nameWithType>多載來判斷序列是否包含任何項目。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-219">If your failure to check for an empty sequence was inadvertent, you can  call one of the overloads of the <xref:System.Linq.Enumerable.Any%2A?displayProperty=nameWithType> overload to determine whether a sequence contains any elements.</span></span>  
  
    > [!TIP]
    >  <span data-ttu-id="8b2a6-220">呼叫<xref:System.Linq.Enumerable.Any%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29?displayProperty=nameWithType>才會產生一系列的方法可以改善效能，如果要處理的資料可能包含大量的項目或成本時產生序列的作業。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-220">Calling the <xref:System.Linq.Enumerable.Any%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29?displayProperty=nameWithType> method before generating a sequence can improve performance if the data to be processed might contain a large number of elements or if operation that generates the sequence is expensive.</span></span>  
  
-   <span data-ttu-id="8b2a6-221">如果您已呼叫的方法，例如<xref:System.Linq.Enumerable.First%2A?displayProperty=nameWithType>， <xref:System.Linq.Enumerable.Last%2A?displayProperty=nameWithType>，或<xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType>，您可以替代的替代方法，例如<xref:System.Linq.Enumerable.FirstOrDefault%2A?displayProperty=nameWithType>， <xref:System.Linq.Enumerable.LastOrDefault%2A?displayProperty=nameWithType>，或<xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType>，會傳回預設值，而不是成員的順序。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-221">If you've called a method such as <xref:System.Linq.Enumerable.First%2A?displayProperty=nameWithType>, <xref:System.Linq.Enumerable.Last%2A?displayProperty=nameWithType>, or <xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType>, you can substitute an alternate method, such as <xref:System.Linq.Enumerable.FirstOrDefault%2A?displayProperty=nameWithType>, <xref:System.Linq.Enumerable.LastOrDefault%2A?displayProperty=nameWithType>, or  <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType>, that returns a default value instead of a member of the sequence.</span></span>  
  
 <span data-ttu-id="8b2a6-222">範例會提供其他詳細資料。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-222">The examples provide additional detail.</span></span>  
  
 <span data-ttu-id="8b2a6-223">下列範例會使用<xref:System.Linq.Enumerable.Average%2A?displayProperty=nameWithType>方法來計算平均值的序列，其值是大於 4。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-223">The following example uses the <xref:System.Linq.Enumerable.Average%2A?displayProperty=nameWithType> method to compute the average of a sequence whose values are greater than 4.</span></span> <span data-ttu-id="8b2a6-224">因為沒有從原始陣列的值超過 4、 任何值都會包含在順序中，而且方法會擲回<xref:System.InvalidOperationException>例外狀況。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-224">Since no values from the original array exceed 4, no values are included in the sequence, and the method throws an <xref:System.InvalidOperationException> exception.</span></span>  
  
 [!code-csharp[System.InvalidOperationException#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Enumerable1.cs#6)]
 [!code-vb[System.InvalidOperationException#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Enumerable1.vb#6)]  
  
 <span data-ttu-id="8b2a6-225">要消除例外狀況，請呼叫<xref:System.Linq.Enumerable.Any%2A>方法來判斷序列是否包含任何項目之前呼叫的方法，處理順序，如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-225">The exception can be eliminated by calling the <xref:System.Linq.Enumerable.Any%2A> method to determine whether the sequence contains any elements before calling the method that processes the sequence, as the following example shows.</span></span>  
  
 [!code-csharp[System.InvalidOperationException#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Enumerable2.cs#7)]
 [!code-vb[System.InvalidOperationException#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Enumerable2.vb#7)]  
  
 <span data-ttu-id="8b2a6-226"><xref:System.Linq.Enumerable.First%2A?displayProperty=nameWithType>方法會傳回第一個項目序列或序列中符合指定的條件之第一個元素。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-226">The <xref:System.Linq.Enumerable.First%2A?displayProperty=nameWithType> method returns the first item in a sequence or the first element in a sequence that satisfies a specified condition.</span></span> <span data-ttu-id="8b2a6-227">如果序列是空的因此不需要第一個項目，它會擲回<xref:System.InvalidOperationException>例外狀況。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-227">If the sequence is empty and therefore does not have a first element, it throws an <xref:System.InvalidOperationException> exception.</span></span>  
  
 <span data-ttu-id="8b2a6-228">在下列範例中，<xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29?displayProperty=nameWithType>方法會擲回<xref:System.InvalidOperationException>例外狀況因為 dbQueryResults 陣列沒有包含大於 4 的元素。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-228">In the following example, the <xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29?displayProperty=nameWithType> method throws an <xref:System.InvalidOperationException> exception because the dbQueryResults array doesn't contain an element greater than 4.</span></span>  
  
 [!code-csharp[System.InvalidOperationException#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Enumerable3.cs#8)]
 [!code-vb[System.InvalidOperationException#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Enumerable3.vb#8)]  
  
 <span data-ttu-id="8b2a6-229">您可以呼叫<xref:System.Linq.Enumerable.FirstOrDefault%2A?displayProperty=nameWithType>方法，而非<xref:System.Linq.Enumerable.First%2A?displayProperty=nameWithType>傳回指定或預設值。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-229">You can call the <xref:System.Linq.Enumerable.FirstOrDefault%2A?displayProperty=nameWithType> method instead of <xref:System.Linq.Enumerable.First%2A?displayProperty=nameWithType> to return a specified or default value.</span></span> <span data-ttu-id="8b2a6-230">如果此方法在序列中找不到第一個項目，它會傳回該資料類型的預設值。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-230">If the method does not find a first element in the sequence, it returns  the default value for that data type.</span></span>  <span data-ttu-id="8b2a6-231">預設值是`null`是參考型別中，為零的數值資料類型，並<xref:System.DateTime.MinValue?displayProperty=nameWithType>如<xref:System.DateTime>型別。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-231">The default value is `null` for a reference type, zero for a numeric data type, and <xref:System.DateTime.MinValue?displayProperty=nameWithType> for the <xref:System.DateTime> type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8b2a6-232">解譯所傳回的值<xref:System.Linq.Enumerable.FirstOrDefault%2A?displayProperty=nameWithType>方法通常複雜類型的預設值可以是有效的值序列中的事實。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-232">Interpreting the value returned by the <xref:System.Linq.Enumerable.FirstOrDefault%2A?displayProperty=nameWithType> method is often complicated by the fact that the default value of the type can be a valid value in the sequence.</span></span> <span data-ttu-id="8b2a6-233">在此情況下，您呼叫<xref:System.Linq.Enumerable.Any%2A?displayProperty=nameWithType>方法來判斷序列是否具有有效的成員，然後再呼叫<xref:System.Linq.Enumerable.First%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-233">In this case, you an call the <xref:System.Linq.Enumerable.Any%2A?displayProperty=nameWithType> method to determine whether the sequence has valid members before calling the <xref:System.Linq.Enumerable.First%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="8b2a6-234">下列範例會呼叫<xref:System.Linq.Enumerable.FirstOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29?displayProperty=nameWithType>方法，即可避免<xref:System.InvalidOperationException>在上述範例中擲回的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-234">The following example calls the  <xref:System.Linq.Enumerable.FirstOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29?displayProperty=nameWithType> method to prevent the <xref:System.InvalidOperationException> exception thrown in the previous example.</span></span>  
  
 [!code-csharp[System.InvalidOperationException#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Enumerable4.cs#9)]
 [!code-vb[System.InvalidOperationException#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Enumerable4.vb#9)]  
  
<a name="Single"></a>   
### <a name="calling-enumerablesingle-or-enumerablesingleordefault-on-a-sequence-without-one-element"></a><span data-ttu-id="8b2a6-235">在沒有一個項目序列呼叫 Enumerable.Single 或 Enumerable.SingleOrDefault</span><span class="sxs-lookup"><span data-stu-id="8b2a6-235">Calling Enumerable.Single or Enumerable.SingleOrDefault on a sequence without one element</span></span>  
 <span data-ttu-id="8b2a6-236"><xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType>方法會傳回序列中，唯一的項目或唯一的項目序列中符合指定的條件。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-236">The <xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType> method returns the only element of a sequence, or the only element of a sequence that meets a specified condition.</span></span>    <span data-ttu-id="8b2a6-237">如果序列中沒有項目，或者如果有多個項目，方法會擲回<xref:System.InvalidOperationException>例外狀況。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-237">If there are no elements in the sequence, or if there is more than one element , the method throws an <xref:System.InvalidOperationException> exception.</span></span>  
  
 <span data-ttu-id="8b2a6-238">您可以使用<xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType>方法來傳回預設值，而不是序列中沒有包含任何項目時擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-238">You can use the <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType> method to return a default value instead of throwing an exception when the sequence contains no elements.</span></span> <span data-ttu-id="8b2a6-239">不過，<xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType>方法仍會擲回<xref:System.InvalidOperationException>序列包含一個以上的項目時發生例外狀況。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-239">However, the <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType> method still throws an <xref:System.InvalidOperationException> exception  when the sequence contains more than one element.</span></span>  
  
 <span data-ttu-id="8b2a6-240">下表列出的例外狀況訊息<xref:System.InvalidOperationException>藉由呼叫擲回的例外狀況物件<xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType>和<xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-240">The following table lists the exception messages from the <xref:System.InvalidOperationException> exception objects thrown by calls to the <xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType> and <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType> methods.</span></span>  
  
|<span data-ttu-id="8b2a6-241">方法</span><span class="sxs-lookup"><span data-stu-id="8b2a6-241">Method</span></span>|<span data-ttu-id="8b2a6-242">訊息</span><span class="sxs-lookup"><span data-stu-id="8b2a6-242">Message</span></span>|  
|------------|-------------|  
|`Single`|<span data-ttu-id="8b2a6-243">**序列中沒有包含任何相符的項目**</span><span class="sxs-lookup"><span data-stu-id="8b2a6-243">**Sequence contains no matching element**</span></span>|  
|`Single` <br /> `SingleOrDefault`|<span data-ttu-id="8b2a6-244">**序列包含一個以上相符的項目**</span><span class="sxs-lookup"><span data-stu-id="8b2a6-244">**Sequence contains more than one matching element**</span></span>|  
  
 <span data-ttu-id="8b2a6-245">在下列範例中，呼叫<xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType>方法會擲回<xref:System.InvalidOperationException>例外狀況因為順序不一定大於 4 的項目。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-245">In the following example, the call to the <xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType> method throws an <xref:System.InvalidOperationException> exception because the sequence doesn't have an element greater than 4.</span></span>  
  
 [!code-csharp[System.InvalidOperationException#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Enumerable5.cs#10)]
 [!code-vb[System.InvalidOperationException#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Enumerable5.vb#10)]  
  
 <span data-ttu-id="8b2a6-246">下列範例會嘗試防止<xref:System.InvalidOperationException>改為呼叫序列是空白時擲回的例外狀況<xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-246">The following example attempts to prevent the <xref:System.InvalidOperationException> exception thrown when a sequence is empty by instead calling the <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="8b2a6-247">不過，因為這個序列會傳回其值大於 2 的多個項目，它也會擲回<xref:System.InvalidOperationException>例外狀況。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-247">However, because this sequence returns multiple elements whose value is greater than 2, it also throws an <xref:System.InvalidOperationException> exception.</span></span>  
  
 [!code-csharp[System.InvalidOperationException#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Enumerable6.cs#11)]
 [!code-vb[System.InvalidOperationException#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Enumerable6.vb#11)]  
  
 <span data-ttu-id="8b2a6-248">呼叫<xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType>方法假設序列或符合指定的準則的順序包含只有一個項目。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-248">Calling the <xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType> method assumes that either a sequence or the sequence that meets specified criteria contains only one element.</span></span>  <span data-ttu-id="8b2a6-249"><xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType> 假設具有零個或一個結果，但沒有更多的順序。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-249"><xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType> assumes a sequence with zero or one result, but no more.</span></span> <span data-ttu-id="8b2a6-250">如果這項假設是刻意在您的組件，而且不符合這些條件，重新擲回或攔截產生<xref:System.InvalidOperationException>適合。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-250">If this assumption is a deliberate one on your part and these conditions are not met, rethrowing or catching the resulting <xref:System.InvalidOperationException> is appropriate.</span></span> <span data-ttu-id="8b2a6-251">否則，或如果您預期無效的條件會以某些頻率發生，您應該考慮使用其他<xref:System.Linq.Enumerable>方法，例如<xref:System.Linq.Enumerable.FirstOrDefault%2A>或<xref:System.Linq.Enumerable.Where%2A>。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-251">Otherwise, or if you expect that invalid conditions will occur with some frequency, you should consider using some other <xref:System.Linq.Enumerable> method, such as <xref:System.Linq.Enumerable.FirstOrDefault%2A> or <xref:System.Linq.Enumerable.Where%2A>.</span></span>  
  
<a name="Emit"></a>   
### <a name="dynamic-cross-application-domain-field-access"></a><span data-ttu-id="8b2a6-252">動態跨應用程式網域欄位存取</span><span class="sxs-lookup"><span data-stu-id="8b2a6-252">Dynamic cross-application domain field access</span></span>  
 <span data-ttu-id="8b2a6-253"><xref:System.Reflection.Emit.OpCodes.Ldflda?displayProperty=nameWithType> Microsoft intermediate language (MSIL) 指令則會擲回<xref:System.InvalidOperationException>如果包含想要擷取其地址 欄位的物件不在您的程式碼執行所在的應用程式定義域內的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-253">The <xref:System.Reflection.Emit.OpCodes.Ldflda?displayProperty=nameWithType> Microsoft intermediate language (MSIL) instruction throws an <xref:System.InvalidOperationException> exception if the object containing the field whose address you are trying to retrieve is not within the application domain in which your code is executing.</span></span> <span data-ttu-id="8b2a6-254">只能從其所在的應用程式定義域存取欄位的位址。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-254">The address of a field can only be accessed from the application domain in which it resides.</span></span>  
  
<a name="Throwing"></a>   
## <a name="throwing-an-invalidoperationexception-exception"></a><span data-ttu-id="8b2a6-255">擲回 InvalidOperationException 例外狀況</span><span class="sxs-lookup"><span data-stu-id="8b2a6-255">Throwing an InvalidOperationException exception</span></span>  
 <span data-ttu-id="8b2a6-256">您應該擲回<xref:System.InvalidOperationException>只在基於某些原因您物件的狀態不支援特定的方法呼叫時的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-256">You should throw an <xref:System.InvalidOperationException> exception only when the state of your object for some reason does not support a particular method call.</span></span> <span data-ttu-id="8b2a6-257">也就是方法呼叫有效在某些情況下或內容中，但在其他無效。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-257">That is, the method call is valid in some circumstances or contexts, but is invalid in others.</span></span>  
  
 <span data-ttu-id="8b2a6-258">如果方法引動過程失敗是由於無效的引數，則<xref:System.ArgumentException>或其衍生的類別，其中<xref:System.ArgumentNullException>或<xref:System.ArgumentOutOfRangeException>，應該改為擲回。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-258">If the method invocation failure is due to invalid arguments, then <xref:System.ArgumentException> or one of its derived classes, <xref:System.ArgumentNullException> or <xref:System.ArgumentOutOfRangeException>, should be thrown instead.</span></span>  
  
<a name="Misc"></a>   
## <a name="miscellaneous-information"></a><span data-ttu-id="8b2a6-259">其他資訊</span><span class="sxs-lookup"><span data-stu-id="8b2a6-259">Miscellaneous information</span></span>  
 <span data-ttu-id="8b2a6-260"><xref:System.InvalidOperationException> 會使用 HRESULT COR_E_INVALIDOPERATION，其值 0x80131509。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-260"><xref:System.InvalidOperationException> uses the HRESULT COR_E_INVALIDOPERATION, which has the value 0x80131509.</span></span>  
  
 <span data-ttu-id="8b2a6-261">如需執行個體的初始屬性值的清單<xref:System.InvalidOperationException>，請參閱<xref:System.InvalidOperationException.%23ctor%2A>建構函式。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-261">For a list of initial property values for an instance of <xref:System.InvalidOperationException>, see the <xref:System.InvalidOperationException.%23ctor%2A> constructors.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Exception" />
    <altmember cref="T:System.Collections.IEnumerator" />
    <altmember cref="T:System.Resources.ResourceSet" />
    <related type="Article" href="~/docs/standard/exceptions/index.md">
      <span data-ttu-id="8b2a6-262">處理和擲回例外狀況</span>
      <span class="sxs-lookup">
        <span data-stu-id="8b2a6-262">Handling and Throwing Exceptions</span>
      </span>
    </related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8b2a6-263">初始化 <see cref="T:System.InvalidOperationException" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b2a6-263">Initializes a new instance of the <see cref="T:System.InvalidOperationException" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InvalidOperationException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.InvalidOperationException.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InvalidOperationException();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="8b2a6-264">初始化 <see cref="T:System.InvalidOperationException" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b2a6-264">Initializes a new instance of the <see cref="T:System.InvalidOperationException" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b2a6-265">這個建構函式初始化<xref:System.Exception.Message%2A>屬性的新執行個體的系統提供的訊息，說明錯誤，例如 「 無法執行要求的作業。 」</span><span class="sxs-lookup"><span data-stu-id="8b2a6-265">This constructor initializes the <xref:System.Exception.Message%2A> property of the new instance to a system-supplied message that describes the error, such as "The requested operation cannot be performed."</span></span> <span data-ttu-id="8b2a6-266">此訊息會考量目前的系統文化特性。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-266">This message takes into account the current system culture.</span></span>  
  
 <span data-ttu-id="8b2a6-267">下表顯示 <xref:System.InvalidOperationException> 執行個體的初始屬性值。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-267">The following table shows the initial property values for an instance of <xref:System.InvalidOperationException>.</span></span>  
  
|<span data-ttu-id="8b2a6-268">屬性</span><span class="sxs-lookup"><span data-stu-id="8b2a6-268">Property</span></span>|<span data-ttu-id="8b2a6-269">值</span><span class="sxs-lookup"><span data-stu-id="8b2a6-269">Value</span></span>|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|<span data-ttu-id="8b2a6-270">null 參考 (在 Visual Basic 中為 `Nothing`)。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-270">A null reference (`Nothing` in Visual Basic).</span></span>|  
|<xref:System.Exception.Message%2A>|<span data-ttu-id="8b2a6-271">當地語系化的錯誤訊息字串。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-271">The localized error message string.</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InvalidOperationException (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.InvalidOperationException.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InvalidOperationException(System::String ^ message);" />
      <MemberSignature Language="F#" Value="new InvalidOperationException : string -&gt; InvalidOperationException" Usage="new System.InvalidOperationException message" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">
          <span data-ttu-id="8b2a6-272">描述錯誤的訊息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b2a6-272">The message that describes the error.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b2a6-273">使用指定的錯誤訊息，初始化 <see cref="T:System.InvalidOperationException" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b2a6-273">Initializes a new instance of the <see cref="T:System.InvalidOperationException" /> class with a specified error message.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b2a6-274">這個建構函式初始化<xref:System.Exception.Message%2A?displayProperty=nameWithType>屬性的新的例外狀況使用`message`參數。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-274">This constructor initializes the <xref:System.Exception.Message%2A?displayProperty=nameWithType> property of the new exception using the `message` parameter.</span></span> <span data-ttu-id="8b2a6-275">`message` 的內容必須能讓人了解。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-275">The content of `message` is intended to be understood by humans.</span></span> <span data-ttu-id="8b2a6-276">這個建構函式的呼叫端必須確保這個字串已經被當地語系化 (為了目前系統的文化特性)。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-276">The caller of this constructor is required to ensure that this string has been localized for the current system culture.</span></span>  
  
 <span data-ttu-id="8b2a6-277">下表顯示 <xref:System.InvalidOperationException> 執行個體的初始屬性值。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-277">The following table shows the initial property values for an instance of <xref:System.InvalidOperationException>.</span></span>  
  
|<span data-ttu-id="8b2a6-278">屬性</span><span class="sxs-lookup"><span data-stu-id="8b2a6-278">Property</span></span>|<span data-ttu-id="8b2a6-279">值</span><span class="sxs-lookup"><span data-stu-id="8b2a6-279">Value</span></span>|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|<span data-ttu-id="8b2a6-280">null 參考 (在 Visual Basic 中為 `Nothing`)。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-280">A null reference (`Nothing` in Visual Basic).</span></span>|  
|<xref:System.Exception.Message%2A>|<span data-ttu-id="8b2a6-281">錯誤訊息字串。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-281">The error message string.</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected InvalidOperationException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.InvalidOperationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; InvalidOperationException(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="new InvalidOperationException : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; InvalidOperationException" Usage="new System.InvalidOperationException (info, context)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">
          <span data-ttu-id="8b2a6-282">存放序列物件資料的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b2a6-282">The object that holds the serialized object data.</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="8b2a6-283">關於來源或目的端的內容資訊。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b2a6-283">The contextual information about the source or destination.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b2a6-284">使用序列化資料，初始化 <see cref="T:System.InvalidOperationException" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b2a6-284">Initializes a new instance of the <see cref="T:System.InvalidOperationException" /> class with serialized data.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b2a6-285">進行還原序列化 (Deserialization) 期間會呼叫這個建構函式，以便重新構成經由資料流傳送的例外狀況物件。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-285">This constructor is called during deserialization to reconstitute the exception object transmitted over a stream.</span></span> <span data-ttu-id="8b2a6-286">如需詳細資訊，請參閱 < [XML 和 SOAP 序列化](~/docs/standard/serialization/xml-and-soap-serialization.md)。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-286">For more information, see [XML and SOAP Serialization](~/docs/standard/serialization/xml-and-soap-serialization.md).</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/serialization/xml-and-soap-serialization.md">
          <span data-ttu-id="8b2a6-287">XML 和 SOAP 序列化</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b2a6-287">XML and SOAP Serialization</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InvalidOperationException (string message, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.InvalidOperationException.#ctor(System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String, innerException As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InvalidOperationException(System::String ^ message, Exception ^ innerException);" />
      <MemberSignature Language="F#" Value="new InvalidOperationException : string * Exception -&gt; InvalidOperationException" Usage="new System.InvalidOperationException (message, innerException)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="message">
          <span data-ttu-id="8b2a6-288">解釋例外狀況原因的錯誤訊息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b2a6-288">The error message that explains the reason for the exception.</span>
          </span>
        </param>
        <param name="innerException">
          <span data-ttu-id="8b2a6-289">做為目前例外狀況發生原因的例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b2a6-289">The exception that is the cause of the current exception.</span>
          </span>
          <span data-ttu-id="8b2a6-290">如果 <paramref name="innerException" /> 參數不是 Null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)，則會在處理內部例外的 <see langword="catch" /> 區塊中引發目前的例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b2a6-290">If the <paramref name="innerException" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b2a6-291">使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.InvalidOperationException" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b2a6-291">Initializes a new instance of the <see cref="T:System.InvalidOperationException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b2a6-292">被擲回以做為前一個例外狀況直接結果的例外狀況，應該在 <xref:System.Exception.InnerException%2A> 屬性中包含對前一個例外狀況的參考。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-292">An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <xref:System.Exception.InnerException%2A> property.</span></span> <span data-ttu-id="8b2a6-293"><xref:System.Exception.InnerException%2A> 屬性會傳回與傳入建構函式中相同的值；如果 `Nothing` 屬性不提供內部例外值給建構函式，則傳回 null 參考 (在 Visual Basic 中為 <xref:System.Exception.InnerException%2A>)。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-293">The <xref:System.Exception.InnerException%2A> property returns the same value that is passed into the constructor, or a null reference (`Nothing` in Visual Basic) if the <xref:System.Exception.InnerException%2A> property does not supply the inner exception value to the constructor.</span></span>  
  
 <span data-ttu-id="8b2a6-294">下表顯示 <xref:System.InvalidOperationException> 執行個體的初始屬性值。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-294">The following table shows the initial property values for an instance of <xref:System.InvalidOperationException>.</span></span>  
  
|<span data-ttu-id="8b2a6-295">屬性</span><span class="sxs-lookup"><span data-stu-id="8b2a6-295">Property</span></span>|<span data-ttu-id="8b2a6-296">值</span><span class="sxs-lookup"><span data-stu-id="8b2a6-296">Value</span></span>|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|<span data-ttu-id="8b2a6-297">內部例外狀況參考。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-297">The inner exception reference.</span></span>|  
|<xref:System.Exception.Message%2A>|<span data-ttu-id="8b2a6-298">錯誤訊息字串。</span><span class="sxs-lookup"><span data-stu-id="8b2a6-298">The error message string.</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Exception" />
        <related type="Article" href="~/docs/standard/exceptions/index.md">
          <span data-ttu-id="8b2a6-299">處理和擲回例外狀況</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b2a6-299">Handling and Throwing Exceptions</span>
          </span>
        </related>
      </Docs>
    </Member>
  </Members>
</Type>