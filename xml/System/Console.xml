<Type Name="Console" FullName="System.Console">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f1756d5f3995b51b6907fb819a85a7acf6f6070d" />
    <Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="11/20/2018" />
    <Meta Name="ms.locfileid" Value="52251437" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class Console" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed Console extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Console" />
  <TypeSignature Language="VB.NET" Value="Public Class Console" />
  <TypeSignature Language="C++ CLI" Value="public ref class Console abstract sealed" />
  <TypeSignature Language="F#" Value="type Console = class" />
  <AssemblyInfo>
    <AssemblyName>System.Console</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>表示主控台應用程式 (Console Application) 的標準輸入、輸出和錯誤資料流。 這個類別無法被繼承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 主控台是作業系統視窗，其中使用者互動與作業系統，或在以文字為基礎的主控台應用程式透過電腦鍵盤的文字輸入，以及讀取電腦的終端機中的文字輸出。 比方說，在 Windows 作業系統中，主控台會呼叫 [命令提示字元] 視窗，並接受 MS-DOS 命令。 <xref:System.Console>類別會提供讀取字元，並將字元寫入至主控台應用程式中的基本支援。  
  
 如需開發資訊<xref:System.Console>類別，請參閱下列各節：  
  
-   [主控台 I/O 資料流](#Streams)  
  
-   [螢幕緩衝區和主控台視窗](#Buffer)  
  
-   [在主控台的 Unicode 支援](#Unicode)  
  
-   [常見的作業](#Operations)  
  
-   [.NET core 的資訊](#Core)  
  
<a name="Streams"></a>   
## <a name="console-io-streams"></a>主控台 I/O 資料流  
 作業系統的主控台應用程式啟動時，自動將使用主控台三種 I/O 資料流： 標準輸入資料流、 標準輸出資料流和標準錯誤輸出資料流。 您的應用程式可以讀取標準輸入資料流; 的使用者輸入一般的資料寫入標準輸出資料流中;和標準錯誤輸出資料流寫入資料時發生錯誤。 這些資料流形式顯示給您的應用程式的值作為<xref:System.Console.In%2A?displayProperty=nameWithType>， <xref:System.Console.Out%2A?displayProperty=nameWithType>，和<xref:System.Console.Error%2A?displayProperty=nameWithType>屬性。  
  
 根據預設的值<xref:System.Console.In%2A>屬性是<xref:System.IO.TextReader?displayProperty=nameWithType>物件，表示鍵盤和值<xref:System.Console.Out%2A>並<xref:System.Console.Error%2A>屬性<xref:System.IO.TextWriter?displayProperty=nameWithType>代表主控台視窗的物件。 不過，您可以設定這些屬性不代表主控台視窗或鍵盤; 的資料流例如，您可以設定這些屬性，代表檔案的資料流。 若要重新導向標準輸入、 標準輸出或標準錯誤資料流，呼叫<xref:System.Console.SetIn%2A?displayProperty=nameWithType>， <xref:System.Console.SetOut%2A?displayProperty=nameWithType>，或<xref:System.Console.SetError%2A?displayProperty=nameWithType>方法，分別。 使用這些資料流的 I/O 作業會同步處理，這表示多個執行緒可以讀取或寫入資料流。 這表示，方法是通常非同步作業，例如<xref:System.IO.TextReader.ReadLineAsync%2A?displayProperty=nameWithType>，以同步方式執行，如果物件表示的主控台中的資料流。  
  
> [!NOTE]
>  請勿使用<xref:System.Console>類別，以自動執行的應用程式，例如伺服器應用程式中顯示輸出。 呼叫方法這類<xref:System.Console.Write%2A?displayProperty=nameWithType>和<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>GUI 應用程式中會有任何作用。  
  
 <xref:System.Console> 當基礎資料流導向主控台正常運作的類別成員可能會擲回例外狀況，如果資料流重新導向，例如，檔案。 應用程式設定攔截<xref:System.IO.IOException?displayProperty=nameWithType>例外狀況，如果您重新導向標準資料流。 您也可以使用<xref:System.Console.IsOutputRedirected%2A>， <xref:System.Console.IsInputRedirected%2A>，並<xref:System.Console.IsErrorRedirected%2A>屬性，以決定是否要將標準資料流導向之前執行的作業會擲回<xref:System.IO.IOException?displayProperty=nameWithType>例外狀況。  
  
 可能會很有用來明確呼叫所表示的資料流物件的成員清單<xref:System.Console.In%2A>， <xref:System.Console.Out%2A>，和<xref:System.Console.Error%2A>屬性。 例如，根據預設，<xref:System.Console.ReadLine%2A?displayProperty=nameWithType>方法會從標準輸入資料流讀取輸入。 同樣地，<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>方法會將資料寫入標準輸出資料流，資料後面接著預設行終止字串，也就是歸位字元和換行字元 ("\r\n")。 不過，<xref:System.Console>類別不提供對應的方法，將資料寫入標準錯誤輸出資料流或要變更寫入至該資料流的資料行終止字串的屬性。  
  
 您可以藉由設定來解決這個問題<xref:System.IO.TextWriter.NewLine%2A?displayProperty=nameWithType>的屬性<xref:System.Console.Out%2A>或<xref:System.Console.Error%2A>到另一個行終止字串的屬性。 例如，下列 C# 陳述式會將標準錯誤輸出資料流的終止串線設定為兩個歸位字元和換行字元序列：  
  
 `Console.Error.NewLine = "\r\n\r\n";`  
  
 然後，您可以明確呼叫<xref:System.IO.TextWriter.WriteLine%2A>錯誤的輸出資料流物件，如下列 C# 陳述式所示的方法：  
  
 `Console.Error.WriteLine();`  
  
<a name="Buffer"></a>   
## <a name="screen-buffer-and-console-window"></a>螢幕緩衝區和主控台視窗  
 在主控台的兩個密切相關的功能是螢幕緩衝區而主控台視窗。 實際讀取或寫入主控台中，所擁有的資料流的文字，但出現讀取或寫入至主控台呼叫螢幕緩衝區所擁有的區域。 螢幕緩衝區的主控台中，屬性，並會組織成資料列和每個方格交集或字元儲存格，可以包含字元的資料行的矩形格線。 每個字元有它自己的前景色彩，而且每個字元儲存格有自己的背景色彩。  
  
 螢幕緩衝區是透過稱為主控台視窗的矩形區域檢視。 主控台視窗將會在主控台中; 的另一個屬性它不是主控台本身，也就是作業系統視窗。 主控台視窗排列在資料列和資料行小於或等於螢幕緩衝區的大小，是可以移至檢視的基礎螢幕緩衝區的不同區域。 如果螢幕緩衝區大於主控台視窗中，主控台將會自動顯示捲軸讓主控台視窗可以重新定位到螢幕緩衝區的區域。  
  
 資料指標會指出其中目前讀取或寫入文字的螢幕緩衝區位置。 資料指標可以隱藏或顯示，並可變更其高度。 如果資料指標為可見，主控台視窗的位置是在因此資料指標永遠都是在檢視中自動移動。  
  
 螢幕緩衝區中的字元資料格座標的來源是左上的角，且資料指標，而主控台視窗的位置會以相對於該原點。 使用以零為起始的索引來指定位置;也就是指定為資料列 0，並做為資料行 0 最左邊的資料行的最上方的資料列。 資料列和資料行索引的最大值是<xref:System.Int16.MaxValue?displayProperty=nameWithType>。  
  
<a name="Unicode"></a>   
## <a name="unicode-support-for-the-console"></a>在主控台的 Unicode 支援  
 一般情況下，主控台讀取輸入，並將輸出寫入使用目前的主控台字碼頁，將系統地區設定定義預設。 字碼頁可以處理可用的 Unicode 字元的子集，因此如果您嘗試顯示的字元沒有對應的特定字碼頁，主控台將無法顯示所有字元，或精確地表示它們。 下列範例說明此問題。 它會嘗試對主控台顯示 044F u+0000 到 U + 0410年從斯拉夫字元。 如果您使用主控台字碼頁 437 上的系統上執行範例，每個字元是由問號 （？），取代，因為斯拉夫語字元不會對應至字碼頁 437 則中的字元。  
  
 [!code-csharp[System.Console.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.class/cs/unicode1.cs#1)]
 [!code-vb[System.Console.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.class/vb/unicode1.vb#1)]  
  
 除了支援字碼頁<xref:System.Console>類別支援 utf-8 編碼方式和<xref:System.Text.UTF8Encoding>類別。 從.NET Framework 4.5<xref:System.Console>類別也支援 utf-16 編碼方式和<xref:System.Text.UnicodeEncoding>類別。 若要在主控台中顯示的 Unicode 字元。 您設定<xref:System.Console.OutputEncoding%2A>屬性設為<xref:System.Text.UTF8Encoding>或<xref:System.Text.UnicodeEncoding>。  
  
 支援 Unicode 字元需要編碼器將特定的 Unicode 字元，辨識，而且也需要有圖像 （glyph），來呈現該字元所需的字型。 若要成功地對主控台顯示 Unicode 字元，必須設定主控台字型非點陣或 TrueType 字型，例如 Consolas 或 Lucida Console。 下列範例會示範如何以程式設計方式變更字型從點陣字型 Lucida console。  
  
 [!code-csharp[System.Console.Class.Unsafe#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.class.unsafe/cs/setfont1.cs#3)]
 [!code-vb[System.Console.Class.Unsafe#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.class.unsafe/vb/setfont1.vb#3)]  
  
 不過，TrueType 字型可以顯示圖像 （glyph） 的子集。 比方說，新細明體字型顯示只有 643 從 u+0021 到 U + FB02 大約 64,000 可用字元。 若要查看其字元特定字型支援，請開啟**字型**在 控制台 小程式選擇**尋找符號**選項，然後選擇 的字型的字元集您想要檢查**字型**份**字元對應表**視窗。  
  
 Windows 使用字型連結來顯示不在特定字型中字符。 如需連結以顯示其他字元集的字型資訊，請參閱[全球化逐步： 字型](https://go.microsoft.com/fwlink/?LinkId=229111)。 連結的字型定義於登錄 HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\FontLink\SystemLink 子機碼。 這個子機碼相關聯的每個項目對應的基底字型名稱，其值為字串陣列，定義字型檔案和已連結至基底字型的字型。 陣列的每個成員定義連結的字型，並採用下列格式*字型檔名*，*字型名稱*。 下列範例說明如何以程式設計方式定義名為 Pmingliu 位於名為 simsun.ttc 顯示簡化 Han 字元的字型檔的連結的字型。  
  
 [!code-csharp[System.Console.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.class/cs/fontlink1.cs#2)]
 [!code-vb[System.Console.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.class/vb/fontlink1.vb#2)]  
  
 在主控台的 Unicode 支援具有下列限制：  
  
-   不支援 UTF-32 編碼。 唯一支援的 Unicode 編碼為 utf-8 及 utf-16，這由<xref:System.Text.UTF8Encoding>和<xref:System.Text.UnicodeEncoding>類別，分別。  
  
-   不支援雙向輸出。  
  
-   顯示基本多語文字面之外的字元 (亦即，surrogate 字組) 不支援，即使它們定義在連結的字型檔案。  
  
-   不支援顯示複雜的指令碼中的字元。  
  
-   結合字元序列 （也就是個字元所組成的基底的字元和一個或多個組合的字元） 會顯示為不同的字元。 若要解決這項限制，您可以將正規化的字串會顯示藉由呼叫<xref:System.String.Normalize%2A?displayProperty=nameWithType>方法，然後再將輸出傳送至主控台。 在下列範例中，包含組合字元的字串排序 U + 0061 為輸出字串會正規化之前, 的兩個字元，並為單一字元之後，將會顯示到主控台的 U + 0308年<xref:System.String.Normalize%2A?displayProperty=nameWithType>呼叫方法。  
  
     [!code-csharp[System.Console.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.class/cs/normalize1.cs#5)]
     [!code-vb[System.Console.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.class/vb/normalize1.vb#5)]  
  
     請注意當正規化標準字元包括對應至特定 combining 預先撰寫的表單的 Unicode 字元序列時，才會是可行的解決方案。  
  
-   如果字型提供私用區域字碼指標的圖像 （glyph），將會顯示該圖像 （glyph）。 不過，因為私用區域中的字元都是特定應用程式，這可能不是預期的圖像 （glyph）。  
  
 下列範例會顯示到主控台的 Unicode 字元的範圍。 此範例接受三個命令列參數： 要顯示，以顯示，以及是否要使用目前的主控台編碼範圍的結尾範圍的開頭 (`false`) 或 utf-16 編碼 (`true`)。 它會假設主控台使用 TrueType 字型。  
  
 [!code-csharp[System.Console.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.class/cs/example3.cs#4)]
 [!code-vb[System.Console.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.class/vb/example3.vb#4)]  
  
<a name="Operations"></a>   
## <a name="common-operations"></a>常見的作業  
 <xref:System.Console>類別包含下列方法來讀取主控台輸入和寫入主控台輸出：  
  
-   多載<xref:System.Console.ReadKey%2A>方法讀取個別字元。  
  
-   <xref:System.Console.ReadLine%2A>方法讀取一整行的輸入。  
  
-   <xref:System.Console.Write%2A>方法多載的實值類型、 陣列的字元或一組物件執行個體轉換為格式化或未格式化的字串，並再將該字串寫入主控台。  
  
-   一組平行<xref:System.Console.WriteLine%2A>方法多載相同字串做為輸出<xref:System.Console.Write%2A>多載，但也加入行終止字串。  
  
 <xref:System.Console>類別也包含方法和屬性來執行下列作業：  
  
-   取得或設定螢幕緩衝區的大小。 <xref:System.Console.BufferHeight%2A>並<xref:System.Console.BufferWidth%2A>屬性可讓您取得或設定緩衝區的高度和寬度分別和<xref:System.Console.SetBufferSize%2A>方法可讓您在單一方法呼叫中設定緩衝區大小。  
  
-   取得或設定主控台視窗的大小。 <xref:System.Console.WindowHeight%2A>並<xref:System.Console.WindowWidth%2A>屬性可讓您取得或設定視窗的高度和寬度分別和<xref:System.Console.SetWindowSize%2A>方法可讓您設定在單一方法呼叫中的視窗大小。  
  
-   取得或設定資料指標的大小。 <xref:System.Console.CursorSize%2A>屬性指定以字元儲存格的游標的高度。  
  
-   取得或設定相對於螢幕緩衝區的主控台視窗的位置。 <xref:System.Console.WindowTop%2A>並<xref:System.Console.WindowLeft%2A>屬性可讓您取得或設定上方資料列和會出現在主控台視窗中，螢幕緩衝區的最左邊資料行和<xref:System.Console.SetWindowPosition%2A>方法可讓您在單一方法呼叫中設定這些值。  
  
-   取得或設定游標的位置，取得或設定由<xref:System.Console.CursorTop%2A>並<xref:System.Console.CursorLeft%2A>屬性或設定游標的位置呼叫<xref:System.Console.SetCursorPosition%2A>方法。  
  
-   移動或清除螢幕緩衝區中的資料，藉由呼叫<xref:System.Console.MoveBufferArea%2A>或<xref:System.Console.Clear%2A>方法。  
  
-   取得或設定使用的前景和背景色彩<xref:System.Console.ForegroundColor%2A>並<xref:System.Console.BackgroundColor%2A>屬性，或藉由呼叫中重 background 和 foreground 設為其預設色彩<xref:System.Console.ResetColor%2A>方法。  
  
-   藉由呼叫播放嗶聲透過主控台喇叭的聲音<xref:System.Console.Beep%2A>方法。  
  
<a name="Core"></a>   
## <a name="includenetcoreincludesnet-core-mdmd-notes"></a>[!INCLUDE[net_core](~/includes/net-core-md.md)] 附註  
 在桌面上，.NET Framework 中<xref:System.Console>類別會使用所傳回的編碼`GetConsoleCP`和`GetConsoleOutputCP`，這通常字碼頁編碼方式。 比方說在系統文化特性是英文 （美國），字碼頁 437 上的程式碼，是依預設會使用的編碼方式。 不過，[!INCLUDE[net_core](~/includes/net-core-md.md)]可以提供可用的只有這些編碼方式的有限的子集。 在這種情況，<xref:System.Text.Encoding.UTF8%2A?displayProperty=nameWithType>做為主控台的預設編碼方式。  
  
 如果您的應用程式相依於特定字碼頁編碼方式，您仍然可以在它們可執行下列*之前*呼叫任何<xref:System.Console>方法：  
  
1.  您可以將 System.Text.Encoding.CodePages.dll 組件的參考加入專案。  
  
2.  擷取<xref:System.Text.EncodingProvider>物件從<xref:System.Text.CodePagesEncodingProvider.Instance%2A?displayProperty=nameWithType>屬性。  
  
3.  傳遞<xref:System.Text.EncodingProvider>物件至<xref:System.Text.Encoding.RegisterProvider%2A?displayProperty=nameWithType>進行編碼的提供者所支援的其他編碼的方法。  
  
 <xref:System.Console>類別會再自動使用預設系統編碼方式 」，而不 UTF8，前提是您註冊編碼提供者之前呼叫任何<xref:System.Console>輸出方法。  
  
   
  
## Examples  
 下列範例示範如何讀取資料，並將資料寫入至標準輸入和輸出資料流。 請注意這些資料流，可以使用重新導向<xref:System.Console.SetIn%2A>和<xref:System.Console.SetOut%2A>方法。  
  
 [!code-cpp[Classic Console Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Console Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Console Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Console Example/CS/source.cs#1)]
 [!code-vb[Classic Console Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Console Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>此型別具備執行緒安全。</threadsafe>
  </Docs>
  <Members>
    <Member MemberName="BackgroundColor">
      <MemberSignature Language="C#" Value="public static ConsoleColor BackgroundColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.ConsoleColor BackgroundColor" />
      <MemberSignature Language="DocId" Value="P:System.Console.BackgroundColor" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property BackgroundColor As ConsoleColor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property ConsoleColor BackgroundColor { ConsoleColor get(); void set(ConsoleColor value); };" />
      <MemberSignature Language="F#" Value="member this.BackgroundColor : ConsoleColor with get, set" Usage="System.Console.BackgroundColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ConsoleColor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定主控台的背景色彩。</summary>
        <value>值，可指定主控台的背景色彩，也就是出現在每一個字元後面的色彩。 預設為黑色。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要變更<xref:System.Console.BackgroundColor%2A>屬性會影響的唯一個別字元儲存格的背景色彩變更之後寫入的輸出。 若要變更主控台視窗中，整體的背景色彩，請設定<xref:System.Console.BackgroundColor%2A>屬性並呼叫<xref:System.Console.Clear%2A>方法。 下列範例提供一個實例。  
  
 [!code-csharp[System.Console.BackgroundColor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.backgroundcolor/cs/backgroundcolor1.cs#1)]
 [!code-vb[System.Console.BackgroundColor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.backgroundcolor/vb/backgroundcolor1.vb#1)]  
  
 「 取得 」 作業是以 Windows 為基礎應用程式，在其中一個主控台不存在，傳回<xref:System.ConsoleColor.Black?displayProperty=nameWithType>。  
  
   
  
## Examples  
 下列範例會將儲存的值<xref:System.ConsoleColor>列舉型別陣列，並將目前的值<xref:System.Console.BackgroundColor%2A>和<xref:System.Console.ForegroundColor%2A>變數的屬性。 然後變更的前景色彩中的每個色彩<xref:System.ConsoleColor>列舉型別，但色彩符合目前的背景，而且它變成背景色彩中每個色彩<xref:System.ConsoleColor>以外的列舉型別，來比對的色彩目前的前景。 （如果前景色彩與背景色彩相同，文字看不到。）最後，它會呼叫<xref:System.Console.ResetColor%2A>方法來還原原始的主控台色彩。  
  
 [!code-csharp[System.ConsoleColor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.consolecolor/cs/foregroundcolor3.cs#1)]
 [!code-vb[System.ConsoleColor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.consolecolor/vb/foregroundcolor3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">設定作業中指定的色彩不是 <see cref="T:System.ConsoleColor" /> 的有效成員。</exception>
        <exception cref="T:System.Security.SecurityException">使用者沒有執行這項動作的權限。</exception>
        <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全的最上層視窗和子視窗。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="Beep">
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>透過主控台喇叭播放嗶聲。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Beep">
      <MemberSignature Language="C#" Value="public static void Beep ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Beep() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Beep" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Beep ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Beep();" />
      <MemberSignature Language="F#" Value="static member Beep : unit -&gt; unit" Usage="System.Console.Beep " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>透過主控台喇叭播放嗶聲。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 根據預設，播放嗶聲 800 赫茲的頻率持續時間為 200 毫秒。  
  
> [!NOTE]
>  <xref:System.Console.Beep%2A>方法不支援在 64 位元版本的 Windows Vista 和 Windows XP 上。  
  
 <xref:System.Console.Beep%2A> 包裝呼叫 Windows[函式發出嗶聲](https://msdn.microsoft.com/library/windows/desktop/ms679277.aspx)。 是否<xref:System.Console.Beep%2A>8254 可程式化間隔計時器晶片與否取決於 Windows 7 之前，會產生在舊版 Windows 上的音效。 從 Windows 7 開始，視預設音訊裝置。  
  
   
  
## Examples  
 下列範例示範<xref:System.Console.Beep%2A>方法。 此範例接受從 1 到 9，做為命令列引數的數字，並播放嗶聲該數字的次數。  
  
 [!code-cpp[console.beep#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.beep/CPP/beep.cpp#1)]
 [!code-csharp[console.beep#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.beep/CS/beep.cs#1)]
 [!code-vb[console.beep#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.beep/VB/beep.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.HostProtectionException">這個方法過去在伺服器上執行，例如 SQL Server，其不允許存取使用者介面。</exception>
      </Docs>
    </Member>
    <Member MemberName="Beep">
      <MemberSignature Language="C#" Value="public static void Beep (int frequency, int duration);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Beep(int32 frequency, int32 duration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Beep(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Beep (frequency As Integer, duration As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Beep(int frequency, int duration);" />
      <MemberSignature Language="F#" Value="static member Beep : int * int -&gt; unit" Usage="System.Console.Beep (frequency, duration)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="frequency" Type="System.Int32" />
        <Parameter Name="duration" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="frequency">嗶聲頻率，其範圍是從 37 到 32767 Hertz。</param>
        <param name="duration">嗶聲的持續期間，以毫秒為測量單位。</param>
        <summary>以指定之頻率和持續期間透過主控台喇叭播放嗶聲。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Console.Beep%2A> 包裝呼叫 Windows[函式發出嗶聲](https://msdn.microsoft.com/library/windows/desktop/ms679277.aspx)。 是否<xref:System.Console.Beep%2A>8254 可程式化間隔計時器晶片與否取決於 Windows 7 之前，會產生在舊版 Windows 上的音效。 從 Windows 7 開始，視預設音訊裝置。  
  
> [!NOTE]
>  <xref:System.Console.Beep%2A>方法不支援在 64 位元版本的 Windows Vista 和 Windows XP 上。  
  
   
  
## Examples  
 此範例示範<xref:System.Console.Beep%2A>方法播放歌曲，以透過主控台喇叭的第一個的一些注意事項。  
  
 [!code-cpp[console.beep2#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.beep2/CPP/b2.cpp#1)]
 [!code-csharp[console.beep2#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.beep2/CS/b2.cs#1)]
 [!code-vb[console.beep2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.beep2/VB/b2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="frequency" /> 小於 37 或超過 32767 赫茲。  
  
-或- 
 <paramref name="duration" /> 小於或等於零。</exception>
        <exception cref="T:System.Security.HostProtectionException">這個方法會在伺服器上執行，例如 SQL Server，其不允許存取主控台。</exception>
      </Docs>
    </Member>
    <Member MemberName="BufferHeight">
      <MemberSignature Language="C#" Value="public static int BufferHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 BufferHeight" />
      <MemberSignature Language="DocId" Value="P:System.Console.BufferHeight" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property BufferHeight As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int BufferHeight { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.BufferHeight : int with get, set" Usage="System.Console.BufferHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定緩衝區的高度。</summary>
        <value>以資料列數測量的目前緩衝區高度。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個屬性會定義資料列 （或線條） 儲存在可存取的主控台模式視窗的緩衝區的數目。 相反地，<xref:System.Console.WindowHeight%2A>屬性會定義在任何特定時間實際顯示在主控台視窗中的資料列數目。 如果實際寫入至緩衝區的資料列數目超過所定義的資料列數目<xref:System.Console.WindowHeight%2A>屬性，使其顯示連續的數字相等的資料列的視窗也可垂直捲動<xref:System.Console.WindowHeight%2A>屬性且位於任何位置中的緩衝區。  
  
 如果設定作業減少的值<xref:System.Console.BufferHeight%2A>屬性，會移除最上方的行。 例如，如果從 300 減少的行數，是將它設為 250，行 0 至 49 會遭到移除，而且現有的程式行 50 到 299 成為程式行 0 到 249。  
  
   
  
## Examples  
 此範例示範<xref:System.Console.BufferHeight%2A>和<xref:System.Console.BufferWidth%2A>屬性。 此範例會報告作業系統視窗設定為 300 的資料列和 85 的資料行的緩衝區大小的維度。  
  
 [!code-cpp[console.bufferHW#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.bufferHW/CPP/hw.cpp#1)]
 [!code-csharp[console.bufferHW#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.bufferHW/CS/hw.cs#1)]
 [!code-vb[console.bufferHW#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.bufferHW/VB/hw.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">設定作業中的值小於或等於零。  
  
-或- 
設定作業中的值大於或等於 <see cref="F:System.Int16.MaxValue" />。  
  
-或- 
設定作業中的值小於 <see cref="P:System.Console.WindowTop" /> + <see cref="P:System.Console.WindowHeight" />。</exception>
        <exception cref="T:System.Security.SecurityException">使用者沒有執行這項動作的權限。</exception>
        <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全的最上層視窗和子視窗。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="BufferWidth">
      <MemberSignature Language="C#" Value="public static int BufferWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 BufferWidth" />
      <MemberSignature Language="DocId" Value="P:System.Console.BufferWidth" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property BufferWidth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int BufferWidth { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.BufferWidth : int with get, set" Usage="System.Console.BufferWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定緩衝區的寬度。</summary>
        <value>以資料行數測量的目前緩衝區寬度。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果設定作業減少的值<xref:System.Console.BufferWidth%2A>屬性，最右邊的資料行遭到移除。 比方說，如果到 60 之間的資料行數目減少從 80，就會移除資料行 60 到 79 個每個資料列。  
  
   
  
## Examples  
 此範例示範<xref:System.Console.BufferHeight%2A>和<xref:System.Console.BufferWidth%2A>屬性。 此範例會報告作業系統視窗設定為 300 的資料列和 85 的資料行的緩衝區大小的維度。  
  
 [!code-cpp[console.bufferHW#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.bufferHW/CPP/hw.cpp#1)]
 [!code-csharp[console.bufferHW#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.bufferHW/CS/hw.cs#1)]
 [!code-vb[console.bufferHW#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.bufferHW/VB/hw.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">設定作業中的值小於或等於零。  
  
-或- 
設定作業中的值大於或等於 <see cref="F:System.Int16.MaxValue" />。  
  
-或- 
設定作業中的值小於 <see cref="P:System.Console.WindowLeft" /> + <see cref="P:System.Console.WindowWidth" />。</exception>
        <exception cref="T:System.Security.SecurityException">使用者沒有執行這項動作的權限。</exception>
        <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全的最上層視窗和子視窗。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="CancelKeyPress">
      <MemberSignature Language="C#" Value="public static event ConsoleCancelEventHandler CancelKeyPress;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ConsoleCancelEventHandler CancelKeyPress" />
      <MemberSignature Language="DocId" Value="E:System.Console.CancelKeyPress" />
      <MemberSignature Language="VB.NET" Value="Public Shared Custom Event CancelKeyPress As ConsoleCancelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static event ConsoleCancelEventHandler ^ CancelKeyPress;" />
      <MemberSignature Language="F#" Value="member this.CancelKeyPress : ConsoleCancelEventHandler " Usage="member this.CancelKeyPress : System.ConsoleCancelEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>add: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>remove: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ConsoleCancelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生於同時按下 <see cref="F:System.ConsoleModifiers.Control" /> 輔助按鍵 (Ctrl) 和 <see cref="F:System.ConsoleKey.C" /> 主控台按鍵 (C) 或 Break 鍵 (Ctrl+C 或 Ctrl+Break) 時。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此事件用於搭配<xref:System.ConsoleCancelEventHandler?displayProperty=nameWithType>和<xref:System.ConsoleCancelEventArgs?displayProperty=nameWithType>。 <xref:System.Console.CancelKeyPress>事件可讓以攔截 Ctrl + C 訊號，因此事件處理常式可以決定是否要繼續執行，或終止的主控台應用程式。 如需有關如何處理事件的詳細資訊，請參閱 <<c0> [ 處理和引發事件](~/docs/standard/events/index.md)。  
  
 當使用者按下 Ctrl + C 或 Ctrl + Break、<xref:System.Console.CancelKeyPress>引發事件時，應用程式的<xref:System.ConsoleCancelEventHandler>事件處理常式會執行。 傳遞的事件處理常式<xref:System.ConsoleCancelEventArgs>有兩個有用的屬性的物件：  
  
-   <xref:System.ConsoleCancelEventArgs.SpecialKey%2A>可讓您決定是否因為使用者按下 Ctrl + C 而叫用處理常式 (屬性值，則<xref:System.ConsoleSpecialKey.ControlC?displayProperty=nameWithType>) 或 Ctrl + Break (的屬性值是<xref:System.ConsoleSpecialKey.ControlBreak?displayProperty=nameWithType>)。  
  
-   <xref:System.ConsoleCancelEventArgs.Cancel%2A>可讓您判斷如何您的應用程式應該回應使用者按下 Ctrl + C 或 Ctrl + Break。 根據預設，<xref:System.ConsoleCancelEventArgs.Cancel%2A>屬性是`false`，這會導致程式終止的事件處理常式結束時執行。 變更它的屬性為`true`指定應用程式應該繼續執行。  
  
> [!TIP]
>  如果您的應用程式有簡單的需求，您可以使用<xref:System.Console.TreatControlCAsInput%2A>屬性，而不是此事件。 此屬性設定為`false`，您可以確保您的應用程式一律會結束，如果使用者按下 Ctrl + C。 藉由將它設定為`true`，您可以確保按下 Ctrl + C 將不會終止應用程式。  
  
 此事件的事件處理常式會在執行緒集區執行緒上執行。  
  
   
  
## Examples  
 下列範例示範如何<xref:System.Console.CancelKeyPress>」 事件可用。 當您按 Ctrl + C 時，中斷讀取的作業和`myHandler`叫用事件處理常式。 在事件處理常式中，輸入時<xref:System.ConsoleCancelEventArgs.Cancel%2A?displayProperty=nameWithType>屬性是`false`，也就是說，事件處理常式結束時，目前的處理序將會終止。 不過，事件處理常式會將<xref:System.ConsoleCancelEventArgs.Cancel%2A?displayProperty=nameWithType>屬性設`true`，也就是說，將不會終止處理程序，且讀取的作業將會恢復。  
  
 [!code-cpp[console.cancelkeypress#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.cancelkeypress/cpp/ckp.cpp#1)]
 [!code-csharp[console.cancelkeypress#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.cancelkeypress/cs/ckp.cs#1)]
 [!code-vb[console.cancelkeypress#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.cancelkeypress/vb/ckp.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全的最上層視窗和子視窗。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="T:System.ConsoleCancelEventArgs" />
        <altmember cref="T:System.ConsoleCancelEventHandler" />
        <altmember cref="P:System.Console.TreatControlCAsInput" />
      </Docs>
    </Member>
    <Member MemberName="CapsLock">
      <MemberSignature Language="C#" Value="public static bool CapsLock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool CapsLock" />
      <MemberSignature Language="DocId" Value="P:System.Console.CapsLock" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CapsLock As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool CapsLock { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CapsLock : bool" Usage="System.Console.CapsLock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，指出已開啟或關閉 CAPS LOCK 鍵盤切換。</summary>
        <value>如果已開啟 CAPS LOCK，則為 <see langword="true" />；如果已關閉 CAPS LOCK，則為 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public static void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Clear();" />
      <MemberSignature Language="F#" Value="static member Clear : unit -&gt; unit" Usage="System.Console.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>清除主控台緩衝區及包含顯示資訊的對應主控台視窗。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Console.Clear%2A>方法就相當叫用 MS-DOS`cls`命令在命令提示字元 視窗中。 當<xref:System.Console.Clear%2A>呼叫方法時，游標會自動捲動至視窗的左上角和螢幕緩衝區的內容會設定為使用目前的前景背景色彩的空白。  
  
> [!NOTE]
>  嘗試呼叫<xref:System.Console.Clear%2A>主控台應用程式的輸出重新導向至檔案時的方法會擲回<xref:System.IO.IOException>。 若要避免這個問題，一律將呼叫<xref:System.Console.Clear%2A>方法中的`try`...`catch` 區塊。  
  
   
  
## Examples  
 下列範例會使用<xref:System.Console.Clear%2A>方法，以清除主控台，再執行迴圈，會提示使用者選取前景和背景色彩，並輸入要顯示的字串。 如果使用者選擇不結束程式，就會還原主控台的原始前景和背景色彩和<xref:System.Console.Clear%2A>再次執行迴圈前再一次呼叫方法。  
  
 [!code-csharp[System.Console.Clear#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.clear/cs/clear1.cs#1)]
 [!code-vb[System.Console.Clear#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.clear/vb/clear1.vb#1)]  
  
 此範例依賴`GetKeyPress`方法以驗證使用者的選取範圍的前景和背景色彩。  
  
 此範例示範<xref:System.Console.CursorLeft%2A>並<xref:System.Console.CursorTop%2A>屬性，而<xref:System.Console.SetCursorPosition%2A>和<xref:System.Console.Clear%2A>方法。 範例會將定位資料指標，用來決定下, 一次寫入，就會發生 5 個字元的矩形混用繪製的 5 個字元"+"、"&#124;"，和 「-」 字串。 請注意，無法使用較少的步驟使用的其他字串組合繪製矩形。  
  
 [!code-cpp[console.cursorLTS#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.cursorLTS/CPP/lts.cpp#1)]
 [!code-csharp[console.cursorLTS#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.cursorLTS/CS/lts.cs#1)]
 [!code-vb[console.cursorLTS#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.cursorLTS/VB/lts.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      </Docs>
    </Member>
    <Member MemberName="CursorLeft">
      <MemberSignature Language="C#" Value="public static int CursorLeft { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 CursorLeft" />
      <MemberSignature Language="DocId" Value="P:System.Console.CursorLeft" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CursorLeft As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int CursorLeft { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CursorLeft : int with get, set" Usage="System.Console.CursorLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定緩衝區內游標的資料行位置。</summary>
        <value>游標目前的位置 (以資料行數計算)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 此範例示範<xref:System.Console.CursorLeft%2A>並<xref:System.Console.CursorTop%2A>屬性，而<xref:System.Console.SetCursorPosition%2A>和<xref:System.Console.Clear%2A>方法。 範例會將定位資料指標，用來決定下, 一次寫入，就會發生 5 個字元的矩形混用繪製的 5 個字元"+"、"&#124;"，和 「-」 字串。 請注意，無法使用較少的步驟使用的其他字串組合繪製矩形。  
  
 [!code-cpp[console.cursorLTS#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.cursorLTS/CPP/lts.cpp#1)]
 [!code-csharp[console.cursorLTS#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.cursorLTS/CS/lts.cs#1)]
 [!code-vb[console.cursorLTS#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.cursorLTS/VB/lts.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">設定作業中的值小於零。  
  
-或- 
設定作業中的值大於或等於 <see cref="P:System.Console.BufferWidth" />。</exception>
        <exception cref="T:System.Security.SecurityException">使用者沒有執行這項動作的權限。</exception>
        <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全的最上層視窗和子視窗。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="CursorSize">
      <MemberSignature Language="C#" Value="public static int CursorSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 CursorSize" />
      <MemberSignature Language="DocId" Value="P:System.Console.CursorSize" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CursorSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int CursorSize { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CursorSize : int with get, set" Usage="System.Console.CursorSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定字元儲存格內游標的高度。</summary>
        <value>以字元儲存格高度的百分比表示的游標大小。 屬性值的範圍是從 1 到 100。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 游標外觀不同，當屬性值為 1，以完全填滿資料格屬性值為 100 時，範圍從底部的儲存格的水平列。  
  
   
  
## Examples  
 此範例示範<xref:System.Console.CursorSize%2A>屬性。 此範例會增加每次任何主控台按鍵按下時，則還原回其原始大小的資料指標，終止前的資料指標的大小。  
  
 [!code-cpp[console.cursorsize#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.cursorsize/CPP/csize.cpp#1)]
 [!code-csharp[console.cursorsize#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.cursorsize/CS/csize.cs#1)]
 [!code-vb[console.cursorsize#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.cursorsize/VB/csize.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">設定作業中指定的值小於 1 或大於 100。</exception>
        <exception cref="T:System.Security.SecurityException">使用者沒有執行這項動作的權限。</exception>
        <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全的最上層視窗和子視窗。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="CursorTop">
      <MemberSignature Language="C#" Value="public static int CursorTop { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 CursorTop" />
      <MemberSignature Language="DocId" Value="P:System.Console.CursorTop" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CursorTop As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int CursorTop { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CursorTop : int with get, set" Usage="System.Console.CursorTop" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定緩衝區內游標的資料列位置。</summary>
        <value>游標目前的位置 (以資料列數計算)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 此範例示範<xref:System.Console.CursorLeft%2A>並<xref:System.Console.CursorTop%2A>屬性，而<xref:System.Console.SetCursorPosition%2A>和<xref:System.Console.Clear%2A>方法。 範例會將定位資料指標，用來決定下, 一次寫入，就會發生 5 個字元的矩形混用繪製的 5 個字元"+"、"&#124;"，和 「-」 字串。 請注意，無法使用較少的步驟使用的其他字串組合繪製矩形。  
  
 [!code-cpp[console.cursorLTS#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.cursorLTS/CPP/lts.cpp#1)]
 [!code-csharp[console.cursorLTS#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.cursorLTS/CS/lts.cs#1)]
 [!code-vb[console.cursorLTS#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.cursorLTS/VB/lts.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">設定作業中的值小於零。  
  
-或- 
設定作業中的值大於或等於 <see cref="P:System.Console.BufferHeight" />。</exception>
        <exception cref="T:System.Security.SecurityException">使用者沒有執行這項動作的權限。</exception>
        <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全的最上層視窗和子視窗。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="CursorVisible">
      <MemberSignature Language="C#" Value="public static bool CursorVisible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool CursorVisible" />
      <MemberSignature Language="DocId" Value="P:System.Console.CursorVisible" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CursorVisible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool CursorVisible { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CursorVisible : bool with get, set" Usage="System.Console.CursorVisible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出是否能看見游標。</summary>
        <value>如果可以看見游標，則為 <see langword="true" />，否則為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 此範例示範<xref:System.Console.CursorVisible%2A>屬性。 此範例進行的資料指標，如果輸入的第一個資料行是 '+' 字元時才可見或不可見，如果輸入是 '-' 字元。  
  
 [!code-cpp[console.cursorvis#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.cursorvis/CPP/vis.cpp#1)]
 [!code-csharp[console.cursorvis#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.cursorvis/CS/vis.cs#1)]
 [!code-vb[console.cursorvis#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.cursorvis/VB/vis.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">使用者沒有執行這項動作的權限。</exception>
        <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全的最上層視窗和子視窗。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Error">
      <MemberSignature Language="C#" Value="public static System.IO.TextWriter Error { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.IO.TextWriter Error" />
      <MemberSignature Language="DocId" Value="P:System.Console.Error" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Error As TextWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::IO::TextWriter ^ Error { System::IO::TextWriter ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Error : System.IO.TextWriter" Usage="System.Console.Error" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.TextWriter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得標準錯誤輸出資料流。</summary>
        <value>
          <see cref="T:System.IO.TextWriter" />，代表標準錯誤輸出資料流。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 根據預設，此標準錯誤資料流是設主控台。 它可以設定為與另一個資料流<xref:System.Console.SetError%2A>方法。 重新導向標準錯誤資料流之後，它可以重新呼叫<xref:System.Console.OpenStandardError%2A>方法。  
  
 在其資訊的輸出通常會導向至檔案的主控台應用程式，標準錯誤資料流可透過<xref:System.Console.Error%2A>屬性可用來對主控台顯示的資訊，即使在重新導向輸出。 下列範例會顯示 10 個數字的產品資料表，在從 1 開始的時間。 10 的數字，每個集合之後<xref:System.Console.Error%2A>屬性用來詢問使用者是否顯示中的下一步。 如果標準輸出重新導向至檔案，使用者仍會要求常式是否應該產生產品下一組。  
  
 [!code-csharp[System.Console.Error#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.error/cs/error1.cs#1)]
 [!code-vb[System.Console.Error#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.error/vb/error1.vb#1)]  
  
   
  
## Examples  
 下列範例是命令列公用程式，名為四個空格，所定義的值會取代文字檔案中的索引標籤字元的 ExpandTabs`tabSize`變數。 它會重新導向標準輸出和輸出資料流處理至檔案，但使用<xref:System.Console.Error%2A>寫入主控台中的標準錯誤資料流的屬性。 它可以啟動從命令列藉由提供包含定位字元的檔案名稱和輸出檔的名稱。  
  
 [!code-cpp[Console-EXPANDTABSEX#1](~/samples/snippets/cpp/VS_Snippets_CLR/Console-EXPANDTABSEX/CPP/expandtabsex.cpp#1)]
 [!code-csharp[Console-EXPANDTABSEX#1](~/samples/snippets/csharp/VS_Snippets_CLR/Console-EXPANDTABSEX/CS/expandtabsex.cs#1)]
 [!code-vb[Console-EXPANDTABSEX#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Console-EXPANDTABSEX/VB/expandtabsex.vb#1)]  
  
 下列範例是簡單的文字檔案檢視器，在主控台中顯示一或多個文字檔案的內容。 如果不有任何命令列引數，或如果命令列引數傳遞的任何檔案不存在，此範例會呼叫<xref:System.Console.SetError%2A>方法，以錯誤的資訊重新導向至檔案，呼叫<xref:System.Console.OpenStandardError%2A>過程中重新取得標準錯誤的方法串流處理，並指出錯誤資訊已寫入至檔案。  
  
 [!code-csharp[System.Console.OpenStandardError#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.openstandarderror/cs/viewtextfile.cs#1)]
 [!code-vb[System.Console.OpenStandardError#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.openstandarderror/vb/viewtextfile.vb#1)]  
  
 請注意，<xref:System.IO.StreamWriter.AutoFlush%2A?displayProperty=nameWithType>屬性設定為`true`之前重新取得資料流時發生錯誤。 這可確保，輸出將會立即傳送至主控台而不是經過緩衝處理。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Console.In" />
        <altmember cref="P:System.Console.Out" />
        <altmember cref="P:System.Console.IsErrorRedirected" />
        <altmember cref="M:System.Console.SetError(System.IO.TextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="ForegroundColor">
      <MemberSignature Language="C#" Value="public static ConsoleColor ForegroundColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.ConsoleColor ForegroundColor" />
      <MemberSignature Language="DocId" Value="P:System.Console.ForegroundColor" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property ForegroundColor As ConsoleColor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property ConsoleColor ForegroundColor { ConsoleColor get(); void set(ConsoleColor value); };" />
      <MemberSignature Language="F#" Value="member this.ForegroundColor : ConsoleColor with get, set" Usage="System.Console.ForegroundColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ConsoleColor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定主控台的前景色彩。</summary>
        <value>
          <see cref="T:System.ConsoleColor" />，可指定主控台的前景色彩，也就是出現的每一個字元的色彩。 預設為灰色。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 「 取得 」 作業是以 Windows 為基礎應用程式，在其中一個主控台不存在，傳回<xref:System.ConsoleColor.Gray>。  
  
   
  
## Examples  
 下列範例會檢查是否主控台的背景色彩是黑色，如果是，它會變更的背景色彩為紅色，設為黑色的前景色彩。  
  
 [!code-csharp[System.ConsoleColor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.consolecolor/cs/Example2.cs#2)] 
 [!code-vb[System.ConsoleColor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.consolecolor/vb/Example2.vb#2)]  
  
 下列範例會將儲存的值<xref:System.ConsoleColor>列舉型別陣列，並將目前的值<xref:System.Console.BackgroundColor%2A>和<xref:System.Console.ForegroundColor%2A>變數的屬性。 然後變更的前景色彩中的每個色彩<xref:System.ConsoleColor>列舉型別，但色彩符合目前的背景，而且它變成背景色彩中每個色彩<xref:System.ConsoleColor>以外的列舉型別，來比對的色彩目前的前景。 （如果前景色彩與背景色彩相同，文字看不到。）最後，它會呼叫<xref:System.Console.ResetColor%2A>方法來還原原始的主控台色彩。  
  
 [!code-csharp[System.ConsoleColor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.consolecolor/cs/foregroundcolor3.cs#1)]
 [!code-vb[System.ConsoleColor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.consolecolor/vb/foregroundcolor3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">設定作業中指定的色彩不是 <see cref="T:System.ConsoleColor" /> 的有效成員。</exception>
        <exception cref="T:System.Security.SecurityException">使用者沒有執行這項動作的權限。</exception>
        <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全的最上層視窗和子視窗。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="In">
      <MemberSignature Language="C#" Value="public static System.IO.TextReader In { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.IO.TextReader In" />
      <MemberSignature Language="DocId" Value="P:System.Console.In" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property In As TextReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::IO::TextReader ^ In { System::IO::TextReader ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.In : System.IO.TextReader" Usage="System.Console.In" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.TextReader</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得標準輸入資料流。</summary>
        <value>
          <see cref="T:System.IO.TextReader" />，代表標準輸入資料流。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 根據預設，這個屬性是設標準輸入資料流。 這個屬性可以設定為與另一個資料流<xref:System.Console.SetIn%2A>方法。  
  
 標準輸入資料流的讀取作業以同步方式執行。 亦即，它們會封鎖直到指定的讀取的作業完成為止。 這就是偶數，則為 true 如果非同步方法，例如<xref:System.IO.TextReader.ReadLineAsync%2A>上, 呼叫<xref:System.IO.TextReader>所傳回的物件<xref:System.Console.In%2A>屬性。  
  
   
  
## Examples  
 下列範例說明如何使用`In`屬性。  
  
 [!code-cpp[consolein#1](~/samples/snippets/cpp/VS_Snippets_CLR/consolein/CPP/consolein.cpp#1)]
 [!code-csharp[consolein#1](~/samples/snippets/csharp/VS_Snippets_CLR/consolein/CS/consolein.cs#1)]
 [!code-vb[consolein#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/consolein/VB/consolein.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Console.OpenStandardInput" />
        <altmember cref="P:System.Console.IsInputRedirected" />
        <altmember cref="P:System.Console.Error" />
        <altmember cref="P:System.Console.Out" />
        <altmember cref="M:System.Console.SetIn(System.IO.TextReader)" />
      </Docs>
    </Member>
    <Member MemberName="InputEncoding">
      <MemberSignature Language="C#" Value="public static System.Text.Encoding InputEncoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Text.Encoding InputEncoding" />
      <MemberSignature Language="DocId" Value="P:System.Console.InputEncoding" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property InputEncoding As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Text::Encoding ^ InputEncoding { System::Text::Encoding ^ get(); void set(System::Text::Encoding ^ value); };" />
      <MemberSignature Language="F#" Value="member this.InputEncoding : System.Text.Encoding with get, set" Usage="System.Console.InputEncoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定主控台用來讀取輸入的編碼方式。</summary>
        <value>用來讀取主控台輸入的編碼方式。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 主控台會使用輸入來轉譯成對應的字元的鍵盤輸入的編碼方式。 輸入的編碼方式會併入 256 鍵盤字元碼對應和個別字元的字碼頁。 不同的字碼頁包含不同的特殊字元，一般而言是針對語言或語言群組進行自訂。  
  
 從開始[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]，屬性取得作業可能會傳回快取的值，而非主控台的目前輸入的編碼方式。 這種情形的值<xref:System.Console.InputEncoding%2A>指派給以外的其他方式修改屬性<xref:System.Console.InputEncoding%2A>屬性，例如呼叫 Windows`SetConsoleCP`函式，或使用`chcp`命令從 PowerShell 指令碼。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">設定作業中的屬性值為 <see langword="null" />。</exception>
        <exception cref="T:System.IO.IOException">執行這項作業期間發生錯誤。</exception>
        <exception cref="T:System.Security.SecurityException">您的應用程式沒有執行這項作業的權限。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">用於讀取和寫入最上層視窗和子視窗。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="T:System.Text.Encoding" />
      </Docs>
    </Member>
    <Member MemberName="IsErrorRedirected">
      <MemberSignature Language="C#" Value="public static bool IsErrorRedirected { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool IsErrorRedirected" />
      <MemberSignature Language="DocId" Value="P:System.Console.IsErrorRedirected" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IsErrorRedirected As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool IsErrorRedirected { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsErrorRedirected : bool" Usage="System.Console.IsErrorRedirected" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，指出是否已從標準錯誤資料流重新導向錯誤輸出資料流。</summary>
        <value>如果錯誤輸出已重新導向，則為 <see langword="true" />；否則為 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Console.Error" />
        <altmember cref="M:System.Console.SetError(System.IO.TextWriter)" />
        <altmember cref="M:System.Console.OpenStandardError" />
      </Docs>
    </Member>
    <Member MemberName="IsInputRedirected">
      <MemberSignature Language="C#" Value="public static bool IsInputRedirected { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool IsInputRedirected" />
      <MemberSignature Language="DocId" Value="P:System.Console.IsInputRedirected" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IsInputRedirected As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool IsInputRedirected { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsInputRedirected : bool" Usage="System.Console.IsInputRedirected" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，指出是否已從標準輸入資料流重新導向輸入。</summary>
        <value>如果輸入已重新導向，則為 <see langword="true" />，否則為 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Console.In" />
        <altmember cref="M:System.Console.SetIn(System.IO.TextReader)" />
        <altmember cref="M:System.Console.OpenStandardInput" />
      </Docs>
    </Member>
    <Member MemberName="IsOutputRedirected">
      <MemberSignature Language="C#" Value="public static bool IsOutputRedirected { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool IsOutputRedirected" />
      <MemberSignature Language="DocId" Value="P:System.Console.IsOutputRedirected" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IsOutputRedirected As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool IsOutputRedirected { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsOutputRedirected : bool" Usage="System.Console.IsOutputRedirected" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，指出是否已從標準輸出資料流重新導向輸出。</summary>
        <value>如果輸出已重新導向，則為 <see langword="true" />，否則為 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Console.Out" />
        <altmember cref="M:System.Console.SetOut(System.IO.TextWriter)" />
        <altmember cref="M:System.Console.OpenStandardError" />
      </Docs>
    </Member>
    <Member MemberName="KeyAvailable">
      <MemberSignature Language="C#" Value="public static bool KeyAvailable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool KeyAvailable" />
      <MemberSignature Language="DocId" Value="P:System.Console.KeyAvailable" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property KeyAvailable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool KeyAvailable { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.KeyAvailable : bool" Usage="System.Console.KeyAvailable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，指出是否可以在輸入資料流中使用按鍵按壓。</summary>
        <value>如果可以使用按鍵按壓，則為 <see langword="true" />，否則為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 屬性傳回的值會立即;也就是<xref:System.Console.KeyAvailable%2A>屬性不會封鎖輸入，直到按下按鍵為止。  
  
 使用<xref:System.Console.KeyAvailable%2A>屬性搭配唯一<xref:System.Console.ReadKey%2A>方法，不<xref:System.Console.Read%2A>或<xref:System.Console.ReadLine%2A>方法。  
  
   
  
## Examples  
 下列範例示範如何使用<xref:System.Console.KeyAvailable%2A>屬性，以建立會執行，直到按下按鍵的迴圈。  
  
 [!code-cpp[console.keyavailable#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.keyavailable/CPP/ka.cpp#1)]
 [!code-csharp[console.keyavailable#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.keyavailable/CS/ka.cs#1)]
 [!code-vb[console.keyavailable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.keyavailable/VB/ka.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
        <exception cref="T:System.InvalidOperationException">標準輸入已重新導向至檔案而非鍵盤。</exception>
      </Docs>
    </Member>
    <Member MemberName="LargestWindowHeight">
      <MemberSignature Language="C#" Value="public static int LargestWindowHeight { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 LargestWindowHeight" />
      <MemberSignature Language="DocId" Value="P:System.Console.LargestWindowHeight" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property LargestWindowHeight As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int LargestWindowHeight { int get(); };" />
      <MemberSignature Language="F#" Value="member this.LargestWindowHeight : int" Usage="System.Console.LargestWindowHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>根據目前的字型和螢幕解析度，取得主控台視窗資料列數的最大可能值。</summary>
        <value>以資料列數測量的主控台視窗可能高度的最大值。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LargestWindowWidth">
      <MemberSignature Language="C#" Value="public static int LargestWindowWidth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 LargestWindowWidth" />
      <MemberSignature Language="DocId" Value="P:System.Console.LargestWindowWidth" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property LargestWindowWidth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int LargestWindowWidth { int get(); };" />
      <MemberSignature Language="F#" Value="member this.LargestWindowWidth : int" Usage="System.Console.LargestWindowWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>根據目前的字型和螢幕解析度，取得主控台視窗資料行數的最大可能值。</summary>
        <value>以資料行數測量的主控台視窗可能寬度的最大值。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="MoveBufferArea">
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將螢幕緩衝區的指定之來源區域複製到指定之目標區域中。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MoveBufferArea">
      <MemberSignature Language="C#" Value="public static void MoveBufferArea (int sourceLeft, int sourceTop, int sourceWidth, int sourceHeight, int targetLeft, int targetTop);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MoveBufferArea(int32 sourceLeft, int32 sourceTop, int32 sourceWidth, int32 sourceHeight, int32 targetLeft, int32 targetTop) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub MoveBufferArea (sourceLeft As Integer, sourceTop As Integer, sourceWidth As Integer, sourceHeight As Integer, targetLeft As Integer, targetTop As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MoveBufferArea(int sourceLeft, int sourceTop, int sourceWidth, int sourceHeight, int targetLeft, int targetTop);" />
      <MemberSignature Language="F#" Value="static member MoveBufferArea : int * int * int * int * int * int -&gt; unit" Usage="System.Console.MoveBufferArea (sourceLeft, sourceTop, sourceWidth, sourceHeight, targetLeft, targetTop)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceLeft" Type="System.Int32" />
        <Parameter Name="sourceTop" Type="System.Int32" />
        <Parameter Name="sourceWidth" Type="System.Int32" />
        <Parameter Name="sourceHeight" Type="System.Int32" />
        <Parameter Name="targetLeft" Type="System.Int32" />
        <Parameter Name="targetTop" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="sourceLeft">來源區域最左邊的資料行。</param>
        <param name="sourceTop">來源區域最上方的資料列。</param>
        <param name="sourceWidth">來源區域中的資料行數。</param>
        <param name="sourceHeight">來源區域中的資料列數。</param>
        <param name="targetLeft">目的區域最左邊的資料行。</param>
        <param name="targetTop">目的區域最上方的資料列。</param>
        <summary>將螢幕緩衝區的指定之來源區域複製到指定之目標區域中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果目的地和來源參數會指定位於目前的螢幕緩衝區的界限之外的位置，則會複製只可容納在目的地區域內的來源區域的一部分。 也就是來源區域會裁剪成目前的螢幕緩衝區。  
  
 <xref:System.Console.MoveBufferArea%2A>方法會將來源區域複製到目的區域。 如果目的區域沒有交集來源區域，使用目前的前景和背景色彩的空白填滿來源區域。 否則不填滿來源區域的交集的部分。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">一或多個參數小於零。  
  
-或- 
 <paramref name="sourceLeft" /> 或 <paramref name="targetLeft" /> 大於或等於 <see cref="P:System.Console.BufferWidth" />。  
  
-或- 
 <paramref name="sourceTop" /> 或 <paramref name="targetTop" /> 大於或等於 <see cref="P:System.Console.BufferHeight" />。  
  
-或- 
 <paramref name="sourceTop" /> + <paramref name="sourceHeight" /> 大於或等於 <see cref="P:System.Console.BufferHeight" />。  
  
-或- 
 <paramref name="sourceLeft" /> + <paramref name="sourceWidth" /> 大於或等於 <see cref="P:System.Console.BufferWidth" />。</exception>
        <exception cref="T:System.Security.SecurityException">使用者沒有執行這項動作的權限。</exception>
        <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全的最上層視窗和子視窗。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="MoveBufferArea">
      <MemberSignature Language="C#" Value="public static void MoveBufferArea (int sourceLeft, int sourceTop, int sourceWidth, int sourceHeight, int targetLeft, int targetTop, char sourceChar, ConsoleColor sourceForeColor, ConsoleColor sourceBackColor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MoveBufferArea(int32 sourceLeft, int32 sourceTop, int32 sourceWidth, int32 sourceHeight, int32 targetLeft, int32 targetTop, char sourceChar, valuetype System.ConsoleColor sourceForeColor, valuetype System.ConsoleColor sourceBackColor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Char,System.ConsoleColor,System.ConsoleColor)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub MoveBufferArea (sourceLeft As Integer, sourceTop As Integer, sourceWidth As Integer, sourceHeight As Integer, targetLeft As Integer, targetTop As Integer, sourceChar As Char, sourceForeColor As ConsoleColor, sourceBackColor As ConsoleColor)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MoveBufferArea(int sourceLeft, int sourceTop, int sourceWidth, int sourceHeight, int targetLeft, int targetTop, char sourceChar, ConsoleColor sourceForeColor, ConsoleColor sourceBackColor);" />
      <MemberSignature Language="F#" Value="static member MoveBufferArea : int * int * int * int * int * int * char * ConsoleColor * ConsoleColor -&gt; unit" Usage="System.Console.MoveBufferArea (sourceLeft, sourceTop, sourceWidth, sourceHeight, targetLeft, targetTop, sourceChar, sourceForeColor, sourceBackColor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceLeft" Type="System.Int32" />
        <Parameter Name="sourceTop" Type="System.Int32" />
        <Parameter Name="sourceWidth" Type="System.Int32" />
        <Parameter Name="sourceHeight" Type="System.Int32" />
        <Parameter Name="targetLeft" Type="System.Int32" />
        <Parameter Name="targetTop" Type="System.Int32" />
        <Parameter Name="sourceChar" Type="System.Char" />
        <Parameter Name="sourceForeColor" Type="System.ConsoleColor" />
        <Parameter Name="sourceBackColor" Type="System.ConsoleColor" />
      </Parameters>
      <Docs>
        <param name="sourceLeft">來源區域最左邊的資料行。</param>
        <param name="sourceTop">來源區域最上方的資料列。</param>
        <param name="sourceWidth">來源區域中的資料行數。</param>
        <param name="sourceHeight">來源區域中的資料列數。</param>
        <param name="targetLeft">目的區域最左邊的資料行。</param>
        <param name="targetTop">目的區域最上方的資料列。</param>
        <param name="sourceChar">用來填滿來源區域的字元。</param>
        <param name="sourceForeColor">用來填滿來源區域的前景色彩。</param>
        <param name="sourceBackColor">用來填滿來源區域的背景色彩。</param>
        <summary>將螢幕緩衝區的指定之來源區域複製到指定之目標區域中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果目的地和來源參數會指定目前的螢幕緩衝區的界限之外的位置，則會複製只可容納在目的地區域內的來源區域的一部分。 也就是來源區域會裁剪成目前的螢幕緩衝區。  
  
 <xref:System.Console.MoveBufferArea%2A>方法會將來源區域複製到目的區域。 目的區域沒有交集來源區域，如果來源區域會填入所指定的字元`sourceChar`，使用所指定的色彩`sourceForeColor`和`sourceBackColor`。 否則不填滿來源區域的交集的部分。  
  
 <xref:System.Console.MoveBufferArea%2A>方法會執行任何作業，如果`sourceWidth`或`sourceHeight`為零。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">一或多個參數小於零。  
  
-或- 
 <paramref name="sourceLeft" /> 或 <paramref name="targetLeft" /> 大於或等於 <see cref="P:System.Console.BufferWidth" />。  
  
-或- 
 <paramref name="sourceTop" /> 或 <paramref name="targetTop" /> 大於或等於 <see cref="P:System.Console.BufferHeight" />。  
  
-或- 
 <paramref name="sourceTop" /> + <paramref name="sourceHeight" /> 大於或等於 <see cref="P:System.Console.BufferHeight" />。  
  
-或- 
 <paramref name="sourceLeft" /> + <paramref name="sourceWidth" /> 大於或等於 <see cref="P:System.Console.BufferWidth" />。</exception>
        <exception cref="T:System.ArgumentException">色彩參數之一或兩者都不是 <see cref="T:System.ConsoleColor" /> 列舉的成員。</exception>
        <exception cref="T:System.Security.SecurityException">使用者沒有執行這項動作的權限。</exception>
        <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全的最上層視窗和子視窗。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="NumberLock">
      <MemberSignature Language="C#" Value="public static bool NumberLock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool NumberLock" />
      <MemberSignature Language="DocId" Value="P:System.Console.NumberLock" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property NumberLock As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool NumberLock { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.NumberLock : bool" Usage="System.Console.NumberLock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，指出已開啟或關閉 NUM LOCK 鍵盤切換。</summary>
        <value>如果已開啟 NUM LOCK，則為 <see langword="true" />；如果已關閉 NUM LOCK，則為 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenStandardError">
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>擷取標準錯誤資料流。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenStandardError">
      <MemberSignature Language="C#" Value="public static System.IO.Stream OpenStandardError ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream OpenStandardError() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.OpenStandardError" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenStandardError () As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Stream ^ OpenStandardError();" />
      <MemberSignature Language="F#" Value="static member OpenStandardError : unit -&gt; System.IO.Stream" Usage="System.Console.OpenStandardError " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>擷取標準錯誤資料流。</summary>
        <returns>標準錯誤資料流。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法可用來重新取得標準錯誤資料流，藉由變更之後<xref:System.Console.SetError%2A>方法。  
  
   
  
## Examples  
 下列範例是簡單的文字檔案檢視器，在主控台中顯示一或多個文字檔案的內容。 如果不有任何命令列引數，或如果命令列引數傳遞的任何檔案不存在，此範例會呼叫<xref:System.Console.SetError%2A>方法，以錯誤的資訊重新導向至檔案，呼叫<xref:System.Console.OpenStandardError%2A>過程中重新取得標準錯誤的方法串流處理，並指出錯誤資訊已寫入至檔案。  
  
 [!code-csharp[System.Console.OpenStandardError#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.openstandarderror/cs/viewtextfile.cs#1)]
 [!code-vb[System.Console.OpenStandardError#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.openstandarderror/vb/viewtextfile.vb#1)]  
  
 請注意，<xref:System.IO.StreamWriter.AutoFlush%2A?displayProperty=nameWithType>屬性設定為`true`之前重新取得資料流時發生錯誤。 這可確保，輸出將會立即傳送至主控台而不是經過緩衝處理。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Console.Error" />
        <altmember cref="P:System.Console.IsErrorRedirected" />
        <altmember cref="M:System.Console.SetError(System.IO.TextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="OpenStandardError">
      <MemberSignature Language="C#" Value="public static System.IO.Stream OpenStandardError (int bufferSize);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream OpenStandardError(int32 bufferSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.OpenStandardError(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenStandardError (bufferSize As Integer) As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Stream ^ OpenStandardError(int bufferSize);" />
      <MemberSignature Language="F#" Value="static member OpenStandardError : int -&gt; System.IO.Stream" Usage="System.Console.OpenStandardError bufferSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bufferSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bufferSize">內部資料流緩衝區大小。</param>
        <summary>擷取標準錯誤資料流，設定為指定的緩衝區大小。</summary>
        <returns>標準錯誤資料流。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法可用來重新取得標準錯誤資料流，藉由變更之後<xref:System.Console.SetError%2A>方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="bufferSize" /> 小於或等於零。</exception>
        <altmember cref="P:System.Console.Error" />
        <altmember cref="P:System.Console.IsErrorRedirected" />
        <altmember cref="M:System.Console.SetError(System.IO.TextWriter)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenStandardInput">
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>擷取標準輸入資料流。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenStandardInput">
      <MemberSignature Language="C#" Value="public static System.IO.Stream OpenStandardInput ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream OpenStandardInput() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.OpenStandardInput" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenStandardInput () As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Stream ^ OpenStandardInput();" />
      <MemberSignature Language="F#" Value="static member OpenStandardInput : unit -&gt; System.IO.Stream" Usage="System.Console.OpenStandardInput " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>擷取標準輸入資料流。</summary>
        <returns>標準輸入資料流。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法可用來重新取得標準輸入資料流，藉由變更之後<xref:System.Console.SetIn%2A>方法。  
  
   
  
## Examples  
 下列範例示範如何將`OpenStandardInput`屬性。  
  
 [!code-cpp[System.Console.OpenStandartInput#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console.OpenStandartInput/CPP/decode.cpp#1)]
 [!code-csharp[System.Console.OpenStandartInput#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.OpenStandartInput/CS/decode.cs#1)]
 [!code-vb[System.Console.OpenStandartInput#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.OpenStandartInput/VB/decode.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Console.In" />
        <altmember cref="P:System.Console.IsInputRedirected" />
        <altmember cref="M:System.Console.SetIn(System.IO.TextReader)" />
      </Docs>
    </Member>
    <Member MemberName="OpenStandardInput">
      <MemberSignature Language="C#" Value="public static System.IO.Stream OpenStandardInput (int bufferSize);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream OpenStandardInput(int32 bufferSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.OpenStandardInput(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenStandardInput (bufferSize As Integer) As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Stream ^ OpenStandardInput(int bufferSize);" />
      <MemberSignature Language="F#" Value="static member OpenStandardInput : int -&gt; System.IO.Stream" Usage="System.Console.OpenStandardInput bufferSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bufferSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bufferSize">內部資料流緩衝區大小。</param>
        <summary>擷取標準輸入資料流，設定為指定的緩衝區大小。</summary>
        <returns>標準輸入資料流。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法可用來重新取得標準輸出資料流，藉由變更之後<xref:System.Console.SetIn%2A>方法。  
  
   
  
## Examples  
 下列範例示範如何將`OpenStandardInput`屬性。  
  
 [!code-cpp[System.Console.OpenStandartInput#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console.OpenStandartInput/CPP/decode.cpp#1)]
 [!code-csharp[System.Console.OpenStandartInput#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.OpenStandartInput/CS/decode.cs#1)]
 [!code-vb[System.Console.OpenStandartInput#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.OpenStandartInput/VB/decode.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="bufferSize" /> 小於或等於零。</exception>
        <altmember cref="P:System.Console.In" />
        <altmember cref="P:System.Console.IsInputRedirected" />
        <altmember cref="M:System.Console.SetIn(System.IO.TextReader)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenStandardOutput">
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>擷取標準輸出資料流。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenStandardOutput">
      <MemberSignature Language="C#" Value="public static System.IO.Stream OpenStandardOutput ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream OpenStandardOutput() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.OpenStandardOutput" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenStandardOutput () As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Stream ^ OpenStandardOutput();" />
      <MemberSignature Language="F#" Value="static member OpenStandardOutput : unit -&gt; System.IO.Stream" Usage="System.Console.OpenStandardOutput " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>擷取標準輸出資料流。</summary>
        <returns>標準輸出資料流。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法可用來重新取得標準輸出資料流，藉由變更之後<xref:System.Console.SetOut%2A>方法。  
  
   
  
## Examples  
 在下列程式碼中，說明了如何使用 <xref:System.Console.OpenStandardOutput%2A> 方法。 它會將字串中 4 個連續的空白字元以 1 個定位字元取代。 若要執行它，您必須提供兩個命令列引數。 第一個是現有文字檔的名稱，標準輸入資料流將重新導向到這個檔案。 第二個是檔案的名稱，標準輸出資料流將重新導向到這個檔案。 這個檔案不必存在。 如果是，將覆寫它的內容。  
  
 [!code-cpp[System.Console-INSERTTABS#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-INSERTTABS/CPP/inserttabs.cpp#1)]
 [!code-csharp[System.Console-INSERTTABS#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-INSERTTABS/CS/inserttabs.cs#1)]
 [!code-vb[System.Console-INSERTTABS#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-INSERTTABS/VB/inserttabs.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Console.Out" />
        <altmember cref="P:System.Console.IsOutputRedirected" />
        <altmember cref="M:System.Console.SetOut(System.IO.TextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="OpenStandardOutput">
      <MemberSignature Language="C#" Value="public static System.IO.Stream OpenStandardOutput (int bufferSize);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream OpenStandardOutput(int32 bufferSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.OpenStandardOutput(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenStandardOutput (bufferSize As Integer) As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Stream ^ OpenStandardOutput(int bufferSize);" />
      <MemberSignature Language="F#" Value="static member OpenStandardOutput : int -&gt; System.IO.Stream" Usage="System.Console.OpenStandardOutput bufferSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bufferSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bufferSize">內部資料流緩衝區大小。</param>
        <summary>擷取標準輸出資料流，設定為指定的緩衝區大小。</summary>
        <returns>標準輸出資料流。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法可用來重新取得標準輸出資料流，藉由變更之後<xref:System.Console.SetOut%2A>方法。  
  
   
  
## Examples  
 在下列程式碼中，說明了如何使用 <xref:System.Console.OpenStandardOutput%2A> 方法。 它會將字串中 4 個連續的空白字元以 1 個定位字元取代。 若要執行它，您必須提供兩個命令列引數。 第一個是現有文字檔的名稱，標準輸入資料流將重新導向到這個檔案。 第二個是檔案的名稱，標準輸出資料流將重新導向到這個檔案。 這個檔案不必存在。 如果是，將覆寫它的內容。  
  
 [!code-cpp[System.Console-INSERTTABS#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-INSERTTABS/CPP/inserttabs.cpp#1)]
 [!code-csharp[System.Console-INSERTTABS#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-INSERTTABS/CS/inserttabs.cs#1)]
 [!code-vb[System.Console-INSERTTABS#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-INSERTTABS/VB/inserttabs.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="bufferSize" /> 小於或等於零。</exception>
        <altmember cref="P:System.Console.Out" />
        <altmember cref="P:System.Console.IsOutputRedirected" />
        <altmember cref="M:System.Console.SetOut(System.IO.TextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="Out">
      <MemberSignature Language="C#" Value="public static System.IO.TextWriter Out { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.IO.TextWriter Out" />
      <MemberSignature Language="DocId" Value="P:System.Console.Out" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Out As TextWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::IO::TextWriter ^ Out { System::IO::TextWriter ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Out : System.IO.TextWriter" Usage="System.Console.Out" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.TextWriter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得標準輸出資料流。</summary>
        <value>
          <see cref="T:System.IO.TextWriter" />，代表標準輸出資料流。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 根據預設，此屬性是設定標準輸出資料流。 這個屬性可以設定為與另一個資料流<xref:System.Console.SetOut%2A>方法。  
  
 請注意，呼叫`Console.Out.WriteLine`方法相當於呼叫對應<xref:System.Console.WriteLine%2A>方法。  
  
   
  
## Examples  
 下列範例會使用<xref:System.Console.Out%2A>屬性來顯示包含的標準輸出裝置的應用程式的目前目錄中的檔案名稱的陣列。 接著為 Files.txt 檔案中設定的標準輸出，並列出檔案的陣列項目。 最後，它會設定輸出至標準輸出資料流，並再次顯示到標準輸出裝置的陣列項目。  
  
 [!code-csharp[System.Console.Out#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.out/cs/out1.cs#1)]
 [!code-vb[System.Console.Out#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.out/vb/out1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Console.Error" />
        <altmember cref="P:System.Console.In" />
        <altmember cref="M:System.Console.SetOut(System.IO.TextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="OutputEncoding">
      <MemberSignature Language="C#" Value="public static System.Text.Encoding OutputEncoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Text.Encoding OutputEncoding" />
      <MemberSignature Language="DocId" Value="P:System.Console.OutputEncoding" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property OutputEncoding As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Text::Encoding ^ OutputEncoding { System::Text::Encoding ^ get(); void set(System::Text::Encoding ^ value); };" />
      <MemberSignature Language="F#" Value="member this.OutputEncoding : System.Text.Encoding with get, set" Usage="System.Console.OutputEncoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定主控台用來寫入輸出的編碼方式。</summary>
        <value>用來寫入主控台輸出的編碼方式。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 主控台會使用輸出的編碼方式轉譯成對應的主控台顯示字元的應用程式所寫入的字元。 主控台會使用的預設字碼頁是由系統地區設定決定。  
  
 從開始[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]，屬性取得作業可能會傳回快取的值，而非主控台的目前輸出的編碼方式。 這種情形的值<xref:System.Console.OutputEncoding%2A>指派給以外的其他方式修改屬性<xref:System.Console.OutputEncoding%2A>屬性，例如呼叫 Windows`SetConsoleOutputCP`函式。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">設定作業中的屬性值為 <see langword="null" />。</exception>
        <exception cref="T:System.IO.IOException">執行這項作業期間發生錯誤。</exception>
        <exception cref="T:System.Security.SecurityException">您的應用程式沒有執行這項作業的權限。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">用於讀取和寫入最上層視窗和子視窗。  相關聯的列舉型別： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <block subset="none" type="usage">
          <para>Unicode 編碼之外<see cref="T:System.Console" />類別支援 utf-8 編碼<see cref="T:System.Text.UTF8Encoding" />類別，從開始[!INCLUDE[net_v45](~/includes/net-v45-md.md)]，它支援 utf-16 編碼方式和<see cref="T:System.Text.UnicodeEncoding" />類別。 UTF-32 編碼方式和<see cref="T:System.Text.UTF32Encoding" />類別不支援。 嘗試設定輸出編碼方式以 UTF-32 則會擲回<see cref="T:System.IO.IOException" />。  
  
請注意，已成功在主控台中顯示的 Unicode 字元需要下列項目： 
-主控台必須使用 TrueType 字型，例如 Lucida Console 或 Consolas，若要顯示的字元。  
  
-A 主控台所使用的字型必須定義特定的圖像或字符才能顯示。 在主控台可以利用字型連結以顯示來自連結字型的字符，如果基底字型大小不包含該圖像 （glyph） 的定義。  
  
如需有關支援 Unicode 編碼的主控台中，請參閱中的 &lt; Unicode 支援的主控台 &gt; 一節<see cref="T:System.Console" />類別。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public static int Read ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Read() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Read" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Read () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Read();" />
      <MemberSignature Language="F#" Value="static member Read : unit -&gt; int" Usage="System.Console.Read " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>從標準輸入資料流讀取下一個字元。</summary>
        <returns>輸入資料流的下一個字元，或為 -1 (如果目前不再有字元可以讀取)。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Console.Read%2A>方法會封鎖其傳回值，當您輸入的輸入的字元時; 當您按下終止<xref:System.ConsoleKey.Enter>索引鍵。 按下 Enter 鍵將平台而行終止序列附加至您的輸入 （比方說，Windows 會換行字元復位換行的順序）。 後續呼叫<xref:System.Console.Read%2A>方法一次擷取您輸入的一個字元。 擷取最後一個字元之後，<xref:System.Console.Read%2A>封鎖其傳回值一次並重複週期。  
  
> [!IMPORTANT]
>  <xref:System.Console.ReadLine%2A>方法，或有<xref:System.Console.KeyAvailable%2A>屬性並<xref:System.Console.ReadKey%2A>方法會偏好使用<xref:System.Console.Read%2A>方法。  
  
 請注意，此方法不會傳回-1 除非您執行下列動作之一：  
  
-   同時按下<xref:System.ConsoleModifiers.Control>輔助按鍵和<xref:System.ConsoleKey.Z>主控台按鍵 (Ctrl + Z)，以指示的檔案結尾條件。  
  
-   按下通知檔案結尾條件，例如 F6 函式金鑰，在 Windows 中對等索引鍵。  
  
-   將輸入資料流重新導向到來源，例如文字檔案，具有實際的檔案結尾字元。  
  
   
  
## Examples  
 下列範例示範<xref:System.Console.Read%2A>方法。  
  
 [!code-cpp[console.read#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.read/CPP/read.cpp#1)]
 [!code-csharp[console.read#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.read/CS/read.cs#1)]
 [!code-vb[console.read#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.read/VB/read.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ReadKey">
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>取得使用者按下的下一個字元或功能鍵。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReadKey">
      <MemberSignature Language="C#" Value="public static ConsoleKeyInfo ReadKey ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ConsoleKeyInfo ReadKey() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.ReadKey" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadKey () As ConsoleKeyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static ConsoleKeyInfo ReadKey();" />
      <MemberSignature Language="F#" Value="static member ReadKey : unit -&gt; ConsoleKeyInfo" Usage="System.Console.ReadKey " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ConsoleKeyInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>取得使用者按下的下一個字元或功能鍵。 按下的按鍵會顯示在主控台視窗中。</summary>
        <returns>物件，可描述對應到所按主控台按鍵的 <see cref="T:System.ConsoleKey" /> 常數和 Unicode 字元 (如有此項)。 <see cref="T:System.ConsoleKeyInfo" /> 物件也描述在 <see cref="T:System.ConsoleModifiers" /> 值的位元 (Bitwise) 組合中，是否有一或多個 Shift、Alt 或 Ctrl 輔助按鍵與主控台按鍵同時按下。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Console.ReadKey%2A>方法會等候，也就是在執行緒發出的區塊<xref:System.Console.ReadKey%2A>方法，直到按下字元或功能鍵。 字元或函式可以是按下按鍵組合與一或多個 Alt、 Ctrl 或 Shift 輔助按鍵。 不過，按一個輔助按鍵本身並不會造成<xref:System.Console.ReadKey%2A>方法來傳回。  
  
 根據您的應用程式中，您可能想要<xref:System.Console.ReadKey%2A>方法搭配<xref:System.Console.KeyAvailable%2A>屬性。  
  
 <xref:System.Console.ReadKey%2A>方法會從鍵盤讀取，即使標準輸入會被重新導向到的檔案<xref:System.Console.SetIn%2A>方法。  
  
   
  
## Examples  
 其中一個最常見的用法<xref:System.Console.ReadKey>方法是停止程式執行，直到使用者按下按鍵，並在應用程式會終止或顯示其他視窗的資訊。 下列範例會使用<xref:System.Console.ReadKey>方法以等候使用者按下 Enter 鍵之前終止應用程式。  
  
 [!code-csharp[System.Console.ReadKey#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Console.ReadKey/cs/ReadKey1.cs#1)]
 [!code-vb[System.Console.ReadKey#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Console.ReadKey/vb/ReadKey1.vb#1)]  
  
 請注意，這個多載<xref:System.Console.ReadKey%2A>方法預設會回應使用者按下主控台的任何可顯示金鑰。 若要隱藏它們，請呼叫<xref:System.Console.ReadKey%2A>方法`intercept`引數`true`。  
  
 下列範例會使用<xref:System.Console.ReadKey>方法以顯示哪一個索引鍵的相關使用者按下的資訊...  
  
 [!code-cpp[console.readkey1#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.readkey1/CPP/rk.cpp#1)]
 [!code-csharp[console.readkey1#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.readkey1/CS/rk.cs#1)]
 [!code-vb[console.readkey1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.readkey1/VB/rk.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">會將 <see cref="P:System.Console.In" /> 屬性從主控台之外的某些資料流重新導向。</exception>
        <altmember cref="T:System.ConsoleKey" />
        <altmember cref="P:System.Console.KeyAvailable" />
        <altmember cref="P:System.Console.TreatControlCAsInput" />
        <altmember cref="E:System.Console.CancelKeyPress" />
      </Docs>
    </Member>
    <Member MemberName="ReadKey">
      <MemberSignature Language="C#" Value="public static ConsoleKeyInfo ReadKey (bool intercept);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ConsoleKeyInfo ReadKey(bool intercept) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.ReadKey(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadKey (intercept As Boolean) As ConsoleKeyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static ConsoleKeyInfo ReadKey(bool intercept);" />
      <MemberSignature Language="F#" Value="static member ReadKey : bool -&gt; ConsoleKeyInfo" Usage="System.Console.ReadKey intercept" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ConsoleKeyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="intercept" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="intercept">決定是否要在主控台視窗中顯示按下的按鍵。 <see langword="true" /> 表示不顯示按下的按鍵；否則為 <see langword="false" />。</param>
        <summary>取得使用者按下的下一個字元或功能鍵。 按下的按鍵會選擇性地顯示在主控台視窗中。</summary>
        <returns>物件，可描述對應到所按主控台按鍵的 <see cref="T:System.ConsoleKey" /> 常數和 Unicode 字元 (如有此項)。 <see cref="T:System.ConsoleKeyInfo" /> 物件也描述在 <see cref="T:System.ConsoleModifiers" /> 值的位元 (Bitwise) 組合中，是否有一或多個 Shift、Alt 或 Ctrl 輔助按鍵與主控台按鍵同時按下。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Console.ReadKey%2A>方法會等候，也就是在執行緒發出的區塊<xref:System.Console.ReadKey%2A>方法，直到按下字元或功能鍵。 字元或函式可以是按下按鍵組合與一或多個 Alt、 Ctrl 或 Shift 輔助按鍵。 不過，按一個輔助按鍵本身並不會造成<xref:System.Console.ReadKey%2A>方法來傳回。  
  
 如果`intercept`參數是`true`，按下的按鍵攔截，而不顯示在主控台視窗中，否則會顯示按下的按鍵。  
  
 根據您的應用程式中，您可能想要<xref:System.Console.ReadKey%2A>方法搭配<xref:System.Console.KeyAvailable%2A>屬性。  
  
 <xref:System.Console.ReadKey%2A>方法會從鍵盤讀取，即使標準輸入會被重新導向到的檔案<xref:System.Console.SetIn%2A>方法。  
  
   
  
## Examples  
 其中一個最常見的用法<xref:System.Console.ReadKey%2A>方法是停止程式執行，直到使用者按下按鍵，並在應用程式會終止或顯示其他視窗的資訊。 下列範例會使用<xref:System.Console.ReadKey%28System.Boolean%29>方法以等候使用者按下 Enter 鍵之前終止應用程式。 請注意，是否使用者按下任何其他金鑰，它不會回應至主控台。  
  
 [!code-csharp[System.Console.ReadKey#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Console.ReadKey/cs/ReadKey2.cs#2)]
 [!code-vb[System.Console.ReadKey#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Console.ReadKey/vb/ReadKey2.vb#2)]  
  
 下列範例會使用<xref:System.Console.ReadKey%28System.Boolean%29>方法，以顯示按下的使用者，且不回應該主控台該索引鍵的索引鍵的相關資訊。  
  
 [!code-cpp[console.readkey2#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.readkey2/CPP/rkbool.cpp#1)]
 [!code-csharp[console.readkey2#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.readkey2/CS/rkbool.cs#1)]
 [!code-vb[console.readkey2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.readkey2/VB/rkbool.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">會將 <see cref="P:System.Console.In" /> 屬性從主控台之外的某些資料流重新導向。</exception>
        <altmember cref="T:System.ConsoleKey" />
        <altmember cref="P:System.Console.KeyAvailable" />
        <altmember cref="P:System.Console.TreatControlCAsInput" />
        <altmember cref="E:System.Console.CancelKeyPress" />
      </Docs>
    </Member>
    <Member MemberName="ReadLine">
      <MemberSignature Language="C#" Value="public static string ReadLine ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ReadLine() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.ReadLine" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadLine () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ReadLine();" />
      <MemberSignature Language="F#" Value="static member ReadLine : unit -&gt; string" Usage="System.Console.ReadLine " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>從標準輸入資料流讀取下一行字元。</summary>
        <returns>輸入資料流的下一行字元，或 <see langword="null" /> (如果沒有其他可用字行)。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Console.ReadLine%2A>方法從標準輸入資料流讀取一行。 （行的定義，請參閱下列清單後面的段落）。這表示：  
  
-   如果標準的輸入的裝置是鍵盤<xref:System.Console.ReadLine%2A>方法會封鎖，直到使用者按下**Enter**索引鍵。  
  
     其中一個最常見的用法<xref:System.Console.ReadLine%2A>方法會暫停程式執行之前清除主控台，並顯示新的資訊，或提示使用者按 Enter 鍵終止應用程式之前。 下列範例將說明這點。  
  
     [!code-cpp[System.Console.ReadLine#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console.ReadLine/cpp/ReadLineSimple.cpp#6)]
     [!code-csharp[System.Console.ReadLine#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.ReadLine/cs/ReadLineSimple.cs#6)]
     [!code-vb[System.Console.ReadLine#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.ReadLine/vb/ReadLineSimple.vb#6)]  
  
-   如果標準輸入會被重新導向至檔案，<xref:System.Console.ReadLine%2A>方法從檔案讀取一行文字。 例如，以下是名為 ReadLine1.txt 文字檔：  
  
    ```  
  
    This is the first line.  
    This is the second line.  
    This is the third line.  
    This is the fourth line.  
  
    ```  
  
     下列範例會使用<xref:System.Console.ReadLine%2A>方法來讀取檔案從重新導向的輸入。 方法傳回時，讀取的作業會終止`null`，這表示不能有行保持讀取。  
  
     [!code-csharp[System.Console.ReadLine#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.ReadLine/cs/ReadLine3.cs#3)]
     [!code-vb[System.Console.ReadLine#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.ReadLine/vb/ReadLine3.vb#3)]  
  
     編譯範例，以可執行檔的具名 ReadLine1.exe 之後, 您可以執行從命令列語法  
  
    ```  
    ReadLine1 < ReadLine1.txt  
    ```  
  
     可以讀取檔案的內容，並且顯示到主控台。  
  
 一條線定義為一串字元後面接著歸位字元 (十六進位 0x000d)、 換行字元 (十六進位的 0x000a) 或值<xref:System.Environment.NewLine%2A?displayProperty=nameWithType>屬性。 傳回的字串不包含終止的字元。 根據預設，此方法會讀取從 256 個字元的輸入緩衝區的輸入。 因為這樣會包含<xref:System.Environment.NewLine%2A?displayProperty=nameWithType>的字元，方法可以讀取的行，其中包含多達 254 個字元。 若要閱讀更長的線條，呼叫<xref:System.Console.OpenStandardInput%28System.Int32%29>方法。  
  
 <xref:System.Console.ReadLine%2A>方法以同步方式執行。 也就是說，它會封鎖直到讀取一行，或按下 Ctrl + Z 鍵盤組合。 <xref:System.Console.In%2A>屬性會傳回<xref:System.IO.TextReader>物件，代表標準輸入資料流，且具有兩個同步<xref:System.IO.TextReader.ReadLine%2A?displayProperty=nameWithType>方法和非同步<xref:System.IO.TextReader.ReadLineAsync%2A?displayProperty=nameWithType>方法。 不過，當做為主控台的標準的輸入資料流<xref:System.IO.TextReader.ReadLineAsync%2A?displayProperty=nameWithType>以同步方式，而非以非同步方式執行，並傳回`Task<String>`只完成讀取的作業之後。  
  
 如果此方法會擲回<xref:System.OutOfMemoryException>例外狀況，在基礎的讀取器的位置<xref:System.IO.Stream>物件進階的方法無法讀取的字元，但已讀取到內部的字元數<xref:System.Console.ReadLine%2A>緩衝區是捨棄。 因為無法變更資料流中讀取器的位置，已讀取的字元是無法復原，並可重新初始化來只存取<xref:System.IO.TextReader>。 如果資料流中的初始位置為未知或資料流不支援搜尋，基礎<xref:System.IO.Stream>也需要重新初始化。 若要避免這種情況，並產生強固的程式碼，您應該使用<xref:System.Console.KeyAvailable%2A>屬性和<xref:System.Console.ReadKey%2A>讀取方法，並存放區中預先配置的緩衝區的字元。  
  
 如果此方法時會從主控台讀取輸入，按下 Ctrl + Z 字元，則方法會傳回`null`。 這可讓使用者，以防止進一步鍵盤輸入時<xref:System.Console.ReadLine%2A>在迴圈中呼叫方法。 下列範例說明此案例。  
  
 [!code-cpp[System.Console.ReadLine#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console.ReadLine/cpp/readline2.cpp#1)]
 [!code-csharp[System.Console.ReadLine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.ReadLine/cs/ReadLine2.cs#1)]
 [!code-vb[System.Console.ReadLine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.ReadLine/vb/ReadLine2.vb#1)]  
  
   
  
## Examples  
 下列範例需要兩個命令列引數： 現有的文字檔案的名稱和要寫入至輸出檔案名稱。 它會開啟現有的文字檔，並將重新導向標準鍵盤輸入至該檔案。 它也會從主控台輸出檔的標準輸出重新導向。 然後它會使用<xref:System.Console.ReadLine%2A?displayProperty=nameWithType>方法，以讀取每一行，在檔案中，以 tab 字元，取代每個序列的四個空格，並使用<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>方法，將結果寫入輸出檔。  
  
 [!code-cpp[System.Console-INSERTTABS#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-INSERTTABS/CPP/inserttabs.cpp#1)]
 [!code-csharp[System.Console-INSERTTABS#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-INSERTTABS/CS/inserttabs.cs#1)]
 [!code-vb[System.Console-INSERTTABS#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-INSERTTABS/VB/inserttabs.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
        <exception cref="T:System.OutOfMemoryException">沒有足夠記憶體可為傳回的字串配置緩衝區。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">下一行字元中的字元數大於 <see cref="F:System.Int32.MaxValue" />。</exception>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="ResetColor">
      <MemberSignature Language="C#" Value="public static void ResetColor ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ResetColor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.ResetColor" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ResetColor ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ResetColor();" />
      <MemberSignature Language="F#" Value="static member ResetColor : unit -&gt; unit" Usage="System.Console.ResetColor " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>將前景和背景的主控台色彩設定為預設值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 前景和背景色彩會還原至存在於目前的處理序開始時的色彩。 如需詳細資訊，請參閱 <<c0> <xref:System.Console.ForegroundColor%2A> 和<xref:System.Console.BackgroundColor%2A>屬性。  
  
   
  
## Examples  
 下列範例會將儲存的值<xref:System.ConsoleColor>列舉型別陣列，並將目前的值<xref:System.Console.BackgroundColor%2A>和<xref:System.Console.ForegroundColor%2A>變數的屬性。 然後變更的前景色彩中的每個色彩<xref:System.ConsoleColor>列舉型別，但色彩符合目前的背景，而且它變成背景色彩中每個色彩<xref:System.ConsoleColor>以外的列舉型別，來比對的色彩目前的前景。 （如果前景色彩與背景色彩相同，文字看不到。）最後，它會呼叫<xref:System.Console.ResetColor%2A>方法來還原原始的主控台色彩。  
  
 [!code-csharp[System.ConsoleColor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.consolecolor/cs/foregroundcolor3.cs#1)]
 [!code-vb[System.ConsoleColor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.consolecolor/vb/foregroundcolor3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">使用者沒有執行這項動作的權限。</exception>
        <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全的最上層視窗和子視窗。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SetBufferSize">
      <MemberSignature Language="C#" Value="public static void SetBufferSize (int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetBufferSize(int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.SetBufferSize(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetBufferSize (width As Integer, height As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetBufferSize(int width, int height);" />
      <MemberSignature Language="F#" Value="static member SetBufferSize : int * int -&gt; unit" Usage="System.Console.SetBufferSize (width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="width">以資料行數測量的緩衝區寬度。</param>
        <param name="height">以列數測量的緩衝區的高度。</param>
        <summary>將螢幕緩衝區的高度和寬度設定為指定的值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列範例示範<xref:System.Console.WindowLeft%2A>， <xref:System.Console.WindowTop%2A>， <xref:System.Console.WindowWidth%2A>， <xref:System.Console.WindowHeight%2A>， <xref:System.Console.BufferWidth%2A>， <xref:System.Console.BufferHeight%2A>，並<xref:System.Console.CursorVisible%2A>屬性，而<xref:System.Console.SetWindowPosition%2A>， <xref:System.Console.SetBufferSize%2A>，和<xref:System.Console.ReadKey%2A>方法。 範例會繪製格線模式，螢幕緩衝區的寬度為基礎的螢幕緩衝區中。 然後範例會移動以回應的向上箭號，向下鍵、 向左鍵或向右箭號的主控台按鍵已按下主控台視窗。 格線模式可協助您瞭解相對於螢幕緩衝區的主控台視窗的移動。  
  
 [!code-cpp[console.windowLT#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.windowLT/CPP/wlt.cpp#1)]
 [!code-csharp[console.windowLT#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.windowLT/CS/wlt.cs#1)]
 [!code-vb[console.windowLT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.windowLT/VB/wlt.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="height" /> 或 <paramref name="width" /> 小於或等於零。  
  
-或- 
 <paramref name="height" /> 或 <paramref name="width" /> 大於或等於 <see cref="F:System.Int16.MaxValue" />。  
  
-或- 
 <paramref name="width" /> 小於 <see cref="P:System.Console.WindowLeft" /> + <see cref="P:System.Console.WindowWidth" />。  
  
-或- 
 <paramref name="height" /> 小於 <see cref="P:System.Console.WindowTop" /> + <see cref="P:System.Console.WindowHeight" />。</exception>
        <exception cref="T:System.Security.SecurityException">使用者沒有執行這項動作的權限。</exception>
        <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全的最上層視窗和子視窗。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SetCursorPosition">
      <MemberSignature Language="C#" Value="public static void SetCursorPosition (int left, int top);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetCursorPosition(int32 left, int32 top) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.SetCursorPosition(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetCursorPosition (left As Integer, top As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetCursorPosition(int left, int top);" />
      <MemberSignature Language="F#" Value="static member SetCursorPosition : int * int -&gt; unit" Usage="System.Console.SetCursorPosition (left, top)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Int32" />
        <Parameter Name="top" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="left">游標的資料行位置。 資料行由左至右，從 0 開始編號。</param>
        <param name="top">游標的資料列位置。 資料列由上至下，從 0 開始編號。</param>
        <summary>設定游標的位置。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Console.SetCursorPosition%2A>方法來指定開始下一步 的寫入作業，在主控台視窗中的位置。 如果指定的資料指標位置超出目前會顯示在主控台視窗中的區域中，視窗原點將自動變更，以顯示資料指標。  
  
 資料指標會自動移至下一個字元位置每次將一個字元寫入至主控台視窗。 如果游標位於主控台視窗底部右邊的字元位置下, 一個寫入作業會讓捲動，讓資料指標仍然會顯示 [主控台] 視窗。 如果您想要將字元寫入而不會造成捲動，請使用 [主控台] 視窗底部右邊的字元位置<xref:System.Console.MoveBufferArea%2A>方法，以將字元移至該位置。  
  
   
  
## Examples  
 此範例示範<xref:System.Console.CursorLeft%2A>並<xref:System.Console.CursorTop%2A>屬性，而<xref:System.Console.SetCursorPosition%2A>和<xref:System.Console.Clear%2A>方法。 範例會將定位資料指標，用來決定下, 一次寫入，就會發生 5 個字元的矩形混用繪製的 5 個字元"+"、"&#124;"，和 「-」 字串。 請注意，無法使用較少的步驟使用的其他字串組合繪製矩形。  
  
 [!code-cpp[console.cursorLTS#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.cursorLTS/CPP/lts.cpp#1)]
 [!code-csharp[console.cursorLTS#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.cursorLTS/CS/lts.cs#1)]
 [!code-vb[console.cursorLTS#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.cursorLTS/VB/lts.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="left" /> 或 <paramref name="top" /> 小於零。  
  
-或- 
 <paramref name="left" /> 大於或等於 <see cref="P:System.Console.BufferWidth" />。  
  
-或- 
 <paramref name="top" /> 大於或等於 <see cref="P:System.Console.BufferHeight" />。</exception>
        <exception cref="T:System.Security.SecurityException">使用者沒有執行這項動作的權限。</exception>
        <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全的最上層視窗和子視窗。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SetError">
      <MemberSignature Language="C#" Value="public static void SetError (System.IO.TextWriter newError);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetError(class System.IO.TextWriter newError) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.SetError(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetError (newError As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetError(System::IO::TextWriter ^ newError);" />
      <MemberSignature Language="F#" Value="static member SetError : System.IO.TextWriter -&gt; unit" Usage="System.Console.SetError newError" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newError" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="newError">表示新標準錯誤輸出的資料流。</param>
        <summary>將 <see cref="P:System.Console.Error" /> 屬性設定為指定的 <see cref="T:System.IO.TextWriter" /> 物件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 根據預設，<xref:System.Console.Error%2A>屬性設定為標準錯誤輸出資料流。  
  
 A<xref:System.IO.StreamWriter>封裝<xref:System.IO.FileStream>可用來將錯誤訊息傳送至檔案。  
  
   
  
## Examples  
 下列範例顯示如何將標準錯誤資料流重新導向至檔案。  
  
 [!code-cpp[System.Console.SetError#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console.SetError/cpp/seterror1.cpp#1)]
 [!code-csharp[System.Console.SetError#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.SetError/cs/SetError1.cs#1)]
 [!code-vb[System.Console.SetError#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.SetError/vb/SetError1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="newError" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.Security.SecurityException">呼叫端沒有必要的權限。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">呼叫 unmanaged 程式碼。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <altmember cref="P:System.Console.IsErrorRedirected" />
        <altmember cref="P:System.Console.Error" />
      </Docs>
    </Member>
    <Member MemberName="SetIn">
      <MemberSignature Language="C#" Value="public static void SetIn (System.IO.TextReader newIn);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetIn(class System.IO.TextReader newIn) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.SetIn(System.IO.TextReader)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetIn (newIn As TextReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetIn(System::IO::TextReader ^ newIn);" />
      <MemberSignature Language="F#" Value="static member SetIn : System.IO.TextReader -&gt; unit" Usage="System.Console.SetIn newIn" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newIn" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="newIn">表示新標準輸入的資料流。</param>
        <summary>將 <see cref="P:System.Console.In" /> 屬性設定為指定的 <see cref="T:System.IO.TextReader" /> 物件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 根據預設，<xref:System.Console.In%2A>屬性設定為標準輸入資料流。  
  
 A<xref:System.IO.StreamReader>封裝<xref:System.IO.FileStream>可用來接收來自檔案的輸入。  
  
   
  
## Examples  
 在下列程式碼中，說明了如何使用 <xref:System.Console.SetIn%2A> 方法。 它會將字串中 4 個連續的空白字元以 1 個定位字元取代。 若要執行它，您必須提供兩個命令列引數。 第一個是現有文字檔的名稱，標準輸入資料流將重新導向到這個檔案。 第二個是檔案的名稱，標準輸出資料流將重新導向到這個檔案。 這個檔案不必存在。 如果是，將覆寫它的內容。  
  
 [!code-cpp[System.Console-INSERTTABS#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-INSERTTABS/CPP/inserttabs.cpp#1)]
 [!code-csharp[System.Console-INSERTTABS#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-INSERTTABS/CS/inserttabs.cs#1)]
 [!code-vb[System.Console-INSERTTABS#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-INSERTTABS/VB/inserttabs.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="newIn" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.Security.SecurityException">呼叫端沒有必要的權限。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">呼叫 unmanaged 程式碼。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <altmember cref="T:System.IO.TextReader" />
        <altmember cref="P:System.Console.In" />
      </Docs>
    </Member>
    <Member MemberName="SetOut">
      <MemberSignature Language="C#" Value="public static void SetOut (System.IO.TextWriter newOut);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetOut(class System.IO.TextWriter newOut) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.SetOut(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetOut (newOut As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetOut(System::IO::TextWriter ^ newOut);" />
      <MemberSignature Language="F#" Value="static member SetOut : System.IO.TextWriter -&gt; unit" Usage="System.Console.SetOut newOut" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newOut" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="newOut">表示新標準輸出的資料流。</param>
        <summary>將 <see cref="P:System.Console.Out" /> 屬性設定為指定的 <see cref="T:System.IO.TextWriter" /> 物件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 根據預設，<xref:System.Console.Out%2A>屬性設定為標準輸出資料流。  
  
 A<xref:System.IO.StreamWriter>封裝<xref:System.IO.FileStream>可用來將輸出傳送至檔案。 例如:   
  
 [!code-cpp[System.Console.SetOut#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.console.setout/cpp/source.cpp#1)]
 [!code-csharp[System.Console.SetOut#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.setout/cs/source.cs#1)]
 [!code-vb[System.Console.SetOut#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.setout/vb/source.vb#1)]  
  
   
  
## Examples  
 在下列程式碼中，說明了如何使用 <xref:System.Console.SetOut%2A> 方法。 它會將字串中 4 個連續的空白字元以 1 個定位字元取代。 若要執行它，您必須提供兩個命令列引數。 第一個是現有文字檔的名稱，標準輸入資料流將重新導向到這個檔案。 第二個是檔案的名稱，標準輸出資料流將重新導向到這個檔案。 這個檔案不必存在。 如果是，將覆寫它的內容。  
  
 [!code-cpp[System.Console-INSERTTABS#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-INSERTTABS/CPP/inserttabs.cpp#1)]
 [!code-csharp[System.Console-INSERTTABS#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-INSERTTABS/CS/inserttabs.cs#1)]
 [!code-vb[System.Console-INSERTTABS#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-INSERTTABS/VB/inserttabs.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="newOut" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.Security.SecurityException">呼叫端沒有必要的權限。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">呼叫 unmanaged 程式碼。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="P:System.Console.Out" />
      </Docs>
    </Member>
    <Member MemberName="SetWindowPosition">
      <MemberSignature Language="C#" Value="public static void SetWindowPosition (int left, int top);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetWindowPosition(int32 left, int32 top) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.SetWindowPosition(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetWindowPosition (left As Integer, top As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetWindowPosition(int left, int top);" />
      <MemberSignature Language="F#" Value="static member SetWindowPosition : int * int -&gt; unit" Usage="System.Console.SetWindowPosition (left, top)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Int32" />
        <Parameter Name="top" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="left">主控台視窗左上角的資料行位置。</param>
        <param name="top">主控台視窗左上角的列位置。</param>
        <summary>將主控台視窗的位置設定為與螢幕緩衝區相對的位置。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [作業系統] 視窗會顯示 [主控台] 視窗中，而主控台視窗顯示螢幕緩衝區的一部分。 <xref:System.Console.SetWindowPosition%2A>方法影響相對於螢幕緩衝區的主控台視窗的位置，但不會影響相對於桌面的 [作業系統] 視窗的位置。  
  
 主控台和作業系統 windows 通常不會影響彼此。 不過，如果螢幕緩衝區無法顯示在主控台視窗的目前的界限，作業系統會自動附加捲軸至 [作業系統] 視窗。 在此情況下，移動作業系統視窗捲軸會影響的主控台視窗中，位置和移動的主控台視窗<xref:System.Console.SetWindowPosition%2A>方法會影響作業系統視窗捲軸的位置。  
  
   
  
## Examples  
 下列範例示範<xref:System.Console.WindowLeft%2A>， <xref:System.Console.WindowTop%2A>， <xref:System.Console.WindowWidth%2A>， <xref:System.Console.WindowHeight%2A>， <xref:System.Console.BufferWidth%2A>， <xref:System.Console.BufferHeight%2A>，並<xref:System.Console.CursorVisible%2A>屬性，而<xref:System.Console.SetWindowPosition%2A>， <xref:System.Console.SetBufferSize%2A>，和<xref:System.Console.ReadKey%2A>方法。 範例會繪製格線模式，螢幕緩衝區的寬度為基礎的螢幕緩衝區中。 然後範例會移動以回應的向上箭號，向下鍵、 向左鍵或向右箭號的主控台按鍵已按下主控台視窗。 格線模式可協助您瞭解相對於螢幕緩衝區的主控台視窗的移動。  
  
 [!code-cpp[console.windowLT#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.windowLT/CPP/wlt.cpp#1)]
 [!code-csharp[console.windowLT#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.windowLT/CS/wlt.cs#1)]
 [!code-vb[console.windowLT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.windowLT/VB/wlt.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="left" /> 或 <paramref name="top" /> 小於零。  
  
-或- 
 <paramref name="left" /> + <see cref="P:System.Console.WindowWidth" /> 大於 <see cref="P:System.Console.BufferWidth" />。  
  
-或- 
 <paramref name="top" /> + <see cref="P:System.Console.WindowHeight" /> 大於 <see cref="P:System.Console.BufferHeight" />。</exception>
        <exception cref="T:System.Security.SecurityException">使用者沒有執行這項動作的權限。</exception>
        <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全的最上層視窗和子視窗。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SetWindowSize">
      <MemberSignature Language="C#" Value="public static void SetWindowSize (int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetWindowSize(int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.SetWindowSize(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetWindowSize (width As Integer, height As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetWindowSize(int width, int height);" />
      <MemberSignature Language="F#" Value="static member SetWindowSize : int * int -&gt; unit" Usage="System.Console.SetWindowSize (width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="width">以資料行數測量的主控台視窗的寬度。</param>
        <param name="height">以資料列數測量的主控台視窗的高度。</param>
        <summary>將主控台視窗的高度和寬度設定為指定的值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 此範例示範<xref:System.Console.SetWindowSize%2A>方法，而<xref:System.Console.WindowWidth%2A>和<xref:System.Console.WindowHeight%2A>屬性。 您必須執行的範例，以查看完整的效果，變更主控台視窗大小。  
  
 此範例會報告設定為 85 個欄和 43 個資料列中，主控台視窗的維度，然後等候被按下的索引鍵。 按下任意鍵時，維度的 [主控台] 視窗會變成一半、 回報新的維度，並等候另一個按鍵動作的範例。 最後，按下任意鍵時，主控台視窗會還原到其原始的維度，然後此範例會結束。  
  
 [!code-cpp[console.setwindowsize#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.setwindowsize/CPP/sws.cpp#1)]
 [!code-csharp[console.setwindowsize#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.setwindowsize/CS/sws.cs#1)]
 [!code-vb[console.setwindowsize#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.setwindowsize/VB/sws.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="width" /> 或 <paramref name="height" /> 小於或等於零。  
  
-或- 
 <paramref name="width" /> 加上 <see cref="P:System.Console.WindowLeft" />，或 <paramref name="height" /> 加上 <see cref="P:System.Console.WindowTop" /> 大於或等於 <see cref="F:System.Int16.MaxValue" />。  
  
-或- 
 對於目前螢幕解析度和主控台字型，<paramref name="width" /> 或 <paramref name="height" /> 大於最大可能視窗寬度或高度。</exception>
        <exception cref="T:System.Security.SecurityException">使用者沒有執行這項動作的權限。</exception>
        <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全的最上層視窗和子視窗。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Title">
      <MemberSignature Language="C#" Value="public static string Title { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property string Title" />
      <MemberSignature Language="DocId" Value="P:System.Console.Title" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property Title As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ Title { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Title : string with get, set" Usage="System.Console.Title" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定要顯示於主控台標題列中的標題。</summary>
        <value>要顯示於主控台標題列中的字串。 此標題字串的最大長度是 24500 個字元。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 此範例示範<xref:System.Console.Title%2A>屬性。 此範例會顯示目前 [作業系統] 視窗的標題、 等待按鍵動作，然後顯示新的標題。  
  
 [!code-cpp[console.title#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.title/CPP/mytitle.cpp#1)]
 [!code-csharp[console.title#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.title/CS/mytitle.cs#1)]
 [!code-vb[console.title#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.title/VB/mytitle.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在取得作業中，擷取的標題長度超過 24500 個字元。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">在設定作業中，指定的標題長度超過 24500 個字元。</exception>
        <exception cref="T:System.ArgumentNullException">在設定作業中，指定的標題是 <see langword="null" />。</exception>
        <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全的最上層視窗和子視窗。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="TreatControlCAsInput">
      <MemberSignature Language="C#" Value="public static bool TreatControlCAsInput { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool TreatControlCAsInput" />
      <MemberSignature Language="DocId" Value="P:System.Console.TreatControlCAsInput" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property TreatControlCAsInput As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool TreatControlCAsInput { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.TreatControlCAsInput : bool with get, set" Usage="System.Console.TreatControlCAsInput" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出要將 <see cref="F:System.ConsoleModifiers.Control" /> 輔助按鍵和 <see cref="F:System.ConsoleKey.C" /> 主控台按鍵 (Ctrl+C) 的組合視為一般輸入來處理，還是視為由作業系統處理的中斷。</summary>
        <value>如果 Ctrl+C 要當做一般輸入來處理，則為 <see langword="true" />；否則為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果值<xref:System.Console.TreatControlCAsInput%2A>屬性是`false`並按下 Ctrl + C、 已按下的按鍵不會儲存在輸入緩衝區和作業系統會終止目前正在執行的處理序。 這是預設值。  
  
> [!CAUTION]
>  請謹慎使用這個屬性，因為將它設定為`true`具有這類很大的影響。 大部分的使用者期望 Ctrl + C 來終止的主控台應用程式。 如果您停用 Ctrl + C 的效果，使用者必須請記得使用 Ctrl + Break 結束應用程式，也就是較不熟悉的按鍵組合。  
  
   
  
## Examples  
 下列範例示範<xref:System.Console.TreatControlCAsInput%2A>屬性。  
  
 [!code-cpp[console.readkey1#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.readkey1/CPP/rk.cpp#1)]
 [!code-csharp[console.readkey1#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.readkey1/CS/rk.cs#1)]
 [!code-vb[console.readkey1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.readkey1/VB/rk.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">無法取得或設定主控台輸入緩衝區的輸入模式。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全的最上層視窗和子視窗。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="F:System.ConsoleModifiers.Control" />
        <altmember cref="F:System.ConsoleKey.C" />
        <altmember cref="E:System.Console.CancelKeyPress" />
      </Docs>
    </Member>
    <Member MemberName="WindowHeight">
      <MemberSignature Language="C#" Value="public static int WindowHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 WindowHeight" />
      <MemberSignature Language="DocId" Value="P:System.Console.WindowHeight" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property WindowHeight As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int WindowHeight { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.WindowHeight : int with get, set" Usage="System.Console.WindowHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定主控台視窗區域的高度。</summary>
        <value>以資料列數測量的主控台視窗的高度。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 嘗試設定的值<xref:System.Console.WindowHeight%2A>屬性時的輸出重新導向會擲回其中一個<xref:System.ArgumentOutOfRangeException>或<xref:System.IO.IOException>例外狀況。 若要避免例外狀況中,，您可以設定這個屬性只有當值<xref:System.Console.IsOutputRedirected%2A>屬性會傳回`false`。  
  
   
  
## Examples  
 此範例示範<xref:System.Console.SetWindowSize%2A>方法，而<xref:System.Console.WindowWidth%2A>和<xref:System.Console.WindowHeight%2A>屬性。 您必須執行的範例，以查看完整的效果，變更主控台視窗大小。  
  
 此範例會報告設定為 85 個欄和 43 個資料列中，主控台視窗的維度，然後等候按鍵動作。 按下任意鍵時，維度的 [主控台] 視窗會變成一半、 回報新的維度，並等候另一個按鍵動作的範例。 最後，當按下任何鍵主控台視窗會還原到其原始的維度，然後此範例會結束。  
  
 [!code-cpp[console.setwindowsize#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.setwindowsize/CPP/sws.cpp#1)]
 [!code-csharp[console.setwindowsize#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.setwindowsize/CS/sws.cs#1)]
 [!code-vb[console.setwindowsize#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.setwindowsize/VB/sws.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <see cref="P:System.Console.WindowWidth" /> 屬性值或 <see cref="P:System.Console.WindowHeight" /> 屬性值小於或等於 0。  
  
-或- 
<see cref="P:System.Console.WindowHeight" /> 屬性值加上 <see cref="P:System.Console.WindowTop" /> 屬性值大於或等於 <see cref="F:System.Int16.MaxValue" />。  
  
-或- 
對於目前螢幕解析度和主控台字型，<see cref="P:System.Console.WindowWidth" /> 屬性值或 <see cref="P:System.Console.WindowHeight" /> 屬性值大於最大視窗寬度或高度。</exception>
        <exception cref="T:System.IO.IOException">讀取或寫入資訊時發生錯誤。</exception>
      </Docs>
    </Member>
    <Member MemberName="WindowLeft">
      <MemberSignature Language="C#" Value="public static int WindowLeft { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 WindowLeft" />
      <MemberSignature Language="DocId" Value="P:System.Console.WindowLeft" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property WindowLeft As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int WindowLeft { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.WindowLeft : int with get, set" Usage="System.Console.WindowLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定相對於螢幕緩衝區的主控台視窗區域最左邊的位置。</summary>
        <value>以資料行數測量的主控台視窗最左邊的位置。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 主控台會代表矩形的視窗成較大的矩形緩衝區。 視窗和緩衝區測量是垂直的資料列和水平他們的資料行的數目。 所定義的緩衝區的維度<xref:System.Console.BufferHeight%2A>和<xref:System.Console.BufferWidth%2A>屬性。 所定義的主控台區域維度<xref:System.Console.WindowHeight%2A>和<xref:System.Console.WindowWidth%2A>屬性。 <xref:System.Console.WindowLeft%2A>屬性會決定哪一個資料行緩衝區的會顯示在主控台視窗中的第一個資料行。 值<xref:System.Console.WindowLeft%2A>屬性的範圍可以從 0 到<xref:System.Console.BufferWidth%2A>  -  <xref:System.Console.WindowWidth%2A>。 嘗試設定的值，超出範圍則會擲回<xref:System.ArgumentOutOfRangeException>。  
  
 主控台視窗第一次開啟時，預設值<xref:System.Console.WindowLeft%2A>屬性為零，表示顯示在主控台的第一個資料行對應至緩衝區中的第一個資料行 （位置為零的資料行）。 主控台視窗和緩衝區的預設寬度是 80 的資料行。 這表示<xref:System.Console.WindowLeft%2A>主控台視窗變窄或緩衝區進行更多情況下，才可以修改的屬性。  
  
 請注意，如果緩衝區的寬度超過的主控台視窗中，值的寬度<xref:System.Console.WindowLeft%2A>屬性會自動調整時，使用者會使用水平捲軸緩衝區定義視窗的關聯性。  
  
 嘗試設定的值<xref:System.Console.WindowLeft%2A>屬性時輸出重新導向會擲回<xref:System.IO.IOException>例外狀況。 若要避免這個例外狀況，您可以設定的這個屬性只有當值<xref:System.Console.IsOutputRedirected%2A>屬性會傳回`false`。  
  
   
  
## Examples  
 下列範例會開啟 80 資料行的主控台視窗，並定義是 120 寬的資料行緩衝區。 它會顯示資訊 視窗和緩衝區大小，然後等候使用者按下向左鍵或向右鍵。 在前一個案例中，它遞減值<xref:System.Console.WindowLeft%2A>屬性其中一個結果是否合法的值。 在後者的情況下，它會增加值<xref:System.Console.WindowLeft%2A>一如果結果會是合法的屬性。 請注意，此範例不需要處理<xref:System.ArgumentOutOfRangeException>，因為它會檢查的值指派給<xref:System.Console.WindowLeft%2A>屬性不是負數，並不會導致總和<xref:System.Console.WindowLeft%2A>並<xref:System.Console.WindowWidth%2A>超過屬性<xref:System.Console.BufferWidth%2A>屬性值。  
  
 [!code-cpp[System.Console.WindowLeft#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.console.windowleft/cpp/windowleft1.cpp#1)]
 [!code-csharp[System.Console.WindowLeft#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.windowleft/cs/windowleft1.cs#1)]
 [!code-vb[System.Console.WindowLeft#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.windowleft/vb/windowleft1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">在設定作業中，要指派的值小於零。  
  
-或- 
由於指派的緣故，<see cref="P:System.Console.WindowLeft" /> 加上 <see cref="P:System.Console.WindowWidth" /> 會超過 <see cref="P:System.Console.BufferWidth" />。</exception>
        <exception cref="T:System.IO.IOException">讀取或寫入資訊時發生錯誤。</exception>
      </Docs>
    </Member>
    <Member MemberName="WindowTop">
      <MemberSignature Language="C#" Value="public static int WindowTop { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 WindowTop" />
      <MemberSignature Language="DocId" Value="P:System.Console.WindowTop" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property WindowTop As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int WindowTop { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.WindowTop : int with get, set" Usage="System.Console.WindowTop" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定相對於螢幕緩衝區的主控台視窗區域上方的位置。</summary>
        <value>以資料列數測量的主控台視窗最上方的位置。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 主控台會代表矩形的視窗成較大的矩形緩衝區。 視窗和緩衝區測量是垂直的資料列和水平他們的資料行的數目。 所定義的緩衝區的維度<xref:System.Console.BufferHeight%2A>和<xref:System.Console.BufferWidth%2A>屬性。 所定義的主控台區域維度<xref:System.Console.WindowHeight%2A>和<xref:System.Console.WindowWidth%2A>屬性。 <xref:System.Console.WindowTop%2A>屬性會決定哪一個資料列的緩衝區會顯示在主控台視窗中的第一個資料行。 值<xref:System.Console.WindowTop%2A>屬性的範圍可以從 0 到<xref:System.Console.BufferHeight%2A>  -  <xref:System.Console.WindowHeight%2A>。 嘗試設定的值，超出範圍則會擲回<xref:System.ArgumentOutOfRangeException>。  
  
 嘗試設定的值<xref:System.Console.WindowTop%2A>屬性時輸出重新導向會擲回<xref:System.IO.IOException>例外狀況。 若要避免這個例外狀況，您可以設定的這個屬性只有當值<xref:System.Console.IsOutputRedirected%2A>屬性會傳回`false`。  
  
   
  
## Examples  
 下列範例示範<xref:System.Console.WindowLeft%2A>， <xref:System.Console.WindowTop%2A>， <xref:System.Console.WindowWidth%2A>， <xref:System.Console.WindowHeight%2A>， <xref:System.Console.BufferWidth%2A>， <xref:System.Console.BufferHeight%2A>，並<xref:System.Console.CursorVisible%2A>屬性，而<xref:System.Console.SetWindowPosition%2A>， <xref:System.Console.SetBufferSize%2A>，和<xref:System.Console.ReadKey%2A>方法。 範例會繪製格線模式，螢幕緩衝區的寬度為基礎的螢幕緩衝區中。 然後範例會移動以回應的向上箭號，向下鍵、 向左鍵或向右箭號的主控台按鍵已按下主控台視窗。 格線模式可協助您瞭解相對於螢幕緩衝區的主控台視窗的移動。  
  
 [!code-cpp[console.windowLT#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.windowLT/CPP/wlt.cpp#1)]
 [!code-csharp[console.windowLT#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.windowLT/CS/wlt.cs#1)]
 [!code-vb[console.windowLT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.windowLT/VB/wlt.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">在設定作業中，要指派的值小於零。  
  
-或- 
由於指派的緣故，<see cref="P:System.Console.WindowTop" /> 加上 <see cref="P:System.Console.WindowHeight" /> 會超過 <see cref="P:System.Console.BufferHeight" />。</exception>
        <exception cref="T:System.IO.IOException">讀取或寫入資訊時發生錯誤。</exception>
      </Docs>
    </Member>
    <Member MemberName="WindowWidth">
      <MemberSignature Language="C#" Value="public static int WindowWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 WindowWidth" />
      <MemberSignature Language="DocId" Value="P:System.Console.WindowWidth" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property WindowWidth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int WindowWidth { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.WindowWidth : int with get, set" Usage="System.Console.WindowWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定主控台視窗的寬度。</summary>
        <value>以資料行數測量的主控台視窗的寬度。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 嘗試設定的值<xref:System.Console.WindowWidth%2A>屬性時的輸出重新導向會擲回其中一個<xref:System.ArgumentOutOfRangeException>或<xref:System.IO.IOException>例外狀況。 若要避免例外狀況中,，您可以設定這個屬性只有當值<xref:System.Console.IsOutputRedirected%2A>屬性會傳回`false`。  
  
   
  
## Examples  
 此範例示範<xref:System.Console.SetWindowSize%2A>方法，而<xref:System.Console.WindowWidth%2A>和<xref:System.Console.WindowHeight%2A>屬性。 您必須執行的範例，以查看完整的效果，變更主控台視窗大小。  
  
 此範例會報告設定為 85 個欄和 43 個資料列中，主控台視窗的維度，然後等候按鍵動作。 按下任意鍵時，維度的 [主控台] 視窗會變成一半、 回報新的維度，並等候另一個按鍵動作的範例。 最後，當按下任何鍵主控台視窗會還原到其原始的維度，然後此範例會結束。  
  
 [!code-cpp[console.setwindowsize#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.setwindowsize/CPP/sws.cpp#1)]
 [!code-csharp[console.setwindowsize#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.setwindowsize/CS/sws.cs#1)]
 [!code-vb[console.setwindowsize#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.setwindowsize/VB/sws.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <see cref="P:System.Console.WindowWidth" /> 屬性值或 <see cref="P:System.Console.WindowHeight" /> 屬性值小於或等於 0。  
  
-或- 
<see cref="P:System.Console.WindowHeight" /> 屬性值加上 <see cref="P:System.Console.WindowTop" /> 屬性值大於或等於 <see cref="F:System.Int16.MaxValue" />。  
  
-或- 
對於目前螢幕解析度和主控台字型，<see cref="P:System.Console.WindowWidth" /> 屬性值或 <see cref="P:System.Console.WindowHeight" /> 屬性值大於最大視窗寬度或高度。</exception>
        <exception cref="T:System.IO.IOException">讀取或寫入資訊時發生錯誤。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Write">
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將指定之值的文字表示寫入標準輸出資料流。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(bool value);" />
      <MemberSignature Language="F#" Value="static member Write : bool -&gt; unit" Usage="System.Console.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">要寫入的值。</param>
        <summary>將指定布林值 (Boolean) 的文字表示寫入標準輸出資料流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 文字表示法`value`藉由呼叫會產生<xref:System.Boolean.ToString%2A?displayProperty=nameWithType>，其中一個輸出<xref:System.Boolean.TrueString?displayProperty=nameWithType>或<xref:System.Boolean.FalseString?displayProperty=nameWithType>。  
  
   
  
## Examples  
 在下列程式碼中，說明了如何使用 `Write` 方法。  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全的最上層視窗和子視窗。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(char value);" />
      <MemberSignature Language="F#" Value="static member Write : char -&gt; unit" Usage="System.Console.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">要寫入的值。</param>
        <summary>將指定的 Unicode 字元值寫入標準輸出資料流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 在下列程式碼中，說明了如何使用 `Write` 方法。  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全的最上層視窗和子視窗。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (char[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(char[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (buffer As Char())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(cli::array &lt;char&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="static member Write : char[] -&gt; unit" Usage="System.Console.Write buffer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="buffer">Unicode 字元陣列。</param>
        <summary>將指定的 Unicode 字元陣列寫入標準輸出資料流。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全的最上層視窗和子視窗。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::Decimal value);" />
      <MemberSignature Language="F#" Value="static member Write : decimal -&gt; unit" Usage="System.Console.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">要寫入的值。</param>
        <summary>將指定 <see cref="T:System.Decimal" /> 值的表示文字寫入標準輸出資料流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 文字表示法`value`藉由呼叫產生<xref:System.Decimal.ToString%2A?displayProperty=nameWithType>。  
  
   
  
## Examples  
 在下列程式碼中，說明了如何使用 `Write` 方法。  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全的最上層視窗和子視窗。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(double value);" />
      <MemberSignature Language="F#" Value="static member Write : double -&gt; unit" Usage="System.Console.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">要寫入的值。</param>
        <summary>將指定的雙精確度浮點數值的文字表示寫入標準輸出資料流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 文字表示法`value`藉由呼叫產生<xref:System.Double.ToString%2A?displayProperty=nameWithType>方法。  
  
   
  
## Examples  
 在下列程式碼中，說明了如何使用 `Write` 方法。  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全的最上層視窗和子視窗。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(int value);" />
      <MemberSignature Language="F#" Value="static member Write : int -&gt; unit" Usage="System.Console.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">要寫入的值。</param>
        <summary>將指定 32 位元帶正負號整數值的文字表示寫入標準輸出資料流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 文字表示法`value`藉由呼叫產生<xref:System.Int32.ToString%2A?displayProperty=nameWithType>方法。  
  
   
  
## Examples  
 在下列程式碼中，說明了如何使用 `Write` 方法。  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全的最上層視窗和子視窗。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(long value);" />
      <MemberSignature Language="F#" Value="static member Write : int64 -&gt; unit" Usage="System.Console.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">要寫入的值。</param>
        <summary>將指定 64 位元帶正負號整數值的文字表示寫入標準輸出資料流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 文字表示法`value`藉由呼叫產生<xref:System.Int64.ToString%2A?displayProperty=nameWithType>方法。  
  
   
  
## Examples  
 在下列程式碼中，說明了如何使用 `Write` 方法。  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全的最上層視窗和子視窗。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member Write : obj -&gt; unit" Usage="System.Console.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">要寫入的值，或 <see langword="null" />。</param>
        <summary>將指定物件的文字表示寫入標準輸出資料流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`value`是`null`不寫入任何字串，會擲回任何例外狀況。 否則`ToString`方法`value`呼叫來產生它的字串表示，而產生的字串會寫入標準輸出資料流。  
  
   
  
## Examples  
 在下列程式碼中，說明了如何使用 `Write` 方法。  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全的最上層視窗和子視窗。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(float value);" />
      <MemberSignature Language="F#" Value="static member Write : single -&gt; unit" Usage="System.Console.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">要寫入的值。</param>
        <summary>將指定的單精確度浮點數值的文字表示寫入標準輸出資料流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 文字表示法`value`藉由呼叫產生<xref:System.Single.ToString%2A?displayProperty=nameWithType>方法。  
  
   
  
## Examples  
 在下列程式碼中，說明了如何使用 `Write` 方法。  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全的最上層視窗和子視窗。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::String ^ value);" />
      <MemberSignature Language="F#" Value="static member Write : string -&gt; unit" Usage="System.Console.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">要寫入的值。</param>
        <summary>將指定的字串值寫入標準輸出資料流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果值為`null`，則不寫入至標準輸出資料流。  
  
   
  
## Examples  
 在下列程式碼中，說明了如何使用 `Write` 方法。  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全的最上層視窗和子視窗。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="static member Write : uint32 -&gt; unit" Usage="System.Console.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">要寫入的值。</param>
        <summary>將指定 32 位元不帶正負號整數值的文字表示寫入標準輸出資料流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 文字表示法`value`藉由呼叫產生<xref:System.UInt32.ToString%2A?displayProperty=nameWithType>方法。  
  
   
  
## Examples  
 在下列程式碼中，說明了如何使用 `Write` 方法。  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全的最上層視窗和子視窗。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::UInt64 value);" />
      <MemberSignature Language="F#" Value="static member Write : uint64 -&gt; unit" Usage="System.Console.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">要寫入的值。</param>
        <summary>將指定 64 位元不帶正負號整數值的文字表示寫入標準輸出資料流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 文字表示法`value`藉由呼叫產生<xref:System.UInt64.ToString%2A?displayProperty=nameWithType>方法。  
  
   
  
## Examples  
 在下列程式碼中，說明了如何使用 `Write` 方法。  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全的最上層視窗和子視窗。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (string format, object arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(string format, object arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (format As String, arg0 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::String ^ format, System::Object ^ arg0);" />
      <MemberSignature Language="F#" Value="static member Write : string * obj -&gt; unit" Usage="System.Console.Write (format, arg0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">複合格式字串。</param>
        <param name="arg0">要使用 <paramref name="format" /> 寫入的物件。</param>
        <summary>使用指定的格式資訊，將指定之物件的文字表示寫入標準輸出資料流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會使用[複合格式功能](~/docs/standard/base-types/composite-formatting.md)物件的值轉換成其文字表示，並將該表示內嵌在字串中的.NET framework。 產生的字串寫入至輸出資料流。  
  
 `format`參數是由零個或多個文字執行混合零或多個索引的預留位置，稱為格式項目，對應至這個方法的參數清單中的物件。 格式化的程序會將每個格式項目取代對應的物件值的文字表示。  
  
 格式項目的語法`{` *index*[`,`*對齊*] [`:`*formatString*]`}`，指定必要的索引、 選用的長度和格式化的文字的對齊方式和控管如何格式化的對應物件值的格式規範字元的選擇性字串。  
  
 .NET Framework 提供廣泛的格式化支援，這會在下列格式化主題中的更詳細地說明。  
  
-   如需有關這類方法支援複合格式功能<xref:System.String.Format%2A>， <xref:System.Text.StringBuilder.AppendFormat%2A>，和一些多載<xref:System.Console.WriteLine%2A>，請參閱[複合格式化](~/docs/standard/base-types/composite-formatting.md)。  
  
-   如需有關數值格式規範的詳細資訊，請參閱[標準數值格式字串](~/docs/standard/base-types/standard-numeric-format-strings.md)並[自訂數值格式字串](~/docs/standard/base-types/custom-numeric-format-strings.md)。  
  
-   如需有關日期和時間格式規範的詳細資訊，請參閱[標準日期和時間格式字串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)並[自訂日期和時間格式字串](~/docs/standard/base-types/custom-date-and-time-format-strings.md)。  
  
-   如需列舉格式規範的詳細資訊，請參閱[列舉格式字串](~/docs/standard/base-types/enumeration-format-strings.md)。  
  
-   如需有關格式的詳細資訊，請參閱[格式化型別](~/docs/standard/base-types/formatting-types.md)。  
  
   
  
## Examples  
 下列範例會使用 `WriteLine` 方法，示範數字、日期和列舉型別的標準格式化規範。  
  
 [!code-cpp[console.writelineFmt1#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.writelineFmt1/cpp/wl.cpp#1)] 
 [!code-csharp[console.writelineFmt1#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.writelineFmt1/cs/wl.cs#1)] 
 [!code-vb[console.writelineFmt1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.writelineFmt1/vb/wl.vb#1)]  
  
 在下列程式碼中，說明了如何使用 <xref:System.Console.Write%2A> 方法。  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> 中的格式規格無效。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全的最上層視窗和子視窗。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">在 .NET 中將類型格式化</related>
        <related type="Article" href="~/docs/standard/base-types/composite-formatting.md">複合格式</related>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (string format, params object[] arg);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(string format, object[] arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (format As String, ParamArray arg As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ arg);" />
      <MemberSignature Language="F#" Value="static member Write : string * obj[] -&gt; unit" Usage="System.Console.Write (format, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">複合格式字串。</param>
        <param name="arg">要使用 <paramref name="format" /> 寫入的物件陣列。</param>
        <summary>使用指定的格式資訊，將指定之物件陣列的文字表示寫入標準輸出資料流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會使用[複合格式功能](~/docs/standard/base-types/composite-formatting.md)物件的值轉換成其文字表示，並將該表示內嵌在字串中的.NET framework。 產生的字串寫入至輸出資料流。  
  
 `format`參數是由零個或多個文字執行混合零或多個索引的預留位置，稱為格式項目，對應至這個方法的參數清單中的物件。 格式化的程序會將每個格式項目取代對應的物件值的文字表示。  
  
 格式項目的語法`{` *index*[`,`*對齊*] [`:`*formatString*]`}`，指定必要的索引、 選用的長度和格式化的文字的對齊方式和控管如何格式化的對應物件值的格式規範字元的選擇性字串。  
  
 .NET Framework 提供廣泛的格式化支援，這會在下列格式化主題中的更詳細地說明。  
  
-   如需有關這類方法支援複合格式功能<xref:System.String.Format%2A>， <xref:System.Text.StringBuilder.AppendFormat%2A>，和一些多載<xref:System.Console.WriteLine%2A>，請參閱[複合格式化](~/docs/standard/base-types/composite-formatting.md)。  
  
-   如需有關數值格式規範的詳細資訊，請參閱[標準數值格式字串](~/docs/standard/base-types/standard-numeric-format-strings.md)並[自訂數值格式字串](~/docs/standard/base-types/custom-numeric-format-strings.md)。  
  
-   如需有關日期和時間格式規範的詳細資訊，請參閱[標準日期和時間格式字串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)並[自訂日期和時間格式字串](~/docs/standard/base-types/custom-date-and-time-format-strings.md)。  
  
-   如需列舉格式規範的詳細資訊，請參閱[列舉格式字串](~/docs/standard/base-types/enumeration-format-strings.md)。  
  
-   如需有關格式的詳細資訊，請參閱[格式化型別](~/docs/standard/base-types/formatting-types.md)。  
  
 `arg`參數是參數陣列。 引數可以傳遞給方法，為陣列或五個或多個項目清單。 範例將說明兩種形式的方法呼叫。  
  
   
  
## Examples  
 下列範例會定義`Person`類別提供個人資訊的屬性數目。 其`GetDescription`方法會傳回陣列，其中包含所有屬性值，但有一個例外。 然後此範例會使用所傳回的陣列`GetDescription`方法來顯示 Person 物件的值。  
  
 [!code-csharp[System.Console.Write#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.write/cs/WriteParams1.cs#1)]
 [!code-vb[System.Console.Write#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.write/vb/WriteParams1.vb#1)]  
  
 請注意，此範例會呼叫<xref:System.Console.Write%28System.String%2CSystem.Object%5B%5D%29>方法而非<xref:System.Console.WriteLine%28System.String%2CSystem.Object%5B%5D%29>方法因為它會嘗試將值顯示`Person.Remarks`同一行上的屬性。 若要這樣做，它會檢查的值<xref:System.Console.CursorLeft%2A>和<xref:System.Console.WindowWidth%2A>屬性，以判斷是否有足夠的空間來容納備註。  如果沒有，它會顯示線條。 如果沒有，它將某行寫入，則縮排在三個空格，並顯示備註。  
  
 下列範例等同於第一天，不同之處在於它會提供五個項目清單做為`arg`引數，而不是參數陣列。  
  
 [!code-csharp[System.Console.Write#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.write/cs/WriteParams2.cs#2)]
 [!code-vb[System.Console.Write#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.write/vb/WriteParams2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> 或 <paramref name="arg" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> 中的格式規格無效。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全的最上層視窗和子視窗。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <block subset="none" type="usage">
          <para>這個方法不會由 c + + 程式碼呼叫。 C + + 編譯器會呼叫[System.Console.Write](xref:System.Console.Write*) ，包括字串和四個或多個物件的參數清單與呼叫<see cref="M:System.Console.Write(System.String,System.Object,System.Object,System.Object,System.Object)" />。 解析呼叫[System.Console.Write](xref:System.Console.Write*) ，加入一個字串和物件陣列做為呼叫<see cref="M:System.Console.Write(System.String,System.Object)" />。</para>
        </block>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">在 .NET 中將類型格式化</related>
        <related type="Article" href="~/docs/standard/base-types/composite-formatting.md">複合格式</related>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (buffer As Char(), index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(cli::array &lt;char&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="static member Write : char[] * int * int -&gt; unit" Usage="System.Console.Write (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Unicode 字元陣列。</param>
        <param name="index">
          <paramref name="buffer" /> 中的開始位置。</param>
        <param name="count">要寫入的字元數。</param>
        <summary>將指定的 Unicode 字元子陣列寫入標準輸出資料流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會寫入`count`字元位置開始`index`的`buffer`標準輸出資料流。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> 或 <paramref name="count" /> 小於零。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="index" /> 加上 <paramref name="count" /> 指定的位置不在 <paramref name="buffer" /> 內。</exception>
        <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全的最上層視窗和子視窗。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (string format, object arg0, object arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(string format, object arg0, object arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.String,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (format As String, arg0 As Object, arg1 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::String ^ format, System::Object ^ arg0, System::Object ^ arg1);" />
      <MemberSignature Language="F#" Value="static member Write : string * obj * obj -&gt; unit" Usage="System.Console.Write (format, arg0, arg1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">複合格式字串。</param>
        <param name="arg0">第一個物件，使用 <paramref name="format" /> 寫入。</param>
        <param name="arg1">第二個物件，使用 <paramref name="format" /> 寫入。</param>
        <summary>使用指定的格式資訊，將指定之物件的文字表示寫入標準輸出資料流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會使用[複合格式功能](~/docs/standard/base-types/composite-formatting.md)物件的值轉換成其文字表示，並將該表示內嵌在字串中的.NET framework。 產生的字串寫入至輸出資料流。  
  
 `format`參數是由零個或多個文字執行混合零或多個索引的預留位置，稱為格式項目，對應至這個方法的參數清單中的物件。 格式化的程序會將每個格式項目取代對應的物件值的文字表示。  
  
 格式項目的語法`{` *index*[`,`*對齊*] [`:`*formatString*]`}`，指定必要的索引、 選用的長度和格式化的文字的對齊方式和控管如何格式化的對應物件值的格式規範字元的選擇性字串。  
  
 .NET Framework 提供廣泛的格式化支援，這會在下列格式化主題中的更詳細地說明。  
  
-   如需有關這類方法支援複合格式功能<xref:System.String.Format%2A>， <xref:System.Text.StringBuilder.AppendFormat%2A>，和一些多載<xref:System.Console.WriteLine%2A>，請參閱[複合格式化](~/docs/standard/base-types/composite-formatting.md)。  
  
-   如需有關數值格式規範的詳細資訊，請參閱[標準數值格式字串](~/docs/standard/base-types/standard-numeric-format-strings.md)並[自訂數值格式字串](~/docs/standard/base-types/custom-numeric-format-strings.md)。  
  
-   如需有關日期和時間格式規範的詳細資訊，請參閱[標準日期和時間格式字串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)並[自訂日期和時間格式字串](~/docs/standard/base-types/custom-date-and-time-format-strings.md)。  
  
-   如需列舉格式規範的詳細資訊，請參閱[列舉格式字串](~/docs/standard/base-types/enumeration-format-strings.md)。  
  
-   如需有關格式的詳細資訊，請參閱[格式化型別](~/docs/standard/base-types/formatting-types.md)。  
  
   
  
## Examples  
 下列範例會使用 `WriteLine` 方法，示範數字、日期和列舉型別的標準格式化規範。  
  
 [!code-cpp[console.writelineFmt1#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.writelineFmt1/cpp/wl.cpp#1)] 
 [!code-csharp[console.writelineFmt1#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.writelineFmt1/cs/wl.cs#1)]
 [!code-vb[console.writelineFmt1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.writelineFmt1/vb/wl.vb#1)]  
  
 在下列程式碼中，說明了如何使用 `Write` 方法。  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> 中的格式規格無效。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全的最上層視窗和子視窗。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">在 .NET 中將類型格式化</related>
        <related type="Article" href="~/docs/standard/base-types/composite-formatting.md">複合格式</related>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (string format, object arg0, object arg1, object arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(string format, object arg0, object arg1, object arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.String,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (format As String, arg0 As Object, arg1 As Object, arg2 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::String ^ format, System::Object ^ arg0, System::Object ^ arg1, System::Object ^ arg2);" />
      <MemberSignature Language="F#" Value="static member Write : string * obj * obj * obj -&gt; unit" Usage="System.Console.Write (format, arg0, arg1, arg2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
        <Parameter Name="arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">複合格式字串。</param>
        <param name="arg0">第一個物件，使用 <paramref name="format" /> 寫入。</param>
        <param name="arg1">第二個物件，使用 <paramref name="format" /> 寫入。</param>
        <param name="arg2">第三個物件，使用 <paramref name="format" /> 寫入。</param>
        <summary>使用指定的格式資訊，將指定之物件的文字表示寫入標準輸出資料流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會使用[複合格式功能](~/docs/standard/base-types/composite-formatting.md)物件的值轉換成其文字表示，並將該表示內嵌在字串中的.NET framework。 產生的字串寫入至輸出資料流。  
  
 `format`參數是由零個或多個文字執行混合零或多個索引的預留位置，稱為格式項目，對應至這個方法的參數清單中的物件。 格式化的程序會將每個格式項目取代對應的物件值的文字表示。  
  
 格式項目的語法`{` *index*[`,`*對齊*] [`:`*formatString*]`}`，指定必要的索引、 選用的長度和格式化的文字的對齊方式和控管如何格式化的對應物件值的格式規範字元的選擇性字串。  
  
 .NET Framework 提供廣泛的格式化支援，這會在下列格式化主題中的更詳細地說明。  
  
-   如需有關這類方法支援複合格式功能<xref:System.String.Format%2A>， <xref:System.Text.StringBuilder.AppendFormat%2A>，和一些多載<xref:System.Console.WriteLine%2A>，請參閱[複合格式化](~/docs/standard/base-types/composite-formatting.md)。  
  
-   如需有關數值格式規範的詳細資訊，請參閱[標準數值格式字串](~/docs/standard/base-types/standard-numeric-format-strings.md)並[自訂數值格式字串](~/docs/standard/base-types/custom-numeric-format-strings.md)。  
  
-   如需有關日期和時間格式規範的詳細資訊，請參閱[標準日期和時間格式字串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)並[自訂日期和時間格式字串](~/docs/standard/base-types/custom-date-and-time-format-strings.md)。  
  
-   如需列舉格式規範的詳細資訊，請參閱[列舉格式字串](~/docs/standard/base-types/enumeration-format-strings.md)。  
  
-   如需有關格式的詳細資訊，請參閱[格式化型別](~/docs/standard/base-types/formatting-types.md)。  
  
   
  
## Examples  
 下列範例會使用 `WriteLine` 方法，示範數字、日期和列舉型別的標準格式化規範。  
  
 [!code-cpp[console.writelineFmt1#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.writelineFmt1/cpp/wl.cpp#1)] 
 [!code-csharp[console.writelineFmt1#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.writelineFmt1/cs/wl.cs#1)]
 [!code-vb[console.writelineFmt1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.writelineFmt1/vb/wl.vb#1)]  
  
 在下列程式碼中，說明了如何使用 `Write` 方法。  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> 中的格式規格無效。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全的最上層視窗和子視窗。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">在 .NET 中將類型格式化</related>
        <related type="Article" href="~/docs/standard/base-types/composite-formatting.md">複合格式</related>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (string format, object arg0, object arg1, object arg2, object arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(string format, object arg0, object arg1, object arg2, object arg3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.String,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (format As String, arg0 As Object, arg1 As Object, arg2 As Object, arg3 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::String ^ format, System::Object ^ arg0, System::Object ^ arg1, System::Object ^ arg2, System::Object ^ arg3);" />
      <MemberSignature Language="F#" Value="static member Write : string * obj * obj * obj * obj -&gt; unit" Usage="System.Console.Write (format, arg0, arg1, arg2, arg3)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
        <Parameter Name="arg2" Type="System.Object" />
        <Parameter Name="arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">複合格式字串。</param>
        <param name="arg0">第一個物件，使用 <paramref name="format" /> 寫入。</param>
        <param name="arg1">第二個物件，使用 <paramref name="format" /> 寫入。</param>
        <param name="arg2">第三個物件，使用 <paramref name="format" /> 寫入。</param>
        <param name="arg3">第四個物件，使用 <paramref name="format" /> 寫入。</param>
        <summary>使用指定的格式資訊，將指定之物件和可變長度參數清單的文字表示寫入標準輸出資料流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  此應用程式開發介面不符合 CLS 標準。 符合 CLS 標準的替代項目為 <xref:System.Console.Write%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>。 C# 和 Visual Basic 編譯器會自動解決呼叫這個方法與呼叫<xref:System.Console.Write%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>。  
  
 這個方法會使用[複合格式功能](~/docs/standard/base-types/composite-formatting.md)物件的值轉換成其文字表示，並將該表示內嵌在字串中的.NET framework。 產生的字串寫入至輸出資料流。  
  
 `format`參數是由零個或多個文字執行混合零或多個索引的預留位置，稱為格式項目，對應至這個方法的參數清單中的物件。 格式化的程序會將每個格式項目取代對應的物件值的文字表示。  
  
 格式項目的語法`{` *index*[`,`*對齊*] [`:`*formatString*]`}`，指定必要的索引、 選用的長度和格式化的文字的對齊方式和控管如何格式化的對應物件值的格式規範字元的選擇性字串。  
  
 .NET Framework 提供廣泛的格式化支援，這會在下列格式化主題中的更詳細地說明。  
  
-   如需有關這類方法支援複合格式功能<xref:System.String.Format%2A>， <xref:System.Text.StringBuilder.AppendFormat%2A>，和一些多載<xref:System.Console.WriteLine%2A>，請參閱[複合格式化](~/docs/standard/base-types/composite-formatting.md)。  
  
-   如需有關數值格式規範的詳細資訊，請參閱[標準數值格式字串](~/docs/standard/base-types/standard-numeric-format-strings.md)並[自訂數值格式字串](~/docs/standard/base-types/custom-numeric-format-strings.md)。  
  
-   如需有關日期和時間格式規範的詳細資訊，請參閱[標準日期和時間格式字串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)並[自訂日期和時間格式字串](~/docs/standard/base-types/custom-date-and-time-format-strings.md)。  
  
-   如需列舉格式規範的詳細資訊，請參閱[列舉格式字串](~/docs/standard/base-types/enumeration-format-strings.md)。  
  
-   如需有關格式的詳細資訊，請參閱[格式化型別](~/docs/standard/base-types/formatting-types.md)。  
  
   
  
## Examples  
 下列範例示範如何將變數參數<xref:System.Console.Write%28System.String%2CSystem.Object%2CSystem.Object%2CSystem.Object%2CSystem.Object%29>方法。 這個方法被呼叫複合格式字串和五個格式項目。  
  
 [!code-cpp[System.Console.Write#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.console.write/cpp/con_write.cpp#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> 中的格式規格無效。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全的最上層視窗和子視窗。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <block subset="none" type="usage">
          <para>這個方法標記著<see langword="vararg" />關鍵字，這表示它支援不同數量的參數。 可以從 Visual c + + 中，呼叫此方法，但不能從 C# 或 Visual Basic 程式碼呼叫它。 C# 和 Visual Basic 編譯器呼叫解析為<see cref="M:System.Console.Write(System.String,System.Object,System.Object,System.Object,System.Object)" />做為呼叫<see cref="M:System.Console.Write(System.String,System.Object[])" />。</para>
        </block>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">在 .NET 中將類型格式化</related>
        <related type="Article" href="~/docs/standard/base-types/composite-formatting.md">複合格式</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteLine">
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將指定的資料 (後面接著目前的行結束字元) 寫入標準輸出資料流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 預設行結束字元是的字串，其值是歸位字元後面接著換行字元 (C# 中的"\r\n"或`vbCrLf`Visual Basic 中)。 您可以藉由設定變更的行結束字元<xref:System.IO.TextWriter.NewLine%2A?displayProperty=nameWithType>屬性<xref:System.Console.Out%2A>到另一個字串的屬性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine();" />
      <MemberSignature Language="F#" Value="static member WriteLine : unit -&gt; unit" Usage="System.Console.WriteLine " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>將目前的行結束字元寫入標準輸出資料流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 預設行結束字元是的字串，其值是歸位字元後面接著換行字元 (C# 中的"\r\n"或`vbCrLf`Visual Basic 中)。 您可以藉由設定變更的行結束字元<xref:System.IO.TextWriter.NewLine%2A?displayProperty=nameWithType>屬性<xref:System.Console.Out%2A>到另一個字串的屬性。 這個範例將提供說明。  
  
   
  
## Examples  
 範例會變更的行結束字元，從預設值 "\r\n"或`vbCrLf`到 「 \r\n\r\n 」 或`vbCrLf`  +  `vbCrLf`。 然後它會呼叫<xref:System.Console.WriteLine>和<xref:System.Console.WriteLine%28System.String%29>方法來對主控台顯示輸出。  
  
 [!code-cpp[System.Console.WriteLine#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console.WriteLine/CPP/newline1.cpp#2)]
 [!code-csharp[System.Console.WriteLine#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/newline1.cs#2)]
 [!code-vb[System.Console.WriteLine#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/newline1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全的最上層視窗和子視窗。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
        <altmember cref="P:System.IO.TextWriter.NewLine" />
        <altmember cref="P:System.Console.Out" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(bool value);" />
      <MemberSignature Language="F#" Value="static member WriteLine : bool -&gt; unit" Usage="System.Console.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">要寫入的值。</param>
        <summary>將指定布林值的文字表示 (後面接著目前的行結束字元) 寫入標準輸出資料流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 文字表示法`value`藉由呼叫產生<xref:System.Boolean.ToString%2A?displayProperty=nameWithType>方法。  
  
 如需行結束字元的詳細資訊，請參閱的 < 備註 > 一節<xref:System.Console.WriteLine%2A>不接受任何參數的方法。  
  
   
  
## Examples  
 下列範例會產生 10 個隨機的整數，並使用<xref:System.Console.WriteLine%28System.Boolean%29?displayProperty=nameWithType>方法，指出它們是否即使。  
  
 [!code-cpp[System.Console.WriteLine#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console.WriteLine/CPP/writeline_boolean1.cpp#4)]
 [!code-csharp[System.Console.WriteLine#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/writeline_boolean1.cs#4)]
 [!code-vb[System.Console.WriteLine#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/writeline_boolean1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全的最上層視窗和子視窗。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(char value);" />
      <MemberSignature Language="F#" Value="static member WriteLine : char -&gt; unit" Usage="System.Console.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">要寫入的值。</param>
        <summary>將指定的 Unicode 字元 (後面接著目前的行結束字元) 寫入標準輸出資料流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如需行結束字元的詳細資訊，請參閱的 < 備註 > 一節<xref:System.Console.WriteLine%2A>不接受任何參數的方法。  
  
   
  
## Examples  
 下列範例是提示計算機來計算 18%提示，並使用<xref:System.Console.WriteLine%2A>方法來顯示原始的電量、 提示、 數量和總金額。 此範例是費用的主控台應用程式需要使用者提供的原始，做為命令列參數的數量。  
  
 [!code-csharp[System.Console.WriteLine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/tipcalc.cs#1)]
 [!code-vb[System.Console.WriteLine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/tipcalc.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全的最上層視窗和子視窗。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (char[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(char[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (buffer As Char())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(cli::array &lt;char&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="static member WriteLine : char[] -&gt; unit" Usage="System.Console.WriteLine buffer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="buffer">Unicode 字元陣列。</param>
        <summary>將指定的 Unicode 字元陣列 (後面接著目前的行結束字元) 寫入標準輸出資料流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如需行結束字元的詳細資訊，請參閱的 < 備註 > 一節<xref:System.Console.WriteLine%2A>不接受任何參數的方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全的最上層視窗和子視窗。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::Decimal value);" />
      <MemberSignature Language="F#" Value="static member WriteLine : decimal -&gt; unit" Usage="System.Console.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">要寫入的值。</param>
        <summary>將指定的 <see cref="T:System.Decimal" /> 值的文字表示 (後面接著目前的行結束字元) 寫入標準輸出資料流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 文字表示法`value`藉由呼叫產生<xref:System.Decimal.ToString%2A?displayProperty=nameWithType>方法。  
  
 如需行結束字元的詳細資訊，請參閱的 < 備註 > 一節<xref:System.Console.WriteLine%2A>不接受任何參數的方法。  
  
   
  
## Examples  
 下列範例是提示計算機來計算 18%提示，並使用<xref:System.Console.WriteLine%2A>方法來顯示原始的電量、 提示、 數量和總金額。 此範例是費用的主控台應用程式需要使用者提供的原始，做為命令列參數的數量。  
  
 [!code-csharp[System.Console.WriteLine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/tipcalc.cs#1)]
 [!code-vb[System.Console.WriteLine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/tipcalc.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全的最上層視窗和子視窗。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(double value);" />
      <MemberSignature Language="F#" Value="static member WriteLine : double -&gt; unit" Usage="System.Console.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">要寫入的值。</param>
        <summary>將指定的雙精確度浮點數值的文字表示 (後面接著目前的行結束字元) 寫入標準輸出資料流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 文字表示法`value`藉由呼叫產生<xref:System.Double.ToString%2A?displayProperty=nameWithType>方法。  
  
 如需行結束字元的詳細資訊，請參閱的 < 備註 > 一節<xref:System.Console.WriteLine%2A>不接受任何參數的方法。  
  
   
  
## Examples  
 下列範例是提示計算機來計算 18%提示，並使用<xref:System.Console.WriteLine%2A>方法來顯示原始的電量、 提示、 數量和總金額。 此範例是費用的主控台應用程式需要使用者提供的原始，做為命令列參數的數量。  
  
 [!code-csharp[System.Console.WriteLine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/tipcalc.cs#1)]
 [!code-vb[System.Console.WriteLine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/tipcalc.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全的最上層視窗和子視窗。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(int value);" />
      <MemberSignature Language="F#" Value="static member WriteLine : int -&gt; unit" Usage="System.Console.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">要寫入的值。</param>
        <summary>將指定的 32 位元帶正負號整數值的文字表示 (後面接著目前的行結束字元) 寫入標準輸出資料流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 文字表示法`value`藉由呼叫產生<xref:System.Int32.ToString%2A?displayProperty=nameWithType>方法。  
  
 如需行結束字元的詳細資訊，請參閱的 < 備註 > 一節<xref:System.Console.WriteLine%2A>不接受任何參數的方法。  
  
   
  
## Examples  
 下列範例是提示計算機來計算 18%提示，並使用<xref:System.Console.WriteLine%2A>方法來顯示原始的電量、 提示、 數量和總金額。 此範例是費用的主控台應用程式需要使用者提供的原始，做為命令列參數的數量。  
  
 [!code-csharp[System.Console.WriteLine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/tipcalc.cs#1)]
 [!code-vb[System.Console.WriteLine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/tipcalc.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全的最上層視窗和子視窗。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(long value);" />
      <MemberSignature Language="F#" Value="static member WriteLine : int64 -&gt; unit" Usage="System.Console.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">要寫入的值。</param>
        <summary>將指定的 64 位元帶正負號整數值的文字表示 (後面接著目前的行結束字元) 寫入標準輸出資料流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 文字表示法`value`藉由呼叫產生<xref:System.Int64.ToString%2A?displayProperty=nameWithType>方法。  
  
 如需行結束字元的詳細資訊，請參閱的 < 備註 > 一節<xref:System.Console.WriteLine%2A>不接受任何參數的方法。  
  
   
  
## Examples  
 下列範例是提示計算機來計算 18%提示，並使用<xref:System.Console.WriteLine%2A>方法來顯示原始的電量、 提示、 數量和總金額。 此範例是費用的主控台應用程式需要使用者提供的原始，做為命令列參數的數量。  
  
 [!code-csharp[System.Console.WriteLine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/tipcalc.cs#1)]
 [!code-vb[System.Console.WriteLine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/tipcalc.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全的最上層視窗和子視窗。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member WriteLine : obj -&gt; unit" Usage="System.Console.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">要寫入的值。</param>
        <summary>將指定物件的文字表示 (後面接著目前的行結束字元) 寫入標準輸出資料流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 `value` 為 `null`，只寫入行結束字元。 否則`ToString`方法`value`呼叫來產生它的字串表示，而產生的字串會寫入標準輸出資料流。  
  
 如需行結束字元的詳細資訊，請參閱的 < 備註 > 一節<xref:System.Console.WriteLine%2A>不接受任何參數的方法。  
  
   
  
## Examples  
 下列範例會使用<xref:System.Console.WriteLine%28System.Object%29>方法，以顯示到主控台的物件陣列的每個值。  
  
 [!code-cpp[System.Console.WriteLine#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console.WriteLine/CPP/writeline_obj1.cpp#3)]
 [!code-csharp[System.Console.WriteLine#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/writeline_obj1.cs#3)]
 [!code-vb[System.Console.WriteLine#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/writeline_obj1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全的最上層視窗和子視窗。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(float value);" />
      <MemberSignature Language="F#" Value="static member WriteLine : single -&gt; unit" Usage="System.Console.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">要寫入的值。</param>
        <summary>將指定的單精確度浮點數值的文字表示 (後面接著目前的行結束字元) 寫入標準輸出資料流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 文字表示法`value`藉由呼叫產生<xref:System.Single.ToString%2A?displayProperty=nameWithType>方法。  
  
 如需行結束字元的詳細資訊，請參閱的 < 備註 > 一節<xref:System.Console.WriteLine%2A>不接受任何參數的方法。  
  
   
  
## Examples  
 下列範例是提示計算機來計算 18%提示，並使用<xref:System.Console.WriteLine%2A>方法來顯示原始的電量、 提示、 數量和總金額。 此範例是費用的主控台應用程式需要使用者提供的原始，做為命令列參數的數量。  
  
 [!code-csharp[System.Console.WriteLine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/tipcalc.cs#1)]
 [!code-vb[System.Console.WriteLine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/tipcalc.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全的最上層視窗和子視窗。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::String ^ value);" />
      <MemberSignature Language="F#" Value="static member WriteLine : string -&gt; unit" Usage="System.Console.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">要寫入的值。</param>
        <summary>將指定的字串值 (後面接著目前的行結束字元) 寫入標準輸出資料流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果值為`null`，只有行結束字元寫入標準輸出資料流。  
  
 如需行結束字元的詳細資訊，請參閱的 < 備註 > 一節<xref:System.Console.WriteLine>方法。  
  
   
  
## Examples  
 範例會變更的行結束字元，從預設值 "\r\n"或`vbCrLf`到 「 \r\n\r\n 」 或`vbCrLf`  +  `vbCrLf`。 然後它會呼叫<xref:System.Console.WriteLine>和<xref:System.Console.WriteLine%28System.String%29>方法來對主控台顯示輸出。  
  
 [!code-cpp[System.Console.WriteLine#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console.WriteLine/CPP/newline1.cpp#2)]
 [!code-csharp[System.Console.WriteLine#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/newline1.cs#2)]
 [!code-vb[System.Console.WriteLine#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/newline1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全的最上層視窗和子視窗。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="static member WriteLine : uint32 -&gt; unit" Usage="System.Console.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">要寫入的值。</param>
        <summary>將指定的 32 位元不帶正負號整數值的文字表示 (後面接著目前的行結束字元) 寫入標準輸出資料流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 文字表示法`value`藉由呼叫產生<xref:System.UInt32.ToString%2A?displayProperty=nameWithType>方法。  
  
 如需行結束字元的詳細資訊，請參閱的 < 備註 > 一節<xref:System.Console.WriteLine%2A>不接受任何參數的方法。  
  
   
  
## Examples  
 下列範例是提示計算機來計算 18%提示，並使用<xref:System.Console.WriteLine%2A>方法來顯示原始的電量、 提示、 數量和總金額。 此範例是費用的主控台應用程式需要使用者提供的原始，做為命令列參數的數量。  
  
 [!code-csharp[System.Console.WriteLine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/tipcalc.cs#1)]
 [!code-vb[System.Console.WriteLine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/tipcalc.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全的最上層視窗和子視窗。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::UInt64 value);" />
      <MemberSignature Language="F#" Value="static member WriteLine : uint64 -&gt; unit" Usage="System.Console.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">要寫入的值。</param>
        <summary>將指定的 64 位元不帶正負號整數值的文字表示 (後面接著目前的行結束字元) 寫入標準輸出資料流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 文字表示法`value`藉由呼叫產生<xref:System.UInt64.ToString%2A?displayProperty=nameWithType>方法。  
  
 如需行結束字元的詳細資訊，請參閱的 < 備註 > 一節<xref:System.Console.WriteLine%2A>不接受任何參數的方法。  
  
   
  
## Examples  
 下列範例是提示計算機來計算 18%提示，並使用<xref:System.Console.WriteLine%2A>方法來顯示原始的電量、 提示、 數量和總金額。 此範例是費用的主控台應用程式需要使用者提供的原始，做為命令列參數的數量。  
  
 [!code-csharp[System.Console.WriteLine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/tipcalc.cs#1)]
 [!code-vb[System.Console.WriteLine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/tipcalc.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全的最上層視窗和子視窗。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (string format, object arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string format, object arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (format As String, arg0 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::String ^ format, System::Object ^ arg0);" />
      <MemberSignature Language="F#" Value="static member WriteLine : string * obj -&gt; unit" Usage="System.Console.WriteLine (format, arg0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">複合格式字串。</param>
        <param name="arg0">要使用 <paramref name="format" /> 寫入的物件。</param>
        <summary>使用指定的格式資訊，將指定之物件的文字表示 (後面接著目前的行結束字元) 寫入標準輸出資料流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會使用[複合格式功能](~/docs/standard/base-types/composite-formatting.md)物件的值轉換成其文字表示，並將該表示內嵌在字串中的.NET framework。 產生的字串寫入至輸出資料流。  
  
 `format`參數是由零個或多個文字執行混合零或多個索引的預留位置，稱為格式項目，對應至這個方法的參數清單中的物件。 格式化的程序會將每個格式項目取代對應的物件值的文字表示。  
  
 格式項目的語法`{` *index*[`,`*對齊*] [`:`*formatString*]`}`，指定必要的索引、 選用的長度和格式化的文字的對齊方式和控管如何格式化的對應物件值的格式規範字元的選擇性字串。  
  
 .NET Framework 提供廣泛的格式化支援，這會在下列格式化主題中的更詳細地說明。  
  
-   如需有關這類方法支援複合格式功能<xref:System.String.Format%2A>， <xref:System.Text.StringBuilder.AppendFormat%2A>，和一些多載<xref:System.Console.WriteLine%2A>，請參閱[複合格式化](~/docs/standard/base-types/composite-formatting.md)。  
  
-   如需有關數值格式規範的詳細資訊，請參閱[標準數值格式字串](~/docs/standard/base-types/standard-numeric-format-strings.md)並[自訂數值格式字串](~/docs/standard/base-types/custom-numeric-format-strings.md)。  
  
-   如需有關日期和時間格式規範的詳細資訊，請參閱[標準日期和時間格式字串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)並[自訂日期和時間格式字串](~/docs/standard/base-types/custom-date-and-time-format-strings.md)。  
  
-   如需列舉格式規範的詳細資訊，請參閱[列舉格式字串](~/docs/standard/base-types/enumeration-format-strings.md)。  
  
-   如需有關格式的詳細資訊，請參閱[格式化型別](~/docs/standard/base-types/formatting-types.md)。  
  
 如需行結束字元的詳細資訊，請參閱的 < 備註 > 一節<xref:System.Console.WriteLine%2A>不接受任何參數的方法。  
  
   
  
## Examples  
 下列範例會呼叫<xref:System.Console.WriteLine%28System.String%2CSystem.Object%29>方法，以顯示五個隨機產生<xref:System.Boolean>值。  
  
 [!code-csharp[System.Console.WriteLine#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/WriteLine6.cs#6)]
 [!code-vb[System.Console.WriteLine#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/WriteLine6.vb#6)]  
  
 下列範例會呼叫<xref:System.Console.WriteLine%28System.String%2CSystem.Object%29>方法，以顯示目前的日期。   請注意，格式項目`format`引數會使用"D"[標準日期和時間格式字串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)中目前的文化特性的長日期格式顯示日期。  
  
 [!code-csharp[System.Console.WriteLine#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/WriteLine7.cs#7)]
 [!code-vb[System.Console.WriteLine#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/WriteLine7.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> 中的格式規格無效。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全的最上層視窗和子視窗。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">在 .NET 中將類型格式化</related>
        <related type="Article" href="~/docs/standard/base-types/composite-formatting.md">複合格式</related>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (string format, params object[] arg);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string format, object[] arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (format As String, ParamArray arg As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ arg);" />
      <MemberSignature Language="F#" Value="static member WriteLine : string * obj[] -&gt; unit" Usage="System.Console.WriteLine (format, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">複合格式字串。</param>
        <param name="arg">要使用 <paramref name="format" /> 寫入的物件陣列。</param>
        <summary>使用指定的格式資訊，將指定之物件陣列的文字表示 (後面接著目前的行結束字元) 寫入標準輸出資料流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會使用[複合格式功能](~/docs/standard/base-types/composite-formatting.md)物件的值轉換成其文字表示，並將該表示內嵌在字串中的.NET framework。 產生的字串寫入至輸出資料流。  
  
 `format`參數是由零個或多個文字執行混合零或多個索引的預留位置，稱為格式項目，對應至這個方法的參數清單中的物件。 格式化的程序會將每個格式項目取代對應的物件值的文字表示。  
  
 格式項目的語法`{` *index*[`,`*對齊*] [`:`*formatString*]`}`，指定必要的索引、 選用的長度和格式化的文字的對齊方式和控管如何格式化的對應物件值的格式規範字元的選擇性字串。  
  
 .NET Framework 提供廣泛的格式化支援，這會在下列格式化主題中的更詳細地說明。  
  
-   如需有關這類方法支援複合格式功能<xref:System.String.Format%2A>， <xref:System.Text.StringBuilder.AppendFormat%2A>，和一些多載<xref:System.Console.WriteLine%2A>，請參閱[複合格式化](~/docs/standard/base-types/composite-formatting.md)。  
  
-   如需有關數值格式規範的詳細資訊，請參閱[標準數值格式字串](~/docs/standard/base-types/standard-numeric-format-strings.md)並[自訂數值格式字串](~/docs/standard/base-types/custom-numeric-format-strings.md)。  
  
-   如需有關日期和時間格式規範的詳細資訊，請參閱[標準日期和時間格式字串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)並[自訂日期和時間格式字串](~/docs/standard/base-types/custom-date-and-time-format-strings.md)。  
  
-   如需列舉格式規範的詳細資訊，請參閱[列舉格式字串](~/docs/standard/base-types/enumeration-format-strings.md)。  
  
-   如需有關格式的詳細資訊，請參閱[格式化型別](~/docs/standard/base-types/formatting-types.md)。  
  
 如需行結束字元的詳細資訊，請參閱的 < 備註 > 一節<xref:System.Console.WriteLine%2A>不接受任何參數的方法。  
  
   
  
## Examples  
 下列範例會示範數字、日期和列舉型別的標準格式化規範。  
  
 [!code-cpp[console.writelineFmt1#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.writelineFmt1/cpp/wl.cpp#1)] 
 [!code-csharp[console.writelineFmt1#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.writelineFmt1/cs/wl.cs#1)]
 [!code-vb[console.writelineFmt1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.writelineFmt1/vb/wl.vb#1)]  
  
 下列範例是提示計算機來計算 18%提示，並使用<xref:System.Console.WriteLine%2A>方法來顯示原始的電量、 提示、 數量和總金額。 此範例是費用的主控台應用程式需要使用者提供的原始，做為命令列參數的數量。  
  
 [!code-csharp[System.Console.WriteLine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/tipcalc.cs#1)]
 [!code-vb[System.Console.WriteLine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/tipcalc.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> 或 <paramref name="arg" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> 中的格式規格無效。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全的最上層視窗和子視窗。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <block subset="none" type="usage">
          <para>這個方法不會由 c + + 程式碼呼叫。 C + + 編譯器會呼叫[System.Console.WriteLine](xref:System.Console.WriteLine*) ，包括字串和四個或多個物件的參數清單與呼叫<see cref="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)" />。 解析呼叫[System.Console.WriteLine](xref:System.Console.WriteLine*) ，加入一個字串和物件陣列做為呼叫<see cref="M:System.Console.WriteLine(System.String,System.Object)" />。</para>
        </block>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">在 .NET 中將類型格式化</related>
        <related type="Article" href="~/docs/standard/base-types/composite-formatting.md">複合格式</related>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (buffer As Char(), index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(cli::array &lt;char&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="static member WriteLine : char[] * int * int -&gt; unit" Usage="System.Console.WriteLine (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Unicode 字元陣列。</param>
        <param name="index">
          <paramref name="buffer" /> 中的開始位置。</param>
        <param name="count">要寫入的字元數。</param>
        <summary>將指定的 Unicode 字元子陣列 (後面接著目前的行結束字元) 寫入標準輸出資料流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會寫入`count`字元位置開始`index`的`buffer`標準輸出資料流。  
  
 如需行結束字元的詳細資訊，請參閱的 < 備註 > 一節<xref:System.Console.WriteLine%2A>不接受任何參數的方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> 或 <paramref name="count" /> 小於零。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="index" /> 加上 <paramref name="count" /> 指定的位置不在 <paramref name="buffer" /> 內。</exception>
        <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全的最上層視窗和子視窗。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (string format, object arg0, object arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string format, object arg0, object arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.String,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (format As String, arg0 As Object, arg1 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::String ^ format, System::Object ^ arg0, System::Object ^ arg1);" />
      <MemberSignature Language="F#" Value="static member WriteLine : string * obj * obj -&gt; unit" Usage="System.Console.WriteLine (format, arg0, arg1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">複合格式字串。</param>
        <param name="arg0">第一個物件，使用 <paramref name="format" /> 寫入。</param>
        <param name="arg1">第二個物件，使用 <paramref name="format" /> 寫入。</param>
        <summary>使用指定的格式資訊，將指定之物件的文字表示 (後面接著目前的行結束字元) 寫入標準輸出資料流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會使用[複合格式功能](~/docs/standard/base-types/composite-formatting.md)物件的值轉換成其文字表示，並將該表示內嵌在字串中的.NET framework。 產生的字串寫入至輸出資料流。  
  
 `format`參數是由零個或多個文字執行混合零或多個索引的預留位置，稱為格式項目，對應至這個方法的參數清單中的物件。 格式化的程序會將每個格式項目取代對應的物件值的文字表示。  
  
 格式項目的語法`{` *index*[`,`*對齊*] [`:`*formatString*]`}`，指定必要的索引、 選用的長度和格式化的文字的對齊方式和控管如何格式化的對應物件值的格式規範字元的選擇性字串。  
  
 .NET Framework 提供廣泛的格式化支援，這會在下列格式化主題中的更詳細地說明。  
  
-   如需有關這類方法支援複合格式功能<xref:System.String.Format%2A>， <xref:System.Text.StringBuilder.AppendFormat%2A>，和一些多載<xref:System.Console.WriteLine%2A>，請參閱[複合格式化](~/docs/standard/base-types/composite-formatting.md)。  
  
-   如需有關數值格式規範的詳細資訊，請參閱[標準數值格式字串](~/docs/standard/base-types/standard-numeric-format-strings.md)並[自訂數值格式字串](~/docs/standard/base-types/custom-numeric-format-strings.md)。  
  
-   如需有關日期和時間格式規範的詳細資訊，請參閱[標準日期和時間格式字串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)並[自訂日期和時間格式字串](~/docs/standard/base-types/custom-date-and-time-format-strings.md)。  
  
-   如需列舉格式規範的詳細資訊，請參閱[列舉格式字串](~/docs/standard/base-types/enumeration-format-strings.md)。  
  
-   如需有關格式的詳細資訊，請參閱[格式化型別](~/docs/standard/base-types/formatting-types.md)。  
  
 如需行結束字元的詳細資訊，請參閱的 < 備註 > 一節<xref:System.Console.WriteLine%2A>不接受任何參數的方法。  
  
   
  
## Examples  
 下列範例會示範數字、日期和列舉型別的標準格式化規範。  
  
 [!code-cpp[console.writelineFmt1#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.writelineFmt1/cpp/wl.cpp#1)] 
 [!code-csharp[console.writelineFmt1#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.writelineFmt1/cs/wl.cs#1)]
 [!code-vb[console.writelineFmt1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.writelineFmt1/vb/wl.vb#1)]  
  
 下列範例是提示計算機來計算 18%提示，並使用<xref:System.Console.WriteLine%2A>方法來顯示原始的電量、 提示、 數量和總金額。 此範例是費用的主控台應用程式需要使用者提供的原始，做為命令列參數的數量。  
  
 [!code-csharp[System.Console.WriteLine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/tipcalc.cs#1)]
 [!code-vb[System.Console.WriteLine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/tipcalc.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> 中的格式規格無效。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全的最上層視窗和子視窗。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">在 .NET 中將類型格式化</related>
        <related type="Article" href="~/docs/standard/base-types/composite-formatting.md">複合格式</related>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (string format, object arg0, object arg1, object arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string format, object arg0, object arg1, object arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (format As String, arg0 As Object, arg1 As Object, arg2 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::String ^ format, System::Object ^ arg0, System::Object ^ arg1, System::Object ^ arg2);" />
      <MemberSignature Language="F#" Value="static member WriteLine : string * obj * obj * obj -&gt; unit" Usage="System.Console.WriteLine (format, arg0, arg1, arg2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
        <Parameter Name="arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">複合格式字串。</param>
        <param name="arg0">第一個物件，使用 <paramref name="format" /> 寫入。</param>
        <param name="arg1">第二個物件，使用 <paramref name="format" /> 寫入。</param>
        <param name="arg2">第三個物件，使用 <paramref name="format" /> 寫入。</param>
        <summary>使用指定的格式資訊，將指定之物件的文字表示 (後面接著目前的行結束字元) 寫入標準輸出資料流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會使用[複合格式功能](~/docs/standard/base-types/composite-formatting.md)物件的值轉換成其文字表示，並將該表示內嵌在字串中的.NET framework。 產生的字串寫入至輸出資料流。  
  
 `format`參數是由零個或多個文字執行混合零或多個索引的預留位置，稱為格式項目，對應至這個方法的參數清單中的物件。 格式化的程序會將每個格式項目取代對應的物件值的文字表示。  
  
 格式項目的語法`{` *index*[`,`*對齊*] [`:`*formatString*]`}`，指定必要的索引、 選用的長度和格式化的文字的對齊方式和控管如何格式化的對應物件值的格式規範字元的選擇性字串。  
  
 .NET Framework 提供廣泛的格式化支援，這會在下列格式化主題中的更詳細地說明。  
  
-   如需有關這類方法支援複合格式功能<xref:System.String.Format%2A>， <xref:System.Text.StringBuilder.AppendFormat%2A>，和一些多載<xref:System.Console.WriteLine%2A>，請參閱[複合格式化](~/docs/standard/base-types/composite-formatting.md)。  
  
-   如需有關數值格式規範的詳細資訊，請參閱[標準數值格式字串](~/docs/standard/base-types/standard-numeric-format-strings.md)並[自訂數值格式字串](~/docs/standard/base-types/custom-numeric-format-strings.md)。  
  
-   如需有關日期和時間格式規範的詳細資訊，請參閱[標準日期和時間格式字串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)並[自訂日期和時間格式字串](~/docs/standard/base-types/custom-date-and-time-format-strings.md)。  
  
-   如需列舉格式規範的詳細資訊，請參閱[列舉格式字串](~/docs/standard/base-types/enumeration-format-strings.md)。  
  
-   如需有關格式的詳細資訊，請參閱[格式化型別](~/docs/standard/base-types/formatting-types.md)。  
  
 如需行結束字元的詳細資訊，請參閱的 < 備註 > 一節<xref:System.Console.WriteLine%2A>不接受任何參數的方法。  
  
   
  
## Examples  
 下列範例會示範數字、日期和列舉型別的標準格式化規範。  
  
 [!code-cpp[console.writelineFmt1#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.writelineFmt1/cpp/wl.cpp#1)] 
 [!code-csharp[console.writelineFmt1#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.writelineFmt1/cs/wl.cs#1)]
 [!code-vb[console.writelineFmt1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.writelineFmt1/vb/wl.vb#1)]  
  
 下列範例是提示計算機來計算 18%提示，並使用<xref:System.Console.WriteLine%2A>方法來顯示原始的電量、 提示、 數量和總金額。 此範例是費用的主控台應用程式需要使用者提供的原始，做為命令列參數的數量。  
  
 [!code-csharp[System.Console.WriteLine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/tipcalc.cs#1)]
 [!code-vb[System.Console.WriteLine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/tipcalc.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> 中的格式規格無效。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全的最上層視窗和子視窗。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">在 .NET 中將類型格式化</related>
        <related type="Article" href="~/docs/standard/base-types/composite-formatting.md">複合格式</related>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (string format, object arg0, object arg1, object arg2, object arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string format, object arg0, object arg1, object arg2, object arg3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (format As String, arg0 As Object, arg1 As Object, arg2 As Object, arg3 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::String ^ format, System::Object ^ arg0, System::Object ^ arg1, System::Object ^ arg2, System::Object ^ arg3);" />
      <MemberSignature Language="F#" Value="static member WriteLine : string * obj * obj * obj * obj -&gt; unit" Usage="System.Console.WriteLine (format, arg0, arg1, arg2, arg3)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
        <Parameter Name="arg2" Type="System.Object" />
        <Parameter Name="arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">複合格式字串。</param>
        <param name="arg0">第一個物件，使用 <paramref name="format" /> 寫入。</param>
        <param name="arg1">第二個物件，使用 <paramref name="format" /> 寫入。</param>
        <param name="arg2">第三個物件，使用 <paramref name="format" /> 寫入。</param>
        <param name="arg3">第四個物件，使用 <paramref name="format" /> 寫入。</param>
        <summary>使用指定的格式資訊，將指定之物件和可變長度參數清單的文字表示 (後面接著目前的行結束字元) 寫入標準輸出資料流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  此應用程式開發介面不符合 CLS 標準。 符合 CLS 標準的替代項目為 <xref:System.Console.WriteLine%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>。 C# 和 Visual Basic 編譯器會自動解決呼叫這個方法與呼叫<xref:System.Console.WriteLine%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>。  
  
 這個方法會使用[複合格式功能](~/docs/standard/base-types/composite-formatting.md)物件的值轉換成其文字表示，並將該表示內嵌在字串中的.NET framework。 產生的字串寫入至輸出資料流。  
  
 `format`參數是由零個或多個文字執行混合零或多個索引的預留位置，稱為格式項目，對應至這個方法的參數清單中的物件。 格式化的程序會將每個格式項目取代對應的物件值的文字表示。  
  
 格式項目的語法`{` *index*[`,`*對齊*] [`:`*formatString*]`}`，指定必要的索引、 選用的長度和格式化的文字的對齊方式和控管如何格式化的對應物件值的格式規範字元的選擇性字串。  
  
 .NET Framework 提供廣泛的格式化支援，這會在下列格式化主題中的更詳細地說明。  
  
-   如需有關這類方法支援複合格式功能<xref:System.String.Format%2A>， <xref:System.Text.StringBuilder.AppendFormat%2A>，和一些多載<xref:System.Console.WriteLine%2A>，請參閱[複合格式化](~/docs/standard/base-types/composite-formatting.md)。  
  
-   如需有關數值格式規範的詳細資訊，請參閱[標準數值格式字串](~/docs/standard/base-types/standard-numeric-format-strings.md)並[自訂數值格式字串](~/docs/standard/base-types/custom-numeric-format-strings.md)。  
  
-   如需有關日期和時間格式規範的詳細資訊，請參閱[標準日期和時間格式字串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)並[自訂日期和時間格式字串](~/docs/standard/base-types/custom-date-and-time-format-strings.md)。  
  
-   如需列舉格式規範的詳細資訊，請參閱[列舉格式字串](~/docs/standard/base-types/enumeration-format-strings.md)。  
  
-   如需有關格式的詳細資訊，請參閱[格式化型別](~/docs/standard/base-types/formatting-types.md)。  
  
 如需行結束字元的詳細資訊，請參閱的 < 備註 > 一節<xref:System.Console.WriteLine%2A>不接受任何參數的方法。  
  
   
  
## Examples  
 下列範例說明如何使用變數引數<xref:System.Console.WriteLine%28System.String%2CSystem.Object%2CSystem.Object%2CSystem.Object%2CSystem.Object%29>方法。 這個方法被呼叫複合格式字串和五個格式項目。  
  
 [!code-cpp[System.Console.WriteLine#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console.WriteLine/CPP/writeline_vararg.cpp#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> 中的格式規格無效。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全的最上層視窗和子視窗。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <block subset="none" type="usage">
          <para>這個方法標記著<see langword="vararg" />關鍵字，這表示它支援不同數量的參數。 可以從 Visual c + + 中，呼叫此方法，但不能從 C# 或 Visual Basic 程式碼呼叫它。 C# 和 Visual Basic 編譯器呼叫解析為<see cref="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)" />做為呼叫<see cref="M:System.Console.WriteLine(System.String,System.Object[])" />。</para>
        </block>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">在 .NET 中將類型格式化</related>
        <related type="Article" href="~/docs/standard/base-types/composite-formatting.md">複合格式</related>
      </Docs>
    </Member>
  </Members>
</Type>