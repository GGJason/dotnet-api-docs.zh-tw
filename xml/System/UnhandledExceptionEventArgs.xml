<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="UnhandledExceptionEventArgs.xml" source-language="en-US" target-language="zh-TW">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac52bc5b27ab8c70f87bc485bcd049f405e98420956.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2bc5b27ab8c70f87bc485bcd049f405e98420956</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.UnhandledExceptionEventArgs">
          <source>Provides data for the event that is raised when there is an exception that is not handled in any application domain.</source>
          <target state="translated">提供在任何應用程式定義域中有未處理的例外狀況時所引發之事件的資料。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.UnhandledExceptionEventArgs">
          <source><ph id="ph1">&lt;xref:System.UnhandledExceptionEventArgs&gt;</ph> provides access to the exception object and a flag indicating whether the common language runtime is terminating.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.UnhandledExceptionEventArgs&gt;</ph> 提供存取例外狀況物件和旗標，指出 common language runtime 是否已終止。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.UnhandledExceptionEventArgs">
          <source>The <ph id="ph1">&lt;xref:System.UnhandledExceptionEventArgs&gt;</ph> is one of the parameters passed into <ph id="ph2">&lt;xref:System.UnhandledExceptionEventHandler&gt;</ph> for the <ph id="ph3">&lt;xref:System.AppDomain.UnhandledException?displayProperty=nameWithType&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.UnhandledExceptionEventArgs&gt;</ph>是其中一個參數傳遞至<ph id="ph2">&lt;xref:System.UnhandledExceptionEventHandler&gt;</ph>如<ph id="ph3">&lt;xref:System.AppDomain.UnhandledException?displayProperty=nameWithType&gt;</ph>事件。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.UnhandledExceptionEventArgs">
          <source>For more information about event handler delegates, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">如需事件處理常式委派的詳細資訊，請參閱<bpt id="p1">[</bpt>處理和引發事件<ept id="p1">](~/docs/standard/events/index.md)</ept>。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="M:System.UnhandledExceptionEventArgs.#ctor(System.Object,System.Boolean)">
          <source>The exception that is not handled.</source>
          <target state="translated">未處理的例外狀況。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="M:System.UnhandledExceptionEventArgs.#ctor(System.Object,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the runtime is terminating; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果執行階段已終止則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:System.UnhandledExceptionEventArgs.#ctor(System.Object,System.Boolean)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.UnhandledExceptionEventArgs" /&gt;</ph> class with the exception object and a common language runtime termination flag.</source>
          <target state="translated">使用例外狀況物件和 Common Language Runtime 終止 (Termination) 旗標，初始化 <ph id="ph1">&lt;see cref="T:System.UnhandledExceptionEventArgs" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="P:System.UnhandledExceptionEventArgs.ExceptionObject">
          <source>Gets the unhandled exception object.</source>
          <target state="translated">取得未處理的例外狀況物件。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.UnhandledExceptionEventArgs.ExceptionObject">
          <source>The unhandled exception object.</source>
          <target state="translated">未處理的例外狀況物件。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.UnhandledExceptionEventArgs.ExceptionObject">
          <source>This property returns an object of type <ph id="ph1">&lt;xref:System.Object&gt;</ph> rather than one derived from <ph id="ph2">&lt;xref:System.Exception&gt;</ph>.</source>
          <target state="translated">這個屬性會傳回型別的物件<ph id="ph1">&lt;xref:System.Object&gt;</ph>而不是其中一個衍生自<ph id="ph2">&lt;xref:System.Exception&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.UnhandledExceptionEventArgs.ExceptionObject">
          <source>Although the Common Language Specification requires that all exception types derive from <ph id="ph1">&lt;xref:System.Exception&gt;</ph>, it is possible for methods to throw exceptions with objects not derived from <ph id="ph2">&lt;xref:System.Exception&gt;</ph>.</source>
          <target state="translated">雖然 Common Language Specification 要求所有例外狀況類型衍生自<ph id="ph1">&lt;xref:System.Exception&gt;</ph>，很可能讓方法擲回例外狀況的物件不是衍生自<ph id="ph2">&lt;xref:System.Exception&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.UnhandledExceptionEventArgs.ExceptionObject">
          <source>You can do the following to work with this exception:</source>
          <target state="translated">您可以執行下列命令來處理此例外狀況：</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.UnhandledExceptionEventArgs.ExceptionObject">
          <source>Apply the  <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute&gt;</ph> attribute with a <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute.WrapNonExceptionThrows%2A?displayProperty=nameWithType&gt;</ph> value of <ph id="ph3">`true`</ph> to the assembly that contains the event handler.</source>
          <target state="translated">套用<ph id="ph1">&lt;xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute&gt;</ph>屬性附帶<ph id="ph2">&lt;xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute.WrapNonExceptionThrows%2A?displayProperty=nameWithType&gt;</ph>值<ph id="ph3">`true`</ph>到包含此事件處理常式的組件。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.UnhandledExceptionEventArgs.ExceptionObject">
          <source>This wraps all exceptions not derived from the <ph id="ph1">&lt;xref:System.Exception&gt;</ph> class in a <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.RuntimeWrappedException&gt;</ph> object.</source>
          <target state="translated">這會結束所有的例外狀況不是衍生自<ph id="ph1">&lt;xref:System.Exception&gt;</ph>類別<ph id="ph2">&lt;xref:System.Runtime.CompilerServices.RuntimeWrappedException&gt;</ph>物件。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.UnhandledExceptionEventArgs.ExceptionObject">
          <source>You can then safely cast (in C#) or convert (in Visual Basic) the object returned by this property to an <ph id="ph1">&lt;xref:System.Exception&gt;</ph> object, and retrieve the original exception object from the <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">您可以再安全地轉型 （C# 中） 或轉換 （在 Visual Basic) 這個屬性所傳回的物件<ph id="ph1">&lt;xref:System.Exception&gt;</ph>物件，並擷取原始的例外狀況物件，從<ph id="ph2">&lt;xref:System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException%2A?displayProperty=nameWithType&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.UnhandledExceptionEventArgs.ExceptionObject">
          <source>Note that some compilers, such as the C# and Visual Basic compilers, automatically apply this attribute.</source>
          <target state="translated">請注意，某些編譯器，例如 C# 和 Visual Basic 編譯器，就會自動套用這個屬性。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.UnhandledExceptionEventArgs.ExceptionObject">
          <source>Cast the object returned by this property to an <ph id="ph1">&lt;xref:System.Exception&gt;</ph> object.</source>
          <target state="translated">這個屬性所傳回物件轉型<ph id="ph1">&lt;xref:System.Exception&gt;</ph>物件。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.UnhandledExceptionEventArgs.ExceptionObject">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.AppDomain.UnhandledException&gt;</ph> event.</source>
          <target state="translated">下列範例會示範<ph id="ph1">&lt;xref:System.AppDomain.UnhandledException&gt;</ph>事件。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.UnhandledExceptionEventArgs.ExceptionObject">
          <source>It defines an event handler, <ph id="ph1">`MyHandler`</ph>, that is invoked whenever an unhandled exception is thrown in the default application domain.</source>
          <target state="translated">它會定義事件處理常式， <ph id="ph1">`MyHandler`</ph>，每當預設應用程式定義域中擲回未處理的例外狀況時，會叫用。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.UnhandledExceptionEventArgs.ExceptionObject">
          <source>It then throws two exceptions.</source>
          <target state="translated">則會擲回兩個例外狀況。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.UnhandledExceptionEventArgs.ExceptionObject">
          <source>The first is handled by a <bpt id="p1">**</bpt>try/catch<ept id="p1">**</ept> block.</source>
          <target state="translated">第一個工作由<bpt id="p1">**</bpt>try/catch<ept id="p1">**</ept>區塊。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.UnhandledExceptionEventArgs.ExceptionObject">
          <source>The second is unhandled and invokes the <ph id="ph1">`MyHandle`</ph> routine before the application terminates.</source>
          <target state="translated">第二個未處理，並叫用<ph id="ph1">`MyHandle`</ph>應用程式終止前的常式。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="P:System.UnhandledExceptionEventArgs.IsTerminating">
          <source>Indicates whether the common language runtime is terminating.</source>
          <target state="translated">表示 Common Language Runtime 是否已終止。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.UnhandledExceptionEventArgs.IsTerminating">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the runtime is terminating; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果執行階段已終止則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.UnhandledExceptionEventArgs.IsTerminating">
          <source>Beginning with the .NET Framework version 2.0, this property returns <ph id="ph1">`true`</ph> for most unhandled exceptions, unless an application compatibility flag is used to revert to the behavior of versions 1.0 and 1.1.</source>
          <target state="translated">從.NET Framework 2.0 版開始，這個屬性會傳回<ph id="ph1">`true`</ph>大部分的未處理例外狀況，除非應用程式相容性旗標用來還原為 1.0 和 1.1 版的行為。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.UnhandledExceptionEventArgs.IsTerminating">
          <source>The reason is that most unhandled exceptions in threads, including thread pool threads, are allowed to proceed naturally, which normally results in termination of the application.</source>
          <target state="translated">原因是最未處理例外狀況中的執行緒，包含執行緒集區執行緒，都可以繼續進行自然，這通常會導致應用程式終止。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.UnhandledExceptionEventArgs.IsTerminating">
          <source>For more information, including a list of cases in which the runtime does not terminate, see <bpt id="p1">[</bpt>Exceptions in Managed Threads<ept id="p1">](~/docs/standard/threading/exceptions-in-managed-threads.md)</ept>.</source>
          <target state="translated">如需詳細資訊，包括清單的情況下，執行階段不會終止，請參閱<bpt id="p1">[</bpt>Managed 執行緒中的例外狀況<ept id="p1">](~/docs/standard/threading/exceptions-in-managed-threads.md)</ept>。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.UnhandledExceptionEventArgs.IsTerminating">
          <source>Version Information</source>
          <target state="translated">版本資訊</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.UnhandledExceptionEventArgs.IsTerminating">
          <source>The following applies to the .NET Framework versions 1.0 and 1.1: This property returns <ph id="ph1">`true`</ph> when an exception is received in, but not handled by, an application's main thread.</source>
          <target state="translated">下列適用於.NET framework 1.0 和 1.1 版： 這個屬性會傳回<ph id="ph1">`true`</ph>當接收，但不是由應用程式的主執行緒例外狀況。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.UnhandledExceptionEventArgs.IsTerminating">
          <source>This property also returns <ph id="ph1">`true`</ph> if an unmanaged thread is executing managed code and receives an unhandled exception.</source>
          <target state="translated">這個屬性也會傳回<ph id="ph1">`true`</ph>如果 unmanaged 的執行緒執行 managed 程式碼，並收到處理的例外狀況。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.UnhandledExceptionEventArgs.IsTerminating">
          <source>Finally, this property returns <ph id="ph1">`false`</ph> for thread pool threads and managed threads created by an application, because versions 1.0 and 1.1 catch unhandled exceptions in such threads and ignore them.</source>
          <target state="translated">最後，這個屬性會傳回<ph id="ph1">`false`</ph>執行緒集區和應用程式所建立，因為攔截這類執行緒的未處理的例外狀況，並忽略這些 1.0 和 1.1 版的 managed 的執行緒。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>