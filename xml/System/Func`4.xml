<Type Name="Func&lt;T1,T2,T3,TResult&gt;" FullName="System.Func&lt;T1,T2,T3,TResult&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7dabc2bee0af81b9a48ffc10fda50573e0d6b613" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58723327" /></Metadata><TypeSignature Language="C#" Value="public delegate TResult Func&lt;in T1,in T2,in T3,out TResult&gt;(T1 arg1, T2 arg2, T3 arg3);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Func`4&lt;- T1, - T2, - T3, + TResult&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Func`4" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Func(Of In T1, In T2, In T3, Out TResult)(arg1 As T1, arg2 As T2, arg3 As T3) As TResult " />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T1, typename T2, typename T3, typename TResult&gt;&#xA;public delegate TResult Func(T1 arg1, T2 arg2, T3 arg3);" />
  <TypeSignature Language="F#" Value="type Func&lt;'T1, 'T2, 'T3, 'Result&gt; = delegate of 'T1 * 'T2 * 'T3 -&gt; 'Result" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T1">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T2">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T3">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TResult">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=2.0.5.0, Culture=Neutral, PublicKeyToken=7cec85d7bea7798e")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="arg1" Type="T1" Index="0" FrameworkAlternate="xamarinmac-3.0" />
    <Parameter Name="arg2" Type="T2" Index="1" FrameworkAlternate="xamarinmac-3.0" />
    <Parameter Name="arg3" Type="T3" Index="2" FrameworkAlternate="xamarinmac-3.0" />
  </Parameters>
  <ReturnValue>
    <ReturnType>TResult</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。</typeparam>
    <typeparam name="T2">這個委派所封裝方法的第二個參數之型別。</typeparam>
    <typeparam name="T3">這個委派所封裝方法的第三個參數之型別。</typeparam>
    <typeparam name="TResult">這個委派所封裝之方法的傳回值之型別。</typeparam>
    <param name="arg1">由這個委派所封裝之方法的第一個參數。</param>
    <param name="arg2">這個委派所封裝之方法的第二個參數。</param>
    <param name="arg3">這個委派所封裝之方法的第三個參數。</param>
    <summary>封裝具有三個參數並傳回 <typeparamref name="TResult" /> 參數所指定之型別值的方法。</summary>
    <returns>這個委派所封裝之方法的傳回值。</returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用此委派来表示的方法，可以做為參數傳遞，而不必明確宣告自訂委派。 封裝的方法必須對應到這個委派所定義的方法簽章。 這表示封裝的方法必須有三個參數，每一個都傳值方式傳遞給它，而且它必須傳回值。  
  
> [!NOTE]
>  若要參考的方法具有三個參數並傳回`void`(或在 Visual Basic 中宣告為`Sub`而`Function`)，使用泛型<xref:System.Action%603>改為委派。  
  
 當您使用<xref:System.Func%604>委派，您不需要明確地定義這個委派會封裝具有三個參數的方法。 例如，下列程式碼明確宣告名為泛型委派`ParseNumber`，並將指派的參考<xref:System.Int32.Parse%2A>其委派執行個體的方法。  
  
 [!code-csharp[System.Func~4#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~4/cs/Delegate.cs#1)]
 [!code-vb[System.Func~4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~4/vb/Delegate.vb#1)]  
  
 下列範例中簡化這個程式碼，以具現化<xref:System.Func%604>而不是明確地定義新的委派，並為其指派具名的方法的委派。  
  
 [!code-csharp[System.Func~4#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~4/cs/Func4.cs#2)]
 [!code-vb[System.Func~4#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~4/vb/Func4.vb#2)]  
  
 您可以使用<xref:System.Func%604>具有在 C# 中，匿名方法委派，如下列範例所示。 (如匿名方法的簡介，請參閱 <<c0> [ 匿名方法](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md)。)  
  
 [!code-csharp[System.Func~4#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~4/cs/Anon.cs#3)]  
  
 您也可以指派至 lambda 運算式<xref:System.Func%604>委派，如下列範例所示。 (如需 lambda 運算式，請參閱 < [Lambda 運算式](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)並[Lambda 運算式](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)。)  
  
 [!code-csharp[System.Func~4#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~4/cs/Lambda.cs#4)]
 [!code-vb[System.Func~4#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~4/vb/Lambda.vb#4)]  
  
 Lambda 運算式的基礎類型是其中一個泛型`Func`委派。 這讓您能夠傳遞做為參數的 lambda 運算式，而不需要明確地將它指派給委派。 特別是，因為有許多方法中的型別<xref:System.Linq>命名空間一定`Func`參數，您可以將這些方法的 lambda 運算式而不需要明確具現化`Func`委派。  
  
   
  
## Examples  
 下列範例示範如何宣告及使用<xref:System.Func%603>委派。 這個範例會宣告<xref:System.Func%603>變數，並將它指派採用 lambda 運算式<xref:System.String>值並<xref:System.Int32>做為參數的值。 Lambda 運算式會傳回`true`如果長度<xref:System.String>參數的值等於<xref:System.Int32>參數。 委派會封裝這個方法用於後續查詢，以字串陣列中的篩選條件字串。  
  
 [!code-csharp[System.Func~3#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~3/cs/Example.cs#5)]
 [!code-vb[System.Func~3#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~3/vb/Example.vb#5)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md">Lambda 運算式 (C# 程式設計手冊)</related>
    <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md">Lambda 運算式</related>
    <related type="Article" href="~/docs/csharp/programming-guide/delegates/index.md">委派 (C# 程式設計手冊)</related>
    <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/delegates/index.md">在 Visual Basic 中的委派</related>
  </Docs>
</Type>