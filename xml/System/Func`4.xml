<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Func`4.xml" source-language="en-US" target-language="zh-TW">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5934839c1c4cbb7a73457bc973f4be49a172db0e1.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">934839c1c4cbb7a73457bc973f4be49a172db0e1</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`4">
          <source>The type of the first parameter of the method that this delegate encapsulates.</source>
          <target state="translated">此委派封裝之方法的第一個參數類型。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`4">
          <source>The type of the second parameter of the method that this delegate encapsulates.</source>
          <target state="translated">此委派封裝之方法的第二個參數類型。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`4">
          <source>The type of the third parameter of the method that this delegate encapsulates.</source>
          <target state="translated">此委派封裝之方法的第三個參數類型。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`4">
          <source>The type of the return value of the method that this delegate encapsulates.</source>
          <target state="translated">這個委派所封裝之方法的傳回值之類型。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="T:System.Func`4">
          <source>The first parameter of the method that this delegate encapsulates.</source>
          <target state="translated">此委派封裝之方法的第一個參數。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="T:System.Func`4">
          <source>The second parameter of the method that this delegate encapsulates.</source>
          <target state="translated">此委派封裝之方法的第二個參數。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="T:System.Func`4">
          <source>The third parameter of the method that this delegate encapsulates.</source>
          <target state="translated">此委派封裝之方法的第三個參數。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="T:System.Func`4">
          <source>Encapsulates a method that has three parameters and returns a value of the type specified by the <ph id="ph1">&lt;typeparamref name="TResult" /&gt;</ph> parameter.</source>
          <target state="translated">封裝具有三個參數並傳回 <ph id="ph1">&lt;typeparamref name="TResult" /&gt;</ph> 參數所指定之型別值的方法。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="T:System.Func`4">
          <source>The return value of the method that this delegate encapsulates.</source>
          <target state="translated">這個委派所封裝之方法的傳回值。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`4">
          <source>You can use this delegate to represent a method that can be passed as a parameter without explicitly declaring a custom delegate.</source>
          <target state="translated">您可以使用此委派来表示的方法，可以當做參數傳遞，而不必明確宣告自訂委派。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`4">
          <source>The encapsulated method must correspond to the method signature that is defined by this delegate.</source>
          <target state="translated">封裝的方法必須對應至這個委派所定義的方法簽章。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`4">
          <source>This means that the encapsulated method must have three parameters, each of which is passed to it by value, and that it must return a value.</source>
          <target state="translated">這表示封裝的方法必須有三個參數，其中每一個都依值傳遞給它，而且它必須傳回值。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`4">
          <source>To reference a method that has three parameters and returns <ph id="ph1">`void`</ph> (or in Visual Basic, that is declared as a <ph id="ph2">`Sub`</ph> rather than as a <ph id="ph3">`Function`</ph>), use the generic <ph id="ph4">&lt;xref:System.Action%603&gt;</ph> delegate instead.</source>
          <target state="translated">若要參考的方法具有三個參數並傳回<ph id="ph1">`void`</ph>(或在 Visual Basic 中宣告為<ph id="ph2">`Sub`</ph>而<ph id="ph3">`Function`</ph>)，使用泛型<ph id="ph4">&lt;xref:System.Action%603&gt;</ph>改為委派。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`4">
          <source>When you use the <ph id="ph1">&lt;xref:System.Func%604&gt;</ph> delegate, you do not have to explicitly define a delegate that encapsulates a method with three parameters.</source>
          <target state="translated">當您使用<ph id="ph1">&lt;xref:System.Func%604&gt;</ph>委派，您不需要明確定義這個委派會封裝具有三個參數的方法。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`4">
          <source>For example, the following code explicitly declares a generic delegate named <ph id="ph1">`ParseNumber`</ph> and assigns a reference to the <ph id="ph2">&lt;xref:System.Int32.Parse%2A&gt;</ph> method to its delegate instance.</source>
          <target state="translated">例如，下列程式碼明確宣告名為的泛型委派<ph id="ph1">`ParseNumber`</ph>和指派參考<ph id="ph2">&lt;xref:System.Int32.Parse%2A&gt;</ph>其委派執行個體的方法。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`4">
          <source>The following example simplifies this code by instantiating the <ph id="ph1">&lt;xref:System.Func%604&gt;</ph> delegate instead of explicitly defining a new delegate and assigning a named method to it.</source>
          <target state="translated">下列範例會具現化來簡化此程式碼<ph id="ph1">&lt;xref:System.Func%604&gt;</ph>而不是明確地定義新的委派，並為其指派具名的方法的委派。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`4">
          <source>You can use the <ph id="ph1">&lt;xref:System.Func%604&gt;</ph> delegate with anonymous methods in C#, as the following example illustrates.</source>
          <target state="translated">您可以使用<ph id="ph1">&lt;xref:System.Func%604&gt;</ph>委派與 C# 中的匿名方法，如下列範例所示。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`4">
          <source>(For an introduction to anonymous methods, see <bpt id="p1">[</bpt>Anonymous Methods<ept id="p1">](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md)</ept>.)</source>
          <target state="translated">(如匿名方法的簡介，請參閱<bpt id="p1">[</bpt>匿名方法<ept id="p1">](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md)</ept>。)</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`4">
          <source>You can also assign a lambda expression to a <ph id="ph1">&lt;xref:System.Func%604&gt;</ph> delegate, as the following example illustrates.</source>
          <target state="translated">您也可以指派 lambda 運算式給<ph id="ph1">&lt;xref:System.Func%604&gt;</ph>委派視為相等，如下列範例所示。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`4">
          <source>(For an introduction to lambda expressions, see <bpt id="p1">[</bpt>Lambda Expressions<ept id="p1">](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)</ept> and <bpt id="p2">[</bpt>Lambda Expressions<ept id="p2">](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)</ept>.)</source>
          <target state="translated">(如需 lambda 運算式的簡介，請參閱<bpt id="p1">[</bpt>Lambda 運算式<ept id="p1">](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)</ept>和<bpt id="p2">[</bpt>Lambda 運算式<ept id="p2">](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)</ept>。)</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`4">
          <source>The underlying type of a lambda expression is one of the generic <ph id="ph1">`Func`</ph> delegates.</source>
          <target state="translated">Lambda 運算式的基礎類型是泛型的其中一個<ph id="ph1">`Func`</ph>委派。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`4">
          <source>This makes it possible to pass a lambda expression as a parameter without explicitly assigning it to a delegate.</source>
          <target state="translated">這可讓您能夠將 lambda 運算式當做參數傳遞而不明確地將它指派給委派。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`4">
          <source>In particular, because many methods of types in the <ph id="ph1">&lt;xref:System.Linq&gt;</ph> namespace have <ph id="ph2">`Func`</ph> parameters, you can pass these methods a lambda expression without explicitly instantiating a <ph id="ph3">`Func`</ph> delegate.</source>
          <target state="translated">特別是，因為許多方法中的型別<ph id="ph1">&lt;xref:System.Linq&gt;</ph>命名空間包含<ph id="ph2">`Func`</ph>參數，您可以傳遞這些方法的 lambda 運算式不明確具現化<ph id="ph3">`Func`</ph>委派。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`4">
          <source>The following example demonstrates how to declare and use a <ph id="ph1">&lt;xref:System.Func%603&gt;</ph> delegate.</source>
          <target state="translated">下列範例示範如何宣告和使用<ph id="ph1">&lt;xref:System.Func%603&gt;</ph>委派。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`4">
          <source>This example declares a <ph id="ph1">&lt;xref:System.Func%603&gt;</ph> variable and assigns it a lambda expression that takes a <ph id="ph2">&lt;xref:System.String&gt;</ph> value and an <ph id="ph3">&lt;xref:System.Int32&gt;</ph> value as parameters.</source>
          <target state="translated">這個範例會宣告<ph id="ph1">&lt;xref:System.Func%603&gt;</ph>變數並指派其 lambda 運算式的<ph id="ph2">&lt;xref:System.String&gt;</ph>值和<ph id="ph3">&lt;xref:System.Int32&gt;</ph>做為參數的值。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`4">
          <source>The lambda expression returns <ph id="ph1">`true`</ph> if the length of the <ph id="ph2">&lt;xref:System.String&gt;</ph> parameter is equal to the value of the <ph id="ph3">&lt;xref:System.Int32&gt;</ph> parameter.</source>
          <target state="translated">Lambda 運算式會傳回<ph id="ph1">`true`</ph>如果長度<ph id="ph2">&lt;xref:System.String&gt;</ph>參數的值等於<ph id="ph3">&lt;xref:System.Int32&gt;</ph>參數。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`4">
          <source>The delegate that encapsulates this method is subsequently used in a query to filter strings in an array of strings.</source>
          <target state="translated">封裝這個方法的委派後續用於查詢的字串陣列中的篩選字串。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>