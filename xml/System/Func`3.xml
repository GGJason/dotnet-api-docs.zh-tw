<Type Name="Func&lt;T1,T2,TResult&gt;" FullName="System.Func&lt;T1,T2,TResult&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="fe5da7efb4390f983ba3feeb69ab1759969be001" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39917120" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate TResult Func&lt;in T1,in T2,out TResult&gt;(T1 arg1, T2 arg2);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Func`3&lt;- T1, - T2, + TResult&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Func`3" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Func(Of In T1, In T2, Out TResult)(arg1 As T1, arg2 As T2) As TResult " />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T1, typename T2, typename TResult&gt;&#xA;public delegate TResult Func(T1 arg1, T2 arg2);" />
  <TypeSignature Language="F#" Value="type Func&lt;'T1, 'T2, 'Result&gt; = delegate of 'T1 * 'T2 -&gt; 'Result" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T1">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T2">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TResult">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=2.0.5.0, Culture=Neutral, PublicKeyToken=7cec85d7bea7798e")</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="arg1" Type="T1" />
    <Parameter Name="arg2" Type="T2" />
  </Parameters>
  <ReturnValue>
    <ReturnType>TResult</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T1">
      <span data-ttu-id="f883f-101">此委派封裝之方法的第一個參數類型。</span>
      <span class="sxs-lookup">
        <span data-stu-id="f883f-101">The type of the first parameter of the method that this delegate encapsulates.</span>
      </span>
    </typeparam>
    <typeparam name="T2">
      <span data-ttu-id="f883f-102">此委派封裝之方法的第二個參數類型。</span>
      <span class="sxs-lookup">
        <span data-stu-id="f883f-102">The type of the second parameter of the method that this delegate encapsulates.</span>
      </span>
    </typeparam>
    <typeparam name="TResult">
      <span data-ttu-id="f883f-103">這個委派所封裝之方法的傳回值之類型。</span>
      <span class="sxs-lookup">
        <span data-stu-id="f883f-103">The type of the return value of the method that this delegate encapsulates.</span>
      </span>
    </typeparam>
    <param name="arg1">
      <span data-ttu-id="f883f-104">此委派封裝之方法的第一個參數。</span>
      <span class="sxs-lookup">
        <span data-stu-id="f883f-104">The first parameter of the method that this delegate encapsulates.</span>
      </span>
    </param>
    <param name="arg2">
      <span data-ttu-id="f883f-105">此委派封裝之方法的第二個參數。</span>
      <span class="sxs-lookup">
        <span data-stu-id="f883f-105">The second parameter of the method that this delegate encapsulates.</span>
      </span>
    </param>
    <summary>
      <span data-ttu-id="f883f-106">封裝具有兩個參數的方法，並傳回 <typeparamref name="TResult" /> 參數所指定的型別值。</span>
      <span class="sxs-lookup">
        <span data-stu-id="f883f-106">Encapsulates a method that has two parameters and returns a value of the type specified by the <typeparamref name="TResult" /> parameter.</span>
      </span>
    </summary>
    <returns>
      <span data-ttu-id="f883f-107">這個委派所封裝之方法的傳回值。</span>
      <span class="sxs-lookup">
        <span data-stu-id="f883f-107">The return value of the method that this delegate encapsulates.</span>
      </span>
    </returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f883f-108">您可以使用此委派来表示的方法，可以做為參數傳遞，而不必明確宣告自訂委派。</span><span class="sxs-lookup"><span data-stu-id="f883f-108">You can use this delegate to represent a method that can be passed as a parameter without explicitly declaring a custom delegate.</span></span> <span data-ttu-id="f883f-109">封裝的方法必須對應到這個委派所定義的方法簽章。</span><span class="sxs-lookup"><span data-stu-id="f883f-109">The encapsulated method must correspond to the method signature that is defined by this delegate.</span></span> <span data-ttu-id="f883f-110">這表示封裝的方法必須有兩個參數，每一個都傳值方式傳遞給它，而且它必須傳回值。</span><span class="sxs-lookup"><span data-stu-id="f883f-110">This means that the encapsulated method must have two parameters, each of which is passed to it by value, and that it must return a value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f883f-111">若要參考的方法有兩個參數並傳回`void`(或在 Visual Basic 中宣告為`Sub`而`Function`)，使用泛型<xref:System.Action%602>改為委派。</span><span class="sxs-lookup"><span data-stu-id="f883f-111">To reference a method that has two parameters and returns `void` (or in Visual Basic, that is declared as a `Sub` rather than as a `Function`), use the generic <xref:System.Action%602> delegate instead.</span></span>  
  
 <span data-ttu-id="f883f-112">當您使用<xref:System.Func%603>沒有明確定義這個委派會封裝具有兩個參數的方法的委派。</span><span class="sxs-lookup"><span data-stu-id="f883f-112">When you use the <xref:System.Func%603> delegate you do not have to explicitly define a delegate that encapsulates a method with two parameters.</span></span> <span data-ttu-id="f883f-113">例如，下列程式碼明確宣告委派，名為`ExtractMethod`，並將指派的參考`ExtractWords`其委派執行個體的方法。</span><span class="sxs-lookup"><span data-stu-id="f883f-113">For example, the following code explicitly declares a delegate named `ExtractMethod` and assigns a reference to the `ExtractWords` method to its delegate instance.</span></span>  
  
 [!code-csharp[System.Func~3#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~3/cs/Delegate.cs#1)]
 [!code-vb[System.Func~3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~3/vb/Delegate.vb#1)]  
  
 <span data-ttu-id="f883f-114">下列範例中簡化這個程式碼，以具現化<xref:System.Func%603>而不是明確地定義新的委派，並為其指派具名的方法的委派。</span><span class="sxs-lookup"><span data-stu-id="f883f-114">The following example simplifies this code by instantiating a <xref:System.Func%603> delegate instead of explicitly defining a new delegate and assigning a named method to it.</span></span>  
  
 [!code-csharp[System.Func~3#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~3/cs/Func3.cs#2)]
 [!code-vb[System.Func~3#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~3/vb/Func3.vb#2)]  
  
 <span data-ttu-id="f883f-115">您可以使用<xref:System.Func%603>具有在 C# 中，匿名方法委派，如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="f883f-115">You can use the <xref:System.Func%603> delegate with anonymous methods in C#, as the following example illustrates.</span></span> <span data-ttu-id="f883f-116">(如匿名方法的簡介，請參閱 <<c0> [ 匿名方法](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md)。)</span><span class="sxs-lookup"><span data-stu-id="f883f-116">(For an introduction to anonymous methods, see [Anonymous Methods](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)</span></span>  
  
 [!code-csharp[System.Func~3#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~3/cs/Anon.cs#3)]  
  
 <span data-ttu-id="f883f-117">您也可以指派至 lambda 運算式<xref:System.Func%603>委派，如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="f883f-117">You can also assign a lambda expression to a <xref:System.Func%603> delegate, as the following example illustrates.</span></span> <span data-ttu-id="f883f-118">(如需 lambda 運算式，請參閱 < [Lambda 運算式](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)並[Lambda 運算式](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)。)</span><span class="sxs-lookup"><span data-stu-id="f883f-118">(For an introduction to lambda expressions, see [Lambda Expressions](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md) and [Lambda Expressions](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)</span></span>  
  
 [!code-csharp[System.Func~3#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~3/cs/Lambda.cs#4)]
 [!code-vb[System.Func~3#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~3/vb/lambda.vb#4)]  
  
 <span data-ttu-id="f883f-119">Lambda 運算式的基礎類型是其中一個泛型`Func`委派。</span><span class="sxs-lookup"><span data-stu-id="f883f-119">The underlying type of a lambda expression is one of the generic `Func` delegates.</span></span> <span data-ttu-id="f883f-120">這讓您能夠傳遞做為參數的 lambda 運算式，而不需要明確地將它指派給委派。</span><span class="sxs-lookup"><span data-stu-id="f883f-120">This makes it possible to pass a lambda expression as a parameter without explicitly assigning it to a delegate.</span></span> <span data-ttu-id="f883f-121">特別是，因為有許多方法中的型別<xref:System.Linq>命名空間一定<xref:System.Func%603>參數，您可以將這些方法的 lambda 運算式而不需要明確具現化<xref:System.Func%603>委派。</span><span class="sxs-lookup"><span data-stu-id="f883f-121">In particular, because many methods of types in the <xref:System.Linq> namespace have <xref:System.Func%603> parameters, you can pass these methods a lambda expression without explicitly instantiating a <xref:System.Func%603> delegate.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f883f-122">下列範例示範如何宣告及使用<xref:System.Func%603>委派。</span><span class="sxs-lookup"><span data-stu-id="f883f-122">The following example demonstrates how to declare and use a <xref:System.Func%603> delegate.</span></span> <span data-ttu-id="f883f-123">這個範例會宣告<xref:System.Func%603>變數，並將它指派採用 lambda 運算式<xref:System.String>值並<xref:System.Int32>做為參數的值。</span><span class="sxs-lookup"><span data-stu-id="f883f-123">This example declares a <xref:System.Func%603> variable and assigns it a lambda expression that takes a <xref:System.String> value and an <xref:System.Int32> value as parameters.</span></span> <span data-ttu-id="f883f-124">Lambda 運算式會傳回`true`如果長度<xref:System.String>參數的值等於<xref:System.Int32>參數。</span><span class="sxs-lookup"><span data-stu-id="f883f-124">The lambda expression returns `true` if the length of the <xref:System.String> parameter is equal to the value of the <xref:System.Int32> parameter.</span></span> <span data-ttu-id="f883f-125">委派會封裝這個方法用於後續查詢，以字串陣列中的篩選條件字串。</span><span class="sxs-lookup"><span data-stu-id="f883f-125">The delegate that encapsulates this method is subsequently used in a query to filter strings in an array of strings.</span></span>  
  
 [!code-csharp[System.Func~3#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~3/cs/Example.cs#5)]
 [!code-vb[System.Func~3#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~3/vb/Example.vb#5)]  
  
 ]]></format>
    </remarks>
  </Docs>
</Type>