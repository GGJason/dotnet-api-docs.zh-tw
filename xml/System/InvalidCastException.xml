<Type Name="InvalidCastException" FullName="System.InvalidCastException">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b8fdc2a667e233012d9f9fa27a5a9dbc9e44e565" /><Meta Name="ms.sourcegitcommit" Value="c0c07dbd19cd7017243f9ac36915755f79bc8da6" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="11/27/2018" /><Meta Name="ms.locfileid" Value="52380905" /></Metadata><TypeSignature Language="C#" Value="public class InvalidCastException : SystemException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit InvalidCastException extends System.SystemException" />
  <TypeSignature Language="DocId" Value="T:System.InvalidCastException" />
  <TypeSignature Language="VB.NET" Value="Public Class InvalidCastException&#xA;Inherits SystemException" />
  <TypeSignature Language="C++ CLI" Value="public ref class InvalidCastException : SystemException" />
  <TypeSignature Language="F#" Value="type InvalidCastException = class&#xA;    inherit SystemException" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Exception</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.SystemException</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>無效的轉型或明確轉換所擲回的例外狀況。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 .NET Framework 支援自動轉換為其基底類型，再回復成衍生的型別，衍生的型別以及呈現介面的物件，並傳回介面的類型。 它也包含各種不同的機制，可支援自訂的轉換。 如需詳細資訊，請參閱 < [.NET Framework 中的型別轉換](~/docs/standard/base-types/type-conversion.md)。  
  
 <xref:System.InvalidCastException>不支援一種類型的執行個體轉換為另一種類型時擲回例外狀況。 例如，嘗試轉換<xref:System.Char>值加入<xref:System.DateTime>值都會擲回<xref:System.InvalidCastException>例外狀況。 不同於<xref:System.OverflowException>支援到另一種類型的轉換，但來源類型的值超出目標類型的範圍時擲回例外狀況。  <xref:System.InvalidCastException>例外狀況由開發人員錯誤所造成，並不會處理在`try/catch`封鎖; 相反地，應該排除造成例外狀況。  
  
 如需系統所支援的轉換資訊，請參閱<xref:System.Convert>類別。 是否有錯誤時所發生的目的型別可以儲存來源型別值，但不是大型足以儲存特定的來源值，請參閱<xref:System.OverflowException>例外狀況。  
  
> [!NOTE]
>  在許多情況下，語言編譯器會偵測任何轉換的來源類型與目標型別之間不存在，並會發出編譯器錯誤。  
  
 某些條件下嘗試的轉換會擲回<xref:System.InvalidCastException>例外狀況會在下列各節中討論：  
  
 [基本型別和 IConvertible](#Primitive)   
 [Convert.ChangeType 方法](#ChangeType)   
 [縮小轉換和 IConvertible 實作](#Narrowing)   
 [向下轉型](#Downcasting)   
 [從介面物件的轉換](#Interface)   
 [字串轉換](#String)   
 [Visual Basic 6.0 移轉](#Migration)  
  
 來源值必須是明確參考轉換成功， `null`，或是來源引數所參考的物件型別必須轉換成目的地類型的隱含參考轉換。  
  
 下列中繼語言 (IL) 指示會擲回<xref:System.InvalidCastException>例外狀況：  
  
-   `castclass`  
  
-   `refanyval`  
  
-   `unbox`  
  
 <xref:System.InvalidCastException> 會使用 HRESULT COR_E_INVALIDCAST，其值 0x80004002。  
  
 如需執行個體的初始屬性值的清單<xref:System.InvalidCastException>，請參閱<xref:System.InvalidCastException.%23ctor%2A>建構函式。  
  
<a name="Primitive"></a>   
## <a name="primitive-types-and-iconvertible"></a>基本型別和 IConvertible  
 您直接或間接呼叫基本型別<xref:System.IConvertible>實作不支援特定的轉換。 例如，嘗試轉換<xref:System.Boolean>值<xref:System.Char>或<xref:System.DateTime>值<xref:System.Int32>就會擲回<xref:System.InvalidCastException>例外狀況。 下列範例會呼叫這兩<xref:System.Boolean.System%23IConvertible%23ToChar%2A?displayProperty=nameWithType>並<xref:System.Convert.ToChar%28System.Boolean%29?displayProperty=nameWithType>方法，將轉換<xref:System.Boolean>值<xref:System.Char>。 在這兩種情況下，方法呼叫會擲回<xref:System.InvalidCastException>例外狀況。  
  
 [!code-csharp[System.InvalidCastException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidcastexception/cs/iconvertible1.cs#2)]
 [!code-vb[System.InvalidCastException#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidcastexception/vb/iconvertible1.vb#2)]  
  
 支援的轉換，因為沒有任何因應措施。  
  
<a name="ChangeType"></a>   
## <a name="the-convertchangetype-method"></a>Convert.ChangeType 方法  
 您呼叫了<xref:System.Convert.ChangeType%2A?displayProperty=nameWithType>未實作方法，將物件轉換到另一個型別，但一或兩個類型從<xref:System.IConvertible>介面。  
  
 在大部分情況下，支援的轉換，因為沒有任何因應措施。 在某些情況下，可能的因應措施是手動指派屬性值從來源類型的類似屬性的目標型別。  
  
<a name="Narrowing"></a>   
## <a name="narrowing-conversions-and-iconvertible-implementations"></a>縮小轉換和 IConvertible 實作  
 縮小運算子定義類型所支援的明確轉換。  在 C# 中的轉型運算子或`CType`在 Visual Basic 中的轉換方法 (如果`Option Strict`上)，才能執行轉換。  
  
 不過，如果不將來源型別，也不目標型別定義的明確或縮小的兩個類型之間的轉換和<xref:System.IConvertible>的一個或兩種類型的實作不支援從來源類型轉換成目標型別<xref:System.InvalidCastException>擲回例外狀況。  
  
 在大部分情況下，支援的轉換，因為沒有任何因應措施。  
  
<a name="Downcasting"></a>   
## <a name="downcasting"></a>向下轉型  
 您可以向下轉型，也就是嘗試將基底類型的執行個體轉換成其中一種其衍生的類型。 在下列範例中，再嘗試轉換`Person`物件至`PersonWithID`物件失敗。  
  
 [!code-csharp[System.InvalidCastException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidcastexception/cs/basetoderived1.cs#1)]
 [!code-vb[System.InvalidCastException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidcastexception/vb/basetoderived1.vb#1)]  
  
 如範例所示，向下轉型成功才`Person`向上轉型從建立物件`PersonWithId`物件`Person`物件，或如果`Person`物件`null`。  
  
<a name="Interface"></a>   
## <a name="conversion-from-an-interface-object"></a>從介面物件的轉換  
 您嘗試將介面物件轉換為型別會實作該介面，但目標型別不是相同的型別或型別從其原始衍生的介面物件的基底類別。 下列範例會擲回<xref:System.InvalidCastException>它會嘗試轉換時發生的例外狀況<xref:System.IFormatProvider>物件到<xref:System.Globalization.DateTimeFormatInfo>物件。 轉換會失敗，因為雖然<xref:System.Globalization.DateTimeFormatInfo>類別會實作<xref:System.IFormatProvider>介面<xref:System.Globalization.DateTimeFormatInfo>物件無關<xref:System.Globalization.CultureInfo>類別衍生的介面物件。  
  
 [!code-csharp[System.InvalidCastException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidcastexception/cs/Interface1.cs#3)]
 [!code-vb[System.InvalidCastException#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidcastexception/vb/Interface1.vb#3)]  
  
 為例外狀況訊息指出，轉換會成功，在此情況下的介面物件轉換回原始類型的執行個體時，才<xref:System.Globalization.CultureInfo>。 如果介面物件轉換成原始類型的基底類型的執行個體，也會成功轉換。  
  
<a name="String"></a>   
## <a name="string-conversions"></a>字串轉換  
 您嘗試為其字串表示轉換值或物件，在 C# 中使用轉型運算子。 在下列範例中，這兩個嘗試轉型<xref:System.Char>值的字串，並嘗試將轉換的字串擲回整數<xref:System.InvalidCastException>例外狀況。  
  
 [!code-csharp[System.InvalidCastException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidcastexception/cs/ToString1.cs#4)]  
  
> [!NOTE]
>  使用 Visual Basic`CStr`運算子，將基本類型的值轉換成字串成功。 此作業不會擲回<xref:System.InvalidCastException>例外狀況。  
  
 已成功轉換為其字串表示的任何類型的執行個體，呼叫其`ToString`方法，如下列範例會執行。  `ToString`方法，則一律存在，因為<xref:System.Object.ToString%2A>方法由定義<xref:System.Object>類別，因此繼承或覆寫所有的 managed 型別。  
  
 [!code-csharp[System.InvalidCastException#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidcastexception/cs/ToString2.cs#5)]  
  
<a name="Migration"></a>   
## <a name="visual-basic-60-migration"></a>Visual Basic 6.0 移轉  
 您要升級 Visual Basic.NET、 Visual Basic 6.0 應用程式中的使用者控制項的自訂事件的呼叫和<xref:System.InvalidCastException>例外狀況會擲回訊息: 「 指定的轉換無效。 」 若要消除此例外狀況，變更您的表單中的程式碼行 (例如`Form1`)  
  
```  
Call UserControl11_MyCustomEvent(UserControl11, New UserControl1.MyCustomEventEventArgs(5))  
```  
  
 並以下列程式碼行取代：  
  
```  
Call UserControl11_MyCustomEvent(UserControl11(0), New UserControl1.MyCustomEventEventArgs(5))  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Exception" />
    <related type="Article" href="~/docs/standard/exceptions/index.md">處理和擲回例外狀況</related>
    <related type="Article" href="~/docs/standard/base-types/type-conversion.md">.NET Framework 中的類型轉換</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.InvalidCastException" /> 類別的新執行個體。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InvalidCastException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.InvalidCastException.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InvalidCastException();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.InvalidCastException" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個建構函式初始化<xref:System.Exception.Message%2A>屬性的新執行個體的系統提供的訊息描述錯誤，例如 「 無法轉換從來源類型的目的型別。 」 此訊息會考量目前的系統文化特性。  
  
 下表顯示 <xref:System.InvalidCastException> 執行個體的初始屬性值。  
  
|屬性|值|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|null 參考 (在 Visual Basic 中為 `Nothing`)。|  
|<xref:System.Exception.Message%2A>|當地語系化的錯誤訊息字串。|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InvalidCastException (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.InvalidCastException.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InvalidCastException(System::String ^ message);" />
      <MemberSignature Language="F#" Value="new InvalidCastException : string -&gt; InvalidCastException" Usage="new System.InvalidCastException message" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">描述錯誤的訊息。</param>
        <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.InvalidCastException" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個建構函式初始化<xref:System.Exception.Message%2A?displayProperty=nameWithType>屬性的新的例外狀況使用`message`參數。 `message` 的內容必須能讓人了解。 這個建構函式的呼叫端必須確保這個字串已經被當地語系化 (為了目前系統的文化特性)。  
  
 下表顯示 <xref:System.InvalidCastException> 執行個體的初始屬性值。  
  
|屬性|值|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|null 參考 (在 Visual Basic 中為 `Nothing`)。|  
|<xref:System.Exception.Message%2A>|錯誤訊息字串。|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected InvalidCastException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.InvalidCastException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; InvalidCastException(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="new InvalidCastException : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; InvalidCastException" Usage="new System.InvalidCastException (info, context)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">存放序列物件資料的物件。</param>
        <param name="context">關於來源或目的端的內容資訊。</param>
        <summary>使用序列化資料，初始化 <see cref="T:System.InvalidCastException" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 進行還原序列化 (Deserialization) 期間會呼叫這個建構函式，以便重新構成經由資料流傳送的例外狀況物件。 如需詳細資訊，請參閱 < [XML 和 SOAP 序列化](~/docs/standard/serialization/xml-and-soap-serialization.md)。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/serialization/xml-and-soap-serialization.md">XML 和 SOAP 序列化</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InvalidCastException (string message, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.InvalidCastException.#ctor(System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String, innerException As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InvalidCastException(System::String ^ message, Exception ^ innerException);" />
      <MemberSignature Language="F#" Value="new InvalidCastException : string * Exception -&gt; InvalidCastException" Usage="new System.InvalidCastException (message, innerException)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="message">解釋例外狀況原因的錯誤訊息。</param>
        <param name="innerException">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="innerException" /> 參數不是 <see langword="null" />，則目前的例外狀況會在處理內部例外的 <see langword="catch" /> 區塊中引發。</param>
        <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.InvalidCastException" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 被擲回以做為前一個例外狀況直接結果的例外狀況，應該在 <xref:System.Exception.InnerException%2A> 屬性中包含對前一個例外狀況的參考。 <xref:System.Exception.InnerException%2A>屬性會傳回相同的值會傳遞至建構函式，或傳回`null`如果<xref:System.Exception.InnerException%2A>不提供內部例外狀況值給建構函式。  
  
 下表顯示 <xref:System.InvalidCastException> 執行個體的初始屬性值。  
  
|屬性|值|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|內部例外狀況參考。|  
|<xref:System.Exception.Message%2A>|錯誤訊息字串。|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Exception" />
        <related type="Article" href="~/docs/standard/exceptions/index.md">處理和擲回例外狀況</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InvalidCastException (string message, int errorCode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, int32 errorCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.InvalidCastException.#ctor(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String, errorCode As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InvalidCastException(System::String ^ message, int errorCode);" />
      <MemberSignature Language="F#" Value="new InvalidCastException : string * int -&gt; InvalidCastException" Usage="new System.InvalidCastException (message, errorCode)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="errorCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="message">訊息，指出例外狀況發生的原因。</param>
        <param name="errorCode">與這個例外狀況相關聯的錯誤碼 (HRESULT) 值。</param>
        <summary>使用指定的訊息和錯誤碼，初始化 <see cref="T:System.InvalidCastException" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個建構函式初始化<xref:System.Exception.Message%2A?displayProperty=nameWithType>屬性的新的例外狀況使用`message`參數。 `message` 的內容必須能讓人了解。 這個建構函式的呼叫端必須確保這個字串已經被當地語系化 (為了目前系統的文化特性)。  
  
 這個建構函式提供 HRESULT 值繼承者可以存取<xref:System.InvalidCastException>類別，透過受保護<xref:System.Exception.HResult%2A>屬性<xref:System.Exception>類別。  
  
 下表顯示 <xref:System.InvalidCastException> 執行個體的初始屬性值。  
  
|屬性|值|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|null 參考 (在 Visual Basic 中為 `Nothing`)。|  
|<xref:System.Exception.Message%2A>|錯誤訊息字串。|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>