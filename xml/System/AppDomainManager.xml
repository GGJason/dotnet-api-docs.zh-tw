<Type Name="AppDomainManager" FullName="System.AppDomainManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="afa9de797efa5c60841b32251ad2c07429684aaf" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30728862" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class AppDomainManager : MarshalByRefObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit AppDomainManager extends System.MarshalByRefObject" />
  <TypeSignature Language="DocId" Value="T:System.AppDomainManager" />
  <TypeSignature Language="VB.NET" Value="Public Class AppDomainManager&#xA;Inherits MarshalByRefObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class AppDomainManager : MarshalByRefObject" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>提供 Unmanaged 主機的 Managed 對等項目。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  請勿使用<xref:System.AppDomainManager>設定在 ASP.NET 應用程式定義域。 在 ASP.NET 中，組態必須由主應用程式處理。  
  
 實作<xref:System.AppDomainManager>類別可讓裝載的應用程式參與建立新的應用程式網域。 若要取代預設<xref:System.AppDomainManager>，識別的組件和類型取代<xref:System.AppDomainManager>APPDOMAIN_MANAGER_ASM 及 APPDOMAIN_MANAGER_TYPE 環境變數，或者使用[ \<appDomainManagerAssembly>](~/docs/framework/configure-apps/file-schema/runtime/appdomainmanagerassembly-element.md)和[ \<appDomainManagerType >](~/docs/framework/configure-apps/file-schema/runtime/appdomainmanagertype-element.md)組態檔中的項目。 組件必須是完全受信任，而且包含在全域組件快取或起始應用程式的目錄。 型別和組件名稱必須被完整的環境變數中。 例如:   
  
 `set APPDOMAIN_MANAGER_TYPE=MyNamespace.TestAppDomainManager`  
  
 `set APPDOMAIN_MANAGER_ASM=customappDomainmanager, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f1368f7b12a08d72`  
  
> [!IMPORTANT]
>  如果組件包含的子類別<xref:System.AppDomainManager>相依於組件標示為搭配條件式<xref:System.Security.AllowPartiallyTrustedCallersAttribute>(APTCA) 屬性，您必須包含這些組件的清單中，您將傳遞給<xref:System.AppDomainSetup.PartialTrustVisibleAssemblies%2A>屬性<xref:System.AppDomainSetup>您用於建立應用程式定義域。 否則，以條件式 APTCA 屬性標記的組件將會停用。  
  
 <xref:System.AppDomainManager>是受管理的對等的受管理的主機。 <xref:System.AppDomainManager>物件參與新的應用程式定義域的程序中建立，而且可以自訂新<xref:System.AppDomain>其他 managed 程式碼執行之前。 <xref:System.AppDomainManager>也可以提供主機管理員參與在執行 common language runtime 的其他層面。 例如，<xref:System.AppDomainManager>可識別<xref:System.Security.HostSecurityManager>參與應用程式定義域的安全性決策的物件。  
  
> [!NOTE]
>  只授與的組件`FullTrust`，例如在全域組件快取中的組件或已識別為`fullTrustAssemblies`中<xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29?displayProperty=nameWithType>方法可以在載入<xref:System.AppDomainManager.%23ctor%2A>建構函式和<xref:System.AppDomainManager.InitializeNewDomain%2A>方法。  
  
> [!NOTE]
>  這個類別包含的連結要求和繼承要求在類別層級。 A<xref:System.Security.SecurityException>立即呼叫者或衍生的類別沒有基礎結構的權限時，會擲回。 如需安全性需求的詳細資訊，請參閱[連結要求](~/docs/framework/misc/link-demands.md)和[繼承要求](http://msdn.microsoft.com/library/28b9adbb-8f08-4f10-b856-dbf59eb932d9)。  
  
   
  
## Examples  
 下列範例示範的簡單實作<xref:System.AppDomainManager>。  
  
 [!code-csharp[System.AppDomainManager#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.AppDomainManager/CS/customAppDomainManager.cs#1)]
 [!code-vb[System.AppDomainManager#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.AppDomainManager/VB/customAppDomainManager.vb#1)]  
  
 ]]></format>
    </remarks>
    <exception cref="T:System.Security.SecurityException">呼叫端沒有正確的權限。 請參閱＜需求＞一節。</exception>
    <permission cref="T:System.Security.SecurityCriticalAttribute">需要完全信任立即呼叫者。 這個成員無法供部分信任或安全性透明程式碼。</permission>
    <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">針對衍生類別可執行的程式碼插入 common language runtime 裝載基礎結構。 關聯的列舉型別：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.Infrastructure" />。</permission>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AppDomainManager ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomainManager.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AppDomainManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.AppDomainManager" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  只授與的組件`FullTrust`，例如在全域組件快取中的組件或已識別為`fullTrustAssemblies`中<xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29?displayProperty=nameWithType>方法可以在載入<xref:System.AppDomainManager.%23ctor%2A>建構函式和<xref:System.AppDomainManager.InitializeNewDomain%2A>方法。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">需要完全信任立即呼叫者。 這個成員無法供部分信任或安全性透明程式碼。</permission>
      </Docs>
    </Member>
    <Member MemberName="ApplicationActivator">
      <MemberSignature Language="C#" Value="public virtual System.Runtime.Hosting.ApplicationActivator ApplicationActivator { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Runtime.Hosting.ApplicationActivator ApplicationActivator" />
      <MemberSignature Language="DocId" Value="P:System.AppDomainManager.ApplicationActivator" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ApplicationActivator As ApplicationActivator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Runtime::Hosting::ApplicationActivator ^ ApplicationActivator { System::Runtime::Hosting::ApplicationActivator ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Hosting.ApplicationActivator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得應用程式啟動項，這個應用程式啟動項會處理定義域中增益集和資訊清單架構應用程式的啟動。</summary>
        <value>應用程式啟動項 (Activator)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 沒有單一的指定執行個體的<xref:System.Runtime.Hosting.ApplicationActivator>中每個類別<xref:System.AppDomain>啟用呼叫路由傳送至的所有增益集和資訊清單為主應用程式。 <xref:System.AppDomainManager>目前<xref:System.AppDomain>可以提供自己的自訂<xref:System.Runtime.Hosting.ApplicationActivator>，或預設的執行個體<xref:System.Runtime.Hosting.ApplicationActivator>建立。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckSecuritySettings">
      <MemberSignature Language="C#" Value="public virtual bool CheckSecuritySettings (System.Security.SecurityState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CheckSecuritySettings(class System.Security.SecurityState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomainManager.CheckSecuritySettings(System.Security.SecurityState)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CheckSecuritySettings (state As SecurityState) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CheckSecuritySettings(System::Security::SecurityState ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Security.SecurityState" />
      </Parameters>
      <Docs>
        <param name="state">
          <see cref="T:System.Security.SecurityState" /> 的子類別，指出要求其安全性狀態的作業。</param>
        <summary>表示應用程式定義域中是否允許指定的作業。</summary>
        <returns>
          如果主機允許在應用程式定義域中執行 <paramref name="state" /> 所指定的作業，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法的預設實作會傳回`false`。  
  
 這個方法時，會呼叫<xref:System.IO.IsolatedStorage.IsolatedStorageFile.IncreaseQuotaTo%2A?displayProperty=nameWithType>增加隔離儲存區配額已呼叫方法。 裝載 common language runtime (CLR) 的應用程式可以覆寫<xref:System.AppDomainManager.CheckSecuritySettings%2A>方法，以執行原則決策依據<xref:System.IO.IsolatedStorage.IsolatedStorageSecurityState>物件 (後者繼承<xref:System.Security.SecurityState>)，並可以再允許或防止增加。 例如，主機內容可以提示使用者核准或拒絕該要求增加配額。 主應用程式的實作<xref:System.AppDomainManager.CheckSecuritySettings%2A>應該納入考量的阻絕服務攻擊的可能性。 比方說，它應該從使用者啟動的事件會呼叫此方法，例如按一下按鈕時，才會提示使用者。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDomain">
      <MemberSignature Language="C#" Value="public virtual AppDomain CreateDomain (string friendlyName, System.Security.Policy.Evidence securityInfo, AppDomainSetup appDomainInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.AppDomain CreateDomain(string friendlyName, class System.Security.Policy.Evidence securityInfo, class System.AppDomainSetup appDomainInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomainManager.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateDomain (friendlyName As String, securityInfo As Evidence, appDomainInfo As AppDomainSetup) As AppDomain" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual AppDomain ^ CreateDomain(System::String ^ friendlyName, System::Security::Policy::Evidence ^ securityInfo, AppDomainSetup ^ appDomainInfo);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.AppDomain</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="friendlyName" Type="System.String" />
        <Parameter Name="securityInfo" Type="System.Security.Policy.Evidence" />
        <Parameter Name="appDomainInfo" Type="System.AppDomainSetup" />
      </Parameters>
      <Docs>
        <param name="friendlyName">定義域的易記名稱。</param>
        <param name="securityInfo">物件，包含透過安全性原則對應的辨識項，以建立堆疊頂部使用權限集合。</param>
        <param name="appDomainInfo">物件，包含應用程式定義域初始化資訊。</param>
        <summary>傳回新的或現有的應用程式定義域。</summary>
        <returns>新的或現有的應用程式定義域。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 所指定的易記名稱`friendlyName`參數，可顯示在使用者介面，以識別該定義域。 如需詳細資訊，請參閱 <xref:System.AppDomain.FriendlyName%2A> 屬性 (Property)。  
  
 預設值<xref:System.AppDomainManager.CreateDomain%2A>方法會呼叫受保護<xref:System.AppDomainManager.CreateDomainHelper%2A>方法來建立<xref:System.AppDomain>。 覆寫這個方法不需要呼叫<xref:System.AppDomainManager.CreateDomainHelper%2A>方法可以傳回現有的網域。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>當您繼承自<see cref="T:System.AppDomainManager" />類別並覆寫<see cref="M:System.AppDomainManager.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)" />方法，您可以執行自訂應用程式定義域初始化活動，然後再呼叫<see cref="M:System.AppDomainManager.CreateDomainHelper(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)" />方法或呼叫所有的 helper 方法。  例如，您可以修改為傳入的辨識項<paramref name="securityInfo" />，更新相關聯的欄位<see cref="T:System.AppDomainSetup" />，或是重複使用現有的網域。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="CreateDomainHelper">
      <MemberSignature Language="C#" Value="protected static AppDomain CreateDomainHelper (string friendlyName, System.Security.Policy.Evidence securityInfo, AppDomainSetup appDomainInfo);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class System.AppDomain CreateDomainHelper(string friendlyName, class System.Security.Policy.Evidence securityInfo, class System.AppDomainSetup appDomainInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomainManager.CreateDomainHelper(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function CreateDomainHelper (friendlyName As String, securityInfo As Evidence, appDomainInfo As AppDomainSetup) As AppDomain" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static AppDomain ^ CreateDomainHelper(System::String ^ friendlyName, System::Security::Policy::Evidence ^ securityInfo, AppDomainSetup ^ appDomainInfo);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.AppDomain</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="friendlyName" Type="System.String" />
        <Parameter Name="securityInfo" Type="System.Security.Policy.Evidence" />
        <Parameter Name="appDomainInfo" Type="System.AppDomainSetup" />
      </Parameters>
      <Docs>
        <param name="friendlyName">定義域的易記名稱。</param>
        <param name="securityInfo">物件，包含透過安全性原則對應的辨識項，以建立堆疊頂部使用權限集合。</param>
        <param name="appDomainInfo">物件，包含應用程式定義域初始化資訊。</param>
        <summary>提供建立應用程式定義域的 Helper 方法。</summary>
        <returns>新建立的應用程式定義域。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個受保護的 helper 方法會負責建立新的應用程式定義域。  
  
 此易記名稱，由指定`friendlyName`參數，可顯示在使用者介面，以識別該定義域。 如需詳細資訊，請參閱 <xref:System.AppDomain.FriendlyName%2A> 屬性 (Property)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="friendlyName" /> 為 <see langword="null" />。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">控制辨識項。 安全性動作： <see cref="F:System.Security.Permissions.SecurityAction.Demand" />。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></permission>
      </Docs>
    </Member>
    <Member MemberName="EntryAssembly">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.Assembly EntryAssembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Assembly EntryAssembly" />
      <MemberSignature Language="DocId" Value="P:System.AppDomainManager.EntryAssembly" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property EntryAssembly As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::Assembly ^ EntryAssembly { System::Reflection::Assembly ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得應用程式的項目組件。</summary>
        <value>應用程式的項目組件。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果應用程式資訊清單啟動應用程式，項目組件由應用程式資訊清單中。 如果應用程式不是資訊清單啟動，進入點的組件是可執行程序預設應用程式定義域中。 在其他應用程式定義域中，項目組件是已執行的第一個可執行檔<xref:System.AppDomain.ExecuteAssembly%2A?displayProperty=nameWithType>方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HostExecutionContextManager">
      <MemberSignature Language="C#" Value="public virtual System.Threading.HostExecutionContextManager HostExecutionContextManager { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.HostExecutionContextManager HostExecutionContextManager" />
      <MemberSignature Language="DocId" Value="P:System.AppDomainManager.HostExecutionContextManager" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property HostExecutionContextManager As HostExecutionContextManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Threading::HostExecutionContextManager ^ HostExecutionContextManager { System::Threading::HostExecutionContextManager ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.HostExecutionContextManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得管理執行內容流程的主機執行內容管理員。</summary>
        <value>主機執行內容管理員。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個屬性可讓主機提供<xref:System.Threading.HostExecutionContextManager>可以參與流程的執行內容在非同步呼叫之間。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HostSecurityManager">
      <MemberSignature Language="C#" Value="public virtual System.Security.HostSecurityManager HostSecurityManager { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.HostSecurityManager HostSecurityManager" />
      <MemberSignature Language="DocId" Value="P:System.AppDomainManager.HostSecurityManager" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property HostSecurityManager As HostSecurityManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Security::HostSecurityManager ^ HostSecurityManager { System::Security::HostSecurityManager ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.HostSecurityManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得參與應用程式定義域安全性決策的主機安全性管理員。</summary>
        <value>主機安全性管理員。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個屬性可讓主機提供<xref:System.Security.HostSecurityManager>參與應用程式定義域的安全性決策。  
  
   
  
## Examples  
 下列範例示範的覆寫<xref:System.AppDomainManager.HostSecurityManager%2A>自訂應用程式定義域管理員的屬性。 這個程式碼範例是針對所提供之較大範例的一部分<xref:System.AppDomainManager>類別。  
  
 [!code-csharp[System.AppDomainManager#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.AppDomainManager/CS/customAppDomainManager.cs#3)]
 [!code-vb[System.AppDomainManager#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.AppDomainManager/VB/customAppDomainManager.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializationFlags">
      <MemberSignature Language="C#" Value="public AppDomainManagerInitializationOptions InitializationFlags { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.AppDomainManagerInitializationOptions InitializationFlags" />
      <MemberSignature Language="DocId" Value="P:System.AppDomainManager.InitializationFlags" />
      <MemberSignature Language="VB.NET" Value="Public Property InitializationFlags As AppDomainManagerInitializationOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property AppDomainManagerInitializationOptions InitializationFlags { AppDomainManagerInitializationOptions get(); void set(AppDomainManagerInitializationOptions value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.AppDomainManagerInitializationOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得自訂應用程式定義域管理員的初始設定旗標。</summary>
        <value>列舉值的位元組合，這些值描述要執行的初始設定動作。 預設值為 <see cref="F:System.AppDomainManagerInitializationOptions.None" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializeNewDomain">
      <MemberSignature Language="C#" Value="public virtual void InitializeNewDomain (AppDomainSetup appDomainInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InitializeNewDomain(class System.AppDomainSetup appDomainInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomainManager.InitializeNewDomain(System.AppDomainSetup)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub InitializeNewDomain (appDomainInfo As AppDomainSetup)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void InitializeNewDomain(AppDomainSetup ^ appDomainInfo);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="appDomainInfo" Type="System.AppDomainSetup" />
      </Parameters>
      <Docs>
        <param name="appDomainInfo">物件，包含應用程式定義域初始化資訊。</param>
        <summary>初始化新應用程式定義域。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  請勿使用這個方法來初始化 ASP.NET 的應用程式定義域。 在 ASP.NET 中，組態必須由主應用程式處理。 如果您使用這個方法來初始化應用程式定義域時，會擲回主機<xref:System.InvalidOperationException>它會嘗試初始化應用程式定義域。 例外狀況訊息表示已發生初始設定。  
  
 建構函式之後，立即呼叫此方法。 預設值<xref:System.AppDomainManager.InitializeNewDomain%2A>實作不做任何動作。  自訂實作可以設定內部的類別和委派、 設定與受管理的主機介面的介面，或設定新的事件處理常式<xref:System.AppDomain>。  
  
 此外，增益集啟用的自訂實作可以識別目前<xref:System.AppDomain>做為目標的應用程式網域。  
  
 開頭為[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]，應用程式啟動時，或修改新的應用程式定義域沙箱，您可以使用這個方法，以預設應用程式定義域沙箱。 若要這樣做，請調整<xref:System.Security.Policy.ApplicationTrust.DefaultGrantSet%2A>和<xref:System.Security.Policy.ApplicationTrust.FullTrustAssemblies%2A>屬性<xref:System.Security.Policy.ApplicationTrust>物件指派給<xref:System.AppDomainSetup.ApplicationTrust%2A?displayProperty=nameWithType>屬性`appDomainInfo`，才能初始化應用程式定義域。  
  
> [!NOTE]
>  只授與的組件`FullTrust`，例如在全域組件快取中的組件或已識別為`fullTrustAssemblies`中<xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29?displayProperty=nameWithType>方法可以在載入<xref:System.AppDomainManager.%23ctor%2A>建構函式和<xref:System.AppDomainManager.InitializeNewDomain%2A>方法。  
  
   
  
## Examples  
 下列範例示範的覆寫<xref:System.AppDomainManager.InitializeNewDomain%2A>自訂應用程式定義域管理員的方法。 這個程式碼範例是針對所提供之較大範例的一部分<xref:System.AppDomainManager>類別。  
  
 [!code-csharp[System.AppDomainManager#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.AppDomainManager/CS/customAppDomainManager.cs#2)]
 [!code-vb[System.AppDomainManager#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.AppDomainManager/VB/customAppDomainManager.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>