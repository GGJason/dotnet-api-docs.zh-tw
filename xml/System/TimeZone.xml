<Type Name="TimeZone" FullName="System.TimeZone">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="caaf039a73d0cf0514e89fcdf846526119ecb686" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30728952" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class TimeZone" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit TimeZone extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.TimeZone" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class TimeZone" />
  <TypeSignature Language="C++ CLI" Value="public ref class TimeZone abstract" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示時區。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 時區是地理區域中使用相同的標準時間。  
  
> [!IMPORTANT]
>  您應該盡可能使用<xref:System.TimeZoneInfo>類別而不是<xref:System.TimeZone>類別。  
  
 您可以使用<xref:System.TimeZone>類別來擷取目前的時區的相關資訊，並將時間從本地時間為國際標準時間 (UTC)，反之亦然。 不過，您無法使用<xref:System.TimeZone>類別來代表本機區域以外的時區，或處理日期和時間轉換從一個時區到另一個。 基於此目的，使用<xref:System.TimeZoneInfo>類別。 您可以使用這個類別來擷取在本機系統上，建立自訂時區，並將時間從一個時區轉換成另一個定義任何時區資訊。  
  
 <xref:System.TimeZone>類別支援只有單一日光節約時間調整規則的當地時區。 如此一來，<xref:System.TimeZone>類別可以精確地報告日光節約時間資訊或 UTC 與本地時間之間進行轉換只會針對最新的調整規則的作用中期間。 相反地，<xref:System.TimeZoneInfo>類別支援多個調整規則，這可讓使用歷程記錄的時區資料。  
  
   
  
## Examples  
 下列範例中的參考和選取顯示`TimeZone`類別項目。  
  
 [!code-cpp[System.TimeZone.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeZone.Class/CPP/tzclass.cpp#1)]
 [!code-csharp[System.TimeZone.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone.Class/CS/tzclass.cs#1)]
 [!code-vb[System.TimeZone.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone.Class/VB/tzclass.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>除了提供實作其<see langword="abstract" />成員 (標記<see langword="MustOverride" />在 Visual Basic 中)，請務必類別衍生自<see cref="T:System.TimeZone" />覆寫預設行為<see cref="M:System.TimeZone.ToLocalTime(System.DateTime)" />方法。 這是因為的預設行為<see cref="M:System.TimeZone.ToLocalTime(System.DateTime)" />在.NET Framework 2.0 版不相依於呼叫<see cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />、.NET framework 1.0 和 1.1 版中所顯示的一樣。  如需詳細資訊，請參閱<see cref="M:System.TimeZone.ToLocalTime(System.DateTime)" />方法。</para>
    </block>
    <altmember cref="T:System.DateTime" />
    <altmember cref="T:System.DateTimeOffset" />
    <altmember cref="T:System.TimeZoneInfo" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected TimeZone ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZone.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; TimeZone();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.TimeZone" /> 類別的新執行個體。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentTimeZone">
      <MemberSignature Language="C#" Value="public static TimeZone CurrentTimeZone { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.TimeZone CurrentTimeZone" />
      <MemberSignature Language="DocId" Value="P:System.TimeZone.CurrentTimeZone" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentTimeZone As TimeZone" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property TimeZone ^ CurrentTimeZone { TimeZone ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZone</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得目前電腦的時區。</summary>
        <value>表示目前本地時區的 <see cref="T:System.TimeZone" /> 物件。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.TimeZone.CurrentTimeZone%2A>屬性會對應至<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>屬性。 您應該盡可能使用<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>屬性。  
  
   
  
## Examples  
 下列範例參考`CurrentTimeZone`屬性，並顯示標準時間名稱和當地時區的日光節約時間。  
  
 [!code-cpp[System.TimeZone.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeZone.Class/CPP/tzclass.cpp#1)]
 [!code-csharp[System.TimeZone.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone.Class/CS/tzclass.cs#1)]
 [!code-vb[System.TimeZone.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone.Class/VB/tzclass.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>本地時間區域資料會快取之後<see cref="P:System.TimeZone.CurrentTimeZone" />第一次用來擷取時區資訊。 如果本機系統時區隨後變更，<see cref="P:System.TimeZone.CurrentTimeZone" />屬性並不會反映這項變更。 如果您需要處理時的時區變更您的應用程式正在執行，請使用<see cref="T:System.TimeZoneInfo" />類別並呼叫其<see cref="M:System.TimeZoneInfo.ClearCachedData" />方法。</para>
        </block>
        <altmember cref="P:System.TimeZoneInfo.Local" />
      </Docs>
    </Member>
    <Member MemberName="DaylightName">
      <MemberSignature Language="C#" Value="public abstract string DaylightName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DaylightName" />
      <MemberSignature Language="DocId" Value="P:System.TimeZone.DaylightName" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property DaylightName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ DaylightName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得日光節約時區名稱。</summary>
        <value>日光節約時區名稱。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果日光節約時間不是以時區為準，空字串 ("") 會傳回。  
  
 <xref:System.TimeZone.DaylightName%2A>屬性會對應至<xref:System.TimeZoneInfo.DaylightName%2A?displayProperty=nameWithType>屬性。 您應該盡可能使用<xref:System.TimeZoneInfo.DaylightName%2A?displayProperty=nameWithType>屬性。  
  
   
  
## Examples  
 下列範例中的參考並顯示`DaylightName`屬性目前的時區。  
  
 [!code-cpp[System.TimeZone.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeZone.Class/CPP/tzclass.cpp#1)]
 [!code-csharp[System.TimeZone.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone.Class/CS/tzclass.cs#1)]
 [!code-vb[System.TimeZone.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone.Class/VB/tzclass.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.TimeZoneInfo.DaylightName" />
      </Docs>
    </Member>
    <Member MemberName="GetDaylightChanges">
      <MemberSignature Language="C#" Value="public abstract System.Globalization.DaylightTime GetDaylightChanges (int year);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Globalization.DaylightTime GetDaylightChanges(int32 year) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZone.GetDaylightChanges(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetDaylightChanges (year As Integer) As DaylightTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Globalization::DaylightTime ^ GetDaylightChanges(int year);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.DaylightTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">日光節約時期套用的年份。</param>
        <summary>傳回特定年份的日光節約時期。</summary>
        <returns>
          <see cref="T:System.Globalization.DaylightTime" /> 物件，包含 <paramref name="year" /> 中的日光節約時間開始與結束日期。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 支援只有一個每年的日光節約時間週期。  
  
 如果未在目前的時區使用日光節約時間，傳回值是<xref:System.Globalization.DaylightTime>物件，其中的值<xref:System.Globalization.DaylightTime.Start%2A>和<xref:System.Globalization.DaylightTime.End%2A>是<xref:System.DateTime.MinValue?displayProperty=nameWithType>，和值<xref:System.Globalization.DaylightTime.Delta%2A?displayProperty=nameWithType>是<xref:System.TimeSpan>初始化為 0 刻度。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> 小於 1 或大於 9999。</exception>
        <block subset="none" type="usage">
          <para>因為<see cref="T:System.TimeZone" />類別支援只有一個日光節約時間調整規則，<see cref="M:System.TimeZone.GetDaylightChanges(System.Int32)" />方法會在目前的調整規則套用至任何一年，不論是否調整規則實際上套用至該年份。 假設作業系統本身具有特定年度的精確的資料，更精確的結果所提供的陣列使用<see cref="T:System.TimeZoneInfo.AdjustmentRule" />所傳回的物件<see cref="M:System.TimeZoneInfo.GetAdjustmentRules" />方法。 <see cref="P:System.Globalization.DaylightTime.Start" />， <see cref="P:System.Globalization.DaylightTime.End" />，和<see cref="P:System.Globalization.DaylightTime.Delta" />屬性會對應到<see cref="P:System.TimeZoneInfo.AdjustmentRule.DateStart" />， <see cref="P:System.TimeZoneInfo.AdjustmentRule.DateEnd" />，和<see cref="P:System.TimeZoneInfo.AdjustmentRule.DaylightDelta" />屬性。</para>
        </block>
        <altmember cref="M:System.TimeZoneInfo.GetAdjustmentRules" />
      </Docs>
    </Member>
    <Member MemberName="GetUtcOffset">
      <MemberSignature Language="C#" Value="public abstract TimeSpan GetUtcOffset (DateTime time);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.TimeSpan GetUtcOffset(valuetype System.DateTime time) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetUtcOffset (time As DateTime) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract TimeSpan GetUtcOffset(DateTime time);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="time">日期和時間值。</param>
        <summary>傳回指定之當地時間的 Coordinated Universal Time (UTC) 位移。</summary>
        <returns>Coordinated Universal Time (UTC) 之於 <paramref name="time" /> 的位移。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會傳回位移或差異，之間`time`參數與國際標準時間 (UTC)。 即：  
  
 `time` = UTC + 位移  
  
 方法會將解譯的時區時間`time`根據其<xref:System.DateTime.Kind%2A>屬性。 如果值<xref:System.DateTime.Kind%2A>屬性是<xref:System.DateTimeKind.Local?displayProperty=nameWithType>或<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>，方法會傳回的當地時區位移。 如果值<xref:System.DateTime.Kind%2A>屬性是<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>，方法會傳回位移等於<xref:System.TimeSpan.Zero?displayProperty=nameWithType>。  
  
 當地時區會遵守日光節約時間，如果<xref:System.TimeZone.GetUtcOffset%2A>套用至目前的調整規則`time`時決定的當地時區位移。 也就是所傳回的位移<xref:System.TimeZone.GetUtcOffset%2A>反映是否`time`落在時區標準時間或日光節約時間。  
  
> [!NOTE]
>  <xref:System.TimeZone.GetUtcOffset%2A>方法能夠辨識只有目前日光節約時間調整規則的當地時區。 如此一來，這樣會保證正確傳回本地時間的 UTC 位移，只有最新的調整規則生效的期間。 它可能會傳回不正確的結果，如果`time`是歷程記錄的日期和時間值，受限於先前的調整規則。  
  
 <xref:System.TimeZone.GetUtcOffset%2A>方法對應於<xref:System.TimeZoneInfo.GetUtcOffset%2A?displayProperty=nameWithType>方法。 您應該盡可能使用<xref:System.TimeZoneInfo.GetUtcOffset%2A?displayProperty=nameWithType>方法。  
  
 因為所代表的日期和時間值`time`此值與 UTC 相差的並未緊密，本機或未指定的日期和時間值可以傳回不同的位移的值時執行不同的電腦上或在同一部電腦上執行時不同的時區。 如果不想要這項行為，請使用<xref:System.DateTimeOffset>改為值。 <xref:System.DateTimeOffset>資料型別緊密結合的日期和時間值，其位移與 utc 之間。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeZoneInfo.GetUtcOffset(System.DateTime)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsDaylightSavingTime">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>傳回數值，指示指定的日期和時間是否在日光節約時期之內。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public virtual bool IsDaylightSavingTime (DateTime time);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsDaylightSavingTime(valuetype System.DateTime time) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZone.IsDaylightSavingTime(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsDaylightSavingTime (time As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsDaylightSavingTime(DateTime time);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="time">日期和時間。</param>
        <summary>傳回數值，指示指定的日期和時間是否在日光節約時期之內。</summary>
        <returns>
          如果 <paramref name="time" /> 在日光節約時期內，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 要套用日光節約時間週期的年份衍生自`time`參數。  
  
 因為<xref:System.TimeZone>類別支援單一日光節約時間調整規則<xref:System.TimeZone.IsDaylightSavingTime%28System.DateTime%29>方法會在目前的調整規則套用至任何日期，無論調整規則是作用中在該日期。 假設作業系統本身具有精確歷史日光節約時間資料，更精確的結果是可使用<xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType>方法。 您應該盡可能使用<xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType>方法。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="IsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public static bool IsDaylightSavingTime (DateTime time, System.Globalization.DaylightTime daylightTimes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDaylightSavingTime(valuetype System.DateTime time, class System.Globalization.DaylightTime daylightTimes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZone.IsDaylightSavingTime(System.DateTime,System.Globalization.DaylightTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsDaylightSavingTime (time As DateTime, daylightTimes As DaylightTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDaylightSavingTime(DateTime time, System::Globalization::DaylightTime ^ daylightTimes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.DateTime" />
        <Parameter Name="daylightTimes" Type="System.Globalization.DaylightTime" />
      </Parameters>
      <Docs>
        <param name="time">日期和時間。</param>
        <param name="daylightTimes">To be added.</param>
        <summary>傳回數值，指示指定的日期和時間是否在指定的日光節約時期之內。</summary>
        <returns>
          如果 <paramref name="time" /> 是在 <paramref name="daylightTimes" /> 中，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType>方法提供的這個多載相同的功能<xref:System.TimeZone.IsDaylightSavingTime%2A>方法。 您應該盡可能使用<xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType>方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="daylightTimes" /> 為 <see langword="null" />。</exception>
        <altmember cref="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="StandardName">
      <MemberSignature Language="C#" Value="public abstract string StandardName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StandardName" />
      <MemberSignature Language="DocId" Value="P:System.TimeZone.StandardName" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property StandardName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ StandardName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得標準時區名稱。</summary>
        <value>標準時區名稱。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.TimeZone.StandardName%2A>屬性會對應至<xref:System.TimeZoneInfo.StandardName%2A?displayProperty=nameWithType>屬性。 您應該盡可能使用<xref:System.TimeZoneInfo.StandardName%2A?displayProperty=nameWithType>屬性。  
  
   
  
## Examples  
 下列範例中的參考並顯示`StandardName`屬性目前的時區。  
  
 [!code-cpp[System.TimeZone.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeZone.Class/CPP/tzclass.cpp#1)]
 [!code-csharp[System.TimeZone.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone.Class/CS/tzclass.cs#1)]
 [!code-vb[System.TimeZone.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone.Class/VB/tzclass.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">嘗試將這個屬性設定為 <see langword="null" />。</exception>
        <altmember cref="P:System.TimeZoneInfo.StandardName" />
      </Docs>
    </Member>
    <Member MemberName="ToLocalTime">
      <MemberSignature Language="C#" Value="public virtual DateTime ToLocalTime (DateTime time);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.DateTime ToLocalTime(valuetype System.DateTime time) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZone.ToLocalTime(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ToLocalTime (time As DateTime) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual DateTime ToLocalTime(DateTime time);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="time">Coordinated Universal Time (UTC) 時間。</param>
        <summary>傳回對應到指定之日期與時間值的本地時間。</summary>
        <returns>
          <see cref="T:System.DateTime" /> 物件，其值為對應至 <paramref name="time" /> 的本地時間。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下表顯示之間的關聯性`time`參數和<xref:System.DateTime>這個方法所傳回的值。  
  
|`time` 參數|行為|傳回值|  
|----------------------|--------------|------------------|  
|國際標準時間 (UTC) 時間 (<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>)。|將時間轉換從 UTC 到本地時間。|<xref:System.DateTime> 物件，其值為對應至 `time` 的本地時間。|  
|本地時間 (<xref:System.DateTimeKind.Local?displayProperty=nameWithType>)。|不需要轉換。|相同<xref:System.DateTime>所代表值`time`參數。|  
|未指定的時間 (<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>)。|假設時間為 UTC，並將它轉換從 UTC 到本地時間。|<xref:System.DateTime> 物件，其值為對應至 `time` 的本地時間。|  
  
 當地時區會遵守日光節約時間，如果<xref:System.TimeZone.ToLocalTime%2A>套用至目前的調整規則`time`執行轉換時。  
  
> [!NOTE]
>  <xref:System.TimeZone.ToLocalTime%2A>方法能夠辨識只有目前日光節約時間調整規則的當地時區。 如此一來，這樣會保證正確傳回本地時間對應到特定的 UTC 時間，只有最新的調整規則生效的期間。 它可能會傳回不正確的結果，如果`time`是歷程記錄的日期和時間值，受限於先前的調整規則。  
  
 <xref:System.TimeZone.ToLocalTime%2A>方法對應於<xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A?displayProperty=nameWithType>方法及其`destinationTimeZone`參數設定為<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>。 您應該盡可能使用<xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A?displayProperty=nameWithType>方法。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>雖然並非必要，在大部分情況下執行.NET Framework 2.0 版之下的衍生的類別應該覆寫這個方法的預設實作。 在.NET framework 1.0 和 1.1 版，<see langword="ToLocalTime" />方法呼叫<see cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />方法並傳回本地時間時，針對日光節約時間調整。 不過，從.NET Framework 2.0 開始，預設實作的行為取決於<see cref="P:System.DateTime.Kind" />屬性<paramref name="time" />參數。 如果其值為<see cref="F:System.DateTimeKind.Local" />，這個方法會傳回<paramref name="time" />不變。 如果其值為 <see cref="F:System.DateTimeKind.Utc" />或<see cref="F:System.DateTimeKind.Unspecified" />，這個方法會假設<paramref name="time" />為 UTC，並將它轉換為本機系統時間，而不需呼叫<see cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />方法。  
  
 下列程式碼提供簡單的覆寫的預設實作的<see langword="ToLocalTime" />方法。 在此程式碼，<see langword="internalTimeZone" />變數代表的私用執行個體<see langword="TimeZone" />類別：  
  
 [!code-csharp[System.TimeZone.ToLocalTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone.ToLocalTime/CS/TimeZone_ToLocalTime.cs#1)]
 [!code-vb[System.TimeZone.ToLocalTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone.ToLocalTime/VB/TimeZone_ToLocalTime.vb#1)]</para>
        </block>
        <altmember cref="M:System.TimeZoneInfo.ConvertTimeFromUtc(System.DateTime,System.TimeZoneInfo)" />
      </Docs>
    </Member>
    <Member MemberName="ToUniversalTime">
      <MemberSignature Language="C#" Value="public virtual DateTime ToUniversalTime (DateTime time);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.DateTime ToUniversalTime(valuetype System.DateTime time) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZone.ToUniversalTime(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ToUniversalTime (time As DateTime) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual DateTime ToUniversalTime(DateTime time);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="time">日期和時間。</param>
        <summary>傳回對應到某個指定時間的 Coordinated Universal Time (UTC)。</summary>
        <returns>
          <see cref="T:System.DateTime" /> 物件，其值是對應到 <paramref name="time" /> 的 Coordinated Universal Time (UTC)。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當地時區會遵守日光節約時間，如果<xref:System.TimeZone.ToUniversalTime%2A>套用至目前的調整規則`time`參數執行轉換時。  
  
> [!NOTE]
>  <xref:System.TimeZone.ToUniversalTime%2A>方法能夠辨識只有目前日光節約時間調整規則的當地時區。 如此一來，這樣會保證正確傳回 Coordinated Universal Time (UTC) 對應到特定的本機時間，只有最新的調整規則生效的期間。 它可能會傳回不正確的結果，如果`time`是歷程記錄的日期和時間值，受限於先前的調整規則。  
  
 如果`time`參數是模稜兩可的時間，方法會假設它是標準時間。 （模稜兩可的時間是指可以對應至標準時間或本地時區的日光節約時間。）如果`time`是無效的時間，該方法只會減去本地時間的本地時區的 UTC 位移傳回 UTC。 （不正確的時間是指因為日光節約時間調整規則的應用程式不存在。）  
  
 因為`time`解譯根據目前時區目前系統上，這個方法所傳回的時間與日期可以不同的應用程式會執行不同的電腦上或在相同電腦上不同時區。 在其中的日期和時間值必須代表單一的明確的時間點的情況下，使用<xref:System.DateTimeOffset>值代表當地時間。  
  
 <xref:System.TimeZone.ToUniversalTime%2A>方法對應於<xref:System.TimeZoneInfo.ConvertTimeToUtc%28System.DateTime%29?displayProperty=nameWithType>方法多載<xref:System.DateTime>參數其<xref:System.DateTime.Kind%2A>屬性不等於<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>。 您應該盡可能使用<xref:System.TimeZoneInfo.ConvertTimeToUtc%28System.DateTime%29?displayProperty=nameWithType>方法多載。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime)" />
      </Docs>
    </Member>
  </Members>
</Type>