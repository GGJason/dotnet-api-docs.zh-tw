<Type Name="ValueType" FullName="System.ValueType">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c24f4b0827545a4af826fce98ab3f9d80c19d91d" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48731473" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class ValueType" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit ValueType extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ValueType" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ValueType" />
  <TypeSignature Language="C++ CLI" Value="public ref class ValueType abstract" />
  <TypeSignature Language="F#" Value="type ValueType = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="b9be0-101">提供實值類型的基底類別。</span>
      <span class="sxs-lookup">
        <span data-stu-id="b9be0-101">Provides the base class for value types.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b9be0-102"><xref:System.ValueType> 覆寫虛擬方法，從<xref:System.Object>較適合實作實值型別。</span><span class="sxs-lookup"><span data-stu-id="b9be0-102"><xref:System.ValueType> overrides the virtual methods from <xref:System.Object> with more appropriate implementations for value types.</span></span> <span data-ttu-id="b9be0-103">另請參閱<xref:System.Enum>，該項則繼承自<xref:System.ValueType>。</span><span class="sxs-lookup"><span data-stu-id="b9be0-103">See also <xref:System.Enum>, which inherits from <xref:System.ValueType>.</span></span>  
  
 <span data-ttu-id="b9be0-104">資料類型分成實值型別和參考型別。</span><span class="sxs-lookup"><span data-stu-id="b9be0-104">Data types are separated into value types and reference types.</span></span> <span data-ttu-id="b9be0-105">實值型別是堆疊配置或配置結構中的內嵌。</span><span class="sxs-lookup"><span data-stu-id="b9be0-105">Value types are either stack-allocated or allocated inline in a structure.</span></span> <span data-ttu-id="b9be0-106">堆積配置是參考型別。</span><span class="sxs-lookup"><span data-stu-id="b9be0-106">Reference types are heap-allocated.</span></span> <span data-ttu-id="b9be0-107">參考和實值類型衍生自的 ultimate 基底類別<xref:System.Object>。</span><span class="sxs-lookup"><span data-stu-id="b9be0-107">Both reference and value types are derived from the ultimate base class <xref:System.Object>.</span></span> <span data-ttu-id="b9be0-108">在其所在的實值型別，使其行為類似物件所需的情況下，包裝函式，它會看起來像是參考物件配置到堆積上，而值類型的值會複製到它的實值型別。</span><span class="sxs-lookup"><span data-stu-id="b9be0-108">In cases where it is necessary for a value type to behave like an object, a wrapper that makes the value type look like a reference object is allocated on the heap, and the value type's value is copied into it.</span></span> <span data-ttu-id="b9be0-109">讓系統知道它包含實值型別，則會標示為包裝函式。</span><span class="sxs-lookup"><span data-stu-id="b9be0-109">The wrapper is marked so the system knows that it contains a value type.</span></span> <span data-ttu-id="b9be0-110">此程序稱為 boxing，以及反向的程序稱為 unboxing。</span><span class="sxs-lookup"><span data-stu-id="b9be0-110">This process is known as boxing, and the reverse process is known as unboxing.</span></span> <span data-ttu-id="b9be0-111">Boxing 和 unboxing 可讓任何被視為物件的型別。</span><span class="sxs-lookup"><span data-stu-id="b9be0-111">Boxing and unboxing allow any type to be treated as an object.</span></span>  
  
 <span data-ttu-id="b9be0-112">雖然<xref:System.ValueType>是隱含的基底類別的實值型別，您無法建立繼承自類別<xref:System.ValueType>直接。</span><span class="sxs-lookup"><span data-stu-id="b9be0-112">Although <xref:System.ValueType> is the implicit base class for value types, you cannot create a class that inherits from <xref:System.ValueType> directly.</span></span> <span data-ttu-id="b9be0-113">相反地，個別的編譯器會提供語言關鍵字，或建構 (例如`struct`在 C# 和`Structure`...`End Structure`</span><span class="sxs-lookup"><span data-stu-id="b9be0-113">Instead, individual compilers provide a language keyword or construct (such as `struct` in C# and `Structure`…`End Structure`</span></span> <span data-ttu-id="b9be0-114">在 Visual Basic)，以支援實值型別建立。</span><span class="sxs-lookup"><span data-stu-id="b9be0-114">in Visual Basic) to support the creation of value types.</span></span>  
  
 <span data-ttu-id="b9be0-115">除了做為實值型別在.NET Framework 中，基底類別<xref:System.ValueType>結構通常不會使用直接在程式碼中。</span><span class="sxs-lookup"><span data-stu-id="b9be0-115">Aside from serving as the base class for value types in the .NET Framework, the <xref:System.ValueType> structure is generally not used directly in code.</span></span> <span data-ttu-id="b9be0-116">不過，它可用來當做方法呼叫中的參數來限制可能的引數以實值型別，而不是所有物件，或允許的方法來處理許多不同的值類型。</span><span class="sxs-lookup"><span data-stu-id="b9be0-116">However, it can be used as a parameter in method calls to restrict possible arguments to value types instead of all objects, or to permit a method to handle a number of different value types.</span></span> <span data-ttu-id="b9be0-117">下列範例說明如何<xref:System.ValueType>防止參考型別傳遞至方法。</span><span class="sxs-lookup"><span data-stu-id="b9be0-117">The following example illustrates how <xref:System.ValueType> prevents reference types from being passed to methods.</span></span> <span data-ttu-id="b9be0-118">它會定義名為類別`Utility`，其中包含四種方法： `IsNumeric`，這表示其引數是否是一個數字，`IsInteger`，，指出其引數是否為整數的類型，`IsFloat`，這表示其引數是否是浮點數; 和`Compare`，表示兩個數值之間的關聯性。</span><span class="sxs-lookup"><span data-stu-id="b9be0-118">It defines a class named `Utility` that contains four methods: `IsNumeric`, which indicates whether its argument is a number; `IsInteger`, which indicates whether its argument is an integer; `IsFloat`, which indicates whether its argument is a floating-point number; and `Compare`, which indicates the relationship between two numeric values.</span></span> <span data-ttu-id="b9be0-119">每個案例中，在方法參數屬於型別<xref:System.ValueType>，和參考型別無法傳遞至方法。</span><span class="sxs-lookup"><span data-stu-id="b9be0-119">In each case, the method parameters are of type <xref:System.ValueType>, and reference types are prevented from being passed to the methods.</span></span>  
  
 [!code-csharp[System.ValueType.Structure#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.valuetype.structure/cs/example1.cs#1)]
 [!code-vb[System.ValueType.Structure#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.valuetype.structure/vb/example1.vb#1)]  
  
 <span data-ttu-id="b9be0-120">下列範例說明的方法呼叫`Utility`類別。</span><span class="sxs-lookup"><span data-stu-id="b9be0-120">The following example illustrates calls to the methods of the `Utility` class.</span></span>  
  
 [!code-csharp[System.ValueType.Structure#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.valuetype.structure/cs/example1.cs#2)]
 [!code-vb[System.ValueType.Structure#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.valuetype.structure/vb/example1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Object" />
    <altmember cref="T:System.Enum" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ValueType ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ValueType();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b9be0-121">初始化 <see cref="T:System.ValueType" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b9be0-121">Initializes a new instance of the <see cref="T:System.ValueType" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="valueType.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="b9be0-122">要與目前執行個體比較的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b9be0-122">The object to compare with the current instance.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b9be0-123">指示這個執行個體和指定的物件是否相等。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b9be0-123">Indicates whether this instance and a specified object are equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b9be0-124">如果 <see langword="true" /> 和這個執行個體為同型別並表示相同的值，則為 <paramref name="obj" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b9be0-124">
              <see langword="true" /> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b9be0-125"><xref:System.ValueType.Equals%28System.Object%29?displayProperty=nameWithType>方法覆寫<xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType>，並提供.NET Framework 中的所有實值類型的實值相等的預設實作。</span><span class="sxs-lookup"><span data-stu-id="b9be0-125">The <xref:System.ValueType.Equals%28System.Object%29?displayProperty=nameWithType> method overrides <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> and provides the default implementation of value equality for all value types in the .NET Framework.</span></span>  
  
 <span data-ttu-id="b9be0-126">如果沒有目前的執行個體的欄位和`obj`是參考型別，<xref:System.ValueType.Equals%2A>方法會逐位元組比較兩個物件的記憶體中。</span><span class="sxs-lookup"><span data-stu-id="b9be0-126">If none of the fields of the current instance and `obj` are reference types, the <xref:System.ValueType.Equals%2A> method performs a byte-by-byte comparison of the two objects in memory.</span></span> <span data-ttu-id="b9be0-127">否則，它會使用反映來比較之對應欄位`obj`與這個執行個體。</span><span class="sxs-lookup"><span data-stu-id="b9be0-127">Otherwise, it uses reflection to compare the corresponding fields of `obj` and this instance.</span></span>  
  
> [!TIP]
>  <span data-ttu-id="b9be0-128">特別是如果您的實值型別包含參考類型的欄位，您應該覆寫<xref:System.ValueType.Equals%28System.Object%29>方法。</span><span class="sxs-lookup"><span data-stu-id="b9be0-128">Particularly if your value type contains fields that are reference types, you should override the <xref:System.ValueType.Equals%28System.Object%29> method.</span></span> <span data-ttu-id="b9be0-129">這可以改善效能，並可讓您更能代表等號比較類型的意義。</span><span class="sxs-lookup"><span data-stu-id="b9be0-129">This can improve performance and enable you to more closely represent the meaning of equality for the type.</span></span>  
  
## <a name="notes-for-the-includewrtincludeswrt-mdmd"></a><span data-ttu-id="b9be0-130">資訊 [!INCLUDE[wrt](~/includes/wrt-md.md)]</span><span class="sxs-lookup"><span data-stu-id="b9be0-130">Notes for the [!INCLUDE[wrt](~/includes/wrt-md.md)]</span></span>  
 <span data-ttu-id="b9be0-131">當您呼叫<xref:System.ValueType.Equals%2A>方法[!INCLUDE[wrt](~/includes/wrt-md.md)]結構，它會提供預設行為不覆寫的實值型別<xref:System.ValueType.Equals%2A>。</span><span class="sxs-lookup"><span data-stu-id="b9be0-131">When you call the <xref:System.ValueType.Equals%2A> method on a [!INCLUDE[wrt](~/includes/wrt-md.md)] structure, it provides the default behavior for value types that don’t override <xref:System.ValueType.Equals%2A>.</span></span> <span data-ttu-id="b9be0-132">這是.NET Framework 提供的支援之一[!INCLUDE[wrt](~/includes/wrt-md.md)](請參閱 < [.NET Framework 支援的 Windows 市集應用程式和 Windows 執行階段](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md))。</span><span class="sxs-lookup"><span data-stu-id="b9be0-132">This is part of the support that the .NET Framework provides for the [!INCLUDE[wrt](~/includes/wrt-md.md)] (see [.NET Framework Support for Windows Store Apps and Windows Runtime](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)).</span></span> [!INCLUDE[wrt](~/includes/wrt-md.md)] <span data-ttu-id="b9be0-133">結構無法覆寫<xref:System.ValueType.Equals%2A>，即使使用 C# 或 Visual Basic 中寫入，因為它們不能有方法。</span><span class="sxs-lookup"><span data-stu-id="b9be0-133"> structures can’t override <xref:System.ValueType.Equals%2A>, even if they’re written with C# or Visual Basic, because they can’t have methods.</span></span> <span data-ttu-id="b9be0-134">(此外，結構中[!INCLUDE[wrt](~/includes/wrt-md.md)]本身不繼承<xref:System.ValueType>。)不過，它們似乎具有<xref:System.ValueType.ToString%2A>， <xref:System.ValueType.Equals%2A>，和<xref:System.ValueType.GetHashCode%2A>方法時您用於您的 C# 或 Visual Basic 程式碼，和.NET Framework 會提供這些方法中的預設行為。</span><span class="sxs-lookup"><span data-stu-id="b9be0-134">(In addition, structures in the [!INCLUDE[wrt](~/includes/wrt-md.md)] itself don’t inherit <xref:System.ValueType>.) However, they appear to have <xref:System.ValueType.ToString%2A>, <xref:System.ValueType.Equals%2A>, and <xref:System.ValueType.GetHashCode%2A> methods when you use them in your C# or Visual Basic code, and the .NET Framework provides the default behavior for these methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b9be0-135">下列範例示範如何<xref:System.ValueType.Equals%2A>衍生的實值型別可覆寫方法。</span><span class="sxs-lookup"><span data-stu-id="b9be0-135">The following example demonstrates how the <xref:System.ValueType.Equals%2A> method can be overridden by a derived value type.</span></span>  
  
 [!code-cpp[ValueType.Equals Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/ValueType.Equals Example/CPP/source.cpp#1)]
 [!code-csharp[ValueType.Equals Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/ValueType.Equals Example/CS/source.cs#1)]
 [!code-vb[ValueType.Equals Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ValueType.Equals Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="valueType.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b9be0-136">傳回這個執行個體的雜湊碼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b9be0-136">Returns the hash code for this instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b9be0-137">32 位元帶正負號的整數，其為這個執行個體的雜湊碼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b9be0-137">A 32-bit signed integer that is the hash code for this instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b9be0-138"><xref:System.ValueType.GetHashCode%2A>方法會套用到衍生自<xref:System.ValueType>。</span><span class="sxs-lookup"><span data-stu-id="b9be0-138">The <xref:System.ValueType.GetHashCode%2A> method applies to types derived from <xref:System.ValueType>.</span></span> <span data-ttu-id="b9be0-139">衍生型別的一個或多個欄位用來計算傳回的值。</span><span class="sxs-lookup"><span data-stu-id="b9be0-139">One or more fields of the derived type is used to calculate the return value.</span></span> <span data-ttu-id="b9be0-140">如果您呼叫衍生的型別`GetHashCode`方法，傳回值是不可能是適合用為雜湊表中的索引鍵。</span><span class="sxs-lookup"><span data-stu-id="b9be0-140">If you call the derived type's `GetHashCode` method, the return value is not likely to be suitable for use as a key in a hash table.</span></span> <span data-ttu-id="b9be0-141">此外，如果一或多個這些欄位的值變更時，傳回的值可能會變成不適合用於雜湊表中的索引鍵。</span><span class="sxs-lookup"><span data-stu-id="b9be0-141">Additionally, if the value of one or more of those fields changes, the return value might become unsuitable for use as a key in a hash table.</span></span> <span data-ttu-id="b9be0-142">在任一情況下，請考慮撰寫您自己實作<xref:System.ValueType.GetHashCode%2A>更能代表類型的雜湊碼的概念的方法。</span><span class="sxs-lookup"><span data-stu-id="b9be0-142">In either case, consider writing your own implementation of the <xref:System.ValueType.GetHashCode%2A> method that more closely represents the concept of a hash code for the type.</span></span>  
  
 <span data-ttu-id="b9be0-143">如需詳細資訊，請參閱 <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType> 和<xref:System.Collections.Hashtable?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b9be0-143">For more information, see <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>, and <xref:System.Collections.Hashtable?displayProperty=nameWithType>.</span></span>  
  
## <a name="notes-for-the-includewrtincludeswrt-mdmd"></a><span data-ttu-id="b9be0-144">資訊 [!INCLUDE[wrt](~/includes/wrt-md.md)]</span><span class="sxs-lookup"><span data-stu-id="b9be0-144">Notes for the [!INCLUDE[wrt](~/includes/wrt-md.md)]</span></span>  
 <span data-ttu-id="b9be0-145">當您呼叫<xref:System.ValueType.GetHashCode%2A>方法[!INCLUDE[wrt](~/includes/wrt-md.md)]結構，它會提供預設行為不覆寫的實值型別<xref:System.ValueType.GetHashCode%2A>。</span><span class="sxs-lookup"><span data-stu-id="b9be0-145">When you call the <xref:System.ValueType.GetHashCode%2A> method on a [!INCLUDE[wrt](~/includes/wrt-md.md)] structure, it provides the default behavior for value types that don’t override <xref:System.ValueType.GetHashCode%2A>.</span></span> <span data-ttu-id="b9be0-146">這是.NET Framework 提供的支援之一[!INCLUDE[wrt](~/includes/wrt-md.md)](請參閱 < [.NET Framework 支援的 Windows 市集應用程式和 Windows 執行階段](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md))。</span><span class="sxs-lookup"><span data-stu-id="b9be0-146">This is part of the support that the .NET Framework provides for the [!INCLUDE[wrt](~/includes/wrt-md.md)] (see [.NET Framework Support for Windows Store Apps and Windows Runtime](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)).</span></span> [!INCLUDE[wrt](~/includes/wrt-md.md)] <span data-ttu-id="b9be0-147">結構無法覆寫<xref:System.ValueType.GetHashCode%2A>，即使使用 C# 或 Visual Basic 中寫入，因為它們不能有方法。</span><span class="sxs-lookup"><span data-stu-id="b9be0-147"> structures can’t override <xref:System.ValueType.GetHashCode%2A>, even if they’re written with C# or Visual Basic, because they can’t have methods.</span></span> <span data-ttu-id="b9be0-148">(此外，結構中[!INCLUDE[wrt](~/includes/wrt-md.md)]本身不繼承<xref:System.ValueType>。)不過，它們似乎具有<xref:System.ValueType.ToString%2A>， <xref:System.ValueType.Equals%2A>，和<xref:System.ValueType.GetHashCode%2A>方法時您用於您的 C# 或 Visual Basic 程式碼，和.NET Framework 會提供這些方法中的預設行為。</span><span class="sxs-lookup"><span data-stu-id="b9be0-148">(In addition, structures in the [!INCLUDE[wrt](~/includes/wrt-md.md)] itself don’t inherit <xref:System.ValueType>.) However, they appear to have <xref:System.ValueType.ToString%2A>, <xref:System.ValueType.Equals%2A>, and <xref:System.ValueType.GetHashCode%2A> methods when you use them in your C# or Visual Basic code, and the .NET Framework provides the default behavior for these methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b9be0-149">下列範例示範如何<xref:System.ValueType.GetHashCode%2A>衍生的實值型別可覆寫方法。</span><span class="sxs-lookup"><span data-stu-id="b9be0-149">The following example demonstrates how the <xref:System.ValueType.GetHashCode%2A> method can be overridden by a derived value type.</span></span>  
  
 [!code-cpp[ValueType.Equals Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/ValueType.Equals Example/CPP/source.cpp#1)]
 [!code-csharp[ValueType.Equals Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/ValueType.Equals Example/CS/source.cs#1)]
 [!code-vb[ValueType.Equals Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ValueType.Equals Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="valueType.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b9be0-150">傳回此執行個體的完整類型名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b9be0-150">Returns the fully qualified type name of this instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b9be0-151">完整類型名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b9be0-151">The fully qualified type name.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b9be0-152"><xref:System.ValueType.ToString%2A?displayProperty=nameWithType>方法覆寫<xref:System.Object.ToString%2A?displayProperty=nameWithType>方法，並提供的預設實作`ToString`實值類型的方法。</span><span class="sxs-lookup"><span data-stu-id="b9be0-152">The <xref:System.ValueType.ToString%2A?displayProperty=nameWithType> method overrides the <xref:System.Object.ToString%2A?displayProperty=nameWithType> method and provides the default implementation of the `ToString` method for value types.</span></span> <span data-ttu-id="b9be0-153">(實值型別所定義的型別`struct`關鍵字在 C# 中，以及由`Structure`...`End Structure`建構在 Visual Basic 中。)在功能上，不過，實作是相同的<xref:System.Object.ToString%2A?displayProperty=nameWithType>: 方法會傳回完整型別名稱。</span><span class="sxs-lookup"><span data-stu-id="b9be0-153">(Value types are types defined by the `struct` keyword in C#, and by the `Structure`...`End Structure` construct in Visual Basic.) Functionally, however, the implementation is that same as that of <xref:System.Object.ToString%2A?displayProperty=nameWithType>: the method returns the fully qualified type name.</span></span>  
  
 <span data-ttu-id="b9be0-154">值所定義的型別`struct`C# 關鍵字和`Structure`...`End Structure`在 Visual Basic 中的建構通常會覆寫<xref:System.ValueType.ToString%2A?displayProperty=nameWithType>方法，以提供更有意義的字串表示的實值型別。</span><span class="sxs-lookup"><span data-stu-id="b9be0-154">Value types defined by the `struct` keyword in C# and the `Structure`...`End Structure` construct in Visual Basic typically override the <xref:System.ValueType.ToString%2A?displayProperty=nameWithType> method to provide a more meaningful string representation of the value type.</span></span> <span data-ttu-id="b9be0-155">下列範例會說明其間的差異。</span><span class="sxs-lookup"><span data-stu-id="b9be0-155">The following example illustrates the difference.</span></span> <span data-ttu-id="b9be0-156">它會定義兩個實值型別，`EmployeeA`並`EmployeeB`，會建立每一個執行個體，並呼叫其`ToString`方法。</span><span class="sxs-lookup"><span data-stu-id="b9be0-156">It defines two value types, `EmployeeA` and `EmployeeB`, creates an instance of each, and calls its `ToString` method.</span></span> <span data-ttu-id="b9be0-157">因為`EmployeeA`結構未覆寫<xref:System.ValueType.ToString%2A?displayProperty=nameWithType>方法，它會顯示完整的型別名稱。</span><span class="sxs-lookup"><span data-stu-id="b9be0-157">Because the `EmployeeA` structure does not override the <xref:System.ValueType.ToString%2A?displayProperty=nameWithType> method, it displays only the fully qualified type name.</span></span> <span data-ttu-id="b9be0-158">`EmployeeB.ToString`方法，相反地，提供物件的有意義資訊。</span><span class="sxs-lookup"><span data-stu-id="b9be0-158">The `EmployeeB.ToString` method, on the other hand, provides meaningful information about the object.</span></span>  
  
 [!code-csharp[System.ValueType.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ValueType.ToString/cs/ToString2.cs#1)]
 [!code-vb[System.ValueType.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ValueType.ToString/vb/ToString2.vb#1)]  
  
 <span data-ttu-id="b9be0-159">請注意，雖然列舉型別也是實值型別，它們衍生自<xref:System.Enum>類別，它會覆寫<xref:System.ValueType.ToString%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b9be0-159">Note that, although enumeration types are also value types, they derive from the <xref:System.Enum> class, which overrides  <xref:System.ValueType.ToString%2A?displayProperty=nameWithType>.</span></span>  
  
## <a name="notes-for-the-windows-runtime"></a><span data-ttu-id="b9be0-160">Windows 執行階段的相關資訊</span><span class="sxs-lookup"><span data-stu-id="b9be0-160">Notes for the Windows Runtime</span></span>  
 <span data-ttu-id="b9be0-161">當您呼叫<xref:System.ValueType.ToString%2A>方法[!INCLUDE[wrt](~/includes/wrt-md.md)]結構，它會提供預設行為不覆寫的實值型別<xref:System.ValueType.ToString%2A>。</span><span class="sxs-lookup"><span data-stu-id="b9be0-161">When you call the <xref:System.ValueType.ToString%2A> method on a [!INCLUDE[wrt](~/includes/wrt-md.md)] structure, it provides the default behavior for value types that don’t override <xref:System.ValueType.ToString%2A>.</span></span> <span data-ttu-id="b9be0-162">這是.NET Framework 提供的支援之一[!INCLUDE[wrt](~/includes/wrt-md.md)](請參閱 < [.NET Framework 支援的 Windows 市集應用程式和 Windows 執行階段](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md))。</span><span class="sxs-lookup"><span data-stu-id="b9be0-162">This is part of the support that the .NET Framework provides for the [!INCLUDE[wrt](~/includes/wrt-md.md)] (see [.NET Framework Support for Windows Store Apps and Windows Runtime](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)).</span></span> [!INCLUDE[wrt](~/includes/wrt-md.md)] <span data-ttu-id="b9be0-163">結構無法覆寫<xref:System.ValueType.ToString%2A>，即使使用 C# 或 Visual Basic 中寫入，因為它們不能有方法。</span><span class="sxs-lookup"><span data-stu-id="b9be0-163"> structures can’t override <xref:System.ValueType.ToString%2A>, even if they’re written with C# or Visual Basic, because they can’t have methods.</span></span> <span data-ttu-id="b9be0-164">(此外，結構中[!INCLUDE[wrt](~/includes/wrt-md.md)]本身不繼承<xref:System.ValueType>。)不過，它們似乎具有<xref:System.ValueType.ToString%2A>， <xref:System.ValueType.Equals%2A>，和<xref:System.ValueType.GetHashCode%2A>方法時您用於您的 C# 或 Visual Basic 程式碼，和.NET Framework 會提供這些方法中的預設行為。</span><span class="sxs-lookup"><span data-stu-id="b9be0-164">(In addition, structures in the [!INCLUDE[wrt](~/includes/wrt-md.md)] itself don’t inherit <xref:System.ValueType>.) However, they appear to have <xref:System.ValueType.ToString%2A>, <xref:System.ValueType.Equals%2A>, and <xref:System.ValueType.GetHashCode%2A> methods when you use them in your C# or Visual Basic code, and the .NET Framework provides the default behavior for these methods.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>