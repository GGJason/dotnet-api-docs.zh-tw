<Type Name="ValueType" FullName="System.ValueType">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="90c8c20799ff15aac3b07f147a974ce31a576b37" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39943656" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class ValueType" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit ValueType extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ValueType" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ValueType" />
  <TypeSignature Language="C++ CLI" Value="public ref class ValueType abstract" />
  <TypeSignature Language="F#" Value="type ValueType = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>提供實值類型的基底類別。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ValueType> 覆寫虛擬方法，從<xref:System.Object>較適合實作實值型別。 另請參閱<xref:System.Enum>，該項則繼承自<xref:System.ValueType>。  
  
 資料類型分成實值型別和參考型別。 實值型別是堆疊配置或配置結構中的內嵌。 堆積配置是參考型別。 參考和實值類型衍生自的 ultimate 基底類別<xref:System.Object>。 在其所在的實值型別，使其行為類似物件所需的情況下，包裝函式，它會看起來像是參考物件配置到堆積上，而值類型的值會複製到它的實值型別。 讓系統知道它包含實值型別，則會標示為包裝函式。 此程序稱為 boxing，以及反向的程序稱為 unboxing。 Boxing 和 unboxing 可讓任何被視為物件的型別。  
  
 雖然<xref:System.ValueType>是隱含的基底類別的實值型別，您無法建立繼承自類別<xref:System.ValueType>直接。 相反地，個別的編譯器會提供語言關鍵字，或建構 (例如`struct`在 C# 和`Structure`...`End Structure` 在 Visual Basic)，以支援實值型別建立。  
  
 除了做為實值型別在.NET Framework 中，基底類別<xref:System.ValueType>結構通常不會使用直接在程式碼中。 不過，它可用來當做方法呼叫中的參數來限制可能的引數以實值型別，而不是所有物件，或允許的方法來處理許多不同的值類型。 下列範例說明如何<xref:System.ValueType>防止參考型別傳遞至方法。 它會定義名為類別`Utility`，其中包含四種方法： `IsNumeric`，這表示其引數是否是一個數字，`IsInteger`，，指出其引數是否為整數的類型，`IsFloat`，這表示其引數是否是浮點數; 和`Compare`，表示兩個數值之間的關聯性。 每個案例中，在方法參數屬於型別<xref:System.ValueType>，和參考型別無法傳遞至方法。  
  
 [!code-csharp[System.ValueType.Structure#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.valuetype.structure/cs/example1.cs#1)]
 [!code-vb[System.ValueType.Structure#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.valuetype.structure/vb/example1.vb#1)]  
  
 下列範例說明的方法呼叫`Utility`類別。  
  
 [!code-csharp[System.ValueType.Structure#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.valuetype.structure/cs/example1.cs#2)]
 [!code-vb[System.ValueType.Structure#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.valuetype.structure/vb/example1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Object" />
    <altmember cref="T:System.Enum" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ValueType ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ValueType();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.ValueType" /> 類別的新執行個體。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="valueType.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">要與目前執行個體比較的物件。</param>
        <summary>指示這個執行個體和指定的物件是否相等。</summary>
        <returns>如果 <see langword="true" /> 和這個執行個體為同型別並表示相同的值，則為 <paramref name="obj" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ValueType.Equals%28System.Object%29?displayProperty=nameWithType>方法覆寫<xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType>，並提供.NET Framework 中的所有實值類型的實值相等的預設實作。  
  
 如果沒有目前的執行個體的欄位和`obj`是參考型別，<xref:System.ValueType.Equals%2A>方法會逐位元組比較兩個物件的記憶體中。 否則，它會使用反映來比較之對應欄位`obj`與這個執行個體。  
  
> [!TIP]
>  特別是如果您的實值型別包含參考類型的欄位，您應該覆寫<xref:System.ValueType.Equals%28System.Object%29>方法。 這可以改善效能，並可讓您更能代表等號比較類型的意義。  
  
## <a name="notes-for-the-includewrtincludeswrt-mdmd"></a>資訊 [!INCLUDE[wrt](~/includes/wrt-md.md)]  
 當您呼叫<xref:System.ValueType.Equals%2A>方法[!INCLUDE[wrt](~/includes/wrt-md.md)]結構，它會提供預設行為不覆寫的實值型別<xref:System.ValueType.Equals%2A>。 這是.NET Framework 提供的支援之一[!INCLUDE[wrt](~/includes/wrt-md.md)](請參閱 < [.NET Framework 支援的 Windows 市集應用程式和 Windows 執行階段](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md))。 [!INCLUDE[wrt](~/includes/wrt-md.md)] 結構無法覆寫<xref:System.ValueType.Equals%2A>，即使使用 C# 或 Visual Basic 中寫入，因為它們不能有方法。 (此外，結構中[!INCLUDE[wrt](~/includes/wrt-md.md)]本身不繼承<xref:System.ValueType>。)不過，它們似乎具有<xref:System.ValueType.ToString%2A>， <xref:System.ValueType.Equals%2A>，和<xref:System.ValueType.GetHashCode%2A>方法時您用於您的 C# 或 Visual Basic 程式碼，和.NET Framework 會提供這些方法中的預設行為。  
  
   
  
## Examples  
 下列範例示範如何<xref:System.ValueType.Equals%2A>衍生的實值型別可覆寫方法。  
  
 [!code-cpp[ValueType.Equals Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/ValueType.Equals Example/CPP/source.cpp#1)]
 [!code-csharp[ValueType.Equals Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/ValueType.Equals Example/CS/source.cs#1)]
 [!code-vb[ValueType.Equals Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ValueType.Equals Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="valueType.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回這個執行個體的雜湊碼。</summary>
        <returns>32 位元帶正負號的整數，其為這個執行個體的雜湊碼。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ValueType.GetHashCode%2A>方法會套用到衍生自<xref:System.ValueType>。 衍生型別的一個或多個欄位用來計算傳回的值。 如果您呼叫衍生的型別`GetHashCode`方法，傳回值是不可能是適合用為雜湊表中的索引鍵。 此外，如果一或多個這些欄位的值變更時，傳回的值可能會變成不適合用於雜湊表中的索引鍵。 在任一情況下，請考慮撰寫您自己實作<xref:System.ValueType.GetHashCode%2A>更能代表類型的雜湊碼的概念的方法。  
  
 如需詳細資訊，請參閱 <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType> 和<xref:System.Collections.Hashtable?displayProperty=nameWithType>。  
  
## <a name="notes-for-the-includewrtincludeswrt-mdmd"></a>資訊 [!INCLUDE[wrt](~/includes/wrt-md.md)]  
 當您呼叫<xref:System.ValueType.GetHashCode%2A>方法[!INCLUDE[wrt](~/includes/wrt-md.md)]結構，它會提供預設行為不覆寫的實值型別<xref:System.ValueType.GetHashCode%2A>。 這是.NET Framework 提供的支援之一[!INCLUDE[wrt](~/includes/wrt-md.md)](請參閱 < [.NET Framework 支援的 Windows 市集應用程式和 Windows 執行階段](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md))。 [!INCLUDE[wrt](~/includes/wrt-md.md)] 結構無法覆寫<xref:System.ValueType.GetHashCode%2A>，即使使用 C# 或 Visual Basic 中寫入，因為它們不能有方法。 (此外，結構中[!INCLUDE[wrt](~/includes/wrt-md.md)]本身不繼承<xref:System.ValueType>。)不過，它們似乎具有<xref:System.ValueType.ToString%2A>， <xref:System.ValueType.Equals%2A>，和<xref:System.ValueType.GetHashCode%2A>方法時您用於您的 C# 或 Visual Basic 程式碼，和.NET Framework 會提供這些方法中的預設行為。  
  
   
  
## Examples  
 下列範例示範如何<xref:System.ValueType.GetHashCode%2A>衍生的實值型別可覆寫方法。  
  
 [!code-cpp[ValueType.Equals Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/ValueType.Equals Example/CPP/source.cpp#1)]
 [!code-csharp[ValueType.Equals Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/ValueType.Equals Example/CS/source.cs#1)]
 [!code-vb[ValueType.Equals Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ValueType.Equals Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="valueType.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回此執行個體的完整類型名稱。</summary>
        <returns>完整類型名稱。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ValueType.ToString%2A?displayProperty=nameWithType>方法覆寫<xref:System.Object.ToString%2A?displayProperty=nameWithType>方法，並提供的預設實作`ToString`實值類型的方法。 (實值型別所定義的型別`struct`關鍵字在 C# 中，以及由`Structure`...`End Structure`建構在 Visual Basic 中。)在功能上，不過，實作是相同的<xref:System.Object.ToString%2A?displayProperty=nameWithType>: 方法會傳回完整型別名稱。  
  
 值所定義的型別`struct`C# 關鍵字和`Structure`...`End Structure`在 Visual Basic 中的建構通常會覆寫<xref:System.ValueType.ToString%2A?displayProperty=nameWithType>方法，以提供更有意義的字串表示的實值型別。 下列範例會說明其間的差異。 它會定義兩個實值型別，`EmployeeA`並`EmployeeB`，會建立每一個執行個體，並呼叫其`ToString`方法。 因為`EmployeeA`結構未覆寫<xref:System.ValueType.ToString%2A?displayProperty=nameWithType>方法，它會顯示完整的型別名稱。 `EmployeeB.ToString`方法，相反地，提供物件的有意義資訊。  
  
 [!code-csharp[System.ValueType.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ValueType.ToString/cs/ToString2.cs#1)]
 [!code-vb[System.ValueType.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ValueType.ToString/vb/ToString2.vb#1)]  
  
 請注意，雖然列舉型別也是實值型別，它們衍生自<xref:System.Enum>類別，它會覆寫<xref:System.ValueType.ToString%2A?displayProperty=nameWithType>。  
  
## <a name="notes-for-the-windows-runtime"></a>Windows 執行階段的相關資訊  
 當您呼叫<xref:System.ValueType.ToString%2A>方法[!INCLUDE[wrt](~/includes/wrt-md.md)]結構，它會提供預設行為不覆寫的實值型別<xref:System.ValueType.ToString%2A>。 這是.NET Framework 提供的支援之一[!INCLUDE[wrt](~/includes/wrt-md.md)](請參閱 < [.NET Framework 支援的 Windows 市集應用程式和 Windows 執行階段](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md))。 [!INCLUDE[wrt](~/includes/wrt-md.md)] 結構無法覆寫<xref:System.ValueType.ToString%2A>，即使使用 C# 或 Visual Basic 中寫入，因為它們不能有方法。 (此外，結構中[!INCLUDE[wrt](~/includes/wrt-md.md)]本身不繼承<xref:System.ValueType>。)不過，它們似乎具有<xref:System.ValueType.ToString%2A>， <xref:System.ValueType.Equals%2A>，和<xref:System.ValueType.GetHashCode%2A>方法時您用於您的 C# 或 Visual Basic 程式碼，和.NET Framework 會提供這些方法中的預設行為。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>