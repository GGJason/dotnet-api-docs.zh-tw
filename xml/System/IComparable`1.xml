<Type Name="IComparable&lt;T&gt;" FullName="System.IComparable&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9ad58bbe6f970c82a7de71ab2688204451e6b35b" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="37728019" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IComparable&lt;in T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IComparable`1&lt;- T&gt;" />
  <TypeSignature Language="DocId" Value="T:System.IComparable`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IComparable(Of In T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IComparable" />
  <TypeSignature Language="F#" Value="type IComparable&lt;'T&gt; = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces />
  <Docs>
    <typeparam name="T">要比較之物件的類型。</typeparam>
    <summary>定義通用的比較方法，實值類型或類別會實作這個方法，以建立特定類型的比較方法來排序其執行個體。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此介面由可以排列或排序其值的型別所實作，並提供強型別的比較方法，來排序的泛型集合物件的成員。 例如，一個數字可能會大於第二個數字，和一個字串可以出現在另一個之前的字母順序。 它需要實作的類型會定義單一方法<xref:System.IComparable%601.CompareTo%28%600%29>，指出是否目前的執行個體在排序次序的位置之前，之後，或是與相同類型的第二個物件相同。 一般而言，直接從開發人員程式碼不被呼叫方法。 相反地，它會自動呼叫方法這類<xref:System.Collections.Generic.List%601.Sort?displayProperty=nameWithType>和<xref:System.Collections.Generic.SortedList%602.Add%2A>。  
  
 一般而言，型別，提供<xref:System.IComparable%601>實作也實作<xref:System.IEquatable%601>介面。 <xref:System.IEquatable%601>介面會定義<xref:System.IEquatable%601.Equals%2A>方法，可判斷是否相等的實作類型的執行個體。  
  
 實作<xref:System.IComparable%601.CompareTo%28%600%29>方法必須傳回<xref:System.Int32>具有三個值之一下, 表所示。  
  
|值|意義|  
|-----------|-------------|  
|小於零|此物件位於所指定的物件<xref:System.IComparable%601.CompareTo%2A>在排序次序的方法。|  
|零|此目前執行個體，就會發生在相同位置中的排序次序所指定的物件為<xref:System.IComparable%601.CompareTo%2A>方法引數。|  
|大於零|此目前執行個體所指定的物件會遵循<xref:System.IComparable%601.CompareTo%2A>方法引數，在排序次序。|  
  
 所有數字類型 (例如<xref:System.Int32>並<xref:System.Double>) 實作<xref:System.IComparable%601>，就像一樣<xref:System.String>， <xref:System.Char>，和<xref:System.DateTime>。 自訂類型應該也會提供其自己實作的<xref:System.IComparable%601>排列或排序的物件執行個體。  
  
   
  
## Examples  
 下列程式碼範例說明如何實作<xref:System.IComparable%601>簡單`Temperature`物件。 此範例會建立<xref:System.Collections.Generic.SortedList%602>與字串集合`Temperature`物件索引鍵，並將溫度和字串的數個組加入至順序清單。 在呼叫<xref:System.Collections.Generic.SortedList%602.Add%2A>方法中，<xref:System.Collections.Generic.SortedList%602>集合會使用<xref:System.IComparable%601>實作，以排序清單項目，然後會遞增溫度的順序顯示。  
  
 [!code-cpp[IComparable\`1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/IComparable`1 Example/CPP/source.cpp#1)]
 [!code-csharp[IComparable\`1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/IComparable`1 Example/CS/source.cs#1)]
 [!code-vb[IComparable\`1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IComparable`1 Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>取代的型別參數<see cref="T:System.IComparable`1" />介面實作這個介面的型別。如果您實作<see cref="T:System.IComparable`1" />，您應該多載<see langword="op_GreaterThan" />， <see langword="op_GreaterThanOrEqual" />， <see langword="op_LessThan" />，並<see langword="op_LessThanOrEqual" />運算子傳回值，都必須配合<see cref="M:System.IComparable`1.CompareTo(`0)" />。此外，您也應該實作<see cref="T:System.IEquatable`1" />。請參閱<see cref="T:System.IEquatable`1" />文章的完整資訊。</para>
    </block>
    <altmember cref="T:System.IComparable" />
    <altmember cref="T:System.IEquatable`1" />
  </Docs>
  <Members>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (T other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(!T other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IComparable`1.CompareTo(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (other As T) As Integer" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : 'T -&gt; int" Usage="iComparable.CompareTo other" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int CompareTo(T other);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="T" />
      </Parameters>
      <Docs>
        <param name="other">與這個執行個體相互比較的物件。</param>
        <summary>將目前的執行個體與相同類型的另一個物件相比較，並傳回整數，這個整數表示目前的執行個體在排序次序中，位於另一個物件之前、之後或相同位置。</summary>
        <returns>值，表示所比較之物件的相對順序。 傳回值具有這些意義： 
 <list type="table"><listheader><term> 值  </term><description> 意義   </description></listheader><item><term> 小於零  </term><description> 此執行個體在排列順序中優先於 <paramref name="other" />。</description></item><item><term> 零  </term><description> 這個執行個體出現在排序次序中的位置和 <paramref name="other" /> 相同。</description></item><item><term> 大於零  </term><description> 這個執行個體在排序次序中會在 <paramref name="other" /> 之後。  </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IComparable%601.CompareTo%2A> 提供強型別的比較方法，來排序的泛型集合物件的成員。 因此，它通常不稱為直接從開發人員程式碼。 相反地，它會自動呼叫方法這類<xref:System.Collections.Generic.List%601.Sort?displayProperty=nameWithType>和<xref:System.Collections.Generic.SortedList%602.Add%2A>。  
  
 這個方法是只定義，而且必須實作特定類別或實值類型的影響。 傳回的值取決於特定實作的 （「 之前 」、"發生在相同位置中，"和"遵循） 一節中所指定的比較的意義。  
  
 根據定義，任何物件都會比較大於`null`，並比較彼此相等的兩個 null 參考。  
  
   
  
## Examples  
 下列程式碼範例說明如何實作<xref:System.IComparable%601>簡單`Temperature`物件。 此範例會建立<xref:System.Collections.Generic.SortedList%602>與字串集合`Temperature`物件索引鍵，並將溫度和字串的數個組加入至順序清單。 在呼叫<xref:System.Collections.Generic.SortedList%602.Add%2A>方法中，<xref:System.Collections.Generic.SortedList%602>集合會使用<xref:System.IComparable%601>實作，以排序清單項目，然後會遞增溫度的順序顯示。  
  
 [!code-cpp[IComparable\`1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/IComparable`1 Example/CPP/source.cpp#1)]
 [!code-csharp[IComparable\`1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/IComparable`1 Example/CS/source.cs#1)]
 [!code-vb[IComparable\`1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IComparable`1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>物件 A、 B 和 C，下列必須為 true: <c>A.CompareTo(A)</c>才能傳回零。如果<c>A.CompareTo(B)</c>傳回零，然後<c>B.CompareTo(A)</c>才能傳回零。如果<c>A.CompareTo(B)</c>會傳回零並<c>B.CompareTo(C)</c>傳回零，然後<c>A.CompareTo(C)</c>才能傳回零。如果<c>A.CompareTo(B)</c>傳回值不是零，然後<c>B.CompareTo(A)</c>才能傳回值的正負號相反。如果<c>A.CompareTo(B)</c>傳回值<paramref name="x" />不等於零，和<c>B.CompareTo(C)</c>傳回的值<paramref name="y" />做為相同的正負號的<paramref name="x" />，然後<c>a。CompareTo(C)</c>才可傳回做為相同的正負號的值<paramref name="x" />和<paramref name="y" />。</para>
        </block>
        <block subset="none" type="usage">
          <para>使用<see cref="M:System.IComparable`1.CompareTo(`0)" />方法，以判斷類別的執行個體的順序。</para>
        </block>
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.IComparable" />
      </Docs>
    </Member>
  </Members>
</Type>