<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IComparable`1.xml" source-language="en-US" target-language="zh-TW">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac53159905d25c272600edb9c3592155b00f62607be.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3159905d25c272600edb9c3592155b00f62607be</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IComparable`1">
          <source>The type of object to compare.</source>
          <target state="translated">要比較之物件的類型。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.IComparable`1">
          <source>Defines a generalized comparison method that a value type or class implements to create a type-specific comparison method for ordering or sorting its instances.</source>
          <target state="translated">定義通用的比較方法，實值類型或類別會實作這個方法，以建立特定類型的比較方法來排序其執行個體。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IComparable`1">
          <source>This interface is implemented by types whose values can be ordered or sorted and provides a strongly typed comparison method for ordering members of a generic collection object.</source>
          <target state="translated">這個介面由可以排列或排序其值的型別所實作，並提供強類型的比較方法，來排序成員的泛型集合物件。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IComparable`1">
          <source>For example, one number can be larger than a second number, and one string can appear in alphabetical order before another.</source>
          <target state="translated">例如，一個數字可能會大於第二個數字，且一個字串可以出現在另一個之前的字母順序。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IComparable`1">
          <source>It requires that implementing types define a single method, <ph id="ph1">&lt;xref:System.IComparable%601.CompareTo%28%600%29&gt;</ph>, that indicates whether the position of the current instance in the sort order is before, after, or the same as a second object of the same type.</source>
          <target state="translated">它需要實作的類型會定義單一方法<ph id="ph1">&lt;xref:System.IComparable%601.CompareTo%28%600%29&gt;</ph>，指出是否目前的執行個體在排序次序的位置之前，之後，或是與相同類型的第二個物件相同。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IComparable`1">
          <source>Typically, the method is not called directly from developer code.</source>
          <target state="translated">一般而言，直接從開發人員程式碼不被呼叫方法。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IComparable`1">
          <source>Instead, it is called automatically by methods such as <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.Add%2A&gt;</ph>.</source>
          <target state="translated">相反地，它會自動呼叫方法例如<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort?displayProperty=nameWithType&gt;</ph>和<ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.Add%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IComparable`1">
          <source>Typically, types that provide an <ph id="ph1">&lt;xref:System.IComparable%601&gt;</ph> implementation also implement the <ph id="ph2">&lt;xref:System.IEquatable%601&gt;</ph> interface.</source>
          <target state="translated">一般而言，型別，提供<ph id="ph1">&lt;xref:System.IComparable%601&gt;</ph>實作也會實作<ph id="ph2">&lt;xref:System.IEquatable%601&gt;</ph>介面。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IComparable`1">
          <source>The <ph id="ph1">&lt;xref:System.IEquatable%601&gt;</ph> interface defines the <ph id="ph2">&lt;xref:System.IEquatable%601.Equals%2A&gt;</ph> method, which determines the equality of instances of the implementing type.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IEquatable%601&gt;</ph>介面會定義<ph id="ph2">&lt;xref:System.IEquatable%601.Equals%2A&gt;</ph>方法，可判斷是否相等的實作類型的執行個體。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IComparable`1">
          <source>The implementation of the <ph id="ph1">&lt;xref:System.IComparable%601.CompareTo%28%600%29&gt;</ph> method must return an <ph id="ph2">&lt;xref:System.Int32&gt;</ph> that has one of three values, as shown in the following table.</source>
          <target state="translated">實作<ph id="ph1">&lt;xref:System.IComparable%601.CompareTo%28%600%29&gt;</ph>方法必須傳回<ph id="ph2">&lt;xref:System.Int32&gt;</ph>具有三個值之一下, 表所示。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IComparable`1">
          <source>Value</source>
          <target state="translated">值</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IComparable`1">
          <source>Meaning</source>
          <target state="translated">意義</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IComparable`1">
          <source>Less than zero</source>
          <target state="translated">小於零</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IComparable`1">
          <source>This object precedes the object specified by the <ph id="ph1">&lt;xref:System.IComparable%601.CompareTo%2A&gt;</ph> method in the sort order.</source>
          <target state="translated">此物件位於所指定的物件<ph id="ph1">&lt;xref:System.IComparable%601.CompareTo%2A&gt;</ph>方法，在排序次序。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IComparable`1">
          <source>Zero</source>
          <target state="translated">零</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IComparable`1">
          <source>This current instance occurs in the same position in the sort order as the object specified by the <ph id="ph1">&lt;xref:System.IComparable%601.CompareTo%2A&gt;</ph> method argument.</source>
          <target state="translated">此目前執行個體中所指定的物件在排序次序相同位置，就會發生<ph id="ph1">&lt;xref:System.IComparable%601.CompareTo%2A&gt;</ph>方法引數。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IComparable`1">
          <source>Greater than zero</source>
          <target state="translated">大於零</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IComparable`1">
          <source>This current instance follows the object specified by the <ph id="ph1">&lt;xref:System.IComparable%601.CompareTo%2A&gt;</ph> method argument in the sort order.</source>
          <target state="translated">這個目前執行個體位於所指定的物件<ph id="ph1">&lt;xref:System.IComparable%601.CompareTo%2A&gt;</ph>方法引數，在排序次序。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IComparable`1">
          <source>All numeric types (such as <ph id="ph1">&lt;xref:System.Int32&gt;</ph> and <ph id="ph2">&lt;xref:System.Double&gt;</ph>) implement <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph>, as do <ph id="ph4">&lt;xref:System.String&gt;</ph>, <ph id="ph5">&lt;xref:System.Char&gt;</ph>, and <ph id="ph6">&lt;xref:System.DateTime&gt;</ph>.</source>
          <target state="translated">所有數字類型 (例如<ph id="ph1">&lt;xref:System.Int32&gt;</ph>和<ph id="ph2">&lt;xref:System.Double&gt;</ph>) 實作<ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph>、 一樣<ph id="ph4">&lt;xref:System.String&gt;</ph>， <ph id="ph5">&lt;xref:System.Char&gt;</ph>，和<ph id="ph6">&lt;xref:System.DateTime&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IComparable`1">
          <source>Custom types should also provide their own implementation of <ph id="ph1">&lt;xref:System.IComparable%601&gt;</ph> to enable object instances to be ordered or sorted.</source>
          <target state="translated">自訂類型也應該提供自己的實作<ph id="ph1">&lt;xref:System.IComparable%601&gt;</ph>可對物件執行個體，以排列或排序。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IComparable`1">
          <source>The following code example illustrates the implementation of  <ph id="ph1">&lt;xref:System.IComparable%601&gt;</ph> for a simple <ph id="ph2">`Temperature`</ph> object.</source>
          <target state="translated">下列程式碼範例說明實作<ph id="ph1">&lt;xref:System.IComparable%601&gt;</ph>簡單<ph id="ph2">`Temperature`</ph>物件。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IComparable`1">
          <source>The example creates a <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> collection of strings with <ph id="ph2">`Temperature`</ph> object keys, and adds several pairs of temperatures and strings to the list out of sequence.</source>
          <target state="translated">此範例會建立<ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>與字串集合<ph id="ph2">`Temperature`</ph>物件索引鍵，並將溫度和字串的數個組加入至清單順序。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IComparable`1">
          <source>In the call to the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Add%2A&gt;</ph> method, the <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> collection uses the <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> implementation to sort the list entries, which are then displayed in order of increasing temperature.</source>
          <target state="translated">在呼叫<ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Add%2A&gt;</ph>方法，<ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>集合使用<ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph>實作排序清單項目，然後會遞增溫度的順序顯示。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IComparable`1">
          <source>Replace the type parameter of the <ph id="ph1">&lt;see cref="T:System.IComparable`1" /&gt;</ph> interface with the type that is implementing this interface.</source>
          <target state="translated">取代的型別參數<ph id="ph1">&lt;see cref="T:System.IComparable`1" /&gt;</ph>介面會實作這個介面的型別。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IComparable`1">
          <source>If you implement <ph id="ph1">&lt;see cref="T:System.IComparable`1" /&gt;</ph>, you should overload the <ph id="ph2">&lt;see langword="op_GreaterThan" /&gt;</ph>, <ph id="ph3">&lt;see langword="op_GreaterThanOrEqual" /&gt;</ph>, <ph id="ph4">&lt;see langword="op_LessThan" /&gt;</ph>, and <ph id="ph5">&lt;see langword="op_LessThanOrEqual" /&gt;</ph> operators to return values that are consistent with <ph id="ph6">&lt;see cref="M:System.IComparable`1.CompareTo(`0)" /&gt;</ph>.</source>
          <target state="translated">如果您實作<ph id="ph1">&lt;see cref="T:System.IComparable`1" /&gt;</ph>，您應該多載<ph id="ph2">&lt;see langword="op_GreaterThan" /&gt;</ph>， <ph id="ph3">&lt;see langword="op_GreaterThanOrEqual" /&gt;</ph>， <ph id="ph4">&lt;see langword="op_LessThan" /&gt;</ph>，和<ph id="ph5">&lt;see langword="op_LessThanOrEqual" /&gt;</ph>運算子傳回一致的有效值<ph id="ph6">&lt;see cref="M:System.IComparable`1.CompareTo(`0)" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IComparable`1">
          <source>In addition, you should also implement <ph id="ph1">&lt;see cref="T:System.IEquatable`1" /&gt;</ph>.</source>
          <target state="translated">此外，您也應該實作<ph id="ph1">&lt;see cref="T:System.IEquatable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IComparable`1">
          <source>See the <ph id="ph1">&lt;see cref="T:System.IEquatable`1" /&gt;</ph> article for complete information.</source>
          <target state="translated">請參閱<ph id="ph1">&lt;see cref="T:System.IEquatable`1" /&gt;</ph>文件以取得完整資訊。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.IComparable`1.CompareTo(`0)">
          <source>An object to compare with this instance.</source>
          <target state="translated">與這個執行個體相互比較的物件。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.IComparable`1.CompareTo(`0)">
          <source>Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.</source>
          <target state="translated">將目前的執行個體與相同類型的另一個物件相比較，並傳回整數，這個整數表示目前的執行個體在排序次序中，位於另一個物件之前、之後或相同位置。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.IComparable`1.CompareTo(`0)">
          <source>A value that indicates the relative order of the objects being compared.</source>
          <target state="translated">值，表示所比較之物件的相對順序。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.IComparable`1.CompareTo(`0)">
          <source>The return value has these meanings:</source>
          <target state="translated">傳回值具有這些意義：</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.IComparable`1.CompareTo(`0)">
          <source><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Value</source>
          <target state="translated"><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> 值</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.IComparable`1.CompareTo(`0)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Meaning</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 意義</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.IComparable`1.CompareTo(`0)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Less than zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph>小於零</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.IComparable`1.CompareTo(`0)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance precedes <ph id="ph3">&lt;paramref name="other" /&gt;</ph> in the sort order.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 這個執行個體在排序次序中會在 <ph id="ph3">&lt;paramref name="other" /&gt;</ph> 之前。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.IComparable`1.CompareTo(`0)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 零</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.IComparable`1.CompareTo(`0)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance occurs in the same position in the sort order as <ph id="ph3">&lt;paramref name="other" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 這個執行個體出現在排序次序中的位置和 <ph id="ph3">&lt;paramref name="other" /&gt;</ph> 相同。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.IComparable`1.CompareTo(`0)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Greater than zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 大於零</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.IComparable`1.CompareTo(`0)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance follows <ph id="ph3">&lt;paramref name="other" /&gt;</ph> in the sort order.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 這個執行個體在排序次序中會在 <ph id="ph3">&lt;paramref name="other" /&gt;</ph> 之後。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IComparable`1.CompareTo(`0)">
          <source><ph id="ph1">&lt;xref:System.IComparable%601.CompareTo%2A&gt;</ph> provides a strongly typed comparison method for ordering members of a generic collection object.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IComparable%601.CompareTo%2A&gt;</ph> 提供強類型的比較方法來排序成員的泛型集合物件。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IComparable`1.CompareTo(`0)">
          <source>Because of this, it is usually not called directly from developer code.</source>
          <target state="translated">因此，它通常不稱為直接從開發人員程式碼。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IComparable`1.CompareTo(`0)">
          <source>Instead, it is called automatically by methods such as <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.Add%2A&gt;</ph>.</source>
          <target state="translated">相反地，它會自動呼叫方法例如<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort?displayProperty=nameWithType&gt;</ph>和<ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.Add%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IComparable`1.CompareTo(`0)">
          <source>This method is only a definition and must be implemented by a specific class or value type to have effect.</source>
          <target state="translated">此方法是只定義，而且必須有效果的特定類別或實值類型所實作。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IComparable`1.CompareTo(`0)">
          <source>The meaning of the comparisons specified in the Return Values section ("precedes", "occurs in the same position as", and "follows) depends on the particular implementation.</source>
          <target state="translated">傳回的值 （「 之前 」、 「 發生在相同的位置，"和"遵循） 的區段取決於特定的實作中指定的比較結果的意義。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IComparable`1.CompareTo(`0)">
          <source>By definition, any object compares greater than <ph id="ph1">`null`</ph>, and two null references compare equal to each other.</source>
          <target state="translated">根據定義，任何物件比較大於<ph id="ph1">`null`</ph>，並比較是否等於其他兩個 null 參考。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IComparable`1.CompareTo(`0)">
          <source>The following code example illustrates the implementation of <ph id="ph1">&lt;xref:System.IComparable&gt;</ph> for a simple <ph id="ph2">`Temperature`</ph> object.</source>
          <target state="translated">下列程式碼範例說明實作<ph id="ph1">&lt;xref:System.IComparable&gt;</ph>簡單<ph id="ph2">`Temperature`</ph>物件。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IComparable`1.CompareTo(`0)">
          <source>The example creates a <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> collection of strings with <ph id="ph2">`Temperature`</ph> object keys, and adds several pairs of temperatures and strings to the list out of sequence.</source>
          <target state="translated">此範例會建立<ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>與字串集合<ph id="ph2">`Temperature`</ph>物件索引鍵，並將溫度和字串的數個組加入至清單順序。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IComparable`1.CompareTo(`0)">
          <source>In the call to the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Add%2A&gt;</ph> method, the <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> collection uses the <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> implementation to sort the list entries, which are then displayed in order of increasing temperature.</source>
          <target state="translated">在呼叫<ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Add%2A&gt;</ph>方法，<ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>集合使用<ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph>實作排序清單項目，然後會遞增溫度的順序顯示。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IComparable`1.CompareTo(`0)">
          <source>For objects A, B, and C, the following must be true:</source>
          <target state="translated">物件的 A、 B 和 C，下列條件必須為真：</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IComparable`1.CompareTo(`0)">
          <source><bpt id="p1">&lt;c&gt;</bpt>A.CompareTo(A)<ept id="p1">&lt;/c&gt;</ept> is required to return zero.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>A.CompareTo(A)<ept id="p1">&lt;/c&gt;</ept>才能傳回零。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IComparable`1.CompareTo(`0)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>A.CompareTo(B)<ept id="p1">&lt;/c&gt;</ept> returns zero, then <bpt id="p2">&lt;c&gt;</bpt>B.CompareTo(A)<ept id="p2">&lt;/c&gt;</ept> is required to return zero.</source>
          <target state="translated">如果<bpt id="p1">&lt;c&gt;</bpt>A.CompareTo(B)<ept id="p1">&lt;/c&gt;</ept>傳回零，然後<bpt id="p2">&lt;c&gt;</bpt>B.CompareTo(A)<ept id="p2">&lt;/c&gt;</ept>才能傳回零。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IComparable`1.CompareTo(`0)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>A.CompareTo(B)<ept id="p1">&lt;/c&gt;</ept> returns zero and <bpt id="p2">&lt;c&gt;</bpt>B.CompareTo(C)<ept id="p2">&lt;/c&gt;</ept> returns zero, then <bpt id="p3">&lt;c&gt;</bpt>A.CompareTo(C)<ept id="p3">&lt;/c&gt;</ept> is required to return zero.</source>
          <target state="translated">如果<bpt id="p1">&lt;c&gt;</bpt>A.CompareTo(B)<ept id="p1">&lt;/c&gt;</ept>傳回零和<bpt id="p2">&lt;c&gt;</bpt>B.CompareTo(C)<ept id="p2">&lt;/c&gt;</ept>傳回零，然後<bpt id="p3">&lt;c&gt;</bpt>A.CompareTo(C)<ept id="p3">&lt;/c&gt;</ept>才能傳回零。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IComparable`1.CompareTo(`0)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>A.CompareTo(B)<ept id="p1">&lt;/c&gt;</ept> returns a value other than zero, then <bpt id="p2">&lt;c&gt;</bpt>B.CompareTo(A)<ept id="p2">&lt;/c&gt;</ept> is required to return a value of the opposite sign.</source>
          <target state="translated">如果<bpt id="p1">&lt;c&gt;</bpt>A.CompareTo(B)<ept id="p1">&lt;/c&gt;</ept>然後傳回值不是零， <bpt id="p2">&lt;c&gt;</bpt>B.CompareTo(A)<ept id="p2">&lt;/c&gt;</ept>才能傳回值的正負號相反。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IComparable`1.CompareTo(`0)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>A.CompareTo(B)<ept id="p1">&lt;/c&gt;</ept> returns a value <ph id="ph1">&lt;paramref name="x" /&gt;</ph> that is not equal to zero, and <bpt id="p2">&lt;c&gt;</bpt>B.CompareTo(C)<ept id="p2">&lt;/c&gt;</ept> returns a value <ph id="ph2">&lt;paramref name="y" /&gt;</ph> of the same sign as <ph id="ph3">&lt;paramref name="x" /&gt;</ph>, then <bpt id="p3">&lt;c&gt;</bpt>A.CompareTo(C)<ept id="p3">&lt;/c&gt;</ept> is required to return a value of the same sign as <ph id="ph4">&lt;paramref name="x" /&gt;</ph> and <ph id="ph5">&lt;paramref name="y" /&gt;</ph>.</source>
          <target state="translated">如果<bpt id="p1">&lt;c&gt;</bpt>A.CompareTo(B)<ept id="p1">&lt;/c&gt;</ept>傳回值<ph id="ph1">&lt;paramref name="x" /&gt;</ph>不等於零，和<bpt id="p2">&lt;c&gt;</bpt>B.CompareTo(C)<ept id="p2">&lt;/c&gt;</ept>傳回值<ph id="ph2">&lt;paramref name="y" /&gt;</ph>做為相同的正負號的<ph id="ph3">&lt;paramref name="x" /&gt;</ph>，然後<bpt id="p3">&lt;c&gt;</bpt>a。CompareTo(C)<ept id="p3">&lt;/c&gt;</ept>才能傳回的值相同的簽章為<ph id="ph4">&lt;paramref name="x" /&gt;</ph>和<ph id="ph5">&lt;paramref name="y" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IComparable`1.CompareTo(`0)">
          <source>Use the <ph id="ph1">&lt;see cref="M:System.IComparable`1.CompareTo(`0)" /&gt;</ph> method to determine the ordering of instances of a class.</source>
          <target state="translated">使用<ph id="ph1">&lt;see cref="M:System.IComparable`1.CompareTo(`0)" /&gt;</ph>判斷類別的執行個體的順序的方法。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>