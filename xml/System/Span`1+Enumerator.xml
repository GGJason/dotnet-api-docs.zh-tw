<Type Name="Span&lt;T&gt;+Enumerator" FullName="System.Span&lt;T&gt;+Enumerator">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e90483d241225b985aed34e0fb22f99e9d98fb97" /><Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="11/20/2018" /><Meta Name="ms.locfileid" Value="52230003" /></Metadata><TypeSignature Language="C#" Value="public struct Span&lt;T&gt;.Enumerator" />
  <TypeSignature Language="ILAsm" Value=".class nested public sequential ansi sealed beforefieldinit Span`1/Enumerator&lt;T&gt; extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Span`1.Enumerator" />
  <TypeSignature Language="VB.NET" Value="Public Structure Span(Of T).Enumerator" />
  <TypeSignature Language="C++ CLI" Value="public: value class Span&lt;T&gt;::Enumerator" />
  <TypeSignature Language="F#" Value="type Span&lt;'T&gt;.Enumerator = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.1;netcore-2.2">
      <AttributeName>System.Runtime.CompilerServices.IsByRefLike</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>提供 <see cref="T:System.Span`1" /> 項目的列舉值。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

C# [foreach](~/docs/csharp/language-reference/keywords/foreach-in.md) C# 語言和[每個...下一步](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md)建構在 Visual Basic 中的會隱藏列舉值的複雜度。 而不要直接操作列舉值，並使用`foreach`或`For Each...Next`建議。 

一開始，列舉值位於第一個元素之前<xref:System.Span%601>。 在這個位置上，<xref:System.Span%601.Enumerator.Current> 並未定義。 您必須呼叫<xref:System.Span%601.Enumerator.MoveNext%2A>列舉值前進到中的第一個項目<xref:System.Span%601>讀取的值之前<xref:System.Span%601.Enumerator.Current>。

<xref:System.Span%601.Enumerator.Current> 會傳回相同的值，直到<xref:System.Span%601.Enumerator.MoveNext%2A>呼叫。 <xref:System.Span%601.Enumerator.MoveNext%2A> 設定<xref:System.Span%601.Enumerator.Current>中的下一個項目<xref:System.Span%601>。

如果<xref:System.Span%601.Enumerator.MoveNext%2A>通過結尾<xref:System.Span%601>，<xref:System.Span%601.Enumerator.MoveNext%2A>傳回`false`。 列舉值位於此狀態，後續呼叫<xref:System.Span%601.Enumerator.MoveNext%2A>也會傳回`false`和<xref:System.Span%601.Enumerator.Current>是未定義。 您無法設定<xref:System.Span%601.Enumerator.Current>中的第一個項目<xref:System.Span%601>一次; 您必須改為建立新的列舉值執行個體。 

列舉值並沒有獨佔存取權<xref:System.Span%601>。 此外，也可以修改範圍所依據的基礎資料。 因此，列舉的範圍是本質上並非安全執行緒程序。 若要保證列舉期間的執行緒安全，您必須實作自己的同步處理。 例如，下列程式碼會有競爭情形。 它無法確保之前，必須列舉範圍`ClearContents`方法執行。 如此一來，基礎陣列已清除的範圍列舉期間：

[!code-csharp[System.Span<T>.Enumerator-no-synchronization](~/samples/snippets/csharp/api/system/span.enumerator/nosync/program.cs)]

如果您之前進行同步處理存取陣列列舉的範圍內，為的修訂版本`EnumerateSpan`方法會在下列範例中，`ClearContents`方法不會修改基礎列舉期間的範圍資料。 請注意此範例會鎖定範圍所依據的基礎陣列。  

[!code-csharp[System.Span<T>.Enumerator-no-synchronization](~/samples/snippets/csharp/api/system/span.enumerator/sync/program.cs#1)]

不同於在.NET 中，某些其他列舉值結構<xref:System.Span%601.Enumerator>:

- 不會實作<xref:System.Collections.IEnumerator>或<xref:System.Collections.Generic.IEnumerator%601>介面。 這是因為<xref:System.Span%601.Enumerator>已[ref struct](~/docs/csharp/reference-semantics-with-value-types.md#ref-struct-type)。

- 不包含`Reset`方法，可以將列舉值設定為在範圍中第一個項目之前，其初始位置。 (<xref:System.Collections.IEnumerator.Reset?displayProperty=nameWithType>方法必須實作此介面的一部分，但大部分的實作者會擲回例外狀況，或不提供任何實作。) 
 
      ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public T Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Current" />
      <MemberSignature Language="DocId" Value="P:System.Span`1.Enumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T % Current { T % get(); };" />
      <MemberSignature Language="F#" Value="member this.Current : " Usage="System.Span&lt;'T&gt;.Enumerator.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue RefType="Ref">
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得位於目前列舉值位置的項目參考。</summary>
        <value><see cref="T:System.Span`1" /> 中位於目前列舉值位置的項目。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  

`Current` 未定義下的下列條件： 

- 立即建立列舉值之後，將列舉值位於範圍中的第一個元素之前。 <xref:System.Span%601.Enumerator.MoveNext%2A> 將列舉值前進至範圍的第一個項目，再讀取的值時必須呼叫`Current`。

- 在上次呼叫<xref:System.Span%601.Enumerator.MoveNext%2A>傳回`false`，表示範圍結尾。 

`Current` 會傳回相同的值，直到<xref:System.Span%601.Enumerator.MoveNext%2A>呼叫。 <xref:System.Span%601.Enumerator.MoveNext%2A> 設定`Current`範圍中的下一個項目。 

      ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Span`1.Enumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool MoveNext();" />
      <MemberSignature Language="F#" Value="member this.MoveNext : unit -&gt; bool" Usage="enumerator.MoveNext " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>將列舉值前移至 <see cref="System.Span`1" /> 的下一個項目。</summary>
        <returns>如果列舉值成功前移至下一個項目，則為 `true`；如果已傳遞範圍結尾，則為 `false`。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

建立列舉值之後，將它放在範圍內，且第一個呼叫的第一個元素之前`MoveNext`將列舉值前移至範圍中的第一個項目。 

如果`MoveNext`傳遞的範圍內，結尾`MoveNext`傳回`false`。 列舉值位於此狀態，後續呼叫`MoveNext`也會傳回`false`。

         ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>