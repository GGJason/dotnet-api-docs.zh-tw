<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ThreadStaticAttribute.xml" source-language="en-US" target-language="zh-TW">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac507d61cca1964f76b932d1ee8a032f6d54ae50db7.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">07d61cca1964f76b932d1ee8a032f6d54ae50db7</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ThreadStaticAttribute">
          <source>Indicates that the value of a static field is unique for each thread.</source>
          <target state="translated">表示每個執行緒的靜態欄位值是唯一的。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ThreadStaticAttribute">
          <source>A <ph id="ph1">`static`</ph> field marked with <ph id="ph2">&lt;xref:System.ThreadStaticAttribute&gt;</ph> is not shared between threads.</source>
          <target state="translated">A<ph id="ph1">`static`</ph>欄位標示為<ph id="ph2">&lt;xref:System.ThreadStaticAttribute&gt;</ph>不會在執行緒之間共用。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ThreadStaticAttribute">
          <source>Each executing thread has a separate instance of the field, and independently sets and gets values for that field.</source>
          <target state="translated">每個執行中執行緒有個別的執行個體的欄位中，獨立設定和取得該欄位的值。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ThreadStaticAttribute">
          <source>If the field is accessed on a different thread, it will contain a different value.</source>
          <target state="translated">如果不同的執行緒上存取的欄位，它會包含不同的值。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ThreadStaticAttribute">
          <source>Note that in addition to applying the <ph id="ph1">&lt;xref:System.ThreadStaticAttribute&gt;</ph> attribute to a field, you must also define it as a <ph id="ph2">`static`</ph> field (in C#) or a <ph id="ph3">`Shared`</ph> field (in Visual Basic).</source>
          <target state="translated">請注意，除了套用<ph id="ph1">&lt;xref:System.ThreadStaticAttribute&gt;</ph>屬性欄位，您也必須定義成<ph id="ph2">`static`</ph>欄位 （C# 中） 或<ph id="ph3">`Shared`</ph>欄位 （在 Visual Basic)。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ThreadStaticAttribute">
          <source>Do not specify initial values for fields marked with <ph id="ph1">`ThreadStaticAttribute`</ph>, because such initialization occurs only once, when the class constructor executes, and therefore affects only one thread.</source>
          <target state="translated">請勿指定起始值的欄位用來標記<ph id="ph1">`ThreadStaticAttribute`</ph>，因為這類初始化就會發生一次，當類別建構函式會執行，而因此會影響只有一個執行緒。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ThreadStaticAttribute">
          <source>If you do not specify an initial value, you can rely on the field being initialized to its default value if it is a value type, or to <ph id="ph1">`null`</ph> if it is a reference type.</source>
          <target state="translated">如果您不指定一個初始值，您可以依賴如果它是實值類型，或為其預設值初始化的欄位<ph id="ph1">`null`</ph>如果它是參考類型。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ThreadStaticAttribute">
          <source>Use this attribute as it is, and do not derive from it.</source>
          <target state="translated">使用這個屬性，因為它，並不是衍生自它。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ThreadStaticAttribute">
          <source>For more information about using attributes, see <bpt id="p1">[</bpt>Attributes<ept id="p1">](~/docs/standard/attributes/index.md)</ept>.</source>
          <target state="translated">如需屬性用法的詳細資訊，請參閱<bpt id="p1">[</bpt>屬性<ept id="p1">](~/docs/standard/attributes/index.md)</ept>。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ThreadStaticAttribute">
          <source>The following example instantiates a random number generator, creates ten threads in addition to the main thread, and then generates two million random numbers in each thread.</source>
          <target state="translated">下列範例會產生隨機號碼產生器、 建立 10 個執行緒主執行緒中，除了並且然後在每個執行緒中產生兩百萬隨機數字。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ThreadStaticAttribute">
          <source>It uses the <ph id="ph1">&lt;xref:System.ThreadStaticAttribute&gt;</ph> attribute to calculate the sum and the count of random numbers per thread.</source>
          <target state="translated">它會使用<ph id="ph1">&lt;xref:System.ThreadStaticAttribute&gt;</ph>屬性來計算每個執行緒的隨機數字的計數與總和。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ThreadStaticAttribute">
          <source>It also defines two additional per-thread fields, <ph id="ph1">`previous`</ph> and <ph id="ph2">`abnormal`</ph>, that allows it to detect corruption of the random number generator.</source>
          <target state="translated">它也會定義兩個個別執行緒的額外欄位，<ph id="ph1">`previous`</ph>和<ph id="ph2">`abnormal`</ph>，可讓它偵測到損毀的亂數產生器。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ThreadStaticAttribute">
          <source>The example uses the <ph id="ph1">`lock`</ph> statement in C# and the <ph id="ph2">`SyncLock`</ph> construct in Visual Basic to synchronize access to the random number generator.</source>
          <target state="translated">此範例會使用<ph id="ph1">`lock`</ph>C# 中的陳述式和<ph id="ph2">`SyncLock`</ph>以同步存取之隨機號碼產生器的 Visual Basic 中建構。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ThreadStaticAttribute">
          <source>This prevents corruption of the random number generator, which typically results in its returning a value of zero for all subsequent calls.</source>
          <target state="translated">這可避免損毀的亂數產生器，通常是在其傳回值為零的所有後續的呼叫。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ThreadStaticAttribute">
          <source>The example also uses the <ph id="ph1">&lt;xref:System.Threading.CountdownEvent&gt;</ph> class to ensure that each thread has finished generating random numbers before it displays the total number of calls.</source>
          <target state="translated">此範例也會使用<ph id="ph1">&lt;xref:System.Threading.CountdownEvent&gt;</ph>類別，以確保每個執行緒已完成的產生隨機數字，然後再顯示的呼叫次數總計。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ThreadStaticAttribute">
          <source>Otherwise, if the main thread completes execution before the additional threads that it spawns, it displays an inaccurate value for the total number of method calls.</source>
          <target state="translated">否則，如果主執行緒完成執行，然後它會繁衍的其他執行緒，它會顯示不正確的值之方法呼叫的總數。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.ThreadStaticAttribute.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ThreadStaticAttribute" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.ThreadStaticAttribute" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>