<Type Name="Enum" FullName="System.Enum">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="0f63bb8a07b29b93f1ea35399e1ec2cc54524806" />
    <Meta Name="ms.sourcegitcommit" Value="723b8a6d92667ba86fcda96190bad3b4a03283b3" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="11/09/2018" />
    <Meta Name="ms.locfileid" Value="51323959" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class Enum : ValueType, IComparable, IConvertible, IFormattable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit Enum extends System.ValueType implements class System.IComparable, class System.IConvertible, class System.IFormattable" />
  <TypeSignature Language="DocId" Value="T:System.Enum" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Enum&#xA;Inherits ValueType&#xA;Implements IComparable, IConvertible, IFormattable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Enum abstract : ValueType, IComparable, IConvertible, IFormattable" />
  <TypeSignature Language="F#" Value="type Enum = class&#xA;    inherit ValueType&#xA;    interface IComparable&#xA;    interface IFormattable&#xA;    interface IConvertible" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IConvertible</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="e676c-101">提供列舉的基底類別。</span>
      <span class="sxs-lookup">
        <span data-stu-id="e676c-101">Provides the base class for enumerations.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e676c-102">列舉型別是一組具名常數，其基礎類型是任何整數類資料類型。</span><span class="sxs-lookup"><span data-stu-id="e676c-102">An enumeration is a set of named constants whose underlying type is any integral type.</span></span> <span data-ttu-id="e676c-103">如果明確不宣告任何基礎類型，<xref:System.Int32>用。</span><span class="sxs-lookup"><span data-stu-id="e676c-103">If no underlying type is explicitly declared, <xref:System.Int32> is used.</span></span> <span data-ttu-id="e676c-104"><xref:System.Enum> 是.NET Framework 中的所有列舉的基底類別。</span><span class="sxs-lookup"><span data-stu-id="e676c-104"><xref:System.Enum> is the base class for all enumerations in the .NET Framework.</span></span> <span data-ttu-id="e676c-105">列舉型別由定義`enum`C# 關鍵字和`Enum`...`End Enum` Visual Basic 中建構。</span><span class="sxs-lookup"><span data-stu-id="e676c-105">Enumeration types are defined by the `enum` keyword in C# and the `Enum`...`End Enum` construct in Visual Basic.</span></span>  
  
 <span data-ttu-id="e676c-106"><xref:System.Enum> 提供方法來比較這個類別的執行個體、 執行個體的值轉換為其字串表示，將數字的字串表示轉換為這個類別的執行個體和建立使用指定的列舉型別和值的執行個體。</span><span class="sxs-lookup"><span data-stu-id="e676c-106"><xref:System.Enum> provides methods for comparing instances of this class, converting the value of an instance to its string representation, converting the string representation of a number to an instance of this class, and creating an instance of a specified enumeration and value.</span></span>  
  
 <span data-ttu-id="e676c-107">您也可以將列舉視為位元欄位中。</span><span class="sxs-lookup"><span data-stu-id="e676c-107">You can also treat an enumeration as a bit field.</span></span> <span data-ttu-id="e676c-108">如需詳細資訊，請參閱 <<c0> [ 非獨佔成員和旗標屬性](#Flags)一節和<xref:System.FlagsAttribute>主題。</span><span class="sxs-lookup"><span data-stu-id="e676c-108">For more information, see the [Non-Exclusive Members and the Flags Attribute](#Flags) section and the <xref:System.FlagsAttribute> topic.</span></span>  
  
 <span data-ttu-id="e676c-109">本主題內容：</span><span class="sxs-lookup"><span data-stu-id="e676c-109">In this topic:</span></span>  
  
 <span data-ttu-id="e676c-110">[建立列舉類型](#Creating) </span><span class="sxs-lookup"><span data-stu-id="e676c-110">[Creating an enumeration type](#Creating) </span></span>  
 <span data-ttu-id="e676c-111">[列舉型別具現化](#Instantiating) </span><span class="sxs-lookup"><span data-stu-id="e676c-111">[Instantiating an enumeration type](#Instantiating) </span></span>  
 <span data-ttu-id="e676c-112">[列舉的最佳作法](#BestPractices) </span><span class="sxs-lookup"><span data-stu-id="e676c-112">[Enumeration best practices](#BestPractices) </span></span>  
 <span data-ttu-id="e676c-113">[執行列舉作業](#Operations) </span><span class="sxs-lookup"><span data-stu-id="e676c-113">[Performing operations with enumerations](#Operations) </span></span>  
 [<span data-ttu-id="e676c-114">執行轉換</span><span class="sxs-lookup"><span data-stu-id="e676c-114">Performing conversions</span></span>](#conversions)  
 [<span data-ttu-id="e676c-115">剖析的列舉值</span><span class="sxs-lookup"><span data-stu-id="e676c-115">Parsing enumeration values</span></span>](#parsing)  
 [<span data-ttu-id="e676c-116">格式化的列舉值</span><span class="sxs-lookup"><span data-stu-id="e676c-116">Formatting enumeration values</span></span>](#formatting)  
[<span data-ttu-id="e676c-117">逐一查看列舉型別成員</span><span class="sxs-lookup"><span data-stu-id="e676c-117">Iterating enumeration members</span></span>](#iterating)  
[<span data-ttu-id="e676c-118">非獨佔成員和旗標屬性</span><span class="sxs-lookup"><span data-stu-id="e676c-118">Non-exclusive members and the Flags attribute</span></span>](#Flags)  
[<span data-ttu-id="e676c-119">新增列舉方法</span><span class="sxs-lookup"><span data-stu-id="e676c-119">Adding enumeration methods</span></span>](#Methods)  
  
<a name="Creating"></a>   
## <a name="creating-an-enumeration-type"></a><span data-ttu-id="e676c-120">建立列舉類型</span><span class="sxs-lookup"><span data-stu-id="e676c-120">Creating an enumeration type</span></span>  
 <span data-ttu-id="e676c-121">程式設計語言通常會提供語法來宣告列舉，其中包含的一組具名的常數和其值。</span><span class="sxs-lookup"><span data-stu-id="e676c-121">Programming languages typically provide syntax to declare an enumeration that consists of a set of named constants and their values.</span></span> <span data-ttu-id="e676c-122">下列範例說明 C# 和 Visual Basic 用來定義列舉類型的語法。</span><span class="sxs-lookup"><span data-stu-id="e676c-122">The following example illustrates the syntax used by C# and Visual Basic to define an enumeration.</span></span> <span data-ttu-id="e676c-123">它會建立名為列舉型別`ArrivalStatus`有三個成員： `ArrivalStatus.Early`， `ArrivalStatus.OnTime`，和`ArrivalStatus.Late`。</span><span class="sxs-lookup"><span data-stu-id="e676c-123">It creates an enumeration named `ArrivalStatus` that has three members: `ArrivalStatus.Early`, `ArrivalStatus.OnTime`, and `ArrivalStatus.Late`.</span></span> <span data-ttu-id="e676c-124">請注意，在這兩種情況下，列舉型別沒有明確繼承自<xref:System.Enum>; 繼承關聯性由編譯器隱含地處理。</span><span class="sxs-lookup"><span data-stu-id="e676c-124">Note that in both cases, the enumeration does not explicitly inherit from <xref:System.Enum>; the inheritance relationship is handled implicitly by the compiler.</span></span>  
  
 [!code-csharp[System.Enum.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/class1.cs#1)]
 [!code-vb[System.Enum.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/class1.vb#1)]  
  
> [!WARNING]
>  <span data-ttu-id="e676c-125">您應該永遠不會建立其基礎類型為非整數列舉型別或<xref:System.Char>。</span><span class="sxs-lookup"><span data-stu-id="e676c-125">You should never create an enumeration type whose underlying type is non-integral or <xref:System.Char>.</span></span> <span data-ttu-id="e676c-126">雖然您可以使用反映來建立這類列舉型別，使用產生的類型的方法呼叫不可靠，而且可能也會擲回其他例外狀況。</span><span class="sxs-lookup"><span data-stu-id="e676c-126">Although you can create such an enumeration type by using reflection, method calls that use the resulting type are unreliable and may also throw additional exceptions.</span></span>  
  
<a name="Instantiating"></a>   
## <a name="instantiating-an-enumeration-type"></a><span data-ttu-id="e676c-127">列舉型別具現化</span><span class="sxs-lookup"><span data-stu-id="e676c-127">Instantiating an enumeration type</span></span>  
 <span data-ttu-id="e676c-128">您可以具現化列舉型別就像任何其他的值型別執行個體化： 藉由宣告變數和指派給它的其中一個列舉的常數。</span><span class="sxs-lookup"><span data-stu-id="e676c-128">You can instantiate an enumeration type just as you instantiate any other value type: by declaring a variable and assigning one of the enumeration's constants to it.</span></span> <span data-ttu-id="e676c-129">下列範例會具現化`ArrivalStatus`增值是`ArrivalStatus.OnTime`。</span><span class="sxs-lookup"><span data-stu-id="e676c-129">The following example instantiates an `ArrivalStatus` whose value is `ArrivalStatus.OnTime`.</span></span>  
  
 [!code-csharp[System.Enum.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/class1.cs#2)]
 [!code-vb[System.Enum.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/class1.vb#2)]  
  
 <span data-ttu-id="e676c-130">您可以也中具現化的列舉值如下：</span><span class="sxs-lookup"><span data-stu-id="e676c-130">You can also instantiate an enumeration value in the following ways:</span></span>  
  
-   <span data-ttu-id="e676c-131">您可以使用特定的程式設計語言的功能來轉型 （如 C#) 或轉換 （就像在 Visual Basic) 的整數值的列舉值。</span><span class="sxs-lookup"><span data-stu-id="e676c-131">By using a particular programming language's features to cast (as in C#) or convert (as in Visual Basic) an integer value to an enumeration value.</span></span> <span data-ttu-id="e676c-132">下列範例會建立`ArrivalStatus`物件，其值為`ArrivalStatus.Early`以這種方式。</span><span class="sxs-lookup"><span data-stu-id="e676c-132">The following example creates an `ArrivalStatus` object whose value is `ArrivalStatus.Early` in this way.</span></span>  
  
     [!code-csharp[System.Enum.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/class2.cs#4)]
     [!code-vb[System.Enum.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/class2.vb#4)]  
  
-   <span data-ttu-id="e676c-133">藉由呼叫其隱含預設建構函式。</span><span class="sxs-lookup"><span data-stu-id="e676c-133">By calling its implicit default constructor.</span></span> <span data-ttu-id="e676c-134">如下列範例所示，在此情況下列舉型別執行個體的基礎值為 0。</span><span class="sxs-lookup"><span data-stu-id="e676c-134">As the following example shows, in this case the underlying value of the enumeration instance is 0.</span></span> <span data-ttu-id="e676c-135">不過，這不一定有效的常數，列舉中的值。</span><span class="sxs-lookup"><span data-stu-id="e676c-135">However, this is not necessarily the value of a valid constant in the enumeration.</span></span>  
  
     [!code-csharp[System.Enum.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/class2.cs#3)]
     [!code-vb[System.Enum.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/class2.vb#3)]  
  
-   <span data-ttu-id="e676c-136">藉由呼叫<xref:System.Enum.Parse%2A>或<xref:System.Enum.TryParse%2A>方法來剖析字串，包含在列舉常數的名稱。</span><span class="sxs-lookup"><span data-stu-id="e676c-136">By calling the <xref:System.Enum.Parse%2A> or <xref:System.Enum.TryParse%2A> method to parse a string that contains the name of a constant in the enumeration.</span></span> <span data-ttu-id="e676c-137">如需詳細資訊，請參閱 <<c0> [ 剖析的列舉值](#parsing)一節。</span><span class="sxs-lookup"><span data-stu-id="e676c-137">For more information, see the [Parsing Enumeration Values](#parsing) section.</span></span>  
  
-   <span data-ttu-id="e676c-138">藉由呼叫<xref:System.Enum.ToObject%2A>方法，將整數值轉換為列舉類型。</span><span class="sxs-lookup"><span data-stu-id="e676c-138">By calling the <xref:System.Enum.ToObject%2A> method to convert an integral value to an enumeration type.</span></span> <span data-ttu-id="e676c-139">如需詳細資訊，請參閱 <<c0> [ 執行的轉換](#conversions)一節。</span><span class="sxs-lookup"><span data-stu-id="e676c-139">For more information, see the [Performing Conversions](#conversions) section.</span></span>  
  
<a name="BestPractices"></a>   
## <a name="enumeration-best-practices"></a><span data-ttu-id="e676c-140">列舉的最佳作法</span><span class="sxs-lookup"><span data-stu-id="e676c-140">Enumeration best practices</span></span>  
 <span data-ttu-id="e676c-141">建議當您定義列舉類型時，使用下列最佳作法：</span><span class="sxs-lookup"><span data-stu-id="e676c-141">We recommend that you use the following best practices when you define enumeration types:</span></span>  
  
-   <span data-ttu-id="e676c-142">如果您還沒有定義為列舉成員，其值為 0，請考慮建立`None`列舉的常數。</span><span class="sxs-lookup"><span data-stu-id="e676c-142">If you have not defined an enumeration member whose value is 0, consider creating a `None` enumerated constant.</span></span> <span data-ttu-id="e676c-143">根據預設，列舉型別所使用的記憶體會初始化為零的通用語言執行平台。</span><span class="sxs-lookup"><span data-stu-id="e676c-143">By default, the memory used for the enumeration is initialized to zero by the common language runtime.</span></span> <span data-ttu-id="e676c-144">因此，如果您沒有定義其值為零的常數，列舉會包含不合法的值建立時。</span><span class="sxs-lookup"><span data-stu-id="e676c-144">Consequently, if you do not define a constant whose value is zero, the enumeration will contain an illegal value when it is created.</span></span>  
  
-   <span data-ttu-id="e676c-145">如果沒有明顯的預設案例中，您的應用程式必須代表，請考慮使用列舉常數的值為零來表示。</span><span class="sxs-lookup"><span data-stu-id="e676c-145">If there is an obvious default case that your application has to represent, consider using an enumerated constant whose value is zero to represent it.</span></span> <span data-ttu-id="e676c-146">如果沒有任何預設的情況，請考慮使用列舉的常數的值為零以指定的情況下，不代表任何其他的列舉常數。</span><span class="sxs-lookup"><span data-stu-id="e676c-146">If there is no default case, consider using an enumerated constant whose value is zero to specify the case that is not represented by any of the other enumerated constants.</span></span>  
  
-   <span data-ttu-id="e676c-147">未指定保留供未來使用的列舉的常數。</span><span class="sxs-lookup"><span data-stu-id="e676c-147">Do not specify enumerated constants that are reserved for future use.</span></span>  
  
-   <span data-ttu-id="e676c-148">當您定義的方法或屬性會做為值的列舉的常數時，請考慮驗證此值。</span><span class="sxs-lookup"><span data-stu-id="e676c-148">When you define a method or property that takes an enumerated constant as a value, consider validating the value.</span></span> <span data-ttu-id="e676c-149">原因是，您就可以轉換數值列舉類型，即使在列舉中未定義該數字的值。</span><span class="sxs-lookup"><span data-stu-id="e676c-149">The reason is that you can cast a numeric value to the enumeration type even if that numeric value is not defined in the enumeration.</span></span>  
  
 <span data-ttu-id="e676c-150">中所列的常數是位元欄位的列舉類型的其他最佳作法[非獨佔成員和旗標屬性](#Flags)一節。</span><span class="sxs-lookup"><span data-stu-id="e676c-150">Additional best practices for enumeration types whose constants are bit fields are listed in the [Non-Exclusive Members and the Flags Attribute](#Flags) section.</span></span>  
  
<a name="Operations"></a>   
## <a name="performing-operations-with-enumerations"></a><span data-ttu-id="e676c-151">執行列舉作業</span><span class="sxs-lookup"><span data-stu-id="e676c-151">Performing operations with enumerations</span></span>  
 <span data-ttu-id="e676c-152">當您建立列舉型別時，您無法定義新的方法。</span><span class="sxs-lookup"><span data-stu-id="e676c-152">You cannot define new methods when you are creating an enumeration.</span></span> <span data-ttu-id="e676c-153">不過，列舉型別繼承一組完整的靜態和執行個體方法，從<xref:System.Enum>類別。</span><span class="sxs-lookup"><span data-stu-id="e676c-153">However, an enumeration type inherits a complete set of static and instance methods from the <xref:System.Enum> class.</span></span> <span data-ttu-id="e676c-154">下列各節問卷大部分的這些方法，除了使用列舉值時常用的其他數種方法。</span><span class="sxs-lookup"><span data-stu-id="e676c-154">The following sections survey most of these methods, in addition to several other methods that are commonly used when working with enumeration values.</span></span>  
  
<a name="conversions"></a>   
### <a name="performing-conversions"></a><span data-ttu-id="e676c-155">執行轉換</span><span class="sxs-lookup"><span data-stu-id="e676c-155">Performing conversions</span></span>  
 <span data-ttu-id="e676c-156">您可以使用轉型 （在 C# 中) 或 （在 Visual Basic) 的轉換運算子，轉換為列舉成員和其基礎類型之間。</span><span class="sxs-lookup"><span data-stu-id="e676c-156">You can convert between an enumeration member and its underlying type by using a casting (in C#) or conversion (in Visual Basic) operator.</span></span> <span data-ttu-id="e676c-157">下列範例會使用轉型或轉換運算子，來執行轉換，從整數的列舉值和從整數的列舉值。</span><span class="sxs-lookup"><span data-stu-id="e676c-157">The following example uses casting or conversion operators to perform conversions both from an integer to an enumeration value and from an enumeration value to an integer.</span></span>  
  
 [!code-csharp[System.Enum.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/class2.cs#5)]
 [!code-vb[System.Enum.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/class2.vb#5)]  
  
 <span data-ttu-id="e676c-158"><xref:System.Enum>類別也包含<xref:System.Enum.ToObject%2A>任何整數類資料類型的值轉換為列舉值的方法。</span><span class="sxs-lookup"><span data-stu-id="e676c-158">The <xref:System.Enum> class also includes a <xref:System.Enum.ToObject%2A> method that converts a value of any integral type to an enumeration value.</span></span> <span data-ttu-id="e676c-159">下列範例會使用<xref:System.Enum.ToObject%28System.Type%2CSystem.Int32%29>方法，將轉換<xref:System.Int32>到`ArrivalStatus`值。</span><span class="sxs-lookup"><span data-stu-id="e676c-159">The following example uses the <xref:System.Enum.ToObject%28System.Type%2CSystem.Int32%29> method to convert an <xref:System.Int32> to an `ArrivalStatus` value.</span></span> <span data-ttu-id="e676c-160">請注意，因為<xref:System.Enum.ToObject%2A>傳回值的型別<xref:System.Object>，轉型或轉換運算子的用法可能仍然需要將物件轉換成列舉型別。</span><span class="sxs-lookup"><span data-stu-id="e676c-160">Note that, because the <xref:System.Enum.ToObject%2A> returns a value of type <xref:System.Object>, the use of a casting or conversion operator may still be necessary to cast the object to the enumeration type.</span></span>  
  
 [!code-csharp[System.Enum.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/class2.cs#6)]
 [!code-vb[System.Enum.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/class2.vb#6)]  
  
 <span data-ttu-id="e676c-161">當整數轉換為列舉值，就可以指派不是實際的列舉型別成員的值。</span><span class="sxs-lookup"><span data-stu-id="e676c-161">When converting an integer to an enumeration value, it is possible to assign a value that is not actually a member of the enumeration.</span></span> <span data-ttu-id="e676c-162">若要避免這個問題，您可以傳遞至整數<xref:System.Enum.IsDefined%2A>方法，然後再執行轉換。</span><span class="sxs-lookup"><span data-stu-id="e676c-162">To prevent this, you can pass the integer to the <xref:System.Enum.IsDefined%2A> method before performing the conversion.</span></span> <span data-ttu-id="e676c-163">下列範例會使用這個方法來判斷的整數值陣列中的項目是否可以轉換成`ArrivalStatus`值。</span><span class="sxs-lookup"><span data-stu-id="e676c-163">The following example uses this method to determine whether the elements in an array of integer values can be converted to `ArrivalStatus` values.</span></span>  
  
 [!code-csharp[System.Enum.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classconversion1.cs#7)]
 [!code-vb[System.Enum.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classconversion1.vb#7)]  
  
 <span data-ttu-id="e676c-164">雖然<xref:System.Enum>類別提供的明確介面實作<xref:System.IConvertible>介面從列舉值轉換成整數類資料類型，您應該使用的方法<xref:System.Convert>類別，例如<xref:System.Convert.ToInt32%2A>至執行這些轉換。</span><span class="sxs-lookup"><span data-stu-id="e676c-164">Although the <xref:System.Enum> class provides explicit interface implementations of the <xref:System.IConvertible> interface for converting from an enumeration value to an integral type, you should use the methods of the <xref:System.Convert> class, such as <xref:System.Convert.ToInt32%2A>, to perform these conversions.</span></span> <span data-ttu-id="e676c-165">下列範例說明如何使用<xref:System.Enum.GetUnderlyingType%2A>方法，連同<xref:System.Convert.ChangeType%2A?displayProperty=nameWithType>方法，將列舉值轉換為其基礎類型。</span><span class="sxs-lookup"><span data-stu-id="e676c-165">The following example illustrates how you can use the <xref:System.Enum.GetUnderlyingType%2A> method along with the <xref:System.Convert.ChangeType%2A?displayProperty=nameWithType> method to convert an enumeration value to its underlying type.</span></span> <span data-ttu-id="e676c-166">請注意，此範例不需要知道在編譯時期列舉的基礎類型。</span><span class="sxs-lookup"><span data-stu-id="e676c-166">Note that this example does not require the underlying type of the enumeration to be known at compile time.</span></span>  
  
 [!code-csharp[System.Enum.Class#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classconversion2.cs#8)]
 [!code-vb[System.Enum.Class#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classconversion2.vb#8)]  
  
<a name="parsing"></a>   
### <a name="parsing-enumeration-values"></a><span data-ttu-id="e676c-167">剖析的列舉值</span><span class="sxs-lookup"><span data-stu-id="e676c-167">Parsing enumeration values</span></span>  
 <span data-ttu-id="e676c-168"><xref:System.Enum.Parse%2A>和<xref:System.Enum.TryParse%2A>方法可讓您將列舉值的字串表示轉換為該值。</span><span class="sxs-lookup"><span data-stu-id="e676c-168">The <xref:System.Enum.Parse%2A> and <xref:System.Enum.TryParse%2A> methods allow you to convert the string representation of an enumeration value to that value.</span></span> <span data-ttu-id="e676c-169">字串表示可以是名稱或列舉常數的基礎值。</span><span class="sxs-lookup"><span data-stu-id="e676c-169">The string representation can be either the name or the underlying value of an enumeration constant.</span></span> <span data-ttu-id="e676c-170">請注意，剖析方法已成功轉換不特定的列舉型別的成員，如果可以將字串轉換成列舉的基礎型別值的數字的字串表示法。</span><span class="sxs-lookup"><span data-stu-id="e676c-170">Note that the parsing methods will successfully convert string representations of numbers that are not members of a particular enumeration if the strings can be converted to a value of the enumeration's underlying type.</span></span> <span data-ttu-id="e676c-171">若要避免此情形，<xref:System.Enum.IsDefined%2A>可以呼叫方法，以確保剖析方法的結果是有效的列舉值。</span><span class="sxs-lookup"><span data-stu-id="e676c-171">To prevent this, the <xref:System.Enum.IsDefined%2A> method can be called to ensure that the result of the parsing method is a valid enumeration value.</span></span> <span data-ttu-id="e676c-172">此範例說明此方法，並示範如何呼叫這兩<xref:System.Enum.Parse%28System.Type%2CSystem.String%29>和<xref:System.Enum.TryParse%60%601%28System.String%2C%60%600%40%29?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="e676c-172">The example illustrates this approach and demonstrates calls to both the <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> and <xref:System.Enum.TryParse%60%601%28System.String%2C%60%600%40%29?displayProperty=nameWithType> methods.</span></span> <span data-ttu-id="e676c-173">請注意，非泛型的剖析方法會傳回物件，您可能必須轉型 （在 C#) 或 （在 Visual Basic) 轉換成適當的列舉類型。</span><span class="sxs-lookup"><span data-stu-id="e676c-173">Note that the non-generic parsing method returns an object that you may have to cast (in C#) or convert (in Visual Basic) to the appropriate enumeration type.</span></span>  
  
 [!code-csharp[System.Enum.Class#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classparse1.cs#9)]
 [!code-vb[System.Enum.Class#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classparse1.vb#9)]  
  
<a name="formatting"></a>   
### <a name="formatting-enumeration-values"></a><span data-ttu-id="e676c-174">格式化的列舉值</span><span class="sxs-lookup"><span data-stu-id="e676c-174">Formatting enumeration values</span></span>  
 <span data-ttu-id="e676c-175">您可以將列舉值轉換成其字串表示法藉由呼叫靜態<xref:System.Enum.Format%2A>方法，以及執行個體的多載<xref:System.Enum.ToString%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e676c-175">You can convert enumeration values to their string representations by calling the static <xref:System.Enum.Format%2A> method, as well as the overloads of the instance <xref:System.Enum.ToString%2A> method.</span></span> <span data-ttu-id="e676c-176">您可以使用格式字串來控制在其中的列舉值會表示為字串的精確方式。</span><span class="sxs-lookup"><span data-stu-id="e676c-176">You can use a format string to control the precise way in which an enumeration value is represented as a string.</span></span> <span data-ttu-id="e676c-177">如需詳細資訊，請參閱 <<c0> [ 列舉格式字串](~/docs/standard/base-types/enumeration-format-strings.md)。</span><span class="sxs-lookup"><span data-stu-id="e676c-177">For more information, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).</span></span> <span data-ttu-id="e676c-178">下列範例所使用的是支援的列舉格式字串 （"G"或"g"、"D"或"d"、"X"或"x"，和"F"或"f"） 的每個要轉換的成員`ArrivalStatus`列舉成其字串表示。</span><span class="sxs-lookup"><span data-stu-id="e676c-178">The following example uses each of the supported enumeration format strings ("G" or "g", "D" or "d", "X" or "x", and "F" or "f" ) to convert a member of the `ArrivalStatus` enumeration to its string representations.</span></span>  
  
 [!code-csharp[System.Enum.Class#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classformat1.cs#10)]
 [!code-vb[System.Enum.Class#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classformat1.vb#10)]  
  
<a name="iterating"></a>   
### <a name="iterating-enumeration-members"></a><span data-ttu-id="e676c-179">逐一查看列舉型別成員</span><span class="sxs-lookup"><span data-stu-id="e676c-179">Iterating enumeration members</span></span>  
 <span data-ttu-id="e676c-180"><xref:System.Enum>類型未實作<xref:System.Collections.IEnumerable>或是<xref:System.Collections.Generic.IEnumerable%601>介面，可讓您逐一查看集合的成員，使用`foreach`（在 C# 中) 或`For Each`（在 Visual Basic 中) 建構。</span><span class="sxs-lookup"><span data-stu-id="e676c-180">The <xref:System.Enum> type does not implement the <xref:System.Collections.IEnumerable> or <xref:System.Collections.Generic.IEnumerable%601> interface, which would enable you to iterate members of a collection by using a `foreach` (in C#) or `For Each` (in Visual Basic) construct.</span></span> <span data-ttu-id="e676c-181">不過，您可以列舉中兩種方式之一的成員。</span><span class="sxs-lookup"><span data-stu-id="e676c-181">However, you can enumerate members in either of two ways.</span></span>  
  
-   <span data-ttu-id="e676c-182">您可以呼叫<xref:System.Enum.GetNames%2A>方法來擷取字串陣列，包含列舉成員的名稱。</span><span class="sxs-lookup"><span data-stu-id="e676c-182">You can call the <xref:System.Enum.GetNames%2A> method to retrieve a string array containing the names of the enumeration members.</span></span> <span data-ttu-id="e676c-183">接下來，每個項目的字串陣列，您可以呼叫<xref:System.Enum.Parse%2A>方法將字串轉換為其相等的列舉值。</span><span class="sxs-lookup"><span data-stu-id="e676c-183">Next, for each element of the string array, you can call the <xref:System.Enum.Parse%2A> method to convert the string to its equivalent enumeration value.</span></span> <span data-ttu-id="e676c-184">下列範例將示範這個方法。</span><span class="sxs-lookup"><span data-stu-id="e676c-184">The following example illustrates this approach.</span></span>  
  
     [!code-csharp[System.Enum.Class#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classiterate.cs#11)]
     [!code-vb[System.Enum.Class#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classiterate.vb#11)]  
  
-   <span data-ttu-id="e676c-185">您可以呼叫<xref:System.Enum.GetValues%2A>方法來擷取陣列，其中包含基礎值的列舉型別中。</span><span class="sxs-lookup"><span data-stu-id="e676c-185">You can call the <xref:System.Enum.GetValues%2A> method to retrieve an array that contains the underlying values in the enumeration.</span></span> <span data-ttu-id="e676c-186">接下來，針對陣列的每個項目，您可以呼叫<xref:System.Enum.ToObject%2A>將整數轉換為其相等的列舉值的方法。</span><span class="sxs-lookup"><span data-stu-id="e676c-186">Next, for each element of the array, you can call the <xref:System.Enum.ToObject%2A> method to convert the integer to its equivalent enumeration value.</span></span> <span data-ttu-id="e676c-187">下列範例將示範這個方法。</span><span class="sxs-lookup"><span data-stu-id="e676c-187">The following example illustrates this approach.</span></span>  
  
     [!code-csharp[System.Enum.Class#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classiterate.cs#12)]
     [!code-vb[System.Enum.Class#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classiterate.vb#12)]  
  
<a name="Flags"></a>   
## <a name="non-exclusive-members-and-the-flags-attribute"></a><span data-ttu-id="e676c-188">非獨佔成員和旗標屬性</span><span class="sxs-lookup"><span data-stu-id="e676c-188">Non-exclusive members and the Flags attribute</span></span>  
 <span data-ttu-id="e676c-189">列舉型別的常見用途之一是代表一組互斥的值。</span><span class="sxs-lookup"><span data-stu-id="e676c-189">One common use of an enumeration is to represent a set of mutually exclusive values.</span></span> <span data-ttu-id="e676c-190">例如，`ArrivalStatus`執行個體可以有值為`Early`， `OnTime`，或`Late`。</span><span class="sxs-lookup"><span data-stu-id="e676c-190">For example, an `ArrivalStatus` instance can have a value of `Early`, `OnTime`, or `Late`.</span></span> <span data-ttu-id="e676c-191">值沒有任何意義`ArrivalStatus`以反映多個列舉常數的執行個體。</span><span class="sxs-lookup"><span data-stu-id="e676c-191">It makes no sense for the value of an `ArrivalStatus` instance to reflect more than one enumeration constant.</span></span>  
  
 <span data-ttu-id="e676c-192">在其他情況下，不過，列舉型別物件的值可以包含多個列舉成員，而且每一個成員代表位元欄位中的列舉值。</span><span class="sxs-lookup"><span data-stu-id="e676c-192">In other cases, however, the value of an enumeration object can include multiple enumeration members, and each member represents a bit field in the enumeration value.</span></span> <span data-ttu-id="e676c-193"><xref:System.FlagsAttribute>屬性可以用來表示列舉型別包含的位元欄位。</span><span class="sxs-lookup"><span data-stu-id="e676c-193">The <xref:System.FlagsAttribute> attribute can be used to indicate that the enumeration consists of bit fields.</span></span> <span data-ttu-id="e676c-194">例如，名為列舉`Pets`可能用來指出的家庭成員中的寵物類型。</span><span class="sxs-lookup"><span data-stu-id="e676c-194">For example, an enumeration named `Pets` might be used to indicate the kinds of pets in a household.</span></span> <span data-ttu-id="e676c-195">可以如下所示定義。</span><span class="sxs-lookup"><span data-stu-id="e676c-195">It can be defined as follows.</span></span>  
  
 [!code-csharp[System.Enum.Class#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classbitwise1.cs#13)]
 [!code-vb[System.Enum.Class#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classbitwise1.vb#13)]  
  
 <span data-ttu-id="e676c-196">`Pets`列舉型別再使用，如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="e676c-196">The `Pets` enumeration can then be used as shown in the following example.</span></span>  
  
 [!code-csharp[System.Enum.Class#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classbitwise1.cs#14)]
 [!code-vb[System.Enum.Class#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classbitwise1.vb#14)]  
  
 <span data-ttu-id="e676c-197">定義的位元時，就應該使用下列最佳作法列舉型別，並套用<xref:System.FlagsAttribute>屬性。</span><span class="sxs-lookup"><span data-stu-id="e676c-197">The following best practices should be used when defining a bitwise enumeration and applying the <xref:System.FlagsAttribute> attribute.</span></span>  
  
-   <span data-ttu-id="e676c-198">使用<xref:System.FlagsAttribute>列舉只有位元運算 (AND、 OR、 互斥 OR) 是一個數字值上執行的自訂屬性。</span><span class="sxs-lookup"><span data-stu-id="e676c-198">Use the <xref:System.FlagsAttribute> custom attribute for an enumeration only if a bitwise operation (AND, OR, EXCLUSIVE OR) is to be performed on a numeric value.</span></span>  
  
-   <span data-ttu-id="e676c-199">定義列舉常數乘冪數，也就是 1、 2、 4、 8 和等等。</span><span class="sxs-lookup"><span data-stu-id="e676c-199">Define enumeration constants in powers of two, that is, 1, 2, 4, 8, and so on.</span></span> <span data-ttu-id="e676c-200">這表示在結合的列舉常數的個別旗標不會重疊。</span><span class="sxs-lookup"><span data-stu-id="e676c-200">This means the individual flags in combined enumeration constants do not overlap.</span></span>  
  
-   <span data-ttu-id="e676c-201">請考慮建立列舉的常數常使用的旗標組合。</span><span class="sxs-lookup"><span data-stu-id="e676c-201">Consider creating an enumerated constant for commonly used flag combinations.</span></span> <span data-ttu-id="e676c-202">比方說，如果您有用於檔案 I/O 作業的列舉，包含列舉的常數`Read = 1`並`Write = 2`，請考慮建立的列舉的常數`ReadWrite = Read OR Write`，哪一個結合`Read`和`Write`旗標。</span><span class="sxs-lookup"><span data-stu-id="e676c-202">For example, if you have an enumeration used for file I/O operations that contains the enumerated constants `Read = 1` and `Write = 2`, consider creating the enumerated constant `ReadWrite = Read OR Write`, which combines the `Read` and `Write` flags.</span></span> <span data-ttu-id="e676c-203">此外，用來結合旗標的位元 OR 運算可能被視為一個進階的概念，在某些情況下，應該不需要簡單的工作。</span><span class="sxs-lookup"><span data-stu-id="e676c-203">In addition, the bitwise OR operation used to combine the flags might be considered an advanced concept in some circumstances that should not be required for simple tasks.</span></span>  
  
-   <span data-ttu-id="e676c-204">如果您將定義為負數為旗標的列舉常數，因為許多旗標的位置可能會設定為 1，這可能會讓人混淆的程式碼，並鼓勵編碼錯誤，請務必小心。</span><span class="sxs-lookup"><span data-stu-id="e676c-204">Use caution if you define a negative number as a flag enumerated constant because many flag positions might be set to 1, which might make your code confusing and encourage coding errors.</span></span>  
  
-   <span data-ttu-id="e676c-205">便利的方式來測試是否已設定旗標的數值，就是呼叫執行個體<xref:System.Enum.HasFlag%2A>方法，如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="e676c-205">A convenient way to test whether a flag is set in a numeric value is to call the instance <xref:System.Enum.HasFlag%2A> method, as shown in the following example.</span></span>  
  
     [!code-csharp[System.Enum.Class#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classbitwise1.cs#15)]
     [!code-vb[System.Enum.Class#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classbitwise1.vb#15)]  
  
     <span data-ttu-id="e676c-206">它相當於執行位元之間的 AND 運算的數值和旗標列舉的常數，設定中的數字的值為零的旗標未對應的所有位元，並測試該作業的結果是否等於旗標的列舉的常數。</span><span class="sxs-lookup"><span data-stu-id="e676c-206">It is equivalent to performing a bitwise AND operation between the numeric value and the flag enumerated constant, which sets all bits in the numeric value to zero that do not correspond to the flag, and then testing whether the result of that operation is equal to the flag enumerated constant.</span></span> <span data-ttu-id="e676c-207">下列範例可說明此點。</span><span class="sxs-lookup"><span data-stu-id="e676c-207">This is illustrated in the following example.</span></span>  
  
     [!code-csharp[System.Enum.Class#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classbitwise1.cs#16)]
     [!code-vb[System.Enum.Class#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classbitwise1.vb#16)]  
  
-   <span data-ttu-id="e676c-208">使用`None`旗標名稱列舉其值為零的常數。</span><span class="sxs-lookup"><span data-stu-id="e676c-208">Use `None` as the name of the flag enumerated constant whose value is zero.</span></span> <span data-ttu-id="e676c-209">您無法使用`None`中來測試旗標，因為結果一律為零的位元 AND 運算的列舉的常數。</span><span class="sxs-lookup"><span data-stu-id="e676c-209">You cannot use the `None` enumerated constant in a bitwise AND operation to test for a flag because the result is always zero.</span></span> <span data-ttu-id="e676c-210">不過，您可以執行的邏輯不數值之間的位元、 比較和`None`列舉的常數，以判斷是否已設定在數值中的任何位元。</span><span class="sxs-lookup"><span data-stu-id="e676c-210">However, you can perform a logical, not a bitwise, comparison between the numeric value and the `None` enumerated constant to determine whether any bits in the numeric value are set.</span></span> <span data-ttu-id="e676c-211">下列範例可說明此點。</span><span class="sxs-lookup"><span data-stu-id="e676c-211">This is illustrated in the following example.</span></span>  
  
     [!code-csharp[System.Enum.Class#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classbitwise1.cs#17)]
     [!code-vb[System.Enum.Class#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classbitwise1.vb#17)]  
  
-   <span data-ttu-id="e676c-212">未定義的列舉值，只是要鏡像的列舉型別本身的狀態。</span><span class="sxs-lookup"><span data-stu-id="e676c-212">Do not define an enumeration value solely to mirror the state of the enumeration itself.</span></span> <span data-ttu-id="e676c-213">例如，未定義列舉的常數，只是標記的列舉結尾。</span><span class="sxs-lookup"><span data-stu-id="e676c-213">For example, do not define an enumerated constant that merely marks the end of the enumeration.</span></span> <span data-ttu-id="e676c-214">如果您需要判斷列舉的最後一個值，請明確檢查該值。</span><span class="sxs-lookup"><span data-stu-id="e676c-214">If you need to determine the last value of the enumeration, check for that value explicitly.</span></span> <span data-ttu-id="e676c-215">此外，您可以執行進行範圍檢查的第一個和最後一個列舉的常數，如果範圍內的所有值都都有效。</span><span class="sxs-lookup"><span data-stu-id="e676c-215">In addition, you can perform a range check for the first and last enumerated constant if all values within the range are valid.</span></span>  
  
<a name="Methods"></a>   
## <a name="adding-enumeration-methods"></a><span data-ttu-id="e676c-216">新增列舉方法</span><span class="sxs-lookup"><span data-stu-id="e676c-216">Adding enumeration methods</span></span>  
 <span data-ttu-id="e676c-217">因為列舉型別由定義語言結構，例如`enum`(C#) 和`Enum`(Visual Basic)，您無法定義為繼承自這些方法之外的列舉類型的自訂方法<xref:System.Enum>類別。</span><span class="sxs-lookup"><span data-stu-id="e676c-217">Because enumeration types are defined by language structures, such as `enum` (C#) and `Enum` (Visual Basic), you cannot define custom methods for an enumeration type other than those methods inherited from the <xref:System.Enum> class.</span></span>  <span data-ttu-id="e676c-218">不過，您可以使用擴充方法，將功能加入特定的列舉型別。</span><span class="sxs-lookup"><span data-stu-id="e676c-218">However, you can use extension methods to add functionality to a particular enumeration type.</span></span>  
  
 <span data-ttu-id="e676c-219">在下例中，`Grades` 列舉代表班上學生可能得到的字母分級成績。</span><span class="sxs-lookup"><span data-stu-id="e676c-219">In the following example, the `Grades` enumeration represents the possible letter grades that a student may receive in a class.</span></span> <span data-ttu-id="e676c-220">已將名為 `Passing` 的擴充方法新增至 `Grades` 類型，以便該類型的每個執行個體現在都「知道」它是否代表傳遞等級。</span><span class="sxs-lookup"><span data-stu-id="e676c-220">An extension method named `Passing` is added to the `Grades` type so that each instance of that type now "knows" whether it represents a passing grade or not.</span></span>       <span data-ttu-id="e676c-221">`Extensions`類別也包含靜態的讀寫變數來定義最小的傳遞等級。</span><span class="sxs-lookup"><span data-stu-id="e676c-221">The `Extensions` class also contains a static read-write variable that defines the minimum passing grade.</span></span> <span data-ttu-id="e676c-222">傳回值`Passing`擴充方法會反映該變數的目前值。</span><span class="sxs-lookup"><span data-stu-id="e676c-222">The return value of the `Passing` extension method reflects the current value of that variable.</span></span>  
  
 [!code-csharp[System.Enum.Class#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/Extensions.cs#18)]
 [!code-vb[System.Enum.Class#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/Extensions.vb#18)]  
  
   
  
## Examples  
 <span data-ttu-id="e676c-223">下列範例示範如何使用列舉型別代表具名的值，以及另一個列舉，代表具名的位元欄位。</span><span class="sxs-lookup"><span data-stu-id="e676c-223">The following example demonstrates using an enumeration to represent named values and another enumeration to represent named bit fields.</span></span>  
  
 [!code-cpp[enummain#1](~/samples/snippets/cpp/VS_Snippets_CLR/enummain/CPP/EnumMain.cpp#1)]
 [!code-csharp[enummain#1](~/samples/snippets/csharp/VS_Snippets_CLR/enummain/CS/EnumMain.cs#1)]
 [!code-vb[enummain#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enummain/VB/EnumMain.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="e676c-224">此型別具備執行緒安全。</span>
      <span class="sxs-lookup">
        <span data-stu-id="e676c-224">This type is thread safe.</span>
      </span>
    </threadsafe>
    <altmember cref="T:System.ValueType" />
    <altmember cref="T:System.FlagsAttribute" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Enum ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Enum();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e676c-225">初始化 <see cref="T:System.Enum" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-225">Initializes a new instance of the <see cref="T:System.Enum" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (target As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(System::Object ^ target);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : obj -&gt; int&#xA;override this.CompareTo : obj -&gt; int" Usage="enum.CompareTo target" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="e676c-226">要比較的物件或 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-226">An object to compare, or <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e676c-227">將這個執行個體與指定的物件相比較，並傳回它們的相對值指示。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-227">Compares this instance to a specified object and returns an indication of their relative values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e676c-228">帶正負號的數字，指出這個執行個體與 <paramref name="target" /> 的相對值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-228">A signed number that indicates the relative values of this instance and <paramref name="target" />.</span>
          </span>
          <list type="table">
            <listheader>
              <term>
                <span data-ttu-id="e676c-229">值</span>
                <span class="sxs-lookup">
                  <span data-stu-id="e676c-229">Value</span>
                </span>
              </term>
              <description>
                <span data-ttu-id="e676c-230">意義</span>
                <span class="sxs-lookup">
                  <span data-stu-id="e676c-230">Meaning</span>
                </span>
              </description>
            </listheader>
            <item>
              <term>
                <span data-ttu-id="e676c-231">小於零</span>
                <span class="sxs-lookup">
                  <span data-stu-id="e676c-231">Less than zero</span>
                </span>
              </term>
              <description>
                <span data-ttu-id="e676c-232">這個執行個體的值小於 <paramref name="target" /> 的值。</span>
                <span class="sxs-lookup">
                  <span data-stu-id="e676c-232">The value of this instance is less than the value of <paramref name="target" />.</span>
                </span>
              </description>
            </item>
            <item>
              <term>
                <span data-ttu-id="e676c-233">零</span>
                <span class="sxs-lookup">
                  <span data-stu-id="e676c-233">Zero</span>
                </span>
              </term>
              <description>
                <span data-ttu-id="e676c-234">這個執行個體的值等於 <paramref name="target" /> 的值。</span>
                <span class="sxs-lookup">
                  <span data-stu-id="e676c-234">The value of this instance is equal to the value of <paramref name="target" />.</span>
                </span>
              </description>
            </item>
            <item>
              <term>
                <span data-ttu-id="e676c-235">大於零</span>
                <span class="sxs-lookup">
                  <span data-stu-id="e676c-235">Greater than zero</span>
                </span>
              </term>
              <description>
                <span data-ttu-id="e676c-236">這個執行個體的值大於 <paramref name="target" /> 的值。</span>
                <span class="sxs-lookup">
                  <span data-stu-id="e676c-236">The value of this instance is greater than the value of <paramref name="target" />.</span>
                </span>
                <span data-ttu-id="e676c-237">-或-</span>
                <span class="sxs-lookup">
                  <span data-stu-id="e676c-237">-or-</span>
                </span>
                <span data-ttu-id="e676c-238">
                  <paramref name="target" /> 為 <see langword="null" />。</span>
                <span class="sxs-lookup">
                  <span data-stu-id="e676c-238">
                    <paramref name="target" /> is <see langword="null" />.</span>
                </span>
              </description>
            </item>
          </list>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e676c-239">下列範例示範如何將`CompareTo`的內容中`Enum`。</span><span class="sxs-lookup"><span data-stu-id="e676c-239">The following example illustrates the use of `CompareTo` in the context of `Enum`.</span></span>  
  
 [!code-cpp[enumcompareto#1](~/samples/snippets/cpp/VS_Snippets_CLR/enumcompareto/CPP/EnumCompareTo.cpp#1)]
 [!code-csharp[enumcompareto#1](~/samples/snippets/csharp/VS_Snippets_CLR/enumcompareto/CS/EnumCompareTo.cs#1)]
 [!code-vb[enumcompareto#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enumcompareto/VB/EnumCompareTo.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e676c-240">
            <paramref name="target" /> 與這個執行個體的類型不同。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-240">
              <paramref name="target" /> and this instance are not the same type.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e676c-241">這個執行個體不是類型 <see cref="T:System.SByte" />、<see cref="T:System.Int16" />、<see cref="T:System.Int32" />、<see cref="T:System.Int64" />、<see cref="T:System.Byte" />、<see cref="T:System.UInt16" />、<see cref="T:System.UInt32" /> 或 <see cref="T:System.UInt64" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-241">This instance is not type <see cref="T:System.SByte" />, <see cref="T:System.Int16" />, <see cref="T:System.Int32" />, <see cref="T:System.Int64" />, <see cref="T:System.Byte" />, <see cref="T:System.UInt16" />, <see cref="T:System.UInt32" />, or <see cref="T:System.UInt64" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Enum.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="enum.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="e676c-242">與這個執行個體相比較的物件，或 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-242">An object to compare with this instance, or <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e676c-243">傳回值，指出這個執行個體 (Instance) 是否和指定的物件相等。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-243">Returns a value indicating whether this instance is equal to a specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e676c-244">如果 <paramref name="obj" /> 是與這個執行個體具有相同類型及基礎值的列舉值則為 <see langword="true" />；否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-244">
              <see langword="true" /> if <paramref name="obj" /> is an enumeration value of the same type and with the same underlying value as this instance; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e676c-245"><xref:System.Enum.Equals%28System.Object%29?displayProperty=nameWithType>方法覆寫<xref:System.ValueType.Equals%28System.Object%29?displayProperty=nameWithType>定義列舉型別成員是否相等的評估方式。</span><span class="sxs-lookup"><span data-stu-id="e676c-245">The <xref:System.Enum.Equals%28System.Object%29?displayProperty=nameWithType> method overrides <xref:System.ValueType.Equals%28System.Object%29?displayProperty=nameWithType> to define how enumeration members are evaluated for equality.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e676c-246">在下列程式碼中，說明了如何使用 <xref:System.Enum.Equals%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="e676c-246">The following example illustrates the use of the <xref:System.Enum.Equals%2A> method.</span></span>  
  
 [!code-cpp[enumequals#1](~/samples/snippets/cpp/VS_Snippets_CLR/enumequals/CPP/EnumEquals.cpp#1)]
 [!code-csharp[enumequals#1](~/samples/snippets/csharp/VS_Snippets_CLR/enumequals/CS/EnumEquals.cs#1)]
 [!code-vb[enumequals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enumequals/VB/EnumEquals.vb#1)]  
  
 <span data-ttu-id="e676c-247">下列範例會定義兩個列舉類型，`SledDog`和`WorkDog`。</span><span class="sxs-lookup"><span data-stu-id="e676c-247">The following example defines two enumeration types, `SledDog` and `WorkDog`.</span></span> <span data-ttu-id="e676c-248">`SledDog`列舉型別有兩個成員`SledDog.AlaskanMalamute`和`SledDog.Malamute`，具有相同的基礎值。</span><span class="sxs-lookup"><span data-stu-id="e676c-248">The `SledDog` enumeration has two members, `SledDog.AlaskanMalamute` and `SledDog.Malamute`, that have the same underlying value.</span></span> <span data-ttu-id="e676c-249">若要呼叫<xref:System.Enum.Equals%2A>方法會指出這些值是否相等的因為它們的基礎值完全相同。</span><span class="sxs-lookup"><span data-stu-id="e676c-249">The call to the <xref:System.Enum.Equals%2A> method indicates that these values are equal because their underlying values are the same.</span></span> <span data-ttu-id="e676c-250">`SledDog.Malamute`和`WorkDog.Newfoundland`成員具有相同的基礎值，雖然它們代表不同的列舉型別。</span><span class="sxs-lookup"><span data-stu-id="e676c-250">The `SledDog.Malamute` and `WorkDog.Newfoundland` members have the same underlying value, although they represent different enumeration types.</span></span> <span data-ttu-id="e676c-251">呼叫<xref:System.Enum.Equals%2A>方法會指出這些值是否不相等。</span><span class="sxs-lookup"><span data-stu-id="e676c-251">A call to the <xref:System.Enum.Equals%2A> method indicates that these values are not equal.</span></span>  
  
 [!code-csharp[System.Enum.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.equals/cs/enumequals.cs#1)]
 [!code-vb[System.Enum.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.equals/vb/enumequals.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Enum.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public static string Format (Type enumType, object value, string format);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Format(class System.Type enumType, object value, string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.Format(System.Type,System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Format (enumType As Type, value As Object, format As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Format(Type ^ enumType, System::Object ^ value, System::String ^ format);" />
      <MemberSignature Language="F#" Value="static member Format : Type * obj * string -&gt; string" Usage="System.Enum.Format (enumType, value, format)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="enumType">
          <span data-ttu-id="e676c-252">要轉換的數值列舉類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-252">The enumeration type of the value to convert.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="e676c-253">要進行轉換的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-253">The value to convert.</span>
          </span>
        </param>
        <param name="format">
          <span data-ttu-id="e676c-254">要使用的輸出格式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-254">The output format to use.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e676c-255">根據指定的格式，將指定列舉類型的指定值轉換為相等的字串表示。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-255">Converts the specified value of a specified enumerated type to its equivalent string representation according to the specified format.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e676c-256">
            <paramref name="value" /> 的字串表示。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-256">A string representation of <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e676c-257">下表顯示有效的值，如`format`參數。</span><span class="sxs-lookup"><span data-stu-id="e676c-257">The following table shows the valid values for the `format` parameter.</span></span>  
  
|<span data-ttu-id="e676c-258">格式</span><span class="sxs-lookup"><span data-stu-id="e676c-258">Format</span></span>|<span data-ttu-id="e676c-259">描述</span><span class="sxs-lookup"><span data-stu-id="e676c-259">Description</span></span>|  
|------------|-----------------|  
|<span data-ttu-id="e676c-260">"G" 或 "g"</span><span class="sxs-lookup"><span data-stu-id="e676c-260">"G" or "g"</span></span>|<span data-ttu-id="e676c-261">如果`value`是相等的具名的列舉常數，該常數名稱是傳回; 否則即為相當的十進位`value`會傳回。</span><span class="sxs-lookup"><span data-stu-id="e676c-261">If `value` is equal to a named enumerated constant, the name of that constant is returned; otherwise, the decimal equivalent of `value` is returned.</span></span><br /><br /> <span data-ttu-id="e676c-262">例如，假設名為紅色，唯一的列舉的常數，且其值為 1。</span><span class="sxs-lookup"><span data-stu-id="e676c-262">For example, suppose the only enumerated constant is named Red, and its value is 1.</span></span> <span data-ttu-id="e676c-263">如果`value`指定為 1 時，此格式會傳回"Red"。</span><span class="sxs-lookup"><span data-stu-id="e676c-263">If `value` is specified as 1, this format returns "Red".</span></span> <span data-ttu-id="e676c-264">不過，如果`value`指定為 2，這種格式會傳回"2"。</span><span class="sxs-lookup"><span data-stu-id="e676c-264">However, if `value` is specified as 2, this format returns "2".</span></span><br /><br /> <span data-ttu-id="e676c-265">-或-</span><span class="sxs-lookup"><span data-stu-id="e676c-265">-or-</span></span><br /><br /> <span data-ttu-id="e676c-266">如果<xref:System.FlagsAttribute>自訂屬性套用至列舉，`value`會被視為位元欄位包含一個或多個位元所組成的一或多個旗標。</span><span class="sxs-lookup"><span data-stu-id="e676c-266">If the <xref:System.FlagsAttribute> custom attribute is applied to the enumeration, `value` is treated as a bit field that contains one or more flags that consist of one or more bits.</span></span><br /><br /> <span data-ttu-id="e676c-267">如果`value`等於的組合稱為列舉的常數，以分隔符號隔開這些常數的名稱會傳回的清單。</span><span class="sxs-lookup"><span data-stu-id="e676c-267">If `value` is equal to a combination of named enumerated constants, a delimiter-separated list of the names of those constants is returned.</span></span> <span data-ttu-id="e676c-268">`value` 搜尋旗標，會從最大值的旗標的最小值。</span><span class="sxs-lookup"><span data-stu-id="e676c-268">`value` is searched for flags, going from the flag with the largest value to the smallest value.</span></span> <span data-ttu-id="e676c-269">每個對應位元欄位中的旗標`value`的常數名稱串連的分隔符號分隔的清單。</span><span class="sxs-lookup"><span data-stu-id="e676c-269">For each flag that corresponds to a bit field in `value`, the name of the constant is concatenated to the delimiter-separated list.</span></span> <span data-ttu-id="e676c-270">該旗標的值然後排除做進一步的考量，並繼續搜尋下一個旗標。</span><span class="sxs-lookup"><span data-stu-id="e676c-270">The value of that flag is then excluded from further consideration, and the search continues for the next flag.</span></span><br /><br /> <span data-ttu-id="e676c-271">如果`value`不等於由名為列舉的常數，相當的十進位`value`會傳回。</span><span class="sxs-lookup"><span data-stu-id="e676c-271">If `value` is not equal to a combination of named enumerated constants, the decimal equivalent of `value` is returned.</span></span>|  
|<span data-ttu-id="e676c-272">"X" 或 "x"</span><span class="sxs-lookup"><span data-stu-id="e676c-272">"X" or "x"</span></span>|<span data-ttu-id="e676c-273">代表`value`以十六進位格式，而不需要前置"0x"。</span><span class="sxs-lookup"><span data-stu-id="e676c-273">Represents `value` in hexadecimal format without a leading "0x".</span></span>|  
|<span data-ttu-id="e676c-274">"D" 或 "d"</span><span class="sxs-lookup"><span data-stu-id="e676c-274">"D" or "d"</span></span>|<span data-ttu-id="e676c-275">代表`value`十進位格式。</span><span class="sxs-lookup"><span data-stu-id="e676c-275">Represents `value` in decimal form.</span></span>|  
|<span data-ttu-id="e676c-276">"F" 或 "f"</span><span class="sxs-lookup"><span data-stu-id="e676c-276">"F" or "f"</span></span>|<span data-ttu-id="e676c-277">"G"或"g"、 相同的行為不同之處在於<xref:System.FlagsAttribute>不一定要存在於上<xref:System.Enum>宣告。</span><span class="sxs-lookup"><span data-stu-id="e676c-277">Behaves identically to "G" or "g", except that the <xref:System.FlagsAttribute> is not required to be present on the <xref:System.Enum> declaration.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="e676c-278">下列範例示範如何將`Format`的內容中`Enum`。</span><span class="sxs-lookup"><span data-stu-id="e676c-278">The following example illustrates the use of `Format` in the context of `Enum`.</span></span>  
  
 [!code-cpp[enumformat#1](~/samples/snippets/cpp/VS_Snippets_CLR/enumformat/CPP/EnumFormat.cpp#1)]
 [!code-csharp[enumformat#1](~/samples/snippets/csharp/VS_Snippets_CLR/enumformat/CS/EnumFormat.cs#1)]
 [!code-vb[enumformat#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enumformat/VB/EnumFormat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e676c-279">
            <paramref name="enumType" />、<paramref name="value" /> 或 <paramref name="format" /> 參數是 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-279">The <paramref name="enumType" />, <paramref name="value" />, or <paramref name="format" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e676c-280">
            <paramref name="enumType" /> 參數不是 <see cref="T:System.Enum" /> 類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-280">The <paramref name="enumType" /> parameter is not an <see cref="T:System.Enum" /> type.</span>
          </span>
          <span data-ttu-id="e676c-281">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-281">-or-</span>
          </span>
          <span data-ttu-id="e676c-282">
            <paramref name="value" /> 來自與 <paramref name="enumType" /> 類型不同的列舉。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-282">The <paramref name="value" /> is from an enumeration that differs in type from <paramref name="enumType" />.</span>
          </span>
          <span data-ttu-id="e676c-283">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-283">-or-</span>
          </span>
          <span data-ttu-id="e676c-284">類型 <paramref name="value" /> 不是 <paramref name="enumType" /> 的基礎類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-284">The type of <paramref name="value" /> is not an underlying type of <paramref name="enumType" />.</span>
          </span>
        </exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="e676c-285">
            <paramref name="format" /> 參數包含無效的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-285">The <paramref name="format" /> parameter contains an invalid value.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e676c-286">
            <paramref name="format" /> 等於 "X"，但列舉類型未知。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-286">
              <paramref name="format" /> equals "X", but the enumeration type is unknown.</span>
          </span>
        </exception>
        <altmember cref="M:System.Enum.ToString(System.String)" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">
          <span data-ttu-id="e676c-287">在 .NET 中將類型格式化</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-287">Formatting Types in .NET</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/base-types/enumeration-format-strings.md">
          <span data-ttu-id="e676c-288">列舉格式字串</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-288">Enumeration Format Strings</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="enum.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e676c-289">傳回這個執行個體值的雜湊碼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-289">Returns the hash code for the value of this instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e676c-290">32 位元帶正負號的整數雜湊碼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-290">A 32-bit signed integer hash code.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetName">
      <MemberSignature Language="C#" Value="public static string GetName (Type enumType, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetName(class System.Type enumType, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.GetName(System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetName (enumType As Type, value As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetName(Type ^ enumType, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member GetName : Type * obj -&gt; string" Usage="System.Enum.GetName (enumType, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="enumType">
          <span data-ttu-id="e676c-291">列舉類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-291">An enumeration type.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="e676c-292">就其基礎類型而論的特定列舉常數值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-292">The value of a particular enumerated constant in terms of its underlying type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e676c-293">擷取有指定數值之指定列舉的常數名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-293">Retrieves the name of the constant in the specified enumeration that has the specified value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e676c-294">字串 (包含值為 <paramref name="value" /> 之 <paramref name="enumType" /> 中的列舉常數名稱)；如果找不到這類常數，則為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-294">A string containing the name of the enumerated constant in <paramref name="enumType" /> whose value is <paramref name="value" />; or <see langword="null" /> if no such constant is found.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e676c-295">如果多個列舉的成員有相同的基礎值，<xref:System.Enum.GetName%2A>方法可確保它會傳回其中一個列舉成員的名稱。</span><span class="sxs-lookup"><span data-stu-id="e676c-295">If multiple enumeration members have the same underlying value, the <xref:System.Enum.GetName%2A> method guarantees that it will return the name of one of those enumeration members.</span></span> <span data-ttu-id="e676c-296">不過，也不保證它一律會傳回相同的列舉成員的名稱。</span><span class="sxs-lookup"><span data-stu-id="e676c-296">However, it does not guarantee that it will always return the name of the same enumeration member.</span></span> <span data-ttu-id="e676c-297">如此一來，當多個列舉的成員有相同的值時，應該永遠不會將應用程式程式碼相依於方法傳回的特定成員的名稱。</span><span class="sxs-lookup"><span data-stu-id="e676c-297">As a result, when multiple enumeration members have the same value, your application code should never depend on the method returning a particular member's name.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e676c-298">下列範例示範如何將`GetName`。</span><span class="sxs-lookup"><span data-stu-id="e676c-298">The following example illustrates the use of `GetName`.</span></span>  
  
 [!code-cpp[enumgetname#1](~/samples/snippets/cpp/VS_Snippets_CLR/enumgetname/CPP/EnumGetName.cpp#1)]
 [!code-csharp[enumgetname#1](~/samples/snippets/csharp/VS_Snippets_CLR/enumgetname/CS/EnumGetName.cs#1)]
 [!code-vb[enumgetname#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enumgetname/VB/EnumGetName.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e676c-299">
            <paramref name="enumType" /> 或 <paramref name="value" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-299">
              <paramref name="enumType" /> or <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e676c-300">
            <paramref name="enumType" /> 不是 <see cref="T:System.Enum" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-300">
              <paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span>
          </span>
          <span data-ttu-id="e676c-301">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-301">-or-</span>
          </span>
          <span data-ttu-id="e676c-302">
            <paramref name="value" /> 既不是類型 <paramref name="enumType" />，也沒有和 <paramref name="enumType" /> 一樣的基礎類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-302">
              <paramref name="value" /> is neither of type <paramref name="enumType" /> nor does it have the same underlying type as <paramref name="enumType" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetNames">
      <MemberSignature Language="C#" Value="public static string[] GetNames (Type enumType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetNames(class System.Type enumType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.GetNames(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetNames (enumType As Type) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetNames(Type ^ enumType);" />
      <MemberSignature Language="F#" Value="static member GetNames : Type -&gt; string[]" Usage="System.Enum.GetNames enumType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="enumType">
          <span data-ttu-id="e676c-303">列舉類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-303">An enumeration type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e676c-304">在指定的列舉中擷取常數名稱的陣列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-304">Retrieves an array of the names of the constants in a specified enumeration.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e676c-305">在 <paramref name="enumType" /> 中的常數名稱字串陣列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-305">A string array of the names of the constants in <paramref name="enumType" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e676c-306">列舉常數的二進位值來排序傳回的值陣列的項目 (也就是依據其不帶正負號的重要性)。</span><span class="sxs-lookup"><span data-stu-id="e676c-306">The elements of the return value array are sorted by the binary values of the enumerated constants (that is, by their unsigned magnitude).</span></span> <span data-ttu-id="e676c-307">下列範例會提供有關所傳回的陣列會顯示資訊<xref:System.Enum.GetNames%2A>列舉，其中包含為負數、 零，且為正值的方法。</span><span class="sxs-lookup"><span data-stu-id="e676c-307">The following example provides displays information about the array returned by the <xref:System.Enum.GetNames%2A> method for an enumeration that includes a negative, zero, and a positive value.</span></span>  
  
 [!code-csharp[System.Enum.GetNames#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.getnames/cs/getnames1.cs#1)]
 [!code-vb[System.Enum.GetNames#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.getnames/vb/getnames1.vb#1)]  
  
 <span data-ttu-id="e676c-308">如果有具有相同值的列舉的常數，其對應的名稱的順序是未指定。</span><span class="sxs-lookup"><span data-stu-id="e676c-308">If there are enumerated constants with same value, the order of their corresponding names is unspecified.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e676c-309">在下列程式碼中，說明了如何使用 <xref:System.Enum.GetNames%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="e676c-309">The following example illustrates the use of the <xref:System.Enum.GetNames%2A> method.</span></span>  
  
 [!code-cpp[enumgetnames#1](~/samples/snippets/cpp/VS_Snippets_CLR/enumgetnames/CPP/EnumGetNames.cpp#1)]
 [!code-csharp[enumgetnames#1](~/samples/snippets/csharp/VS_Snippets_CLR/enumgetnames/CS/EnumGetNames.cs#1)]
 [!code-vb[enumgetnames#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enumgetnames/VB/EnumGetNames.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e676c-310">
            <paramref name="enumType" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-310">
              <paramref name="enumType" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e676c-311">
            <paramref name="enumType" /> 參數不是 <see cref="T:System.Enum" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-311">
              <paramref name="enumType" /> parameter is not an <see cref="T:System.Enum" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetTypeCode">
      <MemberSignature Language="C#" Value="public TypeCode GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.TypeCode GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTypeCode () As TypeCode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual TypeCode GetTypeCode();" />
      <MemberSignature Language="F#" Value="abstract member GetTypeCode : unit -&gt; TypeCode&#xA;override this.GetTypeCode : unit -&gt; TypeCode" Usage="enum.GetTypeCode " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e676c-312">傳回這個列舉成員的基礎類型的類型代碼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-312">Returns the type code of the underlying type of this enumeration member.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e676c-313">這個執行個體的基礎類型的類型代碼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-313">The type code of the underlying type of this instance.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e676c-314">列舉類型未知。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-314">The enumeration type is unknown.</span>
          </span>
        </exception>
        <altmember cref="M:System.Enum.GetUnderlyingType(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetUnderlyingType">
      <MemberSignature Language="C#" Value="public static Type GetUnderlyingType (Type enumType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetUnderlyingType(class System.Type enumType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.GetUnderlyingType(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUnderlyingType (enumType As Type) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetUnderlyingType(Type ^ enumType);" />
      <MemberSignature Language="F#" Value="static member GetUnderlyingType : Type -&gt; Type" Usage="System.Enum.GetUnderlyingType enumType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="enumType">
          <span data-ttu-id="e676c-315">要擷取其基礎類型的列舉。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-315">The enumeration whose underlying type will be retrieved.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e676c-316">傳回指定列舉的基礎類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-316">Returns the underlying type of the specified enumeration.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e676c-317">
            <paramref name="enumType" /> 的基礎類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-317">The underlying type of <paramref name="enumType" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e676c-318"><xref:System.Enum>結構可讓表示為具名常數的值。</span><span class="sxs-lookup"><span data-stu-id="e676c-318">The <xref:System.Enum> structure enables values to be represented as named constants.</span></span> <span data-ttu-id="e676c-319">列舉值的資料類型即為其基礎類型。</span><span class="sxs-lookup"><span data-stu-id="e676c-319">The data type of the enumeration's values is known as its underlying type.</span></span> <span data-ttu-id="e676c-320">比方說的基礎類型<xref:System.DayOfWeek>列舉型別，其中包含常數，表示一週的每一天 (<xref:System.DayOfWeek.Monday?displayProperty=nameWithType>，<xref:System.DayOfWeek.Tuesday?displayProperty=nameWithType>等等)，是<xref:System.Int32>。</span><span class="sxs-lookup"><span data-stu-id="e676c-320">For example, the underlying type of the <xref:System.DayOfWeek> enumeration, which consists of constants that represent each day of the week (<xref:System.DayOfWeek.Monday?displayProperty=nameWithType>, <xref:System.DayOfWeek.Tuesday?displayProperty=nameWithType>, and so on), is <xref:System.Int32>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e676c-321">下列範例會呼叫<xref:System.Enum.GetUnderlyingType%2A>方法來顯示部分的列舉型別成員的基礎類型。</span><span class="sxs-lookup"><span data-stu-id="e676c-321">The following example calls the <xref:System.Enum.GetUnderlyingType%2A> method to display the underlying type of some enumeration members.</span></span>  
  
 [!code-csharp[System.Enum.GetUnderlyingType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.getunderlyingtype/cs/getunderlyingtype1.cs#1)]
 [!code-vb[System.Enum.GetUnderlyingType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.getunderlyingtype/vb/getunderlyingtype1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e676c-322">
            <paramref name="enumType" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-322">
              <paramref name="enumType" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e676c-323">
            <paramref name="enumType" /> 不是 <see cref="T:System.Enum" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-323">
              <paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Enum.GetTypeCode" />
      </Docs>
    </Member>
    <Member MemberName="GetValues">
      <MemberSignature Language="C#" Value="public static Array GetValues (Type enumType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Array GetValues(class System.Type enumType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.GetValues(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetValues (enumType As Type) As Array" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Array ^ GetValues(Type ^ enumType);" />
      <MemberSignature Language="F#" Value="static member GetValues : Type -&gt; Array" Usage="System.Enum.GetValues enumType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Array</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="enumType">
          <span data-ttu-id="e676c-324">列舉類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-324">An enumeration type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e676c-325">在指定的列舉中擷取常數值的陣列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-325">Retrieves an array of the values of the constants in a specified enumeration.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e676c-326">含有 <paramref name="enumType" /> 中之常數值的陣列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-326">An array that contains the values of the constants in <paramref name="enumType" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e676c-327">列舉常數的二進位值來排序陣列的項目 (也就是依據其不帶正負號的重要性)。</span><span class="sxs-lookup"><span data-stu-id="e676c-327">The elements of the array are sorted by the binary values of the enumeration constants (that is, by their unsigned magnitude).</span></span> <span data-ttu-id="e676c-328">下列範例會顯示所傳回的陣列的相關資訊<xref:System.Enum.GetValues%2A>列舉，其中包含負值，零，而正值的方法。</span><span class="sxs-lookup"><span data-stu-id="e676c-328">The following example displays information about the array returned by the <xref:System.Enum.GetValues%2A> method for an enumeration that includes a negative value, zero, and a positive value.</span></span>  
  
 [!code-csharp[System.Enum.GetValues#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.getvalues/cs/getvalues1.cs#1)]
 [!code-vb[System.Enum.GetValues#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.getvalues/vb/getvalues1.vb#1)]  
  
 <span data-ttu-id="e676c-329"><xref:System.Enum.GetValues%2A>方法會傳回陣列，其中包含針對每個成員的值`enumType`列舉型別。</span><span class="sxs-lookup"><span data-stu-id="e676c-329">The <xref:System.Enum.GetValues%2A> method returns an array that contains a value for each member of the `enumType` enumeration.</span></span> <span data-ttu-id="e676c-330">如果多個成員具有相同的值，傳回的陣列會包含重複的值。</span><span class="sxs-lookup"><span data-stu-id="e676c-330">If multiple members have the same value, the returned array includes duplicate values.</span></span> <span data-ttu-id="e676c-331">在此情況下，呼叫<xref:System.Enum.GetName%2A>傳回陣列中每個值的方法不會還原唯一的名稱指派給具有重複值的成員。</span><span class="sxs-lookup"><span data-stu-id="e676c-331">In this case, calling the <xref:System.Enum.GetName%2A> method with each value in the returned array does not restore the unique names assigned to members that have duplicate values.</span></span> <span data-ttu-id="e676c-332">若要成功擷取所有的列舉型別成員名稱，請呼叫<xref:System.Enum.GetNames%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e676c-332">To retrieve all the names of enumeration members successfully, call the <xref:System.Enum.GetNames%2A> method.</span></span>  
  
 <span data-ttu-id="e676c-333"><xref:System.Enum.GetValues%2A>無法在僅限反映的內容中使用反映來叫用方法。</span><span class="sxs-lookup"><span data-stu-id="e676c-333">The <xref:System.Enum.GetValues%2A> method cannot be invoked by using reflection in a reflection-only context.</span></span> <span data-ttu-id="e676c-334">相反地，您可以擷取所有的列舉型別成員的值，使用<xref:System.Type.GetFields%2A?displayProperty=nameWithType>方法來取得陣列<xref:System.Reflection.FieldInfo>物件，表示列舉成員，然後呼叫<xref:System.Reflection.FieldInfo.GetRawConstantValue%2A?displayProperty=nameWithType>陣列的每個項目上的方法。</span><span class="sxs-lookup"><span data-stu-id="e676c-334">Instead, you can retrieve the value of all enumeration members by using the <xref:System.Type.GetFields%2A?displayProperty=nameWithType> method to get an array of <xref:System.Reflection.FieldInfo> objects that represent enumeration members and then call the <xref:System.Reflection.FieldInfo.GetRawConstantValue%2A?displayProperty=nameWithType> method on each element of the array.</span></span> <span data-ttu-id="e676c-335">下列範例說明這項技巧。</span><span class="sxs-lookup"><span data-stu-id="e676c-335">The following example illustrates this technique.</span></span> <span data-ttu-id="e676c-336">它會要求您在名為 Enumerations.dll 組件中定義下列的列舉型別：</span><span class="sxs-lookup"><span data-stu-id="e676c-336">It requires that you define the following enumeration in an assembly named Enumerations.dll:</span></span>  
  
 [!code-csharp[System.Enum.GetValues#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.getvalues/cs/getvalues_reflectiononly.cs#2)]
 [!code-vb[System.Enum.GetValues#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.getvalues/vb/getvalues_reflectiononly.vb#2)]  
  
 <span data-ttu-id="e676c-337">組件是在僅限反映內容中，載入<xref:System.Type>物件，表示`Pets`列舉型別會具現化，陣列<xref:System.Reflection.FieldInfo>擷取物件時，與欄位值顯示到主控台。</span><span class="sxs-lookup"><span data-stu-id="e676c-337">The assembly is loaded in a reflection-only context, a <xref:System.Type> object that represents the `Pets` enumeration is instantiated, an array of <xref:System.Reflection.FieldInfo> objects is retrieved, and the field values are displayed to the console.</span></span>  
  
 [!code-csharp[System.Enum.GetValues#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.getvalues/cs/getvalues_reflectiononly.cs#3)]
 [!code-vb[System.Enum.GetValues#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.getvalues/vb/getvalues_reflectiononly.vb#3)]  
  
   
  
## Examples  
 <span data-ttu-id="e676c-338">下列範例示範如何將<xref:System.Enum.GetValues%2A>。</span><span class="sxs-lookup"><span data-stu-id="e676c-338">The following example illustrates the use of <xref:System.Enum.GetValues%2A>.</span></span>  
  
 [!code-cpp[enumgetvalues#1](~/samples/snippets/cpp/VS_Snippets_CLR/enumgetvalues/CPP/EnumGetValues.cpp#1)]
 [!code-csharp[enumgetvalues#1](~/samples/snippets/csharp/VS_Snippets_CLR/enumgetvalues/CS/EnumGetValues.cs#1)]
 [!code-vb[enumgetvalues#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enumgetvalues/VB/EnumGetValues.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e676c-339">
            <paramref name="enumType" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-339">
              <paramref name="enumType" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e676c-340">
            <paramref name="enumType" /> 不是 <see cref="T:System.Enum" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-340">
              <paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e676c-341">僅限反射內容中的反射叫用了方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-341">The method is invoked by reflection in a reflection-only context,</span>
          </span>
          <span data-ttu-id="e676c-342">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-342">-or-</span>
          </span>
          <span data-ttu-id="e676c-343">
            <paramref name="enumType" /> 屬於在僅限反射內容中載入之組件的類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-343">
              <paramref name="enumType" /> is a type from an assembly loaded in a reflection-only context.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="HasFlag">
      <MemberSignature Language="C#" Value="public bool HasFlag (Enum flag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool HasFlag(class System.Enum flag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.HasFlag(System.Enum)" />
      <MemberSignature Language="VB.NET" Value="Public Function HasFlag (flag As Enum) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool HasFlag(Enum ^ flag);" />
      <MemberSignature Language="F#" Value="member this.HasFlag : Enum -&gt; bool" Usage="enum.HasFlag flag" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="flag" Type="System.Enum" />
      </Parameters>
      <Docs>
        <param name="flag">
          <span data-ttu-id="e676c-344">列舉值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-344">An enumeration value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e676c-345">判斷目前執行個體中是否設定一或多個位元欄位。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-345">Determines whether one or more bit fields are set in the current instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e676c-346">如果目前執行個體中設定了 <paramref name="flag" /> 中設定的一或多個位元欄位，則為 <see langword="true" />；否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-346">
              <see langword="true" /> if the bit field or bit fields that are set in <paramref name="flag" /> are also set in the current instance; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e676c-347"><xref:System.Enum.HasFlag%2A>方法會傳回下列布林運算式的結果。</span><span class="sxs-lookup"><span data-stu-id="e676c-347">The <xref:System.Enum.HasFlag%2A> method returns the result of the following Boolean expression.</span></span>  
  
```  
thisInstance And flag = flag   
```  
  
 <span data-ttu-id="e676c-348">如果基礎值`flag`為零，則方法會傳回`true`。</span><span class="sxs-lookup"><span data-stu-id="e676c-348">If the underlying value of `flag` is zero, the method returns `true`.</span></span> <span data-ttu-id="e676c-349">如果這種行為並不理想，您可以使用<xref:System.Enum.Equals%2A>方法來測試是否與零並呼叫相等<xref:System.Enum.HasFlag%2A>只有當的基礎值`flag`是不是零，如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="e676c-349">If this behavior is not desirable, you can use the <xref:System.Enum.Equals%2A> method to test for equality with zero and call <xref:System.Enum.HasFlag%2A> only if the underlying value of `flag` is non-zero, as the following example illustrates.</span></span>  
  
 [!code-csharp[System.Enum.HasFlag#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.hasflag/cs/hasflag0.cs#1)]
 [!code-vb[System.Enum.HasFlag#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.hasflag/vb/hasflag0.vb#1)]  
  
 <span data-ttu-id="e676c-350"><xref:System.Enum.HasFlag%2A>方法設計用來搭配以標記的列舉型別<xref:System.FlagsAttribute>屬性，可用來判斷是否已設定多重位元欄位。</span><span class="sxs-lookup"><span data-stu-id="e676c-350">The <xref:System.Enum.HasFlag%2A> method is designed to be used with enumeration types that are marked with the <xref:System.FlagsAttribute> attribute and can be used to determine whether multiple bit fields are set.</span></span> <span data-ttu-id="e676c-351">未標示有的列舉型別的<xref:System.FlagsAttribute>屬性，請呼叫<xref:System.Enum.Equals%2A>方法或<xref:System.Enum.CompareTo%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e676c-351">For enumeration types that are not marked with the <xref:System.FlagsAttribute> attribute, call either the <xref:System.Enum.Equals%2A> method or the <xref:System.Enum.CompareTo%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e676c-352">下列範例會定義`ItemsOrdered`反映客戶可以在餐廳訂購的項目分類的列舉型別。</span><span class="sxs-lookup"><span data-stu-id="e676c-352">The following example defines an `ItemsOrdered` enumeration that reflects categories of items that a customer can order in a restaurant.</span></span> <span data-ttu-id="e676c-353">此範例會測試是否客戶已排序的主菜和飲料。</span><span class="sxs-lookup"><span data-stu-id="e676c-353">The example tests whether the customer has ordered both an entrée and a beverage.</span></span>  
  
 [!code-csharp[System.Enum.HasFlag#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.hasflag/cs/hasflag1.cs#2)]
 [!code-vb[System.Enum.HasFlag#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.hasflag/vb/hasflag1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e676c-354">
            <paramref name="flag" /> 的類型與目前執行個體的類型不同。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-354">
              <paramref name="flag" /> is a different type than the current instance.</span>
          </span>
        </exception>
        <altmember cref="T:System.FlagsAttribute" />
        <altmember cref="M:System.Enum.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsDefined">
      <MemberSignature Language="C#" Value="public static bool IsDefined (Type enumType, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDefined(class System.Type enumType, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.IsDefined(System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsDefined (enumType As Type, value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDefined(Type ^ enumType, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member IsDefined : Type * obj -&gt; bool" Usage="System.Enum.IsDefined (enumType, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="enumType">
          <span data-ttu-id="e676c-355">列舉類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-355">An enumeration type.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="e676c-356">
            <c>enumType</c> 中常數的值或名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-356">The value or name of a constant in <c>enumType</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e676c-357">傳回布林值，告知指定整數值或其作為字串的名稱，是否存在於指定的列舉中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-357">Returns a Boolean telling whether a given integral value, or its name as a string, exists in a specified enumeration.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e676c-358">如果在 <paramref name="enumType" /> 中的常數有等於 <paramref name="value" /> 的數值，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-358">
              <see langword="true" /> if a constant in <paramref name="enumType" /> has a value equal to <paramref name="value" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e676c-359">`value`參數可以是下列任一項：</span><span class="sxs-lookup"><span data-stu-id="e676c-359">The `value` parameter can be any of the following:</span></span>  
  
-   <span data-ttu-id="e676c-360">類型的任何成員`enumType`。</span><span class="sxs-lookup"><span data-stu-id="e676c-360">Any member of type `enumType`.</span></span>  
  
-   <span data-ttu-id="e676c-361">其值是列舉成員型別的變數`enumType`。</span><span class="sxs-lookup"><span data-stu-id="e676c-361">A variable whose value is an enumeration member of type `enumType`.</span></span>  
  
-   <span data-ttu-id="e676c-362">列舉成員名稱的字串表示。</span><span class="sxs-lookup"><span data-stu-id="e676c-362">The string representation of the name of an enumeration member.</span></span> <span data-ttu-id="e676c-363">在字串中的字元必須為列舉成員名稱相同的大小寫。</span><span class="sxs-lookup"><span data-stu-id="e676c-363">The characters in the string must have the same case as the enumeration member name.</span></span>  
  
-   <span data-ttu-id="e676c-364">型別的基礎值`enumType`。</span><span class="sxs-lookup"><span data-stu-id="e676c-364">A value of the underlying type of `enumType`.</span></span>  
  
 <span data-ttu-id="e676c-365">如果中的常數`enumType`定義一組的位元欄位並`value`包含值、 名稱或多個的位元欄位的基礎值<xref:System.Enum.IsDefined%2A>方法會傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="e676c-365">If the constants in `enumType` define a set of bit fields and `value` contains the values, names, or underlying values of multiple bit fields, the <xref:System.Enum.IsDefined%2A> method returns `false`.</span></span> <span data-ttu-id="e676c-366">換句話說，定義一組的位元欄位的列舉，方法會判斷只有單一位元欄位是否屬於列舉型別。</span><span class="sxs-lookup"><span data-stu-id="e676c-366">In other words, for enumerations that define a set of bit fields, the method determines only whether a single bit field belongs to the enumeration.</span></span> <span data-ttu-id="e676c-367">若要判斷多重位元欄位是否已設定在標記的列舉型別<xref:System.FlagsAttribute>屬性，您可以呼叫<xref:System.Enum.HasFlag%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e676c-367">To determine whether multiple bit fields are set in an enumeration type that is tagged with the <xref:System.FlagsAttribute> attribute, you can call the <xref:System.Enum.HasFlag%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e676c-368">下列範例會定義名為列舉型別`PetType`構成的個別位元欄位。</span><span class="sxs-lookup"><span data-stu-id="e676c-368">The following example defines an enumeration named `PetType` that consists of individual bit fields.</span></span> <span data-ttu-id="e676c-369">然後它會呼叫<xref:System.Enum.IsDefined%2A>與可能的根本列舉值、 字串名稱和所產生的設定多重位元欄位的複合值的方法。</span><span class="sxs-lookup"><span data-stu-id="e676c-369">It then calls the <xref:System.Enum.IsDefined%2A> method with possible underlying enumeration values, string names, and composite values that result from setting multiple bit fields.</span></span>  
  
 [!code-csharp[System.Enum.IsDefined#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Enum.IsDefined/cs/isdefined1.cs#1)]
 [!code-vb[System.Enum.IsDefined#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Enum.IsDefined/vb/IsDefined1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e676c-370">
            <paramref name="enumType" /> 或 <paramref name="value" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-370">
              <paramref name="enumType" /> or <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e676c-371">
            <paramref name="enumType" /> 不是 <see langword="Enum" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-371">
              <paramref name="enumType" /> is not an <see langword="Enum" />.</span>
          </span>
          <span data-ttu-id="e676c-372">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-372">-or-</span>
          </span>
          <span data-ttu-id="e676c-373">類型 <paramref name="value" /> 是列舉，但不是 <paramref name="enumType" /> 列舉類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-373">The type of <paramref name="value" /> is an enumeration, but it is not an enumeration of type <paramref name="enumType" />.</span>
          </span>
          <span data-ttu-id="e676c-374">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-374">-or-</span>
          </span>
          <span data-ttu-id="e676c-375">類型 <paramref name="value" /> 不是 <paramref name="enumType" /> 的基礎類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-375">The type of <paramref name="value" /> is not an underlying type of <paramref name="enumType" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e676c-376">
            <paramref name="value" /> 不是類型 <see cref="T:System.SByte" />、 <see cref="T:System.Int16" />、 <see cref="T:System.Int32" />、 <see cref="T:System.Int64" />、 <see cref="T:System.Byte" />、 <see cref="T:System.UInt16" />、 <see cref="T:System.UInt32" />、 <see cref="T:System.UInt64" /> 或 <see cref="T:System.String" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-376">
              <paramref name="value" /> is not type <see cref="T:System.SByte" />, <see cref="T:System.Int16" />, <see cref="T:System.Int32" />, <see cref="T:System.Int64" />, <see cref="T:System.Byte" />, <see cref="T:System.UInt16" />, <see cref="T:System.UInt32" />, or <see cref="T:System.UInt64" />, or <see cref="T:System.String" />.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <para>
            <span data-ttu-id="e676c-377">如果<paramref name="enumType" />是一種使用所定義的列舉<see cref="T:System.FlagsAttribute" />屬性，此方法會傳回<see langword="false" />如果多重位元欄位中<paramref name="value" />設定，但<paramref name="value" />並未對應到複合的列舉值，或如果<paramref name="value" />多重位元旗標名稱的字串串連。</span>
            <span class="sxs-lookup">
              <span data-stu-id="e676c-377">If <paramref name="enumType" /> is an enumeration that is defined by using the <see cref="T:System.FlagsAttribute" /> attribute, the method returns <see langword="false" /> if multiple bit fields in <paramref name="value" /> are set but <paramref name="value" /> does not correspond to a composite enumeration value, or if <paramref name="value" /> is a string concatenation of the names of multiple bit flags.</span>
            </span>
            <span data-ttu-id="e676c-378">在下列範例中， <c>Pets</c>列舉的定義包含<see cref="T:System.FlagsAttribute" />屬性。</span>
            <span class="sxs-lookup">
              <span data-stu-id="e676c-378">In the following example, a <c>Pets</c> enumeration is defined with the <see cref="T:System.FlagsAttribute" /> attribute.</span>
            </span>
            <span data-ttu-id="e676c-379">
              <see cref="M:System.Enum.IsDefined(System.Type,System.Object)" />方法會傳回<see langword="false" />傳遞時，它具有兩個位元欄位的列舉值 (<c>Pets.Dog</c>並<c>Pets.Cat</c>) 設定，並當您將它傳遞的字串表示，列舉值 （"Dog、 Cat 」）。</span>
            <span class="sxs-lookup">
              <span data-stu-id="e676c-379">The <see cref="M:System.Enum.IsDefined(System.Type,System.Object)" /> method returns <see langword="false" /> when you pass it an enumeration value that has two bit fields (<c>Pets.Dog</c> and <c>Pets.Cat</c>) set, and when you pass it the string representation of that enumeration value ("Dog, Cat").</span>
            </span>
            <span data-ttu-id="e676c-380">[！ 的程式碼 csharp[System.Enum.IsDefined#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Enum.IsDefined/cs/isdefined2.cs#2)] [！ 的程式碼 vb[System.Enum.IsDefined#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Enum.IsDefined/vb/isdefined2.vb#2)]</span>
            <span class="sxs-lookup">
              <span data-stu-id="e676c-380">[!code-csharp[System.Enum.IsDefined#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Enum.IsDefined/cs/isdefined2.cs#2)] [!code-vb[System.Enum.IsDefined#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Enum.IsDefined/vb/isdefined2.vb#2)]</span>
            </span>
            <span data-ttu-id="e676c-381">您可以判斷多重位元欄位是否已設定藉由呼叫<see cref="M:System.Enum.HasFlag(System.Enum)" />方法。</span>
            <span class="sxs-lookup">
              <span data-stu-id="e676c-381">You can determine whether multiple bit fields are set by calling the <see cref="M:System.Enum.HasFlag(System.Enum)" /> method.</span>
            </span>
          </para>
        </block>
        <altmember cref="M:System.Enum.GetName(System.Type,System.Object)" />
        <altmember cref="M:System.Enum.GetNames(System.Type)" />
        <altmember cref="M:System.Enum.GetValues(System.Type)" />
        <altmember cref="M:System.Enum.HasFlag(System.Enum)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e676c-382">把一或多個列舉常數的名稱或數值的字串表示轉換為一個相等列舉物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-382">Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</span>
          </span>
        </summary>
        <altmember cref="M:System.Enum.TryParse``1(System.String,``0@)" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static object Parse (Type enumType, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Parse(class System.Type enumType, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.Parse(System.Type,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (enumType As Type, value As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Parse(Type ^ enumType, System::String ^ value);" />
      <MemberSignature Language="F#" Value="static member Parse : Type * string -&gt; obj" Usage="System.Enum.Parse (enumType, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="enumType">
          <span data-ttu-id="e676c-383">列舉類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-383">An enumeration type.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="e676c-384">字串，包含要轉換的名稱或數值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-384">A string containing the name or value to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e676c-385">把一或多個列舉常數的名稱或數值的字串表示轉換為一個相等列舉物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-385">Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e676c-386">
            <paramref name="enumType" /> 類型的物件，其值以 <paramref name="value" /> 表示。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-386">An object of type <paramref name="enumType" /> whose value is represented by <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e676c-387">`value`參數包含的字串表示法為列舉成員的基礎值或具名的常數，或一份名為以逗號 （，） 分隔的常數。</span><span class="sxs-lookup"><span data-stu-id="e676c-387">The `value` parameter contains the string representation of an enumeration member's underlying value or named constant, or a list of named constants delimited by commas (,).</span></span> <span data-ttu-id="e676c-388">一或多個空格可以之前或之後每個值、 名稱或在逗號`value`。</span><span class="sxs-lookup"><span data-stu-id="e676c-388">One or more blank spaces can precede or follow each value, name, or comma in `value`.</span></span> <span data-ttu-id="e676c-389">如果`value`清單中，傳回的值是一個指定的名稱結合的位元值`OR`作業。</span><span class="sxs-lookup"><span data-stu-id="e676c-389">If `value` is a list, the return value is the value of the specified names combined with a bitwise `OR` operation.</span></span>  
  
 <span data-ttu-id="e676c-390">如果`value`是名稱未對應的具名常數`enumType`，方法會擲回<xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="e676c-390">If `value` is a name that does not correspond to a named constant of `enumType`, the method throws an <xref:System.ArgumentException>.</span></span> <span data-ttu-id="e676c-391">如果`value`不代表基礎值的整數的字串表示法`enumType`列舉型別，此方法會傳回其基礎值是列舉成員`value`轉換成整數類資料類型。</span><span class="sxs-lookup"><span data-stu-id="e676c-391">If `value` is the string representation of an integer that does not represent an underlying value of the `enumType` enumeration, the method returns an enumeration member whose underlying value is `value` converted to an integral type.</span></span> <span data-ttu-id="e676c-392">如果不需要此行為，呼叫<xref:System.Enum.IsDefined%2A>方法，以確保特定的字串表示的整數是實際的成員`enumType`。</span><span class="sxs-lookup"><span data-stu-id="e676c-392">If this behavior is undesirable, call the <xref:System.Enum.IsDefined%2A> method to ensure that a particular string representation of an integer is actually a member of `enumType`.</span></span> <span data-ttu-id="e676c-393">下列範例會定義`Colors`列舉型別時，會呼叫<xref:System.Enum.Parse%28System.Type%2CSystem.String%29>方法，以將字串轉換成其對應的列舉值，並呼叫<xref:System.Enum.IsDefined%2A>中值的方法，以確保特定的整數值為基礎`Colors`列舉型別。</span><span class="sxs-lookup"><span data-stu-id="e676c-393">The following example defines a `Colors` enumeration, calls the <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> method to convert strings to their corresponding enumeration values, and calls the <xref:System.Enum.IsDefined%2A> method to ensure that particular integral values are underlying values in the `Colors` enumeration.</span></span>  
  
 [!code-csharp[System.Enum.Parse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Enum.Parse/cs/ParseExample1.cs#1)]
 [!code-vb[System.Enum.Parse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Enum.Parse/vb/ParseExample1.vb#1)]  
  
 <span data-ttu-id="e676c-394">這項作業會區分大小寫。</span><span class="sxs-lookup"><span data-stu-id="e676c-394">This operation is case-sensitive.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e676c-395">下列範例會使用<xref:System.Enum.Parse%28System.Type%2CSystem.String%29>方法來剖析字串陣列，藉由呼叫<xref:System.Enum.GetNames%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e676c-395">The following example uses the <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> method to parse an array of strings that are created by calling the <xref:System.Enum.GetNames%2A> method.</span></span> <span data-ttu-id="e676c-396">它也會使用<xref:System.Enum.Parse%28System.Type%2CSystem.String%29>方法來剖析包含的位元欄位的列舉值。</span><span class="sxs-lookup"><span data-stu-id="e676c-396">It also uses the <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> method to parse an enumeration value that consists of a bit field.</span></span>  
  
 [!code-cpp[enumparse#1](~/samples/snippets/cpp/VS_Snippets_CLR/enumparse/CPP/EnumParse.cpp#1)]
 [!code-csharp[enumparse#1](~/samples/snippets/csharp/VS_Snippets_CLR/enumparse/CS/EnumParse.cs#1)]
 [!code-vb[enumparse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enumparse/VB/EnumParse.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e676c-397">
            <paramref name="enumType" /> 或 <paramref name="value" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-397">
              <paramref name="enumType" /> or <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e676c-398">
            <paramref name="enumType" /> 不是 <see cref="T:System.Enum" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-398">
              <paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span>
          </span>
          <span data-ttu-id="e676c-399">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-399">-or-</span>
          </span>
          <span data-ttu-id="e676c-400">
            <paramref name="value" /> 為空字串 ("") 或只包含空格。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-400">
              <paramref name="value" /> is either an empty string or only contains white space.</span>
          </span>
          <span data-ttu-id="e676c-401">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-401">-or-</span>
          </span>
          <span data-ttu-id="e676c-402">
            <paramref name="value" /> 為名稱，但不是為列舉所定義的其中一個具名常數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-402">
              <paramref name="value" /> is a name, but not one of the named constants defined for the enumeration.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="e676c-403">
            <paramref name="value" /> 超出 <paramref name="enumType" /> 之基礎類型的範圍。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-403">
              <paramref name="value" /> is outside the range of the underlying type of <paramref name="enumType" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static object Parse (Type enumType, string value, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Parse(class System.Type enumType, string value, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.Parse(System.Type,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (enumType As Type, value As String, ignoreCase As Boolean) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Parse(Type ^ enumType, System::String ^ value, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="static member Parse : Type * string * bool -&gt; obj" Usage="System.Enum.Parse (enumType, value, ignoreCase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="enumType">
          <span data-ttu-id="e676c-404">列舉類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-404">An enumeration type.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="e676c-405">字串，包含要轉換的名稱或數值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-405">A string containing the name or value to convert.</span>
          </span>
        </param>
        <param name="ignoreCase">
          <span data-ttu-id="e676c-406">
            <see langword="true" /> 表示忽略大小寫，<see langword="false" /> 表示區分大小寫。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-406">
              <see langword="true" /> to ignore case; <see langword="false" /> to regard case.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e676c-407">把一或多個列舉常數的名稱或數值的字串表示轉換為一個相等列舉物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-407">Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</span>
          </span>
          <span data-ttu-id="e676c-408">參數會定義運算是否區分大小寫。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-408">A parameter specifies whether the operation is case-insensitive.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e676c-409">
            <paramref name="enumType" /> 類型的物件，其值以 <paramref name="value" /> 表示。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-409">An object of type <paramref name="enumType" /> whose value is represented by <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e676c-410">`value`參數包含的字串表示法為列舉成員的基礎值或具名的常數，或一份名為以逗號 （，） 分隔的常數。</span><span class="sxs-lookup"><span data-stu-id="e676c-410">The `value` parameter contains the string representation of an enumeration member's underlying value or named constant, or a list of named constants delimited by commas (,).</span></span> <span data-ttu-id="e676c-411">一或多個空格可以之前或之後每個值、 名稱或在逗號`value`。</span><span class="sxs-lookup"><span data-stu-id="e676c-411">One or more blank spaces can precede or follow each value, name, or comma in `value`.</span></span> <span data-ttu-id="e676c-412">如果`value`清單中，傳回的值是一個指定的名稱結合的位元值`OR`作業。</span><span class="sxs-lookup"><span data-stu-id="e676c-412">If `value` is a list, the return value is the value of the specified names combined with a bitwise `OR` operation.</span></span>  
  
 <span data-ttu-id="e676c-413">如果`value`是名稱未對應的具名常數`enumType`，方法會擲回<xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="e676c-413">If `value` is a name that does not correspond to a named constant of `enumType`, the method throws an <xref:System.ArgumentException>.</span></span> <span data-ttu-id="e676c-414">如果`value`不代表基礎值的整數的字串表示法`enumType`列舉型別，此方法會傳回其基礎值是列舉成員`value`轉換成整數類資料類型。</span><span class="sxs-lookup"><span data-stu-id="e676c-414">If `value` is the string representation of an integer that does not represent an underlying value of the `enumType` enumeration, the method returns an enumeration member whose underlying value is `value` converted to an integral type.</span></span> <span data-ttu-id="e676c-415">如果不需要此行為，呼叫<xref:System.Enum.IsDefined%2A>方法，以確保特定的字串表示的整數是實際的成員`enumType`。</span><span class="sxs-lookup"><span data-stu-id="e676c-415">If this behavior is undesirable, call the <xref:System.Enum.IsDefined%2A> method to ensure that a particular string representation of an integer is actually a member of `enumType`.</span></span> <span data-ttu-id="e676c-416">下列範例會定義`Colors`列舉型別時，會呼叫<xref:System.Enum.Parse%28System.Type%2CSystem.String%2CSystem.Boolean%29>方法，以將字串轉換成其對應的列舉值，並呼叫<xref:System.Enum.IsDefined%2A>中值的方法，以確保特定的整數值為基礎`Colors`列舉型別。</span><span class="sxs-lookup"><span data-stu-id="e676c-416">The following example defines a `Colors` enumeration, calls the <xref:System.Enum.Parse%28System.Type%2CSystem.String%2CSystem.Boolean%29> method to convert strings to their corresponding enumeration values, and calls the <xref:System.Enum.IsDefined%2A> method to ensure that particular integral values are underlying values in the `Colors` enumeration.</span></span>  
  
 [!code-csharp[System.Enum.Parse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Enum.Parse/cs/ParseExample2.cs#2)]
 [!code-vb[System.Enum.Parse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Enum.Parse/vb/ParseExample2.vb#2)]  
  
 <span data-ttu-id="e676c-417">`ignoreCase`參數會指定這項作業是區分大小寫。</span><span class="sxs-lookup"><span data-stu-id="e676c-417">The `ignoreCase` parameter specifies whether this operation is case-sensitive.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e676c-418">下列範例會使用<xref:System.Enum.Parse%28System.Type%2CSystem.String%2CSystem.Boolean%29>方法來剖析字串陣列，藉由呼叫<xref:System.Enum.GetNames%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e676c-418">The following example uses the <xref:System.Enum.Parse%28System.Type%2CSystem.String%2CSystem.Boolean%29> method to parse an array of strings that are created by calling the <xref:System.Enum.GetNames%2A> method.</span></span> <span data-ttu-id="e676c-419">它也會使用<xref:System.Enum.Parse%28System.Type%2CSystem.String%29>方法來剖析包含的位元欄位的列舉值。</span><span class="sxs-lookup"><span data-stu-id="e676c-419">It also uses the <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> method to parse an enumeration value that consists of a bit field.</span></span>  
  
 [!code-csharp[System.Enum.Parse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Enum.Parse/cs/ParseExample2.cs#2)]
 [!code-vb[System.Enum.Parse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Enum.Parse/vb/ParseExample2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e676c-420">
            <paramref name="enumType" /> 或 <paramref name="value" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-420">
              <paramref name="enumType" /> or <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e676c-421">
            <paramref name="enumType" /> 不是 <see cref="T:System.Enum" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-421">
              <paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span>
          </span>
          <span data-ttu-id="e676c-422">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-422">-or-</span>
          </span>
          <span data-ttu-id="e676c-423">
            <paramref name="value" /> 為空字串 ("") 或只包含空格。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-423">
              <paramref name="value" /> is either an empty string ("") or only contains white space.</span>
          </span>
          <span data-ttu-id="e676c-424">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-424">-or-</span>
          </span>
          <span data-ttu-id="e676c-425">
            <paramref name="value" /> 為名稱，但不是為列舉所定義的其中一個具名常數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-425">
              <paramref name="value" /> is a name, but not one of the named constants defined for the enumeration.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="e676c-426">
            <paramref name="value" /> 超出 <paramref name="enumType" /> 之基礎類型的範圍。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-426">
              <paramref name="value" /> is outside the range of the underlying type of <paramref name="enumType" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Parse&lt;TEnum&gt;">
      <MemberSignature Language="C#" Value="public static TEnum Parse&lt;TEnum&gt; (string value) where TEnum : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TEnum Parse&lt;struct .ctor (class System.ValueType) TEnum&gt;(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.Parse``1(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse(Of TEnum As Structure) (value As String) As TEnum" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEnum&gt;&#xA; where TEnum : value class static TEnum Parse(System::String ^ value);" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; 'Enum (requires 'Enum : struct)" Usage="System.Enum.Parse value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TEnum</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEnum">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="TEnum">To be added.</typeparam>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse&lt;TEnum&gt;">
      <MemberSignature Language="C#" Value="public static TEnum Parse&lt;TEnum&gt; (string value, bool ignoreCase) where TEnum : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TEnum Parse&lt;struct .ctor (class System.ValueType) TEnum&gt;(string value, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.Parse``1(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse(Of TEnum As Structure) (value As String, ignoreCase As Boolean) As TEnum" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEnum&gt;&#xA; where TEnum : value class static TEnum Parse(System::String ^ value, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="static member Parse : string * bool -&gt; 'Enum (requires 'Enum : struct)" Usage="System.Enum.Parse (value, ignoreCase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TEnum</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEnum">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TEnum">To be added.</typeparam>
        <param name="value">To be added.</param>
        <param name="ignoreCase">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.GetTypeCode">
      <MemberSignature Language="C#" Value="TypeCode IConvertible.GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.TypeCode System.IConvertible.GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Function GetTypeCode () As TypeCode Implements IConvertible.GetTypeCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual TypeCode System.IConvertible.GetTypeCode() = IConvertible::GetTypeCode;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToBoolean">
      <MemberSignature Language="C#" Value="bool IConvertible.ToBoolean (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.IConvertible.ToBoolean(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToBoolean(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToBoolean (provider As IFormatProvider) As Boolean Implements IConvertible.ToBoolean" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.IConvertible.ToBoolean(IFormatProvider ^ provider) = IConvertible::ToBoolean;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToBoolean(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="e676c-427">物件，提供特定文化特性格式資訊。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-427">An object that supplies culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e676c-428">根據基礎類型，將目前值轉換成布林值 (Boolean)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-428">Converts the current value to a Boolean value based on the underlying type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e676c-429">這個成員一定會擲回例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-429">This member always throws an exception.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e676c-430">目前尚未實作。</span><span class="sxs-lookup"><span data-stu-id="e676c-430">Currently not implemented.</span></span> <span data-ttu-id="e676c-431">一律會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="e676c-431">Always throws an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="e676c-432">在所有情況下。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-432">In all cases.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToByte">
      <MemberSignature Language="C#" Value="byte IConvertible.ToByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int8 System.IConvertible.ToByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToByte (provider As IFormatProvider) As Byte Implements IConvertible.ToByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Byte System.IConvertible.ToByte(IFormatProvider ^ provider) = IConvertible::ToByte;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="e676c-433">物件，提供特定文化特性格式資訊。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-433">An object that supplies culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e676c-434">根據基礎類型，將目前值轉換成 8 位元不帶正負號的整數 (Unsigned Integer)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-434">Converts the current value to an 8-bit unsigned integer based on the underlying type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e676c-435">轉換的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-435">The converted value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e676c-436">使用<xref:System.Convert>來執行轉換。</span><span class="sxs-lookup"><span data-stu-id="e676c-436">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToChar">
      <MemberSignature Language="C#" Value="char IConvertible.ToChar (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance char System.IConvertible.ToChar(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToChar(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToChar (provider As IFormatProvider) As Char Implements IConvertible.ToChar" />
      <MemberSignature Language="C++ CLI" Value=" virtual char System.IConvertible.ToChar(IFormatProvider ^ provider) = IConvertible::ToChar;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToChar(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="e676c-437">物件，提供特定文化特性格式資訊。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-437">An object that supplies culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e676c-438">根據基礎類型，將目前值轉換成 Unicode 字元。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-438">Converts the current value to a Unicode character based on the underlying type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e676c-439">這個成員一定會擲回例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-439">This member always throws an exception.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e676c-440">目前尚未實作。</span><span class="sxs-lookup"><span data-stu-id="e676c-440">Currently not implemented.</span></span> <span data-ttu-id="e676c-441">一律會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="e676c-441">Always throws an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="e676c-442">在所有情況下。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-442">In all cases.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDateTime">
      <MemberSignature Language="C#" Value="DateTime IConvertible.ToDateTime (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.DateTime System.IConvertible.ToDateTime(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToDateTime(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDateTime (provider As IFormatProvider) As DateTime Implements IConvertible.ToDateTime" />
      <MemberSignature Language="C++ CLI" Value=" virtual DateTime System.IConvertible.ToDateTime(IFormatProvider ^ provider) = IConvertible::ToDateTime;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDateTime(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="e676c-443">物件，提供特定文化特性格式資訊。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-443">An object that supplies culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e676c-444">根據基礎類型，將目前值轉換成 <see cref="T:System.DateTime" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-444">Converts the current value to a <see cref="T:System.DateTime" /> based on the underlying type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e676c-445">這個成員一定會擲回例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-445">This member always throws an exception.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e676c-446">目前尚未實作。</span><span class="sxs-lookup"><span data-stu-id="e676c-446">Currently not implemented.</span></span> <span data-ttu-id="e676c-447">一律會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="e676c-447">Always throws an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="e676c-448">在所有情況下。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-448">In all cases.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDecimal">
      <MemberSignature Language="C#" Value="decimal IConvertible.ToDecimal (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Decimal System.IConvertible.ToDecimal(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToDecimal(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDecimal (provider As IFormatProvider) As Decimal Implements IConvertible.ToDecimal" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Decimal System.IConvertible.ToDecimal(IFormatProvider ^ provider) = IConvertible::ToDecimal;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDecimal(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="e676c-449">物件，提供特定文化特性格式資訊。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-449">An object that supplies culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e676c-450">根據基礎類型，將目前值轉換成 <see cref="T:System.Decimal" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-450">Converts the current value to a <see cref="T:System.Decimal" /> based on the underlying type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e676c-451">這個成員一定會擲回例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-451">This member always throws an exception.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e676c-452">目前尚未實作。</span><span class="sxs-lookup"><span data-stu-id="e676c-452">Currently not implemented.</span></span> <span data-ttu-id="e676c-453">一律會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="e676c-453">Always throws an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="e676c-454">在所有情況下。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-454">In all cases.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDouble">
      <MemberSignature Language="C#" Value="double IConvertible.ToDouble (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float64 System.IConvertible.ToDouble(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToDouble(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDouble (provider As IFormatProvider) As Double Implements IConvertible.ToDouble" />
      <MemberSignature Language="C++ CLI" Value=" virtual double System.IConvertible.ToDouble(IFormatProvider ^ provider) = IConvertible::ToDouble;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDouble(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="e676c-455">物件，提供特定文化特性格式資訊。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-455">An object that supplies culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e676c-456">根據基礎類型，將目前值轉換成雙精確度浮點數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-456">Converts the current value to a double-precision floating point number based on the underlying type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e676c-457">這個成員一定會擲回例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-457">This member always throws an exception.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e676c-458">目前尚未實作。</span><span class="sxs-lookup"><span data-stu-id="e676c-458">Currently not implemented.</span></span> <span data-ttu-id="e676c-459">一律會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="e676c-459">Always throws an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="e676c-460">在所有情況下。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-460">In all cases.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt16">
      <MemberSignature Language="C#" Value="short IConvertible.ToInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int16 System.IConvertible.ToInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt16 (provider As IFormatProvider) As Short Implements IConvertible.ToInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual short System.IConvertible.ToInt16(IFormatProvider ^ provider) = IConvertible::ToInt16;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="e676c-461">物件，提供特定文化特性格式資訊。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-461">An object that supplies culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e676c-462">根據基礎類型，將目前值轉換成 16 位元帶正負號的整數 (Signed Integer)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-462">Converts the current value to a 16-bit signed integer based on the underlying type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e676c-463">轉換的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-463">The converted value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e676c-464">使用<xref:System.Convert>來執行轉換。</span><span class="sxs-lookup"><span data-stu-id="e676c-464">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt32">
      <MemberSignature Language="C#" Value="int IConvertible.ToInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IConvertible.ToInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt32 (provider As IFormatProvider) As Integer Implements IConvertible.ToInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IConvertible.ToInt32(IFormatProvider ^ provider) = IConvertible::ToInt32;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="e676c-465">物件，提供特定文化特性格式資訊。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-465">An object that supplies culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e676c-466">根據基礎類型，將目前值轉換成 32 位元帶正負號的整數 (Signed Integer)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-466">Converts the current value to a 32-bit signed integer based on the underlying type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e676c-467">轉換的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-467">The converted value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e676c-468">使用<xref:System.Convert>來執行轉換。</span><span class="sxs-lookup"><span data-stu-id="e676c-468">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt64">
      <MemberSignature Language="C#" Value="long IConvertible.ToInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int64 System.IConvertible.ToInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt64 (provider As IFormatProvider) As Long Implements IConvertible.ToInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual long System.IConvertible.ToInt64(IFormatProvider ^ provider) = IConvertible::ToInt64;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="e676c-469">物件，提供特定文化特性格式資訊。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-469">An object that supplies culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e676c-470">根據基礎類型，將目前值轉換成 64 位元帶正負號的整數 (Signed Integer)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-470">Converts the current value to a 64-bit signed integer based on the underlying type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e676c-471">轉換的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-471">The converted value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e676c-472">使用<xref:System.Convert>來執行轉換。</span><span class="sxs-lookup"><span data-stu-id="e676c-472">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSByte">
      <MemberSignature Language="C#" Value="sbyte IConvertible.ToSByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int8 System.IConvertible.ToSByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToSByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSByte (provider As IFormatProvider) As SByte Implements IConvertible.ToSByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::SByte System.IConvertible.ToSByte(IFormatProvider ^ provider) = IConvertible::ToSByte;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="e676c-473">物件，提供特定文化特性格式資訊。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-473">An object that supplies culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e676c-474">根據基礎類型，將目前值轉換成 8 位元帶正負號的整數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-474">Converts the current value to an 8-bit signed integer based on the underlying type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e676c-475">轉換的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-475">The converted value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e676c-476">使用<xref:System.Convert>來執行轉換。</span><span class="sxs-lookup"><span data-stu-id="e676c-476">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSingle">
      <MemberSignature Language="C#" Value="float IConvertible.ToSingle (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float32 System.IConvertible.ToSingle(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToSingle(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSingle (provider As IFormatProvider) As Single Implements IConvertible.ToSingle" />
      <MemberSignature Language="C++ CLI" Value=" virtual float System.IConvertible.ToSingle(IFormatProvider ^ provider) = IConvertible::ToSingle;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSingle(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="e676c-477">物件，提供特定文化特性格式資訊。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-477">An object that supplies culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e676c-478">根據基礎類型，將目前值轉換成單精確度浮點數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-478">Converts the current value to a single-precision floating-point number based on the underlying type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e676c-479">這個成員一定會擲回例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-479">This member always throws an exception.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e676c-480">目前尚未實作。</span><span class="sxs-lookup"><span data-stu-id="e676c-480">Currently not implemented.</span></span> <span data-ttu-id="e676c-481">一律會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="e676c-481">Always throws an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="e676c-482">在所有情況下。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-482">In all cases.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToString">
      <MemberSignature Language="C#" Value="string IConvertible.ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.IConvertible.ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToString (provider As IFormatProvider) As String Implements IConvertible.ToString" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::String ^ System.IConvertible.ToString(IFormatProvider ^ provider) = IConvertible::ToString;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToString(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6">
          <AttributeName>System.Obsolete("The provider argument is not used. Please use ToString().")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToType">
      <MemberSignature Language="C#" Value="object IConvertible.ToType (Type type, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.IConvertible.ToType(class System.Type type, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToType(System.Type,System.IFormatProvider)" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.IConvertible.ToType(Type ^ type, IFormatProvider ^ provider) = IConvertible::ToType;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToType(System.Type,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="e676c-483">要轉換的目標類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-483">The type to convert to.</span>
          </span>
        </param>
        <param name="provider">
          <span data-ttu-id="e676c-484">物件，提供特定文化特性格式資訊。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-484">An object that supplies culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e676c-485">根據基礎類型，將目前值轉換成指定的類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-485">Converts the current value to a specified type based on the underlying type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e676c-486">轉換的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-486">The converted value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e676c-487">使用<xref:System.Convert>來執行轉換。</span><span class="sxs-lookup"><span data-stu-id="e676c-487">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt16">
      <MemberSignature Language="C#" Value="ushort IConvertible.ToUInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int16 System.IConvertible.ToUInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToUInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt16 (provider As IFormatProvider) As UShort Implements IConvertible.ToUInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt16 System.IConvertible.ToUInt16(IFormatProvider ^ provider) = IConvertible::ToUInt16;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="e676c-488">物件，提供特定文化特性格式資訊。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-488">An object that supplies culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e676c-489">根據基礎類型，將目前值轉換成 16 位元不帶正負號的整數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-489">Converts the current value to a 16-bit unsigned integer based on the underlying type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e676c-490">轉換的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-490">The converted value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e676c-491">使用<xref:System.Convert>來執行轉換。</span><span class="sxs-lookup"><span data-stu-id="e676c-491">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt32">
      <MemberSignature Language="C#" Value="uint IConvertible.ToUInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int32 System.IConvertible.ToUInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToUInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt32 (provider As IFormatProvider) As UInteger Implements IConvertible.ToUInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt32 System.IConvertible.ToUInt32(IFormatProvider ^ provider) = IConvertible::ToUInt32;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="e676c-492">物件，提供特定文化特性格式資訊。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-492">An object that supplies culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e676c-493">根據基礎類型，將目前值轉換成 32 位元不帶正負號的整數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-493">Converts the current value to a 32-bit unsigned integer based on the underlying type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e676c-494">轉換的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-494">The converted value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e676c-495">使用<xref:System.Convert>來執行轉換。</span><span class="sxs-lookup"><span data-stu-id="e676c-495">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt64">
      <MemberSignature Language="C#" Value="ulong IConvertible.ToUInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int64 System.IConvertible.ToUInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToUInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt64 (provider As IFormatProvider) As ULong Implements IConvertible.ToUInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt64 System.IConvertible.ToUInt64(IFormatProvider ^ provider) = IConvertible::ToUInt64;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="e676c-496">物件，提供特定文化特性格式資訊。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-496">An object that supplies culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e676c-497">根據基礎類型，將目前值轉換成 64 位元不帶正負號的整數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-497">Converts the current value to a 64-bit unsigned integer based on the underlying type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e676c-498">轉換的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-498">The converted value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e676c-499">使用<xref:System.Convert>來執行轉換。</span><span class="sxs-lookup"><span data-stu-id="e676c-499">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IFormattable.ToString">
      <MemberSignature Language="C#" Value="string IFormattable.ToString (string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.IFormattable.ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IFormattable#ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToString (format As String, provider As IFormatProvider) As String Implements IFormattable.ToString" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::String ^ System.IFormattable.ToString(System::String ^ format, IFormatProvider ^ provider) = IFormattable::ToString;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6">
          <AttributeName>System.Obsolete("The provider argument is not used. Please use ToString(String).")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">To be added.</param>
        <param name="provider">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToObject">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e676c-500">將指定的整數值轉換為列舉成員。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-500">Converts a specified integer value to an enumeration member.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As Byte) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, System::Byte value);" />
      <MemberSignature Language="F#" Value="static member ToObject : Type * byte -&gt; obj" Usage="System.Enum.ToObject (enumType, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="enumType">
          <span data-ttu-id="e676c-501">要傳回的列舉類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-501">The enumeration type to return.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="e676c-502">要轉換為列舉成員的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-502">The value to convert to an enumeration member.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e676c-503">將指定的 8 位元不帶正負號的整數轉換為列舉成員。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-503">Converts the specified 8-bit unsigned integer to an enumeration member.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e676c-504">設定為 <paramref name="value" /> 的列舉執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-504">An instance of the enumeration set to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e676c-505"><xref:System.Enum.ToObject%28System.Type%2CSystem.Byte%29>方法將`value`其基礎值為列舉成員`value`。</span><span class="sxs-lookup"><span data-stu-id="e676c-505">The <xref:System.Enum.ToObject%28System.Type%2CSystem.Byte%29> method converts `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="e676c-506">請注意，轉換成功，即使值是 mimo meze`enumType`成員。</span><span class="sxs-lookup"><span data-stu-id="e676c-506">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="e676c-507">若要確保`value`是有效的基礎值的`enumType`列舉型別，將它傳遞給<xref:System.Enum.IsDefined%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e676c-507">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="e676c-508">此轉換方法會傳回值的型別<xref:System.Object>。</span><span class="sxs-lookup"><span data-stu-id="e676c-508">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="e676c-509">您可以再將它轉換或將它轉換成的型別物件`enumType`。</span><span class="sxs-lookup"><span data-stu-id="e676c-509">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e676c-510">
            <paramref name="enumType" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-510">
              <paramref name="enumType" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e676c-511">
            <paramref name="enumType" /> 不是 <see cref="T:System.Enum" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-511">
              <paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As Short) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, short value);" />
      <MemberSignature Language="F#" Value="static member ToObject : Type * int16 -&gt; obj" Usage="System.Enum.ToObject (enumType, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="enumType">
          <span data-ttu-id="e676c-512">要傳回的列舉類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-512">The enumeration type to return.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="e676c-513">要轉換為列舉成員的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-513">The value to convert to an enumeration member.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e676c-514">將指定的 16 位元帶正負號的整數轉換為列舉成員。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-514">Converts the specified 16-bit signed integer to an enumeration member.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e676c-515">設定為 <paramref name="value" /> 的列舉執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-515">An instance of the enumeration set to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e676c-516"><xref:System.Enum.ToObject%28System.Type%2CSystem.Int16%29>方法將`value`其基礎值為列舉成員`value`。</span><span class="sxs-lookup"><span data-stu-id="e676c-516">The <xref:System.Enum.ToObject%28System.Type%2CSystem.Int16%29> method converts `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="e676c-517">請注意，轉換成功，即使值是 mimo meze`enumType`成員。</span><span class="sxs-lookup"><span data-stu-id="e676c-517">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="e676c-518">若要確保`value`是有效的基礎值的`enumType`列舉型別，將它傳遞給<xref:System.Enum.IsDefined%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e676c-518">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="e676c-519">此轉換方法會傳回值的型別<xref:System.Object>。</span><span class="sxs-lookup"><span data-stu-id="e676c-519">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="e676c-520">您可以再將它轉換或將它轉換成的型別物件`enumType`。</span><span class="sxs-lookup"><span data-stu-id="e676c-520">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e676c-521">
            <paramref name="enumType" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-521">
              <paramref name="enumType" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e676c-522">
            <paramref name="enumType" /> 不是 <see cref="T:System.Enum" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-522">
              <paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As Integer) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, int value);" />
      <MemberSignature Language="F#" Value="static member ToObject : Type * int -&gt; obj" Usage="System.Enum.ToObject (enumType, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="enumType">
          <span data-ttu-id="e676c-523">要傳回的列舉類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-523">The enumeration type to return.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="e676c-524">要轉換為列舉成員的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-524">The value to convert to an enumeration member.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e676c-525">將指定的 32 位元帶正負號的整數轉換為列舉成員。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-525">Converts the specified 32-bit signed integer to an enumeration member.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e676c-526">設定為 <paramref name="value" /> 的列舉執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-526">An instance of the enumeration set to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e676c-527"><xref:System.Enum.ToObject%28System.Type%2CSystem.Int32%29>方法將`value`其基礎值為列舉成員`value`。</span><span class="sxs-lookup"><span data-stu-id="e676c-527">The <xref:System.Enum.ToObject%28System.Type%2CSystem.Int32%29> method converts `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="e676c-528">請注意，轉換成功，即使值是 mimo meze`enumType`成員。</span><span class="sxs-lookup"><span data-stu-id="e676c-528">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="e676c-529">若要確保`value`是有效的基礎值的`enumType`列舉型別，將它傳遞給<xref:System.Enum.IsDefined%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e676c-529">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="e676c-530">此轉換方法會傳回值的型別<xref:System.Object>。</span><span class="sxs-lookup"><span data-stu-id="e676c-530">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="e676c-531">您可以再將它轉換或將它轉換成的型別物件`enumType`。</span><span class="sxs-lookup"><span data-stu-id="e676c-531">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e676c-532">
            <paramref name="enumType" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-532">
              <paramref name="enumType" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e676c-533">
            <paramref name="enumType" /> 不是 <see cref="T:System.Enum" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-533">
              <paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As Long) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, long value);" />
      <MemberSignature Language="F#" Value="static member ToObject : Type * int64 -&gt; obj" Usage="System.Enum.ToObject (enumType, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="enumType">
          <span data-ttu-id="e676c-534">要傳回的列舉類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-534">The enumeration type to return.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="e676c-535">要轉換為列舉成員的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-535">The value to convert to an enumeration member.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e676c-536">將指定的 64 位元帶正負號的整數轉換為列舉成員。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-536">Converts the specified 64-bit signed integer to an enumeration member.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e676c-537">設定為 <paramref name="value" /> 的列舉執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-537">An instance of the enumeration set to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e676c-538"><xref:System.Enum.ToObject%28System.Type%2CSystem.Int64%29>方法將`value`其基礎值為列舉成員`value`。</span><span class="sxs-lookup"><span data-stu-id="e676c-538">The <xref:System.Enum.ToObject%28System.Type%2CSystem.Int64%29> method converts `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="e676c-539">請注意，轉換成功，即使值是 mimo meze`enumType`成員。</span><span class="sxs-lookup"><span data-stu-id="e676c-539">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="e676c-540">若要確保`value`是有效的基礎值的`enumType`列舉型別，將它傳遞給<xref:System.Enum.IsDefined%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e676c-540">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="e676c-541">此轉換方法會傳回值的型別<xref:System.Object>。</span><span class="sxs-lookup"><span data-stu-id="e676c-541">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="e676c-542">您可以再將它轉換或將它轉換成的型別物件`enumType`。</span><span class="sxs-lookup"><span data-stu-id="e676c-542">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e676c-543">
            <paramref name="enumType" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-543">
              <paramref name="enumType" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e676c-544">
            <paramref name="enumType" /> 不是 <see cref="T:System.Enum" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-544">
              <paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member ToObject : Type * obj -&gt; obj" Usage="System.Enum.ToObject (enumType, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="enumType">
          <span data-ttu-id="e676c-545">要傳回的列舉類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-545">The enumeration type to return.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="e676c-546">要轉換為列舉成員的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-546">The value convert to an enumeration member.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e676c-547">將具有整數值的指定物件轉換為列舉成員。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-547">Converts the specified object with an integer value to an enumeration member.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e676c-548">值為 <paramref name="value" /> 的列舉物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-548">An enumeration object whose value is <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e676c-549"><xref:System.Enum.ToObject%28System.Type%2CSystem.Object%29>方法會將轉換的整數值`value`其基礎值為列舉成員`value`。</span><span class="sxs-lookup"><span data-stu-id="e676c-549">The <xref:System.Enum.ToObject%28System.Type%2CSystem.Object%29> method converts the integral value `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="e676c-550">請注意，轉換成功，即使值是 mimo meze`enumType`成員。</span><span class="sxs-lookup"><span data-stu-id="e676c-550">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="e676c-551">若要確保`value`是有效的基礎值的`enumType`列舉型別，將它傳遞給<xref:System.Enum.IsDefined%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e676c-551">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="e676c-552">此轉換方法會傳回值的型別<xref:System.Object>。</span><span class="sxs-lookup"><span data-stu-id="e676c-552">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="e676c-553">您可以再將它轉換或將它轉換成的型別物件`enumType`。</span><span class="sxs-lookup"><span data-stu-id="e676c-553">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e676c-554">
            <paramref name="enumType" /> 或 <paramref name="value" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-554">
              <paramref name="enumType" /> or <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e676c-555">
            <paramref name="enumType" /> 不是 <see cref="T:System.Enum" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-555">
              <paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span>
          </span>
          <span data-ttu-id="e676c-556">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-556">-or-</span>
          </span>
          <span data-ttu-id="e676c-557">
            <paramref name="value" /> 不是類型 <see cref="T:System.SByte" />、<see cref="T:System.Int16" />、<see cref="T:System.Int32" />、<see cref="T:System.Int64" />、<see cref="T:System.Byte" />、<see cref="T:System.UInt16" />、<see cref="T:System.UInt32" /> 或 <see cref="T:System.UInt64" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-557">
              <paramref name="value" /> is not type <see cref="T:System.SByte" />, <see cref="T:System.Int16" />, <see cref="T:System.Int32" />, <see cref="T:System.Int64" />, <see cref="T:System.Byte" />, <see cref="T:System.UInt16" />, <see cref="T:System.UInt32" />, or <see cref="T:System.UInt64" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As SByte) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, System::SByte value);" />
      <MemberSignature Language="F#" Value="static member ToObject : Type * sbyte -&gt; obj" Usage="System.Enum.ToObject (enumType, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="enumType">
          <span data-ttu-id="e676c-558">要傳回的列舉類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-558">The enumeration type to return.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="e676c-559">要轉換為列舉成員的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-559">The value to convert to an enumeration member.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e676c-560">將指定的 8 位元帶正負號的整數值轉換為列舉成員。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-560">Converts the specified 8-bit signed integer value to an enumeration member.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e676c-561">設定為 <paramref name="value" /> 的列舉執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-561">An instance of the enumeration set to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e676c-562"><xref:System.Enum.ToObject%28System.Type%2CSystem.SByte%29>方法將`value`其基礎值為列舉成員`value`。</span><span class="sxs-lookup"><span data-stu-id="e676c-562">The <xref:System.Enum.ToObject%28System.Type%2CSystem.SByte%29> method converts `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="e676c-563">請注意，轉換成功，即使值是 mimo meze`enumType`成員。</span><span class="sxs-lookup"><span data-stu-id="e676c-563">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="e676c-564">若要確保`value`是有效的基礎值的`enumType`列舉型別，將它傳遞給<xref:System.Enum.IsDefined%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e676c-564">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="e676c-565">此轉換方法會傳回值的型別<xref:System.Object>。</span><span class="sxs-lookup"><span data-stu-id="e676c-565">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="e676c-566">您可以再將它轉換或將它轉換成的型別物件`enumType`。</span><span class="sxs-lookup"><span data-stu-id="e676c-566">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e676c-567">
            <paramref name="enumType" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-567">
              <paramref name="enumType" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e676c-568">
            <paramref name="enumType" /> 不是 <see cref="T:System.Enum" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-568">
              <paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As UShort) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, System::UInt16 value);" />
      <MemberSignature Language="F#" Value="static member ToObject : Type * uint16 -&gt; obj" Usage="System.Enum.ToObject (enumType, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="enumType">
          <span data-ttu-id="e676c-569">要傳回的列舉類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-569">The enumeration type to return.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="e676c-570">要轉換為列舉成員的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-570">The value to convert to an enumeration member.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e676c-571">將指定的 16 位元不帶正負號的整數值轉換為列舉成員。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-571">Converts the specified 16-bit unsigned integer value to an enumeration member.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e676c-572">設定為 <paramref name="value" /> 的列舉執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-572">An instance of the enumeration set to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e676c-573"><xref:System.Enum.ToObject%28System.Type%2CSystem.UInt16%29>方法將`value`其基礎值為列舉成員`value`。</span><span class="sxs-lookup"><span data-stu-id="e676c-573">The <xref:System.Enum.ToObject%28System.Type%2CSystem.UInt16%29> method converts `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="e676c-574">請注意，轉換成功，即使值是 mimo meze`enumType`成員。</span><span class="sxs-lookup"><span data-stu-id="e676c-574">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="e676c-575">若要確保`value`是有效的基礎值的`enumType`列舉型別，將它傳遞給<xref:System.Enum.IsDefined%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e676c-575">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="e676c-576">此轉換方法會傳回值的型別<xref:System.Object>。</span><span class="sxs-lookup"><span data-stu-id="e676c-576">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="e676c-577">您可以再將它轉換或將它轉換成的型別物件`enumType`。</span><span class="sxs-lookup"><span data-stu-id="e676c-577">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e676c-578">
            <paramref name="enumType" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-578">
              <paramref name="enumType" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e676c-579">
            <paramref name="enumType" /> 不是 <see cref="T:System.Enum" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-579">
              <paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As UInteger) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, System::UInt32 value);" />
      <MemberSignature Language="F#" Value="static member ToObject : Type * uint32 -&gt; obj" Usage="System.Enum.ToObject (enumType, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="enumType">
          <span data-ttu-id="e676c-580">要傳回的列舉類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-580">The enumeration type to return.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="e676c-581">要轉換為列舉成員的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-581">The value to convert to an enumeration member.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e676c-582">將指定的 32 位元不帶正負號的整數值轉換為列舉成員。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-582">Converts the specified 32-bit unsigned integer value to an enumeration member.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e676c-583">設定為 <paramref name="value" /> 的列舉執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-583">An instance of the enumeration set to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e676c-584"><xref:System.Enum.ToObject%28System.Type%2CSystem.UInt32%29>方法將`value`其基礎值為列舉成員`value`。</span><span class="sxs-lookup"><span data-stu-id="e676c-584">The <xref:System.Enum.ToObject%28System.Type%2CSystem.UInt32%29> method converts `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="e676c-585">請注意，轉換成功，即使值是 mimo meze`enumType`成員。</span><span class="sxs-lookup"><span data-stu-id="e676c-585">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="e676c-586">若要確保`value`是有效的基礎值的`enumType`列舉型別，將它傳遞給<xref:System.Enum.IsDefined%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e676c-586">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="e676c-587">此轉換方法會傳回值的型別<xref:System.Object>。</span><span class="sxs-lookup"><span data-stu-id="e676c-587">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="e676c-588">您可以再將它轉換或將它轉換成的型別物件`enumType`。</span><span class="sxs-lookup"><span data-stu-id="e676c-588">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e676c-589">
            <paramref name="enumType" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-589">
              <paramref name="enumType" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e676c-590">
            <paramref name="enumType" /> 不是 <see cref="T:System.Enum" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-590">
              <paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As ULong) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, System::UInt64 value);" />
      <MemberSignature Language="F#" Value="static member ToObject : Type * uint64 -&gt; obj" Usage="System.Enum.ToObject (enumType, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="enumType">
          <span data-ttu-id="e676c-591">要傳回的列舉類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-591">The enumeration type to return.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="e676c-592">要轉換為列舉成員的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-592">The value to convert to an enumeration member.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e676c-593">將指定的 64 位元不帶正負號的整數值轉換為列舉成員。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-593">Converts the specified 64-bit unsigned integer value to an enumeration member.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e676c-594">設定為 <paramref name="value" /> 的列舉執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-594">An instance of the enumeration set to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e676c-595"><xref:System.Enum.ToObject%28System.Type%2CSystem.UInt64%29>方法將`value`其基礎值為列舉成員`value`。</span><span class="sxs-lookup"><span data-stu-id="e676c-595">The <xref:System.Enum.ToObject%28System.Type%2CSystem.UInt64%29> method converts `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="e676c-596">請注意，轉換成功，即使值是 mimo meze`enumType`成員。</span><span class="sxs-lookup"><span data-stu-id="e676c-596">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="e676c-597">若要確保`value`是有效的基礎值的`enumType`列舉型別，將它傳遞給<xref:System.Enum.IsDefined%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e676c-597">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="e676c-598">此轉換方法會傳回值的型別<xref:System.Object>。</span><span class="sxs-lookup"><span data-stu-id="e676c-598">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="e676c-599">您可以再將它轉換或將它轉換成的型別物件`enumType`。</span><span class="sxs-lookup"><span data-stu-id="e676c-599">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e676c-600">
            <paramref name="enumType" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-600">
              <paramref name="enumType" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e676c-601">
            <paramref name="enumType" /> 不是 <see cref="T:System.Enum" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-601">
              <paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e676c-602">將這個執行個體的值轉換為它的相等字串表示。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-602">Converts the value of this instance to its equivalent string representation.</span>
          </span>
        </summary>
        <related type="Article" href="~/docs/standard/base-types/enumeration-format-strings.md">
          <span data-ttu-id="e676c-603">列舉格式字串</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-603">Enumeration Format Strings</span>
          </span>
        </related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="enum.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e676c-604">將這個執行個體的值轉換為它的相等字串表示。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-604">Converts the value of this instance to its equivalent string representation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e676c-605">這個執行個體值的字串表示。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-605">The string representation of the value of this instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e676c-606">傳回值是以一般格式規範 ("G") 格式。</span><span class="sxs-lookup"><span data-stu-id="e676c-606">The return value is formatted with the general format specifier ("G").</span></span> <span data-ttu-id="e676c-607">也就是說，如果<xref:System.FlagsAttribute>不會套用至這個列舉型別和具名的常數的值，這個執行個體，等於則傳回的值是包含的常數名稱的字串。</span><span class="sxs-lookup"><span data-stu-id="e676c-607">That is, if the <xref:System.FlagsAttribute> is not applied to this enumerated type and there is a named constant equal to the value of this instance, then the return value is a string containing the name of the constant.</span></span> <span data-ttu-id="e676c-608">如果<xref:System.FlagsAttribute>套用並沒有等於這個執行個體中，值的一或多個具名常數的組合，然後傳回的值是包含以分隔符號分隔清單的常數名稱的字串。</span><span class="sxs-lookup"><span data-stu-id="e676c-608">If the <xref:System.FlagsAttribute> is applied and there is a combination of one or more named constants equal to the value of this instance, then the return value is a string containing a delimiter-separated list of the names of the constants.</span></span> <span data-ttu-id="e676c-609">否則，傳回的值會是值的數字，這個執行個體的字串表示。</span><span class="sxs-lookup"><span data-stu-id="e676c-609">Otherwise, the return value is the string representation of the numeric value of this instance.</span></span> <span data-ttu-id="e676c-610">如需格式的列舉值的詳細資訊，請參閱[列舉格式字串](~/docs/standard/base-types/enumeration-format-strings.md)。</span><span class="sxs-lookup"><span data-stu-id="e676c-610">For more information about formatting enumeration values, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).</span></span> <span data-ttu-id="e676c-611">如需一般格式的詳細資訊，請參閱[格式化型別](~/docs/standard/base-types/formatting-types.md)。</span><span class="sxs-lookup"><span data-stu-id="e676c-611">For more information about formatting in general, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e676c-612">下列範例會示範將列舉的值，轉換為字串。</span><span class="sxs-lookup"><span data-stu-id="e676c-612">The following example demonstrates converting an enumerated value to a string.</span></span>  
  
 [!code-cpp[Classic Enum.ToString2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Enum.ToString2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Enum.ToString2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Enum.ToString2 Example/CS/source.cs#1)]
 [!code-vb[Classic Enum.ToString2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Enum.ToString2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>
            <span data-ttu-id="e676c-613">如果多個列舉的成員具有相同的基礎值，而您嘗試擷取其基礎值為基礎的列舉型別成員名稱的字串表示，您的程式碼應該不會做任何假設，則方法會傳回有關的名稱。</span>
            <span class="sxs-lookup">
              <span data-stu-id="e676c-613">If multiple enumeration members have the same underlying value and you attempt to retrieve the string representation of an enumeration member's name based on its underlying value, your code should not make any assumptions about which name the method will return.</span>
            </span>
            <span data-ttu-id="e676c-614">例如，下列的列舉會定義兩個成員<c>Shade.Gray</c>並<c>Shade.Grey</c>，具有相同的基礎值。</span>
            <span class="sxs-lookup">
              <span data-stu-id="e676c-614">For example, the following enumeration defines two members, <c>Shade.Gray</c> and <c>Shade.Grey</c>, that have the same underlying value.</span>
            </span>
            <span data-ttu-id="e676c-615">[！ 的程式碼 csharp[System.Enum.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.tostring/cs/tostringbyvalue1.cs#1)] [！ 的程式碼 vb[System.Enum.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.tostring/vb/tostringbyvalue1.vb#1)]</span>
            <span class="sxs-lookup">
              <span data-stu-id="e676c-615">[!code-csharp[System.Enum.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.tostring/cs/tostringbyvalue1.cs#1)] [!code-vb[System.Enum.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.tostring/vb/tostringbyvalue1.vb#1)]</span>
            </span>
            <span data-ttu-id="e676c-616">下列方法呼叫嘗試擷取的成員名稱<c>陰影</c>列舉的基礎值為 1。</span>
            <span class="sxs-lookup">
              <span data-stu-id="e676c-616">The following method call attempts to retrieve the name of a member of the <c>Shade</c> enumeration whose underlying value is 1.</span>
            </span>
            <span data-ttu-id="e676c-617">這個方法會傳回"Gray"或"Grey"，和您的程式碼不應建立要字串傳回相關的任何假設。</span>
            <span class="sxs-lookup">
              <span data-stu-id="e676c-617">The method can return either "Gray" or "Grey", and your code should not make any assumptions about which string will be returned.</span>
            </span>
            <span data-ttu-id="e676c-618">[！ 的程式碼 csharp[System.Enum.ToString#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.tostring/cs/tostringbyvalue1.cs#2)] [！ 的程式碼 vb[System.Enum.ToString#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.tostring/vb/tostringbyvalue1.vb#2)]</span>
            <span class="sxs-lookup">
              <span data-stu-id="e676c-618">[!code-csharp[System.Enum.ToString#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.tostring/cs/tostringbyvalue1.cs#2)] [!code-vb[System.Enum.ToString#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.tostring/vb/tostringbyvalue1.vb#2)]</span>
            </span>
          </para>
        </block>
        <altmember cref="M:System.Enum.Format(System.Type,System.Object,System.String)" />
        <altmember cref="M:System.Enum.Parse(System.Type,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="override this.ToString : IFormatProvider -&gt; string" Usage="enum.ToString provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToString(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Obsolete("The provider argument is not used. Please use ToString().")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="e676c-619">(已過時)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-619">(obsolete)</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e676c-620">這個方法多載已淘汰，請改用 <see cref="M:System.Enum.ToString" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-620">This method overload is obsolete; use <see cref="M:System.Enum.ToString" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e676c-621">這個執行個體值的字串表示。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-621">The string representation of the value of this instance.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(System::String ^ format);" />
      <MemberSignature Language="F#" Value="override this.ToString : string -&gt; string" Usage="enum.ToString format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">
          <span data-ttu-id="e676c-622">格式字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-622">A format string.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e676c-623">使用指定格式，將這個執行個體的值轉換為它的相等字串表示。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-623">Converts the value of this instance to its equivalent string representation using the specified format.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e676c-624">這個執行個體值的字串表示，如同 <paramref name="format" /> 所指定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-624">The string representation of the value of this instance as specified by <paramref name="format" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e676c-625">`format`參數可以是下列格式字串的其中一個:"G"或"g"、"D"或"d"、"X"或"x"，和"F"或"f"（格式字串不區分大小寫）。</span><span class="sxs-lookup"><span data-stu-id="e676c-625">The `format` parameter can be one of the following format strings: "G" or "g", "D" or "d", "X" or "x", and "F" or "f" (the format string is not case-sensitive).</span></span> <span data-ttu-id="e676c-626">如果`format`是`null`或空字串 ("")，會使用的一般格式規範 ("G")。</span><span class="sxs-lookup"><span data-stu-id="e676c-626">If `format` is `null` or an empty string (""), the general format specifier ("G") is used.</span></span> <span data-ttu-id="e676c-627">如需列舉格式字串和格式的列舉值的詳細資訊，請參閱[列舉格式字串](~/docs/standard/base-types/enumeration-format-strings.md)。</span><span class="sxs-lookup"><span data-stu-id="e676c-627">For more information about the enumeration format strings and formatting enumeration values, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).</span></span> <span data-ttu-id="e676c-628">如需一般格式的詳細資訊，請參閱[格式化型別](~/docs/standard/base-types/formatting-types.md)。</span><span class="sxs-lookup"><span data-stu-id="e676c-628">For more information about formatting in general, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e676c-629">下列範例示範如何將列舉的值，轉換為字串。</span><span class="sxs-lookup"><span data-stu-id="e676c-629">The following example demonstrates how to convert an enumerated value to a string.</span></span>  
  
 [!code-cpp[enum.tostring#1](~/samples/snippets/cpp/VS_Snippets_CLR/enum.tostring/CPP/tostr.cpp#1)]
 [!code-csharp[enum.tostring#1](~/samples/snippets/csharp/VS_Snippets_CLR/enum.tostring/CS/tostr.cs#1)]
 [!code-vb[enum.tostring#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enum.tostring/VB/tostr.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="e676c-630">
            <paramref name="format" /> 包含無效的規格。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-630">
              <paramref name="format" /> contains an invalid specification.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e676c-631">
            <paramref name="format" /> 等於 "X"，但列舉類型未知。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-631">
              <paramref name="format" /> equals "X", but the enumeration type is unknown.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <para>
            <span data-ttu-id="e676c-632">如果多個列舉的成員具有相同的基礎值，而您嘗試擷取其基礎值為基礎的列舉型別成員名稱的字串表示，您的程式碼應該不會做任何假設，則方法會傳回有關的名稱。</span>
            <span class="sxs-lookup">
              <span data-stu-id="e676c-632">If multiple enumeration members have the same underlying value and you attempt to retrieve the string representation of an enumeration member's name based on its underlying value, your code should not make any assumptions about which name the method will return.</span>
            </span>
            <span data-ttu-id="e676c-633">例如，下列的列舉會定義兩個成員<c>Shade.Gray</c>並<c>Shade.Grey</c>，具有相同的基礎值。</span>
            <span class="sxs-lookup">
              <span data-stu-id="e676c-633">For example, the following enumeration defines two members, <c>Shade.Gray</c> and <c>Shade.Grey</c>, that have the same underlying value.</span>
            </span>
            <span data-ttu-id="e676c-634">[！ 的程式碼 csharp[System.Enum.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.tostring/cs/tostringbyvalue1.cs#1)] [！ 的程式碼 vb[System.Enum.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.tostring/vb/tostringbyvalue1.vb#1)]</span>
            <span class="sxs-lookup">
              <span data-stu-id="e676c-634">[!code-csharp[System.Enum.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.tostring/cs/tostringbyvalue1.cs#1)] [!code-vb[System.Enum.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.tostring/vb/tostringbyvalue1.vb#1)]</span>
            </span>
            <span data-ttu-id="e676c-635">下列方法呼叫嘗試擷取的成員名稱<c>陰影</c>列舉的基礎值為 1。</span>
            <span class="sxs-lookup">
              <span data-stu-id="e676c-635">The following method call attempts to retrieve the name of a member of the <c>Shade</c> enumeration whose underlying value is 1.</span>
            </span>
            <span data-ttu-id="e676c-636">這個方法會傳回"Gray"或"Grey"，和您的程式碼不應建立要字串傳回相關的任何假設。</span>
            <span class="sxs-lookup">
              <span data-stu-id="e676c-636">The method can return either "Gray" or "Grey", and your code should not make any assumptions about which string will be returned.</span>
            </span>
            <span data-ttu-id="e676c-637">[！ 的程式碼 csharp[System.Enum.ToString#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.tostring/cs/tostringbyvalue1.cs#3)] [！ 的程式碼 vb[System.Enum.ToString#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.tostring/vb/tostringbyvalue1.vb#3)]</span>
            <span class="sxs-lookup">
              <span data-stu-id="e676c-637">[!code-csharp[System.Enum.ToString#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.tostring/cs/tostringbyvalue1.cs#3)] [!code-vb[System.Enum.ToString#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.tostring/vb/tostringbyvalue1.vb#3)]</span>
            </span>
          </para>
        </block>
        <altmember cref="M:System.Enum.Format(System.Type,System.Object,System.String)" />
        <altmember cref="M:System.Enum.Parse(System.Type,System.String)" />
        <altmember cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">
          <span data-ttu-id="e676c-638">在 .NET 中將類型格式化</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-638">Formatting Types in .NET</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/base-types/enumeration-format-strings.md">
          <span data-ttu-id="e676c-639">列舉格式字串</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-639">Enumeration Format Strings</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(System::String ^ format, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="override this.ToString : string * IFormatProvider -&gt; string" Usage="enum.ToString (format, provider)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Obsolete("The provider argument is not used. Please use ToString(String).")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">
          <span data-ttu-id="e676c-640">格式規格。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-640">A format specification.</span>
          </span>
        </param>
        <param name="provider">
          <span data-ttu-id="e676c-641">(已過時。)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-641">(Obsolete.)</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e676c-642">這個方法多載已淘汰，請改用 <see cref="M:System.Enum.ToString(System.String)" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-642">This method overload is obsolete; use <see cref="M:System.Enum.ToString(System.String)" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e676c-643">這個執行個體值的字串表示，如同 <paramref name="format" /> 所指定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-643">The string representation of the value of this instance as specified by <paramref name="format" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e676c-644">`format`參數可以是下列格式字串的其中一個:"G"或"g"、"D"或"d"、"X"或"x"，和"F"或"f"（格式字串不區分大小寫）。</span><span class="sxs-lookup"><span data-stu-id="e676c-644">The `format` parameter can be one of the following format strings: "G" or "g", "D" or "d", "X" or "x", and "F" or "f" (the format string is not case-sensitive).</span></span> <span data-ttu-id="e676c-645">如果`format`是`null`或空字串 ("")，會使用的一般格式規範 ("G")。</span><span class="sxs-lookup"><span data-stu-id="e676c-645">If `format` is `null` or an empty string (""), the general format specifier ("G") is used.</span></span> <span data-ttu-id="e676c-646">如需列舉格式字串和格式的列舉值的詳細資訊，請參閱[列舉格式字串](~/docs/standard/base-types/enumeration-format-strings.md)。</span><span class="sxs-lookup"><span data-stu-id="e676c-646">For more information about the enumeration format strings and formatting enumeration values, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).</span></span> <span data-ttu-id="e676c-647">如需一般格式的詳細資訊，請參閱[格式化型別](~/docs/standard/base-types/formatting-types.md)。</span><span class="sxs-lookup"><span data-stu-id="e676c-647">For more information about formatting in general, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).</span></span>  
  
 <span data-ttu-id="e676c-648">指定只有`format`;`provider`參數已經過時。</span><span class="sxs-lookup"><span data-stu-id="e676c-648">Specify only `format`; the `provider` parameter is obsolete.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="e676c-649">
            <paramref name="format" /> 不包含有效的格式規格。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-649">
              <paramref name="format" /> does not contain a valid format specification.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e676c-650">
            <paramref name="format" /> 等於 "X"，但列舉類型未知。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-650">
              <paramref name="format" /> equals "X", but the enumeration type is unknown.</span>
          </span>
        </exception>
        <altmember cref="M:System.Enum.Format(System.Type,System.Object,System.String)" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">
          <span data-ttu-id="e676c-651">在 .NET 中將類型格式化</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-651">Formatting Types in .NET</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/base-types/enumeration-format-strings.md">
          <span data-ttu-id="e676c-652">列舉格式字串</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-652">Enumeration Format Strings</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e676c-653">把一或多個列舉常數的名稱或數值的字串表示轉換為一個相等列舉物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-653">Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</span>
          </span>
          <span data-ttu-id="e676c-654">指出轉換是否成功的傳回值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-654">The return value indicates whether the conversion succeeded.</span>
          </span>
        </summary>
        <altmember cref="M:System.Enum.Parse(System.Type,System.String)" />
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (Type enumType, string value, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(class System.Type enumType, string value, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.TryParse(System.Type,System.String,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (enumType As Type, value As String, ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(Type ^ enumType, System::String ^ value, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : Type * string *  -&gt; bool" Usage="System.Enum.TryParse (enumType, value, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="result" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="enumType">To be added.</param>
        <param name="value">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (Type enumType, string value, bool ignoreCase, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(class System.Type enumType, string value, bool ignoreCase, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.TryParse(System.Type,System.String,System.Boolean,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (enumType As Type, value As String, ignoreCase As Boolean, ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(Type ^ enumType, System::String ^ value, bool ignoreCase, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : Type * string * bool *  -&gt; bool" Usage="System.Enum.TryParse (enumType, value, ignoreCase, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="result" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="enumType">To be added.</param>
        <param name="value">To be added.</param>
        <param name="ignoreCase">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse&lt;TEnum&gt;">
      <MemberSignature Language="C#" Value="public static bool TryParse&lt;TEnum&gt; (string value, out TEnum result) where TEnum : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse&lt;struct .ctor (class System.ValueType) TEnum&gt;(string value, [out] !!TEnum&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.TryParse``1(System.String,``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse(Of TEnum As Structure) (value As String, ByRef result As TEnum) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEnum&gt;&#xA; where TEnum : value class static bool TryParse(System::String ^ value, [Runtime::InteropServices::Out] TEnum % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string *  -&gt; bool (requires 'Enum : struct)" Usage="System.Enum.TryParse (value, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEnum">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="result" Type="TEnum" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="TEnum">
          <span data-ttu-id="e676c-655">要轉換成列舉型別<c>值</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-655">The enumeration type to which to convert <c>value</c>.</span>
          </span>
        </typeparam>
        <param name="value">
          <span data-ttu-id="e676c-656">要轉換之列舉名稱或基礎值之區分大小寫的字串表示。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-656">The case-sensitive string representation of the enumeration name or underlying value to convert.</span>
          </span>
        </param>
        <param name="result">
          <span data-ttu-id="e676c-657">如果剖析作業成功，這個方法傳回的「結果」<c></c>會包含類型為 <c>TEnum</c> 的物件，而物件的值會以 <c>value</c> 表示。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-657">When this method returns, <c>result</c> contains an object of type <c>TEnum</c> whose value is represented by <c>value</c> if the parse operation succeeds.</span>
          </span>
          <span data-ttu-id="e676c-658">如果剖析作業失敗，則「結果」<c></c> 會包含 <c>TEnum</c> 之基礎類型的預設值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-658">If the parse operation fails, <c>result</c> contains the default value of the underlying type of <c>TEnum</c>.</span>
          </span>
          <span data-ttu-id="e676c-659">請注意，這個值不一定要是 <c>TEnum</c> 列舉的成員。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-659">Note that this value need not be a member of the <c>TEnum</c> enumeration.</span>
          </span>
          <span data-ttu-id="e676c-660">這個參數會以未初始化的狀態傳遞。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-660">This parameter is passed uninitialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e676c-661">把一或多個列舉常數的名稱或數值的字串表示轉換為一個相等列舉物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-661">Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</span>
          </span>
          <span data-ttu-id="e676c-662">指出轉換是否成功的傳回值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-662">The return value indicates whether the conversion succeeded.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e676c-663">如果 <see langword="true" /> 參數轉換成功，則為 <paramref name="value" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-663">
              <see langword="true" /> if the <paramref name="value" /> parameter was converted successfully; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e676c-664"><xref:System.Enum.TryParse%60%601%28System.String%2C%60%600%40%29> 等同於<xref:System.Enum.Parse%28System.Type%2CSystem.String%29>方法，而非擲回例外狀況，它會傳回`false`如果轉換失敗。</span><span class="sxs-lookup"><span data-stu-id="e676c-664"><xref:System.Enum.TryParse%60%601%28System.String%2C%60%600%40%29> is identical to the <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> method, except that instead of throwing an exception, it returns `false` if the conversion fails.</span></span> <span data-ttu-id="e676c-665">它就不需要剖析的列舉值的字串表示時所處理的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="e676c-665">It eliminates the need for exception handling when parsing the string representation of an enumeration value.</span></span>  
  
 <span data-ttu-id="e676c-666">`value`參數包含的字串表示法為列舉成員的基礎值或具名的常數，或以逗號 （，） 分隔的具名的常數或基礎值的清單。</span><span class="sxs-lookup"><span data-stu-id="e676c-666">The `value` parameter contains the string representation of an enumeration member's underlying value or named constant, or a list of named constants or underlying values delimited by commas (,).</span></span> <span data-ttu-id="e676c-667">如果`value`包含多個名為常數或值，一或多個空格可以之前或之後每個值、 名稱或在逗號`value`。</span><span class="sxs-lookup"><span data-stu-id="e676c-667">If `value` includes multiple named constants or values, one or more blank spaces can precede or follow each value, name, or comma in `value`.</span></span> <span data-ttu-id="e676c-668">如果`value`清單中，`result`會反映指定名稱的值，或基礎值的位元結合`OR`作業。</span><span class="sxs-lookup"><span data-stu-id="e676c-668">If `value` is a list, `result` reflects the value of the specified names or underlying values combined with a bitwise `OR` operation.</span></span> <span data-ttu-id="e676c-669">如果`value`的列舉值，比較名稱的字串表示法`value`與列舉型別名稱會區分大小寫。</span><span class="sxs-lookup"><span data-stu-id="e676c-669">If `value` is the string representation of the name of an enumeration value, the comparison of `value` with enumeration names is case-sensitive.</span></span>  
  
 <span data-ttu-id="e676c-670">如果`value`是名稱未對應的具名常數`TEnum`，則方法會傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="e676c-670">If `value` is a name that does not correspond to a named constant of `TEnum`, the method returns `false`.</span></span> <span data-ttu-id="e676c-671">如果`value`不代表基礎值的整數的字串表示法`TEnum`列舉型別，此方法會傳回其基礎值是列舉成員`value`轉換成整數類資料類型。</span><span class="sxs-lookup"><span data-stu-id="e676c-671">If `value` is the string representation of an integer that does not represent an underlying value of the `TEnum` enumeration, the method returns an enumeration member whose underlying value is `value` converted to an integral type.</span></span> <span data-ttu-id="e676c-672">如果不需要此行為，呼叫<xref:System.Enum.IsDefined%2A>方法，以確保特定的字串表示的整數是實際的成員`TEnum`。</span><span class="sxs-lookup"><span data-stu-id="e676c-672">If this behavior is undesirable, call the <xref:System.Enum.IsDefined%2A> method to ensure that a particular string representation of an integer is actually a member of `TEnum`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e676c-673">下列範例會定義`Colors`列舉型別時，會呼叫<xref:System.Enum.TryParse%60%601%28System.String%2C%60%600%40%29>方法，以將字串轉換成其對應的列舉值，並呼叫<xref:System.Enum.IsDefined%2A>中值的方法，以確保特定的整數值為基礎`Colors`列舉型別。</span><span class="sxs-lookup"><span data-stu-id="e676c-673">The following example defines a `Colors` enumeration, calls the <xref:System.Enum.TryParse%60%601%28System.String%2C%60%600%40%29> method to convert strings to their corresponding enumeration values, and calls the <xref:System.Enum.IsDefined%2A> method to ensure that particular integral values are underlying values in the `Colors` enumeration.</span></span>  
  
 [!code-csharp[System.Enum.TryParse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.tryparse/cs/tryparse1.cs#1)]
 [!code-vb[System.Enum.TryParse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.tryparse/vb/tryparse1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e676c-674">
            <paramref name="TEnum" /> 不是列舉類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-674">
              <paramref name="TEnum" /> is not an enumeration type.</span>
          </span>
        </exception>
        <altmember cref="M:System.Enum.Parse(System.Type,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="TryParse&lt;TEnum&gt;">
      <MemberSignature Language="C#" Value="public static bool TryParse&lt;TEnum&gt; (string value, bool ignoreCase, out TEnum result) where TEnum : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse&lt;struct .ctor (class System.ValueType) TEnum&gt;(string value, bool ignoreCase, [out] !!TEnum&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse(Of TEnum As Structure) (value As String, ignoreCase As Boolean, ByRef result As TEnum) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEnum&gt;&#xA; where TEnum : value class static bool TryParse(System::String ^ value, bool ignoreCase, [Runtime::InteropServices::Out] TEnum % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string * bool *  -&gt; bool (requires 'Enum : struct)" Usage="System.Enum.TryParse (value, ignoreCase, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEnum">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="result" Type="TEnum" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="TEnum">
          <span data-ttu-id="e676c-675">要轉換成列舉型別<c>值</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-675">The enumeration type to which to convert <c>value</c>.</span>
          </span>
        </typeparam>
        <param name="value">
          <span data-ttu-id="e676c-676">要轉換之列舉名稱或基礎值的字串表示。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-676">The string representation of the enumeration name or underlying value to convert.</span>
          </span>
        </param>
        <param name="ignoreCase">
          <span data-ttu-id="e676c-677">
            <see langword="true" /> 以忽略大小寫，<see langword="false" /> 以區分大小寫。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-677">
              <see langword="true" /> to ignore case; <see langword="false" /> to consider case.</span>
          </span>
        </param>
        <param name="result">
          <span data-ttu-id="e676c-678">如果剖析作業成功，這個方法傳回的「結果」<c></c>會包含類型為 <c>TEnum</c> 的物件，而物件的值會以 <c>value</c> 表示。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-678">When this method returns, <c>result</c> contains an object of type <c>TEnum</c> whose value is represented by <c>value</c> if the parse operation succeeds.</span>
          </span>
          <span data-ttu-id="e676c-679">如果剖析作業失敗，則「結果」<c></c> 會包含 <c>TEnum</c> 之基礎類型的預設值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-679">If the parse operation fails, <c>result</c> contains the default value of the underlying type of <c>TEnum</c>.</span>
          </span>
          <span data-ttu-id="e676c-680">請注意，這個值不一定要是 <c>TEnum</c> 列舉的成員。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-680">Note that this value need not be a member of the <c>TEnum</c> enumeration.</span>
          </span>
          <span data-ttu-id="e676c-681">這個參數會以未初始化的狀態傳遞。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-681">This parameter is passed uninitialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e676c-682">把一或多個列舉常數的名稱或數值的字串表示轉換為一個相等列舉物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-682">Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</span>
          </span>
          <span data-ttu-id="e676c-683">參數會指定運算是否區分大小寫。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-683">A parameter specifies whether the operation is case-sensitive.</span>
          </span>
          <span data-ttu-id="e676c-684">指出轉換是否成功的傳回值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-684">The return value indicates whether the conversion succeeded.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e676c-685">如果 <see langword="true" /> 參數轉換成功，則為 <paramref name="value" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-685">
              <see langword="true" /> if the <paramref name="value" /> parameter was converted successfully; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e676c-686"><xref:System.Enum.TryParse%60%601%28System.String%2CSystem.Boolean%2C%60%600%40%29> 等同於<xref:System.Enum.Parse%28System.Type%2CSystem.String%2CSystem.Boolean%29>方法，而非擲回例外狀況，它會傳回`false`如果轉換失敗。</span><span class="sxs-lookup"><span data-stu-id="e676c-686"><xref:System.Enum.TryParse%60%601%28System.String%2CSystem.Boolean%2C%60%600%40%29> is identical to the <xref:System.Enum.Parse%28System.Type%2CSystem.String%2CSystem.Boolean%29> method, except that instead of throwing an exception, it returns `false` if the conversion fails.</span></span> <span data-ttu-id="e676c-687">它就不需要剖析的列舉值的字串表示時所處理的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="e676c-687">It eliminates the need for exception handling when parsing the string representation of an enumeration value.</span></span>  
  
 <span data-ttu-id="e676c-688">`value`參數包含的字串表示法為列舉成員的基礎值或具名的常數，或以逗號 （，） 分隔的具名的常數或基礎值的清單。</span><span class="sxs-lookup"><span data-stu-id="e676c-688">The `value` parameter contains the string representation of an enumeration member's underlying value or named constant, or a list of named constants or underlying values delimited by commas (,).</span></span> <span data-ttu-id="e676c-689">如果`value`包含多個名為常數或值，一或多個空格可以之前或之後每個值、 名稱或在逗號`value`。</span><span class="sxs-lookup"><span data-stu-id="e676c-689">If `value` includes multiple named constants or values, one or more blank spaces can precede or follow each value, name, or comma in `value`.</span></span> <span data-ttu-id="e676c-690">如果`value`清單中，`result`會反映指定名稱的值，或基礎值的位元結合`OR`作業。</span><span class="sxs-lookup"><span data-stu-id="e676c-690">If `value` is a list, `result` reflects the value of the specified names or underlying values combined with a bitwise `OR` operation.</span></span> <span data-ttu-id="e676c-691">如果`value`的列舉值，比較名稱的字串表示法`value`列舉型別名稱取決於`ignoreCase`參數。</span><span class="sxs-lookup"><span data-stu-id="e676c-691">If `value` is the string representation of the name of an enumeration value, the comparison of `value` with enumeration names depends on the `ignoreCase` parameter.</span></span> <span data-ttu-id="e676c-692">如果`true`，比較不區分大小寫; 如果`false`，它會區分大小寫。</span><span class="sxs-lookup"><span data-stu-id="e676c-692">If `true`, the comparison is case-insensitive; if `false`, it is case-sensitive.</span></span>  
  
 <span data-ttu-id="e676c-693">如果`value`是名稱未對應的具名常數`TEnum`，則方法會傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="e676c-693">If `value` is a name that does not correspond to a named constant of `TEnum`, the method returns `false`.</span></span> <span data-ttu-id="e676c-694">如果`value`不代表基礎值的整數的字串表示法`TEnum`列舉型別，此方法會傳回其基礎值是列舉成員`value`轉換成整數類資料類型。</span><span class="sxs-lookup"><span data-stu-id="e676c-694">If `value` is the string representation of an integer that does not represent an underlying value of the `TEnum` enumeration, the method returns an enumeration member whose underlying value is `value` converted to an integral type.</span></span> <span data-ttu-id="e676c-695">如果不需要此行為，呼叫<xref:System.Enum.IsDefined%2A>方法，以確保特定的字串表示的整數是實際的成員`TEnum`。</span><span class="sxs-lookup"><span data-stu-id="e676c-695">If this behavior is undesirable, call the <xref:System.Enum.IsDefined%2A> method to ensure that a particular string representation of an integer is actually a member of `TEnum`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e676c-696">下列範例會定義`Colors`列舉型別時，會呼叫<xref:System.Enum.TryParse%60%601%28System.String%2CSystem.Boolean%2C%60%600%40%29>方法，以將字串轉換成其對應的列舉值，並呼叫<xref:System.Enum.IsDefined%2A>中值的方法，以確保特定的整數值為基礎`Colors`列舉型別。</span><span class="sxs-lookup"><span data-stu-id="e676c-696">The following example defines a `Colors` enumeration, calls the <xref:System.Enum.TryParse%60%601%28System.String%2CSystem.Boolean%2C%60%600%40%29> method to convert strings to their corresponding enumeration values, and calls the <xref:System.Enum.IsDefined%2A> method to ensure that particular integral values are underlying values in the `Colors` enumeration.</span></span> <span data-ttu-id="e676c-697"><xref:System.Enum.TryParse%60%601%28System.String%2CSystem.Boolean%2C%60%600%40%29>方法會嘗試將轉換的字串表示具名常數，為其相等的列舉值時，會使用不區分大小寫的比較。</span><span class="sxs-lookup"><span data-stu-id="e676c-697">The <xref:System.Enum.TryParse%60%601%28System.String%2CSystem.Boolean%2C%60%600%40%29> method uses case-insensitive comparison when trying to convert the string representations of named constants to their equivalent enumeration values.</span></span>  
  
 [!code-csharp[System.Enum.TryParse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.tryparse/cs/tryparse2.cs#2)]
 [!code-vb[System.Enum.TryParse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.tryparse/vb/tryparse2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e676c-698">
            <paramref name="TEnum" /> 不是列舉類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e676c-698">
              <paramref name="TEnum" /> is not an enumeration type.</span>
          </span>
        </exception>
        <altmember cref="M:System.Enum.Parse(System.Type,System.String,System.Boolean)" />
      </Docs>
    </Member>
  </Members>
</Type>