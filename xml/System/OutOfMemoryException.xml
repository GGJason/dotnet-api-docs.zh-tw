<Type Name="OutOfMemoryException" FullName="System.OutOfMemoryException">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="910934c01288ec01071b99b363ba0c0e473ede08" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30728552" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class OutOfMemoryException : SystemException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit OutOfMemoryException extends System.SystemException" />
  <TypeSignature Language="DocId" Value="T:System.OutOfMemoryException" />
  <TypeSignature Language="VB.NET" Value="Public Class OutOfMemoryException&#xA;Inherits SystemException" />
  <TypeSignature Language="C++ CLI" Value="public ref class OutOfMemoryException : SystemException" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Exception</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.SystemException</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>當沒有足夠的記憶體繼續執行程式時，所擲回的例外狀況。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.OutOfMemoryException>例外狀況有兩個主要的原因：  
  
-   您嘗試依序展開<xref:System.Text.StringBuilder>物件所定義的長度超過其<xref:System.Text.StringBuilder.MaxCapacity%2A?displayProperty=nameWithType>屬性。  
  
-   Common language runtime 無法配置足夠的連續記憶體成功執行作業。 可能擲回這個例外狀況，由屬性指派或方法呼叫所需的記憶體配置。 如需有關造成<xref:System.OutOfMemoryException>例外狀況，請參閱[「 記憶體不足 」 並不是指實體記憶體](http://blogs.msdn.com/b/ericlippert/archive/2009/06/08/out-of-memory-does-not-refer-to-physical-memory.aspx)。  
  
     這種類型的<xref:System.OutOfMemoryException>例外狀況表示重大錯誤。 如果您選擇要處理的例外狀況，您應該包含`catch`呼叫區塊<xref:System.Environment.FailFast%2A?displayProperty=nameWithType>終止您的應用程式和系統事件記錄檔中，加入一個項目，如下列範例會執行的方法。  
  
     [!code-csharp[System.OutOfMemoryException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.outofmemoryexception/cs/failfast1.cs#2)]
     [!code-vb[System.OutOfMemoryException#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.outofmemoryexception/vb/failfast1.vb#2)]  
  
 某些情況下擲回例外狀況，並將它消除時可採取的動作包括下列：  
  
 您要呼叫<xref:System.Text.StringBuilder.Insert%2A?displayProperty=nameWithType>方法。  
 您嘗試增加的長度<xref:System.Text.StringBuilder>物件所指定的大小超過其<xref:System.Text.StringBuilder.MaxCapacity%2A?displayProperty=nameWithType>屬性。 下列範例說明<xref:System.OutOfMemoryException>呼叫擲回例外狀況<xref:System.Text.StringBuilder.Insert%28System.Int32%2CSystem.String%2CSystem.Int32%29?displayProperty=nameWithType>方法時的範例會嘗試將會導致物件的字串插入<xref:System.Text.StringBuilder.Length%2A>超過最大容量的屬性。  
  
 [!code-csharp[System.OutOfMemoryException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.outofmemoryexception/cs/sb_example1.cs#1)]
 [!code-vb[System.OutOfMemoryException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.outofmemoryexception/vb/sb_example1.vb#1)]  
  
 您可以執行下列動作以解決錯誤：  
  
-   呼叫取代<xref:System.Text.StringBuilder.%23ctor%28System.Int32%2CSystem.Int32%29?displayProperty=nameWithType>建構函式呼叫任何其他<xref:System.Text.StringBuilder>建構函式多載。 最大容量您<xref:System.Text.StringBuilder>物件會設為其預設值，亦即<xref:System.Int32.MaxValue?displayProperty=nameWithType>。  
  
-   呼叫<xref:System.Text.StringBuilder.%23ctor%28System.Int32%2CSystem.Int32%29?displayProperty=nameWithType>具有建構函式`maxCapacity`值夠大，無法容納到任何擴充<xref:System.Text.StringBuilder>物件。  
  
 您的應用程式會以 32 位元處理序執行。  
 32 位元處理序可以配置最多 2 GB 的虛擬使用者模式在 32 位元系統上的記憶體和 4 GB 的 64 位元系統上的使用者模式虛擬記憶體。 這可以讓 common language runtime 配置足夠的連續記憶體時需要的大量配置更難。 相反地，64 位元處理序可以配置最多 8 TB 的虛擬記憶體。 若要解決這個例外狀況，重新編譯您的應用程式的 64 位元平台為目標。 以 Visual Studio 中的特定平台為目標的資訊，請參閱[How to： 設定專案的目標平台](http://msdn.microsoft.com/library/845302fc-273d-4f81-820a-7296ce91bd76)。  
  
 應用程式正在流失 unmanaged 的資源  
 雖然記憶體回收行程能夠釋放為 managed 型別配置的記憶體，但是它不會管理記憶體配置給 unmanaged 資源，例如，作業系統會處理 （包括檔案、 記憶體對應檔案、 管道、 登錄機碼，以及等候控制代碼的控制代碼）例如，直接由 Windows API 呼叫或記憶體配置函式的呼叫配置的記憶體區塊和`malloc`。 使用 unmanaged 的資源的類型會實作<xref:System.IDisposable>介面。  
  
 如果您使用的 unmanaged 的資源的類型，您應該確定呼叫其<xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>方法，當您完成使用它。 (有些型別也實作`Close`函式中都有相同的方法`Dispose`方法。)如需詳細資訊，請參閱[使用物件，實作 IDisposable](~/docs/standard/garbage-collection/using-objects.md)主題。  
  
 如果您已經建立的類型使用的 unmanaged 的資源，請確定您已實作的處置模式，然後在必要時，提供完成項。 如需詳細資訊，請參閱[Dispose 模式](~/docs/standard/design-guidelines/dispose-pattern.md)，[實作 Dispose 方法](~/docs/standard/garbage-collection/implementing-dispose.md)，和<xref:System.Object.Finalize%2A?displayProperty=nameWithType>主題。  
  
 您嘗試在 64 位元處理序中建立一個大型陣列。  
 根據預設，通用語言執行平台不允許的大小超過 2 GB 的單一物件。 若要覆寫此預設值，您可以使用組態檔設定以啟用其總大小超過 2 GB 的陣列。  
  
 您會在記憶體中使用非常大量的資料 （例如陣列、 集合或資料庫的資料集）。  
 當資料結構或存在於記憶體中的資料集變得很大，通用語言執行平台是無法配置足夠的連續記憶體，<xref:System.OutOfMemoryException>例外狀況結果。  
  
 若要避免<xref:System.OutOfMemoryException>例外狀況，您必須修改您的應用程式，使資料就越少常駐在記憶體中，或將資料分成區段需要較少的記憶體配置。 例如:   
  
-   如果您是從資料庫擷取的所有資料，然後篩選以減少往返伺服器的應用程式中，您應該修改查詢並傳回您的應用程式需要的資料子集。 當使用大型資料表時，多個查詢所需幾乎較有效率的擷取所有的單一資料表中的資料，然後處理它。  
  
-   如果您執行動態建立使用者的查詢，您應該確保查詢所傳回的記錄數目有限。  
  
-   如果您使用大型陣列或物件的其他集合的大小導致<xref:System.OutOfMemoryException>例外狀況，您應該修改您的應用程式使用的資料子集而不是使用它一次。  
  
 下列範例會取得 200 萬個浮點數的值所組成，，然後計算其平均值的陣列。 範例輸出顯示，因為此範例會儲存在記憶體中的整個陣列之前它會計算平均數，<xref:System.OutOfMemoryException>會擲回。  
  
 [!code-csharp[System.OutOfMemoryException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.outofmemoryexception/cs/data1.cs#3)]
 [!code-vb[System.OutOfMemoryException#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.outofmemoryexception/vb/data1.vb#3)]  
  
 下列範例會排除<xref:System.OutOfMemoryException>例外狀況處理內送資料，而不將整個資料集儲存在記憶體中，以允許進一步處理 （這些線條會標記為註解在範例中，必要時，序列化至檔案資料因為在此情況下它們產生的檔案，其大小大於 1 GB），並將計算的平均差和案例數傳回至呼叫常式。  
  
 [!code-csharp[System.OutOfMemoryException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.outofmemoryexception/cs/data2.cs#4)]
 [!code-vb[System.OutOfMemoryException#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.outofmemoryexception/vb/data2.vb#4)]  
  
 您重複串連大型字串。  
 字串是不可變的因為每個字串串連作業會建立新的字串。 對小型字串，或針對少數的串連作業的影響就顯得微不足道。 但對於大型的字串或非常大量的串連作業，字串串連可能導致大量的記憶體配置和記憶體分散的片段，效能不佳，且可能<xref:System.OutOfMemoryException>例外狀況。  
  
 當串連大型字串，或執行大量的串連作業，您應該使用<xref:System.Text.StringBuilder>類別而不是<xref:System.String>類別。 當您完成管理字串時，將轉換<xref:System.Text.StringBuilder>藉由呼叫為字串的執行個體<xref:System.Text.StringBuilder.ToString%2A?displayProperty=nameWithType>方法。  
  
 您在記憶體中固定大量的物件。  
 在記憶體中固定大量物件，長時間難以記憶體回收行程配置的記憶體的連續區塊。 如果您已釘選大量的物件在記憶體中，例如使用`fixed`陳述式在 C# 中，或藉由呼叫<xref:System.Runtime.InteropServices.GCHandle.Alloc%28System.Object%2CSystem.Runtime.InteropServices.GCHandleType%29?displayProperty=nameWithType>方法控制代碼類型為<xref:System.Runtime.InteropServices.GCHandleType.Pinned?displayProperty=nameWithType>，您可以執行下列命令以位址<xref:System.OutOfMemoryException>例外狀況。  
  
-   評估是否真的需要 pin，每個物件  
  
-   請確認每個物件已取消固定儘速。  
  
-   請確定每個呼叫到<xref:System.Runtime.InteropServices.GCHandle.Alloc%28System.Object%2CSystem.Runtime.InteropServices.GCHandleType%29?displayProperty=nameWithType>pin 記憶體的方法都有對應呼叫<xref:System.Runtime.InteropServices.GCHandle.Free%2A?displayProperty=nameWithType>方法來取消釘選的記憶體。  
  
 下列的 Microsoft 中繼 (MSIL) 指示擲回<xref:System.OutOfMemoryException>例外狀況：  
  
-   [box](http://msdn.microsoft.com/library/system.reflection.emit.opcodes.box.aspx)  
  
-   [newarr](http://msdn.microsoft.com/library/system.reflection.emit.opcodes.newarr.aspx)  
  
-   [newobj](http://msdn.microsoft.com/library/system.reflection.emit.opcodes.newobj.aspx)newobj  
  
 <xref:System.OutOfMemoryException> 會使用 HRESULT `COR_E_OUTOFMEMORY`，其具有 0x8007000E 的值。  
  
 如需執行個體的初始屬性值的清單<xref:System.OutOfMemoryException>，請參閱<xref:System.OutOfMemoryException.%23ctor%2A>建構函式。  
  
> [!NOTE]
>  繼承的值<xref:System.Exception.Data%2A>屬性一律會是`null`。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Exception" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.OutOfMemoryException" /> 類別的新執行個體。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OutOfMemoryException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.OutOfMemoryException.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; OutOfMemoryException();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.OutOfMemoryException" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個建構函式初始化<xref:System.Exception.Message%2A>屬性的新執行個體的系統提供的訊息描述錯誤，例如"沒有足夠的記憶體可以繼續執行程式。 」 此訊息會考量目前的系統文化特性。  
  
 下表顯示 <xref:System.OutOfMemoryException> 執行個體的初始屬性值。  
  
|屬性|值|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|`null`。|  
|<xref:System.Exception.Message%2A>|當地語系化的錯誤訊息字串。|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OutOfMemoryException (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.OutOfMemoryException.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; OutOfMemoryException(System::String ^ message);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">描述錯誤的訊息。</param>
        <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.OutOfMemoryException" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `message` 參數的內容必須能讓人了解。 這個建構函式的呼叫端必須確保這個字串已經被當地語系化 (為了目前系統的文化特性)。  
  
 下表顯示 <xref:System.OutOfMemoryException> 執行個體的初始屬性值。  
  
|屬性|值|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|null 參考 (在 Visual Basic 中為 `Nothing`)。|  
|<xref:System.Exception.Message%2A>|錯誤訊息字串。|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected OutOfMemoryException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.OutOfMemoryException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; OutOfMemoryException(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">存放序列物件資料的物件。</param>
        <param name="context">關於來源或目的端的內容資訊。</param>
        <summary>使用序列化資料，初始化 <see cref="T:System.OutOfMemoryException" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 進行還原序列化 (Deserialization) 期間會呼叫這個建構函式，以便重新構成經由資料流傳送的例外狀況物件。 如需詳細資訊，請參閱[XML 和 SOAP 序列化](~/docs/standard/serialization/xml-and-soap-serialization.md)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OutOfMemoryException (string message, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.OutOfMemoryException.#ctor(System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String, innerException As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; OutOfMemoryException(System::String ^ message, Exception ^ innerException);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="message">解釋例外狀況原因的錯誤訊息。</param>
        <param name="innerException">做為目前例外狀況發生原因的例外狀況。 如果 <c>innerException</c> 參數不是 Null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)，則會在處理內部例外狀況的 <see langword="catch" /> 區塊中引發目前的例外狀況。</param>
        <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.OutOfMemoryException" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 直接因為前一個例外狀況而擲回的例外狀況可能包含對 <xref:System.Exception.InnerException%2A> 屬性中前一個例外狀況的參考。 <xref:System.Exception.InnerException%2A> 屬性會傳回與傳入建構函式中相同的值；如果 `Nothing` 屬性不提供內部例外值給建構函式，則傳回 null 參考 (在 Visual Basic 中為 <xref:System.Exception.InnerException%2A>)。  
  
 下表顯示 <xref:System.OutOfMemoryException> 執行個體的初始屬性值。  
  
|屬性|值|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|內部例外狀況參考。|  
|<xref:System.Exception.Message%2A>|錯誤訊息字串。|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Exception" />
      </Docs>
    </Member>
  </Members>
</Type>