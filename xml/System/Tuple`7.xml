<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Tuple`7.xml" source-language="en-US" target-language="zh-TW">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5ff8c3596f37b00620da99feabf785f0647be74b2.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ff8c3596f37b00620da99feabf785f0647be74b2</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`7">
          <source>The type of the tuple's first component.</source>
          <target state="translated">Tuple 第 1 個元件的型別。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`7">
          <source>The type of the tuple's second component.</source>
          <target state="translated">Tuple 第 2 個元件的型別。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`7">
          <source>The type of the tuple's third component.</source>
          <target state="translated">Tuple 第 3 個元件的型別。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`7">
          <source>The type of the tuple's fourth component.</source>
          <target state="translated">Tuple 第 4 個元件的型別。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`7">
          <source>The type of the tuple's fifth component.</source>
          <target state="translated">Tuple 第 5 個元件的型別。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`7">
          <source>The type of the tuple's sixth component.</source>
          <target state="translated">Tuple 第 6 個元件的型別。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`7">
          <source>The type of the tuple's seventh component.</source>
          <target state="translated">Tuple 第 7 個元件的型別。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="T:System.Tuple`7">
          <source>Represents a 7-tuple, or septuple.</source>
          <target state="translated">代表 7-Tuple 或七重物件。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`7">
          <source>A tuple is a data structure that has a specific number and sequence of values.</source>
          <target state="translated">Tuple 是具有特定數量和值序列的資料結構。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`7">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> class represents a 7-tuple, or septuple, which is a tuple that has seven components.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph>類別代表 7-tuple 或 7-tuple，也就是 tuple，其中擁有七個元件。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`7">
          <source>You can instantiate a <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> object by calling either the <ph id="ph2">&lt;xref:System.Tuple%607.%23ctor%2A&gt;</ph> or the static <ph id="ph3">&lt;xref:System.Tuple.Create%60%607%28%60%600%2C%60%601%2C%60%602%2C%60%603%2C%60%604%2C%60%605%2C%60%606%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">您可以具現化<ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph>藉由呼叫物件<ph id="ph2">&lt;xref:System.Tuple%607.%23ctor%2A&gt;</ph>或靜態<ph id="ph3">&lt;xref:System.Tuple.Create%60%607%28%60%600%2C%60%601%2C%60%602%2C%60%603%2C%60%604%2C%60%605%2C%60%606%29?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`7">
          <source>You can retrieve the value of the tuple's components by using the read-only <ph id="ph1">&lt;xref:System.Tuple%607.Item1%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Tuple%607.Item2%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Tuple%607.Item3%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Tuple%607.Item4%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Tuple%607.Item5%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Tuple%607.Item6%2A&gt;</ph>, and <ph id="ph7">&lt;xref:System.Tuple%607.Item7%2A&gt;</ph> instance properties.</source>
          <target state="translated">您可以擷取值的 tuple 的元件所使用的唯讀<ph id="ph1">&lt;xref:System.Tuple%607.Item1%2A&gt;</ph>， <ph id="ph2">&lt;xref:System.Tuple%607.Item2%2A&gt;</ph>， <ph id="ph3">&lt;xref:System.Tuple%607.Item3%2A&gt;</ph>， <ph id="ph4">&lt;xref:System.Tuple%607.Item4%2A&gt;</ph>， <ph id="ph5">&lt;xref:System.Tuple%607.Item5%2A&gt;</ph>， <ph id="ph6">&lt;xref:System.Tuple%607.Item6%2A&gt;</ph>，和<ph id="ph7">&lt;xref:System.Tuple%607.Item7%2A&gt;</ph>執行個體屬性。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`7">
          <source>Tuples are commonly used in four different ways:</source>
          <target state="translated">Tuple 常用於四種不同方式：</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`7">
          <source>To represent a single set of data.</source>
          <target state="translated">代表單一的資料集。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`7">
          <source>For example, a tuple can represent a database record, and its components can represent individual fields of the record.</source>
          <target state="translated">比方說，tuple 可以代表資料庫記錄，而其元件可以表示個別欄位的記錄。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`7">
          <source>To provide easy access to, and manipulation of, a data set.</source>
          <target state="translated">提供讓您輕鬆存取、 和操作的資料集。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`7">
          <source>The following example defines a <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> object that contains population data for New York City for each census from 1950 through 2000.</source>
          <target state="translated">下列範例會定義<ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph>物件，其中包含每個人口普查 1950 到 2000 New York City 的母體擴展資料。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`7">
          <source>The septuple is passed to the <ph id="ph1">`ComputePopulationChange`</ph> method, which calculates the annual rate of change between censuses, as well as the annual rate of change for the entire 60 year period.</source>
          <target state="translated">7-tuple 傳遞至<ph id="ph1">`ComputePopulationChange`</ph>方法，它會計算每年之間 censuses，以及每年 60 整年的期間內的變動率的變更率。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`7">
          <source>To return multiple values from a method without the use of <ph id="ph1">`out`</ph> parameters (in C#) or <ph id="ph2">`ByRef`</ph> parameters (in Visual Basic).</source>
          <target state="translated">若要傳回多個值的方法，而不會使用從<ph id="ph1">`out`</ph>參數 （在 C#) 或<ph id="ph2">`ByRef`</ph>參數 （在 Visual Basic)。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`7">
          <source>For example, the previous example returns its computed statistics, along with the city name, in a <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> object.</source>
          <target state="translated">例如前, 一個範例會傳回其計算的統計資料，以及縣 （市） 名稱中,<ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph>物件。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`7">
          <source>To pass multiple values to a method through a single parameter.</source>
          <target state="translated">若要將多個值傳遞至方法，以透過單一參數。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`7">
          <source>For example, the <ph id="ph1">&lt;xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType&gt;</ph> method has a single parameter that lets you supply one value to the method that the thread executes at startup.</source>
          <target state="translated">例如，<ph id="ph1">&lt;xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType&gt;</ph>方法具有單一參數，可讓您提供一個執行緒啟動時執行之方法的值。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`7">
          <source>If you supply a <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> object as the method argument, you can supply the thread’s startup routine with seven items of data.</source>
          <target state="translated">如果您提供<ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph>物件做為方法引數中，您可以提供在執行緒啟動常式與資料的七個項目。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.#ctor(`0,`1,`2,`3,`4,`5,`6)">
          <source>The value of the tuple's first component.</source>
          <target state="translated">Tuple 第 1 個元件的值。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.#ctor(`0,`1,`2,`3,`4,`5,`6)">
          <source>The value of the tuple's second component.</source>
          <target state="translated">Tuple 第 2 個元件的值。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.#ctor(`0,`1,`2,`3,`4,`5,`6)">
          <source>The value of the tuple's third component.</source>
          <target state="translated">Tuple 第 3 個元件的值。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.#ctor(`0,`1,`2,`3,`4,`5,`6)">
          <source>The value of the tuple's fourth component</source>
          <target state="translated">Tuple 第 4 個元件的值。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.#ctor(`0,`1,`2,`3,`4,`5,`6)">
          <source>The value of the tuple's fifth component.</source>
          <target state="translated">Tuple 第 5 個元件的值。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.#ctor(`0,`1,`2,`3,`4,`5,`6)">
          <source>The value of the tuple's sixth component.</source>
          <target state="translated">Tuple 第 6 個元件的值。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.#ctor(`0,`1,`2,`3,`4,`5,`6)">
          <source>The value of the tuple's seventh component.</source>
          <target state="translated">Tuple 第 7 個元件的值。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.#ctor(`0,`1,`2,`3,`4,`5,`6)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.#ctor(`0,`1,`2,`3,`4,`5,`6)">
          <source>You can use the static <ph id="ph1">&lt;xref:System.Tuple.Create%60%607%28%60%600%2C%60%601%2C%60%602%2C%60%603%2C%60%604%2C%60%605%2C%60%606%29?displayProperty=nameWithType&gt;</ph> method to instantiate a 7-tuple object without having to explicitly specify the types of its components.</source>
          <target state="translated">您可以使用靜態<ph id="ph1">&lt;xref:System.Tuple.Create%60%607%28%60%600%2C%60%601%2C%60%602%2C%60%603%2C%60%604%2C%60%605%2C%60%606%29?displayProperty=nameWithType&gt;</ph>方法，而不需要明確指定其元件的類型執行個體化 7 tuple 物件。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.#ctor(`0,`1,`2,`3,`4,`5,`6)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Tuple.Create%60%607%28%60%600%2C%60%601%2C%60%602%2C%60%603%2C%60%604%2C%60%605%2C%60%606%29?displayProperty=nameWithType&gt;</ph> method to instantiate a 7-tuple whose first component is of type <ph id="ph2">&lt;xref:System.String&gt;</ph> and whose remaining components are of type <ph id="ph3">&lt;xref:System.Int32&gt;</ph>.</source>
          <target state="translated">下列範例會使用<ph id="ph1">&lt;xref:System.Tuple.Create%60%607%28%60%600%2C%60%601%2C%60%602%2C%60%603%2C%60%604%2C%60%605%2C%60%606%29?displayProperty=nameWithType&gt;</ph>方法來具現化其第一個元件是類型的 7 個 tuple <ph id="ph2">&lt;xref:System.String&gt;</ph> ，而且其剩餘的元件類型的<ph id="ph3">&lt;xref:System.Int32&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.#ctor(`0,`1,`2,`3,`4,`5,`6)">
          <source>This is equivalent to the following call to the <ph id="ph1">&lt;xref:System.Tuple%607.%23ctor%2A&gt;</ph> class constructor.</source>
          <target state="translated">這相當於下列呼叫<ph id="ph1">&lt;xref:System.Tuple%607.%23ctor%2A&gt;</ph>類別建構函式。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.Equals(System.Object)">
          <source>The object to compare with this instance.</source>
          <target state="translated">與這個執行個體相互比較的物件。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.Equals(System.Object)">
          <source>Returns a value that indicates whether the current <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> object is equal to a specified object.</source>
          <target state="translated">傳回值，這個值表示目前的 <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> 物件是否等於指定的物件。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current instance is equal to the specified object; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果目前的執行個體和指定的物件相等，則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.Equals(System.Object)">
          <source>The <ph id="ph1">`obj`</ph> parameter is considered to be equal to the current instance under the following conditions:</source>
          <target state="translated"><ph id="ph1">`obj`</ph>參數會被視為等於目前的執行個體，在下列情況下：</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.Equals(System.Object)">
          <source>It is a <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> object.</source>
          <target state="translated">它是<ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph>物件。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.Equals(System.Object)">
          <source>Its seven components are of the same types as the current instance.</source>
          <target state="translated">七個元件是與目前的執行個體相同的類型。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.Equals(System.Object)">
          <source>Its seven components are equal to those of the current instance.</source>
          <target state="translated">七個元件的目前執行個體相等。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.Equals(System.Object)">
          <source>Equality is determined by the default object equality comparer for each component.</source>
          <target state="translated">是否相等由每個元件的預設物件相等比較子決定。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.Equals(System.Object)">
          <source>The following example defines an array of sextuples that contain population data for Los Angeles and New York from 1950 to 2000.</source>
          <target state="translated">下列範例會定義包含母體擴展中的資料為 Los Angeles 和紐約 1950年到 2000年的 sextuples 的陣列。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.Equals(System.Object)">
          <source>The first component of each septuple identifies the city.</source>
          <target state="translated">第一個元件的每個 7-tuple 識別縣 （市）。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.Equals(System.Object)">
          <source>The first, third, and fourth septuples contain data for New York.</source>
          <target state="translated">第一、 三和第四個 septuples 包含紐約的資料。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.Equals(System.Object)">
          <source>The first septuple is a duplicate of the fourth septuple.</source>
          <target state="translated">第一個 7-tuple 是的第四個 7-tuple 複本。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.Equals(System.Object)">
          <source>The third septuple identifies the city as "New York City" instead of "New York".</source>
          <target state="translated">第三個 7-tuple 識別為"New York City"而不是"New York"縣 （市）。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.Equals(System.Object)">
          <source>As the example shows, only the fourth septuple is equal to the first septuple.</source>
          <target state="translated">如範例所示，只有第四個 7-tuple 是等於第一個 7-tuple。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.GetHashCode">
          <source>Returns the hash code for the current <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> object.</source>
          <target state="translated">傳回目前 <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> 物件的雜湊碼。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.GetHashCode">
          <source>A 32-bit signed integer hash code.</source>
          <target state="translated">32 位元帶正負號的整數雜湊碼。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="P:System.Tuple`7.Item1">
          <source>Gets the value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> object's first component.</source>
          <target state="translated">取得目前 <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> 物件之第一個元件的值。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item1">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> object's first component.</source>
          <target state="translated">目前 <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> 物件之第一個元件的值。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item1">
          <source>You can dynamically determine the type of the <ph id="ph1">&lt;xref:System.Tuple%607.Item1%2A&gt;</ph> component in one of two ways:</source>
          <target state="translated">您可以動態決定的型別<ph id="ph1">&lt;xref:System.Tuple%607.Item1%2A&gt;</ph>元件中有兩種：</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item1">
          <source>By calling the <ph id="ph1">`GetType`</ph> method on the value that is returned by the <ph id="ph2">&lt;xref:System.Tuple%607.Item1%2A&gt;</ph> property.</source>
          <target state="translated">藉由呼叫<ph id="ph1">`GetType`</ph>方法所傳回的值<ph id="ph2">&lt;xref:System.Tuple%607.Item1%2A&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item1">
          <source>By retrieving the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the <ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph> object, and retrieving the first element from the array that is returned by its <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">藉由擷取<ph id="ph1">&lt;xref:System.Type&gt;</ph>物件，代表<ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph>物件，並擷取第一個項目所傳回的陣列從其<ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item1">
          <source>The following example defines an array of <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> objects whose components contain population data for three U.S. cities (New York, Chicago, and Los Angeles) from 1950 through 2000.</source>
          <target state="translated">下列範例會定義陣列<ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph>元件到 2000年 1950 包含三個美國城市 （「 紐約 」、 「 芝加哥和 「 洛杉磯 」） 的母體擴展資料物件。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item1">
          <source>It then displays a table that lists the data.</source>
          <target state="translated">然後，它會顯示一份列出的資料。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item1">
          <source>To display the city name, it retrieves the value of the <ph id="ph1">&lt;xref:System.Tuple%607.Item1%2A&gt;</ph> property for each <ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph> object.</source>
          <target state="translated">若要顯示的縣 （市） 名稱，它會擷取的值<ph id="ph1">&lt;xref:System.Tuple%607.Item1%2A&gt;</ph>每個屬性<ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph>物件。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="P:System.Tuple`7.Item2">
          <source>Gets the value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> object's second component.</source>
          <target state="translated">取得目前 <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> 物件之第二個元件的值。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item2">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> object's second component.</source>
          <target state="translated">目前 <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> 物件之第二個元件的值。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item2">
          <source>You can dynamically determine the type of the <ph id="ph1">&lt;xref:System.Tuple%607.Item2%2A&gt;</ph> component in one of two ways:</source>
          <target state="translated">您可以動態決定的型別<ph id="ph1">&lt;xref:System.Tuple%607.Item2%2A&gt;</ph>元件中有兩種：</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item2">
          <source>By calling the <ph id="ph1">`GetType`</ph> method on the value that is returned by the <ph id="ph2">&lt;xref:System.Tuple%607.Item2%2A&gt;</ph> property.</source>
          <target state="translated">藉由呼叫<ph id="ph1">`GetType`</ph>方法所傳回的值<ph id="ph2">&lt;xref:System.Tuple%607.Item2%2A&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item2">
          <source>By retrieving the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the <ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph> object, and retrieving the second element from the array that is returned by its <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">藉由擷取<ph id="ph1">&lt;xref:System.Type&gt;</ph>物件，代表<ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph>物件，並擷取第二個元素所傳回的陣列從其<ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item2">
          <source>The following example defines an array of <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> objects whose components contain population data for three U.S. cities (New York, Chicago, and Los Angeles) from 1950 through 2000.</source>
          <target state="translated">下列範例會定義陣列<ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph>元件到 2000年 1950 包含三個美國城市 （「 紐約 」、 「 芝加哥和 「 洛杉磯 」） 的母體擴展資料物件。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item2">
          <source>It then displays a table that lists the data.</source>
          <target state="translated">然後，它會顯示一份列出的資料。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item2">
          <source>To display the population in 1950, it retrieves the value of the <ph id="ph1">&lt;xref:System.Tuple%607.Item2%2A&gt;</ph> property for each <ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph> object.</source>
          <target state="translated">若要顯示在 1950年母體擴展，它會擷取的值<ph id="ph1">&lt;xref:System.Tuple%607.Item2%2A&gt;</ph>每個屬性<ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph>物件。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="P:System.Tuple`7.Item3">
          <source>Gets the value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> object's third component.</source>
          <target state="translated">取得目前 <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> 物件之第三個元件的值。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item3">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> object's third component.</source>
          <target state="translated">目前 <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> 物件之第三個元件的值。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item3">
          <source>You can dynamically determine the type of the <ph id="ph1">&lt;xref:System.Tuple%607.Item3%2A&gt;</ph> component in one of two ways:</source>
          <target state="translated">您可以動態決定的型別<ph id="ph1">&lt;xref:System.Tuple%607.Item3%2A&gt;</ph>元件中有兩種：</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item3">
          <source>By calling the <ph id="ph1">`GetType`</ph> method on the value that is returned by the <ph id="ph2">&lt;xref:System.Tuple%607.Item3%2A&gt;</ph> property.</source>
          <target state="translated">藉由呼叫<ph id="ph1">`GetType`</ph>方法所傳回的值<ph id="ph2">&lt;xref:System.Tuple%607.Item3%2A&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item3">
          <source>By retrieving the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the <ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph> object, and retrieving the third element from the array that is returned by its <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">藉由擷取<ph id="ph1">&lt;xref:System.Type&gt;</ph>物件，代表<ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph>物件，並擷取第三個元素所傳回的陣列從其<ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item3">
          <source>The following example defines an array of <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> objects whose components contain population data for three U.S. cities (New York, Chicago, and Los Angeles) from 1950 through 2000.</source>
          <target state="translated">下列範例會定義陣列<ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph>元件到 2000年 1950 包含三個美國城市 （「 紐約 」、 「 芝加哥和 「 洛杉磯 」） 的母體擴展資料物件。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item3">
          <source>It then displays a table that lists the data.</source>
          <target state="translated">然後，它會顯示一份列出的資料。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item3">
          <source>To display the population in 1960, it retrieves the value of the <ph id="ph1">&lt;xref:System.Tuple%607.Item3%2A&gt;</ph> property for each <ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph> object.</source>
          <target state="translated">若要顯示在 1960年母體擴展，它會擷取的值<ph id="ph1">&lt;xref:System.Tuple%607.Item3%2A&gt;</ph>每個屬性<ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph>物件。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="P:System.Tuple`7.Item4">
          <source>Gets the value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> object's fourth component.</source>
          <target state="translated">取得目前 <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> 物件之第四個元件的值。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item4">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> object's fourth component.</source>
          <target state="translated">目前 <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> 物件之第四個元件的值。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item4">
          <source>You can dynamically determine the type of the <ph id="ph1">&lt;xref:System.Tuple%607.Item4%2A&gt;</ph> component in one of two ways:</source>
          <target state="translated">您可以動態決定的型別<ph id="ph1">&lt;xref:System.Tuple%607.Item4%2A&gt;</ph>元件中有兩種：</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item4">
          <source>By calling the <ph id="ph1">`GetType`</ph> method on the value that is returned by the <ph id="ph2">&lt;xref:System.Tuple%607.Item4%2A&gt;</ph> property.</source>
          <target state="translated">藉由呼叫<ph id="ph1">`GetType`</ph>方法所傳回的值<ph id="ph2">&lt;xref:System.Tuple%607.Item4%2A&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item4">
          <source>By retrieving the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the <ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph> object, and retrieving the fourth element from the array that is returned by its <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">藉由擷取<ph id="ph1">&lt;xref:System.Type&gt;</ph>物件，代表<ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph>物件，並傳回陣列中擷取的第四個項目及其<ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item4">
          <source>The following example defines an array of <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> objects whose components contain population data for three U.S. cities (New York, Chicago, and Los Angeles) from 1950 through 2000.</source>
          <target state="translated">下列範例會定義陣列<ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph>元件到 2000年 1950 包含三個美國城市 （「 紐約 」、 「 芝加哥和 「 洛杉磯 」） 的母體擴展資料物件。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item4">
          <source>It then displays a table that lists the data.</source>
          <target state="translated">然後，它會顯示一份列出的資料。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item4">
          <source>To display the population in 1970, it retrieves the value of the <ph id="ph1">&lt;xref:System.Tuple%607.Item4%2A&gt;</ph> property for each <ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph> object.</source>
          <target state="translated">若要顯示在 1970年母體擴展，它會擷取的值<ph id="ph1">&lt;xref:System.Tuple%607.Item4%2A&gt;</ph>每個屬性<ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph>物件。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="P:System.Tuple`7.Item5">
          <source>Gets the value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> object's fifth component.</source>
          <target state="translated">取得目前 <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> 物件之第五個元件的值。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item5">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> object's fifth component.</source>
          <target state="translated">目前 <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> 物件之第五個元件的值。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item5">
          <source>You can dynamically determine the type of the <ph id="ph1">&lt;xref:System.Tuple%607.Item5%2A&gt;</ph> component in one of two ways:</source>
          <target state="translated">您可以動態決定的型別<ph id="ph1">&lt;xref:System.Tuple%607.Item5%2A&gt;</ph>元件中有兩種：</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item5">
          <source>By calling the <ph id="ph1">`GetType`</ph> method on the value that is returned by the <ph id="ph2">&lt;xref:System.Tuple%607.Item5%2A&gt;</ph> property.</source>
          <target state="translated">藉由呼叫<ph id="ph1">`GetType`</ph>方法所傳回的值<ph id="ph2">&lt;xref:System.Tuple%607.Item5%2A&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item5">
          <source>By retrieving the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the <ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph> object, and retrieving the fifth element from the array that is returned by its <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">藉由擷取<ph id="ph1">&lt;xref:System.Type&gt;</ph>物件，代表<ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph>物件，並擷取的第五個項目所傳回的陣列從其<ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item5">
          <source>The following example defines an array of <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> objects whose components contain population data for three U.S. cities (New York, Chicago, and Los Angeles) from 1950 through 2000.</source>
          <target state="translated">下列範例會定義陣列<ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph>元件到 2000年 1950 包含三個美國城市 （「 紐約 」、 「 芝加哥和 「 洛杉磯 」） 的母體擴展資料物件。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item5">
          <source>It then displays a table that lists the data.</source>
          <target state="translated">然後，它會顯示一份列出的資料。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item5">
          <source>To display the population in 1980, it retrieves the value of the <ph id="ph1">&lt;xref:System.Tuple%607.Item5%2A&gt;</ph> property for each <ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph> object.</source>
          <target state="translated">若要顯示在 1980年母體擴展，它會擷取的值<ph id="ph1">&lt;xref:System.Tuple%607.Item5%2A&gt;</ph>每個屬性<ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph>物件。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="P:System.Tuple`7.Item6">
          <source>Gets the value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> object's sixth component.</source>
          <target state="translated">取得目前 <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> 物件之第六個元件的值。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item6">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> object's sixth component.</source>
          <target state="translated">目前 <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> 物件之第六個元件的值。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item6">
          <source>You can dynamically determine the type of the <ph id="ph1">&lt;xref:System.Tuple%607.Item6%2A&gt;</ph> component in one of two ways:</source>
          <target state="translated">您可以動態決定的型別<ph id="ph1">&lt;xref:System.Tuple%607.Item6%2A&gt;</ph>元件中有兩種：</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item6">
          <source>By calling the <ph id="ph1">`GetType`</ph> method on the value that is returned by the <ph id="ph2">&lt;xref:System.Tuple%607.Item6%2A&gt;</ph> property.</source>
          <target state="translated">藉由呼叫<ph id="ph1">`GetType`</ph>方法所傳回的值<ph id="ph2">&lt;xref:System.Tuple%607.Item6%2A&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item6">
          <source>By retrieving the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the <ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph> object, and retrieving the sixth element from the array that is returned by its <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">藉由擷取<ph id="ph1">&lt;xref:System.Type&gt;</ph>物件，代表<ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph>物件，並擷取的第六個項目所傳回的陣列從其<ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item6">
          <source>The following example defines an array of <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> objects whose components contain population data for three U.S. cities (New York, Chicago, and Los Angeles) from 1950 through 2000.</source>
          <target state="translated">下列範例會定義陣列<ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph>元件到 2000年 1950 包含三個美國城市 （「 紐約 」、 「 芝加哥和 「 洛杉磯 」） 的母體擴展資料物件。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item6">
          <source>It then displays a table that lists the data.</source>
          <target state="translated">然後，它會顯示一份列出的資料。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item6">
          <source>To display the population in 1990, it retrieves the value of the <ph id="ph1">&lt;xref:System.Tuple%607.Item6%2A&gt;</ph> property for each <ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph> object.</source>
          <target state="translated">若要顯示在 1990年母體擴展，它會擷取的值<ph id="ph1">&lt;xref:System.Tuple%607.Item6%2A&gt;</ph>每個屬性<ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph>物件。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="P:System.Tuple`7.Item7">
          <source>Gets the value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> object's seventh component.</source>
          <target state="translated">取得目前 <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> 物件之第七個元件的值。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item7">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> object's seventh component.</source>
          <target state="translated">目前 <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> 物件之第七個元件的值。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item7">
          <source>You can dynamically determine the type of the <ph id="ph1">&lt;xref:System.Tuple%607.Item7%2A&gt;</ph> component in one of two ways:</source>
          <target state="translated">您可以動態決定的型別<ph id="ph1">&lt;xref:System.Tuple%607.Item7%2A&gt;</ph>元件中有兩種：</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item7">
          <source>By calling the <ph id="ph1">`GetType`</ph> method on the value that is returned by the <ph id="ph2">&lt;xref:System.Tuple%607.Item7%2A&gt;</ph> property.</source>
          <target state="translated">藉由呼叫<ph id="ph1">`GetType`</ph>方法所傳回的值<ph id="ph2">&lt;xref:System.Tuple%607.Item7%2A&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item7">
          <source>By retrieving the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the <ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph> object, and retrieving the seventh element from the array that is returned by its <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">藉由擷取<ph id="ph1">&lt;xref:System.Type&gt;</ph>物件，代表<ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph>物件，並擷取第七個項目所傳回的陣列從其<ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item7">
          <source>The following example defines an array of <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> objects whose components contain population data for three U.S. cities (New York, Chicago, and Los Angeles) from 1950 through 2000.</source>
          <target state="translated">下列範例會定義陣列<ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph>元件到 2000年 1950 包含三個美國城市 （「 紐約 」、 「 芝加哥和 「 洛杉磯 」） 的母體擴展資料物件。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item7">
          <source>It then displays a table that lists the data.</source>
          <target state="translated">然後，它會顯示一份列出的資料。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item7">
          <source>To display the population in 2000, it retrieves the value of the <ph id="ph1">&lt;xref:System.Tuple%607.Item7%2A&gt;</ph> property for each <ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph> object.</source>
          <target state="translated">若要顯示在 2000年中的母體擴展，它會擷取的值<ph id="ph1">&lt;xref:System.Tuple%607.Item7%2A&gt;</ph>每個屬性<ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph>物件。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>An object to compare with the current instance.</source>
          <target state="translated">要與目前執行個體比較的物件。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>An object that provides custom rules for comparison.</source>
          <target state="translated">提供自訂規則進行比較的物件。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>Compares the current <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> object to a specified object by using a specified comparer, and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</source>
          <target state="translated">使用指定的比較子將目前的 <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> 物件和指定的物件進行比較，並且傳回一個整數，表示目前的物件在排序順序中位於指定之物件的前面、後面還是相的位置。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>A signed integer that indicates the relative position of this instance and <ph id="ph1">&lt;paramref name="other" /&gt;</ph> in the sort order, as shown in the following table.</source>
          <target state="translated">帶正負號的整數，可指出此執行個體以及排序次序中 <ph id="ph1">&lt;paramref name="other" /&gt;</ph> 的相對位置，如下表所示。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Value</source>
          <target state="translated"><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> 值</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Description</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 描述</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> A negative integer</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 負整數</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance precedes <ph id="ph3">&lt;paramref name="other" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph>這個執行個體位於 <ph id="ph3">&lt;paramref name="other" /&gt;</ph> 之前。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 零</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance and <ph id="ph3">&lt;paramref name="other" /&gt;</ph> have the same position in the sort order.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph>這個執行個體和 <ph id="ph3">&lt;paramref name="other" /&gt;</ph> 的排序位置相同。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> A positive integer</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph>正整數</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance follows <ph id="ph3">&lt;paramref name="other" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph>這個執行個體位於 <ph id="ph3">&lt;paramref name="other" /&gt;</ph> 之後。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>This member is an explicit interface implementation.</source>
          <target state="translated">這個成員是明確介面實作。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Collections.IStructuralComparable&gt;</ph> interface.</source>
          <target state="translated">只有在 <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> 執行個體轉換成 <ph id="ph2">&lt;xref:System.Collections.IStructuralComparable&gt;</ph> 介面時，才能使用這個成員。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>This method lets you define customized comparisons of <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> objects.</source>
          <target state="translated">這個方法可讓您定義的自訂的比較<ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph>物件。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>For example, you can use this method to order <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> objects based on the value of a specific component.</source>
          <target state="translated">例如，您可以使用這個方法，以順序<ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph>物件為基礎的特定元件的值。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>Although this method can be called directly, it is most commonly called by collection-sorting methods that include <ph id="ph1">&lt;xref:System.Collections.IComparer&gt;</ph> parameters to order the members of a collection.</source>
          <target state="translated">雖然可以直接呼叫這個方法，它會最常呼叫集合排序方法，包含了<ph id="ph1">&lt;xref:System.Collections.IComparer&gt;</ph>參數來排序集合的成員。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>For example, it is called by the <ph id="ph1">&lt;xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph2">&lt;xref:System.Collections.SortedList.Add%2A&gt;</ph> method of a <ph id="ph3">&lt;xref:System.Collections.SortedList&gt;</ph> object that is instantiated by using the <ph id="ph4">&lt;xref:System.Collections.SortedList.%23ctor%28System.Collections.IComparer%29?displayProperty=nameWithType&gt;</ph> constructor.</source>
          <target state="translated">例如，由呼叫<ph id="ph1">&lt;xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph2">&lt;xref:System.Collections.SortedList.Add%2A&gt;</ph>方法<ph id="ph3">&lt;xref:System.Collections.SortedList&gt;</ph>具現化所使用的物件<ph id="ph4">&lt;xref:System.Collections.SortedList.%23ctor%28System.Collections.IComparer%29?displayProperty=nameWithType&gt;</ph>建構函式。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%607.System%23Collections%23IStructuralComparable%23CompareTo%2A&gt;</ph> method is intended for use in sorting operations.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Tuple%607.System%23Collections%23IStructuralComparable%23CompareTo%2A&gt;</ph>方法僅供用於排序作業。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>It should not be used when the primary purpose of a comparison is to determine whether two objects are equal.</source>
          <target state="translated">此外，它不應該使用時比較的主要目的是要判斷兩個物件是否相等。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>To determine whether two objects are equal, call the <ph id="ph1">&lt;xref:System.Tuple%607.System%23Collections%23IStructuralEquatable%23Equals%2A&gt;</ph> method.</source>
          <target state="translated">若要判斷兩個物件是否相等，請呼叫<ph id="ph1">&lt;xref:System.Tuple%607.System%23Collections%23IStructuralEquatable%23Equals%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>The following example creates an array of <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> objects that contains population data for three U.S. cities from 1950 to 2000.</source>
          <target state="translated">下列範例會建立的陣列<ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph>包含三個美國城市 1950 到 2000年的母體擴展資料的物件。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>The septuple's first component is the city name.</source>
          <target state="translated">7-tuple 的第一個元件是城市名稱。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>The remaining five components represent the population at 10-year intervals from 1950 to 2000.</source>
          <target state="translated">其餘的五個元件 2000年 1950 代表母體擴展在 10 年的時間間隔。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>The <ph id="ph1">`PopulationComparer`</ph> class provides an <ph id="ph2">&lt;xref:System.Collections.IComparer&gt;</ph> implementation that allows the array of septuples to be sorted by any one of its components.</source>
          <target state="translated"><ph id="ph1">`PopulationComparer`</ph>類別提供<ph id="ph2">&lt;xref:System.Collections.IComparer&gt;</ph>septuples 排序任何一種及其元件的實作，可讓陣列。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>Two values are provided to the <ph id="ph1">`PopulationComparer`</ph> class in its constructor: The position of the component that defines the sort order, and a <ph id="ph2">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the tuple objects should be sorted in ascending or descending order.</source>
          <target state="translated">兩個值提供給<ph id="ph1">`PopulationComparer`</ph>其建構函式中的類別： 定義排序次序中，元件的位置和<ph id="ph2">&lt;xref:System.Boolean&gt;</ph>值，指出是否應該以遞增或遞減順序排序的 tuple 物件。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>The example then displays the elements in the array in unsorted order, sorts them by the third component (the population in 1960) and displays them, and then sorts them by the sixth component (the population in 1990) and displays them.</source>
          <target state="translated">此範例會顯示未排序的順序陣列中的項目、 依第三個元件 （1960年中母體擴展） 和顯示它們，並再依第六個元件 （1990年中母體擴展） 並加以顯示。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;paramref name="other" /&gt;</ph> is not a <ph id="ph2">&lt;see cref="T:System.Tuple`7" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="other" /&gt;</ph> 不是 <ph id="ph2">&lt;see cref="T:System.Tuple`7" /&gt;</ph> 物件。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>The object to compare with this instance.</source>
          <target state="translated">與這個執行個體相互比較的物件。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>An object that defines the method to use to evaluate whether the two objects are equal.</source>
          <target state="translated">物件，定義要用來評估這兩個物件是否相等的方法。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>Returns a value that indicates whether the current <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> object is equal to a specified object based on a specified comparison method.</source>
          <target state="translated">傳回值，這個值表示依據指定的比較方法，目前的 <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> 物件是否等於指定的物件。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current instance is equal to the specified object; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果目前的執行個體和指定的物件相等，則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">這個成員是明確介面成員實作，</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Collections.IStructuralEquatable&gt;</ph> interface.</source>
          <target state="translated">只有在 <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> 執行個體轉換成 <ph id="ph2">&lt;xref:System.Collections.IStructuralEquatable&gt;</ph> 介面時，才能使用這個成員。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType&gt;</ph> implementation is called only if other is not <ph id="ph2">`null`</ph>, and if it can be successfully cast (in C#) or converted (in Visual Basic) to a <ph id="ph3">&lt;xref:System.Tuple%607&gt;</ph> object whose components are of the same types as the current instance.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType&gt;</ph>只有其他不是呼叫實作<ph id="ph2">`null`</ph>，而且如果它可以是成功轉換 （C# 中） 或 （在 Visual Basic) 轉換成<ph id="ph3">&lt;xref:System.Tuple%607&gt;</ph>其元件是相同的類型與目前的執行個體的物件。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%607.System%23Collections%23IStructuralEquatable%23Equals%28System.Object%2CSystem.Collections.IEqualityComparer%29&gt;</ph> method first passes the <ph id="ph2">&lt;xref:System.Tuple%607.Item1%2A&gt;</ph> values of the <ph id="ph3">&lt;xref:System.Tuple%607&gt;</ph> objects to be compared to the <ph id="ph4">&lt;xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType&gt;</ph> implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Tuple%607.System%23Collections%23IStructuralEquatable%23Equals%28System.Object%2CSystem.Collections.IEqualityComparer%29&gt;</ph>方法的第一個階段<ph id="ph2">&lt;xref:System.Tuple%607.Item1%2A&gt;</ph>值<ph id="ph3">&lt;xref:System.Tuple%607&gt;</ph>要比較的物件<ph id="ph4">&lt;xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType&gt;</ph>實作。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>If this method call returns <ph id="ph1">`true`</ph>, the method is called again and passed the <ph id="ph2">&lt;xref:System.Tuple%607.Item2%2A&gt;</ph> values of the two <ph id="ph3">&lt;xref:System.Tuple%607&gt;</ph> objects.</source>
          <target state="translated">如果這個方法呼叫傳回<ph id="ph1">`true`</ph>，方法是呼叫一次，並傳遞<ph id="ph2">&lt;xref:System.Tuple%607.Item2%2A&gt;</ph>兩個值<ph id="ph3">&lt;xref:System.Tuple%607&gt;</ph>物件。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>This continues until the method call returns <ph id="ph1">`false`</ph> when it compares a specific pair of <ph id="ph2">`Item`</ph> values, or the two <ph id="ph3">&lt;xref:System.Tuple%607.Item7%2A&gt;</ph> values are passed to the method.</source>
          <target state="translated">這會繼續執行直到方法呼叫傳回<ph id="ph1">`false`</ph>時，它會比較一組特定<ph id="ph2">`Item`</ph>值或兩個<ph id="ph3">&lt;xref:System.Tuple%607.Item7%2A&gt;</ph>值會傳遞至方法。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>The following example defines a <ph id="ph1">`RateComparer`</ph> class that performs a custom test for equality.</source>
          <target state="translated">下列範例會定義<ph id="ph1">`RateComparer`</ph>類別，執行自訂測試是否相等。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>If the values that are passed to its <ph id="ph1">&lt;xref:System.Collections.IStructuralEquatable.Equals%2A?displayProperty=nameWithType&gt;</ph> method are of type <ph id="ph2">&lt;xref:System.Single&gt;</ph> or <ph id="ph3">&lt;xref:System.Double&gt;</ph>, the method tests for equality by using only up to three fractional digits.</source>
          <target state="translated">如果值傳遞至其<ph id="ph1">&lt;xref:System.Collections.IStructuralEquatable.Equals%2A?displayProperty=nameWithType&gt;</ph>方法屬於類型<ph id="ph2">&lt;xref:System.Single&gt;</ph>或<ph id="ph3">&lt;xref:System.Double&gt;</ph>，使用只有最多三個小數的數字的方法會測試是否相等。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>Otherwise, it simply calls the <ph id="ph1">`x`</ph> parameter's <ph id="ph2">`Equals`</ph> method.</source>
          <target state="translated">否則，它只會呼叫<ph id="ph1">`x`</ph>參數的<ph id="ph2">`Equals`</ph>方法。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>The example uses this <ph id="ph1">&lt;xref:System.Collections.IEqualityComparer&gt;</ph> implementation to determine whether four <ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph> objects that contain data on the rate of population change between 1950 and 2000 are equal.</source>
          <target state="translated">此範例會使用此<ph id="ph1">&lt;xref:System.Collections.IEqualityComparer&gt;</ph>實作，以判斷是否有四個<ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph>包含 1950年到 2000年之間的母體擴展變動率的資料的物件是否相等。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>An object whose <ph id="ph1">&lt;see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /&gt;</ph> method calculates the hash code of the current <ph id="ph2">&lt;see cref="T:System.Tuple`7" /&gt;</ph> object.</source>
          <target state="translated">其 <ph id="ph1">&lt;see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /&gt;</ph> 方法可以計算目前 <ph id="ph2">&lt;see cref="T:System.Tuple`7" /&gt;</ph> 物件之雜湊碼的物件。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>Calculates the hash code for the current <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> object by using a specified computation method.</source>
          <target state="translated">使用指定的計算方法，計算目前 <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> 物件的雜湊碼。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>A 32-bit signed integer hash code.</source>
          <target state="translated">32 位元帶正負號的整數雜湊碼。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">這個成員是明確介面成員實作，</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Collections.IStructuralEquatable&gt;</ph> interface.</source>
          <target state="translated">只有在 <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> 執行個體轉換成 <ph id="ph2">&lt;xref:System.Collections.IStructuralEquatable&gt;</ph> 介面時，才能使用這個成員。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>the method simply wraps a call to the comparer object's <ph id="ph1">&lt;xref:System.Collections.IEqualityComparer.GetHashCode%2A?displayProperty=nameWithType&gt;</ph> implementation.</source>
          <target state="translated">方法只會包裝的比較子物件的呼叫<ph id="ph1">&lt;xref:System.Collections.IEqualityComparer.GetHashCode%2A?displayProperty=nameWithType&gt;</ph>實作。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>The algorithm used to compute the hash code should return the same hash code for two <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> objects that are considered to be equal.</source>
          <target state="translated">用來計算雜湊程式碼的演算法應該會傳回相同的雜湊程式碼，其中兩個<ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph>會被視為相等的物件。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
          <source>An object to compare with the current instance.</source>
          <target state="translated">要與目前執行個體比較的物件。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
          <source>Compares the current <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> object to a specified object and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</source>
          <target state="translated">將目前的 <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> 物件與指定的物件比較，並傳回可指出目前物件在排序次序中，是否在指定物件之前、之後或者相同之位置的整數。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
          <source>A signed integer that indicates the relative position of this instance and <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> in the sort order, as shown in the following table.</source>
          <target state="translated">帶正負號的整數，可指出此執行個體以及排序次序中 <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> 的相對位置，如下表所示。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Value</source>
          <target state="translated"><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> 值</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Description</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 描述</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> A negative integer</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 負整數</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance precedes <ph id="ph3">&lt;paramref name="obj" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph>這個執行個體位於 <ph id="ph3">&lt;paramref name="obj" /&gt;</ph> 之前。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 零</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance and <ph id="ph3">&lt;paramref name="obj" /&gt;</ph> have the same position in the sort order.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph>這個執行個體和 <ph id="ph3">&lt;paramref name="obj" /&gt;</ph> 的排序位置相同。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> A positive integer</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph>正整數</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance follows <ph id="ph3">&lt;paramref name="obj" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph>這個執行個體位於 <ph id="ph3">&lt;paramref name="obj" /&gt;</ph> 之後。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">這個成員是明確介面成員實作，</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.IComparable&gt;</ph> interface.</source>
          <target state="translated">只有在 <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> 執行個體轉換成 <ph id="ph2">&lt;xref:System.IComparable&gt;</ph> 介面時，才能使用這個成員。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
          <source>This method provides the <ph id="ph1">&lt;xref:System.IComparable.CompareTo%2A?displayProperty=nameWithType&gt;</ph> implementation for the <ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph> class.</source>
          <target state="translated">這個方法會提供<ph id="ph1">&lt;xref:System.IComparable.CompareTo%2A?displayProperty=nameWithType&gt;</ph>實作<ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph>類別。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
          <source>Although the method can be called directly, it is most commonly called by the default overloads of collection-sorting methods, such as <ph id="ph1">&lt;xref:System.Array.Sort%28System.Array%29?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.SortedList.Add%2A?displayProperty=nameWithType&gt;</ph>, to order the members of a collection.</source>
          <target state="translated">雖然可以直接呼叫的方法，但是最常呼叫此方法的集合排序的預設多載方法，例如<ph id="ph1">&lt;xref:System.Array.Sort%28System.Array%29?displayProperty=nameWithType&gt;</ph>和<ph id="ph2">&lt;xref:System.Collections.SortedList.Add%2A?displayProperty=nameWithType&gt;</ph>，若要排序之集合的成員。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%607.System%23IComparable%23CompareTo%2A&gt;</ph> method is intended for use in sorting operations.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Tuple%607.System%23IComparable%23CompareTo%2A&gt;</ph>方法僅供用於排序作業。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
          <source>It should not be used when the primary purpose of a comparison is to determine whether two objects are equal.</source>
          <target state="translated">此外，它不應該使用時比較的主要目的是要判斷兩個物件是否相等。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
          <source>To determine whether two objects are equal, call the <ph id="ph1">&lt;xref:System.Tuple%607.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">若要判斷兩個物件是否相等，請呼叫<ph id="ph1">&lt;xref:System.Tuple%607.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
          <source>This method uses the default object comparer to compare each component.</source>
          <target state="translated">這個方法會使用預設物件比較子來比較每個元件。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
          <source>The following example creates an array of <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> objects that contain population data for three cities in the United States from 1950 to 2000.</source>
          <target state="translated">下列範例會建立的陣列<ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph>包含 1950年從 2000年到美國的三個城市的人口資料的物件。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
          <source>The seven components consist of the city name followed by the city's population at 10-year intervals from 1950 to 2000.</source>
          <target state="translated">七個元件組成縣 （市） 名稱後面加上 10 年的間隔的城市的人口數 1950 為 2000年。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
          <source>The example displays the components of each tuple in the array in unsorted order, sorts the array, and then calls the <ph id="ph1">&lt;xref:System.Tuple%607.ToString%2A&gt;</ph> method to display each tuple in sorted order.</source>
          <target state="translated">此範例會顯示未排序的順序陣列中的每個 tuple 的元件，來排序陣列，然後呼叫<ph id="ph1">&lt;xref:System.Tuple%607.ToString%2A&gt;</ph>方法，以顯示每個 tuple 中的排序的順序。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
          <source>The output shows that the array has been sorted by name, which is the first component.</source>
          <target state="translated">輸出會顯示名稱，也就是第一個元件的陣列，已排序。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
          <source>Note that the example does not directly call the <ph id="ph1">&lt;xref:System.Tuple%607.System%23IComparable%23CompareTo%28System.Object%29&gt;</ph> method.</source>
          <target state="translated">請注意，此範例不會直接呼叫<ph id="ph1">&lt;xref:System.Tuple%607.System%23IComparable%23CompareTo%28System.Object%29&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
          <source>This method is called implicitly by the <ph id="ph1">&lt;xref:System.Array.Sort%28System.Array%29&gt;</ph> method for each element in the array.</source>
          <target state="translated">這個方法會隱含地呼叫<ph id="ph1">&lt;xref:System.Array.Sort%28System.Array%29&gt;</ph>陣列中每個項目的方法。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;paramref name="obj" /&gt;</ph> is not a <ph id="ph2">&lt;see cref="T:System.Tuple`7" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="obj" /&gt;</ph> 不是 <ph id="ph2">&lt;see cref="T:System.Tuple`7" /&gt;</ph> 物件。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="P:System.Tuple`7.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source>The index of the specified <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> element.</source>
          <target state="translated">指定的 <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> 項目索引。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="P:System.Tuple`7.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source><bpt id="p1">&lt;c&gt;</bpt>index<ept id="p1">&lt;/c&gt;</ept> can range from 0 to 6.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>index<ept id="p1">&lt;/c&gt;</ept> 的範圍可以從 0 到 6。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="P:System.Tuple`7.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source>Gets the value of the specified <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> element.</source>
          <target state="translated">取得指定的 <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> 項目值。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source>The value of the <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> element at the specified position.</source>
          <target state="translated">位在指定位置的 <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> 項目值。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%607.System%23Runtime%23CompilerServices%23ITuple%23Item%2A?displayProperty=nameWithType&gt;</ph> property is an explicit interface implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Tuple%607.System%23Runtime%23CompilerServices%23ITuple%23Item%2A?displayProperty=nameWithType&gt;</ph>屬性是明確介面實作。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source>To call it, you must cast or convert the <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> object to an <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.ITuple&gt;</ph> interface object.</source>
          <target state="translated">若要呼叫它，您必須決定要轉型或轉換<ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph>物件<ph id="ph2">&lt;xref:System.Runtime.CompilerServices.ITuple&gt;</ph>介面物件。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="P:System.Tuple`7.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than 0 or greater than 6.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> 小於 0 或大於 6。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="P:System.Tuple`7.System#Runtime#CompilerServices#ITuple#Length">
          <source>Gets the number of elements in the <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph>.</source>
          <target state="translated">取得 <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> 中的項目數目。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.System#Runtime#CompilerServices#ITuple#Length">
          <source>7, the number of elements in a <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> object.</source>
          <target state="translated">7，<ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> 物件中的項目數目。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.System#Runtime#CompilerServices#ITuple#Length">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%607.System%23Runtime%23CompilerServices%23ITuple%23Length%2A&gt;</ph> property is an explicit interface implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Tuple%607.System%23Runtime%23CompilerServices%23ITuple%23Length%2A&gt;</ph>屬性是明確介面實作。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.System#Runtime#CompilerServices#ITuple#Length">
          <source>To call it, you must cast or convert the <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> object to an <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.ITuple&gt;</ph> interface object.</source>
          <target state="translated">若要呼叫它，您必須決定要轉型或轉換<ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph>物件<ph id="ph2">&lt;xref:System.Runtime.CompilerServices.ITuple&gt;</ph>介面物件。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.ToString">
          <source>Returns a string that represents the value of this <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> instance.</source>
          <target state="translated">傳回字串，表示這個 <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> 執行個體的值。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.ToString">
          <source>The string representation of this <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> object.</source>
          <target state="translated">此 <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> 物件的字串表示。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.ToString">
          <source>The string returned by this method takes the form (<bpt id="p1">*</bpt>Item1<ept id="p1">*</ept>, <bpt id="p2">*</bpt>Item2<ept id="p2">*</ept>, <bpt id="p3">*</bpt>Item3<ept id="p3">*</ept>, <bpt id="p4">*</bpt>Item4<ept id="p4">*</ept>, <ph id="ph1">`Item5, Item6, Item7`</ph>), where <bpt id="p5">*</bpt>Item1<ept id="p5">*</ept>, <bpt id="p6">*</bpt>Item2<ept id="p6">*</ept>, <bpt id="p7">*</bpt>Item3<ept id="p7">*</ept>, <bpt id="p8">*</bpt>Item4<ept id="p8">*</ept>, <bpt id="p9">*</bpt>Item5<ept id="p9">*</ept>, <bpt id="p10">*</bpt>Item6<ept id="p10">*</ept>, and <bpt id="p11">*</bpt>Item7<ept id="p11">*</ept> represent the values of the <ph id="ph2">&lt;xref:System.Tuple%607.Item1%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Tuple%607.Item2%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Tuple%607.Item3%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Tuple%607.Item4%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Tuple%607.Item5%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Tuple%607.Item6%2A&gt;</ph>, and <ph id="ph8">&lt;xref:System.Tuple%607.Item7%2A&gt;</ph> properties, respectively.</source>
          <target state="translated">這個方法所傳回的字串形式 (<bpt id="p1">*</bpt>Item1<ept id="p1">*</ept>， <bpt id="p2">*</bpt>Item2<ept id="p2">*</ept>， <bpt id="p3">*</bpt>Item3<ept id="p3">*</ept>， <bpt id="p4">*</bpt>Item4<ept id="p4">*</ept>， <ph id="ph1">`Item5, Item6, Item7`</ph>)，其中<bpt id="p5">*</bpt>Item1<ept id="p5">*</ept>， <bpt id="p6">*</bpt>Item2<ept id="p6">*</ept>， <bpt id="p7">*</bpt>Item3<ept id="p7">*</ept>， <bpt id="p8">*</bpt>Item4<ept id="p8">*</ept>， <bpt id="p9">*</bpt>Item5<ept id="p9">*</ept>， <bpt id="p10">*</bpt>Item6<ept id="p10">*</ept>，和<bpt id="p11">*</bpt>Item7<ept id="p11">*</ept>代表的值<ph id="ph2">&lt;xref:System.Tuple%607.Item1%2A&gt;</ph>， <ph id="ph3">&lt;xref:System.Tuple%607.Item2%2A&gt;</ph>， <ph id="ph4">&lt;xref:System.Tuple%607.Item3%2A&gt;</ph>， <ph id="ph5">&lt;xref:System.Tuple%607.Item4%2A&gt;</ph>， <ph id="ph6">&lt;xref:System.Tuple%607.Item5%2A&gt;</ph>， <ph id="ph7">&lt;xref:System.Tuple%607.Item6%2A&gt;</ph>，和<ph id="ph8">&lt;xref:System.Tuple%607.Item7%2A&gt;</ph>屬性，分別。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.ToString">
          <source>If any of the property values is <ph id="ph1">`null`</ph>, it is represented as <ph id="ph2">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">如果有任何屬性值為<ph id="ph1">`null`</ph>，則會呈現為<ph id="ph2">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.ToString">
          <source>The following example defines a <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> object that contains population data for New York City for each census from 1950 through 2000.</source>
          <target state="translated">下列範例會定義<ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph>物件，其中包含每個人口普查 1950 到 2000 New York City 的母體擴展資料。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.ToString">
          <source>The components of the sextuple are then displayed by a call to the <ph id="ph1">&lt;xref:System.Tuple%607.ToString%2A&gt;</ph> method.</source>
          <target state="translated">6-tuple 元件接著會由呼叫<ph id="ph1">&lt;xref:System.Tuple%607.ToString%2A&gt;</ph>方法。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>