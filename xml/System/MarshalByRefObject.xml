<Type Name="MarshalByRefObject" FullName="System.MarshalByRefObject">
  <TypeSignature Language="C#" Value="public abstract class MarshalByRefObject" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi abstract serializable beforefieldinit MarshalByRefObject extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.MarshalByRefObject" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class MarshalByRefObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class MarshalByRefObject abstract" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="07cfb-101">在支援遠端處理的應用程式中啟用跨應用程式定義域界限存取物件。</span><span class="sxs-lookup"><span data-stu-id="07cfb-101">Enables access to objects across application domain boundaries in applications that support remoting.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07cfb-102">應用程式網域是一個或多個應用程式所在的作業系統處理程序中的分割區。</span><span class="sxs-lookup"><span data-stu-id="07cfb-102">An application domain is a partition in an operating system process where one or more applications reside.</span></span> <span data-ttu-id="07cfb-103">相同的應用程式定義域中的物件直接通訊。</span><span class="sxs-lookup"><span data-stu-id="07cfb-103">Objects in the same application domain communicate directly.</span></span> <span data-ttu-id="07cfb-104">不同的應用程式定義域中物件通訊跨應用程式網域界限，傳輸物件的複本，或使用 proxy 來交換訊息。</span><span class="sxs-lookup"><span data-stu-id="07cfb-104">Objects in different application domains communicate either by transporting copies of objects across application domain boundaries, or by using a proxy to exchange messages.</span></span>  
  
 <span data-ttu-id="07cfb-105"><xref:System.MarshalByRefObject> 正在交換訊息來跨應用程式定義域界限進行通訊的物件的基底類別使用的 proxy。</span><span class="sxs-lookup"><span data-stu-id="07cfb-105"><xref:System.MarshalByRefObject> is the base class for objects that communicate across application domain boundaries by exchanging messages using a proxy.</span></span> <span data-ttu-id="07cfb-106">物件，不會繼承自<xref:System.MarshalByRefObject>會隱含地封送處理的值。</span><span class="sxs-lookup"><span data-stu-id="07cfb-106">Objects that do not inherit from <xref:System.MarshalByRefObject> are implicitly marshal by value.</span></span> <span data-ttu-id="07cfb-107">當遠端應用程式參考封送處理的值物件時，應用程式定義域界限之間傳遞物件的複本。</span><span class="sxs-lookup"><span data-stu-id="07cfb-107">When a remote application references a marshal by value object, a copy of the object is passed across application domain boundaries.</span></span>  
  
 <span data-ttu-id="07cfb-108"><xref:System.MarshalByRefObject> 直接在本機應用程式定義域界限內存取的物件。</span><span class="sxs-lookup"><span data-stu-id="07cfb-108"><xref:System.MarshalByRefObject> objects are accessed directly within the boundaries of the local application domain.</span></span> <span data-ttu-id="07cfb-109">在遠端的應用程式第一次會存取應用程式定義域<xref:System.MarshalByRefObject>，proxy 會傳遞至遠端應用程式。</span><span class="sxs-lookup"><span data-stu-id="07cfb-109">The first time an application in a remote application domain accesses a <xref:System.MarshalByRefObject>, a proxy is passed to the remote application.</span></span> <span data-ttu-id="07cfb-110">在 proxy 上的後續呼叫會封送處理回位於本機應用程式定義域中的物件。</span><span class="sxs-lookup"><span data-stu-id="07cfb-110">Subsequent calls on the proxy are marshaled back to the object residing in the local application domain.</span></span>  
  
 <span data-ttu-id="07cfb-111">類型必須繼承自<xref:System.MarshalByRefObject>當跨應用程式定義域界限使用的型別，且必須複製物件的狀態，因為物件的成員不會外當初建立它們的應用程式定義域使用。</span><span class="sxs-lookup"><span data-stu-id="07cfb-111">Types must inherit from <xref:System.MarshalByRefObject> when the type is used across application domain boundaries, and the state of the object must not be copied because the members of the object are not usable outside the application domain where they were created.</span></span>  
  
 <span data-ttu-id="07cfb-112">當您從物件所衍生<xref:System.MarshalByRefObject>跨應用程式定義域界限使用，您不應覆寫它的任何成員，也不應該在直接呼叫其方法。</span><span class="sxs-lookup"><span data-stu-id="07cfb-112">When you derive an object from <xref:System.MarshalByRefObject> for use across application domain boundaries, you should not override any of its members, nor should you call its methods directly.</span></span> <span data-ttu-id="07cfb-113">執行階段會辨識類別衍生自<xref:System.MarshalByRefObject>應該封送處理跨應用程式定義域界限。</span><span class="sxs-lookup"><span data-stu-id="07cfb-113">The runtime recognizes that classes derived from  <xref:System.MarshalByRefObject> should be marshaled across app domain boundaries.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="07cfb-114">本節包含兩個程式碼範例。</span><span class="sxs-lookup"><span data-stu-id="07cfb-114">This section contains two code examples.</span></span> <span data-ttu-id="07cfb-115">第一個程式碼範例示範如何在其他應用程式定義域中建立類別的執行個體。</span><span class="sxs-lookup"><span data-stu-id="07cfb-115">The first code example shows how to create an instance of a class in another application domain.</span></span> <span data-ttu-id="07cfb-116">第二個程式碼範例顯示簡單的類別，可用於遠端處理。</span><span class="sxs-lookup"><span data-stu-id="07cfb-116">The second code example shows a simple class that can be used for remoting.</span></span>  
  
 <span data-ttu-id="07cfb-117">**範例 1**</span><span class="sxs-lookup"><span data-stu-id="07cfb-117">**Example 1**</span></span>  
  
 <span data-ttu-id="07cfb-118">下列程式碼範例示範最簡單的方式，另一個應用程式定義域中執行程式碼。</span><span class="sxs-lookup"><span data-stu-id="07cfb-118">The following code example shows the simplest way to execute code in another application domain.</span></span> <span data-ttu-id="07cfb-119">此範例會定義名為類別`Worker`繼承<xref:System.MarshalByRefObject>，顯示它正在執行的應用程式定義域名稱的方法。</span><span class="sxs-lookup"><span data-stu-id="07cfb-119">The example defines a class named `Worker` that inherits <xref:System.MarshalByRefObject>, with a method that displays the name of the application domain in which it is executing.</span></span> <span data-ttu-id="07cfb-120">此範例會建立的執行個體`Worker`在預設應用程式定義域和新的應用程式定義域中。</span><span class="sxs-lookup"><span data-stu-id="07cfb-120">The example creates instances of `Worker` in the default application domain and in a new application domain.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="07cfb-121">包含的組件`Worker`必須載入到兩個應用程式定義域，但它無法載入會只存在於新的應用程式定義域的其他組件。</span><span class="sxs-lookup"><span data-stu-id="07cfb-121">The assembly that contains `Worker` must be loaded into both application domains, but it could load other assemblies that would exist only in the new application domain.</span></span>  
  
 [!code-cpp[CreateInstanceAndUnwrap2#1](~/samples/snippets/cpp/VS_Snippets_CLR/CreateInstanceAndUnwrap2/cpp/source.cpp#1)]
 [!code-csharp[CreateInstanceAndUnwrap2#1](~/samples/snippets/csharp/VS_Snippets_CLR/CreateInstanceAndUnwrap2/cs/source.cs#1)]
 [!code-vb[CreateInstanceAndUnwrap2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CreateInstanceAndUnwrap2/VB/source.vb#1)]  
  
 <span data-ttu-id="07cfb-122">**範例 2**</span><span class="sxs-lookup"><span data-stu-id="07cfb-122">**Example 2**</span></span>  
  
 <span data-ttu-id="07cfb-123">下列範例會示範衍生自類別<xref:System.MarshalByRefObject>也就是在稍後使用的遠端執行功能。</span><span class="sxs-lookup"><span data-stu-id="07cfb-123">The following example demonstrates a class derived from <xref:System.MarshalByRefObject> that is used later in remoting.</span></span>  
  
 [!code-cpp[RemotingServices.SetObjectUriForMarshal#1](~/samples/snippets/cpp/VS_Snippets_CLR/RemotingServices.SetObjectUriForMarshal/CPP/source.cpp#1)]
 [!code-csharp[RemotingServices.SetObjectUriForMarshal#1](~/samples/snippets/csharp/VS_Snippets_CLR/RemotingServices.SetObjectUriForMarshal/CS/source.cs#1)]
 [!code-vb[RemotingServices.SetObjectUriForMarshal#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/RemotingServices.SetObjectUriForMarshal/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MarshalByRefObject ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MarshalByRefObject.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; MarshalByRefObject();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="07cfb-124">初始化 <see cref="T:System.MarshalByRefObject" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="07cfb-124">Initializes a new instance of the <see cref="T:System.MarshalByRefObject" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateObjRef">
      <MemberSignature Language="C#" Value="public virtual System.Runtime.Remoting.ObjRef CreateObjRef (Type requestedType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Runtime.Remoting.ObjRef CreateObjRef(class System.Type requestedType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MarshalByRefObject.CreateObjRef(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateObjRef (requestedType As Type) As ObjRef" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Runtime::Remoting::ObjRef ^ CreateObjRef(Type ^ requestedType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjRef</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestedType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="requestedType"><span data-ttu-id="07cfb-125">物件的 <see cref="T:System.Type" />，新的 <see cref="T:System.Runtime.Remoting.ObjRef" /> 將參考這個型別。</span><span class="sxs-lookup"><span data-stu-id="07cfb-125">The <see cref="T:System.Type" /> of the object that the new <see cref="T:System.Runtime.Remoting.ObjRef" /> will reference.</span></span></param>
        <summary><span data-ttu-id="07cfb-126">建立包含所有相關資訊的物件，這些資訊是產生用來與遠端物件通訊的所需 Proxy。</span><span class="sxs-lookup"><span data-stu-id="07cfb-126">Creates an object that contains all the relevant information required to generate a proxy used to communicate with a remote object.</span></span></summary>
        <returns><span data-ttu-id="07cfb-127">產生 Proxy 時所需要的資訊。</span><span class="sxs-lookup"><span data-stu-id="07cfb-127">Information required to generate a proxy.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07cfb-128"><xref:System.MarshalByRefObject.CreateObjRef%2A>方法透過呼叫遠端物件的建立方法例如<xref:System.AppDomain.CreateInstance%2A?displayProperty=nameWithType>和<xref:System.AppDomain.CreateInstanceAndUnwrap%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="07cfb-128">The <xref:System.MarshalByRefObject.CreateObjRef%2A> method is called by remote object creation methods such as <xref:System.AppDomain.CreateInstance%2A?displayProperty=nameWithType> and <xref:System.AppDomain.CreateInstanceAndUnwrap%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="07cfb-129">在大部分情況下，沒有需要覆寫這個方法。</span><span class="sxs-lookup"><span data-stu-id="07cfb-129">In most cases, there is no need to override this method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Runtime.Remoting.RemotingException"><span data-ttu-id="07cfb-130">這個執行個體不是有效的遠端物件。</span><span class="sxs-lookup"><span data-stu-id="07cfb-130">This instance is not a valid remoting object.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="07cfb-131">立即呼叫端沒有基礎結構使用權限。</span><span class="sxs-lookup"><span data-stu-id="07cfb-131">The immediate caller does not have infrastructure permission.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="07cfb-132">需要完全信任立即呼叫者。</span><span class="sxs-lookup"><span data-stu-id="07cfb-132">requires full trust for the immediate caller.</span></span> <span data-ttu-id="07cfb-133">這個成員無法供部分信任或安全性透明程式碼。</span><span class="sxs-lookup"><span data-stu-id="07cfb-133">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="GetLifetimeService">
      <MemberSignature Language="C#" Value="public object GetLifetimeService ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetLifetimeService() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MarshalByRefObject.GetLifetimeService" />
      <MemberSignature Language="VB.NET" Value="Public Function GetLifetimeService () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetLifetimeService();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="07cfb-134">擷取控制這個執行個體存留期 (Lifetime) 原則的目前存留期服務物件。</span><span class="sxs-lookup"><span data-stu-id="07cfb-134">Retrieves the current lifetime service object that controls the lifetime policy for this instance.</span></span></summary>
        <returns><span data-ttu-id="07cfb-135">型別 <see cref="T:System.Runtime.Remoting.Lifetime.ILease" /> 的物件，用來控制這個執行個體的存留期原則。</span><span class="sxs-lookup"><span data-stu-id="07cfb-135">An object of type <see cref="T:System.Runtime.Remoting.Lifetime.ILease" /> used to control the lifetime policy for this instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07cfb-136">如需存留時間服務的詳細資訊，請參閱<xref:System.Runtime.Remoting.Lifetime.LifetimeServices>類別。</span><span class="sxs-lookup"><span data-stu-id="07cfb-136">For more information about lifetime services, see the <xref:System.Runtime.Remoting.Lifetime.LifetimeServices> class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="07cfb-137">立即呼叫端沒有基礎結構使用權限。</span><span class="sxs-lookup"><span data-stu-id="07cfb-137">The immediate caller does not have infrastructure permission.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="07cfb-138">需要完全信任立即呼叫者。</span><span class="sxs-lookup"><span data-stu-id="07cfb-138">requires full trust for the immediate caller.</span></span> <span data-ttu-id="07cfb-139">這個成員無法供部分信任或安全性透明程式碼。</span><span class="sxs-lookup"><span data-stu-id="07cfb-139">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="InitializeLifetimeService">
      <MemberSignature Language="C#" Value="public virtual object InitializeLifetimeService ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object InitializeLifetimeService() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MarshalByRefObject.InitializeLifetimeService" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function InitializeLifetimeService () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ InitializeLifetimeService();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="07cfb-140">取得存留期服務物件，以控制這個執行個體的存留期原則。</span><span class="sxs-lookup"><span data-stu-id="07cfb-140">Obtains a lifetime service object to control the lifetime policy for this instance.</span></span></summary>
        <returns><span data-ttu-id="07cfb-141">型別 <see cref="T:System.Runtime.Remoting.Lifetime.ILease" /> 的物件，用來控制這個執行個體的存留期原則。</span><span class="sxs-lookup"><span data-stu-id="07cfb-141">An object of type <see cref="T:System.Runtime.Remoting.Lifetime.ILease" /> used to control the lifetime policy for this instance.</span></span> <span data-ttu-id="07cfb-142">如果存在目前存留期服務物件，則這是這個執行個體的目前存留期服務物件，否則為新的存留期服務物件，其初始化為 <see cref="P:System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime" /> 屬性 (Property) 的值。</span><span class="sxs-lookup"><span data-stu-id="07cfb-142">This is the current lifetime service object for this instance if one exists; otherwise, a new lifetime service object initialized to the value of the <see cref="P:System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime" /> property.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07cfb-143">如需存留時間服務的詳細資訊，請參閱<xref:System.Runtime.Remoting.Lifetime.LifetimeServices>類別。</span><span class="sxs-lookup"><span data-stu-id="07cfb-143">For more information about lifetime services, see the <xref:System.Runtime.Remoting.Lifetime.LifetimeServices> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="07cfb-144">下列程式碼範例將示範如何建立租用。</span><span class="sxs-lookup"><span data-stu-id="07cfb-144">The following code example demonstrates creating a lease.</span></span>  
  
 [!code-cpp[Classic MarshalByRefObject.InitializeLifetimeService Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic MarshalByRefObject.InitializeLifetimeService Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MarshalByRefObject.InitializeLifetimeService Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic MarshalByRefObject.InitializeLifetimeService Example/CS/source.cs#1)]
 [!code-vb[Classic MarshalByRefObject.InitializeLifetimeService Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic MarshalByRefObject.InitializeLifetimeService Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="07cfb-145">立即呼叫端沒有基礎結構使用權限。</span><span class="sxs-lookup"><span data-stu-id="07cfb-145">The immediate caller does not have infrastructure permission.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="07cfb-146">需要完全信任立即呼叫者。</span><span class="sxs-lookup"><span data-stu-id="07cfb-146">requires full trust for the immediate caller.</span></span> <span data-ttu-id="07cfb-147">這個成員無法供部分信任或安全性透明程式碼。</span><span class="sxs-lookup"><span data-stu-id="07cfb-147">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="MemberwiseClone">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="07cfb-148">建立目前物件的淺層複本。</span><span class="sxs-lookup"><span data-stu-id="07cfb-148">Creates a shallow copy of the current object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MemberwiseClone">
      <MemberSignature Language="C#" Value="protected MarshalByRefObject MemberwiseClone (bool cloneIdentity);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.MarshalByRefObject MemberwiseClone(bool cloneIdentity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Function MemberwiseClone (cloneIdentity As Boolean) As MarshalByRefObject" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; MarshalByRefObject ^ MemberwiseClone(bool cloneIdentity);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.MarshalByRefObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cloneIdentity" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="cloneIdentity">
          <span data-ttu-id="07cfb-149"><see langword="false" />，刪除目前 <see cref="T:System.MarshalByRefObject" /> 物件的識別 (Identity)，則會在跨遠端界限進行封送處理時將新的識別指定給物件。</span><span class="sxs-lookup"><span data-stu-id="07cfb-149"><see langword="false" /> to delete the current <see cref="T:System.MarshalByRefObject" /> object's identity, which will cause the object to be assigned a new identity when it is marshaled across a remoting boundary.</span></span> <span data-ttu-id="07cfb-150"><see langword="false" /> 的值通常是適當的。</span><span class="sxs-lookup"><span data-stu-id="07cfb-150">A value of <see langword="false" /> is usually appropriate.</span></span> <span data-ttu-id="07cfb-151"><see langword="true" /> 表示會將目前 <see cref="T:System.MarshalByRefObject" /> 物件的識別複製到其複製品，而造成將遠端用戶端呼叫傳送至遠端伺服器物件。</span><span class="sxs-lookup"><span data-stu-id="07cfb-151"><see langword="true" /> to copy the current <see cref="T:System.MarshalByRefObject" /> object's identity to its clone, which will cause remoting client calls to be routed to the remote server object.</span></span></param>
        <summary><span data-ttu-id="07cfb-152">建立目前 <see cref="T:System.MarshalByRefObject" /> 物件的淺層複本。</span><span class="sxs-lookup"><span data-stu-id="07cfb-152">Creates a shallow copy of the current <see cref="T:System.MarshalByRefObject" /> object.</span></span></summary>
        <returns><span data-ttu-id="07cfb-153">目前 <see cref="T:System.MarshalByRefObject" /> 物件的淺層複本。</span><span class="sxs-lookup"><span data-stu-id="07cfb-153">A shallow copy of the current <see cref="T:System.MarshalByRefObject" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07cfb-154"><xref:System.MarshalByRefObject.MemberwiseClone%28System.Boolean%29>方法來建立新建立的淺層複本<xref:System.MarshalByRefObject>物件，然後再複製目前的非靜態欄位<xref:System.MarshalByRefObject>物件至新的物件。</span><span class="sxs-lookup"><span data-stu-id="07cfb-154">The <xref:System.MarshalByRefObject.MemberwiseClone%28System.Boolean%29> method creates a shallow copy by creating a new <xref:System.MarshalByRefObject> object, and then copying the nonstatic fields of the current <xref:System.MarshalByRefObject> object to the new object.</span></span> <span data-ttu-id="07cfb-155">如果欄位是實值類型，則會執行位元欄位的複本。</span><span class="sxs-lookup"><span data-stu-id="07cfb-155">If a field is a value type, a bit-by-bit copy of the field is performed.</span></span> <span data-ttu-id="07cfb-156">如果欄位是參考類型，則會複製參考，但參考的物件不;因此，原始的物件和其複製參考相同的物件。</span><span class="sxs-lookup"><span data-stu-id="07cfb-156">If a field is a reference type, the reference is copied but the referred object is not; therefore, the original object and its clone refer to the same object.</span></span>  
  
 <span data-ttu-id="07cfb-157">例如，請考慮<xref:System.MarshalByRefObject>呼叫參考物件 A 和 B 的 X 物件參考物件 c。X 的淺層複本建立新的物件 X2 參考物件 A 和 b。相反地，X 的深層複本建立新物件 X2 A2 與 B2 a 的新物件和 B.B2 參考複本 C.使用實作類別的新物件 C2、<xref:System.ICloneable>介面，以執行深層或淺層 c複製的物件。</span><span class="sxs-lookup"><span data-stu-id="07cfb-157">For example, consider a <xref:System.MarshalByRefObject> object called X that references objects A and B. Object B, in turn, references object C. A shallow copy of X creates new object X2 that also references objects A and B. In contrast, a deep copy of X creates a new object X2 that references the new objects A2 and B2, which are copies of A and B. B2, in turn, references the new object C2, which is a copy C. Use a class that implements the <xref:System.ICloneable> interface to perform a deep or shallow copy of an object.</span></span>  
  
 <span data-ttu-id="07cfb-158">識別<xref:System.MarshalByRefObject>物件會定義為目標的遠端用戶端呼叫的遠端伺服器物件。</span><span class="sxs-lookup"><span data-stu-id="07cfb-158">The identity of a <xref:System.MarshalByRefObject> object is defined as the remote server object that is the target of a remoting client call.</span></span> <span data-ttu-id="07cfb-159">根據預設，成員的複製品的<xref:System.MarshalByRefObject>物件具有相同的識別碼，作為原始物件時，這通常不會對用戶端的遠端界限之間封送處理的伺服器端物件的複製正確的行為。</span><span class="sxs-lookup"><span data-stu-id="07cfb-159">By default, the memberwise clone of a <xref:System.MarshalByRefObject> object has the same identity as the original object, which is typically not the correct behavior for clones of server-side objects that are marshaled across a remoting boundary to the client side.</span></span> <span data-ttu-id="07cfb-160">指定`false`，通常是適當的管理，刪除複製的身分識別，而造成複製跨遠端界限，封送處理時，指派新識別或`true`造成保留原始的身分識別的複製<xref:System.MarshalByRefObject>物件。</span><span class="sxs-lookup"><span data-stu-id="07cfb-160">Specify `false`, which is usually appropriate, to delete the identity of the clone and cause a new identity to be assigned when the clone is marshaled across a remoting boundary, or `true` to cause the clone to retain the identity of the original <xref:System.MarshalByRefObject> object.</span></span> <span data-ttu-id="07cfb-161"><xref:System.MarshalByRefObject.MemberwiseClone%28System.Boolean%29>方法僅供開發人員實作遠端伺服器物件。</span><span class="sxs-lookup"><span data-stu-id="07cfb-161">The <xref:System.MarshalByRefObject.MemberwiseClone%28System.Boolean%29> method is intended to be used by developers implementing remote server objects.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>