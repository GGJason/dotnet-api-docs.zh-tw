<Type Name="Delegate" FullName="System.Delegate">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="018e5371bd85cbb8ad0cda7ecba314155412268d" />
    <Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="11/17/2018" />
    <Meta Name="ms.locfileid" Value="51896595" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class Delegate : ICloneable, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi abstract serializable beforefieldinit Delegate extends System.Object implements class System.ICloneable, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Delegate" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Delegate&#xA;Implements ICloneable, ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Delegate abstract : ICloneable, System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type Delegate = class&#xA;    interface ICloneable&#xA;    interface ISerializable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDual)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="45f0e-101">表示委派，它是參考靜態方法或該類別的類別執行個體和執行個體方法 (Instance Method) 的資料結構。</span>
      <span class="sxs-lookup">
        <span data-stu-id="45f0e-101">Represents a delegate, which is a data structure that refers to a static method or to a class instance and an instance method of that class.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45f0e-102"><xref:System.Delegate>類別是委派類型的基底類別。</span><span class="sxs-lookup"><span data-stu-id="45f0e-102">The <xref:System.Delegate> class is the base class for delegate types.</span></span> <span data-ttu-id="45f0e-103">不過，只有系統和編譯器可以明確地從衍生<xref:System.Delegate>類別或從<xref:System.MulticastDelegate>類別。</span><span class="sxs-lookup"><span data-stu-id="45f0e-103">However, only the system and compilers can derive explicitly from the <xref:System.Delegate> class or from the <xref:System.MulticastDelegate> class.</span></span> <span data-ttu-id="45f0e-104">它也不是允許從委派型別衍生新的類型。</span><span class="sxs-lookup"><span data-stu-id="45f0e-104">It is also not permissible to derive a new type from a delegate type.</span></span> <span data-ttu-id="45f0e-105"><xref:System.Delegate>類別不是委派類型，它是用來衍生的委派類型的類別。</span><span class="sxs-lookup"><span data-stu-id="45f0e-105">The <xref:System.Delegate> class is not considered a delegate type; it is a class used to derive delegate types.</span></span>  
  
 <span data-ttu-id="45f0e-106">大部分語言中實作`delegate`關鍵字，而這些語言的編譯器可衍生自<xref:System.MulticastDelegate>類別; 因此，使用者應該使用`delegate`語言所提供的關鍵字。</span><span class="sxs-lookup"><span data-stu-id="45f0e-106">Most languages implement a `delegate` keyword, and compilers for those languages are able to derive from the <xref:System.MulticastDelegate> class; therefore, users should use the `delegate` keyword provided by the language.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="45f0e-107">Common language runtime 提供`Invoke`每個委派類型都使用相同的簽章與委派的方法。</span><span class="sxs-lookup"><span data-stu-id="45f0e-107">The common language runtime provides an `Invoke` method for each delegate type, with the same signature as the delegate.</span></span> <span data-ttu-id="45f0e-108">您不需要明確地呼叫這個方法，從 C#、 Visual Basic 或 Visual c + +，因為編譯器會自動呼叫。</span><span class="sxs-lookup"><span data-stu-id="45f0e-108">You do not have to call this method explicitly from C#, Visual Basic, or Visual C++, because the compilers call it automatically.</span></span> <span data-ttu-id="45f0e-109">`Invoke`方法可用於[反映](~/docs/framework/reflection-and-codedom/reflection.md)當您想要尋找的委派類型簽章。</span><span class="sxs-lookup"><span data-stu-id="45f0e-109">The `Invoke` method is useful in [reflection](~/docs/framework/reflection-and-codedom/reflection.md) when you want to find the signature of the delegate type.</span></span>  
  
 <span data-ttu-id="45f0e-110">Common language runtime 提供每個委派類型與`BeginInvoke`和`EndInvoke`方法，來啟用委派的非同步引動過程。</span><span class="sxs-lookup"><span data-stu-id="45f0e-110">The common language runtime provides each delegate type with `BeginInvoke` and `EndInvoke` methods, to enable asynchronous invocation of the delegate.</span></span> <span data-ttu-id="45f0e-111">如需這些方法的詳細資訊，請參閱[Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)。</span><span class="sxs-lookup"><span data-stu-id="45f0e-111">For more information about these methods, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
 <span data-ttu-id="45f0e-112">委派類型的宣告會建立合約，指定一或多個方法的簽章。</span><span class="sxs-lookup"><span data-stu-id="45f0e-112">The declaration of a delegate type establishes a contract that specifies the signature of one or more methods.</span></span> <span data-ttu-id="45f0e-113">委派是參考委派類型的執行個體：</span><span class="sxs-lookup"><span data-stu-id="45f0e-113">A delegate is an instance of a delegate type that has references to:</span></span>  
  
-   <span data-ttu-id="45f0e-114">類型和目標物件指派給該類型的執行個體方法。</span><span class="sxs-lookup"><span data-stu-id="45f0e-114">An instance method of a type and a target object assignable to that type.</span></span>  
  
-   <span data-ttu-id="45f0e-115">型別，隱藏的執行個體方法`this`公開型式參數清單中的參數。</span><span class="sxs-lookup"><span data-stu-id="45f0e-115">An instance method of a type, with the hidden `this` parameter exposed in the formal parameter list.</span></span> <span data-ttu-id="45f0e-116">委派是要開啟執行個體的委派。</span><span class="sxs-lookup"><span data-stu-id="45f0e-116">The delegate is said to be an open instance delegate.</span></span>  
  
-   <span data-ttu-id="45f0e-117">靜態方法。</span><span class="sxs-lookup"><span data-stu-id="45f0e-117">A static method.</span></span>  
  
-   <span data-ttu-id="45f0e-118">靜態方法，而且目標物件指派給該方法的第一個參數。</span><span class="sxs-lookup"><span data-stu-id="45f0e-118">A static method and a target object assignable to the first parameter of the method.</span></span> <span data-ttu-id="45f0e-119">此委派會在第一個引數上關閉。</span><span class="sxs-lookup"><span data-stu-id="45f0e-119">The delegate is said to be closed over its first argument.</span></span>  
  
 <span data-ttu-id="45f0e-120">如需有關委派繫結的詳細資訊，請參閱<xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29>方法多載。</span><span class="sxs-lookup"><span data-stu-id="45f0e-120">For more information on delegate binding, see the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="45f0e-121">在.NET framework 1.0 和 1.1 版中，委派可以代表方法，只有當方法的簽章完全符合委派型別所指定的簽章。</span><span class="sxs-lookup"><span data-stu-id="45f0e-121">In the .NET Framework versions 1.0 and 1.1, a delegate can represent a method only if the signature of the method exactly matches the signature specified by the delegate type.</span></span> <span data-ttu-id="45f0e-122">因此，只有第一個和第三個項目符號在上述清單中的都有支援，而第一項需要的確切型別相符項目。</span><span class="sxs-lookup"><span data-stu-id="45f0e-122">Thus, only the first and third bullets in the preceding list are supported, and the first bullet requires an exact type match.</span></span>  
  
 <span data-ttu-id="45f0e-123">當委派表示其第一個引數 （最常見的情況） 上關閉執行個體方法時，此委派會儲存方法的進入點的參考和參考的物件，稱為目標，也就是指派給類型定義的類型方法。</span><span class="sxs-lookup"><span data-stu-id="45f0e-123">When a delegate represents an instance method closed over its first argument (the most common case), the delegate stores a reference to the method's entry point and a reference to an object, called the target, which is of a type assignable to the type that defined the method.</span></span> <span data-ttu-id="45f0e-124">當委派表示開啟的執行個體方法時，它會儲存至方法的進入點的參考。</span><span class="sxs-lookup"><span data-stu-id="45f0e-124">When a delegate represents an open instance method, it stores a reference to the method's entry point.</span></span> <span data-ttu-id="45f0e-125">委派簽章必須包含隱藏`this`其型式參數清單中的參數; 在此情況下，委派沒有目標物件的參考，並在叫用委派時，就必須提供目標物件。</span><span class="sxs-lookup"><span data-stu-id="45f0e-125">The delegate signature must include the hidden `this` parameter in its formal parameter list; in this case, the delegate does not have a reference to a target object, and a target object must be supplied when the delegate is invoked.</span></span>  
  
 <span data-ttu-id="45f0e-126">當委派表示靜態方法時，委派就會儲存至方法的進入點的參考。</span><span class="sxs-lookup"><span data-stu-id="45f0e-126">When a delegate represents a static method, the delegate stores a reference to the method's entry point.</span></span> <span data-ttu-id="45f0e-127">當委派表示靜態方法，其第一個引數所覆蓋時，委派會儲存參考方法的進入點和指派給方法的第一個引數類型的目標物件的參考。</span><span class="sxs-lookup"><span data-stu-id="45f0e-127">When a delegate represents a static method closed over its first argument, the delegate stores a reference to the method's entry point and a reference to a target object assignable to the type of the method's first argument.</span></span> <span data-ttu-id="45f0e-128">叫用委派時，靜態方法的第一個引數會接收目標物件。</span><span class="sxs-lookup"><span data-stu-id="45f0e-128">When the delegate is invoked, the first argument of the static method receives the target object.</span></span>  
  
 <span data-ttu-id="45f0e-129">委派的引動過程清單是在其中清單的每個項目叫用只有其中一個委派所表示之方法的委派的已排序的集合。</span><span class="sxs-lookup"><span data-stu-id="45f0e-129">The invocation list of a delegate is an ordered set of delegates in which each element of the list invokes exactly one of the methods represented by the delegate.</span></span> <span data-ttu-id="45f0e-130">引動過程清單可以包含重複的方法。</span><span class="sxs-lookup"><span data-stu-id="45f0e-130">An invocation list can contain duplicate methods.</span></span> <span data-ttu-id="45f0e-131">在引動過程，方法是以其出現在引動過程清單中的順序叫用。</span><span class="sxs-lookup"><span data-stu-id="45f0e-131">During an invocation, methods are invoked in the order in which they appear in the invocation list.</span></span> <span data-ttu-id="45f0e-132">委派嘗試叫用其引動過程清單中的每個方法重複的項目會叫用之後每次出現在引動過程清單中。</span><span class="sxs-lookup"><span data-stu-id="45f0e-132">A delegate attempts to invoke every method in its invocation list; duplicates are invoked once for each time they appear in the invocation list.</span></span> <span data-ttu-id="45f0e-133">委派是不可變的;建立之後，就不會變更委派的引動過程清單。</span><span class="sxs-lookup"><span data-stu-id="45f0e-133">Delegates are immutable; once created, the invocation list of a delegate does not change.</span></span>  
  
 <span data-ttu-id="45f0e-134">委派就多點傳送，或可組合的類別，因為委派可以叫用一或多個方法，可用在合併作業。</span><span class="sxs-lookup"><span data-stu-id="45f0e-134">Delegates are referred to as multicast, or combinable, because a delegate can invoke one or more methods and can be used in combining operations.</span></span>  
  
 <span data-ttu-id="45f0e-135">合併作業，例如<xref:System.Delegate.Combine%2A>和<xref:System.Delegate.Remove%2A>，不會改變現有的委派。</span><span class="sxs-lookup"><span data-stu-id="45f0e-135">Combining operations, such as <xref:System.Delegate.Combine%2A> and <xref:System.Delegate.Remove%2A>, do not alter existing delegates.</span></span> <span data-ttu-id="45f0e-136">相反地，這類作業會傳回新的委派來包含結果的作業，也就是不變的委派，或`null`。</span><span class="sxs-lookup"><span data-stu-id="45f0e-136">Instead, such an operation returns a new delegate that contains the results of the operation, an unchanged delegate, or `null`.</span></span> <span data-ttu-id="45f0e-137">合併作業會傳回`null`作業的結果時不會參考至少一個方法的委派。</span><span class="sxs-lookup"><span data-stu-id="45f0e-137">A combining operation returns `null` when the result of the operation is a delegate that does not reference at least one method.</span></span> <span data-ttu-id="45f0e-138">合併作業會傳回未變更的委派，當要求的作業沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="45f0e-138">A combining operation returns an unchanged delegate when the requested operation has no effect.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="45f0e-139">Managed 語言使用<xref:System.Delegate.Combine%2A>和<xref:System.Delegate.Remove%2A>實作委派作業的方法。</span><span class="sxs-lookup"><span data-stu-id="45f0e-139">Managed languages use the <xref:System.Delegate.Combine%2A> and <xref:System.Delegate.Remove%2A> methods to implement delegate operations.</span></span> <span data-ttu-id="45f0e-140">範例包括`AddHandler`和`RemoveHandler`Visual Basic 中的陳述式和 + = 和-= 運算子委派 C# 中的型別。</span><span class="sxs-lookup"><span data-stu-id="45f0e-140">Examples include the `AddHandler` and `RemoveHandler` statements in Visual Basic and the += and -= operators on delegate types in C#.</span></span>  
  
 <span data-ttu-id="45f0e-141">從開始[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]，泛型委派類型可以有 variant 類型參數。</span><span class="sxs-lookup"><span data-stu-id="45f0e-141">Starting with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], generic delegate types can have variant type parameters.</span></span> <span data-ttu-id="45f0e-142">Contravariant 類型參數可用來當做委派參數類型與 covariant 類型參數可用來當做傳回型別。</span><span class="sxs-lookup"><span data-stu-id="45f0e-142">Contravariant type parameters can be used as parameter types of the delegate, and a covariant type parameter can be used as the return type.</span></span> <span data-ttu-id="45f0e-143">這項功能可讓泛型委派類型從相同泛型類型定義與指派相容其類型引數是否具有繼承關係，參考型別中所述建構[共變數和反變數](~/docs/standard/generics/covariance-and-contravariance.md)。</span><span class="sxs-lookup"><span data-stu-id="45f0e-143">This feature allows generic delegate types that are constructed from the same generic type definition to be assignment-compatible if their type arguments are reference types with an inheritance relationship, as explained in [Covariance and Contravariance](~/docs/standard/generics/covariance-and-contravariance.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="45f0e-144">與指派相容的泛型委派因為時間差異不一定是可組合的類別。</span><span class="sxs-lookup"><span data-stu-id="45f0e-144">Generic delegates that are assignment-compatible because of variance are not necessarily combinable.</span></span> <span data-ttu-id="45f0e-145">若要可組合的類別，類型必須完全相符。</span><span class="sxs-lookup"><span data-stu-id="45f0e-145">To be combinable, the types must match exactly.</span></span> <span data-ttu-id="45f0e-146">例如，假設 具名的類別`Derived`衍生自類別，名為`Base`。</span><span class="sxs-lookup"><span data-stu-id="45f0e-146">For example, suppose that a class named `Derived` is derived from a class named `Base`.</span></span> <span data-ttu-id="45f0e-147">類型的委派`Action<Base>`(`Action(Of Base)` Visual Basic 中) 可以指派給類型的變數`Action<Derived>`，但無法合併兩個委派，因為類型不完全相符。</span><span class="sxs-lookup"><span data-stu-id="45f0e-147">A delegate of type `Action<Base>` (`Action(Of Base)` in Visual Basic) can be assigned to a variable of type `Action<Derived>`, but the two delegates cannot be combined because the types do not match exactly.</span></span>  
  
 <span data-ttu-id="45f0e-148">如果叫用的方法擲回例外狀況，則方法會停止執行、 例外狀況會傳遞至委派的呼叫端和引動過程清單中的其餘方法不會叫用。</span><span class="sxs-lookup"><span data-stu-id="45f0e-148">If an invoked method throws an exception, the method stops executing, the exception is passed back to the caller of the delegate, and remaining methods in the invocation list are not invoked.</span></span> <span data-ttu-id="45f0e-149">在呼叫端攔截的例外狀況時，不會改變此行為。</span><span class="sxs-lookup"><span data-stu-id="45f0e-149">Catching the exception in the caller does not alter this behavior.</span></span>  
  
 <span data-ttu-id="45f0e-150">當叫用由委派的方法簽章包含傳回的值時，委派會傳回引動過程清單最後一個元素的傳回值。</span><span class="sxs-lookup"><span data-stu-id="45f0e-150">When the signature of the methods invoked by a delegate includes a return value, the delegate returns the return value of the last element in the invocation list.</span></span> <span data-ttu-id="45f0e-151">當簽章包含傳址方式傳遞的參數時，最後一個參數的值會是每個方法引動過程清單，依序執行，並更新參數的值中的結果。</span><span class="sxs-lookup"><span data-stu-id="45f0e-151">When the signature includes a parameter that is passed by reference, the final value of the parameter is the result of every method in the invocation list executing sequentially and updating the parameter's value.</span></span>  
  
 <span data-ttu-id="45f0e-152">在 C 或 c + + 中委派的最接近對等項目是函式指標。</span><span class="sxs-lookup"><span data-stu-id="45f0e-152">The closest equivalent of a delegate in C or C++ is a function pointer.</span></span> <span data-ttu-id="45f0e-153">委派可以表示的靜態方法或執行個體方法。</span><span class="sxs-lookup"><span data-stu-id="45f0e-153">A delegate can represent a static method or an instance method.</span></span> <span data-ttu-id="45f0e-154">當委派表示執行個體方法時，此委派會儲存參考至方法的進入點，不僅類別執行個體的參考。</span><span class="sxs-lookup"><span data-stu-id="45f0e-154">When the delegate represents an instance method, the delegate stores not only a reference to the method's entry point, but also a reference to the class instance.</span></span> <span data-ttu-id="45f0e-155">不同於函式指標，委派是物件導向和型別安全。</span><span class="sxs-lookup"><span data-stu-id="45f0e-155">Unlike function pointers, delegates are object oriented and type safe.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="45f0e-156">下列範例示範如何定義委派，名為`myMethodDelegate`。</span><span class="sxs-lookup"><span data-stu-id="45f0e-156">The following example shows how to define a delegate named `myMethodDelegate`.</span></span> <span data-ttu-id="45f0e-157">執行個體方法和巢狀的靜態方法建立這個委派的執行個體`mySampleClass`類別。</span><span class="sxs-lookup"><span data-stu-id="45f0e-157">Instances of this delegate are created for an instance method and a static method of the nested `mySampleClass` class.</span></span> <span data-ttu-id="45f0e-158">執行個體方法的委派要求的執行個體`mySampleClass`。</span><span class="sxs-lookup"><span data-stu-id="45f0e-158">The delegate for the instance method requires an instance of `mySampleClass`.</span></span> <span data-ttu-id="45f0e-159">`mySampleClass`執行個體儲存在變數，名為`mySC`。</span><span class="sxs-lookup"><span data-stu-id="45f0e-159">The `mySampleClass` instance is saved in a variable named `mySC`.</span></span>  
  
 [!code-cpp[Classic Delegate Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Delegate Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Delegate Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Delegate Example/CS/source.cs#1)]
 [!code-vb[Classic Delegate Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Delegate Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.MulticastDelegate" />
    <related type="Article" href="https://msdn.microsoft.com/library/41972034-92ed-450a-9664-ab93fcc6f1fb">
      <span data-ttu-id="45f0e-160">以非同步的方式呼叫同步方法</span>
      <span class="sxs-lookup">
        <span data-stu-id="45f0e-160">Calling Synchronous Methods Asynchronously</span>
      </span>
    </related>
    <related type="Article" href="~/docs/csharp/programming-guide/delegates/index.md">
      <span data-ttu-id="45f0e-161">委派 (C# 程式設計手冊)</span>
      <span class="sxs-lookup">
        <span data-stu-id="45f0e-161">Delegates (C# Programming Guide)</span>
      </span>
    </related>
    <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/delegates/index.md">
      <span data-ttu-id="45f0e-162">委派 (Visual Basic)</span>
      <span class="sxs-lookup">
        <span data-stu-id="45f0e-162">Delegates (Visual Basic)</span>
      </span>
    </related>
    <related type="Article" href="https://msdn.microsoft.com/library/1cdf3420-89c1-47c0-b796-aa984020e0f8">
      <span data-ttu-id="45f0e-163">如何：定義和使用委派 (C++/CLI)</span>
      <span class="sxs-lookup">
        <span data-stu-id="45f0e-163">How to: Define and Use Delegates (C++/CLI)</span>
      </span>
    </related>
    <related type="Article" href="https://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f">
      <span data-ttu-id="45f0e-164">處理和引發事件</span>
      <span class="sxs-lookup">
        <span data-stu-id="45f0e-164">Handling and Raising Events</span>
      </span>
    </related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="45f0e-165">初始化新的委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-165">Initializes a new delegate.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Delegate (object target, string method);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(object target, string method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.#ctor(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (target As Object, method As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Delegate(System::Object ^ target, System::String ^ method);" />
      <MemberSignature Language="F#" Value="new Delegate : obj * string -&gt; Delegate" Usage="new System.Delegate (target, method)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="method" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="45f0e-166">委派叫用 <c>method</c> 所在的類別執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-166">The class instance on which the delegate invokes <c>method</c>.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="45f0e-167">委派表示的執行個體方法名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-167">The name of the instance method that the delegate represents.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45f0e-168">初始化委派，這個委派會在指定的類別執行個體上叫用指定的執行個體方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-168">Initializes a delegate that invokes the specified instance method on the specified class instance.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45f0e-169">這個建構函式不能在應用程式程式碼。</span><span class="sxs-lookup"><span data-stu-id="45f0e-169">This constructor cannot be used in application code.</span></span> <span data-ttu-id="45f0e-170">若要建立委派，藉由指定的執行個體方法名稱，使用的多載<xref:System.Delegate.CreateDelegate%2A>指定方法名稱和目標物件的方法。</span><span class="sxs-lookup"><span data-stu-id="45f0e-170">To create a delegate by specifying the name of an instance method, use an overload of the <xref:System.Delegate.CreateDelegate%2A> method that specifies a method name and a target object.</span></span> <span data-ttu-id="45f0e-171">比方說，<xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%29>方法多載會建立具有指定名稱的執行個體方法的委派。</span><span class="sxs-lookup"><span data-stu-id="45f0e-171">For example, the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%29> method overload creates a delegate for an instance method with a specified name.</span></span>  
  
 <span data-ttu-id="45f0e-172">這個建構函式只會建立委派執行個體方法。</span><span class="sxs-lookup"><span data-stu-id="45f0e-172">This constructor creates delegates for instance methods only.</span></span> <span data-ttu-id="45f0e-173">執行個體方法則是類別; 的執行個體相關聯的方法靜態方法是類別本身相關聯的方法。</span><span class="sxs-lookup"><span data-stu-id="45f0e-173">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="45f0e-174">
            <paramref name="target" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-174">
              <paramref name="target" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="45f0e-175">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-175">-or-</span>
          </span>
          <span data-ttu-id="45f0e-176">
            <paramref name="method" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-176">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="45f0e-177">繫結至目標方法時發生錯誤。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-177">There was an error binding to the target method.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="45f0e-178">當叫用晚期繫結機制透過例如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-178">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="45f0e-179">相關聯的列舉型別： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-179">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Delegate (Type target, string method);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Type target, string method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.#ctor(System.Type,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (target As Type, method As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Delegate(Type ^ target, System::String ^ method);" />
      <MemberSignature Language="F#" Value="new Delegate : Type * string -&gt; Delegate" Usage="new System.Delegate (target, method)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="target" Type="System.Type" />
        <Parameter Name="method" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="45f0e-180">
            <see cref="T:System.Type" />，表示定義 <c>method</c> 的類別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-180">The <see cref="T:System.Type" /> representing the class that defines <c>method</c>.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="45f0e-181">委派表示的靜態方法名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-181">The name of the static method that the delegate represents.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45f0e-182">初始化委派，這個委派會從指定的類別叫用指定的靜態方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-182">Initializes a delegate that invokes the specified static method from the specified class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45f0e-183">這個建構函式不能在應用程式程式碼。</span><span class="sxs-lookup"><span data-stu-id="45f0e-183">This constructor cannot be used in application code.</span></span> <span data-ttu-id="45f0e-184">若要建立委派，藉由指定的靜態方法名稱，使用的多載<xref:System.Delegate.CreateDelegate%2A>指定方法名稱，但未指定目標物件的方法。</span><span class="sxs-lookup"><span data-stu-id="45f0e-184">To create a delegate by specifying the name of a static method, use an overload of the <xref:System.Delegate.CreateDelegate%2A> method that specifies a method name but does not specify a target object.</span></span> <span data-ttu-id="45f0e-185">比方說，<xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%29>方法多載會建立具有指定名稱的靜態方法的委派。</span><span class="sxs-lookup"><span data-stu-id="45f0e-185">For example, the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%29> method overload creates a static delegate for a method with a specified name.</span></span>  
  
 <span data-ttu-id="45f0e-186">這個建構函式會建立只有靜態方法的委派。</span><span class="sxs-lookup"><span data-stu-id="45f0e-186">This constructor creates delegates for static methods only.</span></span> <span data-ttu-id="45f0e-187">執行個體方法則是類別; 的執行個體相關聯的方法靜態方法是類別本身相關聯的方法。</span><span class="sxs-lookup"><span data-stu-id="45f0e-187">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="45f0e-188">
            <paramref name="target" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-188">
              <paramref name="target" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="45f0e-189">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-189">-or-</span>
          </span>
          <span data-ttu-id="45f0e-190">
            <paramref name="method" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-190">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="45f0e-191">
            <paramref name="target" /> 不是 <see langword="RuntimeType" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-191">
              <paramref name="target" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="45f0e-192">請參閱[反映中的執行階段類型](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-192">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
          <span data-ttu-id="45f0e-193">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-193">-or-</span>
          </span>
          <span data-ttu-id="45f0e-194">
            <paramref name="target" /> 代表開放式泛型類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-194">
              <paramref name="target" /> represents an open generic type.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="45f0e-195">當叫用晚期繫結機制透過例如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-195">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="45f0e-196">相關聯的列舉型別： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-196">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="delegate.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="45f0e-197">建立委派的淺層複本 (Shallow Copy)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-197">Creates a shallow copy of the delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45f0e-198">委派的淺層複本。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-198">A shallow copy of the delegate.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45f0e-199">複製具有相同<xref:System.Type>，做為原始的委派的目標、 方法和引動過程清單。</span><span class="sxs-lookup"><span data-stu-id="45f0e-199">The clone has the same <xref:System.Type>, target, method, and invocation list as the original delegate.</span></span>  
  
 <span data-ttu-id="45f0e-200">淺層複本建立與原始物件，而相同類型的新執行個體，並接著會將複製原始物件的非靜態欄位。</span><span class="sxs-lookup"><span data-stu-id="45f0e-200">A shallow copy creates a new instance of the same type as the original object, and then copies the nonstatic fields of the original object.</span></span> <span data-ttu-id="45f0e-201">如果欄位是實值型別，則會執行位元欄位的複本。</span><span class="sxs-lookup"><span data-stu-id="45f0e-201">If the field is a value type, a bit-by-bit copy of the field is performed.</span></span> <span data-ttu-id="45f0e-202">如果欄位是參考型別，則會複製參考，但參考的物件不;因此，在原始物件的參考和複製品中的參考點相同的物件。</span><span class="sxs-lookup"><span data-stu-id="45f0e-202">If the field is a reference type, the reference is copied but the referred object is not; therefore, the reference in the original object and the reference in the clone point to the same object.</span></span> <span data-ttu-id="45f0e-203">相較之下，物件的深層複本複製直接或間接參考的欄位物件中的所有項目。</span><span class="sxs-lookup"><span data-stu-id="45f0e-203">In contrast, a deep copy of an object duplicates everything directly or indirectly referenced by the fields in the object.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="45f0e-204">當叫用晚期繫結機制透過例如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-204">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="45f0e-205">相關聯的列舉型別： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-205">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="Combine">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="45f0e-206">串連指定多點傳送 (可結合的) 委派的引動過程清單。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-206">Concatenates the invocation lists of the specified multicast (combinable) delegates.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Combine">
      <MemberSignature Language="C#" Value="public static Delegate Combine (params Delegate[] delegates);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate Combine(class System.Delegate[] delegates) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.Combine(System.Delegate[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Combine (ParamArray delegates As Delegate()) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ Combine(... cli::array &lt;Delegate ^&gt; ^ delegates);" />
      <MemberSignature Language="F#" Value="static member Combine : Delegate[] -&gt; Delegate" Usage="System.Delegate.Combine delegates" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegates" Type="System.Delegate[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="delegates">
          <span data-ttu-id="45f0e-207">要結合的委派陣列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-207">The array of delegates to combine.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45f0e-208">串連委派陣列的引動過程清單。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-208">Concatenates the invocation lists of an array of delegates.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45f0e-209">具有引動過程清單的新委派，這個清單可串連 <paramref name="delegates" /> 陣列中委派的引動過程清單。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-209">A new delegate with an invocation list that concatenates the invocation lists of the delegates in the <paramref name="delegates" /> array.</span>
          </span>
          <span data-ttu-id="45f0e-210">如果 <paramref name="delegates" /> 是 <see langword="null" />、<paramref name="delegates" /> 包含零個項目，或者 <paramref name="delegates" /> 中的每個項目都是 <see langword="null" />，則會傳回 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-210">Returns <see langword="null" /> if <paramref name="delegates" /> is <see langword="null" />, if <paramref name="delegates" /> contains zero elements, or if every entry in <paramref name="delegates" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45f0e-211">如果`delegates`陣列包含的項目`null`，這些項目都會被忽略。</span><span class="sxs-lookup"><span data-stu-id="45f0e-211">If the `delegates` array contains entries that are `null`, those entries are ignored.</span></span>  
  
 <span data-ttu-id="45f0e-212">引動過程清單可以包含重複的項目;也就是指相同的方法相同的物件上的項目。</span><span class="sxs-lookup"><span data-stu-id="45f0e-212">The invocation list can contain duplicate entries; that is, entries that refer to the same method on the same object.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="45f0e-213">與指派相容的泛型委派因為時間差異不一定是可組合的類別。</span><span class="sxs-lookup"><span data-stu-id="45f0e-213">Generic delegates that are assignment-compatible because of variance are not necessarily combinable.</span></span> <span data-ttu-id="45f0e-214">若要可組合的類別，類型必須完全相符。</span><span class="sxs-lookup"><span data-stu-id="45f0e-214">To be combinable, the types must match exactly.</span></span> <span data-ttu-id="45f0e-215">例如，假設 具名的類別`Derived`衍生自類別，名為`Base`。</span><span class="sxs-lookup"><span data-stu-id="45f0e-215">For example, suppose that a class named `Derived` is derived from a class named `Base`.</span></span> <span data-ttu-id="45f0e-216">類型的委派`Action<Base>`(`Action(Of Base)` Visual Basic 中) 可以指派給類型的變數`Action<Derived>`，如下所述[共變性與逆變性](~/docs/standard/generics/covariance-and-contravariance.md)，但無法合併兩個委派，因為型別不完全相符。</span><span class="sxs-lookup"><span data-stu-id="45f0e-216">A delegate of type `Action<Base>` (`Action(Of Base)` in Visual Basic) can be assigned to a variable of type `Action<Derived>`, as explained in [Covariance and Contravariance](~/docs/standard/generics/covariance-and-contravariance.md), but the two delegates cannot be combined because the types do not match exactly.</span></span>  
  
 <span data-ttu-id="45f0e-217"><xref:System.Delegate.Combine%2A> 可用於建立多個方法的時間事件的呼叫，就會發生的事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="45f0e-217"><xref:System.Delegate.Combine%2A> is useful for creating event handlers that call multiple methods each time an event occurs.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="45f0e-218">並非 <paramref name="delegates" /> 中的所有非 null 項目都是相同委派類型的執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-218">Not all the non-null entries in <paramref name="delegates" /> are instances of the same delegate type.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="45f0e-219">當叫用晚期繫結機制透過例如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-219">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="45f0e-220">相關聯的列舉型別： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-220">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="M:System.Delegate.CombineImpl(System.Delegate)" />
      </Docs>
    </Member>
    <Member MemberName="Combine">
      <MemberSignature Language="C#" Value="public static Delegate Combine (Delegate a, Delegate b);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate Combine(class System.Delegate a, class System.Delegate b) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.Combine(System.Delegate,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Combine (a As Delegate, b As Delegate) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ Combine(Delegate ^ a, Delegate ^ b);" />
      <MemberSignature Language="F#" Value="static member Combine : Delegate * Delegate -&gt; Delegate" Usage="System.Delegate.Combine (a, b)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Delegate" />
        <Parameter Name="b" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="a">
          <span data-ttu-id="45f0e-221">引動過程清單首先到達的委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-221">The delegate whose invocation list comes first.</span>
          </span>
        </param>
        <param name="b">
          <span data-ttu-id="45f0e-222">引動過程清單最後到達的委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-222">The delegate whose invocation list comes last.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45f0e-223">串連兩個委派的引動過程清單。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-223">Concatenates the invocation lists of two delegates.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45f0e-224">具有引動過程清單的新委派，這個清單可以該順序串連 <paramref name="a" /> 和 <paramref name="b" /> 的引動過程清單。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-224">A new delegate with an invocation list that concatenates the invocation lists of <paramref name="a" /> and <paramref name="b" /> in that order.</span>
          </span>
          <span data-ttu-id="45f0e-225">如果 <paramref name="b" /> 為 <see langword="null" />，則會傳回 <paramref name="a" />；如果 <paramref name="a" /> 為 Null 參考，則會傳回 <paramref name="b" />；如果 <paramref name="a" /> 和 <paramref name="b" /> 兩者都是 Null 參考，則會傳回 Null 參考。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-225">Returns <paramref name="a" /> if <paramref name="b" /> is <see langword="null" />, returns <paramref name="b" /> if <paramref name="a" /> is a null reference, and returns a null reference if both <paramref name="a" /> and <paramref name="b" /> are null references.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45f0e-226">引動過程清單可以包含重複的項目;也就是指相同的方法相同的物件上的項目。</span><span class="sxs-lookup"><span data-stu-id="45f0e-226">The invocation list can contain duplicate entries; that is, entries that refer to the same method on the same object.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="45f0e-227">與指派相容的泛型委派因為時間差異不一定是可組合的類別。</span><span class="sxs-lookup"><span data-stu-id="45f0e-227">Generic delegates that are assignment-compatible because of variance are not necessarily combinable.</span></span> <span data-ttu-id="45f0e-228">若要可組合的類別，類型必須完全相符。</span><span class="sxs-lookup"><span data-stu-id="45f0e-228">To be combinable, the types must match exactly.</span></span> <span data-ttu-id="45f0e-229">例如，假設 具名的類別`Derived`衍生自類別，名為`Base`。</span><span class="sxs-lookup"><span data-stu-id="45f0e-229">For example, suppose that a class named `Derived` is derived from a class named `Base`.</span></span> <span data-ttu-id="45f0e-230">類型的委派`Action<Base>`(`Action(Of Base)` Visual Basic 中) 可以指派給類型的變數`Action<Derived>`，如下所述[共變性與逆變性](~/docs/standard/generics/covariance-and-contravariance.md)，但無法合併兩個委派，因為型別不完全相符。</span><span class="sxs-lookup"><span data-stu-id="45f0e-230">A delegate of type `Action<Base>` (`Action(Of Base)` in Visual Basic) can be assigned to a variable of type `Action<Derived>`, as explained in [Covariance and Contravariance](~/docs/standard/generics/covariance-and-contravariance.md), but the two delegates cannot be combined because the types do not match exactly.</span></span>  
  
 <span data-ttu-id="45f0e-231"><xref:System.Delegate.Combine%2A> 可用於建立多個方法的時間事件的呼叫，就會發生的事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="45f0e-231"><xref:System.Delegate.Combine%2A> is useful for creating event handlers that call multiple methods each time an event occurs.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="45f0e-232">
            <paramref name="a" /> 和 <paramref name="b" /> 都不是 <see langword="null" />，而且 <paramref name="a" /> 和 <paramref name="b" /> 不是相同委派類型的執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-232">Both <paramref name="a" /> and <paramref name="b" /> are not <see langword="null" />, and <paramref name="a" /> and <paramref name="b" /> are not instances of the same delegate type.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="45f0e-233">當叫用晚期繫結機制透過例如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-233">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="45f0e-234">相關聯的列舉型別： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-234">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="M:System.Delegate.CombineImpl(System.Delegate)" />
      </Docs>
    </Member>
    <Member MemberName="CombineImpl">
      <MemberSignature Language="C#" Value="protected virtual Delegate CombineImpl (Delegate d);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Delegate CombineImpl(class System.Delegate d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CombineImpl(System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CombineImpl (d As Delegate) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual Delegate ^ CombineImpl(Delegate ^ d);" />
      <MemberSignature Language="F#" Value="abstract member CombineImpl : Delegate -&gt; Delegate&#xA;override this.CombineImpl : Delegate -&gt; Delegate" Usage="delegate.CombineImpl d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="d">
          <span data-ttu-id="45f0e-235">多點傳送 (可結合的) 委派，其引動過程清單要附加到目前多點傳送 (可結合的) 委派的引動過程清單末端。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-235">The multicast (combinable) delegate whose invocation list to append to the end of the invocation list of the current multicast (combinable) delegate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45f0e-236">串連指定的多點傳送 (可結合的) 委派和目前多點傳送 (可結合的) 委派的引動過程清單。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-236">Concatenates the invocation lists of the specified multicast (combinable) delegate and the current multicast (combinable) delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45f0e-237">具有引動過程清單的新多點傳送 (可結合式) 委派，此清單可串連目前多點傳送 (可結合式) 委派的引動過程清單和 <paramref name="d" /> 的引動過程清單之委派；而在 <paramref name="d" /> 為 <see langword="null" /> 時，則為目前多點傳送 (可結合式) 委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-237">A new multicast (combinable) delegate with an invocation list that concatenates the invocation list of the current multicast (combinable) delegate and the invocation list of <paramref name="d" />, or the current multicast (combinable) delegate if <paramref name="d" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45f0e-238">這個方法只適用於目前的委派是多點傳送 （可結合式）。</span><span class="sxs-lookup"><span data-stu-id="45f0e-238">This method applies only if the current delegate is multicast (combinable).</span></span>  
  
 <span data-ttu-id="45f0e-239">目前的實作只會擲回<xref:System.MulticastNotSupportedException>。</span><span class="sxs-lookup"><span data-stu-id="45f0e-239">The current implementation simply throws a <xref:System.MulticastNotSupportedException>.</span></span>  
  
 <span data-ttu-id="45f0e-240">引動過程清單可以包含重複的項目;也就是指相同的方法相同的物件上的項目。</span><span class="sxs-lookup"><span data-stu-id="45f0e-240">The invocation list can contain duplicate entries; that is, entries that refer to the same method on the same object.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MulticastNotSupportedException">
          <span data-ttu-id="45f0e-241">一律擲回。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-241">Always thrown.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="45f0e-242">當叫用晚期繫結機制透過例如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-242">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="45f0e-243">相關聯的列舉型別： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-243">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Delegate.Combine(System.Delegate,System.Delegate)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateDelegate">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="45f0e-244">建立指定類型的委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-244">Creates a delegate of the specified type.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * System.Reflection.MethodInfo -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="45f0e-245">要建立之委派的 <see cref="T:System.Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-245">The <see cref="T:System.Type" /> of delegate to create.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="45f0e-246">
            <see cref="T:System.Reflection.MethodInfo" />，描述委派所要表示的靜態或執行個體方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-246">The <see cref="T:System.Reflection.MethodInfo" /> describing the static or instance method the delegate is to represent.</span>
          </span>
          <span data-ttu-id="45f0e-247">在 .NET Framework 1.0 和 1.1 版中只支援靜態方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-247">Only static methods are supported in the .NET Framework version 1.0 and 1.1.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45f0e-248">建立指定類型的委派來表示指定的靜態方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-248">Creates a delegate of the specified type to represent the specified static method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45f0e-249">指定類型的委派，用來表示指定的靜態方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-249">A delegate of the specified type to represent the specified static method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45f0e-250">在.NET Framework 1.0 和 1.1 版中，這個方法多載會建立只有靜態方法的委派。</span><span class="sxs-lookup"><span data-stu-id="45f0e-250">In the .NET Framework version 1.0 and 1.1, this method overload creates delegates for static methods only.</span></span> <span data-ttu-id="45f0e-251">在.NET Framework 2.0 版中，這個方法多載也可以建立開啟的執行個體方法委派，也就是明確地提供隱藏第一個引數的委派執行個體方法。</span><span class="sxs-lookup"><span data-stu-id="45f0e-251">In the .NET Framework version 2.0, this method overload also can create open instance method delegates; that is, delegates that explicitly supply the hidden first argument of instance methods.</span></span> <span data-ttu-id="45f0e-252">如需詳細說明，請參閱更多一般<xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%29>方法多載，可讓您建立所有組合的開放式或封閉式的委派執行個體或靜態方法，並選擇性地指定第一個引數。</span><span class="sxs-lookup"><span data-stu-id="45f0e-252">For a detailed explanation, see the more general <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%29> method overload, which allows you to create all combinations of open or closed delegates for instance or static methods, and optionally to specify a first argument.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="45f0e-253">這個方法多載應該時使用委派未關閉透過其第一個引數，因為它在此情況下是稍快。</span><span class="sxs-lookup"><span data-stu-id="45f0e-253">This method overload should be used when the delegate is not closed over its first argument, because it is somewhat faster in that case.</span></span>  
  
 <span data-ttu-id="45f0e-254">這個方法多載就相當於呼叫<xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29>方法多載，並指定`true`如`throwOnBindFailure`。</span><span class="sxs-lookup"><span data-stu-id="45f0e-254">This method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload and specifying `true` for `throwOnBindFailure`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="45f0e-255">開頭[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，這個方法可用來存取非公用方法，如果呼叫者已授與<xref:System.Security.Permissions.ReflectionPermission>使用<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>旗標，並限制為呼叫端的非公用方法的授權集是否授與集或子集效果。</span><span class="sxs-lookup"><span data-stu-id="45f0e-255">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="45f0e-256">(請參閱[反映的安全性考量](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)。)</span><span class="sxs-lookup"><span data-stu-id="45f0e-256">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="45f0e-257">若要使用這項功能，您的應用程式應將目標設為 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] (含) 以後版本。</span><span class="sxs-lookup"><span data-stu-id="45f0e-257">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
## <a name="compatible-parameter-types-and-return-type"></a><span data-ttu-id="45f0e-258">相容的參數型別和傳回型別</span><span class="sxs-lookup"><span data-stu-id="45f0e-258">Compatible Parameter Types and Return Type</span></span>  
 <span data-ttu-id="45f0e-259">在.NET Framework 2.0 版中，使用這個方法多載建立委派的傳回型別與參數類型必須是相容的參數類型和委派所表示; 方法的傳回型別型別沒有完全相符。</span><span class="sxs-lookup"><span data-stu-id="45f0e-259">In the .NET Framework version 2.0, the parameter types and return type of a delegate created using this method overload must be compatible with the parameter types and return type of the method the delegate represents; the types do not have to match exactly.</span></span> <span data-ttu-id="45f0e-260">這代表鬆散的.NET Framework 1.0 和 1.1 中，類型必須完全相符的版本中的繫結行為。</span><span class="sxs-lookup"><span data-stu-id="45f0e-260">This represents a relaxation of the binding behavior in the .NET Framework version 1.0 and 1.1, where the types must match exactly.</span></span>  
  
 <span data-ttu-id="45f0e-261">如果委派參數的型別比方法參數的型別更嚴格，則委派的參數與對應的方法參數相容，因為這樣可保證傳遞給委派的引數能夠安全地傳遞給方法。</span><span class="sxs-lookup"><span data-stu-id="45f0e-261">A parameter of a delegate is compatible with the corresponding parameter of a method if the type of the delegate parameter is more restrictive than the type of the method parameter, because this guarantees that an argument passed to the delegate can be passed safely to the method.</span></span>  
  
 <span data-ttu-id="45f0e-262">同樣的，如果方法的傳回型別比委派的傳回型別更具限制性，由於此保證方法傳回的值會安全地轉換為委派的傳回型別，委派的傳回型別就會相容於方法的傳回型別。</span><span class="sxs-lookup"><span data-stu-id="45f0e-262">Similarly, the return type of a delegate is compatible with the return type of a method if the return type of the method is more restrictive than the return type of the delegate, because this guarantees that the return value of the method can be cast safely to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="45f0e-263">例如，使用類型參數的委派<xref:System.Collections.Hashtable>和傳回型別<xref:System.Object>可以代表具有一個型別的參數的方法<xref:System.Object>以及傳回值的型別<xref:System.Collections.Hashtable>。</span><span class="sxs-lookup"><span data-stu-id="45f0e-263">For example, a delegate with a parameter of type <xref:System.Collections.Hashtable> and a return type of <xref:System.Object> can represent a method with a parameter of type <xref:System.Object> and a return value of type <xref:System.Collections.Hashtable>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="45f0e-264">本節包含兩個程式碼範例。</span><span class="sxs-lookup"><span data-stu-id="45f0e-264">This section contains two code examples.</span></span> <span data-ttu-id="45f0e-265">第一個範例示範的委派，可以使用這個方法多載來建立兩種： 透過執行個體方法開啟，並開啟移轉的靜態方法。</span><span class="sxs-lookup"><span data-stu-id="45f0e-265">The first example demonstrates the two kinds of delegates that can be created with this method overload: open over an instance method and open over a static method.</span></span>  
  
 <span data-ttu-id="45f0e-266">第二個程式碼範例會示範相容的參數型別和傳回型別。</span><span class="sxs-lookup"><span data-stu-id="45f0e-266">The second code example demonstrates compatible parameter types and return types.</span></span>  
  
 <span data-ttu-id="45f0e-267">**範例 1**</span><span class="sxs-lookup"><span data-stu-id="45f0e-267">**Example 1**</span></span>  
  
 <span data-ttu-id="45f0e-268">下列程式碼範例示範兩種方式可以建立委派，使用的這個多載<xref:System.Delegate.CreateDelegate%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="45f0e-268">The following code example demonstrates the two ways a delegate can be created using this overload of the <xref:System.Delegate.CreateDelegate%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="45f0e-269">有兩個多載<xref:System.Delegate.CreateDelegate%2A>指定的方法<xref:System.Reflection.MethodInfo>不的第一次的引數，但其功能都相同，但是其中一個可讓您指定是否要在繫結，失敗時擲回，而其他一律會擲回。</span><span class="sxs-lookup"><span data-stu-id="45f0e-269">There are two overloads of the <xref:System.Delegate.CreateDelegate%2A> method that specify a <xref:System.Reflection.MethodInfo> but not a first argument; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws.</span></span> <span data-ttu-id="45f0e-270">此程式碼範例會使用這兩個多載。</span><span class="sxs-lookup"><span data-stu-id="45f0e-270">This code example uses both overloads.</span></span>  
  
 <span data-ttu-id="45f0e-271">此範例會宣告類別`C`靜態方法`M2`和執行個體方法`M1`，以及兩個委派型別：`D1`可接受的執行個體`C`和一個字串和`D2`採用字串。</span><span class="sxs-lookup"><span data-stu-id="45f0e-271">The example declares a class `C` with a static method `M2` and an instance method `M1`, and two delegate types: `D1` takes an instance of `C` and a string, and `D2` takes a string.</span></span>  
  
 <span data-ttu-id="45f0e-272">第二個類別，名為`Example`包含建立委派的程式碼。</span><span class="sxs-lookup"><span data-stu-id="45f0e-272">A second class named `Example` contains the code that creates the delegates.</span></span>  
  
-   <span data-ttu-id="45f0e-273">類型的委派`D1`，表示開啟執行個體方法，建立執行個體方法`M1`。</span><span class="sxs-lookup"><span data-stu-id="45f0e-273">A delegate of type `D1`, representing an open instance method, is created for the instance method `M1`.</span></span> <span data-ttu-id="45f0e-274">叫用委派時，必須傳遞執行個體。</span><span class="sxs-lookup"><span data-stu-id="45f0e-274">An instance must be passed when the delegate is invoked.</span></span>  
  
-   <span data-ttu-id="45f0e-275">類型的委派`D2`，表示開啟的靜態方法，靜態方法，建立`M2`。</span><span class="sxs-lookup"><span data-stu-id="45f0e-275">A delegate of type `D2`, representing an open static method, is created for the static method `M2`.</span></span>  
  
 [!code-csharp[Delegate.CreateDelegateTOM#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegateTOM/cs/openClosedOver.cs#1)]
 [!code-vb[Delegate.CreateDelegateTOM#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegateTOM/VB/openClosedOver.vb#1)]  
  
 <span data-ttu-id="45f0e-276">**範例 2**</span><span class="sxs-lookup"><span data-stu-id="45f0e-276">**Example 2**</span></span>  
  
 <span data-ttu-id="45f0e-277">下列程式碼範例示範的參數類型相容性，並傳回型別。</span><span class="sxs-lookup"><span data-stu-id="45f0e-277">The following code example demonstrates compatibility of parameter types and return types.</span></span>  
  
 <span data-ttu-id="45f0e-278">在程式碼範例定義名為基底類別`Base`和名為類別`Derived`衍生自`Base`。</span><span class="sxs-lookup"><span data-stu-id="45f0e-278">The code example defines a base class named `Base` and a class named `Derived` that derives from `Base`.</span></span> <span data-ttu-id="45f0e-279">衍生的類別有`static`(`Shared` Visual Basic 中) 名為方法`MyMethod`具有一個參數的型別`Base`且傳回類型為`Derived`。</span><span class="sxs-lookup"><span data-stu-id="45f0e-279">The derived class has a `static` (`Shared` in Visual Basic) method named `MyMethod` with one parameter of type `Base` and a return type of `Derived`.</span></span> <span data-ttu-id="45f0e-280">在程式碼範例也會定義名為委派`Example`具有一個參數的型別`Derived`且傳回類型為`Base`。</span><span class="sxs-lookup"><span data-stu-id="45f0e-280">The code example also defines a delegate named `Example` that has one parameter of type `Derived` and a return type of `Base`.</span></span>  
  
 <span data-ttu-id="45f0e-281">在程式碼範例示範委派名為`Example`可用來表示方法`MyMethod`。</span><span class="sxs-lookup"><span data-stu-id="45f0e-281">The code example demonstrates that the delegate named `Example` can be used to represent the method `MyMethod`.</span></span> <span data-ttu-id="45f0e-282">此方法可以繫結至委派，因為：</span><span class="sxs-lookup"><span data-stu-id="45f0e-282">The method can be bound to the delegate because:</span></span>  
  
-   <span data-ttu-id="45f0e-283">委派的參數類型 (`Derived`) 是更具限制性的參數型別`MyMethod`(`Base`)，如此一來，它一律是安全地傳遞至委派的引數`MyMethod`。</span><span class="sxs-lookup"><span data-stu-id="45f0e-283">The parameter type of the delegate (`Derived`) is more restrictive than the parameter type of `MyMethod` (`Base`), so that it is always safe to pass the argument of the delegate to `MyMethod`.</span></span>  
  
-   <span data-ttu-id="45f0e-284">傳回型別`MyMethod`(`Derived`) 是更具限制性的委派參數類型 (`Base`)，如此一來，一定是安全轉型為委派的傳回型別方法的傳回型別。</span><span class="sxs-lookup"><span data-stu-id="45f0e-284">The return type of `MyMethod` (`Derived`) is more restrictive than the parameter type of the delegate (`Base`), so that it is always safe to cast the return type of the method to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="45f0e-285">在程式碼範例會產生任何輸出。</span><span class="sxs-lookup"><span data-stu-id="45f0e-285">The code example produces no output.</span></span>  
  
 [!code-cpp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/cpp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cpp/source.cpp#1)]
 [!code-csharp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cs/source.cs#1)]
 [!code-vb[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="45f0e-286">
            <paramref name="type" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-286">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="45f0e-287">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-287">-or-</span>
          </span>
          <span data-ttu-id="45f0e-288">
            <paramref name="method" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-288">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="45f0e-289">
            <paramref name="type" /> 不會繼承 <see cref="T:System.MulticastDelegate" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-289">
              <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          </span>
          <span data-ttu-id="45f0e-290">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-290">-or-</span>
          </span>
          <span data-ttu-id="45f0e-291">
            <paramref name="type" /> 不是 <see langword="RuntimeType" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-291">
              <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="45f0e-292">請參閱[反映中的執行階段類型](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-292">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
          <span data-ttu-id="45f0e-293">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-293">-or-</span>
          </span>
          <span data-ttu-id="45f0e-294">
            <paramref name="method" /> 不是靜態方法，且 .NET Framework 版本為 1.0 或 1.1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-294">
              <paramref name="method" /> is not a static method, and the .NET Framework version is 1.0 or 1.1.</span>
          </span>
          <span data-ttu-id="45f0e-295">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-295">-or-</span>
          </span>
          <span data-ttu-id="45f0e-296">無法繫結 <paramref name="method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-296">
              <paramref name="method" /> cannot be bound.</span>
          </span>
          <span data-ttu-id="45f0e-297">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-297">-or-</span>
          </span>
          <span data-ttu-id="45f0e-298">
            <paramref name="method" /> 不是 <see langword="RuntimeMethodInfo" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-298">
              <paramref name="method" /> is not a <see langword="RuntimeMethodInfo" />.</span>
          </span>
          <span data-ttu-id="45f0e-299">請參閱[反映中的執行階段類型](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-299">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="45f0e-300">找不到 <paramref name="type" /> 的 <see langword="Invoke" /> 方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-300">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="45f0e-301">呼叫端沒有存取 <paramref name="method" /> 所需的權限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-301">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="45f0e-302">當叫用晚期繫結機制透過例如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-302">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="45f0e-303">關聯的列舉型別：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-303">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, object firstArgument, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, object firstArgument, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Object ^ firstArgument, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * obj * System.Reflection.MethodInfo -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, firstArgument, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="firstArgument" Type="System.Object" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="45f0e-304">要建立之委派的 <see cref="T:System.Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-304">The <see cref="T:System.Type" /> of delegate to create.</span>
          </span>
        </param>
        <param name="firstArgument">
          <span data-ttu-id="45f0e-305">此委派要繫結的物件，或是 <see langword="null" />，表示將 <c>method</c> 視為 <see langword="static" /> (Visual Basic 中則為 <see langword="Shared" />)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-305">The object to which the delegate is bound, or <see langword="null" /> to treat <c>method</c> as <see langword="static" /> (<see langword="Shared" /> in Visual Basic).</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="45f0e-306">
            <see cref="T:System.Reflection.MethodInfo" />，描述委派所要表示的靜態或執行個體方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-306">The <see cref="T:System.Reflection.MethodInfo" /> describing the static or instance method the delegate is to represent.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45f0e-307">建立指定之類型的委派，其表示指定之靜態或執行個體方法，並有指定第一個引數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-307">Creates a delegate of the specified type that represents the specified static or instance method, with the specified first argument.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45f0e-308">指定之類型的委派，其表示指定的靜態或執行個體方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-308">A delegate of the specified type that represents the specified static or instance method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45f0e-309">呼叫這個方法多載就相當於呼叫<xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29>方法多載，並指定`true`如`throwOnBindFailure`。</span><span class="sxs-lookup"><span data-stu-id="45f0e-309">Calling this method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload and specifying `true` for `throwOnBindFailure`.</span></span> <span data-ttu-id="45f0e-310">這些兩個多載會提供最具彈性的方式來建立委派。</span><span class="sxs-lookup"><span data-stu-id="45f0e-310">These two overloads provide the most flexible way to create delegates.</span></span> <span data-ttu-id="45f0e-311">您可以使用它們來建立委派的靜態或執行個體方法，並選擇性地指定第一個引數。</span><span class="sxs-lookup"><span data-stu-id="45f0e-311">You can use them to create delegates for either static or instance methods, and optionally to specify the first argument.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="45f0e-312">如果您未提供第一個引數，使用<xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29>方法多載，以提升效能。</span><span class="sxs-lookup"><span data-stu-id="45f0e-312">If you do not supply a first argument, use the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> method overload for better performance.</span></span>  
  
 <span data-ttu-id="45f0e-313">委派型別和方法必須具有相容傳回型別。</span><span class="sxs-lookup"><span data-stu-id="45f0e-313">The delegate type and the method must have compatible return types.</span></span> <span data-ttu-id="45f0e-314">也就是說，傳回型別`method`必須是指派給的傳回型別`type`。</span><span class="sxs-lookup"><span data-stu-id="45f0e-314">That is, the return type of `method` must be assignable to the return type of `type`.</span></span>  
  
 <span data-ttu-id="45f0e-315">如果`firstArgument`是提供，則會傳遞至`method`每次叫用委派時;`firstArgument`稱為繫結至委派，以及此委派會在第一個引數上關閉。</span><span class="sxs-lookup"><span data-stu-id="45f0e-315">If `firstArgument` is supplied, it is passed to `method` every time the delegate is invoked; `firstArgument` is said to be bound to the delegate, and the delegate is said to be closed over its first argument.</span></span> <span data-ttu-id="45f0e-316">如果`method`已`static`(`Shared`在 Visual Basic 中)，則引數叫用委派時所提供的清單包含第一個; 以外的所有參數，如果`method`是執行個體方法，然後`firstArgument`傳遞到隱藏的執行個體參數 (由`this`在 C# 中，或由`Me`Visual Basic 中)。</span><span class="sxs-lookup"><span data-stu-id="45f0e-316">If `method` is `static` (`Shared` in Visual Basic), the argument list supplied when invoking the delegate includes all parameters except the first; if `method` is an instance method, then `firstArgument` is passed to the hidden instance parameter (represented by `this` in C#, or by `Me` in Visual Basic).</span></span>  
  
 <span data-ttu-id="45f0e-317">如果`firstArgument`提供的第一個參數`method`必須是參考型別和`firstArgument`必須相容於該型別。</span><span class="sxs-lookup"><span data-stu-id="45f0e-317">If `firstArgument` is supplied, the first parameter of `method` must be a reference type, and `firstArgument` must be compatible with that type.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="45f0e-318">如果`method`已`static`(`Shared`在 Visual Basic 中) 以及其第一個參數為類型<xref:System.Object>或<xref:System.ValueType>，然後`firstArgument`可以是實值型別。</span><span class="sxs-lookup"><span data-stu-id="45f0e-318">If `method` is `static` (`Shared` in Visual Basic) and its first parameter is of type <xref:System.Object> or <xref:System.ValueType>, then `firstArgument` can be a value type.</span></span> <span data-ttu-id="45f0e-319">在此情況下`firstArgument`會自動進行 boxed 處理。</span><span class="sxs-lookup"><span data-stu-id="45f0e-319">In this case `firstArgument` is automatically boxed.</span></span> <span data-ttu-id="45f0e-320">自動 boxing 不會發生的任何其他引數，因為它會以 C# 或 Visual Basic 函式呼叫。</span><span class="sxs-lookup"><span data-stu-id="45f0e-320">Automatic boxing does not occur for any other arguments, as it would in a C# or Visual Basic function call.</span></span>  
  
 <span data-ttu-id="45f0e-321">如果`firstArgument`為 null 參考並`method`是執行個體方法，結果會取決於委派型別的簽章`type`以及`method`:</span><span class="sxs-lookup"><span data-stu-id="45f0e-321">If `firstArgument` is a null reference and `method` is an instance method, the result depends on the signatures of the delegate type `type` and of `method`:</span></span>  
  
-   <span data-ttu-id="45f0e-322">如果簽章`type`明確包含隱藏第一個參數`method`，此委派表示開啟執行個體方法。</span><span class="sxs-lookup"><span data-stu-id="45f0e-322">If the signature of `type` explicitly includes the hidden first parameter of `method`, the delegate is said to represent an open instance method.</span></span> <span data-ttu-id="45f0e-323">叫用委派時，要將引數清單中的第一個引數傳遞給隱藏的執行個體參數`method`。</span><span class="sxs-lookup"><span data-stu-id="45f0e-323">When the delegate is invoked, the first argument in the argument list is passed to the hidden instance parameter of `method`.</span></span>  
  
-   <span data-ttu-id="45f0e-324">如果簽章`method`和`type`符合 （也就是所有的參數型別都相容），則此委派會在 null 參考上關閉。</span><span class="sxs-lookup"><span data-stu-id="45f0e-324">If the signatures of `method` and `type` match (that is, all parameter types are compatible), then the delegate is said to be closed over a null reference.</span></span> <span data-ttu-id="45f0e-325">叫用委派就像是在 null 執行個體，不是一個特別有用的東西，要呼叫的執行個體方法。</span><span class="sxs-lookup"><span data-stu-id="45f0e-325">Invoking the delegate is like calling an instance method on a null instance, which is not a particularly useful thing to do.</span></span>  
  
 <span data-ttu-id="45f0e-326">如果`firstArgument`為 null 參考並`method`是靜態的結果會取決於委派型別的簽章`type`以及`method`:</span><span class="sxs-lookup"><span data-stu-id="45f0e-326">If `firstArgument` is a null reference and `method` is static, the result depends on the signatures of the delegate type `type` and of `method`:</span></span>  
  
-   <span data-ttu-id="45f0e-327">如果簽章`method`和`type`符合 （也就是所有的參數型別都相容），此委派會表示開啟的靜態方法。</span><span class="sxs-lookup"><span data-stu-id="45f0e-327">If the signature of `method` and `type` match (that is, all parameter types are compatible), the delegate is said to represent an open static method.</span></span> <span data-ttu-id="45f0e-328">這是最常見的案例，對於靜態方法。</span><span class="sxs-lookup"><span data-stu-id="45f0e-328">This is the most common case for static methods.</span></span> <span data-ttu-id="45f0e-329">在此情況下，您可以在這裡取得更好的效能使用<xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29>方法多載。</span><span class="sxs-lookup"><span data-stu-id="45f0e-329">In this case, you can get slightly better performance by using the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> method overload.</span></span>  
  
-   <span data-ttu-id="45f0e-330">如果簽章`type`開頭的第二個參數`method`和其餘的參數類型相容，則此委派會在 null 參考上關閉。</span><span class="sxs-lookup"><span data-stu-id="45f0e-330">If the signature of `type` begins with the second parameter of `method` and the rest of the parameter types are compatible, then the delegate is said to be closed over a null reference.</span></span> <span data-ttu-id="45f0e-331">第一個參數來叫用委派時，要傳遞 null 參考`method`。</span><span class="sxs-lookup"><span data-stu-id="45f0e-331">When the delegate is invoked, a null reference is passed to the first parameter of `method`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="45f0e-332">開頭[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，這個方法可用來存取非公用方法，如果呼叫者已授與<xref:System.Security.Permissions.ReflectionPermission>使用<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>旗標，並限制為呼叫端的非公用方法的授權集是否授與集或子集效果。</span><span class="sxs-lookup"><span data-stu-id="45f0e-332">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="45f0e-333">(請參閱[反映的安全性考量](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)。)</span><span class="sxs-lookup"><span data-stu-id="45f0e-333">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="45f0e-334">若要使用這項功能，您的應用程式應將目標設為 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] (含) 以後版本。</span><span class="sxs-lookup"><span data-stu-id="45f0e-334">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
## <a name="compatible-parameter-types-and-return-type"></a><span data-ttu-id="45f0e-335">相容的參數型別和傳回型別</span><span class="sxs-lookup"><span data-stu-id="45f0e-335">Compatible Parameter Types and Return Type</span></span>  
 <span data-ttu-id="45f0e-336">參數類型和委派的傳回型別必須與參數類型和委派所表示; 方法的傳回型別相容型別沒有完全相符。</span><span class="sxs-lookup"><span data-stu-id="45f0e-336">The parameter types and return type of a delegate must be compatible with the parameter types and return type of the method the delegate represents; the types do not have to match exactly.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="45f0e-337">在.NET Framework 1.0 和 1.1 版中，類型必須完全相符。</span><span class="sxs-lookup"><span data-stu-id="45f0e-337">In the .NET Framework version 1.0 and 1.1, the types must match exactly.</span></span>  
  
 <span data-ttu-id="45f0e-338">如果委派參數的型別比方法參數的型別更嚴格，則委派的參數與對應的方法參數相容，因為這樣可保證傳遞給委派的引數能夠安全地傳遞給方法。</span><span class="sxs-lookup"><span data-stu-id="45f0e-338">A parameter of a delegate is compatible with the corresponding parameter of a method if the type of the delegate parameter is more restrictive than the type of the method parameter, because this guarantees that an argument passed to the delegate can be passed safely to the method.</span></span>  
  
 <span data-ttu-id="45f0e-339">同樣的，如果方法的傳回型別比委派的傳回型別更具限制性，由於此保證方法傳回的值會安全地轉換為委派的傳回型別，委派的傳回型別就會相容於方法的傳回型別。</span><span class="sxs-lookup"><span data-stu-id="45f0e-339">Similarly, the return type of a delegate is compatible with the return type of a method if the return type of the method is more restrictive than the return type of the delegate, because this guarantees that the return value of the method can be cast safely to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="45f0e-340">例如，使用類型參數的委派<xref:System.Collections.Hashtable>和傳回型別<xref:System.Object>可以代表具有一個型別的參數的方法<xref:System.Object>以及傳回值的型別<xref:System.Collections.Hashtable>。</span><span class="sxs-lookup"><span data-stu-id="45f0e-340">For example, a delegate with a parameter of type <xref:System.Collections.Hashtable> and a return type of <xref:System.Object> can represent a method with a parameter of type <xref:System.Object> and a return value of type <xref:System.Collections.Hashtable>.</span></span>  
  
## <a name="determining-the-methods-a-delegate-can-represent"></a><span data-ttu-id="45f0e-341">判斷方法的委派可以表示</span><span class="sxs-lookup"><span data-stu-id="45f0e-341">Determining the Methods a Delegate Can Represent</span></span>  
 <span data-ttu-id="45f0e-342">另一個實用的方式，將這個多載所提供之彈性<xref:System.Delegate.CreateDelegate%2A>是任何指定的委派可以代表四個不同的方法簽章和方法種類 （靜態和執行個體） 的組合。</span><span class="sxs-lookup"><span data-stu-id="45f0e-342">Another useful way to think of the flexibility provided by this overload of <xref:System.Delegate.CreateDelegate%2A> is that any given delegate can represent four different combinations of method signature and method kind (static versus instance).</span></span> <span data-ttu-id="45f0e-343">委派型別，請考慮`D`argumentem typu `C`。</span><span class="sxs-lookup"><span data-stu-id="45f0e-343">Consider a delegate type `D` with one argument of type `C`.</span></span> <span data-ttu-id="45f0e-344">以下描述方法`D`可以代表，忽略的傳回型別，因為它必須符合在所有情況下：</span><span class="sxs-lookup"><span data-stu-id="45f0e-344">The following describes the methods `D` can represent, ignoring the return type since it must match in all cases:</span></span>  
  
-   <span data-ttu-id="45f0e-345">`D` 可以代表任何有類型只有一個引數的執行個體方法`C`，不論執行個體方法屬於何種類型。</span><span class="sxs-lookup"><span data-stu-id="45f0e-345">`D` can represent any instance method that has exactly one argument of type `C`, regardless of what type the instance method belongs to.</span></span> <span data-ttu-id="45f0e-346">當<xref:System.Delegate.CreateDelegate%2A>呼叫時，`firstArgument`是類型的執行個體`method`所屬，並產生的委派會在該執行個體上關閉。</span><span class="sxs-lookup"><span data-stu-id="45f0e-346">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is an instance of the type `method` belongs to, and the resulting delegate is said to be closed over that instance.</span></span> <span data-ttu-id="45f0e-347">(透過極簡方式，`D`也可以關閉透過 null 參考如果`firstArgument`為 null 參考。)</span><span class="sxs-lookup"><span data-stu-id="45f0e-347">(Trivially, `D` can also be closed over a null reference if `firstArgument` is a null reference.)</span></span>  
  
-   <span data-ttu-id="45f0e-348">`D` 可以代表的執行個體方法`C`，沒有任何引數。</span><span class="sxs-lookup"><span data-stu-id="45f0e-348">`D` can represent an instance method of `C` that has no arguments.</span></span> <span data-ttu-id="45f0e-349">當<xref:System.Delegate.CreateDelegate%2A>呼叫時，`firstArgument`為 null 參考。</span><span class="sxs-lookup"><span data-stu-id="45f0e-349">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is a null reference.</span></span> <span data-ttu-id="45f0e-350">產生的委派表示開啟的執行個體方法和執行個體`C`必須提供每次叫用時。</span><span class="sxs-lookup"><span data-stu-id="45f0e-350">The resulting delegate represents an open instance method, and an instance of `C` must be supplied each time it is invoked.</span></span>  
  
-   <span data-ttu-id="45f0e-351">`D` 可以代表採用一個引數類型的靜態方法`C`，而且方法可以屬於任何類型。</span><span class="sxs-lookup"><span data-stu-id="45f0e-351">`D` can represent a static method that takes one argument of type `C`, and that method can belong to any type.</span></span> <span data-ttu-id="45f0e-352">當<xref:System.Delegate.CreateDelegate%2A>呼叫時，`firstArgument`為 null 參考。</span><span class="sxs-lookup"><span data-stu-id="45f0e-352">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is a null reference.</span></span> <span data-ttu-id="45f0e-353">產生的委派表示開啟的靜態方法和執行個體`C`必須提供每次叫用時。</span><span class="sxs-lookup"><span data-stu-id="45f0e-353">The resulting delegate represents an open static method, and an instance of `C` must be supplied each time it is invoked.</span></span>  
  
-   <span data-ttu-id="45f0e-354">`D` 可以代表屬於類型的靜態方法`F`且具有兩個引數，型別的`F`並輸入`C`。</span><span class="sxs-lookup"><span data-stu-id="45f0e-354">`D` can represent a static method that belongs to type `F` and has two arguments, of type `F` and type `C`.</span></span> <span data-ttu-id="45f0e-355">當<xref:System.Delegate.CreateDelegate%2A>呼叫時，`firstArgument`的執行個體`F`。</span><span class="sxs-lookup"><span data-stu-id="45f0e-355">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is an instance of `F`.</span></span> <span data-ttu-id="45f0e-356">產生的委派表示靜態方法，關閉該執行個體透過`F`。</span><span class="sxs-lookup"><span data-stu-id="45f0e-356">The resulting delegate represents a static method that is closed over that instance of `F`.</span></span> <span data-ttu-id="45f0e-357">請注意，萬一其中`F`和`C`都是相同的型別、 靜態方法會具有該類型的兩個引數。</span><span class="sxs-lookup"><span data-stu-id="45f0e-357">Note that in the case where `F` and `C` are the same type, the static method has two arguments of that type.</span></span> <span data-ttu-id="45f0e-358">(在此情況下，`D`如果覆蓋 null 參考`firstArgument`為 null 參考。)</span><span class="sxs-lookup"><span data-stu-id="45f0e-358">(In this case, `D` is closed over a null reference if `firstArgument` is a null reference.)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="45f0e-359">本節包含三個程式碼範例。</span><span class="sxs-lookup"><span data-stu-id="45f0e-359">This section contains three code examples.</span></span> <span data-ttu-id="45f0e-360">第一個範例示範委派可建立四種： 覆蓋的執行個體方法，透過執行個體方法，是靜態方法，透過開啟開啟和關閉透過靜態方法。</span><span class="sxs-lookup"><span data-stu-id="45f0e-360">The first example demonstrates the four kinds of delegates that can be created: closed over an instance method, open over an instance method, open over a static method, and closed over a static method.</span></span>  
  
 <span data-ttu-id="45f0e-361">第二個程式碼範例會示範相容的參數型別和傳回型別。</span><span class="sxs-lookup"><span data-stu-id="45f0e-361">The second code example demonstrates compatible parameter types and return types.</span></span>  
  
 <span data-ttu-id="45f0e-362">第三個程式碼範例會定義單一的委派類型，並顯示可以代表委派類型的所有方法。</span><span class="sxs-lookup"><span data-stu-id="45f0e-362">The third code example defines a single delegate type, and shows all the methods that delegate type can represent.</span></span>  
  
 <span data-ttu-id="45f0e-363">**範例 1**</span><span class="sxs-lookup"><span data-stu-id="45f0e-363">**Example 1**</span></span>  
  
 <span data-ttu-id="45f0e-364">下列程式碼範例示範可使用的這個多載來建立委派的四種方式<xref:System.Delegate.CreateDelegate%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="45f0e-364">The following code example demonstrates the four ways a delegate can be created using this overload of the <xref:System.Delegate.CreateDelegate%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="45f0e-365">有兩個多載<xref:System.Delegate.CreateDelegate%2A>指定的方法`firstArgument`和<xref:System.Reflection.MethodInfo>; 其功能都相同，但是其中一個可讓您指定是否要在繫結，失敗時擲回，而其他一律會擲回。</span><span class="sxs-lookup"><span data-stu-id="45f0e-365">There are two overloads of the <xref:System.Delegate.CreateDelegate%2A> method that specify `firstArgument` and a <xref:System.Reflection.MethodInfo>; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws.</span></span> <span data-ttu-id="45f0e-366">此程式碼範例會使用這兩個多載。</span><span class="sxs-lookup"><span data-stu-id="45f0e-366">This code example uses both overloads.</span></span>  
  
 <span data-ttu-id="45f0e-367">此範例會宣告類別`C`靜態方法`M2`和執行個體方法`M1`，以及三個委派型別：`D1`可接受的執行個體`C`和字串，`D2`接受字串，而`D3`沒有任何引數。</span><span class="sxs-lookup"><span data-stu-id="45f0e-367">The example declares a class `C` with a static method `M2` and an instance method `M1`, and three delegate types: `D1` takes an instance of `C` and a string, `D2` takes a string, and `D3` has no arguments.</span></span>  
  
 <span data-ttu-id="45f0e-368">第二個類別，名為`Example`包含建立委派的程式碼。</span><span class="sxs-lookup"><span data-stu-id="45f0e-368">A second class named `Example` contains the code that creates the delegates.</span></span>  
  
-   <span data-ttu-id="45f0e-369">類型的委派`D2`、 已關閉的執行個體透過`C`，建立執行個體方法`M1`。</span><span class="sxs-lookup"><span data-stu-id="45f0e-369">A delegate of type `D2`, closed over an instance of `C`, is created for the instance method `M1`.</span></span> <span data-ttu-id="45f0e-370">它會使用不同的字串，表示繫結執行個體叫用`C`一律會使用。</span><span class="sxs-lookup"><span data-stu-id="45f0e-370">It is invoked with different strings, to show that the bound instance of `C` is always used.</span></span>  
  
-   <span data-ttu-id="45f0e-371">類型的委派`D1`，表示開啟執行個體方法，建立執行個體方法`M1`。</span><span class="sxs-lookup"><span data-stu-id="45f0e-371">A delegate of type `D1`, representing an open instance method, is created for the instance method `M1`.</span></span> <span data-ttu-id="45f0e-372">叫用委派時，必須傳遞執行個體。</span><span class="sxs-lookup"><span data-stu-id="45f0e-372">An instance must be passed when the delegate is invoked.</span></span>  
  
-   <span data-ttu-id="45f0e-373">類型的委派`D2`，表示開啟的靜態方法，靜態方法，建立`M2`。</span><span class="sxs-lookup"><span data-stu-id="45f0e-373">A delegate of type `D2`, representing an open static method, is created for the static method `M2`.</span></span>  
  
-   <span data-ttu-id="45f0e-374">最後，類型的委派`D3`覆蓋字串、 靜態方法，建立`M2`。</span><span class="sxs-lookup"><span data-stu-id="45f0e-374">Finally, a delegate of type `D3`, closed over a string, is created for the static method `M2`.</span></span> <span data-ttu-id="45f0e-375">方法會叫用來顯示它會使用繫結的字串。</span><span class="sxs-lookup"><span data-stu-id="45f0e-375">The method is invoked to show that it uses the bound string.</span></span>  
  
 [!code-csharp[Delegate.CreateDelegateTOM#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegateTOM/cs/openClosedOver.cs#1)]
 [!code-vb[Delegate.CreateDelegateTOM#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegateTOM/VB/openClosedOver.vb#1)]  
  
 <span data-ttu-id="45f0e-376">**範例 2**</span><span class="sxs-lookup"><span data-stu-id="45f0e-376">**Example 2**</span></span>  
  
 <span data-ttu-id="45f0e-377">下列程式碼範例示範的參數類型相容性，並傳回型別。</span><span class="sxs-lookup"><span data-stu-id="45f0e-377">The following code example demonstrates compatibility of parameter types and return types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="45f0e-378">此程式碼範例會使用<xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29>方法多載。</span><span class="sxs-lookup"><span data-stu-id="45f0e-378">This code example uses the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> method overload.</span></span> <span data-ttu-id="45f0e-379">使用其他多載會採用<xref:System.Reflection.MethodInfo>類似。</span><span class="sxs-lookup"><span data-stu-id="45f0e-379">The use of other overloads that take <xref:System.Reflection.MethodInfo> is similar.</span></span>  
  
 <span data-ttu-id="45f0e-380">在程式碼範例定義名為基底類別`Base`和名為類別`Derived`衍生自`Base`。</span><span class="sxs-lookup"><span data-stu-id="45f0e-380">The code example defines a base class named `Base` and a class named `Derived` that derives from `Base`.</span></span> <span data-ttu-id="45f0e-381">衍生的類別有`static`(`Shared` Visual Basic 中) 名為方法`MyMethod`具有一個參數的型別`Base`且傳回類型為`Derived`。</span><span class="sxs-lookup"><span data-stu-id="45f0e-381">The derived class has a `static` (`Shared` in Visual Basic) method named `MyMethod` with one parameter of type `Base` and a return type of `Derived`.</span></span> <span data-ttu-id="45f0e-382">在程式碼範例也會定義名為委派`Example`具有一個參數的型別`Derived`且傳回類型為`Base`。</span><span class="sxs-lookup"><span data-stu-id="45f0e-382">The code example also defines a delegate named `Example` that has one parameter of type `Derived` and a return type of `Base`.</span></span>  
  
 <span data-ttu-id="45f0e-383">在程式碼範例示範委派名為`Example`可用來表示方法`MyMethod`。</span><span class="sxs-lookup"><span data-stu-id="45f0e-383">The code example demonstrates that the delegate named `Example` can be used to represent the method `MyMethod`.</span></span> <span data-ttu-id="45f0e-384">此方法可以繫結至委派，因為：</span><span class="sxs-lookup"><span data-stu-id="45f0e-384">The method can be bound to the delegate because:</span></span>  
  
-   <span data-ttu-id="45f0e-385">委派的參數類型 (`Derived`) 是更具限制性的參數型別`MyMethod`(`Base`)，如此一來，它一律是安全地傳遞至委派的引數`MyMethod`。</span><span class="sxs-lookup"><span data-stu-id="45f0e-385">The parameter type of the delegate (`Derived`) is more restrictive than the parameter type of `MyMethod` (`Base`), so that it is always safe to pass the argument of the delegate to `MyMethod`.</span></span>  
  
-   <span data-ttu-id="45f0e-386">傳回型別`MyMethod`(`Derived`) 是更具限制性的委派參數類型 (`Base`)，如此一來，一定是安全轉型為委派的傳回型別方法的傳回型別。</span><span class="sxs-lookup"><span data-stu-id="45f0e-386">The return type of `MyMethod` (`Derived`) is more restrictive than the parameter type of the delegate (`Base`), so that it is always safe to cast the return type of the method to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="45f0e-387">在程式碼範例會產生任何輸出。</span><span class="sxs-lookup"><span data-stu-id="45f0e-387">The code example produces no output.</span></span>  
  
 [!code-cpp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/cpp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cpp/source.cpp#1)]
 [!code-csharp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cs/source.cs#1)]
 [!code-vb[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/vb/source.vb#1)]  
  
 <span data-ttu-id="45f0e-388">**範例 3**</span><span class="sxs-lookup"><span data-stu-id="45f0e-388">**Example 3**</span></span>  
  
 <span data-ttu-id="45f0e-389">下列程式碼範例顯示所有的方法是單一的委派型別可以代表使用<xref:System.Delegate.CreateDelegate%2A>方法用來建立委派。</span><span class="sxs-lookup"><span data-stu-id="45f0e-389">The following code example shows all the methods a single delegate type can represent, using the <xref:System.Delegate.CreateDelegate%2A> method to create the delegates.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="45f0e-390">有兩個多載<xref:System.Delegate.CreateDelegate%2A>指定的方法`firstArgument`和<xref:System.Reflection.MethodInfo>; 其功能都相同，但是其中一個可讓您指定是否要在繫結，失敗時擲回，而其他一律會擲回。</span><span class="sxs-lookup"><span data-stu-id="45f0e-390">There are two overloads of the <xref:System.Delegate.CreateDelegate%2A> method that specify `firstArgument` and a <xref:System.Reflection.MethodInfo>; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws.</span></span> <span data-ttu-id="45f0e-391">此程式碼範例會使用這兩個多載。</span><span class="sxs-lookup"><span data-stu-id="45f0e-391">This code example uses both overloads.</span></span>  
  
 <span data-ttu-id="45f0e-392">此程式碼範例會定義兩個類別：`C`和`F`，和委派型別`D`argumentem typu `C`。</span><span class="sxs-lookup"><span data-stu-id="45f0e-392">The code example defines two classes, `C` and `F`, and a delegate type `D` with one argument of type `C`.</span></span> <span data-ttu-id="45f0e-393">類別有相符的靜態和執行個體方法`M1`， `M3`，並`M4`，和類別`C`也有執行個體方法`M2`，沒有任何引數。</span><span class="sxs-lookup"><span data-stu-id="45f0e-393">The classes have matching static and instance methods `M1`, `M3`, and `M4`, and class `C` also has an instance method `M2` that has no arguments.</span></span>  
  
 <span data-ttu-id="45f0e-394">第三個類別，名為`Example`包含建立委派的程式碼。</span><span class="sxs-lookup"><span data-stu-id="45f0e-394">A third class named `Example` contains the code that creates the delegates.</span></span>  
  
-   <span data-ttu-id="45f0e-395">委派會建立執行個體方法`M1`型別的`C`並輸入`F`; 透過個別類型的執行個體，每個已關閉。</span><span class="sxs-lookup"><span data-stu-id="45f0e-395">Delegates are created for instance method `M1` of type `C` and type `F`; each is closed over an instance of the respective type.</span></span> <span data-ttu-id="45f0e-396">方法`M1`型別的`C`顯示`ID`屬性繫結的執行個體與引數。</span><span class="sxs-lookup"><span data-stu-id="45f0e-396">Method `M1` of type `C` displays the `ID` properties of the bound instance and of the argument.</span></span>  
  
-   <span data-ttu-id="45f0e-397">方法建立委派`M2`型別的`C`。</span><span class="sxs-lookup"><span data-stu-id="45f0e-397">A delegate is created for method `M2` of type `C`.</span></span> <span data-ttu-id="45f0e-398">這是開啟的執行個體的委派，其中委派的引數代表方法的執行個體上的隱藏第一個引數。</span><span class="sxs-lookup"><span data-stu-id="45f0e-398">This is an open instance delegate, in which the argument of the delegate represents the hidden first argument on the instance method.</span></span> <span data-ttu-id="45f0e-399">此方法會有任何其他引數。</span><span class="sxs-lookup"><span data-stu-id="45f0e-399">The method has no other arguments.</span></span> <span data-ttu-id="45f0e-400">如同它是一種靜態方法呼叫它。</span><span class="sxs-lookup"><span data-stu-id="45f0e-400">It is called as if it were a static method.</span></span>  
  
-   <span data-ttu-id="45f0e-401">為靜態方法建立委派`M3`型別的`C`並輸入`F`; 這些是開啟的靜態委派。</span><span class="sxs-lookup"><span data-stu-id="45f0e-401">Delegates are created for static method `M3` of type `C` and type `F`; these are open static delegates.</span></span>  
  
-   <span data-ttu-id="45f0e-402">最後，委派會建立靜態方法`M4`型別的`C`並輸入`F`; 每個方法都宣告的型別，做為其第一個引數，以及提供型別的執行個體，所以委派會覆蓋其第一個引數.</span><span class="sxs-lookup"><span data-stu-id="45f0e-402">Finally, delegates are created for static method `M4` of type `C` and type `F`; each method has the declaring type as its first argument, and an instance of the type is supplied, so the delegates are closed over their first arguments.</span></span> <span data-ttu-id="45f0e-403">方法`M4`型別的`C`顯示`ID`屬性繫結的執行個體與引數。</span><span class="sxs-lookup"><span data-stu-id="45f0e-403">Method `M4` of type `C` displays the `ID` properties of the bound instance and of the argument.</span></span>  
  
 [!code-csharp[Delegate.CreateDelegateTOM_2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegateTOM_2/cs/source.cs#1)]
 [!code-vb[Delegate.CreateDelegateTOM_2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegateTOM_2/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="45f0e-404">
            <paramref name="type" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-404">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="45f0e-405">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-405">-or-</span>
          </span>
          <span data-ttu-id="45f0e-406">
            <paramref name="method" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-406">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="45f0e-407">
            <paramref name="type" /> 不會繼承 <see cref="T:System.MulticastDelegate" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-407">
              <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          </span>
          <span data-ttu-id="45f0e-408">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-408">-or-</span>
          </span>
          <span data-ttu-id="45f0e-409">
            <paramref name="type" /> 不是 <see langword="RuntimeType" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-409">
              <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="45f0e-410">請參閱[反映中的執行階段類型](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-410">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
          <span data-ttu-id="45f0e-411">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-411">-or-</span>
          </span>
          <span data-ttu-id="45f0e-412">無法繫結 <paramref name="method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-412">
              <paramref name="method" /> cannot be bound.</span>
          </span>
          <span data-ttu-id="45f0e-413">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-413">-or-</span>
          </span>
          <span data-ttu-id="45f0e-414">
            <paramref name="method" /> 不是 <see langword="RuntimeMethodInfo" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-414">
              <paramref name="method" /> is not a <see langword="RuntimeMethodInfo" />.</span>
          </span>
          <span data-ttu-id="45f0e-415">請參閱[反映中的執行階段類型](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-415">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="45f0e-416">找不到 <paramref name="type" /> 的 <see langword="Invoke" /> 方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-416">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="45f0e-417">呼叫端沒有存取 <paramref name="method" /> 所需的權限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-417">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="45f0e-418">當叫用晚期繫結機制透過例如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-418">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="45f0e-419">關聯的列舉型別：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-419">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, object target, string method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, object target, string method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Object ^ target, System::String ^ method);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * obj * string -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, target, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="method" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="45f0e-420">要建立之委派的 <see cref="T:System.Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-420">The <see cref="T:System.Type" /> of delegate to create.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="45f0e-421">叫用 <c>method</c> 的類別執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-421">The class instance on which <c>method</c> is invoked.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="45f0e-422">委派要表示的執行個體方法名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-422">The name of the instance method that the delegate is to represent.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45f0e-423">建立指定類型的委派，這個委派表示要在指定的類別執行個體上叫用的指定執行個體方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-423">Creates a delegate of the specified type that represents the specified instance method to invoke on the specified class instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45f0e-424">指定類型的委派，表示要在指定的類別執行個體上叫用的指定執行個體方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-424">A delegate of the specified type that represents the specified instance method to invoke on the specified class instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45f0e-425">這個方法只會建立委派執行個體方法。</span><span class="sxs-lookup"><span data-stu-id="45f0e-425">This method creates delegates for instance methods only.</span></span> <span data-ttu-id="45f0e-426">執行個體方法則是類別; 的執行個體相關聯的方法靜態方法是類別本身相關聯的方法。</span><span class="sxs-lookup"><span data-stu-id="45f0e-426">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 <span data-ttu-id="45f0e-427">這個方法多載就相當於呼叫<xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29>方法多載，指定`false`for`ignoreCase`並`true`如`throwOnBindFailure`。</span><span class="sxs-lookup"><span data-stu-id="45f0e-427">This method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> method overload, specifying `false` for `ignoreCase` and `true` for `throwOnBindFailure`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="45f0e-428">開頭[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，這個方法可用來存取非公用方法，如果呼叫者已授與<xref:System.Security.Permissions.ReflectionPermission>使用<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>旗標，並限制為呼叫端的非公用方法的授權集是否授與集或子集效果。</span><span class="sxs-lookup"><span data-stu-id="45f0e-428">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="45f0e-429">(請參閱[反映的安全性考量](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)。)</span><span class="sxs-lookup"><span data-stu-id="45f0e-429">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="45f0e-430">若要使用這項功能，您的應用程式應將目標設為 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] (含) 以後版本。</span><span class="sxs-lookup"><span data-stu-id="45f0e-430">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="45f0e-431">
            <paramref name="type" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-431">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="45f0e-432">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-432">-or-</span>
          </span>
          <span data-ttu-id="45f0e-433">
            <paramref name="target" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-433">
              <paramref name="target" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="45f0e-434">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-434">-or-</span>
          </span>
          <span data-ttu-id="45f0e-435">
            <paramref name="method" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-435">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="45f0e-436">
            <paramref name="type" /> 不會繼承 <see cref="T:System.MulticastDelegate" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-436">
              <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          </span>
          <span data-ttu-id="45f0e-437">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-437">-or-</span>
          </span>
          <span data-ttu-id="45f0e-438">
            <paramref name="type" /> 不是 <see langword="RuntimeType" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-438">
              <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="45f0e-439">請參閱[反映中的執行階段類型](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-439">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
          <span data-ttu-id="45f0e-440">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-440">-or-</span>
          </span>
          <span data-ttu-id="45f0e-441">
            <paramref name="method" /> 不是執行個體方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-441">
              <paramref name="method" /> is not an instance method.</span>
          </span>
          <span data-ttu-id="45f0e-442">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-442">-or-</span>
          </span>
          <span data-ttu-id="45f0e-443">例如，因為找不到 <paramref name="method" />，所以無法將其繫結。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-443">
              <paramref name="method" /> cannot be bound, for example because it cannot be found.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="45f0e-444">找不到 <paramref name="type" /> 的 <see langword="Invoke" /> 方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-444">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="45f0e-445">呼叫端沒有存取 <paramref name="method" /> 所需的權限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-445">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="45f0e-446">當叫用晚期繫結機制透過例如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-446">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="45f0e-447">關聯的列舉型別：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-447">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, System.Reflection.MethodInfo method, bool throwOnBindFailure);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, class System.Reflection.MethodInfo method, bool throwOnBindFailure) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Reflection.MethodInfo,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Reflection::MethodInfo ^ method, bool throwOnBindFailure);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * System.Reflection.MethodInfo * bool -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, method, throwOnBindFailure)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="throwOnBindFailure" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="45f0e-448">要建立之委派的 <see cref="T:System.Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-448">The <see cref="T:System.Type" /> of delegate to create.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="45f0e-449">
            <see cref="T:System.Reflection.MethodInfo" />，描述委派所要表示的靜態或執行個體方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-449">The <see cref="T:System.Reflection.MethodInfo" /> describing the static or instance method the delegate is to represent.</span>
          </span>
        </param>
        <param name="throwOnBindFailure">
          <span data-ttu-id="45f0e-450">
            <see langword="true" /> 表示如果無法繫結 <c>method</c> 則擲回例外狀況，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-450">
              <see langword="true" /> to throw an exception if <c>method</c> cannot be bound; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45f0e-451">建立指定之類型的委派，用來表示指定之靜態方法，並包含在繫結失敗時發生的指定之行為。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-451">Creates a delegate of the specified type to represent the specified static method, with the specified behavior on failure to bind.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45f0e-452">指定類型的委派，用來表示指定的靜態方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-452">A delegate of the specified type to represent the specified static method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45f0e-453">這個方法多載可以建立開啟的靜態方法的委派，並開啟執行個體方法的委派，也就是公開隱藏第一個引數的委派執行個體方法。</span><span class="sxs-lookup"><span data-stu-id="45f0e-453">This method overload can create open static method delegates and open instance method delegates — that is, delegates that expose the hidden first argument of instance methods.</span></span> <span data-ttu-id="45f0e-454">如需詳細說明，請參閱更多一般<xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29>方法多載，可讓您建立所有組合的開放式或封閉式的委派執行個體或靜態方法。</span><span class="sxs-lookup"><span data-stu-id="45f0e-454">For a detailed explanation, see the more general <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload, which allows you to create all combinations of open or closed delegates for instance or static methods.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="45f0e-455">這個方法多載應該時使用委派未關閉透過其第一個引數，因為它在此情況下是稍快。</span><span class="sxs-lookup"><span data-stu-id="45f0e-455">This method overload should be used when the delegate is not closed over its first argument, because it is somewhat faster in that case.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="45f0e-456">開頭[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，這個方法可用來存取非公用方法，如果呼叫者已授與<xref:System.Security.Permissions.ReflectionPermission>使用<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>旗標，並限制為呼叫端的非公用方法的授權集是否授與集或子集效果。</span><span class="sxs-lookup"><span data-stu-id="45f0e-456">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="45f0e-457">(請參閱[反映的安全性考量](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)。)</span><span class="sxs-lookup"><span data-stu-id="45f0e-457">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="45f0e-458">若要使用這項功能，您的應用程式應將目標設為 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] (含) 以後版本。</span><span class="sxs-lookup"><span data-stu-id="45f0e-458">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
## <a name="compatible-parameter-types-and-return-type"></a><span data-ttu-id="45f0e-459">相容的參數型別和傳回型別</span><span class="sxs-lookup"><span data-stu-id="45f0e-459">Compatible Parameter Types and Return Type</span></span>  
 <span data-ttu-id="45f0e-460">參數類型和委派的傳回型別必須與參數類型和委派所表示; 方法的傳回型別相容型別沒有完全相符。</span><span class="sxs-lookup"><span data-stu-id="45f0e-460">The parameter types and return type of a delegate must be compatible with the parameter types and return type of the method the delegate represents; the types do not have to match exactly.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="45f0e-461">在.NET Framework 1.0 和 1.1 版中，類型必須完全相符。</span><span class="sxs-lookup"><span data-stu-id="45f0e-461">In the .NET Framework version 1.0 and 1.1, the types must match exactly.</span></span>  
  
 <span data-ttu-id="45f0e-462">如果委派參數的型別比方法參數的型別更嚴格，則委派的參數與對應的方法參數相容，因為這樣可保證傳遞給委派的引數能夠安全地傳遞給方法。</span><span class="sxs-lookup"><span data-stu-id="45f0e-462">A parameter of a delegate is compatible with the corresponding parameter of a method if the type of the delegate parameter is more restrictive than the type of the method parameter, because this guarantees that an argument passed to the delegate can be passed safely to the method.</span></span>  
  
 <span data-ttu-id="45f0e-463">同樣的，如果方法的傳回型別比委派的傳回型別更具限制性，由於此保證方法傳回的值會安全地轉換為委派的傳回型別，委派的傳回型別就會相容於方法的傳回型別。</span><span class="sxs-lookup"><span data-stu-id="45f0e-463">Similarly, the return type of a delegate is compatible with the return type of a method if the return type of the method is more restrictive than the return type of the delegate, because this guarantees that the return value of the method can be cast safely to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="45f0e-464">例如，使用類型參數的委派<xref:System.Collections.Hashtable>和傳回型別<xref:System.Object>可以代表具有一個型別的參數的方法<xref:System.Object>以及傳回值的型別<xref:System.Collections.Hashtable>。</span><span class="sxs-lookup"><span data-stu-id="45f0e-464">For example, a delegate with a parameter of type <xref:System.Collections.Hashtable> and a return type of <xref:System.Object> can represent a method with a parameter of type <xref:System.Object> and a return value of type <xref:System.Collections.Hashtable>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="45f0e-465">本節包含兩個程式碼範例。</span><span class="sxs-lookup"><span data-stu-id="45f0e-465">This section contains two code examples.</span></span> <span data-ttu-id="45f0e-466">第一個範例示範的委派，可以使用這個方法多載來建立兩種： 透過執行個體方法開啟，並開啟移轉的靜態方法。</span><span class="sxs-lookup"><span data-stu-id="45f0e-466">The first example demonstrates the two kinds of delegates that can be created with this method overload: open over an instance method and open over a static method.</span></span>  
  
 <span data-ttu-id="45f0e-467">第二個程式碼範例會示範相容的參數型別和傳回型別。</span><span class="sxs-lookup"><span data-stu-id="45f0e-467">The second code example demonstrates compatible parameter types and return types.</span></span>  
  
 <span data-ttu-id="45f0e-468">**範例 1**</span><span class="sxs-lookup"><span data-stu-id="45f0e-468">**Example 1**</span></span>  
  
 <span data-ttu-id="45f0e-469">下列程式碼範例示範兩種方式可以建立委派，使用的這個多載<xref:System.Delegate.CreateDelegate%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="45f0e-469">The following code example demonstrates the two ways a delegate can be created using this overload of the <xref:System.Delegate.CreateDelegate%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="45f0e-470">有兩個多載<xref:System.Delegate.CreateDelegate%2A>指定的方法<xref:System.Reflection.MethodInfo>不的第一次的引數，但其功能都相同，但是其中一個可讓您指定是否要在繫結，失敗時擲回，而其他一律會擲回。</span><span class="sxs-lookup"><span data-stu-id="45f0e-470">There are two overloads of the <xref:System.Delegate.CreateDelegate%2A> method that specify a <xref:System.Reflection.MethodInfo> but not a first argument; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws.</span></span> <span data-ttu-id="45f0e-471">此程式碼範例會使用這兩個多載。</span><span class="sxs-lookup"><span data-stu-id="45f0e-471">This code example uses both overloads.</span></span>  
  
 <span data-ttu-id="45f0e-472">此範例會宣告類別`C`靜態方法`M2`和執行個體方法`M1`，以及兩個委派型別：`D1`可接受的執行個體`C`和一個字串和`D2`採用字串。</span><span class="sxs-lookup"><span data-stu-id="45f0e-472">The example declares a class `C` with a static method `M2` and an instance method `M1`, and two delegate types: `D1` takes an instance of `C` and a string, and `D2` takes a string.</span></span>  
  
 <span data-ttu-id="45f0e-473">第二個類別，名為`Example`包含建立委派的程式碼。</span><span class="sxs-lookup"><span data-stu-id="45f0e-473">A second class named `Example` contains the code that creates the delegates.</span></span>  
  
-   <span data-ttu-id="45f0e-474">類型的委派`D1`，表示開啟執行個體方法，建立執行個體方法`M1`。</span><span class="sxs-lookup"><span data-stu-id="45f0e-474">A delegate of type `D1`, representing an open instance method, is created for the instance method `M1`.</span></span> <span data-ttu-id="45f0e-475">叫用委派時，必須傳遞執行個體。</span><span class="sxs-lookup"><span data-stu-id="45f0e-475">An instance must be passed when the delegate is invoked.</span></span>  
  
-   <span data-ttu-id="45f0e-476">類型的委派`D2`，表示開啟的靜態方法，靜態方法，建立`M2`。</span><span class="sxs-lookup"><span data-stu-id="45f0e-476">A delegate of type `D2`, representing an open static method, is created for the static method `M2`.</span></span>  
  
 [!code-csharp[Delegate.CreateDelegateTOM#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegateTOM/cs/openClosedOver.cs#1)]
 [!code-vb[Delegate.CreateDelegateTOM#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegateTOM/VB/openClosedOver.vb#1)]  
  
 <span data-ttu-id="45f0e-477">**範例 2**</span><span class="sxs-lookup"><span data-stu-id="45f0e-477">**Example 2**</span></span>  
  
 <span data-ttu-id="45f0e-478">下列程式碼範例示範的參數類型相容性，並傳回型別。</span><span class="sxs-lookup"><span data-stu-id="45f0e-478">The following code example demonstrates compatibility of parameter types and return types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="45f0e-479">此程式碼範例會使用<xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29>方法多載。</span><span class="sxs-lookup"><span data-stu-id="45f0e-479">This code example uses the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> method overload.</span></span> <span data-ttu-id="45f0e-480">使用其他多載會採用<xref:System.Reflection.MethodInfo>類似。</span><span class="sxs-lookup"><span data-stu-id="45f0e-480">The use of other overloads that take <xref:System.Reflection.MethodInfo> is similar.</span></span>  
  
 <span data-ttu-id="45f0e-481">在程式碼範例定義名為基底類別`Base`和名為類別`Derived`衍生自`Base`。</span><span class="sxs-lookup"><span data-stu-id="45f0e-481">The code example defines a base class named `Base` and a class named `Derived` that derives from `Base`.</span></span> <span data-ttu-id="45f0e-482">衍生的類別有`static`(`Shared` Visual Basic 中) 名為方法`MyMethod`具有一個參數的型別`Base`且傳回類型為`Derived`。</span><span class="sxs-lookup"><span data-stu-id="45f0e-482">The derived class has a `static` (`Shared` in Visual Basic) method named `MyMethod` with one parameter of type `Base` and a return type of `Derived`.</span></span> <span data-ttu-id="45f0e-483">在程式碼範例也會定義名為委派`Example`具有一個參數的型別`Derived`且傳回類型為`Base`。</span><span class="sxs-lookup"><span data-stu-id="45f0e-483">The code example also defines a delegate named `Example` that has one parameter of type `Derived` and a return type of `Base`.</span></span>  
  
 <span data-ttu-id="45f0e-484">在程式碼範例示範委派名為`Example`可用來表示方法`MyMethod`。</span><span class="sxs-lookup"><span data-stu-id="45f0e-484">The code example demonstrates that the delegate named `Example` can be used to represent the method `MyMethod`.</span></span> <span data-ttu-id="45f0e-485">此方法可以繫結至委派，因為：</span><span class="sxs-lookup"><span data-stu-id="45f0e-485">The method can be bound to the delegate because:</span></span>  
  
-   <span data-ttu-id="45f0e-486">委派的參數類型 (`Derived`) 是更具限制性的參數型別`MyMethod`(`Base`)，如此一來，它一律是安全地傳遞至委派的引數`MyMethod`。</span><span class="sxs-lookup"><span data-stu-id="45f0e-486">The parameter type of the delegate (`Derived`) is more restrictive than the parameter type of `MyMethod` (`Base`), so that it is always safe to pass the argument of the delegate to `MyMethod`.</span></span>  
  
-   <span data-ttu-id="45f0e-487">傳回型別`MyMethod`(`Derived`) 是更具限制性的委派參數類型 (`Base`)，如此一來，一定是安全轉型為委派的傳回型別方法的傳回型別。</span><span class="sxs-lookup"><span data-stu-id="45f0e-487">The return type of `MyMethod` (`Derived`) is more restrictive than the parameter type of the delegate (`Base`), so that it is always safe to cast the return type of the method to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="45f0e-488">在程式碼範例會產生任何輸出。</span><span class="sxs-lookup"><span data-stu-id="45f0e-488">The code example produces no output.</span></span>  
  
 [!code-cpp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/cpp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cpp/source.cpp#1)]
 [!code-csharp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cs/source.cs#1)]
 [!code-vb[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="45f0e-489">
            <paramref name="type" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-489">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="45f0e-490">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-490">-or-</span>
          </span>
          <span data-ttu-id="45f0e-491">
            <paramref name="method" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-491">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="45f0e-492">
            <paramref name="type" /> 不會繼承 <see cref="T:System.MulticastDelegate" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-492">
              <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          </span>
          <span data-ttu-id="45f0e-493">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-493">-or-</span>
          </span>
          <span data-ttu-id="45f0e-494">
            <paramref name="type" /> 不是 <see langword="RuntimeType" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-494">
              <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="45f0e-495">請參閱[反映中的執行階段類型](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-495">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
          <span data-ttu-id="45f0e-496">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-496">-or-</span>
          </span>
          <span data-ttu-id="45f0e-497">無法繫結 <paramref name="method" />，而且 <paramref name="throwOnBindFailure" /> 為 <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-497">
              <paramref name="method" /> cannot be bound, and <paramref name="throwOnBindFailure" /> is <see langword="true" />.</span>
          </span>
          <span data-ttu-id="45f0e-498">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-498">-or-</span>
          </span>
          <span data-ttu-id="45f0e-499">
            <paramref name="method" /> 不是 <see langword="RuntimeMethodInfo" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-499">
              <paramref name="method" /> is not a <see langword="RuntimeMethodInfo" />.</span>
          </span>
          <span data-ttu-id="45f0e-500">請參閱[反映中的執行階段類型](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-500">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="45f0e-501">找不到 <paramref name="type" /> 的 <see langword="Invoke" /> 方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-501">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="45f0e-502">呼叫端沒有存取 <paramref name="method" /> 所需的權限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-502">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="45f0e-503">當叫用晚期繫結機制透過例如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-503">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="45f0e-504">關聯的列舉型別：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-504">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, Type target, string method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, class System.Type target, string method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, Type ^ target, System::String ^ method);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * Type * string -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, target, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="target" Type="System.Type" />
        <Parameter Name="method" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="45f0e-505">要建立之委派的 <see cref="T:System.Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-505">The <see cref="T:System.Type" /> of delegate to create.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="45f0e-506">
            <see cref="T:System.Type" />，代表可實作 <c>method</c> 的類別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-506">The <see cref="T:System.Type" /> representing the class that implements <c>method</c>.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="45f0e-507">委派要表示的靜態方法名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-507">The name of the static method that the delegate is to represent.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45f0e-508">建立指定類型的委派，這個委派表示指定類別的指定靜態方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-508">Creates a delegate of the specified type that represents the specified static method of the specified class.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45f0e-509">指定類型的委派，表示指定類別的指定靜態方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-509">A delegate of the specified type that represents the specified static method of the specified class.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45f0e-510">這個方法會建立只有靜態方法的委派。</span><span class="sxs-lookup"><span data-stu-id="45f0e-510">This method creates delegates for static methods only.</span></span> <span data-ttu-id="45f0e-511">執行個體方法則是類別; 的執行個體相關聯的方法靜態方法是類別本身相關聯的方法。</span><span class="sxs-lookup"><span data-stu-id="45f0e-511">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 <span data-ttu-id="45f0e-512">這個方法多載就相當於呼叫<xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29>方法多載，指定`false`for`ignoreCase`並`true`如`throwOnBindFailure`。</span><span class="sxs-lookup"><span data-stu-id="45f0e-512">This method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> method overload, specifying `false` for `ignoreCase` and `true` for `throwOnBindFailure`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="45f0e-513">開頭[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，這個方法可用來存取非公用方法，如果呼叫者已授與<xref:System.Security.Permissions.ReflectionPermission>使用<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>旗標，並限制為呼叫端的非公用方法的授權集是否授與集或子集效果。</span><span class="sxs-lookup"><span data-stu-id="45f0e-513">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="45f0e-514">(請參閱[反映的安全性考量](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)。)</span><span class="sxs-lookup"><span data-stu-id="45f0e-514">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="45f0e-515">若要使用這項功能，您的應用程式應將目標設為 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] (含) 以後版本。</span><span class="sxs-lookup"><span data-stu-id="45f0e-515">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="45f0e-516">
            <paramref name="type" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-516">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="45f0e-517">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-517">-or-</span>
          </span>
          <span data-ttu-id="45f0e-518">
            <paramref name="target" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-518">
              <paramref name="target" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="45f0e-519">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-519">-or-</span>
          </span>
          <span data-ttu-id="45f0e-520">
            <paramref name="method" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-520">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="45f0e-521">
            <paramref name="type" /> 不會繼承 <see cref="T:System.MulticastDelegate" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-521">
              <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          </span>
          <span data-ttu-id="45f0e-522">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-522">-or-</span>
          </span>
          <span data-ttu-id="45f0e-523">
            <paramref name="type" /> 不是 <see langword="RuntimeType" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-523">
              <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="45f0e-524">請參閱[反映中的執行階段類型](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-524">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
          <span data-ttu-id="45f0e-525">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-525">-or-</span>
          </span>
          <span data-ttu-id="45f0e-526">
            <paramref name="target" /> 不是 <see langword="RuntimeType" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-526">
              <paramref name="target" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="45f0e-527">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-527">-or-</span>
          </span>
          <span data-ttu-id="45f0e-528">
            <paramref name="target" /> 是開放式泛型類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-528">
              <paramref name="target" /> is an open generic type.</span>
          </span>
          <span data-ttu-id="45f0e-529">亦即，其 <see cref="P:System.Type.ContainsGenericParameters" /> 屬性為 <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-529">That is, its <see cref="P:System.Type.ContainsGenericParameters" /> property is <see langword="true" />.</span>
          </span>
          <span data-ttu-id="45f0e-530">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-530">-or-</span>
          </span>
          <span data-ttu-id="45f0e-531">
            <paramref name="method" /> 不是 <see langword="static" /> 方法 (Visual Basic 中的 <see langword="Shared" /> 方法)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-531">
              <paramref name="method" /> is not a <see langword="static" /> method (<see langword="Shared" /> method in Visual Basic).</span>
          </span>
          <span data-ttu-id="45f0e-532">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-532">-or-</span>
          </span>
          <span data-ttu-id="45f0e-533">無法繫結 <paramref name="method" />，例如因為找不到該方法，以及 <paramref name="throwOnBindFailure" /> 為 <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-533">
              <paramref name="method" /> cannot be bound, for example because it cannot be found, and <paramref name="throwOnBindFailure" /> is <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="45f0e-534">找不到 <paramref name="type" /> 的 <see langword="Invoke" /> 方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-534">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="45f0e-535">呼叫端沒有存取 <paramref name="method" /> 所需的權限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-535">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="45f0e-536">當叫用晚期繫結機制透過例如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-536">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="45f0e-537">關聯的列舉型別：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-537">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, object firstArgument, System.Reflection.MethodInfo method, bool throwOnBindFailure);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, object firstArgument, class System.Reflection.MethodInfo method, bool throwOnBindFailure) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.Reflection.MethodInfo,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Object ^ firstArgument, System::Reflection::MethodInfo ^ method, bool throwOnBindFailure);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * obj * System.Reflection.MethodInfo * bool -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, firstArgument, method, throwOnBindFailure)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="firstArgument" Type="System.Object" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="throwOnBindFailure" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="45f0e-538">
            <see cref="T:System.Type" />，表示要建立的委派之類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-538">A <see cref="T:System.Type" /> representing the type of delegate to create.</span>
          </span>
        </param>
        <param name="firstArgument">
          <span data-ttu-id="45f0e-539">
            <see cref="T:System.Object" />，委派所表示的方法之第一個引數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-539">An <see cref="T:System.Object" /> that is the first argument of the method the delegate represents.</span>
          </span>
          <span data-ttu-id="45f0e-540">對於執行個體方法而言，它必須與執行個體類型相容。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-540">For instance methods, it must be compatible with the instance type.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="45f0e-541">
            <see cref="T:System.Reflection.MethodInfo" />，描述委派所要表示的靜態或執行個體方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-541">The <see cref="T:System.Reflection.MethodInfo" /> describing the static or instance method the delegate is to represent.</span>
          </span>
        </param>
        <param name="throwOnBindFailure">
          <span data-ttu-id="45f0e-542">
            <see langword="true" /> 表示如果無法繫結 <c>method</c> 則擲回例外狀況，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-542">
              <see langword="true" /> to throw an exception if <c>method</c> cannot be bound; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45f0e-543">建立指定之類型的委派，其表示指定之靜態或執行個體方法，並有指定第一個引數以及繫結失敗時所發生的行為。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-543">Creates a delegate of the specified type that represents the specified static or instance method, with the specified first argument and the specified behavior on failure to bind.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45f0e-544">指定之類型的委派，表示指定之靜態或執行個體方法；如果 <paramref name="throwOnBindFailure" /> 為 <see langword="false" />，且委派無法繫結至 <paramref name="method" />，則為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-544">A delegate of the specified type that represents the specified static or instance method, or <see langword="null" /> if <paramref name="throwOnBindFailure" /> is <see langword="false" /> and the delegate cannot be bound to <paramref name="method" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45f0e-545">這個方法多載和<xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%29>方法多載而言，一定要繫結失敗時擲回，提供最具彈性的方式，來建立委派。</span><span class="sxs-lookup"><span data-stu-id="45f0e-545">This method overload and the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%29> method overload, which always throws on failure to bind, provide the most flexible way to create delegates.</span></span> <span data-ttu-id="45f0e-546">您可以使用它們來建立委派的靜態或執行個體方法，不論第一個引數。</span><span class="sxs-lookup"><span data-stu-id="45f0e-546">You can use them to create delegates for either static or instance methods, with or without a first argument.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="45f0e-547">如果您未提供第一個引數，使用<xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29>方法多載，以提升效能。</span><span class="sxs-lookup"><span data-stu-id="45f0e-547">If you do not supply a first argument, use the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload for better performance.</span></span>  
  
 <span data-ttu-id="45f0e-548">委派型別和方法必須具有相容傳回型別。</span><span class="sxs-lookup"><span data-stu-id="45f0e-548">The delegate type and the method must have compatible return types.</span></span> <span data-ttu-id="45f0e-549">也就是說，傳回型別`method`必須是指派給的傳回型別`type`。</span><span class="sxs-lookup"><span data-stu-id="45f0e-549">That is, the return type of `method` must be assignable to the return type of `type`.</span></span>  
  
 <span data-ttu-id="45f0e-550">如果`firstArgument`是提供，則會傳遞至`method`每次叫用委派時;`firstArgument`稱為繫結至委派，以及此委派會在第一個引數上關閉。</span><span class="sxs-lookup"><span data-stu-id="45f0e-550">If `firstArgument` is supplied, it is passed to `method` every time the delegate is invoked; `firstArgument` is said to be bound to the delegate, and the delegate is said to be closed over its first argument.</span></span> <span data-ttu-id="45f0e-551">如果`method`已`static`(`Shared`在 Visual Basic 中)，則引數叫用委派時所提供的清單包含第一個; 以外的所有參數，如果`method`是執行個體方法，然後`firstArgument`傳遞到隱藏的執行個體參數 (由`this`在 C# 中，或由`Me`Visual Basic 中)。</span><span class="sxs-lookup"><span data-stu-id="45f0e-551">If `method` is `static` (`Shared` in Visual Basic), the argument list supplied when invoking the delegate includes all parameters except the first; if `method` is an instance method, then `firstArgument` is passed to the hidden instance parameter (represented by `this` in C#, or by `Me` in Visual Basic).</span></span>  
  
 <span data-ttu-id="45f0e-552">如果`firstArgument`提供的第一個參數`method`必須是參考型別和`firstArgument`必須相容於該型別。</span><span class="sxs-lookup"><span data-stu-id="45f0e-552">If `firstArgument` is supplied, the first parameter of `method` must be a reference type, and `firstArgument` must be compatible with that type.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="45f0e-553">如果`method`已`static`(`Shared`在 Visual Basic 中) 以及其第一個參數為類型<xref:System.Object>或<xref:System.ValueType>，然後`firstArgument`可以是實值型別。</span><span class="sxs-lookup"><span data-stu-id="45f0e-553">If `method` is `static` (`Shared` in Visual Basic) and its first parameter is of type <xref:System.Object> or <xref:System.ValueType>, then `firstArgument` can be a value type.</span></span> <span data-ttu-id="45f0e-554">在此情況下`firstArgument`會自動進行 boxed 處理。</span><span class="sxs-lookup"><span data-stu-id="45f0e-554">In this case `firstArgument` is automatically boxed.</span></span> <span data-ttu-id="45f0e-555">自動 boxing 不會發生的任何其他引數，因為它會以 C# 或 Visual Basic 函式呼叫。</span><span class="sxs-lookup"><span data-stu-id="45f0e-555">Automatic boxing does not occur for any other arguments, as it would in a C# or Visual Basic function call.</span></span>  
  
 <span data-ttu-id="45f0e-556">如果`firstArgument`為 null 參考並`method`是執行個體方法，結果會取決於委派型別的簽章`type`以及`method`:</span><span class="sxs-lookup"><span data-stu-id="45f0e-556">If `firstArgument` is a null reference and `method` is an instance method, the result depends on the signatures of the delegate type `type` and of `method`:</span></span>  
  
-   <span data-ttu-id="45f0e-557">如果簽章`type`明確包含隱藏第一個參數`method`，此委派表示開啟執行個體方法。</span><span class="sxs-lookup"><span data-stu-id="45f0e-557">If the signature of `type` explicitly includes the hidden first parameter of `method`, the delegate is said to represent an open instance method.</span></span> <span data-ttu-id="45f0e-558">叫用委派時，要將引數清單中的第一個引數傳遞給隱藏的執行個體參數`method`。</span><span class="sxs-lookup"><span data-stu-id="45f0e-558">When the delegate is invoked, the first argument in the argument list is passed to the hidden instance parameter of `method`.</span></span>  
  
-   <span data-ttu-id="45f0e-559">如果簽章`method`和`type`符合 （也就是所有的參數型別都相容），則此委派會在 null 參考上關閉。</span><span class="sxs-lookup"><span data-stu-id="45f0e-559">If the signatures of `method` and `type` match (that is, all parameter types are compatible), then the delegate is said to be closed over a null reference.</span></span> <span data-ttu-id="45f0e-560">叫用委派就像是在 null 執行個體，不是一個特別有用的東西，要呼叫的執行個體方法。</span><span class="sxs-lookup"><span data-stu-id="45f0e-560">Invoking the delegate is like calling an instance method on a null instance, which is not a particularly useful thing to do.</span></span>  
  
 <span data-ttu-id="45f0e-561">如果`firstArgument`為 null 參考並`method`是靜態的結果會取決於委派型別的簽章`type`以及`method`:</span><span class="sxs-lookup"><span data-stu-id="45f0e-561">If `firstArgument` is a null reference and `method` is static, the result depends on the signatures of the delegate type `type` and of `method`:</span></span>  
  
-   <span data-ttu-id="45f0e-562">如果簽章`method`和`type`符合 （也就是所有的參數型別都相容），此委派會表示開啟的靜態方法。</span><span class="sxs-lookup"><span data-stu-id="45f0e-562">If the signature of `method` and `type` match (that is, all parameter types are compatible), the delegate is said to represent an open static method.</span></span> <span data-ttu-id="45f0e-563">這是最常見的案例，對於靜態方法。</span><span class="sxs-lookup"><span data-stu-id="45f0e-563">This is the most common case for static methods.</span></span> <span data-ttu-id="45f0e-564">在此情況下，您可以在這裡取得更好的效能使用<xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29>方法多載。</span><span class="sxs-lookup"><span data-stu-id="45f0e-564">In this case, you can get slightly better performance by using the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload.</span></span>  
  
-   <span data-ttu-id="45f0e-565">如果簽章`type`開頭的第二個參數`method`和其餘的參數類型相容，則此委派會在 null 參考上關閉。</span><span class="sxs-lookup"><span data-stu-id="45f0e-565">If the signature of `type` begins with the second parameter of `method` and the rest of the parameter types are compatible, then the delegate is said to be closed over a null reference.</span></span> <span data-ttu-id="45f0e-566">第一個參數來叫用委派時，要傳遞 null 參考`method`。</span><span class="sxs-lookup"><span data-stu-id="45f0e-566">When the delegate is invoked, a null reference is passed to the first parameter of `method`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="45f0e-567">開頭[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，這個方法可用來存取非公用方法，如果呼叫者已授與<xref:System.Security.Permissions.ReflectionPermission>使用<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>旗標，並限制為呼叫端的非公用方法的授權集是否授與集或子集效果。</span><span class="sxs-lookup"><span data-stu-id="45f0e-567">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="45f0e-568">(請參閱[反映的安全性考量](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)。)</span><span class="sxs-lookup"><span data-stu-id="45f0e-568">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="45f0e-569">若要使用這項功能，您的應用程式應將目標設為 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] (含) 以後版本。</span><span class="sxs-lookup"><span data-stu-id="45f0e-569">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
## <a name="compatible-parameter-types-and-return-type"></a><span data-ttu-id="45f0e-570">相容的參數型別和傳回型別</span><span class="sxs-lookup"><span data-stu-id="45f0e-570">Compatible Parameter Types and Return Type</span></span>  
 <span data-ttu-id="45f0e-571">參數類型和委派的傳回型別必須與參數類型和委派所表示; 方法的傳回型別相容型別沒有完全相符。</span><span class="sxs-lookup"><span data-stu-id="45f0e-571">The parameter types and return type of a delegate must be compatible with the parameter types and return type of the method the delegate represents; the types do not have to match exactly.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="45f0e-572">.NET Framework 1.0 和 1.1 版中的類型必須完全相符。</span><span class="sxs-lookup"><span data-stu-id="45f0e-572">In the .NET Framework version 1.0 and 1.1 the types must match exactly.</span></span>  
  
 <span data-ttu-id="45f0e-573">如果委派參數的型別比方法參數的型別更嚴格，則委派的參數與對應的方法參數相容，因為這樣可保證傳遞給委派的引數能夠安全地傳遞給方法。</span><span class="sxs-lookup"><span data-stu-id="45f0e-573">A parameter of a delegate is compatible with the corresponding parameter of a method if the type of the delegate parameter is more restrictive than the type of the method parameter, because this guarantees that an argument passed to the delegate can be passed safely to the method.</span></span>  
  
 <span data-ttu-id="45f0e-574">同樣的，如果方法的傳回型別比委派的傳回型別更具限制性，由於此保證方法傳回的值會安全地轉換為委派的傳回型別，委派的傳回型別就會相容於方法的傳回型別。</span><span class="sxs-lookup"><span data-stu-id="45f0e-574">Similarly, the return type of a delegate is compatible with the return type of a method if the return type of the method is more restrictive than the return type of the delegate, because this guarantees that the return value of the method can be cast safely to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="45f0e-575">例如，使用類型參數的委派<xref:System.Collections.Hashtable>和傳回型別<xref:System.Object>可以代表具有一個型別的參數的方法<xref:System.Object>以及傳回值的型別<xref:System.Collections.Hashtable>。</span><span class="sxs-lookup"><span data-stu-id="45f0e-575">For example, a delegate with a parameter of type <xref:System.Collections.Hashtable> and a return type of <xref:System.Object> can represent a method with a parameter of type <xref:System.Object> and a return value of type <xref:System.Collections.Hashtable>.</span></span>  
  
## <a name="determining-the-methods-a-delegate-can-represent"></a><span data-ttu-id="45f0e-576">判斷方法的委派可以表示</span><span class="sxs-lookup"><span data-stu-id="45f0e-576">Determining the Methods a Delegate Can Represent</span></span>  
 <span data-ttu-id="45f0e-577">另一個實用的方式，將這個多載所提供之彈性<xref:System.Delegate.CreateDelegate%2A>是任何指定的委派可以代表四個不同的方法簽章和方法種類 （靜態和執行個體） 的組合。</span><span class="sxs-lookup"><span data-stu-id="45f0e-577">Another useful way to think of the flexibility provided by this overload of <xref:System.Delegate.CreateDelegate%2A> is that any given delegate can represent four different combinations of method signature and method kind (static versus instance).</span></span> <span data-ttu-id="45f0e-578">委派型別，請考慮`D`argumentem typu `C`。</span><span class="sxs-lookup"><span data-stu-id="45f0e-578">Consider a delegate type `D` with one argument of type `C`.</span></span> <span data-ttu-id="45f0e-579">以下描述方法`D`可以代表，忽略的傳回型別，因為它必須符合在所有情況下：</span><span class="sxs-lookup"><span data-stu-id="45f0e-579">The following describes the methods `D` can represent, ignoring the return type since it must match in all cases:</span></span>  
  
-   <span data-ttu-id="45f0e-580">`D` 可以代表任何有類型只有一個引數的執行個體方法`C`，不論執行個體方法屬於何種類型。</span><span class="sxs-lookup"><span data-stu-id="45f0e-580">`D` can represent any instance method that has exactly one argument of type `C`, regardless of what type the instance method belongs to.</span></span> <span data-ttu-id="45f0e-581">當<xref:System.Delegate.CreateDelegate%2A>呼叫時，`firstArgument`是類型的執行個體`method`所屬，並產生的委派會在該執行個體上關閉。</span><span class="sxs-lookup"><span data-stu-id="45f0e-581">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is an instance of the type `method` belongs to, and the resulting delegate is said to be closed over that instance.</span></span> <span data-ttu-id="45f0e-582">(透過極簡方式，`D`也可以關閉透過 null 參考若`firstArgument`是`null`。)</span><span class="sxs-lookup"><span data-stu-id="45f0e-582">(Trivially, `D` can also be closed over a null reference if `firstArgument` is `null`.)</span></span>  
  
-   <span data-ttu-id="45f0e-583">`D` 可以代表的執行個體方法`C`，沒有任何引數。</span><span class="sxs-lookup"><span data-stu-id="45f0e-583">`D` can represent an instance method of `C` that has no arguments.</span></span> <span data-ttu-id="45f0e-584">當<xref:System.Delegate.CreateDelegate%2A>呼叫時，`firstArgument`為 null 參考。</span><span class="sxs-lookup"><span data-stu-id="45f0e-584">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is a null reference.</span></span> <span data-ttu-id="45f0e-585">產生的委派表示開啟的執行個體方法和執行個體`C`必須提供每次叫用時。</span><span class="sxs-lookup"><span data-stu-id="45f0e-585">The resulting delegate represents an open instance method, and an instance of `C` must be supplied each time it is invoked.</span></span>  
  
-   <span data-ttu-id="45f0e-586">`D` 可以代表採用一個引數類型的靜態方法`C`，而且方法可以屬於任何類型。</span><span class="sxs-lookup"><span data-stu-id="45f0e-586">`D` can represent a static method that takes one argument of type `C`, and that method can belong to any type.</span></span> <span data-ttu-id="45f0e-587">當<xref:System.Delegate.CreateDelegate%2A>呼叫時，`firstArgument`為 null 參考。</span><span class="sxs-lookup"><span data-stu-id="45f0e-587">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is a null reference.</span></span> <span data-ttu-id="45f0e-588">產生的委派表示開啟的靜態方法和執行個體`C`必須提供每次叫用時。</span><span class="sxs-lookup"><span data-stu-id="45f0e-588">The resulting delegate represents an open static method, and an instance of `C` must be supplied each time it is invoked.</span></span>  
  
-   <span data-ttu-id="45f0e-589">`D` 可以代表屬於類型的靜態方法`F`且具有兩個引數，型別的`F`並輸入`C`。</span><span class="sxs-lookup"><span data-stu-id="45f0e-589">`D` can represent a static method that belongs to type `F` and has two arguments, of type `F` and type `C`.</span></span> <span data-ttu-id="45f0e-590">當<xref:System.Delegate.CreateDelegate%2A>呼叫時，`firstArgument`的執行個體`F`。</span><span class="sxs-lookup"><span data-stu-id="45f0e-590">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is an instance of `F`.</span></span> <span data-ttu-id="45f0e-591">產生的委派表示靜態方法，關閉該執行個體透過`F`。</span><span class="sxs-lookup"><span data-stu-id="45f0e-591">The resulting delegate represents a static method that is closed over that instance of `F`.</span></span> <span data-ttu-id="45f0e-592">請注意，萬一其中`F`和`C`都是相同的型別、 靜態方法會具有該類型的兩個引數。</span><span class="sxs-lookup"><span data-stu-id="45f0e-592">Note that in the case where `F` and `C` are the same type, the static method has two arguments of that type.</span></span> <span data-ttu-id="45f0e-593">(在此情況下，`D`如果覆蓋 null 參考`firstArgument`是`null`。)</span><span class="sxs-lookup"><span data-stu-id="45f0e-593">(In this case, `D` is closed over a null reference if `firstArgument` is `null`.)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="45f0e-594">本節包含三個程式碼範例。</span><span class="sxs-lookup"><span data-stu-id="45f0e-594">This section contains three code examples.</span></span> <span data-ttu-id="45f0e-595">第一個範例示範委派可建立四種： 覆蓋的執行個體方法，透過執行個體方法，是靜態方法，透過開啟開啟和關閉透過靜態方法。</span><span class="sxs-lookup"><span data-stu-id="45f0e-595">The first example demonstrates the four kinds of delegates that can be created: closed over an instance method, open over an instance method, open over a static method, and closed over a static method.</span></span>  
  
 <span data-ttu-id="45f0e-596">第二個程式碼範例會示範相容的參數型別和傳回型別。</span><span class="sxs-lookup"><span data-stu-id="45f0e-596">The second code example demonstrates compatible parameter types and return types.</span></span>  
  
 <span data-ttu-id="45f0e-597">第三個程式碼範例會定義單一的委派類型，並顯示可以代表委派類型的所有方法。</span><span class="sxs-lookup"><span data-stu-id="45f0e-597">The third code example defines a single delegate type, and shows all the methods that delegate type can represent.</span></span>  
  
 <span data-ttu-id="45f0e-598">**範例 1**</span><span class="sxs-lookup"><span data-stu-id="45f0e-598">**Example 1**</span></span>  
  
 <span data-ttu-id="45f0e-599">下列程式碼範例示範可使用的這個多載來建立委派的四種方式<xref:System.Delegate.CreateDelegate%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="45f0e-599">The following code example demonstrates the four ways a delegate can be created using this overload of the <xref:System.Delegate.CreateDelegate%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="45f0e-600">有兩個多載<xref:System.Delegate.CreateDelegate%2A>指定的方法`firstArgument`和<xref:System.Reflection.MethodInfo>; 其功能都相同，但是其中一個可讓您指定是否要在繫結，失敗時擲回，而其他一律會擲回。</span><span class="sxs-lookup"><span data-stu-id="45f0e-600">There are two overloads of the <xref:System.Delegate.CreateDelegate%2A> method that specify `firstArgument` and a <xref:System.Reflection.MethodInfo>; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws.</span></span> <span data-ttu-id="45f0e-601">此程式碼範例會使用這兩個多載。</span><span class="sxs-lookup"><span data-stu-id="45f0e-601">This code example uses both overloads.</span></span>  
  
 <span data-ttu-id="45f0e-602">此範例會宣告類別`C`靜態方法`M2`和執行個體方法`M1`，以及三個委派型別：`D1`可接受的執行個體`C`和字串，`D2`接受字串，而`D3`沒有任何引數。</span><span class="sxs-lookup"><span data-stu-id="45f0e-602">The example declares a class `C` with a static method `M2` and an instance method `M1`, and three delegate types: `D1` takes an instance of `C` and a string, `D2` takes a string, and `D3` has no arguments.</span></span>  
  
 <span data-ttu-id="45f0e-603">第二個類別，名為`Example`包含建立委派的程式碼。</span><span class="sxs-lookup"><span data-stu-id="45f0e-603">A second class named `Example` contains the code that creates the delegates.</span></span>  
  
-   <span data-ttu-id="45f0e-604">類型的委派`D2`、 已關閉的執行個體透過`C`，建立執行個體方法`M1`。</span><span class="sxs-lookup"><span data-stu-id="45f0e-604">A delegate of type `D2`, closed over an instance of `C`, is created for the instance method `M1`.</span></span> <span data-ttu-id="45f0e-605">它會使用不同的字串，表示繫結執行個體叫用`C`一律會使用。</span><span class="sxs-lookup"><span data-stu-id="45f0e-605">It is invoked with different strings, to show that the bound instance of `C` is always used.</span></span>  
  
-   <span data-ttu-id="45f0e-606">類型的委派`D1`，表示開啟執行個體方法，建立執行個體方法`M1`。</span><span class="sxs-lookup"><span data-stu-id="45f0e-606">A delegate of type `D1`, representing an open instance method, is created for the instance method `M1`.</span></span> <span data-ttu-id="45f0e-607">叫用委派時，必須傳遞執行個體。</span><span class="sxs-lookup"><span data-stu-id="45f0e-607">An instance must be passed when the delegate is invoked.</span></span>  
  
-   <span data-ttu-id="45f0e-608">類型的委派`D2`，表示開啟的靜態方法，靜態方法，建立`M2`。</span><span class="sxs-lookup"><span data-stu-id="45f0e-608">A delegate of type `D2`, representing an open static method, is created for the static method `M2`.</span></span>  
  
-   <span data-ttu-id="45f0e-609">最後，類型的委派`D3`覆蓋字串、 靜態方法，建立`M2`。</span><span class="sxs-lookup"><span data-stu-id="45f0e-609">Finally, a delegate of type `D3`, closed over a string, is created for the static method `M2`.</span></span> <span data-ttu-id="45f0e-610">方法會叫用來顯示它會使用繫結的字串。</span><span class="sxs-lookup"><span data-stu-id="45f0e-610">The method is invoked to show that it uses the bound string.</span></span>  
  
 [!code-csharp[Delegate.CreateDelegateTOM#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegateTOM/cs/openClosedOver.cs#1)]
 [!code-vb[Delegate.CreateDelegateTOM#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegateTOM/VB/openClosedOver.vb#1)]  
  
 <span data-ttu-id="45f0e-611">**範例 2**</span><span class="sxs-lookup"><span data-stu-id="45f0e-611">**Example 2**</span></span>  
  
 <span data-ttu-id="45f0e-612">下列程式碼範例示範的參數類型相容性，並傳回型別。</span><span class="sxs-lookup"><span data-stu-id="45f0e-612">The following code example demonstrates compatibility of parameter types and return types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="45f0e-613">此程式碼範例會使用<xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29>方法多載。</span><span class="sxs-lookup"><span data-stu-id="45f0e-613">This code example uses the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> method overload.</span></span> <span data-ttu-id="45f0e-614">使用其他多載會採用<xref:System.Reflection.MethodInfo>類似。</span><span class="sxs-lookup"><span data-stu-id="45f0e-614">The use of other overloads that take <xref:System.Reflection.MethodInfo> is similar.</span></span>  
  
 <span data-ttu-id="45f0e-615">在程式碼範例定義名為基底類別`Base`和名為類別`Derived`衍生自`Base`。</span><span class="sxs-lookup"><span data-stu-id="45f0e-615">The code example defines a base class named `Base` and a class named `Derived` that derives from `Base`.</span></span> <span data-ttu-id="45f0e-616">衍生的類別有`static`(`Shared` Visual Basic 中) 名為方法`MyMethod`具有一個參數的型別`Base`且傳回類型為`Derived`。</span><span class="sxs-lookup"><span data-stu-id="45f0e-616">The derived class has a `static` (`Shared` in Visual Basic) method named `MyMethod` with one parameter of type `Base` and a return type of `Derived`.</span></span> <span data-ttu-id="45f0e-617">在程式碼範例也會定義名為委派`Example`具有一個參數的型別`Derived`且傳回類型為`Base`。</span><span class="sxs-lookup"><span data-stu-id="45f0e-617">The code example also defines a delegate named `Example` that has one parameter of type `Derived` and a return type of `Base`.</span></span>  
  
 <span data-ttu-id="45f0e-618">在程式碼範例示範委派名為`Example`可用來表示方法`MyMethod`。</span><span class="sxs-lookup"><span data-stu-id="45f0e-618">The code example demonstrates that the delegate named `Example` can be used to represent the method `MyMethod`.</span></span> <span data-ttu-id="45f0e-619">此方法可以繫結至委派，因為：</span><span class="sxs-lookup"><span data-stu-id="45f0e-619">The method can be bound to the delegate because:</span></span>  
  
-   <span data-ttu-id="45f0e-620">委派的參數類型 (`Derived`) 是更具限制性的參數型別`MyMethod`(`Base`)，如此一來，它一律是安全地傳遞至委派的引數`MyMethod`。</span><span class="sxs-lookup"><span data-stu-id="45f0e-620">The parameter type of the delegate (`Derived`) is more restrictive than the parameter type of `MyMethod` (`Base`), so that it is always safe to pass the argument of the delegate to `MyMethod`.</span></span>  
  
-   <span data-ttu-id="45f0e-621">傳回型別`MyMethod`(`Derived`) 是更具限制性的委派參數類型 (`Base`)，如此一來，一定是安全轉型為委派的傳回型別方法的傳回型別。</span><span class="sxs-lookup"><span data-stu-id="45f0e-621">The return type of `MyMethod` (`Derived`) is more restrictive than the parameter type of the delegate (`Base`), so that it is always safe to cast the return type of the method to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="45f0e-622">在程式碼範例會產生任何輸出。</span><span class="sxs-lookup"><span data-stu-id="45f0e-622">The code example produces no output.</span></span>  
  
 [!code-cpp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/cpp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cpp/source.cpp#1)]
 [!code-csharp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cs/source.cs#1)]
 [!code-vb[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/vb/source.vb#1)]  
  
 <span data-ttu-id="45f0e-623">**範例 3**</span><span class="sxs-lookup"><span data-stu-id="45f0e-623">**Example 3**</span></span>  
  
 <span data-ttu-id="45f0e-624">下列程式碼範例顯示單一的委派類型可以表示的所有方法。</span><span class="sxs-lookup"><span data-stu-id="45f0e-624">The following code example shows all the methods a single delegate type can represent.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="45f0e-625">有兩個多載<xref:System.Delegate.CreateDelegate%2A>指定的方法`firstArgument`和<xref:System.Reflection.MethodInfo>; 其功能都相同，但是其中一個可讓您指定是否要在繫結，失敗時擲回，而其他一律會擲回。</span><span class="sxs-lookup"><span data-stu-id="45f0e-625">There are two overloads of the <xref:System.Delegate.CreateDelegate%2A> method that specify `firstArgument` and a <xref:System.Reflection.MethodInfo>; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws.</span></span> <span data-ttu-id="45f0e-626">此程式碼範例會使用這兩個多載。</span><span class="sxs-lookup"><span data-stu-id="45f0e-626">This code example uses both overloads.</span></span>  
  
 <span data-ttu-id="45f0e-627">此程式碼範例會定義兩個類別：`C`和`F`，和委派型別`D`argumentem typu `C`。</span><span class="sxs-lookup"><span data-stu-id="45f0e-627">The code example defines two classes, `C` and `F`, and a delegate type `D` with one argument of type `C`.</span></span> <span data-ttu-id="45f0e-628">類別有相符的靜態和執行個體方法`M1`， `M3`，並`M4`，和類別`C`也有執行個體方法`M2`，沒有任何引數。</span><span class="sxs-lookup"><span data-stu-id="45f0e-628">The classes have matching static and instance methods `M1`, `M3`, and `M4`, and class `C` also has an instance method `M2` that has no arguments.</span></span>  
  
 <span data-ttu-id="45f0e-629">第三個類別，名為`Example`包含建立委派的程式碼。</span><span class="sxs-lookup"><span data-stu-id="45f0e-629">A third class named `Example` contains the code that creates the delegates.</span></span>  
  
-   <span data-ttu-id="45f0e-630">委派會建立執行個體方法`M1`型別的`C`並輸入`F`; 透過個別類型的執行個體，每個已關閉。</span><span class="sxs-lookup"><span data-stu-id="45f0e-630">Delegates are created for instance method `M1` of type `C` and type `F`; each is closed over an instance of the respective type.</span></span> <span data-ttu-id="45f0e-631">方法`M1`型別的`C`顯示`ID`屬性繫結的執行個體與引數。</span><span class="sxs-lookup"><span data-stu-id="45f0e-631">Method `M1` of type `C` displays the `ID` properties of the bound instance and of the argument.</span></span>  
  
-   <span data-ttu-id="45f0e-632">方法建立委派`M2`型別的`C`。</span><span class="sxs-lookup"><span data-stu-id="45f0e-632">A delegate is created for method `M2` of type `C`.</span></span> <span data-ttu-id="45f0e-633">這是開啟的執行個體的委派，其中委派的引數代表方法的執行個體上的隱藏第一個引數。</span><span class="sxs-lookup"><span data-stu-id="45f0e-633">This is an open instance delegate, in which the argument of the delegate represents the hidden first argument on the instance method.</span></span> <span data-ttu-id="45f0e-634">此方法會有任何其他引數。</span><span class="sxs-lookup"><span data-stu-id="45f0e-634">The method has no other arguments.</span></span>  
  
-   <span data-ttu-id="45f0e-635">為靜態方法建立委派`M3`型別的`C`並輸入`F`; 這些是開啟的靜態委派。</span><span class="sxs-lookup"><span data-stu-id="45f0e-635">Delegates are created for static method `M3` of type `C` and type `F`; these are open static delegates.</span></span>  
  
-   <span data-ttu-id="45f0e-636">最後，委派會建立靜態方法`M4`型別的`C`並輸入`F`; 每個方法都宣告的型別，做為其第一個引數，以及提供型別的執行個體，所以委派會覆蓋其第一個引數.</span><span class="sxs-lookup"><span data-stu-id="45f0e-636">Finally, delegates are created for static method `M4` of type `C` and type `F`; each method has the declaring type as its first argument, and an instance of the type is supplied, so the delegates are closed over their first arguments.</span></span> <span data-ttu-id="45f0e-637">方法`M4`型別的`C`顯示`ID`屬性繫結的執行個體與引數。</span><span class="sxs-lookup"><span data-stu-id="45f0e-637">Method `M4` of type `C` displays the `ID` properties of the bound instance and of the argument.</span></span>  
  
 [!code-csharp[Delegate.CreateDelegateTOM_2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegateTOM_2/cs/source.cs#1)]
 [!code-vb[Delegate.CreateDelegateTOM_2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegateTOM_2/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="45f0e-638">
            <paramref name="type" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-638">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="45f0e-639">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-639">-or-</span>
          </span>
          <span data-ttu-id="45f0e-640">
            <paramref name="method" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-640">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="45f0e-641">
            <paramref name="type" /> 不會繼承 <see cref="T:System.MulticastDelegate" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-641">
              <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          </span>
          <span data-ttu-id="45f0e-642">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-642">-or-</span>
          </span>
          <span data-ttu-id="45f0e-643">
            <paramref name="type" /> 不是 <see langword="RuntimeType" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-643">
              <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="45f0e-644">請參閱[反映中的執行階段類型](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-644">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
          <span data-ttu-id="45f0e-645">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-645">-or-</span>
          </span>
          <span data-ttu-id="45f0e-646">無法繫結 <paramref name="method" />，而且 <paramref name="throwOnBindFailure" /> 為 <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-646">
              <paramref name="method" /> cannot be bound, and <paramref name="throwOnBindFailure" /> is <see langword="true" />.</span>
          </span>
          <span data-ttu-id="45f0e-647">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-647">-or-</span>
          </span>
          <span data-ttu-id="45f0e-648">
            <paramref name="method" /> 不是 <see langword="RuntimeMethodInfo" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-648">
              <paramref name="method" /> is not a <see langword="RuntimeMethodInfo" />.</span>
          </span>
          <span data-ttu-id="45f0e-649">請參閱[反映中的執行階段類型](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-649">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="45f0e-650">找不到 <paramref name="type" /> 的 <see langword="Invoke" /> 方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-650">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="45f0e-651">呼叫端沒有存取 <paramref name="method" /> 所需的權限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-651">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="45f0e-652">當叫用晚期繫結機制透過例如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-652">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="45f0e-653">關聯的列舉型別：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-653">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, object target, string method, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, object target, string method, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Object ^ target, System::String ^ method, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * obj * string * bool -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, target, method, ignoreCase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="45f0e-654">要建立之委派的 <see cref="T:System.Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-654">The <see cref="T:System.Type" /> of delegate to create.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="45f0e-655">叫用 <c>method</c> 的類別執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-655">The class instance on which <c>method</c> is invoked.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="45f0e-656">委派要表示的執行個體方法名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-656">The name of the instance method that the delegate is to represent.</span>
          </span>
        </param>
        <param name="ignoreCase">
          <span data-ttu-id="45f0e-657">布林值 (Boolean)，指出是否在比較方法名稱時忽略大小寫。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-657">A Boolean indicating whether to ignore the case when comparing the name of the method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45f0e-658">建立指定類型的委派，這個委派表示要在指定的類別執行個體上，使用指定的大小寫區分來叫用的指定執行個體方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-658">Creates a delegate of the specified type that represents the specified instance method to invoke on the specified class instance with the specified case-sensitivity.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45f0e-659">指定類型的委派，表示要在指定的類別執行個體上叫用的指定執行個體方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-659">A delegate of the specified type that represents the specified instance method to invoke on the specified class instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45f0e-660">這個方法只會建立委派執行個體方法。</span><span class="sxs-lookup"><span data-stu-id="45f0e-660">This method creates delegates for instance methods only.</span></span> <span data-ttu-id="45f0e-661">執行個體方法則是類別; 的執行個體相關聯的方法靜態方法是類別本身相關聯的方法。</span><span class="sxs-lookup"><span data-stu-id="45f0e-661">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 <span data-ttu-id="45f0e-662">這個方法多載就相當於呼叫<xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29>方法多載，指定`true`如`throwOnBindFailure`。</span><span class="sxs-lookup"><span data-stu-id="45f0e-662">This method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> method overload, specifying `true` for `throwOnBindFailure`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="45f0e-663">開頭[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，這個方法可用來存取非公用方法，如果呼叫者已授與<xref:System.Security.Permissions.ReflectionPermission>使用<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>旗標，並限制為呼叫端的非公用方法的授權集是否授與集或子集效果。</span><span class="sxs-lookup"><span data-stu-id="45f0e-663">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="45f0e-664">(請參閱[反映的安全性考量](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)。)</span><span class="sxs-lookup"><span data-stu-id="45f0e-664">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="45f0e-665">若要使用這項功能，您的應用程式應將目標設為 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] (含) 以後版本。</span><span class="sxs-lookup"><span data-stu-id="45f0e-665">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="45f0e-666">
            <paramref name="type" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-666">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="45f0e-667">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-667">-or-</span>
          </span>
          <span data-ttu-id="45f0e-668">
            <paramref name="target" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-668">
              <paramref name="target" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="45f0e-669">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-669">-or-</span>
          </span>
          <span data-ttu-id="45f0e-670">
            <paramref name="method" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-670">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="45f0e-671">
            <paramref name="type" /> 不會繼承 <see cref="T:System.MulticastDelegate" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-671">
              <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          </span>
          <span data-ttu-id="45f0e-672">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-672">-or-</span>
          </span>
          <span data-ttu-id="45f0e-673">
            <paramref name="type" /> 不是 <see langword="RuntimeType" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-673">
              <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="45f0e-674">請參閱[反映中的執行階段類型](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-674">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
          <span data-ttu-id="45f0e-675">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-675">-or-</span>
          </span>
          <span data-ttu-id="45f0e-676">
            <paramref name="method" /> 不是執行個體方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-676">
              <paramref name="method" /> is not an instance method.</span>
          </span>
          <span data-ttu-id="45f0e-677">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-677">-or-</span>
          </span>
          <span data-ttu-id="45f0e-678">例如，因為找不到 <paramref name="method" />，所以無法將其繫結。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-678">
              <paramref name="method" /> cannot be bound, for example because it cannot be found.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="45f0e-679">找不到 <paramref name="type" /> 的 <see langword="Invoke" /> 方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-679">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="45f0e-680">呼叫端沒有存取 <paramref name="method" /> 所需的權限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-680">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="45f0e-681">當叫用晚期繫結機制透過例如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-681">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="45f0e-682">關聯的列舉型別：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-682">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, Type target, string method, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, class System.Type target, string method, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Type,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, Type ^ target, System::String ^ method, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * Type * string * bool -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, target, method, ignoreCase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="target" Type="System.Type" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="45f0e-683">要建立之委派的 <see cref="T:System.Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-683">The <see cref="T:System.Type" /> of delegate to create.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="45f0e-684">
            <see cref="T:System.Type" />，代表可實作 <c>method</c> 的類別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-684">The <see cref="T:System.Type" /> representing the class that implements <c>method</c>.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="45f0e-685">委派要表示的靜態方法名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-685">The name of the static method that the delegate is to represent.</span>
          </span>
        </param>
        <param name="ignoreCase">
          <span data-ttu-id="45f0e-686">布林值 (Boolean)，指出是否在比較方法名稱時忽略大小寫。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-686">A Boolean indicating whether to ignore the case when comparing the name of the method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45f0e-687">建立指定之類型的委派，其表示指定之類別的指定靜態方法，且指定區分大小寫的方式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-687">Creates a delegate of the specified type that represents the specified static method of the specified class, with the specified case-sensitivity.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45f0e-688">指定類型的委派，表示指定類別的指定靜態方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-688">A delegate of the specified type that represents the specified static method of the specified class.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45f0e-689">這個方法會建立只有靜態方法的委派。</span><span class="sxs-lookup"><span data-stu-id="45f0e-689">This method creates delegates for static methods only.</span></span> <span data-ttu-id="45f0e-690">執行個體方法則是類別; 的執行個體相關聯的方法靜態方法是類別本身相關聯的方法。</span><span class="sxs-lookup"><span data-stu-id="45f0e-690">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 <span data-ttu-id="45f0e-691">這個方法多載就相當於呼叫<xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29>方法多載，指定`true`如`throwOnBindFailure`。</span><span class="sxs-lookup"><span data-stu-id="45f0e-691">This method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> method overload, specifying `true` for `throwOnBindFailure`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="45f0e-692">開頭[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，這個方法可用來存取非公用方法，如果呼叫者已授與<xref:System.Security.Permissions.ReflectionPermission>使用<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>旗標，並限制為呼叫端的非公用方法的授權集是否授與集或子集效果。</span><span class="sxs-lookup"><span data-stu-id="45f0e-692">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="45f0e-693">(請參閱[反映的安全性考量](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)。)</span><span class="sxs-lookup"><span data-stu-id="45f0e-693">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="45f0e-694">若要使用這項功能，您的應用程式應將目標設為 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] (含) 以後版本。</span><span class="sxs-lookup"><span data-stu-id="45f0e-694">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="45f0e-695">
            <paramref name="type" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-695">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="45f0e-696">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-696">-or-</span>
          </span>
          <span data-ttu-id="45f0e-697">
            <paramref name="target" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-697">
              <paramref name="target" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="45f0e-698">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-698">-or-</span>
          </span>
          <span data-ttu-id="45f0e-699">
            <paramref name="method" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-699">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="45f0e-700">
            <paramref name="type" /> 不會繼承 <see cref="T:System.MulticastDelegate" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-700">
              <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          </span>
          <span data-ttu-id="45f0e-701">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-701">-or-</span>
          </span>
          <span data-ttu-id="45f0e-702">
            <paramref name="type" /> 不是 <see langword="RuntimeType" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-702">
              <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="45f0e-703">請參閱[反映中的執行階段類型](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-703">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
          <span data-ttu-id="45f0e-704">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-704">-or-</span>
          </span>
          <span data-ttu-id="45f0e-705">
            <paramref name="target" /> 不是 <see langword="RuntimeType" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-705">
              <paramref name="target" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="45f0e-706">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-706">-or-</span>
          </span>
          <span data-ttu-id="45f0e-707">
            <paramref name="target" /> 是開放式泛型類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-707">
              <paramref name="target" /> is an open generic type.</span>
          </span>
          <span data-ttu-id="45f0e-708">亦即，其 <see cref="P:System.Type.ContainsGenericParameters" /> 屬性為 <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-708">That is, its <see cref="P:System.Type.ContainsGenericParameters" /> property is <see langword="true" />.</span>
          </span>
          <span data-ttu-id="45f0e-709">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-709">-or-</span>
          </span>
          <span data-ttu-id="45f0e-710">
            <paramref name="method" /> 不是 <see langword="static" /> 方法 (Visual Basic 中的 <see langword="Shared" /> 方法)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-710">
              <paramref name="method" /> is not a <see langword="static" /> method (<see langword="Shared" /> method in Visual Basic).</span>
          </span>
          <span data-ttu-id="45f0e-711">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-711">-or-</span>
          </span>
          <span data-ttu-id="45f0e-712">例如，因為找不到 <paramref name="method" />，所以無法將其繫結。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-712">
              <paramref name="method" /> cannot be bound, for example because it cannot be found.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="45f0e-713">找不到 <paramref name="type" /> 的 <see langword="Invoke" /> 方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-713">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="45f0e-714">呼叫端沒有存取 <paramref name="method" /> 所需的權限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-714">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="45f0e-715">當叫用晚期繫結機制透過例如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-715">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="45f0e-716">關聯的列舉型別：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-716">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, object target, string method, bool ignoreCase, bool throwOnBindFailure);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, object target, string method, bool ignoreCase, bool throwOnBindFailure) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Object ^ target, System::String ^ method, bool ignoreCase, bool throwOnBindFailure);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * obj * string * bool * bool -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, target, method, ignoreCase, throwOnBindFailure)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="throwOnBindFailure" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="45f0e-717">要建立之委派的 <see cref="T:System.Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-717">The <see cref="T:System.Type" /> of delegate to create.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="45f0e-718">叫用 <c>method</c> 的類別執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-718">The class instance on which <c>method</c> is invoked.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="45f0e-719">委派要表示的執行個體方法名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-719">The name of the instance method that the delegate is to represent.</span>
          </span>
        </param>
        <param name="ignoreCase">
          <span data-ttu-id="45f0e-720">布林值 (Boolean)，指出是否在比較方法名稱時忽略大小寫。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-720">A Boolean indicating whether to ignore the case when comparing the name of the method.</span>
          </span>
        </param>
        <param name="throwOnBindFailure">
          <span data-ttu-id="45f0e-721">
            <see langword="true" /> 表示如果無法繫結 <c>method</c> 則擲回例外狀況，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-721">
              <see langword="true" /> to throw an exception if <c>method</c> cannot be bound; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45f0e-722">建立指定之類型的委派，其表示要在指定的類別執行個體上叫用的指定執行個體方法，且會指定區分大小寫的方式以及在繫結失敗時要發生的行為。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-722">Creates a delegate of the specified type that represents the specified instance method to invoke on the specified class instance, with the specified case-sensitivity and the specified behavior on failure to bind.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45f0e-723">指定類型的委派，表示要在指定的類別執行個體上叫用的指定執行個體方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-723">A delegate of the specified type that represents the specified instance method to invoke on the specified class instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45f0e-724">這個方法只會建立委派執行個體方法。</span><span class="sxs-lookup"><span data-stu-id="45f0e-724">This method creates delegates for instance methods only.</span></span> <span data-ttu-id="45f0e-725">執行個體方法則是類別; 的執行個體相關聯的方法靜態方法是類別本身相關聯的方法。</span><span class="sxs-lookup"><span data-stu-id="45f0e-725">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="45f0e-726">開頭[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，這個方法可用來存取非公用方法，如果呼叫者已授與<xref:System.Security.Permissions.ReflectionPermission>使用<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>旗標，並限制為呼叫端的非公用方法的授權集是否授與集或子集效果。</span><span class="sxs-lookup"><span data-stu-id="45f0e-726">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="45f0e-727">(請參閱[反映的安全性考量](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)。)</span><span class="sxs-lookup"><span data-stu-id="45f0e-727">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="45f0e-728">若要使用這項功能，您的應用程式應將目標設為 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] (含) 以後版本。</span><span class="sxs-lookup"><span data-stu-id="45f0e-728">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="45f0e-729">
            <paramref name="type" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-729">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="45f0e-730">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-730">-or-</span>
          </span>
          <span data-ttu-id="45f0e-731">
            <paramref name="target" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-731">
              <paramref name="target" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="45f0e-732">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-732">-or-</span>
          </span>
          <span data-ttu-id="45f0e-733">
            <paramref name="method" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-733">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="45f0e-734">
            <paramref name="type" /> 不會繼承 <see cref="T:System.MulticastDelegate" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-734">
              <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          </span>
          <span data-ttu-id="45f0e-735">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-735">-or-</span>
          </span>
          <span data-ttu-id="45f0e-736">
            <paramref name="type" /> 不是 <see langword="RuntimeType" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-736">
              <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="45f0e-737">請參閱[反映中的執行階段類型](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-737">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
          <span data-ttu-id="45f0e-738">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-738">-or-</span>
          </span>
          <span data-ttu-id="45f0e-739">
            <paramref name="method" /> 不是執行個體方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-739">
              <paramref name="method" /> is not an instance method.</span>
          </span>
          <span data-ttu-id="45f0e-740">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-740">-or-</span>
          </span>
          <span data-ttu-id="45f0e-741">無法繫結 <paramref name="method" />，例如因為找不到該方法，以及 <paramref name="throwOnBindFailure" /> 為 <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-741">
              <paramref name="method" /> cannot be bound, for example because it cannot be found, and <paramref name="throwOnBindFailure" /> is <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="45f0e-742">找不到 <paramref name="type" /> 的 <see langword="Invoke" /> 方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-742">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="45f0e-743">呼叫端沒有存取 <paramref name="method" /> 所需的權限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-743">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="45f0e-744">當叫用晚期繫結機制透過例如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-744">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="45f0e-745">關聯的列舉型別：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-745">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, Type target, string method, bool ignoreCase, bool throwOnBindFailure);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, class System.Type target, string method, bool ignoreCase, bool throwOnBindFailure) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Type,System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, Type ^ target, System::String ^ method, bool ignoreCase, bool throwOnBindFailure);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * Type * string * bool * bool -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, target, method, ignoreCase, throwOnBindFailure)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="target" Type="System.Type" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="throwOnBindFailure" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="45f0e-746">要建立之委派的 <see cref="T:System.Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-746">The <see cref="T:System.Type" /> of delegate to create.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="45f0e-747">
            <see cref="T:System.Type" />，代表可實作 <c>method</c> 的類別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-747">The <see cref="T:System.Type" /> representing the class that implements <c>method</c>.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="45f0e-748">委派要表示的靜態方法名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-748">The name of the static method that the delegate is to represent.</span>
          </span>
        </param>
        <param name="ignoreCase">
          <span data-ttu-id="45f0e-749">布林值 (Boolean)，指出是否在比較方法名稱時忽略大小寫。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-749">A Boolean indicating whether to ignore the case when comparing the name of the method.</span>
          </span>
        </param>
        <param name="throwOnBindFailure">
          <span data-ttu-id="45f0e-750">
            <see langword="true" /> 表示如果無法繫結 <c>method</c> 則擲回例外狀況，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-750">
              <see langword="true" /> to throw an exception if <c>method</c> cannot be bound; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45f0e-751">建立指定之類型的委派，其表示指定之類別的指定靜態方法，且會指定區分大小寫的方式以及在繫結失敗時要發生的行為。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-751">Creates a delegate of the specified type that represents the specified static method of the specified class, with the specified case-sensitivity and the specified behavior on failure to bind.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45f0e-752">指定類型的委派，表示指定類別的指定靜態方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-752">A delegate of the specified type that represents the specified static method of the specified class.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45f0e-753">這個方法會建立只有靜態方法的委派。</span><span class="sxs-lookup"><span data-stu-id="45f0e-753">This method creates delegates for static methods only.</span></span> <span data-ttu-id="45f0e-754">執行個體方法則是類別; 的執行個體相關聯的方法靜態方法是類別本身相關聯的方法。</span><span class="sxs-lookup"><span data-stu-id="45f0e-754">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="45f0e-755">開頭[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，這個方法可用來存取非公用方法，如果呼叫者已授與<xref:System.Security.Permissions.ReflectionPermission>使用<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>旗標，並限制為呼叫端的非公用方法的授權集是否授與集或子集效果。</span><span class="sxs-lookup"><span data-stu-id="45f0e-755">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="45f0e-756">(請參閱[反映的安全性考量](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)。)</span><span class="sxs-lookup"><span data-stu-id="45f0e-756">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="45f0e-757">若要使用這項功能，您的應用程式應將目標設為 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] (含) 以後版本。</span><span class="sxs-lookup"><span data-stu-id="45f0e-757">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="45f0e-758">
            <paramref name="type" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-758">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="45f0e-759">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-759">-or-</span>
          </span>
          <span data-ttu-id="45f0e-760">
            <paramref name="target" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-760">
              <paramref name="target" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="45f0e-761">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-761">-or-</span>
          </span>
          <span data-ttu-id="45f0e-762">
            <paramref name="method" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-762">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="45f0e-763">
            <paramref name="type" /> 不會繼承 <see cref="T:System.MulticastDelegate" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-763">
              <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          </span>
          <span data-ttu-id="45f0e-764">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-764">-or-</span>
          </span>
          <span data-ttu-id="45f0e-765">
            <paramref name="type" /> 不是 <see langword="RuntimeType" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-765">
              <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="45f0e-766">請參閱[反映中的執行階段類型](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-766">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
          <span data-ttu-id="45f0e-767">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-767">-or-</span>
          </span>
          <span data-ttu-id="45f0e-768">
            <paramref name="target" /> 不是 <see langword="RuntimeType" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-768">
              <paramref name="target" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="45f0e-769">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-769">-or-</span>
          </span>
          <span data-ttu-id="45f0e-770">
            <paramref name="target" /> 是開放式泛型類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-770">
              <paramref name="target" /> is an open generic type.</span>
          </span>
          <span data-ttu-id="45f0e-771">亦即，其 <see cref="P:System.Type.ContainsGenericParameters" /> 屬性為 <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-771">That is, its <see cref="P:System.Type.ContainsGenericParameters" /> property is <see langword="true" />.</span>
          </span>
          <span data-ttu-id="45f0e-772">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-772">-or-</span>
          </span>
          <span data-ttu-id="45f0e-773">
            <paramref name="method" /> 不是 <see langword="static" /> 方法 (Visual Basic 中的 <see langword="Shared" /> 方法)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-773">
              <paramref name="method" /> is not a <see langword="static" /> method (<see langword="Shared" /> method in Visual Basic).</span>
          </span>
          <span data-ttu-id="45f0e-774">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-774">-or-</span>
          </span>
          <span data-ttu-id="45f0e-775">無法繫結 <paramref name="method" />，例如因為找不到該方法，以及 <paramref name="throwOnBindFailure" /> 為 <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-775">
              <paramref name="method" /> cannot be bound, for example because it cannot be found, and <paramref name="throwOnBindFailure" /> is <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="45f0e-776">找不到 <paramref name="type" /> 的 <see langword="Invoke" /> 方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-776">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="45f0e-777">呼叫端沒有存取 <paramref name="method" /> 所需的權限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-777">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="45f0e-778">當叫用晚期繫結機制透過例如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-778">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="45f0e-779">關聯的列舉型別：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-779">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="DynamicInvoke">
      <MemberSignature Language="C#" Value="public object DynamicInvoke (params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object DynamicInvoke(object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.DynamicInvoke(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function DynamicInvoke (ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ DynamicInvoke(... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.DynamicInvoke : obj[] -&gt; obj" Usage="delegate.DynamicInvoke args" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="args">
          <span data-ttu-id="45f0e-780">物件的陣列，這些物件是要傳遞至目前委派所表示方法的引數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-780">An array of objects that are the arguments to pass to the method represented by the current delegate.</span>
          </span>
          <span data-ttu-id="45f0e-781">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-781">-or-</span>
          </span>
          <span data-ttu-id="45f0e-782">如果目前委派所表示的方法不需要引數，則為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-782">
              <see langword="null" />, if the method represented by the current delegate does not require arguments.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45f0e-783">動態叫用 (晚期繫結) 目前委派所表示的方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-783">Dynamically invokes (late-bound) the method represented by the current delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45f0e-784">物件，由委派所表示的方法傳回。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-784">The object returned by the method represented by the delegate.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45f0e-785">這個方法會呼叫 <xref:System.Delegate.DynamicInvokeImpl%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="45f0e-785">This method calls the <xref:System.Delegate.DynamicInvokeImpl%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="45f0e-786">呼叫端無權存取由委派所表示的方法 (例如，如果方法是私用的)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-786">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span>
          </span>
          <span data-ttu-id="45f0e-787">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-787">-or-</span>
          </span>
          <span data-ttu-id="45f0e-788">在 <paramref name="args" /> 中列示的參數數目、順序或型別是無效的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-788">The number, order, or type of parameters listed in <paramref name="args" /> is invalid.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="45f0e-789">委派所表示的方法在不支援該方法的物件或類別上被叫用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-789">The method represented by the delegate is invoked on an object or a class that does not support it.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="45f0e-790">委派所表示的方法是執行個體方法，並且目標物件是 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-790">The method represented by the delegate is an instance method and the target object is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="45f0e-791">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-791">-or-</span>
          </span>
          <span data-ttu-id="45f0e-792">其中一個封裝的方法會擲回例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-792">One of the encapsulated methods throws an exception.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="45f0e-793">當叫用晚期繫結機制透過例如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-793">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="45f0e-794">相關聯的列舉型別： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-794">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Delegate.DynamicInvokeImpl(System.Object[])" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="DynamicInvokeImpl">
      <MemberSignature Language="C#" Value="protected virtual object DynamicInvokeImpl (object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance object DynamicInvokeImpl(object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.DynamicInvokeImpl(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function DynamicInvokeImpl (args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Object ^ DynamicInvokeImpl(cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="abstract member DynamicInvokeImpl : obj[] -&gt; obj&#xA;override this.DynamicInvokeImpl : obj[] -&gt; obj" Usage="delegate.DynamicInvokeImpl args" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="args">
          <span data-ttu-id="45f0e-795">物件的陣列，這些物件是要傳遞至目前委派所表示方法的引數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-795">An array of objects that are the arguments to pass to the method represented by the current delegate.</span>
          </span>
          <span data-ttu-id="45f0e-796">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-796">-or-</span>
          </span>
          <span data-ttu-id="45f0e-797">如果目前委派所表示的方法不需要引數，則為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-797">
              <see langword="null" />, if the method represented by the current delegate does not require arguments.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45f0e-798">動態叫用 (晚期繫結) 目前委派所表示的方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-798">Dynamically invokes (late-bound) the method represented by the current delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45f0e-799">物件，由委派所表示的方法傳回。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-799">The object returned by the method represented by the delegate.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45f0e-800">這個方法會實作 <xref:System.Delegate.DynamicInvoke%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="45f0e-800">This method implements the <xref:System.Delegate.DynamicInvoke%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="45f0e-801">呼叫端無權存取由委派所表示的方法 (例如，如果方法是私用的)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-801">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span>
          </span>
          <span data-ttu-id="45f0e-802">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-802">-or-</span>
          </span>
          <span data-ttu-id="45f0e-803">在 <paramref name="args" /> 中列示的參數數目、順序或型別是無效的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-803">The number, order, or type of parameters listed in <paramref name="args" /> is invalid.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="45f0e-804">委派所表示的方法在不支援該方法的物件或類別上被叫用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-804">The method represented by the delegate is invoked on an object or a class that does not support it.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="45f0e-805">委派所表示的方法是執行個體方法，並且目標物件是 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-805">The method represented by the delegate is an instance method and the target object is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="45f0e-806">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-806">-or-</span>
          </span>
          <span data-ttu-id="45f0e-807">其中一個封裝的方法會擲回例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-807">One of the encapsulated methods throws an exception.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="45f0e-808">當叫用晚期繫結機制透過例如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-808">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="45f0e-809">相關聯的列舉型別： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-809">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Delegate.DynamicInvoke(System.Object[])" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="delegate.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="45f0e-810">要與目前委派比較的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-810">The object to compare with the current delegate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45f0e-811">判斷指定的物件和目前的委派是否具有相同類型，並共用相同的目標、方法和引動過程清單。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-811">Determines whether the specified object and the current delegate are of the same type and share the same targets, methods, and invocation list.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45f0e-812">如果 <paramref name="obj" /> 和目前的委派具有相同的目標、方法和引動過程清單，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-812">
              <see langword="true" /> if <paramref name="obj" /> and the current delegate have the same targets, methods, and invocation list; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45f0e-813">如果兩個委派型別相同，它們不會視為相等。</span><span class="sxs-lookup"><span data-stu-id="45f0e-813">If the two delegates are not of the same type, they are not considered equal.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="45f0e-814">在.NET Framework 1.0 和 1.1 版中，兩個委派視為相等，如果其目標、 方法和引動過程清單等於，即使委派的型別不同。</span><span class="sxs-lookup"><span data-stu-id="45f0e-814">In the .NET Framework version 1.0 and 1.1, two delegates were considered equal if their targets, methods, and invocation list were equal, even if the delegates were of different types.</span></span>  
  
 <span data-ttu-id="45f0e-815">方法和目標會比較相等，如下所示：</span><span class="sxs-lookup"><span data-stu-id="45f0e-815">The methods and targets are compared for equality as follows:</span></span>  
  
-   <span data-ttu-id="45f0e-816">如果要比較的兩個方法都是靜態，而且都是相同的類別上的相同方法，方法都視為相等，並為目標也會視為相等。</span><span class="sxs-lookup"><span data-stu-id="45f0e-816">If the two methods being compared are both static and are the same method on the same class, the methods are considered equal and the targets are also considered equal.</span></span>  
  
-   <span data-ttu-id="45f0e-817">如果要比較的兩種方法是執行個體方法，而且都是相同物件上的相同方法，方法都視為相等，並為目標也會視為相等。</span><span class="sxs-lookup"><span data-stu-id="45f0e-817">If the two methods being compared are instance methods and are the same method on the same object, the methods are considered equal and the targets are also considered equal.</span></span>  
  
-   <span data-ttu-id="45f0e-818">否則，方法不會被視為相等，而且目標也不會視為相等。</span><span class="sxs-lookup"><span data-stu-id="45f0e-818">Otherwise, the methods are not considered to be equal and the targets are also not considered to be equal.</span></span>  
  
 <span data-ttu-id="45f0e-819">只有具有相同的順序，而且在兩個清單的對應項目代表相同的方法和目標，則兩個引動過程清單會視為相同。</span><span class="sxs-lookup"><span data-stu-id="45f0e-819">Two invocation lists are considered identical only if they have the same order and the corresponding elements from the two lists represent the same method and target.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="45f0e-820">呼叫端無權存取由委派所表示的方法 (例如，如果方法是私用的)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-820">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="45f0e-821">當叫用晚期繫結機制透過例如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-821">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="45f0e-822">相關聯的列舉型別： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-822">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="delegate.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="45f0e-823">傳回委派的雜湊碼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-823">Returns a hash code for the delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45f0e-824">委派的雜湊碼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-824">A hash code for the delegate.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45f0e-825">這個方法的傳回值必須不會保存兩個原因。</span><span class="sxs-lookup"><span data-stu-id="45f0e-825">The return value of this method must not be persisted for two reasons.</span></span> <span data-ttu-id="45f0e-826">首先，類別的雜湊函式可能會改變以產生更好的分佈，呈現從舊的雜湊函式的任何值沒有什麼用處。</span><span class="sxs-lookup"><span data-stu-id="45f0e-826">First, the hash function of a class might be altered to generate a better distribution, rendering any values from the old hash function useless.</span></span> <span data-ttu-id="45f0e-827">其次，這個類別的預設實作不保證相同的值會由不同執行個體。</span><span class="sxs-lookup"><span data-stu-id="45f0e-827">Second, the default implementation of this class does not guarantee that the same value will be returned by different instances.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="45f0e-828">當叫用晚期繫結機制透過例如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-828">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="45f0e-829">相關聯的列舉型別： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-829">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Object.GetHashCode" />
      </Docs>
    </Member>
    <Member MemberName="GetInvocationList">
      <MemberSignature Language="C#" Value="public virtual Delegate[] GetInvocationList ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Delegate[] GetInvocationList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.GetInvocationList" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetInvocationList () As Delegate()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;Delegate ^&gt; ^ GetInvocationList();" />
      <MemberSignature Language="F#" Value="abstract member GetInvocationList : unit -&gt; Delegate[]&#xA;override this.GetInvocationList : unit -&gt; Delegate[]" Usage="delegate.GetInvocationList " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="45f0e-830">傳回委派的引動過程清單。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-830">Returns the invocation list of the delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45f0e-831">委派的陣列，表示目前委派的引動過程清單。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-831">An array of delegates representing the invocation list of the current delegate.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45f0e-832">陣列中的每個委派代表一個方法。</span><span class="sxs-lookup"><span data-stu-id="45f0e-832">Each delegate in the array represents exactly one method.</span></span>  
  
 <span data-ttu-id="45f0e-833">陣列中委派的順序是目前的委派叫用這些委派代表之方法的相同順序。</span><span class="sxs-lookup"><span data-stu-id="45f0e-833">The order of the delegates in the array is the same order in which the current delegate invokes the methods that those delegates represent.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="45f0e-834">下列範例會將三個方法指派給委派。</span><span class="sxs-lookup"><span data-stu-id="45f0e-834">The following example assigns three methods to a delegate.</span></span> <span data-ttu-id="45f0e-835">然後它會呼叫<xref:System.Delegate.GetInvocationList%2A>方法來取得指派給委派，以相反順序中，執行委派，並執行其名稱不包含子字串的方法之方法的總計數，「 檔案 」。</span><span class="sxs-lookup"><span data-stu-id="45f0e-835">It then calls the  <xref:System.Delegate.GetInvocationList%2A> method to get a total count of the methods assigned to the delegate, to execute the delegates in reverse order, and to execute the methods whose name do not include the substring "File".</span></span>  
  
 [!code-csharp[System.Delegate.GetInvocationList#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Delegate.GetInvocationList/cs/GetInvocationList1.cs#1)]
 [!code-vb[System.Delegate.GetInvocationList#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Delegate.GetInvocationList/vb/GetInvocationList1.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="45f0e-836">當叫用晚期繫結機制透過例如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-836">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="45f0e-837">相關聯的列舉型別： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-837">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="GetMethodImpl">
      <MemberSignature Language="C#" Value="protected virtual System.Reflection.MethodInfo GetMethodImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethodImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.GetMethodImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetMethodImpl () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Reflection::MethodInfo ^ GetMethodImpl();" />
      <MemberSignature Language="F#" Value="abstract member GetMethodImpl : unit -&gt; System.Reflection.MethodInfo&#xA;override this.GetMethodImpl : unit -&gt; System.Reflection.MethodInfo" Usage="delegate.GetMethodImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="45f0e-838">取得目前委派所表示的靜態方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-838">Gets the static method represented by the current delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45f0e-839">
            <see cref="T:System.Reflection.MethodInfo" />，描述目前委派所表示的靜態方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-839">A <see cref="T:System.Reflection.MethodInfo" /> describing the static method represented by the current delegate.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45f0e-840">只有在目前委派所表示的靜態方法，就會適用這個方法。</span><span class="sxs-lookup"><span data-stu-id="45f0e-840">This method applies only if the current delegate represents a static method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="45f0e-841">呼叫端無權存取由委派所表示的方法 (例如，如果方法是私用的)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-841">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="45f0e-842">當叫用晚期繫結機制透過例如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-842">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="45f0e-843">相關聯的列舉型別： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-843">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="P:System.Delegate.Method" />
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GetObjectData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="abstract member GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit&#xA;override this.GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="delegate.GetObjectData (info, context)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">
          <span data-ttu-id="45f0e-844">不支援。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-844">Not supported.</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="45f0e-845">不支援。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-845">Not supported.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45f0e-846">不支援。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-846">Not supported.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="45f0e-847">不支援這個方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-847">This method is not supported.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="45f0e-848">需要完全信任立即呼叫端。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-848">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="45f0e-849">此成員不能由部分信任或不透明的程式碼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-849">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <altmember cref="T:System.Runtime.Serialization.ISerializable" />
        <altmember cref="T:System.Runtime.Serialization.SerializationInfo" />
        <altmember cref="T:System.Runtime.Serialization.StreamingContext" />
      </Docs>
    </Member>
    <Member MemberName="Method">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo Method { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MethodInfo Method" />
      <MemberSignature Language="DocId" Value="P:System.Delegate.Method" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Method As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::MethodInfo ^ Method { System::Reflection::MethodInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Method : System.Reflection.MethodInfo" Usage="System.Delegate.Method" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="45f0e-850">取得委派所表示的方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-850">Gets the method represented by the delegate.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="45f0e-851">
            <see cref="T:System.Reflection.MethodInfo" />，描述委派所表示的方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-851">A <see cref="T:System.Reflection.MethodInfo" /> describing the method represented by the delegate.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="45f0e-852">呼叫端無權存取由委派所表示的方法 (例如，如果方法是私用的)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-852">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="45f0e-853">當叫用晚期繫結機制透過例如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-853">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="45f0e-854">相關聯的列舉型別： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-854">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="M:System.Delegate.GetMethodImpl" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (Delegate d1, Delegate d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Delegate d1, class System.Delegate d2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.op_Equality(System.Delegate,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (d1 As Delegate, d2 As Delegate) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(Delegate ^ d1, Delegate ^ d2);" />
      <MemberSignature Language="F#" Value="static member ( = ) : Delegate * Delegate -&gt; bool" Usage="d1 = d2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.Delegate" />
        <Parameter Name="d2" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="d1">
          <span data-ttu-id="45f0e-855">要比較的第一個委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-855">The first delegate to compare.</span>
          </span>
        </param>
        <param name="d2">
          <span data-ttu-id="45f0e-856">要比較的第二個委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-856">The second delegate to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45f0e-857">判斷指定的委派是否相等。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-857">Determines whether the specified delegates are equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45f0e-858">如果 <see langword="true" /> 等於 <paramref name="d1" />，則為 <paramref name="d2" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-858">
              <see langword="true" /> if <paramref name="d1" /> is equal to <paramref name="d2" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45f0e-859">具有相同的目標、 方法和引動過程清單之相同類型的兩個委派視為相等。</span><span class="sxs-lookup"><span data-stu-id="45f0e-859">Two delegates of the same type with the same targets, methods, and invocation lists are considered equal.</span></span>  
  
 <span data-ttu-id="45f0e-860">如果兩個委派型別相同，它們不會視為相等。</span><span class="sxs-lookup"><span data-stu-id="45f0e-860">If the two delegates are not of the same type, they are not considered equal.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="45f0e-861">在.NET Framework 1.0 和 1.1 版中，兩個委派視為相等，如果其目標、 方法和引動過程清單等於，即使委派的型別不同。</span><span class="sxs-lookup"><span data-stu-id="45f0e-861">In the .NET Framework version 1.0 and 1.1, two delegates were considered equal if their targets, methods, and invocation list were equal, even if the delegates were of different types.</span></span>  
  
 <span data-ttu-id="45f0e-862">方法和目標會比較相等，如下所示：</span><span class="sxs-lookup"><span data-stu-id="45f0e-862">The methods and targets are compared for equality as follows:</span></span>  
  
-   <span data-ttu-id="45f0e-863">如果要比較的兩個方法都是靜態，而且都是相同的類別上的相同方法，方法都視為相等，並為目標也會視為相等。</span><span class="sxs-lookup"><span data-stu-id="45f0e-863">If the two methods being compared are both static and are the same method on the same class, the methods are considered equal and the targets are also considered equal.</span></span>  
  
-   <span data-ttu-id="45f0e-864">如果要比較的兩種方法是執行個體方法，而且都是相同物件上的相同方法，方法都視為相等，並為目標也會視為相等。</span><span class="sxs-lookup"><span data-stu-id="45f0e-864">If the two methods being compared are instance methods and are the same method on the same object, the methods are considered equal and the targets are also considered equal.</span></span>  
  
-   <span data-ttu-id="45f0e-865">否則，方法不會被視為相等，而且目標也不會視為相等。</span><span class="sxs-lookup"><span data-stu-id="45f0e-865">Otherwise, the methods are not considered to be equal and the targets are also not considered to be equal.</span></span>  
  
 <span data-ttu-id="45f0e-866">如果具有相同的順序，並且在兩個清單的對應項目代表相同的方法和目標，則兩個引動過程清單會視為相同。</span><span class="sxs-lookup"><span data-stu-id="45f0e-866">Two invocation lists are considered identical if they have the same order and the corresponding elements from the two lists represent the same method and target.</span></span>  
  
 <span data-ttu-id="45f0e-867">這個運算子的對等方法是 <xref:System.Delegate.Equals%28System.Object%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="45f0e-867">The equivalent method for this operator is <xref:System.Delegate.Equals%28System.Object%29?displayProperty=nameWithType></span></span>]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="45f0e-868">當叫用晚期繫結機制透過例如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-868">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="45f0e-869">相關聯的列舉型別： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-869">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Delegate.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (Delegate d1, Delegate d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Delegate d1, class System.Delegate d2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.op_Inequality(System.Delegate,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (d1 As Delegate, d2 As Delegate) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(Delegate ^ d1, Delegate ^ d2);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : Delegate * Delegate -&gt; bool" Usage="System.Delegate.op_Inequality (d1, d2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.Delegate" />
        <Parameter Name="d2" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="d1">
          <span data-ttu-id="45f0e-870">要比較的第一個委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-870">The first delegate to compare.</span>
          </span>
        </param>
        <param name="d2">
          <span data-ttu-id="45f0e-871">要比較的第二個委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-871">The second delegate to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45f0e-872">判斷指定的委派是否不相等。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-872">Determines whether the specified delegates are not equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45f0e-873">如果 <see langword="true" /> 不等於 <paramref name="d1" />，則為 <paramref name="d2" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-873">
              <see langword="true" /> if <paramref name="d1" /> is not equal to <paramref name="d2" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45f0e-874">如果它們都是不同的類型，或有不同的方法、 不同的目標或不同的引動過程清單，即視為等於不到兩個委派。</span><span class="sxs-lookup"><span data-stu-id="45f0e-874">Two delegates are considered not equal if they are of different types, or have different methods, different targets, or different invocation lists.</span></span>  
  
 <span data-ttu-id="45f0e-875">如果兩個委派型別相同，它們不會視為相等。</span><span class="sxs-lookup"><span data-stu-id="45f0e-875">If the two delegates are not of the same type, they are not considered equal.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="45f0e-876">在.NET Framework 1.0 和 1.1 版中，兩個委派視為相等，如果其目標、 方法和引動過程清單等於，即使委派的型別不同。</span><span class="sxs-lookup"><span data-stu-id="45f0e-876">In the .NET Framework version 1.0 and 1.1, two delegates are considered equal if their targets, methods, and invocation list were equal, even if the delegates were of different types.</span></span>  
  
 <span data-ttu-id="45f0e-877">方法和目標會比較相等，如下所示：</span><span class="sxs-lookup"><span data-stu-id="45f0e-877">The methods and targets are compared for equality as follows:</span></span>  
  
-   <span data-ttu-id="45f0e-878">如果要比較的兩個方法都是靜態，而且都是相同的類別上的相同方法，方法都視為相等，並為目標也會視為相等。</span><span class="sxs-lookup"><span data-stu-id="45f0e-878">If the two methods being compared are both static and are the same method on the same class, the methods are considered equal and the targets are also considered equal.</span></span>  
  
-   <span data-ttu-id="45f0e-879">如果要比較的兩種方法是執行個體方法，而且都是相同物件上的相同方法，方法都視為相等，並為目標也會視為相等。</span><span class="sxs-lookup"><span data-stu-id="45f0e-879">If the two methods being compared are instance methods and are the same method on the same object, the methods are considered equal and the targets are also considered equal.</span></span>  
  
-   <span data-ttu-id="45f0e-880">否則，方法不會被視為相等，而且目標也不會視為相等。</span><span class="sxs-lookup"><span data-stu-id="45f0e-880">Otherwise, the methods are not considered to be equal and the targets are also not considered to be equal.</span></span>  
  
 <span data-ttu-id="45f0e-881">兩個引動過程清單不相等，如果它們擁有不同的大小，以不同的方式排序，或至少一個項目從一份清單表示方法或不同於其他清單中其對應項目所代表的目標。</span><span class="sxs-lookup"><span data-stu-id="45f0e-881">Two invocation lists are not equal if they have different sizes, if they are ordered differently, or if at least one element from one list represents a method or target that is different from that represented by its corresponding element in the other list.</span></span>  
  
 <span data-ttu-id="45f0e-882">這個運算子的對等方法是 <xref:System.Delegate.Equals%28System.Object%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="45f0e-882">The equivalent method for this operator is <xref:System.Delegate.Equals%28System.Object%29?displayProperty=nameWithType></span></span>]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="45f0e-883">當叫用晚期繫結機制透過例如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-883">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="45f0e-884">相關聯的列舉型別： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-884">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Delegate.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public static Delegate Remove (Delegate source, Delegate value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate Remove(class System.Delegate source, class System.Delegate value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.Remove(System.Delegate,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Remove (source As Delegate, value As Delegate) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ Remove(Delegate ^ source, Delegate ^ value);" />
      <MemberSignature Language="F#" Value="static member Remove : Delegate * Delegate -&gt; Delegate" Usage="System.Delegate.Remove (source, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Delegate" />
        <Parameter Name="value" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="45f0e-885">委派，要從其中移除 <c>value</c> 的引動過程清單。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-885">The delegate from which to remove the invocation list of <c>value</c>.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="45f0e-886">委派，提供要從 <c>source</c> 的引動過程清單移除的引動過程清單。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-886">The delegate that supplies the invocation list to remove from the invocation list of <c>source</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45f0e-887">從另一個委派的引動過程清單，移除委派的引動過程清單上最後一個項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-887">Removes the last occurrence of the invocation list of a delegate from the invocation list of another delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45f0e-888">如果在 <paramref name="source" /> 的引動過程清單中找到 <paramref name="value" /> 的引動過程清單，則為新委派 (其具有藉由取得 <paramref name="value" /> 的引動過程清單並移除 <paramref name="source" /> 的引動過程清單上最後一個項目所形成的引動過程清單)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-888">A new delegate with an invocation list formed by taking the invocation list of <paramref name="source" /> and removing the last occurrence of the invocation list of <paramref name="value" />, if the invocation list of <paramref name="value" /> is found within the invocation list of <paramref name="source" />.</span>
          </span>
          <span data-ttu-id="45f0e-889">如果 <paramref name="source" /> 是 <see langword="null" />，或未在 <paramref name="value" /> 的引動過程清單中找到 <paramref name="value" /> 的引動過程清單，則會傳回 <paramref name="source" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-889">Returns <paramref name="source" /> if <paramref name="value" /> is <see langword="null" /> or if the invocation list of <paramref name="value" /> is not found within the invocation list of <paramref name="source" />.</span>
          </span>
          <span data-ttu-id="45f0e-890">如果 <paramref name="value" /> 的引動過程清單等於 <paramref name="source" /> 的引動過程清單，或是 <paramref name="source" /> 等於 null 參考，則會傳回 null 參考。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-890">Returns a null reference if the invocation list of <paramref name="value" /> is equal to the invocation list of <paramref name="source" /> or if <paramref name="source" /> is a null reference.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45f0e-891">如果引動過程清單`value`符合一組連續的引動過程清單中的項目數`source`，然後引動過程清單`value`即為發生的引動過程清單內`source`。</span><span class="sxs-lookup"><span data-stu-id="45f0e-891">If the invocation list of `value` matches a contiguous set of elements in the invocation list of `source`, then the invocation list of `value` is said to occur within the invocation list of `source`.</span></span> <span data-ttu-id="45f0e-892">如果引動過程清單`value`出現在引動過程清單中的一次以上`source`，已移除的最後一個相符項目。</span><span class="sxs-lookup"><span data-stu-id="45f0e-892">If the invocation list of `value` occurs more than once in the invocation list of `source`, the last occurrence is removed.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="45f0e-893">呼叫端無權存取由委派所表示的方法 (例如，如果方法是私用的)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-893">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="45f0e-894">委派型別不相符。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-894">The delegate types do not match.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="45f0e-895">當叫用晚期繫結機制透過例如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-895">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="45f0e-896">相關聯的列舉型別： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-896">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Delegate.RemoveAll(System.Delegate,System.Delegate)" />
        <altmember cref="M:System.Delegate.RemoveImpl(System.Delegate)" />
        <altmember cref="M:System.Delegate.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAll">
      <MemberSignature Language="C#" Value="public static Delegate RemoveAll (Delegate source, Delegate value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate RemoveAll(class System.Delegate source, class System.Delegate value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.RemoveAll(System.Delegate,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RemoveAll (source As Delegate, value As Delegate) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ RemoveAll(Delegate ^ source, Delegate ^ value);" />
      <MemberSignature Language="F#" Value="static member RemoveAll : Delegate * Delegate -&gt; Delegate" Usage="System.Delegate.RemoveAll (source, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Delegate" />
        <Parameter Name="value" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="45f0e-897">委派，要從其中移除 <c>value</c> 的引動過程清單。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-897">The delegate from which to remove the invocation list of <c>value</c>.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="45f0e-898">委派，提供要從 <c>source</c> 的引動過程清單移除的引動過程清單。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-898">The delegate that supplies the invocation list to remove from the invocation list of <c>source</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45f0e-899">從另一個委派的引動過程清單，移除委派的引動過程清單上所有的項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-899">Removes all occurrences of the invocation list of a delegate from the invocation list of another delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45f0e-900">如果在 <paramref name="source" /> 的引動過程清單中找到 <paramref name="value" /> 的引動過程清單，則為新委派 (其具有藉由取得 <paramref name="value" /> 的引動過程清單並移除 <paramref name="source" /> 的引動過程清單上所有的項目所形成的引動過程清單)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-900">A new delegate with an invocation list formed by taking the invocation list of <paramref name="source" /> and removing all occurrences of the invocation list of <paramref name="value" />, if the invocation list of <paramref name="value" /> is found within the invocation list of <paramref name="source" />.</span>
          </span>
          <span data-ttu-id="45f0e-901">如果 <paramref name="source" /> 是 <see langword="null" />，或未在 <paramref name="value" /> 的引動過程清單中找到 <paramref name="value" /> 的引動過程清單，則會傳回 <paramref name="source" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-901">Returns <paramref name="source" /> if <paramref name="value" /> is <see langword="null" /> or if the invocation list of <paramref name="value" /> is not found within the invocation list of <paramref name="source" />.</span>
          </span>
          <span data-ttu-id="45f0e-902">如果 <paramref name="value" /> 的引動過程清單等於 <paramref name="source" /> 的引動過程清單、<paramref name="source" /> 只包含等於 <paramref name="value" /> 引動過程清單的一系列引動過程清單，或是 <paramref name="source" /> 為 null 參考時，會傳回 null 參考。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-902">Returns a null reference if the invocation list of <paramref name="value" /> is equal to the invocation list of <paramref name="source" />, if <paramref name="source" /> contains only a series of invocation lists that are equal to the invocation list of <paramref name="value" />, or if <paramref name="source" /> is a null reference.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45f0e-903">如果引動過程清單`value`符合一組連續的引動過程清單中的項目數`source`，然後引動過程清單`value`即為發生的引動過程清單內`source`。</span><span class="sxs-lookup"><span data-stu-id="45f0e-903">If the invocation list of `value` matches a contiguous set of elements in the invocation list of `source`, then the invocation list of `value` is said to occur within the invocation list of `source`.</span></span> <span data-ttu-id="45f0e-904">如果引動過程清單`value`出現在引動過程清單中的一次以上`source`，會移除所有項目。</span><span class="sxs-lookup"><span data-stu-id="45f0e-904">If the invocation list of `value` occurs more than once in the invocation list of `source`, all occurrences are removed.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="45f0e-905">呼叫端無權存取由委派所表示的方法 (例如，如果方法是私用的)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-905">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="45f0e-906">委派型別不相符。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-906">The delegate types do not match.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="45f0e-907">當叫用晚期繫結機制透過例如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-907">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="45f0e-908">相關聯的列舉型別： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-908">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Delegate.Remove(System.Delegate,System.Delegate)" />
        <altmember cref="M:System.Delegate.RemoveImpl(System.Delegate)" />
        <altmember cref="M:System.Delegate.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveImpl">
      <MemberSignature Language="C#" Value="protected virtual Delegate RemoveImpl (Delegate d);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Delegate RemoveImpl(class System.Delegate d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.RemoveImpl(System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function RemoveImpl (d As Delegate) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual Delegate ^ RemoveImpl(Delegate ^ d);" />
      <MemberSignature Language="F#" Value="abstract member RemoveImpl : Delegate -&gt; Delegate&#xA;override this.RemoveImpl : Delegate -&gt; Delegate" Usage="delegate.RemoveImpl d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="d">
          <span data-ttu-id="45f0e-909">委派，提供要從目前委派的引動過程清單移除的引動過程清單。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-909">The delegate that supplies the invocation list to remove from the invocation list of the current delegate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45f0e-910">從另一個委派的引動過程清單移除委派的引動過程清單。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-910">Removes the invocation list of a delegate from the invocation list of another delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45f0e-911">如果在目前委派的引動過程清單中找到 <paramref name="value" /> 的引動過程清單，則為新委派 (其具有藉由取得目前委派的引動過程清單並移除 <paramref name="value" /> 的引動過程清單所形成的引動過程清單)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-911">A new delegate with an invocation list formed by taking the invocation list of the current delegate and removing the invocation list of <paramref name="value" />, if the invocation list of <paramref name="value" /> is found within the current delegate's invocation list.</span>
          </span>
          <span data-ttu-id="45f0e-912">如果 <paramref name="value" /> 是 <see langword="null" />，或未在目前委派的引動過程清單中找到 <paramref name="value" /> 的引動過程清單時，會傳回目前的委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-912">Returns the current delegate if <paramref name="value" /> is <see langword="null" /> or if the invocation list of <paramref name="value" /> is not found within the current delegate's invocation list.</span>
          </span>
          <span data-ttu-id="45f0e-913">如果 <paramref name="value" /> 的引動過程清單等於目前委派的引動過程清單，則會傳回 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-913">Returns <see langword="null" /> if the invocation list of <paramref name="value" /> is equal to the current delegate's invocation list.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45f0e-914">如果引動過程清單`value`符合一組連續的項目在目前委派的引動過程清單，則引動過程清單`value`說是出現在目前委派的引動過程清單。</span><span class="sxs-lookup"><span data-stu-id="45f0e-914">If the invocation list of `value` matches a contiguous set of elements in the current delegate's invocation list, then the invocation list of `value` is said to occur within the current delegate's invocation list.</span></span> <span data-ttu-id="45f0e-915">如果引動過程清單`value`，就會發生一次在目前委派的引動過程清單中，已移除的最後一個相符項目。</span><span class="sxs-lookup"><span data-stu-id="45f0e-915">If the invocation list of `value` occurs more than once in the current delegate's invocation list, the last occurrence is removed.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="45f0e-916">呼叫端無權存取由委派所表示的方法 (例如，如果方法是私用的)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-916">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="45f0e-917">當叫用晚期繫結機制透過例如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-917">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="45f0e-918">相關聯的列舉型別： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-918">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Delegate.Remove(System.Delegate,System.Delegate)" />
        <altmember cref="M:System.Delegate.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Target">
      <MemberSignature Language="C#" Value="public object Target { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Target" />
      <MemberSignature Language="DocId" Value="P:System.Delegate.Target" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Target As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Target { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Target : obj" Usage="System.Delegate.Target" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="45f0e-919">取得目前的委派在其中叫用執行個體方法的類別執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-919">Gets the class instance on which the current delegate invokes the instance method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="45f0e-920">如果目前的委派表示執行個體方法時，則為目前委派用來叫用執行個體方法的物件；如果此委派表示靜態方法，則為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-920">The object on which the current delegate invokes the instance method, if the delegate represents an instance method; <see langword="null" /> if the delegate represents a static method.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45f0e-921">執行個體方法則是類別; 的執行個體相關聯的方法靜態方法是類別本身相關聯的方法。</span><span class="sxs-lookup"><span data-stu-id="45f0e-921">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 <span data-ttu-id="45f0e-922">如果委派叫用一或多個執行個體方法，這個屬性會傳回目標的最後一個執行個體方法的引動過程清單中。</span><span class="sxs-lookup"><span data-stu-id="45f0e-922">If the delegate invokes one or more instance methods, this property returns the target of the last instance method in the invocation list.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="45f0e-923">當叫用晚期繫結機制透過例如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-923">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="45f0e-924">相關聯的列舉型別： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="45f0e-924">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
  </Members>
</Type>