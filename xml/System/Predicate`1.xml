<Type Name="Predicate&lt;T&gt;" FullName="System.Predicate&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="aec57cef3fed8cea256c30b4abcc1cef689abe97" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="08/25/2018" /><Meta Name="ms.locfileid" Value="37727086" /></Metadata><TypeSignature Language="C#" Value="public delegate bool Predicate&lt;in T&gt;(T obj);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Predicate`1&lt;- T&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Predicate`1" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Predicate(Of In T)(obj As T) As Boolean " />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public delegate bool Predicate(T obj);" />
  <TypeSignature Language="F#" Value="type Predicate&lt;'T&gt; = delegate of 'T -&gt; bool" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="obj" Type="T" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Boolean</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T">要比較之物件的型別。</typeparam>
    <param name="obj">要比較的物件，根據這個委派表示方法中所定義的準則。</param>
    <summary>代表定義一組準則的方法，並判斷指定的物件是否符合這些準則。</summary>
    <returns>如果 <paramref name="obj" /> 符合這個委派表示方法中所定義的準則，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個委派會使用幾種方法所<xref:System.Array>和<xref:System.Collections.Generic.List%601>來搜尋項目集合中的類別。  
  
 一般而言，<xref:System.Predicate%601>委派由 lambda 運算式。 由於本機範圍的變數可供 lambda 運算式，因此很容易測試精確地不是編譯時期已知的條件。 這項模擬是在下列的範例中，定義`HockeyTeam`包含國家 Hockey 聯盟團隊和年成立的相關資訊的類別。 此範例會定義代表年份的整數值的陣列，並隨機指派一個陣列項目`foundedBeforeYear`，這是一個變數，在本機範圍的範例`Main`方法。 因為本機範圍的變數可用於 lambda 運算式，lambda 運算式傳遞至<xref:System.Collections.Generic.List%601.FindAll%2A?displayProperty=nameWithType>方法可傳回`HockeyTeam`成立當天或之前該年度的每個小組的物件。  
  
 [!code-csharp[System.Predicate\`1#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Predicate`1/cs/predicate1.cs#3)]
 [!code-vb[System.Predicate\`1#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Predicate`1/vb/predicate1.vb#3)]  
  
   
  
## Examples  
 下列程式碼範例會使用<xref:System.Predicate%601>具有委派<xref:System.Array.Find%2A?displayProperty=nameWithType>方法來搜尋的陣列<xref:System.Drawing.Point>結構。 此範例會明確地定義<xref:System.Predicate%601>名為委派`predicate`並將它指派一個名為方法`FindPoints`會傳回`true`如果的乘積<xref:System.Drawing.Point.X%2A?displayProperty=nameWithType>和<xref:System.Drawing.Point.Y%2A?displayProperty=nameWithType>欄位大於 100,000。 請注意，它是慣用使用 lambda 運算式而不是明確定義之型別的委派<xref:System.Predicate%601>，如第二個範例所示。  
  
 [!code-csharp[System.Predicate\`1#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Predicate`1/cs/predicateex2.cs#4)]
 [!code-vb[System.Predicate\`1#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Predicate`1/vb/predicateex2.vb#4)]  
  
 下列範例等同於上述範例中，不同之處在於它使用 lambda 運算式來代表<xref:System.Predicate%601>委派。  每個項目的`points`陣列會傳遞至 lambda 運算式，直到運算式找到符合搜尋準則的項目。 在此案例中，lambda 運算式傳回`true`產品 X 和 Y 欄位是否大於 100,000。  
  
 [!code-csharp[System.Predicate\`1#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Predicate`1/cs/predicateex1.cs#2)]
 [!code-vb[System.Predicate\`1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Predicate`1/vb/predicateex1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Array.Find``1(``0[],System.Predicate{``0})" />
  </Docs>
</Type>