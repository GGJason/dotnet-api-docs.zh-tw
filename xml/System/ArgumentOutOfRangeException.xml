<Type Name="ArgumentOutOfRangeException" FullName="System.ArgumentOutOfRangeException">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ae4dc936aee4ea8e32ea32ca4b1af528d509c201" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30729372" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ArgumentOutOfRangeException : ArgumentException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit ArgumentOutOfRangeException extends System.ArgumentException implements class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.ArgumentOutOfRangeException" />
  <TypeSignature Language="VB.NET" Value="Public Class ArgumentOutOfRangeException&#xA;Inherits ArgumentException" />
  <TypeSignature Language="C++ CLI" Value="public ref class ArgumentOutOfRangeException : ArgumentException" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ArgumentException</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>當引數值超出叫用方法所定義之值的容許範圍時，所擲回的例外狀況。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ArgumentOutOfRangeException>擲回例外狀況時叫用方法時，至少其中一個傳遞給方法的引數不`null`和包含無效的值不是預期的引數的值集合的成員。 <xref:System.ArgumentException.ParamName%2A>屬性會識別無效的引數，而<xref:System.ArgumentOutOfRangeException.ActualValue%2A>屬性，如果值存在，會識別無效的值。  
  
 一般而言，<xref:System.ArgumentOutOfRangeException>得到的開發人員的錯誤。 而不是處理中的例外狀況`try` / `catch`區塊中，您應該刪除造成的例外狀況，或如果方法呼叫所傳回的引數或使用者輸入傳遞至方法之前，會擲回例外狀況您應該驗證引數，再將它們傳遞至方法。  
  
 <xref:System.ArgumentOutOfRangeException> 經常使用：  
  
-   中的類別<xref:System.Collections>和<xref:System.IO>命名空間。  
  
-   <xref:System.Array> 類別。  
  
-   字串中的操作方法<xref:System.String>類別。  
  
 中的條件<xref:System.ArgumentOutOfRangeException>擲回例外狀況如下：  
  
 您會依其索引編號，來擷取集合的成員，且索引編號無效。  
 這是最常見的原因<xref:System.ArgumentOutOfRangeException>例外狀況。   通常，索引編號是無效的三個原因之一：  
  
-   集合具有任何成員，和您的程式碼會假設它沒有。 下列範例會嘗試擷取的第一個元素的集合，其中沒有任何項目：  
  
     [!code-csharp[System.ArgumentOutOfRangeException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/cs/NoElements.cs#4)]
     [!code-vb[System.ArgumentOutOfRangeException#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/vb/NoElements.vb#4)]  
  
     若要避免這個例外狀況，請檢查是否在集合的`Count`屬性大於零，再嘗試擷取任何成員，如同下列程式碼片段。  
  
     [!code-csharp[System.ArgumentOutOfRangeException#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/cs/NoElements.cs#5)]
     [!code-vb[System.ArgumentOutOfRangeException#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/vb/NoElements.vb#5)]  
  
     在某些情況下，這可能是因為您嘗試將成員加入至集合，並不存在的索引，而不是透過呼叫方法，例如`Add`，在於針對此目的。  下列範例會嘗試使用不存在的索引，而不是呼叫加入至集合的項目<xref:System.Collections.Generic.List%601.Add%2A?displayProperty=nameWithType>方法。  
  
     [!code-csharp[System.ArgumentOutOfRangeException#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/cs/NoElements2.cs#13)]
     [!code-vb[System.ArgumentOutOfRangeException#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/vb/NoElements2.vb#13)]  
  
     下列程式碼片段會修正此錯誤：  
  
     [!code-csharp[System.ArgumentOutOfRangeException#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/cs/NoElements2.cs#14)]
     [!code-vb[System.ArgumentOutOfRangeException#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/vb/NoElements2.vb#14)]  
  
-   您嘗試擷取其索引是負值的項目。 這通常是因為您搜尋過特定項目的索引集合，錯誤地假設搜尋不成功。 在下列範例中，呼叫<xref:System.Collections.Generic.List%601.FindIndex%28System.Predicate%7B%600%7D%29?displayProperty=nameWithType>方法時，無法尋找字串等於"Z"，因此會傳回-1。 不過，這是無效的索引值。  
  
     [!code-csharp[System.ArgumentOutOfRangeException#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/cs/BadSearch.cs#6)]
     [!code-vb[System.ArgumentOutOfRangeException#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/vb/BadSearch.vb#6)]  
  
     若要避免這個例外狀況，請檢查搜尋藉由確定，傳回的索引大於或等於零，再嘗試從集合擷取項目，如以下程式碼片段不會成功。  
  
     [!code-csharp[System.ArgumentOutOfRangeException#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/cs/BadSearch.cs#7)]
     [!code-vb[System.ArgumentOutOfRangeException#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/vb/BadSearch.vb#7)]  
  
-   您嘗試擷取其索引等於集合的值的項目`Count`屬性，如下列範例說明。  
  
     [!code-csharp[System.ArgumentOutOfRangeException#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/cs/OOR2.cs#8)]
     [!code-vb[System.ArgumentOutOfRangeException#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/vb/OOR2.vb#8)]  
  
     因為.NET Framework 中的集合會使用以零為起始的索引，集合中的第一個項目是在索引 0，而且是在索引的最後一個項目`Count`-1。 您可藉由確保您存取索引處的最後一個項目錯誤`Count`-1，如同下列程式碼。  
  
     [!code-csharp[System.ArgumentOutOfRangeException#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/cs/OOR2.cs#9)]
     [!code-vb[System.ArgumentOutOfRangeException#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/vb/OOR2.vb#9)]  
  
 您嘗試呼叫字串操作方法，來執行字串作業，在字串中不存在的起始索引。  
 例如，例如方法的多載<xref:System.String.Compare%2A?displayProperty=nameWithType>， <xref:System.String.CompareOrdinal%2A?displayProperty=nameWithType>， <xref:System.String.IndexOf%2A?displayProperty=nameWithType>， <xref:System.String.IndexOfAny%2A>， <xref:System.String.Insert%2A?displayProperty=nameWithType>， <xref:System.String.LastIndexOf%2A?displayProperty=nameWithType>， <xref:System.String.LastIndexOfAny%2A?displayProperty=nameWithType>， <xref:System.String.Remove%2A>，或<xref:System.String.Substring%2A?displayProperty=nameWithType>可讓您指定的起始索引作業都需要索引字串內的有效位置。 有效索引範圍從 0 到<xref:System.String.Length%2A?displayProperty=nameWithType>-1。  
  
 有四個常見的原因會造成這個<xref:System.ArgumentOutOfRangeException>例外狀況：  
  
-   您正在使用空字串。，或<xref:System.String.Empty?displayProperty=nameWithType>。 因為其<xref:System.String.Length%2A?displayProperty=nameWithType>屬性會傳回 0，任何嘗試索引則會擲回操作<xref:System.ArgumentOutOfRangeException>例外狀況。 下列範例中，定義`GetFirstCharacter`方法會傳回字串的第一個字元。 如果字串是空的因為最終的字串傳遞至方法，則方法會擲回<xref:System.ArgumentOutOfRangeException>例外狀況。  
  
     [!code-csharp[System.ArgumentOutOfRangeException#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/cs/EmptyString1.cs#15)]
     [!code-vb[System.ArgumentOutOfRangeException#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/vb/EmptyString1.vb#15)]  
  
     您可藉由測試例外狀況是否字串<xref:System.String.Length%2A?displayProperty=nameWithType>大於零，或藉由呼叫<xref:System.String.IsNullOrEmpty%2A>方法，以確保字串不是`null`或空白。 下列程式碼片段會後者。 在此情況下，如果字串為`null`或空白，`GetFirstCharacter`方法會傳回 U + 0000。  
  
     [!code-csharp[System.ArgumentOutOfRangeException#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/cs/EmptyString1.cs#16)]
     [!code-vb[System.ArgumentOutOfRangeException#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/vb/EmptyString1.vb#16)]  
  
-   您正在操作字串，該字串，內子字串的位置為基礎，且您已無法判斷是否已確實找到子字串。  
  
     下列範例會擷取兩個字片語的第二個字。 它會擲回<xref:System.ArgumentOutOfRangeException>如果片語包含只有一個文字，並因此不包含內嵌的空格字元的例外狀況。  這是因為呼叫<xref:System.String.IndexOf%28System.String%29?displayProperty=nameWithType>方法會傳回-1，表示搜尋失敗，而且這個無效的值再傳遞給<xref:System.String.Substring%28System.Int32%29?displayProperty=nameWithType>方法。  
  
     [!code-csharp[System.ArgumentOutOfRangeException#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/cs/NoFind1.cs#17)]
     [!code-vb[System.ArgumentOutOfRangeException#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/vb/NoFind1.vb#17)]  
  
     若要消除例外狀況，驗證字串搜尋方法之前呼叫的字串操作方法傳回的值。  
  
     [!code-csharp[System.ArgumentOutOfRangeException#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/cs/NoFind2.cs#18)]
     [!code-vb[System.ArgumentOutOfRangeException#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/vb/NoFind2.vb#18)]  
  
-  
  
 您已嘗試要擷取的子字串，超出了目前字串的範圍。  
 擷取所有需要您指定的子字串，並不會繼續的子字串中的字元數的字串結尾的子字串的開始位置的子字串的方法。 請注意，這不是*索引*的子字串中的最後一個字元。  
  
 <xref:System.ArgumentOutOfRangeException>擲回例外狀況通常是在此情況下因為不正確所計算的子字串中的字元數。  如果您使用 search 方法，例如<xref:System.String.IndexOf%2A?displayProperty=nameWithType>來識別的起始和結束位置的子字串：  
  
-   如果結束的位置中的字元傳回<xref:System.String.IndexOf%2A?displayProperty=nameWithType>要中子字串，包含子字串的結束位置由公式所提供  
  
    ```  
    endIndex - startIndex + 1  
    ```  
  
-   如果結束的位置中的字元傳回<xref:System.String.IndexOf%2A?displayProperty=nameWithType>是要排除的子字串的子字串的結束位置由公式所提供  
  
    ```  
    endIndex - startIndex   
    ```  
  
 下列範例會定義`FindWords`方法使用<xref:System.String.IndexOfAny%28System.Char%5B%5D%2CSystem.Int32%29?displayProperty=nameWithType>方法，以找出的空白字元和標點符號標記在字串中，並傳回包含文字字串中所找到的陣列。  
  
 [!code-csharp[System.ArgumentOutOfRangeException#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/cs/FindWords1.cs#19)]
 [!code-vb[System.ArgumentOutOfRangeException#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/vb/FindWords1.vb#19)]  
  
 您需要只正數、 零的引數的方法來傳遞負數，或您傳遞負數或零到需要正數的數字的引數的方法。  
 例如，<xref:System.Array.CreateInstance%28System.Type%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType>方法需要您在每個維度的二維陣列中指定的項目數; 有效的值，每個維度的範圍從 0 到<xref:System.Int32.MaxValue?displayProperty=nameWithType>。 但在下列範例中的維度引數具有負數值，因為此方法會擲回<xref:System.ArgumentOutOfRangeException>例外狀況。  
  
 [!code-csharp[System.ArgumentOutOfRangeException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/cs/OOR1.cs#1)]
 [!code-vb[System.ArgumentOutOfRangeException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/vb/OOR1.vb#1)]  
  
 若要更正這個錯誤，確定無效的引數的值為負數。 您可以藉由提供有效的值，如同下列程式碼片段。  
  
 [!code-csharp[System.ArgumentOutOfRangeException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/cs/OOR1.cs#2)]
 [!code-vb[System.ArgumentOutOfRangeException#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/vb/OOR1.vb#2)]  
  
 也可以驗證的輸入並且，如果它是無效的採取某些動作。 下列程式碼片段會顯示錯誤訊息而不是呼叫方法。  
  
 [!code-csharp[System.ArgumentOutOfRangeException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/cs/OOR1.cs#3)]
 [!code-vb[System.ArgumentOutOfRangeException#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/vb/OOR1.vb#3)]  
  
 是多執行緒或工作，以非同步方式執行，以及在陣列或集合，來更新應用程式中出現競爭情形。  
 下列範例會使用<xref:System.Collections.Generic.List%601>填入集合的物件`Continent`物件。 它會擲回<xref:System.ArgumentOutOfRangeException>例外狀況，如果此範例會嘗試之前完全填入集合，集合中顯示七個項目。  
  
 [!code-csharp[System.ArgumentOutOfRangeException#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/cs/Race1.cs#11)]
 [!code-vb[System.ArgumentOutOfRangeException#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/vb/Race1.vb#11)]  
  
 在此情況下，從多個執行緒存取兩個資源：  
  
-   `continents` 集合。 其<xref:System.Collections.Generic.List%601.Add%2A?displayProperty=nameWithType>從多個執行緒呼叫方法。 此外，主要或主執行緒會假設它會逐一查看其成員時，內含七個元素完全填入集合。  
  
-   `msg`從多個執行緒串連的字串。  
  
 若要更正這個錯誤，請確定共用的狀態依下列方式存取具備執行緒安全的方式。  
  
-   如果您的應用程式使用陣列或集合的物件，請考慮使用安全執行緒集合類別，例如中的型別<xref:System.Collections.Concurrent>命名空間或<xref:System.Collections.Immutable>的頻外版本。  
  
-   請確保共用的狀態 （亦即，資源可由多個執行緒存取） 存取具備執行緒安全的方式，以便一次只有一個執行緒具有獨佔存取權的資源。 大量的類別，例如<xref:System.Threading.CountdownEvent>， <xref:System.Threading.Interlocked>， <xref:System.Threading.Monitor>，和<xref:System.Threading.Mutex>，可用來同步處理資源的存取權。 如需詳細資訊，請參閱[執行緒](http://msdn.microsoft.com/library/7b46a7d9-c6f1-46d1-a947-ae97471bba87)。 此外，語言支援是透過[鎖定](~/docs/csharp/language-reference/keywords/lock-statement.md)C# 中的陳述式和[SyncLock](~/docs/visual-basic/language-reference/statements/synclock-statement.md)在 Visual Basic 中建構。  
  
 下列範例位址<xref:System.ArgumentOutOfRangeException>例外狀況和其他問題，從先前的範例。 它會取代<xref:System.Collections.Generic.List%601>物件<xref:System.Collections.Concurrent.ConcurrentBag%601>物件，以確定對集合的存取具備執行緒安全，會使用<xref:System.Threading.CountdownEvent>物件，以確定應用程式執行緒在其他執行緒尚未執行，然後使用鎖定，以確保之後，只會繼續執行只有一個執行緒可以存取`msg`變數一次。  
  
 [!code-csharp[System.ArgumentOutOfRangeException#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/cs/Race2.cs#12)]
 [!code-vb[System.ArgumentOutOfRangeException#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/vb/Race2.vb#12)]  
  
 <xref:System.ArgumentOutOfRangeException> 會使用 HRESULT COR_E_ARGUMENTOUTOFRANGE，0x80131502 的值。  
  
 如需執行個體的初始屬性值的清單<xref:System.ArgumentOutOfRangeException>，請參閱<xref:System.ArgumentOutOfRangeException>建構函式。  
  
   
  
## Examples  
 下列範例會定義類別可以包含受邀的訪客的相關資訊。 如果客體 21 歲<xref:System.ArgumentOutOfRangeException>擲回例外狀況。  
  
 [!code-csharp[ArgumentOutOfRangeException#1](~/samples/snippets/csharp/VS_Snippets_CLR/ArgumentOutOfRangeException/CS/program.cs#1)]
 [!code-vb[ArgumentOutOfRangeException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ArgumentOutOfRangeException/VB/program.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Exception" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.ArgumentOutOfRangeException" /> 類別的新執行個體。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ArgumentOutOfRangeException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ArgumentOutOfRangeException.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ArgumentOutOfRangeException();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.ArgumentOutOfRangeException" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個建構函式初始化<xref:System.ArgumentException.Message%2A>屬性的新執行個體的系統提供的訊息描述錯誤，例如 「 非負數數字所需。 」 此訊息會考量目前的系統文化特性。  
  
 下表顯示 <xref:System.ArgumentOutOfRangeException> 執行個體的初始屬性值。  
  
|屬性|值|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|null 參考 (在 Visual Basic 中為 `Nothing`)。|  
|<xref:System.ArgumentOutOfRangeException.Message%2A>|當地語系化的錯誤訊息字串。|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ArgumentOutOfRangeException (string paramName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string paramName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ArgumentOutOfRangeException.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (paramName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ArgumentOutOfRangeException(System::String ^ paramName);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="paramName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="paramName">造成這個例外狀況的參數名稱。</param>
        <summary>使用造成這個例外狀況的參數名稱來初始化 <see cref="T:System.ArgumentOutOfRangeException" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個建構函式初始化<xref:System.ArgumentException.Message%2A>屬性的新執行個體的系統提供的訊息描述錯誤，例如 「 非負數數字所需。 」 此訊息會考量目前的系統文化特性。  
  
 這個建構函式使用 <xref:System.ArgumentException.ParamName%2A> 參數來初始化新執行個體的 `paramName` 屬性。 `paramName` 的內容必須能讓人了解。  
  
 下表顯示 <xref:System.ArgumentOutOfRangeException> 執行個體的初始屬性值。  
  
|屬性|值|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|null 參考 (在 Visual Basic 中為 `Nothing`)。|  
|<xref:System.ArgumentOutOfRangeException.Message%2A>|空字串 ("")。|  
|<xref:System.ArgumentException.ParamName%2A>|參數名稱字串。|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ArgumentOutOfRangeException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ArgumentOutOfRangeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ArgumentOutOfRangeException(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">存放序列物件資料的物件。</param>
        <param name="context">物件，描述序列化資料的來源或目的地。</param>
        <summary>使用序列化資料，初始化 <see cref="T:System.ArgumentOutOfRangeException" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 進行還原序列化 (Deserialization) 期間會呼叫這個建構函式，以便重新構成經由資料流傳送的例外狀況物件。 如需詳細資訊，請參閱[XML 和 SOAP 序列化](~/docs/standard/serialization/xml-and-soap-serialization.md)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ArgumentOutOfRangeException (string message, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String, innerException As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ArgumentOutOfRangeException(System::String ^ message, Exception ^ innerException);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="message">解釋這個例外狀況原因的錯誤訊息。</param>
        <param name="innerException">造成目前例外狀況的例外狀況，若未指定內部例外狀況，則為 null 參考 (Visual Basic 中為 <see langword="Nothing" />)。</param>
        <summary>使用指定的錯誤訊息和造成這個例外狀況的例外狀況，初始化 <see cref="T:System.ArgumentOutOfRangeException" /> 類別的新執行個體。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ArgumentOutOfRangeException (string paramName, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string paramName, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (paramName As String, message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ArgumentOutOfRangeException(System::String ^ paramName, System::String ^ message);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="paramName" Type="System.String" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="paramName">造成例外狀況的參數名稱。</param>
        <param name="message">描述錯誤的訊息。</param>
        <summary>使用造成這個例外狀況的參數名稱和指定的錯誤訊息，初始化 <see cref="T:System.ArgumentOutOfRangeException" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個建構函式初始化<xref:System.ArgumentOutOfRangeException.Message%2A>屬性使用的值的新執行個體`message`參數。 `message` 參數的內容必須能讓人了解。 這個建構函式的呼叫端必須確保這個字串已經被當地語系化 (為了目前系統的文化特性)。  
  
 這個建構函式使用 <xref:System.ArgumentException.ParamName%2A> 參數來初始化新執行個體的 `paramName` 屬性。 `paramName` 的內容必須能讓人了解。  
  
 下表顯示 <xref:System.ArgumentOutOfRangeException> 執行個體的初始屬性值。  
  
|屬性|值|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|`null`。|  
|<xref:System.ArgumentOutOfRangeException.Message%2A>|錯誤訊息字串。|  
|<xref:System.ArgumentException.ParamName%2A>|參數名稱字串。|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ArgumentOutOfRangeException (string paramName, object actualValue, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string paramName, object actualValue, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (paramName As String, actualValue As Object, message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ArgumentOutOfRangeException(System::String ^ paramName, System::Object ^ actualValue, System::String ^ message);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="paramName" Type="System.String" />
        <Parameter Name="actualValue" Type="System.Object" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="paramName">造成例外狀況的參數名稱。</param>
        <param name="actualValue">造成例外狀況的引數名稱。</param>
        <param name="message">描述錯誤的訊息。</param>
        <summary>使用參數名稱引數值和指定的錯誤訊息，初始化 <see cref="T:System.ArgumentOutOfRangeException" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個建構函式初始化<xref:System.ArgumentException.ParamName%2A>屬性的新執行個體使用`paramName`參數，<xref:System.ArgumentOutOfRangeException.ActualValue%2A>屬性使用`actualValue`參數，而<xref:System.ArgumentException.Message%2A>屬性使用`message`參數。 內容`paramName`和`message`參數為了能讓人瞭解。 這個建構函式的呼叫端，才能確保這些字串已針對目前系統文化特性當地語系化。  
  
 `actualValue`參數不是.NET Framework 類別庫中。 不過，<xref:System.ArgumentOutOfRangeException.ActualValue%2A>提供屬性，好讓應用程式可以使用提供的引數值。  
  
 `actualValue`參數包含無效的值傳遞給方法，就會擲回這個例外狀況。 這個值會儲存在<xref:System.ArgumentOutOfRangeException.ActualValue%2A>屬性和它的字串表示附加至保留的訊息字串<xref:System.ArgumentOutOfRangeException.Message%2A>屬性。  
  
 下表顯示 <xref:System.ArgumentOutOfRangeException> 執行個體的初始屬性值。  
  
|屬性|值|  
|--------------|-----------|  
|<xref:System.ArgumentOutOfRangeException.ActualValue%2A>|引數值。|  
|<xref:System.Exception.InnerException%2A>|Null 參考 (`Nothing`在 Visual Basic 中)。|  
|<xref:System.ArgumentOutOfRangeException.Message%2A>|錯誤訊息字串。|  
|<xref:System.ArgumentException.ParamName%2A>|參數名稱字串。|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ActualValue">
      <MemberSignature Language="C#" Value="public virtual object ActualValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ActualValue" />
      <MemberSignature Language="DocId" Value="P:System.ArgumentOutOfRangeException.ActualValue" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ActualValue As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Object ^ ActualValue { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得造成這個例外狀況的引數值。</summary>
        <value>
          <see langword="Object" />，包含造成目前 <see cref="T:System.Exception" /> 的參數值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用這個屬性來擷取無效的引數。  
  
 `ActualValue`屬性會傳回相同的值傳遞給建構函式，或`null`如果已不提供任何值。  
  
 <xref:System.ArgumentOutOfRangeException.ActualValue%2A>屬性在物件建構時指派值。 如果<xref:System.ArgumentOutOfRangeException.ActualValue%2A>屬性值不是`null`，值的字串表示附加至所持有的訊息字串<xref:System.ArgumentOutOfRangeException.Message%2A>屬性。  
  
 <xref:System.ArgumentOutOfRangeException.ActualValue%2A>屬性不使用.NET Framework 類別庫中。 它會在所有的 null 值<xref:System.ArgumentOutOfRangeException>.NET Framework 類別庫所擲回的物件。 <xref:System.ArgumentOutOfRangeException.ActualValue%2A>提供屬性，好讓應用程式可以使用提供的引數值。  
  
 此屬性是唯讀的而且只有在要自訂的內容或值的格式應該覆寫。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public override void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ArgumentOutOfRangeException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub GetObjectData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">存放序列物件資料的物件。</param>
        <param name="context">物件，描述序列化資料的來源或目的地。</param>
        <summary>以無效的引數值和其他例外狀況資訊設定 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 物件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ArgumentOutOfRangeException.GetObjectData%2A> 設定<xref:System.Runtime.Serialization.SerializationInfo>物件序列化的所有例外狀況物件資料。 還原序列化期間的例外狀況物件重新組成從<xref:System.Runtime.Serialization.SerializationInfo>資料流上傳輸。  
  
 如需詳細資訊，請參閱<xref:System.Runtime.Serialization.SerializationInfo>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="info" /> 物件為 <see langword="null" />。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">提供序列化服務。 列舉型別相關聯：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" />安全性動作： <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /></permission>
        <permission cref="T:System.Security.SecurityCriticalAttribute">需要完全信任立即呼叫者。 這個成員無法供部分信任或安全性透明程式碼。</permission>
        <altmember cref="T:System.Runtime.Serialization.SerializationInfo" />
        <altmember cref="T:System.Runtime.Serialization.StreamingContext" />
      </Docs>
    </Member>
    <Member MemberName="Message">
      <MemberSignature Language="C#" Value="public override string Message { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Message" />
      <MemberSignature Language="DocId" Value="P:System.ArgumentOutOfRangeException.Message" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Message As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Message { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得錯誤訊息和無效引數值的字串表示，或如果引數值是 null 時，只取得錯誤訊息。</summary>
        <value>這個例外狀況的文字訊息。 這個屬性值是下列兩種形式中的一種：  
  
 <list type="table"><listheader><term> 條件  
  
 </term><description> 值  
  
 </description></listheader><item><term><paramref name="actualValue" />是<see langword="null" />。  
  
 </term><description><paramref name="message" />字串傳遞至建構函式。  
  
 </description></item><item><term><paramref name="actualValue" />不<see langword="null" />。  
  
 </term><description><paramref name="message" />無效的引數值的字串表示附加的字串。  
  
 </description></item></list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個屬性會覆寫<xref:System.ArgumentException.Message%2A>。  
  
 錯誤訊息應該要描述預期的值造成這個例外狀況的參數。 應該當地語系化的錯誤訊息。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>