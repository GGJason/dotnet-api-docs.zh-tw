<Type Name="IEquatable&lt;T&gt;" FullName="System.IEquatable&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="19bc49f94beee1a3c075a5ffa5eaa52f9c90027f" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30728052" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IEquatable&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEquatable`1&lt;T&gt;" />
  <TypeSignature Language="DocId" Value="T:System.IEquatable`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEquatable(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IEquatable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Interfaces />
  <Docs>
    <typeparam name="T">要比較之物件的類型。</typeparam>
    <summary>定義通用的方法，實值類型或類別會實作這個方法，以建立特定類型的方法來判斷執行個體是否相等。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 實作這個介面是由型別，其值可以相等 （例如，數字和字串對於類別而言）。 實值類型或類別會實作<xref:System.IEquatable%601.Equals%2A>方法來建立特定類型的方法適合用來判斷執行個體是否相等。  
  
> [!NOTE]
>  <xref:System.IComparable%601>介面會定義<xref:System.IComparable%601.CompareTo%2A>方法，可判斷實作的型別執行個體的排序次序。 <xref:System.IEquatable%601>介面會定義<xref:System.IEquatable%601.Equals%2A>方法，可判斷是否相等的實作類型的執行個體。  
  
 <xref:System.IEquatable%601>介面由泛型集合物件例如<xref:System.Collections.Generic.Dictionary%602>， <xref:System.Collections.Generic.List%601>，和<xref:System.Collections.Generic.LinkedList%601>在之類的方法中的等號比較測試`Contains`， `IndexOf`， `LastIndexOf`，和`Remove`。 它應該實作可能會儲存到泛型集合的任何物件。  
  
   
  
## Examples  
 請參閱範例的<xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType>方法。  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>取代的型別參數<see cref="T:System.IEquatable`1" />介面會實作這個介面的型別。  
  
 如果您實作<see cref="T:System.IEquatable`1" />，您也應該覆寫的基底類別實作<see cref="M:System.Object.Equals(System.Object)" />和<see cref="M:System.Object.GetHashCode" />使其行為與一致<see cref="M:System.IEquatable`1.Equals(`0)" />方法。 如果您不要覆寫<see cref="M:System.Object.Equals(System.Object)" />，靜態的呼叫中也呼叫您覆寫的實作<see langword="Equals(System.Object, System.Object)" />類別上的方法。 此外，您應該多載<see langword="op_Equality" />和<see langword="op_Inequality" />運算子。 這可確保所有相等測試傳回一致的結果。  
  
 <block subset="none" type="note"><para>  
 如需覆寫<see cref="M:System.Object.Equals(System.Object)" />，請參閱<see cref="M:System.Object.Equals(System.Object)" />發行項。  
  
</para></block>  
  
 對於實值類型，您應該一律實作<see cref="T:System.IEquatable`1" />並覆寫<see cref="M:System.Object.Equals(System.Object)" />以提升效能。 <see cref="M:System.Object.Equals(System.Object)" /> 方塊實值類型和依賴反映來比較兩個值相等。 這兩個實作<see cref="M:System.IEquatable`1.Equals(`0)" />和覆寫<see cref="M:System.Object.Equals(System.Object)" />應該傳回一致的結果。  
  
 如果您實作<see cref="T:System.IEquatable`1" />，您也應該實作<see cref="T:System.IComparable`1" />如果可以排列或排序類型執行個體。 如果您的型別實作<see cref="T:System.IComparable`1" />，您幾乎也實作<see cref="T:System.IEquatable`1" />。</para>
      <para>請注意，有一些設計支援類型的順序關聯性，但等號比較可能是不同的順序關聯性。 請考慮`Person`類別其中依字母順序排序。 具有相同名稱的兩個人員排序相同，但不是同一人。</para>
    </block>
    <altmember cref="T:System.IComparable`1" />
    <altmember cref="T:System.IComparable" />
  </Docs>
  <Members>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (T other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(!T other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IEquatable`1.Equals(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(T other);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="T" />
      </Parameters>
      <Docs>
        <param name="other">要與此物件進行比較的物件。</param>
        <summary>指出目前的物件是否等於另一個相同類型的物件。</summary>
        <returns>
          若目前的物件等於 <see langword="true" /> 參數，則為 <paramref name="other" />，否則即為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 實作<xref:System.IEquatable%601.Equals%2A>方法是要執行的測試與另一個類型的物件是否相等`T`，與目前物件相同的類型。 <xref:System.IEquatable%601.Equals(%600)>方法會在下列情況下呼叫：  
  
-   當`Equals`方法呼叫和`other`引數是類型的強型別物件`T`。 (如果`other`的類型不是`T`，基底<xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType>方法呼叫。 兩個方法，<xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType>提供稍微較佳的效能。)  
  
-   呼叫泛型集合物件的數字的搜尋方法的時機。 這些類型和其方法如下：  
  
    -   某些泛型多載的<xref:System.Array.BinarySearch%2A>方法。  
  
    -   搜尋方法的<xref:System.Collections.Generic.List%601>類別，包括<xref:System.Collections.Generic.List%601.Contains%28%600%29?displayProperty=nameWithType>， <xref:System.Collections.Generic.List%601.IndexOf%2A?displayProperty=nameWithType>， <xref:System.Collections.Generic.List%601.LastIndexOf%2A?displayProperty=nameWithType>，和<xref:System.Collections.Generic.List%601.Remove%2A?displayProperty=nameWithType>。  
  
    -   搜尋方法的<xref:System.Collections.Generic.Dictionary%602>類別，包括<xref:System.Collections.Generic.Dictionary%602.ContainsKey%2A>和<xref:System.Collections.Generic.IDictionary%602.Remove%2A>。  
  
    -   搜尋方法的泛型<xref:System.Collections.Generic.LinkedList%601>類別，包括<xref:System.Collections.Generic.LinkedList%601.Contains%2A?displayProperty=nameWithType>和<xref:System.Collections.Generic.LinkedList%601.Remove%2A>。  
  
 換句話說，若要處理類別的物件，將儲存在陣列或泛型集合物件中的可能性，最好實作<xref:System.IEquatable%601>使物件可以輕鬆地識別和操作。  
  
 當實作<xref:System.IEquatable%601.Equals%2A>方法，定義適用於泛型型別引數所指定之類型的相等。 例如，如果型別引數是<xref:System.Int32>，定義適用於比較的兩個 32 位元帶正負號的整數相等。  
  
   
  
## Examples  
 下列範例示範的部分實作`Person`類別可實作<xref:System.IEquatable%601>且具有兩個屬性：`LastName`和`SSN`。 <xref:System.IEquatable%601.Equals%2A>方法會傳回`True`如果`SSN`兩個屬性`Person`物件是相同的; 否則它會傳回`False`。  
  
 [!code-csharp[System.GenericIEquatable.Equals#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/cs/EqualsEx2.cs#3)]
 [!code-vb[System.GenericIEquatable.Equals#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/vb/EqualsEx2.vb#3)]  
  
 `Person` 物件然後儲存在<xref:System.Collections.Generic.List%601>物件，並可以藉由識別`Contains`方法，如下列範例所示。  
  
 [!code-csharp[System.GenericIEquatable.Equals#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/cs/Snippet12.cs#12)]
 [!code-vb[System.GenericIEquatable.Equals#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/vb/Snippet12.vb#12)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>如果您實作<see cref="M:System.IEquatable`1.Equals(`0)" />，您也應該覆寫的基底類別實作<see cref="M:System.Object.Equals(System.Object)" />和<see cref="M:System.Object.GetHashCode" />使其行為與一致<see cref="M:System.IEquatable`1.Equals(`0)" />方法。 如果您不要覆寫<see cref="M:System.Object.Equals(System.Object)" />，靜態的呼叫中也呼叫您覆寫的實作<see langword="Equals(System.Object, System.Object)" />類別上的方法。 此外，您應該多載<see langword="op_Equality" />和<see langword="op_Inequality" />運算子。 這可確保所有測試相等，都傳回一致的結果範例所示。</para>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>