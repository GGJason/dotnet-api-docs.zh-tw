<Type Name="IEquatable&lt;T&gt;" FullName="System.IEquatable&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f169ba3e3ec57eac1b6bb82d978c55c2b059e3fb" /><Meta Name="ms.sourcegitcommit" Value="1654a92bac785a221098172d9cacd405ceaac9b7" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="12/01/2018" /><Meta Name="ms.locfileid" Value="52737425" /></Metadata><TypeSignature Language="C#" Value="public interface IEquatable&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEquatable`1&lt;T&gt;" />
  <TypeSignature Language="DocId" Value="T:System.IEquatable`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEquatable(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IEquatable" />
  <TypeSignature Language="F#" Value="type IEquatable&lt;'T&gt; = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Interfaces />
  <Docs>
    <typeparam name="T"><span data-ttu-id="cbb0d-101">要比較之物件的類型。</span><span class="sxs-lookup"><span data-stu-id="cbb0d-101">The type of objects to compare.</span></span></typeparam>
    <summary><span data-ttu-id="cbb0d-102">定義通用的方法，實值類型或類別會實作這個方法，以建立特定類型的方法來判斷執行個體是否相等。</span><span class="sxs-lookup"><span data-stu-id="cbb0d-102">Defines a generalized method that a value type or class implements to create a type-specific method for determining equality of instances.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cbb0d-103">其值可以相等 （適用於範例中，數值和字串類別） 的類型被實作這個介面。</span><span class="sxs-lookup"><span data-stu-id="cbb0d-103">This interface is implemented by types whose values can be equated (for example, the numeric and string classes).</span></span> <span data-ttu-id="cbb0d-104">實值型別或類別會實作<xref:System.IEquatable%601.Equals%2A>方法用來建立特定類型的方法適用於判斷執行個體是否相等。</span><span class="sxs-lookup"><span data-stu-id="cbb0d-104">A value type or class implements the <xref:System.IEquatable%601.Equals%2A> method to create a type-specific method suitable for determining equality of instances.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cbb0d-105"><xref:System.IComparable%601>介面會定義<xref:System.IComparable%601.CompareTo%2A>方法，可判斷實作型別的執行個體的排序次序。</span><span class="sxs-lookup"><span data-stu-id="cbb0d-105">The <xref:System.IComparable%601> interface defines the <xref:System.IComparable%601.CompareTo%2A> method, which determines the sort order of instances of the implementing type.</span></span> <span data-ttu-id="cbb0d-106"><xref:System.IEquatable%601>介面會定義<xref:System.IEquatable%601.Equals%2A>方法，可判斷是否相等的實作類型的執行個體。</span><span class="sxs-lookup"><span data-stu-id="cbb0d-106">The <xref:System.IEquatable%601> interface defines the <xref:System.IEquatable%601.Equals%2A> method, which determines the equality of instances of the implementing type.</span></span>  
  
 <span data-ttu-id="cbb0d-107"><xref:System.IEquatable%601>介面由泛型集合物件這類<xref:System.Collections.Generic.Dictionary%602>， <xref:System.Collections.Generic.List%601>，以及<xref:System.Collections.Generic.LinkedList%601>測試是否相等，在這種方法時`Contains`， `IndexOf`， `LastIndexOf`，和`Remove`。</span><span class="sxs-lookup"><span data-stu-id="cbb0d-107">The <xref:System.IEquatable%601> interface is used by generic collection objects such as <xref:System.Collections.Generic.Dictionary%602>, <xref:System.Collections.Generic.List%601>, and <xref:System.Collections.Generic.LinkedList%601> when testing for equality in such methods as `Contains`, `IndexOf`, `LastIndexOf`, and `Remove`.</span></span> <span data-ttu-id="cbb0d-108">它應該實作任何可能會儲存在泛型集合的物件。</span><span class="sxs-lookup"><span data-stu-id="cbb0d-108">It should be implemented for any object that might be stored in a generic collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cbb0d-109">範例，請參閱<xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="cbb0d-109">See the example for the <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para><span data-ttu-id="cbb0d-110">取代的型別參數<see cref="T:System.IEquatable`1" />介面實作這個介面的型別。</span><span class="sxs-lookup"><span data-stu-id="cbb0d-110">Replace the type parameter of the <see cref="T:System.IEquatable`1" /> interface with the type that is implementing this interface.</span></span>  
  
<span data-ttu-id="cbb0d-111">如果您實作<see cref="T:System.IEquatable`1" />，您也應該覆寫的基底類別實作<see cref="M:System.Object.Equals(System.Object)" />並<see cref="M:System.Object.GetHashCode" />，使其行為能夠一致與<see cref="M:System.IEquatable`1.Equals(`0)" />方法。</span><span class="sxs-lookup"><span data-stu-id="cbb0d-111">If you implement <see cref="T:System.IEquatable`1" />, you should also override the base class implementations of <see cref="M:System.Object.Equals(System.Object)" /> and <see cref="M:System.Object.GetHashCode" /> so that their behavior is consistent with that of the <see cref="M:System.IEquatable`1.Equals(`0)" /> method.</span></span> <span data-ttu-id="cbb0d-112">如果您覆寫<see cref="M:System.Object.Equals(System.Object)" />，也稱為覆寫實的作中呼叫靜態<see langword="Equals(System.Object, System.Object)" />類別上的方法。</span><span class="sxs-lookup"><span data-stu-id="cbb0d-112">If you do override <see cref="M:System.Object.Equals(System.Object)" />, your overridden implementation is also called in calls to the static <see langword="Equals(System.Object, System.Object)" /> method on your class.</span></span> <span data-ttu-id="cbb0d-113">此外，您應該多載<see langword="op_Equality" />和<see langword="op_Inequality" />運算子。</span><span class="sxs-lookup"><span data-stu-id="cbb0d-113">In addition, you should overload the <see langword="op_Equality" /> and <see langword="op_Inequality" /> operators.</span></span> <span data-ttu-id="cbb0d-114">這可確保所有的測試相等，傳回一致的結果。</span><span class="sxs-lookup"><span data-stu-id="cbb0d-114">This ensures that all tests for equality return consistent results.</span></span>  
  
 <block subset="none" type="note"><para>  
 <span data-ttu-id="cbb0d-115">如需覆寫<see cref="M:System.Object.Equals(System.Object)" />，請參閱<see cref="M:System.Object.Equals(System.Object)" />文章。</span><span class="sxs-lookup"><span data-stu-id="cbb0d-115">For information on overriding <see cref="M:System.Object.Equals(System.Object)" />, see the <see cref="M:System.Object.Equals(System.Object)" /> article.</span></span>  
  
</para></block>  
  
 <span data-ttu-id="cbb0d-116">對於實值類型，您應該一律實作<see cref="T:System.IEquatable`1" />，並覆寫<see cref="M:System.Object.Equals(System.Object)" />以提升效能。</span><span class="sxs-lookup"><span data-stu-id="cbb0d-116">For a value type, you should always implement <see cref="T:System.IEquatable`1" /> and override <see cref="M:System.Object.Equals(System.Object)" /> for better performance.</span></span> <span data-ttu-id="cbb0d-117"><see cref="M:System.Object.Equals(System.Object)" /> 方塊實值型別，並依賴反映來比較兩個值相等。</span><span class="sxs-lookup"><span data-stu-id="cbb0d-117"><see cref="M:System.Object.Equals(System.Object)" /> boxes value types and relies on reflection to compare two values for equality.</span></span> <span data-ttu-id="cbb0d-118">這兩個實作<see cref="M:System.IEquatable`1.Equals(`0)" />和 覆寫<see cref="M:System.Object.Equals(System.Object)" />應該傳回一致的結果。</span><span class="sxs-lookup"><span data-stu-id="cbb0d-118">Both your implementation of <see cref="M:System.IEquatable`1.Equals(`0)" /> and your override of <see cref="M:System.Object.Equals(System.Object)" /> should return consistent results.</span></span>  
  
<span data-ttu-id="cbb0d-119">如果您實作<see cref="T:System.IEquatable`1" />，您也應該實作<see cref="T:System.IComparable`1" />如果您類型的執行個體可以排列或排序。</span><span class="sxs-lookup"><span data-stu-id="cbb0d-119">If you implement <see cref="T:System.IEquatable`1" />, you should also implement <see cref="T:System.IComparable`1" /> if instances of your type can be ordered or sorted.</span></span> <span data-ttu-id="cbb0d-120">如果您的型別會實作<see cref="T:System.IComparable`1" />，您幾乎也實作<see cref="T:System.IEquatable`1" />。</span><span class="sxs-lookup"><span data-stu-id="cbb0d-120">If your type implements <see cref="T:System.IComparable`1" />, you almost always also implement <see cref="T:System.IEquatable`1" />.</span></span></para>
      <para><span data-ttu-id="cbb0d-121">請注意，某些設計，其中類型支援的順序關聯性，但等號比較可能不同於排序的關聯性。</span><span class="sxs-lookup"><span data-stu-id="cbb0d-121">Note that there are some designs where a type supports an order relation, but equality may be distinct from an ordering relation.</span></span> <span data-ttu-id="cbb0d-122">請考慮`Person`類別讓您依字母順序排序那樣。</span><span class="sxs-lookup"><span data-stu-id="cbb0d-122">Consider a `Person` class where you sort alphabetically.</span></span> <span data-ttu-id="cbb0d-123">兩個具有相同名稱的人排序相同，但不是同一個人。</span><span class="sxs-lookup"><span data-stu-id="cbb0d-123">Two people with the same name sort the same, but are not the same person.</span></span></para></block>
    <altmember cref="T:System.IComparable`1" />
    <altmember cref="T:System.IComparable" />
  </Docs>
  <Members>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (T other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(!T other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IEquatable`1.Equals(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(T other);" />
      <MemberSignature Language="F#" Value="abstract member Equals : 'T -&gt; bool" Usage="iEquatable.Equals other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="T" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="cbb0d-124">要與此物件進行比較的物件。</span><span class="sxs-lookup"><span data-stu-id="cbb0d-124">An object to compare with this object.</span></span></param>
        <summary><span data-ttu-id="cbb0d-125">指出目前的物件是否等於另一個相同類型的物件。</span><span class="sxs-lookup"><span data-stu-id="cbb0d-125">Indicates whether the current object is equal to another object of the same type.</span></span></summary>
        <returns><span data-ttu-id="cbb0d-126">若目前的物件等於 <see langword="true" /> 參數，則為 <paramref name="other" />，否則即為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="cbb0d-126"><see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cbb0d-127">實作<xref:System.IEquatable%601.Equals%2A>方法要執行的測試是否與另一個類型的物件相等`T`，與目前物件相同的型別。</span><span class="sxs-lookup"><span data-stu-id="cbb0d-127">The implementation of the <xref:System.IEquatable%601.Equals%2A> method is intended to perform a test for equality with another object of type `T`, the same type as the current object.</span></span> <span data-ttu-id="cbb0d-128"><xref:System.IEquatable%601.Equals(%600)>在下列情況下呼叫方法：</span><span class="sxs-lookup"><span data-stu-id="cbb0d-128">The <xref:System.IEquatable%601.Equals(%600)> method is called in the following circumstances:</span></span>  
  
-   <span data-ttu-id="cbb0d-129">當`Equals`方法呼叫而`other`引數是類型的強型別物件`T`。</span><span class="sxs-lookup"><span data-stu-id="cbb0d-129">When the `Equals` method is called and the `other` argument is a strongly-typed object of type `T`.</span></span> <span data-ttu-id="cbb0d-130">(如果`other`型別的`T`，基底<xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType>呼叫方法。</span><span class="sxs-lookup"><span data-stu-id="cbb0d-130">(If `other` is not of type `T`, the base <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> method is called.</span></span> <span data-ttu-id="cbb0d-131">兩種方法，<xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType>提供稍微較佳的效能。)</span><span class="sxs-lookup"><span data-stu-id="cbb0d-131">Of the two methods, <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> offers slightly better performance.)</span></span>  
  
-   <span data-ttu-id="cbb0d-132">數個泛型集合物件的搜尋方法呼叫時。</span><span class="sxs-lookup"><span data-stu-id="cbb0d-132">When the search methods of a number of generic collection objects are called.</span></span> <span data-ttu-id="cbb0d-133">這些類型和其方法的下列部分：</span><span class="sxs-lookup"><span data-stu-id="cbb0d-133">Some of these types and their methods include the following:</span></span>  
  
    -   <span data-ttu-id="cbb0d-134">部分的泛型多載<xref:System.Array.BinarySearch%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="cbb0d-134">Some of the generic overloads of the <xref:System.Array.BinarySearch%2A> method.</span></span>  
  
    -   <span data-ttu-id="cbb0d-135">搜尋方法<xref:System.Collections.Generic.List%601>類別，包括<xref:System.Collections.Generic.List%601.Contains%28%600%29?displayProperty=nameWithType>， <xref:System.Collections.Generic.List%601.IndexOf%2A?displayProperty=nameWithType>， <xref:System.Collections.Generic.List%601.LastIndexOf%2A?displayProperty=nameWithType>，和<xref:System.Collections.Generic.List%601.Remove%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="cbb0d-135">The search methods of the <xref:System.Collections.Generic.List%601> class, including <xref:System.Collections.Generic.List%601.Contains%28%600%29?displayProperty=nameWithType>, <xref:System.Collections.Generic.List%601.IndexOf%2A?displayProperty=nameWithType>, <xref:System.Collections.Generic.List%601.LastIndexOf%2A?displayProperty=nameWithType>, and <xref:System.Collections.Generic.List%601.Remove%2A?displayProperty=nameWithType>.</span></span>  
  
    -   <span data-ttu-id="cbb0d-136">搜尋方法<xref:System.Collections.Generic.Dictionary%602>類別，包括<xref:System.Collections.Generic.Dictionary%602.ContainsKey%2A>和<xref:System.Collections.Generic.IDictionary%602.Remove%2A>。</span><span class="sxs-lookup"><span data-stu-id="cbb0d-136">The search methods of the <xref:System.Collections.Generic.Dictionary%602> class, including <xref:System.Collections.Generic.Dictionary%602.ContainsKey%2A> and <xref:System.Collections.Generic.IDictionary%602.Remove%2A>.</span></span>  
  
    -   <span data-ttu-id="cbb0d-137">搜尋方法的泛型<xref:System.Collections.Generic.LinkedList%601>類別，包括<xref:System.Collections.Generic.LinkedList%601.Contains%2A?displayProperty=nameWithType>和<xref:System.Collections.Generic.LinkedList%601.Remove%2A>。</span><span class="sxs-lookup"><span data-stu-id="cbb0d-137">The search methods of the generic <xref:System.Collections.Generic.LinkedList%601> class, including <xref:System.Collections.Generic.LinkedList%601.Contains%2A?displayProperty=nameWithType> and <xref:System.Collections.Generic.LinkedList%601.Remove%2A>.</span></span>  
  
 <span data-ttu-id="cbb0d-138">換句話說，若要處理類別的物件將會儲存在陣列或泛型集合物件的可能性，它是個不錯的主意，實作<xref:System.IEquatable%601>，讓物件可以輕鬆地識別和操作。</span><span class="sxs-lookup"><span data-stu-id="cbb0d-138">In other words, to handle the possibility that objects of a class will be stored in an array or a generic collection object, it is a good idea to implement <xref:System.IEquatable%601> so that the object can be easily identified and manipulated.</span></span>  
  
 <span data-ttu-id="cbb0d-139">當實作<xref:System.IEquatable%601.Equals%2A>方法，定義等號比較適當的泛型型別引數所指定的型別。</span><span class="sxs-lookup"><span data-stu-id="cbb0d-139">When implementing the <xref:System.IEquatable%601.Equals%2A> method, define equality appropriately for the type specified by the generic type argument.</span></span> <span data-ttu-id="cbb0d-140">比方說，如果型別引數為<xref:System.Int32>，定義適用於比較的兩個 32 位元帶正負號的整數是否相等。</span><span class="sxs-lookup"><span data-stu-id="cbb0d-140">For example, if the type argument is <xref:System.Int32>, define equality appropriately for the comparison of two 32-bit signed integers.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cbb0d-141">下列範例顯示的部分實作`Person`類別可實作<xref:System.IEquatable%601>兩個屬性，且`LastName`和`SSN`。</span><span class="sxs-lookup"><span data-stu-id="cbb0d-141">The following example shows the partial implementation of a `Person` class that implements <xref:System.IEquatable%601> and has two properties, `LastName` and `SSN`.</span></span> <span data-ttu-id="cbb0d-142"><xref:System.IEquatable%601.Equals%2A>方法會傳回`True`如果`SSN`兩個屬性`Person`是相同的物件; 否則它會傳回`False`。</span><span class="sxs-lookup"><span data-stu-id="cbb0d-142">The <xref:System.IEquatable%601.Equals%2A> method returns `True` if the `SSN` property of two `Person` objects is identical; otherwise, it returns `False`.</span></span>  
  
 [!code-csharp[System.GenericIEquatable.Equals#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/cs/EqualsEx2.cs#3)]
 [!code-vb[System.GenericIEquatable.Equals#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/vb/EqualsEx2.vb#3)]  
  
 <span data-ttu-id="cbb0d-143">`Person` 物件則會儲存在<xref:System.Collections.Generic.List%601>物件，並可以藉由識別`Contains`方法，如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="cbb0d-143">`Person` objects can then be stored in a <xref:System.Collections.Generic.List%601> object and can be identified by the `Contains` method, as the following example shows.</span></span>  
  
 [!code-csharp[System.GenericIEquatable.Equals#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/cs/Snippet12.cs#12)]
 [!code-vb[System.GenericIEquatable.Equals#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/vb/Snippet12.vb#12)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="cbb0d-144">如果您實作<see cref="M:System.IEquatable`1.Equals(`0)" />，您也應該覆寫的基底類別實作<see cref="M:System.Object.Equals(System.Object)" />並<see cref="M:System.Object.GetHashCode" />，使其行為能夠一致與<see cref="M:System.IEquatable`1.Equals(`0)" />方法。</span><span class="sxs-lookup"><span data-stu-id="cbb0d-144">If you implement <see cref="M:System.IEquatable`1.Equals(`0)" />, you should also override the base class implementations of <see cref="M:System.Object.Equals(System.Object)" /> and <see cref="M:System.Object.GetHashCode" /> so that their behavior is consistent with that of the <see cref="M:System.IEquatable`1.Equals(`0)" /> method.</span></span> <span data-ttu-id="cbb0d-145">如果您覆寫<see cref="M:System.Object.Equals(System.Object)" />，也稱為覆寫實的作中呼叫靜態<see langword="Equals(System.Object, System.Object)" />類別上的方法。</span><span class="sxs-lookup"><span data-stu-id="cbb0d-145">If you do override <see cref="M:System.Object.Equals(System.Object)" />, your overridden implementation is also called in calls to the static <see langword="Equals(System.Object, System.Object)" /> method on your class.</span></span> <span data-ttu-id="cbb0d-146">此外，您應該多載<see langword="op_Equality" />和<see langword="op_Inequality" />運算子。</span><span class="sxs-lookup"><span data-stu-id="cbb0d-146">In addition, you should overload the <see langword="op_Equality" /> and <see langword="op_Inequality" /> operators.</span></span> <span data-ttu-id="cbb0d-147">這可確保所有的測試相等，傳回一致的結果，此範例說明。</span><span class="sxs-lookup"><span data-stu-id="cbb0d-147">This ensures that all tests for equality return consistent results, which the example illustrates.</span></span></para></block>
      </Docs>
    </Member>
  </Members>
</Type>