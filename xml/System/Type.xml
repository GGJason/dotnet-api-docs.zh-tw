<Type Name="Type" FullName="System.Type">
  <Metadata><Meta Name="ms.openlocfilehash" Value="cfbb89f918f9b835f4ce991805da7b50f1738352" /><Meta Name="ms.sourcegitcommit" Value="0d09f5af167c53ca4797424c362e6c2616a36009" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="02/05/2019" /><Meta Name="ms.locfileid" Value="55739829" /></Metadata><TypeSignature Language="C#" Value="public abstract class Type : System.Reflection.MemberInfo, System.Reflection.IReflect, System.Runtime.InteropServices._Type" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit Type extends System.Reflection.MemberInfo implements class System.Reflection.IReflect, class System.Runtime.InteropServices._Type" />
  <TypeSignature Language="DocId" Value="T:System.Type" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Type&#xA;Inherits MemberInfo&#xA;Implements _Type, IReflect" />
  <TypeSignature Language="C++ CLI" Value="public ref class Type abstract : System::Reflection::MemberInfo, System::Reflection::IReflect, System::Runtime::InteropServices::_Type" />
  <TypeSignature Language="F#" Value="type Type = class&#xA;    inherit MemberInfo&#xA;    interface _Type&#xA;    interface IReflect" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.Reflection.MemberInfo</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Reflection.IReflect</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.InteropServices._Type</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._Type))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="9a871-101">代表類型宣告：類別類型、介面類型、陣列類型、值類型、列舉類型、類型參數、泛型類型定義，以及開放式或封閉式的建構泛型類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-101">Represents type declarations: class types, interface types, array types, value types, enumeration types, type parameters, generic type definitions, and open or closed constructed generic types.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-102">`Type` 是的根<xref:System.Reflection>功能主要的方法來存取中繼資料。</span><span class="sxs-lookup"><span data-stu-id="9a871-102">`Type` is the root of the <xref:System.Reflection> functionality and is the primary way to access metadata.</span></span> <span data-ttu-id="9a871-103">使用的成員<xref:System.Type>取得型別宣告，成員的類型 （例如建構函式、 方法、 欄位、 屬性和事件的類別） 的詳細資訊，以及模組和組件部署所在的類別。</span><span class="sxs-lookup"><span data-stu-id="9a871-103">Use the members of <xref:System.Type> to get information about a type declaration, about the members of a type (such as the constructors, methods, fields, properties, and events of a class), as well as the module and the assembly in which the class is deployed.</span></span>  
  
 <span data-ttu-id="9a871-104">不不需要使用反映來取得資訊類型和成員，無論其存取層級的程式碼的任何權限。</span><span class="sxs-lookup"><span data-stu-id="9a871-104">No permissions are required for code to use reflection to get information about types and their members, regardless of their access levels.</span></span> <span data-ttu-id="9a871-105">不不需要使用反映來存取公用成員或其存取層級會讓它們顯示在一般的編譯期間的其他成員的程式碼的任何權限。</span><span class="sxs-lookup"><span data-stu-id="9a871-105">No permissions are required for code to use reflection to access public members, or other members whose access levels would make them visible during normal compilation.</span></span> <span data-ttu-id="9a871-106">不過，為了讓程式碼以使用反映來存取成員，通常會無法存取，例如私用或內部的方法，或受保護類型的欄位不會繼承您的類別，您的程式碼必須<xref:System.Security.Permissions.ReflectionPermission>。</span><span class="sxs-lookup"><span data-stu-id="9a871-106">However, in order for your code to use reflection to access members that would normally be inaccessible, such as private or internal methods, or protected fields of a type your class does not inherit, your code must have <xref:System.Security.Permissions.ReflectionPermission>.</span></span> <span data-ttu-id="9a871-107">請參閱[反映的安全性考量](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)。</span><span class="sxs-lookup"><span data-stu-id="9a871-107">See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).</span></span>  
  
 <span data-ttu-id="9a871-108">`Type` 是抽象基底類別，可讓多個實作。</span><span class="sxs-lookup"><span data-stu-id="9a871-108">`Type` is an abstract base class that allows multiple implementations.</span></span> <span data-ttu-id="9a871-109">系統一律會提供衍生的類別`RuntimeType`。</span><span class="sxs-lookup"><span data-stu-id="9a871-109">The system will always provide the derived class `RuntimeType`.</span></span> <span data-ttu-id="9a871-110">在反映中，執行階段的字為開頭的所有類別都建立一次，每個系統及支援的比較作業中的物件。</span><span class="sxs-lookup"><span data-stu-id="9a871-110">In reflection, all classes beginning with the word Runtime are created only once per object in the system and support comparison operations.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9a871-111">在多執行緒的情況下，不會鎖定<xref:System.Type>物件，若要同步處理存取`static`資料。</span><span class="sxs-lookup"><span data-stu-id="9a871-111">In multithreading scenarios, do not lock <xref:System.Type> objects in order to synchronize access to `static` data.</span></span> <span data-ttu-id="9a871-112">其他的程式碼中，然後再對其，您有任何控制項，也可能會鎖定您的類別類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-112">Other code, over which you have no control, might also lock your class type.</span></span> <span data-ttu-id="9a871-113">這可能會導致死結。</span><span class="sxs-lookup"><span data-stu-id="9a871-113">This might result in a deadlock.</span></span> <span data-ttu-id="9a871-114">相反地，同步處理靜態資料的存取權鎖定私用`static`物件。</span><span class="sxs-lookup"><span data-stu-id="9a871-114">Instead, synchronize access to static data by locking a private `static` object.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9a871-115">在衍生的類別可以存取受保護的成員呼叫的程式碼基底類別。</span><span class="sxs-lookup"><span data-stu-id="9a871-115">A derived class can access protected members of the calling code's base classes.</span></span> <span data-ttu-id="9a871-116">此外，呼叫程式碼的組件的組件成員被允許存取。</span><span class="sxs-lookup"><span data-stu-id="9a871-116">Also, access is allowed to assembly members of the calling code's assembly.</span></span> <span data-ttu-id="9a871-117">一般而言，如果您允許存取在早期繫結程式碼，然後您也可以存取晚期繫結程式碼中。</span><span class="sxs-lookup"><span data-stu-id="9a871-117">As a rule, if you are allowed access in early-bound code, then you are also allowed access in late-bound code.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9a871-118">擴充其他介面的介面不會繼承擴充介面中定義的方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-118">Interfaces that extend other interfaces do not inherit the methods defined in the extended interfaces.</span></span>  
  
 <span data-ttu-id="9a871-119">本節內容：</span><span class="sxs-lookup"><span data-stu-id="9a871-119">In this section:</span></span>  
  
 <span data-ttu-id="9a871-120">[型別物件代表何種類型？](#WhatTypes) </span><span class="sxs-lookup"><span data-stu-id="9a871-120">[What types does a Type object represent?](#WhatTypes) </span></span>  
 <span data-ttu-id="9a871-121">[擷取型別物件](#Retrieve) </span><span class="sxs-lookup"><span data-stu-id="9a871-121">[Retrieving a Type object](#Retrieve) </span></span>  
 [<span data-ttu-id="9a871-122">比較相等的型別物件</span><span class="sxs-lookup"><span data-stu-id="9a871-122">Comparing type objects for equality</span></span>](#Equality)  
  
<a name="WhatTypes"></a>   
## <a name="what-types-does-a-type-object-represent"></a><span data-ttu-id="9a871-123">型別物件代表何種類型？</span><span class="sxs-lookup"><span data-stu-id="9a871-123">What types does a Type object represent?</span></span>  
 <span data-ttu-id="9a871-124">此類別具備執行緒安全;多個執行緒可以同時讀取這種類型的執行個體。</span><span class="sxs-lookup"><span data-stu-id="9a871-124">This class is thread safe; multiple threads can concurrently read from an instance of this type.</span></span> <span data-ttu-id="9a871-125">執行個體<xref:System.Type>類別可代表任何下列類型：</span><span class="sxs-lookup"><span data-stu-id="9a871-125">An instance of the <xref:System.Type> class can represent any of the following types:</span></span>  
  
-   <span data-ttu-id="9a871-126">類別</span><span class="sxs-lookup"><span data-stu-id="9a871-126">Classes</span></span>  
  
-   <span data-ttu-id="9a871-127">值類型</span><span class="sxs-lookup"><span data-stu-id="9a871-127">Value types</span></span>  
  
-   <span data-ttu-id="9a871-128">陣列</span><span class="sxs-lookup"><span data-stu-id="9a871-128">Arrays</span></span>  
  
-   <span data-ttu-id="9a871-129">介面</span><span class="sxs-lookup"><span data-stu-id="9a871-129">Interfaces</span></span>  
  
-   <span data-ttu-id="9a871-130">列舉</span><span class="sxs-lookup"><span data-stu-id="9a871-130">Enumerations</span></span>  
  
-   <span data-ttu-id="9a871-131">委派</span><span class="sxs-lookup"><span data-stu-id="9a871-131">Delegates</span></span>  
  
-   <span data-ttu-id="9a871-132">建構泛型型別和泛型類型定義</span><span class="sxs-lookup"><span data-stu-id="9a871-132">Constructed generic types and generic type definitions</span></span>  
  
-   <span data-ttu-id="9a871-133">型別引數和型別參數的建構泛型類型、 泛型類型定義，以及泛型方法定義</span><span class="sxs-lookup"><span data-stu-id="9a871-133">Type arguments and type parameters of constructed generic types, generic type definitions, and generic method definitions</span></span>  
  
<a name="Retrieve"></a>   
## <a name="retrieving-a-type-object"></a><span data-ttu-id="9a871-134">擷取型別物件</span><span class="sxs-lookup"><span data-stu-id="9a871-134">Retrieving a Type object</span></span>  
 <span data-ttu-id="9a871-135"><xref:System.Type>特定型別相關聯的物件可以透過下列方式取得：</span><span class="sxs-lookup"><span data-stu-id="9a871-135">The <xref:System.Type> object associated with a particular type can be obtained in the following ways:</span></span>  
  
-   <span data-ttu-id="9a871-136">執行個體<xref:System.Object.GetType%2A?displayProperty=nameWithType>方法會傳回<xref:System.Type>物件，表示執行個體的類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-136">The instance <xref:System.Object.GetType%2A?displayProperty=nameWithType> method returns a <xref:System.Type> object that represents the type of an instance.</span></span> <span data-ttu-id="9a871-137">因為所有的 managed 型別衍生自<xref:System.Object>，則<xref:System.Object.GetType%2A>可以在任何類型的執行個體上呼叫方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-137">Because all managed types derive from <xref:System.Object>, the <xref:System.Object.GetType%2A> method can be called on an instance of any type.</span></span>  
  
     <span data-ttu-id="9a871-138">下列範例會呼叫<xref:System.Object.GetType%2A?displayProperty=nameWithType>方法，以判斷物件陣列中每個物件的執行階段類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-138">The following example calls the <xref:System.Object.GetType%2A?displayProperty=nameWithType> method to determine the runtime type of each object in an object array.</span></span>  
  
     [!code-cpp[System.Type#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type/cpp/GetType1.cpp#2)]
     [!code-csharp[System.Type#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type/cs/GetType1.cs#2)]
     [!code-vb[System.Type#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type/vb/GetType1.vb#2)]  
  
-   <span data-ttu-id="9a871-139">靜態<xref:System.Type.GetType%2A?displayProperty=nameWithType>方法會傳回<xref:System.Type>物件，表示其完整名稱所指定的型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-139">The static <xref:System.Type.GetType%2A?displayProperty=nameWithType> methods return a <xref:System.Type> object that represents a type specified by its fully qualified name.</span></span>  
  
-   <span data-ttu-id="9a871-140"><xref:System.Reflection.Module.GetTypes%2A?displayProperty=nameWithType>， <xref:System.Reflection.Module.GetType%2A?displayProperty=nameWithType>，並<xref:System.Reflection.Module.FindTypes%2A?displayProperty=nameWithType>方法會傳回`Type`代表模組中定義之類型的物件。</span><span class="sxs-lookup"><span data-stu-id="9a871-140">The <xref:System.Reflection.Module.GetTypes%2A?displayProperty=nameWithType>, <xref:System.Reflection.Module.GetType%2A?displayProperty=nameWithType>, and <xref:System.Reflection.Module.FindTypes%2A?displayProperty=nameWithType> methods return `Type` objects that represent the types defined in a module.</span></span> <span data-ttu-id="9a871-141">第一種方法可以用來取得各種<xref:System.Type>的所有公用和私用類型的模組中定義的物件。</span><span class="sxs-lookup"><span data-stu-id="9a871-141">The first method can be used to obtain an array of <xref:System.Type> objects for all the public and private types defined in a module.</span></span> <span data-ttu-id="9a871-142">(您可以取得的執行個體`Module`透過<xref:System.Reflection.Assembly.GetModule%2A?displayProperty=nameWithType>或是<xref:System.Reflection.Assembly.GetModules%2A?displayProperty=nameWithType>方法，或透過<xref:System.Type.Module%2A?displayProperty=nameWithType>屬性。)</span><span class="sxs-lookup"><span data-stu-id="9a871-142">(You can obtain an instance of `Module` through the <xref:System.Reflection.Assembly.GetModule%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetModules%2A?displayProperty=nameWithType> method, or through the <xref:System.Type.Module%2A?displayProperty=nameWithType> property.)</span></span>  
  
-   <span data-ttu-id="9a871-143"><xref:System.Reflection.Assembly?displayProperty=nameWithType>物件包含數個方法來擷取組件，包括中定義的類別<xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType>， <xref:System.Reflection.Assembly.GetTypes%2A?displayProperty=nameWithType>，和<xref:System.Reflection.Assembly.GetExportedTypes%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="9a871-143">The <xref:System.Reflection.Assembly?displayProperty=nameWithType> object contains a number of methods to retrieve the classes defined in an assembly, including <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType>, <xref:System.Reflection.Assembly.GetTypes%2A?displayProperty=nameWithType>, and <xref:System.Reflection.Assembly.GetExportedTypes%2A?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="9a871-144"><xref:System.Type.FindInterfaces%2A>方法會傳回型別所支援的介面類型的篩選的清單。</span><span class="sxs-lookup"><span data-stu-id="9a871-144">The <xref:System.Type.FindInterfaces%2A> method returns a filtered list of interface types supported by a type.</span></span>  
  
-   <span data-ttu-id="9a871-145"><xref:System.Type.GetElementType%2A>方法會傳回`Type`物件，表示項目。</span><span class="sxs-lookup"><span data-stu-id="9a871-145">The <xref:System.Type.GetElementType%2A> method returns a `Type` object that represents the element.</span></span>  
  
-   <span data-ttu-id="9a871-146"><xref:System.Type.GetInterfaces%2A>並<xref:System.Type.GetInterface%2A>方法會傳回<xref:System.Type>代表類型所支援的介面類型的物件。</span><span class="sxs-lookup"><span data-stu-id="9a871-146">The <xref:System.Type.GetInterfaces%2A> and <xref:System.Type.GetInterface%2A> methods return <xref:System.Type> objects representing the interface types supported by a type.</span></span>  
  
-   <span data-ttu-id="9a871-147"><xref:System.Type.GetTypeArray%2A>方法傳回的陣列<xref:System.Type>代表任意一組物件所指定類型的物件。</span><span class="sxs-lookup"><span data-stu-id="9a871-147">The <xref:System.Type.GetTypeArray%2A> method returns an array of <xref:System.Type> objects representing the types specified by an arbitrary set of objects.</span></span> <span data-ttu-id="9a871-148">物件會指定類型的陣列與<xref:System.Object>。</span><span class="sxs-lookup"><span data-stu-id="9a871-148">The objects are specified with an array of type <xref:System.Object>.</span></span>  
  
-   <span data-ttu-id="9a871-149"><xref:System.Type.GetTypeFromProgID%2A>和<xref:System.Type.GetTypeFromCLSID%2A>方法可供 COM 互通性。</span><span class="sxs-lookup"><span data-stu-id="9a871-149">The <xref:System.Type.GetTypeFromProgID%2A> and <xref:System.Type.GetTypeFromCLSID%2A> methods are provided for COM interoperability.</span></span> <span data-ttu-id="9a871-150">它們會傳回<xref:System.Type>物件，表示所指定的型別`ProgID`或`CLSID`。</span><span class="sxs-lookup"><span data-stu-id="9a871-150">They return a <xref:System.Type> object that represents the type specified by a `ProgID` or `CLSID`.</span></span>  
  
-   <span data-ttu-id="9a871-151"><xref:System.Type.GetTypeFromHandle%2A>方法提供互通性。</span><span class="sxs-lookup"><span data-stu-id="9a871-151">The <xref:System.Type.GetTypeFromHandle%2A> method is provided for interoperability.</span></span> <span data-ttu-id="9a871-152">它會傳回`Type`物件，表示類別的控制代碼所指定的型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-152">It returns a `Type` object that represents the type specified by a class handle.</span></span>  
  
-   <span data-ttu-id="9a871-153">C#`typeof`運算子，c + +`typeid`運算子，以及 Visual Basic`GetType`運算子取得`Type`型別的物件。</span><span class="sxs-lookup"><span data-stu-id="9a871-153">The C# `typeof` operator, the C++ `typeid` operator, and the Visual Basic `GetType` operator obtain the `Type` object for a type.</span></span>  
  
-   <span data-ttu-id="9a871-154"><xref:System.Type.MakeGenericType%2A>方法會傳回<xref:System.Type>物件，表示建構的泛型類型，也就是開放式建構的類型，如果其<xref:System.Type.ContainsGenericParameters%2A>屬性會傳回`true`，和封閉式建構類型否則。</span><span class="sxs-lookup"><span data-stu-id="9a871-154">The <xref:System.Type.MakeGenericType%2A> method returns a <xref:System.Type> object representing a constructed generic type, which is an open constructed type if its <xref:System.Type.ContainsGenericParameters%2A> property returns `true`, and a closed constructed type otherwise.</span></span> <span data-ttu-id="9a871-155">只有當它已關閉，可以具現化泛型型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-155">A generic type can be instantiated only if it is closed.</span></span>  
  
-   <span data-ttu-id="9a871-156"><xref:System.Type.MakeArrayType%2A>， <xref:System.Type.MakePointerType%2A>，並<xref:System.Type.MakeByRefType%2A>方法會傳回<xref:System.Type>分別代表指定的型別、 指定的型別和參考參數的類型的指標陣列的物件 (`ref`以 C# `ByRef`在 Visual Basic 中)。</span><span class="sxs-lookup"><span data-stu-id="9a871-156">The <xref:System.Type.MakeArrayType%2A>, <xref:System.Type.MakePointerType%2A>, and <xref:System.Type.MakeByRefType%2A> methods return <xref:System.Type> objects that represent, respectively, an array of a specified type, a pointer to a specified type, and the type of a reference parameter (`ref` in C#, `ByRef` in Visual Basic).</span></span>  
  
<a name="Equality"></a>   
## <a name="comparing-type-objects-for-equality"></a><span data-ttu-id="9a871-157">比較相等的型別物件</span><span class="sxs-lookup"><span data-stu-id="9a871-157">Comparing type objects for equality</span></span>  
 <span data-ttu-id="9a871-158">A<xref:System.Type>代表類型是唯一的物件，也就是兩個<xref:System.Type>物件參考會參考相同的物件，如果且只有它們代表相同的型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-158">A <xref:System.Type> object that represents a type is unique; that is, two <xref:System.Type> object references refer to the same object if and only if they represent the same type.</span></span> <span data-ttu-id="9a871-159">這是用來比較<xref:System.Type>物件，使用參考相等。</span><span class="sxs-lookup"><span data-stu-id="9a871-159">This allows for comparison of <xref:System.Type> objects using reference equality.</span></span> <span data-ttu-id="9a871-160">下列範例會比較<xref:System.Type>表示的整數值，以判斷它們是否相同類型的數字的物件。</span><span class="sxs-lookup"><span data-stu-id="9a871-160">The following example compares the <xref:System.Type> objects that represent a number of integer values to determine whether they are of the same type.</span></span>  
  
 [!code-cpp[System.Type#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type/cpp/Equals1.cpp#3)]
 [!code-csharp[System.Type#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type/cs/Equals1.cs#3)]
 [!code-vb[System.Type#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type/vb/Equals1.vb#3)]  
  
   
  
## Examples  
 <span data-ttu-id="9a871-161">下列範例顯示一些具代表性的功能的<xref:System.Type>。</span><span class="sxs-lookup"><span data-stu-id="9a871-161">The following  example shows a few representative features of <xref:System.Type>.</span></span> <span data-ttu-id="9a871-162">C#`typeof`運算子 (`GetType` Visual Basic 中的運算子`typeid`Visual c + + 運算子) 用來取得<xref:System.Type>物件，表示<xref:System.String>。</span><span class="sxs-lookup"><span data-stu-id="9a871-162">The C# `typeof` operator (`GetType` operator in Visual Basic, `typeid` operator in Visual C++) is used to get a <xref:System.Type> object representing <xref:System.String>.</span></span> <span data-ttu-id="9a871-163">從此<xref:System.Type>物件，<xref:System.Type.GetMethod%2A>方法來取得<xref:System.Reflection.MethodInfo>代表<xref:System.String.Substring%2A>多載，起始的位置和長度。</span><span class="sxs-lookup"><span data-stu-id="9a871-163">From this <xref:System.Type> object, the <xref:System.Type.GetMethod%2A> method is used to get a <xref:System.Reflection.MethodInfo> representing the <xref:System.String.Substring%2A> overload that takes a starting location and a length.</span></span>  
  
 <span data-ttu-id="9a871-164">若要識別多載簽章，程式碼範例會建立暫存陣列，包含兩個<xref:System.Type>物件代表`int`(`Integer` Visual Basic 中)。</span><span class="sxs-lookup"><span data-stu-id="9a871-164">To identify the overload signature, the code example creates a temporary array containing two <xref:System.Type> objects representing `int` (`Integer` in Visual Basic).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9a871-165">若要精確地說，陣列會包含兩個執行個體的參考<xref:System.Type>表示`int`目前的應用程式定義域中。</span><span class="sxs-lookup"><span data-stu-id="9a871-165">To be precise, the array contains two references to the instance of <xref:System.Type> that represents `int` in the current application domain.</span></span> <span data-ttu-id="9a871-166">對於任何類型，沒有只有一個執行個體<xref:System.Type>每個應用程式網域。</span><span class="sxs-lookup"><span data-stu-id="9a871-166">For any type, there is only one instance of <xref:System.Type> per application domain.</span></span>  
  
 <span data-ttu-id="9a871-167">此程式碼範例會使用<xref:System.Reflection.MethodInfo>叫用<xref:System.String.Substring%2A>方法在字串"Hello，World ！"，並顯示結果。</span><span class="sxs-lookup"><span data-stu-id="9a871-167">The code example uses the <xref:System.Reflection.MethodInfo> to invoke the <xref:System.String.Substring%2A> method on the string "Hello, World!", and displays the result.</span></span>  
  
 [!code-cpp[System.Type#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type/cpp/source.cpp#1)]
 [!code-csharp[System.Type#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type/cs/source.cs#1)]
 [!code-vb[System.Type#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type/vb/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="9a871-168">此型別具備執行緒安全。</span><span class="sxs-lookup"><span data-stu-id="9a871-168">This type is thread safe.</span></span></threadsafe>
    <block subset="none" type="overrides"><para><span data-ttu-id="9a871-169">當您繼承自<see langword="Type" />，您必須覆寫下列成員：</span><span class="sxs-lookup"><span data-stu-id="9a871-169">When you inherit from <see langword="Type" />, you must override the following members:</span></span> 
-   <see cref="P:System.Type.Assembly" />  
  
-   <see cref="P:System.Type.AssemblyQualifiedName" />  
  
-   <see cref="P:System.Type.BaseType" />  
  
-   <see cref="P:System.Type.FullName" />  
  
-   <see cref="M:System.Type.GetAttributeFlagsImpl" />  
  
-   <see cref="M:System.Type.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />  
  
-   <see cref="M:System.Type.GetConstructors(System.Reflection.BindingFlags)" />  
  
-   <see cref="M:System.Type.GetElementType" />  
  
-   <see cref="M:System.Type.GetEvent(System.String,System.Reflection.BindingFlags)" />  
  
-   <see cref="M:System.Type.GetEvents(System.Reflection.BindingFlags)" />  
  
-   <see cref="M:System.Type.GetField(System.String,System.Reflection.BindingFlags)" />  
  
-   <see cref="M:System.Type.GetFields(System.Reflection.BindingFlags)" />  
  
-   <see cref="M:System.Type.GetInterface(System.String,System.Boolean)" />  
  
-   <see cref="M:System.Type.GetInterfaces" />  
  
-   <see cref="M:System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />  
  
-   <see cref="M:System.Type.GetMethods(System.Reflection.BindingFlags)" />  
  
-   <see cref="M:System.Type.GetNestedType(System.String,System.Reflection.BindingFlags)" />  
  
-   <see cref="M:System.Type.GetNestedTypes(System.Reflection.BindingFlags)" />  
  
-   <see cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />  
  
-   <see cref="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />  
  
-   <see cref="P:System.Type.GUID" />  
  
-   <see cref="M:System.Type.HasElementTypeImpl" />  
  
-   <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />  
  
-   <see cref="M:System.Type.IsArrayImpl" />  
  
-   <see cref="M:System.Type.IsByRefImpl" />  
  
-   <see cref="M:System.Type.IsCOMObjectImpl" />  
  
-   <see cref="M:System.Type.IsPointerImpl" />  
  
-   <see cref="M:System.Type.IsPrimitiveImpl" />  
  
-   <see cref="P:System.Type.Module" />  
  
-   <see cref="P:System.Type.Namespace" />  
  
-   <see cref="P:System.Type.TypeHandle" />  
  
-   <see cref="P:System.Type.UnderlyingSystemType" />  
  
-   <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" />  
  
-   <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)" />  
  
-   <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" />  
  
-   <see cref="P:System.Reflection.MemberInfo.Name" /></para></block>
    <altmember cref="T:System.Object" />
    <altmember cref="N:System.Reflection" />
    <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
    <related type="Article" href="~/docs/framework/reflection-and-codedom/viewing-type-information.md"><span data-ttu-id="9a871-170">檢視類型資訊</span><span class="sxs-lookup"><span data-stu-id="9a871-170">Viewing Type Information</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Type ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Type();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9a871-171">初始化 <see cref="T:System.Type" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="9a871-171">Initializes a new instance of the <see cref="T:System.Type" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-172">這個建構函式是由衍生類別類型物件的建構期間叫用。</span><span class="sxs-lookup"><span data-stu-id="9a871-172">This constructor is invoked by derived classes during the construction of type objects.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Assembly">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.Assembly Assembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Assembly Assembly" />
      <MemberSignature Language="DocId" Value="P:System.Type.Assembly" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Assembly As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Reflection::Assembly ^ Assembly { System::Reflection::Assembly ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Assembly : System.Reflection.Assembly" Usage="System.Type.Assembly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.Assembly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a871-173">取得宣告此類型的 <see cref="T:System.Reflection.Assembly" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-173">Gets the <see cref="T:System.Reflection.Assembly" /> in which the type is declared.</span></span> <span data-ttu-id="9a871-174">若為泛型類型，則取得定義此泛型類型的 <see cref="T:System.Reflection.Assembly" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-174">For generic types, gets the <see cref="T:System.Reflection.Assembly" /> in which the generic type is defined.</span></span></summary>
        <value><span data-ttu-id="9a871-175"><see cref="T:System.Reflection.Assembly" /> 執行個體，描述包含目前類型的組件。</span><span class="sxs-lookup"><span data-stu-id="9a871-175">An <see cref="T:System.Reflection.Assembly" /> instance that describes the assembly containing the current type.</span></span> <span data-ttu-id="9a871-176">若為泛型類型，則此執行個體描述的是含有泛型類型定義的組件，而不是建立與使用特定建構類型的組件。</span><span class="sxs-lookup"><span data-stu-id="9a871-176">For generic types, the instance describes the assembly that contains the generic type definition, not the assembly that creates and uses a particular constructed type.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-177">如果目前<xref:System.Type>物件代表建構的泛型型別，這個屬性會傳回包含泛型型別定義的組件。</span><span class="sxs-lookup"><span data-stu-id="9a871-177">If the current <xref:System.Type> object represents a constructed generic type, this property returns the assembly that contains the generic type definition.</span></span> <span data-ttu-id="9a871-178">例如，假設您建立名為 MyGenerics.dll 包含泛型型別定義的組件`MyGenericStack<T>`(`MyGenericStack(Of T)` Visual Basic 中`generic<T> ref class MyGenericStack`c + + 中)。</span><span class="sxs-lookup"><span data-stu-id="9a871-178">For example, suppose you create an assembly named MyGenerics.dll that contains the generic type definition `MyGenericStack<T>` (`MyGenericStack(Of T)` in Visual Basic, `generic<T> ref class MyGenericStack` in C++).</span></span> <span data-ttu-id="9a871-179">如果您建立的執行個體`MyGenericStack<int>`(`MyGenericStack(Of Integer)` Visual Basic 中) 中另一個組件，<xref:System.Type.Assembly%2A>建構類型的屬性會傳回<xref:System.Reflection.Assembly>表示 MyGenerics.dll 物件。</span><span class="sxs-lookup"><span data-stu-id="9a871-179">If you create an instance of `MyGenericStack<int>` (`MyGenericStack(Of Integer)` in Visual Basic) in another assembly, the <xref:System.Type.Assembly%2A> property for the constructed type returns an <xref:System.Reflection.Assembly> object that represents MyGenerics.dll.</span></span>  
  
 <span data-ttu-id="9a871-180">同樣地，如果目前<xref:System.Type>物件表示未指派的泛型參數`T`，這個屬性會傳回包含泛型型別定義的組件`T`。</span><span class="sxs-lookup"><span data-stu-id="9a871-180">Similarly, if the current <xref:System.Type> object represents an unassigned generic parameter `T`, this property returns the assembly that contains the generic type that defines `T`.</span></span>  
  
 <span data-ttu-id="9a871-181">如果<xref:System.Type.Assembly%2A?displayProperty=nameWithType>屬性並不適用於特定的.NET 實作，例如.NET Core 或通用 Windows 平台，請使用<xref:System.Reflection.TypeInfo.Assembly?displayProperty=nameWithType>屬性改為。</span><span class="sxs-lookup"><span data-stu-id="9a871-181">If the <xref:System.Type.Assembly%2A?displayProperty=nameWithType> property is not available on a particular .NET implementation, such as .NET Core or the Universal Windows Platform, use the <xref:System.Reflection.TypeInfo.Assembly?displayProperty=nameWithType> property instead.</span></span>      
  
 <span data-ttu-id="9a871-182">這個屬性是唯讀的。</span><span class="sxs-lookup"><span data-stu-id="9a871-182">This property is read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-183">下列範例會顯示與類別相關聯的組件名稱和型別的完整的名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-183">The following example displays the assembly name associated with the class and the fully qualified name of the type.</span></span>  
  
 [!code-cpp[Type_Assembly#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_Assembly/CPP/type_assembly.cpp#1)]
 [!code-csharp[Type_Assembly#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_Assembly/CS/type_assembly.cs#1)]
 [!code-vb[Type_Assembly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_Assembly/VB/type_assembly.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AssemblyQualifiedName">
      <MemberSignature Language="C#" Value="public abstract string AssemblyQualifiedName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AssemblyQualifiedName" />
      <MemberSignature Language="DocId" Value="P:System.Type.AssemblyQualifiedName" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property AssemblyQualifiedName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ AssemblyQualifiedName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AssemblyQualifiedName : string" Usage="System.Type.AssemblyQualifiedName" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.AssemblyQualifiedName</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a871-184">取得類型的組件限定名稱，包含載入 <see cref="T:System.Type" /> 的組件名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-184">Gets the assembly-qualified name of the type, which includes the name of the assembly from which this <see cref="T:System.Type" /> object was loaded.</span></span></summary>
        <value><span data-ttu-id="9a871-185"><see cref="T:System.Type" /> 的組件限定名稱，包含載入 <see cref="T:System.Type" /> 的組件名稱，如果目前的執行個體表示泛型類型參數，則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-185">The assembly-qualified name of the <see cref="T:System.Type" />, which includes the name of the assembly from which the <see cref="T:System.Type" /> was loaded, or <see langword="null" /> if the current instance represents a generic type parameter.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-186">類型的組件限定名稱是由型別名稱，包括其命名空間，後面接著逗號，後面接著組件的顯示名稱所組成。</span><span class="sxs-lookup"><span data-stu-id="9a871-186">The assembly-qualified name of a type consists of the type name, including its namespace, followed by a comma, followed by the display name of the assembly.</span></span> <span data-ttu-id="9a871-187">使用取得組件的顯示名稱<xref:System.Reflection.Assembly.FullName%2A?displayProperty=nameWithType>屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-187">The display name of an assembly is obtained using the <xref:System.Reflection.Assembly.FullName%2A?displayProperty=nameWithType> property.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9a871-188">在.NET Framework 2.0 版中，處理器架構會新增至組件識別，而且可以指定為組件名稱字串的一部分。</span><span class="sxs-lookup"><span data-stu-id="9a871-188">In the .NET Framework version 2.0, processor architecture is added to assembly identity, and can be specified as part of assembly name strings.</span></span> <span data-ttu-id="9a871-189">例如，"ProcessorArchitecture = msil"。</span><span class="sxs-lookup"><span data-stu-id="9a871-189">For example, "ProcessorArchitecture=msil".</span></span> <span data-ttu-id="9a871-190">不過，它不包含在所傳回的字串<xref:System.Type.AssemblyQualifiedName%2A>屬性，因為相容性。</span><span class="sxs-lookup"><span data-stu-id="9a871-190">However, it is not included in the string returned by the <xref:System.Type.AssemblyQualifiedName%2A> property, for compatibility reasons.</span></span> <span data-ttu-id="9a871-191">請參閱 <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="9a871-191">See <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="9a871-192">支援通用語言執行平台的所有編譯器都發出的簡單名稱的巢狀類別，並反映建構查詢時，根據下列慣例 mangled 的名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-192">All compilers that support the common language runtime emit the simple name of a nested class, and reflection constructs a mangled name when queried, in accordance with the following conventions.</span></span>  
  
|<span data-ttu-id="9a871-193">分隔符號</span><span class="sxs-lookup"><span data-stu-id="9a871-193">Delimiter</span></span>|<span data-ttu-id="9a871-194">意義</span><span class="sxs-lookup"><span data-stu-id="9a871-194">Meaning</span></span>|  
|---------------|-------------|  
|<span data-ttu-id="9a871-195">反斜線 (\\)</span><span class="sxs-lookup"><span data-stu-id="9a871-195">Backslash (\\)</span></span>|<span data-ttu-id="9a871-196">逸出字元。</span><span class="sxs-lookup"><span data-stu-id="9a871-196">Escape character.</span></span>|  
|<span data-ttu-id="9a871-197">逗號 （，）</span><span class="sxs-lookup"><span data-stu-id="9a871-197">Comma (,)</span></span>|<span data-ttu-id="9a871-198">後面接著組件名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-198">Precedes the Assembly name.</span></span>|  
|<span data-ttu-id="9a871-199">加號 （+）</span><span class="sxs-lookup"><span data-stu-id="9a871-199">Plus sign (+)</span></span>|<span data-ttu-id="9a871-200">在之前的巢狀的類別。</span><span class="sxs-lookup"><span data-stu-id="9a871-200">Precedes a nested class.</span></span>|  
|<span data-ttu-id="9a871-201">句號 （.）</span><span class="sxs-lookup"><span data-stu-id="9a871-201">Period (.)</span></span>|<span data-ttu-id="9a871-202">表示命名空間識別項。</span><span class="sxs-lookup"><span data-stu-id="9a871-202">Denotes namespace identifiers.</span></span>|  
|<span data-ttu-id="9a871-203">括號 ([])</span><span class="sxs-lookup"><span data-stu-id="9a871-203">Brackets ([])</span></span>|<span data-ttu-id="9a871-204">在類型名稱之後，即表示該類型的陣列。</span><span class="sxs-lookup"><span data-stu-id="9a871-204">After a type name, denotes an array of that type.</span></span><br /><br /> <span data-ttu-id="9a871-205">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-205">-or-</span></span><br /><br /> <span data-ttu-id="9a871-206">對於泛型類型，封入泛型型別引數清單。</span><span class="sxs-lookup"><span data-stu-id="9a871-206">For a generic type, encloses the generic type argument list.</span></span><br /><br /> <span data-ttu-id="9a871-207">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-207">-or-</span></span><br /><br /> <span data-ttu-id="9a871-208">在類型引數清單中，將組件限定型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-208">Within a type argument list, encloses an assembly-qualified type.</span></span>|  
  
 <span data-ttu-id="9a871-209">例如，類別的組件限定名稱可能如下所示：</span><span class="sxs-lookup"><span data-stu-id="9a871-209">For example, the assembly-qualified name for a class might look like this:</span></span>  
  
```  
TopNamespace.SubNameSpace.ContainingClass+NestedClass, MyAssembly, Version=1.3.0.0, Culture=neutral, PublicKeyToken=b17a5c561934e089  
```  
  
 <span data-ttu-id="9a871-210">如果命名空間包含加號時，例如 TopNamespace.Sub+Namespace 則加號 （+） 會加上逸出字元 (\\) 以防止它被解譯為巢狀分隔符號。</span><span class="sxs-lookup"><span data-stu-id="9a871-210">If the namespace contained a plus sign, for example TopNamespace.Sub+Namespace, then the plus sign (+) would be preceded by an escape character (\\) to prevent it from being interpreted as a nesting separator.</span></span> <span data-ttu-id="9a871-211">反映會發出此字串，如下所示：</span><span class="sxs-lookup"><span data-stu-id="9a871-211">Reflection would emit this string as follows:</span></span>  
  
```  
TopNamespace.Sub\+Namespace.ContainingClass+NestedClass, MyAssembly, Version=1.3.0.0, Culture=neutral, PublicKeyToken=b17a5c561934e089   
```  
  
 <span data-ttu-id="9a871-212">"+ +"會變成"\\+\\+"，和 「\\」 變成 「\\\\"。</span><span class="sxs-lookup"><span data-stu-id="9a871-212">A "++" becomes "\\+\\+", and a "\\" becomes "\\\\".</span></span>  
  
 <span data-ttu-id="9a871-213">這個限定的名稱可以保存和更新版本用來載入<xref:System.Type>。</span><span class="sxs-lookup"><span data-stu-id="9a871-213">This qualified name can be persisted and later used to load the <xref:System.Type>.</span></span> <span data-ttu-id="9a871-214">搜尋並載入<xref:System.Type>，使用<xref:System.Type.GetType%2A>使用型別名稱只有或使用組件限定的類型名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-214">To search for and load a <xref:System.Type>, use <xref:System.Type.GetType%2A> either with the type name only or with the assembly qualified type name.</span></span> <span data-ttu-id="9a871-215"><xref:System.Type.GetType%2A> 與型別名稱只會尋找<xref:System.Type>呼叫者的組件中，然後在系統組件中。</span><span class="sxs-lookup"><span data-stu-id="9a871-215"><xref:System.Type.GetType%2A> with the type name only will look for the <xref:System.Type> in the caller's assembly and then in the System assembly.</span></span> <span data-ttu-id="9a871-216"><xref:System.Type.GetType%2A> 與組件限定的類型名稱會尋找<xref:System.Type>任何組件中。</span><span class="sxs-lookup"><span data-stu-id="9a871-216"><xref:System.Type.GetType%2A> with the assembly qualified type name will look for the <xref:System.Type> in any assembly.</span></span>  
  
 <span data-ttu-id="9a871-217">類型名稱可能包含行尾字元來表示的類型，例如類型是否為參考型別、 指標類型或陣列類型的其他資訊。</span><span class="sxs-lookup"><span data-stu-id="9a871-217">Type names may include trailing characters that denote additional information about the type, such as whether the type is a reference type, a pointer type or an array type.</span></span> <span data-ttu-id="9a871-218">若要擷取的型別名稱，而不需要這些後置字元，請使用`t.GetElementType().ToString()`，其中`t`是型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-218">To retrieve the type name without these trailing characters, use `t.GetElementType().ToString()`, where `t` is the type.</span></span>  
  
 <span data-ttu-id="9a871-219">空格是相關的組件名稱以外的所有型別名稱元件。</span><span class="sxs-lookup"><span data-stu-id="9a871-219">Spaces are relevant in all type name components except the assembly name.</span></span> <span data-ttu-id="9a871-220">在組件名稱 '，' 分隔符號之前的空格是相關的但是 '，' 分隔符號之後的空格會被忽略。</span><span class="sxs-lookup"><span data-stu-id="9a871-220">In the assembly name, spaces before the ',' separator are relevant, but spaces after the ',' separator are ignored.</span></span>  
  
 <span data-ttu-id="9a871-221">泛型引數的泛型型別本身都是由組件名稱所限定。</span><span class="sxs-lookup"><span data-stu-id="9a871-221">Generic arguments of generic types are themselves qualified by assembly name.</span></span> <span data-ttu-id="9a871-222">例如，在組件限定類型名稱`MyGenericClass<int>`(`MyGenericClass(Of Integer)` Visual Basic 中)，`int`展開的組件限定類型名稱為<xref:System.Int32>。</span><span class="sxs-lookup"><span data-stu-id="9a871-222">For example, in the assembly-qualified type name for `MyGenericClass<int>` (`MyGenericClass(Of Integer)` in Visual Basic), `int` is expanded to the assembly-qualified type name for <xref:System.Int32>.</span></span>  
  
 <span data-ttu-id="9a871-223">如果目前<xref:System.Type>物件代表泛型參數，則這個屬性會傳回`null`。</span><span class="sxs-lookup"><span data-stu-id="9a871-223">If the current <xref:System.Type> object represents a generic parameter, this property returns `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-224">下列範例會顯示與類別相關聯的組件名稱和型別的完整的名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-224">The following example displays the assembly name associated with the class and the fully qualified name of the type.</span></span>  
  
 [!code-cpp[type_assembly#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_Assembly/CPP/type_assembly.cpp#1)]
 [!code-csharp[type_assembly#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_Assembly/CS/type_assembly.cs#1)]
 [!code-vb[type_assembly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_Assembly/VB/type_assembly.vb#1)]  
  
 <span data-ttu-id="9a871-225">下列範例會比較所傳回的字串<xref:System.Type.ToString%2A>方法和`Name`， <xref:System.Type.FullName%2A>，和<xref:System.Type.AssemblyQualifiedName%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-225">The following example compares the strings returned by the <xref:System.Type.ToString%2A> method and the `Name`, <xref:System.Type.FullName%2A>, and <xref:System.Type.AssemblyQualifiedName%2A> properties.</span></span>  
  
 [!code-csharp[System.Type.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.tostring/cs/fullname1.cs#1)]
 [!code-vb[System.Type.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.tostring/vb/fullname1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
        <altmember cref="M:System.Type.GetType" />
        <altmember cref="P:System.Type.FullName" />
        <altmember cref="P:System.Type.Namespace" />
        <altmember cref="T:System.Reflection.AssemblyName" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/specifying-fully-qualified-type-names.md"><span data-ttu-id="9a871-226">指定完整的類型名稱</span><span class="sxs-lookup"><span data-stu-id="9a871-226">Specifying Fully Qualified Type Names</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public System.Reflection.TypeAttributes Attributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.TypeAttributes Attributes" />
      <MemberSignature Language="DocId" Value="P:System.Type.Attributes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Attributes As TypeAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::TypeAttributes Attributes { System::Reflection::TypeAttributes get(); };" />
      <MemberSignature Language="F#" Value="member this.Attributes : System.Reflection.TypeAttributes" Usage="System.Type.Attributes" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.Attributes</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.TypeAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a871-227">取得與 <see cref="T:System.Type" /> 關聯的屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-227">Gets the attributes associated with the <see cref="T:System.Type" />.</span></span></summary>
        <value><span data-ttu-id="9a871-228">代表 <see cref="T:System.Reflection.TypeAttributes" /> 屬性集的 <see cref="T:System.Type" /> 物件；若 <see cref="T:System.Type" /> 代表的是泛型型別參數，則這個值就是未指定的。</span><span class="sxs-lookup"><span data-stu-id="9a871-228">A <see cref="T:System.Reflection.TypeAttributes" /> object representing the attribute set of the <see cref="T:System.Type" />, unless the <see cref="T:System.Type" /> represents a generic type parameter, in which case the value is unspecified.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-229">某些成員<xref:System.Reflection.TypeAttributes>列舉型別都代表一組值的遮罩。</span><span class="sxs-lookup"><span data-stu-id="9a871-229">Some members of the <xref:System.Reflection.TypeAttributes> enumeration are masks that represent a group of values.</span></span> <span data-ttu-id="9a871-230">每個群組包含一個成員，其基礎值為零。</span><span class="sxs-lookup"><span data-stu-id="9a871-230">Each group includes one member whose underlying value is zero.</span></span> <span data-ttu-id="9a871-231">比方說，基礎值的<xref:System.Reflection.TypeAttributes.NotPublic?displayProperty=nameWithType>中的成員<xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType>群組為零，因為<xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType>中的成員<xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType>群組。</span><span class="sxs-lookup"><span data-stu-id="9a871-231">For example, the underlying value of the <xref:System.Reflection.TypeAttributes.NotPublic?displayProperty=nameWithType> member in the <xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> group is zero, as is the <xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType> member in the <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> group.</span></span> <span data-ttu-id="9a871-232">基於這個原因，您必須使用之前先測試這些值的遮罩。</span><span class="sxs-lookup"><span data-stu-id="9a871-232">Because of this, you must use the mask before testing for those values.</span></span> <span data-ttu-id="9a871-233">這個範例將提供說明。</span><span class="sxs-lookup"><span data-stu-id="9a871-233">The example provides an illustration.</span></span>  
  
> [!TIP]
>  <span data-ttu-id="9a871-234">大部分用途而言，屬性，例如<xref:System.Type.IsClass%2A>，<xref:System.Type.IsAutoLayout%2A>，和<xref:System.Type.IsSpecialName%2A>容易使用與型別屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-234">For most purposes, properties like <xref:System.Type.IsClass%2A>,<xref:System.Type.IsAutoLayout%2A>, and <xref:System.Type.IsSpecialName%2A> are easier to use than type attributes.</span></span>  
  
 <span data-ttu-id="9a871-235">如果目前<xref:System.Type>代表建構的泛型類型，這個屬性傳回的泛型類型定義的屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-235">If the current <xref:System.Type> represents a constructed generic type, this property returns the attributes of the generic type definition.</span></span> <span data-ttu-id="9a871-236">例如，將傳回的屬性`MyGenericClass<int>`(`MyGenericClass(Of Integer)` Visual Basic 中) 的屬性是`MyGenericClass<T>`(`MyGenericClass(Of T)` Visual Basic 中)。</span><span class="sxs-lookup"><span data-stu-id="9a871-236">For example, the attributes returned for `MyGenericClass<int>` (`MyGenericClass(Of Integer)` in Visual Basic) are the attributes of `MyGenericClass<T>` (`MyGenericClass(Of T)` in Visual Basic).</span></span>  
  
 <span data-ttu-id="9a871-237">如果目前<xref:System.Type>代表泛型類型參數-也就是如果<xref:System.Type.IsGenericParameter%2A>屬性會傳回`true`-<xref:System.Reflection.TypeAttributes>未指定這個屬性所傳回的值。</span><span class="sxs-lookup"><span data-stu-id="9a871-237">If the current <xref:System.Type> represents a generic type parameter - that is, if the <xref:System.Type.IsGenericParameter%2A> property returns `true` - the <xref:System.Reflection.TypeAttributes> value returned by this property is unspecified.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-238">下列範例使用<xref:System.Type.Attributes%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-238">The following example usesthe <xref:System.Type.Attributes%2A> property.</span></span>  
  
 [!code-csharp[System.Type.Attributes#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.attributes/cs/attributes1.cs#1)]
 [!code-vb[System.Type.Attributes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.attributes/vb/attributes1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.GetAttributeFlagsImpl" />
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="BaseType">
      <MemberSignature Language="C#" Value="public abstract Type BaseType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type BaseType" />
      <MemberSignature Language="DocId" Value="P:System.Type.BaseType" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property BaseType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property Type ^ BaseType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseType : Type" Usage="System.Type.BaseType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.BaseType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a871-239">取得目前 <see cref="T:System.Type" /> 所直接繼承的類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-239">Gets the type from which the current <see cref="T:System.Type" /> directly inherits.</span></span></summary>
        <value><span data-ttu-id="9a871-240">目前 <see cref="T:System.Type" /> 直接繼承自的 <see cref="T:System.Type" />，如果目前 <see langword="null" /> 表示 <see langword="Type" /> 類別或介面，則為 <see cref="T:System.Object" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-240">The <see cref="T:System.Type" /> from which the current <see cref="T:System.Type" /> directly inherits, or <see langword="null" /> if the current <see langword="Type" /> represents the <see cref="T:System.Object" /> class or an interface.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-241">基底型別是從其目前的型別直接繼承的型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-241">The base type is the type from which the current type directly inherits.</span></span> <span data-ttu-id="9a871-242"><xref:System.Object> 是唯一的類型，並沒有基底類型，因此`null`會傳回基底型別<xref:System.Object>。</span><span class="sxs-lookup"><span data-stu-id="9a871-242"><xref:System.Object> is the only type that does not have a base type, therefore `null` is returned as the base type of <xref:System.Object>.</span></span>  
  
 <span data-ttu-id="9a871-243">介面繼承自零或多個基底介面。因此，這個屬性會傳回`null`如果`Type`物件表示的介面。</span><span class="sxs-lookup"><span data-stu-id="9a871-243">Interfaces inherit from zero or more base interfaces; therefore, this property returns `null` if the `Type` object represents an interface.</span></span> <span data-ttu-id="9a871-244">基底介面可以判斷與<xref:System.Type.GetInterfaces%2A>或<xref:System.Type.FindInterfaces%2A>。</span><span class="sxs-lookup"><span data-stu-id="9a871-244">The base interfaces can be determined with <xref:System.Type.GetInterfaces%2A> or <xref:System.Type.FindInterfaces%2A>.</span></span>  
  
 <span data-ttu-id="9a871-245">如果目前<xref:System.Type>代表建構的泛型類型，基底型別反映的泛型引數。</span><span class="sxs-lookup"><span data-stu-id="9a871-245">If the current <xref:System.Type> represents a constructed generic type, the base type reflects the generic arguments.</span></span> <span data-ttu-id="9a871-246">例如，請考慮下列宣告：</span><span class="sxs-lookup"><span data-stu-id="9a871-246">For example, consider the following declarations:</span></span>  
  
 [!code-cpp[System.Type.BaseType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.type.basetype/cpp/remarks.cpp#1)]
 [!code-csharp[System.Type.BaseType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.basetype/cs/remarks.cs#1)]
 [!code-vb[System.Type.BaseType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.basetype/vb/remarks.vb#1)]  
  
 <span data-ttu-id="9a871-247">建構的類型`C<int>`(`C(Of Integer)` Visual Basic 中)，則<xref:System.Type.BaseType%2A>屬性會傳回`B<int>`。</span><span class="sxs-lookup"><span data-stu-id="9a871-247">For the constructed type `C<int>` (`C(Of Integer)` in Visual Basic), the <xref:System.Type.BaseType%2A> property returns `B<int>`.</span></span>  
  
 <span data-ttu-id="9a871-248">如果目前<xref:System.Type>代表的泛型類型定義的型別參數<xref:System.Type.BaseType%2A>傳回類別條件約束，也就是將型別參數必須繼承的類別。</span><span class="sxs-lookup"><span data-stu-id="9a871-248">If the current <xref:System.Type> represents a type parameter of a generic type definition, <xref:System.Type.BaseType%2A> returns the class constraint, that is, the class the type parameter must inherit.</span></span> <span data-ttu-id="9a871-249">如果沒有類別條件約束中，<xref:System.Type.BaseType%2A>傳回<xref:System.Object?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="9a871-249">If there is no class constraint, <xref:System.Type.BaseType%2A> returns <xref:System.Object?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="9a871-250">這個屬性是唯讀的。</span><span class="sxs-lookup"><span data-stu-id="9a871-250">This property is read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-251">下列範例示範如何使用<xref:System.Type.BaseType%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-251">The following example demonstrates using the <xref:System.Type.BaseType%2A> property.</span></span>  
  
 [!code-cpp[TestBaseType#1](~/samples/snippets/cpp/VS_Snippets_CLR/TestBaseType/CPP/testbasetype.cpp#1)]
 [!code-csharp[TestBaseType#1](~/samples/snippets/csharp/VS_Snippets_CLR/TestBaseType/CS/testbasetype.cs#1)]
 [!code-vb[TestBaseType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TestBaseType/VB/testbasetype.vb#1)]  
  
 <span data-ttu-id="9a871-252">下列範例會使用遞迴來列出每個類別的組件中找到完整的繼承階層架構。</span><span class="sxs-lookup"><span data-stu-id="9a871-252">The following example uses recursion to list the complete inheritance hierarchy of each class found in an assembly.</span></span> <span data-ttu-id="9a871-253">此範例會定義名為類別`C`衍生自類別，名為`B`，它會接著衍生自類別，名為`A`。</span><span class="sxs-lookup"><span data-stu-id="9a871-253">The example defines a class named `C` that derives from a class named `B`, which, in turn, derives from a class named `A`.</span></span>  
  
 [!code-csharp[System.Type.BaseType#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.basetype/cs/basetype3.cs#2)]
 [!code-vb[System.Type.BaseType#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.basetype/vb/basetype3.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Object" />
        <altmember cref="M:System.Type.GetInterfaces" />
        <altmember cref="M:System.Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)" />
        <altmember cref="P:System.Type.UnderlyingSystemType" />
        <altmember cref="M:System.Type.IsSubclassOf(System.Type)" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/reflection-and-generic-types.md"><span data-ttu-id="9a871-254">反映和泛用類型</span><span class="sxs-lookup"><span data-stu-id="9a871-254">Reflection and Generic Types</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContainsGenericParameters">
      <MemberSignature Language="C#" Value="public virtual bool ContainsGenericParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ContainsGenericParameters" />
      <MemberSignature Language="DocId" Value="P:System.Type.ContainsGenericParameters" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ContainsGenericParameters As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool ContainsGenericParameters { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ContainsGenericParameters : bool" Usage="System.Type.ContainsGenericParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a871-255">取得值，該值指出目前的 <see cref="T:System.Type" /> 物件是否有尚未被特定類型取代的類型參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-255">Gets a value indicating whether the current <see cref="T:System.Type" /> object has type parameters that have not been replaced by specific types.</span></span></summary>
        <value><span data-ttu-id="9a871-256">如果 <see langword="true" /> 物件本身為泛型類型參數或包含尚未提供特定類型的類型參數則為 <see cref="T:System.Type" />否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-256"><see langword="true" /> if the <see cref="T:System.Type" /> object is itself a generic type parameter or has type parameters for which specific types have not been supplied; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-257">若要建立類型的執行個體，必須沒有泛型類型定義或開放式建構的類型中的類型引數型別本身，在任何封入泛型型別，或在任何項目型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-257">In order to create an instance of a type, there must be no generic type definitions or open constructed types in the type arguments of the type itself, in any enclosing generic types, or in any elements of the type.</span></span> <span data-ttu-id="9a871-258">另一種說法是，當檢查以遞迴方式、 型別必須包含沒有泛型類型參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-258">Another way of saying this is that when examined recursively, the type must contain no generic type parameters.</span></span>  
  
 <span data-ttu-id="9a871-259">因為類型可能很複雜，做出這個決定並不容易。</span><span class="sxs-lookup"><span data-stu-id="9a871-259">Since types can be arbitrarily complex, making this determination is difficult.</span></span> <span data-ttu-id="9a871-260">為了方便起見，並減少錯誤的機會<xref:System.Type.ContainsGenericParameters%2A>屬性會提供標準的方式來區別封閉式建構類型，可以具現化，並開啟建構類型，不能。</span><span class="sxs-lookup"><span data-stu-id="9a871-260">For convenience and to reduce the chance of error, the <xref:System.Type.ContainsGenericParameters%2A> property provides a standard way to distinguish between closed constructed types, which can be instantiated, and open constructed types, which cannot.</span></span> <span data-ttu-id="9a871-261">如果<xref:System.Type.ContainsGenericParameters%2A>屬性會傳回`true`，類型無法具現化。</span><span class="sxs-lookup"><span data-stu-id="9a871-261">If the <xref:System.Type.ContainsGenericParameters%2A> property returns `true`, the type cannot be instantiated.</span></span>  
  
 <span data-ttu-id="9a871-262"><xref:System.Type.ContainsGenericParameters%2A>以遞迴方式型別參數的屬性搜尋。</span><span class="sxs-lookup"><span data-stu-id="9a871-262">The <xref:System.Type.ContainsGenericParameters%2A> property searches recursively for type parameters.</span></span> <span data-ttu-id="9a871-263">例如，它會傳回`true`其項目是型別陣列`A<T>`(`A(Of T)` Visual Basic 中)，即使陣列不是泛型本身。</span><span class="sxs-lookup"><span data-stu-id="9a871-263">For example, it returns `true` for an array whose elements are type `A<T>` (`A(Of T)` in Visual Basic), even though the array is not itself generic.</span></span> <span data-ttu-id="9a871-264">與此相反的行為與<xref:System.Type.IsGenericType%2A>屬性，會傳回`false`陣列。</span><span class="sxs-lookup"><span data-stu-id="9a871-264">Contrast this with the behavior of the <xref:System.Type.IsGenericType%2A> property, which returns `false` for arrays.</span></span>  
  
 <span data-ttu-id="9a871-265">範例類別和一個表格，顯示的值的一組<xref:System.Type.ContainsGenericParameters%2A>屬性，請參閱<xref:System.Type.IsGenericType%2A>。</span><span class="sxs-lookup"><span data-stu-id="9a871-265">For a set of example classes and a table showing the values of the <xref:System.Type.ContainsGenericParameters%2A> property, see <xref:System.Type.IsGenericType%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-266">下列範例定義具有兩個類型參數的泛型類別，並接著定義第二個泛型類別衍生自第一個類別。</span><span class="sxs-lookup"><span data-stu-id="9a871-266">The following example defines a generic class with two type parameters and then defines a second generic class that derives from the first class.</span></span> <span data-ttu-id="9a871-267">在衍生的類別的基底類別具有兩個類型引數： 第一個是<xref:System.Int32>第二個是衍生型別的型別參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-267">The derived class's base class has two type arguments: the first is <xref:System.Int32> and the second is a type parameter of the derived type.</span></span> <span data-ttu-id="9a871-268">此範例會顯示這些泛型類別的相關資訊，包括位置報告<xref:System.Type.GenericParameterPosition%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-268">The example displays information about these generic classes, including the positions reported by the <xref:System.Type.GenericParameterPosition%2A> property.</span></span>  
  
 [!code-cpp[System.Type.HasUnboundGenericParameters#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.HasUnboundGenericParameters/CPP/source.cpp#1)]
 [!code-csharp[System.Type.HasUnboundGenericParameters#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.HasUnboundGenericParameters/CS/source.cs#1)]
 [!code-vb[System.Type.HasUnboundGenericParameters#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.HasUnboundGenericParameters/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.ContainsGenericParameters" />
        <altmember cref="P:System.Type.IsGenericTypeDefinition" />
        <altmember cref="M:System.Type.MakeGenericType(System.Type[])" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/reflection-and-generic-types.md"><span data-ttu-id="9a871-269">反映和泛用類型</span><span class="sxs-lookup"><span data-stu-id="9a871-269">Reflection and Generic Types</span></span></related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-examine-and-instantiate-generic-types-with-reflection.md"><span data-ttu-id="9a871-270">如何：使用反映檢視和執行個體化泛型類型</span><span class="sxs-lookup"><span data-stu-id="9a871-270">How to: Examine and Instantiate Generic Types with Reflection</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="DeclaringMethod">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodBase DeclaringMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MethodBase DeclaringMethod" />
      <MemberSignature Language="DocId" Value="P:System.Type.DeclaringMethod" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property DeclaringMethod As MethodBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MethodBase ^ DeclaringMethod { System::Reflection::MethodBase ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DeclaringMethod : System.Reflection.MethodBase" Usage="System.Type.DeclaringMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodBase</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a871-271">如果目前的 <see cref="T:System.Reflection.MethodBase" /> 表示泛型方法的類型參數，則取得表示宣告方法的 <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-271">Gets a <see cref="T:System.Reflection.MethodBase" /> that represents the declaring method, if the current <see cref="T:System.Type" /> represents a type parameter of a generic method.</span></span></summary>
        <value><span data-ttu-id="9a871-272">如果目前的 <see cref="T:System.Type" /> 表示泛型方法的類型參數，則為表示宣告方法的 <see cref="T:System.Reflection.MethodBase" />否則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-272">If the current <see cref="T:System.Type" /> represents a type parameter of a generic method, a <see cref="T:System.Reflection.MethodBase" /> that represents declaring method; otherwise, <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-273">宣告的方法是泛型方法定義。</span><span class="sxs-lookup"><span data-stu-id="9a871-273">The declaring method is a generic method definition.</span></span> <span data-ttu-id="9a871-274">也就是說，如果<xref:System.Type.DeclaringMethod%2A>不會傳回`null`，然後`DeclaringMethod.IsGenericMethodDefinition`傳回`true`。</span><span class="sxs-lookup"><span data-stu-id="9a871-274">That is, if <xref:System.Type.DeclaringMethod%2A> does not return `null`, then `DeclaringMethod.IsGenericMethodDefinition` returns `true`.</span></span>  
  
 <span data-ttu-id="9a871-275"><xref:System.Type.DeclaringType%2A>和<xref:System.Type.DeclaringMethod%2A>屬性識別的泛型型別定義或泛型類型參數原本定義所在的泛型方法定義：</span><span class="sxs-lookup"><span data-stu-id="9a871-275">The <xref:System.Type.DeclaringType%2A> and <xref:System.Type.DeclaringMethod%2A> properties identify the generic type definition or generic method definition in which the generic type parameter was originally defined:</span></span>  
  
-   <span data-ttu-id="9a871-276">如果<xref:System.Type.DeclaringMethod%2A>屬性會傳回<xref:System.Reflection.MethodInfo>，、 該<xref:System.Reflection.MethodInfo>代表泛型方法定義，以及目前<xref:System.Type>物件都代表該泛型方法定義的型別參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-276">If the <xref:System.Type.DeclaringMethod%2A> property returns a <xref:System.Reflection.MethodInfo>, that <xref:System.Reflection.MethodInfo> represents a generic method definition, and the current <xref:System.Type> object represents a type parameter of that generic method definition.</span></span>  
  
-   <span data-ttu-id="9a871-277">如果<xref:System.Type.DeclaringMethod%2A>屬性會傳回`null`，則<xref:System.Type.DeclaringType%2A>屬性一律會傳回<xref:System.Type>物件，代表泛型類型定義和目前<xref:System.Type>物件都代表該泛型類型的型別參數定義。</span><span class="sxs-lookup"><span data-stu-id="9a871-277">If the <xref:System.Type.DeclaringMethod%2A> property returns `null`, then the <xref:System.Type.DeclaringType%2A> property always returns a <xref:System.Type> object representing a generic type definition, and the current <xref:System.Type> object represents a type parameter of that generic type definition.</span></span>  
  
-   <span data-ttu-id="9a871-278">取得<xref:System.Type.DeclaringMethod%2A>型別上的屬性其<xref:System.Type.IsGenericParameter%2A>屬性是`false`就會擲回<xref:System.InvalidOperationException>。</span><span class="sxs-lookup"><span data-stu-id="9a871-278">Getting the <xref:System.Type.DeclaringMethod%2A> property on a type whose <xref:System.Type.IsGenericParameter%2A> property is `false` throws an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="9a871-279"><xref:System.Reflection.MethodBase>傳回的<xref:System.Type.DeclaringMethod%2A>屬性是<xref:System.Reflection.MethodInfo>如果是泛型方法，或<xref:System.Reflection.ConstructorInfo>在泛型建構函式的情況下。</span><span class="sxs-lookup"><span data-stu-id="9a871-279">The <xref:System.Reflection.MethodBase> that is returned by the <xref:System.Type.DeclaringMethod%2A> property is either a <xref:System.Reflection.MethodInfo> in the case of a generic method, or a <xref:System.Reflection.ConstructorInfo> in the case of a generic constructor.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9a871-280">在.NET Framework 2.0 版中，不支援泛型建構函式。</span><span class="sxs-lookup"><span data-stu-id="9a871-280">In the .NET Framework version 2.0, generic constructors are not supported.</span></span>  
  
 <span data-ttu-id="9a871-281">如需泛型反映中所使用之規範的恆成立條件清單，請參閱 <xref:System.Type.IsGenericType%2A> 屬性備註。</span><span class="sxs-lookup"><span data-stu-id="9a871-281">For a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property remarks.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-282">下列程式碼範例會定義泛型方法，將型別引數指派給該方法，並叫用產生的建構泛型方法的類別。</span><span class="sxs-lookup"><span data-stu-id="9a871-282">The following code example defines a class that has a generic method, assigns a type argument to the method, and invokes the resulting constructed generic method.</span></span> <span data-ttu-id="9a871-283">它也會顯示泛型方法定義和建構的方法的相關資訊。</span><span class="sxs-lookup"><span data-stu-id="9a871-283">It also displays information about the generic method definition and the constructed method.</span></span> <span data-ttu-id="9a871-284">當顯示的相關資訊的型別參數的泛型方法定義，在`DisplayGenericMethodInfo`方法，範例程式碼顯示的值<xref:System.Type.DeclaringMethod%2A>方法的泛型類型參數的屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-284">When displaying information about the type parameters of the generic method definition, in the `DisplayGenericMethodInfo` method, the example code shows the value of the <xref:System.Type.DeclaringMethod%2A> property for the method's generic type parameter.</span></span>  
  
 [!code-cpp[MethodInfo.Generics#1](~/samples/snippets/cpp/VS_Snippets_CLR/MethodInfo.Generics/cpp/source.cpp#1)]
 [!code-csharp[MethodInfo.Generics#1](~/samples/snippets/csharp/VS_Snippets_CLR/MethodInfo.Generics/CS/source.cs#1)]
 [!code-vb[MethodInfo.Generics#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodInfo.Generics/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.IsGenericParameter" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/reflection-and-generic-types.md"><span data-ttu-id="9a871-285">反映和泛用類型</span><span class="sxs-lookup"><span data-stu-id="9a871-285">Reflection and Generic Types</span></span></related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-examine-and-instantiate-generic-types-with-reflection.md"><span data-ttu-id="9a871-286">如何：使用反映檢視和執行個體化泛型類型</span><span class="sxs-lookup"><span data-stu-id="9a871-286">How to: Examine and Instantiate Generic Types with Reflection</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="DeclaringType">
      <MemberSignature Language="C#" Value="public override Type DeclaringType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type DeclaringType" />
      <MemberSignature Language="DocId" Value="P:System.Type.DeclaringType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property DeclaringType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ DeclaringType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DeclaringType : Type" Usage="System.Type.DeclaringType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.DeclaringType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a871-287">取得宣告目前巢狀類型或泛型型別參數的類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-287">Gets the type that declares the current nested type or generic type parameter.</span></span></summary>
        <value><span data-ttu-id="9a871-288">若目前的類型是巢狀類型，即為表示封入類型的 <see cref="T:System.Type" /> 物件，若目前的類型是泛型類型的類型參數，則為泛型類型定義，而若目前的類型是泛型方法的類型參數，則為宣告泛型方法的類型，若以上皆否，便為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-288">A <see cref="T:System.Type" /> object representing the enclosing type, if the current type is a nested type; or the generic type definition, if the current type is a type parameter of a generic type; or the type that declares the generic method, if the current type is a type parameter of a generic method; otherwise, <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-289">如果目前<xref:System.Type>物件表示泛型型別的型別參數，則這個屬性會傳回泛型型別定義。</span><span class="sxs-lookup"><span data-stu-id="9a871-289">If the current <xref:System.Type> object represents a type parameter of a generic type, this property returns the generic type definition.</span></span>  
  
 <span data-ttu-id="9a871-290">如果目前<xref:System.Type>物件代表泛型方法的類型參數，這個屬性會傳回包含泛型方法定義的型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-290">If the current <xref:System.Type> object represents a type parameter of a generic method, this property returns the type that contains the generic method definition.</span></span> <span data-ttu-id="9a871-291">如果類型是泛型，則會傳回泛型型別定義。</span><span class="sxs-lookup"><span data-stu-id="9a871-291">If the type is generic, the generic type definition is returned.</span></span> <span data-ttu-id="9a871-292">也就是說，下列程式碼會傳回的泛型類型定義<xref:System.Collections.Generic.List%601>泛型類別，其中包含<xref:System.Collections.Generic.List%601.ConvertAll%2A>泛型方法：</span><span class="sxs-lookup"><span data-stu-id="9a871-292">That is, the following code returns the generic type definition of the <xref:System.Collections.Generic.List%601> generic class, which contains the <xref:System.Collections.Generic.List%601.ConvertAll%2A> generic method:</span></span>  
  
 [!code-cpp[System.Type.DeclaringType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.type.declaringtype/cpp/remarks.cpp#1)]
 [!code-csharp[System.Type.DeclaringType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.declaringtype/cs/remarks.cs#1)]
 [!code-vb[System.Type.DeclaringType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.declaringtype/vb/remarks.vb#1)]  
  
 <span data-ttu-id="9a871-293">如果目前<xref:System.Type>表示泛型類型或泛型方法定義中的類型參數<xref:System.Type.DeclaringType%2A>和<xref:System.Type.DeclaringMethod%2A>屬性可識別其中泛型型別參數的泛型型別定義或泛型方法定義原本定義：</span><span class="sxs-lookup"><span data-stu-id="9a871-293">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, the <xref:System.Type.DeclaringType%2A> and <xref:System.Type.DeclaringMethod%2A> properties identify the generic type definition or generic method definition where the generic type parameter was originally defined:</span></span>  
  
-   <span data-ttu-id="9a871-294">如果<xref:System.Type.DeclaringMethod%2A>屬性會傳回<xref:System.Reflection.MethodInfo>，、 該<xref:System.Reflection.MethodInfo>代表泛型方法定義，以及目前<xref:System.Type>物件都代表該泛型方法定義的型別參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-294">If the <xref:System.Type.DeclaringMethod%2A> property returns a <xref:System.Reflection.MethodInfo>, that <xref:System.Reflection.MethodInfo> represents a generic method definition, and the current <xref:System.Type> object represents a type parameter of that generic method definition.</span></span>  
  
-   <span data-ttu-id="9a871-295">如果<xref:System.Type.DeclaringMethod%2A>屬性會傳回`null`，則<xref:System.Type.DeclaringType%2A>屬性一律會傳回<xref:System.Type>物件，代表泛型類型定義和目前<xref:System.Type>物件都代表該泛型類型的型別參數定義。</span><span class="sxs-lookup"><span data-stu-id="9a871-295">If the <xref:System.Type.DeclaringMethod%2A> property returns `null`, then the <xref:System.Type.DeclaringType%2A> property always returns a <xref:System.Type> object representing a generic type definition, and the current <xref:System.Type> object represents a type parameter of that generic type definition.</span></span>  
  
-   <span data-ttu-id="9a871-296">取得<xref:System.Type.DeclaringType%2A>型別上的屬性其<xref:System.Type.IsGenericParameter%2A>屬性是`false`就會擲回<xref:System.InvalidOperationException>。</span><span class="sxs-lookup"><span data-stu-id="9a871-296">Getting the <xref:System.Type.DeclaringType%2A> property on a type whose <xref:System.Type.IsGenericParameter%2A> property is `false` throws an <xref:System.InvalidOperationException>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-297">此範例中會顯示在衍生類別中方法的宣告型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-297">This example displays the declaring type of a method in a derived class.</span></span>  
  
 [!code-cpp[Classic Type.DeclaringType Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.DeclaringType Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Type.DeclaringType Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.DeclaringType Example/CS/source.cs#1)]
 [!code-vb[Classic Type.DeclaringType Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.DeclaringType Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MemberInfo" />
        <altmember cref="P:System.Type.ReflectedType" />
      </Docs>
    </Member>
    <Member MemberName="DefaultBinder">
      <MemberSignature Language="C#" Value="public static System.Reflection.Binder DefaultBinder { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Reflection.Binder DefaultBinder" />
      <MemberSignature Language="DocId" Value="P:System.Type.DefaultBinder" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DefaultBinder As Binder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Reflection::Binder ^ DefaultBinder { System::Reflection::Binder ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultBinder : System.Reflection.Binder" Usage="System.Type.DefaultBinder" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Binder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a871-298">取得預設繫結器 (Binder) 的參考，它會實作內部規則來選取由 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> 呼叫的適當成員。</span><span class="sxs-lookup"><span data-stu-id="9a871-298">Gets a reference to the default binder, which implements internal rules for selecting the appropriate members to be called by <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span></summary>
        <value><span data-ttu-id="9a871-299">系統使用的預設繫結器之參考。</span><span class="sxs-lookup"><span data-stu-id="9a871-299">A reference to the default binder used by the system.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-300">預設繫結器提供與 common language runtime 是適用於所有最特殊的情況下除外。</span><span class="sxs-lookup"><span data-stu-id="9a871-300">The default binder provided with the common language runtime is applicable in all but the most specialized circumstances.</span></span> <span data-ttu-id="9a871-301">如果您需要不同於提供的預設繫結器，如下所示規則定義的繫結器型別衍生自<xref:System.Reflection.Binder>類別，並將該類型使用的執行個體傳遞`binder`參數的其中一個<xref:System.Type.InvokeMember%2A>多載。</span><span class="sxs-lookup"><span data-stu-id="9a871-301">If you need a binder that follows rules that differ from those of the supplied default binder, define a type derived from the <xref:System.Reflection.Binder> class and pass an instance of that type using the `binder` parameter of one of the <xref:System.Type.InvokeMember%2A> overloads.</span></span>  
  
 <span data-ttu-id="9a871-302">反映模型一般類型系統的存取範圍規則。</span><span class="sxs-lookup"><span data-stu-id="9a871-302">Reflection models the accessibility rules of the common type system.</span></span> <span data-ttu-id="9a871-303">比方說，如果呼叫端在相同的組件中，呼叫端不會不需要特殊權限的內部成員。</span><span class="sxs-lookup"><span data-stu-id="9a871-303">For example, if the caller is in the same assembly, the caller does not need special permissions for internal members.</span></span> <span data-ttu-id="9a871-304">否則，呼叫端需要<xref:System.Security.Permissions.ReflectionPermission>。</span><span class="sxs-lookup"><span data-stu-id="9a871-304">Otherwise, the caller needs <xref:System.Security.Permissions.ReflectionPermission>.</span></span> <span data-ttu-id="9a871-305">這是一致的受保護的成員查閱、 私用等等。</span><span class="sxs-lookup"><span data-stu-id="9a871-305">This is consistent with lookup of members that are protected, private, and so on.</span></span>  
  
 <span data-ttu-id="9a871-306">一般原則是<xref:System.Reflection.Binder.ChangeType%2A>擴展轉換，不會遺失資料只應該執行。</span><span class="sxs-lookup"><span data-stu-id="9a871-306">The general principle is that <xref:System.Reflection.Binder.ChangeType%2A> should perform only widening conversions, which never lose data.</span></span> <span data-ttu-id="9a871-307">擴展轉換的範例轉換為 64 位元帶正負號的整數值的 32 位元帶正負號的整數的值。</span><span class="sxs-lookup"><span data-stu-id="9a871-307">An example of a widening conversion is converting a value that is a 32-bit signed integer to a value that is a 64-bit signed integer.</span></span> <span data-ttu-id="9a871-308">這被區別縮小轉換，可能會遺失資料。</span><span class="sxs-lookup"><span data-stu-id="9a871-308">This is distinguished from a narrowing conversion, which may lose data.</span></span> <span data-ttu-id="9a871-309">縮小轉換的範例 32 位元帶正負號的整數轉換為 64 位元帶正負號的整數。</span><span class="sxs-lookup"><span data-stu-id="9a871-309">An example of a narrowing conversion is converting a 64-bit signed integer to a 32-bit signed integer.</span></span>  
  
 <span data-ttu-id="9a871-310">下表列出預設繫結器所支援的轉換。</span><span class="sxs-lookup"><span data-stu-id="9a871-310">The following table lists the conversions supported by the default binder.</span></span>  
  
|<span data-ttu-id="9a871-311">來源類型</span><span class="sxs-lookup"><span data-stu-id="9a871-311">Source Type</span></span>|<span data-ttu-id="9a871-312">目標類型</span><span class="sxs-lookup"><span data-stu-id="9a871-312">Target Type</span></span>|  
|-----------------|-----------------|  
|<span data-ttu-id="9a871-313">任何型別</span><span class="sxs-lookup"><span data-stu-id="9a871-313">Any type</span></span>|<span data-ttu-id="9a871-314">基底類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-314">Its base type.</span></span>|  
|<span data-ttu-id="9a871-315">任何型別</span><span class="sxs-lookup"><span data-stu-id="9a871-315">Any type</span></span>|<span data-ttu-id="9a871-316">它所實作的介面。</span><span class="sxs-lookup"><span data-stu-id="9a871-316">The interface it implements.</span></span>|  
|<span data-ttu-id="9a871-317">Char</span><span class="sxs-lookup"><span data-stu-id="9a871-317">Char</span></span>|<span data-ttu-id="9a871-318">Unt16、 UInt32、 Int32、 UInt64、 Int64、 Single、 Double</span><span class="sxs-lookup"><span data-stu-id="9a871-318">Unt16, UInt32, Int32, UInt64, Int64, Single, Double</span></span>|  
|<span data-ttu-id="9a871-319">Byte</span><span class="sxs-lookup"><span data-stu-id="9a871-319">Byte</span></span>|<span data-ttu-id="9a871-320">Char、 Unt16、 Int16、 UInt32、 Int32、 UInt64、 Int64、 Single、 Double</span><span class="sxs-lookup"><span data-stu-id="9a871-320">Char, Unt16, Int16, UInt32, Int32, UInt64, Int64, Single, Double</span></span>|  
|<span data-ttu-id="9a871-321">SByte</span><span class="sxs-lookup"><span data-stu-id="9a871-321">SByte</span></span>|<span data-ttu-id="9a871-322">Int16、Int32、Int64、Single、Double</span><span class="sxs-lookup"><span data-stu-id="9a871-322">Int16, Int32, Int64, Single, Double</span></span>|  
|<span data-ttu-id="9a871-323">UInt16</span><span class="sxs-lookup"><span data-stu-id="9a871-323">UInt16</span></span>|<span data-ttu-id="9a871-324">UInt32、Int32、UInt64、Int64、Single、Double</span><span class="sxs-lookup"><span data-stu-id="9a871-324">UInt32, Int32, UInt64, Int64, Single, Double</span></span>|  
|<span data-ttu-id="9a871-325">Int16</span><span class="sxs-lookup"><span data-stu-id="9a871-325">Int16</span></span>|<span data-ttu-id="9a871-326">Int32、Int64、Single、Double</span><span class="sxs-lookup"><span data-stu-id="9a871-326">Int32, Int64, Single, Double</span></span>|  
|<span data-ttu-id="9a871-327">UInt32</span><span class="sxs-lookup"><span data-stu-id="9a871-327">UInt32</span></span>|<span data-ttu-id="9a871-328">UInt64、Int64、Single、Double</span><span class="sxs-lookup"><span data-stu-id="9a871-328">UInt64, Int64, Single, Double</span></span>|  
|<span data-ttu-id="9a871-329">Int32</span><span class="sxs-lookup"><span data-stu-id="9a871-329">Int32</span></span>|<span data-ttu-id="9a871-330">Int64、Single、Double</span><span class="sxs-lookup"><span data-stu-id="9a871-330">Int64, Single, Double</span></span>|  
|<span data-ttu-id="9a871-331">UInt64</span><span class="sxs-lookup"><span data-stu-id="9a871-331">UInt64</span></span>|<span data-ttu-id="9a871-332">Single、Double</span><span class="sxs-lookup"><span data-stu-id="9a871-332">Single, Double</span></span>|  
|<span data-ttu-id="9a871-333">Int64</span><span class="sxs-lookup"><span data-stu-id="9a871-333">Int64</span></span>|<span data-ttu-id="9a871-334">Single、Double</span><span class="sxs-lookup"><span data-stu-id="9a871-334">Single, Double</span></span>|  
|<span data-ttu-id="9a871-335">Single</span><span class="sxs-lookup"><span data-stu-id="9a871-335">Single</span></span>|<span data-ttu-id="9a871-336">Double</span><span class="sxs-lookup"><span data-stu-id="9a871-336">Double</span></span>|  
|<span data-ttu-id="9a871-337">非參考</span><span class="sxs-lookup"><span data-stu-id="9a871-337">Non-reference</span></span>|<span data-ttu-id="9a871-338">參考。</span><span class="sxs-lookup"><span data-stu-id="9a871-338">By-reference.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="9a871-339">下列範例會取得預設繫結器，從`DefaultBinder`屬性，並叫用 MyClass 的成員，藉由傳遞`DefaultBinder`做為參數的值<xref:System.Type.InvokeMember%2A>。</span><span class="sxs-lookup"><span data-stu-id="9a871-339">The following example gets the default binder from the `DefaultBinder` property, and invokes a member of MyClass by passing the `DefaultBinder` value as a parameter to <xref:System.Type.InvokeMember%2A>.</span></span>  
  
 [!code-cpp[Type_DefaultBinder#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_DefaultBinder/CPP/type_defaultbinder.cpp#1)]
 [!code-csharp[Type_DefaultBinder#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_DefaultBinder/CS/type_defaultbinder.cs#1)]
 [!code-vb[Type_DefaultBinder#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_DefaultBinder/VB/type_defaultbinder.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.Binder" />
      </Docs>
    </Member>
    <Member MemberName="Delimiter">
      <MemberSignature Language="C#" Value="public static readonly char Delimiter;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly char Delimiter" />
      <MemberSignature Language="DocId" Value="F:System.Type.Delimiter" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Delimiter As Char " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly char Delimiter;" />
      <MemberSignature Language="F#" Value=" staticval mutable Delimiter : char" Usage="System.Type.Delimiter" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a871-340">分隔 <see cref="T:System.Type" /> 的命名空間中的名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-340">Separates names in the namespace of the <see cref="T:System.Type" />.</span></span> <span data-ttu-id="9a871-341">此欄位為唯讀。</span><span class="sxs-lookup"><span data-stu-id="9a871-341">This field is read-only.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EmptyTypes">
      <MemberSignature Language="C#" Value="public static readonly Type[] EmptyTypes;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Type[] EmptyTypes" />
      <MemberSignature Language="DocId" Value="F:System.Type.EmptyTypes" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly EmptyTypes As Type() " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly cli::array &lt;Type ^&gt; ^ EmptyTypes;" />
      <MemberSignature Language="F#" Value=" staticval mutable EmptyTypes : Type[]" Usage="System.Type.EmptyTypes" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a871-342">表示 <see cref="T:System.Type" /> 類型的空陣列。</span><span class="sxs-lookup"><span data-stu-id="9a871-342">Represents an empty array of type <see cref="T:System.Type" />.</span></span> <span data-ttu-id="9a871-343">此欄位為唯讀。</span><span class="sxs-lookup"><span data-stu-id="9a871-343">This field is read-only.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="9a871-344">下列程式碼範例所示`EmptyTypes`欄位中的其中一個使用`GetConstructor`方法，以取得不採用任何參數的建構函式。</span><span class="sxs-lookup"><span data-stu-id="9a871-344">The following code example shows the `EmptyTypes` field used in one of the `GetConstructor` methods to get a constructor that takes no parameters.</span></span>  
  
 [!code-cpp[Classic Type.EmptyTypes Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.EmptyTypes Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Type.EmptyTypes Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.EmptyTypes Example/CS/source.cs#1)]
 [!code-vb[Classic Type.EmptyTypes Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.EmptyTypes Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9a871-345">判斷目前 <see cref="T:System.Type" /> 的基礎系統類型，是否與指定的 <see cref="T:System.Object" /> 或 <see cref="T:System.Type" /> 的基礎系統類型相同。</span><span class="sxs-lookup"><span data-stu-id="9a871-345">Determines if the underlying system type of the current <see cref="T:System.Type" /> is the same as the underlying system type of the specified <see cref="T:System.Object" /> or <see cref="T:System.Type" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (o As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ o);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="type.Equals o" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.Equals(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o"><span data-ttu-id="9a871-346">其基礎系統類型將與目前 <see cref="T:System.Type" /> 的基礎系統類型比較的物件。</span><span class="sxs-lookup"><span data-stu-id="9a871-346">The object whose underlying system type is to be compared with the underlying system type of the current <see cref="T:System.Type" />.</span></span> <span data-ttu-id="9a871-347">為使比較成功，<paramref name="o" /> 必須可以轉型或轉換為 <see cref="T:System.Type" /> 類型的物件。</span><span class="sxs-lookup"><span data-stu-id="9a871-347">For the comparison to succeed, <paramref name="o" /> must be able to be cast or converted to an object of type   <see cref="T:System.Type" />.</span></span></param>
        <summary><span data-ttu-id="9a871-348">判斷目前 <see cref="T:System.Type" /> 物件的基礎系統類型，是否與指定的 <see cref="T:System.Object" /> 的基礎系統類型相同。</span><span class="sxs-lookup"><span data-stu-id="9a871-348">Determines if the underlying system type of the current <see cref="T:System.Type" /> object is the same as the underlying system type of the specified <see cref="T:System.Object" />.</span></span></summary>
        <returns><span data-ttu-id="9a871-349">如果 <see langword="true" /> 的基礎系統類型與目前 <paramref name="o" /> 的基礎系統類型相同，則為 <see cref="T:System.Type" />否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-349"><see langword="true" /> if the underlying system type of <paramref name="o" /> is the same as the underlying system type of the current <see cref="T:System.Type" />; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="9a871-350">下列條件成立時，此方法也會傳回 <see langword="false" />：</span><span class="sxs-lookup"><span data-stu-id="9a871-350">This method also returns <see langword="false" /> if: .</span></span>  
  <span data-ttu-id="9a871-351">
-   <paramref name="o" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-351">
-   <paramref name="o" /> is <see langword="null" />.</span></span>  
  <span data-ttu-id="9a871-352">
-   <paramref name="o" /> 無法轉換為 <see cref="T:System.Type" /> 物件。</span><span class="sxs-lookup"><span data-stu-id="9a871-352">
-   <paramref name="o" /> cannot be cast or converted to a <see cref="T:System.Type" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-353">這個方法會覆寫 <xref:System.Object.Equals%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="9a871-353">This method overrides <xref:System.Object.Equals%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="9a871-354">它會轉換`o`物件的型別<xref:System.Type>，並呼叫<xref:System.Type.Equals%28System.Type%29?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-354">It casts `o` to an object of type <xref:System.Type> and calls the <xref:System.Type.Equals%28System.Type%29?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-355">下列範例會使用<xref:System.Type.Equals%28System.Object%29>來比較各種<xref:System.Type>物件執行個體，使用各種<xref:System.Object>執行個體。</span><span class="sxs-lookup"><span data-stu-id="9a871-355">The following example uses <xref:System.Type.Equals%28System.Object%29> to compare various <xref:System.Type> object instances with various <xref:System.Object> instances.</span></span>  
  
 [!code-csharp[System.Type.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Type.Equals/cs/EqualsEx1.cs#1)]
 [!code-vb[System.Type.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Type.Equals/vb/EqualsEx1.vb#1)]  
  
 <span data-ttu-id="9a871-356">特別值得一提的相關範例，是兩件事：</span><span class="sxs-lookup"><span data-stu-id="9a871-356">Two things are particularly worth noting about the example:</span></span>  
  
-   <span data-ttu-id="9a871-357">比較<xref:System.Type>物件，表示整數<xref:System.Reflection.TypeInfo>物件，表示傳回的整數`true`因為<xref:System.Reflection.TypeInfo>衍生自<xref:System.Type>。</span><span class="sxs-lookup"><span data-stu-id="9a871-357">The comparison of a <xref:System.Type> object that represents an integer with a <xref:System.Reflection.TypeInfo> object that represents an integer return `true` because <xref:System.Reflection.TypeInfo> is derived from <xref:System.Type>.</span></span>  
  
-   <span data-ttu-id="9a871-358">比較<xref:System.Type>物件，表示<xref:System.Collections.Generic.IList%601>物件 （開放式的泛型型別）`List(Of String)`物件 （封閉式泛型型別） 傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="9a871-358">The comparison of a  <xref:System.Type> object that represents a <xref:System.Collections.Generic.IList%601> object (an open generic type) with a `List(Of String)` object (a closed generic type) returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.UnderlyingSystemType" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public virtual bool Equals (Type o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(class System.Type o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.Equals(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Equals (o As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(Type ^ o);" />
      <MemberSignature Language="F#" Value="override this.Equals : Type -&gt; bool" Usage="type.Equals o" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.Equals(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="o"><span data-ttu-id="9a871-359">其基礎系統類型將與目前 <see cref="T:System.Type" /> 的基礎系統類型比較的物件。</span><span class="sxs-lookup"><span data-stu-id="9a871-359">The object whose underlying system type is to be compared with the underlying system type of the current <see cref="T:System.Type" />.</span></span></param>
        <summary><span data-ttu-id="9a871-360">判斷目前 <see cref="T:System.Type" /> 的基礎系統類型，是否與指定的 <see cref="T:System.Type" /> 之基礎系統類型相同。</span><span class="sxs-lookup"><span data-stu-id="9a871-360">Determines if the underlying system type of the current <see cref="T:System.Type" /> is the same as the underlying system type of the specified <see cref="T:System.Type" />.</span></span></summary>
        <returns><span data-ttu-id="9a871-361">如果 <see langword="true" /> 的基礎系統類型與目前 <paramref name="o" /> 的基礎系統類型相同，則為 <see cref="T:System.Type" />否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-361"><see langword="true" /> if the underlying system type of <paramref name="o" /> is the same as the underlying system type of the current <see cref="T:System.Type" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="9a871-362">下列範例會使用`Equals`來比較兩個型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-362">The following example uses `Equals` to compare two types.</span></span>  
  
 [!code-csharp[Classic Type.Equals1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.Equals1 Example/CS/source.cs#1)]
 [!code-vb[Classic Type.Equals1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.Equals1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.UnderlyingSystemType" />
      </Docs>
    </Member>
    <Member MemberName="FilterAttribute">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.MemberFilter FilterAttribute;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Reflection.MemberFilter FilterAttribute" />
      <MemberSignature Language="DocId" Value="F:System.Type.FilterAttribute" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FilterAttribute As MemberFilter " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::MemberFilter ^ FilterAttribute;" />
      <MemberSignature Language="F#" Value=" staticval mutable FilterAttribute : System.Reflection.MemberFilter" Usage="System.Type.FilterAttribute" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberFilter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a871-363">表示用在屬性 (Attribute) 上的成員篩選條件。</span><span class="sxs-lookup"><span data-stu-id="9a871-363">Represents the member filter used on attributes.</span></span> <span data-ttu-id="9a871-364">此欄位為唯讀。</span><span class="sxs-lookup"><span data-stu-id="9a871-364">This field is read-only.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-365">此欄位保留所使用的委派的參考<xref:System.Type.FindMembers%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-365">This field holds a reference to the delegate used by the <xref:System.Type.FindMembers%2A> method.</span></span> <span data-ttu-id="9a871-366">這個委派所封裝方法會採用兩個參數： 第一個是<xref:System.Reflection.MemberInfo>物件的第二個則`Object`。</span><span class="sxs-lookup"><span data-stu-id="9a871-366">The method encapsulated by this delegate takes two parameters: the first is a <xref:System.Reflection.MemberInfo> object and the second is an `Object`.</span></span> <span data-ttu-id="9a871-367">這個方法會判斷是否`MemberInfo`物件名稱符合所指定的準則`Object`。</span><span class="sxs-lookup"><span data-stu-id="9a871-367">The method determines whether the `MemberInfo` object matches the criteria specified by the `Object`.</span></span> <span data-ttu-id="9a871-368">`Object`可能會指派任何一種類別欄位的值<xref:System.Reflection.FieldAttributes>， <xref:System.Reflection.MethodAttributes>，或<xref:System.Reflection.MethodImplAttributes>。</span><span class="sxs-lookup"><span data-stu-id="9a871-368">The `Object` may be assigned the value of any one of the fields on the classes <xref:System.Reflection.FieldAttributes>, <xref:System.Reflection.MethodAttributes>, or <xref:System.Reflection.MethodImplAttributes>.</span></span>  
  
 <span data-ttu-id="9a871-369">例如，`Object`可以從欄位的值指派給`FieldAttributes`例如 Public。</span><span class="sxs-lookup"><span data-stu-id="9a871-369">For example, the `Object` can be assigned the value of a field from `FieldAttributes` such as Public.</span></span> <span data-ttu-id="9a871-370">在此情況下，當`FilterAttribute`叫用委派時，它會傳回`true`所表示的方法時，才`MemberInfo`物件以公用欄位屬性裝飾中繼資料中。</span><span class="sxs-lookup"><span data-stu-id="9a871-370">In that case, when the `FilterAttribute` delegate is invoked, it will return `true` only if the method represented by the `MemberInfo` object is decorated with the public field attribute in metadata.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-371">下列範例會取得`FilterAttribute`委派，將它傳遞做為參數<xref:System.Type.FindMembers%2A>方法，並顯示指定的成員和其屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-371">The following example gets the `FilterAttribute` delegate, passes it as a parameter to the <xref:System.Type.FindMembers%2A> method, and displays the specified members and their attributes.</span></span>  
  
 [!code-cpp[Type_FilterAttribute#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_FilterAttribute/CPP/type_filterattribute.cpp#1)]
 [!code-csharp[Type_FilterAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_FilterAttribute/CS/type_filterattribute.cs#1)]
 [!code-vb[Type_FilterAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_FilterAttribute/VB/type_filterattribute.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
        <altmember cref="T:System.Reflection.MemberFilter" />
      </Docs>
    </Member>
    <Member MemberName="FilterName">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.MemberFilter FilterName;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Reflection.MemberFilter FilterName" />
      <MemberSignature Language="DocId" Value="F:System.Type.FilterName" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FilterName As MemberFilter " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::MemberFilter ^ FilterName;" />
      <MemberSignature Language="F#" Value=" staticval mutable FilterName : System.Reflection.MemberFilter" Usage="System.Type.FilterName" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberFilter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a871-372">表示用於名稱上的有區分大小寫的成員篩選條件。</span><span class="sxs-lookup"><span data-stu-id="9a871-372">Represents the case-sensitive member filter used on names.</span></span> <span data-ttu-id="9a871-373">此欄位為唯讀。</span><span class="sxs-lookup"><span data-stu-id="9a871-373">This field is read-only.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-374">此欄位保留所使用的委派的參考<xref:System.Type.FindMembers%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-374">This field holds a reference to the delegate used by the <xref:System.Type.FindMembers%2A> method.</span></span> <span data-ttu-id="9a871-375">這個委派所封裝方法會採用兩個參數： 第一個是<xref:System.Reflection.MemberInfo>物件的第二個則`Object`。</span><span class="sxs-lookup"><span data-stu-id="9a871-375">The method encapsulated by this delegate takes two parameters: the first is a <xref:System.Reflection.MemberInfo> object and the second is an `Object`.</span></span> <span data-ttu-id="9a871-376">這個方法會判斷是否`MemberInfo`物件名稱符合所指定的準則`Object`。</span><span class="sxs-lookup"><span data-stu-id="9a871-376">The method determines whether the `MemberInfo` object matches the criteria specified by the `Object`.</span></span> <span data-ttu-id="9a871-377">`Object`指派字串值，其中可能包含尾端"\*"萬用字元。</span><span class="sxs-lookup"><span data-stu-id="9a871-377">The `Object` is assigned a string value, which may include a trailing "\*" wildcard character.</span></span> <span data-ttu-id="9a871-378">只有萬用字元結束字串支援比對。</span><span class="sxs-lookup"><span data-stu-id="9a871-378">Only wildcard end string matching is supported.</span></span>  
  
 <span data-ttu-id="9a871-379">比方說，`Object`可能會將值指派給 「 位元組 \*"。</span><span class="sxs-lookup"><span data-stu-id="9a871-379">For example, the `Object` may be assigned the value "Byte\*".</span></span> <span data-ttu-id="9a871-380">在此情況下，當`FilterName`叫用委派時，它會傳回`true`所表示的方法時，才`MemberInfo`物件具有名稱開頭為"Byte"。</span><span class="sxs-lookup"><span data-stu-id="9a871-380">In that case, when the `FilterName` delegate is invoked, it will return `true` only if the method represented by the `MemberInfo` object has a name that begins with "Byte".</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-381">下列程式碼範例會取得相關聯的使用者定義的方法`Application`型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-381">The following code example gets the methods associated with the user-defined `Application` type.</span></span>  
  
 [!code-cpp[Classic Type.FilterName Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.FilterName Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Type.FilterName Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.FilterName Example/CS/source.cs#1)]
 [!code-vb[Classic Type.FilterName Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.FilterName Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
        <altmember cref="T:System.Reflection.MemberFilter" />
      </Docs>
    </Member>
    <Member MemberName="FilterNameIgnoreCase">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.MemberFilter FilterNameIgnoreCase;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Reflection.MemberFilter FilterNameIgnoreCase" />
      <MemberSignature Language="DocId" Value="F:System.Type.FilterNameIgnoreCase" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FilterNameIgnoreCase As MemberFilter " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::MemberFilter ^ FilterNameIgnoreCase;" />
      <MemberSignature Language="F#" Value=" staticval mutable FilterNameIgnoreCase : System.Reflection.MemberFilter" Usage="System.Type.FilterNameIgnoreCase" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberFilter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a871-382">表示用在名稱上的不區分大小寫的成員篩選條件。</span><span class="sxs-lookup"><span data-stu-id="9a871-382">Represents the case-insensitive member filter used on names.</span></span> <span data-ttu-id="9a871-383">此欄位為唯讀。</span><span class="sxs-lookup"><span data-stu-id="9a871-383">This field is read-only.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-384">此欄位保留所使用的委派的參考<xref:System.Type.FindMembers%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-384">This field holds a reference to the delegate used by the <xref:System.Type.FindMembers%2A> method.</span></span> <span data-ttu-id="9a871-385">這個委派所封裝方法會採用兩個參數： 第一個是<xref:System.Reflection.MemberInfo>物件的第二個則`Object`。</span><span class="sxs-lookup"><span data-stu-id="9a871-385">The method encapsulated by this delegate takes two parameters: the first is a <xref:System.Reflection.MemberInfo> object and the second is an `Object`.</span></span> <span data-ttu-id="9a871-386">這個方法會判斷是否`MemberInfo`物件名稱符合所指定的準則`Object`。</span><span class="sxs-lookup"><span data-stu-id="9a871-386">The method determines whether the `MemberInfo` object matches the criteria specified by the `Object`.</span></span> <span data-ttu-id="9a871-387">`Object`指派字串值，其中可能包含尾端"\*"萬用字元。</span><span class="sxs-lookup"><span data-stu-id="9a871-387">The `Object` is assigned a string value, which may include a trailing "\*" wildcard character.</span></span> <span data-ttu-id="9a871-388">只有萬用字元結束字串支援比對。</span><span class="sxs-lookup"><span data-stu-id="9a871-388">Only wildcard end string matching is supported.</span></span>  
  
 <span data-ttu-id="9a871-389">比方說，`Object`可能會將值指派給 「 位元組 \*"。</span><span class="sxs-lookup"><span data-stu-id="9a871-389">For example, the `Object` may be assigned the value "ByTe\*".</span></span> <span data-ttu-id="9a871-390">在此情況下，當`FilterName`叫用委派時，它只會傳回，則為 true 所表示的方法如果`MemberInfo`物件具有名稱開頭為"byte"，忽略大小寫。</span><span class="sxs-lookup"><span data-stu-id="9a871-390">In that case, when the `FilterName` delegate is invoked, it will return true only if the method represented by the `MemberInfo` object has a name that begins with "byte", ignoring case.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-391">下列範例會取得`MemberFilter`委派，將它傳遞做為參數<xref:System.Type.FindMembers%2A>方法，並顯示方法和其屬性`String`開頭字母"c"，忽略大小寫的類別。</span><span class="sxs-lookup"><span data-stu-id="9a871-391">The following example gets the `MemberFilter` delegate, passes it as a parameter to the <xref:System.Type.FindMembers%2A> method, and displays the methods and their attributes of the `String` class that begin with the letter "c", disregarding the case.</span></span>  
  
 [!code-cpp[Type_FilterNameIgnoreCase#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_FilterNameIgnoreCase/CPP/type_filternameignorecase.cpp#1)]
 [!code-csharp[Type_FilterNameIgnoreCase#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_FilterNameIgnoreCase/CS/type_filternameignorecase.cs#1)]
 [!code-vb[Type_FilterNameIgnoreCase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_FilterNameIgnoreCase/VB/type_filternameignorecase.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
        <altmember cref="T:System.Reflection.MemberFilter" />
      </Docs>
    </Member>
    <Member MemberName="FindInterfaces">
      <MemberSignature Language="C#" Value="public virtual Type[] FindInterfaces (System.Reflection.TypeFilter filter, object filterCriteria);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] FindInterfaces(class System.Reflection.TypeFilter filter, object filterCriteria) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindInterfaces (filter As TypeFilter, filterCriteria As Object) As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;Type ^&gt; ^ FindInterfaces(System::Reflection::TypeFilter ^ filter, System::Object ^ filterCriteria);" />
      <MemberSignature Language="F#" Value="abstract member FindInterfaces : System.Reflection.TypeFilter * obj -&gt; Type[]&#xA;override this.FindInterfaces : System.Reflection.TypeFilter * obj -&gt; Type[]" Usage="type.FindInterfaces (filter, filterCriteria)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="System.Reflection.TypeFilter" />
        <Parameter Name="filterCriteria" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="filter"><span data-ttu-id="9a871-392">根據 <paramref name="filterCriteria" /> 比較介面的委派。</span><span class="sxs-lookup"><span data-stu-id="9a871-392">The delegate that compares the interfaces against <paramref name="filterCriteria" />.</span></span></param>
        <param name="filterCriteria"><span data-ttu-id="9a871-393">判斷在傳回陣列中是否應包含介面的搜尋準則。</span><span class="sxs-lookup"><span data-stu-id="9a871-393">The search criteria that determines whether an interface should be included in the returned array.</span></span></param>
        <summary><span data-ttu-id="9a871-394">傳回 <see cref="T:System.Type" /> 物件的陣列，表示由目前 <see cref="T:System.Type" /> 所實作或繼承的介面的篩選清單。</span><span class="sxs-lookup"><span data-stu-id="9a871-394">Returns an array of <see cref="T:System.Type" /> objects representing a filtered list of interfaces implemented or inherited by the current <see cref="T:System.Type" />.</span></span></summary>
        <returns><span data-ttu-id="9a871-395"><see cref="T:System.Type" /> 物件的陣列，表示由目前的 <see cref="T:System.Type" /> 所實作或繼承之介面的篩選清單，如果由目前的 <see cref="T:System.Type" /> 所實作或繼承之介面都不符合篩選器，則為 <see cref="T:System.Type" /> 的空陣列。</span><span class="sxs-lookup"><span data-stu-id="9a871-395">An array of <see cref="T:System.Type" /> objects representing a filtered list of the interfaces implemented or inherited by the current <see cref="T:System.Type" />, or an empty array of type <see cref="T:System.Type" /> if no interfaces matching the filter are implemented or inherited by the current <see cref="T:System.Type" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-396">在衍生類別可以覆寫此方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-396">This method can be overridden by a derived class.</span></span>  
  
 <span data-ttu-id="9a871-397"><xref:System.Reflection.Module.FilterTypeName?displayProperty=nameWithType>並<xref:System.Reflection.Module.FilterTypeNameIgnoreCase?displayProperty=nameWithType>所提供的委派<xref:System.Reflection.Module?displayProperty=nameWithType>類別可能也會使用，在的 lieu<xref:System.Reflection.TypeFilter?displayProperty=nameWithType>委派。</span><span class="sxs-lookup"><span data-stu-id="9a871-397">The <xref:System.Reflection.Module.FilterTypeName?displayProperty=nameWithType> and <xref:System.Reflection.Module.FilterTypeNameIgnoreCase?displayProperty=nameWithType> delegates supplied by the <xref:System.Reflection.Module?displayProperty=nameWithType> class may also be used, in lieu of the <xref:System.Reflection.TypeFilter?displayProperty=nameWithType> delegate.</span></span>  
  
 <span data-ttu-id="9a871-398">所有由這個類別所實作的介面會被視為在搜尋期間，是否為基底類別或此類別本身所宣告。</span><span class="sxs-lookup"><span data-stu-id="9a871-398">All of the interfaces implemented by this class are considered during the search, whether declared by a base class or this class itself.</span></span>  
  
 <span data-ttu-id="9a871-399">這個方法會搜尋基底類別階層中，傳回每個相符的介面以及所有比對的每個類別會實作這些介面實作的每個介面 （也就是會傳回相符的介面的遞移封閉）。</span><span class="sxs-lookup"><span data-stu-id="9a871-399">This method searches the base class hierarchy, returning each of the matching interfaces each class implements as well as all the matching interfaces each of those interfaces implements (that is, the transitive closure of the matching interfaces is returned).</span></span> <span data-ttu-id="9a871-400">會不傳回任何重複的介面。</span><span class="sxs-lookup"><span data-stu-id="9a871-400">No duplicate interfaces are returned.</span></span>  
  
 <span data-ttu-id="9a871-401">如果目前<xref:System.Type>表示泛型類型或泛型方法定義中的類型參數<xref:System.Type.FindInterfaces%2A>搜尋所有介面在宣告類型參數條件約束，並透過介面繼承的所有介面在條件約束中宣告。</span><span class="sxs-lookup"><span data-stu-id="9a871-401">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, <xref:System.Type.FindInterfaces%2A> searches all the interfaces declared in the constraints on the type parameter, and all interfaces inherited through the interfaces declared in the constraints.</span></span> <span data-ttu-id="9a871-402">如果目前<xref:System.Type>代表泛型類型的類型引數<xref:System.Type.FindInterfaces%2A>是否符合條件約束，搜尋所有的型別所實作的介面。</span><span class="sxs-lookup"><span data-stu-id="9a871-402">If the current <xref:System.Type> represents a type argument of a generic type, <xref:System.Type.FindInterfaces%2A> searches all the interfaces implemented by the type, whether or not they match constraints.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9a871-403"><xref:System.Type.FindInterfaces%2A> 可傳回泛型介面，即使在不是泛型的型別上。</span><span class="sxs-lookup"><span data-stu-id="9a871-403"><xref:System.Type.FindInterfaces%2A> can return generic interfaces, even on types that are not generic.</span></span> <span data-ttu-id="9a871-404">例如，可能會實作非泛型型別`IEnumerable<int>`(`IEnumerable(Of Integer)` Visual Basic 中)。</span><span class="sxs-lookup"><span data-stu-id="9a871-404">For example, a nongeneric type might implement `IEnumerable<int>` (`IEnumerable(Of Integer)` in Visual Basic).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-405">下列範例會尋找指定的介面實作或繼承之指定的類型，並接著會顯示介面名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-405">The following example finds the specified interface implemented or inherited by the specified type, and then displays the interface names.</span></span>  
  
 [!code-cpp[Type_FindInterfaces#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_FindInterfaces/CPP/type_findinterfaces.cpp#1)]
 [!code-csharp[Type_FindInterfaces#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_FindInterfaces/CS/type_findinterfaces.cs#1)]
 [!code-vb[Type_FindInterfaces#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_FindInterfaces/VB/type_findinterfaces.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9a871-406"><paramref name="filter" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-406"><paramref name="filter" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="9a871-407">靜態初始設定式已叫用並擲回了例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9a871-407">A static initializer is invoked and throws an exception.</span></span></exception>
        <altmember cref="T:System.Reflection.Module" />
        <altmember cref="T:System.Reflection.TypeFilter" />
        <altmember cref="M:System.Type.GetInterface(System.String)" />
        <altmember cref="M:System.Type.GetInterfaces" />
      </Docs>
    </Member>
    <Member MemberName="FindMembers">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MemberInfo[] FindMembers (System.Reflection.MemberTypes memberType, System.Reflection.BindingFlags bindingAttr, System.Reflection.MemberFilter filter, object filterCriteria);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] FindMembers(valuetype System.Reflection.MemberTypes memberType, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.MemberFilter filter, object filterCriteria) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindMembers (memberType As MemberTypes, bindingAttr As BindingFlags, filter As MemberFilter, filterCriteria As Object) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ FindMembers(System::Reflection::MemberTypes memberType, System::Reflection::BindingFlags bindingAttr, System::Reflection::MemberFilter ^ filter, System::Object ^ filterCriteria);" />
      <MemberSignature Language="F#" Value="abstract member FindMembers : System.Reflection.MemberTypes * System.Reflection.BindingFlags * System.Reflection.MemberFilter * obj -&gt; System.Reflection.MemberInfo[]&#xA;override this.FindMembers : System.Reflection.MemberTypes * System.Reflection.BindingFlags * System.Reflection.MemberFilter * obj -&gt; System.Reflection.MemberInfo[]" Usage="type.FindMembers (memberType, bindingAttr, filter, filterCriteria)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberType" Type="System.Reflection.MemberTypes" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="filter" Type="System.Reflection.MemberFilter" />
        <Parameter Name="filterCriteria" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="memberType"><span data-ttu-id="9a871-408">物件，表示要搜尋的成員類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-408">An object that indicates the type of member to search for.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="9a871-409">位元遮罩，由一或多個 <see cref="T:System.Reflection.BindingFlags" /> 組成，而這些旗標會指定執行搜尋的方式。</span><span class="sxs-lookup"><span data-stu-id="9a871-409">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="9a871-410">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-410">-or-</span></span> 
<span data-ttu-id="9a871-411">零，傳回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-411">Zero, to return <see langword="null" />.</span></span></param>
        <param name="filter"><span data-ttu-id="9a871-412">執行比較的委派，如果目前進行檢查的成員符合 <see langword="true" />，則傳回 <paramref name="filterCriteria" />，否則傳回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-412">The delegate that does the comparisons, returning <see langword="true" /> if the member currently being inspected matches the <paramref name="filterCriteria" /> and <see langword="false" /> otherwise.</span></span> <span data-ttu-id="9a871-413">您可以使用這個類別所提供的 <see langword="FilterAttribute" />、<see langword="FilterName" /> 和 <see langword="FilterNameIgnoreCase" /> 委派。</span><span class="sxs-lookup"><span data-stu-id="9a871-413">You can use the <see langword="FilterAttribute" />, <see langword="FilterName" />, and <see langword="FilterNameIgnoreCase" /> delegates supplied by this class.</span></span> <span data-ttu-id="9a871-414">第一個委派使用 <see langword="FieldAttributes" />、<see langword="MethodAttributes" /> 和 <see langword="MethodImplAttributes" /> 的欄位做為搜尋準則，而其他兩個委派則使用 <see langword="String" /> 物件做為搜尋準則。</span><span class="sxs-lookup"><span data-stu-id="9a871-414">The first uses the fields of <see langword="FieldAttributes" />, <see langword="MethodAttributes" />, and <see langword="MethodImplAttributes" /> as search criteria, and the other two delegates use <see langword="String" /> objects as the search criteria.</span></span></param>
        <param name="filterCriteria"><span data-ttu-id="9a871-415">判斷在 <see langword="MemberInfo" /> 物件的陣列中是否傳回成員的搜尋準則。</span><span class="sxs-lookup"><span data-stu-id="9a871-415">The search criteria that determines whether a member is returned in the array of <see langword="MemberInfo" /> objects.</span></span>  
  
<span data-ttu-id="9a871-416"><see langword="FieldAttributes" />、<see langword="MethodAttributes" /> 和 <see langword="MethodImplAttributes" /> 的欄位可以與這個類別所提供的 <see langword="FilterAttribute" /> 委派結合使用。</span><span class="sxs-lookup"><span data-stu-id="9a871-416">The fields of <see langword="FieldAttributes" />, <see langword="MethodAttributes" />, and <see langword="MethodImplAttributes" /> can be used in conjunction with the <see langword="FilterAttribute" /> delegate supplied by this class.</span></span></param>
        <summary><span data-ttu-id="9a871-417">傳回指定成員類型的 <see cref="T:System.Reflection.MemberInfo" /> 物件的篩選陣列。</span><span class="sxs-lookup"><span data-stu-id="9a871-417">Returns a filtered array of <see cref="T:System.Reflection.MemberInfo" /> objects of the specified member type.</span></span></summary>
        <returns><span data-ttu-id="9a871-418">指定之成員類型的 <see cref="T:System.Reflection.MemberInfo" /> 物件篩選陣列。</span><span class="sxs-lookup"><span data-stu-id="9a871-418">A filtered array of <see cref="T:System.Reflection.MemberInfo" /> objects of the specified member type.</span></span>  
  
<span data-ttu-id="9a871-419">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-419">-or-</span></span> 
<span data-ttu-id="9a871-420"><see cref="T:System.Reflection.MemberInfo" /> 類型的空陣列，如果目前 <see cref="T:System.Type" /> 沒有符合篩選條件的 <paramref name="memberType" /> 類型的成員。</span><span class="sxs-lookup"><span data-stu-id="9a871-420">An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if the current <see cref="T:System.Type" /> does not have members of type <paramref name="memberType" /> that match the filter criteria.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-421">在衍生類別可以覆寫此方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-421">This method can be overridden by a derived class.</span></span>  
  
 <span data-ttu-id="9a871-422">成員包含屬性、 方法、 欄位、 事件等等。</span><span class="sxs-lookup"><span data-stu-id="9a871-422">Members include properties, methods, fields, events, and so on.</span></span>  
  
 <span data-ttu-id="9a871-423">下列<xref:System.Reflection.BindingFlags>篩選器旗標可以用來定義要包含在搜尋中的成員：</span><span class="sxs-lookup"><span data-stu-id="9a871-423">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which members to include in the search:</span></span>  
  
-   <span data-ttu-id="9a871-424">您必須指定`BindingFlags.Instance`或`BindingFlags.Static`以取得傳回值。</span><span class="sxs-lookup"><span data-stu-id="9a871-424">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="9a871-425">指定`BindingFlags.Instance`来包含在搜尋中的執行個體成員。</span><span class="sxs-lookup"><span data-stu-id="9a871-425">Specify `BindingFlags.Instance` to include instance members in the search.</span></span>  
  
-   <span data-ttu-id="9a871-426">指定`BindingFlags.Static`要在搜尋中包含靜態成員。</span><span class="sxs-lookup"><span data-stu-id="9a871-426">Specify `BindingFlags.Static` to include static members in the search.</span></span>  
  
-   <span data-ttu-id="9a871-427">指定`BindingFlags.Public`来包含在搜尋中的公用成員。</span><span class="sxs-lookup"><span data-stu-id="9a871-427">Specify `BindingFlags.Public` to include public members in the search.</span></span>  
  
-   <span data-ttu-id="9a871-428">指定`BindingFlags.NonPublic`要在搜尋中包含非公用成員 （也就是私用、 內部和受保護成員）。</span><span class="sxs-lookup"><span data-stu-id="9a871-428">Specify `BindingFlags.NonPublic` to include non-public members (that is, private, internal, and protected members) in the search.</span></span>  
  
 <span data-ttu-id="9a871-429">下列<xref:System.Reflection.BindingFlags>輔助鍵旗標可以用來變更搜尋的運作方式：</span><span class="sxs-lookup"><span data-stu-id="9a871-429">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="9a871-430">`BindingFlags.DeclaredOnly` 若要搜尋只在宣告的成員，才<xref:System.Type>，不只是繼承的成員。</span><span class="sxs-lookup"><span data-stu-id="9a871-430">`BindingFlags.DeclaredOnly` to search only the members declared on the <xref:System.Type>, not members that were simply inherited.</span></span>  
  
 <span data-ttu-id="9a871-431">如需詳細資訊，請參閱 <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="9a871-431">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="9a871-432">有效值<xref:System.Type.MemberType%2A>中所定義<xref:System.Reflection.MemberInfo>。</span><span class="sxs-lookup"><span data-stu-id="9a871-432">Valid values for <xref:System.Type.MemberType%2A> are defined in <xref:System.Reflection.MemberInfo>.</span></span> <span data-ttu-id="9a871-433">如果找不到任何這類成員，則會傳回空陣列。</span><span class="sxs-lookup"><span data-stu-id="9a871-433">If no such members are found, an empty array is returned.</span></span>  
  
 <span data-ttu-id="9a871-434">若要取得使用此方法的類別初始設定式 (.cctor)，您必須指定<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType>在 Visual Basic 中)。</span><span class="sxs-lookup"><span data-stu-id="9a871-434">To get the class initializer (.cctor) using this method, you must specify <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="9a871-435">您也可以取得類別初始設定式使用<xref:System.Type.TypeInitializer%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-435">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
 <span data-ttu-id="9a871-436">如果目前<xref:System.Type>表示泛型類型或泛型方法的類型參數<xref:System.Type.FindMembers%2A>處理任何由類別條件約束和介面條件約束的型別參數宣告的成員。</span><span class="sxs-lookup"><span data-stu-id="9a871-436">If the current <xref:System.Type> represents a type parameter of a generic type or generic method, <xref:System.Type.FindMembers%2A> processes any members declared by the class constraint and the interface constraints of the type parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-437">下列範例會尋找符合指定的搜尋準則，類別中的所有成員，並接著會顯示相符的成員。</span><span class="sxs-lookup"><span data-stu-id="9a871-437">The following example finds all the members in a class that match the specified search criteria, and then displays the matched members.</span></span>  
  
 [!code-cpp[Type_FindMembers#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_FindMembers/CPP/type_findmembers.cpp#1)]
 [!code-csharp[Type_FindMembers#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_FindMembers/CS/type_findmembers.cs#1)]
 [!code-vb[Type_FindMembers#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_FindMembers/VB/type_findmembers.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9a871-438"><paramref name="filter" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-438"><paramref name="filter" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Reflection.MemberInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetMember(System.String)" />
        <altmember cref="M:System.Type.GetMembers" />
        <altmember cref="M:System.Type.GetDefaultMembers" />
      </Docs>
    </Member>
    <Member MemberName="FullName">
      <MemberSignature Language="C#" Value="public abstract string FullName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FullName" />
      <MemberSignature Language="DocId" Value="P:System.Type.FullName" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property FullName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ FullName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FullName : string" Usage="System.Type.FullName" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.FullName</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a871-439">取得類型的完整名稱 (包括其命名空間，但不包括其組件)。</span><span class="sxs-lookup"><span data-stu-id="9a871-439">Gets the fully qualified name of the type, including its namespace but not its assembly.</span></span></summary>
        <value><span data-ttu-id="9a871-440">類型的完整名稱 (包括其命名空間，但不包括其組件)；如果目前執行個體代表泛型類型參數、陣列類型、指標類型、根據類型參數的 <see langword="null" /> 類型，或不是泛型類型定義但包含未解析類型參數的泛型類型，則為 <see langword="byref" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-440">The fully qualified name of the type, including its namespace but not its assembly; or <see langword="null" /> if the current instance represents a generic type parameter, an array type, pointer type, or <see langword="byref" /> type based on a type parameter, or a generic type that is not a generic type definition but contains unresolved type parameters.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-441">例如，完整的名稱的<xref:System.String>型別是`System.String`。</span><span class="sxs-lookup"><span data-stu-id="9a871-441">For example, the fully qualified name of the <xref:System.String> type is `System.String`.</span></span> <span data-ttu-id="9a871-442">這與傳回的組件限定名稱相反<xref:System.Type.AssemblyQualifiedName%2A>屬性，其中包含的完整名稱，再加上完整的組件名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-442">Contrast this with the assembly-qualified name returned by the <xref:System.Type.AssemblyQualifiedName%2A> property, which consists of the full name plus the full assembly name.</span></span>  
  
 <span data-ttu-id="9a871-443">如果目前的型別代表封閉泛型型別，在字串中的類型引數傳回<xref:System.Type.FullName%2A>屬性是其完整的組件名稱限定，即使所有未限定的泛型型別本身的字串表示組件名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-443">If the current type represents a closed generic type, the type arguments in the string returned by the <xref:System.Type.FullName%2A> property are qualified by their full assembly name, even though the string representation of the generic type itself is not qualified by its full assembly name.</span></span> <span data-ttu-id="9a871-444">下列範例說明代表泛型類型定義的類型，而另一個代表封閉泛型類型的 FullName 屬性中的差異。</span><span class="sxs-lookup"><span data-stu-id="9a871-444">The following example illustrates the difference in the FullName property for a type that represents generic type definition and one that represents a closed generic type.</span></span>  
  
 [!code-csharp[System.Type.FullName#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.fullname/cs/fullnameex1.cs#2)]
 [!code-vb[System.Type.FullName#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.fullname/vb/fullnameex1.vb#2)]  
  
 <span data-ttu-id="9a871-445">這個屬性會傳回`null`如果：</span><span class="sxs-lookup"><span data-stu-id="9a871-445">This property returns `null` if:</span></span>  
  
-   <span data-ttu-id="9a871-446">目前<xref:System.Type>物件代表泛型型別的型別參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-446">The current <xref:System.Type> object represents a type parameter of a generic type.</span></span>  
  
     <span data-ttu-id="9a871-447">下列範例會擷取的型別參數<xref:System.Nullable%601>型別，並且嘗試顯示其<xref:System.Type.FullName%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-447">The following example retrieves the type parameter of the <xref:System.Nullable%601> type and attempts to display its <xref:System.Type.FullName%2A> property.</span></span>  
  
     [!code-csharp[System.Type.FullName#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.fullname/cs/Fullname3.cs#3)]
     [!code-vb[System.Type.FullName#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.fullname/vb/Fullname3.vb#3)]  
  
-   <span data-ttu-id="9a871-448">目前<xref:System.Type>物件都代表陣列類型、 指標類型或`byref`為基礎的泛型類型參數的型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-448">The current <xref:System.Type> object represents an array type, a pointer  type, or a `byref` type that is based on a generic type parameter.</span></span>  
  
     <span data-ttu-id="9a871-449">下列範例會定義泛型型別， `Generictype1<T>`，以三個方法： `Display(T[])`，傳遞的型別 T，陣列`HandleT(T)`，傳遞 T 物件和`ChangeValue(ref T)`，這傳址方式傳遞的 T 物件。</span><span class="sxs-lookup"><span data-stu-id="9a871-449">The following example defines a generic type, `Generictype1<T>`, with three methods: `Display(T[])`, which is passed an array of type T; `HandleT(T)`, which is passed a T object; and `ChangeValue(ref T)`, which is passed a T object by reference.</span></span> <span data-ttu-id="9a871-450">因為 C# 和 Visual Basic 不允許我們定義 T 中的指標`HandleT`方法中，我們必須呼叫<xref:System.Type.MakePointerType%2A>方法<xref:System.Type>物件，表示方法的參數類型，若要建立泛型類型的指標。</span><span class="sxs-lookup"><span data-stu-id="9a871-450">Because C# and Visual Basic do not allow us to define T as a pointer in the `HandleT` method, we have to call the <xref:System.Type.MakePointerType%2A> method on the <xref:System.Type> object that represents the method's parameter type to create a pointer to a generic type.</span></span> <span data-ttu-id="9a871-451">範例輸出所顯示的是，所有的三種情況下，在<xref:System.Type.FullName%2A>屬性是`null`。</span><span class="sxs-lookup"><span data-stu-id="9a871-451">The output from the example shows that in all three cases, the <xref:System.Type.FullName%2A> property is `null`.</span></span>  
  
     [!code-csharp[System.Type.FullName#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.fullname/cs/Fullname4.cs#4)]
     [!code-vb[System.Type.FullName#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.fullname/vb/FullName4.vb#4)]  
  
-   <span data-ttu-id="9a871-452">目前的型別包含有尚未被特定類型取代的泛型類型參數 (亦即<xref:System.Type.ContainsGenericParameters%2A>屬性會傳回`true`)，但類型不是泛型類型定義 (也就是<xref:System.Type.IsGenericTypeDefinition%2A>屬性會傳回 `false`</span><span class="sxs-lookup"><span data-stu-id="9a871-452">The current type contains generic type parameters that have not been replaced by specific types (that is, the <xref:System.Type.ContainsGenericParameters%2A> property returns `true`), but the type is not a generic type definition (that is, the <xref:System.Type.IsGenericTypeDefinition%2A> property returns `false`</span></span>  
  
     <span data-ttu-id="9a871-453">在下列範例中，`Derived<T>`繼承自`Base<T>`。</span><span class="sxs-lookup"><span data-stu-id="9a871-453">In the following example, `Derived<T>` inherits from `Base<T>`.</span></span> <span data-ttu-id="9a871-454"><xref:System.Type.BaseType%2A>屬性取得<xref:System.Type>物件，代表基底型別`Derived<T>`，並將其<xref:System.Type.FullName%2A>屬性會傳回`null`。</span><span class="sxs-lookup"><span data-stu-id="9a871-454">The <xref:System.Type.BaseType%2A> property obtains the  <xref:System.Type> object that represents the base type of `Derived<T>`, and its <xref:System.Type.FullName%2A> property returns `null`.</span></span>  
  
     [!code-csharp[System.Type.FullName#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.fullname/cs/Fullname5.cs#5)]
     [!code-vb[System.Type.FullName#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.fullname/vb/FullName5.vb#5)]  
  
     <span data-ttu-id="9a871-455">若要取得<xref:System.Type.FullName%2A>不是`null`，您可以使用<xref:System.Type.GetGenericTypeDefinition%2A>方法以取得泛型型別定義，如範例所示。</span><span class="sxs-lookup"><span data-stu-id="9a871-455">To get a <xref:System.Type.FullName%2A> that is not `null`, you can use the <xref:System.Type.GetGenericTypeDefinition%2A> method to get the generic type definition, as the example illustrates.</span></span>  
  
 <span data-ttu-id="9a871-456">這個屬性是唯讀的。</span><span class="sxs-lookup"><span data-stu-id="9a871-456">This property is read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-457">下列範例會顯示指定之型別的完整名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-457">The following example displays the full name of the specified type.</span></span>  
  
 [!code-cpp[TestFullName#1](~/samples/snippets/cpp/VS_Snippets_CLR/TestFullName/CPP/TestFullName.cpp#1)]
 [!code-csharp[TestFullName#1](~/samples/snippets/csharp/VS_Snippets_CLR/TestFullName/CS/testfullname.cs#1)]
 [!code-vb[TestFullName#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TestFullName/VB/testfullname.vb#1)]  
  
 <span data-ttu-id="9a871-458">下列範例會比較所傳回的字串<xref:System.Type.ToString%2A>方法和`Name`， <xref:System.Type.FullName%2A>，和<xref:System.Type.AssemblyQualifiedName%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-458">The following example compares the strings returned by the <xref:System.Type.ToString%2A> method and the `Name`, <xref:System.Type.FullName%2A>, and <xref:System.Type.AssemblyQualifiedName%2A> properties.</span></span>  
  
 [!code-csharp[System.Type.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.tostring/cs/fullname1.cs#1)]
 [!code-vb[System.Type.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.tostring/vb/fullname1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.Namespace" />
        <altmember cref="P:System.Type.AssemblyQualifiedName" />
        <altmember cref="T:System.Reflection.AssemblyName" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/specifying-fully-qualified-type-names.md"><span data-ttu-id="9a871-459">指定完整的類型名稱</span><span class="sxs-lookup"><span data-stu-id="9a871-459">Specifying Fully Qualified Type Names</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GenericParameterAttributes">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.GenericParameterAttributes GenericParameterAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.GenericParameterAttributes GenericParameterAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Type.GenericParameterAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property GenericParameterAttributes As GenericParameterAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::GenericParameterAttributes GenericParameterAttributes { System::Reflection::GenericParameterAttributes get(); };" />
      <MemberSignature Language="F#" Value="member this.GenericParameterAttributes : System.Reflection.GenericParameterAttributes" Usage="System.Type.GenericParameterAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.GenericParameterAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a871-460">取得一組 <see cref="T:System.Reflection.GenericParameterAttributes" /> 旗標，敘述目前泛型類型參數的共變數與特殊條件約束。</span><span class="sxs-lookup"><span data-stu-id="9a871-460">Gets a combination of <see cref="T:System.Reflection.GenericParameterAttributes" /> flags that describe the covariance and special constraints of the current generic type parameter.</span></span></summary>
        <value><span data-ttu-id="9a871-461"><see cref="T:System.Reflection.GenericParameterAttributes" /> 值的位元組合，描述目前泛型型別參數的共變數和特殊條件約束。</span><span class="sxs-lookup"><span data-stu-id="9a871-461">A bitwise combination of <see cref="T:System.Reflection.GenericParameterAttributes" /> values that describes the covariance and special constraints of the current generic type parameter.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-462">這個屬性的值包含旗標，敘述目前泛型類型參數是否是 covariant 和其他特殊條件約束的旗標。</span><span class="sxs-lookup"><span data-stu-id="9a871-462">The value of this property contains flags that describe whether the current generic type parameter is covariant, and flags that describe any special constraints.</span></span> <span data-ttu-id="9a871-463">使用 <xref:System.Reflection.GenericParameterAttributes.VarianceMask?displayProperty=nameWithType>值加入選取的共變數旗標，並使用<xref:System.Reflection.GenericParameterAttributes.SpecialConstraintMask?displayProperty=nameWithType>選取條件約束旗標的值。</span><span class="sxs-lookup"><span data-stu-id="9a871-463">Use the <xref:System.Reflection.GenericParameterAttributes.VarianceMask?displayProperty=nameWithType> value to select the covariance flags, and use the <xref:System.Reflection.GenericParameterAttributes.SpecialConstraintMask?displayProperty=nameWithType> value to select the constraint flags.</span></span>  
  
 <span data-ttu-id="9a871-464">如需泛型反映中所使用之規範的恆成立條件清單，請參閱 <xref:System.Type.IsGenericType%2A> 屬性備註。</span><span class="sxs-lookup"><span data-stu-id="9a871-464">For a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property remarks.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-465">下列程式碼範例會定義泛型型別`Test`具有兩個具有不同的條件約束的型別參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-465">The following code example defines a generic type `Test` with two type parameters that have different constraints.</span></span> <span data-ttu-id="9a871-466">當程式執行時，條件約束會檢查使用<xref:System.Type.GenericParameterAttributes%2A>屬性和<xref:System.Type.GetGenericParameterConstraints%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-466">When the program executes, the constraints are examined using the <xref:System.Type.GenericParameterAttributes%2A> property and the <xref:System.Type.GetGenericParameterConstraints%2A> method.</span></span>  
  
 [!code-cpp[System.Type.GetGenericParameterConstraints#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.GetGenericParameterConstraints/CPP/source.cpp#1)]
 [!code-csharp[System.Type.GetGenericParameterConstraints#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.GetGenericParameterConstraints/CS/source.cs#1)]
 [!code-vb[System.Type.GetGenericParameterConstraints#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.GetGenericParameterConstraints/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9a871-467">目前的 <see cref="T:System.Type" /> 物件不是泛型型別參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-467">The current <see cref="T:System.Type" /> object is not a generic type parameter.</span></span> <span data-ttu-id="9a871-468">亦即，<see cref="P:System.Type.IsGenericParameter" /> 屬性會傳回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-468">That is, the <see cref="P:System.Type.IsGenericParameter" /> property returns <see langword="false" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="9a871-469">基底類別不支援叫用的方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-469">The invoked method is not supported in the base class.</span></span></exception>
        <altmember cref="M:System.Type.GetGenericParameterConstraints" />
        <altmember cref="P:System.Type.IsGenericParameter" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/reflection-and-generic-types.md"><span data-ttu-id="9a871-470">反映和泛用類型</span><span class="sxs-lookup"><span data-stu-id="9a871-470">Reflection and Generic Types</span></span></related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-examine-and-instantiate-generic-types-with-reflection.md"><span data-ttu-id="9a871-471">如何：使用反映檢視和執行個體化泛型類型</span><span class="sxs-lookup"><span data-stu-id="9a871-471">How to: Examine and Instantiate Generic Types with Reflection</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GenericParameterPosition">
      <MemberSignature Language="C#" Value="public virtual int GenericParameterPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 GenericParameterPosition" />
      <MemberSignature Language="DocId" Value="P:System.Type.GenericParameterPosition" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property GenericParameterPosition As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int GenericParameterPosition { int get(); };" />
      <MemberSignature Language="F#" Value="member this.GenericParameterPosition : int" Usage="System.Type.GenericParameterPosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a871-472">當 <see cref="T:System.Type" /> 物件表示泛型類型或泛型方法的型別參數時，在宣告參數的泛型類型或泛型方法之型別參數清單中，取得型別參數的位置。</span><span class="sxs-lookup"><span data-stu-id="9a871-472">Gets the position of the type parameter in the type parameter list of the generic type or method that declared the parameter, when the <see cref="T:System.Type" /> object represents a type parameter of a generic type or a generic method.</span></span></summary>
        <value><span data-ttu-id="9a871-473">型別參數在宣告參數的泛型類型或方法之型別參數清單中的位置。</span><span class="sxs-lookup"><span data-stu-id="9a871-473">The position of a type parameter in the type parameter list of the generic type or method that defines the parameter.</span></span> <span data-ttu-id="9a871-474">位置編號從 0 開始。</span><span class="sxs-lookup"><span data-stu-id="9a871-474">Position numbers begin at 0.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-475"><xref:System.Type.GenericParameterPosition%2A>屬性會傳回型別參數的位置中的泛型型別定義或泛型方法定義的參數清單的型別參數原本定義。</span><span class="sxs-lookup"><span data-stu-id="9a871-475">The <xref:System.Type.GenericParameterPosition%2A> property returns the position of a type parameter in the parameter list of the generic type definition or generic method definition where the type parameter was originally defined.</span></span> <span data-ttu-id="9a871-476"><xref:System.Type.DeclaringType%2A>和<xref:System.Type.DeclaringMethod%2A>屬性識別的泛型型別或方法定義：</span><span class="sxs-lookup"><span data-stu-id="9a871-476">The <xref:System.Type.DeclaringType%2A> and <xref:System.Type.DeclaringMethod%2A> properties identify the generic type or method definition:</span></span>  
  
-   <span data-ttu-id="9a871-477">如果<xref:System.Type.DeclaringMethod%2A>屬性會傳回<xref:System.Reflection.MethodInfo>，、 該<xref:System.Reflection.MethodInfo>代表泛型方法定義，以及目前<xref:System.Type>物件都代表該泛型方法定義的型別參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-477">If the <xref:System.Type.DeclaringMethod%2A> property returns a <xref:System.Reflection.MethodInfo>, that <xref:System.Reflection.MethodInfo> represents a generic method definition, and the current <xref:System.Type> object represents a type parameter of that generic method definition.</span></span>  
  
-   <span data-ttu-id="9a871-478">如果<xref:System.Type.DeclaringMethod%2A>屬性會傳回`null`，則<xref:System.Type.DeclaringType%2A>屬性一律會傳回<xref:System.Type>物件，代表泛型類型定義和目前<xref:System.Type>物件都代表該泛型類型的型別參數定義。</span><span class="sxs-lookup"><span data-stu-id="9a871-478">If the <xref:System.Type.DeclaringMethod%2A> property returns `null`, then the <xref:System.Type.DeclaringType%2A> property always returns a <xref:System.Type> object representing a generic type definition, and the current <xref:System.Type> object represents a type parameter of that generic type definition.</span></span>  
  
 <span data-ttu-id="9a871-479">若要提供正確的內容值的<xref:System.Type.GenericParameterPosition%2A>屬性，就必須找出的泛型類型或方法所屬的型別參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-479">To provide the correct context for the value of the <xref:System.Type.GenericParameterPosition%2A> property, it is necessary to identify the generic type or method a type parameter belongs to.</span></span> <span data-ttu-id="9a871-480">例如，請考慮泛型方法的傳回值`GetSomething`下列程式碼：</span><span class="sxs-lookup"><span data-stu-id="9a871-480">For example, consider the return value of the generic method `GetSomething` in the following code:</span></span>  
  
 [!code-cpp[System.Type.GenericParameterPosition#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.type.genericparameterposition/cpp/remarks.cpp#1)]
 [!code-csharp[System.Type.GenericParameterPosition#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.genericparameterposition/cs/remarks.cs#1)]
 [!code-vb[System.Type.GenericParameterPosition#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.genericparameterposition/vb/remarks.vb#1)]  
  
 <span data-ttu-id="9a871-481">傳回的型別`GetSomething`取決於提供給類別的型別引數`A`以及`GetSomething`本身。</span><span class="sxs-lookup"><span data-stu-id="9a871-481">The type returned by `GetSomething` depends on the type arguments supplied to class `A` and to `GetSomething` itself.</span></span> <span data-ttu-id="9a871-482">您可以取得<xref:System.Reflection.MethodInfo>針對`GetSomething`，以及您可以從所取得的傳回型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-482">You can obtain a <xref:System.Reflection.MethodInfo> for `GetSomething`, and from that you can obtain the return type.</span></span> <span data-ttu-id="9a871-483">當您檢查型別參數的傳回型別，<xref:System.Type.GenericParameterPosition%2A>兩者會傳回 0。</span><span class="sxs-lookup"><span data-stu-id="9a871-483">When you examine the type parameters of the return type, <xref:System.Type.GenericParameterPosition%2A> returns 0 for both.</span></span> <span data-ttu-id="9a871-484">位置`V`為 0，因為`V`類別的型別參數清單中的第一個型別參數`A`。</span><span class="sxs-lookup"><span data-stu-id="9a871-484">The position of `V` is 0 because `V` is the first type parameter in the type parameter list for class `A`.</span></span> <span data-ttu-id="9a871-485">位置`X`為 0，因為`X`的型別參數清單中的第一個型別參數`GetSomething`。</span><span class="sxs-lookup"><span data-stu-id="9a871-485">The position of `X` is 0 because `X` is the first type parameter in the type parameter list for `GetSomething`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9a871-486">呼叫<xref:System.Type.GenericParameterPosition%2A>屬性會造成例外狀況，如果目前<xref:System.Type>不代表型別參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-486">Calling the <xref:System.Type.GenericParameterPosition%2A> property causes an exception if the current <xref:System.Type> does not represent a type parameter.</span></span> <span data-ttu-id="9a871-487">當您檢查開放式建構類型的類型引數時，使用<xref:System.Type.IsGenericParameter%2A>告訴它們在型別參數，以及這是類型的屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-487">When you examine the type arguments of an open constructed type, use the <xref:System.Type.IsGenericParameter%2A> property to tell which are type parameters and which are types.</span></span> <span data-ttu-id="9a871-488"><xref:System.Type.IsGenericParameter%2A>屬性會傳回`true`型別參數; 您可以接著使用<xref:System.Type.GenericParameterPosition%2A>方法來取得它的位置，並使用<xref:System.Type.DeclaringMethod%2A>和<xref:System.Type.DeclaringType%2A>來判斷泛型方法或類型定義中定義的屬性.</span><span class="sxs-lookup"><span data-stu-id="9a871-488">The <xref:System.Type.IsGenericParameter%2A> property returns `true` for a type parameter; you can then use the <xref:System.Type.GenericParameterPosition%2A> method to obtain its position and use the <xref:System.Type.DeclaringMethod%2A> and <xref:System.Type.DeclaringType%2A> properties to determine the generic method or type definition that defines it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-489">下列範例會定義具有兩個類型參數的泛型類別，並定義第二個泛型類別衍生自第一個類別。</span><span class="sxs-lookup"><span data-stu-id="9a871-489">The following example defines a generic class with two type parameters and defines a second generic class that derives from the first class.</span></span> <span data-ttu-id="9a871-490">在衍生的類別的基底類別具有兩個類型引數： 第一個是<xref:System.Int32>，第二個是衍生型別的型別參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-490">The derived class's base class has two type arguments: the first is <xref:System.Int32>, and the second is a type parameter of the derived type.</span></span> <span data-ttu-id="9a871-491">此範例會顯示這些泛型類別的相關資訊，包括位置報告<xref:System.Type.GenericParameterPosition%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-491">The example displays information about these generic classes, including the positions reported by the <xref:System.Type.GenericParameterPosition%2A> property.</span></span>  
  
 [!code-cpp[System.Type.HasUnboundGenericParameters#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.HasUnboundGenericParameters/CPP/source.cpp#1)]
 [!code-csharp[System.Type.HasUnboundGenericParameters#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.HasUnboundGenericParameters/CS/source.cs#1)]
 [!code-vb[System.Type.HasUnboundGenericParameters#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.HasUnboundGenericParameters/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9a871-492">目前類型不代表型別參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-492">The current type does not represent a type parameter.</span></span> <span data-ttu-id="9a871-493">亦即，<see cref="P:System.Type.IsGenericParameter" /> 會傳回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-493">That is, <see cref="P:System.Type.IsGenericParameter" /> returns <see langword="false" />.</span></span></exception>
        <altmember cref="M:System.Type.MakeGenericType(System.Type[])" />
        <altmember cref="P:System.Type.ContainsGenericParameters" />
        <altmember cref="P:System.Type.IsGenericParameter" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/reflection-and-generic-types.md"><span data-ttu-id="9a871-494">反映和泛用類型</span><span class="sxs-lookup"><span data-stu-id="9a871-494">Reflection and Generic Types</span></span></related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-examine-and-instantiate-generic-types-with-reflection.md"><span data-ttu-id="9a871-495">如何：使用反映檢視和執行個體化泛型類型</span><span class="sxs-lookup"><span data-stu-id="9a871-495">How to: Examine and Instantiate Generic Types with Reflection</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GenericTypeArguments">
      <MemberSignature Language="C#" Value="public virtual Type[] GenericTypeArguments { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type[] GenericTypeArguments" />
      <MemberSignature Language="DocId" Value="P:System.Type.GenericTypeArguments" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property GenericTypeArguments As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property cli::array &lt;Type ^&gt; ^ GenericTypeArguments { cli::array &lt;Type ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.GenericTypeArguments : Type[]" Usage="System.Type.GenericTypeArguments" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a871-496">取得此類型之泛型型別引數的陣列。</span><span class="sxs-lookup"><span data-stu-id="9a871-496">Gets an array of the generic type arguments for this type.</span></span></summary>
        <value><span data-ttu-id="9a871-497">這個類型之泛型型別引數的陣列。</span><span class="sxs-lookup"><span data-stu-id="9a871-497">An array of the generic type arguments for this type.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-498">這個屬性會取得僅泛用型別引數;也就是由目前類型的泛型型別參數尚未指定的類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-498">This property gets only the generic type arguments; that is, the types that have been specified for the generic type parameters of the current type.</span></span> <span data-ttu-id="9a871-499">如果目前的類型是泛型類型定義，則這個屬性會傳回空陣列。</span><span class="sxs-lookup"><span data-stu-id="9a871-499">If the current type is a generic type definition, this property returns an empty array.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9a871-500">如果另一種泛型類型或泛型方法中使用泛型型別，則其泛型型別引數的一些可能的封入方法或類型的泛型型別參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-500">If a generic type is used in a generic method or in another generic type, some of its generic type arguments might be generic type parameters of the enclosing method or type.</span></span>  
  
 <span data-ttu-id="9a871-501">若要取得的類型，代表泛型類型定義的泛型類型參數，請使用<xref:System.Reflection.TypeInfo.GenericTypeParameters%2A?displayProperty=nameWithType>屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-501">To get the generic type parameters of a type that represents a generic type definition, use the <xref:System.Reflection.TypeInfo.GenericTypeParameters%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="9a871-502">若要取得<xref:System.Reflection.TypeInfo>目前的物件<xref:System.Type>物件，請使用<xref:System.Reflection.IntrospectionExtensions.GetTypeInfo%2A?displayProperty=nameWithType>擴充方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-502">To get a <xref:System.Reflection.TypeInfo> object for the current <xref:System.Type> object, use the <xref:System.Reflection.IntrospectionExtensions.GetTypeInfo%2A?displayProperty=nameWithType> extension method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetArrayRank">
      <MemberSignature Language="C#" Value="public virtual int GetArrayRank ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetArrayRank() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetArrayRank" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetArrayRank () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetArrayRank();" />
      <MemberSignature Language="F#" Value="abstract member GetArrayRank : unit -&gt; int&#xA;override this.GetArrayRank : unit -&gt; int" Usage="type.GetArrayRank " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetArrayRank</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9a871-503">取得陣列中的維度數目。</span><span class="sxs-lookup"><span data-stu-id="9a871-503">Gets the number of dimensions in an array.</span></span></summary>
        <returns><span data-ttu-id="9a871-504">包含目前類型中之維度數目的整數。</span><span class="sxs-lookup"><span data-stu-id="9a871-504">An integer that contains the number of dimensions in the current type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="9a871-505">下列範例會顯示在陣列中的維度數目。</span><span class="sxs-lookup"><span data-stu-id="9a871-505">The following example displays the number of dimensions in an array.</span></span>  
  
 [!code-cpp[Type_GetArrayRank#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetArrayRank/CPP/type_getarrayrank.cpp#1)]
 [!code-csharp[Type_GetArrayRank#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetArrayRank/CS/type_getarrayrank.cs#1)]
 [!code-vb[Type_GetArrayRank#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetArrayRank/VB/type_getarrayrank.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="9a871-506">這個方法的功能不受基底類別的支援，因此必須改為在衍生類別中實作。</span><span class="sxs-lookup"><span data-stu-id="9a871-506">The functionality of this method is unsupported in the base class and must be implemented in a derived class instead.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9a871-507">目前的類型不是陣列。</span><span class="sxs-lookup"><span data-stu-id="9a871-507">The current type is not an array.</span></span></exception>
        <altmember cref="T:System.Array" />
        <altmember cref="P:System.Array.Rank" />
      </Docs>
    </Member>
    <Member MemberName="GetAttributeFlagsImpl">
      <MemberSignature Language="C#" Value="protected abstract System.Reflection.TypeAttributes GetAttributeFlagsImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Reflection.TypeAttributes GetAttributeFlagsImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetAttributeFlagsImpl" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function GetAttributeFlagsImpl () As TypeAttributes" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::Reflection::TypeAttributes GetAttributeFlagsImpl();" />
      <MemberSignature Language="F#" Value="abstract member GetAttributeFlagsImpl : unit -&gt; System.Reflection.TypeAttributes" Usage="type.GetAttributeFlagsImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.TypeAttributes</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9a871-508">在衍生類別中覆寫時，實作 <see cref="P:System.Type.Attributes" /> 屬性並取得位元遮罩，指示與 <see cref="T:System.Type" /> 關聯的屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-508">When overridden in a derived class, implements the <see cref="P:System.Type.Attributes" /> property and gets a bitmask indicating the attributes associated with the <see cref="T:System.Type" />.</span></span></summary>
        <returns><span data-ttu-id="9a871-509"><see cref="T:System.Reflection.TypeAttributes" /> 物件，代表 <see cref="T:System.Type" /> 的屬性集。</span><span class="sxs-lookup"><span data-stu-id="9a871-509">A <see cref="T:System.Reflection.TypeAttributes" /> object representing the attribute set of the <see cref="T:System.Type" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Type.Attributes" />
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetConstructor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9a871-510">取得目前 <see cref="T:System.Type" /> 的特定建構函式。</span><span class="sxs-lookup"><span data-stu-id="9a871-510">Gets a specific constructor of the current <see cref="T:System.Type" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetConstructor">
      <MemberSignature Language="C#" Value="public System.Reflection.ConstructorInfo GetConstructor (Type[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ConstructorInfo GetConstructor(class System.Type[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetConstructor(System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetConstructor (types As Type()) As ConstructorInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::ConstructorInfo ^ GetConstructor(cli::array &lt;Type ^&gt; ^ types);" />
      <MemberSignature Language="F#" Value="abstract member GetConstructor : Type[] -&gt; System.Reflection.ConstructorInfo&#xA;override this.GetConstructor : Type[] -&gt; System.Reflection.ConstructorInfo" Usage="type.GetConstructor types" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetConstructor(System.Type[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="types" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="types"><span data-ttu-id="9a871-511">由 <see cref="T:System.Type" /> 物件組成的陣列，表示所要建構函式參數的數目、順序和類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-511">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the desired constructor.</span></span>  
  
<span data-ttu-id="9a871-512">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-512">-or-</span></span> 
<span data-ttu-id="9a871-513">由 <see cref="T:System.Type" /> 物件組成的空陣列，用來取得不需任何參數的建構函式。</span><span class="sxs-lookup"><span data-stu-id="9a871-513">An empty array of <see cref="T:System.Type" /> objects, to get a constructor that takes no parameters.</span></span> <span data-ttu-id="9a871-514">這種供陣列是由 <see langword="static" /> 欄位 <see cref="F:System.Type.EmptyTypes" /> 提供的。</span><span class="sxs-lookup"><span data-stu-id="9a871-514">Such an empty array is provided by the <see langword="static" /> field <see cref="F:System.Type.EmptyTypes" />.</span></span></param>
        <summary><span data-ttu-id="9a871-515">搜尋其參數符合在指定陣列中的類型的公用執行個體建構函式。</span><span class="sxs-lookup"><span data-stu-id="9a871-515">Searches for a public instance constructor whose parameters match the types in the specified array.</span></span></summary>
        <returns><span data-ttu-id="9a871-516">物件，表示其參數符合參數類型陣列中之類型的公用執行個體建構函式 (如有找到)；否則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-516">An object representing the public instance constructor whose parameters match the types in the parameter type array, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-517">這個方法多載會尋找公用的執行個體建構函式，並無法用來取得類別初始設定式 (.cctor)。</span><span class="sxs-lookup"><span data-stu-id="9a871-517">This method overload looks for public instance constructors and cannot be used to obtain a class initializer (.cctor).</span></span> <span data-ttu-id="9a871-518">若要取得類別初始設定式，使用多載採用<xref:System.Reflection.BindingFlags>，並指定<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> Visual Basic 中)。</span><span class="sxs-lookup"><span data-stu-id="9a871-518">To get a class initializer, use an overload that takes <xref:System.Reflection.BindingFlags>, and specify <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="9a871-519">您也可以取得類別初始設定式使用<xref:System.Type.TypeInitializer%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-519">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
 <span data-ttu-id="9a871-520">如果要求的建構函式為非公用，則這個方法會傳回`null`。</span><span class="sxs-lookup"><span data-stu-id="9a871-520">If the requested constructor is non-public, this method returns `null`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9a871-521">查詢建構函式和方法時，您不能省略參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-521">You cannot omit parameters when looking up constructors and methods.</span></span> <span data-ttu-id="9a871-522">叫用時，您只可以省略參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-522">You can only omit parameters when invoking.</span></span>  
  
 <span data-ttu-id="9a871-523">如果目前<xref:System.Type>代表建構的泛型型別，這個方法會傳回<xref:System.Reflection.ConstructorInfo>具有由適當的型別引數取代型別參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-523">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.ConstructorInfo> with the type parameters replaced by the appropriate type arguments.</span></span> <span data-ttu-id="9a871-524">如果目前<xref:System.Type>表示的類型參數的泛型類型或泛型方法定義中這個方法永遠傳回`null`。</span><span class="sxs-lookup"><span data-stu-id="9a871-524">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method always returns `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-525">下列範例會取得的型別`MyClass`，取得<xref:System.Reflection.ConstructorInfo>物件，並顯示建構函式簽章。</span><span class="sxs-lookup"><span data-stu-id="9a871-525">The following example obtains the type of `MyClass`, gets the <xref:System.Reflection.ConstructorInfo> object, and displays the constructor signature.</span></span>  
  
 [!code-cpp[Type_GetConstructor#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetConstructor/CPP/type_getconstructor.cpp#1)]
 [!code-csharp[Type_GetConstructor#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetConstructor/CS/type_getconstructor.cs#1)]
 [!code-vb[Type_GetConstructor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetConstructor/VB/type_getconstructor.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9a871-526"><paramref name="types" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-526"><paramref name="types" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="9a871-527">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-527">-or-</span></span> 
<span data-ttu-id="9a871-528"><paramref name="types" /> 的其中一個項目為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-528">One of the elements in <paramref name="types" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9a871-529"><paramref name="types" /> 是多維的。</span><span class="sxs-lookup"><span data-stu-id="9a871-529"><paramref name="types" /> is multidimensional.</span></span></exception>
        <altmember cref="T:System.Reflection.ConstructorInfo" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetConstructors" />
      </Docs>
    </Member>
    <Member MemberName="GetConstructor">
      <MemberSignature Language="C#" Value="public System.Reflection.ConstructorInfo GetConstructor (System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ConstructorInfo GetConstructor(valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::ConstructorInfo ^ GetConstructor(System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetConstructor : System.Reflection.BindingFlags * System.Reflection.Binder * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.ConstructorInfo&#xA;override this.GetConstructor : System.Reflection.BindingFlags * System.Reflection.Binder * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.ConstructorInfo" Usage="type.GetConstructor (bindingAttr, binder, types, modifiers)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="bindingAttr"><span data-ttu-id="9a871-530">位元遮罩，由一或多個 <see cref="T:System.Reflection.BindingFlags" /> 組成，而這些旗標會指定執行搜尋的方式。</span><span class="sxs-lookup"><span data-stu-id="9a871-530">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="9a871-531">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-531">-or-</span></span> 
<span data-ttu-id="9a871-532">零，傳回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-532">Zero, to return <see langword="null" />.</span></span></param>
        <param name="binder"><span data-ttu-id="9a871-533">定義一組屬性並啟用繫結的物件，可包含多載方法的選擇、引數類型的強制，以及透過反映的成員引動過程。</span><span class="sxs-lookup"><span data-stu-id="9a871-533">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span></span>  
  
<span data-ttu-id="9a871-534">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-534">-or-</span></span> 
<span data-ttu-id="9a871-535">Null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)，可使用 <see cref="P:System.Type.DefaultBinder" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-535">A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span></span></param>
        <param name="types"><span data-ttu-id="9a871-536"><see cref="T:System.Type" /> 物件的陣列，代表所要取得之建構函式的參數數目、順序和類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-536">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the constructor to get.</span></span>  
  
<span data-ttu-id="9a871-537">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-537">-or-</span></span> 
<span data-ttu-id="9a871-538">用以取得沒有參數的建構函式之 <see cref="T:System.Type" /> 類型的空陣列 (也就是，Type[] types = new Type[0])。</span><span class="sxs-lookup"><span data-stu-id="9a871-538">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a constructor that takes no parameters.</span></span>  
  
<span data-ttu-id="9a871-539">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-539">-or-</span></span> 
 <span data-ttu-id="9a871-540"><see cref="F:System.Type.EmptyTypes" />.</span><span class="sxs-lookup"><span data-stu-id="9a871-540"><see cref="F:System.Type.EmptyTypes" />.</span></span></param>
        <param name="modifiers"><span data-ttu-id="9a871-541"><see cref="T:System.Reflection.ParameterModifier" /> 物件的陣列，代表在參數類型陣列中與對應項目關聯的屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-541">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the parameter type array.</span></span> <span data-ttu-id="9a871-542">預設的繫結器不會處理這個參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-542">The default binder does not process this parameter.</span></span></param>
        <summary><span data-ttu-id="9a871-543">使用指定的繫結條件約束 (Constraint) 搜尋其參數符合指定的引數類型和修飾詞 (Modifier) 的建構函式。</span><span class="sxs-lookup"><span data-stu-id="9a871-543">Searches for a constructor whose parameters match the specified argument types and modifiers, using the specified binding constraints.</span></span></summary>
        <returns><span data-ttu-id="9a871-544"><see cref="T:System.Reflection.ConstructorInfo" /> 物件，代表符合指定之需求的建構函式 (如有找到)；否則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-544">A <see cref="T:System.Reflection.ConstructorInfo" /> object representing the constructor that matches the specified requirements, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-545">如果沒有完全相符，`binder`會嘗試強制轉型中指定的參數類型`types`，就可以選取 相符項目陣列。</span><span class="sxs-lookup"><span data-stu-id="9a871-545">If an exact match does not exist, the `binder` will attempt to coerce the parameter types specified in the `types` array in order to select a match.</span></span> <span data-ttu-id="9a871-546">如果`binder`無法選取相符項目，然後`null`會傳回。</span><span class="sxs-lookup"><span data-stu-id="9a871-546">If the `binder` is unable to select a match, then `null` is returned.</span></span>  
  
 <span data-ttu-id="9a871-547">下列<xref:System.Reflection.BindingFlags>篩選器旗標可以用來定義要包含在搜尋中的建構函式：</span><span class="sxs-lookup"><span data-stu-id="9a871-547">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which constructors to include in the search:</span></span>  
  
-   <span data-ttu-id="9a871-548">您必須指定`BindingFlags.Instance`或`BindingFlags.Static`以取得傳回值。</span><span class="sxs-lookup"><span data-stu-id="9a871-548">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="9a871-549">指定`BindingFlags.Public`来包含在搜尋中的公用建構函式。</span><span class="sxs-lookup"><span data-stu-id="9a871-549">Specify `BindingFlags.Public` to include public constructors in the search.</span></span>  
  
-   <span data-ttu-id="9a871-550">指定`BindingFlags.NonPublic`要在搜尋中包含非公用建構函式 （也就是私用、 內部和受保護建構函式）。</span><span class="sxs-lookup"><span data-stu-id="9a871-550">Specify `BindingFlags.NonPublic` to include non-public constructors (that is, private, internal, and protected constructors) in the search.</span></span>  
  
 <span data-ttu-id="9a871-551">如需詳細資訊，請參閱 <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="9a871-551">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="9a871-552">若要取得使用這個方法多載類別初始設定式 (.cctor)，您必須指定<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType>在 Visual Basic 中)。</span><span class="sxs-lookup"><span data-stu-id="9a871-552">To get the class initializer (.cctor) using this method overload, you must specify <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="9a871-553">您也可以取得類別初始設定式使用<xref:System.Type.TypeInitializer%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-553">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9a871-554">查詢建構函式和方法時，您不能省略參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-554">You cannot omit parameters when looking up constructors and methods.</span></span> <span data-ttu-id="9a871-555">叫用時，您只可以省略參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-555">You can only omit parameters when invoking.</span></span>  
  
 <span data-ttu-id="9a871-556">如果目前<xref:System.Type>代表建構的泛型型別，這個方法會傳回<xref:System.Reflection.ConstructorInfo>具有由適當的型別引數取代型別參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-556">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.ConstructorInfo> with the type parameters replaced by the appropriate type arguments.</span></span> <span data-ttu-id="9a871-557">如果目前<xref:System.Type>表示的類型參數的泛型類型或泛型方法定義中這個方法永遠傳回`null`。</span><span class="sxs-lookup"><span data-stu-id="9a871-557">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method always returns `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-558">下列程式會取得的型別`MyClass1`類別，取得<xref:System.Reflection.ConstructorInfo>物件比對指定的繫結旗標，並顯示建構函式的簽章。</span><span class="sxs-lookup"><span data-stu-id="9a871-558">The following program obtains the type of `MyClass1` class, gets the <xref:System.Reflection.ConstructorInfo> object matching the specified binding flags, and displays the signature of the constructor.</span></span>  
  
 [!code-cpp[Type_GetConstructor2#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetConstructor2/CPP/type_getconstructor2.cpp#1)]
 [!code-csharp[Type_GetConstructor2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetConstructor2/CS/type_getconstructor2.cs#1)]
 [!code-vb[Type_GetConstructor2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetConstructor2/VB/type_getconstructor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9a871-559"><paramref name="types" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-559"><paramref name="types" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="9a871-560">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-560">-or-</span></span> 
<span data-ttu-id="9a871-561"><paramref name="types" /> 的其中一個項目為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-561">One of the elements in <paramref name="types" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9a871-562"><paramref name="types" /> 是多維的。</span><span class="sxs-lookup"><span data-stu-id="9a871-562"><paramref name="types" /> is multidimensional.</span></span>  
  
<span data-ttu-id="9a871-563">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-563">-or-</span></span> 
 <span data-ttu-id="9a871-564"><paramref name="modifiers" /> 是多維的。</span><span class="sxs-lookup"><span data-stu-id="9a871-564"><paramref name="modifiers" /> is multidimensional.</span></span>  
  
<span data-ttu-id="9a871-565">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-565">-or-</span></span> 
 <span data-ttu-id="9a871-566"><paramref name="types" /> 和 <paramref name="modifiers" /> 的長度不同。</span><span class="sxs-lookup"><span data-stu-id="9a871-566"><paramref name="types" /> and <paramref name="modifiers" /> do not have the same length.</span></span></exception>
        <altmember cref="T:System.Reflection.ConstructorInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetConstructors" />
      </Docs>
    </Member>
    <Member MemberName="GetConstructor">
      <MemberSignature Language="C#" Value="public System.Reflection.ConstructorInfo GetConstructor (System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ConstructorInfo GetConstructor(valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::ConstructorInfo ^ GetConstructor(System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, System::Reflection::CallingConventions callConvention, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetConstructor : System.Reflection.BindingFlags * System.Reflection.Binder * System.Reflection.CallingConventions * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.ConstructorInfo&#xA;override this.GetConstructor : System.Reflection.BindingFlags * System.Reflection.Binder * System.Reflection.CallingConventions * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.ConstructorInfo" Usage="type.GetConstructor (bindingAttr, binder, callConvention, types, modifiers)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="callConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="bindingAttr"><span data-ttu-id="9a871-567">位元遮罩，由一或多個 <see cref="T:System.Reflection.BindingFlags" /> 組成，而這些旗標會指定執行搜尋的方式。</span><span class="sxs-lookup"><span data-stu-id="9a871-567">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="9a871-568">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-568">-or-</span></span> 
<span data-ttu-id="9a871-569">零，傳回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-569">Zero, to return <see langword="null" />.</span></span></param>
        <param name="binder"><span data-ttu-id="9a871-570">定義一組屬性並啟用繫結的物件，可包含多載方法的選擇、引數類型的強制，以及透過反映的成員引動過程。</span><span class="sxs-lookup"><span data-stu-id="9a871-570">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span></span>  
  
<span data-ttu-id="9a871-571">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-571">-or-</span></span> 
<span data-ttu-id="9a871-572">Null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)，可使用 <see cref="P:System.Type.DefaultBinder" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-572">A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span></span></param>
        <param name="callConvention"><span data-ttu-id="9a871-573">物件，其指定一組所要使用的規則，而這些規則是關於引數的順序和配置、如何傳遞傳回值、引數使用哪些暫存器以及清除堆疊。</span><span class="sxs-lookup"><span data-stu-id="9a871-573">The object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and the stack is cleaned up.</span></span></param>
        <param name="types"><span data-ttu-id="9a871-574"><see cref="T:System.Type" /> 物件的陣列，代表所要取得之建構函式的參數數目、順序和類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-574">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the constructor to get.</span></span>  
  
<span data-ttu-id="9a871-575">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-575">-or-</span></span> 
<span data-ttu-id="9a871-576">用以取得沒有參數的建構函式之 <see cref="T:System.Type" /> 類型的空陣列 (也就是，Type[] types = new Type[0])。</span><span class="sxs-lookup"><span data-stu-id="9a871-576">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a constructor that takes no parameters.</span></span></param>
        <param name="modifiers"><span data-ttu-id="9a871-577"><see cref="T:System.Reflection.ParameterModifier" /> 物件的陣列，代表在 <paramref name="types" /> 陣列中與對應項目關聯的屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-577">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array.</span></span> <span data-ttu-id="9a871-578">預設的繫結器不會處理這個參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-578">The default binder does not process this parameter.</span></span></param>
        <summary><span data-ttu-id="9a871-579">使用指定的繫結條件約束和指定的呼叫慣例，搜尋其參數符合指定的引數類型和修飾詞的建構函式。</span><span class="sxs-lookup"><span data-stu-id="9a871-579">Searches for a constructor whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.</span></span></summary>
        <returns><span data-ttu-id="9a871-580">物件，代表符合指定之需求的建構函式 (如有找到)；否則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-580">An object representing the constructor that matches the specified requirements, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-581">雖然預設繫結器不會處理<xref:System.Reflection.ParameterModifier>(`modifiers`參數)，您可以使用抽象<xref:System.Reflection.Binder?displayProperty=nameWithType>類別，以寫入未處理的自訂繫結器`modifiers`。</span><span class="sxs-lookup"><span data-stu-id="9a871-581">Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers`.</span></span> <span data-ttu-id="9a871-582">`ParameterModifier` 透過 COM interop 呼叫時才會使用和處理傳址方式傳遞的參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-582">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="9a871-583">如果沒有完全相符，`binder`會嘗試強制轉型中指定的參數類型`types`，就可以選取 相符項目陣列。</span><span class="sxs-lookup"><span data-stu-id="9a871-583">If an exact match does not exist, the `binder` will attempt to coerce the parameter types specified in the `types` array in order to select a match.</span></span> <span data-ttu-id="9a871-584">如果`binder`無法選取相符項目，然後`null`會傳回。</span><span class="sxs-lookup"><span data-stu-id="9a871-584">If the `binder` is unable to select a match, then `null` is returned.</span></span>  
  
 <span data-ttu-id="9a871-585">下列<xref:System.Reflection.BindingFlags>篩選器旗標可以用來定義要包含在搜尋中的建構函式：</span><span class="sxs-lookup"><span data-stu-id="9a871-585">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which constructors to include in the search:</span></span>  
  
-   <span data-ttu-id="9a871-586">您必須指定`BindingFlags.Instance`或`BindingFlags.Static`以取得傳回值。</span><span class="sxs-lookup"><span data-stu-id="9a871-586">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="9a871-587">指定`BindingFlags.Public`来包含在搜尋中的公用建構函式。</span><span class="sxs-lookup"><span data-stu-id="9a871-587">Specify `BindingFlags.Public` to include public constructors in the search.</span></span>  
  
-   <span data-ttu-id="9a871-588">指定`BindingFlags.NonPublic`要在搜尋中包含非公用建構函式 （也就是私用、 內部和受保護建構函式）。</span><span class="sxs-lookup"><span data-stu-id="9a871-588">Specify `BindingFlags.NonPublic` to include non-public constructors (that is, private, internal, and protected constructors) in the search.</span></span>  
  
 <span data-ttu-id="9a871-589">如需詳細資訊，請參閱 <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="9a871-589">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="9a871-590">若要取得使用此方法的類別初始設定式 (.cctor)，您必須指定<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType>在 Visual Basic 中)。</span><span class="sxs-lookup"><span data-stu-id="9a871-590">To get the class initializer (.cctor) using this method, you must specify <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="9a871-591">您也可以取得類別初始設定式使用<xref:System.Type.TypeInitializer%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-591">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
 <span data-ttu-id="9a871-592">下表顯示基底類別成員會傳回由`Get`反映型別上時的方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-592">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="9a871-593">成員類型</span><span class="sxs-lookup"><span data-stu-id="9a871-593">Member Type</span></span>|<span data-ttu-id="9a871-594">Static</span><span class="sxs-lookup"><span data-stu-id="9a871-594">Static</span></span>|<span data-ttu-id="9a871-595">非靜態</span><span class="sxs-lookup"><span data-stu-id="9a871-595">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="9a871-596">建構函式</span><span class="sxs-lookup"><span data-stu-id="9a871-596">Constructor</span></span>|<span data-ttu-id="9a871-597">否</span><span class="sxs-lookup"><span data-stu-id="9a871-597">No</span></span>|<span data-ttu-id="9a871-598">否</span><span class="sxs-lookup"><span data-stu-id="9a871-598">No</span></span>|  
|<span data-ttu-id="9a871-599">欄位</span><span class="sxs-lookup"><span data-stu-id="9a871-599">Field</span></span>|<span data-ttu-id="9a871-600">否</span><span class="sxs-lookup"><span data-stu-id="9a871-600">No</span></span>|<span data-ttu-id="9a871-601">可以。</span><span class="sxs-lookup"><span data-stu-id="9a871-601">Yes.</span></span> <span data-ttu-id="9a871-602">欄位永遠是依名稱和簽章隱藏。</span><span class="sxs-lookup"><span data-stu-id="9a871-602">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="9a871-603">Event - 事件</span><span class="sxs-lookup"><span data-stu-id="9a871-603">Event</span></span>|<span data-ttu-id="9a871-604">不適用</span><span class="sxs-lookup"><span data-stu-id="9a871-604">Not applicable</span></span>|<span data-ttu-id="9a871-605">一般類型系統規則是繼承實作屬性的方法相同。</span><span class="sxs-lookup"><span data-stu-id="9a871-605">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="9a871-606">反映會視為由名稱和簽章隱藏屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-606">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="9a871-607">請參閱附註 2。</span><span class="sxs-lookup"><span data-stu-id="9a871-607">See note 2 below.</span></span>|  
|<span data-ttu-id="9a871-608">方法</span><span class="sxs-lookup"><span data-stu-id="9a871-608">Method</span></span>|<span data-ttu-id="9a871-609">否</span><span class="sxs-lookup"><span data-stu-id="9a871-609">No</span></span>|<span data-ttu-id="9a871-610">可以。</span><span class="sxs-lookup"><span data-stu-id="9a871-610">Yes.</span></span> <span data-ttu-id="9a871-611">（虛擬和非虛擬） 的方法可以隱藏依名稱或依名稱和簽章隱藏。</span><span class="sxs-lookup"><span data-stu-id="9a871-611">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="9a871-612">巢狀的類型</span><span class="sxs-lookup"><span data-stu-id="9a871-612">Nested Type</span></span>|<span data-ttu-id="9a871-613">否</span><span class="sxs-lookup"><span data-stu-id="9a871-613">No</span></span>|<span data-ttu-id="9a871-614">否</span><span class="sxs-lookup"><span data-stu-id="9a871-614">No</span></span>|  
|<span data-ttu-id="9a871-615">屬性</span><span class="sxs-lookup"><span data-stu-id="9a871-615">Property</span></span>|<span data-ttu-id="9a871-616">不適用</span><span class="sxs-lookup"><span data-stu-id="9a871-616">Not applicable</span></span>|<span data-ttu-id="9a871-617">一般類型系統規則是繼承實作屬性的方法相同。</span><span class="sxs-lookup"><span data-stu-id="9a871-617">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="9a871-618">反映會視為由名稱和簽章隱藏屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-618">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="9a871-619">請參閱附註 2。</span><span class="sxs-lookup"><span data-stu-id="9a871-619">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="9a871-620">依名稱和簽章隱藏會考慮所有組件的簽章，包括自訂修飾詞，傳回類型、 參數類型、 sentinels 和 unmanaged 呼叫慣例。</span><span class="sxs-lookup"><span data-stu-id="9a871-620">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="9a871-621">這是二進位比較。</span><span class="sxs-lookup"><span data-stu-id="9a871-621">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="9a871-622">反映的屬性和事件會依名稱和簽章隱藏。</span><span class="sxs-lookup"><span data-stu-id="9a871-622">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="9a871-623">如果您同時有 get 和 set 存取子的屬性在基底類別中，但衍生的類別有只有 get 存取子，在衍生的類別的屬性會隱藏基底類別屬性中，並不能存取的基底類別的 setter。</span><span class="sxs-lookup"><span data-stu-id="9a871-623">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="9a871-624">自訂屬性不屬於一般類型系統。</span><span class="sxs-lookup"><span data-stu-id="9a871-624">Custom attributes are not part of the common type system.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9a871-625">查詢建構函式和方法時，您不能省略參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-625">You cannot omit parameters when looking up constructors and methods.</span></span> <span data-ttu-id="9a871-626">叫用時，您只可以省略參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-626">You can only omit parameters when invoking.</span></span>  
  
 <span data-ttu-id="9a871-627">如果目前<xref:System.Type>代表建構的泛型型別，這個方法會傳回<xref:System.Reflection.ConstructorInfo>具有由適當的型別引數取代型別參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-627">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.ConstructorInfo> with the type parameters replaced by the appropriate type arguments.</span></span> <span data-ttu-id="9a871-628">如果目前<xref:System.Type>表示的類型參數的泛型類型或泛型方法定義中這個方法永遠傳回`null`。</span><span class="sxs-lookup"><span data-stu-id="9a871-628">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method always returns `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-629">下列範例會取得的型別`MyClass1`，取得<xref:System.Reflection.ConstructorInfo>符合指定的繫結旗標，並顯示建構函式簽章的物件。</span><span class="sxs-lookup"><span data-stu-id="9a871-629">The following example obtains the type of `MyClass1`, gets the <xref:System.Reflection.ConstructorInfo> object that matches the specified binding flags, and displays the constructor signature.</span></span>  
  
 [!code-cpp[Type_GetConstructor3#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetConstructor3/CPP/type_getconstructor3.cpp#1)]
 [!code-csharp[Type_GetConstructor3#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetConstructor3/CS/type_getconstructor3.cs#1)]
 [!code-vb[Type_GetConstructor3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetConstructor3/VB/type_getconstructor3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9a871-630"><paramref name="types" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-630"><paramref name="types" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="9a871-631">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-631">-or-</span></span> 
<span data-ttu-id="9a871-632"><paramref name="types" /> 的其中一個項目為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-632">One of the elements in <paramref name="types" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9a871-633"><paramref name="types" /> 是多維的。</span><span class="sxs-lookup"><span data-stu-id="9a871-633"><paramref name="types" /> is multidimensional.</span></span>  
  
<span data-ttu-id="9a871-634">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-634">-or-</span></span> 
 <span data-ttu-id="9a871-635"><paramref name="modifiers" /> 是多維的。</span><span class="sxs-lookup"><span data-stu-id="9a871-635"><paramref name="modifiers" /> is multidimensional.</span></span>  
  
<span data-ttu-id="9a871-636">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-636">-or-</span></span> 
 <span data-ttu-id="9a871-637"><paramref name="types" /> 和 <paramref name="modifiers" /> 的長度不同。</span><span class="sxs-lookup"><span data-stu-id="9a871-637"><paramref name="types" /> and <paramref name="modifiers" /> do not have the same length.</span></span></exception>
        <altmember cref="T:System.Reflection.ConstructorInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.CallingConventions" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetConstructors" />
      </Docs>
    </Member>
    <Member MemberName="GetConstructorImpl">
      <MemberSignature Language="C#" Value="protected abstract System.Reflection.ConstructorInfo GetConstructorImpl (System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Reflection.ConstructorInfo GetConstructorImpl(valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::Reflection::ConstructorInfo ^ GetConstructorImpl(System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, System::Reflection::CallingConventions callConvention, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetConstructorImpl : System.Reflection.BindingFlags * System.Reflection.Binder * System.Reflection.CallingConventions * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.ConstructorInfo" Usage="type.GetConstructorImpl (bindingAttr, binder, callConvention, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="callConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="bindingAttr"><span data-ttu-id="9a871-638">位元遮罩，由一或多個 <see cref="T:System.Reflection.BindingFlags" /> 組成，而這些旗標會指定執行搜尋的方式。</span><span class="sxs-lookup"><span data-stu-id="9a871-638">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="9a871-639">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-639">-or-</span></span> 
<span data-ttu-id="9a871-640">零，傳回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-640">Zero, to return <see langword="null" />.</span></span></param>
        <param name="binder"><span data-ttu-id="9a871-641">定義一組屬性並啟用繫結的物件，可包含多載方法的選擇、引數類型的強制，以及透過反映的成員引動過程。</span><span class="sxs-lookup"><span data-stu-id="9a871-641">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span></span>  
  
<span data-ttu-id="9a871-642">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-642">-or-</span></span> 
<span data-ttu-id="9a871-643">Null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)，可使用 <see cref="P:System.Type.DefaultBinder" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-643">A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span></span></param>
        <param name="callConvention"><span data-ttu-id="9a871-644">物件，其指定一組所要使用的規則，而這些規則是關於引數的順序和配置、如何傳遞傳回值、引數使用哪些暫存器以及清除堆疊。</span><span class="sxs-lookup"><span data-stu-id="9a871-644">The object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and the stack is cleaned up.</span></span></param>
        <param name="types"><span data-ttu-id="9a871-645"><see cref="T:System.Type" /> 物件的陣列，代表所要取得之建構函式的參數數目、順序和類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-645">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the constructor to get.</span></span>  
  
<span data-ttu-id="9a871-646">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-646">-or-</span></span> 
<span data-ttu-id="9a871-647">用以取得沒有參數的建構函式之 <see cref="T:System.Type" /> 類型的空陣列 (也就是，Type[] types = new Type[0])。</span><span class="sxs-lookup"><span data-stu-id="9a871-647">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a constructor that takes no parameters.</span></span></param>
        <param name="modifiers"><span data-ttu-id="9a871-648"><see cref="T:System.Reflection.ParameterModifier" /> 物件的陣列，代表在 <paramref name="types" /> 陣列中與對應項目關聯的屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-648">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array.</span></span> <span data-ttu-id="9a871-649">預設的繫結器不會處理這個參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-649">The default binder does not process this parameter.</span></span></param>
        <summary><span data-ttu-id="9a871-650">在衍生類別中覆寫時，使用指定的繫結條件約束和指定的呼叫慣例，搜尋其參數符合指定的引數類型和修飾詞的建構函式。</span><span class="sxs-lookup"><span data-stu-id="9a871-650">When overridden in a derived class, searches for a constructor whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.</span></span></summary>
        <returns><span data-ttu-id="9a871-651"><see cref="T:System.Reflection.ConstructorInfo" /> 物件，代表符合指定之需求的建構函式 (如有找到)；否則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-651">A <see cref="T:System.Reflection.ConstructorInfo" /> object representing the constructor that matches the specified requirements, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-652">雖然預設繫結器不會處理<xref:System.Reflection.ParameterModifier>(`modifiers`參數)，您可以使用抽象<xref:System.Reflection.Binder?displayProperty=nameWithType>類別，以寫入未處理的自訂繫結器`modifiers`。</span><span class="sxs-lookup"><span data-stu-id="9a871-652">Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers`.</span></span> <span data-ttu-id="9a871-653">`ParameterModifier` 透過 COM interop 呼叫時才會使用和處理傳址方式傳遞的參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-653">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="9a871-654">如果沒有完全相符，`binder`會嘗試強制轉型中指定的參數類型`types`，就可以選取 相符項目陣列。</span><span class="sxs-lookup"><span data-stu-id="9a871-654">If an exact match does not exist, the `binder` will attempt to coerce the parameter types specified in the `types` array in order to select a match.</span></span> <span data-ttu-id="9a871-655">如果`binder`無法選取相符項目，然後`null`會傳回。</span><span class="sxs-lookup"><span data-stu-id="9a871-655">If the `binder` is unable to select a match, then `null` is returned.</span></span>  
  
 <span data-ttu-id="9a871-656">下列<xref:System.Reflection.BindingFlags>篩選器旗標可以用來定義要包含在搜尋中的建構函式：</span><span class="sxs-lookup"><span data-stu-id="9a871-656">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which constructors to include in the search:</span></span>  
  
-   <span data-ttu-id="9a871-657">您必須指定`BindingFlags.Instance`或`BindingFlags.Static`以取得傳回值。</span><span class="sxs-lookup"><span data-stu-id="9a871-657">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="9a871-658">指定`BindingFlags.Public`来包含在搜尋中的公用建構函式。</span><span class="sxs-lookup"><span data-stu-id="9a871-658">Specify `BindingFlags.Public` to include public constructors in the search.</span></span>  
  
-   <span data-ttu-id="9a871-659">指定`BindingFlags.NonPublic`要在搜尋中包含非公用建構函式 （也就是私用、 內部和受保護建構函式）。</span><span class="sxs-lookup"><span data-stu-id="9a871-659">Specify `BindingFlags.NonPublic` to include non-public constructors (that is, private, internal, and protected constructors) in the search.</span></span>  
  
 <span data-ttu-id="9a871-660">如需詳細資訊，請參閱 <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="9a871-660">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="9a871-661">這個方法會實作 <xref:System.Type.GetConstructor%2A>。</span><span class="sxs-lookup"><span data-stu-id="9a871-661">This method implements <xref:System.Type.GetConstructor%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9a871-662"><paramref name="types" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-662"><paramref name="types" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="9a871-663">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-663">-or-</span></span> 
<span data-ttu-id="9a871-664"><paramref name="types" /> 的其中一個項目為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-664">One of the elements in <paramref name="types" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9a871-665"><paramref name="types" /> 是多維的。</span><span class="sxs-lookup"><span data-stu-id="9a871-665"><paramref name="types" /> is multidimensional.</span></span>  
  
<span data-ttu-id="9a871-666">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-666">-or-</span></span> 
 <span data-ttu-id="9a871-667"><paramref name="modifiers" /> 是多維的。</span><span class="sxs-lookup"><span data-stu-id="9a871-667"><paramref name="modifiers" /> is multidimensional.</span></span>  
  
<span data-ttu-id="9a871-668">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-668">-or-</span></span> 
 <span data-ttu-id="9a871-669"><paramref name="types" /> 和 <paramref name="modifiers" /> 的長度不同。</span><span class="sxs-lookup"><span data-stu-id="9a871-669"><paramref name="types" /> and <paramref name="modifiers" /> do not have the same length.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="9a871-670">目前的類型為 <see cref="T:System.Reflection.Emit.TypeBuilder" /> 或 <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-670">The current type is a <see cref="T:System.Reflection.Emit.TypeBuilder" /> or <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />.</span></span></exception>
        <altmember cref="T:System.Reflection.ConstructorInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.CallingConventions" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetConstructors" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetConstructors">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9a871-671">取得目前 <see cref="T:System.Type" /> 的建構函式。</span><span class="sxs-lookup"><span data-stu-id="9a871-671">Gets the constructors of the current <see cref="T:System.Type" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetConstructors">
      <MemberSignature Language="C#" Value="public System.Reflection.ConstructorInfo[] GetConstructors ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ConstructorInfo[] GetConstructors() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetConstructors" />
      <MemberSignature Language="VB.NET" Value="Public Function GetConstructors () As ConstructorInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::ConstructorInfo ^&gt; ^ GetConstructors();" />
      <MemberSignature Language="F#" Value="abstract member GetConstructors : unit -&gt; System.Reflection.ConstructorInfo[]&#xA;override this.GetConstructors : unit -&gt; System.Reflection.ConstructorInfo[]" Usage="type.GetConstructors " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetConstructors</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9a871-672">傳回所有定義給目前 <see cref="T:System.Type" /> 的公用建構函式。</span><span class="sxs-lookup"><span data-stu-id="9a871-672">Returns all the public constructors defined for the current <see cref="T:System.Type" />.</span></span></summary>
        <returns><span data-ttu-id="9a871-673">由 <see cref="T:System.Reflection.ConstructorInfo" /> 物件組成的陣列，表示定義給目前 <see cref="T:System.Type" /> 的所有公用執行個體建構函式，但不含類型初始設定式 (靜態建構函式)。</span><span class="sxs-lookup"><span data-stu-id="9a871-673">An array of <see cref="T:System.Reflection.ConstructorInfo" /> objects representing all the public instance constructors defined for the current <see cref="T:System.Type" />, but not including the type initializer (static constructor).</span></span> <span data-ttu-id="9a871-674">如果目前的 <see cref="T:System.Type" /> 沒有定義任何公用執行個體建構函式，或目前的 <see cref="T:System.Type" /> 表示泛型類型或泛型方法定義中的型別參數，則會傳回 <see cref="T:System.Reflection.ConstructorInfo" /> 類型的空陣列。</span><span class="sxs-lookup"><span data-stu-id="9a871-674">If no public instance constructors are defined for the current <see cref="T:System.Type" />, or if the current <see cref="T:System.Type" /> represents a type parameter in the definition of a generic type or generic method, an empty array of type <see cref="T:System.Reflection.ConstructorInfo" /> is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-675"><xref:System.Type.GetConstructors%2A>方法不會傳回特定的順序，例如依宣告順序的建構函式。</span><span class="sxs-lookup"><span data-stu-id="9a871-675">The <xref:System.Type.GetConstructors%2A> method does not return constructors in a particular order, such as declaration order.</span></span> <span data-ttu-id="9a871-676">您的程式碼不得相依於建構函式會傳回的順序，因為順序不同。</span><span class="sxs-lookup"><span data-stu-id="9a871-676">Your code must not depend on the order in which constructors are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="9a871-677">下表顯示基底類別成員會傳回由`Get`反映型別上時的方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-677">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="9a871-678">成員類型</span><span class="sxs-lookup"><span data-stu-id="9a871-678">Member Type</span></span>|<span data-ttu-id="9a871-679">Static</span><span class="sxs-lookup"><span data-stu-id="9a871-679">Static</span></span>|<span data-ttu-id="9a871-680">非靜態</span><span class="sxs-lookup"><span data-stu-id="9a871-680">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="9a871-681">建構函式</span><span class="sxs-lookup"><span data-stu-id="9a871-681">Constructor</span></span>|<span data-ttu-id="9a871-682">否</span><span class="sxs-lookup"><span data-stu-id="9a871-682">No</span></span>|<span data-ttu-id="9a871-683">否</span><span class="sxs-lookup"><span data-stu-id="9a871-683">No</span></span>|  
|<span data-ttu-id="9a871-684">欄位</span><span class="sxs-lookup"><span data-stu-id="9a871-684">Field</span></span>|<span data-ttu-id="9a871-685">否</span><span class="sxs-lookup"><span data-stu-id="9a871-685">No</span></span>|<span data-ttu-id="9a871-686">可以。</span><span class="sxs-lookup"><span data-stu-id="9a871-686">Yes.</span></span> <span data-ttu-id="9a871-687">欄位永遠是依名稱和簽章隱藏。</span><span class="sxs-lookup"><span data-stu-id="9a871-687">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="9a871-688">Event - 事件</span><span class="sxs-lookup"><span data-stu-id="9a871-688">Event</span></span>|<span data-ttu-id="9a871-689">不適用</span><span class="sxs-lookup"><span data-stu-id="9a871-689">Not applicable</span></span>|<span data-ttu-id="9a871-690">一般類型系統規則是繼承實作屬性的方法相同。</span><span class="sxs-lookup"><span data-stu-id="9a871-690">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="9a871-691">反映會視為由名稱和簽章隱藏屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-691">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="9a871-692">請參閱附註 2。</span><span class="sxs-lookup"><span data-stu-id="9a871-692">See note 2 below.</span></span>|  
|<span data-ttu-id="9a871-693">方法</span><span class="sxs-lookup"><span data-stu-id="9a871-693">Method</span></span>|<span data-ttu-id="9a871-694">否</span><span class="sxs-lookup"><span data-stu-id="9a871-694">No</span></span>|<span data-ttu-id="9a871-695">可以。</span><span class="sxs-lookup"><span data-stu-id="9a871-695">Yes.</span></span> <span data-ttu-id="9a871-696">（虛擬和非虛擬） 的方法可以隱藏依名稱或依名稱和簽章隱藏。</span><span class="sxs-lookup"><span data-stu-id="9a871-696">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="9a871-697">巢狀的類型</span><span class="sxs-lookup"><span data-stu-id="9a871-697">Nested Type</span></span>|<span data-ttu-id="9a871-698">否</span><span class="sxs-lookup"><span data-stu-id="9a871-698">No</span></span>|<span data-ttu-id="9a871-699">否</span><span class="sxs-lookup"><span data-stu-id="9a871-699">No</span></span>|  
|<span data-ttu-id="9a871-700">屬性</span><span class="sxs-lookup"><span data-stu-id="9a871-700">Property</span></span>|<span data-ttu-id="9a871-701">不適用</span><span class="sxs-lookup"><span data-stu-id="9a871-701">Not applicable</span></span>|<span data-ttu-id="9a871-702">一般類型系統規則是繼承實作屬性的方法相同。</span><span class="sxs-lookup"><span data-stu-id="9a871-702">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="9a871-703">反映會視為由名稱和簽章隱藏屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-703">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="9a871-704">請參閱附註 2。</span><span class="sxs-lookup"><span data-stu-id="9a871-704">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="9a871-705">依名稱和簽章隱藏會考慮所有組件的簽章，包括自訂修飾詞，傳回類型、 參數類型、 sentinels 和 unmanaged 呼叫慣例。</span><span class="sxs-lookup"><span data-stu-id="9a871-705">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="9a871-706">這是二進位比較。</span><span class="sxs-lookup"><span data-stu-id="9a871-706">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="9a871-707">反映的屬性和事件會依名稱和簽章隱藏。</span><span class="sxs-lookup"><span data-stu-id="9a871-707">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="9a871-708">如果您同時有 get 和 set 存取子的屬性在基底類別中，但衍生的類別有只有 get 存取子，在衍生的類別的屬性會隱藏基底類別屬性中，並不能存取的基底類別的 setter。</span><span class="sxs-lookup"><span data-stu-id="9a871-708">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="9a871-709">自訂屬性不屬於一般類型系統。</span><span class="sxs-lookup"><span data-stu-id="9a871-709">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="9a871-710">這個方法多載會呼叫<xref:System.Type.GetConstructors%28System.Reflection.BindingFlags%29>方法多載，以<xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> Visual Basic 中)。</span><span class="sxs-lookup"><span data-stu-id="9a871-710">This method overload calls the <xref:System.Type.GetConstructors%28System.Reflection.BindingFlags%29> method overload, with <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="9a871-711">它將無法找到類別初始設定式 (.cctor)。</span><span class="sxs-lookup"><span data-stu-id="9a871-711">It will not find class initializers (.cctor).</span></span> <span data-ttu-id="9a871-712">類別初始設定式，請使用採用多載<xref:System.Reflection.BindingFlags>，並指定<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> Visual Basic 中)。</span><span class="sxs-lookup"><span data-stu-id="9a871-712">To find class initializers, use an overload that takes <xref:System.Reflection.BindingFlags>, and specify <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="9a871-713">您也可以取得類別初始設定式使用<xref:System.Type.TypeInitializer%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-713">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
 <span data-ttu-id="9a871-714">如果目前<xref:System.Type>代表建構的泛型型別，這個方法會傳回<xref:System.Reflection.ConstructorInfo>具有由適當的型別引數取代型別參數的物件。</span><span class="sxs-lookup"><span data-stu-id="9a871-714">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.ConstructorInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span> <span data-ttu-id="9a871-715">例如，如果類別`C<T>`的建構函式`C(T t1)`(`Sub New(ByVal t1 As T)`在 Visual Basic 中)，則呼叫<xref:System.Type.GetConstructors%2A>上`C<int>`傳回<xref:System.Reflection.ConstructorInfo>表示`C(int t1)`C# 中 (`Sub New(ByVal t1 As Integer)` Visual Basic 中)。</span><span class="sxs-lookup"><span data-stu-id="9a871-715">For example, if class `C<T>` has a constructor `C(T t1)` (`Sub New(ByVal t1 As T)` in Visual Basic), calling <xref:System.Type.GetConstructors%2A> on `C<int>` returns a <xref:System.Reflection.ConstructorInfo> that represents `C(int t1)` in C# (`Sub New(ByVal t1 As Integer)` in Visual Basic).</span></span>  
  
 <span data-ttu-id="9a871-716">如果目前<xref:System.Type>代表泛型類型參數，<xref:System.Type.GetConstructors%2A>方法會傳回空陣列。</span><span class="sxs-lookup"><span data-stu-id="9a871-716">If the current <xref:System.Type> represents a generic type parameter, the <xref:System.Type.GetConstructors%2A> method returns an empty array.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-717">此範例中顯示的輸出<xref:System.Type.GetConstructors%2A>自類別具有兩個執行個體建構函式和一個靜態的建構函式多載。</span><span class="sxs-lookup"><span data-stu-id="9a871-717">This example shows the output of the <xref:System.Type.GetConstructors%2A> overload from a class that has two instance constructors and one static constructor.</span></span>  
  
 [!code-cpp[Classic Type.GetConstructors Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/CPP/source1.cpp#1)]
 [!code-csharp[Classic Type.GetConstructors Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/CS/source1.cs#1)]
 [!code-vb[Classic Type.GetConstructors Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/VB/source1.vb#1)]  
  
 <span data-ttu-id="9a871-718">此程式碼的輸出為：</span><span class="sxs-lookup"><span data-stu-id="9a871-718">The output of this code is:</span></span>  
  
 <span data-ttu-id="9a871-719">2</span><span class="sxs-lookup"><span data-stu-id="9a871-719">2</span></span>  
  
 <span data-ttu-id="9a871-720">False</span><span class="sxs-lookup"><span data-stu-id="9a871-720">False</span></span>  
  
 <span data-ttu-id="9a871-721">False</span><span class="sxs-lookup"><span data-stu-id="9a871-721">False</span></span>  
  
 <span data-ttu-id="9a871-722">因為<xref:System.Type.GetConstructors>只會使用多載<xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType>並<xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>，靜態建構函式都不會計算所`for`運算式評估，也不`IsStatic`。</span><span class="sxs-lookup"><span data-stu-id="9a871-722">Because the <xref:System.Type.GetConstructors> overload uses only <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> and <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>, the static constructor is neither counted by the `for` expression nor evaluated by `IsStatic`.</span></span>  
  
 <span data-ttu-id="9a871-723">若要尋找靜態建構函式，請使用<xref:System.Type.GetConstructors%28System.Reflection.BindingFlags%29>多載，並傳遞組合 (邏輯`OR`) 的<xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType>， <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>， <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType>， <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>，如下列程式碼範例所示：</span><span class="sxs-lookup"><span data-stu-id="9a871-723">To find static constructors, use the <xref:System.Type.GetConstructors%28System.Reflection.BindingFlags%29> overload, and pass the combination (logical `OR`) of <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>, as shown in the following code example:</span></span>  
  
 [!code-cpp[Classic Type.GetConstructors Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/CPP/source2.cpp#2)]
 [!code-csharp[Classic Type.GetConstructors Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/CS/source2.cs#2)]
 [!code-vb[Classic Type.GetConstructors Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/VB/source2.vb#2)]  
  
 <span data-ttu-id="9a871-724">現在則輸出為：</span><span class="sxs-lookup"><span data-stu-id="9a871-724">Now the output is:</span></span>  
  
 <span data-ttu-id="9a871-725">3</span><span class="sxs-lookup"><span data-stu-id="9a871-725">3</span></span>  
  
 <span data-ttu-id="9a871-726">False</span><span class="sxs-lookup"><span data-stu-id="9a871-726">False</span></span>  
  
 <span data-ttu-id="9a871-727">True</span><span class="sxs-lookup"><span data-stu-id="9a871-727">True</span></span>  
  
 <span data-ttu-id="9a871-728">False</span><span class="sxs-lookup"><span data-stu-id="9a871-728">False</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.ConstructorInfo" />
        <altmember cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      </Docs>
    </Member>
    <Member MemberName="GetConstructors">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.ConstructorInfo[] GetConstructors (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ConstructorInfo[] GetConstructors(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetConstructors(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetConstructors (bindingAttr As BindingFlags) As ConstructorInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::Reflection::ConstructorInfo ^&gt; ^ GetConstructors(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetConstructors : System.Reflection.BindingFlags -&gt; System.Reflection.ConstructorInfo[]" Usage="type.GetConstructors bindingAttr" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetConstructors(System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr"><span data-ttu-id="9a871-729">位元遮罩，由一或多個 <see cref="T:System.Reflection.BindingFlags" /> 組成，而這些旗標會指定執行搜尋的方式。</span><span class="sxs-lookup"><span data-stu-id="9a871-729">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="9a871-730">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-730">-or-</span></span> 
<span data-ttu-id="9a871-731">零，傳回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-731">Zero, to return <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="9a871-732">在衍生類別中覆寫時，使用指定的 <see cref="T:System.Type" />，搜尋定義給目前 <see langword="BindingFlags" /> 的建構函式。</span><span class="sxs-lookup"><span data-stu-id="9a871-732">When overridden in a derived class, searches for the constructors defined for the current <see cref="T:System.Type" />, using the specified <see langword="BindingFlags" />.</span></span></summary>
        <returns><span data-ttu-id="9a871-733"><see cref="T:System.Reflection.ConstructorInfo" /> 物件的陣列，代表為目前 <see cref="T:System.Type" /> 定義之符合指定繫結條件約束的所有建構函式，包括類型初始設定式 (如果已定義)。</span><span class="sxs-lookup"><span data-stu-id="9a871-733">An array of <see cref="T:System.Reflection.ConstructorInfo" /> objects representing all constructors defined for the current <see cref="T:System.Type" /> that match the specified binding constraints, including the type initializer if it is defined.</span></span> <span data-ttu-id="9a871-734">如果目前的 <see cref="T:System.Reflection.ConstructorInfo" /> 沒有定義建構函式，或所定義的建構函式都不符合繫結條件約束，或目前的 <see cref="T:System.Type" /> 表示泛型類型或泛型方法定義中的型別參數，則傳回 <see cref="T:System.Type" /> 類型的空陣列。</span><span class="sxs-lookup"><span data-stu-id="9a871-734">Returns an empty array of type <see cref="T:System.Reflection.ConstructorInfo" /> if no constructors are defined for the current <see cref="T:System.Type" />, if none of the defined constructors match the binding constraints, or if the current <see cref="T:System.Type" /> represents a type parameter in the definition of a generic type or generic method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-735"><xref:System.Type.GetConstructors%2A>方法不會傳回特定的順序，例如依宣告順序的建構函式。</span><span class="sxs-lookup"><span data-stu-id="9a871-735">The <xref:System.Type.GetConstructors%2A> method does not return constructors in a particular order, such as declaration order.</span></span> <span data-ttu-id="9a871-736">您的程式碼不得相依於建構函式會傳回的順序，因為順序不同。</span><span class="sxs-lookup"><span data-stu-id="9a871-736">Your code must not depend on the order in which constructors are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="9a871-737">`bindingAttr` 可用來指定是否要傳回只有公用建構函式或公用和非公用建構函式。</span><span class="sxs-lookup"><span data-stu-id="9a871-737">`bindingAttr` can be used to specify whether to return only public constructors or both public and non-public constructors.</span></span>  
  
 <span data-ttu-id="9a871-738">如果沒有完全相符，`binder`會嘗試強制轉型中指定的參數類型`types`，就可以選取 相符項目陣列。</span><span class="sxs-lookup"><span data-stu-id="9a871-738">If an exact match does not exist, the `binder` will attempt to coerce the parameter types specified in the `types` array in order to select a match.</span></span> <span data-ttu-id="9a871-739">如果`binder`無法選取相符項目，然後`null`會傳回。</span><span class="sxs-lookup"><span data-stu-id="9a871-739">If the `binder` is unable to select a match, then `null` is returned.</span></span>  
  
 <span data-ttu-id="9a871-740">下列<xref:System.Reflection.BindingFlags>篩選器旗標可以用來定義要包含在搜尋中的建構函式：</span><span class="sxs-lookup"><span data-stu-id="9a871-740">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which constructors to include in the search:</span></span>  
  
-   <span data-ttu-id="9a871-741">您必須指定`BindingFlags.Instance`或`BindingFlags.Static`以取得傳回值。</span><span class="sxs-lookup"><span data-stu-id="9a871-741">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="9a871-742">指定`BindingFlags.Public`来包含在搜尋中的公用建構函式。</span><span class="sxs-lookup"><span data-stu-id="9a871-742">Specify `BindingFlags.Public` to include public constructors in the search.</span></span>  
  
-   <span data-ttu-id="9a871-743">指定`BindingFlags.NonPublic`要在搜尋中包含非公用建構函式 （也就是私用、 內部和受保護建構函式）。</span><span class="sxs-lookup"><span data-stu-id="9a871-743">Specify `BindingFlags.NonPublic` to include non-public constructors (that is, private, internal, and protected constructors) in the search.</span></span> <span data-ttu-id="9a871-744">不會傳回基底類別建構函式。</span><span class="sxs-lookup"><span data-stu-id="9a871-744">Constructors of base classes are not returned.</span></span>  
  
 <span data-ttu-id="9a871-745">如需詳細資訊，請參閱 <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="9a871-745">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="9a871-746">若要取得使用這個方法多載類別初始設定式 (.cctor)，您必須指定<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType>在 Visual Basic 中)。</span><span class="sxs-lookup"><span data-stu-id="9a871-746">To get the class initializer (.cctor) using this method overload, you must specify <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="9a871-747">您也可以取得類別初始設定式使用<xref:System.Type.TypeInitializer%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-747">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
 <span data-ttu-id="9a871-748">如果目前<xref:System.Type>代表建構的泛型型別，這個方法會傳回<xref:System.Reflection.ConstructorInfo>具有由適當的型別引數取代型別參數的物件。</span><span class="sxs-lookup"><span data-stu-id="9a871-748">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.ConstructorInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span> <span data-ttu-id="9a871-749">例如，如果類別`C<T>`的建構函式`C(T t1)`(`Sub New(ByVal t1 As T)`在 Visual Basic 中)，則呼叫<xref:System.Type.GetConstructors%2A>上`C<int>`傳回<xref:System.Reflection.ConstructorInfo>表示`C(int t1)`C# 中 (`Sub New(ByVal t1 As Integer)` Visual Basic 中)。</span><span class="sxs-lookup"><span data-stu-id="9a871-749">For example, if class `C<T>` has a constructor `C(T t1)` (`Sub New(ByVal t1 As T)` in Visual Basic), calling <xref:System.Type.GetConstructors%2A> on `C<int>` returns a <xref:System.Reflection.ConstructorInfo> that represents `C(int t1)` in C# (`Sub New(ByVal t1 As Integer)` in Visual Basic).</span></span>  
  
 <span data-ttu-id="9a871-750">如果目前<xref:System.Type>代表泛型類型參數，<xref:System.Type.GetConstructors%2A>方法會傳回空陣列。</span><span class="sxs-lookup"><span data-stu-id="9a871-750">If the current <xref:System.Type> represents a generic type parameter, the <xref:System.Type.GetConstructors%2A> method returns an empty array.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-751">此範例中顯示的輸出<xref:System.Type.GetConstructors>自類別具有兩個執行個體建構函式和一個靜態的建構函式多載。</span><span class="sxs-lookup"><span data-stu-id="9a871-751">This example shows the output of the <xref:System.Type.GetConstructors> overload from a class that has two instance constructors and one static constructor.</span></span>  
  
 [!code-cpp[Classic Type.GetConstructors Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/CPP/source1.cpp#1)]
 [!code-csharp[Classic Type.GetConstructors Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/CS/source1.cs#1)]
 [!code-vb[Classic Type.GetConstructors Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/VB/source1.vb#1)]  
  
 <span data-ttu-id="9a871-752">此程式碼的輸出為：</span><span class="sxs-lookup"><span data-stu-id="9a871-752">The output of this code is:</span></span>  
  
 <span data-ttu-id="9a871-753">2</span><span class="sxs-lookup"><span data-stu-id="9a871-753">2</span></span>  
  
 <span data-ttu-id="9a871-754">False</span><span class="sxs-lookup"><span data-stu-id="9a871-754">False</span></span>  
  
 <span data-ttu-id="9a871-755">False</span><span class="sxs-lookup"><span data-stu-id="9a871-755">False</span></span>  
  
 <span data-ttu-id="9a871-756">因為<xref:System.Type.GetConstructors%2A>只會使用多載<xref:System.Reflection.BindingFlags.Public>並<xref:System.Reflection.BindingFlags.Instance>，靜態建構函式都不會計算所`for`運算式評估，也不`IsStatic`。</span><span class="sxs-lookup"><span data-stu-id="9a871-756">Because the <xref:System.Type.GetConstructors%2A> overload uses only <xref:System.Reflection.BindingFlags.Public> and <xref:System.Reflection.BindingFlags.Instance>, the static constructor is neither counted by the `for` expression nor evaluated by `IsStatic`.</span></span>  
  
 <span data-ttu-id="9a871-757">若要尋找靜態建構函式，請使用<xref:System.Type.GetConstructors%2A>多載，並將它傳遞 (邏輯 OR) 的組合<xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType>， <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>， <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType>， <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>，如下列程式碼範例所示：</span><span class="sxs-lookup"><span data-stu-id="9a871-757">To find static constructors, use the <xref:System.Type.GetConstructors%2A> overload, and pass it the combination (logical OR) of <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>, as shown in the following code example:</span></span>  
  
 [!code-cpp[Classic Type.GetConstructors Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/CPP/source2.cpp#2)]
 [!code-csharp[Classic Type.GetConstructors Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/CS/source2.cs#2)]
 [!code-vb[Classic Type.GetConstructors Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/VB/source2.vb#2)]  
  
 <span data-ttu-id="9a871-758">現在則輸出為：</span><span class="sxs-lookup"><span data-stu-id="9a871-758">Now the output is:</span></span>  
  
 <span data-ttu-id="9a871-759">3</span><span class="sxs-lookup"><span data-stu-id="9a871-759">3</span></span>  
  
 <span data-ttu-id="9a871-760">False</span><span class="sxs-lookup"><span data-stu-id="9a871-760">False</span></span>  
  
 <span data-ttu-id="9a871-761">True</span><span class="sxs-lookup"><span data-stu-id="9a871-761">True</span></span>  
  
 <span data-ttu-id="9a871-762">False</span><span class="sxs-lookup"><span data-stu-id="9a871-762">False</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.ConstructorInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      </Docs>
    </Member>
    <Member MemberName="GetDefaultMembers">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MemberInfo[] GetDefaultMembers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetDefaultMembers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetDefaultMembers" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDefaultMembers () As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetDefaultMembers();" />
      <MemberSignature Language="F#" Value="abstract member GetDefaultMembers : unit -&gt; System.Reflection.MemberInfo[]&#xA;override this.GetDefaultMembers : unit -&gt; System.Reflection.MemberInfo[]" Usage="type.GetDefaultMembers " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetDefaultMembers</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9a871-763">搜尋定義給目前 <see cref="T:System.Type" /> 的成員，而它的 <see cref="T:System.Reflection.DefaultMemberAttribute" /> 已設定。</span><span class="sxs-lookup"><span data-stu-id="9a871-763">Searches for the members defined for the current <see cref="T:System.Type" /> whose <see cref="T:System.Reflection.DefaultMemberAttribute" /> is set.</span></span></summary>
        <returns><span data-ttu-id="9a871-764"><see cref="T:System.Reflection.MemberInfo" /> 物件的陣列，代表目前 <see cref="T:System.Type" /> 的所有預設成員。</span><span class="sxs-lookup"><span data-stu-id="9a871-764">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing all default members of the current <see cref="T:System.Type" />.</span></span>  
  
<span data-ttu-id="9a871-765">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-765">-or-</span></span> 
<span data-ttu-id="9a871-766"><see cref="T:System.Reflection.MemberInfo" /> 類型的空陣列 (如果目前 <see cref="T:System.Type" /> 沒有預設成員)。</span><span class="sxs-lookup"><span data-stu-id="9a871-766">An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if the current <see cref="T:System.Type" /> does not have default members.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-767"><xref:System.Type.GetDefaultMembers%2A>方法不會傳回成員以特定順序，例如依字母順序或依宣告順序。</span><span class="sxs-lookup"><span data-stu-id="9a871-767">The <xref:System.Type.GetDefaultMembers%2A> method does not return members in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="9a871-768">您的程式碼不得相依於成員會傳回的順序，因為順序不同。</span><span class="sxs-lookup"><span data-stu-id="9a871-768">Your code must not depend on the order in which members are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="9a871-769">在衍生類別可以覆寫此方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-769">This method can be overridden by a derived class.</span></span>  
  
 <span data-ttu-id="9a871-770">成員包含屬性、 方法、 欄位、 事件等等。</span><span class="sxs-lookup"><span data-stu-id="9a871-770">Members include properties, methods, fields, events, and so on.</span></span>  
  
 <span data-ttu-id="9a871-771">下表顯示基底類別成員會傳回由`Get`反映型別上時的方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-771">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="9a871-772">成員類型</span><span class="sxs-lookup"><span data-stu-id="9a871-772">Member Type</span></span>|<span data-ttu-id="9a871-773">Static</span><span class="sxs-lookup"><span data-stu-id="9a871-773">Static</span></span>|<span data-ttu-id="9a871-774">非靜態</span><span class="sxs-lookup"><span data-stu-id="9a871-774">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="9a871-775">建構函式</span><span class="sxs-lookup"><span data-stu-id="9a871-775">Constructor</span></span>|<span data-ttu-id="9a871-776">否</span><span class="sxs-lookup"><span data-stu-id="9a871-776">No</span></span>|<span data-ttu-id="9a871-777">否</span><span class="sxs-lookup"><span data-stu-id="9a871-777">No</span></span>|  
|<span data-ttu-id="9a871-778">欄位</span><span class="sxs-lookup"><span data-stu-id="9a871-778">Field</span></span>|<span data-ttu-id="9a871-779">否</span><span class="sxs-lookup"><span data-stu-id="9a871-779">No</span></span>|<span data-ttu-id="9a871-780">可以。</span><span class="sxs-lookup"><span data-stu-id="9a871-780">Yes.</span></span> <span data-ttu-id="9a871-781">欄位永遠是依名稱和簽章隱藏。</span><span class="sxs-lookup"><span data-stu-id="9a871-781">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="9a871-782">Event - 事件</span><span class="sxs-lookup"><span data-stu-id="9a871-782">Event</span></span>|<span data-ttu-id="9a871-783">不適用</span><span class="sxs-lookup"><span data-stu-id="9a871-783">Not applicable</span></span>|<span data-ttu-id="9a871-784">一般類型系統規則是繼承實作屬性的方法相同。</span><span class="sxs-lookup"><span data-stu-id="9a871-784">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="9a871-785">反映會視為由名稱和簽章隱藏屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-785">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="9a871-786">請參閱附註 2。</span><span class="sxs-lookup"><span data-stu-id="9a871-786">See note 2 below.</span></span>|  
|<span data-ttu-id="9a871-787">方法</span><span class="sxs-lookup"><span data-stu-id="9a871-787">Method</span></span>|<span data-ttu-id="9a871-788">否</span><span class="sxs-lookup"><span data-stu-id="9a871-788">No</span></span>|<span data-ttu-id="9a871-789">可以。</span><span class="sxs-lookup"><span data-stu-id="9a871-789">Yes.</span></span> <span data-ttu-id="9a871-790">（虛擬和非虛擬） 的方法可以隱藏依名稱或依名稱和簽章隱藏。</span><span class="sxs-lookup"><span data-stu-id="9a871-790">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="9a871-791">巢狀的類型</span><span class="sxs-lookup"><span data-stu-id="9a871-791">Nested Type</span></span>|<span data-ttu-id="9a871-792">否</span><span class="sxs-lookup"><span data-stu-id="9a871-792">No</span></span>|<span data-ttu-id="9a871-793">否</span><span class="sxs-lookup"><span data-stu-id="9a871-793">No</span></span>|  
|<span data-ttu-id="9a871-794">屬性</span><span class="sxs-lookup"><span data-stu-id="9a871-794">Property</span></span>|<span data-ttu-id="9a871-795">不適用</span><span class="sxs-lookup"><span data-stu-id="9a871-795">Not applicable</span></span>|<span data-ttu-id="9a871-796">一般類型系統規則是繼承實作屬性的方法相同。</span><span class="sxs-lookup"><span data-stu-id="9a871-796">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="9a871-797">反映會視為由名稱和簽章隱藏屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-797">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="9a871-798">請參閱附註 2。</span><span class="sxs-lookup"><span data-stu-id="9a871-798">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="9a871-799">依名稱和簽章隱藏會考慮所有組件的簽章，包括自訂修飾詞，傳回類型、 參數類型、 sentinels 和 unmanaged 呼叫慣例。</span><span class="sxs-lookup"><span data-stu-id="9a871-799">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="9a871-800">這是二進位比較。</span><span class="sxs-lookup"><span data-stu-id="9a871-800">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="9a871-801">反映的屬性和事件會依名稱和簽章隱藏。</span><span class="sxs-lookup"><span data-stu-id="9a871-801">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="9a871-802">如果您同時有 get 和 set 存取子的屬性在基底類別中，但衍生的類別有只有 get 存取子，在衍生的類別的屬性會隱藏基底類別屬性中，並不能存取的基底類別的 setter。</span><span class="sxs-lookup"><span data-stu-id="9a871-802">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="9a871-803">自訂屬性不屬於一般類型系統。</span><span class="sxs-lookup"><span data-stu-id="9a871-803">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="9a871-804">如果目前<xref:System.Type>代表建構的泛型型別，這個方法會傳回<xref:System.Reflection.MemberInfo>具有由適當的型別引數取代型別參數的物件。</span><span class="sxs-lookup"><span data-stu-id="9a871-804">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.MemberInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span> <span data-ttu-id="9a871-805">比方說，如果類別`C<T>`具有屬性`P`會傳回`T`，則呼叫<xref:System.Type.GetDefaultMembers%2A>上`C<int>`傳回`int P`在 C# (`Property P As Integer` Visual Basic 中)。</span><span class="sxs-lookup"><span data-stu-id="9a871-805">For example, if class `C<T>` has a property `P` that returns `T`, calling <xref:System.Type.GetDefaultMembers%2A> on `C<int>` returns `int P` in C# (`Property P As Integer` in Visual Basic).</span></span>  
  
 <span data-ttu-id="9a871-806">如果目前<xref:System.Type>代表型別參數的泛型類型或泛型方法，這個方法定義中搜尋類別條件約束的成員或成員<xref:System.Object>是否沒有類別條件約束。</span><span class="sxs-lookup"><span data-stu-id="9a871-806">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the members of the class constraint, or the members of <xref:System.Object> if there is no class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-807">下列範例會取得的預設成員資訊`MyClass`並顯示的預設成員。</span><span class="sxs-lookup"><span data-stu-id="9a871-807">The following example obtains the default member information of `MyClass` and displays the default members.</span></span>  
  
 [!code-cpp[Type_GetDefaultMembers#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetDefaultMembers/CPP/type_getdefaultmembers.cpp#1)]
 [!code-csharp[Type_GetDefaultMembers#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetDefaultMembers/CS/type_getdefaultmembers.cs#1)]
 [!code-vb[Type_GetDefaultMembers#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetDefaultMembers/VB/type_getdefaultmembers.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MemberInfo" />
        <altmember cref="T:System.Reflection.DefaultMemberAttribute" />
        <altmember cref="M:System.Type.GetMember(System.String)" />
        <altmember cref="M:System.Type.GetMembers" />
        <altmember cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetElementType">
      <MemberSignature Language="C#" Value="public abstract Type GetElementType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetElementType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetElementType" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetElementType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Type ^ GetElementType();" />
      <MemberSignature Language="F#" Value="abstract member GetElementType : unit -&gt; Type" Usage="type.GetElementType " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetElementType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9a871-808">在衍生類別中覆寫時，傳回由目前陣列、指標或參考類型所包含或參考物件的 <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-808">When overridden in a derived class, returns the <see cref="T:System.Type" /> of the object encompassed or referred to by the current array, pointer or reference type.</span></span></summary>
        <returns><span data-ttu-id="9a871-809">目前的陣列、指標或參考類型所內含或參考之物件的 <see cref="T:System.Type" />，如果目前的 <see langword="null" /> 不是陣列或指標、未以傳址方式傳遞，或表示泛型類型或泛型類型或泛型方法定義中之類型參數，則為 <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-809">The <see cref="T:System.Type" /> of the object encompassed or referred to by the current array, pointer, or reference type, or <see langword="null" /> if the current <see cref="T:System.Type" /> is not an array or a pointer, or is not passed by reference, or represents a generic type or a type parameter in the definition of a generic type or generic method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-810">這個方法會傳回`null`針對<xref:System.Array>類別。</span><span class="sxs-lookup"><span data-stu-id="9a871-810">This method returns `null` for the <xref:System.Array> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-811">下列範例示範如何使用`GetElementType`方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-811">The following example demonstrates using the `GetElementType` method.</span></span>  
  
 [!code-cpp[TestGetElementType#1](~/samples/snippets/cpp/VS_Snippets_CLR/TestGetElementType/CPP/TestGetElementType.cpp#1)]
 [!code-csharp[TestGetElementType#1](~/samples/snippets/csharp/VS_Snippets_CLR/TestGetElementType/CS/testgetelementtype.cs#1)]
 [!code-vb[TestGetElementType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TestGetElementType/VB/testgetelementtype.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.HasElementType" />
      </Docs>
    </Member>
    <Member MemberName="GetEnumName">
      <MemberSignature Language="C#" Value="public virtual string GetEnumName (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetEnumName(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetEnumName(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnumName (value As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetEnumName(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member GetEnumName : obj -&gt; string&#xA;override this.GetEnumName : obj -&gt; string" Usage="type.GetEnumName value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="9a871-812">要擷取其名稱的值。</span><span class="sxs-lookup"><span data-stu-id="9a871-812">The value whose name is to be retrieved.</span></span></param>
        <summary><span data-ttu-id="9a871-813">針對目前的列舉類型，傳回具有指定值之常數的名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-813">Returns the name of the constant that has the specified value, for the current enumeration type.</span></span></summary>
        <returns><span data-ttu-id="9a871-814">具有指定值之目前列舉類型的成員名稱，如果找不到這類常數，則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-814">The name of the member of the current enumeration type that has the specified value, or <see langword="null" /> if no such constant is found.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9a871-815">目前的類型不是列舉。</span><span class="sxs-lookup"><span data-stu-id="9a871-815">The current type is not an enumeration.</span></span>  
  
<span data-ttu-id="9a871-816">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-816">-or-</span></span> 
 <span data-ttu-id="9a871-817"><paramref name="value" /> 既不是目前類型，也沒有相同的基礎類型做為目前類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-817"><paramref name="value" /> is neither of the current type nor does it have the same underlying type as the current type.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9a871-818"><paramref name="value" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-818"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumNames">
      <MemberSignature Language="C#" Value="public virtual string[] GetEnumNames ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetEnumNames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetEnumNames" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnumNames () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::String ^&gt; ^ GetEnumNames();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumNames : unit -&gt; string[]&#xA;override this.GetEnumNames : unit -&gt; string[]" Usage="type.GetEnumNames " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9a871-819">傳回目前列舉類型之成員的名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-819">Returns the names of the members of the current enumeration type.</span></span></summary>
        <returns><span data-ttu-id="9a871-820">包含列舉之成員名稱的陣列。</span><span class="sxs-lookup"><span data-stu-id="9a871-820">An array that contains the names of the members of the enumeration.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-821">傳回值陣列的項目會依列舉常數的二進位值 （也就是不帶正負號的值） 排序。</span><span class="sxs-lookup"><span data-stu-id="9a871-821">The elements of the return value array are sorted by the binary values (that is, the unsigned values) of the enumerated constants.</span></span> <span data-ttu-id="9a871-822">如果陣列包含具有相同值的列舉的常數，其對應的名稱的順序是未指定。</span><span class="sxs-lookup"><span data-stu-id="9a871-822">If the array contains enumerated constants with the same value, the order of their corresponding names is unspecified.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9a871-823">目前的類型不是列舉。</span><span class="sxs-lookup"><span data-stu-id="9a871-823">The current type is not an enumeration.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumUnderlyingType">
      <MemberSignature Language="C#" Value="public virtual Type GetEnumUnderlyingType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetEnumUnderlyingType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetEnumUnderlyingType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnumUnderlyingType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetEnumUnderlyingType();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumUnderlyingType : unit -&gt; Type&#xA;override this.GetEnumUnderlyingType : unit -&gt; Type" Usage="type.GetEnumUnderlyingType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9a871-824">傳回目前列舉類型的基礎類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-824">Returns the underlying type of the current enumeration type.</span></span></summary>
        <returns><span data-ttu-id="9a871-825">目前列舉的基礎類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-825">The underlying type of the current enumeration.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-826">根據預設，在 C# 和 Visual Basic 中列舉的基礎型別是<xref:System.Int32>。</span><span class="sxs-lookup"><span data-stu-id="9a871-826">By default, the underlying type of an enumeration in C# and Visual Basic is <xref:System.Int32>.</span></span> <span data-ttu-id="9a871-827">您可以指定其他整數類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-827">Other integer types can be specified.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9a871-828">目前的類型不是列舉。</span><span class="sxs-lookup"><span data-stu-id="9a871-828">The current type is not an enumeration.</span></span>  
  
<span data-ttu-id="9a871-829">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-829">-or-</span></span> 
<span data-ttu-id="9a871-830">列舉類型無效，因為它包含一個以上的執行個體欄位。</span><span class="sxs-lookup"><span data-stu-id="9a871-830">The enumeration type is not valid, because it contains more than one instance field.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumValues">
      <MemberSignature Language="C#" Value="public virtual Array GetEnumValues ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Array GetEnumValues() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetEnumValues" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnumValues () As Array" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Array ^ GetEnumValues();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumValues : unit -&gt; Array&#xA;override this.GetEnumValues : unit -&gt; Array" Usage="type.GetEnumValues " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Array</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9a871-831">傳回目前列舉類型中常數的值陣列。</span><span class="sxs-lookup"><span data-stu-id="9a871-831">Returns an array of the values of the constants in the current enumeration type.</span></span></summary>
        <returns><span data-ttu-id="9a871-832">包含值的陣列。</span><span class="sxs-lookup"><span data-stu-id="9a871-832">An array that contains the values.</span></span> <span data-ttu-id="9a871-833">陣列的項目依列舉常數的二進位值 (也就是不帶正負號值) 排序。</span><span class="sxs-lookup"><span data-stu-id="9a871-833">The elements of the array are sorted by the binary values (that is, the unsigned values) of the enumeration constants.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9a871-834">目前的類型不是列舉。</span><span class="sxs-lookup"><span data-stu-id="9a871-834">The current type is not an enumeration.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetEvent">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9a871-835">取得由目前 <see cref="T:System.Type" /> 所宣告或繼承的特定事件。</span><span class="sxs-lookup"><span data-stu-id="9a871-835">Gets a specific event declared or inherited by the current <see cref="T:System.Type" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetEvent">
      <MemberSignature Language="C#" Value="public System.Reflection.EventInfo GetEvent (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.EventInfo GetEvent(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetEvent(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEvent (name As String) As EventInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::EventInfo ^ GetEvent(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetEvent : string -&gt; System.Reflection.EventInfo&#xA;override this.GetEvent : string -&gt; System.Reflection.EventInfo" Usage="type.GetEvent name" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetEvent(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="9a871-836">字串，其中包含由目前 <see cref="T:System.Type" /> 所宣告或繼承的事件名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-836">The string containing the name of an event that is declared or inherited by the current <see cref="T:System.Type" />.</span></span></param>
        <summary><span data-ttu-id="9a871-837">傳回代表指定公用事件的 <see cref="T:System.Reflection.EventInfo" /> 物件。</span><span class="sxs-lookup"><span data-stu-id="9a871-837">Returns the <see cref="T:System.Reflection.EventInfo" /> object representing the specified public event.</span></span></summary>
        <returns><span data-ttu-id="9a871-838">如果找到，則表示由目前 <see cref="T:System.Type" /> 所宣告或繼承之指定公用事件的物件；否則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-838">The object representing the specified public event that is declared or inherited by the current <see cref="T:System.Type" />, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-839">事件會被視為公用反映，是否至少一個方法或公用存取子。</span><span class="sxs-lookup"><span data-stu-id="9a871-839">An event is considered public to reflection if it has at least one method or accessor that is public.</span></span> <span data-ttu-id="9a871-840">否則，事件會視為私用，而且您必須使用<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (在 Visual Basic 中，使用值的結合`Or`) 來取得它。</span><span class="sxs-lookup"><span data-stu-id="9a871-840">Otherwise the event is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="9a871-841">搜尋`name`會區分大小寫。</span><span class="sxs-lookup"><span data-stu-id="9a871-841">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="9a871-842">搜尋包含 public static 和 public 的執行個體事件。</span><span class="sxs-lookup"><span data-stu-id="9a871-842">The search includes public static and public instance events.</span></span>  
  
 <span data-ttu-id="9a871-843">下表顯示基底類別成員會傳回由`Get`反映型別上時的方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-843">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="9a871-844">成員類型</span><span class="sxs-lookup"><span data-stu-id="9a871-844">Member Type</span></span>|<span data-ttu-id="9a871-845">Static</span><span class="sxs-lookup"><span data-stu-id="9a871-845">Static</span></span>|<span data-ttu-id="9a871-846">非靜態</span><span class="sxs-lookup"><span data-stu-id="9a871-846">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="9a871-847">建構函式</span><span class="sxs-lookup"><span data-stu-id="9a871-847">Constructor</span></span>|<span data-ttu-id="9a871-848">否</span><span class="sxs-lookup"><span data-stu-id="9a871-848">No</span></span>|<span data-ttu-id="9a871-849">否</span><span class="sxs-lookup"><span data-stu-id="9a871-849">No</span></span>|  
|<span data-ttu-id="9a871-850">欄位</span><span class="sxs-lookup"><span data-stu-id="9a871-850">Field</span></span>|<span data-ttu-id="9a871-851">否</span><span class="sxs-lookup"><span data-stu-id="9a871-851">No</span></span>|<span data-ttu-id="9a871-852">可以。</span><span class="sxs-lookup"><span data-stu-id="9a871-852">Yes.</span></span> <span data-ttu-id="9a871-853">欄位永遠是依名稱和簽章隱藏。</span><span class="sxs-lookup"><span data-stu-id="9a871-853">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="9a871-854">Event - 事件</span><span class="sxs-lookup"><span data-stu-id="9a871-854">Event</span></span>|<span data-ttu-id="9a871-855">不適用</span><span class="sxs-lookup"><span data-stu-id="9a871-855">Not applicable</span></span>|<span data-ttu-id="9a871-856">一般類型系統規則是繼承實作屬性的方法相同。</span><span class="sxs-lookup"><span data-stu-id="9a871-856">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="9a871-857">反映會視為由名稱和簽章隱藏屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-857">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="9a871-858">請參閱附註 2。</span><span class="sxs-lookup"><span data-stu-id="9a871-858">See note 2 below.</span></span>|  
|<span data-ttu-id="9a871-859">方法</span><span class="sxs-lookup"><span data-stu-id="9a871-859">Method</span></span>|<span data-ttu-id="9a871-860">否</span><span class="sxs-lookup"><span data-stu-id="9a871-860">No</span></span>|<span data-ttu-id="9a871-861">可以。</span><span class="sxs-lookup"><span data-stu-id="9a871-861">Yes.</span></span> <span data-ttu-id="9a871-862">（虛擬和非虛擬） 的方法可以隱藏依名稱或依名稱和簽章隱藏。</span><span class="sxs-lookup"><span data-stu-id="9a871-862">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="9a871-863">巢狀的類型</span><span class="sxs-lookup"><span data-stu-id="9a871-863">Nested Type</span></span>|<span data-ttu-id="9a871-864">否</span><span class="sxs-lookup"><span data-stu-id="9a871-864">No</span></span>|<span data-ttu-id="9a871-865">否</span><span class="sxs-lookup"><span data-stu-id="9a871-865">No</span></span>|  
|<span data-ttu-id="9a871-866">屬性</span><span class="sxs-lookup"><span data-stu-id="9a871-866">Property</span></span>|<span data-ttu-id="9a871-867">不適用</span><span class="sxs-lookup"><span data-stu-id="9a871-867">Not applicable</span></span>|<span data-ttu-id="9a871-868">一般類型系統規則是繼承實作屬性的方法相同。</span><span class="sxs-lookup"><span data-stu-id="9a871-868">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="9a871-869">反映會視為由名稱和簽章隱藏屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-869">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="9a871-870">請參閱附註 2。</span><span class="sxs-lookup"><span data-stu-id="9a871-870">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="9a871-871">依名稱和簽章隱藏會考慮所有組件的簽章，包括自訂修飾詞，傳回類型、 參數類型、 sentinels 和 unmanaged 呼叫慣例。</span><span class="sxs-lookup"><span data-stu-id="9a871-871">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="9a871-872">這是二進位比較。</span><span class="sxs-lookup"><span data-stu-id="9a871-872">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="9a871-873">反映的屬性和事件會依名稱和簽章隱藏。</span><span class="sxs-lookup"><span data-stu-id="9a871-873">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="9a871-874">如果您同時有 get 和 set 存取子的屬性在基底類別中，但衍生的類別有只有 get 存取子，在衍生的類別的屬性會隱藏基底類別屬性中，並不能存取的基底類別的 setter。</span><span class="sxs-lookup"><span data-stu-id="9a871-874">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="9a871-875">自訂屬性不屬於一般類型系統。</span><span class="sxs-lookup"><span data-stu-id="9a871-875">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="9a871-876">如果目前<xref:System.Type>代表建構的泛型型別，這個方法會傳回<xref:System.Reflection.EventInfo>具有由適當的型別引數取代型別參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-876">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.EventInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="9a871-877">如果目前<xref:System.Type>表示的類型參數的泛型類型或泛型方法定義，這個方法會搜尋類別條件約束的事件。</span><span class="sxs-lookup"><span data-stu-id="9a871-877">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the events of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-878">下列範例會建立<xref:System.Reflection.EventInfo>物件，並取得指定之事件的按鈕類別的事件。</span><span class="sxs-lookup"><span data-stu-id="9a871-878">The following example creates an <xref:System.Reflection.EventInfo> object and gets the event for a button class for the specified event.</span></span>  
  
 [!code-cpp[Type_GetEvent#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetEvent/CPP/type_getevent.cpp#1)]
 [!code-csharp[Type_GetEvent#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetEvent/CS/type_getevent.cs#1)]
 [!code-vb[Type_GetEvent#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetEvent/VB/type_getevent.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9a871-879"><paramref name="name" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-879"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Reflection.EventInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetEvents" />
      </Docs>
    </Member>
    <Member MemberName="GetEvent">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.EventInfo GetEvent (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.EventInfo GetEvent(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetEvent(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetEvent (name As String, bindingAttr As BindingFlags) As EventInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Reflection::EventInfo ^ GetEvent(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetEvent : string * System.Reflection.BindingFlags -&gt; System.Reflection.EventInfo" Usage="type.GetEvent (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetEvent(System.String,System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="9a871-880">字串，包含目前 <see cref="T:System.Type" /> 所宣告或繼承之事件的名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-880">The string containing the name of an event which is declared or inherited by the current <see cref="T:System.Type" />.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="9a871-881">位元遮罩，由一或多個 <see cref="T:System.Reflection.BindingFlags" /> 組成，而這些旗標會指定執行搜尋的方式。</span><span class="sxs-lookup"><span data-stu-id="9a871-881">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="9a871-882">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-882">-or-</span></span> 
<span data-ttu-id="9a871-883">零，傳回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-883">Zero, to return <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="9a871-884">在衍生類別中覆寫時，使用指定的繫結條件約束，傳回表示指定事件的 <see cref="T:System.Reflection.EventInfo" /> 物件。</span><span class="sxs-lookup"><span data-stu-id="9a871-884">When overridden in a derived class, returns the <see cref="T:System.Reflection.EventInfo" /> object representing the specified event, using the specified binding constraints.</span></span></summary>
        <returns><span data-ttu-id="9a871-885">如果找到，則表示由目前 <see cref="T:System.Type" /> 所宣告或繼承之指定事件的物件；否則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-885">The object representing the specified event that is declared or inherited by the current <see cref="T:System.Type" />, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-886">下列<xref:System.Reflection.BindingFlags>篩選器旗標可以用來定義所要包含在搜尋事件：</span><span class="sxs-lookup"><span data-stu-id="9a871-886">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which events to include in the search:</span></span>  
  
-   <span data-ttu-id="9a871-887">您必須指定`BindingFlags.Instance`或`BindingFlags.Static`以取得傳回值。</span><span class="sxs-lookup"><span data-stu-id="9a871-887">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="9a871-888">指定`BindingFlags.Public`来包含在搜尋中的公用事件。</span><span class="sxs-lookup"><span data-stu-id="9a871-888">Specify `BindingFlags.Public` to include public events in the search.</span></span>  
  
-   <span data-ttu-id="9a871-889">指定`BindingFlags.NonPublic`在搜尋中包含非公用事件 （也就是私用、 內部和受保護的事件）。</span><span class="sxs-lookup"><span data-stu-id="9a871-889">Specify `BindingFlags.NonPublic` to include non-public events (that is, private, internal, and protected events) in the search.</span></span>  
  
-   <span data-ttu-id="9a871-890">指定`BindingFlags.FlattenHierarchy`包含`public`和`protected`階層; 的靜態成員`private`中繼承類別的靜態成員不包含。</span><span class="sxs-lookup"><span data-stu-id="9a871-890">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="9a871-891">下列<xref:System.Reflection.BindingFlags>輔助鍵旗標可以用來變更搜尋的運作方式：</span><span class="sxs-lookup"><span data-stu-id="9a871-891">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="9a871-892">`BindingFlags.IgnoreCase` 忽略大小寫的`name`。</span><span class="sxs-lookup"><span data-stu-id="9a871-892">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="9a871-893">`BindingFlags.DeclaredOnly` 若要搜尋只上宣告的事件<xref:System.Type>，不只是繼承的事件。</span><span class="sxs-lookup"><span data-stu-id="9a871-893">`BindingFlags.DeclaredOnly` to search only the events declared on the <xref:System.Type>, not events that were simply inherited.</span></span>  
  
 <span data-ttu-id="9a871-894">如需詳細資訊，請參閱 <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="9a871-894">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="9a871-895">事件會被視為公用反映，是否至少一個方法或公用存取子。</span><span class="sxs-lookup"><span data-stu-id="9a871-895">An event is considered public to reflection if it has at least one method or accessor that is public.</span></span> <span data-ttu-id="9a871-896">否則，事件會視為私用，而且您必須使用<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (在 Visual Basic 中，使用值的結合`Or`) 來取得它。</span><span class="sxs-lookup"><span data-stu-id="9a871-896">Otherwise the event is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="9a871-897">如果目前<xref:System.Type>代表建構的泛型型別，這個方法會傳回<xref:System.Reflection.EventInfo>具有由適當的型別引數取代型別參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-897">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.EventInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="9a871-898">如果目前<xref:System.Type>表示的類型參數的泛型類型或泛型方法定義，這個方法會搜尋類別條件約束的事件。</span><span class="sxs-lookup"><span data-stu-id="9a871-898">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the events of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-899">下列程式碼範例會使用<xref:System.Type.GetEvent%28System.String%2CSystem.Reflection.BindingFlags%29>方法來搜尋的公用或非公用事件名為"Click"不是型別`static`(`Shared` Visual Basic 中)。</span><span class="sxs-lookup"><span data-stu-id="9a871-899">The following code example uses the <xref:System.Type.GetEvent%28System.String%2CSystem.Reflection.BindingFlags%29> method to search a type for a public or non-public event named "Click" that is not `static` (`Shared` in Visual Basic).</span></span>  
  
 [!code-cpp[Type_GetEvent1#1](~/samples/snippets/cpp/VS_Snippets_CLR/type_getevent1/CPP/type_getevent1.cpp#1)]
 [!code-csharp[Type_GetEvent1#1](~/samples/snippets/csharp/VS_Snippets_CLR/type_getevent1/CS/type_getevent1.cs#1)]
 [!code-vb[Type_GetEvent1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/type_getevent1/VB/type_getevent1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9a871-900"><paramref name="name" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-900"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Reflection.EventInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetEvents" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetEvents">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9a871-901">取得由目前 <see cref="T:System.Type" /> 所宣告或繼承的事件。</span><span class="sxs-lookup"><span data-stu-id="9a871-901">Gets the events that are declared or inherited by the current <see cref="T:System.Type" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetEvents">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.EventInfo[] GetEvents ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.EventInfo[] GetEvents() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetEvents" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEvents () As EventInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::EventInfo ^&gt; ^ GetEvents();" />
      <MemberSignature Language="F#" Value="abstract member GetEvents : unit -&gt; System.Reflection.EventInfo[]&#xA;override this.GetEvents : unit -&gt; System.Reflection.EventInfo[]" Usage="type.GetEvents " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetEvents</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9a871-902">取得由目前 <see cref="T:System.Type" /> 所宣告或繼承的所有公用事件。</span><span class="sxs-lookup"><span data-stu-id="9a871-902">Returns all the public events that are declared or inherited by the current <see cref="T:System.Type" />.</span></span></summary>
        <returns><span data-ttu-id="9a871-903"><see cref="T:System.Reflection.EventInfo" /> 物件的陣列，代表目前 <see cref="T:System.Type" /> 所宣告或繼承的所有公用事件。</span><span class="sxs-lookup"><span data-stu-id="9a871-903">An array of <see cref="T:System.Reflection.EventInfo" /> objects representing all the public events which are declared or inherited by the current <see cref="T:System.Type" />.</span></span>  
  
<span data-ttu-id="9a871-904">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-904">-or-</span></span> 
<span data-ttu-id="9a871-905"><see cref="T:System.Reflection.EventInfo" /> 類型的空陣列 (如果目前 <see cref="T:System.Type" /> 沒有公用事件)。</span><span class="sxs-lookup"><span data-stu-id="9a871-905">An empty array of type <see cref="T:System.Reflection.EventInfo" />, if the current <see cref="T:System.Type" /> does not have public events.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-906">事件會被視為公用反映，是否至少一個方法或公用存取子。</span><span class="sxs-lookup"><span data-stu-id="9a871-906">An event is considered public to reflection if it has at least one method or accessor that is public.</span></span> <span data-ttu-id="9a871-907">否則，事件會視為私用，而且您必須使用<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (在 Visual Basic 中，使用值的結合`Or`) 來取得它。</span><span class="sxs-lookup"><span data-stu-id="9a871-907">Otherwise the event is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="9a871-908"><xref:System.Type.GetEvents%2A>方法沒有傳回事件特定的順序，例如依字母順序或依宣告順序。</span><span class="sxs-lookup"><span data-stu-id="9a871-908">The <xref:System.Type.GetEvents%2A> method does not return events in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="9a871-909">您的程式碼不得相依於事件會傳回的順序，因為順序不同。</span><span class="sxs-lookup"><span data-stu-id="9a871-909">Your code must not depend on the order in which events are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="9a871-910">在衍生類別可以覆寫此方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-910">This method can be overridden by a derived class.</span></span>  
  
 <span data-ttu-id="9a871-911">下表顯示基底類別成員會傳回由`Get`反映型別上時的方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-911">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="9a871-912">成員類型</span><span class="sxs-lookup"><span data-stu-id="9a871-912">Member Type</span></span>|<span data-ttu-id="9a871-913">Static</span><span class="sxs-lookup"><span data-stu-id="9a871-913">Static</span></span>|<span data-ttu-id="9a871-914">非靜態</span><span class="sxs-lookup"><span data-stu-id="9a871-914">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="9a871-915">建構函式</span><span class="sxs-lookup"><span data-stu-id="9a871-915">Constructor</span></span>|<span data-ttu-id="9a871-916">否</span><span class="sxs-lookup"><span data-stu-id="9a871-916">No</span></span>|<span data-ttu-id="9a871-917">否</span><span class="sxs-lookup"><span data-stu-id="9a871-917">No</span></span>|  
|<span data-ttu-id="9a871-918">欄位</span><span class="sxs-lookup"><span data-stu-id="9a871-918">Field</span></span>|<span data-ttu-id="9a871-919">否</span><span class="sxs-lookup"><span data-stu-id="9a871-919">No</span></span>|<span data-ttu-id="9a871-920">可以。</span><span class="sxs-lookup"><span data-stu-id="9a871-920">Yes.</span></span> <span data-ttu-id="9a871-921">欄位永遠是依名稱和簽章隱藏。</span><span class="sxs-lookup"><span data-stu-id="9a871-921">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="9a871-922">Event - 事件</span><span class="sxs-lookup"><span data-stu-id="9a871-922">Event</span></span>|<span data-ttu-id="9a871-923">不適用</span><span class="sxs-lookup"><span data-stu-id="9a871-923">Not applicable</span></span>|<span data-ttu-id="9a871-924">一般類型系統規則是繼承實作屬性的方法相同。</span><span class="sxs-lookup"><span data-stu-id="9a871-924">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="9a871-925">反映會視為由名稱和簽章隱藏屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-925">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="9a871-926">請參閱附註 2。</span><span class="sxs-lookup"><span data-stu-id="9a871-926">See note 2 below.</span></span>|  
|<span data-ttu-id="9a871-927">方法</span><span class="sxs-lookup"><span data-stu-id="9a871-927">Method</span></span>|<span data-ttu-id="9a871-928">否</span><span class="sxs-lookup"><span data-stu-id="9a871-928">No</span></span>|<span data-ttu-id="9a871-929">可以。</span><span class="sxs-lookup"><span data-stu-id="9a871-929">Yes.</span></span> <span data-ttu-id="9a871-930">（虛擬和非虛擬） 的方法可以隱藏依名稱或依名稱和簽章隱藏。</span><span class="sxs-lookup"><span data-stu-id="9a871-930">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="9a871-931">巢狀的類型</span><span class="sxs-lookup"><span data-stu-id="9a871-931">Nested Type</span></span>|<span data-ttu-id="9a871-932">否</span><span class="sxs-lookup"><span data-stu-id="9a871-932">No</span></span>|<span data-ttu-id="9a871-933">否</span><span class="sxs-lookup"><span data-stu-id="9a871-933">No</span></span>|  
|<span data-ttu-id="9a871-934">屬性</span><span class="sxs-lookup"><span data-stu-id="9a871-934">Property</span></span>|<span data-ttu-id="9a871-935">不適用</span><span class="sxs-lookup"><span data-stu-id="9a871-935">Not applicable</span></span>|<span data-ttu-id="9a871-936">一般類型系統規則是繼承實作屬性的方法相同。</span><span class="sxs-lookup"><span data-stu-id="9a871-936">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="9a871-937">反映會視為由名稱和簽章隱藏屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-937">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="9a871-938">請參閱附註 2。</span><span class="sxs-lookup"><span data-stu-id="9a871-938">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="9a871-939">依名稱和簽章隱藏會考慮所有組件的簽章，包括自訂修飾詞，傳回類型、 參數類型、 sentinels 和 unmanaged 呼叫慣例。</span><span class="sxs-lookup"><span data-stu-id="9a871-939">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="9a871-940">這是二進位比較。</span><span class="sxs-lookup"><span data-stu-id="9a871-940">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="9a871-941">反映的屬性和事件會依名稱和簽章隱藏。</span><span class="sxs-lookup"><span data-stu-id="9a871-941">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="9a871-942">如果您同時有 get 和 set 存取子的屬性在基底類別中，但衍生的類別有只有 get 存取子，在衍生的類別的屬性會隱藏基底類別屬性中，並不能存取的基底類別的 setter。</span><span class="sxs-lookup"><span data-stu-id="9a871-942">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="9a871-943">自訂屬性不屬於一般類型系統。</span><span class="sxs-lookup"><span data-stu-id="9a871-943">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="9a871-944">如果目前<xref:System.Type>代表建構的泛型型別，這個方法會傳回<xref:System.Reflection.EventInfo>具有由適當的型別引數取代型別參數的物件。</span><span class="sxs-lookup"><span data-stu-id="9a871-944">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.EventInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="9a871-945">如果目前<xref:System.Type>表示的類型參數的泛型類型或泛型方法定義，這個方法會搜尋類別條件約束的事件。</span><span class="sxs-lookup"><span data-stu-id="9a871-945">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the events of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-946">下列範例會取得陣列<xref:System.Reflection.EventInfo>物件，則會取得所有事件`Button`類別，並顯示事件名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-946">The following example obtains an array of <xref:System.Reflection.EventInfo> objects, gets all the events for a `Button` class, and displays the event names.</span></span> <span data-ttu-id="9a871-947">若要編譯 Visual Basic 範例，請使用下列命令列：</span><span class="sxs-lookup"><span data-stu-id="9a871-947">To compile the Visual Basic example, use the following command line:</span></span>  
  
 `vbc type_getevents1.vb /r:System.Windows.Forms.dll /r:System.dll`  
  
 [!code-cpp[Type_GetEvents1#1](~/samples/snippets/cpp/VS_Snippets_CLR/type_getevents1/CPP/type_getevents1.cpp#1)]
 [!code-csharp[Type_GetEvents1#1](~/samples/snippets/csharp/VS_Snippets_CLR/type_getevents1/CS/type_getevents1.cs#1)]
 [!code-vb[Type_GetEvents1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/type_getevents1/VB/type_getevents1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.EventInfo" />
        <altmember cref="M:System.Type.GetEvent(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetEvents">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.EventInfo[] GetEvents (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.EventInfo[] GetEvents(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetEvents(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetEvents (bindingAttr As BindingFlags) As EventInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::Reflection::EventInfo ^&gt; ^ GetEvents(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetEvents : System.Reflection.BindingFlags -&gt; System.Reflection.EventInfo[]" Usage="type.GetEvents bindingAttr" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetEvents(System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr"><span data-ttu-id="9a871-948">位元遮罩，由一或多個 <see cref="T:System.Reflection.BindingFlags" /> 組成，而這些旗標會指定執行搜尋的方式。</span><span class="sxs-lookup"><span data-stu-id="9a871-948">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="9a871-949">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-949">-or-</span></span> 
<span data-ttu-id="9a871-950">零，傳回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-950">Zero, to return <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="9a871-951">在衍生類別中覆寫時，使用指定的繫結條件約束，搜尋由目前 <see cref="T:System.Type" /> 所宣告或繼承的事件。</span><span class="sxs-lookup"><span data-stu-id="9a871-951">When overridden in a derived class, searches for events that are declared or inherited by the current <see cref="T:System.Type" />, using the specified binding constraints.</span></span></summary>
        <returns><span data-ttu-id="9a871-952"><see cref="T:System.Reflection.EventInfo" /> 物件的陣列，代表目前 <see cref="T:System.Type" /> 所宣告或繼承之符合指定繫結條件約束的所有事件。</span><span class="sxs-lookup"><span data-stu-id="9a871-952">An array of <see cref="T:System.Reflection.EventInfo" /> objects representing all events that are declared or inherited by the current <see cref="T:System.Type" /> that match the specified binding constraints.</span></span>  
  
<span data-ttu-id="9a871-953">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-953">-or-</span></span> 
<span data-ttu-id="9a871-954">如果目前 <see cref="T:System.Reflection.EventInfo" /> 沒有事件，或沒有事件符合繫結條件約束，則為 <see cref="T:System.Type" /> 類型的空陣列。</span><span class="sxs-lookup"><span data-stu-id="9a871-954">An empty array of type <see cref="T:System.Reflection.EventInfo" />, if the current <see cref="T:System.Type" /> does not have events, or if none of the events match the binding constraints.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-955"><xref:System.Type.GetEvents%2A>方法沒有傳回事件特定的順序，例如依字母順序或依宣告順序。</span><span class="sxs-lookup"><span data-stu-id="9a871-955">The <xref:System.Type.GetEvents%2A> method does not return events in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="9a871-956">您的程式碼不得相依於事件會傳回的順序，因為順序不同。</span><span class="sxs-lookup"><span data-stu-id="9a871-956">Your code must not depend on the order in which events are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="9a871-957">下列<xref:System.Reflection.BindingFlags>篩選器旗標可以用來定義所要包含在搜尋事件：</span><span class="sxs-lookup"><span data-stu-id="9a871-957">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which events to include in the search:</span></span>  
  
-   <span data-ttu-id="9a871-958">您必須指定`BindingFlags.Instance`或`BindingFlags.Static`以取得傳回值。</span><span class="sxs-lookup"><span data-stu-id="9a871-958">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="9a871-959">指定`BindingFlags.Public`来包含在搜尋中的公用事件。</span><span class="sxs-lookup"><span data-stu-id="9a871-959">Specify `BindingFlags.Public` to include public events in the search.</span></span>  
  
-   <span data-ttu-id="9a871-960">指定`BindingFlags.NonPublic`在搜尋中包含非公用事件 （也就是私用、 內部和受保護的事件）。</span><span class="sxs-lookup"><span data-stu-id="9a871-960">Specify `BindingFlags.NonPublic` to include non-public events (that is, private, internal, and protected events) in the search.</span></span> <span data-ttu-id="9a871-961">只有受保護，而且會傳回基底類別上的內部事件;不會傳回基底類別上的私用事件。</span><span class="sxs-lookup"><span data-stu-id="9a871-961">Only protected and internal events on base classes are returned; private events on base classes are not returned.</span></span>  
  
-   <span data-ttu-id="9a871-962">指定`BindingFlags.FlattenHierarchy`包含`public`和`protected`階層; 的靜態成員`private`中繼承類別的靜態成員不包含。</span><span class="sxs-lookup"><span data-stu-id="9a871-962">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="9a871-963">下列<xref:System.Reflection.BindingFlags>輔助鍵旗標可以用來變更搜尋的運作方式：</span><span class="sxs-lookup"><span data-stu-id="9a871-963">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="9a871-964">`BindingFlags.DeclaredOnly` 若要搜尋只上宣告的事件<xref:System.Type>，不只是繼承的事件。</span><span class="sxs-lookup"><span data-stu-id="9a871-964">`BindingFlags.DeclaredOnly` to search only the events declared on the <xref:System.Type>, not events that were simply inherited.</span></span>  
  
 <span data-ttu-id="9a871-965">如需詳細資訊，請參閱 <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="9a871-965">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="9a871-966">事件會被視為公用反映，是否至少一個方法或公用存取子。</span><span class="sxs-lookup"><span data-stu-id="9a871-966">An event is considered public to reflection if it has at least one method or accessor that is public.</span></span> <span data-ttu-id="9a871-967">否則，事件會視為私用，而且您必須使用<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (在 Visual Basic 中，使用值的結合`Or`) 來取得它。</span><span class="sxs-lookup"><span data-stu-id="9a871-967">Otherwise the event is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="9a871-968">如果目前<xref:System.Type>代表建構的泛型型別，這個方法會傳回<xref:System.Reflection.EventInfo>具有由適當的型別引數取代型別參數的物件。</span><span class="sxs-lookup"><span data-stu-id="9a871-968">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.EventInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="9a871-969">如果目前<xref:System.Type>表示的類型參數的泛型類型或泛型方法定義，這個方法會搜尋類別條件約束的事件。</span><span class="sxs-lookup"><span data-stu-id="9a871-969">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the events of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-970">下列範例會取得陣列<xref:System.Reflection.EventInfo>符合指定的繫結旗標的物件取得的所有事件`Button`類別，並顯示事件名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-970">The following example obtains an array of <xref:System.Reflection.EventInfo> objects that match the specified binding flags, gets all the events for a `Button` class, and displays the event names.</span></span> <span data-ttu-id="9a871-971">若要編譯 Visual Basic 範例，請使用下列命令列：</span><span class="sxs-lookup"><span data-stu-id="9a871-971">To compile the Visual Basic example, use the following command line:</span></span>  
  
 `vbc type_getevents2.vb /r:System.Windows.Forms.dll /r:System.dll`  
  
 [!code-cpp[Type_GetEvents2#1](~/samples/snippets/cpp/VS_Snippets_CLR/type_getevents2/CPP/type_getevents2.cpp#1)]
 [!code-csharp[Type_GetEvents2#1](~/samples/snippets/csharp/VS_Snippets_CLR/type_getevents2/CS/type_getevents2.cs#1)]
 [!code-vb[Type_GetEvents2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/type_getevents2/VB/type_getevents2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.EventInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetEvent(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetField">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9a871-972">取得目前 <see cref="T:System.Type" /> 的特定欄位。</span><span class="sxs-lookup"><span data-stu-id="9a871-972">Gets a specific field of the current <see cref="T:System.Type" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetField">
      <MemberSignature Language="C#" Value="public System.Reflection.FieldInfo GetField (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.FieldInfo GetField(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetField(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetField (name As String) As FieldInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::FieldInfo ^ GetField(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetField : string -&gt; System.Reflection.FieldInfo&#xA;override this.GetField : string -&gt; System.Reflection.FieldInfo" Usage="type.GetField name" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetField(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="9a871-973">字串，包含要取得的資料欄位的名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-973">The string containing the name of the data field to get.</span></span></param>
        <summary><span data-ttu-id="9a871-974">搜尋具有指定名稱的公用欄位。</span><span class="sxs-lookup"><span data-stu-id="9a871-974">Searches for the public field with the specified name.</span></span></summary>
        <returns><span data-ttu-id="9a871-975">物件，代表具有指定之名稱的公用欄位 (如有找到)；否則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-975">An object representing the public field with the specified name, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-976">搜尋`name`會區分大小寫。</span><span class="sxs-lookup"><span data-stu-id="9a871-976">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="9a871-977">搜尋包含 public static 和 public 的執行個體欄位。</span><span class="sxs-lookup"><span data-stu-id="9a871-977">The search includes public static and public instance fields.</span></span>  
  
 <span data-ttu-id="9a871-978">如果目前<xref:System.Type>代表建構的泛型型別，這個方法會傳回<xref:System.Reflection.FieldInfo>具有由適當的型別引數取代型別參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-978">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.FieldInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="9a871-979">如果目前<xref:System.Type>表示的類型參數的泛型類型或泛型方法定義，這個方法會搜尋類別條件約束的欄位。</span><span class="sxs-lookup"><span data-stu-id="9a871-979">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the fields of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-980">下列範例會取得`Type`物件指定的類別，取得<xref:System.Reflection.FieldInfo>欄位的物件，並顯示欄位的值。</span><span class="sxs-lookup"><span data-stu-id="9a871-980">The following example gets the `Type` object for the specified class, obtains the <xref:System.Reflection.FieldInfo> object for the field, and displays the value of the field.</span></span>  
  
 [!code-cpp[Type_GetField#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetField/CPP/type_getfield.cpp#1)]
 [!code-csharp[Type_GetField#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetField/CS/type_getfield.cs#1)]
 [!code-vb[Type_GetField#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetField/VB/type_getfield.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9a871-981"><paramref name="name" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-981"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="9a871-982">這個 <see cref="T:System.Type" /> 物件是 <see cref="T:System.Reflection.Emit.TypeBuilder" />，尚未呼叫其 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-982">This <see cref="T:System.Type" /> object is a <see cref="T:System.Reflection.Emit.TypeBuilder" /> whose <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> method has not yet been called.</span></span></exception>
        <altmember cref="T:System.Reflection.FieldInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetFields" />
      </Docs>
    </Member>
    <Member MemberName="GetField">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.FieldInfo GetField (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.FieldInfo GetField(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetField(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetField (name As String, bindingAttr As BindingFlags) As FieldInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Reflection::FieldInfo ^ GetField(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetField : string * System.Reflection.BindingFlags -&gt; System.Reflection.FieldInfo" Usage="type.GetField (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetField(System.String,System.Reflection.BindingFlags)</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetField(System.String,System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="9a871-983">字串，包含要取得的資料欄位的名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-983">The string containing the name of the data field to get.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="9a871-984">位元遮罩，由一或多個 <see cref="T:System.Reflection.BindingFlags" /> 組成，而這些旗標會指定執行搜尋的方式。</span><span class="sxs-lookup"><span data-stu-id="9a871-984">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="9a871-985">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-985">-or-</span></span> 
<span data-ttu-id="9a871-986">零，傳回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-986">Zero, to return <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="9a871-987">使用指定的繫結條件約束搜尋指定的欄位。</span><span class="sxs-lookup"><span data-stu-id="9a871-987">Searches for the specified field, using the specified binding constraints.</span></span></summary>
        <returns><span data-ttu-id="9a871-988">代表符合指定之需求欄位的物件 (如有找到)；否則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-988">An object representing the field that matches the specified requirements, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-989">下表顯示基底類別成員會傳回由`Get`反映型別上時的方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-989">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="9a871-990">成員類型</span><span class="sxs-lookup"><span data-stu-id="9a871-990">Member Type</span></span>|<span data-ttu-id="9a871-991">Static</span><span class="sxs-lookup"><span data-stu-id="9a871-991">Static</span></span>|<span data-ttu-id="9a871-992">非靜態</span><span class="sxs-lookup"><span data-stu-id="9a871-992">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="9a871-993">建構函式</span><span class="sxs-lookup"><span data-stu-id="9a871-993">Constructor</span></span>|<span data-ttu-id="9a871-994">否</span><span class="sxs-lookup"><span data-stu-id="9a871-994">No</span></span>|<span data-ttu-id="9a871-995">否</span><span class="sxs-lookup"><span data-stu-id="9a871-995">No</span></span>|  
|<span data-ttu-id="9a871-996">欄位</span><span class="sxs-lookup"><span data-stu-id="9a871-996">Field</span></span>|<span data-ttu-id="9a871-997">否</span><span class="sxs-lookup"><span data-stu-id="9a871-997">No</span></span>|<span data-ttu-id="9a871-998">可以。</span><span class="sxs-lookup"><span data-stu-id="9a871-998">Yes.</span></span> <span data-ttu-id="9a871-999">欄位永遠是依名稱和簽章隱藏。</span><span class="sxs-lookup"><span data-stu-id="9a871-999">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="9a871-1000">Event - 事件</span><span class="sxs-lookup"><span data-stu-id="9a871-1000">Event</span></span>|<span data-ttu-id="9a871-1001">不適用</span><span class="sxs-lookup"><span data-stu-id="9a871-1001">Not applicable</span></span>|<span data-ttu-id="9a871-1002">一般類型系統規則是繼承實作屬性的方法相同。</span><span class="sxs-lookup"><span data-stu-id="9a871-1002">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="9a871-1003">反映會視為由名稱和簽章隱藏屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-1003">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="9a871-1004">請參閱附註 2。</span><span class="sxs-lookup"><span data-stu-id="9a871-1004">See note 2 below.</span></span>|  
|<span data-ttu-id="9a871-1005">方法</span><span class="sxs-lookup"><span data-stu-id="9a871-1005">Method</span></span>|<span data-ttu-id="9a871-1006">否</span><span class="sxs-lookup"><span data-stu-id="9a871-1006">No</span></span>|<span data-ttu-id="9a871-1007">可以。</span><span class="sxs-lookup"><span data-stu-id="9a871-1007">Yes.</span></span> <span data-ttu-id="9a871-1008">（虛擬和非虛擬） 的方法可以隱藏依名稱或依名稱和簽章隱藏。</span><span class="sxs-lookup"><span data-stu-id="9a871-1008">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="9a871-1009">巢狀的類型</span><span class="sxs-lookup"><span data-stu-id="9a871-1009">Nested Type</span></span>|<span data-ttu-id="9a871-1010">否</span><span class="sxs-lookup"><span data-stu-id="9a871-1010">No</span></span>|<span data-ttu-id="9a871-1011">否</span><span class="sxs-lookup"><span data-stu-id="9a871-1011">No</span></span>|  
|<span data-ttu-id="9a871-1012">屬性</span><span class="sxs-lookup"><span data-stu-id="9a871-1012">Property</span></span>|<span data-ttu-id="9a871-1013">不適用</span><span class="sxs-lookup"><span data-stu-id="9a871-1013">Not applicable</span></span>|<span data-ttu-id="9a871-1014">一般類型系統規則是繼承實作屬性的方法相同。</span><span class="sxs-lookup"><span data-stu-id="9a871-1014">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="9a871-1015">反映會視為由名稱和簽章隱藏屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-1015">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="9a871-1016">請參閱附註 2。</span><span class="sxs-lookup"><span data-stu-id="9a871-1016">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="9a871-1017">依名稱和簽章隱藏會考慮所有組件的簽章，包括自訂修飾詞，傳回類型、 參數類型、 sentinels 和 unmanaged 呼叫慣例。</span><span class="sxs-lookup"><span data-stu-id="9a871-1017">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="9a871-1018">這是二進位比較。</span><span class="sxs-lookup"><span data-stu-id="9a871-1018">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="9a871-1019">反映的屬性和事件會依名稱和簽章隱藏。</span><span class="sxs-lookup"><span data-stu-id="9a871-1019">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="9a871-1020">如果您同時有 get 和 set 存取子的屬性在基底類別中，但衍生的類別有只有 get 存取子，在衍生的類別的屬性會隱藏基底類別屬性中，並不能存取的基底類別的 setter。</span><span class="sxs-lookup"><span data-stu-id="9a871-1020">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="9a871-1021">自訂屬性不屬於一般類型系統。</span><span class="sxs-lookup"><span data-stu-id="9a871-1021">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="9a871-1022">下列<xref:System.Reflection.BindingFlags>篩選器旗標可以用來定義要包含在搜尋中的欄位：</span><span class="sxs-lookup"><span data-stu-id="9a871-1022">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which fields to include in the search:</span></span>  
  
-   <span data-ttu-id="9a871-1023">您必須指定`BindingFlags.Instance`或`BindingFlags.Static`以取得傳回值。</span><span class="sxs-lookup"><span data-stu-id="9a871-1023">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="9a871-1024">指定`BindingFlags.Public`搜尋範圍包含公用欄位。</span><span class="sxs-lookup"><span data-stu-id="9a871-1024">Specify `BindingFlags.Public` to include public fields in the search.</span></span>  
  
-   <span data-ttu-id="9a871-1025">指定`BindingFlags.NonPublic`要在搜尋中包含非公用欄位 （也就是私用、 內部和受保護欄位）。</span><span class="sxs-lookup"><span data-stu-id="9a871-1025">Specify `BindingFlags.NonPublic` to include non-public fields (that is, private, internal, and protected fields) in the search.</span></span>  
  
-   <span data-ttu-id="9a871-1026">指定`BindingFlags.FlattenHierarchy`包含`public`和`protected`階層; 的靜態成員`private`中繼承類別的靜態成員不包含。</span><span class="sxs-lookup"><span data-stu-id="9a871-1026">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="9a871-1027">下列<xref:System.Reflection.BindingFlags>輔助鍵旗標可以用來變更搜尋的運作方式：</span><span class="sxs-lookup"><span data-stu-id="9a871-1027">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="9a871-1028">`BindingFlags.IgnoreCase` 忽略大小寫的`name`。</span><span class="sxs-lookup"><span data-stu-id="9a871-1028">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="9a871-1029">`BindingFlags.DeclaredOnly` 若要搜尋只上宣告的欄位<xref:System.Type>，不只是繼承的欄位。</span><span class="sxs-lookup"><span data-stu-id="9a871-1029">`BindingFlags.DeclaredOnly` to search only the fields declared on the <xref:System.Type>, not fields that were simply inherited.</span></span>  
  
 <span data-ttu-id="9a871-1030">如需詳細資訊，請參閱 <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="9a871-1030">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="9a871-1031">如果目前<xref:System.Type>代表建構的泛型型別，這個方法會傳回<xref:System.Reflection.FieldInfo>具有由適當的型別引數取代型別參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-1031">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.FieldInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="9a871-1032">如果目前<xref:System.Type>表示的類型參數的泛型類型或泛型方法定義，這個方法會搜尋類別條件約束的欄位。</span><span class="sxs-lookup"><span data-stu-id="9a871-1032">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the fields of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-1033">下列範例會取得`Type`物件指定的類別，取得<xref:System.Reflection.FieldInfo>符合指定的繫結旗標，並顯示欄位的值之欄位的物件。</span><span class="sxs-lookup"><span data-stu-id="9a871-1033">The following example gets the `Type` object for the specified class, obtains the <xref:System.Reflection.FieldInfo> object for the field that matches the specified binding flags, and displays the value of the field.</span></span>  
  
 [!code-cpp[Type_GetField#2](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetField/CPP/type_getfield.cpp#2)]
 [!code-csharp[Type_GetField#2](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetField/CS/type_getfield.cs#2)]
 [!code-vb[Type_GetField#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetField/VB/type_getfield.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9a871-1034"><paramref name="name" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-1034"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Reflection.FieldInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetFields" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetFields">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9a871-1035">取得目前 <see cref="T:System.Type" /> 的欄位。</span><span class="sxs-lookup"><span data-stu-id="9a871-1035">Gets the fields of the current <see cref="T:System.Type" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetFields">
      <MemberSignature Language="C#" Value="public System.Reflection.FieldInfo[] GetFields ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.FieldInfo[] GetFields() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetFields" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFields () As FieldInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::FieldInfo ^&gt; ^ GetFields();" />
      <MemberSignature Language="F#" Value="abstract member GetFields : unit -&gt; System.Reflection.FieldInfo[]&#xA;override this.GetFields : unit -&gt; System.Reflection.FieldInfo[]" Usage="type.GetFields " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetFields</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9a871-1036">傳回目前 <see cref="T:System.Type" /> 的所有公用欄位。</span><span class="sxs-lookup"><span data-stu-id="9a871-1036">Returns all the public fields of the current <see cref="T:System.Type" />.</span></span></summary>
        <returns><span data-ttu-id="9a871-1037"><see cref="T:System.Reflection.FieldInfo" /> 物件的陣列，代表為目前 <see cref="T:System.Type" /> 定義的所有公用欄位。</span><span class="sxs-lookup"><span data-stu-id="9a871-1037">An array of <see cref="T:System.Reflection.FieldInfo" /> objects representing all the public fields defined for the current <see cref="T:System.Type" />.</span></span>  
  
<span data-ttu-id="9a871-1038">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-1038">-or-</span></span> 
<span data-ttu-id="9a871-1039"><see cref="T:System.Reflection.FieldInfo" /> 類型的空陣列 (如果沒有為目前 <see cref="T:System.Type" /> 定義公用欄位)。</span><span class="sxs-lookup"><span data-stu-id="9a871-1039">An empty array of type <see cref="T:System.Reflection.FieldInfo" />, if no public fields are defined for the current <see cref="T:System.Type" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-1040"><xref:System.Type.GetFields%2A>方法不會傳回欄位以特定順序，例如依字母順序或依宣告順序。</span><span class="sxs-lookup"><span data-stu-id="9a871-1040">The <xref:System.Type.GetFields%2A> method does not return fields in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="9a871-1041">您的程式碼不得相依於欄位會傳回的順序，因為順序不同。</span><span class="sxs-lookup"><span data-stu-id="9a871-1041">Your code must not depend on the order in which fields are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="9a871-1042">下表顯示基底類別成員會傳回由`Get`反映型別上時的方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-1042">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="9a871-1043">成員類型</span><span class="sxs-lookup"><span data-stu-id="9a871-1043">Member Type</span></span>|<span data-ttu-id="9a871-1044">Static</span><span class="sxs-lookup"><span data-stu-id="9a871-1044">Static</span></span>|<span data-ttu-id="9a871-1045">非靜態</span><span class="sxs-lookup"><span data-stu-id="9a871-1045">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="9a871-1046">建構函式</span><span class="sxs-lookup"><span data-stu-id="9a871-1046">Constructor</span></span>|<span data-ttu-id="9a871-1047">否</span><span class="sxs-lookup"><span data-stu-id="9a871-1047">No</span></span>|<span data-ttu-id="9a871-1048">否</span><span class="sxs-lookup"><span data-stu-id="9a871-1048">No</span></span>|  
|<span data-ttu-id="9a871-1049">欄位</span><span class="sxs-lookup"><span data-stu-id="9a871-1049">Field</span></span>|<span data-ttu-id="9a871-1050">否</span><span class="sxs-lookup"><span data-stu-id="9a871-1050">No</span></span>|<span data-ttu-id="9a871-1051">可以。</span><span class="sxs-lookup"><span data-stu-id="9a871-1051">Yes.</span></span> <span data-ttu-id="9a871-1052">欄位永遠是依名稱和簽章隱藏。</span><span class="sxs-lookup"><span data-stu-id="9a871-1052">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="9a871-1053">Event - 事件</span><span class="sxs-lookup"><span data-stu-id="9a871-1053">Event</span></span>|<span data-ttu-id="9a871-1054">不適用</span><span class="sxs-lookup"><span data-stu-id="9a871-1054">Not applicable</span></span>|<span data-ttu-id="9a871-1055">一般類型系統規則是繼承實作屬性的方法相同。</span><span class="sxs-lookup"><span data-stu-id="9a871-1055">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="9a871-1056">反映會視為由名稱和簽章隱藏屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-1056">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="9a871-1057">請參閱附註 2。</span><span class="sxs-lookup"><span data-stu-id="9a871-1057">See note 2 below.</span></span>|  
|<span data-ttu-id="9a871-1058">方法</span><span class="sxs-lookup"><span data-stu-id="9a871-1058">Method</span></span>|<span data-ttu-id="9a871-1059">否</span><span class="sxs-lookup"><span data-stu-id="9a871-1059">No</span></span>|<span data-ttu-id="9a871-1060">可以。</span><span class="sxs-lookup"><span data-stu-id="9a871-1060">Yes.</span></span> <span data-ttu-id="9a871-1061">（虛擬和非虛擬） 的方法可以隱藏依名稱或依名稱和簽章隱藏。</span><span class="sxs-lookup"><span data-stu-id="9a871-1061">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="9a871-1062">巢狀的類型</span><span class="sxs-lookup"><span data-stu-id="9a871-1062">Nested Type</span></span>|<span data-ttu-id="9a871-1063">否</span><span class="sxs-lookup"><span data-stu-id="9a871-1063">No</span></span>|<span data-ttu-id="9a871-1064">否</span><span class="sxs-lookup"><span data-stu-id="9a871-1064">No</span></span>|  
|<span data-ttu-id="9a871-1065">屬性</span><span class="sxs-lookup"><span data-stu-id="9a871-1065">Property</span></span>|<span data-ttu-id="9a871-1066">不適用</span><span class="sxs-lookup"><span data-stu-id="9a871-1066">Not applicable</span></span>|<span data-ttu-id="9a871-1067">一般類型系統規則是繼承實作屬性的方法相同。</span><span class="sxs-lookup"><span data-stu-id="9a871-1067">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="9a871-1068">反映會視為由名稱和簽章隱藏屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-1068">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="9a871-1069">請參閱附註 2。</span><span class="sxs-lookup"><span data-stu-id="9a871-1069">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="9a871-1070">依名稱和簽章隱藏會考慮所有組件的簽章，包括自訂修飾詞，傳回類型、 參數類型、 sentinels 和 unmanaged 呼叫慣例。</span><span class="sxs-lookup"><span data-stu-id="9a871-1070">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="9a871-1071">這是二進位比較。</span><span class="sxs-lookup"><span data-stu-id="9a871-1071">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="9a871-1072">反映的屬性和事件會依名稱和簽章隱藏。</span><span class="sxs-lookup"><span data-stu-id="9a871-1072">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="9a871-1073">如果您同時有 get 和 set 存取子的屬性在基底類別中，但衍生的類別有只有 get 存取子，在衍生的類別的屬性會隱藏基底類別屬性中，並不能存取的基底類別的 setter。</span><span class="sxs-lookup"><span data-stu-id="9a871-1073">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="9a871-1074">自訂屬性不屬於一般類型系統。</span><span class="sxs-lookup"><span data-stu-id="9a871-1074">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="9a871-1075">如果目前<xref:System.Type>代表建構的泛型型別，這個方法會傳回<xref:System.Reflection.FieldInfo>具有由適當的型別引數取代型別參數的物件。</span><span class="sxs-lookup"><span data-stu-id="9a871-1075">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.FieldInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="9a871-1076">如果目前<xref:System.Type>表示的類型參數的泛型類型或泛型方法定義，這個方法會搜尋類別條件約束的公用欄位。</span><span class="sxs-lookup"><span data-stu-id="9a871-1076">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the public fields of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-1077">下列範例示範使用`GetFields()`方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-1077">The following example shows a use of the `GetFields()` method.</span></span>  
  
 [!code-cpp[FieldInfo_IsSpecialName#1](~/samples/snippets/cpp/VS_Snippets_CLR/FieldInfo_IsSpecialName/CPP/fieldinfo_isspecialname.cpp#1)]
 [!code-csharp[FieldInfo_IsSpecialName#1](~/samples/snippets/csharp/VS_Snippets_CLR/FieldInfo_IsSpecialName/CS/fieldinfo_isspecialname.cs#1)]
 [!code-vb[FieldInfo_IsSpecialName#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/FieldInfo_IsSpecialName/VB/fieldinfo_isspecialname.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.FieldInfo" />
        <altmember cref="M:System.Type.GetField(System.String,System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <Member MemberName="GetFields">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.FieldInfo[] GetFields (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.FieldInfo[] GetFields(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetFields(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetFields (bindingAttr As BindingFlags) As FieldInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::Reflection::FieldInfo ^&gt; ^ GetFields(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetFields : System.Reflection.BindingFlags -&gt; System.Reflection.FieldInfo[]" Usage="type.GetFields bindingAttr" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetFields(System.Reflection.BindingFlags)</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetFields(System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr"><span data-ttu-id="9a871-1078">位元遮罩，由一或多個 <see cref="T:System.Reflection.BindingFlags" /> 組成，而這些旗標會指定執行搜尋的方式。</span><span class="sxs-lookup"><span data-stu-id="9a871-1078">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="9a871-1079">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-1079">-or-</span></span> 
<span data-ttu-id="9a871-1080">零，傳回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-1080">Zero, to return <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="9a871-1081">在衍生類別中覆寫時，使用指定的繫結條件約束，搜尋定義給目前 <see cref="T:System.Type" /> 的欄位。</span><span class="sxs-lookup"><span data-stu-id="9a871-1081">When overridden in a derived class, searches for the fields defined for the current <see cref="T:System.Type" />, using the specified binding constraints.</span></span></summary>
        <returns><span data-ttu-id="9a871-1082"><see cref="T:System.Reflection.FieldInfo" /> 物件的陣列，代表為目前 <see cref="T:System.Type" /> 定義之符合指定繫結條件約束的所有欄位。</span><span class="sxs-lookup"><span data-stu-id="9a871-1082">An array of <see cref="T:System.Reflection.FieldInfo" /> objects representing all fields defined for the current <see cref="T:System.Type" /> that match the specified binding constraints.</span></span>  
  
<span data-ttu-id="9a871-1083">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-1083">-or-</span></span> 
<span data-ttu-id="9a871-1084">如果沒有任何欄位定義給目前 <see cref="T:System.Reflection.FieldInfo" /> 的欄位，或沒有已定義的欄位符合繫結條件約束，則為 <see cref="T:System.Type" /> 類型的空陣列。</span><span class="sxs-lookup"><span data-stu-id="9a871-1084">An empty array of type <see cref="T:System.Reflection.FieldInfo" />, if no fields are defined for the current <see cref="T:System.Type" />, or if none of the defined fields match the binding constraints.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-1085"><xref:System.Type.GetFields%2A>方法不會傳回欄位以特定順序，例如依字母順序或依宣告順序。</span><span class="sxs-lookup"><span data-stu-id="9a871-1085">The <xref:System.Type.GetFields%2A> method does not return fields in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="9a871-1086">您的程式碼不得相依於欄位會傳回的順序，因為順序不同。</span><span class="sxs-lookup"><span data-stu-id="9a871-1086">Your code must not depend on the order in which fields are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="9a871-1087">下列<xref:System.Reflection.BindingFlags>篩選器旗標可以用來定義要包含在搜尋中的欄位：</span><span class="sxs-lookup"><span data-stu-id="9a871-1087">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which fields to include in the search:</span></span>  
  
-   <span data-ttu-id="9a871-1088">您必須指定`BindingFlags.Instance`或`BindingFlags.Static`以取得傳回值。</span><span class="sxs-lookup"><span data-stu-id="9a871-1088">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="9a871-1089">指定`BindingFlags.Public`搜尋範圍包含公用欄位。</span><span class="sxs-lookup"><span data-stu-id="9a871-1089">Specify `BindingFlags.Public` to include public fields in the search.</span></span>  
  
-   <span data-ttu-id="9a871-1090">指定`BindingFlags.NonPublic`要在搜尋中包含非公用欄位 （也就是私用、 內部和受保護欄位）。</span><span class="sxs-lookup"><span data-stu-id="9a871-1090">Specify `BindingFlags.NonPublic` to include non-public fields (that is, private, internal, and protected fields) in the search.</span></span> <span data-ttu-id="9a871-1091">只有受保護，而且會傳回基底類別上的內部欄位;不會傳回基底類別上的私用欄位。</span><span class="sxs-lookup"><span data-stu-id="9a871-1091">Only protected and internal fields on base classes are returned; private fields on base classes are not returned.</span></span>  
  
-   <span data-ttu-id="9a871-1092">指定`BindingFlags.FlattenHierarchy`包含`public`和`protected`階層; 的靜態成員`private`中繼承類別的靜態成員不包含。</span><span class="sxs-lookup"><span data-stu-id="9a871-1092">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="9a871-1093">下列<xref:System.Reflection.BindingFlags>輔助鍵旗標可以用來變更搜尋的運作方式：</span><span class="sxs-lookup"><span data-stu-id="9a871-1093">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="9a871-1094">`BindingFlags.DeclaredOnly` 若要搜尋只上宣告的欄位<xref:System.Type>，不只是繼承的欄位。</span><span class="sxs-lookup"><span data-stu-id="9a871-1094">`BindingFlags.DeclaredOnly` to search only the fields declared on the <xref:System.Type>, not fields that were simply inherited.</span></span>  
  
 <span data-ttu-id="9a871-1095">如需詳細資訊，請參閱 <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="9a871-1095">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="9a871-1096">如果目前<xref:System.Type>代表建構的泛型型別，這個方法會傳回<xref:System.Reflection.FieldInfo>具有由適當的型別引數取代型別參數的物件。</span><span class="sxs-lookup"><span data-stu-id="9a871-1096">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.FieldInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="9a871-1097">如果目前<xref:System.Type>表示的類型參數的泛型類型或泛型方法定義，這個方法會搜尋類別條件約束的公用欄位。</span><span class="sxs-lookup"><span data-stu-id="9a871-1097">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the public fields of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-1098">下列範例示範使用`GetFields(BindingFlags)`方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-1098">The following example shows a use of the `GetFields(BindingFlags)` method.</span></span>  
  
 [!code-cpp[Classic MethodBase.Attributes Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic MethodBase.Attributes Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MethodBase.Attributes Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic MethodBase.Attributes Example/CS/source.cs#1)]
 [!code-vb[Classic MethodBase.Attributes Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic MethodBase.Attributes Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.FieldInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetField(System.String,System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <Member MemberName="GetGenericArguments">
      <MemberSignature Language="C#" Value="public virtual Type[] GetGenericArguments ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetGenericArguments() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetGenericArguments" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGenericArguments () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;Type ^&gt; ^ GetGenericArguments();" />
      <MemberSignature Language="F#" Value="abstract member GetGenericArguments : unit -&gt; Type[]&#xA;override this.GetGenericArguments : unit -&gt; Type[]" Usage="type.GetGenericArguments " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9a871-1099">傳回 <see cref="T:System.Type" /> 物件的陣列，代表封閉泛型類型的型別引數，或泛型類型定義的型別參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-1099">Returns an array of <see cref="T:System.Type" /> objects that represent the type arguments of a closed generic type or the type parameters of a generic type definition.</span></span></summary>
        <returns><span data-ttu-id="9a871-1100">由 <see cref="T:System.Type" /> 物件組成的陣列，代表泛型類型的類型引數。</span><span class="sxs-lookup"><span data-stu-id="9a871-1100">An array of <see cref="T:System.Type" /> objects that represent the type arguments of a generic type.</span></span> <span data-ttu-id="9a871-1101">如果目前的類型不是泛型類型，則傳回空的陣列。</span><span class="sxs-lookup"><span data-stu-id="9a871-1101">Returns an empty array if the current type is not a generic type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-1102">陣列項目會以其出現在類型引數的泛型型別清單的順序傳回。</span><span class="sxs-lookup"><span data-stu-id="9a871-1102">The array elements are returned in the order in which they appear in the list of type arguments for the generic type.</span></span>  
  
-   <span data-ttu-id="9a871-1103">如果目前的型別是封閉式的建構型別 (亦即<xref:System.Type.ContainsGenericParameters%2A>屬性會傳回`false`)，所傳回的陣列<xref:System.Type.GetGenericArguments%2A>方法包含已指派給泛型類型定義的泛型類型參數的型別.</span><span class="sxs-lookup"><span data-stu-id="9a871-1103">If the current type is a closed constructed type (that is, the <xref:System.Type.ContainsGenericParameters%2A> property returns `false`), the array returned by the <xref:System.Type.GetGenericArguments%2A> method contains the types that have been assigned to the generic type parameters of the generic type definition.</span></span>  
  
-   <span data-ttu-id="9a871-1104">如果目前的類型是泛型類型定義，陣列會包含型別參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-1104">If the current type is a generic type definition, the array contains the type parameters.</span></span>  
  
-   <span data-ttu-id="9a871-1105">如果目前的型別是開放式建構的類型 (亦即<xref:System.Type.ContainsGenericParameters%2A>屬性會傳回`true`) 中的所有型別參數和封閉式泛型類型或方法的型別參數尚未指派哪一個特定的類型，此陣列包含型別和型別參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-1105">If the current type is an open constructed type (that is, the <xref:System.Type.ContainsGenericParameters%2A> property returns `true`) in which specific types have not been assigned to all of the type parameters and type parameters of enclosing generic types or methods, the array contains both types and type parameters.</span></span> <span data-ttu-id="9a871-1106">使用<xref:System.Type.IsGenericParameter%2A>辨別這兩者的屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-1106">Use the <xref:System.Type.IsGenericParameter%2A> property to tell them apart.</span></span> <span data-ttu-id="9a871-1107">如需示範此案例中，請參閱的程式碼範例<xref:System.Type.ContainsGenericParameters%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-1107">For a demonstration of this scenario, see the code example for the <xref:System.Type.ContainsGenericParameters%2A> property.</span></span>  
  
 <span data-ttu-id="9a871-1108">如需泛型反映中所使用之規範的恆成立條件清單，請參閱 <xref:System.Type.IsGenericType%2A> 屬性備註。</span><span class="sxs-lookup"><span data-stu-id="9a871-1108">For a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property remarks.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-1109">下列程式碼範例使用<xref:System.Type.GetGenericArguments%2A>来顯示的型別引數建構的型別以及其泛型型別定義的類型參數的方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-1109">The following code example uses the <xref:System.Type.GetGenericArguments%2A> method to display the type arguments of a constructed type and the type parameters of its generic type definition.</span></span>  
  
 <span data-ttu-id="9a871-1110">此程式碼範例是針對提供之較大範例的一部分<xref:System.Type.IsGenericTypeDefinition%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-1110">This code example is part of a larger example provided for the <xref:System.Type.IsGenericTypeDefinition%2A> property.</span></span> <span data-ttu-id="9a871-1111">請參閱範例輸出的較大範例。</span><span class="sxs-lookup"><span data-stu-id="9a871-1111">See the larger example for sample output.</span></span>  
  
 [!code-cpp[System.Type.IsGenericTypeDefinition#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.IsGenericTypeDefinition/CPP/source.cpp#2)]
 [!code-csharp[System.Type.IsGenericTypeDefinition#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.IsGenericTypeDefinition/CS/source.cs#2)]
 [!code-vb[System.Type.IsGenericTypeDefinition#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.IsGenericTypeDefinition/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="9a871-1112">基底類別不支援叫用的方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-1112">The invoked method is not supported in the base class.</span></span> <span data-ttu-id="9a871-1113">衍生類別必須提供實作。</span><span class="sxs-lookup"><span data-stu-id="9a871-1113">Derived classes must provide an implementation.</span></span></exception>
        <altmember cref="P:System.Type.ContainsGenericParameters" />
        <altmember cref="P:System.Type.IsGenericTypeDefinition" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/reflection-and-generic-types.md"><span data-ttu-id="9a871-1114">反映和泛用類型</span><span class="sxs-lookup"><span data-stu-id="9a871-1114">Reflection and Generic Types</span></span></related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-examine-and-instantiate-generic-types-with-reflection.md"><span data-ttu-id="9a871-1115">如何：使用反映檢視和執行個體化泛型類型</span><span class="sxs-lookup"><span data-stu-id="9a871-1115">How to: Examine and Instantiate Generic Types with Reflection</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetGenericParameterConstraints">
      <MemberSignature Language="C#" Value="public virtual Type[] GetGenericParameterConstraints ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetGenericParameterConstraints() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetGenericParameterConstraints" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGenericParameterConstraints () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;Type ^&gt; ^ GetGenericParameterConstraints();" />
      <MemberSignature Language="F#" Value="abstract member GetGenericParameterConstraints : unit -&gt; Type[]&#xA;override this.GetGenericParameterConstraints : unit -&gt; Type[]" Usage="type.GetGenericParameterConstraints " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9a871-1116">傳回由 <see cref="T:System.Type" /> 物件組成的陣列，這些物件代表對目前泛型類型參數所設下的條件約束。</span><span class="sxs-lookup"><span data-stu-id="9a871-1116">Returns an array of <see cref="T:System.Type" /> objects that represent the constraints on the current generic type parameter.</span></span></summary>
        <returns><span data-ttu-id="9a871-1117">由 <see cref="T:System.Type" /> 物件組成的陣列，這些物件代表對目前泛型型別參數所設下的條件約束。</span><span class="sxs-lookup"><span data-stu-id="9a871-1117">An array of <see cref="T:System.Type" /> objects that represent the constraints on the current generic type parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-1118">泛型類型參數上的每個條件約束會表示為<xref:System.Type>物件。</span><span class="sxs-lookup"><span data-stu-id="9a871-1118">Each constraint on a generic type parameter is expressed as a <xref:System.Type> object.</span></span> <span data-ttu-id="9a871-1119">使用<xref:System.Type.IsClass%2A>屬性來判斷條件約束是否是基底類別條件約束; 如果這個屬性傳回`false`，條件約束是介面條件約束。</span><span class="sxs-lookup"><span data-stu-id="9a871-1119">Use the <xref:System.Type.IsClass%2A> property to determine whether a constraint is the base class constraint; if the property returns `false`, the constraint is an interface constraint.</span></span> <span data-ttu-id="9a871-1120">如果類型參數有沒有類別條件約束和介面條件約束，則會傳回空陣列。</span><span class="sxs-lookup"><span data-stu-id="9a871-1120">If a type parameter has no class constraint and no interface constraints, an empty array is returned.</span></span>  
  
 <span data-ttu-id="9a871-1121">如需泛型反映中所使用之規範的恆成立條件清單，請參閱 <xref:System.Type.IsGenericType%2A> 屬性備註。</span><span class="sxs-lookup"><span data-stu-id="9a871-1121">For a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property remarks.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-1122">下列程式碼範例會定義泛型型別`Test`具有兩個具有不同的條件約束的型別參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-1122">The following code example defines a generic type `Test` with two type parameters that have different constraints.</span></span> <span data-ttu-id="9a871-1123">當程式執行時，條件約束會檢查使用<xref:System.Type.GenericParameterAttributes%2A>屬性和<xref:System.Type.GetGenericParameterConstraints%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-1123">When the program executes, the constraints are examined using the <xref:System.Type.GenericParameterAttributes%2A> property and the <xref:System.Type.GetGenericParameterConstraints%2A> method.</span></span>  
  
 [!code-cpp[System.Type.GetGenericParameterConstraints#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.GetGenericParameterConstraints/CPP/source.cpp#1)]
 [!code-csharp[System.Type.GetGenericParameterConstraints#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.GetGenericParameterConstraints/CS/source.cs#1)]
 [!code-vb[System.Type.GetGenericParameterConstraints#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.GetGenericParameterConstraints/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9a871-1124">目前的 <see cref="T:System.Type" /> 物件不是泛型型別參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-1124">The current <see cref="T:System.Type" /> object is not a generic type parameter.</span></span> <span data-ttu-id="9a871-1125">亦即，<see cref="P:System.Type.IsGenericParameter" /> 屬性會傳回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-1125">That is, the <see cref="P:System.Type.IsGenericParameter" /> property returns <see langword="false" />.</span></span></exception>
        <altmember cref="P:System.Type.GenericParameterAttributes" />
        <altmember cref="P:System.Type.IsGenericParameter" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-examine-and-instantiate-generic-types-with-reflection.md"><span data-ttu-id="9a871-1126">如何：使用反映檢視和執行個體化泛型類型</span><span class="sxs-lookup"><span data-stu-id="9a871-1126">How to: Examine and Instantiate Generic Types with Reflection</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetGenericTypeDefinition">
      <MemberSignature Language="C#" Value="public virtual Type GetGenericTypeDefinition ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetGenericTypeDefinition() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetGenericTypeDefinition" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGenericTypeDefinition () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetGenericTypeDefinition();" />
      <MemberSignature Language="F#" Value="abstract member GetGenericTypeDefinition : unit -&gt; Type&#xA;override this.GetGenericTypeDefinition : unit -&gt; Type" Usage="type.GetGenericTypeDefinition " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9a871-1127">傳回代表泛型類型定義的 <see cref="T:System.Type" /> 物件，利用此泛型類型定義就可以建構出目前的泛型類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-1127">Returns a <see cref="T:System.Type" /> object that represents a generic type definition from which the current generic type can be constructed.</span></span></summary>
        <returns><span data-ttu-id="9a871-1128">代表泛型類型的 <see cref="T:System.Type" /> 物件，利用此泛型類型就可以建構出目前的類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-1128">A <see cref="T:System.Type" /> object representing a generic type from which the current type can be constructed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-1129">泛型類型定義是可從中建構其他類型的範本。</span><span class="sxs-lookup"><span data-stu-id="9a871-1129">A generic type definition is a template from which other types can be constructed.</span></span> <span data-ttu-id="9a871-1130">例如，從泛型類型定義`G<T>`（以 C# 語法;`G(Of T)`在 Visual Basic 或`generic <typename T> ref class G`c + + 中) 您可以建構和具現化型別`G<int>`(`G(Of Integer)` Visual Basic 中)。</span><span class="sxs-lookup"><span data-stu-id="9a871-1130">For example, from the generic type definition `G<T>` (expressed in C# syntax; `G(Of T)` in Visual Basic or `generic <typename T> ref class G` in C++) you can construct and instantiate the type `G<int>` (`G(Of Integer)` in Visual Basic).</span></span> <span data-ttu-id="9a871-1131">給定<xref:System.Type>物件，代表這個建構的型別，<xref:System.Type.GetGenericTypeDefinition%2A>方法會傳回泛型型別定義。</span><span class="sxs-lookup"><span data-stu-id="9a871-1131">Given a <xref:System.Type> object representing this constructed type, the <xref:System.Type.GetGenericTypeDefinition%2A> method returns the generic type definition.</span></span>  
  
 <span data-ttu-id="9a871-1132">如果兩個建構的型別會建立從相同的泛型類型定義中，使用相同的型別引數，<xref:System.Type.GetGenericTypeDefinition%2A>方法會傳回相同<xref:System.Type>這兩種類型的物件。</span><span class="sxs-lookup"><span data-stu-id="9a871-1132">If two constructed types are created from the same generic type definition, using the same type arguments, the <xref:System.Type.GetGenericTypeDefinition%2A> method returns the same <xref:System.Type> object for both types.</span></span>  
  
 <span data-ttu-id="9a871-1133">如果您呼叫<xref:System.Type.GetGenericTypeDefinition%2A>方法<xref:System.Type>物件，已表示泛型類型定義，它會傳回目前<xref:System.Type>。</span><span class="sxs-lookup"><span data-stu-id="9a871-1133">If you call the <xref:System.Type.GetGenericTypeDefinition%2A> method on a <xref:System.Type> object that already represents a generic type definition, it returns the current <xref:System.Type>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9a871-1134">泛型類型的陣列不是泛型本身。</span><span class="sxs-lookup"><span data-stu-id="9a871-1134">An array of generic types is not itself generic.</span></span> <span data-ttu-id="9a871-1135">在 C# 程式碼`A<int>[] v;`或 Visual Basic 程式碼`Dim v() As A(Of Integer)`，變數的型別`v`不是泛型。</span><span class="sxs-lookup"><span data-stu-id="9a871-1135">In the C# code `A<int>[] v;` or the Visual Basic code `Dim v() As A(Of Integer)`, the type of variable `v` is not generic.</span></span> <span data-ttu-id="9a871-1136">使用<xref:System.Type.IsGenericType%2A>來判斷類型是否為泛型之前先呼叫<xref:System.Type.GetGenericTypeDefinition%2A>。</span><span class="sxs-lookup"><span data-stu-id="9a871-1136">Use <xref:System.Type.IsGenericType%2A> to determine whether a type is generic before calling <xref:System.Type.GetGenericTypeDefinition%2A>.</span></span>  
  
 <span data-ttu-id="9a871-1137">如需泛型反映中所使用之規範的恆成立條件清單，請參閱 <xref:System.Type.IsGenericType%2A> 屬性備註。</span><span class="sxs-lookup"><span data-stu-id="9a871-1137">For a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property remarks.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-1138">下列程式碼範例會建構類型的執行個體建立使用一般的執行個體建立，並接著會使用<xref:System.Type.GetType%2A>和<xref:System.Type.GetGenericTypeDefinition%2A>方法來擷取建構的型別和泛型型別定義。</span><span class="sxs-lookup"><span data-stu-id="9a871-1138">The following code example creates an instance of a constructed type by using ordinary instance creation and then uses the <xref:System.Type.GetType%2A> and <xref:System.Type.GetGenericTypeDefinition%2A> methods to retrieve the constructed type and the generic type definition.</span></span> <span data-ttu-id="9a871-1139">此範例中使用泛型<xref:System.Collections.Generic.Dictionary%602>型別，建構的型別代表<xref:System.Collections.Generic.Dictionary%602>的`Test`具有字串索引鍵的物件。</span><span class="sxs-lookup"><span data-stu-id="9a871-1139">This example uses the generic <xref:System.Collections.Generic.Dictionary%602> type; the constructed type represents a <xref:System.Collections.Generic.Dictionary%602> of `Test` objects with string keys.</span></span>  
  
 [!code-cpp[System.Type.GetGenericTypeDefinition#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.GetGenericTypeDefinition/CPP/source.cpp#1)]
 [!code-csharp[System.Type.GetGenericTypeDefinition#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.GetGenericTypeDefinition/CS/source.cs#1)]
 [!code-vb[System.Type.GetGenericTypeDefinition#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.GetGenericTypeDefinition/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9a871-1140">目前的類型不是泛型類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-1140">The current type is not a generic type.</span></span>  <span data-ttu-id="9a871-1141">亦即，<see cref="P:System.Type.IsGenericType" /> 會傳回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-1141">That is, <see cref="P:System.Type.IsGenericType" /> returns <see langword="false" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="9a871-1142">基底類別不支援叫用的方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-1142">The invoked method is not supported in the base class.</span></span> <span data-ttu-id="9a871-1143">衍生類別必須提供實作。</span><span class="sxs-lookup"><span data-stu-id="9a871-1143">Derived classes must provide an implementation.</span></span></exception>
        <altmember cref="M:System.Type.MakeGenericType(System.Type[])" />
        <altmember cref="P:System.Type.ContainsGenericParameters" />
        <altmember cref="P:System.Type.IsGenericTypeDefinition" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/reflection-and-generic-types.md"><span data-ttu-id="9a871-1144">反映和泛用類型</span><span class="sxs-lookup"><span data-stu-id="9a871-1144">Reflection and Generic Types</span></span></related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-examine-and-instantiate-generic-types-with-reflection.md"><span data-ttu-id="9a871-1145">如何：使用反映檢視和執行個體化泛型類型</span><span class="sxs-lookup"><span data-stu-id="9a871-1145">How to: Examine and Instantiate Generic Types with Reflection</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="type.GetHashCode " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetHashCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9a871-1146">傳回這個執行個體的雜湊碼。</span><span class="sxs-lookup"><span data-stu-id="9a871-1146">Returns the hash code for this instance.</span></span></summary>
        <returns><span data-ttu-id="9a871-1147">這個執行個體的雜湊碼。</span><span class="sxs-lookup"><span data-stu-id="9a871-1147">The hash code for this instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-1148">這個方法會覆寫 <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="9a871-1148">This method overrides <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-1149">下列範例顯示的雜湊碼`System.Windows.Forms.Button`類別。</span><span class="sxs-lookup"><span data-stu-id="9a871-1149">The following example displays the hash code of the `System.Windows.Forms.Button` class.</span></span>  
  
 [!code-cpp[Type_GetHashCode_GetFields#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetHashCode_GetFields/CPP/type_gethashcode_getfields.cpp#1)]
 [!code-csharp[Type_GetHashCode_GetFields#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetHashCode_GetFields/CS/type_gethashcode_getfields.cs#1)]
 [!code-vb[Type_GetHashCode_GetFields#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetHashCode_GetFields/VB/type_gethashcode_getfields.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetInterface">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9a871-1150">取得由目前 <see cref="T:System.Type" /> 所實作或繼承的特定介面。</span><span class="sxs-lookup"><span data-stu-id="9a871-1150">Gets a specific interface implemented or inherited by the current <see cref="T:System.Type" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetInterface">
      <MemberSignature Language="C#" Value="public Type GetInterface (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetInterface(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetInterface(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInterface (name As String) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetInterface(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetInterface : string -&gt; Type&#xA;override this.GetInterface : string -&gt; Type" Usage="type.GetInterface name" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetInterface(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="9a871-1151">字串，包含要取得的介面名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-1151">The string containing the name of the interface to get.</span></span> <span data-ttu-id="9a871-1152">若為泛型介面，則為 mangled 名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-1152">For generic interfaces, this is the mangled name.</span></span></param>
        <summary><span data-ttu-id="9a871-1153">搜尋具有指定名稱的介面。</span><span class="sxs-lookup"><span data-stu-id="9a871-1153">Searches for the interface with the specified name.</span></span></summary>
        <returns><span data-ttu-id="9a871-1154">物件，代表具有指定之名稱的介面是由目前 <see cref="T:System.Type" /> 所實作或繼承的 (如有找到)；否則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-1154">An object representing the interface with the specified name, implemented or inherited by the current <see cref="T:System.Type" />, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-1155">搜尋`name`會區分大小寫。</span><span class="sxs-lookup"><span data-stu-id="9a871-1155">The search for `name` is case-sensitive.</span></span>  
  
 <span data-ttu-id="9a871-1156">如果目前<xref:System.Type>代表建構的泛型型別，這個方法會傳回<xref:System.Type>具有由適當的型別引數取代型別參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-1156">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Type> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="9a871-1157">如果目前<xref:System.Type>代表型別參數定義中的泛型類型或泛型方法，這個方法會搜尋介面條件約束和繼承自類別或介面條件約束的任何介面。</span><span class="sxs-lookup"><span data-stu-id="9a871-1157">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the interface constraints and any interfaces inherited from class or interface constraints.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9a871-1158">泛型介面，如`name`參數是損害的名稱，結尾抑音符號 (\`) 和型別參數數目。</span><span class="sxs-lookup"><span data-stu-id="9a871-1158">For generic interfaces, the `name` parameter is the mangled name, ending with a grave accent (\`) and the number of type parameters.</span></span> <span data-ttu-id="9a871-1159">這是泛型介面定義和建構的泛型介面，則為 true。</span><span class="sxs-lookup"><span data-stu-id="9a871-1159">This is true for both generic interface definitions and constructed generic interfaces.</span></span> <span data-ttu-id="9a871-1160">例如，若要尋找`IExample<T>`(`IExample(Of T)` Visual Basic 中) 或`IExample<string>`(`IExample(Of String)` Visual Basic 中)，搜尋``"IExample`1"``。</span><span class="sxs-lookup"><span data-stu-id="9a871-1160">For example, to find `IExample<T>` (`IExample(Of T)` in Visual Basic) or `IExample<string>` (`IExample(Of String)` in Visual Basic), search for ``"IExample`1"``.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-1161">下列程式碼範例會使用<xref:System.Type.GetInterface%28System.String%29>方法來搜尋<xref:System.Collections.Hashtable>類別<xref:System.Runtime.Serialization.IDeserializationCallback>介面，並列出介面的方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-1161">The following code example uses the <xref:System.Type.GetInterface%28System.String%29> method to search the <xref:System.Collections.Hashtable> class for the <xref:System.Runtime.Serialization.IDeserializationCallback> interface, and lists the methods of the interface.</span></span>  
  
 <span data-ttu-id="9a871-1162">在程式碼範例也會示範<xref:System.Type.GetInterface%28System.String%2CSystem.Boolean%29>方法多載和<xref:System.Type.GetInterfaceMap%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-1162">The code example also demonstrates the <xref:System.Type.GetInterface%28System.String%2CSystem.Boolean%29> method overload and the <xref:System.Type.GetInterfaceMap%2A> method.</span></span>  
  
 [!code-cpp[Type_GetInterface#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetInterface/CPP/type_getinterface.cpp#1)]
 [!code-csharp[Type_GetInterface#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetInterface/CS/type_getinterface.cs#1)]
 [!code-vb[Type_GetInterface#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetInterface/VB/type_getinterface.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9a871-1163"><paramref name="name" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-1163"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Reflection.AmbiguousMatchException"><span data-ttu-id="9a871-1164">目前的 <see cref="T:System.Type" /> 代表實作具有不同型別引數之相同泛型介面的類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-1164">The current <see cref="T:System.Type" /> represents a type that implements the same generic interface with different type arguments.</span></span></exception>
        <altmember cref="T:System.String" />
        <altmember cref="M:System.Type.GetInterfaces" />
        <altmember cref="M:System.Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetInterface">
      <MemberSignature Language="C#" Value="public abstract Type GetInterface (string name, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetInterface(string name, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetInterface(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetInterface (name As String, ignoreCase As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Type ^ GetInterface(System::String ^ name, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="abstract member GetInterface : string * bool -&gt; Type" Usage="type.GetInterface (name, ignoreCase)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetInterface(System.String,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="9a871-1165">字串，包含要取得的介面名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-1165">The string containing the name of the interface to get.</span></span> <span data-ttu-id="9a871-1166">若為泛型介面，則為 mangled 名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-1166">For generic interfaces, this is the mangled name.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="9a871-1167"><see langword="true" />，便會忽略 <paramref name="name" /> 中指定簡單介面名稱之該部分的大小寫 (指定命名空間的部分必須使用正確的大小寫)。</span><span class="sxs-lookup"><span data-stu-id="9a871-1167"><see langword="true" /> to ignore the case of that part of <paramref name="name" /> that specifies the simple interface name (the part that specifies the namespace must be correctly cased).</span></span>  
  
<span data-ttu-id="9a871-1168">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-1168">-or-</span></span> 
 <span data-ttu-id="9a871-1169"><see langword="false" /> 表示對 <paramref name="name" /> 的所有部分執行區分大小寫的搜尋。</span><span class="sxs-lookup"><span data-stu-id="9a871-1169"><see langword="false" /> to perform a case-sensitive search for all parts of <paramref name="name" />.</span></span></param>
        <summary><span data-ttu-id="9a871-1170">在衍生類別中覆寫時，指定是否針對介面名稱以不區分大小寫的方式來搜尋指定的介面。</span><span class="sxs-lookup"><span data-stu-id="9a871-1170">When overridden in a derived class, searches for the specified interface, specifying whether to do a case-insensitive search for the interface name.</span></span></summary>
        <returns><span data-ttu-id="9a871-1171">物件，代表具有指定之名稱的介面是由目前 <see cref="T:System.Type" /> 所實作或繼承的 (如有找到)；否則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-1171">An object representing the interface with the specified name, implemented or inherited by the current <see cref="T:System.Type" />, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-1172">`ignoreCase`參數只適用於簡單介面名稱，不到命名空間。</span><span class="sxs-lookup"><span data-stu-id="9a871-1172">The `ignoreCase` parameter applies only to the simple interface name, not to the namespace.</span></span> <span data-ttu-id="9a871-1173">部分`name`指定命名空間必須有正確的大小寫，或將找不到介面。</span><span class="sxs-lookup"><span data-stu-id="9a871-1173">The portion of `name` that specifies the namespace must have the correct case, or the interface will not be found.</span></span> <span data-ttu-id="9a871-1174">例如，字串"System.icomparable 」 尋找<xref:System.IComparable>介面，但字串"system.icomparable 」 沒有作用。</span><span class="sxs-lookup"><span data-stu-id="9a871-1174">For example, the string "System.icomparable" finds the <xref:System.IComparable> interface, but the string "system.icomparable" does not.</span></span>  
  
 <span data-ttu-id="9a871-1175">如果目前<xref:System.Type>代表建構的泛型型別，這個方法會傳回<xref:System.Type>具有由適當的型別引數取代型別參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-1175">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Type> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="9a871-1176">如果目前<xref:System.Type>代表型別參數定義中的泛型類型或泛型方法，這個方法會搜尋介面條件約束和繼承自類別或介面條件約束的任何介面。</span><span class="sxs-lookup"><span data-stu-id="9a871-1176">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the interface constraints and any interfaces inherited from class or interface constraints.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9a871-1177">泛型介面，如`name`參數是損害的名稱，結尾抑音符號 (\`) 和型別參數數目。</span><span class="sxs-lookup"><span data-stu-id="9a871-1177">For generic interfaces, the `name` parameter is the mangled name, ending with a grave accent (\`) and the number of type parameters.</span></span> <span data-ttu-id="9a871-1178">這是泛型介面定義和建構的泛型介面，則為 true。</span><span class="sxs-lookup"><span data-stu-id="9a871-1178">This is true for both generic interface definitions and constructed generic interfaces.</span></span> <span data-ttu-id="9a871-1179">例如，若要尋找`IExample<T>`(`IExample(Of T)` Visual Basic 中) 或`IExample<string>`(`IExample(Of String)` Visual Basic 中)，搜尋`"IExample`1"'。</span><span class="sxs-lookup"><span data-stu-id="9a871-1179">For example, to find `IExample<T>` (`IExample(Of T)` in Visual Basic) or `IExample<string>` (`IExample(Of String)` in Visual Basic), search for `"IExample`1"\`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-1180">下列程式碼範例會使用<xref:System.Type.GetInterface%28System.String%2CSystem.Boolean%29>方法來執行不區分大小寫的搜尋<xref:System.Collections.Hashtable>類別<xref:System.Collections.IEnumerable>介面。</span><span class="sxs-lookup"><span data-stu-id="9a871-1180">The following code example uses the <xref:System.Type.GetInterface%28System.String%2CSystem.Boolean%29> method to perform a case-insensitive search of the <xref:System.Collections.Hashtable> class for the <xref:System.Collections.IEnumerable> interface.</span></span>  
  
 <span data-ttu-id="9a871-1181">在程式碼範例也會示範<xref:System.Type.GetInterface%28System.String%29>方法多載和<xref:System.Type.GetInterfaceMap%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-1181">The code example also demonstrates the <xref:System.Type.GetInterface%28System.String%29> method overload and the <xref:System.Type.GetInterfaceMap%2A> method.</span></span>  
  
 [!code-cpp[Type_GetInterface#2](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetInterface/CPP/type_getinterface.cpp#2)]
 [!code-csharp[Type_GetInterface#2](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetInterface/CS/type_getinterface.cs#2)]
 [!code-vb[Type_GetInterface#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetInterface/VB/type_getinterface.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9a871-1182"><paramref name="name" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-1182"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Reflection.AmbiguousMatchException"><span data-ttu-id="9a871-1183">目前的 <see cref="T:System.Type" /> 代表實作具有不同型別引數之相同泛型介面的類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-1183">The current <see cref="T:System.Type" /> represents a type that implements the same generic interface with different type arguments.</span></span></exception>
        <altmember cref="T:System.String" />
        <altmember cref="M:System.Type.GetInterfaces" />
        <altmember cref="M:System.Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetInterfaceMap">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.InterfaceMapping GetInterfaceMap (Type interfaceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Reflection.InterfaceMapping GetInterfaceMap(class System.Type interfaceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetInterfaceMap(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetInterfaceMap (interfaceType As Type) As InterfaceMapping" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::InterfaceMapping GetInterfaceMap(Type ^ interfaceType);" />
      <MemberSignature Language="F#" Value="abstract member GetInterfaceMap : Type -&gt; System.Reflection.InterfaceMapping&#xA;override this.GetInterfaceMap : Type -&gt; System.Reflection.InterfaceMapping" Usage="type.GetInterfaceMap interfaceType" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetInterfaceMap(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.InterfaceMapping</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interfaceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="interfaceType"><span data-ttu-id="9a871-1184">要擷取對應的介面類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-1184">The interface type to retrieve a mapping for.</span></span></param>
        <summary><span data-ttu-id="9a871-1185">傳回指定介面類型的介面對應。</span><span class="sxs-lookup"><span data-stu-id="9a871-1185">Returns an interface mapping for the specified interface type.</span></span></summary>
        <returns><span data-ttu-id="9a871-1186">物件，表示 <paramref name="interfaceType" /> 的介面對應。</span><span class="sxs-lookup"><span data-stu-id="9a871-1186">An object that represents the interface mapping for <paramref name="interfaceType" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-1187">介面對應代表介面如何對應到實際的成員上實作該介面的類別。</span><span class="sxs-lookup"><span data-stu-id="9a871-1187">The interface map denotes how an interface is mapped into the actual members on a class that implements that interface.</span></span>  
  
 <span data-ttu-id="9a871-1188">如果目前<xref:System.Type>代表建構的泛型類型，會依適當的型別引數中的項目來取代參數的型別<xref:System.Reflection.InterfaceMapping>這個方法所傳回。</span><span class="sxs-lookup"><span data-stu-id="9a871-1188">If the current <xref:System.Type> represents a constructed generic type, type parameters are replaced by the appropriate type arguments in the elements of the <xref:System.Reflection.InterfaceMapping> returned by this method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-1189">下列範例會呼叫<xref:System.Type.GetInterfaceMap%2A>方法，以判斷如何<xref:System.IFormatProvider>介面會對應至<xref:System.Globalization.CultureInfo>方法，以及如何<xref:System.IAppDomainSetup>介面對應至<xref:System.AppDomainSetup>屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-1189">The following example calls the <xref:System.Type.GetInterfaceMap%2A> method to determine how the <xref:System.IFormatProvider> interface maps to <xref:System.Globalization.CultureInfo> methods, and how the <xref:System.IAppDomainSetup> interface maps to <xref:System.AppDomainSetup> properties.</span></span> <span data-ttu-id="9a871-1190">請注意，因為<xref:System.IAppDomainSetup>介面會定義一組屬性，傳回<xref:System.Reflection.InterfaceMapping>物件包含個別<xref:System.Reflection.MethodInfo>屬性的 get 和 set 存取子物件。</span><span class="sxs-lookup"><span data-stu-id="9a871-1190">Note that, because the <xref:System.IAppDomainSetup> interface defines a set of properties, the returned <xref:System.Reflection.InterfaceMapping> object includes separate <xref:System.Reflection.MethodInfo> objects for a property's get and set accessors.</span></span>  
  
 [!code-csharp[System.Type.GetInterfaceMap#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.getinterfacemap/cs/interfacemapping1.cs#1)]
 [!code-vb[System.Type.GetInterfaceMap#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.getinterfacemap/vb/interfacemapping1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9a871-1191"><paramref name="interfaceType" /> 不會由目前類型實作。</span><span class="sxs-lookup"><span data-stu-id="9a871-1191"><paramref name="interfaceType" /> is not implemented by the current type.</span></span>  
  
<span data-ttu-id="9a871-1192">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-1192">-or-</span></span> 
<span data-ttu-id="9a871-1193"><paramref name="interfaceType" /> 引數未參考介面。</span><span class="sxs-lookup"><span data-stu-id="9a871-1193">The <paramref name="interfaceType" /> argument does not refer to an interface.</span></span>  
  
<span data-ttu-id="9a871-1194">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-1194">-or-</span></span>

<span data-ttu-id="9a871-1195">目前的執行個體或 <paramref name="interfaceType" /> 引數是開放式泛型型別，也就是 <see cref="P:System.Type.ContainsGenericParameters" /> 屬性會傳回 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-1195">The current instance or <paramref name="interfaceType" /> argument is an open generic type; that is, the <see cref="P:System.Type.ContainsGenericParameters" /> property returns <see langword="true" />.</span></span>

<span data-ttu-id="9a871-1196">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-1196">-or-</span></span>


 <span data-ttu-id="9a871-1197"><paramref name="interfaceType" /> 是泛型介面，且目前的類型是陣列類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-1197"><paramref name="interfaceType" /> is a generic interface, and the current type is an array type.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9a871-1198"><paramref name="interfaceType" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-1198"><paramref name="interfaceType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9a871-1199">目前 <see cref="T:System.Type" /> 代表泛型型別參數；也就是說，<see cref="P:System.Type.IsGenericParameter" /> 是 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-1199">The current <see cref="T:System.Type" /> represents a generic type parameter; that is, <see cref="P:System.Type.IsGenericParameter" /> is <see langword="true" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="9a871-1200">基底類別不支援叫用的方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-1200">The invoked method is not supported in the base class.</span></span> <span data-ttu-id="9a871-1201">衍生類別必須提供實作。</span><span class="sxs-lookup"><span data-stu-id="9a871-1201">Derived classes must provide an implementation.</span></span></exception>
        <altmember cref="T:System.Reflection.InterfaceMapping" />
      </Docs>
    </Member>
    <Member MemberName="GetInterfaces">
      <MemberSignature Language="C#" Value="public abstract Type[] GetInterfaces ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetInterfaces() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetInterfaces" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetInterfaces () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;Type ^&gt; ^ GetInterfaces();" />
      <MemberSignature Language="F#" Value="abstract member GetInterfaces : unit -&gt; Type[]" Usage="type.GetInterfaces " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetInterfaces</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9a871-1202">在衍生類別中覆寫時，取得由目前 <see cref="T:System.Type" /> 所實作或繼承的所有介面。</span><span class="sxs-lookup"><span data-stu-id="9a871-1202">When overridden in a derived class, gets all the interfaces implemented or inherited by the current <see cref="T:System.Type" />.</span></span></summary>
        <returns><span data-ttu-id="9a871-1203"><see cref="T:System.Type" /> 物件的陣列，代表目前 <see cref="T:System.Type" /> 所實作或繼承的所有介面。</span><span class="sxs-lookup"><span data-stu-id="9a871-1203">An array of <see cref="T:System.Type" /> objects representing all the interfaces implemented or inherited by the current <see cref="T:System.Type" />.</span></span>  
  
<span data-ttu-id="9a871-1204">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-1204">-or-</span></span> 
<span data-ttu-id="9a871-1205"><see cref="T:System.Type" /> 類型的空陣列 (如果目前 <see cref="T:System.Type" /> 未實作或繼承介面)。</span><span class="sxs-lookup"><span data-stu-id="9a871-1205">An empty array of type <see cref="T:System.Type" />, if no interfaces are implemented or inherited by the current <see cref="T:System.Type" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-1206"><xref:System.Type.GetInterfaces%2A>方法不會傳回介面以特定順序，例如依字母順序或依宣告順序。</span><span class="sxs-lookup"><span data-stu-id="9a871-1206">The <xref:System.Type.GetInterfaces%2A> method does not return interfaces in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="9a871-1207">您的程式碼不得相依於介面會傳回的順序，因為順序不同。</span><span class="sxs-lookup"><span data-stu-id="9a871-1207">Your code must not depend on the order in which interfaces are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="9a871-1208">如果目前<xref:System.Type>代表建構的泛型型別，這個方法會傳回<xref:System.Type>具有由適當的型別引數取代型別參數的物件。</span><span class="sxs-lookup"><span data-stu-id="9a871-1208">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Type> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="9a871-1209">如果目前<xref:System.Type>代表型別參數定義中的泛型類型或泛型方法，這個方法會搜尋介面條件約束和繼承自類別或介面條件約束的任何介面。</span><span class="sxs-lookup"><span data-stu-id="9a871-1209">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the interface constraints and any interfaces inherited from class or interface constraints.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-1210">下列範例會取得指定類別的型別，並顯示的型別會實作或繼承的所有介面。</span><span class="sxs-lookup"><span data-stu-id="9a871-1210">The following example gets the type of the specified class and displays all the interfaces that the type implements or inherits.</span></span> <span data-ttu-id="9a871-1211">若要編譯 Visual Basic 範例，請使用下列的編譯器命令：</span><span class="sxs-lookup"><span data-stu-id="9a871-1211">To compile the Visual Basic example, use the following compiler commands:</span></span>  
  
 `vbc type_getinterfaces1.vb /r:System.Web.dll /r:System.dll`  
  
 [!code-cpp[Type_GetInterfaces1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetInterfaces1/CPP/type_getinterfaces1.cpp#1)]
 [!code-csharp[Type_GetInterfaces1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetInterfaces1/CS/type_getinterfaces1.cs#1)]
 [!code-vb[Type_GetInterfaces1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetInterfaces1/VB/type_getinterfaces1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="9a871-1212">靜態初始設定式已叫用並擲回了例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9a871-1212">A static initializer is invoked and throws an exception.</span></span></exception>
        <altmember cref="M:System.Type.GetInterface(System.String)" />
        <altmember cref="M:System.Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetMember">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9a871-1213">取得目前 <see cref="T:System.Type" /> 的指定成員。</span><span class="sxs-lookup"><span data-stu-id="9a871-1213">Gets the specified members of the current <see cref="T:System.Type" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetMember">
      <MemberSignature Language="C#" Value="public System.Reflection.MemberInfo[] GetMember (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetMember(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMember(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMember (name As String) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMember(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetMember : string -&gt; System.Reflection.MemberInfo[]&#xA;override this.GetMember : string -&gt; System.Reflection.MemberInfo[]" Usage="type.GetMember name" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMember(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="9a871-1214">字串，包含要取得的公用成員名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-1214">The string containing the name of the public members to get.</span></span></param>
        <summary><span data-ttu-id="9a871-1215">搜尋具有指定名稱的公用成員。</span><span class="sxs-lookup"><span data-stu-id="9a871-1215">Searches for the public members with the specified name.</span></span></summary>
        <returns><span data-ttu-id="9a871-1216"><see cref="T:System.Reflection.MemberInfo" /> 物件的陣列，代表具有指定之名稱的公用成員 (如有找到)，否則為空陣列。</span><span class="sxs-lookup"><span data-stu-id="9a871-1216">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public members with the specified name, if found; otherwise, an empty array.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-1217">搜尋`name`會區分大小寫。</span><span class="sxs-lookup"><span data-stu-id="9a871-1217">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="9a871-1218">搜尋包含 public static 和 public 的執行個體成員。</span><span class="sxs-lookup"><span data-stu-id="9a871-1218">The search includes public static and public instance members.</span></span>  
  
 <span data-ttu-id="9a871-1219">成員包含屬性、 方法、 欄位、 事件等等。</span><span class="sxs-lookup"><span data-stu-id="9a871-1219">Members include properties, methods, fields, events, and so on.</span></span>  
  
 <span data-ttu-id="9a871-1220"><xref:System.Type.GetMember%2A>方法不會傳回成員以特定順序，例如依字母順序或依宣告順序。</span><span class="sxs-lookup"><span data-stu-id="9a871-1220">The <xref:System.Type.GetMember%2A> method does not return members in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="9a871-1221">您的程式碼不得相依於成員會傳回的順序，因為順序不同。</span><span class="sxs-lookup"><span data-stu-id="9a871-1221">Your code must not depend on the order in which members are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="9a871-1222">這個方法多載不會尋找類別初始設定式 (.cctor)。</span><span class="sxs-lookup"><span data-stu-id="9a871-1222">This method overload will not find class initializers (.cctor).</span></span> <span data-ttu-id="9a871-1223">類別初始設定式，請使用採用多載<xref:System.Reflection.BindingFlags>，並指定<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> Visual Basic 中)。</span><span class="sxs-lookup"><span data-stu-id="9a871-1223">To find class initializers, use an overload that takes <xref:System.Reflection.BindingFlags>, and specify <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="9a871-1224">您也可以取得類別初始設定式使用<xref:System.Type.TypeInitializer%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-1224">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
 <span data-ttu-id="9a871-1225">下表顯示基底類別成員會傳回由`Get`反映型別上時的方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-1225">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="9a871-1226">成員類型</span><span class="sxs-lookup"><span data-stu-id="9a871-1226">Member Type</span></span>|<span data-ttu-id="9a871-1227">Static</span><span class="sxs-lookup"><span data-stu-id="9a871-1227">Static</span></span>|<span data-ttu-id="9a871-1228">非靜態</span><span class="sxs-lookup"><span data-stu-id="9a871-1228">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="9a871-1229">建構函式</span><span class="sxs-lookup"><span data-stu-id="9a871-1229">Constructor</span></span>|<span data-ttu-id="9a871-1230">否</span><span class="sxs-lookup"><span data-stu-id="9a871-1230">No</span></span>|<span data-ttu-id="9a871-1231">否</span><span class="sxs-lookup"><span data-stu-id="9a871-1231">No</span></span>|  
|<span data-ttu-id="9a871-1232">欄位</span><span class="sxs-lookup"><span data-stu-id="9a871-1232">Field</span></span>|<span data-ttu-id="9a871-1233">否</span><span class="sxs-lookup"><span data-stu-id="9a871-1233">No</span></span>|<span data-ttu-id="9a871-1234">可以。</span><span class="sxs-lookup"><span data-stu-id="9a871-1234">Yes.</span></span> <span data-ttu-id="9a871-1235">欄位永遠是依名稱和簽章隱藏。</span><span class="sxs-lookup"><span data-stu-id="9a871-1235">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="9a871-1236">Event - 事件</span><span class="sxs-lookup"><span data-stu-id="9a871-1236">Event</span></span>|<span data-ttu-id="9a871-1237">不適用</span><span class="sxs-lookup"><span data-stu-id="9a871-1237">Not applicable</span></span>|<span data-ttu-id="9a871-1238">一般類型系統規則是繼承實作屬性的方法相同。</span><span class="sxs-lookup"><span data-stu-id="9a871-1238">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="9a871-1239">反映會視為由名稱和簽章隱藏屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-1239">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="9a871-1240">請參閱附註 2。</span><span class="sxs-lookup"><span data-stu-id="9a871-1240">See note 2 below.</span></span>|  
|<span data-ttu-id="9a871-1241">方法</span><span class="sxs-lookup"><span data-stu-id="9a871-1241">Method</span></span>|<span data-ttu-id="9a871-1242">否</span><span class="sxs-lookup"><span data-stu-id="9a871-1242">No</span></span>|<span data-ttu-id="9a871-1243">可以。</span><span class="sxs-lookup"><span data-stu-id="9a871-1243">Yes.</span></span> <span data-ttu-id="9a871-1244">（虛擬和非虛擬） 的方法可以隱藏依名稱或依名稱和簽章隱藏。</span><span class="sxs-lookup"><span data-stu-id="9a871-1244">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="9a871-1245">巢狀的類型</span><span class="sxs-lookup"><span data-stu-id="9a871-1245">Nested Type</span></span>|<span data-ttu-id="9a871-1246">否</span><span class="sxs-lookup"><span data-stu-id="9a871-1246">No</span></span>|<span data-ttu-id="9a871-1247">否</span><span class="sxs-lookup"><span data-stu-id="9a871-1247">No</span></span>|  
|<span data-ttu-id="9a871-1248">屬性</span><span class="sxs-lookup"><span data-stu-id="9a871-1248">Property</span></span>|<span data-ttu-id="9a871-1249">不適用</span><span class="sxs-lookup"><span data-stu-id="9a871-1249">Not applicable</span></span>|<span data-ttu-id="9a871-1250">一般類型系統規則是繼承實作屬性的方法相同。</span><span class="sxs-lookup"><span data-stu-id="9a871-1250">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="9a871-1251">反映會視為由名稱和簽章隱藏屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-1251">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="9a871-1252">請參閱附註 2。</span><span class="sxs-lookup"><span data-stu-id="9a871-1252">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="9a871-1253">依名稱和簽章隱藏會考慮所有組件的簽章，包括自訂修飾詞，傳回類型、 參數類型、 sentinels 和 unmanaged 呼叫慣例。</span><span class="sxs-lookup"><span data-stu-id="9a871-1253">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="9a871-1254">這是二進位比較。</span><span class="sxs-lookup"><span data-stu-id="9a871-1254">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="9a871-1255">反映的屬性和事件會依名稱和簽章隱藏。</span><span class="sxs-lookup"><span data-stu-id="9a871-1255">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="9a871-1256">如果您同時有 get 和 set 存取子的屬性在基底類別中，但衍生的類別有只有 get 存取子，在衍生的類別的屬性會隱藏基底類別屬性中，並不能存取的基底類別的 setter。</span><span class="sxs-lookup"><span data-stu-id="9a871-1256">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="9a871-1257">自訂屬性不屬於一般類型系統。</span><span class="sxs-lookup"><span data-stu-id="9a871-1257">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="9a871-1258">如果目前<xref:System.Type>代表建構的泛型型別，這個方法會傳回<xref:System.Reflection.MemberInfo>具有由適當的型別引數取代型別參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-1258">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.MemberInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="9a871-1259">如果目前<xref:System.Type>代表型別參數的泛型類型或泛型方法，這個方法定義中搜尋類別條件約束的成員或成員<xref:System.Object>是否沒有類別條件約束。</span><span class="sxs-lookup"><span data-stu-id="9a871-1259">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the members of the class constraint, or the members of <xref:System.Object> if there is no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9a871-1260">如需泛型的方法，不包括中的型別引數`name`。</span><span class="sxs-lookup"><span data-stu-id="9a871-1260">For generic methods, do not include the type arguments in `name`.</span></span> <span data-ttu-id="9a871-1261">例如，C# 程式碼`GetMember("MyMethod<int>")`搜尋之成員的文字名稱 」`MyMethod<int>`"，而不是方法，名為`MyMethod`具有一個泛型類型引數`int`。</span><span class="sxs-lookup"><span data-stu-id="9a871-1261">For example, the C# code `GetMember("MyMethod<int>")` searches for a member with the text name "`MyMethod<int>`", rather than for a method named `MyMethod` that has one generic argument of type `int`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-1262">下列範例顯示的所有成員`String`以字母 c 開頭的類別</span><span class="sxs-lookup"><span data-stu-id="9a871-1262">The following example displays all the members of the `String` class that start with the letter C.</span></span>  
  
 [!code-cpp[Type_GetMember#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMember/CPP/type_getmember.cpp#1)]
 [!code-csharp[Type_GetMember#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMember/CS/type_getmember.cs#1)]
 [!code-vb[Type_GetMember#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMember/VB/type_getmember.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9a871-1263"><paramref name="name" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-1263"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Reflection.MemberInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetMembers" />
        <altmember cref="M:System.Type.GetDefaultMembers" />
        <altmember cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetMember">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MemberInfo[] GetMember (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetMember(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMember(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMember (name As String, bindingAttr As BindingFlags) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMember(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetMember : string * System.Reflection.BindingFlags -&gt; System.Reflection.MemberInfo[]&#xA;override this.GetMember : string * System.Reflection.BindingFlags -&gt; System.Reflection.MemberInfo[]" Usage="type.GetMember (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMember(System.String,System.Reflection.BindingFlags)</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetMember(System.String,System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="9a871-1264">字串，包含要取得的成員名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-1264">The string containing the name of the members to get.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="9a871-1265">位元遮罩，由一或多個 <see cref="T:System.Reflection.BindingFlags" /> 組成，而這些旗標會指定執行搜尋的方式。</span><span class="sxs-lookup"><span data-stu-id="9a871-1265">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="9a871-1266">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-1266">-or-</span></span> 
<span data-ttu-id="9a871-1267">零，表示傳回空陣列。</span><span class="sxs-lookup"><span data-stu-id="9a871-1267">Zero, to return an empty array.</span></span></param>
        <summary><span data-ttu-id="9a871-1268">使用指定的繫結條件約束搜尋指定的成員。</span><span class="sxs-lookup"><span data-stu-id="9a871-1268">Searches for the specified members, using the specified binding constraints.</span></span></summary>
        <returns><span data-ttu-id="9a871-1269"><see cref="T:System.Reflection.MemberInfo" /> 物件的陣列，代表具有指定之名稱的公用成員 (如有找到)，否則為空陣列。</span><span class="sxs-lookup"><span data-stu-id="9a871-1269">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public members with the specified name, if found; otherwise, an empty array.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-1270">在衍生類別可以覆寫此方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-1270">This method can be overridden by a derived class.</span></span>  
  
 <span data-ttu-id="9a871-1271">成員包含屬性、 方法、 欄位、 事件等等。</span><span class="sxs-lookup"><span data-stu-id="9a871-1271">Members include properties, methods, fields, events, and so on.</span></span>  
  
 <span data-ttu-id="9a871-1272"><xref:System.Type.GetMember%2A>方法不會傳回成員以特定順序，例如依字母順序或依宣告順序。</span><span class="sxs-lookup"><span data-stu-id="9a871-1272">The <xref:System.Type.GetMember%2A> method does not return members in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="9a871-1273">您的程式碼不得相依於成員會傳回的順序，因為順序不同。</span><span class="sxs-lookup"><span data-stu-id="9a871-1273">Your code must not depend on the order in which members are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="9a871-1274">下列<xref:System.Reflection.BindingFlags>篩選器旗標可以用來定義要包含在搜尋中的成員：</span><span class="sxs-lookup"><span data-stu-id="9a871-1274">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which members to include in the search:</span></span>  
  
-   <span data-ttu-id="9a871-1275">您必須指定`BindingFlags.Instance`或`BindingFlags.Static`以取得傳回值。</span><span class="sxs-lookup"><span data-stu-id="9a871-1275">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="9a871-1276">指定`BindingFlags.Public`来包含在搜尋中的公用成員。</span><span class="sxs-lookup"><span data-stu-id="9a871-1276">Specify `BindingFlags.Public` to include public members in the search.</span></span>  
  
-   <span data-ttu-id="9a871-1277">指定`BindingFlags.NonPublic`要在搜尋中包含非公用成員 （也就是私用、 內部和受保護成員）。</span><span class="sxs-lookup"><span data-stu-id="9a871-1277">Specify `BindingFlags.NonPublic` to include non-public members (that is, private, internal, and protected members) in the search.</span></span>  
  
-   <span data-ttu-id="9a871-1278">指定`BindingFlags.FlattenHierarchy`包含`public`和`protected`階層; 的靜態成員`private`中繼承類別的靜態成員不包含。</span><span class="sxs-lookup"><span data-stu-id="9a871-1278">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="9a871-1279">下列<xref:System.Reflection.BindingFlags>輔助鍵旗標可以用來變更搜尋的運作方式：</span><span class="sxs-lookup"><span data-stu-id="9a871-1279">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="9a871-1280">`BindingFlags.IgnoreCase` 忽略大小寫的`name`。</span><span class="sxs-lookup"><span data-stu-id="9a871-1280">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="9a871-1281">`BindingFlags.DeclaredOnly` 若要搜尋只在宣告的成員，才<xref:System.Type>，不只是繼承的成員。</span><span class="sxs-lookup"><span data-stu-id="9a871-1281">`BindingFlags.DeclaredOnly` to search only the members declared on the <xref:System.Type>, not members that were simply inherited.</span></span>  
  
 <span data-ttu-id="9a871-1282">如需詳細資訊，請參閱 <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="9a871-1282">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="9a871-1283">若要取得使用這個方法多載類別初始設定式 (.cctor)，您必須指定 「.cctor 」 `name`，並<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> Visual Basic 中) 如`bindingAttr`。</span><span class="sxs-lookup"><span data-stu-id="9a871-1283">To get the class initializer (.cctor) using this method overload, you must specify ".cctor" for `name`, and <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic) for `bindingAttr`.</span></span> <span data-ttu-id="9a871-1284">您也可以取得類別初始設定式使用<xref:System.Type.TypeInitializer%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-1284">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
 <span data-ttu-id="9a871-1285">如果目前<xref:System.Type>代表建構的泛型型別，這個方法會傳回<xref:System.Reflection.MemberInfo>具有由適當的型別引數取代型別參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-1285">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.MemberInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="9a871-1286">如果目前<xref:System.Type>代表型別參數的泛型類型或泛型方法，這個方法定義中搜尋類別條件約束的成員或成員<xref:System.Object>是否沒有類別條件約束。</span><span class="sxs-lookup"><span data-stu-id="9a871-1286">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the members of the class constraint, or the members of <xref:System.Object> if there is no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9a871-1287">如需泛型的方法，不包括中的型別引數`name`。</span><span class="sxs-lookup"><span data-stu-id="9a871-1287">For generic methods, do not include the type arguments in `name`.</span></span> <span data-ttu-id="9a871-1288">例如，C# 程式碼`GetMember("MyMethod<int>")`搜尋之成員的文字名稱 」`MyMethod<int>`"，而不是方法，名為`MyMethod`具有一個泛型類型引數`int`。</span><span class="sxs-lookup"><span data-stu-id="9a871-1288">For example, the C# code `GetMember("MyMethod<int>")` searches for a member with the text name "`MyMethod<int>`", rather than for a method named `MyMethod` that has one generic argument of type `int`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-1289">下列範例顯示的所有公用靜態成員`myString`以字母 c 開頭的類別</span><span class="sxs-lookup"><span data-stu-id="9a871-1289">The following example displays all the public static members of the `myString` class that start with the letter C.</span></span>  
  
 [!code-cpp[Type_GetMember#2](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMember/CPP/type_getmember.cpp#2)]
 [!code-csharp[Type_GetMember#2](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMember/CS/type_getmember.cs#2)]
 [!code-vb[Type_GetMember#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMember/VB/type_getmember.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9a871-1290"><paramref name="name" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-1290"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Reflection.MemberInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetMembers" />
        <altmember cref="M:System.Type.GetDefaultMembers" />
        <altmember cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetMember">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MemberInfo[] GetMember (string name, System.Reflection.MemberTypes type, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetMember(string name, valuetype System.Reflection.MemberTypes type, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMember (name As String, type As MemberTypes, bindingAttr As BindingFlags) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMember(System::String ^ name, System::Reflection::MemberTypes type, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetMember : string * System.Reflection.MemberTypes * System.Reflection.BindingFlags -&gt; System.Reflection.MemberInfo[]&#xA;override this.GetMember : string * System.Reflection.MemberTypes * System.Reflection.BindingFlags -&gt; System.Reflection.MemberInfo[]" Usage="type.GetMember (name, type, bindingAttr)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="type" Type="System.Reflection.MemberTypes" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="9a871-1291">字串，包含要取得的成員名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-1291">The string containing the name of the members to get.</span></span></param>
        <param name="type"><span data-ttu-id="9a871-1292">要搜尋的值。</span><span class="sxs-lookup"><span data-stu-id="9a871-1292">The value to search for.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="9a871-1293">位元遮罩，由一或多個 <see cref="T:System.Reflection.BindingFlags" /> 組成，而這些旗標會指定執行搜尋的方式。</span><span class="sxs-lookup"><span data-stu-id="9a871-1293">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="9a871-1294">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-1294">-or-</span></span> 
<span data-ttu-id="9a871-1295">零，表示傳回空陣列。</span><span class="sxs-lookup"><span data-stu-id="9a871-1295">Zero, to return an empty array.</span></span></param>
        <summary><span data-ttu-id="9a871-1296">使用指定的繫結條件約束，搜尋指定成員類型的指定成員。</span><span class="sxs-lookup"><span data-stu-id="9a871-1296">Searches for the specified members of the specified member type, using the specified binding constraints.</span></span></summary>
        <returns><span data-ttu-id="9a871-1297"><see cref="T:System.Reflection.MemberInfo" /> 物件的陣列，代表具有指定之名稱的公用成員 (如有找到)，否則為空陣列。</span><span class="sxs-lookup"><span data-stu-id="9a871-1297">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public members with the specified name, if found; otherwise, an empty array.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-1298">成員包含屬性、 方法、 欄位、 事件等等。</span><span class="sxs-lookup"><span data-stu-id="9a871-1298">Members include properties, methods, fields, events, and so on.</span></span>  
  
 <span data-ttu-id="9a871-1299"><xref:System.Type.GetMember%2A>方法不會傳回成員以特定順序，例如依字母順序或依宣告順序。</span><span class="sxs-lookup"><span data-stu-id="9a871-1299">The <xref:System.Type.GetMember%2A> method does not return members in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="9a871-1300">您的程式碼不得相依於成員會傳回的順序，因為順序不同。</span><span class="sxs-lookup"><span data-stu-id="9a871-1300">Your code must not depend on the order in which members are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="9a871-1301">下列<xref:System.Reflection.BindingFlags>篩選器旗標可以用來定義要包含在搜尋中的成員：</span><span class="sxs-lookup"><span data-stu-id="9a871-1301">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which members to include in the search:</span></span>  
  
-   <span data-ttu-id="9a871-1302">您必須指定`BindingFlags.Instance`或`BindingFlags.Static`以取得傳回值。</span><span class="sxs-lookup"><span data-stu-id="9a871-1302">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="9a871-1303">指定`BindingFlags.Public`来包含在搜尋中的公用成員。</span><span class="sxs-lookup"><span data-stu-id="9a871-1303">Specify `BindingFlags.Public` to include public members in the search.</span></span>  
  
-   <span data-ttu-id="9a871-1304">指定`BindingFlags.NonPublic`要在搜尋中包含非公用成員 （也就是私用、 內部和受保護成員）。</span><span class="sxs-lookup"><span data-stu-id="9a871-1304">Specify `BindingFlags.NonPublic` to include non-public members (that is, private, internal, and protected members) in the search.</span></span>  
  
-   <span data-ttu-id="9a871-1305">指定`BindingFlags.FlattenHierarchy`包含`public`和`protected`階層; 的靜態成員`private`中繼承類別的靜態成員不包含。</span><span class="sxs-lookup"><span data-stu-id="9a871-1305">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="9a871-1306">下列<xref:System.Reflection.BindingFlags>輔助鍵旗標可以用來變更搜尋的運作方式：</span><span class="sxs-lookup"><span data-stu-id="9a871-1306">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="9a871-1307">`BindingFlags.IgnoreCase` 忽略大小寫的`name`。</span><span class="sxs-lookup"><span data-stu-id="9a871-1307">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="9a871-1308">`BindingFlags.DeclaredOnly` 若要搜尋只在宣告的成員，才<xref:System.Type>，不只是繼承的成員。</span><span class="sxs-lookup"><span data-stu-id="9a871-1308">`BindingFlags.DeclaredOnly` to search only the members declared on the <xref:System.Type>, not members that were simply inherited.</span></span>  
  
 <span data-ttu-id="9a871-1309">如需詳細資訊，請參閱 <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="9a871-1309">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="9a871-1310">若要取得使用這個方法多載類別初始設定式 (.cctor)，您必須指定 「.cctor 」 `name`， <xref:System.Reflection.MemberTypes.Constructor?displayProperty=nameWithType> for `type`，以及<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType>中Visual Basic) 的`bindingAttr`。</span><span class="sxs-lookup"><span data-stu-id="9a871-1310">To get the class initializer (.cctor) using this method overload, you must specify ".cctor" for `name`, <xref:System.Reflection.MemberTypes.Constructor?displayProperty=nameWithType> for `type`, and  <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic) for `bindingAttr`.</span></span> <span data-ttu-id="9a871-1311">您也可以取得類別初始設定式使用<xref:System.Type.TypeInitializer%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-1311">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
 <span data-ttu-id="9a871-1312">如果目前<xref:System.Type>代表建構的泛型型別，這個方法會傳回<xref:System.Reflection.MemberInfo>具有由適當的型別引數取代型別參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-1312">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.MemberInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="9a871-1313">如果目前<xref:System.Type>代表型別參數的泛型類型或泛型方法，這個方法定義中搜尋類別條件約束的成員或成員<xref:System.Object>是否沒有類別條件約束。</span><span class="sxs-lookup"><span data-stu-id="9a871-1313">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the members of the class constraint, or the members of <xref:System.Object> if there is no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9a871-1314">如需泛型的方法，不包括中的型別引數`name`。</span><span class="sxs-lookup"><span data-stu-id="9a871-1314">For generic methods, do not include the type arguments in `name`.</span></span> <span data-ttu-id="9a871-1315">例如，C# 程式碼`GetMember("MyMethod<int>")`搜尋之成員的文字名稱 」`MyMethod<int>`"，而不是方法，名為`MyMethod`具有一個泛型類型引數`int`。</span><span class="sxs-lookup"><span data-stu-id="9a871-1315">For example, the C# code `GetMember("MyMethod<int>")` searches for a member with the text name "`MyMethod<int>`", rather than for a method named `MyMethod` that has one generic argument of type `int`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-1316">下列範例顯示的所有方法`myString`以字母 c 開頭的類別</span><span class="sxs-lookup"><span data-stu-id="9a871-1316">The following example displays all the methods of the `myString` class that start with the letter C.</span></span>  
  
 [!code-cpp[Type_GetMember#3](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMember/CPP/type_getmember.cpp#3)]
 [!code-csharp[Type_GetMember#3](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMember/CS/type_getmember.cs#3)]
 [!code-vb[Type_GetMember#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMember/VB/type_getmember.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9a871-1317"><paramref name="name" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-1317"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="9a871-1318">衍生類別必須提供實作。</span><span class="sxs-lookup"><span data-stu-id="9a871-1318">A derived class must provide an implementation.</span></span></exception>
        <altmember cref="T:System.Reflection.MemberInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetMembers" />
        <altmember cref="M:System.Type.GetDefaultMembers" />
        <altmember cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetMembers">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9a871-1319">取得目前 <see cref="T:System.Type" /> 的成員 (屬性、方法、欄位、事件等等)。</span><span class="sxs-lookup"><span data-stu-id="9a871-1319">Gets the members (properties, methods, fields, events, and so on) of the current <see cref="T:System.Type" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetMembers">
      <MemberSignature Language="C#" Value="public System.Reflection.MemberInfo[] GetMembers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetMembers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMembers" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMembers () As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMembers();" />
      <MemberSignature Language="F#" Value="abstract member GetMembers : unit -&gt; System.Reflection.MemberInfo[]&#xA;override this.GetMembers : unit -&gt; System.Reflection.MemberInfo[]" Usage="type.GetMembers " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMembers</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9a871-1320">傳回目前 <see cref="T:System.Type" /> 的所有公用成員。</span><span class="sxs-lookup"><span data-stu-id="9a871-1320">Returns all the public members of the current <see cref="T:System.Type" />.</span></span></summary>
        <returns><span data-ttu-id="9a871-1321"><see cref="T:System.Reflection.MemberInfo" /> 物件的陣列，代表目前 <see cref="T:System.Type" /> 的所有公用成員。</span><span class="sxs-lookup"><span data-stu-id="9a871-1321">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing all the public members of the current <see cref="T:System.Type" />.</span></span>  
  
<span data-ttu-id="9a871-1322">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-1322">-or-</span></span> 
<span data-ttu-id="9a871-1323"><see cref="T:System.Reflection.MemberInfo" /> 類型的空陣列 (如果目前 <see cref="T:System.Type" /> 沒有公用成員)。</span><span class="sxs-lookup"><span data-stu-id="9a871-1323">An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if the current <see cref="T:System.Type" /> does not have public members.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-1324">成員包含屬性、 方法、 欄位、 事件等等。</span><span class="sxs-lookup"><span data-stu-id="9a871-1324">Members include properties, methods, fields, events, and so on.</span></span>  
  
 <span data-ttu-id="9a871-1325"><xref:System.Type.GetMembers%2A>方法不會傳回成員以特定順序，例如依字母順序或依宣告順序。</span><span class="sxs-lookup"><span data-stu-id="9a871-1325">The <xref:System.Type.GetMembers%2A> method does not return members in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="9a871-1326">您的程式碼不得相依於成員會傳回的順序，因為順序不同。</span><span class="sxs-lookup"><span data-stu-id="9a871-1326">Your code must not depend on the order in which members are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="9a871-1327">這個方法多載會呼叫<xref:System.Type.GetMembers%28System.Reflection.BindingFlags%29>方法多載，以<xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> Visual Basic 中)。</span><span class="sxs-lookup"><span data-stu-id="9a871-1327">This method overload calls the <xref:System.Type.GetMembers%28System.Reflection.BindingFlags%29> method overload, with <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="9a871-1328">它將無法找到類別初始設定式 (.cctor)。</span><span class="sxs-lookup"><span data-stu-id="9a871-1328">It will not find class initializers (.cctor).</span></span> <span data-ttu-id="9a871-1329">類別初始設定式，請使用採用多載<xref:System.Reflection.BindingFlags>，並指定<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> Visual Basic 中)。</span><span class="sxs-lookup"><span data-stu-id="9a871-1329">To find class initializers, use an overload that takes <xref:System.Reflection.BindingFlags>, and specify <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="9a871-1330">您也可以取得類別初始設定式使用<xref:System.Type.TypeInitializer%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-1330">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
 <span data-ttu-id="9a871-1331">下表顯示基底類別成員會傳回由`Get`反映型別上時的方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-1331">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="9a871-1332">成員類型</span><span class="sxs-lookup"><span data-stu-id="9a871-1332">Member Type</span></span>|<span data-ttu-id="9a871-1333">Static</span><span class="sxs-lookup"><span data-stu-id="9a871-1333">Static</span></span>|<span data-ttu-id="9a871-1334">非靜態</span><span class="sxs-lookup"><span data-stu-id="9a871-1334">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="9a871-1335">建構函式</span><span class="sxs-lookup"><span data-stu-id="9a871-1335">Constructor</span></span>|<span data-ttu-id="9a871-1336">否</span><span class="sxs-lookup"><span data-stu-id="9a871-1336">No</span></span>|<span data-ttu-id="9a871-1337">否</span><span class="sxs-lookup"><span data-stu-id="9a871-1337">No</span></span>|  
|<span data-ttu-id="9a871-1338">欄位</span><span class="sxs-lookup"><span data-stu-id="9a871-1338">Field</span></span>|<span data-ttu-id="9a871-1339">否</span><span class="sxs-lookup"><span data-stu-id="9a871-1339">No</span></span>|<span data-ttu-id="9a871-1340">可以。</span><span class="sxs-lookup"><span data-stu-id="9a871-1340">Yes.</span></span> <span data-ttu-id="9a871-1341">欄位永遠是依名稱和簽章隱藏。</span><span class="sxs-lookup"><span data-stu-id="9a871-1341">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="9a871-1342">Event - 事件</span><span class="sxs-lookup"><span data-stu-id="9a871-1342">Event</span></span>|<span data-ttu-id="9a871-1343">不適用</span><span class="sxs-lookup"><span data-stu-id="9a871-1343">Not applicable</span></span>|<span data-ttu-id="9a871-1344">一般類型系統規則是繼承實作屬性的方法相同。</span><span class="sxs-lookup"><span data-stu-id="9a871-1344">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="9a871-1345">反映會視為由名稱和簽章隱藏屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-1345">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="9a871-1346">請參閱附註 2。</span><span class="sxs-lookup"><span data-stu-id="9a871-1346">See note 2 below.</span></span>|  
|<span data-ttu-id="9a871-1347">方法</span><span class="sxs-lookup"><span data-stu-id="9a871-1347">Method</span></span>|<span data-ttu-id="9a871-1348">否</span><span class="sxs-lookup"><span data-stu-id="9a871-1348">No</span></span>|<span data-ttu-id="9a871-1349">可以。</span><span class="sxs-lookup"><span data-stu-id="9a871-1349">Yes.</span></span> <span data-ttu-id="9a871-1350">（虛擬和非虛擬） 的方法可以隱藏依名稱或依名稱和簽章隱藏。</span><span class="sxs-lookup"><span data-stu-id="9a871-1350">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="9a871-1351">巢狀的類型</span><span class="sxs-lookup"><span data-stu-id="9a871-1351">Nested Type</span></span>|<span data-ttu-id="9a871-1352">否</span><span class="sxs-lookup"><span data-stu-id="9a871-1352">No</span></span>|<span data-ttu-id="9a871-1353">否</span><span class="sxs-lookup"><span data-stu-id="9a871-1353">No</span></span>|  
|<span data-ttu-id="9a871-1354">屬性</span><span class="sxs-lookup"><span data-stu-id="9a871-1354">Property</span></span>|<span data-ttu-id="9a871-1355">不適用</span><span class="sxs-lookup"><span data-stu-id="9a871-1355">Not applicable</span></span>|<span data-ttu-id="9a871-1356">一般類型系統規則是繼承實作屬性的方法相同。</span><span class="sxs-lookup"><span data-stu-id="9a871-1356">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="9a871-1357">反映會視為由名稱和簽章隱藏屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-1357">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="9a871-1358">請參閱附註 2。</span><span class="sxs-lookup"><span data-stu-id="9a871-1358">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="9a871-1359">依名稱和簽章隱藏會考慮所有組件的簽章，包括自訂修飾詞，傳回類型、 參數類型、 sentinels 和 unmanaged 呼叫慣例。</span><span class="sxs-lookup"><span data-stu-id="9a871-1359">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="9a871-1360">這是二進位比較。</span><span class="sxs-lookup"><span data-stu-id="9a871-1360">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="9a871-1361">反映的屬性和事件會依名稱和簽章隱藏。</span><span class="sxs-lookup"><span data-stu-id="9a871-1361">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="9a871-1362">如果您同時有 get 和 set 存取子的屬性在基底類別中，但衍生的類別有只有 get 存取子，在衍生的類別的屬性會隱藏基底類別屬性中，並不能存取的基底類別的 setter。</span><span class="sxs-lookup"><span data-stu-id="9a871-1362">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="9a871-1363">自訂屬性不屬於一般類型系統。</span><span class="sxs-lookup"><span data-stu-id="9a871-1363">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="9a871-1364">如果目前<xref:System.Type>代表建構的泛型型別，這個方法會傳回<xref:System.Reflection.MemberInfo>具有由適當的型別引數取代型別參數的物件。</span><span class="sxs-lookup"><span data-stu-id="9a871-1364">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.MemberInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="9a871-1365">如果目前<xref:System.Type>代表型別參數的泛型類型或泛型方法，這個方法定義中搜尋類別條件約束的成員或成員<xref:System.Object>是否沒有類別條件約束。</span><span class="sxs-lookup"><span data-stu-id="9a871-1365">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the members of the class constraint, or the members of <xref:System.Object> if there is no class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-1366">下列程式碼範例示範如何使用<xref:System.Type.GetMembers>方法多載來收集指定之類別的所有公用成員的相關資訊。</span><span class="sxs-lookup"><span data-stu-id="9a871-1366">The following code example demonstrates how to use the <xref:System.Type.GetMembers> method overload to collect information about all public members of a specified class.</span></span>  
  
 [!code-cpp[Type_GetMembers1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMembers1/CPP/type_getmembers1.cpp#1)]
 [!code-csharp[Type_GetMembers1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMembers1/CS/type_getmembers1.cs#1)]
 [!code-vb[Type_GetMembers1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMembers1/VB/type_getmembers1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MemberInfo" />
        <altmember cref="M:System.Type.GetMember(System.String)" />
        <altmember cref="M:System.Type.GetDefaultMembers" />
        <altmember cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetMembers">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.MemberInfo[] GetMembers (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetMembers(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMembers(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetMembers (bindingAttr As BindingFlags) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMembers(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetMembers : System.Reflection.BindingFlags -&gt; System.Reflection.MemberInfo[]" Usage="type.GetMembers bindingAttr" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMembers(System.Reflection.BindingFlags)</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetMembers(System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr"><span data-ttu-id="9a871-1367">位元遮罩，由一或多個 <see cref="T:System.Reflection.BindingFlags" /> 組成，而這些旗標會指定執行搜尋的方式。</span><span class="sxs-lookup"><span data-stu-id="9a871-1367">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="9a871-1368">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-1368">-or-</span></span> 
<span data-ttu-id="9a871-1369">零 (<see cref="F:System.Reflection.BindingFlags.Default" />)，表示傳回空陣列。</span><span class="sxs-lookup"><span data-stu-id="9a871-1369">Zero (<see cref="F:System.Reflection.BindingFlags.Default" />), to return an empty array.</span></span></param>
        <summary><span data-ttu-id="9a871-1370">在衍生類別中覆寫時，使用指定的繫結條件約束，搜尋定義給目前 <see cref="T:System.Type" /> 的成員。</span><span class="sxs-lookup"><span data-stu-id="9a871-1370">When overridden in a derived class, searches for the members defined for the current <see cref="T:System.Type" />, using the specified binding constraints.</span></span></summary>
        <returns><span data-ttu-id="9a871-1371"><see cref="T:System.Reflection.MemberInfo" /> 物件的陣列，代表為目前 <see cref="T:System.Type" /> 定義之符合指定繫結條件約束的所有成員。</span><span class="sxs-lookup"><span data-stu-id="9a871-1371">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing all members defined for the current <see cref="T:System.Type" /> that match the specified binding constraints.</span></span>  
  
<span data-ttu-id="9a871-1372">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-1372">-or-</span></span> 
<span data-ttu-id="9a871-1373">如果沒有任何成員定義給目前的 <see cref="T:System.Reflection.MemberInfo" />，或沒有已定義的成員符合繫結條件約束，則為 <see cref="T:System.Type" /> 類型的空陣列。</span><span class="sxs-lookup"><span data-stu-id="9a871-1373">An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if no members are defined for the current <see cref="T:System.Type" />, or if none of the defined members match the binding constraints.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-1374">成員包含屬性、 方法、 欄位、 事件等等。</span><span class="sxs-lookup"><span data-stu-id="9a871-1374">Members include properties, methods, fields, events, and so on.</span></span>  
  
 <span data-ttu-id="9a871-1375"><xref:System.Type.GetMembers%2A>方法不會傳回成員以特定順序，例如依字母順序或依宣告順序。</span><span class="sxs-lookup"><span data-stu-id="9a871-1375">The <xref:System.Type.GetMembers%2A> method does not return members in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="9a871-1376">您的程式碼不得相依於成員會傳回的順序，因為順序不同。</span><span class="sxs-lookup"><span data-stu-id="9a871-1376">Your code must not depend on the order in which members are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="9a871-1377">下列<xref:System.Reflection.BindingFlags>篩選器旗標可以用來定義要包含在搜尋中的成員：</span><span class="sxs-lookup"><span data-stu-id="9a871-1377">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which members to include in the search:</span></span>  
  
-   <span data-ttu-id="9a871-1378">您必須指定`BindingFlags.Instance`或`BindingFlags.Static`以取得傳回值。</span><span class="sxs-lookup"><span data-stu-id="9a871-1378">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="9a871-1379">指定`BindingFlags.Public`来包含在搜尋中的公用成員。</span><span class="sxs-lookup"><span data-stu-id="9a871-1379">Specify `BindingFlags.Public` to include public members in the search.</span></span>  
  
-   <span data-ttu-id="9a871-1380">指定`BindingFlags.NonPublic`要在搜尋中包含非公用成員 （也就是私用、 內部和受保護成員）。</span><span class="sxs-lookup"><span data-stu-id="9a871-1380">Specify `BindingFlags.NonPublic` to include non-public members (that is, private, internal, and protected members) in the search.</span></span> <span data-ttu-id="9a871-1381">只有受保護，而且會傳回基底類別上的內部成員;不會傳回基底類別上的私用成員。</span><span class="sxs-lookup"><span data-stu-id="9a871-1381">Only protected and internal members on base classes are returned; private members on base classes are not returned.</span></span>  
  
-   <span data-ttu-id="9a871-1382">指定`BindingFlags.FlattenHierarchy`包含`public`和`protected`階層; 的靜態成員`private`中繼承類別的靜態成員不包含。</span><span class="sxs-lookup"><span data-stu-id="9a871-1382">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="9a871-1383">下列<xref:System.Reflection.BindingFlags>輔助鍵旗標可以用來變更搜尋的運作方式：</span><span class="sxs-lookup"><span data-stu-id="9a871-1383">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="9a871-1384">`BindingFlags.DeclaredOnly` 若要搜尋只在宣告的成員，才<xref:System.Type>，不只是繼承的成員。</span><span class="sxs-lookup"><span data-stu-id="9a871-1384">`BindingFlags.DeclaredOnly` to search only the members declared on the <xref:System.Type>, not members that were simply inherited.</span></span>  
  
 <span data-ttu-id="9a871-1385">呼叫這個方法只有`Public`旗標] 或 [僅`NonPublic`旗標將會傳回指定的成員，而且不需要任何其他旗標。</span><span class="sxs-lookup"><span data-stu-id="9a871-1385">Calling this method with only the `Public` flag or only the `NonPublic` flag will return the specified members and does not require any other flags.</span></span>  
  
 <span data-ttu-id="9a871-1386">如需詳細資訊，請參閱 <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="9a871-1386">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="9a871-1387">若要取得使用這個方法多載類別初始設定式 (.cctor)，您必須指定<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType>在 Visual Basic 中)。</span><span class="sxs-lookup"><span data-stu-id="9a871-1387">To get the class initializer (.cctor) using this method overload, you must specify <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="9a871-1388">您也可以取得類別初始設定式使用<xref:System.Type.TypeInitializer%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-1388">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
 <span data-ttu-id="9a871-1389">如果目前的 T:System.Type 代表建構的泛型型別，則這個方法會傳回<xref:System.Reflection.MemberInfo>具有由適當的型別引數取代型別參數的物件。</span><span class="sxs-lookup"><span data-stu-id="9a871-1389">If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.MemberInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="9a871-1390">如果目前<xref:System.Type>代表型別參數的泛型類型或泛型方法，這個方法定義中搜尋類別條件約束的成員或成員<xref:System.Object>是否沒有類別條件約束。</span><span class="sxs-lookup"><span data-stu-id="9a871-1390">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the members of the class constraint, or the members of <xref:System.Object> if there is no class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-1391">下列程式碼範例示範如何使用<xref:System.Type.GetMembers%28System.Reflection.BindingFlags%29>方法多載來收集指定之類別的所有公用執行個體成員的相關資訊。</span><span class="sxs-lookup"><span data-stu-id="9a871-1391">The following code example demonstrates how to use the <xref:System.Type.GetMembers%28System.Reflection.BindingFlags%29> method overload to collect information about all public instance members of a specified class.</span></span>  
  
 [!code-cpp[Type_GetMembers2#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMembers2/CPP/type_getmembers2.cpp#1)]
 [!code-csharp[Type_GetMembers2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMembers2/CS/type_getmembers2.cs#1)]
 [!code-vb[Type_GetMembers2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMembers2/VB/type_getmembers2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MemberInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetMember(System.String)" />
        <altmember cref="M:System.Type.GetDefaultMembers" />
        <altmember cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetMethod">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9a871-1392">取得目前 <see cref="T:System.Type" /> 的特定方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-1392">Gets a specific method of the current <see cref="T:System.Type" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethod (name As String) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetMethod(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetMethod : string -&gt; System.Reflection.MethodInfo&#xA;override this.GetMethod : string -&gt; System.Reflection.MethodInfo" Usage="type.GetMethod name" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMethod(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="9a871-1393">字串，包含要取得的公用方法名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-1393">The string containing the name of the public method to get.</span></span></param>
        <summary><span data-ttu-id="9a871-1394">搜尋具有指定名稱的公用方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-1394">Searches for the public method with the specified name.</span></span></summary>
        <returns><span data-ttu-id="9a871-1395">物件，代表具有指定之名稱的公用方法 (如有找到)；否則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-1395">An object that represents the public method with the specified name, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-1396">搜尋`name`會區分大小寫。</span><span class="sxs-lookup"><span data-stu-id="9a871-1396">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="9a871-1397">搜尋包含 public static 和 public 的執行個體方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-1397">The search includes public static and public instance methods.</span></span>  
  
 <span data-ttu-id="9a871-1398">如果方法多載，而且有一個以上的公用方法，<xref:System.Type.GetMethod%28System.String%29>方法會擲回<xref:System.Reflection.AmbiguousMatchException>例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9a871-1398">If a method is overloaded and has more than one public method, the <xref:System.Type.GetMethod%28System.String%29> method throws an <xref:System.Reflection.AmbiguousMatchException> exception.</span></span> <span data-ttu-id="9a871-1399">在下列範例中，例外狀況會擲回多個公用的多載，所以<xref:System.Int32.ToString%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-1399">In the following example, an exception is thrown because there is more than one public overload of the <xref:System.Int32.ToString%2A?displayProperty=nameWithType> method.</span></span>  <span data-ttu-id="9a871-1400">相反地，因為`Person.ToString`方法覆寫<xref:System.Object.ToString%2A?displayProperty=nameWithType>，因此不會多載，則<xref:System.Type.GetMethod%28System.String%29>方法可擷取<xref:System.Reflection.MethodInfo>物件。</span><span class="sxs-lookup"><span data-stu-id="9a871-1400">On the other hand, because the `Person.ToString` method overrides  <xref:System.Object.ToString%2A?displayProperty=nameWithType> and therefore is not overloaded, the <xref:System.Type.GetMethod%28System.String%29> method is able to retrieve the <xref:System.Reflection.MethodInfo> object.</span></span>  
  
 [!code-csharp[System.Type.GetMethod#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Type.GetMethod/cs/GetMethodWithOverloads2.cs#3)]
 [!code-vb[System.Type.GetMethod#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Type.GetMethod/vb/GetMethodWithOverloads2.vb#3)]  
  
 <span data-ttu-id="9a871-1401">您可以執行下列命令來擷取特定方法的其中一個：</span><span class="sxs-lookup"><span data-stu-id="9a871-1401">You can do one of the following to retrieve a specific method:</span></span>  
  
-   <span data-ttu-id="9a871-1402">呼叫<xref:System.Type.GetMethod%28System.String%2CSystem.Reflection.BindingFlags%29>方法並指定`bindingAttr`唯一識別方法的引數。</span><span class="sxs-lookup"><span data-stu-id="9a871-1402">Call the <xref:System.Type.GetMethod%28System.String%2CSystem.Reflection.BindingFlags%29> method and specify a `bindingAttr` argument that uniquely identifies the method.</span></span> <span data-ttu-id="9a871-1403">例如，如果因為類型都有靜態和執行個體的多載，則會擲回例外狀況，您可以指定`bindingAttr`引數<xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="9a871-1403">For example, if the exception is thrown because a type has a static and an instance overload, you can specify a  `bindingAttr` argument  of <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="9a871-1404">呼叫的多載<xref:System.Type.GetMethod%2A>方法，其中包含`types`參數會定義方法的參數型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-1404">Call an overload of the <xref:System.Type.GetMethod%2A> method that includes a `types` parameter which defines the types of the method's parameters.</span></span>  
  
-   <span data-ttu-id="9a871-1405">呼叫<xref:System.Type.GetMethods>方法來擷取陣列，包含所有屬於類型的公用方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-1405">Call the <xref:System.Type.GetMethods> method to retrieve an array containing all of the public methods belonging to a type.</span></span> <span data-ttu-id="9a871-1406">然後您可以重複用於識別重複的方法，名為`name`。</span><span class="sxs-lookup"><span data-stu-id="9a871-1406">You can then iterate it to identify the duplicate methods named `name`.</span></span>  
  
 <span data-ttu-id="9a871-1407">如果目前的 T:System.Type 代表建構的泛型型別，則這個方法會傳回<xref:System.Reflection.MethodInfo>具有由適當的型別引數取代型別參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-1407">If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.MethodInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="9a871-1408">如果目前<xref:System.Type>代表型別參數的泛型類型或泛型方法，這個方法定義中搜尋類別條件約束的方法或方法的<xref:System.Object>是否沒有類別條件約束。</span><span class="sxs-lookup"><span data-stu-id="9a871-1408">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the methods of the class constraint, or the methods of <xref:System.Object> if there is no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9a871-1409">如需泛型的方法，不包括中的型別引數`name`。</span><span class="sxs-lookup"><span data-stu-id="9a871-1409">For generic methods, do not include the type arguments in `name`.</span></span> <span data-ttu-id="9a871-1410">例如，C# 程式碼`GetMember("MyMethod<int>")`搜尋之成員的文字名稱 」`MyMethod<int>`"，而不是方法，名為`MyMethod`具有一個泛型類型引數`int`。</span><span class="sxs-lookup"><span data-stu-id="9a871-1410">For example, the C# code `GetMember("MyMethod<int>")` searches for a member with the text name "`MyMethod<int>`", rather than for a method named `MyMethod` that has one generic argument of type `int`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-1411">下列範例會取得名為`MethodA`。</span><span class="sxs-lookup"><span data-stu-id="9a871-1411">The following example gets a method named `MethodA`.</span></span>  
  
 [!code-cpp[Type_GetMethod1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMethod1/CPP/type_getmethod1.cpp#1)]
 [!code-csharp[Type_GetMethod1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMethod1/CS/type_getmethod1.cs#1)]
 [!code-vb[Type_GetMethod1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMethod1/VB/type_getmethod1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException"><span data-ttu-id="9a871-1412">找到一個以上具有指定名稱的方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-1412">More than one method is found with the specified name.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9a871-1413"><paramref name="name" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-1413"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetMethods" />
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethod (name As String, bindingAttr As BindingFlags) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetMethod : string * System.Reflection.BindingFlags -&gt; System.Reflection.MethodInfo&#xA;override this.GetMethod : string * System.Reflection.BindingFlags -&gt; System.Reflection.MethodInfo" Usage="type.GetMethod (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMethod(System.String,System.Reflection.BindingFlags)</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetMethod(System.String,System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="9a871-1414">字串，包含要取得的方法名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-1414">The string containing the name of the method to get.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="9a871-1415">位元遮罩，由一或多個 <see cref="T:System.Reflection.BindingFlags" /> 組成，而這些旗標會指定執行搜尋的方式。</span><span class="sxs-lookup"><span data-stu-id="9a871-1415">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="9a871-1416">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-1416">-or-</span></span> 
<span data-ttu-id="9a871-1417">零，傳回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-1417">Zero, to return <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="9a871-1418">使用指定的繫結條件約束搜尋指定的方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-1418">Searches for the specified method, using the specified binding constraints.</span></span></summary>
        <returns><span data-ttu-id="9a871-1419">物件，代表符合指定之需求的方法 (如有找到)；否則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-1419">An object representing the method that matches the specified requirements, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-1420">下列<xref:System.Reflection.BindingFlags>篩選器旗標可以用來定義要包含在搜尋中的方法：</span><span class="sxs-lookup"><span data-stu-id="9a871-1420">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which methods to include in the search:</span></span>  
  
-   <span data-ttu-id="9a871-1421">您必須指定<xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>或<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>以取得傳回值。</span><span class="sxs-lookup"><span data-stu-id="9a871-1421">You must specify either <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> or <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> in order to get a return.</span></span>  
  
-   <span data-ttu-id="9a871-1422">指定<xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType>来包含在搜尋中的公用方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-1422">Specify <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> to include public methods in the search.</span></span>  
  
-   <span data-ttu-id="9a871-1423">指定<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType>在搜尋中包括非公用方法 （也就是私用、 內部和受保護的方法）。</span><span class="sxs-lookup"><span data-stu-id="9a871-1423">Specify <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> to include non-public methods (that is, private, internal, and protected methods) in the search.</span></span>  
  
-   <span data-ttu-id="9a871-1424">指定<xref:System.Reflection.BindingFlags.FlattenHierarchy?displayProperty=nameWithType>包含`public`和`protected`階層; 的靜態成員`private`中繼承類別的靜態成員不包含。</span><span class="sxs-lookup"><span data-stu-id="9a871-1424">Specify <xref:System.Reflection.BindingFlags.FlattenHierarchy?displayProperty=nameWithType> to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="9a871-1425">下列<xref:System.Reflection.BindingFlags>輔助鍵旗標可以用來變更搜尋的運作方式：</span><span class="sxs-lookup"><span data-stu-id="9a871-1425">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="9a871-1426"><xref:System.Reflection.BindingFlags.IgnoreCase?displayProperty=nameWithType> 忽略大小寫的`name`。</span><span class="sxs-lookup"><span data-stu-id="9a871-1426"><xref:System.Reflection.BindingFlags.IgnoreCase?displayProperty=nameWithType> to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="9a871-1427"><xref:System.Reflection.BindingFlags.DeclaredOnly?displayProperty=nameWithType> 搜尋僅方法上宣告<xref:System.Type>，不只是繼承的方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-1427"><xref:System.Reflection.BindingFlags.DeclaredOnly?displayProperty=nameWithType> to search only the methods declared on the <xref:System.Type>, not methods that were simply inherited.</span></span>  
  
 <span data-ttu-id="9a871-1428">如需詳細資訊，請參閱 <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="9a871-1428">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="9a871-1429">如果多載方法，而且多個多載符合所指定的條件約束`bindingAttr`引數，方法會擲回<xref:System.Reflection.AmbiguousMatchException>例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9a871-1429">If a method is overloaded and more than one overload meets the constraints specified by the `bindingAttr` argument, the method throws an <xref:System.Reflection.AmbiguousMatchException> exception.</span></span> <span data-ttu-id="9a871-1430">在下列範例中，因為，會擲回例外狀況：</span><span class="sxs-lookup"><span data-stu-id="9a871-1430">In the following example, an exception is thrown because:</span></span>  
  
-   <span data-ttu-id="9a871-1431">`TestClass`型別有兩個的公用執行個體的多載`DisplayValue`方法，`DisplayValue(String)`和`DisplayValue(String, Object[])`。</span><span class="sxs-lookup"><span data-stu-id="9a871-1431">The `TestClass` type has two public instance overloads of the `DisplayValue` method, `DisplayValue(String)` and `DisplayValue(String, Object[])`.</span></span>  
  
-   <span data-ttu-id="9a871-1432">`TestClass`型別有兩個的公用執行個體的多載`Equals`方法，其中繼承自<xref:System.Object>:`Equals(TestClass)`和`Equals(Object)`。</span><span class="sxs-lookup"><span data-stu-id="9a871-1432">The `TestClass` type has two public instance overloads of the `Equals` method,  one of which is inherited from <xref:System.Object>: `Equals(TestClass)` and `Equals(Object)`.</span></span>  
  
 [!code-csharp[System.Type.GetMethod#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Type.GetMethod/cs/GetMethodWithOverloads1.cs#2)]
 [!code-vb[System.Type.GetMethod#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Type.GetMethod/vb/GetMethodWithOverloads1.vb#2)]  
  
 <span data-ttu-id="9a871-1433">您可以執行下列命令來擷取特定方法的其中一個：</span><span class="sxs-lookup"><span data-stu-id="9a871-1433">You can do one of the following to retrieve a specific method:</span></span>  
  
-   <span data-ttu-id="9a871-1434">變更繫結條件約束。</span><span class="sxs-lookup"><span data-stu-id="9a871-1434">Change the binding constraints.</span></span> <span data-ttu-id="9a871-1435">在上述範例中，嘗試擷取的公用執行個體`Equals`類型所宣告且不會成功地繼承的方法會擷取`Equals(TestClass)`。</span><span class="sxs-lookup"><span data-stu-id="9a871-1435">In the previous example, attempting to retrieve a public instance `Equals` method that is declared by the type and not inherited successfully retrieves `Equals(TestClass)`.</span></span>  
  
-   <span data-ttu-id="9a871-1436">呼叫的多載<xref:System.Type.GetMethod%2A>方法，其中包含`types`參數會定義方法的參數型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-1436">Call an overload of the <xref:System.Type.GetMethod%2A> method that includes a `types` parameter which defines the types of the method's parameters.</span></span>  
  
-   <span data-ttu-id="9a871-1437">呼叫<xref:System.Type.GetMethods%28System.Reflection.BindingFlags%29>方法來擷取陣列，包含所有屬於型別具有指定的繫結屬性的方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-1437">Call the <xref:System.Type.GetMethods%28System.Reflection.BindingFlags%29> method to retrieve an array containing all of the methods belonging to a type that have the specified binding attributes.</span></span> <span data-ttu-id="9a871-1438">然後您可以重複用於識別重複的方法，名為`name`。</span><span class="sxs-lookup"><span data-stu-id="9a871-1438">You can then iterate it to identify the duplicate methods named `name`.</span></span> <span data-ttu-id="9a871-1439">這種方法說明上述的範例處理常式<xref:System.Reflection.AmbiguousMatchException>例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9a871-1439">This approach is illustrated in the previous example's handler for the <xref:System.Reflection.AmbiguousMatchException> exception.</span></span>  
  
 <span data-ttu-id="9a871-1440">如果目前<xref:System.Type>代表建構的泛型型別，這個方法會傳回<xref:System.Reflection.MethodInfo>具有由適當的型別引數取代型別參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-1440">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.MethodInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="9a871-1441">如果目前<xref:System.Type>代表型別參數的泛型類型或泛型方法，這個方法定義中搜尋類別條件約束的方法或方法的<xref:System.Object>是否沒有類別條件約束。</span><span class="sxs-lookup"><span data-stu-id="9a871-1441">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the methods of the class constraint, or the methods of <xref:System.Object> if there is no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9a871-1442">如需泛型的方法，不包括中的型別引數`name`。</span><span class="sxs-lookup"><span data-stu-id="9a871-1442">For generic methods, do not include the type arguments in `name`.</span></span> <span data-ttu-id="9a871-1443">例如，C# 程式碼`GetMember("MyMethod<int>")`搜尋之成員的文字名稱 」`MyMethod<int>`"，而不是方法，名為`MyMethod`具有一個泛型類型引數`int`。</span><span class="sxs-lookup"><span data-stu-id="9a871-1443">For example, the C# code `GetMember("MyMethod<int>")` searches for a member with the text name "`MyMethod<int>`", rather than for a method named `MyMethod` that has one generic argument of type `int`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-1444">下列範例會取得符合指定的繫結旗標的方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-1444">The following example gets the method that matches the specified binding flags.</span></span>  
  
 [!code-cpp[Type_GetMethod2#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMethod2/CPP/type_getmethod2.cpp#1)]
 [!code-csharp[Type_GetMethod2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMethod2/CS/type_getmethod2.cs#1)]
 [!code-vb[Type_GetMethod2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMethod2/VB/type_getmethod2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException"><span data-ttu-id="9a871-1445">找到一個以上的方法，其具有指定名稱，且符合指定繫結條件約束。</span><span class="sxs-lookup"><span data-stu-id="9a871-1445">More than one method is found with the specified name and matching the specified binding constraints.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9a871-1446"><paramref name="name" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-1446"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetMethods" />
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, Type[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name, class System.Type[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethod (name As String, types As Type()) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, cli::array &lt;Type ^&gt; ^ types);" />
      <MemberSignature Language="F#" Value="abstract member GetMethod : string * Type[] -&gt; System.Reflection.MethodInfo&#xA;override this.GetMethod : string * Type[] -&gt; System.Reflection.MethodInfo" Usage="type.GetMethod (name, types)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMethod(System.String,System.Type[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="types" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="9a871-1447">字串，包含要取得的公用方法名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-1447">The string containing the name of the public method to get.</span></span></param>
        <param name="types"><span data-ttu-id="9a871-1448"><see cref="T:System.Type" /> 物件的陣列，代表所要取得之方法的參數數目、順序和類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-1448">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.</span></span>  
  
<span data-ttu-id="9a871-1449">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-1449">-or-</span></span> 
<span data-ttu-id="9a871-1450"><see cref="T:System.Type" /> 物件的空陣列 (由 <see cref="F:System.Type.EmptyTypes" /> 欄位提供)，可取得不採用參數的方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-1450">An empty array of <see cref="T:System.Type" /> objects (as provided by the <see cref="F:System.Type.EmptyTypes" /> field) to get a method that takes no parameters.</span></span></param>
        <summary><span data-ttu-id="9a871-1451">搜尋指定的公用方法，其參數符合指定的引數類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-1451">Searches for the specified public method whose parameters match the specified argument types.</span></span></summary>
        <returns><span data-ttu-id="9a871-1452">代表其參數符合指定之引數類型的公用方法物件 (如有找到)；否則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-1452">An object representing the public method whose parameters match the specified argument types, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-1453">搜尋`name`會區分大小寫。</span><span class="sxs-lookup"><span data-stu-id="9a871-1453">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="9a871-1454">搜尋包含 public static 和 public 的執行個體方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-1454">The search includes public static and public instance methods.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9a871-1455">查詢建構函式和方法時，您不能省略參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-1455">You cannot omit parameters when looking up constructors and methods.</span></span> <span data-ttu-id="9a871-1456">叫用時，您只可以省略參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-1456">You can only omit parameters when invoking.</span></span>  
  
 <span data-ttu-id="9a871-1457">如果目前<xref:System.Type>代表建構的泛型型別，這個方法會傳回<xref:System.Reflection.MethodInfo>具有由適當的型別引數取代型別參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-1457">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.MethodInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="9a871-1458">如果目前<xref:System.Type>代表型別參數的泛型類型或泛型方法，這個方法定義中搜尋類別條件約束的方法或方法的<xref:System.Object>是否沒有類別條件約束。</span><span class="sxs-lookup"><span data-stu-id="9a871-1458">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the methods of the class constraint, or the methods of <xref:System.Object> if there is no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9a871-1459">`name`參數不能包含型別引數。</span><span class="sxs-lookup"><span data-stu-id="9a871-1459">The `name` parameter cannot include type arguments.</span></span> <span data-ttu-id="9a871-1460">例如，C# 程式碼`GetMethod("MyGenericMethod<int>")`搜尋方法，以使用的文字名稱"`MyGenericMethod<int>`"，而不是方法，名為`MyGenericMethod`具有一個泛型類型引數`int`。</span><span class="sxs-lookup"><span data-stu-id="9a871-1460">For example, the C# code `GetMethod("MyGenericMethod<int>")` searches for a method with the text name "`MyGenericMethod<int>`", rather than for a method named `MyGenericMethod` that has one generic argument of type `int`.</span></span> <span data-ttu-id="9a871-1461">請改用`GetMethod("MyGenericMethod")`中的適當參數與`types`陣列。</span><span class="sxs-lookup"><span data-stu-id="9a871-1461">Instead, use `GetMethod("MyGenericMethod")` with the appropriate parameter in the `types` array.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-1462">下列範例會尋找特定的多載`MethodA`，指定各種不同的引數型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-1462">The following example finds specific overloads of `MethodA`, specifying a variety of argument types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9a871-1463">[!INCLUDE[csprcslong](~/includes/csprcslong-md.md)]範例需要`/unsafe`編譯器選項。</span><span class="sxs-lookup"><span data-stu-id="9a871-1463">The [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)] example requires the `/unsafe` compiler option.</span></span>  
  
 [!code-cpp[Type_GetMethod4#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMethod4/CPP/type_getmethod4.cpp#1)]
 [!code-csharp[Type_GetMethod4#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMethod4/CS/type_getmethod4.cs#1)]
 [!code-vb[Type_GetMethod4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMethod4/VB/type_getmethod4.vb#1)]  
  
 <span data-ttu-id="9a871-1464">下列範例會擷取<xref:System.Reflection.MethodInfo>物件來代表`Add`非泛型型別的方法 (<xref:System.Collections.ArrayList>類別)，開放式泛型類型 (<xref:System.Collections.Generic.List%601>類別)，和封閉式的泛型型別 (`List(Of String)`型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-1464">The following example retrieves <xref:System.Reflection.MethodInfo> objects that represent the `Add` methods  of a non-generic type (the <xref:System.Collections.ArrayList> class), an open generic type (the <xref:System.Collections.Generic.List%601> class), and a closed generic type (the `List(Of String)` type.</span></span>  
  
 [!code-csharp[System.Type.GetMethod#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Type.GetMethod/cs/GetMethod1.cs#1)]
 [!code-vb[System.Type.GetMethod#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Type.GetMethod/vb/GetMethod1.vb#1)]  
  
 <span data-ttu-id="9a871-1465">此範例會定義`GetAddMethod`方法，可擷取適當<xref:System.Reflection.MethodInfo>物件。</span><span class="sxs-lookup"><span data-stu-id="9a871-1465">The example defines a `GetAddMethod` method that retrieves the appropriate <xref:System.Reflection.MethodInfo> object.</span></span> <span data-ttu-id="9a871-1466">若要提供`types`它會呼叫開放式泛型類型引數，<xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-1466">To provide the `types` argument for an open generic type, it calls the <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="9a871-1467">若要提供`types`封閉式的泛型型別引數，它會擷取的值<xref:System.Type.GenericTypeArguments%2A?displayProperty=nameWithType>屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-1467">To provide the `types` argument for a closed generic type, it retrieves the value of the <xref:System.Type.GenericTypeArguments%2A?displayProperty=nameWithType> property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException"><span data-ttu-id="9a871-1468">找到一個以上具有指定名稱及指定參數的方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-1468">More than one method is found with the specified name and specified parameters.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9a871-1469"><paramref name="name" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-1469"><paramref name="name" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="9a871-1470">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-1470">-or-</span></span> 
 <span data-ttu-id="9a871-1471"><paramref name="types" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-1471"><paramref name="types" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="9a871-1472">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-1472">-or-</span></span> 
<span data-ttu-id="9a871-1473"><paramref name="types" /> 的其中一個項目為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-1473">One of the elements in <paramref name="types" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9a871-1474"><paramref name="types" /> 是多維的。</span><span class="sxs-lookup"><span data-stu-id="9a871-1474"><paramref name="types" /> is multidimensional.</span></span></exception>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetMethods" />
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, int genericParameterCount, Type[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.MethodInfo GetMethod(string name, int32 genericParameterCount, class System.Type[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String,System.Int32,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethod (name As String, genericParameterCount As Integer, types As Type()) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, int genericParameterCount, cli::array &lt;Type ^&gt; ^ types);" />
      <MemberSignature Language="F#" Value="member this.GetMethod : string * int * Type[] -&gt; System.Reflection.MethodInfo" Usage="type.GetMethod (name, genericParameterCount, types)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="genericParameterCount" Type="System.Int32" />
        <Parameter Name="types" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="genericParameterCount">To be added.</param>
        <param name="types">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethod (name As String, types As Type(), modifiers As ParameterModifier()) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetMethod : string * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo&#xA;override this.GetMethod : string * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo" Usage="type.GetMethod (name, types, modifiers)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMethod(System.String,System.Type[],System.Reflection.ParameterModifier[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="9a871-1475">字串，包含要取得的公用方法名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-1475">The string containing the name of the public method to get.</span></span></param>
        <param name="types"><span data-ttu-id="9a871-1476"><see cref="T:System.Type" /> 物件的陣列，代表所要取得之方法的參數數目、順序和類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-1476">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.</span></span>  
  
<span data-ttu-id="9a871-1477">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-1477">-or-</span></span> 
<span data-ttu-id="9a871-1478"><see cref="T:System.Type" /> 物件的空陣列 (由 <see cref="F:System.Type.EmptyTypes" /> 欄位提供)，可取得不採用參數的方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-1478">An empty array of <see cref="T:System.Type" /> objects (as provided by the <see cref="F:System.Type.EmptyTypes" /> field) to get a method that takes no parameters.</span></span></param>
        <param name="modifiers"><span data-ttu-id="9a871-1479"><see cref="T:System.Reflection.ParameterModifier" /> 物件的陣列，代表在 <paramref name="types" /> 陣列中與對應項目關聯的屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-1479">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array.</span></span> <span data-ttu-id="9a871-1480">只用於透過 COM Interop 進行呼叫以及只處理以傳址方式傳遞的參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-1480">To be only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span> <span data-ttu-id="9a871-1481">預設的繫結器不會處理這個參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-1481">The default binder does not process this parameter.</span></span></param>
        <summary><span data-ttu-id="9a871-1482">搜尋指定的公用方法，其參數符合指定的引數類型和修飾詞。</span><span class="sxs-lookup"><span data-stu-id="9a871-1482">Searches for the specified public method whose parameters match the specified argument types and modifiers.</span></span></summary>
        <returns><span data-ttu-id="9a871-1483">物件，代表符合指定之需求的公用方法 (如有找到)；否則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-1483">An object representing the public method that matches the specified requirements, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-1484">雖然預設繫結器不會處理<xref:System.Reflection.ParameterModifier>(`modifiers`參數)，您可以使用抽象<xref:System.Reflection.Binder?displayProperty=nameWithType>類別，以寫入未處理的自訂繫結器`modifiers`。</span><span class="sxs-lookup"><span data-stu-id="9a871-1484">Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers`.</span></span> <span data-ttu-id="9a871-1485">`ParameterModifier` 透過 COM interop 呼叫時才會使用和處理傳址方式傳遞的參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-1485">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="9a871-1486">搜尋`name`會區分大小寫。</span><span class="sxs-lookup"><span data-stu-id="9a871-1486">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="9a871-1487">搜尋包含 public static 和 public 的執行個體方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-1487">The search includes public static and public instance methods.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9a871-1488">查詢建構函式和方法時，您不能省略參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-1488">You cannot omit parameters when looking up constructors and methods.</span></span> <span data-ttu-id="9a871-1489">叫用時，您只可以省略參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-1489">You can only omit parameters when invoking.</span></span>  
  
 <span data-ttu-id="9a871-1490">如果目前的 T:System.Type 代表建構的泛型型別，則這個方法會傳回<xref:System.Reflection.MethodInfo>具有由適當的型別引數取代型別參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-1490">If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.MethodInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="9a871-1491">如果目前<xref:System.Type>代表型別參數的泛型類型或泛型方法，這個方法定義中搜尋類別條件約束的方法或方法的<xref:System.Object>是否沒有類別條件約束。</span><span class="sxs-lookup"><span data-stu-id="9a871-1491">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the methods of the class constraint, or the methods of <xref:System.Object> if there is no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9a871-1492">如需泛型的方法，不包括中的型別引數`name`。</span><span class="sxs-lookup"><span data-stu-id="9a871-1492">For generic methods, do not include the type arguments in `name`.</span></span> <span data-ttu-id="9a871-1493">例如，C# 程式碼`GetMethod("MyMethod<int>")`搜尋之成員的文字名稱 」`MyMethod<int>`"，而不是方法，名為`MyMethod`具有一個泛型類型引數`int`。</span><span class="sxs-lookup"><span data-stu-id="9a871-1493">For example, the C# code `GetMethod("MyMethod<int>")` searches for a member with the text name "`MyMethod<int>`", rather than for a method named `MyMethod` that has one generic argument of type `int`.</span></span> <span data-ttu-id="9a871-1494">請改用`GetMethod("MyMethod")`中的適當參數與`types`陣列。</span><span class="sxs-lookup"><span data-stu-id="9a871-1494">Instead, use `GetMethod("MyMethod")` with the appropriate parameter in the `types` array.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException"><span data-ttu-id="9a871-1495">找到一個以上具有指定名稱及指定參數的方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-1495">More than one method is found with the specified name and specified parameters.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9a871-1496"><paramref name="name" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-1496"><paramref name="name" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="9a871-1497">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-1497">-or-</span></span> 
 <span data-ttu-id="9a871-1498"><paramref name="types" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-1498"><paramref name="types" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="9a871-1499">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-1499">-or-</span></span> 
<span data-ttu-id="9a871-1500"><paramref name="types" /> 的其中一個項目為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-1500">One of the elements in <paramref name="types" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9a871-1501"><paramref name="types" /> 是多維的。</span><span class="sxs-lookup"><span data-stu-id="9a871-1501"><paramref name="types" /> is multidimensional.</span></span>  
  
<span data-ttu-id="9a871-1502">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-1502">-or-</span></span> 
 <span data-ttu-id="9a871-1503"><paramref name="modifiers" /> 是多維的。</span><span class="sxs-lookup"><span data-stu-id="9a871-1503"><paramref name="modifiers" /> is multidimensional.</span></span></exception>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetMethods" />
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, int genericParameterCount, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.MethodInfo GetMethod(string name, int32 genericParameterCount, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String,System.Int32,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethod (name As String, genericParameterCount As Integer, types As Type(), modifiers As ParameterModifier()) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, int genericParameterCount, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="member this.GetMethod : string * int * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo" Usage="type.GetMethod (name, genericParameterCount, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="genericParameterCount" Type="System.Int32" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="genericParameterCount">To be added.</param>
        <param name="types">To be added.</param>
        <param name="modifiers">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetMethod : string * System.Reflection.BindingFlags * System.Reflection.Binder * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo&#xA;override this.GetMethod : string * System.Reflection.BindingFlags * System.Reflection.Binder * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo" Usage="type.GetMethod (name, bindingAttr, binder, types, modifiers)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="9a871-1504">字串，包含要取得的方法名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-1504">The string containing the name of the method to get.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="9a871-1505">位元遮罩，由一或多個 <see cref="T:System.Reflection.BindingFlags" /> 組成，而這些旗標會指定執行搜尋的方式。</span><span class="sxs-lookup"><span data-stu-id="9a871-1505">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="9a871-1506">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-1506">-or-</span></span> 
<span data-ttu-id="9a871-1507">零，傳回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-1507">Zero, to return <see langword="null" />.</span></span></param>
        <param name="binder"><span data-ttu-id="9a871-1508">定義一組屬性並啟用繫結的物件，可包含多載方法的選擇、引數類型的強制，以及透過反映的成員引動過程。</span><span class="sxs-lookup"><span data-stu-id="9a871-1508">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span></span>  
  
<span data-ttu-id="9a871-1509">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-1509">-or-</span></span> 
<span data-ttu-id="9a871-1510">Null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)，可使用 <see cref="P:System.Type.DefaultBinder" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-1510">A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span></span></param>
        <param name="types"><span data-ttu-id="9a871-1511"><see cref="T:System.Type" /> 物件的陣列，代表所要取得之方法的參數數目、順序和類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-1511">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.</span></span>  
  
<span data-ttu-id="9a871-1512">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-1512">-or-</span></span> 
<span data-ttu-id="9a871-1513"><see cref="T:System.Type" /> 物件的空陣列 (由 <see cref="F:System.Type.EmptyTypes" /> 欄位提供)，可取得不採用參數的方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-1513">An empty array of <see cref="T:System.Type" /> objects (as provided by the <see cref="F:System.Type.EmptyTypes" /> field) to get a method that takes no parameters.</span></span></param>
        <param name="modifiers"><span data-ttu-id="9a871-1514"><see cref="T:System.Reflection.ParameterModifier" /> 物件的陣列，代表在 <paramref name="types" /> 陣列中與對應項目關聯的屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-1514">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array.</span></span> <span data-ttu-id="9a871-1515">只用於透過 COM Interop 進行呼叫以及只處理以傳址方式傳遞的參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-1515">To be only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span> <span data-ttu-id="9a871-1516">預設的繫結器不會處理這個參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-1516">The default binder does not process this parameter.</span></span></param>
        <summary><span data-ttu-id="9a871-1517">使用指定的繫結條件約束搜尋指定的方法，而該方法的參數符合指定的引數類型和修飾詞。</span><span class="sxs-lookup"><span data-stu-id="9a871-1517">Searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints.</span></span></summary>
        <returns><span data-ttu-id="9a871-1518">物件，代表符合指定之需求的方法 (如有找到)；否則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-1518">An object representing the method that matches the specified requirements, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-1519">雖然預設繫結器不會處理<xref:System.Reflection.ParameterModifier>(`modifiers`參數)，您可以使用抽象<xref:System.Reflection.Binder?displayProperty=nameWithType>類別，以寫入未處理的自訂繫結器`modifiers`。</span><span class="sxs-lookup"><span data-stu-id="9a871-1519">Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers`.</span></span> <span data-ttu-id="9a871-1520">`ParameterModifier` 透過 COM interop 呼叫時才會使用和處理傳址方式傳遞的參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-1520">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="9a871-1521">下列<xref:System.Reflection.BindingFlags>篩選器旗標可以用來定義要包含在搜尋中的方法：</span><span class="sxs-lookup"><span data-stu-id="9a871-1521">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which methods to include in the search:</span></span>  
  
-   <span data-ttu-id="9a871-1522">您必須指定`BindingFlags.Instance`或`BindingFlags.Static`以取得傳回值。</span><span class="sxs-lookup"><span data-stu-id="9a871-1522">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="9a871-1523">指定`BindingFlags.Public`来包含在搜尋中的公用方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-1523">Specify `BindingFlags.Public` to include public methods in the search.</span></span>  
  
-   <span data-ttu-id="9a871-1524">指定`BindingFlags.NonPublic`在搜尋中包括非公用方法 （也就是私用、 內部和受保護的方法）。</span><span class="sxs-lookup"><span data-stu-id="9a871-1524">Specify `BindingFlags.NonPublic` to include nonpublic methods (that is, private, internal, and protected methods) in the search.</span></span>  
  
-   <span data-ttu-id="9a871-1525">指定`BindingFlags.FlattenHierarchy`包含`public`和`protected`階層; 的靜態成員`private`中繼承類別的靜態成員不包含。</span><span class="sxs-lookup"><span data-stu-id="9a871-1525">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="9a871-1526">下列<xref:System.Reflection.BindingFlags>輔助鍵旗標可以用來變更搜尋的運作方式：</span><span class="sxs-lookup"><span data-stu-id="9a871-1526">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="9a871-1527">`BindingFlags.IgnoreCase` 忽略大小寫的`name`。</span><span class="sxs-lookup"><span data-stu-id="9a871-1527">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="9a871-1528">`BindingFlags.DeclaredOnly` 搜尋僅方法上宣告<xref:System.Type>，不只是繼承的方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-1528">`BindingFlags.DeclaredOnly` to search only the methods declared on the <xref:System.Type>, not methods that were simply inherited.</span></span>  
  
 <span data-ttu-id="9a871-1529">如需詳細資訊，請參閱 <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="9a871-1529">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9a871-1530">查詢建構函式和方法時，您不能省略參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-1530">You cannot omit parameters when looking up constructors and methods.</span></span> <span data-ttu-id="9a871-1531">叫用時，您只可以省略參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-1531">You can only omit parameters when invoking.</span></span>  
  
 <span data-ttu-id="9a871-1532">如果目前的 T:System.Type 代表建構的泛型型別，則這個方法會傳回<xref:System.Reflection.MethodInfo>具有由適當的型別引數取代型別參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-1532">If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.MethodInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="9a871-1533">如果目前<xref:System.Type>代表型別參數的泛型類型或泛型方法，這個方法定義中搜尋類別條件約束的方法或方法的<xref:System.Object>是否沒有類別條件約束。</span><span class="sxs-lookup"><span data-stu-id="9a871-1533">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the methods of the class constraint, or the methods of <xref:System.Object> if there is no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9a871-1534">如需泛型的方法，不包括中的型別引數`name`。</span><span class="sxs-lookup"><span data-stu-id="9a871-1534">For generic methods, do not include the type arguments in `name`.</span></span> <span data-ttu-id="9a871-1535">例如，C# 程式碼`GetMember("MyMethod<int>")`搜尋之成員的文字名稱 」`MyMethod<int>`"，而不是方法，名為`MyMethod`具有一個泛型類型引數`int`。</span><span class="sxs-lookup"><span data-stu-id="9a871-1535">For example, the C# code `GetMember("MyMethod<int>")` searches for a member with the text name "`MyMethod<int>`", rather than for a method named `MyMethod` that has one generic argument of type `int`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-1536">下列範例會尋找特定的多載`MethodA`，指定繫結條件約束和各種不同的引數型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-1536">The following example finds specific overloads of `MethodA`, specifying binding constraints and a variety of argument types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9a871-1537">[!INCLUDE[csprcslong](~/includes/csprcslong-md.md)]範例需要`/unsafe`編譯器選項。</span><span class="sxs-lookup"><span data-stu-id="9a871-1537">The [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)] example requires the `/unsafe` compiler option.</span></span>  
  
 [!code-cpp[Type_GetMethod5#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMethod5/CPP/type_getmethod5.cpp#1)]
 [!code-csharp[Type_GetMethod5#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMethod5/CS/type_getmethod5.cs#1)]
 [!code-vb[Type_GetMethod5#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMethod5/VB/type_getmethod5.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException"><span data-ttu-id="9a871-1538">找到一個以上的方法，其具有指定名稱，且符合指定繫結條件約束。</span><span class="sxs-lookup"><span data-stu-id="9a871-1538">More than one method is found with the specified name and matching the specified binding constraints.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9a871-1539"><paramref name="name" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-1539"><paramref name="name" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="9a871-1540">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-1540">-or-</span></span> 
 <span data-ttu-id="9a871-1541"><paramref name="types" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-1541"><paramref name="types" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="9a871-1542">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-1542">-or-</span></span> 
<span data-ttu-id="9a871-1543"><paramref name="types" /> 的其中一個項目為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-1543">One of the elements in <paramref name="types" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9a871-1544"><paramref name="types" /> 是多維的。</span><span class="sxs-lookup"><span data-stu-id="9a871-1544"><paramref name="types" /> is multidimensional.</span></span>  
  
<span data-ttu-id="9a871-1545">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-1545">-or-</span></span> 
 <span data-ttu-id="9a871-1546"><paramref name="modifiers" /> 是多維的。</span><span class="sxs-lookup"><span data-stu-id="9a871-1546"><paramref name="modifiers" /> is multidimensional.</span></span></exception>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetMethods" />
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, int genericParameterCount, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.MethodInfo GetMethod(string name, int32 genericParameterCount, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String,System.Int32,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, int genericParameterCount, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="member this.GetMethod : string * int * System.Reflection.BindingFlags * System.Reflection.Binder * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo" Usage="type.GetMethod (name, genericParameterCount, bindingAttr, binder, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="genericParameterCount" Type="System.Int32" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="genericParameterCount">To be added.</param>
        <param name="bindingAttr">To be added.</param>
        <param name="binder">To be added.</param>
        <param name="types">To be added.</param>
        <param name="modifiers">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, System::Reflection::CallingConventions callConvention, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetMethod : string * System.Reflection.BindingFlags * System.Reflection.Binder * System.Reflection.CallingConventions * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo&#xA;override this.GetMethod : string * System.Reflection.BindingFlags * System.Reflection.Binder * System.Reflection.CallingConventions * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo" Usage="type.GetMethod (name, bindingAttr, binder, callConvention, types, modifiers)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="callConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="9a871-1547">字串，包含要取得的方法名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-1547">The string containing the name of the method to get.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="9a871-1548">位元遮罩，由一或多個 <see cref="T:System.Reflection.BindingFlags" /> 組成，而這些旗標會指定執行搜尋的方式。</span><span class="sxs-lookup"><span data-stu-id="9a871-1548">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="9a871-1549">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-1549">-or-</span></span> 
<span data-ttu-id="9a871-1550">零，傳回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-1550">Zero, to return <see langword="null" />.</span></span></param>
        <param name="binder"><span data-ttu-id="9a871-1551">定義一組屬性並啟用繫結的物件，可包含多載方法的選擇、引數類型的強制，以及透過反映的成員引動過程。</span><span class="sxs-lookup"><span data-stu-id="9a871-1551">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span></span>  
  
<span data-ttu-id="9a871-1552">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-1552">-or-</span></span> 
<span data-ttu-id="9a871-1553">Null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)，可使用 <see cref="P:System.Type.DefaultBinder" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-1553">A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span></span></param>
        <param name="callConvention"><span data-ttu-id="9a871-1554">物件，其指定一組所要使用的規則，而這些規則是關於引數的順序和配置、如何傳遞傳回值、引數使用哪些暫存器以及如何清除堆疊。</span><span class="sxs-lookup"><span data-stu-id="9a871-1554">The object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and how the stack is cleaned up.</span></span></param>
        <param name="types"><span data-ttu-id="9a871-1555"><see cref="T:System.Type" /> 物件的陣列，代表所要取得之方法的參數數目、順序和類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-1555">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.</span></span>  
  
<span data-ttu-id="9a871-1556">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-1556">-or-</span></span> 
<span data-ttu-id="9a871-1557"><see cref="T:System.Type" /> 物件的空陣列 (由 <see cref="F:System.Type.EmptyTypes" /> 欄位提供)，可取得不採用參數的方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-1557">An empty array of <see cref="T:System.Type" /> objects (as provided by the <see cref="F:System.Type.EmptyTypes" /> field) to get a method that takes no parameters.</span></span></param>
        <param name="modifiers"><span data-ttu-id="9a871-1558"><see cref="T:System.Reflection.ParameterModifier" /> 物件的陣列，代表在 <paramref name="types" /> 陣列中與對應項目關聯的屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-1558">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array.</span></span> <span data-ttu-id="9a871-1559">只用於透過 COM Interop 進行呼叫以及只處理以傳址方式傳遞的參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-1559">To be only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span> <span data-ttu-id="9a871-1560">預設的繫結器不會處理這個參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-1560">The default binder does not process this parameter.</span></span></param>
        <summary><span data-ttu-id="9a871-1561">使用指定的繫結條件約束和指定的呼叫慣例，來搜尋指定的方法，而該方法的參數符合指定的引數類型和修飾詞。</span><span class="sxs-lookup"><span data-stu-id="9a871-1561">Searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.</span></span></summary>
        <returns><span data-ttu-id="9a871-1562">物件，代表符合指定之需求的方法 (如有找到)；否則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-1562">An object representing the method that matches the specified requirements, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-1563">雖然預設繫結器不會處理<xref:System.Reflection.ParameterModifier>(`modifiers`參數)，您可以使用抽象<xref:System.Reflection.Binder?displayProperty=nameWithType>類別，以寫入未處理的自訂繫結器`modifiers`。</span><span class="sxs-lookup"><span data-stu-id="9a871-1563">Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers`.</span></span> <span data-ttu-id="9a871-1564">`ParameterModifier` 透過 COM interop 呼叫時才會使用和處理傳址方式傳遞的參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-1564">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="9a871-1565">下表顯示基底類別成員會傳回由`GetXXX`反映型別上時的方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-1565">The following table shows what members of a base class are returned by the `GetXXX` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="9a871-1566">成員類型</span><span class="sxs-lookup"><span data-stu-id="9a871-1566">Member Type</span></span>|<span data-ttu-id="9a871-1567">Static</span><span class="sxs-lookup"><span data-stu-id="9a871-1567">Static</span></span>|<span data-ttu-id="9a871-1568">非靜態</span><span class="sxs-lookup"><span data-stu-id="9a871-1568">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="9a871-1569">建構函式</span><span class="sxs-lookup"><span data-stu-id="9a871-1569">Constructor</span></span>|<span data-ttu-id="9a871-1570">否</span><span class="sxs-lookup"><span data-stu-id="9a871-1570">No</span></span>|<span data-ttu-id="9a871-1571">否</span><span class="sxs-lookup"><span data-stu-id="9a871-1571">No</span></span>|  
|<span data-ttu-id="9a871-1572">欄位</span><span class="sxs-lookup"><span data-stu-id="9a871-1572">Field</span></span>|<span data-ttu-id="9a871-1573">否</span><span class="sxs-lookup"><span data-stu-id="9a871-1573">No</span></span>|<span data-ttu-id="9a871-1574">可以。</span><span class="sxs-lookup"><span data-stu-id="9a871-1574">Yes.</span></span> <span data-ttu-id="9a871-1575">欄位永遠是依名稱和簽章隱藏。</span><span class="sxs-lookup"><span data-stu-id="9a871-1575">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="9a871-1576">Event - 事件</span><span class="sxs-lookup"><span data-stu-id="9a871-1576">Event</span></span>|<span data-ttu-id="9a871-1577">不適用</span><span class="sxs-lookup"><span data-stu-id="9a871-1577">Not applicable</span></span>|<span data-ttu-id="9a871-1578">一般類型系統規則是繼承實作屬性的方法相同。</span><span class="sxs-lookup"><span data-stu-id="9a871-1578">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="9a871-1579">反映會視為由名稱和簽章隱藏屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-1579">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="9a871-1580">請參閱附註 2。</span><span class="sxs-lookup"><span data-stu-id="9a871-1580">See note 2 below.</span></span>|  
|<span data-ttu-id="9a871-1581">方法</span><span class="sxs-lookup"><span data-stu-id="9a871-1581">Method</span></span>|<span data-ttu-id="9a871-1582">否</span><span class="sxs-lookup"><span data-stu-id="9a871-1582">No</span></span>|<span data-ttu-id="9a871-1583">可以。</span><span class="sxs-lookup"><span data-stu-id="9a871-1583">Yes.</span></span> <span data-ttu-id="9a871-1584">（虛擬和非虛擬） 的方法可以隱藏依名稱或依名稱和簽章隱藏。</span><span class="sxs-lookup"><span data-stu-id="9a871-1584">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="9a871-1585">巢狀的類型</span><span class="sxs-lookup"><span data-stu-id="9a871-1585">Nested Type</span></span>|<span data-ttu-id="9a871-1586">否</span><span class="sxs-lookup"><span data-stu-id="9a871-1586">No</span></span>|<span data-ttu-id="9a871-1587">否</span><span class="sxs-lookup"><span data-stu-id="9a871-1587">No</span></span>|  
|<span data-ttu-id="9a871-1588">屬性</span><span class="sxs-lookup"><span data-stu-id="9a871-1588">Property</span></span>|<span data-ttu-id="9a871-1589">不適用</span><span class="sxs-lookup"><span data-stu-id="9a871-1589">Not applicable</span></span>|<span data-ttu-id="9a871-1590">一般類型系統規則是繼承實作屬性的方法相同。</span><span class="sxs-lookup"><span data-stu-id="9a871-1590">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="9a871-1591">反映會視為由名稱和簽章隱藏屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-1591">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="9a871-1592">請參閱附註 2。</span><span class="sxs-lookup"><span data-stu-id="9a871-1592">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="9a871-1593">依名稱和簽章隱藏會考慮所有組件的簽章，包括自訂修飾詞，傳回類型、 參數類型、 sentinels 和 unmanaged 呼叫慣例。</span><span class="sxs-lookup"><span data-stu-id="9a871-1593">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="9a871-1594">這是二進位比較。</span><span class="sxs-lookup"><span data-stu-id="9a871-1594">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="9a871-1595">反映的屬性和事件會依名稱和簽章隱藏。</span><span class="sxs-lookup"><span data-stu-id="9a871-1595">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="9a871-1596">如果您同時有 get 和 set 存取子的屬性在基底類別中，但衍生的類別有只有 get 存取子，在衍生的類別的屬性會隱藏基底類別屬性中，並不能存取的基底類別的 setter。</span><span class="sxs-lookup"><span data-stu-id="9a871-1596">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="9a871-1597">自訂屬性不屬於一般類型系統。</span><span class="sxs-lookup"><span data-stu-id="9a871-1597">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="9a871-1598">下列<xref:System.Reflection.BindingFlags>篩選器旗標可以用來定義要包含在搜尋中的方法：</span><span class="sxs-lookup"><span data-stu-id="9a871-1598">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which methods to include in the search:</span></span>  
  
-   <span data-ttu-id="9a871-1599">您必須指定`BindingFlags.Instance`或`BindingFlags.Static`以取得傳回值。</span><span class="sxs-lookup"><span data-stu-id="9a871-1599">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="9a871-1600">指定`BindingFlags.Public`来包含在搜尋中的公用方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-1600">Specify `BindingFlags.Public` to include public methods in the search.</span></span>  
  
-   <span data-ttu-id="9a871-1601">指定`BindingFlags.NonPublic`在搜尋中包括非公用方法 （也就是私用、 內部和受保護的方法）。</span><span class="sxs-lookup"><span data-stu-id="9a871-1601">Specify `BindingFlags.NonPublic` to include nonpublic methods (that is, private, internal, and protected methods) in the search.</span></span>  
  
-   <span data-ttu-id="9a871-1602">指定`BindingFlags.FlattenHierarchy`包含`public`和`protected`階層; 的靜態成員`private`中繼承類別的靜態成員不包含。</span><span class="sxs-lookup"><span data-stu-id="9a871-1602">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="9a871-1603">下列<xref:System.Reflection.BindingFlags>輔助鍵旗標可以用來變更搜尋的運作方式：</span><span class="sxs-lookup"><span data-stu-id="9a871-1603">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="9a871-1604">`BindingFlags.IgnoreCase` 忽略大小寫的`name`。</span><span class="sxs-lookup"><span data-stu-id="9a871-1604">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="9a871-1605">`BindingFlags.DeclaredOnly` 搜尋僅方法上宣告<xref:System.Type>，不只是繼承的方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-1605">`BindingFlags.DeclaredOnly` to search only the methods declared on the <xref:System.Type>, not methods that were simply inherited.</span></span>  
  
 <span data-ttu-id="9a871-1606">如需詳細資訊，請參閱 <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="9a871-1606">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9a871-1607">查詢建構函式和方法時，您不能省略參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-1607">You cannot omit parameters when looking up constructors and methods.</span></span> <span data-ttu-id="9a871-1608">叫用時，您只可以省略參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-1608">You can only omit parameters when invoking.</span></span>  
  
 <span data-ttu-id="9a871-1609">如果目前的 T:System.Type 代表建構的泛型型別，則這個方法會傳回<xref:System.Reflection.MethodInfo>具有由適當的型別引數取代型別參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-1609">If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.MethodInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="9a871-1610">如果目前<xref:System.Type>代表型別參數的泛型類型或泛型方法，這個方法定義中搜尋類別條件約束的方法或方法的<xref:System.Object>是否沒有類別條件約束。</span><span class="sxs-lookup"><span data-stu-id="9a871-1610">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the methods of the class constraint, or the methods of <xref:System.Object> if there is no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9a871-1611">如需泛型的方法，不包括中的型別引數`name`。</span><span class="sxs-lookup"><span data-stu-id="9a871-1611">For generic methods, do not include the type arguments in `name`.</span></span> <span data-ttu-id="9a871-1612">例如，C# 程式碼`GetMember("MyMethod<int>")`搜尋之成員的文字名稱 」`MyMethod<int>`"，而不是方法，名為`MyMethod`具有一個泛型類型引數`int`。</span><span class="sxs-lookup"><span data-stu-id="9a871-1612">For example, the C# code `GetMember("MyMethod<int>")` searches for a member with the text name "`MyMethod<int>`", rather than for a method named `MyMethod` that has one generic argument of type `int`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-1613">下列範例會尋找特定的多載`MethodA`、 指定繫結條件約束、 呼叫慣例和各種不同的引數型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-1613">The following example finds specific overloads of `MethodA`, specifying binding constraints, calling conventions, and a variety of argument types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9a871-1614">[!INCLUDE[csprcslong](~/includes/csprcslong-md.md)]範例需要`/unsafe`編譯器選項。</span><span class="sxs-lookup"><span data-stu-id="9a871-1614">The [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)] example requires the `/unsafe` compiler option.</span></span>  
  
 [!code-cpp[Type_GetMethod3#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMethod3/CPP/type_getmethod3.cpp#1)]
 [!code-csharp[Type_GetMethod3#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMethod3/CS/type_getmethod3.cs#1)]
 [!code-vb[Type_GetMethod3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMethod3/VB/type_getmethod3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException"><span data-ttu-id="9a871-1615">找到一個以上的方法，其具有指定名稱，且符合指定繫結條件約束。</span><span class="sxs-lookup"><span data-stu-id="9a871-1615">More than one method is found with the specified name and matching the specified binding constraints.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9a871-1616"><paramref name="name" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-1616"><paramref name="name" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="9a871-1617">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-1617">-or-</span></span> 
 <span data-ttu-id="9a871-1618"><paramref name="types" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-1618"><paramref name="types" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="9a871-1619">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-1619">-or-</span></span> 
<span data-ttu-id="9a871-1620"><paramref name="types" /> 的其中一個項目為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-1620">One of the elements in <paramref name="types" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9a871-1621"><paramref name="types" /> 是多維的。</span><span class="sxs-lookup"><span data-stu-id="9a871-1621"><paramref name="types" /> is multidimensional.</span></span>  
  
<span data-ttu-id="9a871-1622">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-1622">-or-</span></span> 
 <span data-ttu-id="9a871-1623"><paramref name="modifiers" /> 是多維的。</span><span class="sxs-lookup"><span data-stu-id="9a871-1623"><paramref name="modifiers" /> is multidimensional.</span></span></exception>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.CallingConventions" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetMethods" />
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, int genericParameterCount, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.MethodInfo GetMethod(string name, int32 genericParameterCount, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String,System.Int32,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, int genericParameterCount, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, System::Reflection::CallingConventions callConvention, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="member this.GetMethod : string * int * System.Reflection.BindingFlags * System.Reflection.Binder * System.Reflection.CallingConventions * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo" Usage="type.GetMethod (name, genericParameterCount, bindingAttr, binder, callConvention, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="genericParameterCount" Type="System.Int32" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="callConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="genericParameterCount">To be added.</param>
        <param name="bindingAttr">To be added.</param>
        <param name="binder">To be added.</param>
        <param name="callConvention">To be added.</param>
        <param name="types">To be added.</param>
        <param name="modifiers">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethodImpl">
      <MemberSignature Language="C#" Value="protected abstract System.Reflection.MethodInfo GetMethodImpl (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethodImpl(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::Reflection::MethodInfo ^ GetMethodImpl(System::String ^ name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, System::Reflection::CallingConventions callConvention, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetMethodImpl : string * System.Reflection.BindingFlags * System.Reflection.Binder * System.Reflection.CallingConventions * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo" Usage="type.GetMethodImpl (name, bindingAttr, binder, callConvention, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="callConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="9a871-1624">字串，包含要取得的方法名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-1624">The string containing the name of the method to get.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="9a871-1625">位元遮罩，由一或多個 <see cref="T:System.Reflection.BindingFlags" /> 組成，而這些旗標會指定執行搜尋的方式。</span><span class="sxs-lookup"><span data-stu-id="9a871-1625">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="9a871-1626">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-1626">-or-</span></span> 
<span data-ttu-id="9a871-1627">零，傳回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-1627">Zero, to return <see langword="null" />.</span></span></param>
        <param name="binder"><span data-ttu-id="9a871-1628">定義一組屬性並啟用繫結的物件，可包含多載方法的選擇、引數類型的強制，以及透過反映的成員引動過程。</span><span class="sxs-lookup"><span data-stu-id="9a871-1628">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span></span>  
  
<span data-ttu-id="9a871-1629">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-1629">-or-</span></span> 
<span data-ttu-id="9a871-1630">Null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)，可使用 <see cref="P:System.Type.DefaultBinder" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-1630">A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span></span></param>
        <param name="callConvention"><span data-ttu-id="9a871-1631">物件，其指定一組所要使用的規則，而這些規則是關於引數的順序和配置、如何傳遞傳回值、引數使用哪些暫存器以及哪一個處理程序清除堆疊。</span><span class="sxs-lookup"><span data-stu-id="9a871-1631">The object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and what process cleans up the stack.</span></span></param>
        <param name="types"><span data-ttu-id="9a871-1632"><see cref="T:System.Type" /> 物件的陣列，代表所要取得之方法的參數數目、順序和類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-1632">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.</span></span>  
  
<span data-ttu-id="9a871-1633">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-1633">-or-</span></span> 
<span data-ttu-id="9a871-1634">用以取得沒有參數的方法之 <see cref="T:System.Type" /> 類型的空陣列 (也就是，Type[] types = new Type[0])。</span><span class="sxs-lookup"><span data-stu-id="9a871-1634">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a method that takes no parameters.</span></span>  
  
<span data-ttu-id="9a871-1635">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-1635">-or-</span></span> 
 <span data-ttu-id="9a871-1636"><see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="9a871-1636"><see langword="null" />.</span></span> <span data-ttu-id="9a871-1637">如果 <paramref name="types" /> 為 <see langword="null" />，則引數不相符。</span><span class="sxs-lookup"><span data-stu-id="9a871-1637">If <paramref name="types" /> is <see langword="null" />, arguments are not matched.</span></span></param>
        <param name="modifiers"><span data-ttu-id="9a871-1638"><see cref="T:System.Reflection.ParameterModifier" /> 物件的陣列，代表在 <paramref name="types" /> 陣列中與對應項目關聯的屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-1638">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array.</span></span> <span data-ttu-id="9a871-1639">預設的繫結器不會處理這個參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-1639">The default binder does not process this parameter.</span></span></param>
        <summary><span data-ttu-id="9a871-1640">在衍生類別中覆寫時，使用指定的繫結條件約束和指定的呼叫慣例搜尋指定的方法，而該方法的參數符合指定的引數類型和修飾詞。</span><span class="sxs-lookup"><span data-stu-id="9a871-1640">When overridden in a derived class, searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.</span></span></summary>
        <returns><span data-ttu-id="9a871-1641">物件，代表符合指定之需求的方法 (如有找到)；否則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-1641">An object representing the method that matches the specified requirements, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-1642">雖然預設繫結器不會處理<xref:System.Reflection.ParameterModifier>(`modifiers`參數)，您可以使用抽象<xref:System.Reflection.Binder?displayProperty=nameWithType>類別，以寫入未處理的自訂繫結器`modifiers`。</span><span class="sxs-lookup"><span data-stu-id="9a871-1642">Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers`.</span></span> <span data-ttu-id="9a871-1643">`ParameterModifier` 透過 COM interop 呼叫時才會使用和處理傳址方式傳遞的參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-1643">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="9a871-1644">如果 `types` 為 `null`，則引數不相符。</span><span class="sxs-lookup"><span data-stu-id="9a871-1644">If `types` is `null`, arguments are not matched.</span></span>  
  
 <span data-ttu-id="9a871-1645">下列<xref:System.Reflection.BindingFlags>篩選器旗標可以用來定義要包含在搜尋中的方法：</span><span class="sxs-lookup"><span data-stu-id="9a871-1645">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which methods to include in the search:</span></span>  
  
-   <span data-ttu-id="9a871-1646">您必須指定`BindingFlags.Instance`或`BindingFlags.Static`以取得傳回值。</span><span class="sxs-lookup"><span data-stu-id="9a871-1646">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="9a871-1647">指定`BindingFlags.Public`来包含在搜尋中的公用方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-1647">Specify `BindingFlags.Public` to include public methods in the search.</span></span>  
  
-   <span data-ttu-id="9a871-1648">指定`BindingFlags.NonPublic`在搜尋中包括非公用方法 （也就是私用、 內部和受保護的方法）。</span><span class="sxs-lookup"><span data-stu-id="9a871-1648">Specify `BindingFlags.NonPublic` to include non-public methods (that is, private, internal, and protected methods) in the search.</span></span>  
  
-   <span data-ttu-id="9a871-1649">指定`BindingFlags.FlattenHierarchy`包含`public`和`protected`階層; 的靜態成員`private`中繼承類別的靜態成員不包含。</span><span class="sxs-lookup"><span data-stu-id="9a871-1649">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="9a871-1650">下列<xref:System.Reflection.BindingFlags>輔助鍵旗標可以用來變更搜尋的運作方式：</span><span class="sxs-lookup"><span data-stu-id="9a871-1650">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="9a871-1651">`BindingFlags.IgnoreCase` 忽略大小寫的`name`。</span><span class="sxs-lookup"><span data-stu-id="9a871-1651">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="9a871-1652">`BindingFlags.DeclaredOnly` 搜尋僅方法上宣告<xref:System.Type>，不只是繼承的方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-1652">`BindingFlags.DeclaredOnly` to search only the methods declared on the <xref:System.Type>, not methods that were simply inherited.</span></span>  
  
 <span data-ttu-id="9a871-1653">如需詳細資訊，請參閱 <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="9a871-1653">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException"><span data-ttu-id="9a871-1654">找到一個以上的方法，其具有指定名稱，且符合指定繫結條件約束。</span><span class="sxs-lookup"><span data-stu-id="9a871-1654">More than one method is found with the specified name and matching the specified binding constraints.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9a871-1655"><paramref name="name" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-1655"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9a871-1656"><paramref name="types" /> 是多維的。</span><span class="sxs-lookup"><span data-stu-id="9a871-1656"><paramref name="types" /> is multidimensional.</span></span>  
  
<span data-ttu-id="9a871-1657">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-1657">-or-</span></span> 
 <span data-ttu-id="9a871-1658"><paramref name="modifiers" /> 是多維的。</span><span class="sxs-lookup"><span data-stu-id="9a871-1658"><paramref name="modifiers" /> is multidimensional.</span></span>  
  
<span data-ttu-id="9a871-1659">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-1659">-or-</span></span> 
 <span data-ttu-id="9a871-1660"><paramref name="types" /> 和 <paramref name="modifiers" /> 的長度不同。</span><span class="sxs-lookup"><span data-stu-id="9a871-1660"><paramref name="types" /> and <paramref name="modifiers" /> do not have the same length.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="9a871-1661">目前的類型為 <see cref="T:System.Reflection.Emit.TypeBuilder" /> 或 <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-1661">The current type is a <see cref="T:System.Reflection.Emit.TypeBuilder" /> or <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />.</span></span></exception>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.CallingConventions" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetMethods" />
      </Docs>
    </Member>
    <Member MemberName="GetMethodImpl">
      <MemberSignature Language="C#" Value="protected virtual System.Reflection.MethodInfo GetMethodImpl (string name, int genericParameterCount, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethodImpl(string name, int32 genericParameterCount, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethodImpl(System.String,System.Int32,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Reflection::MethodInfo ^ GetMethodImpl(System::String ^ name, int genericParameterCount, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, System::Reflection::CallingConventions callConvention, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetMethodImpl : string * int * System.Reflection.BindingFlags * System.Reflection.Binder * System.Reflection.CallingConventions * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo&#xA;override this.GetMethodImpl : string * int * System.Reflection.BindingFlags * System.Reflection.Binder * System.Reflection.CallingConventions * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo" Usage="type.GetMethodImpl (name, genericParameterCount, bindingAttr, binder, callConvention, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="genericParameterCount" Type="System.Int32" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="callConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="genericParameterCount">To be added.</param>
        <param name="bindingAttr">To be added.</param>
        <param name="binder">To be added.</param>
        <param name="callConvention">To be added.</param>
        <param name="types">To be added.</param>
        <param name="modifiers">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetMethods">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9a871-1662">取得目前 <see cref="T:System.Type" /> 的方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-1662">Gets the methods of the current <see cref="T:System.Type" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetMethods">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo[] GetMethods ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo[] GetMethods() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethods" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethods () As MethodInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::MethodInfo ^&gt; ^ GetMethods();" />
      <MemberSignature Language="F#" Value="abstract member GetMethods : unit -&gt; System.Reflection.MethodInfo[]&#xA;override this.GetMethods : unit -&gt; System.Reflection.MethodInfo[]" Usage="type.GetMethods " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMethods</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9a871-1663">傳回目前 <see cref="T:System.Type" /> 的所有公用方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-1663">Returns all the public methods of the current <see cref="T:System.Type" />.</span></span></summary>
        <returns><span data-ttu-id="9a871-1664"><see cref="T:System.Reflection.MethodInfo" /> 物件的陣列，代表為目前 <see cref="T:System.Type" /> 定義的所有公用方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-1664">An array of <see cref="T:System.Reflection.MethodInfo" /> objects representing all the public methods defined for the current <see cref="T:System.Type" />.</span></span>  
  
<span data-ttu-id="9a871-1665">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-1665">-or-</span></span> 
<span data-ttu-id="9a871-1666"><see cref="T:System.Reflection.MethodInfo" /> 類型的空陣列 (如果沒有為目前 <see cref="T:System.Type" /> 定義公用方法)。</span><span class="sxs-lookup"><span data-stu-id="9a871-1666">An empty array of type <see cref="T:System.Reflection.MethodInfo" />, if no public methods are defined for the current <see cref="T:System.Type" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-1667"><xref:System.Type.GetMethods%2A>方法不會傳回方法特定的順序，例如依字母順序或依宣告順序。</span><span class="sxs-lookup"><span data-stu-id="9a871-1667">The <xref:System.Type.GetMethods%2A> method does not return methods in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="9a871-1668">您的程式碼不得相依於方法會傳回的順序，因為順序不同。</span><span class="sxs-lookup"><span data-stu-id="9a871-1668">Your code must not depend on the order in which methods are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="9a871-1669">建構函式不包含陣列中的這個呼叫所傳回的方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-1669">Constructors are not included in the array of methods returned by this call.</span></span> <span data-ttu-id="9a871-1670">請個別呼叫`GetConstructors()`取得建構函式方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-1670">Make a separate call to `GetConstructors()` to get the constructor methods.</span></span>  
  
 <span data-ttu-id="9a871-1671">下表顯示基底類別成員會傳回由`Get`反映型別上時的方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-1671">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="9a871-1672">成員類型</span><span class="sxs-lookup"><span data-stu-id="9a871-1672">Member Type</span></span>|<span data-ttu-id="9a871-1673">Static</span><span class="sxs-lookup"><span data-stu-id="9a871-1673">Static</span></span>|<span data-ttu-id="9a871-1674">非靜態</span><span class="sxs-lookup"><span data-stu-id="9a871-1674">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="9a871-1675">建構函式</span><span class="sxs-lookup"><span data-stu-id="9a871-1675">Constructor</span></span>|<span data-ttu-id="9a871-1676">否</span><span class="sxs-lookup"><span data-stu-id="9a871-1676">No</span></span>|<span data-ttu-id="9a871-1677">否</span><span class="sxs-lookup"><span data-stu-id="9a871-1677">No</span></span>|  
|<span data-ttu-id="9a871-1678">欄位</span><span class="sxs-lookup"><span data-stu-id="9a871-1678">Field</span></span>|<span data-ttu-id="9a871-1679">否</span><span class="sxs-lookup"><span data-stu-id="9a871-1679">No</span></span>|<span data-ttu-id="9a871-1680">可以。</span><span class="sxs-lookup"><span data-stu-id="9a871-1680">Yes.</span></span> <span data-ttu-id="9a871-1681">欄位永遠是依名稱和簽章隱藏。</span><span class="sxs-lookup"><span data-stu-id="9a871-1681">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="9a871-1682">Event - 事件</span><span class="sxs-lookup"><span data-stu-id="9a871-1682">Event</span></span>|<span data-ttu-id="9a871-1683">不適用</span><span class="sxs-lookup"><span data-stu-id="9a871-1683">Not applicable</span></span>|<span data-ttu-id="9a871-1684">一般類型系統規則是繼承實作屬性的方法相同。</span><span class="sxs-lookup"><span data-stu-id="9a871-1684">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="9a871-1685">反映會視為由名稱和簽章隱藏屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-1685">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="9a871-1686">請參閱附註 2。</span><span class="sxs-lookup"><span data-stu-id="9a871-1686">See note 2 below.</span></span>|  
|<span data-ttu-id="9a871-1687">方法</span><span class="sxs-lookup"><span data-stu-id="9a871-1687">Method</span></span>|<span data-ttu-id="9a871-1688">否</span><span class="sxs-lookup"><span data-stu-id="9a871-1688">No</span></span>|<span data-ttu-id="9a871-1689">可以。</span><span class="sxs-lookup"><span data-stu-id="9a871-1689">Yes.</span></span> <span data-ttu-id="9a871-1690">（虛擬和非虛擬） 的方法可以隱藏依名稱或依名稱和簽章隱藏。</span><span class="sxs-lookup"><span data-stu-id="9a871-1690">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="9a871-1691">巢狀的類型</span><span class="sxs-lookup"><span data-stu-id="9a871-1691">Nested Type</span></span>|<span data-ttu-id="9a871-1692">否</span><span class="sxs-lookup"><span data-stu-id="9a871-1692">No</span></span>|<span data-ttu-id="9a871-1693">否</span><span class="sxs-lookup"><span data-stu-id="9a871-1693">No</span></span>|  
|<span data-ttu-id="9a871-1694">屬性</span><span class="sxs-lookup"><span data-stu-id="9a871-1694">Property</span></span>|<span data-ttu-id="9a871-1695">不適用</span><span class="sxs-lookup"><span data-stu-id="9a871-1695">Not applicable</span></span>|<span data-ttu-id="9a871-1696">一般類型系統規則是繼承實作屬性的方法相同。</span><span class="sxs-lookup"><span data-stu-id="9a871-1696">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="9a871-1697">反映會視為由名稱和簽章隱藏屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-1697">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="9a871-1698">請參閱附註 2。</span><span class="sxs-lookup"><span data-stu-id="9a871-1698">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="9a871-1699">依名稱和簽章隱藏會考慮所有組件的簽章，包括自訂修飾詞，傳回類型、 參數類型、 sentinels 和 unmanaged 呼叫慣例。</span><span class="sxs-lookup"><span data-stu-id="9a871-1699">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="9a871-1700">這是二進位比較。</span><span class="sxs-lookup"><span data-stu-id="9a871-1700">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="9a871-1701">反映的屬性和事件會依名稱和簽章隱藏。</span><span class="sxs-lookup"><span data-stu-id="9a871-1701">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="9a871-1702">如果您同時有 get 和 set 存取子的屬性在基底類別中，但衍生的類別有只有 get 存取子，在衍生的類別的屬性會隱藏基底類別屬性中，並不能存取的基底類別的 setter。</span><span class="sxs-lookup"><span data-stu-id="9a871-1702">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="9a871-1703">自訂屬性不屬於一般類型系統。</span><span class="sxs-lookup"><span data-stu-id="9a871-1703">Custom attributes are not part of the common type system.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9a871-1704">查詢建構函式和方法時，您不能省略參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-1704">You cannot omit parameters when looking up constructors and methods.</span></span> <span data-ttu-id="9a871-1705">叫用時，您只可以省略參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-1705">You can only omit parameters when invoking.</span></span>  
  
 <span data-ttu-id="9a871-1706">如果目前的 T:System.Type 代表建構的泛型型別，則這個方法會傳回<xref:System.Reflection.MethodInfo>具有由適當的型別引數取代型別參數的物件。</span><span class="sxs-lookup"><span data-stu-id="9a871-1706">If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.MethodInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="9a871-1707">如果目前<xref:System.Type>代表型別參數的泛型類型或泛型方法，這個方法定義中搜尋類別條件約束的方法或方法的<xref:System.Object>是否沒有類別條件約束。</span><span class="sxs-lookup"><span data-stu-id="9a871-1707">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the methods of the class constraint, or the methods of <xref:System.Object> if there is no class constraint.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      </Docs>
    </Member>
    <Member MemberName="GetMethods">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.MethodInfo[] GetMethods (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo[] GetMethods(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethods(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetMethods (bindingAttr As BindingFlags) As MethodInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::Reflection::MethodInfo ^&gt; ^ GetMethods(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetMethods : System.Reflection.BindingFlags -&gt; System.Reflection.MethodInfo[]" Usage="type.GetMethods bindingAttr" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMethods(System.Reflection.BindingFlags)</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetMethods(System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr"><span data-ttu-id="9a871-1708">位元遮罩，由一或多個 <see cref="T:System.Reflection.BindingFlags" /> 組成，而這些旗標會指定執行搜尋的方式。</span><span class="sxs-lookup"><span data-stu-id="9a871-1708">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="9a871-1709">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-1709">-or-</span></span> 
<span data-ttu-id="9a871-1710">零，傳回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-1710">Zero, to return <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="9a871-1711">在衍生類別中覆寫時，使用指定的繫結條件約束，搜尋定義給目前 <see cref="T:System.Type" /> 的方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-1711">When overridden in a derived class, searches for the methods defined for the current <see cref="T:System.Type" />, using the specified binding constraints.</span></span></summary>
        <returns><span data-ttu-id="9a871-1712"><see cref="T:System.Reflection.MethodInfo" /> 物件的陣列，代表為目前 <see cref="T:System.Type" /> 定義之符合指定繫結條件約束的所有方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-1712">An array of <see cref="T:System.Reflection.MethodInfo" /> objects representing all methods defined for the current <see cref="T:System.Type" /> that match the specified binding constraints.</span></span>  
  
<span data-ttu-id="9a871-1713">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-1713">-or-</span></span> 
<span data-ttu-id="9a871-1714">如果沒有任何方法定義給目前的 <see cref="T:System.Reflection.MethodInfo" />，或沒有已定義的方法符合繫結條件約束，則為 <see cref="T:System.Type" /> 類型的空陣列。</span><span class="sxs-lookup"><span data-stu-id="9a871-1714">An empty array of type <see cref="T:System.Reflection.MethodInfo" />, if no methods are defined for the current <see cref="T:System.Type" />, or if none of the defined methods match the binding constraints.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-1715"><xref:System.Type.GetMethods%2A>方法不會傳回方法特定的順序，例如依字母順序或依宣告順序。</span><span class="sxs-lookup"><span data-stu-id="9a871-1715">The <xref:System.Type.GetMethods%2A> method does not return methods in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="9a871-1716">您的程式碼不得相依於方法會傳回的順序，因為順序不同。</span><span class="sxs-lookup"><span data-stu-id="9a871-1716">Your code must not depend on the order in which methods are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="9a871-1717">下列<xref:System.Reflection.BindingFlags>篩選器旗標可以用來定義要包含在搜尋中的方法：</span><span class="sxs-lookup"><span data-stu-id="9a871-1717">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which methods to include in the search:</span></span>  
  
-   <span data-ttu-id="9a871-1718">您必須指定`BindingFlags.Instance`或`BindingFlags.Static`以取得傳回值。</span><span class="sxs-lookup"><span data-stu-id="9a871-1718">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="9a871-1719">指定`BindingFlags.Public`来包含在搜尋中的公用方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-1719">Specify `BindingFlags.Public` to include public methods in the search.</span></span>  
  
-   <span data-ttu-id="9a871-1720">指定`BindingFlags.NonPublic`在搜尋中包括非公用方法 （也就是私用、 內部和受保護的方法）。</span><span class="sxs-lookup"><span data-stu-id="9a871-1720">Specify `BindingFlags.NonPublic` to include non-public methods (that is, private, internal, and protected methods) in the search.</span></span> <span data-ttu-id="9a871-1721">只有受保護，而且會傳回基底類別上的內部方法;不會傳回基底類別上的私用方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-1721">Only protected and internal methods on base classes are returned; private methods on base classes are not returned.</span></span>  
  
-   <span data-ttu-id="9a871-1722">指定`BindingFlags.FlattenHierarchy`包含`public`和`protected`階層; 的靜態成員`private`中繼承類別的靜態成員不包含。</span><span class="sxs-lookup"><span data-stu-id="9a871-1722">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="9a871-1723">下列<xref:System.Reflection.BindingFlags>輔助鍵旗標可以用來變更搜尋的運作方式：</span><span class="sxs-lookup"><span data-stu-id="9a871-1723">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="9a871-1724">`BindingFlags.DeclaredOnly` 搜尋僅方法上宣告<xref:System.Type>，不只是繼承的方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-1724">`BindingFlags.DeclaredOnly` to search only the methods declared on the <xref:System.Type>, not methods that were simply inherited.</span></span>  
  
 <span data-ttu-id="9a871-1725">如需詳細資訊，請參閱 <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="9a871-1725">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9a871-1726">查詢建構函式和方法時，您不能省略參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-1726">You cannot omit parameters when looking up constructors and methods.</span></span> <span data-ttu-id="9a871-1727">叫用時，您只可以省略參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-1727">You can only omit parameters when invoking.</span></span>  
  
 <span data-ttu-id="9a871-1728">如果目前的 T:System.Type 代表建構的泛型型別，則這個方法會傳回<xref:System.Reflection.MethodInfo>具有由適當的型別引數取代型別參數的物件。</span><span class="sxs-lookup"><span data-stu-id="9a871-1728">If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.MethodInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="9a871-1729">如果目前<xref:System.Type>代表型別參數的泛型類型或泛型方法，這個方法定義中搜尋類別條件約束的方法或方法的<xref:System.Object>是否沒有類別條件約束。</span><span class="sxs-lookup"><span data-stu-id="9a871-1729">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the methods of the class constraint, or the methods of <xref:System.Object> if there is no class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-1730">下列範例會建立具有兩個公用方法和一個受保護的方法的類別，會建立`Type`物件對應至`MyTypeClass`、 取得所有的公用和非公用方法，並顯示其名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-1730">The following example creates a class with two public methods and one protected method, creates a `Type` object corresponding to `MyTypeClass`, gets all public and non-public methods, and displays their names.</span></span>  
  
 [!code-cpp[Type_GetMethods2#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMethods2/CPP/type_getmethods2.cpp#1)]
 [!code-csharp[Type_GetMethods2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMethods2/CS/type_getmethods2.cs#1)]
 [!code-vb[Type_GetMethods2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMethods2/VB/type_getmethods2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetNestedType">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9a871-1731">讓特定類型在目前的 <see cref="T:System.Type" /> 內變成巢狀。</span><span class="sxs-lookup"><span data-stu-id="9a871-1731">Gets a specific type nested within the current <see cref="T:System.Type" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetNestedType">
      <MemberSignature Language="C#" Value="public Type GetNestedType (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetNestedType(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetNestedType(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNestedType (name As String) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetNestedType(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetNestedType : string -&gt; Type&#xA;override this.GetNestedType : string -&gt; Type" Usage="type.GetNestedType name" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetNestedType(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="9a871-1732">包含要取得之巢狀類型名稱的字串。</span><span class="sxs-lookup"><span data-stu-id="9a871-1732">The string containing the name of the nested type to get.</span></span></param>
        <summary><span data-ttu-id="9a871-1733">搜尋具有指定名稱的公用巢狀類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-1733">Searches for the public nested type with the specified name.</span></span></summary>
        <returns><span data-ttu-id="9a871-1734">物件，代表具有指定名稱的巢狀類型 (如有找到)，否則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-1734">An object representing the public nested type with the specified name, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-1735">搜尋`name`會區分大小寫。</span><span class="sxs-lookup"><span data-stu-id="9a871-1735">The search for `name` is case-sensitive.</span></span>  
  
 <span data-ttu-id="9a871-1736">使用巢狀類別的簡單名稱`name`。</span><span class="sxs-lookup"><span data-stu-id="9a871-1736">Use the simple name of the nested class for `name`.</span></span> <span data-ttu-id="9a871-1737">不會限定外部類別的名稱取代它。</span><span class="sxs-lookup"><span data-stu-id="9a871-1737">Do not qualify it with the name of the outer class.</span></span> <span data-ttu-id="9a871-1738">泛型的巢狀類別，也就是使用 mangled 的名稱、 附加抑音符號和泛型引數數目。</span><span class="sxs-lookup"><span data-stu-id="9a871-1738">For a generic nested class, use the mangled name - that is, append a grave accent and the number of generic arguments.</span></span> <span data-ttu-id="9a871-1739">例如，使用字串"內部\`1"以取得一般巢狀類別`Inner<T>`(`Inner(Of T)` Visual Basic 中)。</span><span class="sxs-lookup"><span data-stu-id="9a871-1739">For example, use the string "Inner\`1" to get the generic nested class `Inner<T>` (`Inner(Of T)` in Visual Basic).</span></span> <span data-ttu-id="9a871-1740">不包含型別參數的特定語言的語法。</span><span class="sxs-lookup"><span data-stu-id="9a871-1740">Do not include language-specific syntax for type parameters.</span></span>  
  
 <span data-ttu-id="9a871-1741">下表顯示基底類別成員會傳回由`Get`反映型別上時的方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-1741">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="9a871-1742">成員類型</span><span class="sxs-lookup"><span data-stu-id="9a871-1742">Member Type</span></span>|<span data-ttu-id="9a871-1743">Static</span><span class="sxs-lookup"><span data-stu-id="9a871-1743">Static</span></span>|<span data-ttu-id="9a871-1744">非靜態</span><span class="sxs-lookup"><span data-stu-id="9a871-1744">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="9a871-1745">建構函式</span><span class="sxs-lookup"><span data-stu-id="9a871-1745">Constructor</span></span>|<span data-ttu-id="9a871-1746">否</span><span class="sxs-lookup"><span data-stu-id="9a871-1746">No</span></span>|<span data-ttu-id="9a871-1747">否</span><span class="sxs-lookup"><span data-stu-id="9a871-1747">No</span></span>|  
|<span data-ttu-id="9a871-1748">欄位</span><span class="sxs-lookup"><span data-stu-id="9a871-1748">Field</span></span>|<span data-ttu-id="9a871-1749">否</span><span class="sxs-lookup"><span data-stu-id="9a871-1749">No</span></span>|<span data-ttu-id="9a871-1750">可以。</span><span class="sxs-lookup"><span data-stu-id="9a871-1750">Yes.</span></span> <span data-ttu-id="9a871-1751">欄位永遠是依名稱和簽章隱藏。</span><span class="sxs-lookup"><span data-stu-id="9a871-1751">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="9a871-1752">Event - 事件</span><span class="sxs-lookup"><span data-stu-id="9a871-1752">Event</span></span>|<span data-ttu-id="9a871-1753">不適用</span><span class="sxs-lookup"><span data-stu-id="9a871-1753">Not applicable</span></span>|<span data-ttu-id="9a871-1754">一般類型系統規則是繼承實作屬性的方法相同。</span><span class="sxs-lookup"><span data-stu-id="9a871-1754">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="9a871-1755">反映會視為由名稱和簽章隱藏屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-1755">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="9a871-1756">請參閱附註 2。</span><span class="sxs-lookup"><span data-stu-id="9a871-1756">See note 2 below.</span></span>|  
|<span data-ttu-id="9a871-1757">方法</span><span class="sxs-lookup"><span data-stu-id="9a871-1757">Method</span></span>|<span data-ttu-id="9a871-1758">否</span><span class="sxs-lookup"><span data-stu-id="9a871-1758">No</span></span>|<span data-ttu-id="9a871-1759">可以。</span><span class="sxs-lookup"><span data-stu-id="9a871-1759">Yes.</span></span> <span data-ttu-id="9a871-1760">（虛擬和非虛擬） 的方法可以隱藏依名稱或依名稱和簽章隱藏。</span><span class="sxs-lookup"><span data-stu-id="9a871-1760">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="9a871-1761">巢狀的類型</span><span class="sxs-lookup"><span data-stu-id="9a871-1761">Nested Type</span></span>|<span data-ttu-id="9a871-1762">否</span><span class="sxs-lookup"><span data-stu-id="9a871-1762">No</span></span>|<span data-ttu-id="9a871-1763">否</span><span class="sxs-lookup"><span data-stu-id="9a871-1763">No</span></span>|  
|<span data-ttu-id="9a871-1764">屬性</span><span class="sxs-lookup"><span data-stu-id="9a871-1764">Property</span></span>|<span data-ttu-id="9a871-1765">不適用</span><span class="sxs-lookup"><span data-stu-id="9a871-1765">Not applicable</span></span>|<span data-ttu-id="9a871-1766">一般類型系統規則是繼承實作屬性的方法相同。</span><span class="sxs-lookup"><span data-stu-id="9a871-1766">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="9a871-1767">反映會視為由名稱和簽章隱藏屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-1767">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="9a871-1768">請參閱附註 2。</span><span class="sxs-lookup"><span data-stu-id="9a871-1768">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="9a871-1769">依名稱和簽章隱藏會考慮所有組件的簽章，包括自訂修飾詞，傳回類型、 參數類型、 sentinels 和 unmanaged 呼叫慣例。</span><span class="sxs-lookup"><span data-stu-id="9a871-1769">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="9a871-1770">這是二進位比較。</span><span class="sxs-lookup"><span data-stu-id="9a871-1770">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="9a871-1771">反映的屬性和事件會依名稱和簽章隱藏。</span><span class="sxs-lookup"><span data-stu-id="9a871-1771">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="9a871-1772">如果您同時有 get 和 set 存取子的屬性在基底類別中，但衍生的類別有只有 get 存取子，在衍生的類別的屬性會隱藏基底類別屬性中，並不能存取的基底類別的 setter。</span><span class="sxs-lookup"><span data-stu-id="9a871-1772">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="9a871-1773">自訂屬性不屬於一般類型系統。</span><span class="sxs-lookup"><span data-stu-id="9a871-1773">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="9a871-1774">如果目前<xref:System.Type>表示的類型參數的泛型類型或泛型方法定義，這個方法會搜尋類別條件約束的巢狀的類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-1774">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the nested types of the class constraint.</span></span>  
  
 <span data-ttu-id="9a871-1775">如果巢狀型別是泛型，則這個方法會傳回其泛型型別定義。</span><span class="sxs-lookup"><span data-stu-id="9a871-1775">If a nested type is generic, this method returns its generic type definition.</span></span> <span data-ttu-id="9a871-1776">這是 true，即使封入泛型型別是封閉式的建構型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-1776">This is true even if the enclosing generic type is a closed constructed type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9a871-1777">如果目前<xref:System.Type>代表泛型類型定義在 C#、 Visual Basic 或 c + +，其巢狀的類型是所有泛型，即使它們沒有自己的泛型參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-1777">If the current <xref:System.Type> represents a generic type defined in C#, Visual Basic, or C++, its nested types are all generic even if they have no generic parameters of their own.</span></span> <span data-ttu-id="9a871-1778">不一定是動態組件中定義，或使用編譯的巢狀型別的[Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md)。</span><span class="sxs-lookup"><span data-stu-id="9a871-1778">This is not necessarily true of nested types defined in dynamic assemblies or compiled with the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span></span>  
  
 <span data-ttu-id="9a871-1779">如需巢狀泛型類型，及建構其泛型型別定義的巢狀泛型類型的資訊，請參閱<xref:System.Type.MakeGenericType%2A>。</span><span class="sxs-lookup"><span data-stu-id="9a871-1779">For information on nested generic types, and on constructing nested generic types from their generic type definitions, see <xref:System.Type.MakeGenericType%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9a871-1780"><paramref name="name" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-1780"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetNestedTypes" />
      </Docs>
    </Member>
    <Member MemberName="GetNestedType">
      <MemberSignature Language="C#" Value="public abstract Type GetNestedType (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetNestedType(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetNestedType(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetNestedType (name As String, bindingAttr As BindingFlags) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Type ^ GetNestedType(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetNestedType : string * System.Reflection.BindingFlags -&gt; Type" Usage="type.GetNestedType (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetNestedType(System.String,System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="9a871-1781">包含要取得之巢狀類型名稱的字串。</span><span class="sxs-lookup"><span data-stu-id="9a871-1781">The string containing the name of the nested type to get.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="9a871-1782">位元遮罩，由一或多個 <see cref="T:System.Reflection.BindingFlags" /> 組成，而這些旗標會指定執行搜尋的方式。</span><span class="sxs-lookup"><span data-stu-id="9a871-1782">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="9a871-1783">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-1783">-or-</span></span> 
<span data-ttu-id="9a871-1784">零，傳回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-1784">Zero, to return <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="9a871-1785">在衍生類別中覆寫時，使用指定的繫結條件約束搜尋指定的巢狀類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-1785">When overridden in a derived class, searches for the specified nested type, using the specified binding constraints.</span></span></summary>
        <returns><span data-ttu-id="9a871-1786">物件，代表符合指定之需求的巢狀類型 (如有找到)，否則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-1786">An object representing the nested type that matches the specified requirements, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-1787">使用巢狀類別的簡單名稱`name`。</span><span class="sxs-lookup"><span data-stu-id="9a871-1787">Use the simple name of the nested class for `name`.</span></span> <span data-ttu-id="9a871-1788">不會限定外部類別的名稱取代它。</span><span class="sxs-lookup"><span data-stu-id="9a871-1788">Do not qualify it with the name of the outer class.</span></span> <span data-ttu-id="9a871-1789">泛型的巢狀類別，也就是使用 mangled 的名稱、 附加抑音符號和泛型參數的數目。</span><span class="sxs-lookup"><span data-stu-id="9a871-1789">For a generic nested class, use the mangled name - that is, append a grave accent and the number of generic parameters.</span></span> <span data-ttu-id="9a871-1790">例如，使用字串"內部\`1"以取得一般巢狀類別`Inner<T>`(`Inner(Of T)` Visual Basic 中)。</span><span class="sxs-lookup"><span data-stu-id="9a871-1790">For example, use the string "Inner\`1" to get the generic nested class `Inner<T>` (`Inner(Of T)` in Visual Basic).</span></span> <span data-ttu-id="9a871-1791">不包含型別參數的特定語言的語法。</span><span class="sxs-lookup"><span data-stu-id="9a871-1791">Do not include language-specific syntax for type parameters.</span></span>  
  
 <span data-ttu-id="9a871-1792">下列<xref:System.Reflection.BindingFlags>来包含在搜尋中的篩選器旗標可以用來定義的巢狀類型：</span><span class="sxs-lookup"><span data-stu-id="9a871-1792">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which nested types to include in the search:</span></span>  
  
-   <span data-ttu-id="9a871-1793">您必須指定<xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType>或<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType>取得傳回值。</span><span class="sxs-lookup"><span data-stu-id="9a871-1793">You must specify either <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> or <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> to get a return.</span></span>  
  
-   <span data-ttu-id="9a871-1794">指定<xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType>来包含在搜尋中的公用巢狀型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-1794">Specify <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> to include public nested types in the search.</span></span>  
  
-   <span data-ttu-id="9a871-1795">指定<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType>要在搜尋中包含非公用巢狀的類型 （也就是私用、 內部和受保護巢狀型別）。</span><span class="sxs-lookup"><span data-stu-id="9a871-1795">Specify <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> to include non-public nested types (that is, private, internal, and protected nested types) in the search.</span></span>  
  
 <span data-ttu-id="9a871-1796">這個方法會傳回目前的類型中巢狀型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-1796">This method returns only the nested types of the current type.</span></span> <span data-ttu-id="9a871-1797">它不會搜尋目前類型的基底類別。</span><span class="sxs-lookup"><span data-stu-id="9a871-1797">It does not search the base classes of the current type.</span></span> <span data-ttu-id="9a871-1798">若要尋找的巢狀型別的基底類別中，您必須逐步繼承階層中，呼叫<xref:System.Type.GetNestedType%2A>每個層級。</span><span class="sxs-lookup"><span data-stu-id="9a871-1798">To find types that are nested in base classes, you must walk the inheritance hierarchy, calling <xref:System.Type.GetNestedType%2A> at each level.</span></span>  
  
 <span data-ttu-id="9a871-1799"><xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> 和<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>都會被忽略。</span><span class="sxs-lookup"><span data-stu-id="9a871-1799"><xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> and <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> are ignored.</span></span>  
  
 <span data-ttu-id="9a871-1800">呼叫這個方法只有<xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType>旗標] 或 [僅<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType>旗標將會傳回指定的巢狀類型，並不需要任何其他旗標。</span><span class="sxs-lookup"><span data-stu-id="9a871-1800">Calling this method with only the <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> flag or only the <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> flag will return the specified nested types and does not require any other flags.</span></span>  
  
 <span data-ttu-id="9a871-1801">如需詳細資訊，請參閱 <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="9a871-1801">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="9a871-1802">如果目前<xref:System.Type>表示的類型參數的泛型類型或泛型方法定義，這個方法會搜尋類別條件約束的巢狀的類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-1802">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the nested types of the class constraint.</span></span>  
  
 <span data-ttu-id="9a871-1803">如果巢狀型別是泛型，則這個方法會傳回其泛型型別定義。</span><span class="sxs-lookup"><span data-stu-id="9a871-1803">If a nested type is generic, this method returns its generic type definition.</span></span> <span data-ttu-id="9a871-1804">這是 true，即使封入泛型型別是封閉式的建構型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-1804">This is true even if the enclosing generic type is a closed constructed type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9a871-1805">如果目前<xref:System.Type>代表泛型類型定義在 C#、 Visual Basic 或 c + +，其巢狀的類型是所有泛型，即使它們沒有自己的泛型參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-1805">If the current <xref:System.Type> represents a generic type defined in C#, Visual Basic, or C++, its nested types are all generic even if they have no generic parameters of their own.</span></span> <span data-ttu-id="9a871-1806">不一定是動態組件中定義，或使用編譯的巢狀型別的[Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md)。</span><span class="sxs-lookup"><span data-stu-id="9a871-1806">This is not necessarily true of nested types defined in dynamic assemblies or compiled with the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span></span>  
  
 <span data-ttu-id="9a871-1807">如需巢狀泛型類型，及建構其泛型型別定義的巢狀泛型類型的資訊，請參閱<xref:System.Type.MakeGenericType%2A>。</span><span class="sxs-lookup"><span data-stu-id="9a871-1807">For information on nested generic types, and on constructing nested generic types from their generic type definitions, see <xref:System.Type.MakeGenericType%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9a871-1808"><paramref name="name" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-1808"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetNestedTypes" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetNestedTypes">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9a871-1809">讓其在目前的 <see cref="T:System.Type" /> 內變成巢狀之類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-1809">Gets the types nested within the current <see cref="T:System.Type" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetNestedTypes">
      <MemberSignature Language="C#" Value="public Type[] GetNestedTypes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetNestedTypes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetNestedTypes" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNestedTypes () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;Type ^&gt; ^ GetNestedTypes();" />
      <MemberSignature Language="F#" Value="abstract member GetNestedTypes : unit -&gt; Type[]&#xA;override this.GetNestedTypes : unit -&gt; Type[]" Usage="type.GetNestedTypes " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetNestedTypes</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9a871-1810">傳回在目前 <see cref="T:System.Type" /> 內形成巢狀的公用類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-1810">Returns the public types nested in the current <see cref="T:System.Type" />.</span></span></summary>
        <returns><span data-ttu-id="9a871-1811"><see cref="T:System.Type" /> 物件的陣列，代表目前 <see cref="T:System.Type" /> 中的巢狀公用類型 (搜尋不是遞迴的)；如果目前 <see cref="T:System.Type" /> 中沒有巢狀公用類型，則為 <see cref="T:System.Type" /> 類型的空陣列。</span><span class="sxs-lookup"><span data-stu-id="9a871-1811">An array of <see cref="T:System.Type" /> objects representing the public types nested in the current <see cref="T:System.Type" /> (the search is not recursive), or an empty array of type <see cref="T:System.Type" /> if no public types are nested in the current <see cref="T:System.Type" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-1812"><xref:System.Type.GetNestedTypes%2A>方法沒有傳回型別特定的順序，例如依字母順序或依宣告順序。</span><span class="sxs-lookup"><span data-stu-id="9a871-1812">The <xref:System.Type.GetNestedTypes%2A> method does not return types in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="9a871-1813">您的程式碼不得相依於類型會傳回的順序，因為順序不同。</span><span class="sxs-lookup"><span data-stu-id="9a871-1813">Your code must not depend on the order in which types are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="9a871-1814">只有在目前的類型中巢狀的公用型別會傳回;搜尋不是遞迴。</span><span class="sxs-lookup"><span data-stu-id="9a871-1814">Only the public types immediately nested in the current type are returned; the search is not recursive.</span></span>  
  
 <span data-ttu-id="9a871-1815">下表顯示基底類別成員會傳回由`Get`反映型別上時的方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-1815">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="9a871-1816">成員類型</span><span class="sxs-lookup"><span data-stu-id="9a871-1816">Member Type</span></span>|<span data-ttu-id="9a871-1817">Static</span><span class="sxs-lookup"><span data-stu-id="9a871-1817">Static</span></span>|<span data-ttu-id="9a871-1818">非靜態</span><span class="sxs-lookup"><span data-stu-id="9a871-1818">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="9a871-1819">建構函式</span><span class="sxs-lookup"><span data-stu-id="9a871-1819">Constructor</span></span>|<span data-ttu-id="9a871-1820">否</span><span class="sxs-lookup"><span data-stu-id="9a871-1820">No</span></span>|<span data-ttu-id="9a871-1821">否</span><span class="sxs-lookup"><span data-stu-id="9a871-1821">No</span></span>|  
|<span data-ttu-id="9a871-1822">欄位</span><span class="sxs-lookup"><span data-stu-id="9a871-1822">Field</span></span>|<span data-ttu-id="9a871-1823">否</span><span class="sxs-lookup"><span data-stu-id="9a871-1823">No</span></span>|<span data-ttu-id="9a871-1824">可以。</span><span class="sxs-lookup"><span data-stu-id="9a871-1824">Yes.</span></span> <span data-ttu-id="9a871-1825">欄位永遠是依名稱和簽章隱藏。</span><span class="sxs-lookup"><span data-stu-id="9a871-1825">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="9a871-1826">Event - 事件</span><span class="sxs-lookup"><span data-stu-id="9a871-1826">Event</span></span>|<span data-ttu-id="9a871-1827">不適用</span><span class="sxs-lookup"><span data-stu-id="9a871-1827">Not applicable</span></span>|<span data-ttu-id="9a871-1828">一般類型系統規則是繼承實作屬性的方法相同。</span><span class="sxs-lookup"><span data-stu-id="9a871-1828">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="9a871-1829">反映會視為由名稱和簽章隱藏屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-1829">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="9a871-1830">請參閱附註 2。</span><span class="sxs-lookup"><span data-stu-id="9a871-1830">See note 2 below.</span></span>|  
|<span data-ttu-id="9a871-1831">方法</span><span class="sxs-lookup"><span data-stu-id="9a871-1831">Method</span></span>|<span data-ttu-id="9a871-1832">否</span><span class="sxs-lookup"><span data-stu-id="9a871-1832">No</span></span>|<span data-ttu-id="9a871-1833">可以。</span><span class="sxs-lookup"><span data-stu-id="9a871-1833">Yes.</span></span> <span data-ttu-id="9a871-1834">（虛擬和非虛擬） 的方法可以隱藏依名稱或依名稱和簽章隱藏。</span><span class="sxs-lookup"><span data-stu-id="9a871-1834">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="9a871-1835">巢狀的類型</span><span class="sxs-lookup"><span data-stu-id="9a871-1835">Nested Type</span></span>|<span data-ttu-id="9a871-1836">否</span><span class="sxs-lookup"><span data-stu-id="9a871-1836">No</span></span>|<span data-ttu-id="9a871-1837">否</span><span class="sxs-lookup"><span data-stu-id="9a871-1837">No</span></span>|  
|<span data-ttu-id="9a871-1838">屬性</span><span class="sxs-lookup"><span data-stu-id="9a871-1838">Property</span></span>|<span data-ttu-id="9a871-1839">不適用</span><span class="sxs-lookup"><span data-stu-id="9a871-1839">Not applicable</span></span>|<span data-ttu-id="9a871-1840">一般類型系統規則是繼承實作屬性的方法相同。</span><span class="sxs-lookup"><span data-stu-id="9a871-1840">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="9a871-1841">反映會視為由名稱和簽章隱藏屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-1841">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="9a871-1842">請參閱附註 2。</span><span class="sxs-lookup"><span data-stu-id="9a871-1842">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="9a871-1843">依名稱和簽章隱藏會考慮所有組件的簽章，包括自訂修飾詞，傳回類型、 參數類型、 sentinels 和 unmanaged 呼叫慣例。</span><span class="sxs-lookup"><span data-stu-id="9a871-1843">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="9a871-1844">這是二進位比較。</span><span class="sxs-lookup"><span data-stu-id="9a871-1844">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="9a871-1845">反映的屬性和事件會依名稱和簽章隱藏。</span><span class="sxs-lookup"><span data-stu-id="9a871-1845">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="9a871-1846">如果您同時有 get 和 set 存取子的屬性在基底類別中，但衍生的類別有只有 get 存取子，在衍生的類別的屬性會隱藏基底類別屬性中，並不能存取的基底類別的 setter。</span><span class="sxs-lookup"><span data-stu-id="9a871-1846">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="9a871-1847">自訂屬性不屬於一般類型系統。</span><span class="sxs-lookup"><span data-stu-id="9a871-1847">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="9a871-1848">如果目前<xref:System.Type>表示的類型參數的泛型類型或泛型方法定義，這個方法會搜尋類別條件約束的巢狀的類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-1848">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the nested types of the class constraint.</span></span>  
  
 <span data-ttu-id="9a871-1849">如果巢狀型別是泛型，則這個方法會傳回其泛型型別定義。</span><span class="sxs-lookup"><span data-stu-id="9a871-1849">If a nested type is generic, this method returns its generic type definition.</span></span> <span data-ttu-id="9a871-1850">這是 true，即使封入泛型型別是封閉式的建構型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-1850">This is true even if the enclosing generic type is a closed constructed type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9a871-1851">如果目前<xref:System.Type>代表泛型類型定義在 C#、 Visual Basic 或 c + +，其巢狀的類型是所有泛型，即使它們沒有自己的泛型參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-1851">If the current <xref:System.Type> represents a generic type defined in C#, Visual Basic, or C++, its nested types are all generic even if they have no generic parameters of their own.</span></span> <span data-ttu-id="9a871-1852">不一定是動態組件中定義，或使用編譯的巢狀型別的[Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md)。</span><span class="sxs-lookup"><span data-stu-id="9a871-1852">This is not necessarily true of nested types defined in dynamic assemblies or compiled with the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span></span>  
  
 <span data-ttu-id="9a871-1853">如需巢狀泛型類型，及建構其泛型型別定義的巢狀泛型類型的資訊，請參閱<xref:System.Type.MakeGenericType%2A>。</span><span class="sxs-lookup"><span data-stu-id="9a871-1853">For information on nested generic types, and on constructing nested generic types from their generic type definitions, see <xref:System.Type.MakeGenericType%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-1854">下列範例會定義巢狀的類別和`struct`中`MyClass`，然後取得使用的型別之巢狀類型的物件和`MyClass`。</span><span class="sxs-lookup"><span data-stu-id="9a871-1854">The following example defines a nested class and a `struct` in `MyClass`, and then obtains objects of the nested types using the type of `MyClass`.</span></span>  
  
 [!code-cpp[Type_GetNestedTypes#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetNestedTypes/CPP/type_getnestedtypes.cpp#1)]
 [!code-csharp[Type_GetNestedTypes#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetNestedTypes/CS/type_getnestedtypes.cs#1)]
 [!code-vb[Type_GetNestedTypes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetNestedTypes/VB/type_getnestedtypes.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.GetNestedType(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetNestedTypes">
      <MemberSignature Language="C#" Value="public abstract Type[] GetNestedTypes (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetNestedTypes(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetNestedTypes(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetNestedTypes (bindingAttr As BindingFlags) As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;Type ^&gt; ^ GetNestedTypes(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetNestedTypes : System.Reflection.BindingFlags -&gt; Type[]" Usage="type.GetNestedTypes bindingAttr" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetNestedTypes(System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr"><span data-ttu-id="9a871-1855">位元遮罩，由一或多個 <see cref="T:System.Reflection.BindingFlags" /> 組成，而這些旗標會指定執行搜尋的方式。</span><span class="sxs-lookup"><span data-stu-id="9a871-1855">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="9a871-1856">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-1856">-or-</span></span> 
<span data-ttu-id="9a871-1857">零，傳回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-1857">Zero, to return <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="9a871-1858">在衍生類別中覆寫時，使用指定的繫結條件約束，搜尋在目前 <see cref="T:System.Type" /> 內形成巢狀的類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-1858">When overridden in a derived class, searches for the types nested in the current <see cref="T:System.Type" />, using the specified binding constraints.</span></span></summary>
        <returns><span data-ttu-id="9a871-1859"><see cref="T:System.Type" /> 物件的陣列，代表目前 <see cref="T:System.Type" /> 中符合指定繫結條件約束的所有巢狀類型 (搜尋不是遞迴的)；如果找不到符合繫結條件約束的巢狀類型，則為 <see cref="T:System.Type" /> 類型的空陣列。</span><span class="sxs-lookup"><span data-stu-id="9a871-1859">An array of <see cref="T:System.Type" /> objects representing all the types nested in the current <see cref="T:System.Type" /> that match the specified binding constraints (the search is not recursive), or an empty array of type <see cref="T:System.Type" />, if no nested types are found that match the binding constraints.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-1860">搜尋巢狀類型不是遞迴的。</span><span class="sxs-lookup"><span data-stu-id="9a871-1860">The search for nested types is not recursive.</span></span>  
  
 <span data-ttu-id="9a871-1861"><xref:System.Type.GetNestedTypes%2A>方法沒有傳回型別特定的順序，例如依字母順序或依宣告順序。</span><span class="sxs-lookup"><span data-stu-id="9a871-1861">The <xref:System.Type.GetNestedTypes%2A> method does not return types in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="9a871-1862">您的程式碼不得相依於類型會傳回的順序，因為順序不同。</span><span class="sxs-lookup"><span data-stu-id="9a871-1862">Your code must not depend on the order in which types are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="9a871-1863">下列<xref:System.Reflection.BindingFlags>来包含在搜尋中的篩選器旗標可以用來定義的巢狀類型：</span><span class="sxs-lookup"><span data-stu-id="9a871-1863">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which nested types to include in the search:</span></span>  
  
-   <span data-ttu-id="9a871-1864">您必須指定<xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType>或<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType>取得傳回值。</span><span class="sxs-lookup"><span data-stu-id="9a871-1864">You must specify either <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> or <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> to get a return.</span></span>  
  
-   <span data-ttu-id="9a871-1865">指定<xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType>来包含在搜尋中的公用巢狀型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-1865">Specify <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> to include public nested types in the search.</span></span>  
  
-   <span data-ttu-id="9a871-1866">指定<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType>要在搜尋中包含非公用巢狀的類型 （也就是私用、 內部和受保護巢狀型別）。</span><span class="sxs-lookup"><span data-stu-id="9a871-1866">Specify <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> to include non-public nested types (that is, private, internal, and protected nested types) in the search.</span></span>  
  
 <span data-ttu-id="9a871-1867">這個方法會傳回目前的類型中巢狀型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-1867">This method returns only the nested types of the current type.</span></span> <span data-ttu-id="9a871-1868">它不會搜尋目前類型的基底類別。</span><span class="sxs-lookup"><span data-stu-id="9a871-1868">It does not search the base classes of the current type.</span></span> <span data-ttu-id="9a871-1869">若要尋找的巢狀型別的基底類別中，您必須逐步繼承階層中，呼叫<xref:System.Type.GetNestedTypes%2A>每個層級。</span><span class="sxs-lookup"><span data-stu-id="9a871-1869">To find types that are nested in base classes, you must walk the inheritance hierarchy, calling <xref:System.Type.GetNestedTypes%2A> at each level.</span></span>  
  
 <span data-ttu-id="9a871-1870"><xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> 和<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>都會被忽略。</span><span class="sxs-lookup"><span data-stu-id="9a871-1870"><xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> and <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> are ignored.</span></span>  
  
 <span data-ttu-id="9a871-1871">呼叫這個方法只有<xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType>旗標] 或 [僅<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType>旗標將會傳回指定的巢狀類型，並不需要任何其他旗標。</span><span class="sxs-lookup"><span data-stu-id="9a871-1871">Calling this method with only the <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> flag or only the <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> flag will return the specified nested types and does not require any other flags.</span></span>  
  
 <span data-ttu-id="9a871-1872">如需詳細資訊，請參閱 <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="9a871-1872">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="9a871-1873">如果目前<xref:System.Type>表示的類型參數的泛型類型或泛型方法定義，這個方法會搜尋類別條件約束的巢狀的類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-1873">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the nested types of the class constraint.</span></span>  
  
 <span data-ttu-id="9a871-1874">如果巢狀型別是泛型，則這個方法會傳回其泛型型別定義。</span><span class="sxs-lookup"><span data-stu-id="9a871-1874">If a nested type is generic, this method returns its generic type definition.</span></span> <span data-ttu-id="9a871-1875">這是 true，即使封入泛型型別是封閉式的建構型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-1875">This is true even if the enclosing generic type is a closed constructed type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9a871-1876">如果目前<xref:System.Type>代表泛型類型定義在 C#、 Visual Basic 或 c + +，其巢狀的類型是所有泛型，即使它們沒有自己的泛型參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-1876">If the current <xref:System.Type> represents a generic type defined in C#, Visual Basic, or C++, its nested types are all generic even if they have no generic parameters of their own.</span></span> <span data-ttu-id="9a871-1877">不一定是動態組件中定義，或使用編譯的巢狀型別的[Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md)。</span><span class="sxs-lookup"><span data-stu-id="9a871-1877">This is not necessarily true of nested types defined in dynamic assemblies or compiled with the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span></span>  
  
 <span data-ttu-id="9a871-1878">如需巢狀泛型類型，及建構其泛型型別定義的巢狀泛型類型的資訊，請參閱<xref:System.Type.MakeGenericType%2A>。</span><span class="sxs-lookup"><span data-stu-id="9a871-1878">For information on nested generic types, and on constructing nested generic types from their generic type definitions, see <xref:System.Type.MakeGenericType%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-1879">下列範例會建立兩個巢狀公用類別和兩個巢狀的受保護的類別，，並顯示符合指定的繫結條件約束的類別的資訊。</span><span class="sxs-lookup"><span data-stu-id="9a871-1879">The following example creates two nested public classes and two nested protected classes, and displays information for classes that match the specified binding constraints.</span></span>  
  
 [!code-cpp[Type_GetNestedClassesAbs#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetNestedClassesAbs/CPP/type_getnestedclassesabs.cpp#1)]
 [!code-csharp[Type_GetNestedClassesAbs#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetNestedClassesAbs/CS/type_getnestedclassesabs.cs#1)]
 [!code-vb[Type_GetNestedClassesAbs#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetNestedClassesAbs/VB/type_getnestedclassesabs.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetNestedType(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetProperties">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9a871-1880">取得目前 <see cref="T:System.Type" /> 的屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-1880">Gets the properties of the current <see cref="T:System.Type" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetProperties">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo[] GetProperties ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo[] GetProperties() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetProperties" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperties () As PropertyInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::PropertyInfo ^&gt; ^ GetProperties();" />
      <MemberSignature Language="F#" Value="abstract member GetProperties : unit -&gt; System.Reflection.PropertyInfo[]&#xA;override this.GetProperties : unit -&gt; System.Reflection.PropertyInfo[]" Usage="type.GetProperties " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetProperties</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9a871-1881">傳回目前 <see cref="T:System.Type" /> 的所有公用屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-1881">Returns all the public properties of the current <see cref="T:System.Type" />.</span></span></summary>
        <returns><span data-ttu-id="9a871-1882"><see cref="T:System.Reflection.PropertyInfo" /> 物件的陣列，代表目前 <see cref="T:System.Type" /> 的所有公用屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-1882">An array of <see cref="T:System.Reflection.PropertyInfo" /> objects representing all public properties of the current <see cref="T:System.Type" />.</span></span>  
  
<span data-ttu-id="9a871-1883">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-1883">-or-</span></span> 
<span data-ttu-id="9a871-1884">類型 <see cref="T:System.Reflection.PropertyInfo" /> 的空陣列，如果目前 <see cref="T:System.Type" /> 並沒有公用屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-1884">An empty array of type <see cref="T:System.Reflection.PropertyInfo" />, if the current <see cref="T:System.Type" /> does not have public properties.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-1885">呼叫這個多載就相當於呼叫<xref:System.Type.GetProperties%28System.Reflection.BindingFlags%29>多載`bindingAttr`引數等於`BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public`在 C# 和`BindingFlags.Instance Or BindingFlags.Static Or BindingFlags.Public`Visual Basic 中。</span><span class="sxs-lookup"><span data-stu-id="9a871-1885">Calling this overload is equivalent to calling the <xref:System.Type.GetProperties%28System.Reflection.BindingFlags%29> overload with a `bindingAttr` argument equal to `BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public` in C# and  `BindingFlags.Instance Or BindingFlags.Static Or BindingFlags.Public` in Visual Basic.</span></span> <span data-ttu-id="9a871-1886">它會傳回所有公用執行個體和靜態屬性，表示由目前類型所定義這兩個所<xref:System.Type>物件，以及繼承自其基底類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-1886">It returns all public instance and static properties, both those defined by the type represented by the current <xref:System.Type> object as well as those inherited from its base types.</span></span>  
  
 <span data-ttu-id="9a871-1887">屬性會被視為公用反映，如果有至少一個存取子是公用。</span><span class="sxs-lookup"><span data-stu-id="9a871-1887">A property is considered public to reflection if it has at least one accessor that is public.</span></span> <span data-ttu-id="9a871-1888">否則屬性會被視為私用，而且您必須使用<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (在 Visual Basic 中，使用值的結合`Or`) 來取得它。</span><span class="sxs-lookup"><span data-stu-id="9a871-1888">Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="9a871-1889"><xref:System.Type.GetProperties%2A>方法沒有傳回屬性以特定順序，例如依字母順序或依宣告順序。</span><span class="sxs-lookup"><span data-stu-id="9a871-1889">The <xref:System.Type.GetProperties%2A> method does not return properties in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="9a871-1890">您的程式碼不得相依於屬性會傳回的順序，因為順序不同。</span><span class="sxs-lookup"><span data-stu-id="9a871-1890">Your code must not depend on the order in which properties are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="9a871-1891">下表顯示基底類別成員會傳回由`Get`反映型別上時的方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-1891">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="9a871-1892">成員類型</span><span class="sxs-lookup"><span data-stu-id="9a871-1892">Member Type</span></span>|<span data-ttu-id="9a871-1893">Static</span><span class="sxs-lookup"><span data-stu-id="9a871-1893">Static</span></span>|<span data-ttu-id="9a871-1894">非靜態</span><span class="sxs-lookup"><span data-stu-id="9a871-1894">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="9a871-1895">建構函式</span><span class="sxs-lookup"><span data-stu-id="9a871-1895">Constructor</span></span>|<span data-ttu-id="9a871-1896">否</span><span class="sxs-lookup"><span data-stu-id="9a871-1896">No</span></span>|<span data-ttu-id="9a871-1897">否</span><span class="sxs-lookup"><span data-stu-id="9a871-1897">No</span></span>|  
|<span data-ttu-id="9a871-1898">欄位</span><span class="sxs-lookup"><span data-stu-id="9a871-1898">Field</span></span>|<span data-ttu-id="9a871-1899">否</span><span class="sxs-lookup"><span data-stu-id="9a871-1899">No</span></span>|<span data-ttu-id="9a871-1900">可以。</span><span class="sxs-lookup"><span data-stu-id="9a871-1900">Yes.</span></span> <span data-ttu-id="9a871-1901">欄位永遠是依名稱和簽章隱藏。</span><span class="sxs-lookup"><span data-stu-id="9a871-1901">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="9a871-1902">Event - 事件</span><span class="sxs-lookup"><span data-stu-id="9a871-1902">Event</span></span>|<span data-ttu-id="9a871-1903">不適用</span><span class="sxs-lookup"><span data-stu-id="9a871-1903">Not applicable</span></span>|<span data-ttu-id="9a871-1904">一般類型系統規則是繼承實作屬性的方法相同。</span><span class="sxs-lookup"><span data-stu-id="9a871-1904">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="9a871-1905">反映會視為由名稱和簽章隱藏屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-1905">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="9a871-1906">請參閱附註 2。</span><span class="sxs-lookup"><span data-stu-id="9a871-1906">See note 2 below.</span></span>|  
|<span data-ttu-id="9a871-1907">方法</span><span class="sxs-lookup"><span data-stu-id="9a871-1907">Method</span></span>|<span data-ttu-id="9a871-1908">否</span><span class="sxs-lookup"><span data-stu-id="9a871-1908">No</span></span>|<span data-ttu-id="9a871-1909">可以。</span><span class="sxs-lookup"><span data-stu-id="9a871-1909">Yes.</span></span> <span data-ttu-id="9a871-1910">（虛擬和非虛擬） 的方法可以隱藏依名稱或依名稱和簽章隱藏。</span><span class="sxs-lookup"><span data-stu-id="9a871-1910">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="9a871-1911">巢狀的類型</span><span class="sxs-lookup"><span data-stu-id="9a871-1911">Nested Type</span></span>|<span data-ttu-id="9a871-1912">否</span><span class="sxs-lookup"><span data-stu-id="9a871-1912">No</span></span>|<span data-ttu-id="9a871-1913">否</span><span class="sxs-lookup"><span data-stu-id="9a871-1913">No</span></span>|  
|<span data-ttu-id="9a871-1914">屬性</span><span class="sxs-lookup"><span data-stu-id="9a871-1914">Property</span></span>|<span data-ttu-id="9a871-1915">不適用</span><span class="sxs-lookup"><span data-stu-id="9a871-1915">Not applicable</span></span>|<span data-ttu-id="9a871-1916">一般類型系統規則是繼承實作屬性的方法相同。</span><span class="sxs-lookup"><span data-stu-id="9a871-1916">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="9a871-1917">反映會視為由名稱和簽章隱藏屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-1917">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="9a871-1918">請參閱附註 2。</span><span class="sxs-lookup"><span data-stu-id="9a871-1918">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="9a871-1919">依名稱和簽章隱藏會考慮所有組件的簽章，包括自訂修飾詞，傳回類型、 參數類型、 sentinels 和 unmanaged 呼叫慣例。</span><span class="sxs-lookup"><span data-stu-id="9a871-1919">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="9a871-1920">這是二進位比較。</span><span class="sxs-lookup"><span data-stu-id="9a871-1920">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="9a871-1921">反映的屬性和事件會依名稱和簽章隱藏。</span><span class="sxs-lookup"><span data-stu-id="9a871-1921">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="9a871-1922">如果您同時有 get 和 set 存取子的屬性在基底類別中，但衍生的類別有只有 get 存取子，在衍生的類別的屬性會隱藏基底類別屬性中，並不能存取的基底類別的 setter。</span><span class="sxs-lookup"><span data-stu-id="9a871-1922">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="9a871-1923">自訂屬性不屬於一般類型系統。</span><span class="sxs-lookup"><span data-stu-id="9a871-1923">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="9a871-1924">如果目前的 T:System.Type 代表建構的泛型型別，則這個方法會傳回<xref:System.Reflection.PropertyInfo>具有由適當的型別引數取代型別參數的物件。</span><span class="sxs-lookup"><span data-stu-id="9a871-1924">If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="9a871-1925">如果目前<xref:System.Type>表示的類型參數的泛型類型或泛型方法定義，這個方法會搜尋類別條件約束的屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-1925">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-1926">下列範例示範 `GetProperties` 方法的用法。</span><span class="sxs-lookup"><span data-stu-id="9a871-1926">The following example demonstrates the use of the `GetProperties` method.</span></span>  
  
 [!code-cpp[Type_GetTypeCode#2](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetTypeCode/CPP/type_gettypecode.cpp#2)]
 [!code-csharp[Type_GetTypeCode#2](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetTypeCode/CS/type_gettypecode.cs#2)]
 [!code-vb[Type_GetTypeCode#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetTypeCode/VB/type_gettypecode.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
      </Docs>
    </Member>
    <Member MemberName="GetProperties">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.PropertyInfo[] GetProperties (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo[] GetProperties(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetProperties (bindingAttr As BindingFlags) As PropertyInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::Reflection::PropertyInfo ^&gt; ^ GetProperties(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetProperties : System.Reflection.BindingFlags -&gt; System.Reflection.PropertyInfo[]" Usage="type.GetProperties bindingAttr" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetProperties(System.Reflection.BindingFlags)</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetProperties(System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr"><span data-ttu-id="9a871-1927">位元遮罩，由一或多個 <see cref="T:System.Reflection.BindingFlags" /> 組成，而這些旗標會指定執行搜尋的方式。</span><span class="sxs-lookup"><span data-stu-id="9a871-1927">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="9a871-1928">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-1928">-or-</span></span> 
<span data-ttu-id="9a871-1929">零，傳回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-1929">Zero, to return <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="9a871-1930">在衍生類別中覆寫時，使用指定的繫結條件約束，搜尋目前 <see cref="T:System.Type" /> 的屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-1930">When overridden in a derived class, searches for the properties of the current <see cref="T:System.Type" />, using the specified binding constraints.</span></span></summary>
        <returns><span data-ttu-id="9a871-1931"><see cref="T:System.Reflection.PropertyInfo" /> 物件的陣列，代表目前 <see cref="T:System.Type" /> 中符合指定繫結條件約束的所有屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-1931">An array of <see cref="T:System.Reflection.PropertyInfo" /> objects representing all properties of the current <see cref="T:System.Type" /> that match the specified binding constraints.</span></span>  
  
<span data-ttu-id="9a871-1932">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-1932">-or-</span></span> 
<span data-ttu-id="9a871-1933">如果目前 <see cref="T:System.Reflection.PropertyInfo" /> 沒有屬性，或沒有屬性符合繫結條件約束，則為 <see cref="T:System.Type" /> 類型的空陣列。</span><span class="sxs-lookup"><span data-stu-id="9a871-1933">An empty array of type <see cref="T:System.Reflection.PropertyInfo" />, if the current <see cref="T:System.Type" /> does not have properties, or if none of the properties match the binding constraints.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-1934">屬性會被視為公用反映，如果有至少一個存取子是公用。</span><span class="sxs-lookup"><span data-stu-id="9a871-1934">A property is considered public to reflection if it has at least one accessor that is public.</span></span> <span data-ttu-id="9a871-1935">否則屬性會被視為私用，而且您必須使用<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (在 Visual Basic 中，使用值的結合`Or`) 來取得它。</span><span class="sxs-lookup"><span data-stu-id="9a871-1935">Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="9a871-1936"><xref:System.Type.GetProperties%2A>方法沒有傳回屬性以特定順序，例如依字母順序或依宣告順序。</span><span class="sxs-lookup"><span data-stu-id="9a871-1936">The <xref:System.Type.GetProperties%2A> method does not return properties in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="9a871-1937">您的程式碼不得相依於屬性會傳回的順序，因為順序不同。</span><span class="sxs-lookup"><span data-stu-id="9a871-1937">Your code must not depend on the order in which properties are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="9a871-1938">下列<xref:System.Reflection.BindingFlags>来包含在搜尋中的篩選器旗標可以用來定義的巢狀類型：</span><span class="sxs-lookup"><span data-stu-id="9a871-1938">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which nested types to include in the search:</span></span>  
  
-   <span data-ttu-id="9a871-1939">您必須指定`BindingFlags.Instance`或`BindingFlags.Static`以取得傳回值。</span><span class="sxs-lookup"><span data-stu-id="9a871-1939">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="9a871-1940">指定`BindingFlags.Public`来包含在搜尋中的公用屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-1940">Specify `BindingFlags.Public` to include public properties in the search.</span></span>  
  
-   <span data-ttu-id="9a871-1941">指定`BindingFlags.NonPublic`要在搜尋中包含非公用屬性 （也就是私用、 內部和受保護的屬性）。</span><span class="sxs-lookup"><span data-stu-id="9a871-1941">Specify `BindingFlags.NonPublic` to include non-public properties (that is, private, internal, and protected properties) in the search.</span></span> <span data-ttu-id="9a871-1942">只有受保護，而且會傳回基底類別上的內部屬性;不會傳回基底類別上的私用屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-1942">Only protected and internal properties on base classes are returned; private properties on base classes are not returned.</span></span>  
  
-   <span data-ttu-id="9a871-1943">指定`BindingFlags.FlattenHierarchy`包含`public`和`protected`階層; 的靜態成員`private`中繼承類別的靜態成員不包含。</span><span class="sxs-lookup"><span data-stu-id="9a871-1943">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="9a871-1944">下列<xref:System.Reflection.BindingFlags>輔助鍵旗標可以用來變更搜尋的運作方式：</span><span class="sxs-lookup"><span data-stu-id="9a871-1944">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="9a871-1945">`BindingFlags.DeclaredOnly` 搜尋僅屬性宣告上<xref:System.Type>，不只是繼承的屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-1945">`BindingFlags.DeclaredOnly` to search only the properties declared on the <xref:System.Type>, not properties that were simply inherited.</span></span>  
  
 <span data-ttu-id="9a871-1946">如需詳細資訊，請參閱 <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="9a871-1946">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="9a871-1947">屬性會被視為公用反映，如果有至少一個存取子是公用。</span><span class="sxs-lookup"><span data-stu-id="9a871-1947">A property is considered public to reflection if it has at least one accessor that is public.</span></span> <span data-ttu-id="9a871-1948">否則屬性會被視為私用，而且您必須使用<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (在 Visual Basic 中，使用值的結合`Or`) 來取得它。</span><span class="sxs-lookup"><span data-stu-id="9a871-1948">Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="9a871-1949">如果目前的 T:System.Type 代表建構的泛型型別，則這個方法會傳回<xref:System.Reflection.PropertyInfo>具有由適當的型別引數取代型別參數的物件。</span><span class="sxs-lookup"><span data-stu-id="9a871-1949">If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="9a871-1950">如果目前<xref:System.Type>表示的類型參數的泛型類型或泛型方法定義，這個方法會搜尋類別條件約束的屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-1950">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-1951">下列範例會定義名為的類別`PropertyClass`包含六個屬性： 兩個都是公用、 其中一個是私用、 一個受保護的、 有內部 (`Friend` Visual Basic 中)，且其中一個受保護內部 (`Protected Friend` Visual Basic 中)。</span><span class="sxs-lookup"><span data-stu-id="9a871-1951">The following example defines a class named `PropertyClass` that includes six properties: two are public, one is private, one is protected, one is internal (`Friend` in Visual Basic), and one is protected internal (`Protected Friend` in Visual Basic).</span></span> <span data-ttu-id="9a871-1952">接著會顯示一些基本的屬性資訊 (屬性名稱和型別，是否讀取/寫入，以及是否可看到其`get`和`set`存取子) 符合指定的繫結條件約束的屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-1952">It then displays some basic property information (the property name and type, whether it is read/write, and the visibility of its `get` and `set` accessors) for the properties that match the specified binding constraints.</span></span>  
  
 [!code-cpp[Type_GetProperties2#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetProperties2/CPP/type_getproperties2.cpp#1)]
 [!code-csharp[Type_GetProperties2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetProperties2/CS/type_getproperties2.cs#1)]
 [!code-vb[Type_GetProperties2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetProperties2/VB/type_getproperties2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetProperty">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9a871-1953">取得目前 <see cref="T:System.Type" /> 的特定屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-1953">Gets a specific property of the current <see cref="T:System.Type" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetProperty(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string -&gt; System.Reflection.PropertyInfo&#xA;override this.GetProperty : string -&gt; System.Reflection.PropertyInfo" Usage="type.GetProperty name" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetProperty(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="9a871-1954">字串，包含要取得的公用屬性名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-1954">The string containing the name of the public property to get.</span></span></param>
        <summary><span data-ttu-id="9a871-1955">搜尋具有指定名稱的公用屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-1955">Searches for the public property with the specified name.</span></span></summary>
        <returns><span data-ttu-id="9a871-1956">物件，代表具有指定之名稱的公用屬性 (如有找到)，否則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-1956">An object representing the public property with the specified name, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-1957">搜尋`name`會區分大小寫。</span><span class="sxs-lookup"><span data-stu-id="9a871-1957">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="9a871-1958">搜尋包含 public static 和 public 的執行個體屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-1958">The search includes public static and public instance properties.</span></span>  
  
 <span data-ttu-id="9a871-1959">屬性會被視為公用反映，如果有至少一個存取子是公用。</span><span class="sxs-lookup"><span data-stu-id="9a871-1959">A property is considered public to reflection if it has at least one accessor that is public.</span></span> <span data-ttu-id="9a871-1960">否則屬性會被視為私用，而且您必須使用<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (在 Visual Basic 中，使用值的結合`Or`) 來取得它。</span><span class="sxs-lookup"><span data-stu-id="9a871-1960">Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="9a871-1961">如果目前<xref:System.Type>代表建構的泛型型別，這個方法會傳回<xref:System.Reflection.PropertyInfo>具有由適當的型別引數取代型別參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-1961">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="9a871-1962">如果目前<xref:System.Type>表示的類型參數的泛型類型或泛型方法定義，這個方法會搜尋類別條件約束的屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-1962">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.</span></span>  
  
 <span data-ttu-id="9a871-1963">情況下會<xref:System.Reflection.AmbiguousMatchException>，就會發生如下：</span><span class="sxs-lookup"><span data-stu-id="9a871-1963">Situations in which <xref:System.Reflection.AmbiguousMatchException> occurs include the following:</span></span>  
  
-   <span data-ttu-id="9a871-1964">類型包含兩個索引的屬性具有相同名稱但不同數量的參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-1964">A type contains two indexed properties that have the same name but different numbers of parameters.</span></span> <span data-ttu-id="9a871-1965">若要解決模稜兩可，使用的多載<xref:System.Type.GetProperty%2A>方法所指定的參數類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-1965">To resolve the ambiguity, use an overload of the <xref:System.Type.GetProperty%2A> method that specifies parameter types.</span></span>  
  
-   <span data-ttu-id="9a871-1966">衍生的型別宣告會隱藏繼承的屬性具有相同的名稱，使用屬性`new`修飾詞 (`Shadows` Visual Basic 中)。</span><span class="sxs-lookup"><span data-stu-id="9a871-1966">A derived type declares a property that hides an inherited property with the same name, by using the `new` modifier (`Shadows` in Visual Basic).</span></span> <span data-ttu-id="9a871-1967">若要解決模稜兩可，請使用<xref:System.Type.GetProperty%28System.String%2CSystem.Reflection.BindingFlags%29>方法多載，並新增<xref:System.Reflection.BindingFlags.DeclaredOnly?displayProperty=nameWithType>旗標，以將搜尋限制不會繼承的成員。</span><span class="sxs-lookup"><span data-stu-id="9a871-1967">To resolve the ambiguity, use the <xref:System.Type.GetProperty%28System.String%2CSystem.Reflection.BindingFlags%29> method overload and add the <xref:System.Reflection.BindingFlags.DeclaredOnly?displayProperty=nameWithType> flag to restrict the search to members that are not inherited.</span></span>  
  
## <a name="indexers-and-default-properties"></a><span data-ttu-id="9a871-1968">索引子和預設屬性</span><span class="sxs-lookup"><span data-stu-id="9a871-1968">Indexers and Default Properties</span></span>  
 [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)]<span data-ttu-id="9a871-1969">[!INCLUDE[csprcslong](~/includes/csprcslong-md.md)]，和[!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)]簡化了存取索引的屬性的語法，並允許一個索引的屬性，是其類型的預設值。</span><span class="sxs-lookup"><span data-stu-id="9a871-1969">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], and [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] have simplified syntax for accessing indexed properties and allow one indexed property to be a default for its type.</span></span> <span data-ttu-id="9a871-1970">比方說，如果變數`myList`是指<xref:System.Collections.ArrayList>，語法`myList[3]`(`myList(3)` Visual Basic 中) 會擷取具有索引為 3 的項目。</span><span class="sxs-lookup"><span data-stu-id="9a871-1970">For example, if the variable `myList` refers to an <xref:System.Collections.ArrayList>, the syntax `myList[3]` (`myList(3)` in Visual Basic) retrieves the element with the index of 3.</span></span> <span data-ttu-id="9a871-1971">您可以多載的屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-1971">You can overload the property.</span></span>  
  
 <span data-ttu-id="9a871-1972">在 C# 中，這項功能稱為 「 索引子，並不能以名稱來參考。</span><span class="sxs-lookup"><span data-stu-id="9a871-1972">In C#, this feature is called an indexer and cannot be refered to by name.</span></span> <span data-ttu-id="9a871-1973">根據預設，C# 索引子會出現在中繼資料當做名為"Item"的索引屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-1973">By default, a C# indexer appears in metadata as an indexed property named "Item".</span></span> <span data-ttu-id="9a871-1974">不過，類別庫開發人員可以使用<xref:System.Runtime.CompilerServices.IndexerNameAttribute>屬性來變更中繼資料中的索引子名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-1974">However, a class library developer can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to change the name of the indexer in the metadata.</span></span> <span data-ttu-id="9a871-1975">例如，<xref:System.String>類別具有名為索引子<xref:System.String.Chars%2A>。</span><span class="sxs-lookup"><span data-stu-id="9a871-1975">For example, the <xref:System.String> class has an indexer named <xref:System.String.Chars%2A>.</span></span> <span data-ttu-id="9a871-1976">使用 C# 以外的語言建立索引的屬性可以有名稱以外的項目。</span><span class="sxs-lookup"><span data-stu-id="9a871-1976">Indexed properties created using languages other than C# can have names other than Item, as well.</span></span>  
  
 <span data-ttu-id="9a871-1977">若要判斷型別是否具有預設屬性，請使用<xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29>方法來測試<xref:System.Reflection.DefaultMemberAttribute>屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-1977">To determine whether a type has a default property, use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> method to test for the <xref:System.Reflection.DefaultMemberAttribute> attribute.</span></span> <span data-ttu-id="9a871-1978">如果類型具有<xref:System.Reflection.DefaultMemberAttribute>，則<xref:System.Reflection.DefaultMemberAttribute.MemberName%2A>屬性會傳回預設屬性的名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-1978">If the type has <xref:System.Reflection.DefaultMemberAttribute>, the <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> property returns the name of the default property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-1979">下列範例會擷取`Type`物件的使用者定義的類別，擷取該類別的屬性，並顯示屬性名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-1979">The following example retrieves the `Type` object of a user-defined class, retrieves a property of that class, and displays the property name.</span></span>  
  
 [!code-cpp[Type_GetProperty1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetProperty1/CPP/type_getproperty1.cpp#1)]
 [!code-csharp[Type_GetProperty1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetProperty1/CS/type_getproperty1.cs#1)]
 [!code-vb[Type_GetProperty1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetProperty1/VB/type_getproperty1.vb#1)]  
  
 <span data-ttu-id="9a871-1980">就內部而言，這個屬性被指在中繼資料名稱 」 項目 」。</span><span class="sxs-lookup"><span data-stu-id="9a871-1980">Internally, this property is referred to in the metadata by the name "Item."</span></span> <span data-ttu-id="9a871-1981">嘗試取得`PropertyInfo`使用反映必須指定此內部名稱才能正確地傳回`PropertyInfo`屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-1981">Any attempt to get `PropertyInfo` using reflection must specify this internal name in order to correctly return the `PropertyInfo` property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException"><span data-ttu-id="9a871-1982">找到一個以上具有指定名稱的屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-1982">More than one property is found with the specified name.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9a871-1983"><paramref name="name" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-1983"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String, bindingAttr As BindingFlags) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string * System.Reflection.BindingFlags -&gt; System.Reflection.PropertyInfo&#xA;override this.GetProperty : string * System.Reflection.BindingFlags -&gt; System.Reflection.PropertyInfo" Usage="type.GetProperty (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Reflection.BindingFlags)</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetProperty(System.String,System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="9a871-1984">字串，包含要取得的屬性名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-1984">The string containing the name of the property to get.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="9a871-1985">位元遮罩，由一或多個 <see cref="T:System.Reflection.BindingFlags" /> 組成，而這些旗標會指定執行搜尋的方式。</span><span class="sxs-lookup"><span data-stu-id="9a871-1985">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="9a871-1986">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-1986">-or-</span></span> 
<span data-ttu-id="9a871-1987">零，傳回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-1987">Zero, to return <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="9a871-1988">使用指定的繫結條件約束搜尋指定的屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-1988">Searches for the specified property, using the specified binding constraints.</span></span></summary>
        <returns><span data-ttu-id="9a871-1989">代表符合指定之需求屬性的物件 (如有找到)；否則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-1989">An object representing the property that matches the specified requirements, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-1990">屬性會被視為公用反映，如果有至少一個存取子是公用。</span><span class="sxs-lookup"><span data-stu-id="9a871-1990">A property is considered public to reflection if it has at least one accessor that is public.</span></span> <span data-ttu-id="9a871-1991">否則屬性會被視為私用，而且您必須使用<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (在 Visual Basic 中，使用值的結合`Or`) 來取得它。</span><span class="sxs-lookup"><span data-stu-id="9a871-1991">Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="9a871-1992">下列<xref:System.Reflection.BindingFlags>篩選器旗標可以用來定義要在搜尋中包含的屬性：</span><span class="sxs-lookup"><span data-stu-id="9a871-1992">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which properties to include in the search:</span></span>  
  
-   <span data-ttu-id="9a871-1993">您必須指定`BindingFlags.Instance`或`BindingFlags.Static`以取得傳回值。</span><span class="sxs-lookup"><span data-stu-id="9a871-1993">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="9a871-1994">指定`BindingFlags.Public`来包含在搜尋中的公用屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-1994">Specify `BindingFlags.Public` to include public properties in the search.</span></span>  
  
-   <span data-ttu-id="9a871-1995">指定`BindingFlags.NonPublic`要在搜尋中包含非公用屬性 （也就是私用、 內部和受保護的屬性）。</span><span class="sxs-lookup"><span data-stu-id="9a871-1995">Specify `BindingFlags.NonPublic` to include non-public properties (that is, private, internal, and protected properties) in the search.</span></span>  
  
-   <span data-ttu-id="9a871-1996">指定`BindingFlags.FlattenHierarchy`包含`public`和`protected`階層; 的靜態成員`private`中繼承類別的靜態成員不包含。</span><span class="sxs-lookup"><span data-stu-id="9a871-1996">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="9a871-1997">下列<xref:System.Reflection.BindingFlags>輔助鍵旗標可以用來變更搜尋的運作方式：</span><span class="sxs-lookup"><span data-stu-id="9a871-1997">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="9a871-1998">`BindingFlags.IgnoreCase` 忽略大小寫的`name`。</span><span class="sxs-lookup"><span data-stu-id="9a871-1998">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="9a871-1999">`BindingFlags.DeclaredOnly` 搜尋僅屬性宣告上<xref:System.Type>，不只是繼承的屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-1999">`BindingFlags.DeclaredOnly` to search only the properties declared on the <xref:System.Type>, not properties that were simply inherited.</span></span>  
  
 <span data-ttu-id="9a871-2000">如需詳細資訊，請參閱 <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="9a871-2000">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="9a871-2001">如果目前<xref:System.Type>代表建構的泛型型別，這個方法會傳回<xref:System.Reflection.PropertyInfo>具有由適當的型別引數取代型別參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-2001">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="9a871-2002">如果目前<xref:System.Type>表示的類型參數的泛型類型或泛型方法定義，這個方法會搜尋類別條件約束的屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-2002">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.</span></span>  
  
 <span data-ttu-id="9a871-2003">情況下會<xref:System.Reflection.AmbiguousMatchException>，就會發生如下：</span><span class="sxs-lookup"><span data-stu-id="9a871-2003">Situations in which <xref:System.Reflection.AmbiguousMatchException> occurs include the following:</span></span>  
  
-   <span data-ttu-id="9a871-2004">類型包含兩個索引的屬性具有相同名稱但不同數量的參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-2004">A type contains two indexed properties that have the same name but different numbers of parameters.</span></span> <span data-ttu-id="9a871-2005">若要解決模稜兩可，使用的多載<xref:System.Type.GetProperty%2A>方法所指定的參數類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-2005">To resolve the ambiguity, use an overload of the <xref:System.Type.GetProperty%2A> method that specifies parameter types.</span></span>  
  
-   <span data-ttu-id="9a871-2006">衍生的型別宣告屬性，它會隱藏繼承的屬性具有相同的名稱，使用`new`修飾詞 (`Shadows` Visual Basic 中)。</span><span class="sxs-lookup"><span data-stu-id="9a871-2006">A derived type declares a property that hides an inherited property with the same name, using the `new` modifier (`Shadows` in Visual Basic).</span></span> <span data-ttu-id="9a871-2007">若要解決模稜兩可，包括<xref:System.Reflection.BindingFlags.DeclaredOnly?displayProperty=nameWithType>以將搜尋限制不會繼承的成員。</span><span class="sxs-lookup"><span data-stu-id="9a871-2007">To resolve the ambiguity, include <xref:System.Reflection.BindingFlags.DeclaredOnly?displayProperty=nameWithType> to restrict the search to members that are not inherited.</span></span>  
  
## <a name="indexers-and-default-properties"></a><span data-ttu-id="9a871-2008">索引子和預設屬性</span><span class="sxs-lookup"><span data-stu-id="9a871-2008">Indexers and Default Properties</span></span>  
 [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)]<span data-ttu-id="9a871-2009">[!INCLUDE[csprcslong](~/includes/csprcslong-md.md)]，和[!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)]簡化了存取索引的屬性的語法，並允許一個索引的屬性，是其類型的預設值。</span><span class="sxs-lookup"><span data-stu-id="9a871-2009">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], and [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] have simplified syntax for accessing indexed properties and allow one indexed property to be a default for its type.</span></span> <span data-ttu-id="9a871-2010">比方說，如果變數`myList`是指<xref:System.Collections.ArrayList>，語法`myList[3]`(`myList(3)` Visual Basic 中) 會擷取具有索引為 3 的項目。</span><span class="sxs-lookup"><span data-stu-id="9a871-2010">For example, if the variable `myList` refers to an <xref:System.Collections.ArrayList>, the syntax `myList[3]` (`myList(3)` in Visual Basic) retrieves the element with the index of 3.</span></span> <span data-ttu-id="9a871-2011">您可以多載的屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-2011">You can overload the property.</span></span>  
  
 <span data-ttu-id="9a871-2012">在 C# 中，這項功能稱為 「 索引子，並不能以名稱來參考。</span><span class="sxs-lookup"><span data-stu-id="9a871-2012">In C#, this feature is called an indexer and cannot be refered to by name.</span></span> <span data-ttu-id="9a871-2013">根據預設，C# 索引子會出現在中繼資料當做名為"Item"的索引屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-2013">By default, a C# indexer appears in metadata as an indexed property named "Item".</span></span> <span data-ttu-id="9a871-2014">不過，類別庫開發人員可以使用<xref:System.Runtime.CompilerServices.IndexerNameAttribute>屬性來變更中繼資料中的索引子名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-2014">However, a class library developer can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to change the name of the indexer in the metadata.</span></span> <span data-ttu-id="9a871-2015">例如，<xref:System.String>類別具有名為索引子<xref:System.String.Chars%2A>。</span><span class="sxs-lookup"><span data-stu-id="9a871-2015">For example, the <xref:System.String> class has an indexer named <xref:System.String.Chars%2A>.</span></span> <span data-ttu-id="9a871-2016">使用 C# 以外的語言建立索引的屬性可以有名稱以外的項目。</span><span class="sxs-lookup"><span data-stu-id="9a871-2016">Indexed properties created using languages other than C# can have names other than Item, as well.</span></span>  
  
 <span data-ttu-id="9a871-2017">若要判斷型別是否具有預設屬性，請使用<xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29>方法來測試<xref:System.Reflection.DefaultMemberAttribute>屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-2017">To determine whether a type has a default property, use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> method to test for the <xref:System.Reflection.DefaultMemberAttribute> attribute.</span></span> <span data-ttu-id="9a871-2018">如果類型具有<xref:System.Reflection.DefaultMemberAttribute>，則<xref:System.Reflection.DefaultMemberAttribute.MemberName%2A>屬性會傳回預設屬性的名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-2018">If the type has <xref:System.Reflection.DefaultMemberAttribute>, the <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> property returns the name of the default property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-2019">下列範例會擷取使用者定義的類別的型別、 擷取該類別的內容並顯示根據指定的繫結條件約束的屬性名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-2019">The following example retrieves the type of a user-defined class, retrieves a property of that class and displays the property name in accordance with the specified binding constraints.</span></span>  
  
 [!code-cpp[Type_GetProperty2#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetProperty2/CPP/type_getproperty2.cpp#1)]
 [!code-csharp[Type_GetProperty2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetProperty2/CS/type_getproperty2.cs#1)]
 [!code-vb[Type_GetProperty2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetProperty2/VB/type_getproperty2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException"><span data-ttu-id="9a871-2020">找到一個以上的屬性，其具有指定名稱，且符合指定繫結條件約束。</span><span class="sxs-lookup"><span data-stu-id="9a871-2020">More than one property is found with the specified name and matching the specified binding constraints.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9a871-2021"><paramref name="name" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-2021"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, Type returnType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, class System.Type returnType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetProperty(System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String, returnType As Type) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name, Type ^ returnType);" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string * Type -&gt; System.Reflection.PropertyInfo&#xA;override this.GetProperty : string * Type -&gt; System.Reflection.PropertyInfo" Usage="type.GetProperty (name, returnType)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="9a871-2022">字串，包含要取得的公用屬性名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-2022">The string containing the name of the public property to get.</span></span></param>
        <param name="returnType"><span data-ttu-id="9a871-2023">屬性的傳回型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-2023">The return type of the property.</span></span></param>
        <summary><span data-ttu-id="9a871-2024">搜尋具有指定名稱和傳回型別的公用屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-2024">Searches for the public property with the specified name and return type.</span></span></summary>
        <returns><span data-ttu-id="9a871-2025">物件，代表具有指定之名稱的公用屬性 (如有找到)，否則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-2025">An object representing the public property with the specified name, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-2026">屬性會被視為公用反映，如果有至少一個存取子是公用。</span><span class="sxs-lookup"><span data-stu-id="9a871-2026">A property is considered public to reflection if it has at least one accessor that is public.</span></span> <span data-ttu-id="9a871-2027">否則屬性會被視為私用，而且您必須使用<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (在 Visual Basic 中，使用值的結合`Or`) 來取得它。</span><span class="sxs-lookup"><span data-stu-id="9a871-2027">Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="9a871-2028">搜尋`name`會區分大小寫。</span><span class="sxs-lookup"><span data-stu-id="9a871-2028">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="9a871-2029">搜尋包含 public static 和 public 的執行個體屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-2029">The search includes public static and public instance properties.</span></span>  
  
 <span data-ttu-id="9a871-2030">如果目前<xref:System.Type>代表建構的泛型型別，這個方法會傳回<xref:System.Reflection.PropertyInfo>具有由適當的型別引數取代型別參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-2030">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="9a871-2031">如果目前<xref:System.Type>表示的類型參數的泛型類型或泛型方法定義，這個方法會搜尋類別條件約束的屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-2031">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.</span></span>  
  
## <a name="indexers-and-default-properties"></a><span data-ttu-id="9a871-2032">索引子和預設屬性</span><span class="sxs-lookup"><span data-stu-id="9a871-2032">Indexers and Default Properties</span></span>  
 [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)]<span data-ttu-id="9a871-2033">[!INCLUDE[csprcslong](~/includes/csprcslong-md.md)]，和[!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)]簡化了存取索引的屬性的語法，並允許一個索引的屬性，是其類型的預設值。</span><span class="sxs-lookup"><span data-stu-id="9a871-2033">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], and [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] have simplified syntax for accessing indexed properties and allow one indexed property to be a default for its type.</span></span> <span data-ttu-id="9a871-2034">比方說，如果變數`myList`是指<xref:System.Collections.ArrayList>，語法`myList[3]`(`myList(3)` Visual Basic 中) 會擷取具有索引為 3 的項目。</span><span class="sxs-lookup"><span data-stu-id="9a871-2034">For example, if the variable `myList` refers to an <xref:System.Collections.ArrayList>, the syntax `myList[3]` (`myList(3)` in Visual Basic) retrieves the element with the index of 3.</span></span> <span data-ttu-id="9a871-2035">您可以多載的屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-2035">You can overload the property.</span></span>  
  
 <span data-ttu-id="9a871-2036">在 C# 中，這項功能稱為 「 索引子，並不能以名稱來參考。</span><span class="sxs-lookup"><span data-stu-id="9a871-2036">In C#, this feature is called an indexer and cannot be refered to by name.</span></span> <span data-ttu-id="9a871-2037">根據預設，C# 索引子會出現在中繼資料當做名為"Item"的索引屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-2037">By default, a C# indexer appears in metadata as an indexed property named "Item".</span></span> <span data-ttu-id="9a871-2038">不過，類別庫開發人員可以使用<xref:System.Runtime.CompilerServices.IndexerNameAttribute>屬性來變更中繼資料中的索引子名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-2038">However, a class library developer can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to change the name of the indexer in the metadata.</span></span> <span data-ttu-id="9a871-2039">例如，<xref:System.String>類別具有名為索引子<xref:System.String.Chars%2A>。</span><span class="sxs-lookup"><span data-stu-id="9a871-2039">For example, the <xref:System.String> class has an indexer named <xref:System.String.Chars%2A>.</span></span> <span data-ttu-id="9a871-2040">使用 C# 以外的語言建立索引的屬性可以有名稱以外的項目。</span><span class="sxs-lookup"><span data-stu-id="9a871-2040">Indexed properties created using languages other than C# can have names other than Item, as well.</span></span>  
  
 <span data-ttu-id="9a871-2041">若要判斷型別是否具有預設屬性，請使用<xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29>方法來測試<xref:System.Reflection.DefaultMemberAttribute>屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-2041">To determine whether a type has a default property, use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> method to test for the <xref:System.Reflection.DefaultMemberAttribute> attribute.</span></span> <span data-ttu-id="9a871-2042">如果類型具有<xref:System.Reflection.DefaultMemberAttribute>，則<xref:System.Reflection.DefaultMemberAttribute.MemberName%2A>屬性會傳回預設屬性的名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-2042">If the type has <xref:System.Reflection.DefaultMemberAttribute>, the <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> property returns the name of the default property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-2043">下列範例會定義具有一個屬性的類別，並擷取屬性的類型與名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-2043">The following example defines a class with one property and retrieves the name and type of the property.</span></span>  
  
 [!code-cpp[Type_GetProperty_Types#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetProperty_Types/CPP/type_getproperty_types.cpp#1)]
 [!code-csharp[Type_GetProperty_Types#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetProperty_Types/CS/type_getproperty_types.cs#1)]
 [!code-vb[Type_GetProperty_Types#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetProperty_Types/VB/type_getproperty_types.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException"><span data-ttu-id="9a871-2044">找到一個以上具有指定名稱的屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-2044">More than one property is found with the specified name.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9a871-2045"><paramref name="name" /> 是 <see langword="null" />，或 <paramref name="returnType" /> 是 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-2045"><paramref name="name" /> is <see langword="null" />, or <paramref name="returnType" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, Type[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, class System.Type[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetProperty(System.String,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String, types As Type()) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name, cli::array &lt;Type ^&gt; ^ types);" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string * Type[] -&gt; System.Reflection.PropertyInfo&#xA;override this.GetProperty : string * Type[] -&gt; System.Reflection.PropertyInfo" Usage="type.GetProperty (name, types)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Type[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="types" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="9a871-2046">字串，包含要取得的公用屬性名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-2046">The string containing the name of the public property to get.</span></span></param>
        <param name="types"><span data-ttu-id="9a871-2047"><see cref="T:System.Type" /> 物件的陣列，代表所要取得之索引屬性的參數數目、順序和類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-2047">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.</span></span>  
  
<span data-ttu-id="9a871-2048">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-2048">-or-</span></span> 
<span data-ttu-id="9a871-2049">用以取得未編製索引的屬性之 <see cref="T:System.Type" /> 類型的空陣列 (也就是，Type[] types = new Type[0])。</span><span class="sxs-lookup"><span data-stu-id="9a871-2049">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</span></span></param>
        <summary><span data-ttu-id="9a871-2050">搜尋指定的公用屬性，其參數符合指定的引數類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-2050">Searches for the specified public property whose parameters match the specified argument types.</span></span></summary>
        <returns><span data-ttu-id="9a871-2051">代表其參數符合指定之引數類型的公用屬性物件 (如有找到)，否則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-2051">An object representing the public property whose parameters match the specified argument types, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-2052">屬性會被視為公用反映，如果有至少一個存取子是公用。</span><span class="sxs-lookup"><span data-stu-id="9a871-2052">A property is considered public to reflection if it has at least one accessor that is public.</span></span> <span data-ttu-id="9a871-2053">否則屬性會被視為私用，而且您必須使用<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (在 Visual Basic 中，使用值的結合`Or`) 來取得它。</span><span class="sxs-lookup"><span data-stu-id="9a871-2053">Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="9a871-2054">搜尋`name`會區分大小寫。</span><span class="sxs-lookup"><span data-stu-id="9a871-2054">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="9a871-2055">搜尋包含 public static 和 public 的執行個體屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-2055">The search includes public static and public instance properties.</span></span>  
  
 <span data-ttu-id="9a871-2056">如果目前<xref:System.Type>代表建構的泛型型別，這個方法會傳回<xref:System.Reflection.PropertyInfo>具有由適當的型別引數取代型別參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-2056">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="9a871-2057">如果目前<xref:System.Type>表示的類型參數的泛型類型或泛型方法定義，這個方法會搜尋類別條件約束的屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-2057">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.</span></span>  
  
## <a name="indexers-and-default-properties"></a><span data-ttu-id="9a871-2058">索引子和預設屬性</span><span class="sxs-lookup"><span data-stu-id="9a871-2058">Indexers and Default Properties</span></span>  
 [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)]<span data-ttu-id="9a871-2059">[!INCLUDE[csprcslong](~/includes/csprcslong-md.md)]，和[!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)]簡化了存取索引的屬性的語法，並允許一個索引的屬性，是其類型的預設值。</span><span class="sxs-lookup"><span data-stu-id="9a871-2059">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], and [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] have simplified syntax for accessing indexed properties and allow one indexed property to be a default for its type.</span></span> <span data-ttu-id="9a871-2060">比方說，如果變數`myList`是指<xref:System.Collections.ArrayList>，語法`myList[3]`(`myList(3)` Visual Basic 中) 會擷取具有索引為 3 的項目。</span><span class="sxs-lookup"><span data-stu-id="9a871-2060">For example, if the variable `myList` refers to an <xref:System.Collections.ArrayList>, the syntax `myList[3]` (`myList(3)` in Visual Basic) retrieves the element with the index of 3.</span></span> <span data-ttu-id="9a871-2061">您可以多載的屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-2061">You can overload the property.</span></span>  
  
 <span data-ttu-id="9a871-2062">在 C# 中，這項功能稱為 「 索引子，並不能以名稱來參考。</span><span class="sxs-lookup"><span data-stu-id="9a871-2062">In C#, this feature is called an indexer and cannot be refered to by name.</span></span> <span data-ttu-id="9a871-2063">根據預設，C# 索引子會出現在中繼資料當做名為"Item"的索引屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-2063">By default, a C# indexer appears in metadata as an indexed property named "Item".</span></span> <span data-ttu-id="9a871-2064">不過，類別庫開發人員可以使用<xref:System.Runtime.CompilerServices.IndexerNameAttribute>屬性來變更中繼資料中的索引子名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-2064">However, a class library developer can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to change the name of the indexer in the metadata.</span></span> <span data-ttu-id="9a871-2065">例如，<xref:System.String>類別具有名為索引子<xref:System.String.Chars%2A>。</span><span class="sxs-lookup"><span data-stu-id="9a871-2065">For example, the <xref:System.String> class has an indexer named <xref:System.String.Chars%2A>.</span></span> <span data-ttu-id="9a871-2066">使用 C# 以外的語言建立索引的屬性可以有名稱以外的項目。</span><span class="sxs-lookup"><span data-stu-id="9a871-2066">Indexed properties created using languages other than C# can have names other than Item, as well.</span></span>  
  
 <span data-ttu-id="9a871-2067">若要判斷型別是否具有預設屬性，請使用<xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29>方法來測試<xref:System.Reflection.DefaultMemberAttribute>屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-2067">To determine whether a type has a default property, use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> method to test for the <xref:System.Reflection.DefaultMemberAttribute> attribute.</span></span> <span data-ttu-id="9a871-2068">如果類型具有<xref:System.Reflection.DefaultMemberAttribute>，則<xref:System.Reflection.DefaultMemberAttribute.MemberName%2A>屬性會傳回預設屬性的名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-2068">If the type has <xref:System.Reflection.DefaultMemberAttribute>, the <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> property returns the name of the default property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-2069">下列範例會擷取`Type`物件的使用者定義的類別，該類別的屬性與擷取並顯示屬性名稱和屬性的型別所傳遞的引數指定`GetProperty`。</span><span class="sxs-lookup"><span data-stu-id="9a871-2069">The following example retrieves the `Type` object of a user-defined class, retrieves the property of that class, and displays the property name and type of the property as specified by the arguments passed to `GetProperty`.</span></span>  
  
 [!code-cpp[Type_GetProperty3#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetProperty3/CPP/type_getproperty3.cpp#1)]
 [!code-csharp[Type_GetProperty3#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetProperty3/CS/type_getproperty3.cs#1)]
 [!code-vb[Type_GetProperty3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetProperty3/VB/type_getproperty3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException"><span data-ttu-id="9a871-2070">找到一個以上具有指定名稱，且符合指定引數類型的屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-2070">More than one property is found with the specified name and matching the specified argument types.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9a871-2071"><paramref name="name" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-2071"><paramref name="name" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="9a871-2072">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-2072">-or-</span></span> 
 <span data-ttu-id="9a871-2073"><paramref name="types" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-2073"><paramref name="types" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9a871-2074"><paramref name="types" /> 是多維的。</span><span class="sxs-lookup"><span data-stu-id="9a871-2074"><paramref name="types" /> is multidimensional.</span></span></exception>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="9a871-2075"><paramref name="types" /> 的項目是 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-2075">An element of <paramref name="types" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, Type returnType, Type[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, class System.Type returnType, class System.Type[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetProperty(System.String,System.Type,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String, returnType As Type, types As Type()) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ types);" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string * Type * Type[] -&gt; System.Reflection.PropertyInfo&#xA;override this.GetProperty : string * Type * Type[] -&gt; System.Reflection.PropertyInfo" Usage="type.GetProperty (name, returnType, types)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Type,System.Type[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="types" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="9a871-2076">字串，包含要取得的公用屬性名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-2076">The string containing the name of the public property to get.</span></span></param>
        <param name="returnType"><span data-ttu-id="9a871-2077">屬性的傳回型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-2077">The return type of the property.</span></span></param>
        <param name="types"><span data-ttu-id="9a871-2078"><see cref="T:System.Type" /> 物件的陣列，代表所要取得之索引屬性的參數數目、順序和類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-2078">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.</span></span>  
  
<span data-ttu-id="9a871-2079">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-2079">-or-</span></span> 
<span data-ttu-id="9a871-2080">用以取得未編製索引的屬性之 <see cref="T:System.Type" /> 類型的空陣列 (也就是，Type[] types = new Type[0])。</span><span class="sxs-lookup"><span data-stu-id="9a871-2080">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</span></span></param>
        <summary><span data-ttu-id="9a871-2081">搜尋指定的公用屬性，其參數符合指定的引數類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-2081">Searches for the specified public property whose parameters match the specified argument types.</span></span></summary>
        <returns><span data-ttu-id="9a871-2082">代表其參數符合指定之引數類型的公用屬性物件 (如有找到)，否則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-2082">An object representing the public property whose parameters match the specified argument types, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-2083">屬性會被視為公用反映，如果有至少一個存取子是公用。</span><span class="sxs-lookup"><span data-stu-id="9a871-2083">A property is considered public to reflection if it has at least one accessor that is public.</span></span> <span data-ttu-id="9a871-2084">否則屬性會被視為私用，而且您必須使用<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (在 Visual Basic 中，使用值的結合`Or`) 來取得它。</span><span class="sxs-lookup"><span data-stu-id="9a871-2084">Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="9a871-2085">搜尋`name`會區分大小寫。</span><span class="sxs-lookup"><span data-stu-id="9a871-2085">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="9a871-2086">搜尋包含 public static 和 public 的執行個體屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-2086">The search includes public static and public instance properties.</span></span>  
  
 <span data-ttu-id="9a871-2087">如果目前<xref:System.Type>代表建構的泛型型別，這個方法會傳回<xref:System.Reflection.PropertyInfo>具有由適當的型別引數取代型別參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-2087">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="9a871-2088">如果目前<xref:System.Type>表示的類型參數的泛型類型或泛型方法定義，這個方法會搜尋類別條件約束的屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-2088">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.</span></span>  
  
## <a name="indexers-and-default-properties"></a><span data-ttu-id="9a871-2089">索引子和預設屬性</span><span class="sxs-lookup"><span data-stu-id="9a871-2089">Indexers and Default Properties</span></span>  
 [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)]<span data-ttu-id="9a871-2090">[!INCLUDE[csprcslong](~/includes/csprcslong-md.md)]，和[!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)]簡化了存取索引的屬性的語法，並允許一個索引的屬性，是其類型的預設值。</span><span class="sxs-lookup"><span data-stu-id="9a871-2090">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], and [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] have simplified syntax for accessing indexed properties and allow one indexed property to be a default for its type.</span></span> <span data-ttu-id="9a871-2091">比方說，如果變數`myList`是指<xref:System.Collections.ArrayList>，語法`myList[3]`(`myList(3)` Visual Basic 中) 會擷取具有索引為 3 的項目。</span><span class="sxs-lookup"><span data-stu-id="9a871-2091">For example, if the variable `myList` refers to an <xref:System.Collections.ArrayList>, the syntax `myList[3]` (`myList(3)` in Visual Basic) retrieves the element with the index of 3.</span></span> <span data-ttu-id="9a871-2092">您可以多載的屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-2092">You can overload the property.</span></span>  
  
 <span data-ttu-id="9a871-2093">在 C# 中，這項功能稱為 「 索引子，並不能以名稱來參考。</span><span class="sxs-lookup"><span data-stu-id="9a871-2093">In C#, this feature is called an indexer and cannot be refered to by name.</span></span> <span data-ttu-id="9a871-2094">根據預設，C# 索引子會出現在中繼資料當做名為"Item"的索引屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-2094">By default, a C# indexer appears in metadata as an indexed property named "Item".</span></span> <span data-ttu-id="9a871-2095">不過，類別庫開發人員可以使用<xref:System.Runtime.CompilerServices.IndexerNameAttribute>屬性來變更中繼資料中的索引子名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-2095">However, a class library developer can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to change the name of the indexer in the metadata.</span></span> <span data-ttu-id="9a871-2096">例如，<xref:System.String>類別具有名為索引子<xref:System.String.Chars%2A>。</span><span class="sxs-lookup"><span data-stu-id="9a871-2096">For example, the <xref:System.String> class has an indexer named <xref:System.String.Chars%2A>.</span></span> <span data-ttu-id="9a871-2097">使用 C# 以外的語言建立索引的屬性可以有名稱以外的項目。</span><span class="sxs-lookup"><span data-stu-id="9a871-2097">Indexed properties created using languages other than C# can have names other than Item, as well.</span></span>  
  
 <span data-ttu-id="9a871-2098">若要判斷型別是否具有預設屬性，請使用<xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29>方法來測試<xref:System.Reflection.DefaultMemberAttribute>屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-2098">To determine whether a type has a default property, use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> method to test for the <xref:System.Reflection.DefaultMemberAttribute> attribute.</span></span> <span data-ttu-id="9a871-2099">如果類型具有<xref:System.Reflection.DefaultMemberAttribute>，則<xref:System.Reflection.DefaultMemberAttribute.MemberName%2A>屬性會傳回預設屬性的名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-2099">If the type has <xref:System.Reflection.DefaultMemberAttribute>, the <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> property returns the name of the default property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException"><span data-ttu-id="9a871-2100">找到一個以上具有指定名稱，且符合指定引數類型的屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-2100">More than one property is found with the specified name and matching the specified argument types.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9a871-2101"><paramref name="name" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-2101"><paramref name="name" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="9a871-2102">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-2102">-or-</span></span> 
 <span data-ttu-id="9a871-2103"><paramref name="types" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-2103"><paramref name="types" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9a871-2104"><paramref name="types" /> 是多維的。</span><span class="sxs-lookup"><span data-stu-id="9a871-2104"><paramref name="types" /> is multidimensional.</span></span></exception>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="9a871-2105"><paramref name="types" /> 的項目是 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-2105">An element of <paramref name="types" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, Type returnType, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, class System.Type returnType, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetProperty(System.String,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String, returnType As Type, types As Type(), modifiers As ParameterModifier()) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string * Type * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.PropertyInfo&#xA;override this.GetProperty : string * Type * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.PropertyInfo" Usage="type.GetProperty (name, returnType, types, modifiers)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Type,System.Type[],System.Reflection.ParameterModifier[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="9a871-2106">字串，包含要取得的公用屬性名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-2106">The string containing the name of the public property to get.</span></span></param>
        <param name="returnType"><span data-ttu-id="9a871-2107">屬性的傳回型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-2107">The return type of the property.</span></span></param>
        <param name="types"><span data-ttu-id="9a871-2108"><see cref="T:System.Type" /> 物件的陣列，代表所要取得之索引屬性的參數數目、順序和類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-2108">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.</span></span>  
  
<span data-ttu-id="9a871-2109">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-2109">-or-</span></span> 
<span data-ttu-id="9a871-2110">用以取得未編製索引的屬性之 <see cref="T:System.Type" /> 類型的空陣列 (也就是，Type[] types = new Type[0])。</span><span class="sxs-lookup"><span data-stu-id="9a871-2110">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</span></span></param>
        <param name="modifiers"><span data-ttu-id="9a871-2111"><see cref="T:System.Reflection.ParameterModifier" /> 物件的陣列，代表在 <paramref name="types" /> 陣列中與對應項目關聯的屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-2111">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array.</span></span> <span data-ttu-id="9a871-2112">預設的繫結器不會處理這個參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-2112">The default binder does not process this parameter.</span></span></param>
        <summary><span data-ttu-id="9a871-2113">搜尋指定的公用屬性，其參數符合指定的引數類型和修飾詞。</span><span class="sxs-lookup"><span data-stu-id="9a871-2113">Searches for the specified public property whose parameters match the specified argument types and modifiers.</span></span></summary>
        <returns><span data-ttu-id="9a871-2114">物件，代表符合指定之需求的公用屬性 (如有找到)，否則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-2114">An object representing the public property that matches the specified requirements, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-2115">屬性會被視為公用反映，如果有至少一個存取子是公用。</span><span class="sxs-lookup"><span data-stu-id="9a871-2115">A property is considered public to reflection if it has at least one accessor that is public.</span></span> <span data-ttu-id="9a871-2116">否則屬性會被視為私用，而且您必須使用<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (在 Visual Basic 中，使用值的結合`Or`) 來取得它。</span><span class="sxs-lookup"><span data-stu-id="9a871-2116">Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="9a871-2117">雖然預設繫結器不會處理<xref:System.Reflection.ParameterModifier>(`modifiers`參數)，您可以使用抽象<xref:System.Reflection.Binder?displayProperty=nameWithType>類別，以寫入未處理的自訂繫結器`modifiers`。</span><span class="sxs-lookup"><span data-stu-id="9a871-2117">Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers`.</span></span> <span data-ttu-id="9a871-2118">`ParameterModifier` 透過 COM interop 呼叫時才會使用和處理傳址方式傳遞的參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-2118">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="9a871-2119">搜尋`name`會區分大小寫。</span><span class="sxs-lookup"><span data-stu-id="9a871-2119">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="9a871-2120">搜尋包含 public static 和 public 的執行個體屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-2120">The search includes public static and public instance properties.</span></span>  
  
 <span data-ttu-id="9a871-2121">如果目前<xref:System.Type>代表建構的泛型型別，這個方法會傳回<xref:System.Reflection.PropertyInfo>具有由適當的型別引數取代型別參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-2121">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="9a871-2122">如果目前<xref:System.Type>表示的類型參數的泛型類型或泛型方法定義，這個方法會搜尋類別條件約束的屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-2122">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.</span></span>  
  
## <a name="indexers-and-default-properties"></a><span data-ttu-id="9a871-2123">索引子和預設屬性</span><span class="sxs-lookup"><span data-stu-id="9a871-2123">Indexers and Default Properties</span></span>  
 [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)]<span data-ttu-id="9a871-2124">[!INCLUDE[csprcslong](~/includes/csprcslong-md.md)]，和[!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)]簡化了存取索引的屬性的語法，並允許一個索引的屬性，是其類型的預設值。</span><span class="sxs-lookup"><span data-stu-id="9a871-2124">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], and [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] have simplified syntax for accessing indexed properties and allow one indexed property to be a default for its type.</span></span> <span data-ttu-id="9a871-2125">比方說，如果變數`myList`是指<xref:System.Collections.ArrayList>，語法`myList[3]`(`myList(3)` Visual Basic 中) 會擷取具有索引為 3 的項目。</span><span class="sxs-lookup"><span data-stu-id="9a871-2125">For example, if the variable `myList` refers to an <xref:System.Collections.ArrayList>, the syntax `myList[3]` (`myList(3)` in Visual Basic) retrieves the element with the index of 3.</span></span> <span data-ttu-id="9a871-2126">您可以多載的屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-2126">You can overload the property.</span></span>  
  
 <span data-ttu-id="9a871-2127">在 C# 中，這項功能稱為 「 索引子，並不能以名稱來參考。</span><span class="sxs-lookup"><span data-stu-id="9a871-2127">In C#, this feature is called an indexer and cannot be refered to by name.</span></span> <span data-ttu-id="9a871-2128">根據預設，C# 索引子會出現在中繼資料當做名為"Item"的索引屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-2128">By default, a C# indexer appears in metadata as an indexed property named "Item".</span></span> <span data-ttu-id="9a871-2129">不過，類別庫開發人員可以使用<xref:System.Runtime.CompilerServices.IndexerNameAttribute>屬性來變更中繼資料中的索引子名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-2129">However, a class library developer can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to change the name of the indexer in the metadata.</span></span> <span data-ttu-id="9a871-2130">例如，<xref:System.String>類別具有名為索引子<xref:System.String.Chars%2A>。</span><span class="sxs-lookup"><span data-stu-id="9a871-2130">For example, the <xref:System.String> class has an indexer named <xref:System.String.Chars%2A>.</span></span> <span data-ttu-id="9a871-2131">使用 C# 以外的語言建立索引的屬性可以有名稱以外的項目。</span><span class="sxs-lookup"><span data-stu-id="9a871-2131">Indexed properties created using languages other than C# can have names other than Item, as well.</span></span>  
  
 <span data-ttu-id="9a871-2132">若要判斷型別是否具有預設屬性，請使用<xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29>方法來測試<xref:System.Reflection.DefaultMemberAttribute>屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-2132">To determine whether a type has a default property, use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> method to test for the <xref:System.Reflection.DefaultMemberAttribute> attribute.</span></span> <span data-ttu-id="9a871-2133">如果類型具有<xref:System.Reflection.DefaultMemberAttribute>，則<xref:System.Reflection.DefaultMemberAttribute.MemberName%2A>屬性會傳回預設屬性的名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-2133">If the type has <xref:System.Reflection.DefaultMemberAttribute>, the <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> property returns the name of the default property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-2134">下列範例會取得`Type`物件對應至`MyPropertyClass`，並使用引數傳遞給擷取之索引的屬性，這個類別的`GetProperty`方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-2134">The following example obtains a `Type` object corresponding to `MyPropertyClass`, and the indexed property of this class is retrieved using the arguments passed to the `GetProperty` method.</span></span>  
  
 [!code-cpp[Type_GetProperty5#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetProperty5/CPP/type_getproperty2.cpp#1)]
 [!code-csharp[Type_GetProperty5#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetProperty5/CS/type_getproperty2.cs#1)]
 [!code-vb[Type_GetProperty5#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetProperty5/VB/type_getproperty2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException"><span data-ttu-id="9a871-2135">找到一個以上具有指定名稱，且符合指定引數類型和修飾詞的屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-2135">More than one property is found with the specified name and matching the specified argument types and modifiers.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9a871-2136"><paramref name="name" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-2136"><paramref name="name" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="9a871-2137">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-2137">-or-</span></span> 
 <span data-ttu-id="9a871-2138"><paramref name="types" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-2138"><paramref name="types" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9a871-2139"><paramref name="types" /> 是多維的。</span><span class="sxs-lookup"><span data-stu-id="9a871-2139"><paramref name="types" /> is multidimensional.</span></span>  
  
<span data-ttu-id="9a871-2140">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-2140">-or-</span></span> 
 <span data-ttu-id="9a871-2141"><paramref name="modifiers" /> 是多維的。</span><span class="sxs-lookup"><span data-stu-id="9a871-2141"><paramref name="modifiers" /> is multidimensional.</span></span>  
  
<span data-ttu-id="9a871-2142">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-2142">-or-</span></span> 
 <span data-ttu-id="9a871-2143"><paramref name="types" /> 和 <paramref name="modifiers" /> 的長度不同。</span><span class="sxs-lookup"><span data-stu-id="9a871-2143"><paramref name="types" /> and <paramref name="modifiers" /> do not have the same length.</span></span></exception>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="9a871-2144"><paramref name="types" /> 的項目是 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-2144">An element of <paramref name="types" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type returnType, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type returnType, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, Type ^ returnType, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string * System.Reflection.BindingFlags * System.Reflection.Binder * Type * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.PropertyInfo&#xA;override this.GetProperty : string * System.Reflection.BindingFlags * System.Reflection.Binder * Type * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.PropertyInfo" Usage="type.GetProperty (name, bindingAttr, binder, returnType, types, modifiers)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="9a871-2145">字串，包含要取得的屬性名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-2145">The string containing the name of the property to get.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="9a871-2146">位元遮罩，由一或多個 <see cref="T:System.Reflection.BindingFlags" /> 組成，而這些旗標會指定執行搜尋的方式。</span><span class="sxs-lookup"><span data-stu-id="9a871-2146">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="9a871-2147">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-2147">-or-</span></span> 
<span data-ttu-id="9a871-2148">零，傳回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-2148">Zero, to return <see langword="null" />.</span></span></param>
        <param name="binder"><span data-ttu-id="9a871-2149">定義一組屬性並啟用繫結的物件，可包含多載方法的選擇、引數類型的強制，以及透過反映的成員引動過程。</span><span class="sxs-lookup"><span data-stu-id="9a871-2149">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span></span>  
  
<span data-ttu-id="9a871-2150">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-2150">-or-</span></span> 
<span data-ttu-id="9a871-2151">Null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)，可使用 <see cref="P:System.Type.DefaultBinder" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-2151">A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span></span></param>
        <param name="returnType"><span data-ttu-id="9a871-2152">屬性的傳回型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-2152">The return type of the property.</span></span></param>
        <param name="types"><span data-ttu-id="9a871-2153"><see cref="T:System.Type" /> 物件的陣列，代表所要取得之索引屬性的參數數目、順序和類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-2153">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.</span></span>  
  
<span data-ttu-id="9a871-2154">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-2154">-or-</span></span> 
<span data-ttu-id="9a871-2155">用以取得未編製索引的屬性之 <see cref="T:System.Type" /> 類型的空陣列 (也就是，Type[] types = new Type[0])。</span><span class="sxs-lookup"><span data-stu-id="9a871-2155">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</span></span></param>
        <param name="modifiers"><span data-ttu-id="9a871-2156"><see cref="T:System.Reflection.ParameterModifier" /> 物件的陣列，代表在 <paramref name="types" /> 陣列中與對應項目關聯的屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-2156">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array.</span></span> <span data-ttu-id="9a871-2157">預設的繫結器不會處理這個參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-2157">The default binder does not process this parameter.</span></span></param>
        <summary><span data-ttu-id="9a871-2158">使用指定的繫結條件約束搜尋指定的屬性，而該屬性的參數符合指定的引數類型和修飾詞。</span><span class="sxs-lookup"><span data-stu-id="9a871-2158">Searches for the specified property whose parameters match the specified argument types and modifiers, using the specified binding constraints.</span></span></summary>
        <returns><span data-ttu-id="9a871-2159">代表符合指定之需求屬性的物件 (如有找到)；否則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-2159">An object representing the property that matches the specified requirements, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-2160">屬性會被視為公用反映，如果有至少一個存取子是公用。</span><span class="sxs-lookup"><span data-stu-id="9a871-2160">A property is considered public to reflection if it has at least one accessor that is public.</span></span> <span data-ttu-id="9a871-2161">否則屬性會被視為私用，而且您必須使用<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (在 Visual Basic 中，使用值的結合`Or`) 來取得它。</span><span class="sxs-lookup"><span data-stu-id="9a871-2161">Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="9a871-2162">雖然預設繫結器不會處理<xref:System.Reflection.ParameterModifier>(`modifiers`參數)，您可以使用抽象<xref:System.Reflection.Binder?displayProperty=nameWithType>類別，以寫入未處理的自訂繫結器`modifiers`。</span><span class="sxs-lookup"><span data-stu-id="9a871-2162">Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers`.</span></span> <span data-ttu-id="9a871-2163">`ParameterModifier` 透過 COM interop 呼叫時才會使用和處理傳址方式傳遞的參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-2163">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="9a871-2164">下表顯示基底類別成員會傳回由`Get`反映型別上時的方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-2164">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="9a871-2165">成員類型</span><span class="sxs-lookup"><span data-stu-id="9a871-2165">Member Type</span></span>|<span data-ttu-id="9a871-2166">Static</span><span class="sxs-lookup"><span data-stu-id="9a871-2166">Static</span></span>|<span data-ttu-id="9a871-2167">非靜態</span><span class="sxs-lookup"><span data-stu-id="9a871-2167">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="9a871-2168">建構函式</span><span class="sxs-lookup"><span data-stu-id="9a871-2168">Constructor</span></span>|<span data-ttu-id="9a871-2169">否</span><span class="sxs-lookup"><span data-stu-id="9a871-2169">No</span></span>|<span data-ttu-id="9a871-2170">否</span><span class="sxs-lookup"><span data-stu-id="9a871-2170">No</span></span>|  
|<span data-ttu-id="9a871-2171">欄位</span><span class="sxs-lookup"><span data-stu-id="9a871-2171">Field</span></span>|<span data-ttu-id="9a871-2172">否</span><span class="sxs-lookup"><span data-stu-id="9a871-2172">No</span></span>|<span data-ttu-id="9a871-2173">可以。</span><span class="sxs-lookup"><span data-stu-id="9a871-2173">Yes.</span></span> <span data-ttu-id="9a871-2174">欄位永遠是依名稱和簽章隱藏。</span><span class="sxs-lookup"><span data-stu-id="9a871-2174">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="9a871-2175">Event - 事件</span><span class="sxs-lookup"><span data-stu-id="9a871-2175">Event</span></span>|<span data-ttu-id="9a871-2176">不適用</span><span class="sxs-lookup"><span data-stu-id="9a871-2176">Not applicable</span></span>|<span data-ttu-id="9a871-2177">一般類型系統規則是繼承實作屬性的方法相同。</span><span class="sxs-lookup"><span data-stu-id="9a871-2177">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="9a871-2178">反映會視為由名稱和簽章隱藏屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-2178">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="9a871-2179">請參閱附註 2。</span><span class="sxs-lookup"><span data-stu-id="9a871-2179">See note 2 below.</span></span>|  
|<span data-ttu-id="9a871-2180">方法</span><span class="sxs-lookup"><span data-stu-id="9a871-2180">Method</span></span>|<span data-ttu-id="9a871-2181">否</span><span class="sxs-lookup"><span data-stu-id="9a871-2181">No</span></span>|<span data-ttu-id="9a871-2182">可以。</span><span class="sxs-lookup"><span data-stu-id="9a871-2182">Yes.</span></span> <span data-ttu-id="9a871-2183">（虛擬和非虛擬） 的方法可以隱藏依名稱或依名稱和簽章隱藏。</span><span class="sxs-lookup"><span data-stu-id="9a871-2183">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="9a871-2184">巢狀的類型</span><span class="sxs-lookup"><span data-stu-id="9a871-2184">Nested Type</span></span>|<span data-ttu-id="9a871-2185">否</span><span class="sxs-lookup"><span data-stu-id="9a871-2185">No</span></span>|<span data-ttu-id="9a871-2186">否</span><span class="sxs-lookup"><span data-stu-id="9a871-2186">No</span></span>|  
|<span data-ttu-id="9a871-2187">屬性</span><span class="sxs-lookup"><span data-stu-id="9a871-2187">Property</span></span>|<span data-ttu-id="9a871-2188">不適用</span><span class="sxs-lookup"><span data-stu-id="9a871-2188">Not applicable</span></span>|<span data-ttu-id="9a871-2189">一般類型系統規則是繼承實作屬性的方法相同。</span><span class="sxs-lookup"><span data-stu-id="9a871-2189">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="9a871-2190">反映會視為由名稱和簽章隱藏屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-2190">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="9a871-2191">請參閱附註 2。</span><span class="sxs-lookup"><span data-stu-id="9a871-2191">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="9a871-2192">依名稱和簽章隱藏會考慮所有組件的簽章，包括自訂修飾詞，傳回類型、 參數類型、 sentinels 和 unmanaged 呼叫慣例。</span><span class="sxs-lookup"><span data-stu-id="9a871-2192">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="9a871-2193">這是二進位比較。</span><span class="sxs-lookup"><span data-stu-id="9a871-2193">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="9a871-2194">反映的屬性和事件會依名稱和簽章隱藏。</span><span class="sxs-lookup"><span data-stu-id="9a871-2194">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="9a871-2195">如果您同時有 get 和 set 存取子的屬性在基底類別中，但衍生的類別有只有 get 存取子，在衍生的類別的屬性會隱藏基底類別屬性中，並不能存取的基底類別的 setter。</span><span class="sxs-lookup"><span data-stu-id="9a871-2195">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="9a871-2196">自訂屬性不屬於一般類型系統。</span><span class="sxs-lookup"><span data-stu-id="9a871-2196">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="9a871-2197">下列<xref:System.Reflection.BindingFlags>篩選器旗標可以用來定義要在搜尋中包含的屬性：</span><span class="sxs-lookup"><span data-stu-id="9a871-2197">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which properties to include in the search:</span></span>  
  
-   <span data-ttu-id="9a871-2198">您必須指定`BindingFlags.Instance`或`BindingFlags.Static`以取得傳回值。</span><span class="sxs-lookup"><span data-stu-id="9a871-2198">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="9a871-2199">指定`BindingFlags.Public`来包含在搜尋中的公用屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-2199">Specify `BindingFlags.Public` to include public properties in the search.</span></span>  
  
-   <span data-ttu-id="9a871-2200">指定`BindingFlags.NonPublic`要在搜尋中包含非公用屬性 （也就是私用、 內部和受保護的屬性）。</span><span class="sxs-lookup"><span data-stu-id="9a871-2200">Specify `BindingFlags.NonPublic` to include non-public properties (that is, private, internal, and protected properties) in the search.</span></span>  
  
-   <span data-ttu-id="9a871-2201">指定`BindingFlags.FlattenHierarchy`包含`public`和`protected`階層; 的靜態成員`private`中繼承類別的靜態成員不包含。</span><span class="sxs-lookup"><span data-stu-id="9a871-2201">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="9a871-2202">下列<xref:System.Reflection.BindingFlags>輔助鍵旗標可以用來變更搜尋的運作方式：</span><span class="sxs-lookup"><span data-stu-id="9a871-2202">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="9a871-2203">`BindingFlags.IgnoreCase` 忽略大小寫的`name`。</span><span class="sxs-lookup"><span data-stu-id="9a871-2203">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="9a871-2204">`BindingFlags.DeclaredOnly` 搜尋僅屬性宣告上<xref:System.Type>，不只是繼承的屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-2204">`BindingFlags.DeclaredOnly` to search only the properties declared on the <xref:System.Type>, not properties that were simply inherited.</span></span>  
  
 <span data-ttu-id="9a871-2205">如需詳細資訊，請參閱 <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="9a871-2205">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="9a871-2206">如果目前<xref:System.Type>代表建構的泛型型別，這個方法會傳回<xref:System.Reflection.PropertyInfo>具有由適當的型別引數取代型別參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-2206">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="9a871-2207">如果目前<xref:System.Type>表示的類型參數的泛型類型或泛型方法定義，這個方法會搜尋類別條件約束的屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-2207">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.</span></span>  
  
## <a name="indexers-and-default-properties"></a><span data-ttu-id="9a871-2208">索引子和預設屬性</span><span class="sxs-lookup"><span data-stu-id="9a871-2208">Indexers and Default Properties</span></span>  
 [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)]<span data-ttu-id="9a871-2209">[!INCLUDE[csprcslong](~/includes/csprcslong-md.md)]，和[!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)]簡化了存取索引的屬性的語法，並允許一個索引的屬性，是其類型的預設值。</span><span class="sxs-lookup"><span data-stu-id="9a871-2209">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], and [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] have simplified syntax for accessing indexed properties and allow one indexed property to be a default for its type.</span></span> <span data-ttu-id="9a871-2210">比方說，如果變數`myList`是指<xref:System.Collections.ArrayList>，語法`myList[3]`(`myList(3)` Visual Basic 中) 會擷取具有索引為 3 的項目。</span><span class="sxs-lookup"><span data-stu-id="9a871-2210">For example, if the variable `myList` refers to an <xref:System.Collections.ArrayList>, the syntax `myList[3]` (`myList(3)` in Visual Basic) retrieves the element with the index of 3.</span></span> <span data-ttu-id="9a871-2211">您可以多載的屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-2211">You can overload the property.</span></span>  
  
 <span data-ttu-id="9a871-2212">在 C# 中，這項功能稱為 「 索引子，並不能以名稱來參考。</span><span class="sxs-lookup"><span data-stu-id="9a871-2212">In C#, this feature is called an indexer and cannot be refered to by name.</span></span> <span data-ttu-id="9a871-2213">根據預設，C# 索引子會出現在中繼資料當做名為"Item"的索引屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-2213">By default, a C# indexer appears in metadata as an indexed property named "Item".</span></span> <span data-ttu-id="9a871-2214">不過，類別庫開發人員可以使用<xref:System.Runtime.CompilerServices.IndexerNameAttribute>屬性來變更中繼資料中的索引子名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-2214">However, a class library developer can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to change the name of the indexer in the metadata.</span></span> <span data-ttu-id="9a871-2215">例如，<xref:System.String>類別具有名為索引子<xref:System.String.Chars%2A>。</span><span class="sxs-lookup"><span data-stu-id="9a871-2215">For example, the <xref:System.String> class has an indexer named <xref:System.String.Chars%2A>.</span></span> <span data-ttu-id="9a871-2216">使用 C# 以外的語言建立索引的屬性可以有名稱以外的項目。</span><span class="sxs-lookup"><span data-stu-id="9a871-2216">Indexed properties created using languages other than C# can have names other than Item, as well.</span></span>  
  
 <span data-ttu-id="9a871-2217">若要判斷型別是否具有預設屬性，請使用<xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29>方法來測試<xref:System.Reflection.DefaultMemberAttribute>屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-2217">To determine whether a type has a default property, use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> method to test for the <xref:System.Reflection.DefaultMemberAttribute> attribute.</span></span> <span data-ttu-id="9a871-2218">如果類型具有<xref:System.Reflection.DefaultMemberAttribute>，則<xref:System.Reflection.DefaultMemberAttribute.MemberName%2A>屬性會傳回預設屬性的名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-2218">If the type has <xref:System.Reflection.DefaultMemberAttribute>, the <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> property returns the name of the default property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException"><span data-ttu-id="9a871-2219">找到一個以上的屬性，其具有指定名稱，且符合指定繫結條件約束。</span><span class="sxs-lookup"><span data-stu-id="9a871-2219">More than one property is found with the specified name and matching the specified binding constraints.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9a871-2220"><paramref name="name" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-2220"><paramref name="name" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="9a871-2221">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-2221">-or-</span></span> 
 <span data-ttu-id="9a871-2222"><paramref name="types" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-2222"><paramref name="types" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9a871-2223"><paramref name="types" /> 是多維的。</span><span class="sxs-lookup"><span data-stu-id="9a871-2223"><paramref name="types" /> is multidimensional.</span></span>  
  
<span data-ttu-id="9a871-2224">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-2224">-or-</span></span> 
 <span data-ttu-id="9a871-2225"><paramref name="modifiers" /> 是多維的。</span><span class="sxs-lookup"><span data-stu-id="9a871-2225"><paramref name="modifiers" /> is multidimensional.</span></span>  
  
<span data-ttu-id="9a871-2226">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-2226">-or-</span></span> 
 <span data-ttu-id="9a871-2227"><paramref name="types" /> 和 <paramref name="modifiers" /> 的長度不同。</span><span class="sxs-lookup"><span data-stu-id="9a871-2227"><paramref name="types" /> and <paramref name="modifiers" /> do not have the same length.</span></span></exception>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="9a871-2228"><paramref name="types" /> 的項目是 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-2228">An element of <paramref name="types" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <Member MemberName="GetPropertyImpl">
      <MemberSignature Language="C#" Value="protected abstract System.Reflection.PropertyInfo GetPropertyImpl (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type returnType, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Reflection.PropertyInfo GetPropertyImpl(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type returnType, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::Reflection::PropertyInfo ^ GetPropertyImpl(System::String ^ name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, Type ^ returnType, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetPropertyImpl : string * System.Reflection.BindingFlags * System.Reflection.Binder * Type * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.PropertyInfo" Usage="type.GetPropertyImpl (name, bindingAttr, binder, returnType, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="9a871-2229">字串，包含要取得的屬性名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-2229">The string containing the name of the property to get.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="9a871-2230">位元遮罩，由一或多個 <see cref="T:System.Reflection.BindingFlags" /> 組成，而這些旗標會指定執行搜尋的方式。</span><span class="sxs-lookup"><span data-stu-id="9a871-2230">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="9a871-2231">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-2231">-or-</span></span> 
<span data-ttu-id="9a871-2232">零，傳回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-2232">Zero, to return <see langword="null" />.</span></span></param>
        <param name="binder"><span data-ttu-id="9a871-2233">定義一組屬性並啟用繫結的物件，可包含多載成員的選擇、引數類型的強制，以及透過反映的成員引動過程。</span><span class="sxs-lookup"><span data-stu-id="9a871-2233">An object that defines a set of properties and enables binding, which can involve selection of an overloaded member, coercion of argument types, and invocation of a member through reflection.</span></span>  
  
<span data-ttu-id="9a871-2234">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-2234">-or-</span></span> 
<span data-ttu-id="9a871-2235">Null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)，可使用 <see cref="P:System.Type.DefaultBinder" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-2235">A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span></span></param>
        <param name="returnType"><span data-ttu-id="9a871-2236">屬性的傳回型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-2236">The return type of the property.</span></span></param>
        <param name="types"><span data-ttu-id="9a871-2237"><see cref="T:System.Type" /> 物件的陣列，代表所要取得之索引屬性的參數數目、順序和類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-2237">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.</span></span>  
  
<span data-ttu-id="9a871-2238">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-2238">-or-</span></span> 
<span data-ttu-id="9a871-2239">用以取得未編製索引的屬性之 <see cref="T:System.Type" /> 類型的空陣列 (也就是，Type[] types = new Type[0])。</span><span class="sxs-lookup"><span data-stu-id="9a871-2239">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</span></span></param>
        <param name="modifiers"><span data-ttu-id="9a871-2240"><see cref="T:System.Reflection.ParameterModifier" /> 物件的陣列，代表在 <paramref name="types" /> 陣列中與對應項目關聯的屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-2240">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array.</span></span> <span data-ttu-id="9a871-2241">預設的繫結器不會處理這個參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-2241">The default binder does not process this parameter.</span></span></param>
        <summary><span data-ttu-id="9a871-2242">在衍生類別中覆寫時，使用指定的繫結條件約束搜尋指定的屬性，而該屬性的參數符合指定的引數類型和修飾詞的建構函式。</span><span class="sxs-lookup"><span data-stu-id="9a871-2242">When overridden in a derived class, searches for the specified property whose parameters match the specified argument types and modifiers, using the specified binding constraints.</span></span></summary>
        <returns><span data-ttu-id="9a871-2243">代表符合指定之需求屬性的物件 (如有找到)；否則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-2243">An object representing the property that matches the specified requirements, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-2244">雖然預設繫結器不會處理<xref:System.Reflection.ParameterModifier>(`modifiers`參數)，您可以使用抽象<xref:System.Reflection.Binder?displayProperty=nameWithType>類別，以寫入未處理的自訂繫結器`modifiers`。</span><span class="sxs-lookup"><span data-stu-id="9a871-2244">Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers`.</span></span> <span data-ttu-id="9a871-2245">`ParameterModifier` 透過 COM interop 呼叫時才會使用和處理傳址方式傳遞的參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-2245">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="9a871-2246">下列<xref:System.Reflection.BindingFlags>篩選器旗標可以用來定義要在搜尋中包含的屬性：</span><span class="sxs-lookup"><span data-stu-id="9a871-2246">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which properties to include in the search:</span></span>  
  
-   <span data-ttu-id="9a871-2247">您必須指定`BindingFlags.Instance`或`BindingFlags.Static`以取得傳回值。</span><span class="sxs-lookup"><span data-stu-id="9a871-2247">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="9a871-2248">指定`BindingFlags.Public`来包含在搜尋中的公用屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-2248">Specify `BindingFlags.Public` to include public properties in the search.</span></span>  
  
-   <span data-ttu-id="9a871-2249">指定`BindingFlags.NonPublic`要在搜尋中包含非公用屬性 （也就是私用、 內部和受保護的屬性）。</span><span class="sxs-lookup"><span data-stu-id="9a871-2249">Specify `BindingFlags.NonPublic` to include non-public properties (that is, private, internal, and protected properties) in the search.</span></span>  
  
-   <span data-ttu-id="9a871-2250">指定`BindingFlags.FlattenHierarchy`包含`public`和`protected`階層; 的靜態成員`private`中繼承類別的靜態成員不包含。</span><span class="sxs-lookup"><span data-stu-id="9a871-2250">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="9a871-2251">下列<xref:System.Reflection.BindingFlags>輔助鍵旗標可以用來變更搜尋的運作方式：</span><span class="sxs-lookup"><span data-stu-id="9a871-2251">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="9a871-2252">`BindingFlags.IgnoreCase` 忽略大小寫的`name`。</span><span class="sxs-lookup"><span data-stu-id="9a871-2252">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="9a871-2253">`BindingFlags.DeclaredOnly` 搜尋僅屬性宣告上<xref:System.Type>，不只是繼承的屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-2253">`BindingFlags.DeclaredOnly` to search only the properties declared on the <xref:System.Type>, not properties that were simply inherited.</span></span>  
  
 <span data-ttu-id="9a871-2254">如需詳細資訊，請參閱 <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="9a871-2254">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException"><span data-ttu-id="9a871-2255">找到一個以上的屬性，其具有指定名稱，且符合指定繫結條件約束。</span><span class="sxs-lookup"><span data-stu-id="9a871-2255">More than one property is found with the specified name and matching the specified binding constraints.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9a871-2256"><paramref name="name" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-2256"><paramref name="name" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="9a871-2257">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-2257">-or-</span></span> 
 <span data-ttu-id="9a871-2258"><paramref name="types" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-2258"><paramref name="types" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="9a871-2259">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-2259">-or-</span></span> 
<span data-ttu-id="9a871-2260"><paramref name="types" /> 的其中一個項目為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-2260">One of the elements in <paramref name="types" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9a871-2261"><paramref name="types" /> 是多維的。</span><span class="sxs-lookup"><span data-stu-id="9a871-2261"><paramref name="types" /> is multidimensional.</span></span>  
  
<span data-ttu-id="9a871-2262">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-2262">-or-</span></span> 
 <span data-ttu-id="9a871-2263"><paramref name="modifiers" /> 是多維的。</span><span class="sxs-lookup"><span data-stu-id="9a871-2263"><paramref name="modifiers" /> is multidimensional.</span></span>  
  
<span data-ttu-id="9a871-2264">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-2264">-or-</span></span> 
 <span data-ttu-id="9a871-2265"><paramref name="types" /> 和 <paramref name="modifiers" /> 的長度不同。</span><span class="sxs-lookup"><span data-stu-id="9a871-2265"><paramref name="types" /> and <paramref name="modifiers" /> do not have the same length.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="9a871-2266">目前的類型為 <see cref="T:System.Reflection.Emit.TypeBuilder" />、<see cref="T:System.Reflection.Emit.EnumBuilder" /> 或 <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-2266">The current type is a <see cref="T:System.Reflection.Emit.TypeBuilder" />, <see cref="T:System.Reflection.Emit.EnumBuilder" />, or <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />.</span></span></exception>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetType">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9a871-2267">取得代表指定類型的 <see cref="T:System.Type" /> 物件。</span><span class="sxs-lookup"><span data-stu-id="9a871-2267">Gets a <see cref="T:System.Type" /> object that represents the specified type.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public Type GetType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetType" />
      <MemberSignature Language="VB.NET" Value="Public Function GetType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetType();" />
      <MemberSignature Language="F#" Value="override this.GetType : unit -&gt; Type" Usage="type.GetType " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9a871-2268">取得目前的 <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-2268">Gets the current <see cref="T:System.Type" />.</span></span></summary>
        <returns><span data-ttu-id="9a871-2269">目前的 <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-2269">The current <see cref="T:System.Type" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="9a871-2270">叫用類別初始設定式並擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9a871-2270">A class initializer is invoked and throws an exception.</span></span></exception>
        <altmember cref="T:System.TypeLoadException" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/specifying-fully-qualified-type-names.md"><span data-ttu-id="9a871-2271">指定完整的類型名稱</span><span class="sxs-lookup"><span data-stu-id="9a871-2271">Specifying Fully Qualified Type Names</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public static Type GetType (string typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetType(string typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetType(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetType (typeName As String) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetType(System::String ^ typeName);" />
      <MemberSignature Language="F#" Value="static member GetType : string -&gt; Type" Usage="System.Type.GetType typeName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="typeName"><span data-ttu-id="9a871-2272">要取得之類型的組件限定名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-2272">The assembly-qualified name of the type to get.</span></span> <span data-ttu-id="9a871-2273">請參閱 <see cref="P:System.Type.AssemblyQualifiedName" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-2273">See <see cref="P:System.Type.AssemblyQualifiedName" />.</span></span> <span data-ttu-id="9a871-2274">如果此類型位在目前執行的組件或 Mscorlib.dll 中，則提供其命名空間所限定的類型名稱便已足夠。</span><span class="sxs-lookup"><span data-stu-id="9a871-2274">If the type is in the currently executing assembly or in Mscorlib.dll, it is sufficient to supply the type name qualified by its namespace.</span></span></param>
        <summary><span data-ttu-id="9a871-2275">取得具有指定名稱的 <see cref="T:System.Type" />，執行區分大小寫的搜尋。</span><span class="sxs-lookup"><span data-stu-id="9a871-2275">Gets the <see cref="T:System.Type" /> with the specified name, performing a case-sensitive search.</span></span></summary>
        <returns><span data-ttu-id="9a871-2276">具有指定名稱的類型 (如有找到)，否則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-2276">The type with the specified name, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-2277">您可以使用<xref:System.Type.GetType%2A>方法，以取得<xref:System.Type>中另一個組件，類型的物件，如果您知道可從其組件限定名稱<xref:System.Type.AssemblyQualifiedName>。</span><span class="sxs-lookup"><span data-stu-id="9a871-2277">You can use the <xref:System.Type.GetType%2A> method to obtain a <xref:System.Type> object for a type in another assembly, if you know its assembly-qualified name which can be obtained from <xref:System.Type.AssemblyQualifiedName>.</span></span> <span data-ttu-id="9a871-2278"><xref:System.Type.GetType%2A> 會導致在指定的組件載入`typeName`。</span><span class="sxs-lookup"><span data-stu-id="9a871-2278"><xref:System.Type.GetType%2A> causes loading of the assembly specified in `typeName`.</span></span> <span data-ttu-id="9a871-2279">您也可以載入組件<xref:System.Reflection.Assembly.Load%2A>方法，然後使用<xref:System.Type.GetType%2A>或是<xref:System.Reflection.Assembly.GetTypes%2A>方法<xref:System.Reflection.Assembly>類別，以取得<xref:System.Type>物件。</span><span class="sxs-lookup"><span data-stu-id="9a871-2279">You can also load an assembly using the <xref:System.Reflection.Assembly.Load%2A> method, and then use the <xref:System.Type.GetType%2A> or <xref:System.Reflection.Assembly.GetTypes%2A> methods of the <xref:System.Reflection.Assembly> class to get <xref:System.Type> objects.</span></span> <span data-ttu-id="9a871-2280">如果類型是在編譯時期已知到您的程式組件中，它是在 C# 中，使用更有效率<xref:System.Type.GetType%2A>在 Visual Basic 或 c + + 中。</span><span class="sxs-lookup"><span data-stu-id="9a871-2280">If a type is in an assembly known to your program at compile time, it is more efficient to use  in C#, <xref:System.Type.GetType%2A> in Visual Basic, or  in C++.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9a871-2281">如果`typeName`找不到，呼叫<xref:System.Type.GetType%28System.String%29>方法會傳回`null`。</span><span class="sxs-lookup"><span data-stu-id="9a871-2281">If `typeName` cannot be found, the call to the <xref:System.Type.GetType%28System.String%29> method returns `null`.</span></span> <span data-ttu-id="9a871-2282">它不會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9a871-2282">It does not throw an exception.</span></span> <span data-ttu-id="9a871-2283">若要控制是否發生例外狀況，請呼叫的多載<xref:System.Type.GetType%2A>方法具有`throwOnError`參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-2283">To control whether an exception is thrown, call an overload of the <xref:System.Type.GetType%2A> method that has a `throwOnError` parameter.</span></span>  
  
 <span data-ttu-id="9a871-2284"><xref:System.Type.GetType%2A> 僅適用於從磁碟載入的組件。</span><span class="sxs-lookup"><span data-stu-id="9a871-2284"><xref:System.Type.GetType%2A> only works on assemblies loaded from disk.</span></span> <span data-ttu-id="9a871-2285">如果您呼叫<xref:System.Type.GetType%2A>查閱使用定義動態組件中定義的型別<xref:System.Reflection.Emit>服務，您可能會收到不一致的行為。</span><span class="sxs-lookup"><span data-stu-id="9a871-2285">If you call <xref:System.Type.GetType%2A> to look up a type defined in a dynamic assembly defined using the <xref:System.Reflection.Emit> services, you might get inconsistent behavior.</span></span> <span data-ttu-id="9a871-2286">行為取決於動態組件是持續性的也就是，使用建立`RunAndSave`或是`Save`存取模式的<xref:System.Reflection.Emit.AssemblyBuilderAccess?displayProperty=nameWithType>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-2286">The behavior depends on whether the dynamic assembly is persistent, that is, created using the `RunAndSave` or `Save` access modes of the <xref:System.Reflection.Emit.AssemblyBuilderAccess?displayProperty=nameWithType> enumeration.</span></span> <span data-ttu-id="9a871-2287">如果動態組件是持續性，並已寫入磁碟之前`GetType`是呼叫，載入器在磁碟上找到儲存的組件、 載入該組件中，而且該組件中擷取的型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-2287">If the dynamic assembly is persistent and has been written to disk before `GetType` is called, the loader finds the saved assembly on disk, loads that assembly, and retrieves the type from that assembly.</span></span> <span data-ttu-id="9a871-2288">如果組件尚未儲存至磁碟`GetType`呼叫時，此方法會傳回`null`。</span><span class="sxs-lookup"><span data-stu-id="9a871-2288">If the assembly has not been saved to disk when `GetType` is called, the method returns `null`.</span></span> <span data-ttu-id="9a871-2289">`GetType` 不了解暫時性動態組件;因此，呼叫`GetType`若要擷取型別中的暫時性動態組件傳回`null`。</span><span class="sxs-lookup"><span data-stu-id="9a871-2289">`GetType` does not understand transient dynamic assemblies; therefore, calling `GetType` to retrieve a type in a transient dynamic assembly returns `null`.</span></span>  
  
 <span data-ttu-id="9a871-2290">若要使用`GetType`上的動態模組，訂閱<xref:System.AppDomain.AssemblyResolve?displayProperty=nameWithType>事件，並呼叫`GetType`在儲存之前。</span><span class="sxs-lookup"><span data-stu-id="9a871-2290">To use `GetType` on a dynamic module, subscribe to the <xref:System.AppDomain.AssemblyResolve?displayProperty=nameWithType> event and call `GetType` before saving.</span></span> <span data-ttu-id="9a871-2291">否則，您會得到兩個組件的複本在記憶體中。</span><span class="sxs-lookup"><span data-stu-id="9a871-2291">Otherwise, you will get two copies of the assembly in memory.</span></span>  
  
 <span data-ttu-id="9a871-2292">下表顯示基底類別成員會傳回由`Get`反映型別上時的方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-2292">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="9a871-2293">成員類型</span><span class="sxs-lookup"><span data-stu-id="9a871-2293">Member Type</span></span>|<span data-ttu-id="9a871-2294">Static</span><span class="sxs-lookup"><span data-stu-id="9a871-2294">Static</span></span>|<span data-ttu-id="9a871-2295">非靜態</span><span class="sxs-lookup"><span data-stu-id="9a871-2295">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="9a871-2296">建構函式</span><span class="sxs-lookup"><span data-stu-id="9a871-2296">Constructor</span></span>|<span data-ttu-id="9a871-2297">否</span><span class="sxs-lookup"><span data-stu-id="9a871-2297">No</span></span>|<span data-ttu-id="9a871-2298">否</span><span class="sxs-lookup"><span data-stu-id="9a871-2298">No</span></span>|  
|<span data-ttu-id="9a871-2299">欄位</span><span class="sxs-lookup"><span data-stu-id="9a871-2299">Field</span></span>|<span data-ttu-id="9a871-2300">否</span><span class="sxs-lookup"><span data-stu-id="9a871-2300">No</span></span>|<span data-ttu-id="9a871-2301">可以。</span><span class="sxs-lookup"><span data-stu-id="9a871-2301">Yes.</span></span> <span data-ttu-id="9a871-2302">欄位永遠是依名稱和簽章隱藏。</span><span class="sxs-lookup"><span data-stu-id="9a871-2302">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="9a871-2303">Event - 事件</span><span class="sxs-lookup"><span data-stu-id="9a871-2303">Event</span></span>|<span data-ttu-id="9a871-2304">不適用</span><span class="sxs-lookup"><span data-stu-id="9a871-2304">Not applicable</span></span>|<span data-ttu-id="9a871-2305">一般類型系統規則是繼承實作屬性的方法相同。</span><span class="sxs-lookup"><span data-stu-id="9a871-2305">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="9a871-2306">反映會視為由名稱和簽章隱藏屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-2306">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="9a871-2307">請參閱附註 2。</span><span class="sxs-lookup"><span data-stu-id="9a871-2307">See note 2 below.</span></span>|  
|<span data-ttu-id="9a871-2308">方法</span><span class="sxs-lookup"><span data-stu-id="9a871-2308">Method</span></span>|<span data-ttu-id="9a871-2309">否</span><span class="sxs-lookup"><span data-stu-id="9a871-2309">No</span></span>|<span data-ttu-id="9a871-2310">可以。</span><span class="sxs-lookup"><span data-stu-id="9a871-2310">Yes.</span></span> <span data-ttu-id="9a871-2311">（虛擬和非虛擬） 的方法可以隱藏依名稱或依名稱和簽章隱藏。</span><span class="sxs-lookup"><span data-stu-id="9a871-2311">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="9a871-2312">巢狀的類型</span><span class="sxs-lookup"><span data-stu-id="9a871-2312">Nested Type</span></span>|<span data-ttu-id="9a871-2313">否</span><span class="sxs-lookup"><span data-stu-id="9a871-2313">No</span></span>|<span data-ttu-id="9a871-2314">否</span><span class="sxs-lookup"><span data-stu-id="9a871-2314">No</span></span>|  
|<span data-ttu-id="9a871-2315">屬性</span><span class="sxs-lookup"><span data-stu-id="9a871-2315">Property</span></span>|<span data-ttu-id="9a871-2316">不適用</span><span class="sxs-lookup"><span data-stu-id="9a871-2316">Not applicable</span></span>|<span data-ttu-id="9a871-2317">一般類型系統規則是繼承實作屬性的方法相同。</span><span class="sxs-lookup"><span data-stu-id="9a871-2317">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="9a871-2318">反映會視為由名稱和簽章隱藏屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-2318">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="9a871-2319">請參閱附註 2。</span><span class="sxs-lookup"><span data-stu-id="9a871-2319">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="9a871-2320">依名稱和簽章隱藏會考慮所有組件的簽章，包括自訂修飾詞，傳回類型、 參數類型、 sentinels 和 unmanaged 呼叫慣例。</span><span class="sxs-lookup"><span data-stu-id="9a871-2320">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="9a871-2321">這是二進位比較。</span><span class="sxs-lookup"><span data-stu-id="9a871-2321">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="9a871-2322">反映的屬性和事件會依名稱和簽章隱藏。</span><span class="sxs-lookup"><span data-stu-id="9a871-2322">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="9a871-2323">如果您同時有 get 和 set 存取子的屬性在基底類別中，但衍生的類別有只有 get 存取子，在衍生的類別的屬性會隱藏基底類別屬性中，並不能存取的基底類別的 setter。</span><span class="sxs-lookup"><span data-stu-id="9a871-2323">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="9a871-2324">自訂屬性不屬於一般類型系統。</span><span class="sxs-lookup"><span data-stu-id="9a871-2324">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="9a871-2325">陣列或 COM 型別不會搜尋除非它們已經被載入資料表可用的類別。</span><span class="sxs-lookup"><span data-stu-id="9a871-2325">Arrays or COM types are not searched for unless they have already been loaded into the table of available classes.</span></span>  
  
 <span data-ttu-id="9a871-2326">`typeName` 可以在型別名稱來限定其命名空間或組件限定名稱，其中包含組件名稱規格。</span><span class="sxs-lookup"><span data-stu-id="9a871-2326">`typeName` can be the type name qualified by its namespace or an assembly-qualified name that includes an assembly name specification.</span></span> <span data-ttu-id="9a871-2327">請參閱 <xref:System.Type.AssemblyQualifiedName%2A>。</span><span class="sxs-lookup"><span data-stu-id="9a871-2327">See <xref:System.Type.AssemblyQualifiedName%2A>.</span></span>  
  
 <span data-ttu-id="9a871-2328">如果`typeName`包含命名空間，但不是組件名稱，這個方法會依此順序搜尋只呼叫物件的組件和 Mscorlib.dll。</span><span class="sxs-lookup"><span data-stu-id="9a871-2328">If `typeName` includes the namespace but not the assembly name, this method searches only the calling object's assembly and Mscorlib.dll, in that order.</span></span> <span data-ttu-id="9a871-2329">如果部分或完整的組件名稱完整限定類型名稱，這個方法會搜尋指定的組件中。</span><span class="sxs-lookup"><span data-stu-id="9a871-2329">If typeName is fully qualified with the partial or complete assembly name, this method searches in the specified assembly.</span></span> <span data-ttu-id="9a871-2330">如果組件具有強式名稱，完整的組件的名稱是必要。</span><span class="sxs-lookup"><span data-stu-id="9a871-2330">If the assembly has a strong name, a complete assembly name is required.</span></span>  
  
 <span data-ttu-id="9a871-2331"><xref:System.Type.AssemblyQualifiedName%2A>屬性會傳回完整的型別名稱，包括巢狀型別、 組件名稱和泛型型別引數。</span><span class="sxs-lookup"><span data-stu-id="9a871-2331">The <xref:System.Type.AssemblyQualifiedName%2A> property returns a fully qualified type name including nested types, the assembly name, and generic type arguments.</span></span> <span data-ttu-id="9a871-2332">支援通用語言執行平台的所有編譯器將都發出的簡單名稱的巢狀類別，並反映建構查詢時，根據下列慣例 mangled 的名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-2332">All compilers that support the common language runtime will emit the simple name of a nested class, and reflection constructs a mangled name when queried, in accordance with the following conventions.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9a871-2333">在.NET Framework 2.0 版中，處理器架構會新增至組件識別，而且可以指定為組件名稱字串的一部分。</span><span class="sxs-lookup"><span data-stu-id="9a871-2333">In the .NET Framework version 2.0, processor architecture is added to assembly identity, and can be specified as part of assembly name strings.</span></span> <span data-ttu-id="9a871-2334">例如，"ProcessorArchitecture = msil"。</span><span class="sxs-lookup"><span data-stu-id="9a871-2334">For example, "ProcessorArchitecture=msil".</span></span> <span data-ttu-id="9a871-2335">不過，它不包含在所傳回的字串<xref:System.Type.AssemblyQualifiedName%2A>屬性，因為相容性。</span><span class="sxs-lookup"><span data-stu-id="9a871-2335">However, it is not included in the string returned by the <xref:System.Type.AssemblyQualifiedName%2A> property, for compatibility reasons.</span></span> <span data-ttu-id="9a871-2336">您也可以藉由建立載入類型<xref:System.Reflection.AssemblyName>物件，並將其傳遞至適當的多載<xref:System.Reflection.Assembly.Load%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-2336">You can also load types by creating an <xref:System.Reflection.AssemblyName> object and passing it to an appropriate overload of the <xref:System.Reflection.Assembly.Load%2A> method.</span></span> <span data-ttu-id="9a871-2337">您可以接著使用<xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType>方法來載入組件類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-2337">You can then use the <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> method to load types from the assembly.</span></span> <span data-ttu-id="9a871-2338">請參閱 <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="9a871-2338">See also <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=nameWithType>.</span></span>  
  
|<span data-ttu-id="9a871-2339">分隔符號</span><span class="sxs-lookup"><span data-stu-id="9a871-2339">Delimiter</span></span>|<span data-ttu-id="9a871-2340">意義</span><span class="sxs-lookup"><span data-stu-id="9a871-2340">Meaning</span></span>|  
|---------------|-------------|  
|<span data-ttu-id="9a871-2341">反斜線 (\\)</span><span class="sxs-lookup"><span data-stu-id="9a871-2341">Backslash (\\)</span></span>|<span data-ttu-id="9a871-2342">逸出字元。</span><span class="sxs-lookup"><span data-stu-id="9a871-2342">Escape character.</span></span>|  
|<span data-ttu-id="9a871-2343">倒單引號 （'） |前面有一或多個位數表示的型別參數，位於結尾的泛型型別名稱的數目。</span><span class="sxs-lookup"><span data-stu-id="9a871-2343">Backtick (\`)|Precedes one or more digits representing the number of type parameters, located at the end of the name of a generic type.</span></span>|  
|<span data-ttu-id="9a871-2344">括號 ([])</span><span class="sxs-lookup"><span data-stu-id="9a871-2344">Brackets ([])</span></span>|<span data-ttu-id="9a871-2345">將建構的泛型類型; 泛型型別引數清單在類型引數清單中，將組件限定型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-2345">Enclose a generic type argument list, for a constructed generic type; within a type argument list, enclose an assembly-qualified type.</span></span>|  
|<span data-ttu-id="9a871-2346">逗號 （，）</span><span class="sxs-lookup"><span data-stu-id="9a871-2346">Comma (,)</span></span>|<span data-ttu-id="9a871-2347">後面接著組件名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-2347">Precedes the Assembly name.</span></span>|  
|<span data-ttu-id="9a871-2348">句號 （.）</span><span class="sxs-lookup"><span data-stu-id="9a871-2348">Period (.)</span></span>|<span data-ttu-id="9a871-2349">表示命名空間識別項。</span><span class="sxs-lookup"><span data-stu-id="9a871-2349">Denotes namespace identifiers.</span></span>|  
|<span data-ttu-id="9a871-2350">加號 （+）</span><span class="sxs-lookup"><span data-stu-id="9a871-2350">Plus sign (+)</span></span>|<span data-ttu-id="9a871-2351">在之前的巢狀的類別。</span><span class="sxs-lookup"><span data-stu-id="9a871-2351">Precedes a nested class.</span></span>|  
  
 <span data-ttu-id="9a871-2352">例如，類別的完整格式的名稱可能如下所示：</span><span class="sxs-lookup"><span data-stu-id="9a871-2352">For example, the fully qualified name for a class might look like this:</span></span>  
  
```  
TopNamespace.SubNameSpace.ContainingClass+NestedClass,MyAssembly  
```  
  
 <span data-ttu-id="9a871-2353">如果命名空間已 TopNamespace.Sub+Namespace，則字串會有之前加號 （+），以逸出字元 (\\) 以防止它被解譯為巢狀分隔符號。</span><span class="sxs-lookup"><span data-stu-id="9a871-2353">If the namespace were TopNamespace.Sub+Namespace, then the string would have to precede the plus sign (+) with an escape character (\\) to prevent it from being interpreted as a nesting separator.</span></span> <span data-ttu-id="9a871-2354">反映會發出此字串，如下所示：</span><span class="sxs-lookup"><span data-stu-id="9a871-2354">Reflection emits this string as follows:</span></span>  
  
```  
TopNamespace.Sub\+Namespace.ContainingClass+NestedClass,MyAssembly  
```  
  
 <span data-ttu-id="9a871-2355">"+ +"會變成"\\+\\+"，和 「\\」 變成 「\\\\"。</span><span class="sxs-lookup"><span data-stu-id="9a871-2355">A "++" becomes "\\+\\+", and a "\\" becomes "\\\\".</span></span>  
  
 <span data-ttu-id="9a871-2356">這個限定的名稱可以保存和更新版本用來載入<xref:System.Type>。</span><span class="sxs-lookup"><span data-stu-id="9a871-2356">This qualified name can be persisted and later used to load the <xref:System.Type>.</span></span> <span data-ttu-id="9a871-2357">搜尋並載入<xref:System.Type>，使用<xref:System.Type.GetType%2A>使用型別名稱只有或使用組件限定的類型名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-2357">To search for and load a <xref:System.Type>, use <xref:System.Type.GetType%2A> either with the type name only or with the assembly qualified type name.</span></span> <span data-ttu-id="9a871-2358"><xref:System.Type.GetType%2A> 與型別名稱只會尋找<xref:System.Type>呼叫者的組件中，然後在系統組件中。</span><span class="sxs-lookup"><span data-stu-id="9a871-2358"><xref:System.Type.GetType%2A> with the type name only will look for the <xref:System.Type> in the caller's assembly and then in the System assembly.</span></span> <span data-ttu-id="9a871-2359"><xref:System.Type.GetType%2A> 與組件限定的類型名稱會尋找<xref:System.Type>任何組件中。</span><span class="sxs-lookup"><span data-stu-id="9a871-2359"><xref:System.Type.GetType%2A> with the assembly qualified type name will look for the <xref:System.Type> in any assembly.</span></span>  
  
 <span data-ttu-id="9a871-2360">類型名稱可能包含行尾字元來表示的類型，例如類型是否為參考型別、 指標類型或陣列類型的其他資訊。</span><span class="sxs-lookup"><span data-stu-id="9a871-2360">Type names may include trailing characters that denote additional information about the type, such as whether the type is a reference type, a pointer type or an array type.</span></span> <span data-ttu-id="9a871-2361">若要擷取的型別名稱，而不需要這些後置字元，請使用`t.GetElementType().ToString()`，其中`t`是型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-2361">To retrieve the type name without these trailing characters, use `t.GetElementType().ToString()`, where `t` is the type.</span></span>  
  
 <span data-ttu-id="9a871-2362">空格是相關的組件名稱以外的所有型別名稱元件。</span><span class="sxs-lookup"><span data-stu-id="9a871-2362">Spaces are relevant in all type name components except the assembly name.</span></span> <span data-ttu-id="9a871-2363">在組件名稱 '，' 分隔符號之前的空格是相關的但是 '，' 分隔符號之後的空格會被忽略。</span><span class="sxs-lookup"><span data-stu-id="9a871-2363">In the assembly name, spaces before the ',' separator are relevant, but spaces after the ',' separator are ignored.</span></span>  
  
 <span data-ttu-id="9a871-2364">泛型型別名稱的結尾倒引號 (\`) 後面接著數字，代表泛型類型引數數目。</span><span class="sxs-lookup"><span data-stu-id="9a871-2364">The name of a generic type ends with a backtick (\`) followed by digits representing the number of generic type arguments.</span></span> <span data-ttu-id="9a871-2365">此名稱的損害的目的是讓編譯器支援泛型型別具有相同名稱但具有不同數目的型別參數，在相同的範圍內發生。</span><span class="sxs-lookup"><span data-stu-id="9a871-2365">The purpose of this name mangling is to allow compilers to support generic types with the same name but with different numbers of type parameters, occurring in the same scope.</span></span> <span data-ttu-id="9a871-2366">例如，反映會傳回損害的名稱`Tuple`1` and `Tuple`2`的泛型方法`Tuple(Of T)`並`Tuple(Of T0, T1)`在 Visual Basic 中，或`Tuple<T>`和 Tuple`\<T0, T1>` Visual C# 中。</span><span class="sxs-lookup"><span data-stu-id="9a871-2366">For example, reflection returns the mangled names `Tuple`1` and `Tuple`2` from the generic methods `Tuple(Of T)` and `Tuple(Of T0, T1)` in Visual Basic, or `Tuple<T>` and Tuple`\<T0, T1>` in Visual C#.</span></span>  
  
 <span data-ttu-id="9a871-2367">為泛型類型，類型引數清單以括號、，並以逗號分隔的類型引數。</span><span class="sxs-lookup"><span data-stu-id="9a871-2367">For generic types, the type argument list is enclosed in brackets, and the type arguments are separated by commas.</span></span> <span data-ttu-id="9a871-2368">例如，泛型<xref:System.Collections.Generic.Dictionary%602>有兩個類型參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-2368">For example, a generic <xref:System.Collections.Generic.Dictionary%602> has two type parameters.</span></span> <span data-ttu-id="9a871-2369">A<xref:System.Collections.Generic.Dictionary%602>的`MyType`類型的索引鍵聯<xref:System.String>可能如下表示：</span><span class="sxs-lookup"><span data-stu-id="9a871-2369">A <xref:System.Collections.Generic.Dictionary%602> of `MyType` with keys of type <xref:System.String> might be represented as follows:</span></span>  
  
```  
System.Collections.Generic.Dictionary`2[System.String,MyType]  
```  
  
 <span data-ttu-id="9a871-2370">若要指定型別引數清單中的組件限定型別，請將括號括住的組件限定型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-2370">To specify an assembly-qualified type within a type argument list, enclose the assembly-qualified type within brackets.</span></span> <span data-ttu-id="9a871-2371">否則，逗號分隔的組件限定名稱的組件會被視為分隔其他的型別引數。</span><span class="sxs-lookup"><span data-stu-id="9a871-2371">Otherwise, the commas that separate the parts of the assembly-qualified name are interpreted as delimiting additional type arguments.</span></span> <span data-ttu-id="9a871-2372">例如，<xref:System.Collections.Generic.Dictionary%602>的`MyType`fromMyAssembly.dll，類型的索引鍵聯<xref:System.String>，可能會以下面方式指定：</span><span class="sxs-lookup"><span data-stu-id="9a871-2372">For example, a <xref:System.Collections.Generic.Dictionary%602> of `MyType` fromMyAssembly.dll, with keys of type <xref:System.String>, might be specified as follows:</span></span>  
  
```  
Type.GetType("System.Collections.Generic.Dictionary`2[System.String,[MyType,MyAssembly]]")  
```  
  
> [!NOTE]
>  <span data-ttu-id="9a871-2373">組件限定型別可以括在括弧，它必須出現在類型參數清單中。</span><span class="sxs-lookup"><span data-stu-id="9a871-2373">An assembly-qualified type can be enclosed in brackets only when it appears within a type parameter list.</span></span> <span data-ttu-id="9a871-2374">搜尋組件限定的不合格的型別的型別參數清單中的規則並符合規定及不合格的非泛型類型的規則相同。</span><span class="sxs-lookup"><span data-stu-id="9a871-2374">The rules for searching assemblies for qualified and unqualified types in type parameter lists are the same as the rules for qualified and unqualified nongeneric types.</span></span>  
  
 <span data-ttu-id="9a871-2375">可為 null 的型別是泛型類型的特殊案例。</span><span class="sxs-lookup"><span data-stu-id="9a871-2375">Nullable types are a special case of generic types.</span></span> <span data-ttu-id="9a871-2376">例如，可為 null <xref:System.Int32> "System.Nullable'1[System.Int32]"的字串表示。</span><span class="sxs-lookup"><span data-stu-id="9a871-2376">For example, a nullable <xref:System.Int32> is represented by the string "System.Nullable\`1[System.Int32]".</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9a871-2377">在 C#、 c + + 和 Visual Basic 中，您也可以取得可為 null 的型別使用型別運算子。</span><span class="sxs-lookup"><span data-stu-id="9a871-2377">In C#, C++, and Visual Basic you can also get nullable types using type operators.</span></span> <span data-ttu-id="9a871-2378">比方說，可為 null<xref:System.Boolean>型別由`typeof(Nullable<bool>)`在 C# 中，依`Nullable<Boolean>::typeid`c + + 和`GetType(Nullable(Of Boolean))`Visual Basic 中。</span><span class="sxs-lookup"><span data-stu-id="9a871-2378">For example, the nullable <xref:System.Boolean> type is returned by `typeof(Nullable<bool>)` in C#, by `Nullable<Boolean>::typeid` in C++, and by `GetType(Nullable(Of Boolean))` in Visual Basic.</span></span>  
  
 <span data-ttu-id="9a871-2379">下表顯示您所使用的語法`GetType`為各種型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-2379">The following table shows the syntax you use with `GetType` for various types.</span></span>  
  
|<span data-ttu-id="9a871-2380">若要取得</span><span class="sxs-lookup"><span data-stu-id="9a871-2380">To Get</span></span>|<span data-ttu-id="9a871-2381">使用</span><span class="sxs-lookup"><span data-stu-id="9a871-2381">Use</span></span>|  
|------------|---------|  
|<span data-ttu-id="9a871-2382">可為 null <xref:System.Int32></span><span class="sxs-lookup"><span data-stu-id="9a871-2382">A nullable <xref:System.Int32></span></span>|``Type.GetType("System.Nullable`1[System.Int32]")``|  
|<span data-ttu-id="9a871-2383">Unmanaged 的指標 `MyType`</span><span class="sxs-lookup"><span data-stu-id="9a871-2383">An unmanaged pointer to `MyType`</span></span>|`Type.GetType("MyType*")`|  
|<span data-ttu-id="9a871-2384">指標的 unmanaged 的指標 `MyType`</span><span class="sxs-lookup"><span data-stu-id="9a871-2384">An unmanaged pointer to a pointer to `MyType`</span></span>|`Type.GetType("MyType**")`|  
|<span data-ttu-id="9a871-2385">Managed 的指標或參考 `MyType`</span><span class="sxs-lookup"><span data-stu-id="9a871-2385">A managed pointer or reference to `MyType`</span></span>|<span data-ttu-id="9a871-2386">`Type.GetType("MyType&")`.</span><span class="sxs-lookup"><span data-stu-id="9a871-2386">`Type.GetType("MyType&")`.</span></span> <span data-ttu-id="9a871-2387">請注意，參考與指標不同，僅限一個層級。</span><span class="sxs-lookup"><span data-stu-id="9a871-2387">Note that unlike pointers, references are limited to one level.</span></span>|  
|<span data-ttu-id="9a871-2388">父類別和巢狀的類別</span><span class="sxs-lookup"><span data-stu-id="9a871-2388">A parent class and a nested class</span></span>|`Type.GetType("MyParentClass+MyNestedClass")`|  
|<span data-ttu-id="9a871-2389">一維陣列，其下限為 0</span><span class="sxs-lookup"><span data-stu-id="9a871-2389">A one-dimensional array with a lower bound of 0</span></span>|`Type.GetType("MyType[]")`|  
|<span data-ttu-id="9a871-2390">下限不明的一維陣列</span><span class="sxs-lookup"><span data-stu-id="9a871-2390">A one-dimensional array with an unknown lower bound</span></span>|`Type.GetType("MyType[*]")`|  
|<span data-ttu-id="9a871-2391">N 維陣列</span><span class="sxs-lookup"><span data-stu-id="9a871-2391">An n-dimensional array</span></span>|<span data-ttu-id="9a871-2392">逗號 （，） 的 n-1 次數總計的方括號內。</span><span class="sxs-lookup"><span data-stu-id="9a871-2392">A comma (,) inside the brackets a total of n-1 times.</span></span> <span data-ttu-id="9a871-2393">例如，`System.Object[,,]`代表三維`Object`陣列。</span><span class="sxs-lookup"><span data-stu-id="9a871-2393">For example, `System.Object[,,]` represents a three-dimensional `Object` array.</span></span>|  
|<span data-ttu-id="9a871-2394">陣列的一維陣列</span><span class="sxs-lookup"><span data-stu-id="9a871-2394">An array of one-dimensional arrays</span></span>|`Type.GetType("MyType[][]")`|  
|<span data-ttu-id="9a871-2395">矩形的二維陣列下限不明</span><span class="sxs-lookup"><span data-stu-id="9a871-2395">A rectangular two-dimensional array with unknown lower bounds</span></span>|`Type.GetType("MyType[,]")`|  
|<span data-ttu-id="9a871-2396">具有一個型別引數的泛型型別</span><span class="sxs-lookup"><span data-stu-id="9a871-2396">A generic type with one type argument</span></span>|``Type.GetType("MyGenericType`1[MyType]")``|  
|<span data-ttu-id="9a871-2397">兩個類型引數的泛型型別</span><span class="sxs-lookup"><span data-stu-id="9a871-2397">A generic type with two type arguments</span></span>|``Type.GetType("MyGenericType`2[MyType,AnotherType]")``|  
|<span data-ttu-id="9a871-2398">具有兩個組件限定型別引數的泛型型別</span><span class="sxs-lookup"><span data-stu-id="9a871-2398">A generic type with two assembly-qualified type arguments</span></span>|``Type.GetType("MyGenericType`2[[MyType,MyAssembly],[AnotherType,AnotherAssembly]]")``|  
|<span data-ttu-id="9a871-2399">使用組件限定型別引數，組件限定的泛型類型</span><span class="sxs-lookup"><span data-stu-id="9a871-2399">An assembly-qualified generic type with an assembly-qualified type argument</span></span>|<span data-ttu-id="9a871-2400">\`\`Type.GetType("MyGenericType`1[[MyType,MyAssembly]],MyGenericTypeAssembly")`</span><span class="sxs-lookup"><span data-stu-id="9a871-2400">\`\`Type.GetType("MyGenericType`1[[MyType,MyAssembly]],MyGenericTypeAssembly")`</span></span>|  
|<span data-ttu-id="9a871-2401">其類型引數是具有兩個類型引數的泛型型別是泛型型別</span><span class="sxs-lookup"><span data-stu-id="9a871-2401">A generic type whose type argument is a generic type with two type arguments</span></span>|<span data-ttu-id="9a871-2402">\`\`Type.GetType("MyGenericType`1[AnotherGenericType`2[MyType,AnotherType]]")\`</span><span class="sxs-lookup"><span data-stu-id="9a871-2402">\`\`Type.GetType("MyGenericType`1[AnotherGenericType`2[MyType,AnotherType]]")\`</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="9a871-2403">下列範例會擷取的型別`System.Int32`並使用該型別物件來顯示<xref:System.Type.FullName%2A>屬性`System.Int32`。</span><span class="sxs-lookup"><span data-stu-id="9a871-2403">The following example retrieves the type of `System.Int32` and uses that type object to display the <xref:System.Type.FullName%2A> property of `System.Int32`.</span></span>  
  
 [!code-cpp[Type_GetType#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetType/CPP/type_gettype.cpp#1)]
 [!code-csharp[Type_GetType#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetType/CS/type_gettype.cs#1)]
 [!code-vb[Type_GetType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetType/VB/type_gettype.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9a871-2404"><paramref name="typeName" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-2404"><paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="9a871-2405">叫用類別初始設定式並擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9a871-2405">A class initializer is invoked and throws an exception.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9a871-2406"><paramref name="typeName" /> 代表的泛型類型以指標類型、<see langword="ByRef" /> 類型或 <see cref="T:System.Void" /> 做為其中一個類型引數。</span><span class="sxs-lookup"><span data-stu-id="9a871-2406"><paramref name="typeName" /> represents a generic type that has a pointer type, a <see langword="ByRef" /> type, or <see cref="T:System.Void" /> as one of its type arguments.</span></span>  
  
<span data-ttu-id="9a871-2407">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-2407">-or-</span></span> 
 <span data-ttu-id="9a871-2408"><paramref name="typeName" /> 代表的泛型類型具有不正確的類型引數數目。</span><span class="sxs-lookup"><span data-stu-id="9a871-2408"><paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.</span></span>  
  
<span data-ttu-id="9a871-2409">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-2409">-or-</span></span> 
 <span data-ttu-id="9a871-2410"><paramref name="typeName" /> 代表泛型類型，其中一個類型引數不符合對應類型參數的條件約束。</span><span class="sxs-lookup"><span data-stu-id="9a871-2410"><paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="9a871-2411"><paramref name="typeName" /> 代表 <see cref="T:System.TypedReference" /> 的陣列。</span><span class="sxs-lookup"><span data-stu-id="9a871-2411"><paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><block subset="none" type="note">
            <para>  
 <span data-ttu-id="9a871-2412">在<see href="https://go.microsoft.com/fwlink/?LinkID=247912">適用於 Windows 市集應用程式的 .NET</see> 或是<see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">可攜式類別庫</see>中，改為攔截基底類別例外狀況 <see cref="T:System.IO.IOException" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-2412">In the <see href="https://go.microsoft.com/fwlink/?LinkID=247912">.NET for Windows Store apps</see> or the <see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">Portable Class Library</see>, catch the base class exception, <see cref="T:System.IO.IOException" />, instead.</span></span>  
  
</para>
          </block>  
  
 <span data-ttu-id="9a871-2413">找到組件或其相依性的其中一個，但無法載入。</span><span class="sxs-lookup"><span data-stu-id="9a871-2413">The assembly or one of its dependencies was found, but could not be loaded.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="9a871-2414">組件或組件的其中一個相依性無效。</span><span class="sxs-lookup"><span data-stu-id="9a871-2414">The assembly or one of its dependencies is not valid.</span></span>  
  
<span data-ttu-id="9a871-2415">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-2415">-or-</span></span> 
<span data-ttu-id="9a871-2416">目前載入的通用語言執行平台是 2.0 版或更新的版本，但用來編譯組件的卻是更新的版本。</span><span class="sxs-lookup"><span data-stu-id="9a871-2416">Version 2.0 or later of the common language runtime is currently loaded, and the assembly was compiled with a later version.</span></span></exception>
        <altmember cref="T:System.String" />
        <altmember cref="T:System.TypeLoadException" />
        <altmember cref="P:System.Type.AssemblyQualifiedName" />
        <altmember cref="M:System.Reflection.Assembly.GetAssembly(System.Type)" />
        <altmember cref="M:System.Reflection.Assembly.GetType(System.String)" />
        <altmember cref="T:System.Reflection.AssemblyName" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/specifying-fully-qualified-type-names.md"><span data-ttu-id="9a871-2417">指定完整的類型名稱</span><span class="sxs-lookup"><span data-stu-id="9a871-2417">Specifying Fully Qualified Type Names</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public static Type GetType (string typeName, bool throwOnError);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetType(string typeName, bool throwOnError) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetType(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetType (typeName As String, throwOnError As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetType(System::String ^ typeName, bool throwOnError);" />
      <MemberSignature Language="F#" Value="static member GetType : string * bool -&gt; Type" Usage="System.Type.GetType (typeName, throwOnError)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="throwOnError" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="typeName"><span data-ttu-id="9a871-2418">要取得之類型的組件限定名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-2418">The assembly-qualified name of the type to get.</span></span> <span data-ttu-id="9a871-2419">請參閱 <see cref="P:System.Type.AssemblyQualifiedName" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-2419">See <see cref="P:System.Type.AssemblyQualifiedName" />.</span></span> <span data-ttu-id="9a871-2420">如果此類型位在目前執行的組件或 Mscorlib.dll 中，則提供其命名空間所限定的類型名稱便已足夠。</span><span class="sxs-lookup"><span data-stu-id="9a871-2420">If the type is in the currently executing assembly or in Mscorlib.dll, it is sufficient to supply the type name qualified by its namespace.</span></span></param>
        <param name="throwOnError"><span data-ttu-id="9a871-2421"><see langword="true" /> 表示找不到該類型時擲回例外狀況，而 <see langword="false" /> 則表示傳回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-2421"><see langword="true" /> to throw an exception if the type cannot be found; <see langword="false" /> to return <see langword="null" />.</span></span> <span data-ttu-id="9a871-2422">指定 <see langword="false" /> 也會隱藏其他某些例外狀況條件，但並不是全部。</span><span class="sxs-lookup"><span data-stu-id="9a871-2422">Specifying <see langword="false" /> also suppresses some other exception conditions, but not all of them.</span></span> <span data-ttu-id="9a871-2423">請參閱＜例外狀況＞一節。</span><span class="sxs-lookup"><span data-stu-id="9a871-2423">See the Exceptions section.</span></span></param>
        <summary><span data-ttu-id="9a871-2424">取得具有指定名稱的 <see cref="T:System.Type" />，執行區分大小寫的搜尋，並設定找不到該類型時，是否應擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9a871-2424">Gets the <see cref="T:System.Type" /> with the specified name, performing a case-sensitive search and specifying whether to throw an exception if the type is not found.</span></span></summary>
        <returns><span data-ttu-id="9a871-2425">具有指定名稱的類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-2425">The type with the specified name.</span></span> <span data-ttu-id="9a871-2426">如果找不到該類型，<paramref name="throwOnError" /> 參數會指定是要傳回 <see langword="null" /> 或是擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9a871-2426">If the type is not found, the <paramref name="throwOnError" /> parameter specifies whether <see langword="null" /> is returned or an exception is thrown.</span></span> <span data-ttu-id="9a871-2427">在某些情況下，不論 <paramref name="throwOnError" /> 的值為何，都會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9a871-2427">In some cases, an exception is thrown regardless of the value of <paramref name="throwOnError" />.</span></span> <span data-ttu-id="9a871-2428">請參閱＜例外狀況＞一節。</span><span class="sxs-lookup"><span data-stu-id="9a871-2428">See the Exceptions section.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-2429">您可以使用<xref:System.Type.GetType%2A>方法，以取得<xref:System.Type>中另一個組件，類型的物件，如果您知道可從其組件限定名稱<xref:System.Type.AssemblyQualifiedName>。</span><span class="sxs-lookup"><span data-stu-id="9a871-2429">You can use the <xref:System.Type.GetType%2A> method to obtain a <xref:System.Type> object for a type in another assembly, if you know its assembly-qualified name which can be obtained from <xref:System.Type.AssemblyQualifiedName>.</span></span> <span data-ttu-id="9a871-2430"><xref:System.Type.GetType%2A> 會導致在指定的組件載入`typeName`。</span><span class="sxs-lookup"><span data-stu-id="9a871-2430"><xref:System.Type.GetType%2A> causes loading of the assembly specified in `typeName`.</span></span> <span data-ttu-id="9a871-2431">您也可以載入組件<xref:System.Reflection.Assembly.Load%2A>方法，然後使用<xref:System.Type.GetType%2A>或是<xref:System.Reflection.Assembly.GetTypes%2A>方法<xref:System.Reflection.Assembly>類別，以取得<xref:System.Type>物件。</span><span class="sxs-lookup"><span data-stu-id="9a871-2431">You can also load an assembly using the <xref:System.Reflection.Assembly.Load%2A> method, and then use the <xref:System.Type.GetType%2A> or <xref:System.Reflection.Assembly.GetTypes%2A> methods of the <xref:System.Reflection.Assembly> class to get <xref:System.Type> objects.</span></span> <span data-ttu-id="9a871-2432">如果類型是在編譯時期已知到您的程式組件中，會使用更有效率`typeof`在 C# 中，<xref:System.Type.GetType%2A>在 Visual Basic 中，或`typeid`c + + 中。</span><span class="sxs-lookup"><span data-stu-id="9a871-2432">If a type is in an assembly known to your program at compile time, it is more efficient to use `typeof` in C#, <xref:System.Type.GetType%2A> in Visual Basic, or `typeid` in C++.</span></span>  
  
 <span data-ttu-id="9a871-2433">`GetType` 僅適用於從磁碟載入的組件。</span><span class="sxs-lookup"><span data-stu-id="9a871-2433">`GetType` only works on assemblies loaded from disk.</span></span> <span data-ttu-id="9a871-2434">如果您呼叫`GetType`查閱使用定義動態組件中定義的型別<xref:System.Reflection.Emit>服務，您可能會收到不一致的行為。</span><span class="sxs-lookup"><span data-stu-id="9a871-2434">If you call `GetType` to look up a type defined in a dynamic assembly defined using the <xref:System.Reflection.Emit> services, you might get inconsistent behavior.</span></span> <span data-ttu-id="9a871-2435">行為取決於動態組件是持續性的也就是，使用建立`RunAndSave`或是`Save`存取模式的<xref:System.Reflection.Emit.AssemblyBuilderAccess?displayProperty=nameWithType>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-2435">The behavior depends on whether the dynamic assembly is persistent, that is, created using the `RunAndSave` or `Save` access modes of the <xref:System.Reflection.Emit.AssemblyBuilderAccess?displayProperty=nameWithType> enumeration.</span></span> <span data-ttu-id="9a871-2436">如果動態組件是持續性，並已寫入磁碟之前`GetType`是呼叫，載入器在磁碟上找到儲存的組件、 載入該組件中，而且該組件中擷取的型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-2436">If the dynamic assembly is persistent and has been written to disk before `GetType` is called, the loader finds the saved assembly on disk, loads that assembly, and retrieves the type from that assembly.</span></span> <span data-ttu-id="9a871-2437">如果組件尚未儲存至磁碟`GetType`呼叫時，此方法會傳回`null`。</span><span class="sxs-lookup"><span data-stu-id="9a871-2437">If the assembly has not been saved to disk when `GetType` is called, the method returns `null`.</span></span> <span data-ttu-id="9a871-2438">`GetType` 不了解暫時性動態組件;因此，呼叫`GetType`若要擷取型別中的暫時性動態組件傳回`null`。</span><span class="sxs-lookup"><span data-stu-id="9a871-2438">`GetType` does not understand transient dynamic assemblies; therefore, calling `GetType` to retrieve a type in a transient dynamic assembly returns `null`.</span></span>  
  
 <span data-ttu-id="9a871-2439">若要使用`GetType`上的動態模組，訂閱<xref:System.AppDomain.AssemblyResolve?displayProperty=nameWithType>事件，並呼叫`GetType`在儲存之前。</span><span class="sxs-lookup"><span data-stu-id="9a871-2439">To use `GetType` on a dynamic module, subscribe to the <xref:System.AppDomain.AssemblyResolve?displayProperty=nameWithType> event and call `GetType` before saving.</span></span> <span data-ttu-id="9a871-2440">否則，您會得到兩個組件的複本在記憶體中。</span><span class="sxs-lookup"><span data-stu-id="9a871-2440">Otherwise, you will get two copies of the assembly in memory.</span></span>  
  
 <span data-ttu-id="9a871-2441">`throwOnError`參數會指定時會發生什麼事的型別找不到，並會隱藏其他某些例外情況，例外狀況 」 一節中所述。</span><span class="sxs-lookup"><span data-stu-id="9a871-2441">The `throwOnError` parameter specifies what happens when the type is not found, and also suppresses certain other exception conditions, as described in the Exceptions section.</span></span> <span data-ttu-id="9a871-2442">某些例外狀況的值為何`throwOnError`。</span><span class="sxs-lookup"><span data-stu-id="9a871-2442">Some exceptions are thrown regardless of the value of `throwOnError`.</span></span> <span data-ttu-id="9a871-2443">例如，如果找到的型別，但無法載入，<xref:System.TypeLoadException>就會擲回即使`throwOnError`是`false`。</span><span class="sxs-lookup"><span data-stu-id="9a871-2443">For example, if the type is found but cannot be loaded, a <xref:System.TypeLoadException> is thrown even if `throwOnError` is `false`.</span></span>  
  
 <span data-ttu-id="9a871-2444">下表顯示基底類別成員會傳回由`Get`反映型別上時的方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-2444">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="9a871-2445">成員類型</span><span class="sxs-lookup"><span data-stu-id="9a871-2445">Member Type</span></span>|<span data-ttu-id="9a871-2446">Static</span><span class="sxs-lookup"><span data-stu-id="9a871-2446">Static</span></span>|<span data-ttu-id="9a871-2447">非靜態</span><span class="sxs-lookup"><span data-stu-id="9a871-2447">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="9a871-2448">建構函式</span><span class="sxs-lookup"><span data-stu-id="9a871-2448">Constructor</span></span>|<span data-ttu-id="9a871-2449">否</span><span class="sxs-lookup"><span data-stu-id="9a871-2449">No</span></span>|<span data-ttu-id="9a871-2450">否</span><span class="sxs-lookup"><span data-stu-id="9a871-2450">No</span></span>|  
|<span data-ttu-id="9a871-2451">欄位</span><span class="sxs-lookup"><span data-stu-id="9a871-2451">Field</span></span>|<span data-ttu-id="9a871-2452">否</span><span class="sxs-lookup"><span data-stu-id="9a871-2452">No</span></span>|<span data-ttu-id="9a871-2453">可以。</span><span class="sxs-lookup"><span data-stu-id="9a871-2453">Yes.</span></span> <span data-ttu-id="9a871-2454">欄位永遠是依名稱和簽章隱藏。</span><span class="sxs-lookup"><span data-stu-id="9a871-2454">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="9a871-2455">Event - 事件</span><span class="sxs-lookup"><span data-stu-id="9a871-2455">Event</span></span>|<span data-ttu-id="9a871-2456">不適用</span><span class="sxs-lookup"><span data-stu-id="9a871-2456">Not applicable</span></span>|<span data-ttu-id="9a871-2457">一般類型系統規則是繼承實作屬性的方法相同。</span><span class="sxs-lookup"><span data-stu-id="9a871-2457">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="9a871-2458">反映會視為由名稱和簽章隱藏屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-2458">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="9a871-2459">請參閱附註 2。</span><span class="sxs-lookup"><span data-stu-id="9a871-2459">See note 2 below.</span></span>|  
|<span data-ttu-id="9a871-2460">方法</span><span class="sxs-lookup"><span data-stu-id="9a871-2460">Method</span></span>|<span data-ttu-id="9a871-2461">否</span><span class="sxs-lookup"><span data-stu-id="9a871-2461">No</span></span>|<span data-ttu-id="9a871-2462">可以。</span><span class="sxs-lookup"><span data-stu-id="9a871-2462">Yes.</span></span> <span data-ttu-id="9a871-2463">（虛擬和非虛擬） 的方法可以隱藏依名稱或依名稱和簽章隱藏。</span><span class="sxs-lookup"><span data-stu-id="9a871-2463">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="9a871-2464">巢狀的類型</span><span class="sxs-lookup"><span data-stu-id="9a871-2464">Nested Type</span></span>|<span data-ttu-id="9a871-2465">否</span><span class="sxs-lookup"><span data-stu-id="9a871-2465">No</span></span>|<span data-ttu-id="9a871-2466">否</span><span class="sxs-lookup"><span data-stu-id="9a871-2466">No</span></span>|  
|<span data-ttu-id="9a871-2467">屬性</span><span class="sxs-lookup"><span data-stu-id="9a871-2467">Property</span></span>|<span data-ttu-id="9a871-2468">不適用</span><span class="sxs-lookup"><span data-stu-id="9a871-2468">Not applicable</span></span>|<span data-ttu-id="9a871-2469">一般類型系統規則是繼承實作屬性的方法相同。</span><span class="sxs-lookup"><span data-stu-id="9a871-2469">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="9a871-2470">反映會視為由名稱和簽章隱藏屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-2470">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="9a871-2471">請參閱附註 2。</span><span class="sxs-lookup"><span data-stu-id="9a871-2471">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="9a871-2472">依名稱和簽章隱藏會考慮所有組件的簽章，包括自訂修飾詞，傳回類型、 參數類型、 sentinels 和 unmanaged 呼叫慣例。</span><span class="sxs-lookup"><span data-stu-id="9a871-2472">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="9a871-2473">這是二進位比較。</span><span class="sxs-lookup"><span data-stu-id="9a871-2473">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="9a871-2474">反映的屬性和事件會依名稱和簽章隱藏。</span><span class="sxs-lookup"><span data-stu-id="9a871-2474">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="9a871-2475">如果您同時有 get 和 set 存取子的屬性在基底類別中，但衍生的類別有只有 get 存取子，在衍生的類別的屬性會隱藏基底類別屬性中，並不能存取的基底類別的 setter。</span><span class="sxs-lookup"><span data-stu-id="9a871-2475">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="9a871-2476">自訂屬性不屬於一般類型系統。</span><span class="sxs-lookup"><span data-stu-id="9a871-2476">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="9a871-2477">陣列或 COM 型別不會搜尋除非它們已經被載入資料表可用的類別。</span><span class="sxs-lookup"><span data-stu-id="9a871-2477">Arrays or COM types are not searched for unless they have already been loaded into the table of available classes.</span></span>  
  
 <span data-ttu-id="9a871-2478">`typeName` 可以在型別名稱來限定其命名空間或組件限定名稱，其中包含組件名稱規格。</span><span class="sxs-lookup"><span data-stu-id="9a871-2478">`typeName` can be the type name qualified by its namespace or an assembly-qualified name that includes an assembly name specification.</span></span> <span data-ttu-id="9a871-2479">請參閱 <xref:System.Type.AssemblyQualifiedName%2A>。</span><span class="sxs-lookup"><span data-stu-id="9a871-2479">See <xref:System.Type.AssemblyQualifiedName%2A>.</span></span>  
  
 <span data-ttu-id="9a871-2480">如果`typeName`包含命名空間，但不是組件名稱，這個方法會依此順序搜尋只呼叫物件的組件和 Mscorlib.dll。</span><span class="sxs-lookup"><span data-stu-id="9a871-2480">If `typeName` includes the namespace but not the assembly name, this method searches only the calling object's assembly and Mscorlib.dll, in that order.</span></span> <span data-ttu-id="9a871-2481">如果部分或完整的組件名稱完整限定類型名稱，這個方法會搜尋指定的組件中。</span><span class="sxs-lookup"><span data-stu-id="9a871-2481">If typeName is fully qualified with the partial or complete assembly name, this method searches in the specified assembly.</span></span> <span data-ttu-id="9a871-2482">如果組件具有強式名稱，完整的組件的名稱是必要。</span><span class="sxs-lookup"><span data-stu-id="9a871-2482">If the assembly has a strong name, a complete assembly name is required.</span></span>  
  
 <span data-ttu-id="9a871-2483"><xref:System.Type.AssemblyQualifiedName%2A>屬性會傳回完整的型別名稱，包括巢狀型別、 組件名稱和泛型引數。</span><span class="sxs-lookup"><span data-stu-id="9a871-2483">The <xref:System.Type.AssemblyQualifiedName%2A> property returns a fully qualified type name including nested types, the assembly name, and generic arguments.</span></span> <span data-ttu-id="9a871-2484">支援通用語言執行平台的所有編譯器將都發出的簡單名稱的巢狀類別，並反映建構查詢時，根據下列慣例 mangled 的名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-2484">All compilers that support the common language runtime will emit the simple name of a nested class, and reflection constructs a mangled name when queried, in accordance with the following conventions.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9a871-2485">在.NET Framework 2.0 版中，處理器架構會新增至組件識別，而且可以指定為組件名稱字串的一部分。</span><span class="sxs-lookup"><span data-stu-id="9a871-2485">In the .NET Framework version 2.0, processor architecture is added to assembly identity, and can be specified as part of assembly name strings.</span></span> <span data-ttu-id="9a871-2486">例如，"ProcessorArchitecture = msil"。</span><span class="sxs-lookup"><span data-stu-id="9a871-2486">For example, "ProcessorArchitecture=msil".</span></span> <span data-ttu-id="9a871-2487">不過，它不包含在所傳回的字串<xref:System.Type.AssemblyQualifiedName%2A>屬性，因為相容性。</span><span class="sxs-lookup"><span data-stu-id="9a871-2487">However, it is not included in the string returned by the <xref:System.Type.AssemblyQualifiedName%2A> property, for compatibility reasons.</span></span> <span data-ttu-id="9a871-2488">您也可以藉由建立載入類型<xref:System.Reflection.AssemblyName>物件，並將其傳遞至適當的多載<xref:System.Reflection.Assembly.Load%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-2488">You can also load types by creating an <xref:System.Reflection.AssemblyName> object and passing it to an appropriate overload of the <xref:System.Reflection.Assembly.Load%2A> method.</span></span> <span data-ttu-id="9a871-2489">您可以接著使用<xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType>方法來載入組件類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-2489">You can then use the <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> method to load types from the assembly.</span></span> <span data-ttu-id="9a871-2490">請參閱 <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="9a871-2490">See also <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=nameWithType>.</span></span>  
  
|<span data-ttu-id="9a871-2491">分隔符號</span><span class="sxs-lookup"><span data-stu-id="9a871-2491">Delimiter</span></span>|<span data-ttu-id="9a871-2492">意義</span><span class="sxs-lookup"><span data-stu-id="9a871-2492">Meaning</span></span>|  
|---------------|-------------|  
|<span data-ttu-id="9a871-2493">反斜線 (\\)</span><span class="sxs-lookup"><span data-stu-id="9a871-2493">Backslash (\\)</span></span>|<span data-ttu-id="9a871-2494">逸出字元。</span><span class="sxs-lookup"><span data-stu-id="9a871-2494">Escape character.</span></span>|  
|<span data-ttu-id="9a871-2495">倒單引號 （'） |前面有一或多個位數表示的型別參數，位於結尾的泛型型別名稱的數目。</span><span class="sxs-lookup"><span data-stu-id="9a871-2495">Backtick (\`)|Precedes one or more digits representing the number of type parameters, located at the end of the name of a generic type.</span></span>|  
|<span data-ttu-id="9a871-2496">括號 ([])</span><span class="sxs-lookup"><span data-stu-id="9a871-2496">Brackets ([])</span></span>|<span data-ttu-id="9a871-2497">將建構的泛型類型; 泛型型別引數清單在類型引數清單中，將組件限定型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-2497">Enclose a generic type argument list, for a constructed generic type; within a type argument list, enclose an assembly-qualified type.</span></span>|  
|<span data-ttu-id="9a871-2498">逗號 （，）</span><span class="sxs-lookup"><span data-stu-id="9a871-2498">Comma (,)</span></span>|<span data-ttu-id="9a871-2499">後面接著組件名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-2499">Precedes the Assembly name.</span></span>|  
|<span data-ttu-id="9a871-2500">句號 （.）</span><span class="sxs-lookup"><span data-stu-id="9a871-2500">Period (.)</span></span>|<span data-ttu-id="9a871-2501">表示命名空間識別項。</span><span class="sxs-lookup"><span data-stu-id="9a871-2501">Denotes namespace identifiers.</span></span>|  
|<span data-ttu-id="9a871-2502">加號 （+）</span><span class="sxs-lookup"><span data-stu-id="9a871-2502">Plus sign (+)</span></span>|<span data-ttu-id="9a871-2503">在之前的巢狀的類別。</span><span class="sxs-lookup"><span data-stu-id="9a871-2503">Precedes a nested class.</span></span>|  
  
 <span data-ttu-id="9a871-2504">例如，類別的完整格式的名稱可能如下所示：</span><span class="sxs-lookup"><span data-stu-id="9a871-2504">For example, the fully qualified name for a class might look like this:</span></span>  
  
```  
TopNamespace.SubNameSpace.ContainingClass+NestedClass,MyAssembly  
```  
  
 <span data-ttu-id="9a871-2505">如果命名空間已 TopNamespace.Sub+Namespace，則字串會有之前加號 （+），以逸出字元 (\\) 以防止它被解譯為巢狀分隔符號。</span><span class="sxs-lookup"><span data-stu-id="9a871-2505">If the namespace were TopNamespace.Sub+Namespace, then the string would have to precede the plus sign (+) with an escape character (\\) to prevent it from being interpreted as a nesting separator.</span></span> <span data-ttu-id="9a871-2506">反映會發出此字串，如下所示：</span><span class="sxs-lookup"><span data-stu-id="9a871-2506">Reflection emits this string as follows:</span></span>  
  
```  
TopNamespace.Sub\+Namespace.ContainingClass+NestedClass,MyAssembly  
```  
  
 <span data-ttu-id="9a871-2507">"+ +"會變成"\\+\\+"，和 「\\」 變成 「\\\\"。</span><span class="sxs-lookup"><span data-stu-id="9a871-2507">A "++" becomes "\\+\\+", and a "\\" becomes "\\\\".</span></span>  
  
 <span data-ttu-id="9a871-2508">這個限定的名稱可以保存和更新版本用來載入<xref:System.Type>。</span><span class="sxs-lookup"><span data-stu-id="9a871-2508">This qualified name can be persisted and later used to load the <xref:System.Type>.</span></span> <span data-ttu-id="9a871-2509">搜尋並載入<xref:System.Type>，使用<xref:System.Type.GetType%2A>使用型別名稱只有或使用組件限定的類型名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-2509">To search for and load a <xref:System.Type>, use <xref:System.Type.GetType%2A> either with the type name only or with the assembly qualified type name.</span></span> <span data-ttu-id="9a871-2510"><xref:System.Type.GetType%2A> 與型別名稱只會尋找<xref:System.Type>呼叫者的組件中，然後在系統組件中。</span><span class="sxs-lookup"><span data-stu-id="9a871-2510"><xref:System.Type.GetType%2A> with the type name only will look for the <xref:System.Type> in the caller's assembly and then in the System assembly.</span></span> <span data-ttu-id="9a871-2511"><xref:System.Type.GetType%2A> 與組件限定的類型名稱會尋找<xref:System.Type>任何組件中。</span><span class="sxs-lookup"><span data-stu-id="9a871-2511"><xref:System.Type.GetType%2A> with the assembly qualified type name will look for the <xref:System.Type> in any assembly.</span></span>  
  
 <span data-ttu-id="9a871-2512">類型名稱可能包含行尾字元來表示的類型，例如類型是否為參考型別、 指標類型或陣列類型的其他資訊。</span><span class="sxs-lookup"><span data-stu-id="9a871-2512">Type names may include trailing characters that denote additional information about the type, such as whether the type is a reference type, a pointer type or an array type.</span></span> <span data-ttu-id="9a871-2513">若要擷取的型別名稱，而不需要這些後置字元，請使用`t.GetElementType().ToString()`，其中`t`是型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-2513">To retrieve the type name without these trailing characters, use `t.GetElementType().ToString()`, where `t` is the type.</span></span>  
  
 <span data-ttu-id="9a871-2514">空格是相關的組件名稱以外的所有型別名稱元件。</span><span class="sxs-lookup"><span data-stu-id="9a871-2514">Spaces are relevant in all type name components except the assembly name.</span></span> <span data-ttu-id="9a871-2515">在組件名稱 '，' 分隔符號之前的空格是相關的但是 '，' 分隔符號之後的空格會被忽略。</span><span class="sxs-lookup"><span data-stu-id="9a871-2515">In the assembly name, spaces before the ',' separator are relevant, but spaces after the ',' separator are ignored.</span></span>  
  
 <span data-ttu-id="9a871-2516">泛型型別名稱的結尾倒引號 (\`) 後面接著數字，代表泛型類型引數數目。</span><span class="sxs-lookup"><span data-stu-id="9a871-2516">The name of a generic type ends with a backtick (\`) followed by digits representing the number of generic type arguments.</span></span> <span data-ttu-id="9a871-2517">此名稱的損害的目的是讓編譯器支援泛型型別具有相同名稱但具有不同數目的型別參數，在相同的範圍內發生。</span><span class="sxs-lookup"><span data-stu-id="9a871-2517">The purpose of this name mangling is to allow compilers to support generic types with the same name but with different numbers of type parameters, occurring in the same scope.</span></span> <span data-ttu-id="9a871-2518">例如，反映會傳回損害的名稱`Tuple`1` and `Tuple`2`的泛型方法`Tuple(Of T)`並`Tuple(Of T0, T1)`在 Visual Basic 中，或`Tuple<T>`和 Tuple`\<T0, T1>` Visual C# 中。</span><span class="sxs-lookup"><span data-stu-id="9a871-2518">For example, reflection returns the mangled names `Tuple`1` and `Tuple`2` from the generic methods `Tuple(Of T)` and `Tuple(Of T0, T1)` in Visual Basic, or `Tuple<T>` and Tuple`\<T0, T1>` in Visual C#.</span></span>  
  
 <span data-ttu-id="9a871-2519">為泛型類型，類型引數清單以括號、，並以逗號分隔的類型引數。</span><span class="sxs-lookup"><span data-stu-id="9a871-2519">For generic types, the type argument list is enclosed in brackets, and the type arguments are separated by commas.</span></span> <span data-ttu-id="9a871-2520">例如，泛型<xref:System.Collections.Generic.Dictionary%602>有兩個類型參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-2520">For example, a generic <xref:System.Collections.Generic.Dictionary%602> has two type parameters.</span></span> <span data-ttu-id="9a871-2521">A<xref:System.Collections.Generic.Dictionary%602>的`MyType`類型的索引鍵聯<xref:System.String>可能如下表示：</span><span class="sxs-lookup"><span data-stu-id="9a871-2521">A <xref:System.Collections.Generic.Dictionary%602> of `MyType` with keys of type <xref:System.String> might be represented as follows:</span></span>  
  
```  
System.Collections.Generic.Dictionary`2[System.String,MyType]  
```  
  
 <span data-ttu-id="9a871-2522">若要指定型別引數清單中的組件限定型別，請將括號括住的組件限定型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-2522">To specify an assembly-qualified type within a type argument list, enclose the assembly-qualified type within brackets.</span></span> <span data-ttu-id="9a871-2523">否則，逗號分隔的組件限定名稱的組件會被視為分隔其他的型別引數。</span><span class="sxs-lookup"><span data-stu-id="9a871-2523">Otherwise, the commas that separate the parts of the assembly-qualified name are interpreted as delimiting additional type arguments.</span></span> <span data-ttu-id="9a871-2524">例如，<xref:System.Collections.Generic.Dictionary%602>的`MyType`MyAssembly.dll 中，使用索引鍵的類型從<xref:System.String>，可能會以下面方式指定：</span><span class="sxs-lookup"><span data-stu-id="9a871-2524">For example, a <xref:System.Collections.Generic.Dictionary%602> of `MyType` from MyAssembly.dll, with keys of type <xref:System.String>, might be specified as follows:</span></span>  
  
```  
Type.GetType("System.Collections.Generic.Dictionary`2[System.String,[MyType,MyAssembly]]")  
```  
  
> [!NOTE]
>  <span data-ttu-id="9a871-2525">組件限定型別可以括在括弧，它必須出現在類型參數清單中。</span><span class="sxs-lookup"><span data-stu-id="9a871-2525">An assembly-qualified type can be enclosed in brackets only when it appears within a type parameter list.</span></span> <span data-ttu-id="9a871-2526">搜尋組件限定的不合格的型別的型別參數清單中的規則並符合規定及不合格的非泛型類型的規則相同。</span><span class="sxs-lookup"><span data-stu-id="9a871-2526">The rules for searching assemblies for qualified and unqualified types in type parameter lists are the same as the rules for qualified and unqualified nongeneric types.</span></span>  
  
 <span data-ttu-id="9a871-2527">可為 null 的型別是泛型類型的特殊案例。</span><span class="sxs-lookup"><span data-stu-id="9a871-2527">Nullable types are a special case of generic types.</span></span> <span data-ttu-id="9a871-2528">例如，可為 null <xref:System.Int32> "System.Nullable'1[System.Int32]"的字串表示。</span><span class="sxs-lookup"><span data-stu-id="9a871-2528">For example, a nullable <xref:System.Int32> is represented by the string "System.Nullable\`1[System.Int32]".</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9a871-2529">在 C#、 c + + 和 Visual Basic 中，您也可以取得可為 null 的型別使用型別運算子。</span><span class="sxs-lookup"><span data-stu-id="9a871-2529">In C#, C++, and Visual Basic you can also get nullable types using type operators.</span></span> <span data-ttu-id="9a871-2530">比方說，可為 null<xref:System.Boolean>型別由`typeof(Nullable<bool>)`在 C# 中，依`Nullable<Boolean>::typeid`c + + 和`GetType(Nullable(Of Boolean))`Visual Basic 中。</span><span class="sxs-lookup"><span data-stu-id="9a871-2530">For example, the nullable <xref:System.Boolean> type is returned by `typeof(Nullable<bool>)` in C#, by `Nullable<Boolean>::typeid` in C++, and by `GetType(Nullable(Of Boolean))` in Visual Basic.</span></span>  
  
 <span data-ttu-id="9a871-2531">下表顯示您所使用的語法`GetType`為各種型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-2531">The following table shows the syntax you use with `GetType` for various types.</span></span>  
  
|<span data-ttu-id="9a871-2532">若要取得</span><span class="sxs-lookup"><span data-stu-id="9a871-2532">To Get</span></span>|<span data-ttu-id="9a871-2533">使用</span><span class="sxs-lookup"><span data-stu-id="9a871-2533">Use</span></span>|  
|------------|---------|  
|<span data-ttu-id="9a871-2534">可為 null <xref:System.Int32></span><span class="sxs-lookup"><span data-stu-id="9a871-2534">A nullable <xref:System.Int32></span></span>|``Type.GetType("System.Nullable`1[System.Int32]")``|  
|<span data-ttu-id="9a871-2535">Unmanaged 的指標 `MyType`</span><span class="sxs-lookup"><span data-stu-id="9a871-2535">An unmanaged pointer to `MyType`</span></span>|`Type.GetType("MyType*")`|  
|<span data-ttu-id="9a871-2536">指標的 unmanaged 的指標 `MyType`</span><span class="sxs-lookup"><span data-stu-id="9a871-2536">An unmanaged pointer to a pointer to `MyType`</span></span>|`Type.GetType("MyType**")`|  
|<span data-ttu-id="9a871-2537">Managed 的指標或參考 `MyType`</span><span class="sxs-lookup"><span data-stu-id="9a871-2537">A managed pointer or reference to `MyType`</span></span>|<span data-ttu-id="9a871-2538">`Type.GetType("MyType&")`.</span><span class="sxs-lookup"><span data-stu-id="9a871-2538">`Type.GetType("MyType&")`.</span></span> <span data-ttu-id="9a871-2539">請注意，參考與指標不同，僅限一個層級。</span><span class="sxs-lookup"><span data-stu-id="9a871-2539">Note that unlike pointers, references are limited to one level.</span></span>|  
|<span data-ttu-id="9a871-2540">父類別和巢狀的類別</span><span class="sxs-lookup"><span data-stu-id="9a871-2540">A parent class and a nested class</span></span>|`Type.GetType("MyParentClass+MyNestedClass")`|  
|<span data-ttu-id="9a871-2541">一維陣列，其下限為 0</span><span class="sxs-lookup"><span data-stu-id="9a871-2541">A one-dimensional array with a lower bound of 0</span></span>|`Type.GetType("MyArray[]")`|  
|<span data-ttu-id="9a871-2542">下限不明的一維陣列</span><span class="sxs-lookup"><span data-stu-id="9a871-2542">A one-dimensional array with an unknown lower bound</span></span>|`Type.GetType("MyArray[*]")`|  
|<span data-ttu-id="9a871-2543">N 維陣列</span><span class="sxs-lookup"><span data-stu-id="9a871-2543">An n-dimensional array</span></span>|<span data-ttu-id="9a871-2544">逗號 （，） 的 n-1 次數總計的方括號內。</span><span class="sxs-lookup"><span data-stu-id="9a871-2544">A comma (,) inside the brackets a total of n-1 times.</span></span> <span data-ttu-id="9a871-2545">例如，`System.Object[,,]`代表三維`Object`陣列。</span><span class="sxs-lookup"><span data-stu-id="9a871-2545">For example, `System.Object[,,]` represents a three-dimensional `Object` array.</span></span>|  
|<span data-ttu-id="9a871-2546">二維陣列的陣列</span><span class="sxs-lookup"><span data-stu-id="9a871-2546">A two-dimensional array's array</span></span>|`Type.GetType("MyArray[][]")`|  
|<span data-ttu-id="9a871-2547">矩形的二維陣列下限不明</span><span class="sxs-lookup"><span data-stu-id="9a871-2547">A rectangular two-dimensional array with unknown lower bounds</span></span>|`Type.GetType("MyArray[,]")`|  
|<span data-ttu-id="9a871-2548">具有一個型別引數的泛型型別</span><span class="sxs-lookup"><span data-stu-id="9a871-2548">A generic type with one type argument</span></span>|``Type.GetType("MyGenericType`1[MyType]")``|  
|<span data-ttu-id="9a871-2549">兩個類型引數的泛型型別</span><span class="sxs-lookup"><span data-stu-id="9a871-2549">A generic type with two type arguments</span></span>|``Type.GetType("MyGenericType`2[MyType,AnotherType]")``|  
|<span data-ttu-id="9a871-2550">具有兩個組件限定型別引數的泛型型別</span><span class="sxs-lookup"><span data-stu-id="9a871-2550">A generic type with two assembly-qualified type arguments</span></span>|``Type.GetType("MyGenericType`2[[MyType,MyAssembly],[AnotherType,AnotherAssembly]]")``|  
|<span data-ttu-id="9a871-2551">使用組件限定型別引數，組件限定的泛型類型</span><span class="sxs-lookup"><span data-stu-id="9a871-2551">An assembly-qualified generic type with an assembly-qualified type argument</span></span>|``Type.GetType("MyGenericType`1[[MyType,MyAssembly]],MyGenericTypeAssembly")``|  
|<span data-ttu-id="9a871-2552">其類型引數是具有兩個類型引數的泛型型別是泛型型別</span><span class="sxs-lookup"><span data-stu-id="9a871-2552">A generic type whose type argument is a generic type with two type arguments</span></span>|``Type.GetType("MyGenericType`1[AnotherGenericType`2[MyType,AnotherType]]")``|  
  
   
  
## Examples  
 <span data-ttu-id="9a871-2553">下列範例會擷取的型別`System.Int32`並使用該型別物件來顯示<xref:System.Type.FullName%2A>屬性`System.Int32`。</span><span class="sxs-lookup"><span data-stu-id="9a871-2553">The following example retrieves the type of `System.Int32` and uses that type object to display the <xref:System.Type.FullName%2A> property of `System.Int32`.</span></span> <span data-ttu-id="9a871-2554">如果不存在的組件參考的型別物件，此範例會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9a871-2554">If a type object refers to an assembly that does not exist, this example throws an exception.</span></span>  
  
 [!code-cpp[Type_GetType#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetType/CPP/type_gettype.cpp#1)]
 [!code-csharp[Type_GetType#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetType/CS/type_gettype.cs#1)]
 [!code-vb[Type_GetType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetType/VB/type_gettype.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9a871-2555"><paramref name="typeName" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-2555"><paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="9a871-2556">叫用類別初始設定式並擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9a871-2556">A class initializer is invoked and throws an exception.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="9a871-2557"><paramref name="throwOnError" /> 為 <see langword="true" />，而且找不到類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-2557"><paramref name="throwOnError" /> is <see langword="true" /> and the type is not found.</span></span>  
  
<span data-ttu-id="9a871-2558">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-2558">-or-</span></span> 
 <span data-ttu-id="9a871-2559"><paramref name="throwOnError" /> 為 <see langword="true" />，而且 <paramref name="typeName" /> 包含無效字元，例如內嵌的定位字元。</span><span class="sxs-lookup"><span data-stu-id="9a871-2559"><paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid characters, such as an embedded tab.</span></span> 
<span data-ttu-id="9a871-2560">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-2560">-or-</span></span> 
 <span data-ttu-id="9a871-2561"><paramref name="throwOnError" /> 為 <see langword="true" />，而且 <paramref name="typeName" /> 是空字串。</span><span class="sxs-lookup"><span data-stu-id="9a871-2561"><paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> is an empty string.</span></span>  
  
<span data-ttu-id="9a871-2562">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-2562">-or-</span></span> 
 <span data-ttu-id="9a871-2563"><paramref name="throwOnError" /> 為 <see langword="true" />，而且 <paramref name="typeName" /> 代表大小無效的陣列類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-2563"><paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> represents an array type with an invalid size.</span></span>  
  
<span data-ttu-id="9a871-2564">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-2564">-or-</span></span> 
 <span data-ttu-id="9a871-2565"><paramref name="typeName" /> 代表 <see cref="T:System.TypedReference" /> 的陣列。</span><span class="sxs-lookup"><span data-stu-id="9a871-2565"><paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9a871-2566"><paramref name="throwOnError" /> 為 <see langword="true" />，而且 <paramref name="typeName" /> 包含無效的語法。</span><span class="sxs-lookup"><span data-stu-id="9a871-2566"><paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid syntax.</span></span> <span data-ttu-id="9a871-2567">例如，"MyType[,\*,]"。</span><span class="sxs-lookup"><span data-stu-id="9a871-2567">For example, "MyType[,\*,]".</span></span>  
  
<span data-ttu-id="9a871-2568">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-2568">-or-</span></span> 
 <span data-ttu-id="9a871-2569"><paramref name="typeName" /> 代表的泛型類型以指標類型、<see langword="ByRef" /> 類型或 <see cref="T:System.Void" /> 做為其中一個類型引數。</span><span class="sxs-lookup"><span data-stu-id="9a871-2569"><paramref name="typeName" /> represents a generic type that has a pointer type, a <see langword="ByRef" /> type, or <see cref="T:System.Void" /> as one of its type arguments.</span></span>  
  
<span data-ttu-id="9a871-2570">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-2570">-or-</span></span> 
 <span data-ttu-id="9a871-2571"><paramref name="typeName" /> 代表的泛型類型具有不正確的類型引數數目。</span><span class="sxs-lookup"><span data-stu-id="9a871-2571"><paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.</span></span>  
  
<span data-ttu-id="9a871-2572">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-2572">-or-</span></span> 
 <span data-ttu-id="9a871-2573"><paramref name="typeName" /> 代表泛型類型，其中一個類型引數不符合對應類型參數的條件約束。</span><span class="sxs-lookup"><span data-stu-id="9a871-2573"><paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="9a871-2574"><paramref name="throwOnError" /> 為 <see langword="true" />，而且找不到組件或組件的其中一個相依性。</span><span class="sxs-lookup"><span data-stu-id="9a871-2574"><paramref name="throwOnError" /> is <see langword="true" /> and the assembly or one of its dependencies was not found.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><block subset="none" type="note">
            <para>  
 <span data-ttu-id="9a871-2575">在<see href="https://go.microsoft.com/fwlink/?LinkID=247912">適用於 Windows 市集應用程式的 .NET</see> 或是<see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">可攜式類別庫</see>中，改為攔截基底類別例外狀況 <see cref="T:System.IO.IOException" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-2575">In the <see href="https://go.microsoft.com/fwlink/?LinkID=247912">.NET for Windows Store apps</see> or the <see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">Portable Class Library</see>, catch the base class exception, <see cref="T:System.IO.IOException" />, instead.</span></span>  
  
</para>
          </block>  
  
 <span data-ttu-id="9a871-2576">找到組件或其相依性的其中一個，但無法載入。</span><span class="sxs-lookup"><span data-stu-id="9a871-2576">The assembly or one of its dependencies was found, but could not be loaded.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="9a871-2577">組件或組件的其中一個相依性無效。</span><span class="sxs-lookup"><span data-stu-id="9a871-2577">The assembly or one of its dependencies is not valid.</span></span>  
  
<span data-ttu-id="9a871-2578">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-2578">-or-</span></span> 
<span data-ttu-id="9a871-2579">目前載入的通用語言執行平台是 2.0 版或更新的版本，但用來編譯組件的卻是更新的版本。</span><span class="sxs-lookup"><span data-stu-id="9a871-2579">Version 2.0 or later of the common language runtime is currently loaded, and the assembly was compiled with a later version.</span></span></exception>
        <altmember cref="T:System.String" />
        <altmember cref="T:System.TypeLoadException" />
        <altmember cref="P:System.Type.AssemblyQualifiedName" />
        <altmember cref="M:System.Reflection.Assembly.GetAssembly(System.Type)" />
        <altmember cref="M:System.Reflection.Assembly.GetType(System.String)" />
        <altmember cref="T:System.Reflection.AssemblyName" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/specifying-fully-qualified-type-names.md"><span data-ttu-id="9a871-2580">指定完整的類型名稱</span><span class="sxs-lookup"><span data-stu-id="9a871-2580">Specifying Fully Qualified Type Names</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public static Type GetType (string typeName, bool throwOnError, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetType(string typeName, bool throwOnError, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetType(System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetType (typeName As String, throwOnError As Boolean, ignoreCase As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetType(System::String ^ typeName, bool throwOnError, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="static member GetType : string * bool * bool -&gt; Type" Usage="System.Type.GetType (typeName, throwOnError, ignoreCase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="throwOnError" Type="System.Boolean" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="typeName"><span data-ttu-id="9a871-2581">要取得之類型的組件限定名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-2581">The assembly-qualified name of the type to get.</span></span> <span data-ttu-id="9a871-2582">請參閱 <see cref="P:System.Type.AssemblyQualifiedName" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-2582">See <see cref="P:System.Type.AssemblyQualifiedName" />.</span></span> <span data-ttu-id="9a871-2583">如果此類型位在目前執行的組件或 Mscorlib.dll 中，則提供其命名空間所限定的類型名稱便已足夠。</span><span class="sxs-lookup"><span data-stu-id="9a871-2583">If the type is in the currently executing assembly or in Mscorlib.dll, it is sufficient to supply the type name qualified by its namespace.</span></span></param>
        <param name="throwOnError"><span data-ttu-id="9a871-2584"><see langword="true" /> 表示找不到該類型時擲回例外狀況，而 <see langword="false" /> 則表示傳回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-2584"><see langword="true" /> to throw an exception if the type cannot be found; <see langword="false" /> to return <see langword="null" />.</span></span> <span data-ttu-id="9a871-2585">指定 <see langword="false" /> 也會隱藏其他某些例外狀況條件，但並不是全部。</span><span class="sxs-lookup"><span data-stu-id="9a871-2585">Specifying <see langword="false" /> also suppresses some other exception conditions, but not all of them.</span></span> <span data-ttu-id="9a871-2586">請參閱＜例外狀況＞一節。</span><span class="sxs-lookup"><span data-stu-id="9a871-2586">See the Exceptions section.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="9a871-2587">為 <see langword="true" /> 執行不區分大小寫的搜尋，則為 <paramref name="typeName" />；為 <see langword="false" /> 執行區分大小寫的搜尋，則為 <paramref name="typeName" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-2587"><see langword="true" /> to perform a case-insensitive search for <paramref name="typeName" />, <see langword="false" /> to perform a case-sensitive search for <paramref name="typeName" />.</span></span></param>
        <summary><span data-ttu-id="9a871-2588">取得具有指定名稱的 <see cref="T:System.Type" />，指定找不到類型時是否要擲回例外狀況，以及是否要執行區分大小寫的搜尋。</span><span class="sxs-lookup"><span data-stu-id="9a871-2588">Gets the <see cref="T:System.Type" /> with the specified name, specifying whether to throw an exception if the type is not found and whether to perform a case-sensitive search.</span></span></summary>
        <returns><span data-ttu-id="9a871-2589">具有指定名稱的類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-2589">The type with the specified name.</span></span> <span data-ttu-id="9a871-2590">如果找不到該類型，<paramref name="throwOnError" /> 參數會指定是要傳回 <see langword="null" /> 或是擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9a871-2590">If the type is not found, the <paramref name="throwOnError" /> parameter specifies whether <see langword="null" /> is returned or an exception is thrown.</span></span> <span data-ttu-id="9a871-2591">在某些情況下，不論 <paramref name="throwOnError" /> 的值為何，都會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9a871-2591">In some cases, an exception is thrown regardless of the value of <paramref name="throwOnError" />.</span></span> <span data-ttu-id="9a871-2592">請參閱＜例外狀況＞一節。</span><span class="sxs-lookup"><span data-stu-id="9a871-2592">See the Exceptions section.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-2593">您可以使用<xref:System.Type.GetType%2A>方法，以取得<xref:System.Type>中另一個組件，類型的物件，如果您知道可從其組件限定名稱<xref:System.Type.AssemblyQualifiedName>。</span><span class="sxs-lookup"><span data-stu-id="9a871-2593">You can use the <xref:System.Type.GetType%2A> method to obtain a <xref:System.Type> object for a type in another assembly, if you know its assembly-qualified name which can be obtained from <xref:System.Type.AssemblyQualifiedName>.</span></span> <span data-ttu-id="9a871-2594"><xref:System.Type.GetType%2A> 會導致在指定的組件載入`typeName`。</span><span class="sxs-lookup"><span data-stu-id="9a871-2594"><xref:System.Type.GetType%2A> causes loading of the assembly specified in `typeName`.</span></span> <span data-ttu-id="9a871-2595">您也可以載入組件<xref:System.Reflection.Assembly.Load%2A>方法，然後使用<xref:System.Type.GetType%2A>或是<xref:System.Reflection.Assembly.GetTypes%2A>方法<xref:System.Reflection.Assembly>類別，以取得<xref:System.Type>物件。</span><span class="sxs-lookup"><span data-stu-id="9a871-2595">You can also load an assembly using the <xref:System.Reflection.Assembly.Load%2A> method, and then use the <xref:System.Type.GetType%2A> or <xref:System.Reflection.Assembly.GetTypes%2A> methods of the <xref:System.Reflection.Assembly> class to get <xref:System.Type> objects.</span></span> <span data-ttu-id="9a871-2596">如果類型是在編譯時期已知到您的程式組件中，會使用更有效率`typeof`在 C# 中，<xref:System.Type.GetType%2A>在 Visual Basic 中，或`typeid`c + + 中。</span><span class="sxs-lookup"><span data-stu-id="9a871-2596">If a type is in an assembly known to your program at compile time, it is more efficient to use `typeof` in C#, <xref:System.Type.GetType%2A> in Visual Basic, or `typeid` in C++.</span></span>  
  
 <span data-ttu-id="9a871-2597">`GetType` 僅適用於從磁碟載入的組件。</span><span class="sxs-lookup"><span data-stu-id="9a871-2597">`GetType` only works on assemblies loaded from disk.</span></span> <span data-ttu-id="9a871-2598">如果您呼叫`GetType`查閱使用定義動態組件中定義的型別<xref:System.Reflection.Emit>服務，您可能會收到不一致的行為。</span><span class="sxs-lookup"><span data-stu-id="9a871-2598">If you call `GetType` to look up a type defined in a dynamic assembly defined using the <xref:System.Reflection.Emit> services, you might get inconsistent behavior.</span></span> <span data-ttu-id="9a871-2599">行為取決於動態組件是持續性的也就是，使用建立`RunAndSave`或是`Save`存取模式的<xref:System.Reflection.Emit.AssemblyBuilderAccess?displayProperty=nameWithType>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-2599">The behavior depends on whether the dynamic assembly is persistent, that is, created using the `RunAndSave` or `Save` access modes of the <xref:System.Reflection.Emit.AssemblyBuilderAccess?displayProperty=nameWithType> enumeration.</span></span> <span data-ttu-id="9a871-2600">如果動態組件是持續性，並已寫入磁碟之前`GetType`是呼叫，載入器在磁碟上找到儲存的組件、 載入該組件中，而且該組件中擷取的型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-2600">If the dynamic assembly is persistent and has been written to disk before `GetType` is called, the loader finds the saved assembly on disk, loads that assembly, and retrieves the type from that assembly.</span></span> <span data-ttu-id="9a871-2601">如果組件尚未儲存至磁碟`GetType`呼叫時，此方法會傳回`null`。</span><span class="sxs-lookup"><span data-stu-id="9a871-2601">If the assembly has not been saved to disk when `GetType` is called, the method returns `null`.</span></span> <span data-ttu-id="9a871-2602">`GetType` 不了解暫時性動態組件;因此，呼叫`GetType`若要擷取型別中的暫時性動態組件傳回`null`。</span><span class="sxs-lookup"><span data-stu-id="9a871-2602">`GetType` does not understand transient dynamic assemblies; therefore, calling `GetType` to retrieve a type in a transient dynamic assembly returns `null`.</span></span>  
  
 <span data-ttu-id="9a871-2603">若要使用`GetType`上的動態模組，訂閱<xref:System.AppDomain.AssemblyResolve?displayProperty=nameWithType>事件，並呼叫`GetType`在儲存之前。</span><span class="sxs-lookup"><span data-stu-id="9a871-2603">To use `GetType` on a dynamic module, subscribe to the <xref:System.AppDomain.AssemblyResolve?displayProperty=nameWithType> event and call `GetType` before saving.</span></span> <span data-ttu-id="9a871-2604">否則，您會得到兩個組件的複本在記憶體中。</span><span class="sxs-lookup"><span data-stu-id="9a871-2604">Otherwise, you will get two copies of the assembly in memory.</span></span>  
  
 <span data-ttu-id="9a871-2605">`throwOnError`參數會指定時會發生什麼事的型別找不到，並會隱藏其他某些例外情況，例外狀況 」 一節中所述。</span><span class="sxs-lookup"><span data-stu-id="9a871-2605">The `throwOnError` parameter specifies what happens when the type is not found, and also suppresses certain other exception conditions, as described in the Exceptions section.</span></span> <span data-ttu-id="9a871-2606">某些例外狀況的值為何`throwOnError`。</span><span class="sxs-lookup"><span data-stu-id="9a871-2606">Some exceptions are thrown regardless of the value of `throwOnError`.</span></span> <span data-ttu-id="9a871-2607">例如，如果找到的型別，但無法載入，<xref:System.TypeLoadException>就會擲回即使`throwOnError`是`false`。</span><span class="sxs-lookup"><span data-stu-id="9a871-2607">For example, if the type is found but cannot be loaded, a <xref:System.TypeLoadException> is thrown even if `throwOnError` is `false`.</span></span>  
  
 <span data-ttu-id="9a871-2608">下表顯示基底類別成員會傳回由`Get`反映型別上時的方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-2608">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="9a871-2609">成員類型</span><span class="sxs-lookup"><span data-stu-id="9a871-2609">Member Type</span></span>|<span data-ttu-id="9a871-2610">Static</span><span class="sxs-lookup"><span data-stu-id="9a871-2610">Static</span></span>|<span data-ttu-id="9a871-2611">非靜態</span><span class="sxs-lookup"><span data-stu-id="9a871-2611">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="9a871-2612">建構函式</span><span class="sxs-lookup"><span data-stu-id="9a871-2612">Constructor</span></span>|<span data-ttu-id="9a871-2613">否</span><span class="sxs-lookup"><span data-stu-id="9a871-2613">No</span></span>|<span data-ttu-id="9a871-2614">否</span><span class="sxs-lookup"><span data-stu-id="9a871-2614">No</span></span>|  
|<span data-ttu-id="9a871-2615">欄位</span><span class="sxs-lookup"><span data-stu-id="9a871-2615">Field</span></span>|<span data-ttu-id="9a871-2616">否</span><span class="sxs-lookup"><span data-stu-id="9a871-2616">No</span></span>|<span data-ttu-id="9a871-2617">可以。</span><span class="sxs-lookup"><span data-stu-id="9a871-2617">Yes.</span></span> <span data-ttu-id="9a871-2618">欄位永遠是依名稱和簽章隱藏。</span><span class="sxs-lookup"><span data-stu-id="9a871-2618">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="9a871-2619">Event - 事件</span><span class="sxs-lookup"><span data-stu-id="9a871-2619">Event</span></span>|<span data-ttu-id="9a871-2620">不適用</span><span class="sxs-lookup"><span data-stu-id="9a871-2620">Not applicable</span></span>|<span data-ttu-id="9a871-2621">一般類型系統規則是繼承實作屬性的方法相同。</span><span class="sxs-lookup"><span data-stu-id="9a871-2621">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="9a871-2622">反映會視為由名稱和簽章隱藏屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-2622">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="9a871-2623">請參閱附註 2。</span><span class="sxs-lookup"><span data-stu-id="9a871-2623">See note 2 below.</span></span>|  
|<span data-ttu-id="9a871-2624">方法</span><span class="sxs-lookup"><span data-stu-id="9a871-2624">Method</span></span>|<span data-ttu-id="9a871-2625">否</span><span class="sxs-lookup"><span data-stu-id="9a871-2625">No</span></span>|<span data-ttu-id="9a871-2626">可以。</span><span class="sxs-lookup"><span data-stu-id="9a871-2626">Yes.</span></span> <span data-ttu-id="9a871-2627">（虛擬和非虛擬） 的方法可以隱藏依名稱或依名稱和簽章隱藏。</span><span class="sxs-lookup"><span data-stu-id="9a871-2627">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="9a871-2628">巢狀的類型</span><span class="sxs-lookup"><span data-stu-id="9a871-2628">Nested Type</span></span>|<span data-ttu-id="9a871-2629">否</span><span class="sxs-lookup"><span data-stu-id="9a871-2629">No</span></span>|<span data-ttu-id="9a871-2630">否</span><span class="sxs-lookup"><span data-stu-id="9a871-2630">No</span></span>|  
|<span data-ttu-id="9a871-2631">屬性</span><span class="sxs-lookup"><span data-stu-id="9a871-2631">Property</span></span>|<span data-ttu-id="9a871-2632">不適用</span><span class="sxs-lookup"><span data-stu-id="9a871-2632">Not applicable</span></span>|<span data-ttu-id="9a871-2633">一般類型系統規則是繼承實作屬性的方法相同。</span><span class="sxs-lookup"><span data-stu-id="9a871-2633">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="9a871-2634">反映會視為由名稱和簽章隱藏屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-2634">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="9a871-2635">請參閱附註 2。</span><span class="sxs-lookup"><span data-stu-id="9a871-2635">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="9a871-2636">依名稱和簽章隱藏會考慮所有組件的簽章，包括自訂修飾詞，傳回類型、 參數類型、 sentinels 和 unmanaged 呼叫慣例。</span><span class="sxs-lookup"><span data-stu-id="9a871-2636">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="9a871-2637">這是二進位比較。</span><span class="sxs-lookup"><span data-stu-id="9a871-2637">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="9a871-2638">反映的屬性和事件會依名稱和簽章隱藏。</span><span class="sxs-lookup"><span data-stu-id="9a871-2638">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="9a871-2639">如果您同時有 get 和 set 存取子的屬性在基底類別中，但衍生的類別有只有 get 存取子，在衍生的類別的屬性會隱藏基底類別屬性中，並不能存取的基底類別的 setter。</span><span class="sxs-lookup"><span data-stu-id="9a871-2639">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="9a871-2640">自訂屬性不屬於一般類型系統。</span><span class="sxs-lookup"><span data-stu-id="9a871-2640">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="9a871-2641">陣列或 COM 型別不會搜尋除非它們已經被載入資料表可用的類別。</span><span class="sxs-lookup"><span data-stu-id="9a871-2641">Arrays or COM types are not searched for unless they have already been loaded into the table of available classes.</span></span>  
  
 <span data-ttu-id="9a871-2642">`typeName` 可以在型別名稱來限定其命名空間或組件限定名稱，其中包含組件名稱規格。</span><span class="sxs-lookup"><span data-stu-id="9a871-2642">`typeName` can be the type name qualified by its namespace or an assembly-qualified name that includes an assembly name specification.</span></span> <span data-ttu-id="9a871-2643">請參閱 <xref:System.Type.AssemblyQualifiedName%2A>。</span><span class="sxs-lookup"><span data-stu-id="9a871-2643">See <xref:System.Type.AssemblyQualifiedName%2A>.</span></span>  
  
 <span data-ttu-id="9a871-2644">如果`typeName`包含命名空間，但不是組件名稱，這個方法會依此順序搜尋只呼叫物件的組件和 Mscorlib.dll。</span><span class="sxs-lookup"><span data-stu-id="9a871-2644">If `typeName` includes the namespace but not the assembly name, this method searches only the calling object's assembly and Mscorlib.dll, in that order.</span></span> <span data-ttu-id="9a871-2645">如果部分或完整的組件名稱完整限定類型名稱，這個方法會搜尋指定的組件中。</span><span class="sxs-lookup"><span data-stu-id="9a871-2645">If typeName is fully qualified with the partial or complete assembly name, this method searches in the specified assembly.</span></span> <span data-ttu-id="9a871-2646">如果組件具有強式名稱，完整的組件的名稱是必要。</span><span class="sxs-lookup"><span data-stu-id="9a871-2646">If the assembly has a strong name, a complete assembly name is required.</span></span>  
  
 <span data-ttu-id="9a871-2647"><xref:System.Type.AssemblyQualifiedName%2A>屬性會傳回完整的型別名稱，包括巢狀型別、 組件名稱和型別引數。</span><span class="sxs-lookup"><span data-stu-id="9a871-2647">The <xref:System.Type.AssemblyQualifiedName%2A> property returns a fully qualified type name including nested types, the assembly name, and type arguments.</span></span> <span data-ttu-id="9a871-2648">支援通用語言執行平台的所有編譯器將都發出的簡單名稱的巢狀類別，並反映建構查詢時，根據下列慣例 mangled 的名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-2648">All compilers that support the common language runtime will emit the simple name of a nested class, and reflection constructs a mangled name when queried, in accordance with the following conventions.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9a871-2649">在.NET Framework 2.0 版中，處理器架構會新增至組件識別，而且可以指定為組件名稱字串的一部分。</span><span class="sxs-lookup"><span data-stu-id="9a871-2649">In the .NET Framework version 2.0, processor architecture is added to assembly identity, and can be specified as part of assembly name strings.</span></span> <span data-ttu-id="9a871-2650">例如，"ProcessorArchitecture = msil"。</span><span class="sxs-lookup"><span data-stu-id="9a871-2650">For example, "ProcessorArchitecture=msil".</span></span> <span data-ttu-id="9a871-2651">不過，它不包含在所傳回的字串<xref:System.Type.AssemblyQualifiedName%2A>屬性，因為相容性。</span><span class="sxs-lookup"><span data-stu-id="9a871-2651">However, it is not included in the string returned by the <xref:System.Type.AssemblyQualifiedName%2A> property, for compatibility reasons.</span></span> <span data-ttu-id="9a871-2652">您也可以藉由建立載入類型<xref:System.Reflection.AssemblyName>物件，並將其傳遞至適當的多載<xref:System.Reflection.Assembly.Load%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-2652">You can also load types by creating an <xref:System.Reflection.AssemblyName> object and passing it to an appropriate overload of the <xref:System.Reflection.Assembly.Load%2A> method.</span></span> <span data-ttu-id="9a871-2653">您可以接著使用<xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType>方法來載入組件類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-2653">You can then use the <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> method to load types from the assembly.</span></span> <span data-ttu-id="9a871-2654">請參閱 <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="9a871-2654">See also <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=nameWithType>.</span></span>  
  
|<span data-ttu-id="9a871-2655">分隔符號</span><span class="sxs-lookup"><span data-stu-id="9a871-2655">Delimiter</span></span>|<span data-ttu-id="9a871-2656">意義</span><span class="sxs-lookup"><span data-stu-id="9a871-2656">Meaning</span></span>|  
|---------------|-------------|  
|<span data-ttu-id="9a871-2657">反斜線 (\\)</span><span class="sxs-lookup"><span data-stu-id="9a871-2657">Backslash (\\)</span></span>|<span data-ttu-id="9a871-2658">逸出字元。</span><span class="sxs-lookup"><span data-stu-id="9a871-2658">Escape character.</span></span>|  
|<span data-ttu-id="9a871-2659">倒單引號 （'） |前面有一或多個位數表示的型別參數，位於結尾的泛型型別名稱的數目。</span><span class="sxs-lookup"><span data-stu-id="9a871-2659">Backtick (\`)|Precedes one or more digits representing the number of type parameters, located at the end of the name of a generic type.</span></span>|  
|<span data-ttu-id="9a871-2660">括號 ([])</span><span class="sxs-lookup"><span data-stu-id="9a871-2660">Brackets ([])</span></span>|<span data-ttu-id="9a871-2661">將建構的泛型類型; 泛型型別引數清單在類型引數清單中，將組件限定型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-2661">Enclose a generic type argument list, for a constructed generic type; within a type argument list, enclose an assembly-qualified type.</span></span>|  
|<span data-ttu-id="9a871-2662">逗號 （，）</span><span class="sxs-lookup"><span data-stu-id="9a871-2662">Comma (,)</span></span>|<span data-ttu-id="9a871-2663">後面接著組件名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-2663">Precedes the Assembly name.</span></span>|  
|<span data-ttu-id="9a871-2664">句號 （.）</span><span class="sxs-lookup"><span data-stu-id="9a871-2664">Period (.)</span></span>|<span data-ttu-id="9a871-2665">表示命名空間識別項。</span><span class="sxs-lookup"><span data-stu-id="9a871-2665">Denotes namespace identifiers.</span></span>|  
|<span data-ttu-id="9a871-2666">加號 （+）</span><span class="sxs-lookup"><span data-stu-id="9a871-2666">Plus sign (+)</span></span>|<span data-ttu-id="9a871-2667">在之前的巢狀的類別。</span><span class="sxs-lookup"><span data-stu-id="9a871-2667">Precedes a nested class.</span></span>|  
  
 <span data-ttu-id="9a871-2668">例如，類別的完整格式的名稱可能如下所示：</span><span class="sxs-lookup"><span data-stu-id="9a871-2668">For example, the fully qualified name for a class might look like this:</span></span>  
  
```  
TopNamespace.SubNameSpace.ContainingClass+NestedClass,MyAssembly  
```  
  
 <span data-ttu-id="9a871-2669">如果命名空間已 TopNamespace.Sub+Namespace，則字串會有之前加號 （+），以逸出字元 (\\) 以防止它被解譯為巢狀分隔符號。</span><span class="sxs-lookup"><span data-stu-id="9a871-2669">If the namespace were TopNamespace.Sub+Namespace, then the string would have to precede the plus sign (+) with an escape character (\\) to prevent it from being interpreted as a nesting separator.</span></span> <span data-ttu-id="9a871-2670">反映會發出此字串，如下所示：</span><span class="sxs-lookup"><span data-stu-id="9a871-2670">Reflection emits this string as follows:</span></span>  
  
```  
TopNamespace.Sub\+Namespace.ContainingClass+NestedClass,MyAssembly  
```  
  
 <span data-ttu-id="9a871-2671">"+ +"會變成"\\+\\+"，和 「\\」 變成 「\\\\"。</span><span class="sxs-lookup"><span data-stu-id="9a871-2671">A "++" becomes "\\+\\+", and a "\\" becomes "\\\\".</span></span>  
  
 <span data-ttu-id="9a871-2672">這個限定的名稱可以保存和更新版本用來載入<xref:System.Type>。</span><span class="sxs-lookup"><span data-stu-id="9a871-2672">This qualified name can be persisted and later used to load the <xref:System.Type>.</span></span> <span data-ttu-id="9a871-2673">搜尋並載入<xref:System.Type>，使用<xref:System.Type.GetType%2A>使用型別名稱只有或使用組件限定的類型名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-2673">To search for and load a <xref:System.Type>, use <xref:System.Type.GetType%2A> either with the type name only or with the assembly qualified type name.</span></span> <span data-ttu-id="9a871-2674"><xref:System.Type.GetType%2A> 與型別名稱只會尋找<xref:System.Type>呼叫者的組件中，然後在系統組件中。</span><span class="sxs-lookup"><span data-stu-id="9a871-2674"><xref:System.Type.GetType%2A> with the type name only will look for the <xref:System.Type> in the caller's assembly and then in the System assembly.</span></span> <span data-ttu-id="9a871-2675"><xref:System.Type.GetType%2A> 與組件限定的類型名稱會尋找<xref:System.Type>任何組件中。</span><span class="sxs-lookup"><span data-stu-id="9a871-2675"><xref:System.Type.GetType%2A> with the assembly qualified type name will look for the <xref:System.Type> in any assembly.</span></span>  
  
 <span data-ttu-id="9a871-2676">類型名稱可能包含行尾字元來表示的類型，例如類型是否為參考型別、 指標類型或陣列類型的其他資訊。</span><span class="sxs-lookup"><span data-stu-id="9a871-2676">Type names may include trailing characters that denote additional information about the type, such as whether the type is a reference type, a pointer type or an array type.</span></span> <span data-ttu-id="9a871-2677">若要擷取的型別名稱，而不需要這些後置字元，請使用`t.GetElementType().ToString()`，其中`t`是型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-2677">To retrieve the type name without these trailing characters, use `t.GetElementType().ToString()`, where `t` is the type.</span></span>  
  
 <span data-ttu-id="9a871-2678">空格是相關的組件名稱以外的所有型別名稱元件。</span><span class="sxs-lookup"><span data-stu-id="9a871-2678">Spaces are relevant in all type name components except the assembly name.</span></span> <span data-ttu-id="9a871-2679">在組件名稱 '，' 分隔符號之前的空格是相關的但是 '，' 分隔符號之後的空格會被忽略。</span><span class="sxs-lookup"><span data-stu-id="9a871-2679">In the assembly name, spaces before the ',' separator are relevant, but spaces after the ',' separator are ignored.</span></span>  
  
 <span data-ttu-id="9a871-2680">泛型型別名稱的結尾倒引號 (\`) 後面接著數字，代表泛型類型引數數目。</span><span class="sxs-lookup"><span data-stu-id="9a871-2680">The name of a generic type ends with a backtick (\`) followed by digits representing the number of generic type arguments.</span></span> <span data-ttu-id="9a871-2681">此名稱的損害的目的是讓編譯器支援泛型型別具有相同名稱但具有不同數目的型別參數，在相同的範圍內發生。</span><span class="sxs-lookup"><span data-stu-id="9a871-2681">The purpose of this name mangling is to allow compilers to support generic types with the same name but with different numbers of type parameters, occurring in the same scope.</span></span> <span data-ttu-id="9a871-2682">例如，反映會傳回損害的名稱`Tuple`1` and `Tuple`2`的泛型方法`Tuple(Of T)`並`Tuple(Of T0, T1)`在 Visual Basic 中，或`Tuple<T>`和 Tuple`\<T0, T1>` Visual C# 中。</span><span class="sxs-lookup"><span data-stu-id="9a871-2682">For example, reflection returns the mangled names `Tuple`1` and `Tuple`2` from the generic methods `Tuple(Of T)` and `Tuple(Of T0, T1)` in Visual Basic, or `Tuple<T>` and Tuple`\<T0, T1>` in Visual C#.</span></span>  
  
 <span data-ttu-id="9a871-2683">為泛型類型，類型引數清單以括號、，並以逗號分隔的類型引數。</span><span class="sxs-lookup"><span data-stu-id="9a871-2683">For generic types, the type argument list is enclosed in brackets, and the type arguments are separated by commas.</span></span> <span data-ttu-id="9a871-2684">例如，泛型<xref:System.Collections.Generic.Dictionary%602>有兩個類型參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-2684">For example, a generic <xref:System.Collections.Generic.Dictionary%602> has two type parameters.</span></span> <span data-ttu-id="9a871-2685">A<xref:System.Collections.Generic.Dictionary%602>的`MyType`類型的索引鍵聯<xref:System.String>可能如下表示：</span><span class="sxs-lookup"><span data-stu-id="9a871-2685">A <xref:System.Collections.Generic.Dictionary%602> of `MyType` with keys of type <xref:System.String> might be represented as follows:</span></span>  
  
```  
System.Collections.Generic.Dictionary`2[System.String,MyType]  
```  
  
 <span data-ttu-id="9a871-2686">若要指定型別引數清單中的組件限定型別，請將括號括住的組件限定型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-2686">To specify an assembly-qualified type within a type argument list, enclose the assembly-qualified type within brackets.</span></span> <span data-ttu-id="9a871-2687">否則，逗號分隔的組件限定名稱的組件會被視為分隔其他的型別引數。</span><span class="sxs-lookup"><span data-stu-id="9a871-2687">Otherwise, the commas that separate the parts of the assembly-qualified name are interpreted as delimiting additional type arguments.</span></span> <span data-ttu-id="9a871-2688">例如，<xref:System.Collections.Generic.Dictionary%602>的`MyType`MyAssembly.dll 中，使用索引鍵的類型從<xref:System.String>，可能會以下面方式指定：</span><span class="sxs-lookup"><span data-stu-id="9a871-2688">For example, a <xref:System.Collections.Generic.Dictionary%602> of `MyType` from MyAssembly.dll, with keys of type <xref:System.String>, might be specified as follows:</span></span>  
  
```  
Type.GetType("System.Collections.Generic.Dictionary`2[System.String,[MyType,MyAssembly]]")  
```  
  
> [!NOTE]
>  <span data-ttu-id="9a871-2689">組件限定型別可以括在括弧，它必須出現在類型參數清單中。</span><span class="sxs-lookup"><span data-stu-id="9a871-2689">An assembly-qualified type can be enclosed in brackets only when it appears within a type parameter list.</span></span> <span data-ttu-id="9a871-2690">搜尋組件限定的不合格的型別的型別參數清單中的規則並符合規定及不合格的非泛型類型的規則相同。</span><span class="sxs-lookup"><span data-stu-id="9a871-2690">The rules for searching assemblies for qualified and unqualified types in type parameter lists are the same as the rules for qualified and unqualified nongeneric types.</span></span>  
  
 <span data-ttu-id="9a871-2691">可為 null 的型別是泛型類型的特殊案例。</span><span class="sxs-lookup"><span data-stu-id="9a871-2691">Nullable types are a special case of generic types.</span></span> <span data-ttu-id="9a871-2692">例如，可為 null <xref:System.Int32> "System.Nullable'1[System.Int32]"的字串表示。</span><span class="sxs-lookup"><span data-stu-id="9a871-2692">For example, a nullable <xref:System.Int32> is represented by the string "System.Nullable\`1[System.Int32]".</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9a871-2693">在 C#、 c + + 和 Visual Basic 中，您也可以取得可為 null 的型別使用型別運算子。</span><span class="sxs-lookup"><span data-stu-id="9a871-2693">In C#, C++, and Visual Basic you can also get nullable types using type operators.</span></span> <span data-ttu-id="9a871-2694">比方說，可為 null<xref:System.Boolean>型別由`typeof(Nullable<bool>)`在 C# 中，依`Nullable<Boolean>::typeid`c + + 和`GetType(Nullable(Of Boolean))`Visual Basic 中。</span><span class="sxs-lookup"><span data-stu-id="9a871-2694">For example, the nullable <xref:System.Boolean> type is returned by `typeof(Nullable<bool>)` in C#, by `Nullable<Boolean>::typeid` in C++, and by `GetType(Nullable(Of Boolean))` in Visual Basic.</span></span>  
  
 <span data-ttu-id="9a871-2695">下表顯示您所使用的語法`GetType`為各種型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-2695">The following table shows the syntax you use with `GetType` for various types.</span></span>  
  
|<span data-ttu-id="9a871-2696">若要取得</span><span class="sxs-lookup"><span data-stu-id="9a871-2696">To Get</span></span>|<span data-ttu-id="9a871-2697">使用</span><span class="sxs-lookup"><span data-stu-id="9a871-2697">Use</span></span>|  
|------------|---------|  
|<span data-ttu-id="9a871-2698">可為 null <xref:System.Int32></span><span class="sxs-lookup"><span data-stu-id="9a871-2698">A nullable <xref:System.Int32></span></span>|``Type.GetType("System.Nullable`1[System.Int32]")``|  
|<span data-ttu-id="9a871-2699">Unmanaged 的指標 `MyType`</span><span class="sxs-lookup"><span data-stu-id="9a871-2699">An unmanaged pointer to `MyType`</span></span>|`Type.GetType("MyType*")`|  
|<span data-ttu-id="9a871-2700">指標的 unmanaged 的指標 `MyType`</span><span class="sxs-lookup"><span data-stu-id="9a871-2700">An unmanaged pointer to a pointer to `MyType`</span></span>|`Type.GetType("MyType**")`|  
|<span data-ttu-id="9a871-2701">Managed 的指標或參考 `MyType`</span><span class="sxs-lookup"><span data-stu-id="9a871-2701">A managed pointer or reference to `MyType`</span></span>|<span data-ttu-id="9a871-2702">`Type.GetType("MyType&")`.</span><span class="sxs-lookup"><span data-stu-id="9a871-2702">`Type.GetType("MyType&")`.</span></span> <span data-ttu-id="9a871-2703">請注意，參考與指標不同，僅限一個層級。</span><span class="sxs-lookup"><span data-stu-id="9a871-2703">Note that unlike pointers, references are limited to one level.</span></span>|  
|<span data-ttu-id="9a871-2704">父類別和巢狀的類別</span><span class="sxs-lookup"><span data-stu-id="9a871-2704">A parent class and a nested class</span></span>|`Type.GetType("MyParentClass+MyNestedClass")`|  
|<span data-ttu-id="9a871-2705">一維陣列，其下限為 0</span><span class="sxs-lookup"><span data-stu-id="9a871-2705">A one-dimensional array with a lower bound of 0</span></span>|`Type.GetType("MyArray[]")`|  
|<span data-ttu-id="9a871-2706">下限不明的一維陣列</span><span class="sxs-lookup"><span data-stu-id="9a871-2706">A one-dimensional array with an unknown lower bound</span></span>|`Type.GetType("MyArray[*]")`|  
|<span data-ttu-id="9a871-2707">N 維陣列</span><span class="sxs-lookup"><span data-stu-id="9a871-2707">An n-dimensional array</span></span>|<span data-ttu-id="9a871-2708">逗號 （，） 的 n-1 次數總計的方括號內。</span><span class="sxs-lookup"><span data-stu-id="9a871-2708">A comma (,) inside the brackets a total of n-1 times.</span></span> <span data-ttu-id="9a871-2709">例如，`System.Object[,,]`代表三維`Object`陣列。</span><span class="sxs-lookup"><span data-stu-id="9a871-2709">For example, `System.Object[,,]` represents a three-dimensional `Object` array.</span></span>|  
|<span data-ttu-id="9a871-2710">二維陣列的陣列</span><span class="sxs-lookup"><span data-stu-id="9a871-2710">A two-dimensional array's array</span></span>|`Type.GetType("MyArray[][]")`|  
|<span data-ttu-id="9a871-2711">矩形的二維陣列下限不明</span><span class="sxs-lookup"><span data-stu-id="9a871-2711">A rectangular two-dimensional array with unknown lower bounds</span></span>|`Type.GetType("MyArray[,]")`|  
|<span data-ttu-id="9a871-2712">具有一個型別引數的泛型型別</span><span class="sxs-lookup"><span data-stu-id="9a871-2712">A generic type with one type argument</span></span>|``Type.GetType("MyGenericType`1[MyType]")``|  
|<span data-ttu-id="9a871-2713">兩個類型引數的泛型型別</span><span class="sxs-lookup"><span data-stu-id="9a871-2713">A generic type with two type arguments</span></span>|``Type.GetType("MyGenericType`2[MyType,AnotherType]")``|  
|<span data-ttu-id="9a871-2714">具有兩個組件限定型別引數的泛型型別</span><span class="sxs-lookup"><span data-stu-id="9a871-2714">A generic type with two assembly-qualified type arguments</span></span>|``Type.GetType("MyGenericType`2[[MyType,MyAssembly],[AnotherType,AnotherAssembly]]")``|  
|<span data-ttu-id="9a871-2715">使用組件限定型別引數，組件限定的泛型類型</span><span class="sxs-lookup"><span data-stu-id="9a871-2715">An assembly-qualified generic type with an assembly-qualified type argument</span></span>|``Type.GetType("MyGenericType`1[[MyType,MyAssembly]],MyGenericTypeAssembly")``|  
|<span data-ttu-id="9a871-2716">其類型引數是具有兩個類型引數的泛型型別是泛型型別</span><span class="sxs-lookup"><span data-stu-id="9a871-2716">A generic type whose type argument is a generic type with two type arguments</span></span>|``Type.GetType("MyGenericType`1[AnotherGenericType`2[MyType,AnotherType]]")``|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9a871-2717"><paramref name="typeName" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-2717"><paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="9a871-2718">叫用類別初始設定式並擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9a871-2718">A class initializer is invoked and throws an exception.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="9a871-2719"><paramref name="throwOnError" /> 為 <see langword="true" />，而且找不到類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-2719"><paramref name="throwOnError" /> is <see langword="true" /> and the type is not found.</span></span>  
  
<span data-ttu-id="9a871-2720">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-2720">-or-</span></span> 
 <span data-ttu-id="9a871-2721"><paramref name="throwOnError" /> 為 <see langword="true" />，而且 <paramref name="typeName" /> 包含無效字元，例如內嵌的定位字元。</span><span class="sxs-lookup"><span data-stu-id="9a871-2721"><paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid characters, such as an embedded tab.</span></span> 
<span data-ttu-id="9a871-2722">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-2722">-or-</span></span> 
 <span data-ttu-id="9a871-2723"><paramref name="throwOnError" /> 為 <see langword="true" />，而且 <paramref name="typeName" /> 是空字串。</span><span class="sxs-lookup"><span data-stu-id="9a871-2723"><paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> is an empty string.</span></span>  
  
<span data-ttu-id="9a871-2724">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-2724">-or-</span></span> 
 <span data-ttu-id="9a871-2725"><paramref name="throwOnError" /> 為 <see langword="true" />，而且 <paramref name="typeName" /> 代表大小無效的陣列類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-2725"><paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> represents an array type with an invalid size.</span></span>  
  
<span data-ttu-id="9a871-2726">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-2726">-or-</span></span> 
 <span data-ttu-id="9a871-2727"><paramref name="typeName" /> 代表 <see cref="T:System.TypedReference" /> 的陣列。</span><span class="sxs-lookup"><span data-stu-id="9a871-2727"><paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9a871-2728"><paramref name="throwOnError" /> 為 <see langword="true" />，而且 <paramref name="typeName" /> 包含無效的語法。</span><span class="sxs-lookup"><span data-stu-id="9a871-2728"><paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid syntax.</span></span> <span data-ttu-id="9a871-2729">例如，"MyType[,\*,]"。</span><span class="sxs-lookup"><span data-stu-id="9a871-2729">For example, "MyType[,\*,]".</span></span>  
  
<span data-ttu-id="9a871-2730">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-2730">-or-</span></span> 
 <span data-ttu-id="9a871-2731"><paramref name="typeName" /> 代表的泛型類型以指標類型、<see langword="ByRef" /> 類型或 <see cref="T:System.Void" /> 做為其中一個類型引數。</span><span class="sxs-lookup"><span data-stu-id="9a871-2731"><paramref name="typeName" /> represents a generic type that has a pointer type, a <see langword="ByRef" /> type, or <see cref="T:System.Void" /> as one of its type arguments.</span></span>  
  
<span data-ttu-id="9a871-2732">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-2732">-or-</span></span> 
 <span data-ttu-id="9a871-2733"><paramref name="typeName" /> 代表的泛型類型具有不正確的類型引數數目。</span><span class="sxs-lookup"><span data-stu-id="9a871-2733"><paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.</span></span>  
  
<span data-ttu-id="9a871-2734">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-2734">-or-</span></span> 
 <span data-ttu-id="9a871-2735"><paramref name="typeName" /> 代表泛型類型，其中一個類型引數不符合對應類型參數的條件約束。</span><span class="sxs-lookup"><span data-stu-id="9a871-2735"><paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="9a871-2736"><paramref name="throwOnError" /> 為 <see langword="true" />，而且找不到組件或組件的其中一個相依性。</span><span class="sxs-lookup"><span data-stu-id="9a871-2736"><paramref name="throwOnError" /> is <see langword="true" /> and the assembly or one of its dependencies was not found.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="9a871-2737">找到組件或其相依性的其中一個，但無法載入。</span><span class="sxs-lookup"><span data-stu-id="9a871-2737">The assembly or one of its dependencies was found, but could not be loaded.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="9a871-2738">組件或組件的其中一個相依性無效。</span><span class="sxs-lookup"><span data-stu-id="9a871-2738">The assembly or one of its dependencies is not valid.</span></span>  
  
<span data-ttu-id="9a871-2739">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-2739">-or-</span></span> 
<span data-ttu-id="9a871-2740">目前載入的通用語言執行平台是 2.0 版或更新的版本，但用來編譯組件的卻是更新的版本。</span><span class="sxs-lookup"><span data-stu-id="9a871-2740">Version 2.0 or later of the common language runtime is currently loaded, and the assembly was compiled with a later version.</span></span></exception>
        <altmember cref="T:System.String" />
        <altmember cref="T:System.TypeLoadException" />
        <altmember cref="P:System.Type.AssemblyQualifiedName" />
        <altmember cref="M:System.Reflection.Assembly.GetAssembly(System.Type)" />
        <altmember cref="M:System.Reflection.Assembly.GetType(System.String)" />
        <altmember cref="T:System.Reflection.AssemblyName" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/specifying-fully-qualified-type-names.md"><span data-ttu-id="9a871-2741">指定完整的類型名稱</span><span class="sxs-lookup"><span data-stu-id="9a871-2741">Specifying Fully Qualified Type Names</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public static Type GetType (string typeName, Func&lt;System.Reflection.AssemblyName,System.Reflection.Assembly&gt; assemblyResolver, Func&lt;System.Reflection.Assembly,string,bool,Type&gt; typeResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetType(string typeName, class System.Func`2&lt;class System.Reflection.AssemblyName, class System.Reflection.Assembly&gt; assemblyResolver, class System.Func`4&lt;class System.Reflection.Assembly, string, bool, class System.Type&gt; typeResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetType(System.String,System.Func{System.Reflection.AssemblyName,System.Reflection.Assembly},System.Func{System.Reflection.Assembly,System.String,System.Boolean,System.Type})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetType (typeName As String, assemblyResolver As Func(Of AssemblyName, Assembly), typeResolver As Func(Of Assembly, String, Boolean, Type)) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetType(System::String ^ typeName, Func&lt;System::Reflection::AssemblyName ^, System::Reflection::Assembly ^&gt; ^ assemblyResolver, Func&lt;System::Reflection::Assembly ^, System::String ^, bool, Type ^&gt; ^ typeResolver);" />
      <MemberSignature Language="F#" Value="static member GetType : string * Func&lt;System.Reflection.AssemblyName, System.Reflection.Assembly&gt; * Func&lt;System.Reflection.Assembly, string, bool, Type&gt; -&gt; Type" Usage="System.Type.GetType (typeName, assemblyResolver, typeResolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="assemblyResolver" Type="System.Func&lt;System.Reflection.AssemblyName,System.Reflection.Assembly&gt;" />
        <Parameter Name="typeResolver" Type="System.Func&lt;System.Reflection.Assembly,System.String,System.Boolean,System.Type&gt;" />
      </Parameters>
      <Docs>
        <param name="typeName"><span data-ttu-id="9a871-2742">要取得之類型的名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-2742">The name of the type to get.</span></span> <span data-ttu-id="9a871-2743">如果已提供 <paramref name="typeResolver" /> 參數，則類型名稱可為 <paramref name="typeResolver" /> 能解析的任何字串。</span><span class="sxs-lookup"><span data-stu-id="9a871-2743">If the <paramref name="typeResolver" /> parameter is provided, the type name can be any string that <paramref name="typeResolver" /> is capable of resolving.</span></span> <span data-ttu-id="9a871-2744">如果已提供 <paramref name="assemblyResolver" /> 參數或已使用標準類型解析，<paramref name="typeName" /> 就必須是組件限定名稱 (請參閱 <see cref="P:System.Type.AssemblyQualifiedName" />)，除非類型位於目前正在執行的組件或 Mscorlib.dll 中，這種情況時，此類型就能提供本身命名空間限定的類型名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-2744">If the <paramref name="assemblyResolver" /> parameter is provided or if standard type resolution is used, <paramref name="typeName" /> must be an assembly-qualified name (see <see cref="P:System.Type.AssemblyQualifiedName" />), unless the type is in the currently executing assembly or in Mscorlib.dll, in which case it is sufficient to supply the type name qualified by its namespace.</span></span></param>
        <param name="assemblyResolver"><span data-ttu-id="9a871-2745">方法，會找出並傳回 <paramref name="typeName" /> 中指定的組件。</span><span class="sxs-lookup"><span data-stu-id="9a871-2745">A method that locates and returns the assembly that is specified in <paramref name="typeName" />.</span></span> <span data-ttu-id="9a871-2746">組件名稱做為 <paramref name="assemblyResolver" /> 物件傳遞至 <see cref="T:System.Reflection.AssemblyName" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-2746">The assembly name is passed to <paramref name="assemblyResolver" /> as an <see cref="T:System.Reflection.AssemblyName" /> object.</span></span> <span data-ttu-id="9a871-2747">如果 <paramref name="typeName" /> 不包含組件名稱，則不會呼叫 <paramref name="assemblyResolver" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-2747">If <paramref name="typeName" /> does not contain the name of an assembly, <paramref name="assemblyResolver" /> is not called.</span></span> <span data-ttu-id="9a871-2748">如果未提供 <paramref name="assemblyResolver" />，則會執行標準組件解析。</span><span class="sxs-lookup"><span data-stu-id="9a871-2748">If <paramref name="assemblyResolver" /> is not supplied, standard assembly resolution is performed.</span></span>  
  
<span data-ttu-id="9a871-2749">注意：不要從未知或未受信任的呼叫端傳遞方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-2749">Caution   Do not pass methods from unknown or untrusted callers.</span></span> <span data-ttu-id="9a871-2750">這樣做可能會提高惡意程式碼的權限。</span><span class="sxs-lookup"><span data-stu-id="9a871-2750">Doing so could result in elevation of privilege for malicious code.</span></span> <span data-ttu-id="9a871-2751">只使用您所提供或熟悉的方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-2751">Use only methods that you provide or that you are familiar with.</span></span></param>
        <param name="typeResolver"><span data-ttu-id="9a871-2752">從 <paramref name="typeName" /> 或標準組件解析傳回的組件，找出並傳回由 <paramref name="assemblyResolver" /> 指定之類型的方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-2752">A method that locates and returns the type that is specified by <paramref name="typeName" /> from the assembly that is returned by <paramref name="assemblyResolver" /> or by standard assembly resolution.</span></span> <span data-ttu-id="9a871-2753">如果未提供任何組件，<paramref name="typeResolver" /> 方法會提供一個組件。</span><span class="sxs-lookup"><span data-stu-id="9a871-2753">If no assembly is provided, the <paramref name="typeResolver" /> method can provide one.</span></span> <span data-ttu-id="9a871-2754">這個方法也使用參數來指定是否執行不區分大小寫的搜尋。會傳遞 <see langword="false" /> 至該參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-2754">The method also takes a parameter that specifies whether to perform a case-insensitive search; <see langword="false" /> is passed to that parameter.</span></span>  
  
<span data-ttu-id="9a871-2755">注意：不要從未知或未受信任的呼叫端傳遞方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-2755">Caution   Do not pass methods from unknown or untrusted callers.</span></span></param>
        <summary><span data-ttu-id="9a871-2756">取得具有指定名稱的類型，並選擇性提供自訂方法來解析組件和類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-2756">Gets the type with the specified name, optionally providing custom methods to resolve the assembly and the type.</span></span></summary>
        <returns><span data-ttu-id="9a871-2757">具有指定名稱的類型；如果找不到類型，則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-2757">The type with the specified name, or <see langword="null" /> if the type is not found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-2758">這個方法和詳細的使用案例`assemblyResolver`並`typeResolver`參數可在<xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%2CSystem.Boolean%29>方法多載。</span><span class="sxs-lookup"><span data-stu-id="9a871-2758">Usage scenarios for this method and details about the `assemblyResolver` and `typeResolver` parameters can be found in the <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%2CSystem.Boolean%29> method overload.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9a871-2759">如果`typeName`找不到，呼叫<xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%29>方法會傳回`null`。</span><span class="sxs-lookup"><span data-stu-id="9a871-2759">If `typeName` cannot be found, the call to the <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%29> method returns `null`.</span></span> <span data-ttu-id="9a871-2760">它不會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9a871-2760">It does not throw an exception.</span></span> <span data-ttu-id="9a871-2761">若要控制是否發生例外狀況，請呼叫的多載<xref:System.Type.GetType%2A>方法具有`throwOnError`參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-2761">To control whether an exception is thrown, call an overload of the <xref:System.Type.GetType%2A> method that has a `throwOnError` parameter.</span></span>  
  
 <span data-ttu-id="9a871-2762">呼叫這個方法多載等同於呼叫<xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%2CSystem.Boolean%29>方法多載，並指定`false`for`throwOnError`和`ignoreCase`參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-2762">Calling this method overload is the same as calling the <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%2CSystem.Boolean%29> method overload and specifying `false` for the `throwOnError` and `ignoreCase` parameters.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9a871-2763"><paramref name="typeName" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-2763"><paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="9a871-2764">叫用類別初始設定式並擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9a871-2764">A class initializer is invoked and throws an exception.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9a871-2765">將 <paramref name="typeName" /> 剖析成類型名稱和組件名稱時 (例如簡單類型名稱包含未逸出的特殊字元時) 發生錯誤。</span><span class="sxs-lookup"><span data-stu-id="9a871-2765">An error occurs when <paramref name="typeName" /> is parsed into a type name and an assembly name (for example, when the simple type name includes an unescaped special character).</span></span>  
  
<span data-ttu-id="9a871-2766">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-2766">-or-</span></span> 
 <span data-ttu-id="9a871-2767"><paramref name="typeName" /> 代表的泛型類型以指標類型、<see langword="ByRef" /> 類型或 <see cref="T:System.Void" /> 做為其中一個類型引數。</span><span class="sxs-lookup"><span data-stu-id="9a871-2767"><paramref name="typeName" /> represents a generic type that has a pointer type, a <see langword="ByRef" /> type, or <see cref="T:System.Void" /> as one of its type arguments.</span></span>  
  
<span data-ttu-id="9a871-2768">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-2768">-or-</span></span> 
 <span data-ttu-id="9a871-2769"><paramref name="typeName" /> 代表的泛型類型具有不正確的類型引數數目。</span><span class="sxs-lookup"><span data-stu-id="9a871-2769"><paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.</span></span>  
  
<span data-ttu-id="9a871-2770">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-2770">-or-</span></span> 
 <span data-ttu-id="9a871-2771"><paramref name="typeName" /> 代表泛型類型，其中一個類型引數不符合對應類型參數的條件約束。</span><span class="sxs-lookup"><span data-stu-id="9a871-2771"><paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="9a871-2772"><paramref name="typeName" /> 代表 <see cref="T:System.TypedReference" /> 的陣列。</span><span class="sxs-lookup"><span data-stu-id="9a871-2772"><paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="9a871-2773">找到組件或其相依性的其中一個，但無法載入。</span><span class="sxs-lookup"><span data-stu-id="9a871-2773">The assembly or one of its dependencies was found, but could not be loaded.</span></span>  
  
<span data-ttu-id="9a871-2774">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-2774">-or-</span></span> 
 <span data-ttu-id="9a871-2775"><paramref name="typeName" /> 包含無效組件名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-2775"><paramref name="typeName" /> contains an invalid assembly name.</span></span>  
  
<span data-ttu-id="9a871-2776">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-2776">-or-</span></span> 
 <span data-ttu-id="9a871-2777"><paramref name="typeName" /> 是不具類型名稱的有效組件名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-2777"><paramref name="typeName" /> is a valid assembly name without a type name.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="9a871-2778">組件或組件的其中一個相依性無效。</span><span class="sxs-lookup"><span data-stu-id="9a871-2778">The assembly or one of its dependencies is not valid.</span></span>  
  
<span data-ttu-id="9a871-2779">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-2779">-or-</span></span> 
<span data-ttu-id="9a871-2780">用以編譯組件的通用語言執行平台，其版本比目前所載入的版本還要更新。</span><span class="sxs-lookup"><span data-stu-id="9a871-2780">The assembly was compiled with a later version of the common language runtime than the version that is currently loaded.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public static Type GetType (string typeName, Func&lt;System.Reflection.AssemblyName,System.Reflection.Assembly&gt; assemblyResolver, Func&lt;System.Reflection.Assembly,string,bool,Type&gt; typeResolver, bool throwOnError);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetType(string typeName, class System.Func`2&lt;class System.Reflection.AssemblyName, class System.Reflection.Assembly&gt; assemblyResolver, class System.Func`4&lt;class System.Reflection.Assembly, string, bool, class System.Type&gt; typeResolver, bool throwOnError) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetType(System.String,System.Func{System.Reflection.AssemblyName,System.Reflection.Assembly},System.Func{System.Reflection.Assembly,System.String,System.Boolean,System.Type},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetType (typeName As String, assemblyResolver As Func(Of AssemblyName, Assembly), typeResolver As Func(Of Assembly, String, Boolean, Type), throwOnError As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetType(System::String ^ typeName, Func&lt;System::Reflection::AssemblyName ^, System::Reflection::Assembly ^&gt; ^ assemblyResolver, Func&lt;System::Reflection::Assembly ^, System::String ^, bool, Type ^&gt; ^ typeResolver, bool throwOnError);" />
      <MemberSignature Language="F#" Value="static member GetType : string * Func&lt;System.Reflection.AssemblyName, System.Reflection.Assembly&gt; * Func&lt;System.Reflection.Assembly, string, bool, Type&gt; * bool -&gt; Type" Usage="System.Type.GetType (typeName, assemblyResolver, typeResolver, throwOnError)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="assemblyResolver" Type="System.Func&lt;System.Reflection.AssemblyName,System.Reflection.Assembly&gt;" />
        <Parameter Name="typeResolver" Type="System.Func&lt;System.Reflection.Assembly,System.String,System.Boolean,System.Type&gt;" />
        <Parameter Name="throwOnError" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="typeName"><span data-ttu-id="9a871-2781">要取得之類型的名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-2781">The name of the type to get.</span></span> <span data-ttu-id="9a871-2782">如果已提供 <paramref name="typeResolver" /> 參數，則類型名稱可為 <paramref name="typeResolver" /> 能解析的任何字串。</span><span class="sxs-lookup"><span data-stu-id="9a871-2782">If the <paramref name="typeResolver" /> parameter is provided, the type name can be any string that <paramref name="typeResolver" /> is capable of resolving.</span></span> <span data-ttu-id="9a871-2783">如果已提供 <paramref name="assemblyResolver" /> 參數或已使用標準類型解析，<paramref name="typeName" /> 就必須是組件限定名稱 (請參閱 <see cref="P:System.Type.AssemblyQualifiedName" />)，除非類型位於目前正在執行的組件或 Mscorlib.dll 中，這種情況時，此類型就能提供本身命名空間限定的類型名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-2783">If the <paramref name="assemblyResolver" /> parameter is provided or if standard type resolution is used, <paramref name="typeName" /> must be an assembly-qualified name (see <see cref="P:System.Type.AssemblyQualifiedName" />), unless the type is in the currently executing assembly or in Mscorlib.dll, in which case it is sufficient to supply the type name qualified by its namespace.</span></span></param>
        <param name="assemblyResolver"><span data-ttu-id="9a871-2784">方法，會找出並傳回 <paramref name="typeName" /> 中指定的組件。</span><span class="sxs-lookup"><span data-stu-id="9a871-2784">A method that locates and returns the assembly that is specified in <paramref name="typeName" />.</span></span> <span data-ttu-id="9a871-2785">組件名稱做為 <paramref name="assemblyResolver" /> 物件傳遞至 <see cref="T:System.Reflection.AssemblyName" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-2785">The assembly name is passed to <paramref name="assemblyResolver" /> as an <see cref="T:System.Reflection.AssemblyName" /> object.</span></span> <span data-ttu-id="9a871-2786">如果 <paramref name="typeName" /> 不包含組件名稱，則不會呼叫 <paramref name="assemblyResolver" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-2786">If <paramref name="typeName" /> does not contain the name of an assembly, <paramref name="assemblyResolver" /> is not called.</span></span> <span data-ttu-id="9a871-2787">如果未提供 <paramref name="assemblyResolver" />，則會執行標準組件解析。</span><span class="sxs-lookup"><span data-stu-id="9a871-2787">If <paramref name="assemblyResolver" /> is not supplied, standard assembly resolution is performed.</span></span>  
  
<span data-ttu-id="9a871-2788">注意：不要從未知或未受信任的呼叫端傳遞方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-2788">Caution   Do not pass methods from unknown or untrusted callers.</span></span> <span data-ttu-id="9a871-2789">這樣做可能會提高惡意程式碼的權限。</span><span class="sxs-lookup"><span data-stu-id="9a871-2789">Doing so could result in elevation of privilege for malicious code.</span></span> <span data-ttu-id="9a871-2790">只使用您所提供或熟悉的方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-2790">Use only methods that you provide or that you are familiar with.</span></span></param>
        <param name="typeResolver"><span data-ttu-id="9a871-2791">從 <paramref name="typeName" /> 或標準組件解析傳回的組件，找出並傳回由 <paramref name="assemblyResolver" /> 指定之類型的方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-2791">A method that locates and returns the type that is specified by <paramref name="typeName" /> from the assembly that is returned by <paramref name="assemblyResolver" /> or by standard assembly resolution.</span></span> <span data-ttu-id="9a871-2792">如果未提供任何組件，方法會提供一個組件。</span><span class="sxs-lookup"><span data-stu-id="9a871-2792">If no assembly is provided, the method can provide one.</span></span> <span data-ttu-id="9a871-2793">這個方法也使用參數來指定是否執行不區分大小寫的搜尋。會傳遞 <see langword="false" /> 至該參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-2793">The method also takes a parameter that specifies whether to perform a case-insensitive search; <see langword="false" /> is passed to that parameter.</span></span>  
  
<span data-ttu-id="9a871-2794">注意：不要從未知或未受信任的呼叫端傳遞方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-2794">Caution   Do not pass methods from unknown or untrusted callers.</span></span></param>
        <param name="throwOnError"><span data-ttu-id="9a871-2795"><see langword="true" /> 表示找不到該類型時擲回例外狀況，而 <see langword="false" /> 則表示傳回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-2795"><see langword="true" /> to throw an exception if the type cannot be found; <see langword="false" /> to return <see langword="null" />.</span></span> <span data-ttu-id="9a871-2796">指定 <see langword="false" /> 也會隱藏其他某些例外狀況條件，但並不是全部。</span><span class="sxs-lookup"><span data-stu-id="9a871-2796">Specifying <see langword="false" /> also suppresses some other exception conditions, but not all of them.</span></span> <span data-ttu-id="9a871-2797">請參閱＜例外狀況＞一節。</span><span class="sxs-lookup"><span data-stu-id="9a871-2797">See the Exceptions section.</span></span></param>
        <summary><span data-ttu-id="9a871-2798">取得具有指定名稱的類型，指定找不到類型時是否擲回例外狀況，同時選擇性提供自訂方法來解析組件和類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-2798">Gets the type with the specified name, specifying whether to throw an exception if the type is not found, and optionally providing custom methods to resolve the assembly and the type.</span></span></summary>
        <returns><span data-ttu-id="9a871-2799">具有指定名稱的類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-2799">The type with the specified name.</span></span> <span data-ttu-id="9a871-2800">如果找不到該類型，<paramref name="throwOnError" /> 參數會指定是要傳回 <see langword="null" /> 或是擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9a871-2800">If the type is not found, the <paramref name="throwOnError" /> parameter specifies whether <see langword="null" /> is returned or an exception is thrown.</span></span> <span data-ttu-id="9a871-2801">在某些情況下，不論 <paramref name="throwOnError" /> 的值為何，都會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9a871-2801">In some cases, an exception is thrown regardless of the value of <paramref name="throwOnError" />.</span></span> <span data-ttu-id="9a871-2802">請參閱＜例外狀況＞一節。</span><span class="sxs-lookup"><span data-stu-id="9a871-2802">See the Exceptions section.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-2803">這個方法和詳細的使用案例`assemblyResolver`並`typeResolver`參數可在<xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%2CSystem.Boolean%29>方法多載。</span><span class="sxs-lookup"><span data-stu-id="9a871-2803">Usage scenarios for this method and details about the `assemblyResolver` and `typeResolver` parameters can be found in the <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%2CSystem.Boolean%29> method overload.</span></span>  
  
 <span data-ttu-id="9a871-2804">呼叫這個方法多載等同於呼叫<xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%2CSystem.Boolean%29>方法多載，並指定`false`如`ignoreCase`參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-2804">Calling this method overload is the same as calling the <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%2CSystem.Boolean%29> method overload and specifying `false` for the `ignoreCase` parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9a871-2805"><paramref name="typeName" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-2805"><paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="9a871-2806">叫用類別初始設定式並擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9a871-2806">A class initializer is invoked and throws an exception.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="9a871-2807"><paramref name="throwOnError" /> 為 <see langword="true" />，而且找不到類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-2807"><paramref name="throwOnError" /> is <see langword="true" /> and the type is not found.</span></span>  
  
<span data-ttu-id="9a871-2808">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-2808">-or-</span></span> 
 <span data-ttu-id="9a871-2809"><paramref name="throwOnError" /> 為 <see langword="true" />，而且 <paramref name="typeName" /> 包含無效字元，例如內嵌的定位字元。</span><span class="sxs-lookup"><span data-stu-id="9a871-2809"><paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid characters, such as an embedded tab.</span></span> 
<span data-ttu-id="9a871-2810">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-2810">-or-</span></span> 
 <span data-ttu-id="9a871-2811"><paramref name="throwOnError" /> 為 <see langword="true" />，而且 <paramref name="typeName" /> 是空字串。</span><span class="sxs-lookup"><span data-stu-id="9a871-2811"><paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> is an empty string.</span></span>  
  
<span data-ttu-id="9a871-2812">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-2812">-or-</span></span> 
 <span data-ttu-id="9a871-2813"><paramref name="throwOnError" /> 為 <see langword="true" />，而且 <paramref name="typeName" /> 代表大小無效的陣列類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-2813"><paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> represents an array type with an invalid size.</span></span>  
  
<span data-ttu-id="9a871-2814">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-2814">-or-</span></span> 
 <span data-ttu-id="9a871-2815"><paramref name="typeName" /> 代表 <see cref="T:System.TypedReference" /> 的陣列。</span><span class="sxs-lookup"><span data-stu-id="9a871-2815"><paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9a871-2816">將 <paramref name="typeName" /> 剖析成類型名稱和組件名稱 (例如簡單類型名稱包含未逸出的特殊字元) 時發生錯誤。</span><span class="sxs-lookup"><span data-stu-id="9a871-2816">An error occurs when <paramref name="typeName" /> is parsed into a type name and an assembly name (for example, when the simple type name includes an unescaped special character).</span></span>  
  
<span data-ttu-id="9a871-2817">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-2817">-or-</span></span> 
 <span data-ttu-id="9a871-2818"><paramref name="throwOnError" /> 為 <see langword="true" />，而且 <paramref name="typeName" /> 包含無效語法 (例如 "MyType[,\*,]")。</span><span class="sxs-lookup"><span data-stu-id="9a871-2818"><paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid syntax (for example, "MyType[,\*,]").</span></span>  
  
<span data-ttu-id="9a871-2819">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-2819">-or-</span></span> 
 <span data-ttu-id="9a871-2820"><paramref name="typeName" /> 代表的泛型類型以指標類型、<see langword="ByRef" /> 類型或 <see cref="T:System.Void" /> 做為其中一個類型引數。</span><span class="sxs-lookup"><span data-stu-id="9a871-2820"><paramref name="typeName" /> represents a generic type that has a pointer type, a <see langword="ByRef" /> type, or <see cref="T:System.Void" /> as one of its type arguments.</span></span>  
  
<span data-ttu-id="9a871-2821">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-2821">-or-</span></span> 
 <span data-ttu-id="9a871-2822"><paramref name="typeName" /> 代表的泛型類型具有不正確的類型引數數目。</span><span class="sxs-lookup"><span data-stu-id="9a871-2822"><paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.</span></span>  
  
<span data-ttu-id="9a871-2823">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-2823">-or-</span></span> 
 <span data-ttu-id="9a871-2824"><paramref name="typeName" /> 代表泛型類型，其中一個類型引數不符合對應類型參數的條件約束。</span><span class="sxs-lookup"><span data-stu-id="9a871-2824"><paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="9a871-2825"><paramref name="throwOnError" /> 為 <see langword="true" />，而且找不到組件或組件的其中一個相依性。</span><span class="sxs-lookup"><span data-stu-id="9a871-2825"><paramref name="throwOnError" /> is <see langword="true" /> and the assembly or one of its dependencies was not found.</span></span>  
  
<span data-ttu-id="9a871-2826">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-2826">-or-</span></span> 
 <span data-ttu-id="9a871-2827"><paramref name="typeName" /> 包含無效組件名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-2827"><paramref name="typeName" /> contains an invalid assembly name.</span></span>  
  
<span data-ttu-id="9a871-2828">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-2828">-or-</span></span> 
 <span data-ttu-id="9a871-2829"><paramref name="typeName" /> 是不具類型名稱的有效組件名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-2829"><paramref name="typeName" /> is a valid assembly name without a type name.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="9a871-2830">找到組件或其相依性的其中一個，但無法載入。</span><span class="sxs-lookup"><span data-stu-id="9a871-2830">The assembly or one of its dependencies was found, but could not be loaded.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="9a871-2831">組件或組件的其中一個相依性無效。</span><span class="sxs-lookup"><span data-stu-id="9a871-2831">The assembly or one of its dependencies is not valid.</span></span>  
  
<span data-ttu-id="9a871-2832">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-2832">-or-</span></span> 
<span data-ttu-id="9a871-2833">用以編譯組件的通用語言執行平台，其版本比目前所載入的版本還要更新。</span><span class="sxs-lookup"><span data-stu-id="9a871-2833">The assembly was compiled with a later version of the common language runtime than the version that is currently loaded.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public static Type GetType (string typeName, Func&lt;System.Reflection.AssemblyName,System.Reflection.Assembly&gt; assemblyResolver, Func&lt;System.Reflection.Assembly,string,bool,Type&gt; typeResolver, bool throwOnError, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetType(string typeName, class System.Func`2&lt;class System.Reflection.AssemblyName, class System.Reflection.Assembly&gt; assemblyResolver, class System.Func`4&lt;class System.Reflection.Assembly, string, bool, class System.Type&gt; typeResolver, bool throwOnError, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetType(System.String,System.Func{System.Reflection.AssemblyName,System.Reflection.Assembly},System.Func{System.Reflection.Assembly,System.String,System.Boolean,System.Type},System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetType (typeName As String, assemblyResolver As Func(Of AssemblyName, Assembly), typeResolver As Func(Of Assembly, String, Boolean, Type), throwOnError As Boolean, ignoreCase As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetType(System::String ^ typeName, Func&lt;System::Reflection::AssemblyName ^, System::Reflection::Assembly ^&gt; ^ assemblyResolver, Func&lt;System::Reflection::Assembly ^, System::String ^, bool, Type ^&gt; ^ typeResolver, bool throwOnError, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="static member GetType : string * Func&lt;System.Reflection.AssemblyName, System.Reflection.Assembly&gt; * Func&lt;System.Reflection.Assembly, string, bool, Type&gt; * bool * bool -&gt; Type" Usage="System.Type.GetType (typeName, assemblyResolver, typeResolver, throwOnError, ignoreCase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="assemblyResolver" Type="System.Func&lt;System.Reflection.AssemblyName,System.Reflection.Assembly&gt;" />
        <Parameter Name="typeResolver" Type="System.Func&lt;System.Reflection.Assembly,System.String,System.Boolean,System.Type&gt;" />
        <Parameter Name="throwOnError" Type="System.Boolean" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="typeName"><span data-ttu-id="9a871-2834">要取得之類型的名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-2834">The name of the type to get.</span></span> <span data-ttu-id="9a871-2835">如果已提供 <paramref name="typeResolver" /> 參數，則類型名稱可為 <paramref name="typeResolver" /> 能解析的任何字串。</span><span class="sxs-lookup"><span data-stu-id="9a871-2835">If the <paramref name="typeResolver" /> parameter is provided, the type name can be any string that <paramref name="typeResolver" /> is capable of resolving.</span></span> <span data-ttu-id="9a871-2836">如果已提供 <paramref name="assemblyResolver" /> 參數或已使用標準類型解析，<paramref name="typeName" /> 就必須是組件限定名稱 (請參閱 <see cref="P:System.Type.AssemblyQualifiedName" />)，除非類型位於目前正在執行的組件或 Mscorlib.dll 中，這種情況時，此類型就能提供本身命名空間限定的類型名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-2836">If the <paramref name="assemblyResolver" /> parameter is provided or if standard type resolution is used, <paramref name="typeName" /> must be an assembly-qualified name (see <see cref="P:System.Type.AssemblyQualifiedName" />), unless the type is in the currently executing assembly or in Mscorlib.dll, in which case it is sufficient to supply the type name qualified by its namespace.</span></span></param>
        <param name="assemblyResolver"><span data-ttu-id="9a871-2837">方法，會找出並傳回 <paramref name="typeName" /> 中指定的組件。</span><span class="sxs-lookup"><span data-stu-id="9a871-2837">A method that locates and returns the assembly that is specified in <paramref name="typeName" />.</span></span> <span data-ttu-id="9a871-2838">組件名稱做為 <paramref name="assemblyResolver" /> 物件傳遞至 <see cref="T:System.Reflection.AssemblyName" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-2838">The assembly name is passed to <paramref name="assemblyResolver" /> as an <see cref="T:System.Reflection.AssemblyName" /> object.</span></span> <span data-ttu-id="9a871-2839">如果 <paramref name="typeName" /> 不包含組件名稱，則不會呼叫 <paramref name="assemblyResolver" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-2839">If <paramref name="typeName" /> does not contain the name of an assembly, <paramref name="assemblyResolver" /> is not called.</span></span> <span data-ttu-id="9a871-2840">如果未提供 <paramref name="assemblyResolver" />，則會執行標準組件解析。</span><span class="sxs-lookup"><span data-stu-id="9a871-2840">If <paramref name="assemblyResolver" /> is not supplied, standard assembly resolution is performed.</span></span>  
  
<span data-ttu-id="9a871-2841">注意：不要從未知或未受信任的呼叫端傳遞方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-2841">Caution   Do not pass methods from unknown or untrusted callers.</span></span> <span data-ttu-id="9a871-2842">這樣做可能會提高惡意程式碼的權限。</span><span class="sxs-lookup"><span data-stu-id="9a871-2842">Doing so could result in elevation of privilege for malicious code.</span></span> <span data-ttu-id="9a871-2843">只使用您所提供或熟悉的方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-2843">Use only methods that you provide or that you are familiar with.</span></span></param>
        <param name="typeResolver"><span data-ttu-id="9a871-2844">從 <paramref name="typeName" /> 或標準組件解析傳回的組件，找出並傳回由 <paramref name="assemblyResolver" /> 指定之類型的方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-2844">A method that locates and returns the type that is specified by <paramref name="typeName" /> from the assembly that is returned by <paramref name="assemblyResolver" /> or by standard assembly resolution.</span></span> <span data-ttu-id="9a871-2845">如果未提供任何組件，方法會提供一個組件。</span><span class="sxs-lookup"><span data-stu-id="9a871-2845">If no assembly is provided, the method can provide one.</span></span> <span data-ttu-id="9a871-2846">這個方法也使用參數來指定是否執行不區分大小寫的搜尋。會傳遞 <paramref name="ignoreCase" /> 的值至該參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-2846">The method also takes a parameter that specifies whether to perform a case-insensitive search; the value of <paramref name="ignoreCase" /> is passed to that parameter.</span></span>  
  
<span data-ttu-id="9a871-2847">注意：不要從未知或未受信任的呼叫端傳遞方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-2847">Caution   Do not pass methods from unknown or untrusted callers.</span></span></param>
        <param name="throwOnError"><span data-ttu-id="9a871-2848"><see langword="true" /> 表示找不到該類型時擲回例外狀況，而 <see langword="false" /> 則表示傳回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-2848"><see langword="true" /> to throw an exception if the type cannot be found; <see langword="false" /> to return <see langword="null" />.</span></span> <span data-ttu-id="9a871-2849">指定 <see langword="false" /> 也會隱藏其他某些例外狀況條件，但並不是全部。</span><span class="sxs-lookup"><span data-stu-id="9a871-2849">Specifying <see langword="false" /> also suppresses some other exception conditions, but not all of them.</span></span> <span data-ttu-id="9a871-2850">請參閱＜例外狀況＞一節。</span><span class="sxs-lookup"><span data-stu-id="9a871-2850">See the Exceptions section.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="9a871-2851">為 <see langword="true" /> 執行不區分大小寫的搜尋，則為 <paramref name="typeName" />；為 <see langword="false" /> 執行區分大小寫的搜尋，則為 <paramref name="typeName" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-2851"><see langword="true" /> to perform a case-insensitive search for <paramref name="typeName" />, <see langword="false" /> to perform a case-sensitive search for <paramref name="typeName" />.</span></span></param>
        <summary><span data-ttu-id="9a871-2852">取得具有指定名稱的類型，指定是否執行區分大小寫的搜尋以及找不到類型時是否擲回例外狀況，同時選擇性提供自訂方法來解析組件和類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-2852">Gets the type with the specified name, specifying whether to perform a case-sensitive search and whether to throw an exception if the type is not found, and optionally providing custom methods to resolve the assembly and the type.</span></span></summary>
        <returns><span data-ttu-id="9a871-2853">具有指定名稱的類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-2853">The type with the specified name.</span></span> <span data-ttu-id="9a871-2854">如果找不到該類型，<paramref name="throwOnError" /> 參數會指定是要傳回 <see langword="null" /> 或是擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9a871-2854">If the type is not found, the <paramref name="throwOnError" /> parameter specifies whether <see langword="null" /> is returned or an exception is thrown.</span></span> <span data-ttu-id="9a871-2855">在某些情況下，不論 <paramref name="throwOnError" /> 的值為何，都會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9a871-2855">In some cases, an exception is thrown regardless of the value of <paramref name="throwOnError" />.</span></span> <span data-ttu-id="9a871-2856">請參閱＜例外狀況＞一節。</span><span class="sxs-lookup"><span data-stu-id="9a871-2856">See the Exceptions section.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-2857">使用這個方法多載和其相關聯的多載 (<xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%29>並<xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%29>) 來取代的預設實作<xref:System.Type.GetType%2A>具有更具彈性的實作方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-2857">Use this method overload and its associated overloads (<xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%29> and <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%29>) to replace the default implementation of the <xref:System.Type.GetType%2A> method with more flexible implementations.</span></span> <span data-ttu-id="9a871-2858">藉由提供您自己解決類型名稱和包含它們的組件名稱的方法，您可以執行下列作業：</span><span class="sxs-lookup"><span data-stu-id="9a871-2858">By providing your own methods that resolve type names and the names of the assemblies that contain them, you can do the following:</span></span>  
  
-   <span data-ttu-id="9a871-2859">控制型別會從載入的組件的版本。</span><span class="sxs-lookup"><span data-stu-id="9a871-2859">Control which version of an assembly a type is loaded from.</span></span>  
  
-   <span data-ttu-id="9a871-2860">提供了另一個位置尋找不包含組件名稱的型別名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-2860">Provide another place to look for a type name that does not include an assembly name.</span></span>  
  
-   <span data-ttu-id="9a871-2861">使用部分組件名稱的組件載入。</span><span class="sxs-lookup"><span data-stu-id="9a871-2861">Load assemblies using partial assembly names.</span></span>  
  
-   <span data-ttu-id="9a871-2862">傳回的子類別<xref:System.Type?displayProperty=nameWithType>，不由 common language runtime (CLR) 建立。</span><span class="sxs-lookup"><span data-stu-id="9a871-2862">Return subclasses of <xref:System.Type?displayProperty=nameWithType> that are not created by the common language runtime (CLR).</span></span>  
  
 <span data-ttu-id="9a871-2863">比方說，在版本相容序列化這個方法可讓您使用的部分名稱來搜尋"best fit"的組件。</span><span class="sxs-lookup"><span data-stu-id="9a871-2863">For example, in version-tolerant serialization this method enables you to search for a "best fit" assembly by using a partial name.</span></span> <span data-ttu-id="9a871-2864">其他多載<xref:System.Type.GetType%2A>方法需要的組件限定類型名稱，其中包含的版本號碼。</span><span class="sxs-lookup"><span data-stu-id="9a871-2864">Other overloads of the <xref:System.Type.GetType%2A> method require an assembly-qualified type name, which includes the version number.</span></span>  
  
 <span data-ttu-id="9a871-2865">型別系統的替代實作可能要傳回的子<xref:System.Type?displayProperty=nameWithType>，不會建立由 CLR; 所有類型的其他多載會傳回<xref:System.Type.GetType%2A>方法都是執行階段型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-2865">Alternate implementations of the type system may need to return subclasses of <xref:System.Type?displayProperty=nameWithType> that are not created by the CLR; all types that are returned by other overloads of the <xref:System.Type.GetType%2A> method are runtime types.</span></span>  
  
<a name="usage_notes"></a>   
## <a name="usage-notes"></a><span data-ttu-id="9a871-2866">使用方式附註</span><span class="sxs-lookup"><span data-stu-id="9a871-2866">Usage Notes</span></span>  
 <span data-ttu-id="9a871-2867">這個方法多載和其相關聯的多載剖析`typeName`至型別和組件名稱的名稱，然後解析名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-2867">This method overload and its associated overloads parse `typeName` into the name of a type and the name of an assembly, and then resolve the names.</span></span> <span data-ttu-id="9a871-2868">解析的型別名稱之前, 的事件，是因為型別名稱必須解析組件的內容中發生的組件名稱的解析。</span><span class="sxs-lookup"><span data-stu-id="9a871-2868">Resolution of the assembly name occurs before resolution of the type name, because a type name must be resolved in the context of an assembly.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9a871-2869">如果您熟悉管理組件限定類型名稱的概念，請參閱<xref:System.Type.AssemblyQualifiedName%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-2869">If you are unfamiliar with the concept of assembly-qualified type names, see the <xref:System.Type.AssemblyQualifiedName%2A> property.</span></span>  
  
 <span data-ttu-id="9a871-2870">如果`typeName`不是組件限定名稱，就會略過組件解析。</span><span class="sxs-lookup"><span data-stu-id="9a871-2870">If `typeName` is not an assembly-qualified name, assembly resolution is skipped.</span></span> <span data-ttu-id="9a871-2871">可以 Mscorlib.dll 或目前正在執行的組件的內容中解析不合格的類型名稱，或您可以選擇性地提供中的組件`typeResolver`參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-2871">Unqualified type names can be resolved in the context of Mscorlib.dll or the currently executing assembly, or you can optionally provide an assembly in the `typeResolver` parameter.</span></span> <span data-ttu-id="9a871-2872">要包含或省略的組件名稱，不同類型的名稱解析會以表格形式顯示的效果[混合的名稱解析](#mixed_name_resolution)一節。</span><span class="sxs-lookup"><span data-stu-id="9a871-2872">The effects of including or omitting the assembly name for different kinds of name resolution are displayed as a table in the [Mixed Name Resolution](#mixed_name_resolution) section.</span></span>  
  
 <span data-ttu-id="9a871-2873">一般使用方式附註：</span><span class="sxs-lookup"><span data-stu-id="9a871-2873">General usage notes:</span></span>  
  
-   <span data-ttu-id="9a871-2874">不要傳遞至方法`assemblyResolver`或`typeResolver`如果它們是來自未知或不受信任呼叫端。</span><span class="sxs-lookup"><span data-stu-id="9a871-2874">Do not pass methods to `assemblyResolver` or `typeResolver` if they come from unknown or untrusted callers.</span></span> <span data-ttu-id="9a871-2875">只使用您所提供或熟悉的方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-2875">Use only methods that you provide or that you are familiar with.</span></span>  
  
    > [!CAUTION]
    >  <span data-ttu-id="9a871-2876">使用來自未知或不受信任呼叫端的方法，可能會造成提高權限的惡意程式碼。</span><span class="sxs-lookup"><span data-stu-id="9a871-2876">Using methods from unknown or untrusted callers could result in elevation of privilege for malicious code.</span></span>  
  
-   <span data-ttu-id="9a871-2877">如果您省略`assemblyResolver`及/或`typeResolver`參數、 值`throwOnError`參數傳遞至此執行預設的解析的方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-2877">If you omit the `assemblyResolver` and/or `typeResolver` parameters, the value of the `throwOnError` parameter is passed to the methods that perform the default resolution.</span></span>  
  
-   <span data-ttu-id="9a871-2878">如果`throwOnError`是`true`，這個方法會擲回<xref:System.TypeLoadException>當`typeResolver`會傳回`null`，和<xref:System.IO.FileNotFoundException>當`assemblyResolver`傳回`null`。</span><span class="sxs-lookup"><span data-stu-id="9a871-2878">If `throwOnError` is `true`, this method throws a <xref:System.TypeLoadException> when `typeResolver` returns `null`, and a <xref:System.IO.FileNotFoundException> when `assemblyResolver` returns `null`.</span></span>  
  
-   <span data-ttu-id="9a871-2879">這個方法不會攔截擲回例外狀況`assemblyResolver`和`typeResolver`。</span><span class="sxs-lookup"><span data-stu-id="9a871-2879">This method does not catch exceptions thrown by `assemblyResolver` and `typeResolver`.</span></span> <span data-ttu-id="9a871-2880">您負責的解析程式方法所擲回任何例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9a871-2880">You are responsible for any exceptions that are thrown by the resolver methods.</span></span>  
  
<a name="resolving_assemblies"></a>   
### <a name="resolving-assemblies"></a><span data-ttu-id="9a871-2881">解析組件</span><span class="sxs-lookup"><span data-stu-id="9a871-2881">Resolving Assemblies</span></span>  
 <span data-ttu-id="9a871-2882">`assemblyResolver`方法會接收<xref:System.Reflection.AssemblyName>物件，它會藉由剖析字串組件名稱包含在產生`typeName`。</span><span class="sxs-lookup"><span data-stu-id="9a871-2882">The `assemblyResolver` method receives an <xref:System.Reflection.AssemblyName> object, which is produced by parsing the string assembly name that is included in `typeName`.</span></span> <span data-ttu-id="9a871-2883">如果`typeName`不包含組件名稱，`assemblyResolver`就不會呼叫並`null`傳遞給`typeResolver`。</span><span class="sxs-lookup"><span data-stu-id="9a871-2883">If `typeName` does not contain an assembly name, `assemblyResolver` is not called and `null` is passed to `typeResolver`.</span></span>  
  
 <span data-ttu-id="9a871-2884">如果`assemblyResolver`不提供標準的組件探查用來尋找組件。</span><span class="sxs-lookup"><span data-stu-id="9a871-2884">If `assemblyResolver` is not supplied, standard assembly probing is used to locate the assembly.</span></span> <span data-ttu-id="9a871-2885">如果`assemblyResolver`提供，則<xref:System.Type.GetType%2A>方法不會執行標準探查; 在此情況下，您必須確定，您`assemblyResolver`可以處理您傳遞給它的所有組件。</span><span class="sxs-lookup"><span data-stu-id="9a871-2885">If `assemblyResolver` is provided, the <xref:System.Type.GetType%2A> method does not do standard probing; in that case you must ensure that your `assemblyResolver` can handle all the assemblies you pass to it.</span></span>  
  
 <span data-ttu-id="9a871-2886">`assemblyResolver`方法應傳回`null`如果無法解析組件。</span><span class="sxs-lookup"><span data-stu-id="9a871-2886">The `assemblyResolver` method should return `null` if the assembly cannot be resolved.</span></span> <span data-ttu-id="9a871-2887">如果`assemblyResolver`會傳回`null`，`typeResolver`就不會呼叫並不進行任何處理就會發生; 此外，如果`throwOnError`是`true`、<xref:System.IO.FileNotFoundException>就會擲回。</span><span class="sxs-lookup"><span data-stu-id="9a871-2887">If `assemblyResolver` returns `null`, `typeResolver` is not called and no further processing occurs; additionally, if `throwOnError` is `true`, a <xref:System.IO.FileNotFoundException> is thrown.</span></span>  
  
 <span data-ttu-id="9a871-2888">如果<xref:System.Reflection.AssemblyName>傳遞至`assemblyResolver`是部分名稱、 一或多個其組件是`null`。</span><span class="sxs-lookup"><span data-stu-id="9a871-2888">If the <xref:System.Reflection.AssemblyName> that is passed to `assemblyResolver` is a partial name, one or more of its parts are `null`.</span></span> <span data-ttu-id="9a871-2889">例如，如果不有任何版本中，<xref:System.Reflection.AssemblyName.Version%2A>屬性是`null`。</span><span class="sxs-lookup"><span data-stu-id="9a871-2889">For example, if it has no version, the <xref:System.Reflection.AssemblyName.Version%2A> property is `null`.</span></span> <span data-ttu-id="9a871-2890">如果<xref:System.Reflection.AssemblyName.Version%2A>屬性，<xref:System.Reflection.AssemblyName.CultureInfo%2A>屬性，而<xref:System.Reflection.AssemblyName.GetPublicKeyToken%2A>方法都會傳回`null`，然後提供組件的簡單名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-2890">If the <xref:System.Reflection.AssemblyName.Version%2A> property, the <xref:System.Reflection.AssemblyName.CultureInfo%2A> property, and the <xref:System.Reflection.AssemblyName.GetPublicKeyToken%2A> method all return `null`, then only the simple name of the assembly was supplied.</span></span> <span data-ttu-id="9a871-2891">`assemblyResolver`方法可以使用或忽略所有組件的組件名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-2891">The `assemblyResolver` method can use or ignore all parts of the assembly name.</span></span>  
  
 <span data-ttu-id="9a871-2892">不同的組件解析選項的效果會顯示以表格形式[混合的名稱解析](#mixed_name_resolution)區段中的，針對簡單和組件限定類型名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-2892">The effects of different assembly resolution options are displayed as a table in the [Mixed Name Resolution](#mixed_name_resolution) section, for simple and assembly-qualified type names.</span></span>  
  
<a name="resolving_types"></a>   
### <a name="resolving-types"></a><span data-ttu-id="9a871-2893">解析型別</span><span class="sxs-lookup"><span data-stu-id="9a871-2893">Resolving Types</span></span>  
 <span data-ttu-id="9a871-2894">如果`typeName`未指定組件名稱，`typeResolver`一定會呼叫。</span><span class="sxs-lookup"><span data-stu-id="9a871-2894">If `typeName` does not specify an assembly name, `typeResolver` is always called.</span></span> <span data-ttu-id="9a871-2895">如果`typeName`指定組件名稱，`typeResolver`只有成功解析組件名稱時，才會呼叫。</span><span class="sxs-lookup"><span data-stu-id="9a871-2895">If `typeName` specifies an assembly name, `typeResolver` is called only when the assembly name is successfully resolved.</span></span> <span data-ttu-id="9a871-2896">如果`assemblyResolver`或 探查傳回的標準組件`null`，`typeResolver`就不會呼叫。</span><span class="sxs-lookup"><span data-stu-id="9a871-2896">If `assemblyResolver` or standard assembly probing returns `null`, `typeResolver` is not called.</span></span>  
  
 <span data-ttu-id="9a871-2897">`typeResolver`方法接收的三個引數：</span><span class="sxs-lookup"><span data-stu-id="9a871-2897">The `typeResolver` method receives three arguments:</span></span>  
  
-   <span data-ttu-id="9a871-2898">要搜尋的組件或`null`如果`typeName`不包含組件名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-2898">The assembly to search or `null` if `typeName` does not contain an assembly name.</span></span>  
  
-   <span data-ttu-id="9a871-2899">簡單類型的名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-2899">The simple name of the type.</span></span> <span data-ttu-id="9a871-2900">當巢狀型別，這是最外層包含型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-2900">In the case of a nested type, this is the outermost containing type.</span></span> <span data-ttu-id="9a871-2901">當泛型型別，這是泛型類型的簡單名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-2901">In the case of a generic type, this is the simple name of the generic type.</span></span>  
  
-   <span data-ttu-id="9a871-2902">布林值，是`true`型別名稱的大小寫是否要忽略。</span><span class="sxs-lookup"><span data-stu-id="9a871-2902">A Boolean value that is `true` if the case of type names is to be ignored.</span></span>  
  
 <span data-ttu-id="9a871-2903">實作會判定這些引數使用的方式。</span><span class="sxs-lookup"><span data-stu-id="9a871-2903">The implementation determines the way these arguments are used.</span></span> <span data-ttu-id="9a871-2904">`typeResolver`方法應傳回`null`若無法解析型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-2904">The `typeResolver` method should return `null` if it cannot resolve the type.</span></span> <span data-ttu-id="9a871-2905">如果`typeResolver`會傳回`null`並`throwOnError`是`true`的這個多載<xref:System.Type.GetType%2A>就會擲回<xref:System.TypeLoadException>。</span><span class="sxs-lookup"><span data-stu-id="9a871-2905">If `typeResolver` returns `null` and `throwOnError` is `true`, this overload of <xref:System.Type.GetType%2A> throws a <xref:System.TypeLoadException>.</span></span>  
  
 <span data-ttu-id="9a871-2906">不同的型別解析選項的效果會顯示以表格形式[混合的名稱解析](#mixed_name_resolution)區段中的，針對簡單和組件限定類型名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-2906">The effects of different type resolution options are displayed as a table in the [Mixed Name Resolution](#mixed_name_resolution) section, for simple and assembly-qualified type names.</span></span>  
  
#### <a name="resolving-nested-types"></a><span data-ttu-id="9a871-2907">解析巢狀型別</span><span class="sxs-lookup"><span data-stu-id="9a871-2907">Resolving Nested Types</span></span>  
 <span data-ttu-id="9a871-2908">如果`typeName`是巢狀的類型，而只有名稱的最外層包含型別傳遞至`typeResolver`。</span><span class="sxs-lookup"><span data-stu-id="9a871-2908">If `typeName` is a nested type, only the name of the outermost containing type is passed to `typeResolver`.</span></span> <span data-ttu-id="9a871-2909">當`typeResolver`會傳回這個型別，<xref:System.Type.GetNestedType%2A>方法會呼叫遞迴，直到最內層的巢狀型別已解決。</span><span class="sxs-lookup"><span data-stu-id="9a871-2909">When `typeResolver` returns this type, the <xref:System.Type.GetNestedType%2A> method is called recursively until the innermost nested type has been resolved.</span></span>  
  
#### <a name="resolving-generic-types"></a><span data-ttu-id="9a871-2910">解析泛型型別</span><span class="sxs-lookup"><span data-stu-id="9a871-2910">Resolving Generic Types</span></span>  
 <span data-ttu-id="9a871-2911"><xref:System.Type.GetType%2A>稱為遞迴運作來解決泛型型別：首先要解決的泛型型別本身，然後解決它的型別引數。</span><span class="sxs-lookup"><span data-stu-id="9a871-2911">The <xref:System.Type.GetType%2A> is called recursively to resolve generic types: First to resolve the generic type itself, and then to resolve its type arguments.</span></span> <span data-ttu-id="9a871-2912">如果型別引數是泛型，<xref:System.Type.GetType%2A>稱為遞迴運作來解決其型別引數，等等。</span><span class="sxs-lookup"><span data-stu-id="9a871-2912">If a type argument is generic, <xref:System.Type.GetType%2A> is called recursively to resolve its type arguments, and so on.</span></span>  
  
 <span data-ttu-id="9a871-2913">組合`assemblyResolver`和`typeResolver`您提供必須能夠解析這類遞迴的所有層級。</span><span class="sxs-lookup"><span data-stu-id="9a871-2913">The combination of `assemblyResolver` and `typeResolver` that you provide must be capable of resolving all levels of this recursion.</span></span> <span data-ttu-id="9a871-2914">例如，假設您提供`assemblyResolver`控制載入`MyAssembly`。</span><span class="sxs-lookup"><span data-stu-id="9a871-2914">For example, suppose you supply an `assemblyResolver` that controls the loading of `MyAssembly`.</span></span> <span data-ttu-id="9a871-2915">假設您想要解析的泛型型別`Dictionary<string, MyType>`(`Dictionary(Of String, MyType)` Visual Basic 中)。</span><span class="sxs-lookup"><span data-stu-id="9a871-2915">Suppose you want to resolve the generic type `Dictionary<string, MyType>` (`Dictionary(Of String, MyType)` in Visual Basic).</span></span> <span data-ttu-id="9a871-2916">您可能會傳遞下列泛型型別名稱：</span><span class="sxs-lookup"><span data-stu-id="9a871-2916">You might pass the following generic type name:</span></span>  
  
```  
"System.Collections.Generic.Dictionary`2[System.String,[MyNamespace.MyType, MyAssembly]]"  
```  
  
 <span data-ttu-id="9a871-2917">請注意，`MyType`是只有組件限定型別引數。</span><span class="sxs-lookup"><span data-stu-id="9a871-2917">Notice that `MyType` is the only assembly-qualified type argument.</span></span> <span data-ttu-id="9a871-2918">名稱<xref:System.Collections.Generic.Dictionary%602>和<xref:System.String>類別不是組件限定。</span><span class="sxs-lookup"><span data-stu-id="9a871-2918">The names of the <xref:System.Collections.Generic.Dictionary%602> and <xref:System.String> classes are not assembly-qualified.</span></span> <span data-ttu-id="9a871-2919">您`typeResolver`必須是其中任一組件無法控制代碼或`null`，因為它會接收`null`如<xref:System.Collections.Generic.Dictionary%602>和<xref:System.String>。</span><span class="sxs-lookup"><span data-stu-id="9a871-2919">Your `typeResolver` must be able handle either an assembly or `null`, because it will receive `null` for <xref:System.Collections.Generic.Dictionary%602> and <xref:System.String>.</span></span> <span data-ttu-id="9a871-2920">它可以處理這種情況下，藉由呼叫的多載<xref:System.Type.GetType%2A>取用一個字串，因為這兩個非限定的類型名稱是在 Mscorlib.dll 中的方法：</span><span class="sxs-lookup"><span data-stu-id="9a871-2920">It can handle that case by calling an overload of the <xref:System.Type.GetType%2A> method that takes a string, because both of the unqualified type names are in Mscorlib.dll:</span></span>  
  
 [!code-csharp[GetTypeOnSteroids#1](~/samples/snippets/csharp/VS_Snippets_CLR/gettypeonsteroids/cs/source.cs#1)]  
  
 <span data-ttu-id="9a871-2921">`assemblyResolver`不會呼叫方法的字典類型和字串類型，因為這些型別名稱不是組件限定。</span><span class="sxs-lookup"><span data-stu-id="9a871-2921">The `assemblyResolver` method is not called for the dictionary type and the string type, because those type names are not assembly-qualified.</span></span>  
  
 <span data-ttu-id="9a871-2922">現在假設，而不是`System.String`，第一個泛型引數類型是`YourType`，從`YourAssembly`:</span><span class="sxs-lookup"><span data-stu-id="9a871-2922">Now suppose that instead of `System.String`, the first generic argument type is `YourType`, from `YourAssembly`:</span></span>  
  
```  
"System.Collections.Generic.Dictionary`2[[YourNamespace.YourType, YourAssembly, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null], [MyNamespace.MyType, MyAssembly]]"  
```  
  
 <span data-ttu-id="9a871-2923">因為此組件 Mscorlib.dll 或目前正在執行的組件都不，您不能解決`YourType`不含組件限定名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-2923">Because this assembly is neither Mscorlib.dll nor the currently executing assembly, you cannot resolve `YourType` without an assembly-qualified name.</span></span> <span data-ttu-id="9a871-2924">因為您`assemblyResolve`會遞迴呼叫，它必須能夠處理這種情況。</span><span class="sxs-lookup"><span data-stu-id="9a871-2924">Because your `assemblyResolve` will be called recursively, it must be able to handle this case.</span></span> <span data-ttu-id="9a871-2925">而不是傳回`null`以外的組件`MyAssembly`，它現在會執行使用所提供的組件載入<xref:System.Reflection.AssemblyName>物件。</span><span class="sxs-lookup"><span data-stu-id="9a871-2925">Instead of returning `null` for assemblies other than `MyAssembly`, it now performs an assembly load using the supplied <xref:System.Reflection.AssemblyName> object.</span></span>  
  
 [!code-csharp[GetTypeOnSteroids#2](~/samples/snippets/csharp/VS_Snippets_CLR/gettypeonsteroids/cs/source.cs#2)]  
  
 <span data-ttu-id="9a871-2926">回到[使用方式附註](#usage_notes)。</span><span class="sxs-lookup"><span data-stu-id="9a871-2926">Back to [Usage Notes](#usage_notes).</span></span>  
  
#### <a name="resolving-type-names-with-special-characters"></a><span data-ttu-id="9a871-2927">解析含有特殊字元的類型名稱</span><span class="sxs-lookup"><span data-stu-id="9a871-2927">Resolving Type Names with Special Characters</span></span>  
 <span data-ttu-id="9a871-2928">某些字元在組件限定名稱中具有特殊意義。</span><span class="sxs-lookup"><span data-stu-id="9a871-2928">Certain characters have special meanings in assembly-qualified names.</span></span> <span data-ttu-id="9a871-2929">如果是簡單類型名稱會包含這些字元，字元的簡單名稱組件限定名稱的一部分時，就會導致剖析錯誤。</span><span class="sxs-lookup"><span data-stu-id="9a871-2929">If a simple type name contains these characters, the characters cause parsing errors when the simple name is part of an assembly-qualified name.</span></span> <span data-ttu-id="9a871-2930">若要避免發生剖析錯誤，您必須逸出特殊字元加上反斜線之前您可以將傳遞的組件限定名稱<xref:System.Type.GetType%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-2930">To avoid the parsing errors, you must escape the special characters with a backslash before you can pass the assembly-qualified name to the <xref:System.Type.GetType%2A> method.</span></span> <span data-ttu-id="9a871-2931">例如，如果名為的型別`Strange]Type`，逸出字元必須加入括號前面，如下所示： `Strange\]Type`。</span><span class="sxs-lookup"><span data-stu-id="9a871-2931">For example, if a type is named `Strange]Type`, the escape character must be added ahead of the square bracket as follows: `Strange\]Type`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9a871-2932">無法在 Visual Basic 或 C# 中，建立含有這類特殊字元的名稱，但可由使用 Microsoft intermediate language (MSIL)，或發出動態組件。</span><span class="sxs-lookup"><span data-stu-id="9a871-2932">Names with such special characters cannot be created in Visual Basic or C#, but can be created by using Microsoft intermediate language (MSIL) or by emitting dynamic assemblies.</span></span>  
  
 <span data-ttu-id="9a871-2933">下表顯示型別名稱的特殊字元。</span><span class="sxs-lookup"><span data-stu-id="9a871-2933">The following table shows the special characters for type names.</span></span>  
  
|<span data-ttu-id="9a871-2934">字元</span><span class="sxs-lookup"><span data-stu-id="9a871-2934">Character</span></span>|<span data-ttu-id="9a871-2935">意義</span><span class="sxs-lookup"><span data-stu-id="9a871-2935">Meaning</span></span>|  
|---------------|-------------|  
|<span data-ttu-id="9a871-2936">`,` （逗號）</span><span class="sxs-lookup"><span data-stu-id="9a871-2936">`,` (comma)</span></span>|<span data-ttu-id="9a871-2937">組件限定名稱的分隔符號。</span><span class="sxs-lookup"><span data-stu-id="9a871-2937">Delimiter for assembly-qualified names.</span></span>|  
|<span data-ttu-id="9a871-2938">`[]` （方括弧）</span><span class="sxs-lookup"><span data-stu-id="9a871-2938">`[]` (square brackets)</span></span>|<span data-ttu-id="9a871-2939">為後置詞組，表示陣列型別;分隔符號組中，為封入泛型引數清單和組件限定名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-2939">As a suffix pair, indicates an array type; as a delimiter pair, encloses generic argument lists and assembly-qualified names.</span></span>|  
|<span data-ttu-id="9a871-2940">`&` （連字號）</span><span class="sxs-lookup"><span data-stu-id="9a871-2940">`&` (ampersand)</span></span>|<span data-ttu-id="9a871-2941">當做尾碼，表示型別是參考型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-2941">As a suffix, indicates that a type is a reference type.</span></span>|  
|<span data-ttu-id="9a871-2942">`*` （星號）</span><span class="sxs-lookup"><span data-stu-id="9a871-2942">`*` (asterisk)</span></span>|<span data-ttu-id="9a871-2943">做為尾碼，表示為型別是指標類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-2943">As a suffix, indicates that a type is a pointer type.</span></span>|  
|<span data-ttu-id="9a871-2944">`+` （加號）</span><span class="sxs-lookup"><span data-stu-id="9a871-2944">`+` (plus)</span></span>|<span data-ttu-id="9a871-2945">巢狀類型的分隔符號。</span><span class="sxs-lookup"><span data-stu-id="9a871-2945">Delimiter for nested types.</span></span>|  
|<span data-ttu-id="9a871-2946">`\` （反斜線）</span><span class="sxs-lookup"><span data-stu-id="9a871-2946">`\` (backslash)</span></span>|<span data-ttu-id="9a871-2947">逸出字元。</span><span class="sxs-lookup"><span data-stu-id="9a871-2947">Escape character.</span></span>|  
  
 <span data-ttu-id="9a871-2948">屬性，例如<xref:System.Type.AssemblyQualifiedName%2A>傳回正確逸出字串。</span><span class="sxs-lookup"><span data-stu-id="9a871-2948">Properties such as <xref:System.Type.AssemblyQualifiedName%2A> return correctly escaped strings.</span></span> <span data-ttu-id="9a871-2949">您必須傳遞正確逸出的字串<xref:System.Type.GetType%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-2949">You must pass correctly escaped strings to the <xref:System.Type.GetType%2A> method.</span></span> <span data-ttu-id="9a871-2950">依次<xref:System.Type.GetType%2A>方法會傳遞到的正確逸出的名稱`typeResolver`以及預設型別解析方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-2950">In turn, the <xref:System.Type.GetType%2A> method passes correctly escaped names to `typeResolver` and to the default type resolution methods.</span></span> <span data-ttu-id="9a871-2951">如果您要比較的名稱中的未逸出名稱`typeResolver`，您必須先移除逸出字元。</span><span class="sxs-lookup"><span data-stu-id="9a871-2951">If you need to compare a name to an unescaped name in `typeResolver`, you must remove the escape characters.</span></span>  
  
 <span data-ttu-id="9a871-2952">回到[使用方式附註](#usage_notes)。</span><span class="sxs-lookup"><span data-stu-id="9a871-2952">Back to [Usage Notes](#usage_notes).</span></span>  
  
<a name="mixed_name_resolution"></a>   
## <a name="mixed-name-resolution"></a><span data-ttu-id="9a871-2953">混合的名稱解析</span><span class="sxs-lookup"><span data-stu-id="9a871-2953">Mixed Name Resolution</span></span>  
 <span data-ttu-id="9a871-2954">下表摘要說明之間的互動`assemblyResolver`， `typeResolver`，和預設名稱解析的型別名稱和組件名稱中的所有組合`typeName`:</span><span class="sxs-lookup"><span data-stu-id="9a871-2954">The following table summarizes the interactions between `assemblyResolver`, `typeResolver`, and default name resolution, for all combinations of type name and assembly name in `typeName`:</span></span>  
  
|<span data-ttu-id="9a871-2955">型別名稱的內容</span><span class="sxs-lookup"><span data-stu-id="9a871-2955">Contents of type name</span></span>|<span data-ttu-id="9a871-2956">組件解析程式方法</span><span class="sxs-lookup"><span data-stu-id="9a871-2956">Assembly resolver method</span></span>|<span data-ttu-id="9a871-2957">類型解析程式方法</span><span class="sxs-lookup"><span data-stu-id="9a871-2957">Type resolver method</span></span>|<span data-ttu-id="9a871-2958">結果</span><span class="sxs-lookup"><span data-stu-id="9a871-2958">Result</span></span>|  
|---------------------------|------------------------------|--------------------------|------------|  
|<span data-ttu-id="9a871-2959">型別，組件</span><span class="sxs-lookup"><span data-stu-id="9a871-2959">type, assembly</span></span>|<span data-ttu-id="9a871-2960">null</span><span class="sxs-lookup"><span data-stu-id="9a871-2960">null</span></span>|<span data-ttu-id="9a871-2961">null</span><span class="sxs-lookup"><span data-stu-id="9a871-2961">null</span></span>|<span data-ttu-id="9a871-2962">相當於呼叫<xref:System.Type.GetType%28System.String%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType>方法多載。</span><span class="sxs-lookup"><span data-stu-id="9a871-2962">Equivalent to calling the <xref:System.Type.GetType%28System.String%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> method overload.</span></span>|  
|<span data-ttu-id="9a871-2963">型別，組件</span><span class="sxs-lookup"><span data-stu-id="9a871-2963">type, assembly</span></span>|<span data-ttu-id="9a871-2964">提供</span><span class="sxs-lookup"><span data-stu-id="9a871-2964">provided</span></span>|<span data-ttu-id="9a871-2965">null</span><span class="sxs-lookup"><span data-stu-id="9a871-2965">null</span></span>|<span data-ttu-id="9a871-2966">`assemblyResolver` 傳回組件，則傳回`null`若無法解析組件。</span><span class="sxs-lookup"><span data-stu-id="9a871-2966">`assemblyResolver` returns the assembly or returns `null` if it cannot resolve the assembly.</span></span> <span data-ttu-id="9a871-2967">如果組件已解決，<xref:System.Reflection.Assembly.GetType%28System.String%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType>方法多載用來從組件載入的型別; 否則就不會嘗試解析的型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-2967">If the assembly is resolved, the <xref:System.Reflection.Assembly.GetType%28System.String%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> method overload is used to load the type from the assembly; otherwise, there is no attempt to resolve the type.</span></span>|  
|<span data-ttu-id="9a871-2968">型別，組件</span><span class="sxs-lookup"><span data-stu-id="9a871-2968">type, assembly</span></span>|<span data-ttu-id="9a871-2969">null</span><span class="sxs-lookup"><span data-stu-id="9a871-2969">null</span></span>|<span data-ttu-id="9a871-2970">提供</span><span class="sxs-lookup"><span data-stu-id="9a871-2970">provided</span></span>|<span data-ttu-id="9a871-2971">相當於將轉換的組件名稱<xref:System.Reflection.AssemblyName>物件並呼叫<xref:System.Reflection.Assembly.Load%28System.Reflection.AssemblyName%29?displayProperty=nameWithType>方法多載，以取得組件。</span><span class="sxs-lookup"><span data-stu-id="9a871-2971">Equivalent to converting the assembly name to an <xref:System.Reflection.AssemblyName> object and calling the <xref:System.Reflection.Assembly.Load%28System.Reflection.AssemblyName%29?displayProperty=nameWithType> method overload to get the assembly.</span></span> <span data-ttu-id="9a871-2972">如果組件已解決，請將它傳遞給`typeResolver`; 否則即為`typeResolver`就不會呼叫，而且沒有任何進一步嘗試解析的型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-2972">If the assembly is resolved, it is passed to `typeResolver`; otherwise, `typeResolver` is not called and there is no further attempt to resolve the type.</span></span>|  
|<span data-ttu-id="9a871-2973">型別，組件</span><span class="sxs-lookup"><span data-stu-id="9a871-2973">type, assembly</span></span>|<span data-ttu-id="9a871-2974">提供</span><span class="sxs-lookup"><span data-stu-id="9a871-2974">provided</span></span>|<span data-ttu-id="9a871-2975">提供</span><span class="sxs-lookup"><span data-stu-id="9a871-2975">provided</span></span>|<span data-ttu-id="9a871-2976">`assemblyResolver` 傳回組件，則傳回`null`若無法解析組件。</span><span class="sxs-lookup"><span data-stu-id="9a871-2976">`assemblyResolver` returns the assembly or returns `null` if it cannot resolve the assembly.</span></span> <span data-ttu-id="9a871-2977">如果組件已解決，請將它傳遞給`typeResolver`; 否則即為`typeResolver`就不會呼叫，而且沒有任何進一步嘗試解析的型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-2977">If the assembly is resolved, it is passed to `typeResolver`; otherwise, `typeResolver` is not called and there is no further attempt to resolve the type.</span></span>|  
|<span data-ttu-id="9a871-2978">類型</span><span class="sxs-lookup"><span data-stu-id="9a871-2978">type</span></span>|<span data-ttu-id="9a871-2979">null、 提供</span><span class="sxs-lookup"><span data-stu-id="9a871-2979">null, provided</span></span>|<span data-ttu-id="9a871-2980">null</span><span class="sxs-lookup"><span data-stu-id="9a871-2980">null</span></span>|<span data-ttu-id="9a871-2981">相當於呼叫<xref:System.Type.GetType%28System.String%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType>方法多載。</span><span class="sxs-lookup"><span data-stu-id="9a871-2981">Equivalent to calling the <xref:System.Type.GetType%28System.String%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> method overload.</span></span> <span data-ttu-id="9a871-2982">因為未提供組件名稱，就會搜尋只有 Mscorlib.dll 和目前執行的組件。</span><span class="sxs-lookup"><span data-stu-id="9a871-2982">Because the assembly name is not provided, only Mscorlib.dll and the currently executing assembly are searched.</span></span> <span data-ttu-id="9a871-2983">如果`assemblyResolver`提供，則會忽略它。</span><span class="sxs-lookup"><span data-stu-id="9a871-2983">If `assemblyResolver` is provided, it is ignored.</span></span>|  
|<span data-ttu-id="9a871-2984">類型</span><span class="sxs-lookup"><span data-stu-id="9a871-2984">type</span></span>|<span data-ttu-id="9a871-2985">null、 提供</span><span class="sxs-lookup"><span data-stu-id="9a871-2985">null, provided</span></span>|<span data-ttu-id="9a871-2986">提供</span><span class="sxs-lookup"><span data-stu-id="9a871-2986">provided</span></span>|<span data-ttu-id="9a871-2987">`typeResolver` 呼叫時，和`null`傳遞組件。</span><span class="sxs-lookup"><span data-stu-id="9a871-2987">`typeResolver` is called, and `null` is passed for the assembly.</span></span> <span data-ttu-id="9a871-2988">`typeResolver` 可以提供任何組件，包括它的目的載入的組件中的型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-2988">`typeResolver` can provide a type from any assembly, including assemblies it loads for the purpose.</span></span> <span data-ttu-id="9a871-2989">如果`assemblyResolver`提供，則會忽略它。</span><span class="sxs-lookup"><span data-stu-id="9a871-2989">If `assemblyResolver` is provided, it is ignored.</span></span>|  
|<span data-ttu-id="9a871-2990">組件</span><span class="sxs-lookup"><span data-stu-id="9a871-2990">assembly</span></span>|<span data-ttu-id="9a871-2991">null、 提供</span><span class="sxs-lookup"><span data-stu-id="9a871-2991">null, provided</span></span>|<span data-ttu-id="9a871-2992">null、 提供</span><span class="sxs-lookup"><span data-stu-id="9a871-2992">null, provided</span></span>|<span data-ttu-id="9a871-2993">A<xref:System.IO.FileLoadException>擲回，因為組件名稱會剖析一樣的組件限定類型名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-2993">A <xref:System.IO.FileLoadException> is thrown, because the assembly name is parsed as if it were an assembly-qualified type name.</span></span> <span data-ttu-id="9a871-2994">這會導致無效的組件名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-2994">This results in an invalid assembly name.</span></span>|  
  
 <span data-ttu-id="9a871-2995">取代為：[使用方式附註](#usage_notes)，[解析組件](#resolving_assemblies)，[解析型別](#resolving_types)。</span><span class="sxs-lookup"><span data-stu-id="9a871-2995">Back to: [Usage Notes](#usage_notes), [Resolving Assemblies](#resolving_assemblies), [Resolving Types](#resolving_types).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9a871-2996"><paramref name="typeName" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-2996"><paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="9a871-2997">叫用類別初始設定式並擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9a871-2997">A class initializer is invoked and throws an exception.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="9a871-2998"><paramref name="throwOnError" /> 為 <see langword="true" />，而且找不到類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-2998"><paramref name="throwOnError" /> is <see langword="true" /> and the type is not found.</span></span>  
  
<span data-ttu-id="9a871-2999">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-2999">-or-</span></span> 
 <span data-ttu-id="9a871-3000"><paramref name="throwOnError" /> 為 <see langword="true" />，而且 <paramref name="typeName" /> 包含無效字元，例如內嵌的定位字元。</span><span class="sxs-lookup"><span data-stu-id="9a871-3000"><paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid characters, such as an embedded tab.</span></span> 
<span data-ttu-id="9a871-3001">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-3001">-or-</span></span> 
 <span data-ttu-id="9a871-3002"><paramref name="throwOnError" /> 為 <see langword="true" />，而且 <paramref name="typeName" /> 是空字串。</span><span class="sxs-lookup"><span data-stu-id="9a871-3002"><paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> is an empty string.</span></span>  
  
<span data-ttu-id="9a871-3003">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-3003">-or-</span></span> 
 <span data-ttu-id="9a871-3004"><paramref name="throwOnError" /> 為 <see langword="true" />，而且 <paramref name="typeName" /> 代表大小無效的陣列類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-3004"><paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> represents an array type with an invalid size.</span></span>  
  
<span data-ttu-id="9a871-3005">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-3005">-or-</span></span> 
 <span data-ttu-id="9a871-3006"><paramref name="typeName" /> 代表 <see cref="T:System.TypedReference" /> 的陣列。</span><span class="sxs-lookup"><span data-stu-id="9a871-3006"><paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9a871-3007">將 <paramref name="typeName" /> 剖析成類型名稱和組件名稱 (例如簡單類型名稱包含未逸出的特殊字元) 時發生錯誤。</span><span class="sxs-lookup"><span data-stu-id="9a871-3007">An error occurs when <paramref name="typeName" /> is parsed into a type name and an assembly name (for example, when the simple type name includes an unescaped special character).</span></span>  
  
<span data-ttu-id="9a871-3008">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-3008">-or-</span></span> 
 <span data-ttu-id="9a871-3009"><paramref name="throwOnError" /> 為 <see langword="true" />，而且 <paramref name="typeName" /> 包含無效語法 (例如 "MyType[,\*,]")。</span><span class="sxs-lookup"><span data-stu-id="9a871-3009"><paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid syntax (for example, "MyType[,\*,]").</span></span>  
  
<span data-ttu-id="9a871-3010">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-3010">-or-</span></span> 
 <span data-ttu-id="9a871-3011"><paramref name="typeName" /> 代表的泛型類型以指標類型、<see langword="ByRef" /> 類型或 <see cref="T:System.Void" /> 做為其中一個類型引數。</span><span class="sxs-lookup"><span data-stu-id="9a871-3011"><paramref name="typeName" /> represents a generic type that has a pointer type, a <see langword="ByRef" /> type, or <see cref="T:System.Void" /> as one of its type arguments.</span></span>  
  
<span data-ttu-id="9a871-3012">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-3012">-or-</span></span> 
 <span data-ttu-id="9a871-3013"><paramref name="typeName" /> 代表的泛型類型具有不正確的類型引數數目。</span><span class="sxs-lookup"><span data-stu-id="9a871-3013"><paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.</span></span>  
  
<span data-ttu-id="9a871-3014">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-3014">-or-</span></span> 
 <span data-ttu-id="9a871-3015"><paramref name="typeName" /> 代表泛型類型，其中一個類型引數不符合對應類型參數的條件約束。</span><span class="sxs-lookup"><span data-stu-id="9a871-3015"><paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="9a871-3016"><paramref name="throwOnError" /> 為 <see langword="true" />，而且找不到組件或組件的其中一個相依性。</span><span class="sxs-lookup"><span data-stu-id="9a871-3016"><paramref name="throwOnError" /> is <see langword="true" /> and the assembly or one of its dependencies was not found.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="9a871-3017">找到組件或其相依性的其中一個，但無法載入。</span><span class="sxs-lookup"><span data-stu-id="9a871-3017">The assembly or one of its dependencies was found, but could not be loaded.</span></span>  
  
<span data-ttu-id="9a871-3018">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-3018">-or-</span></span> 
 <span data-ttu-id="9a871-3019"><paramref name="typeName" /> 包含無效組件名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-3019"><paramref name="typeName" /> contains an invalid assembly name.</span></span>  
  
<span data-ttu-id="9a871-3020">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-3020">-or-</span></span> 
 <span data-ttu-id="9a871-3021"><paramref name="typeName" /> 是不具類型名稱的有效組件名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-3021"><paramref name="typeName" /> is a valid assembly name without a type name.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="9a871-3022">組件或組件的其中一個相依性無效。</span><span class="sxs-lookup"><span data-stu-id="9a871-3022">The assembly or one of its dependencies is not valid.</span></span>  
  
<span data-ttu-id="9a871-3023">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-3023">-or-</span></span> 
<span data-ttu-id="9a871-3024">用以編譯組件的通用語言執行平台，其版本比目前所載入的版本還要更新。</span><span class="sxs-lookup"><span data-stu-id="9a871-3024">The assembly was compiled with a later version of the common language runtime than the version that is currently loaded.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetTypeArray">
      <MemberSignature Language="C#" Value="public static Type[] GetTypeArray (object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type[] GetTypeArray(object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeArray(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeArray (args As Object()) As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;Type ^&gt; ^ GetTypeArray(cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="static member GetTypeArray : obj[] -&gt; Type[]" Usage="System.Type.GetTypeArray args" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="args"><span data-ttu-id="9a871-3025">要決定類型之物件的陣列。</span><span class="sxs-lookup"><span data-stu-id="9a871-3025">An array of objects whose types to determine.</span></span></param>
        <summary><span data-ttu-id="9a871-3026">取得指定陣列中物件的類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-3026">Gets the types of the objects in the specified array.</span></span></summary>
        <returns><span data-ttu-id="9a871-3027"><see cref="T:System.Type" /> 物件的陣列，代表 <paramref name="args" /> 中對應項目的類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-3027">An array of <see cref="T:System.Type" /> objects representing the types of the corresponding elements in <paramref name="args" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="9a871-3028">下列程式碼範例示範如何使用<xref:System.Type.GetTypeArray%2A>列出陣列的項目類型的方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-3028">The following code example demonstrates how to use the <xref:System.Type.GetTypeArray%2A> method to list the types of the elements of an array.</span></span>  
  
 [!code-cpp[Type_GetTypeCode#3](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetTypeCode/CPP/type_gettypecode.cpp#3)]
 [!code-csharp[Type_GetTypeCode#3](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetTypeCode/CS/type_gettypecode.cs#3)]
 [!code-vb[Type_GetTypeCode#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetTypeCode/VB/type_gettypecode.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9a871-3029"><paramref name="args" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3029"><paramref name="args" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="9a871-3030">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-3030">-or-</span></span> 
<span data-ttu-id="9a871-3031"><paramref name="args" /> 的其中一或多個項目為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3031">One or more of the elements in <paramref name="args" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="9a871-3032">叫用了類別初始設定式，並至少有一個會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9a871-3032">The class initializers are invoked and at least one throws an exception.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetTypeCode">
      <MemberSignature Language="C#" Value="public static TypeCode GetTypeCode (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TypeCode GetTypeCode(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeCode(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TypeCode GetTypeCode(Type ^ type);" />
      <MemberSignature Language="F#" Value="static member GetTypeCode : Type -&gt; TypeCode" Usage="System.Type.GetTypeCode type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="9a871-3033">要取得其基礎類型程式碼的類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-3033">The type whose underlying type code to get.</span></span></param>
        <summary><span data-ttu-id="9a871-3034">取得指定的 <see cref="T:System.Type" /> 的基礎類型程式碼。</span><span class="sxs-lookup"><span data-stu-id="9a871-3034">Gets the underlying type code of the specified <see cref="T:System.Type" />.</span></span></summary>
        <returns><span data-ttu-id="9a871-3035">基礎類型程式碼，如果 <see cref="F:System.TypeCode.Empty" /> 是 <paramref name="type" /> 則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3035">The code of the underlying type, or <see cref="F:System.TypeCode.Empty" /> if <paramref name="type" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-3036">當您繼承自<xref:System.Type>，您可以藉由覆寫來變更此方法的行為<xref:System.Type.GetTypeCodeImpl%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-3036">When you inherit from <xref:System.Type>, you can change the behavior of this method by overriding the <xref:System.Type.GetTypeCodeImpl%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-3037">下列程式碼範例示範如何<xref:System.TypeCode>列舉型別可用。</span><span class="sxs-lookup"><span data-stu-id="9a871-3037">The following code example demonstrates how the <xref:System.TypeCode> enumeration can be used.</span></span> <span data-ttu-id="9a871-3038">在決策區塊`WriteObjectInfo`方法中，<xref:System.TypeCode>的<xref:System.Object>會檢查參數，並適當的訊息寫入至主控台。</span><span class="sxs-lookup"><span data-stu-id="9a871-3038">In a decision block inside the `WriteObjectInfo` method, the <xref:System.TypeCode> of an <xref:System.Object> parameter is examined, and an appropriate message is written to the console.</span></span>  
  
 [!code-cpp[System.TypeCode#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TypeCode/CPP/iconvertible.cpp#2)]
 [!code-csharp[System.TypeCode#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TypeCode/CS/iconvertible.cs#2)]
 [!code-vb[System.TypeCode#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TypeCode/VB/iconvertible.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.TypeCode" />
        <altmember cref="M:System.Type.GetTypeCodeImpl" />
      </Docs>
    </Member>
    <Member MemberName="GetTypeCodeImpl">
      <MemberSignature Language="C#" Value="protected virtual TypeCode GetTypeCodeImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.TypeCode GetTypeCodeImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeCodeImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetTypeCodeImpl () As TypeCode" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual TypeCode GetTypeCodeImpl();" />
      <MemberSignature Language="F#" Value="abstract member GetTypeCodeImpl : unit -&gt; TypeCode&#xA;override this.GetTypeCodeImpl : unit -&gt; TypeCode" Usage="type.GetTypeCodeImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9a871-3039">傳回此 <see cref="T:System.Type" /> 執行個體的基礎型別碼。</span><span class="sxs-lookup"><span data-stu-id="9a871-3039">Returns the underlying type code of this <see cref="T:System.Type" /> instance.</span></span></summary>
        <returns><span data-ttu-id="9a871-3040">基礎類型的型別碼。</span><span class="sxs-lookup"><span data-stu-id="9a871-3040">The type code of the underlying type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-3041">這個方法提供實作`static`（在 C# 中) 或`Shared`（在 Visual Basic)<xref:System.Type.GetTypeCode%28System.Type%29>方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-3041">This method provides the implementation for the `static` (in C#) or `Shared` (in Visual Basic) <xref:System.Type.GetTypeCode%28System.Type%29> method.</span></span> <span data-ttu-id="9a871-3042">當您繼承自<xref:System.Type>，您可以覆寫此方法以提供您自己實作<xref:System.Type.GetTypeCode%2A>。</span><span class="sxs-lookup"><span data-stu-id="9a871-3042">When you inherit from <xref:System.Type>, you can override this method to provide your own implementation of <xref:System.Type.GetTypeCode%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.TypeCode" />
        <altmember cref="M:System.Type.GetTypeCode(System.Type)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetTypeFromCLSID">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9a871-3043">取得與指定的類別識別項 (CLSID) 關聯的類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-3043">Gets the type associated with the specified class identifier (CLSID).</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetTypeFromCLSID">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromCLSID (Guid clsid);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromCLSID(valuetype System.Guid clsid) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeFromCLSID(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeFromCLSID (clsid As Guid) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetTypeFromCLSID(Guid clsid);" />
      <MemberSignature Language="F#" Value="static member GetTypeFromCLSID : Guid -&gt; Type" Usage="System.Type.GetTypeFromCLSID clsid" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clsid" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="clsid"><span data-ttu-id="9a871-3044">要取得之類型的 CLSID。</span><span class="sxs-lookup"><span data-stu-id="9a871-3044">The CLSID of the type to get.</span></span></param>
        <summary><span data-ttu-id="9a871-3045">取得與指定的類別識別項 (CLSID) 關聯的類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-3045">Gets the type associated with the specified class identifier (CLSID).</span></span></summary>
        <returns><span data-ttu-id="9a871-3046"><see langword="System.__ComObject" /> (不論 CLSID 是否有效)。</span><span class="sxs-lookup"><span data-stu-id="9a871-3046"><see langword="System.__ComObject" /> regardless of whether the CLSID is valid.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-3047"><xref:System.Type.GetTypeFromCLSID%2A>方法支援晚期繫結存取未受管理的 COM 物件從.NET Framework 應用程式時您知道 COM 物件的類別識別項 (CLSID)。</span><span class="sxs-lookup"><span data-stu-id="9a871-3047">The <xref:System.Type.GetTypeFromCLSID%2A> method supports late-bound access to unmanaged COM objects from .NET Framework apps when you know the COM object's class identifier (CLSID).</span></span>  <span data-ttu-id="9a871-3048">COM 類別的類別識別項被定義在登錄的 HKEY_CLASSES_ROOT\CLSID 索引鍵。</span><span class="sxs-lookup"><span data-stu-id="9a871-3048">The class identifier for COM classes is defined in the HKEY_CLASSES_ROOT\CLSID key of the registry.</span></span> <span data-ttu-id="9a871-3049">您可以擷取的值<xref:System.Type.IsCOMObject%2A>屬性來判斷這個方法所傳回的型別是否為 COM 物件。</span><span class="sxs-lookup"><span data-stu-id="9a871-3049">You can retrieve the value of the <xref:System.Type.IsCOMObject%2A> property to determine whether the type returned by this method is a COM object.</span></span>  
  
> [!TIP]
>  <span data-ttu-id="9a871-3050">您可以呼叫<xref:System.Type.GetTypeFromProgID%2A>方法以晚期繫結存取 COM 物件程式設計識別項 (ProgID) 您知道。</span><span class="sxs-lookup"><span data-stu-id="9a871-3050">You can call the <xref:System.Type.GetTypeFromProgID%2A> method for late-bound access to COM objects whose programmatic identifier (ProgID) you know.</span></span>  
  
 <span data-ttu-id="9a871-3051">具現化 unmanaged 的 COM 物件的 CLSID 是兩步驟程序：</span><span class="sxs-lookup"><span data-stu-id="9a871-3051">Instantiating an unmanaged COM object from its CLSID is a two-step process:</span></span>  
  
1.  <span data-ttu-id="9a871-3052">取得<xref:System.Type>物件，表示`__ComObject`藉由呼叫對應至 CLSID<xref:System.Type.GetTypeFromCLSID%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-3052">Get a <xref:System.Type> object that represents the`__ComObject` that corresponds to the CLSID by calling the <xref:System.Type.GetTypeFromCLSID%2A> method.</span></span>  
  
2.  <span data-ttu-id="9a871-3053">呼叫<xref:System.Activator.CreateInstance%28System.Type%29?displayProperty=nameWithType>方法具現化 COM 物件。</span><span class="sxs-lookup"><span data-stu-id="9a871-3053">Call the <xref:System.Activator.CreateInstance%28System.Type%29?displayProperty=nameWithType> method to instantiate the COM object.</span></span>  
  
 <span data-ttu-id="9a871-3054">請參閱圖的範例。</span><span class="sxs-lookup"><span data-stu-id="9a871-3054">See the example for an illustration.</span></span>  
  
 <span data-ttu-id="9a871-3055"><xref:System.Type.GetTypeFromCLSID%28System.Guid%29>多載會忽略任何會具現化時，可能會發生例外狀況<xref:System.Type>物件，根據`clsid`引數。</span><span class="sxs-lookup"><span data-stu-id="9a871-3055">The <xref:System.Type.GetTypeFromCLSID%28System.Guid%29> overload ignores any exception that may occur when instantiating a <xref:System.Type> object based on the `clsid` argument.</span></span> <span data-ttu-id="9a871-3056">請注意，如果將會擲回任何例外狀況`clsid`在登錄中找不到。</span><span class="sxs-lookup"><span data-stu-id="9a871-3056">Note that no exception is thrown if `clsid` is not found in the registry.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-3057">下列範例會使用 Microsoft Word 的 CLSID[應用程式物件](https://msdn.microsoft.com/vba/word-vba/articles/application-object-word)擷取代表 Microsoft Word 應用程式的 COM 類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-3057">The following example uses the CLSID of the Microsoft Word [Application object](https://msdn.microsoft.com/vba/word-vba/articles/application-object-word) to retrieve a COM type that represents the Microsoft Word application.</span></span> <span data-ttu-id="9a871-3058">它接著會執行個體化類型藉由呼叫<xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType>方法，並將它關閉藉由呼叫[Application.Quit](https://msdn.microsoft.com/VBA/Word-VBA/articles/application-quit-method-word)方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-3058">It then instantiates the type by calling the <xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType> method, and closes it by calling the [Application.Quit](https://msdn.microsoft.com/VBA/Word-VBA/articles/application-quit-method-word) method.</span></span>  
  
 [!code-csharp[System.Type.GetTypeFromCLSID#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid1.cs#1)]
 [!code-vb[System.Type.GetTypeFromCLSID#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><span data-ttu-id="9a871-3059">這個方法是用於使用 COM 物件，不會與.NET Framework 物件。</span><span class="sxs-lookup"><span data-stu-id="9a871-3059">This method is intended for use when working with COM objects, not with .NET Framework objects.</span></span> <span data-ttu-id="9a871-3060">所有受管理的物件，包括為 COM 可見的 (也就是他們<see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" />屬性是<see langword="true" />) 由 guid<see cref="P:System.Type.GUID" />屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-3060">All managed objects, including those that are visible to COM (that is, their <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> attribute is <see langword="true" />) have a GUID that is returned by the <see cref="P:System.Type.GUID" /> property.</span></span> <span data-ttu-id="9a871-3061">雖然此方法會傳回<see cref="T:System.Type" />適用於.NET Framework 對應至 GUID 的物件，您不能使用該<see cref="T:System.Type" />物件來建立類型執行個體，藉由呼叫<see cref="M:System.Activator.CreateInstance(System.Type)" />方法，如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="9a871-3061">Although the method returns a <see cref="T:System.Type" /> object that corresponds to the GUID for .NET Framework objects, you can't use that <see cref="T:System.Type" /> object to create a type instance by calling the  <see cref="M:System.Activator.CreateInstance(System.Type)" /> method, as the following example shows.</span></span>  
  
<span data-ttu-id="9a871-3062">[!code-csharp[System.Type.GetTypeFromCLSID#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid11.cs#11)] [!code-vb[System.Type.GetTypeFromCLSID#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid11.vb#11)]</span><span class="sxs-lookup"><span data-stu-id="9a871-3062">[!code-csharp[System.Type.GetTypeFromCLSID#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid11.cs#11)] [!code-vb[System.Type.GetTypeFromCLSID#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid11.vb#11)]</span></span> 
<span data-ttu-id="9a871-3063">相反地，<see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" />只應該用來擷取的 unmanaged 的 COM 物件，與產生的 GUID<see cref="T:System.Type" />物件傳遞至<see cref="M:System.Activator.CreateInstance(System.Type)" />方法必須代表 unmanaged 的 COM 物件。</span><span class="sxs-lookup"><span data-stu-id="9a871-3063">Instead, the <see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" /> should only be used to retrieve the GUID of an unmanaged COM object, and the resulting <see cref="T:System.Type" /> object that is passed to the <see cref="M:System.Activator.CreateInstance(System.Type)" /> method must represent an unmanaged COM object.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="GetTypeFromCLSID">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromCLSID (Guid clsid, bool throwOnError);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromCLSID(valuetype System.Guid clsid, bool throwOnError) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeFromCLSID(System.Guid,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeFromCLSID (clsid As Guid, throwOnError As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetTypeFromCLSID(Guid clsid, bool throwOnError);" />
      <MemberSignature Language="F#" Value="static member GetTypeFromCLSID : Guid * bool -&gt; Type" Usage="System.Type.GetTypeFromCLSID (clsid, throwOnError)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clsid" Type="System.Guid" />
        <Parameter Name="throwOnError" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="clsid"><span data-ttu-id="9a871-3064">要取得之類型的 CLSID。</span><span class="sxs-lookup"><span data-stu-id="9a871-3064">The CLSID of the type to get.</span></span></param>
        <param name="throwOnError"><span data-ttu-id="9a871-3065"><see langword="true" />，擲回任何會發生的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9a871-3065"><see langword="true" /> to throw any exception that occurs.</span></span>  
  
<span data-ttu-id="9a871-3066">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-3066">-or-</span></span> 
 <span data-ttu-id="9a871-3067"><see langword="false" /> 則忽略任何會發生的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9a871-3067"><see langword="false" /> to ignore any exception that occurs.</span></span></param>
        <summary><span data-ttu-id="9a871-3068">取得與指定的類別識別項 (CLSID) 關聯的類型，並指定如果載入類型時發生錯誤是否擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9a871-3068">Gets the type associated with the specified class identifier (CLSID), specifying whether to throw an exception if an error occurs while loading the type.</span></span></summary>
        <returns><span data-ttu-id="9a871-3069"><see langword="System.__ComObject" /> (不論 CLSID 是否有效)。</span><span class="sxs-lookup"><span data-stu-id="9a871-3069"><see langword="System.__ComObject" /> regardless of whether the CLSID is valid.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-3070"><xref:System.Type.GetTypeFromCLSID%2A>方法支援晚期繫結存取未受管理的 COM 物件從.NET Framework 應用程式時您知道 COM 物件的類別識別項 (CLSID)。</span><span class="sxs-lookup"><span data-stu-id="9a871-3070">The <xref:System.Type.GetTypeFromCLSID%2A> method supports late-bound access to unmanaged COM objects from .NET Framework apps when you know the COM object's class identifier (CLSID).</span></span>  <span data-ttu-id="9a871-3071">COM 類別的類別識別項被定義在登錄的 HKEY_CLASSES_ROOT\CLSID 索引鍵。</span><span class="sxs-lookup"><span data-stu-id="9a871-3071">The class identifier for COM classes is defined in the HKEY_CLASSES_ROOT\CLSID key of the registry.</span></span> <span data-ttu-id="9a871-3072">您可以擷取的值<xref:System.Type.IsCOMObject%2A>屬性來判斷這個方法所傳回的型別是否為 COM 物件。</span><span class="sxs-lookup"><span data-stu-id="9a871-3072">You can retrieve the value of the <xref:System.Type.IsCOMObject%2A> property to determine whether the type returned by this method is a COM object.</span></span>  
  
> [!TIP]
>  <span data-ttu-id="9a871-3073">您可以呼叫<xref:System.Type.GetTypeFromProgID%2A>方法以晚期繫結存取 COM 物件程式設計識別項 (ProgID) 您知道。</span><span class="sxs-lookup"><span data-stu-id="9a871-3073">You can call the <xref:System.Type.GetTypeFromProgID%2A> method for late-bound access to COM objects whose programmatic identifier (ProgID) you know.</span></span>  
  
 <span data-ttu-id="9a871-3074">具現化 unmanaged 的 COM 物件的 CLSID 是兩步驟程序：</span><span class="sxs-lookup"><span data-stu-id="9a871-3074">Instantiating an unmanaged COM object from its CLSID is a two-step process:</span></span>  
  
1.  <span data-ttu-id="9a871-3075">取得<xref:System.Type>物件，表示`__ComObject`藉由呼叫對應至 CLSID<xref:System.Type.GetTypeFromCLSID%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-3075">Get a <xref:System.Type> object that represents the `__ComObject` that corresponds to the CLSID by calling the <xref:System.Type.GetTypeFromCLSID%2A> method.</span></span>  
  
2.  <span data-ttu-id="9a871-3076">呼叫<xref:System.Activator.CreateInstance%28System.Type%29?displayProperty=nameWithType>方法具現化 COM 物件。</span><span class="sxs-lookup"><span data-stu-id="9a871-3076">Call the <xref:System.Activator.CreateInstance%28System.Type%29?displayProperty=nameWithType> method to instantiate the COM object.</span></span>  
  
 <span data-ttu-id="9a871-3077">請參閱圖的範例。</span><span class="sxs-lookup"><span data-stu-id="9a871-3077">See the example for an illustration.</span></span>  
  
 <span data-ttu-id="9a871-3078">這類例外狀況<xref:System.OutOfMemoryException>指定時就會擲回`true`如`throwOnError`，但不是會取消註冊的 Clsid 為失敗。</span><span class="sxs-lookup"><span data-stu-id="9a871-3078">Exceptions such as <xref:System.OutOfMemoryException> will be thrown when specifying `true` for `throwOnError`, but it will not fail for unregistered CLSIDs.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-3079">下列範例會使用 Microsoft Word 的 CLSID[應用程式物件](https://msdn.microsoft.com/vba/word-vba/articles/application-object-word)擷取代表 Microsoft Word 應用程式的 COM 類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-3079">The following example uses the CLSID of the Microsoft Word [Application object](https://msdn.microsoft.com/vba/word-vba/articles/application-object-word) to retrieve a COM type that represents the Microsoft Word application.</span></span> <span data-ttu-id="9a871-3080">它接著會執行個體化類型藉由呼叫<xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType>方法，並將它關閉藉由呼叫[Application.Quit](https://msdn.microsoft.com/VBA/Word-VBA/articles/application-quit-method-word)方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-3080">It then instantiates the type by calling the <xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType> method, and closes it by calling the [Application.Quit](https://msdn.microsoft.com/VBA/Word-VBA/articles/application-quit-method-word) method.</span></span> <span data-ttu-id="9a871-3081">如果在載入類型時發生錯誤，則會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9a871-3081">An exception is thrown if an error occurs while loading the type.</span></span>  
  
 [!code-csharp[System.Type.GetTypeFromCLSID#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid_ex2.cs#2)]
 [!code-vb[System.Type.GetTypeFromCLSID#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid_ex2.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><span data-ttu-id="9a871-3082">這個方法是用於使用 COM 物件，不會與.NET Framework 物件。</span><span class="sxs-lookup"><span data-stu-id="9a871-3082">This method is intended for use when working with COM objects, not with .NET Framework objects.</span></span> <span data-ttu-id="9a871-3083">所有受管理的物件，包括為 COM 可見的 (也就是他們<see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" />屬性是<see langword="true" />) 由 guid<see cref="P:System.Type.GUID" />屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-3083">All managed objects, including those that are visible to COM (that is, their <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> attribute is <see langword="true" />) have a GUID that is returned by the <see cref="P:System.Type.GUID" /> property.</span></span> <span data-ttu-id="9a871-3084">雖然此方法會傳回<see cref="T:System.Type" />適用於.NET Framework 對應至 GUID 的物件，您不能使用該<see cref="T:System.Type" />物件來建立類型執行個體，藉由呼叫<see cref="M:System.Activator.CreateInstance(System.Type)" />方法，如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="9a871-3084">Although the method returns a <see cref="T:System.Type" /> object that corresponds to the GUID for .NET Framework objects, you can't use that <see cref="T:System.Type" /> object to create a type instance by calling the  <see cref="M:System.Activator.CreateInstance(System.Type)" /> method, as the following example shows.</span></span>  
  
<span data-ttu-id="9a871-3085">[!code-csharp[System.Type.GetTypeFromCLSID#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid11.cs#11)] [!code-vb[System.Type.GetTypeFromCLSID#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid11.vb#11)]</span><span class="sxs-lookup"><span data-stu-id="9a871-3085">[!code-csharp[System.Type.GetTypeFromCLSID#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid11.cs#11)] [!code-vb[System.Type.GetTypeFromCLSID#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid11.vb#11)]</span></span> 
<span data-ttu-id="9a871-3086">相反地，<see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" />只應該用來擷取的 unmanaged 的 COM 物件，與產生的 GUID<see cref="T:System.Type" />物件傳遞至<see cref="M:System.Activator.CreateInstance(System.Type)" />方法必須代表 unmanaged 的 COM 物件。</span><span class="sxs-lookup"><span data-stu-id="9a871-3086">Instead, the <see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" /> should only be used to retrieve the GUID of an unmanaged COM object, and the resulting <see cref="T:System.Type" /> object that is passed to the <see cref="M:System.Activator.CreateInstance(System.Type)" /> method must represent an unmanaged COM object.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="GetTypeFromCLSID">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromCLSID (Guid clsid, string server);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromCLSID(valuetype System.Guid clsid, string server) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeFromCLSID(System.Guid,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeFromCLSID (clsid As Guid, server As String) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetTypeFromCLSID(Guid clsid, System::String ^ server);" />
      <MemberSignature Language="F#" Value="static member GetTypeFromCLSID : Guid * string -&gt; Type" Usage="System.Type.GetTypeFromCLSID (clsid, server)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clsid" Type="System.Guid" />
        <Parameter Name="server" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="clsid"><span data-ttu-id="9a871-3087">要取得之類型的 CLSID。</span><span class="sxs-lookup"><span data-stu-id="9a871-3087">The CLSID of the type to get.</span></span></param>
        <param name="server"><span data-ttu-id="9a871-3088">要載入類型的伺服器。</span><span class="sxs-lookup"><span data-stu-id="9a871-3088">The server from which to load the type.</span></span> <span data-ttu-id="9a871-3089">如果伺服器名稱為 <see langword="null" />，此方法將會自動還原成本機電腦 (Local Machine)。</span><span class="sxs-lookup"><span data-stu-id="9a871-3089">If the server name is <see langword="null" />, this method automatically reverts to the local machine.</span></span></param>
        <summary><span data-ttu-id="9a871-3090">從指定的伺服器中，取得與指定的類別識別項 (CLSID) 相關聯的類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-3090">Gets the type associated with the specified class identifier (CLSID) from the specified server.</span></span></summary>
        <returns><span data-ttu-id="9a871-3091"><see langword="System.__ComObject" /> (不論 CLSID 是否有效)。</span><span class="sxs-lookup"><span data-stu-id="9a871-3091"><see langword="System.__ComObject" /> regardless of whether the CLSID is valid.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-3092"><xref:System.Type.GetTypeFromCLSID%2A>方法支援晚期繫結存取未受管理的 COM 物件從.NET Framework 應用程式時您知道 COM 物件的類別識別項 (CLSID)。</span><span class="sxs-lookup"><span data-stu-id="9a871-3092">The <xref:System.Type.GetTypeFromCLSID%2A> method supports late-bound access to unmanaged COM objects from .NET Framework apps when you know the COM object's class identifier (CLSID).</span></span>  <span data-ttu-id="9a871-3093">COM 類別的類別識別項被定義在登錄的 HKEY_CLASSES_ROOT\CLSID 索引鍵。</span><span class="sxs-lookup"><span data-stu-id="9a871-3093">The class identifier for COM classes is defined in the HKEY_CLASSES_ROOT\CLSID key of the registry.</span></span> <span data-ttu-id="9a871-3094">您可以擷取的值<xref:System.Type.IsCOMObject%2A>屬性來判斷這個方法所傳回的型別是否為 COM 物件。</span><span class="sxs-lookup"><span data-stu-id="9a871-3094">You can retrieve the value of the <xref:System.Type.IsCOMObject%2A> property to determine whether the type returned by this method is a COM object.</span></span>  
  
> [!TIP]
>  <span data-ttu-id="9a871-3095">您可以呼叫<xref:System.Type.GetTypeFromProgID%2A>方法以晚期繫結存取 COM 物件程式設計識別項 (ProgID) 您知道。</span><span class="sxs-lookup"><span data-stu-id="9a871-3095">You can call the <xref:System.Type.GetTypeFromProgID%2A> method for late-bound access to COM objects whose programmatic identifier (ProgID) you know.</span></span>  
  
 <span data-ttu-id="9a871-3096">具現化 unmanaged 的 COM 物件的 CLSID 是兩步驟程序：</span><span class="sxs-lookup"><span data-stu-id="9a871-3096">Instantiating an unmanaged COM object from its CLSID is a two-step process:</span></span>  
  
1.  <span data-ttu-id="9a871-3097">取得<xref:System.Type>物件，表示`__ComObject`藉由呼叫對應至 CLSID<xref:System.Type.GetTypeFromCLSID%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-3097">Get a <xref:System.Type> object that represents the `__ComObject` that corresponds to the CLSID by calling the <xref:System.Type.GetTypeFromCLSID%2A> method.</span></span>  
  
2.  <span data-ttu-id="9a871-3098">呼叫<xref:System.Activator.CreateInstance%28System.Type%29?displayProperty=nameWithType>方法具現化 COM 物件。</span><span class="sxs-lookup"><span data-stu-id="9a871-3098">Call the <xref:System.Activator.CreateInstance%28System.Type%29?displayProperty=nameWithType> method to instantiate the COM object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-3099">下列範例會使用 Microsoft Word 的 CLSID[應用程式物件](https://msdn.microsoft.com/vba/word-vba/articles/application-object-word)擷取代表 Microsoft Word 應用程式，從名為 computer17.central.contoso.com 伺服器 COM 型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-3099">The following example uses the CLSID of the Microsoft Word [Application object](https://msdn.microsoft.com/vba/word-vba/articles/application-object-word) to retrieve a COM type that represents the Microsoft Word application from a server named computer17.central.contoso.com.</span></span> <span data-ttu-id="9a871-3100">它接著會執行個體化類型藉由呼叫<xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType>方法，並將它關閉藉由呼叫[Application.Quit](https://msdn.microsoft.com/VBA/Word-VBA/articles/application-quit-method-word)方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-3100">It then instantiates the type by calling the <xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType> method, and closes it by calling the [Application.Quit](https://msdn.microsoft.com/VBA/Word-VBA/articles/application-quit-method-word) method.</span></span>  
  
 [!code-csharp[System.Type.GetTypeFromCLSID#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid_ex3.cs#3)]
 [!code-vb[System.Type.GetTypeFromCLSID#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid_ex3.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><span data-ttu-id="9a871-3101">這個方法是用於使用 COM 物件，不會與.NET Framework 物件。</span><span class="sxs-lookup"><span data-stu-id="9a871-3101">This method is intended for use when working with COM objects, not with .NET Framework objects.</span></span> <span data-ttu-id="9a871-3102">所有受管理的物件，包括為 COM 可見的 (也就是他們<see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" />屬性是<see langword="true" />) 由 guid<see cref="P:System.Type.GUID" />屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-3102">All managed objects, including those that are visible to COM (that is, their <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> attribute is <see langword="true" />) have a GUID that is returned by the <see cref="P:System.Type.GUID" /> property.</span></span> <span data-ttu-id="9a871-3103">雖然此方法會傳回<see cref="T:System.Type" />適用於.NET Framework 對應至 GUID 的物件，您不能使用該<see cref="T:System.Type" />物件來建立類型執行個體，藉由呼叫<see cref="M:System.Activator.CreateInstance(System.Type)" />方法，如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="9a871-3103">Although the method returns a <see cref="T:System.Type" /> object that corresponds to the GUID for .NET Framework objects, you can't use that <see cref="T:System.Type" /> object to create a type instance by calling the  <see cref="M:System.Activator.CreateInstance(System.Type)" /> method, as the following example shows.</span></span>  
  
<span data-ttu-id="9a871-3104">[!code-csharp[System.Type.GetTypeFromCLSID#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid11.cs#11)] [!code-vb[System.Type.GetTypeFromCLSID#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid11.vb#11)]</span><span class="sxs-lookup"><span data-stu-id="9a871-3104">[!code-csharp[System.Type.GetTypeFromCLSID#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid11.cs#11)] [!code-vb[System.Type.GetTypeFromCLSID#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid11.vb#11)]</span></span> 
<span data-ttu-id="9a871-3105">相反地，<see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" />只應該用來擷取的 unmanaged 的 COM 物件，與產生的 GUID<see cref="T:System.Type" />物件傳遞至<see cref="M:System.Activator.CreateInstance(System.Type)" />方法必須代表 unmanaged 的 COM 物件。</span><span class="sxs-lookup"><span data-stu-id="9a871-3105">Instead, the <see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" /> should only be used to retrieve the GUID of an unmanaged COM object, and the resulting <see cref="T:System.Type" /> object that is passed to the <see cref="M:System.Activator.CreateInstance(System.Type)" /> method must represent an unmanaged COM object.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="GetTypeFromCLSID">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromCLSID (Guid clsid, string server, bool throwOnError);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromCLSID(valuetype System.Guid clsid, string server, bool throwOnError) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeFromCLSID (clsid As Guid, server As String, throwOnError As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetTypeFromCLSID(Guid clsid, System::String ^ server, bool throwOnError);" />
      <MemberSignature Language="F#" Value="static member GetTypeFromCLSID : Guid * string * bool -&gt; Type" Usage="System.Type.GetTypeFromCLSID (clsid, server, throwOnError)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clsid" Type="System.Guid" />
        <Parameter Name="server" Type="System.String" />
        <Parameter Name="throwOnError" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="clsid"><span data-ttu-id="9a871-3106">要取得之類型的 CLSID。</span><span class="sxs-lookup"><span data-stu-id="9a871-3106">The CLSID of the type to get.</span></span></param>
        <param name="server"><span data-ttu-id="9a871-3107">要載入類型的伺服器。</span><span class="sxs-lookup"><span data-stu-id="9a871-3107">The server from which to load the type.</span></span> <span data-ttu-id="9a871-3108">如果伺服器名稱為 <see langword="null" />，此方法將會自動還原成本機電腦 (Local Machine)。</span><span class="sxs-lookup"><span data-stu-id="9a871-3108">If the server name is <see langword="null" />, this method automatically reverts to the local machine.</span></span></param>
        <param name="throwOnError"><span data-ttu-id="9a871-3109"><see langword="true" />，擲回任何會發生的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9a871-3109"><see langword="true" /> to throw any exception that occurs.</span></span>  
  
<span data-ttu-id="9a871-3110">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-3110">-or-</span></span> 
 <span data-ttu-id="9a871-3111"><see langword="false" /> 則忽略任何會發生的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9a871-3111"><see langword="false" /> to ignore any exception that occurs.</span></span></param>
        <summary><span data-ttu-id="9a871-3112">從指定的伺服器中，取得與指定的類別識別項 (CLSID) 相關聯的類型，並指定如果在載入類型時發生錯誤是否擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9a871-3112">Gets the type associated with the specified class identifier (CLSID) from the specified server, specifying whether to throw an exception if an error occurs while loading the type.</span></span></summary>
        <returns><span data-ttu-id="9a871-3113"><see langword="System.__ComObject" /> (不論 CLSID 是否有效)。</span><span class="sxs-lookup"><span data-stu-id="9a871-3113"><see langword="System.__ComObject" /> regardless of whether the CLSID is valid.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-3114"><xref:System.Type.GetTypeFromCLSID%2A>方法支援晚期繫結存取未受管理的 COM 物件從.NET Framework 應用程式時您知道 COM 物件的類別識別項 (CLSID)。</span><span class="sxs-lookup"><span data-stu-id="9a871-3114">The <xref:System.Type.GetTypeFromCLSID%2A> method supports late-bound access to unmanaged COM objects from .NET Framework apps when you know the COM object's class identifier (CLSID).</span></span>  <span data-ttu-id="9a871-3115">COM 類別的類別識別項被定義在登錄的 HKEY_CLASSES_ROOT\CLSID 索引鍵。</span><span class="sxs-lookup"><span data-stu-id="9a871-3115">The class identifier for COM classes is defined in the HKEY_CLASSES_ROOT\CLSID key of the registry.</span></span> <span data-ttu-id="9a871-3116">您可以擷取的值<xref:System.Type.IsCOMObject%2A>屬性來判斷這個方法所傳回的型別是否為 COM 物件。</span><span class="sxs-lookup"><span data-stu-id="9a871-3116">You can retrieve the value of the <xref:System.Type.IsCOMObject%2A> property to determine whether the type returned by this method is a COM object.</span></span>  
  
> [!TIP]
>  <span data-ttu-id="9a871-3117">您可以呼叫<xref:System.Type.GetTypeFromProgID%2A>方法以晚期繫結存取 COM 物件程式設計識別項 (ProgID) 您知道。</span><span class="sxs-lookup"><span data-stu-id="9a871-3117">You can call the <xref:System.Type.GetTypeFromProgID%2A> method for late-bound access to COM objects whose programmatic identifier (ProgID) you know.</span></span>  
  
 <span data-ttu-id="9a871-3118">具現化 unmanaged 的 COM 物件的 CLSID 是兩步驟程序：</span><span class="sxs-lookup"><span data-stu-id="9a871-3118">Instantiating an unmanaged COM object from its CLSID is a two-step process:</span></span>  
  
1.  <span data-ttu-id="9a871-3119">取得<xref:System.Type>物件，表示`__ComObject`藉由呼叫對應至 CLSID<xref:System.Type.GetTypeFromCLSID%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-3119">Get a <xref:System.Type> object that represents the `__ComObject` that corresponds to the CLSID by calling the <xref:System.Type.GetTypeFromCLSID%2A> method.</span></span>  
  
2.  <span data-ttu-id="9a871-3120">呼叫<xref:System.Activator.CreateInstance%28System.Type%29?displayProperty=nameWithType>方法具現化 COM 物件。</span><span class="sxs-lookup"><span data-stu-id="9a871-3120">Call the <xref:System.Activator.CreateInstance%28System.Type%29?displayProperty=nameWithType> method to instantiate the COM object.</span></span>  
  
 <span data-ttu-id="9a871-3121">這類例外狀況<xref:System.OutOfMemoryException>指定時就會擲回`true`如`throwOnError`，但不是會取消註冊的 Clsid 為失敗。</span><span class="sxs-lookup"><span data-stu-id="9a871-3121">Exceptions such as <xref:System.OutOfMemoryException> will be thrown when specifying `true` for `throwOnError`, but it will not fail for unregistered CLSIDs.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-3122">下列範例會使用 Microsoft Word 的 CLSID[應用程式物件](https://msdn.microsoft.com/vba/word-vba/articles/application-object-word)擷取代表 Microsoft Word 應用程式，從名為 computer17.central.contoso.com 伺服器 COM 型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-3122">The following example uses the CLSID of the Microsoft Word [Application object](https://msdn.microsoft.com/vba/word-vba/articles/application-object-word) to retrieve a COM type that represents the Microsoft Word application from a server named computer17.central.contoso.com.</span></span> <span data-ttu-id="9a871-3123">它接著會執行個體化類型藉由呼叫<xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType>方法，並將它關閉藉由呼叫[Application.Quit](https://msdn.microsoft.com/VBA/Word-VBA/articles/application-quit-method-word)方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-3123">It then instantiates the type by calling the <xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType> method, and closes it by calling the [Application.Quit](https://msdn.microsoft.com/VBA/Word-VBA/articles/application-quit-method-word) method.</span></span> <span data-ttu-id="9a871-3124">如果在載入類型時發生錯誤，則會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9a871-3124">An exception is thrown if an error occurs while loading the type.</span></span>  
  
 [!code-csharp[System.Type.GetTypeFromCLSID#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid_ex4.cs#4)]
 [!code-vb[System.Type.GetTypeFromCLSID#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid_ex4.vb#4)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><span data-ttu-id="9a871-3125">這個方法是用於使用 COM 物件，不會與.NET Framework 物件。</span><span class="sxs-lookup"><span data-stu-id="9a871-3125">This method is intended for use when working with COM objects, not with .NET Framework objects.</span></span> <span data-ttu-id="9a871-3126">所有受管理的物件，包括為 COM 可見的 (也就是他們<see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" />屬性是<see langword="true" />) 由 guid<see cref="P:System.Type.GUID" />屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-3126">All managed objects, including those that are visible to COM (that is, their <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> attribute is <see langword="true" />) have a GUID that is returned by the <see cref="P:System.Type.GUID" /> property.</span></span> <span data-ttu-id="9a871-3127">雖然<see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" />方法會傳回<see cref="T:System.Type" />物件，對應至特定的受管理物件的 GUID 不能使用該<see cref="T:System.Type" />物件來建立類型執行個體，藉由呼叫<see cref="M:System.Activator.CreateInstance(System.Type)" />方法，如下列範例顯示。</span><span class="sxs-lookup"><span data-stu-id="9a871-3127">Although the <see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" /> method returns a <see cref="T:System.Type" /> object that corresponds to the GUID for a particular managed object, you can't use that <see cref="T:System.Type" /> object to create a type instance by calling the  <see cref="M:System.Activator.CreateInstance(System.Type)" /> method, as the following example shows.</span></span>  
  
<span data-ttu-id="9a871-3128">[!code-csharp[System.Type.GetTypeFromCLSID#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid11.cs#11)] [!code-vb[System.Type.GetTypeFromCLSID#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid11.vb#11)]</span><span class="sxs-lookup"><span data-stu-id="9a871-3128">[!code-csharp[System.Type.GetTypeFromCLSID#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid11.cs#11)] [!code-vb[System.Type.GetTypeFromCLSID#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid11.vb#11)]</span></span> 
<span data-ttu-id="9a871-3129">相反地，<see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" />只應該用來擷取的 unmanaged 的 COM 物件，與產生的 GUID<see cref="T:System.Type" />物件傳遞至<see cref="M:System.Activator.CreateInstance(System.Type)" />方法必須代表 unmanaged 的 COM 物件。</span><span class="sxs-lookup"><span data-stu-id="9a871-3129">Instead, the <see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" /> should only be used to retrieve the GUID of an unmanaged COM object, and the resulting <see cref="T:System.Type" /> object that is passed to the <see cref="M:System.Activator.CreateInstance(System.Type)" /> method must represent an unmanaged COM object.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="GetTypeFromHandle">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromHandle (RuntimeTypeHandle handle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromHandle(valuetype System.RuntimeTypeHandle handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeFromHandle(System.RuntimeTypeHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeFromHandle (handle As RuntimeTypeHandle) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetTypeFromHandle(RuntimeTypeHandle handle);" />
      <MemberSignature Language="F#" Value="static member GetTypeFromHandle : RuntimeTypeHandle -&gt; Type" Usage="System.Type.GetTypeFromHandle handle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.RuntimeTypeHandle" />
      </Parameters>
      <Docs>
        <param name="handle"><span data-ttu-id="9a871-3130">參考類型的物件。</span><span class="sxs-lookup"><span data-stu-id="9a871-3130">The object that refers to the type.</span></span></param>
        <summary><span data-ttu-id="9a871-3131">取得指定的類型控制代碼所參考的類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-3131">Gets the type referenced by the specified type handle.</span></span></summary>
        <returns><span data-ttu-id="9a871-3132">由指定 <see cref="T:System.RuntimeTypeHandle" /> 參考的類型，如果 <see langword="null" /> 的 <see cref="P:System.RuntimeTypeHandle.Value" /> 屬性為 <paramref name="handle" /> 則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3132">The type referenced by the specified <see cref="T:System.RuntimeTypeHandle" />, or <see langword="null" /> if the <see cref="P:System.RuntimeTypeHandle.Value" /> property of <paramref name="handle" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-3133">點只在它們所取得的應用程式定義域中是有效的。</span><span class="sxs-lookup"><span data-stu-id="9a871-3133">The handles are valid only in the application domain in which they were obtained.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-3134">下列範例會使用<xref:System.Type.GetTypeFromHandle%2A>方法來取得<xref:System.Type>物件<xref:System.RuntimeTypeHandle>所提供<xref:System.Type.GetTypeHandle%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-3134">The following example uses the <xref:System.Type.GetTypeFromHandle%2A> method to get a <xref:System.Type> object from a <xref:System.RuntimeTypeHandle> provided by the <xref:System.Type.GetTypeHandle%2A> method.</span></span>  
  
 [!code-cpp[Type_GetTypeFromHandle#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetTypeFromHandle/CPP/type_gettypefromhandle.cpp#1)]
 [!code-csharp[Type_GetTypeFromHandle#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetTypeFromHandle/CS/type_gettypefromhandle.cs#1)]
 [!code-vb[Type_GetTypeFromHandle#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetTypeFromHandle/VB/type_gettypefromhandle.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="9a871-3135">叫用類別初始設定式並擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9a871-3135">A class initializer is invoked and throws an exception.</span></span></exception>
        <altmember cref="T:System.RuntimeTypeHandle" />
        <altmember cref="P:System.Type.TypeHandle" />
        <altmember cref="M:System.Type.GetTypeHandle(System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetTypeFromProgID">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9a871-3136">取得與指定的程式識別項 (ProgID) 相關聯的類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-3136">Gets the type associated with the specified program identifier (ProgID).</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetTypeFromProgID">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromProgID (string progID);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromProgID(string progID) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeFromProgID(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeFromProgID (progID As String) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetTypeFromProgID(System::String ^ progID);" />
      <MemberSignature Language="F#" Value="static member GetTypeFromProgID : string -&gt; Type" Usage="System.Type.GetTypeFromProgID progID" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="progID" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="progID"><span data-ttu-id="9a871-3137">要取得之類型的 ProgID。</span><span class="sxs-lookup"><span data-stu-id="9a871-3137">The ProgID of the type to get.</span></span></param>
        <summary><span data-ttu-id="9a871-3138">取得與指定的程式識別項 (ProgID) 相關聯的類型；如果在載入 <see cref="T:System.Type" /> 時發生錯誤，則傳回 null。</span><span class="sxs-lookup"><span data-stu-id="9a871-3138">Gets the type associated with the specified program identifier (ProgID), returning null if an error is encountered while loading the <see cref="T:System.Type" />.</span></span></summary>
        <returns><span data-ttu-id="9a871-3139">如果 <paramref name="progID" /> 在登錄中是有效項目，而且有類型與它相關聯，則為與指定的 ProgID 相關聯的類型，否則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3139">The type associated with the specified ProgID, if <paramref name="progID" /> is a valid entry in the registry and a type is associated with it; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-3140">這個方法提供用於 COM 支援。</span><span class="sxs-lookup"><span data-stu-id="9a871-3140">This method is provided for COM support.</span></span> <span data-ttu-id="9a871-3141">Progid 不會使用 Microsoft.NET Framework 中因為已取代命名空間的概念。</span><span class="sxs-lookup"><span data-stu-id="9a871-3141">ProgIDs are not used in the Microsoft .NET Framework because they have been superseded by the concept of namespace.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9a871-3142"><paramref name="progID" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3142"><paramref name="progID" /> is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="9a871-3143">需要完全信任立即呼叫端。</span><span class="sxs-lookup"><span data-stu-id="9a871-3143">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="9a871-3144">此成員不能由部分信任或不透明的程式碼。</span><span class="sxs-lookup"><span data-stu-id="9a871-3144">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.RegistrationServices.GetProgIdForType(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetTypeFromProgID">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromProgID (string progID, bool throwOnError);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromProgID(string progID, bool throwOnError) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeFromProgID(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeFromProgID (progID As String, throwOnError As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetTypeFromProgID(System::String ^ progID, bool throwOnError);" />
      <MemberSignature Language="F#" Value="static member GetTypeFromProgID : string * bool -&gt; Type" Usage="System.Type.GetTypeFromProgID (progID, throwOnError)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="progID" Type="System.String" />
        <Parameter Name="throwOnError" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="progID"><span data-ttu-id="9a871-3145">要取得之類型的 ProgID。</span><span class="sxs-lookup"><span data-stu-id="9a871-3145">The ProgID of the type to get.</span></span></param>
        <param name="throwOnError"><span data-ttu-id="9a871-3146"><see langword="true" />，擲回任何會發生的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9a871-3146"><see langword="true" /> to throw any exception that occurs.</span></span>  
  
<span data-ttu-id="9a871-3147">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-3147">-or-</span></span> 
 <span data-ttu-id="9a871-3148"><see langword="false" /> 則忽略任何會發生的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9a871-3148"><see langword="false" /> to ignore any exception that occurs.</span></span></param>
        <summary><span data-ttu-id="9a871-3149">取得與指定的程式識別項 (ProgID) 相關聯的類型，並指定如果在載入類型時發生錯誤是否擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9a871-3149">Gets the type associated with the specified program identifier (ProgID), specifying whether to throw an exception if an error occurs while loading the type.</span></span></summary>
        <returns><span data-ttu-id="9a871-3150">如果 <paramref name="progID" /> 在登錄中是有效的項目，且有與其相關聯的類型，則為與指定的程式識別項 (progID) 相關聯的類型，否則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3150">The type associated with the specified program identifier (ProgID), if <paramref name="progID" /> is a valid entry in the registry and a type is associated with it; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-3151">這個方法提供用於 COM 支援。</span><span class="sxs-lookup"><span data-stu-id="9a871-3151">This method is provided for COM support.</span></span> <span data-ttu-id="9a871-3152">因為已取代命名空間的概念，程式識別碼不會使用 Microsoft.NET Framework 中。</span><span class="sxs-lookup"><span data-stu-id="9a871-3152">Program IDs are not used in Microsoft .NET Framework because they have been superseded by the concept of namespace.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-3153">下列範例會擷取藉由傳遞 ProgID，指定是否要擲回例外狀況，如果是無效的 ProgID 的型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-3153">The following example retrieves a type by passing a ProgID, specifying whether to throw an exception if the ProgID is invalid.</span></span> <span data-ttu-id="9a871-3154">此範例接著會顯示相關的 ProgID，以及任何適用的例外狀況訊息的 ClassID。</span><span class="sxs-lookup"><span data-stu-id="9a871-3154">The example then displays the ClassID related to the ProgID, along with any applicable exception message.</span></span>  
  
 [!code-cpp[Type_GetTypeFromProgID2#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetTypeFromProgID2/CPP/type_gettypefromprogid2.cpp#1)]
 [!code-csharp[Type_GetTypeFromProgID2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetTypeFromProgID2/CS/type_gettypefromprogid2.cs#1)]
 [!code-vb[Type_GetTypeFromProgID2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetTypeFromProgID2/VB/type_gettypefromprogid2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9a871-3155"><paramref name="progID" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3155"><paramref name="progID" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Runtime.InteropServices.COMException"><span data-ttu-id="9a871-3156">指定的 ProgID 未註冊。</span><span class="sxs-lookup"><span data-stu-id="9a871-3156">The specified ProgID is not registered.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="9a871-3157">需要完全信任立即呼叫端。</span><span class="sxs-lookup"><span data-stu-id="9a871-3157">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="9a871-3158">此成員不能由部分信任或不透明的程式碼。</span><span class="sxs-lookup"><span data-stu-id="9a871-3158">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.RegistrationServices.GetProgIdForType(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetTypeFromProgID">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromProgID (string progID, string server);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromProgID(string progID, string server) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeFromProgID(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeFromProgID (progID As String, server As String) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetTypeFromProgID(System::String ^ progID, System::String ^ server);" />
      <MemberSignature Language="F#" Value="static member GetTypeFromProgID : string * string -&gt; Type" Usage="System.Type.GetTypeFromProgID (progID, server)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="progID" Type="System.String" />
        <Parameter Name="server" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="progID"><span data-ttu-id="9a871-3159">要取得之類型的 progID。</span><span class="sxs-lookup"><span data-stu-id="9a871-3159">The progID of the type to get.</span></span></param>
        <param name="server"><span data-ttu-id="9a871-3160">要載入類型的伺服器。</span><span class="sxs-lookup"><span data-stu-id="9a871-3160">The server from which to load the type.</span></span> <span data-ttu-id="9a871-3161">如果伺服器名稱為 <see langword="null" />，此方法將會自動還原成本機電腦 (Local Machine)。</span><span class="sxs-lookup"><span data-stu-id="9a871-3161">If the server name is <see langword="null" />, this method automatically reverts to the local machine.</span></span></param>
        <summary><span data-ttu-id="9a871-3162">從指定的伺服器中，取得與指定的程式識別項 (progID) 相關聯的類型；如果在載入類型時發生錯誤，則傳回 null。</span><span class="sxs-lookup"><span data-stu-id="9a871-3162">Gets the type associated with the specified program identifier (progID) from the specified server, returning null if an error is encountered while loading the type.</span></span></summary>
        <returns><span data-ttu-id="9a871-3163">如果 <paramref name="progID" /> 在登錄中是有效的項目，且有與其相關聯的類型，則為與指定的程式識別項 (progID) 相關聯的類型，否則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3163">The type associated with the specified program identifier (progID), if <paramref name="progID" /> is a valid entry in the registry and a type is associated with it; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-3164">這個方法提供用於 COM 支援。</span><span class="sxs-lookup"><span data-stu-id="9a871-3164">This method is provided for COM support.</span></span> <span data-ttu-id="9a871-3165">因為已取代命名空間的概念，程式識別碼不會使用 Microsoft.NET Framework 中。</span><span class="sxs-lookup"><span data-stu-id="9a871-3165">Program IDs are not used in Microsoft .NET Framework because they have been superseded by the concept of namespace.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-3166">下列範例會擷取藉由傳遞的 ProgID 和伺服器名稱的型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-3166">The following example retrieves a type by passing a ProgID and server name.</span></span> <span data-ttu-id="9a871-3167">範例接著會顯示相關的 progid，ClassID，或如果 ProgID 或的伺服器名稱無效，會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9a871-3167">The example then displays the ClassID related to the ProgID, or throws an exception if the ProgID or the server name is invalid.</span></span>  
  
 [!code-cpp[Type_GetTypeFromProgID3#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetTypeFromProgID3/CPP/Type_GetTypeFromProgID3.cpp#1)]
 [!code-csharp[Type_GetTypeFromProgID3#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetTypeFromProgID3/CS/type_gettypefromprogid3.cs#1)]
 [!code-vb[Type_GetTypeFromProgID3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetTypeFromProgID3/VB/type_gettypefromprogid3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9a871-3168"><paramref name="prodID" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3168"><paramref name="prodID" /> is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="9a871-3169">需要完全信任立即呼叫端。</span><span class="sxs-lookup"><span data-stu-id="9a871-3169">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="9a871-3170">此成員不能由部分信任或不透明的程式碼。</span><span class="sxs-lookup"><span data-stu-id="9a871-3170">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.RegistrationServices.GetProgIdForType(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetTypeFromProgID">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromProgID (string progID, string server, bool throwOnError);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromProgID(string progID, string server, bool throwOnError) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeFromProgID(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeFromProgID (progID As String, server As String, throwOnError As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetTypeFromProgID(System::String ^ progID, System::String ^ server, bool throwOnError);" />
      <MemberSignature Language="F#" Value="static member GetTypeFromProgID : string * string * bool -&gt; Type" Usage="System.Type.GetTypeFromProgID (progID, server, throwOnError)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="progID" Type="System.String" />
        <Parameter Name="server" Type="System.String" />
        <Parameter Name="throwOnError" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="progID"><span data-ttu-id="9a871-3171">要取得之 <see cref="T:System.Type" /> 的 progID。</span><span class="sxs-lookup"><span data-stu-id="9a871-3171">The progID of the <see cref="T:System.Type" /> to get.</span></span></param>
        <param name="server"><span data-ttu-id="9a871-3172">要載入類型的伺服器。</span><span class="sxs-lookup"><span data-stu-id="9a871-3172">The server from which to load the type.</span></span> <span data-ttu-id="9a871-3173">如果伺服器名稱為 <see langword="null" />，此方法將會自動還原成本機電腦 (Local Machine)。</span><span class="sxs-lookup"><span data-stu-id="9a871-3173">If the server name is <see langword="null" />, this method automatically reverts to the local machine.</span></span></param>
        <param name="throwOnError"><span data-ttu-id="9a871-3174"><see langword="true" />，擲回任何會發生的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9a871-3174"><see langword="true" /> to throw any exception that occurs.</span></span>  
  
<span data-ttu-id="9a871-3175">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-3175">-or-</span></span> 
 <span data-ttu-id="9a871-3176"><see langword="false" /> 則忽略任何會發生的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9a871-3176"><see langword="false" /> to ignore any exception that occurs.</span></span></param>
        <summary><span data-ttu-id="9a871-3177">從指定的伺服器中，取得與指定的程式識別項 (progID) 相關聯的類型，並指定如果在載入類型時發生錯誤是否擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9a871-3177">Gets the type associated with the specified program identifier (progID) from the specified server, specifying whether to throw an exception if an error occurs while loading the type.</span></span></summary>
        <returns><span data-ttu-id="9a871-3178">如果 <paramref name="progID" /> 在登錄中是有效的項目，且有與其相關聯的類型，則為與指定的程式識別項 (progID) 相關聯的類型，否則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3178">The type associated with the specified program identifier (progID), if <paramref name="progID" /> is a valid entry in the registry and a type is associated with it; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-3179">這個方法提供用於 COM 支援。</span><span class="sxs-lookup"><span data-stu-id="9a871-3179">This method is provided for COM support.</span></span> <span data-ttu-id="9a871-3180">因為已取代命名空間的概念，程式識別碼不會使用 Microsoft.NET Framework 中。</span><span class="sxs-lookup"><span data-stu-id="9a871-3180">Program IDs are not used in Microsoft .NET Framework because they have been superseded by the concept of namespace.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-3181">下列範例會擷取藉由傳遞的 ProgID 和伺服器名稱的型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-3181">The following example retrieves a type by passing a ProgID and server name.</span></span> <span data-ttu-id="9a871-3182">此範例接著會顯示相關的 ProgID，指定是否要擲回例外狀況，如果 ProgID 或的伺服器名稱是無效的 ClassID。</span><span class="sxs-lookup"><span data-stu-id="9a871-3182">The example then displays the ClassID related to the ProgID, specifying whether to throw an exception if the ProgID or the server name is invalid.</span></span>  
  
 [!code-cpp[Type_GetTypeFromProgID4#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetTypeFromProgID4/CPP/Type_GetTypeFromProgID4.cpp#1)]
 [!code-csharp[Type_GetTypeFromProgID4#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetTypeFromProgID4/CS/type_gettypefromprogid4.cs#1)]
 [!code-vb[Type_GetTypeFromProgID4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetTypeFromProgID4/VB/type_gettypefromprogid4.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9a871-3183"><paramref name="progID" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3183"><paramref name="progID" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Runtime.InteropServices.COMException"><span data-ttu-id="9a871-3184">未註冊指定的 progID。</span><span class="sxs-lookup"><span data-stu-id="9a871-3184">The specified progID is not registered.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="9a871-3185">需要完全信任立即呼叫端。</span><span class="sxs-lookup"><span data-stu-id="9a871-3185">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="9a871-3186">此成員不能由部分信任或不透明的程式碼。</span><span class="sxs-lookup"><span data-stu-id="9a871-3186">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.RegistrationServices.GetProgIdForType(System.Type)" />
        <altmember cref="T:System.TypeLoadException" />
      </Docs>
    </Member>
    <Member MemberName="GetTypeHandle">
      <MemberSignature Language="C#" Value="public static RuntimeTypeHandle GetTypeHandle (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.RuntimeTypeHandle GetTypeHandle(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeHandle(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeHandle (o As Object) As RuntimeTypeHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static RuntimeTypeHandle GetTypeHandle(System::Object ^ o);" />
      <MemberSignature Language="F#" Value="static member GetTypeHandle : obj -&gt; RuntimeTypeHandle" Usage="System.Type.GetTypeHandle o" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.RuntimeTypeHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o"><span data-ttu-id="9a871-3187">要取得其類型控制代碼的物件。</span><span class="sxs-lookup"><span data-stu-id="9a871-3187">The object for which to get the type handle.</span></span></param>
        <summary><span data-ttu-id="9a871-3188">取得指定物件的 <see cref="T:System.Type" /> 的控制代碼。</span><span class="sxs-lookup"><span data-stu-id="9a871-3188">Gets the handle for the <see cref="T:System.Type" /> of a specified object.</span></span></summary>
        <returns><span data-ttu-id="9a871-3189">指定 <see cref="T:System.Type" /> 之 <see cref="T:System.Object" /> 的控制代碼。</span><span class="sxs-lookup"><span data-stu-id="9a871-3189">The handle for the <see cref="T:System.Type" /> of the specified <see cref="T:System.Object" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-3190">點只在它們所取得的應用程式定義域中是有效的。</span><span class="sxs-lookup"><span data-stu-id="9a871-3190">The handles are valid only in the application domain in which they were obtained.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-3191">下列範例會定義類別`MyClass1`、 取得執行個體，和擷取物件的執行階段控制代碼。</span><span class="sxs-lookup"><span data-stu-id="9a871-3191">The following example defines the class `MyClass1`, gets an instance of it, and retrieves the runtime handle of the object.</span></span>  
  
 [!code-cpp[Type_GetTypeHandle#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetTypeHandle/CPP/Type_GetTypeHandle.cpp#1)]
 [!code-csharp[Type_GetTypeHandle#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetTypeHandle/CS/type_gettypehandle.cs#1)]
 [!code-vb[Type_GetTypeHandle#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetTypeHandle/VB/type_gettypehandle.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9a871-3192"><paramref name="o" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3192"><paramref name="o" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.RuntimeTypeHandle" />
        <altmember cref="P:System.Type.TypeHandle" />
        <altmember cref="M:System.Type.GetTypeFromHandle(System.RuntimeTypeHandle)" />
      </Docs>
    </Member>
    <Member MemberName="GUID">
      <MemberSignature Language="C#" Value="public abstract Guid GUID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Guid GUID" />
      <MemberSignature Language="DocId" Value="P:System.Type.GUID" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property GUID As Guid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property Guid GUID { Guid get(); };" />
      <MemberSignature Language="F#" Value="member this.GUID : Guid" Usage="System.Type.GUID" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.GUID</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a871-3193">取得與 <see cref="T:System.Type" /> 相關聯的 GUID。</span><span class="sxs-lookup"><span data-stu-id="9a871-3193">Gets the GUID associated with the <see cref="T:System.Type" />.</span></span></summary>
        <value><span data-ttu-id="9a871-3194">與 <see cref="T:System.Type" /> 相關聯的 GUID。</span><span class="sxs-lookup"><span data-stu-id="9a871-3194">The GUID associated with the <see cref="T:System.Type" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-3195">GUID 是型別，使用相關聯<xref:System.Runtime.InteropServices.GuidAttribute>屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-3195">A GUID is associated with a type using the <xref:System.Runtime.InteropServices.GuidAttribute> attribute.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-3196">下列範例會建立類別`MyClass1`的公用方法，會建立`Type`物件對應至`MyClass1`，並取得<xref:System.Guid>結構使用`GUID`屬性`Type`類別。</span><span class="sxs-lookup"><span data-stu-id="9a871-3196">The following example creates the class `MyClass1` with a public method, creates a `Type` object corresponding to `MyClass1`, and gets the <xref:System.Guid> structure using the `GUID` property of the `Type` class.</span></span>  
  
 [!code-cpp[Type_Guid#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_Guid/CPP/type_guid.cpp#1)]
 [!code-csharp[Type_Guid#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_Guid/CS/type_guid.cs#1)]
 [!code-vb[Type_Guid#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_Guid/VB/type_guid.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Guid" />
      </Docs>
    </Member>
    <Member MemberName="HasElementType">
      <MemberSignature Language="C#" Value="public bool HasElementType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasElementType" />
      <MemberSignature Language="DocId" Value="P:System.Type.HasElementType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasElementType As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasElementType { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasElementType : bool" Usage="System.Type.HasElementType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.HasElementType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a871-3197">取得值，指出目前 <see cref="T:System.Type" /> 是否內含或參考其他類型；也就是說，目前 <see cref="T:System.Type" /> 是否為陣列、指標或以傳址方式傳遞。</span><span class="sxs-lookup"><span data-stu-id="9a871-3197">Gets a value indicating whether the current <see cref="T:System.Type" /> encompasses or refers to another type; that is, whether the current <see cref="T:System.Type" /> is an array, a pointer, or is passed by reference.</span></span></summary>
        <value><span data-ttu-id="9a871-3198">如果 <see langword="true" /> 是陣列、指標或以傳址方式傳遞，則為 <see cref="T:System.Type" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3198"><see langword="true" /> if the <see cref="T:System.Type" /> is an array, a pointer, or is passed by reference; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-3199">比方說，Type.GetType("Int32[]")。HasElementType 傳回`true`，但 Type.GetType("Int32")。傳回 HasElementType `false`。</span><span class="sxs-lookup"><span data-stu-id="9a871-3199">For example, Type.GetType("Int32[]").HasElementType returns `true`, but Type.GetType("Int32").HasElementType returns `false`.</span></span> <span data-ttu-id="9a871-3200">HasElementType 也會傳回`true`為 「 Int32 \*"和"Int32 &"。</span><span class="sxs-lookup"><span data-stu-id="9a871-3200">HasElementType also returns `true` for "Int32\*" and "Int32&".</span></span>  
  
 <span data-ttu-id="9a871-3201">如果目前<xref:System.Type>代表泛型類型或類型參數的泛型類型或泛型方法定義中這個屬性一律傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="9a871-3201">If the current <xref:System.Type> represents a generic type, or a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-3202">下列範例會傳回`true`或`false`根據物件是否為陣列、 參考類型或指標。</span><span class="sxs-lookup"><span data-stu-id="9a871-3202">The following example returns `true` or `false` depending on whether or not the object is an array, a reference type, or a pointer.</span></span>  
  
 [!code-cpp[Type_HasElementType#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_HasElementType/CPP/type_haselementtype.cpp#1)]
 [!code-csharp[Type_HasElementType#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_HasElementType/CS/type_haselementtype.cs#1)]
 [!code-vb[Type_HasElementType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_HasElementType/VB/type_haselementtype.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.HasElementTypeImpl" />
        <altmember cref="P:System.Type.IsArray" />
        <altmember cref="P:System.Type.IsPointer" />
        <altmember cref="P:System.Type.IsByRef" />
        <altmember cref="M:System.Type.GetElementType" />
        <altmember cref="M:System.Type.GetType" />
      </Docs>
    </Member>
    <Member MemberName="HasElementTypeImpl">
      <MemberSignature Language="C#" Value="protected abstract bool HasElementTypeImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool HasElementTypeImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.HasElementTypeImpl" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function HasElementTypeImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool HasElementTypeImpl();" />
      <MemberSignature Language="F#" Value="abstract member HasElementTypeImpl : unit -&gt; bool" Usage="type.HasElementTypeImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9a871-3203">在衍生類別中覆寫時，實作 <see cref="P:System.Type.HasElementType" /> 屬性並判斷目前 <see cref="T:System.Type" /> 是否內含或參考其他類型；也就是說，目前 <see cref="T:System.Type" /> 是否為陣列、指標或以傳址方式傳遞。</span><span class="sxs-lookup"><span data-stu-id="9a871-3203">When overridden in a derived class, implements the <see cref="P:System.Type.HasElementType" /> property and determines whether the current <see cref="T:System.Type" /> encompasses or refers to another type; that is, whether the current <see cref="T:System.Type" /> is an array, a pointer, or is passed by reference.</span></span></summary>
        <returns><span data-ttu-id="9a871-3204">如果 <see langword="true" /> 是陣列、指標或以傳址方式傳遞，則為 <see cref="T:System.Type" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3204"><see langword="true" /> if the <see cref="T:System.Type" /> is an array, a pointer, or is passed by reference; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-3205">比方說，Type.GetType("Int32[]")。HasElementTypeImpl 傳回`true`，但 Type.GetType("Int32")。傳回 HasElementTypeImpl `false`。</span><span class="sxs-lookup"><span data-stu-id="9a871-3205">For example, Type.GetType("Int32[]").HasElementTypeImpl returns `true`, but Type.GetType("Int32").HasElementTypeImpl returns `false`.</span></span> <span data-ttu-id="9a871-3206">HasElementTypeImpl 也會傳回`true`為 「 Int32 \*"和"Int32 &"。</span><span class="sxs-lookup"><span data-stu-id="9a871-3206">HasElementTypeImpl also returns `true` for "Int32\*" and "Int32&".</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-3207">下列範例會定義類別`MyTypeDelegator`，它會覆寫`HasElementTypeImpl`方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-3207">The following example defines the class `MyTypeDelegator`, which overrides the `HasElementTypeImpl` method.</span></span> <span data-ttu-id="9a871-3208">主要的類別會檢查`HasElementType`屬性，並顯示項目類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-3208">The main class checks for the `HasElementType` property and displays the element type.</span></span>  
  
 [!code-cpp[Type_HasElementTypeImpl#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_HasElementTypeImpl/CPP/type_haselementtypeimpl.cpp#1)]
 [!code-csharp[Type_HasElementTypeImpl#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_HasElementTypeImpl/CS/type_haselementtypeimpl.cs#1)]
 [!code-vb[Type_HasElementTypeImpl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_HasElementTypeImpl/VB/type_haselementtypeimpl.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.HasElementType" />
        <altmember cref="P:System.Type.IsArray" />
        <altmember cref="P:System.Type.IsPointer" />
        <altmember cref="P:System.Type.IsByRef" />
        <altmember cref="M:System.Type.GetElementType" />
        <altmember cref="M:System.Type.GetType" />
      </Docs>
    </Member>
    <MemberGroup MemberName="InvokeMember">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9a871-3209">叫用目前 <see cref="T:System.Type" /> 的特定成員。</span><span class="sxs-lookup"><span data-stu-id="9a871-3209">Invokes a specific member of the current <see cref="T:System.Type" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="InvokeMember">
      <MemberSignature Language="C#" Value="public object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object InvokeMember(string name, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object target, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ InvokeMember(System::String ^ name, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, System::Object ^ target, cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="abstract member InvokeMember : string * System.Reflection.BindingFlags * System.Reflection.Binder * obj * obj[] -&gt; obj&#xA;override this.InvokeMember : string * System.Reflection.BindingFlags * System.Reflection.Binder * obj * obj[] -&gt; obj" Usage="type.InvokeMember (name, invokeAttr, binder, target, args)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="9a871-3210">字串，包含要叫用的建構函式、方法、屬性或欄位成員的名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-3210">The string containing the name of the constructor, method, property, or field member to invoke.</span></span>  
  
<span data-ttu-id="9a871-3211">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-3211">-or-</span></span> 
<span data-ttu-id="9a871-3212">空字串 ("")，要叫用預設成員。</span><span class="sxs-lookup"><span data-stu-id="9a871-3212">An empty string ("") to invoke the default member.</span></span>  
  
<span data-ttu-id="9a871-3213">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-3213">-or-</span></span> 
<span data-ttu-id="9a871-3214">對 <see langword="IDispatch" /> 成員表示 DispID 的字串，例如 "[DispID=3]"。</span><span class="sxs-lookup"><span data-stu-id="9a871-3214">For <see langword="IDispatch" /> members, a string representing the DispID, for example "[DispID=3]".</span></span></param>
        <param name="invokeAttr"><span data-ttu-id="9a871-3215">位元遮罩，由一或多個 <see cref="T:System.Reflection.BindingFlags" /> 組成，而這些旗標會指定執行搜尋的方式。</span><span class="sxs-lookup"><span data-stu-id="9a871-3215">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span> <span data-ttu-id="9a871-3216">該存取可以是其中一個 <see langword="BindingFlags" />，例如 <see langword="Public" />、<see langword="NonPublic" />、<see langword="Private" />、<see langword="InvokeMethod" />、<see langword="GetField" /> 等等。</span><span class="sxs-lookup"><span data-stu-id="9a871-3216">The access can be one of the <see langword="BindingFlags" /> such as <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" />, <see langword="GetField" />, and so on.</span></span> <span data-ttu-id="9a871-3217">不需要指定查閱的類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-3217">The type of lookup need not be specified.</span></span> <span data-ttu-id="9a871-3218">如果省略查閱的類型，則會使用 <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> | <see langword="BindingFlags.Static" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3218">If the type of lookup is omitted, <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> | <see langword="BindingFlags.Static" /> are used.</span></span></param>
        <param name="binder"><span data-ttu-id="9a871-3219">定義一組屬性並啟用繫結的物件，可包含多載方法的選擇、引數類型的強制，以及透過反映的成員引動過程。</span><span class="sxs-lookup"><span data-stu-id="9a871-3219">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span></span>  
  
<span data-ttu-id="9a871-3220">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-3220">-or-</span></span> 
<span data-ttu-id="9a871-3221">Null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)，可使用 <see cref="P:System.Type.DefaultBinder" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3221">A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span></span> <span data-ttu-id="9a871-3222">請注意，可能需要明確定義 <see cref="T:System.Reflection.Binder" /> 物件，才能順利以變數引數叫用方法多載。</span><span class="sxs-lookup"><span data-stu-id="9a871-3222">Note that explicitly defining a <see cref="T:System.Reflection.Binder" /> object may be required for successfully invoking method overloads with variable arguments.</span></span></param>
        <param name="target"><span data-ttu-id="9a871-3223">要在其上叫用指定成員的物件。</span><span class="sxs-lookup"><span data-stu-id="9a871-3223">The object on which to invoke the specified member.</span></span></param>
        <param name="args"><span data-ttu-id="9a871-3224">包含引數的陣列，這些引數會傳遞給要叫用的成員。</span><span class="sxs-lookup"><span data-stu-id="9a871-3224">An array containing the arguments to pass to the member to invoke.</span></span></param>
        <summary><span data-ttu-id="9a871-3225">使用指定的繫結條件約束並符合指定的引數清單，來叫用指定的成員。</span><span class="sxs-lookup"><span data-stu-id="9a871-3225">Invokes the specified member, using the specified binding constraints and matching the specified argument list.</span></span></summary>
        <returns><span data-ttu-id="9a871-3226">表示叫用的成員之傳回值的物件。</span><span class="sxs-lookup"><span data-stu-id="9a871-3226">An object representing the return value of the invoked member.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="9a871-3227">您無法使用<xref:System.Type.InvokeMember%2A>叫用泛型方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-3227">You cannot use <xref:System.Type.InvokeMember%2A> to invoke a generic method.</span></span>  
  
 <span data-ttu-id="9a871-3228">下列<xref:System.Reflection.BindingFlags>篩選器旗標可以用來定義要包含在搜尋中的成員：</span><span class="sxs-lookup"><span data-stu-id="9a871-3228">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which members to include in the search:</span></span>  
  
-   <span data-ttu-id="9a871-3229">指定`BindingFlags.Public`来包含在搜尋中的公用成員。</span><span class="sxs-lookup"><span data-stu-id="9a871-3229">Specify `BindingFlags.Public` to include public members in the search.</span></span>  
  
-   <span data-ttu-id="9a871-3230">指定`BindingFlags.NonPublic`要在搜尋中包含非公用成員 （也就是 private 和 protected 成員）。</span><span class="sxs-lookup"><span data-stu-id="9a871-3230">Specify `BindingFlags.NonPublic` to include non-public members (that is, private and protected members) in the search.</span></span>  
  
-   <span data-ttu-id="9a871-3231">指定`BindingFlags.FlattenHierarchy`来包含在階層中向上的靜態成員。</span><span class="sxs-lookup"><span data-stu-id="9a871-3231">Specify `BindingFlags.FlattenHierarchy` to include static members up the hierarchy.</span></span>  
  
 <span data-ttu-id="9a871-3232">下列<xref:System.Reflection.BindingFlags>輔助鍵旗標可以用來變更搜尋的運作方式：</span><span class="sxs-lookup"><span data-stu-id="9a871-3232">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="9a871-3233">`BindingFlags.IgnoreCase` 忽略大小寫的`name`。</span><span class="sxs-lookup"><span data-stu-id="9a871-3233">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="9a871-3234">`BindingFlags.DeclaredOnly` 若要搜尋只在宣告的成員，才<xref:System.Type>，不只是繼承的成員。</span><span class="sxs-lookup"><span data-stu-id="9a871-3234">`BindingFlags.DeclaredOnly` to search only the members declared on the <xref:System.Type>, not members that were simply inherited.</span></span>  
  
 <span data-ttu-id="9a871-3235">下列<xref:System.Reflection.BindingFlags>引動過程的旗標可以用來表示要與成員採取什麼動作：</span><span class="sxs-lookup"><span data-stu-id="9a871-3235">The following <xref:System.Reflection.BindingFlags> invocation flags can be used to denote what action to take with the member:</span></span>  
  
-   <span data-ttu-id="9a871-3236">`CreateInstance` 若要叫用建構函式。</span><span class="sxs-lookup"><span data-stu-id="9a871-3236">`CreateInstance` to invoke a constructor.</span></span> <span data-ttu-id="9a871-3237">`name` 會被忽略。</span><span class="sxs-lookup"><span data-stu-id="9a871-3237">`name` is ignored.</span></span> <span data-ttu-id="9a871-3238">與其他引動過程旗標無效。</span><span class="sxs-lookup"><span data-stu-id="9a871-3238">Not valid with other invocation flags.</span></span>  
  
-   <span data-ttu-id="9a871-3239">`InvokeMethod` 若要叫用方法，但不是建構函式或類型初始設定式。</span><span class="sxs-lookup"><span data-stu-id="9a871-3239">`InvokeMethod` to invoke a method, but not a constructor or a type initializer.</span></span> <span data-ttu-id="9a871-3240">使用不正確`SetField`或`SetProperty`。</span><span class="sxs-lookup"><span data-stu-id="9a871-3240">Not valid with `SetField` or `SetProperty`.</span></span> <span data-ttu-id="9a871-3241">如果`InvokeMethod`本身，由`BindingFlags.Public`， `BindingFlags.Instance`，和`BindingFlags.Static`會自動包含在內。</span><span class="sxs-lookup"><span data-stu-id="9a871-3241">If `InvokeMethod` is specified by itself, `BindingFlags.Public`, `BindingFlags.Instance`, and `BindingFlags.Static` are automatically included.</span></span>  
  
-   <span data-ttu-id="9a871-3242">`GetField` 若要取得欄位的值。</span><span class="sxs-lookup"><span data-stu-id="9a871-3242">`GetField` to get the value of a field.</span></span> <span data-ttu-id="9a871-3243">與無效`SetField`。</span><span class="sxs-lookup"><span data-stu-id="9a871-3243">Not valid with `SetField`.</span></span>  
  
-   <span data-ttu-id="9a871-3244">`SetField` 若要設定欄位的值。</span><span class="sxs-lookup"><span data-stu-id="9a871-3244">`SetField` to set the value of a field.</span></span> <span data-ttu-id="9a871-3245">與無效`GetField`。</span><span class="sxs-lookup"><span data-stu-id="9a871-3245">Not valid with `GetField`.</span></span>  
  
-   <span data-ttu-id="9a871-3246">`GetProperty` 若要取得的屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-3246">`GetProperty` to get a property.</span></span> <span data-ttu-id="9a871-3247">與無效`SetProperty`。</span><span class="sxs-lookup"><span data-stu-id="9a871-3247">Not valid with `SetProperty`.</span></span>  
  
-   <span data-ttu-id="9a871-3248">`SetProperty` 若要設定的屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-3248">`SetProperty` to set a property.</span></span> <span data-ttu-id="9a871-3249">與無效`GetProperty`。</span><span class="sxs-lookup"><span data-stu-id="9a871-3249">Not valid with `GetProperty`.</span></span>  
  
 <span data-ttu-id="9a871-3250">如需詳細資訊，請參閱 <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="9a871-3250">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="9a871-3251">如果兩個下列條件成立，就會叫用方法：</span><span class="sxs-lookup"><span data-stu-id="9a871-3251">A method will be invoked if both of the following conditions are true:</span></span>  
  
-   <span data-ttu-id="9a871-3252">在方法宣告中的參數數目等於中的引數的數目`args`陣列 (除非該成員上定義預設引數和`BindingFlags.OptionalParamBinding`指定)。</span><span class="sxs-lookup"><span data-stu-id="9a871-3252">The number of parameters in the method declaration equals the number of arguments in the `args` array (unless default arguments are defined on the member and `BindingFlags.OptionalParamBinding` is specified).</span></span>  
  
-   <span data-ttu-id="9a871-3253">每個引數的類型可以轉換為參數的型別繫結器。</span><span class="sxs-lookup"><span data-stu-id="9a871-3253">The type of each argument can be converted by the binder to the type of the parameter.</span></span>  
  
 <span data-ttu-id="9a871-3254">繫結器將會尋找所有相符的方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-3254">The binder will find all of the matching methods.</span></span> <span data-ttu-id="9a871-3255">這些方法會找到根據要求的繫結的類型 (<xref:System.Reflection.BindingFlags>值`InvokeMethod`，`GetProperty`等等)。</span><span class="sxs-lookup"><span data-stu-id="9a871-3255">These methods are found based upon the type of binding requested (<xref:System.Reflection.BindingFlags> values `InvokeMethod`, `GetProperty`, and so on).</span></span> <span data-ttu-id="9a871-3256">一組方法會依名稱、 目的引數，以及一組繫結器中所定義的搜尋修飾詞進行篩選。</span><span class="sxs-lookup"><span data-stu-id="9a871-3256">The set of methods is filtered by the name, number of arguments, and a set of search modifiers defined in the binder.</span></span>  
  
 <span data-ttu-id="9a871-3257">方法選取之後，它會叫用。</span><span class="sxs-lookup"><span data-stu-id="9a871-3257">After the method is selected, it is invoked.</span></span> <span data-ttu-id="9a871-3258">協助工具會在該點檢查。</span><span class="sxs-lookup"><span data-stu-id="9a871-3258">Accessibility is checked at that point.</span></span> <span data-ttu-id="9a871-3259">搜尋可能會控制哪一組方法會搜尋根據與方法關聯的協助工具屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-3259">The search may control which set of methods are searched based upon the accessibility attribute associated with the method.</span></span> <span data-ttu-id="9a871-3260"><xref:System.Reflection.Binder.BindToMethod%2A?displayProperty=nameWithType>方法的<xref:System.Reflection.Binder>類別會負責選取要叫用方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-3260">The <xref:System.Reflection.Binder.BindToMethod%2A?displayProperty=nameWithType> method of the <xref:System.Reflection.Binder> class is responsible for selecting the method to be invoked.</span></span> <span data-ttu-id="9a871-3261">預設繫結器會選取最特定的相符項目。</span><span class="sxs-lookup"><span data-stu-id="9a871-3261">The default binder selects the most specific match.</span></span>  
  
 <span data-ttu-id="9a871-3262">存取限制，會忽略完全信任的程式碼;也就是私用建構函式、 方法、 欄位和屬性可以存取和透過叫用<xref:System.Reflection>每當程式碼受到完全信任。</span><span class="sxs-lookup"><span data-stu-id="9a871-3262">Access restrictions are ignored for fully trusted code; that is, private constructors, methods, fields, and properties can be accessed and invoked through <xref:System.Reflection> whenever the code is fully trusted.</span></span>  
  
 <span data-ttu-id="9a871-3263">您可以使用`Type.InvokeMember`設定設為特定值的欄位，藉由指定<xref:System.Reflection.BindingFlags.SetField?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="9a871-3263">You can use `Type.InvokeMember` to set a field to a particular value by specifying <xref:System.Reflection.BindingFlags.SetField?displayProperty=nameWithType>.</span></span> <span data-ttu-id="9a871-3264">例如，如果您想要設定名為 F C 和 F 的類別上的公用執行個體欄位是`String`，您可以使用程式碼，例如：</span><span class="sxs-lookup"><span data-stu-id="9a871-3264">For example, if you want to set a public instance field named F on class C, and F is a `String`, you can use code such as:</span></span>  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {"strings new value"});`  
  
 <span data-ttu-id="9a871-3265">如果 F `String[]`，您可以使用程式碼，例如：</span><span class="sxs-lookup"><span data-stu-id="9a871-3265">If F is a `String[]`, you can use code such as:</span></span>  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {new String[]{"a","z","c","d"}});`  
  
 <span data-ttu-id="9a871-3266">這會將這個新的陣列欄位 F 的初始化。</span><span class="sxs-lookup"><span data-stu-id="9a871-3266">which will initialize the field F to this new array.</span></span> <span data-ttu-id="9a871-3267">您也可以使用`Type.InvokeMember`設定陣列中的位置，藉由使用如下所示的程式碼中提供的索引值，然後按一下 [下一步] 的值：</span><span class="sxs-lookup"><span data-stu-id="9a871-3267">You can also use `Type.InvokeMember` to set a position in an array by supplying the index of the value and then the next value by using code such as the following:</span></span>  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {1, "b"});`  
  
 <span data-ttu-id="9a871-3268">這會變更 F 保留字串"b"陣列中的字串"z"。</span><span class="sxs-lookup"><span data-stu-id="9a871-3268">This will change string "z" in the array that F holds to string "b".</span></span>  
  
 <span data-ttu-id="9a871-3269">當您叫用`IDispatch`成員，您可以指定的 DispID，而不是成員名稱中，使用字串格式"[Dispid=3 = # #]"。</span><span class="sxs-lookup"><span data-stu-id="9a871-3269">When you invoke an `IDispatch` member, you can specify the DispID instead of the member name, using the string format "[DispID=##]".</span></span> <span data-ttu-id="9a871-3270">比方說，如果 DispID 的 MyComMethod 為 3，您可以指定字串"[Dispid=3 = 3]"而不是 「 MyComMethod"。</span><span class="sxs-lookup"><span data-stu-id="9a871-3270">For example, if the DispID of MyComMethod is 3, you can specify the string "[DispID=3]" instead of "MyComMethod".</span></span> <span data-ttu-id="9a871-3271">叫用成員的 DispID 的速度比依名稱查閱的成員。</span><span class="sxs-lookup"><span data-stu-id="9a871-3271">Invoking a member by DispID is faster than looking up the member by name.</span></span> <span data-ttu-id="9a871-3272">在複雜的彙總的情況下，DispID 有時是唯一的方法來叫用所需的成員。</span><span class="sxs-lookup"><span data-stu-id="9a871-3272">In complex aggregation scenarios, the DispID is sometimes the only way to invoke the desired member.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9a871-3273">開頭[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，這個方法可以用來存取非公用成員，如果呼叫者已授與<xref:System.Security.Permissions.ReflectionPermission>使用<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>旗標，並限制為呼叫端的非公用成員的授權集是否授與集或子集效果。</span><span class="sxs-lookup"><span data-stu-id="9a871-3273">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public members is restricted to the caller's grant set, or a subset thereof.</span></span> <span data-ttu-id="9a871-3274">(請參閱[反映的安全性考量](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)。)</span><span class="sxs-lookup"><span data-stu-id="9a871-3274">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="9a871-3275">若要使用這項功能，您的應用程式應將目標設為 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] (含) 以後版本。</span><span class="sxs-lookup"><span data-stu-id="9a871-3275">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-3276">下列範例會使用`InvokeMember`存取類型的成員。</span><span class="sxs-lookup"><span data-stu-id="9a871-3276">The following example uses `InvokeMember` to access members of a type.</span></span>  
  
 [!code-cpp[InvokeMem#1](~/samples/snippets/cpp/VS_Snippets_CLR/InvokeMem/CPP/invokemem.cpp#1)]
 [!code-csharp[InvokeMem#1](~/samples/snippets/csharp/VS_Snippets_CLR/InvokeMem/CS/invokemem.cs#1)]
 [!code-vb[InvokeMem#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/InvokeMem/VB/invokemem.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9a871-3277"><paramref name="invokeAttr" />不包含 <see langword="CreateInstance" />，且 <paramref name="name" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3277"><paramref name="invokeAttr" /> does not contain <see langword="CreateInstance" /> and <paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9a871-3278"><paramref name="invokeAttr" /> 不是有效的 <see cref="T:System.Reflection.BindingFlags" /> 屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-3278"><paramref name="invokeAttr" /> is not a valid <see cref="T:System.Reflection.BindingFlags" /> attribute.</span></span>  
  
<span data-ttu-id="9a871-3279">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-3279">-or-</span></span> 
 <span data-ttu-id="9a871-3280"><paramref name="invokeAttr" /> 不包含下列其中一個繫結旗標：<see langword="InvokeMethod" />、<see langword="CreateInstance" />、<see langword="GetField" />、<see langword="SetField" />、<see langword="GetProperty" /> 或 <see langword="SetProperty" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3280"><paramref name="invokeAttr" /> does not contain one of the following binding flags: <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />.</span></span>  
  
<span data-ttu-id="9a871-3281">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-3281">-or-</span></span> 
 <span data-ttu-id="9a871-3282"><paramref name="invokeAttr" /> 包含與 <see langword="InvokeMethod" />、<see langword="GetField" />、<see langword="SetField" />、<see langword="GetProperty" /> 或 <see langword="SetProperty" /> 合併的 <see langword="CreateInstance" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3282"><paramref name="invokeAttr" /> contains <see langword="CreateInstance" /> combined with <see langword="InvokeMethod" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />.</span></span>  
  
<span data-ttu-id="9a871-3283">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-3283">-or-</span></span> 
 <span data-ttu-id="9a871-3284"><paramref name="invokeAttr" /> 同時包含 <see langword="GetField" /> 和 <see langword="SetField" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3284"><paramref name="invokeAttr" /> contains both <see langword="GetField" /> and <see langword="SetField" />.</span></span>  
  
<span data-ttu-id="9a871-3285">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-3285">-or-</span></span> 
 <span data-ttu-id="9a871-3286"><paramref name="invokeAttr" /> 同時包含 <see langword="GetProperty" /> 和 <see langword="SetProperty" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3286"><paramref name="invokeAttr" /> contains both <see langword="GetProperty" /> and <see langword="SetProperty" />.</span></span>  
  
<span data-ttu-id="9a871-3287">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-3287">-or-</span></span> 
 <span data-ttu-id="9a871-3288"><paramref name="invokeAttr" /> 包含與 <see langword="SetField" /> 或 <see langword="SetProperty" /> 合併的 <see langword="InvokeMethod" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3288"><paramref name="invokeAttr" /> contains <see langword="InvokeMethod" /> combined with <see langword="SetField" /> or <see langword="SetProperty" />.</span></span>  
  
<span data-ttu-id="9a871-3289">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-3289">-or-</span></span> 
 <span data-ttu-id="9a871-3290"><paramref name="invokeAttr" /> 包含 <see langword="SetField" /> 且 <paramref name="args" /> 具有一個以上的項目。</span><span class="sxs-lookup"><span data-stu-id="9a871-3290"><paramref name="invokeAttr" /> contains <see langword="SetField" /> and <paramref name="args" /> has more than one element.</span></span>  
  
<span data-ttu-id="9a871-3291">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-3291">-or-</span></span> 
<span data-ttu-id="9a871-3292">已在 COM 物件上呼叫此方法且下列其中一個繫結旗標未傳入：<see langword="BindingFlags.InvokeMethod" />、<see langword="BindingFlags.GetProperty" />、<see langword="BindingFlags.SetProperty" />、<see langword="BindingFlags.PutDispProperty" /> 或 <see langword="BindingFlags.PutRefDispProperty" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3292">This method is called on a COM object and one of the following binding flags was not passed in: <see langword="BindingFlags.InvokeMethod" />, <see langword="BindingFlags.GetProperty" />, <see langword="BindingFlags.SetProperty" />, <see langword="BindingFlags.PutDispProperty" />, or <see langword="BindingFlags.PutRefDispProperty" />.</span></span>  
  
<span data-ttu-id="9a871-3293">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-3293">-or-</span></span> 
<span data-ttu-id="9a871-3294">其中一個具名參數陣列包含的字串是 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3294">One of the named parameter arrays contains a string that is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="9a871-3295">指定的成員是類別初始設定式。</span><span class="sxs-lookup"><span data-stu-id="9a871-3295">The specified member is a class initializer.</span></span></exception>
        <exception cref="T:System.MissingFieldException"><span data-ttu-id="9a871-3296">找不到欄位或屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-3296">The field or property cannot be found.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="9a871-3297">找不到符合 <paramref name="args" /> 中之引數的方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-3297">No method can be found that matches the arguments in <paramref name="args" />.</span></span>  
  
<span data-ttu-id="9a871-3298">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-3298">-or-</span></span> 
<span data-ttu-id="9a871-3299">目前的 <see cref="T:System.Type" /> 物件代表包含開啟類型參數的類型，亦即，<see cref="P:System.Type.ContainsGenericParameters" /> 傳回 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3299">The current <see cref="T:System.Type" /> object represents a type that contains open type parameters, that is, <see cref="P:System.Type.ContainsGenericParameters" /> returns <see langword="true" />.</span></span></exception>
        <exception cref="T:System.Reflection.TargetException"><span data-ttu-id="9a871-3300">無法在 <paramref name="target" /> 上叫用指定的成員。</span><span class="sxs-lookup"><span data-stu-id="9a871-3300">The specified member cannot be invoked on <paramref name="target" />.</span></span></exception>
        <exception cref="T:System.Reflection.AmbiguousMatchException"><span data-ttu-id="9a871-3301">有一個以上符合繫結準則的方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-3301">More than one method matches the binding criteria.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="9a871-3302">.NET Compact Framework 目前不支援這個方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-3302">The .NET Compact Framework does not currently support this method.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9a871-3303"><paramref name="name" /> 所表示的方法有一或多個未指定的泛型類型參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-3303">The method represented by <paramref name="name" /> has one or more unspecified generic type parameters.</span></span> <span data-ttu-id="9a871-3304">亦即，方法的 <see cref="P:System.Reflection.MethodBase.ContainsGenericParameters" /> 屬性傳回 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3304">That is, the method's <see cref="P:System.Reflection.MethodBase.ContainsGenericParameters" /> property returns <see langword="true" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="9a871-3305">用於存取非公用成員，不論其權限授權集。</span><span class="sxs-lookup"><span data-stu-id="9a871-3305">for accessing non-public members regardless of their grant set.</span></span> <span data-ttu-id="9a871-3306">相關聯的列舉型別： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="9a871-3306">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="9a871-3307">呼叫 unmanaged 程式碼。</span><span class="sxs-lookup"><span data-stu-id="9a871-3307">to call unmanaged code.</span></span> <span data-ttu-id="9a871-3308">相關聯的列舉型別： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="9a871-3308">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="T:System.Reflection.ParameterAttributes" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
      </Docs>
    </Member>
    <Member MemberName="InvokeMember">
      <MemberSignature Language="C#" Value="public object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object InvokeMember(string name, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object target, object[] args, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Globalization.CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ InvokeMember(System::String ^ name, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, System::Object ^ target, cli::array &lt;System::Object ^&gt; ^ args, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="abstract member InvokeMember : string * System.Reflection.BindingFlags * System.Reflection.Binder * obj * obj[] * System.Globalization.CultureInfo -&gt; obj&#xA;override this.InvokeMember : string * System.Reflection.BindingFlags * System.Reflection.Binder * obj * obj[] * System.Globalization.CultureInfo -&gt; obj" Usage="type.InvokeMember (name, invokeAttr, binder, target, args, culture)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Globalization.CultureInfo)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="9a871-3309">字串，包含要叫用的建構函式、方法、屬性或欄位成員的名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-3309">The string containing the name of the constructor, method, property, or field member to invoke.</span></span>  
  
<span data-ttu-id="9a871-3310">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-3310">-or-</span></span> 
<span data-ttu-id="9a871-3311">空字串 ("")，要叫用預設成員。</span><span class="sxs-lookup"><span data-stu-id="9a871-3311">An empty string ("") to invoke the default member.</span></span>  
  
<span data-ttu-id="9a871-3312">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-3312">-or-</span></span> 
<span data-ttu-id="9a871-3313">對 <see langword="IDispatch" /> 成員表示 DispID 的字串，例如 "[DispID=3]"。</span><span class="sxs-lookup"><span data-stu-id="9a871-3313">For <see langword="IDispatch" /> members, a string representing the DispID, for example "[DispID=3]".</span></span></param>
        <param name="invokeAttr"><span data-ttu-id="9a871-3314">位元遮罩，由一或多個 <see cref="T:System.Reflection.BindingFlags" /> 組成，而這些旗標會指定執行搜尋的方式。</span><span class="sxs-lookup"><span data-stu-id="9a871-3314">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span> <span data-ttu-id="9a871-3315">該存取可以是其中一個 <see langword="BindingFlags" />，例如 <see langword="Public" />、<see langword="NonPublic" />、<see langword="Private" />、<see langword="InvokeMethod" />、<see langword="GetField" /> 等等。</span><span class="sxs-lookup"><span data-stu-id="9a871-3315">The access can be one of the <see langword="BindingFlags" /> such as <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" />, <see langword="GetField" />, and so on.</span></span> <span data-ttu-id="9a871-3316">不需要指定查閱的類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-3316">The type of lookup need not be specified.</span></span> <span data-ttu-id="9a871-3317">如果省略查閱的類型，則會使用 <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> | <see langword="BindingFlags.Static" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3317">If the type of lookup is omitted, <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> | <see langword="BindingFlags.Static" /> are used.</span></span></param>
        <param name="binder"><span data-ttu-id="9a871-3318">定義一組屬性並啟用繫結的物件，可包含多載方法的選擇、引數類型的強制，以及透過反映的成員引動過程。</span><span class="sxs-lookup"><span data-stu-id="9a871-3318">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span></span>  
  
<span data-ttu-id="9a871-3319">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-3319">-or-</span></span> 
<span data-ttu-id="9a871-3320">Null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)，可使用 <see cref="P:System.Type.DefaultBinder" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3320">A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span></span> <span data-ttu-id="9a871-3321">請注意，可能需要明確定義 <see cref="T:System.Reflection.Binder" /> 物件，才能順利以變數引數叫用方法多載。</span><span class="sxs-lookup"><span data-stu-id="9a871-3321">Note that explicitly defining a <see cref="T:System.Reflection.Binder" /> object may be required for successfully invoking method overloads with variable arguments.</span></span></param>
        <param name="target"><span data-ttu-id="9a871-3322">要在其上叫用指定成員的物件。</span><span class="sxs-lookup"><span data-stu-id="9a871-3322">The object on which to invoke the specified member.</span></span></param>
        <param name="args"><span data-ttu-id="9a871-3323">包含引數的陣列，這些引數會傳遞給要叫用的成員。</span><span class="sxs-lookup"><span data-stu-id="9a871-3323">An array containing the arguments to pass to the member to invoke.</span></span></param>
        <param name="culture"><span data-ttu-id="9a871-3324">表示要使用之全球化地區設定的物件，它可能是地區設定特性轉換所需要的，例如將數值 <see cref="T:System.String" /> 轉換成 <see cref="T:System.Double" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3324">The object representing the globalization locale to use, which may be necessary for locale-specific conversions, such as converting a numeric <see cref="T:System.String" /> to a <see cref="T:System.Double" />.</span></span>  
  
<span data-ttu-id="9a871-3325">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-3325">-or-</span></span> 
<span data-ttu-id="9a871-3326">Null 參考 (Visual Basic 中的 <see langword="Nothing" />)，可使用目前執行緒的 <see cref="T:System.Globalization.CultureInfo" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3326">A null reference (<see langword="Nothing" /> in Visual Basic) to use the current thread's <see cref="T:System.Globalization.CultureInfo" />.</span></span></param>
        <summary><span data-ttu-id="9a871-3327">使用指定的繫結條件約束並符合指定的引數清單和文化特性 (Culture) 來叫用指定的成員。</span><span class="sxs-lookup"><span data-stu-id="9a871-3327">Invokes the specified member, using the specified binding constraints and matching the specified argument list and culture.</span></span></summary>
        <returns><span data-ttu-id="9a871-3328">表示叫用的成員之傳回值的物件。</span><span class="sxs-lookup"><span data-stu-id="9a871-3328">An object representing the return value of the invoked member.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-3329">雖然預設繫結器不會處理<xref:System.Globalization.CultureInfo>(`culture`參數)，您可以使用抽象<xref:System.Reflection.Binder?displayProperty=nameWithType>類別，以寫入未處理的自訂繫結器`culture`。</span><span class="sxs-lookup"><span data-stu-id="9a871-3329">Although the default binder does not process <xref:System.Globalization.CultureInfo> (the `culture` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `culture`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9a871-3330">您無法使用<xref:System.Type.InvokeMember%2A>叫用泛型方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-3330">You cannot use <xref:System.Type.InvokeMember%2A> to invoke a generic method.</span></span>  
  
 <span data-ttu-id="9a871-3331">下列<xref:System.Reflection.BindingFlags>篩選器旗標可以用來定義要包含在搜尋中的成員：</span><span class="sxs-lookup"><span data-stu-id="9a871-3331">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which members to include in the search:</span></span>  
  
-   <span data-ttu-id="9a871-3332">指定`BindingFlags.Public`来包含在搜尋中的公用成員。</span><span class="sxs-lookup"><span data-stu-id="9a871-3332">Specify `BindingFlags.Public` to include public members in the search.</span></span>  
  
-   <span data-ttu-id="9a871-3333">指定`BindingFlags.NonPublic`要在搜尋中包含非公用成員 （也就是私用、 內部和受保護成員）。</span><span class="sxs-lookup"><span data-stu-id="9a871-3333">Specify `BindingFlags.NonPublic` to include non-public members (that is, private, internal, and protected members) in the search.</span></span>  
  
-   <span data-ttu-id="9a871-3334">指定`BindingFlags.FlattenHierarchy`来包含在階層中向上的靜態成員。</span><span class="sxs-lookup"><span data-stu-id="9a871-3334">Specify `BindingFlags.FlattenHierarchy` to include static members up the hierarchy.</span></span>  
  
 <span data-ttu-id="9a871-3335">下列<xref:System.Reflection.BindingFlags>輔助鍵旗標可以用來變更搜尋的運作方式：</span><span class="sxs-lookup"><span data-stu-id="9a871-3335">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="9a871-3336">`BindingFlags.IgnoreCase` 忽略大小寫的`name`。</span><span class="sxs-lookup"><span data-stu-id="9a871-3336">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="9a871-3337">`BindingFlags.DeclaredOnly` 若要搜尋只在宣告的成員，才<xref:System.Type>，不只是繼承的成員。</span><span class="sxs-lookup"><span data-stu-id="9a871-3337">`BindingFlags.DeclaredOnly` to search only the members declared on the <xref:System.Type>, not members that were simply inherited.</span></span>  
  
 <span data-ttu-id="9a871-3338">下列<xref:System.Reflection.BindingFlags>引動過程的旗標可以用來表示要與成員採取什麼動作：</span><span class="sxs-lookup"><span data-stu-id="9a871-3338">The following <xref:System.Reflection.BindingFlags> invocation flags can be used to denote what action to take with the member:</span></span>  
  
-   <span data-ttu-id="9a871-3339">`CreateInstance` 若要叫用建構函式。</span><span class="sxs-lookup"><span data-stu-id="9a871-3339">`CreateInstance` to invoke a constructor.</span></span> <span data-ttu-id="9a871-3340">`name` 會被忽略。</span><span class="sxs-lookup"><span data-stu-id="9a871-3340">`name` is ignored.</span></span> <span data-ttu-id="9a871-3341">與其他引動過程旗標無效。</span><span class="sxs-lookup"><span data-stu-id="9a871-3341">Not valid with other invocation flags.</span></span>  
  
-   <span data-ttu-id="9a871-3342">`InvokeMethod` 若要叫用方法，但不是建構函式或類型初始設定式。</span><span class="sxs-lookup"><span data-stu-id="9a871-3342">`InvokeMethod` to invoke a method, but not a constructor or a type initializer.</span></span> <span data-ttu-id="9a871-3343">使用不正確`SetField`或`SetProperty`。</span><span class="sxs-lookup"><span data-stu-id="9a871-3343">Not valid with `SetField` or `SetProperty`.</span></span> <span data-ttu-id="9a871-3344">如果`InvokeMethod`本身，由`BindingFlags.Public`， `BindingFlags.Instance`，和`BindingFlags.Static`會自動包含在內。</span><span class="sxs-lookup"><span data-stu-id="9a871-3344">If `InvokeMethod` is specified by itself, `BindingFlags.Public`, `BindingFlags.Instance`, and `BindingFlags.Static` are automatically included.</span></span>  
  
-   <span data-ttu-id="9a871-3345">`GetField` 若要取得欄位的值。</span><span class="sxs-lookup"><span data-stu-id="9a871-3345">`GetField` to get the value of a field.</span></span> <span data-ttu-id="9a871-3346">與無效`SetField`。</span><span class="sxs-lookup"><span data-stu-id="9a871-3346">Not valid with `SetField`.</span></span>  
  
-   <span data-ttu-id="9a871-3347">`SetField` 若要設定欄位的值。</span><span class="sxs-lookup"><span data-stu-id="9a871-3347">`SetField` to set the value of a field.</span></span> <span data-ttu-id="9a871-3348">與無效`GetField`。</span><span class="sxs-lookup"><span data-stu-id="9a871-3348">Not valid with `GetField`.</span></span>  
  
-   <span data-ttu-id="9a871-3349">`GetProperty` 若要取得的屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-3349">`GetProperty` to get a property.</span></span> <span data-ttu-id="9a871-3350">與無效`SetProperty`。</span><span class="sxs-lookup"><span data-stu-id="9a871-3350">Not valid with `SetProperty`.</span></span>  
  
-   <span data-ttu-id="9a871-3351">`SetProperty` 若要設定的屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-3351">`SetProperty` to set a property.</span></span> <span data-ttu-id="9a871-3352">與無效`GetProperty`。</span><span class="sxs-lookup"><span data-stu-id="9a871-3352">Not valid with `GetProperty`.</span></span>  
  
 <span data-ttu-id="9a871-3353">如需詳細資訊，請參閱 <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="9a871-3353">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="9a871-3354">如果兩個下列條件成立，就會叫用方法：</span><span class="sxs-lookup"><span data-stu-id="9a871-3354">A method will be invoked if both of the following conditions are true:</span></span>  
  
-   <span data-ttu-id="9a871-3355">在方法宣告中的參數數目等於中的引數的數目`args`陣列 (除非該成員上定義預設引數和`BindingFlags.OptionalParamBinding`指定)。</span><span class="sxs-lookup"><span data-stu-id="9a871-3355">The number of parameters in the method declaration equals the number of arguments in the `args` array (unless default arguments are defined on the member and `BindingFlags.OptionalParamBinding` is specified).</span></span>  
  
-   <span data-ttu-id="9a871-3356">每個引數的類型可以轉換為參數的型別繫結器。</span><span class="sxs-lookup"><span data-stu-id="9a871-3356">The type of each argument can be converted by the binder to the type of the parameter.</span></span>  
  
 <span data-ttu-id="9a871-3357">繫結器將會尋找所有相符的方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-3357">The binder will find all of the matching methods.</span></span> <span data-ttu-id="9a871-3358">這些方法會找到根據要求的繫結的類型 (<xref:System.Reflection.BindingFlags>值`InvokeMethod`，`GetProperty`等等)。</span><span class="sxs-lookup"><span data-stu-id="9a871-3358">These methods are found based upon the type of binding requested (<xref:System.Reflection.BindingFlags> values `InvokeMethod`, `GetProperty`, and so on).</span></span> <span data-ttu-id="9a871-3359">一組方法會依名稱、 目的引數，以及一組繫結器中所定義的搜尋修飾詞進行篩選。</span><span class="sxs-lookup"><span data-stu-id="9a871-3359">The set of methods is filtered by the name, number of arguments, and a set of search modifiers defined in the binder.</span></span>  
  
 <span data-ttu-id="9a871-3360">方法選取之後，它會叫用。</span><span class="sxs-lookup"><span data-stu-id="9a871-3360">After the method is selected, it is invoked.</span></span> <span data-ttu-id="9a871-3361">協助工具會在該點檢查。</span><span class="sxs-lookup"><span data-stu-id="9a871-3361">Accessibility is checked at that point.</span></span> <span data-ttu-id="9a871-3362">搜尋可能會控制哪一組方法會搜尋根據與方法關聯的協助工具屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-3362">The search may control which set of methods are searched based upon the accessibility attribute associated with the method.</span></span> <span data-ttu-id="9a871-3363"><xref:System.Reflection.Binder.BindToMethod%2A?displayProperty=nameWithType>方法的<xref:System.Reflection.Binder>類別會負責選取要叫用方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-3363">The <xref:System.Reflection.Binder.BindToMethod%2A?displayProperty=nameWithType> method of the <xref:System.Reflection.Binder> class is responsible for selecting the method to be invoked.</span></span> <span data-ttu-id="9a871-3364">預設繫結器會選取最特定的相符項目。</span><span class="sxs-lookup"><span data-stu-id="9a871-3364">The default binder selects the most specific match.</span></span>  
  
 <span data-ttu-id="9a871-3365">存取限制，會忽略完全信任的程式碼;也就是私用建構函式、 方法、 欄位和屬性可以存取和完全信任程式碼時，透過反映叫用。</span><span class="sxs-lookup"><span data-stu-id="9a871-3365">Access restrictions are ignored for fully trusted code; that is, private constructors, methods, fields, and properties can be accessed and invoked through Reflection whenever the code is fully trusted.</span></span>  
  
 <span data-ttu-id="9a871-3366">您可以使用`Type.InvokeMember`設定設為特定值的欄位，藉由指定<xref:System.Reflection.BindingFlags.SetField?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="9a871-3366">You can use `Type.InvokeMember` to set a field to a particular value by specifying <xref:System.Reflection.BindingFlags.SetField?displayProperty=nameWithType>.</span></span> <span data-ttu-id="9a871-3367">例如，如果您想要設定名為 F C 和 F 的類別上的公用執行個體欄位是`String`您可以使用程式碼，例如：</span><span class="sxs-lookup"><span data-stu-id="9a871-3367">For example, if you want to set a public instance field named F on class C, and F is a `String` you can use code such as:</span></span>  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {"strings new value"}, null);`  
  
 <span data-ttu-id="9a871-3368">如果 F `String[]`，您可以使用程式碼，例如：</span><span class="sxs-lookup"><span data-stu-id="9a871-3368">If F is a `String[]`, you can use code such as:</span></span>  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {new String[]{"a","z","c","d"}}, null);`  
  
 <span data-ttu-id="9a871-3369">這會將這個新的陣列欄位 F 的初始化。</span><span class="sxs-lookup"><span data-stu-id="9a871-3369">which will initialize the field F to this new array.</span></span> <span data-ttu-id="9a871-3370">您也可以使用`Type.InvokeMember`設定陣列中的位置，藉由使用如下所示的程式碼中提供的索引值，然後按一下 [下一步] 的值：</span><span class="sxs-lookup"><span data-stu-id="9a871-3370">You can also use `Type.InvokeMember` to set a position in an array by supplying the index of the value and then the next value by using code such as the following:</span></span>  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {1, "b"}, null);`  
  
 <span data-ttu-id="9a871-3371">這會變更 F 保留字串"b"陣列中的字串"z"。</span><span class="sxs-lookup"><span data-stu-id="9a871-3371">This will change string "z" in the array that F holds to string "b".</span></span>  
  
 <span data-ttu-id="9a871-3372">當您叫用`IDispatch`成員，您可以指定的 DispID，而不是成員名稱中，使用字串格式"[Dispid=3 = # #]"。</span><span class="sxs-lookup"><span data-stu-id="9a871-3372">When you invoke an `IDispatch` member you can specify the DispID instead of the member name, using the string format "[DispID=##]".</span></span> <span data-ttu-id="9a871-3373">比方說，如果 DispID 的 MyComMethod 為 3，您可以指定字串"[Dispid=3 = 3]"而不是 「 MyComMethod"。</span><span class="sxs-lookup"><span data-stu-id="9a871-3373">For example, if the DispID of MyComMethod is 3, you can specify the string "[DispID=3]" instead of "MyComMethod".</span></span> <span data-ttu-id="9a871-3374">叫用成員的 DispID 的速度比依名稱查閱的成員。</span><span class="sxs-lookup"><span data-stu-id="9a871-3374">Invoking a member by DispID is faster than looking up the member by name.</span></span> <span data-ttu-id="9a871-3375">在複雜的彙總的情況下，DispID 有時是唯一的方法來叫用所需的成員。</span><span class="sxs-lookup"><span data-stu-id="9a871-3375">In complex aggregation scenarios, the DispID is sometimes the only way to invoke the desired member.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9a871-3376">開頭[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，這個方法可以用來存取非公用成員，如果呼叫者已授與<xref:System.Security.Permissions.ReflectionPermission>使用<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>旗標，並限制為呼叫端的非公用成員的授權集是否授與集或子集效果。</span><span class="sxs-lookup"><span data-stu-id="9a871-3376">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public members is restricted to the caller's grant set, or a subset thereof.</span></span> <span data-ttu-id="9a871-3377">(請參閱[反映的安全性考量](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)。)</span><span class="sxs-lookup"><span data-stu-id="9a871-3377">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="9a871-3378">若要使用這項功能，您的應用程式應將目標設為 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] (含) 以後版本。</span><span class="sxs-lookup"><span data-stu-id="9a871-3378">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9a871-3379"><paramref name="invokeAttr" />不包含 <see langword="CreateInstance" />，且 <paramref name="name" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3379"><paramref name="invokeAttr" /> does not contain <see langword="CreateInstance" /> and <paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9a871-3380"><paramref name="invokeAttr" /> 不是有效的 <see cref="T:System.Reflection.BindingFlags" /> 屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-3380"><paramref name="invokeAttr" /> is not a valid <see cref="T:System.Reflection.BindingFlags" /> attribute.</span></span>  
  
<span data-ttu-id="9a871-3381">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-3381">-or-</span></span> 
 <span data-ttu-id="9a871-3382"><paramref name="invokeAttr" /> 不包含下列其中一個繫結旗標：<see langword="InvokeMethod" />、<see langword="CreateInstance" />、<see langword="GetField" />、<see langword="SetField" />、<see langword="GetProperty" /> 或 <see langword="SetProperty" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3382"><paramref name="invokeAttr" /> does not contain one of the following binding flags: <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />.</span></span>  
  
<span data-ttu-id="9a871-3383">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-3383">-or-</span></span> 
 <span data-ttu-id="9a871-3384"><paramref name="invokeAttr" /> 包含與 <see langword="InvokeMethod" />、<see langword="GetField" />、<see langword="SetField" />、<see langword="GetProperty" /> 或 <see langword="SetProperty" /> 合併的 <see langword="CreateInstance" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3384"><paramref name="invokeAttr" /> contains <see langword="CreateInstance" /> combined with <see langword="InvokeMethod" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />.</span></span>  
  
<span data-ttu-id="9a871-3385">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-3385">-or-</span></span> 
 <span data-ttu-id="9a871-3386"><paramref name="invokeAttr" /> 同時包含 <see langword="GetField" /> 和 <see langword="SetField" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3386"><paramref name="invokeAttr" /> contains both <see langword="GetField" /> and <see langword="SetField" />.</span></span>  
  
<span data-ttu-id="9a871-3387">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-3387">-or-</span></span> 
 <span data-ttu-id="9a871-3388"><paramref name="invokeAttr" /> 同時包含 <see langword="GetProperty" /> 和 <see langword="SetProperty" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3388"><paramref name="invokeAttr" /> contains both <see langword="GetProperty" /> and <see langword="SetProperty" />.</span></span>  
  
<span data-ttu-id="9a871-3389">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-3389">-or-</span></span> 
 <span data-ttu-id="9a871-3390"><paramref name="invokeAttr" /> 包含與 <see langword="SetField" /> 或 <see langword="SetProperty" /> 合併的 <see langword="InvokeMethod" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3390"><paramref name="invokeAttr" /> contains <see langword="InvokeMethod" /> combined with <see langword="SetField" /> or <see langword="SetProperty" />.</span></span>  
  
<span data-ttu-id="9a871-3391">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-3391">-or-</span></span> 
 <span data-ttu-id="9a871-3392"><paramref name="invokeAttr" /> 包含 <see langword="SetField" /> 且 <paramref name="args" /> 具有一個以上的項目。</span><span class="sxs-lookup"><span data-stu-id="9a871-3392"><paramref name="invokeAttr" /> contains <see langword="SetField" /> and <paramref name="args" /> has more than one element.</span></span>  
  
<span data-ttu-id="9a871-3393">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-3393">-or-</span></span> 
<span data-ttu-id="9a871-3394">已在 COM 物件上呼叫此方法且下列其中一個繫結旗標未傳入：<see langword="BindingFlags.InvokeMethod" />、<see langword="BindingFlags.GetProperty" />、<see langword="BindingFlags.SetProperty" />、<see langword="BindingFlags.PutDispProperty" /> 或 <see langword="BindingFlags.PutRefDispProperty" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3394">This method is called on a COM object and one of the following binding flags was not passed in: <see langword="BindingFlags.InvokeMethod" />, <see langword="BindingFlags.GetProperty" />, <see langword="BindingFlags.SetProperty" />, <see langword="BindingFlags.PutDispProperty" />, or <see langword="BindingFlags.PutRefDispProperty" />.</span></span>  
  
<span data-ttu-id="9a871-3395">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-3395">-or-</span></span> 
<span data-ttu-id="9a871-3396">其中一個具名參數陣列包含的字串是 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3396">One of the named parameter arrays contains a string that is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="9a871-3397">指定的成員是類別初始設定式。</span><span class="sxs-lookup"><span data-stu-id="9a871-3397">The specified member is a class initializer.</span></span></exception>
        <exception cref="T:System.MissingFieldException"><span data-ttu-id="9a871-3398">找不到欄位或屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-3398">The field or property cannot be found.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="9a871-3399">找不到符合 <paramref name="args" /> 中之引數的方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-3399">No method can be found that matches the arguments in <paramref name="args" />.</span></span>  
  
<span data-ttu-id="9a871-3400">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-3400">-or-</span></span> 
<span data-ttu-id="9a871-3401">目前的 <see cref="T:System.Type" /> 物件代表包含開啟類型參數的類型，亦即，<see cref="P:System.Type.ContainsGenericParameters" /> 傳回 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3401">The current <see cref="T:System.Type" /> object represents a type that contains open type parameters, that is, <see cref="P:System.Type.ContainsGenericParameters" /> returns <see langword="true" />.</span></span></exception>
        <exception cref="T:System.Reflection.TargetException"><span data-ttu-id="9a871-3402">無法在 <paramref name="target" /> 上叫用指定的成員。</span><span class="sxs-lookup"><span data-stu-id="9a871-3402">The specified member cannot be invoked on <paramref name="target" />.</span></span></exception>
        <exception cref="T:System.Reflection.AmbiguousMatchException"><span data-ttu-id="9a871-3403">有一個以上符合繫結準則的方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-3403">More than one method matches the binding criteria.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9a871-3404"><paramref name="name" /> 所表示的方法有一或多個未指定的泛型類型參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-3404">The method represented by <paramref name="name" /> has one or more unspecified generic type parameters.</span></span> <span data-ttu-id="9a871-3405">亦即，方法的 <see cref="P:System.Reflection.MethodBase.ContainsGenericParameters" /> 屬性傳回 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3405">That is, the method's <see cref="P:System.Reflection.MethodBase.ContainsGenericParameters" /> property returns <see langword="true" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="9a871-3406">用於存取非公用成員，不論其權限授權集。</span><span class="sxs-lookup"><span data-stu-id="9a871-3406">for accessing non-public members regardless of their grant set.</span></span> <span data-ttu-id="9a871-3407">相關聯的列舉型別： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="9a871-3407">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="9a871-3408">呼叫 unmanaged 程式碼。</span><span class="sxs-lookup"><span data-stu-id="9a871-3408">to call unmanaged code.</span></span> <span data-ttu-id="9a871-3409">相關聯的列舉型別： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="9a871-3409">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="T:System.Reflection.ParameterAttributes" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
      </Docs>
    </Member>
    <Member MemberName="InvokeMember">
      <MemberSignature Language="C#" Value="public abstract object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] namedParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object InvokeMember(string name, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object target, object[] args, valuetype System.Reflection.ParameterModifier[] modifiers, class System.Globalization.CultureInfo culture, string[] namedParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ InvokeMember(System::String ^ name, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, System::Object ^ target, cli::array &lt;System::Object ^&gt; ^ args, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers, System::Globalization::CultureInfo ^ culture, cli::array &lt;System::String ^&gt; ^ namedParameters);" />
      <MemberSignature Language="F#" Value="abstract member InvokeMember : string * System.Reflection.BindingFlags * System.Reflection.Binder * obj * obj[] * System.Reflection.ParameterModifier[] * System.Globalization.CultureInfo * string[] -&gt; obj" Usage="type.InvokeMember (name, invokeAttr, binder, target, args, modifiers, culture, namedParameters)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="namedParameters" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="9a871-3410">字串，包含要叫用的建構函式、方法、屬性或欄位成員的名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-3410">The string containing the name of the constructor, method, property, or field member to invoke.</span></span>  
  
<span data-ttu-id="9a871-3411">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-3411">-or-</span></span> 
<span data-ttu-id="9a871-3412">空字串 ("")，要叫用預設成員。</span><span class="sxs-lookup"><span data-stu-id="9a871-3412">An empty string ("") to invoke the default member.</span></span>  
  
<span data-ttu-id="9a871-3413">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-3413">-or-</span></span> 
<span data-ttu-id="9a871-3414">對 <see langword="IDispatch" /> 成員表示 DispID 的字串，例如 "[DispID=3]"。</span><span class="sxs-lookup"><span data-stu-id="9a871-3414">For <see langword="IDispatch" /> members, a string representing the DispID, for example "[DispID=3]".</span></span></param>
        <param name="invokeAttr"><span data-ttu-id="9a871-3415">位元遮罩，由一或多個 <see cref="T:System.Reflection.BindingFlags" /> 組成，而這些旗標會指定執行搜尋的方式。</span><span class="sxs-lookup"><span data-stu-id="9a871-3415">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span> <span data-ttu-id="9a871-3416">該存取可以是其中一個 <see langword="BindingFlags" />，例如 <see langword="Public" />、<see langword="NonPublic" />、<see langword="Private" />、<see langword="InvokeMethod" />、<see langword="GetField" /> 等等。</span><span class="sxs-lookup"><span data-stu-id="9a871-3416">The access can be one of the <see langword="BindingFlags" /> such as <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" />, <see langword="GetField" />, and so on.</span></span> <span data-ttu-id="9a871-3417">不需要指定查閱的類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-3417">The type of lookup need not be specified.</span></span> <span data-ttu-id="9a871-3418">如果省略查閱的類型，則會使用 <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> | <see langword="BindingFlags.Static" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3418">If the type of lookup is omitted, <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> | <see langword="BindingFlags.Static" /> are used.</span></span></param>
        <param name="binder"><span data-ttu-id="9a871-3419">定義一組屬性並啟用繫結的物件，可包含多載方法的選擇、引數類型的強制，以及透過反映的成員引動過程。</span><span class="sxs-lookup"><span data-stu-id="9a871-3419">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span></span>  
  
<span data-ttu-id="9a871-3420">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-3420">-or-</span></span> 
<span data-ttu-id="9a871-3421">Null 參考 (在 Visual Basic 中為 Nothing)，可使用 <see cref="P:System.Type.DefaultBinder" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3421">A null reference (Nothing in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span></span> <span data-ttu-id="9a871-3422">請注意，可能需要明確定義 <see cref="T:System.Reflection.Binder" /> 物件，才能順利以變數引數叫用方法多載。</span><span class="sxs-lookup"><span data-stu-id="9a871-3422">Note that explicitly defining a <see cref="T:System.Reflection.Binder" /> object may be required for successfully invoking method overloads with variable arguments.</span></span></param>
        <param name="target"><span data-ttu-id="9a871-3423">要在其上叫用指定成員的物件。</span><span class="sxs-lookup"><span data-stu-id="9a871-3423">The object on which to invoke the specified member.</span></span></param>
        <param name="args"><span data-ttu-id="9a871-3424">包含引數的陣列，這些引數會傳遞給要叫用的成員。</span><span class="sxs-lookup"><span data-stu-id="9a871-3424">An array containing the arguments to pass to the member to invoke.</span></span></param>
        <param name="modifiers"><span data-ttu-id="9a871-3425"><see cref="T:System.Reflection.ParameterModifier" /> 物件的陣列，代表在 <paramref name="args" /> 陣列中與對應項目關聯的屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-3425">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="args" /> array.</span></span> <span data-ttu-id="9a871-3426">參數的關聯屬性儲存在成員的簽章中。</span><span class="sxs-lookup"><span data-stu-id="9a871-3426">A parameter's associated attributes are stored in the member's signature.</span></span>  
  
<span data-ttu-id="9a871-3427">預設繫結器只會在呼叫 COM 元件時處理這個參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-3427">The default binder processes this parameter only when calling a COM component.</span></span></param>
        <param name="culture"><span data-ttu-id="9a871-3428"><see cref="T:System.Globalization.CultureInfo" /> 物件，代表要使用的全球化地區設定，進行特定地區設定轉換時可能需要這個物件，例如將數值的 String 轉換成 Double。</span><span class="sxs-lookup"><span data-stu-id="9a871-3428">The <see cref="T:System.Globalization.CultureInfo" /> object representing the globalization locale to use, which may be necessary for locale-specific conversions, such as converting a numeric String to a Double.</span></span>  
  
<span data-ttu-id="9a871-3429">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-3429">-or-</span></span> 
<span data-ttu-id="9a871-3430">Null 參考 (Visual Basic 中的 <see langword="Nothing" />)，可使用目前執行緒的 <see cref="T:System.Globalization.CultureInfo" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3430">A null reference (<see langword="Nothing" /> in Visual Basic) to use the current thread's <see cref="T:System.Globalization.CultureInfo" />.</span></span></param>
        <param name="namedParameters"><span data-ttu-id="9a871-3431">陣列，包含 <paramref name="args" /> 陣列中的值所要傳遞之目標參數的名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-3431">An array containing the names of the parameters to which the values in the <paramref name="args" /> array are passed.</span></span></param>
        <summary><span data-ttu-id="9a871-3432">在衍生類別中覆寫時，使用指定的繫結條件約束並符合指定的引數清單、修飾詞和文化特性，來叫用指定的成員。</span><span class="sxs-lookup"><span data-stu-id="9a871-3432">When overridden in a derived class, invokes the specified member, using the specified binding constraints and matching the specified argument list, modifiers and culture.</span></span></summary>
        <returns><span data-ttu-id="9a871-3433">表示叫用的成員之傳回值的物件。</span><span class="sxs-lookup"><span data-stu-id="9a871-3433">An object representing the return value of the invoked member.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-3434">`InvokeMember` 呼叫建構函式或方法成員，取得或設定之屬性成員，取得或設定資料欄位成員，或取得或設定陣列成員的項目。</span><span class="sxs-lookup"><span data-stu-id="9a871-3434">`InvokeMember` calls a constructor member or a method member, gets or sets a property member, gets or sets a data field member, or gets or sets an element of an array member.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9a871-3435">您無法使用<xref:System.Type.InvokeMember%2A>叫用泛型方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-3435">You cannot use <xref:System.Type.InvokeMember%2A> to invoke a generic method.</span></span>  
  
 <span data-ttu-id="9a871-3436">當您叫用`IDispatch`成員，您可以指定的 DispID，而不是成員名稱中，使用字串格式"[Dispid=3 = # #]"。</span><span class="sxs-lookup"><span data-stu-id="9a871-3436">When you invoke an `IDispatch` member you can specify the DispID instead of the member name, using the string format "[DispID=##]".</span></span> <span data-ttu-id="9a871-3437">比方說，如果 DispID 的 MyComMethod 為 3，您可以指定字串"[Dispid=3 = 3]"而不是 「 MyComMethod"。</span><span class="sxs-lookup"><span data-stu-id="9a871-3437">For example, if the DispID of MyComMethod is 3, you can specify the string "[DispID=3]" instead of "MyComMethod".</span></span> <span data-ttu-id="9a871-3438">叫用成員的 DispID 的速度比依名稱查閱的成員。</span><span class="sxs-lookup"><span data-stu-id="9a871-3438">Invoking a member by DispID is faster than looking up the member by name.</span></span> <span data-ttu-id="9a871-3439">在複雜的彙總的情況下，DispID 有時是唯一的方法來叫用所需的成員。</span><span class="sxs-lookup"><span data-stu-id="9a871-3439">In complex aggregation scenarios, the DispID is sometimes the only way to invoke the desired member.</span></span>  
  
 <span data-ttu-id="9a871-3440">雖然預設繫結器不會處理<xref:System.Reflection.ParameterModifier>或<xref:System.Globalization.CultureInfo>(`modifiers`並`culture`參數)，您可以使用抽象<xref:System.Reflection.Binder?displayProperty=nameWithType>類別，以寫入未處理的自訂繫結器`modifiers`和`culture`.</span><span class="sxs-lookup"><span data-stu-id="9a871-3440">Although the default binder does not process <xref:System.Reflection.ParameterModifier> or <xref:System.Globalization.CultureInfo> (the `modifiers` and `culture` parameters), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers` and `culture`.</span></span> <span data-ttu-id="9a871-3441">`ParameterModifier` 透過 COM interop 呼叫時才會使用和處理傳址方式傳遞的參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-3441">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="9a871-3442">`namedParameters` 陣列中的每個參數會在 `args` 陣列中取得對應項目的值。</span><span class="sxs-lookup"><span data-stu-id="9a871-3442">Each parameter in the `namedParameters` array gets the value in the corresponding element in the `args` array.</span></span> <span data-ttu-id="9a871-3443">如果 `args` 的長度大於 `namedParameters` 的長度，則會依序傳遞其餘引數值。</span><span class="sxs-lookup"><span data-stu-id="9a871-3443">If the length of `args` is greater than the length of `namedParameters`, the remaining argument values are passed in order.</span></span>  
  
 <span data-ttu-id="9a871-3444">`namedParameters`陣列可以用來變更輸入陣列中的引數的順序。</span><span class="sxs-lookup"><span data-stu-id="9a871-3444">The `namedParameters` array can be used to change the order of arguments in an input array.</span></span> <span data-ttu-id="9a871-3445">例如，假設方法`M(string a, int b)`(`M(ByVal a As String, ByVal b As Integer)` Visual Basic 中) 與輸入的陣列`{ 42, "x" }`，不變，可傳遞的輸入的陣列`args`如果陣列`{ "b", "a" }`提供`namedParameters`。</span><span class="sxs-lookup"><span data-stu-id="9a871-3445">For example, given the method `M(string a, int b)` (`M(ByVal a As String, ByVal b As Integer)` in Visual Basic) and the input array `{ 42, "x" }`, the input array can be passed unchanged to `args` if the array `{ "b", "a" }` is supplied for `namedParameters`.</span></span>  
  
 <span data-ttu-id="9a871-3446">下列<xref:System.Reflection.BindingFlags>篩選器旗標可以用來定義要包含在搜尋中的成員：</span><span class="sxs-lookup"><span data-stu-id="9a871-3446">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which members to include in the search:</span></span>  
  
-   <span data-ttu-id="9a871-3447">指定`BindingFlags.Public`来包含在搜尋中的公用成員。</span><span class="sxs-lookup"><span data-stu-id="9a871-3447">Specify `BindingFlags.Public` to include public members in the search.</span></span>  
  
-   <span data-ttu-id="9a871-3448">指定`BindingFlags.NonPublic`要在搜尋中包含非公用成員 （也就是私用、 內部和受保護成員）。</span><span class="sxs-lookup"><span data-stu-id="9a871-3448">Specify `BindingFlags.NonPublic` to include non-public members (that is, private, internal, and protected members) in the search.</span></span>  
  
-   <span data-ttu-id="9a871-3449">指定`BindingFlags.FlattenHierarchy`来包含在階層中向上的靜態成員。</span><span class="sxs-lookup"><span data-stu-id="9a871-3449">Specify `BindingFlags.FlattenHierarchy` to include static members up the hierarchy.</span></span>  
  
 <span data-ttu-id="9a871-3450">下列<xref:System.Reflection.BindingFlags>輔助鍵旗標可以用來變更搜尋的運作方式：</span><span class="sxs-lookup"><span data-stu-id="9a871-3450">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="9a871-3451">`BindingFlags.IgnoreCase` 忽略大小寫的`name`。</span><span class="sxs-lookup"><span data-stu-id="9a871-3451">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="9a871-3452">`BindingFlags.DeclaredOnly` 若要搜尋只在宣告的成員，才<xref:System.Type>，不只是繼承的成員。</span><span class="sxs-lookup"><span data-stu-id="9a871-3452">`BindingFlags.DeclaredOnly` to search only the members declared on the <xref:System.Type>, not members that were simply inherited.</span></span>  
  
 <span data-ttu-id="9a871-3453">下列<xref:System.Reflection.BindingFlags>引動過程的旗標可以用來表示要與成員採取什麼動作：</span><span class="sxs-lookup"><span data-stu-id="9a871-3453">The following <xref:System.Reflection.BindingFlags> invocation flags can be used to denote what action to take with the member:</span></span>  
  
-   <span data-ttu-id="9a871-3454">`CreateInstance` 若要叫用建構函式。</span><span class="sxs-lookup"><span data-stu-id="9a871-3454">`CreateInstance` to invoke a constructor.</span></span> <span data-ttu-id="9a871-3455">`name` 會被忽略。</span><span class="sxs-lookup"><span data-stu-id="9a871-3455">`name` is ignored.</span></span> <span data-ttu-id="9a871-3456">與其他引動過程旗標無效。</span><span class="sxs-lookup"><span data-stu-id="9a871-3456">Not valid with other invocation flags.</span></span>  
  
-   <span data-ttu-id="9a871-3457">`InvokeMethod` 若要叫用方法，但不是建構函式或類型初始設定式。</span><span class="sxs-lookup"><span data-stu-id="9a871-3457">`InvokeMethod` to invoke a method, but not a constructor or a type initializer.</span></span> <span data-ttu-id="9a871-3458">使用不正確`SetField`或`SetProperty`。</span><span class="sxs-lookup"><span data-stu-id="9a871-3458">Not valid with `SetField` or `SetProperty`.</span></span> <span data-ttu-id="9a871-3459">如果`InvokeMethod`本身，由`BindingFlags.Public`， `BindingFlags.Instance`，和`BindingFlags.Static`會自動包含在內。</span><span class="sxs-lookup"><span data-stu-id="9a871-3459">If `InvokeMethod` is specified by itself, `BindingFlags.Public`, `BindingFlags.Instance`, and `BindingFlags.Static` are automatically included.</span></span>  
  
-   <span data-ttu-id="9a871-3460">`GetField` 若要取得欄位的值。</span><span class="sxs-lookup"><span data-stu-id="9a871-3460">`GetField` to get the value of a field.</span></span> <span data-ttu-id="9a871-3461">與無效`SetField`。</span><span class="sxs-lookup"><span data-stu-id="9a871-3461">Not valid with `SetField`.</span></span>  
  
-   <span data-ttu-id="9a871-3462">`SetField` 若要設定欄位的值。</span><span class="sxs-lookup"><span data-stu-id="9a871-3462">`SetField` to set the value of a field.</span></span> <span data-ttu-id="9a871-3463">與無效`GetField`。</span><span class="sxs-lookup"><span data-stu-id="9a871-3463">Not valid with `GetField`.</span></span>  
  
-   <span data-ttu-id="9a871-3464">`GetProperty` 若要取得的屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-3464">`GetProperty` to get a property.</span></span> <span data-ttu-id="9a871-3465">與無效`SetProperty`。</span><span class="sxs-lookup"><span data-stu-id="9a871-3465">Not valid with `SetProperty`.</span></span>  
  
-   <span data-ttu-id="9a871-3466">`SetProperty` 若要設定的屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-3466">`SetProperty` to set a property.</span></span> <span data-ttu-id="9a871-3467">與無效`GetProperty`。</span><span class="sxs-lookup"><span data-stu-id="9a871-3467">Not valid with `GetProperty`.</span></span>  
  
 <span data-ttu-id="9a871-3468">如需詳細資訊，請參閱 <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="9a871-3468">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="9a871-3469">如果兩個下列條件成立，就會叫用方法：</span><span class="sxs-lookup"><span data-stu-id="9a871-3469">A method will be invoked if both of the following conditions are true:</span></span>  
  
-   <span data-ttu-id="9a871-3470">在方法宣告中的參數數目等於中的引數的數目`args`陣列 (除非該成員上定義預設引數和`BindingFlags.OptionalParamBinding`指定)。</span><span class="sxs-lookup"><span data-stu-id="9a871-3470">The number of parameters in the method declaration equals the number of arguments in the `args` array (unless default arguments are defined on the member and `BindingFlags.OptionalParamBinding` is specified).</span></span>  
  
-   <span data-ttu-id="9a871-3471">每個引數的類型可以轉換為參數的型別繫結器。</span><span class="sxs-lookup"><span data-stu-id="9a871-3471">The type of each argument can be converted by the binder to the type of the parameter.</span></span>  
  
 <span data-ttu-id="9a871-3472">繫結器將會尋找所有相符的方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-3472">The binder will find all of the matching methods.</span></span> <span data-ttu-id="9a871-3473">這些方法會找到根據要求的繫結的類型 (<xref:System.Reflection.BindingFlags>值`InvokeMethod`，`GetProperty`等等)。</span><span class="sxs-lookup"><span data-stu-id="9a871-3473">These methods are found based upon the type of binding requested (<xref:System.Reflection.BindingFlags> values `InvokeMethod`, `GetProperty`, and so on).</span></span> <span data-ttu-id="9a871-3474">一組方法會依名稱、 目的引數，以及一組繫結器中所定義的搜尋修飾詞進行篩選。</span><span class="sxs-lookup"><span data-stu-id="9a871-3474">The set of methods is filtered by the name, number of arguments, and a set of search modifiers defined in the binder.</span></span>  
  
 <span data-ttu-id="9a871-3475">方法選取之後，它會叫用。</span><span class="sxs-lookup"><span data-stu-id="9a871-3475">After the method is selected, it is invoked.</span></span> <span data-ttu-id="9a871-3476">協助工具會在該點檢查。</span><span class="sxs-lookup"><span data-stu-id="9a871-3476">Accessibility is checked at that point.</span></span> <span data-ttu-id="9a871-3477">搜尋可能會控制哪一組方法會搜尋根據與方法關聯的協助工具屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-3477">The search may control which set of methods are searched based upon the accessibility attribute associated with the method.</span></span> <span data-ttu-id="9a871-3478"><xref:System.Reflection.Binder.BindToMethod%2A?displayProperty=nameWithType>方法的<xref:System.Reflection.Binder>類別會負責選取要叫用方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-3478">The <xref:System.Reflection.Binder.BindToMethod%2A?displayProperty=nameWithType> method of the <xref:System.Reflection.Binder> class is responsible for selecting the method to be invoked.</span></span> <span data-ttu-id="9a871-3479">預設繫結器會選取最特定的相符項目。</span><span class="sxs-lookup"><span data-stu-id="9a871-3479">The default binder selects the most specific match.</span></span>  
  
 <span data-ttu-id="9a871-3480">`InvokeMember` 可用來叫用其參數具有預設值的方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-3480">`InvokeMember` can be used to invoke methods with parameters that have default values.</span></span> <span data-ttu-id="9a871-3481">若要繫結至這些方法，需要反映<xref:System.Reflection.BindingFlags.OptionalParamBinding?displayProperty=nameWithType>指定。</span><span class="sxs-lookup"><span data-stu-id="9a871-3481">To bind to these methods, Reflection requires <xref:System.Reflection.BindingFlags.OptionalParamBinding?displayProperty=nameWithType> to be specified.</span></span> <span data-ttu-id="9a871-3482">預設值是參數，您可以提供不同的值，或提供<xref:System.Reflection.Missing.Value?displayProperty=nameWithType>可使用預設值。</span><span class="sxs-lookup"><span data-stu-id="9a871-3482">For a parameter that has a default value, you can either supply a different value, or supply <xref:System.Reflection.Missing.Value?displayProperty=nameWithType> to use the default value.</span></span>  
  
 <span data-ttu-id="9a871-3483">例如，請考慮 MyMethod 之類的方法 (int，float y x = 2.0)。</span><span class="sxs-lookup"><span data-stu-id="9a871-3483">For example, consider a method such as MyMethod(int x, float y = 2.0).</span></span> <span data-ttu-id="9a871-3484">要叫用這個方法僅於第一個引數作為 MyMethod(4) 時，傳遞下列其中一個以上的繫結旗標，並傳遞兩個引數，也就是第一個引數的 4 和`Missing.Value`第二個引數。</span><span class="sxs-lookup"><span data-stu-id="9a871-3484">To invoke this method with only the first argument as MyMethod(4), pass one of the above binding flags and pass two arguments, namely, 4 for the first argument and `Missing.Value` for the second argument.</span></span> <span data-ttu-id="9a871-3485">除非您使用`Missing.Value`，您不可以省略選擇性參數`Invoke`方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-3485">Unless you use `Missing.Value`, you may not omit optional parameters with the `Invoke` method.</span></span> <span data-ttu-id="9a871-3486">如果您必須這麼做，請使用`InvokeMember`改。</span><span class="sxs-lookup"><span data-stu-id="9a871-3486">If you must do so, use `InvokeMember` instead.</span></span>  
  
 <span data-ttu-id="9a871-3487">存取限制，會忽略完全信任的程式碼;也就是私用建構函式、 方法、 欄位和屬性可以存取和透過叫用<xref:System.Reflection>每當程式碼受到完全信任。</span><span class="sxs-lookup"><span data-stu-id="9a871-3487">Access restrictions are ignored for fully trusted code; that is, private constructors, methods, fields, and properties can be accessed and invoked through <xref:System.Reflection> whenever the code is fully trusted.</span></span>  
  
 <span data-ttu-id="9a871-3488">您可以使用`Type.InvokeMember`設定設為特定值的欄位，藉由指定<xref:System.Reflection.BindingFlags.SetField?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="9a871-3488">You can use `Type.InvokeMember` to set a field to a particular value by specifying <xref:System.Reflection.BindingFlags.SetField?displayProperty=nameWithType>.</span></span> <span data-ttu-id="9a871-3489">例如，如果您想要設定名為 F C 和 F 的類別上的公用執行個體欄位是`String`，您可以使用程式碼，例如：</span><span class="sxs-lookup"><span data-stu-id="9a871-3489">For example, if you want to set a public instance field named F on class C, and F is a `String`, you can use code such as:</span></span>  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {"strings new value"}, null, null, null);`  
  
 <span data-ttu-id="9a871-3490">如果 F `String[]`，您可以使用程式碼，例如：</span><span class="sxs-lookup"><span data-stu-id="9a871-3490">If F is a `String[]`, you can use code such as:</span></span>  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {new String[]{"a","z","c","d"}}, null, null, null);`  
  
 <span data-ttu-id="9a871-3491">這會將這個新的陣列欄位 F 的初始化。</span><span class="sxs-lookup"><span data-stu-id="9a871-3491">which will initialize the field F to this new array.</span></span> <span data-ttu-id="9a871-3492">您也可以使用`Type.InvokeMember`設定陣列中的位置，藉由使用如下所示的程式碼中提供的索引值，然後按一下 [下一步] 的值：</span><span class="sxs-lookup"><span data-stu-id="9a871-3492">You can also use `Type.InvokeMember` to set a position in an array by supplying the index of the value and then the next value by using code such as the following:</span></span>  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {1, "b"}, null, null, null);`  
  
 <span data-ttu-id="9a871-3493">這會變更 F 保留字串"b"陣列中的字串"z"。</span><span class="sxs-lookup"><span data-stu-id="9a871-3493">This will change string "z" in the array that F holds to string "b".</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9a871-3494">開頭[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，這個方法可以用來存取非公用成員，如果呼叫者已授與<xref:System.Security.Permissions.ReflectionPermission>使用<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>旗標，並限制為呼叫端的非公用成員的授權集是否授與集或子集效果。</span><span class="sxs-lookup"><span data-stu-id="9a871-3494">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public members is restricted to the caller's grant set, or a subset thereof.</span></span> <span data-ttu-id="9a871-3495">(請參閱[反映的安全性考量](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)。)</span><span class="sxs-lookup"><span data-stu-id="9a871-3495">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="9a871-3496">若要使用這項功能，您的應用程式應將目標設為 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] (含) 以後版本。</span><span class="sxs-lookup"><span data-stu-id="9a871-3496">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9a871-3497"><paramref name="invokeAttr" />不包含 <see langword="CreateInstance" />，且 <paramref name="name" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3497"><paramref name="invokeAttr" /> does not contain <see langword="CreateInstance" /> and <paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9a871-3498"><paramref name="args" /> 和 <paramref name="modifiers" /> 的長度不同。</span><span class="sxs-lookup"><span data-stu-id="9a871-3498"><paramref name="args" /> and <paramref name="modifiers" /> do not have the same length.</span></span>  
  
<span data-ttu-id="9a871-3499">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-3499">-or-</span></span> 
 <span data-ttu-id="9a871-3500"><paramref name="invokeAttr" /> 不是有效的 <see cref="T:System.Reflection.BindingFlags" /> 屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-3500"><paramref name="invokeAttr" /> is not a valid <see cref="T:System.Reflection.BindingFlags" /> attribute.</span></span>  
  
<span data-ttu-id="9a871-3501">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-3501">-or-</span></span> 
 <span data-ttu-id="9a871-3502"><paramref name="invokeAttr" /> 不包含下列其中一個繫結旗標：<see langword="InvokeMethod" />、<see langword="CreateInstance" />、<see langword="GetField" />、<see langword="SetField" />、<see langword="GetProperty" /> 或 <see langword="SetProperty" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3502"><paramref name="invokeAttr" /> does not contain one of the following binding flags: <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />.</span></span>  
  
<span data-ttu-id="9a871-3503">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-3503">-or-</span></span> 
 <span data-ttu-id="9a871-3504"><paramref name="invokeAttr" /> 包含與 <see langword="InvokeMethod" />、<see langword="GetField" />、<see langword="SetField" />、<see langword="GetProperty" /> 或 <see langword="SetProperty" /> 合併的 <see langword="CreateInstance" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3504"><paramref name="invokeAttr" /> contains <see langword="CreateInstance" /> combined with <see langword="InvokeMethod" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />.</span></span>  
  
<span data-ttu-id="9a871-3505">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-3505">-or-</span></span> 
 <span data-ttu-id="9a871-3506"><paramref name="invokeAttr" /> 同時包含 <see langword="GetField" /> 和 <see langword="SetField" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3506"><paramref name="invokeAttr" /> contains both <see langword="GetField" /> and <see langword="SetField" />.</span></span>  
  
<span data-ttu-id="9a871-3507">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-3507">-or-</span></span> 
 <span data-ttu-id="9a871-3508"><paramref name="invokeAttr" /> 同時包含 <see langword="GetProperty" /> 和 <see langword="SetProperty" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3508"><paramref name="invokeAttr" /> contains both <see langword="GetProperty" /> and <see langword="SetProperty" />.</span></span>  
  
<span data-ttu-id="9a871-3509">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-3509">-or-</span></span> 
 <span data-ttu-id="9a871-3510"><paramref name="invokeAttr" /> 包含與 <see langword="SetField" /> 或 <see langword="SetProperty" /> 合併的 <see langword="InvokeMethod" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3510"><paramref name="invokeAttr" /> contains <see langword="InvokeMethod" /> combined with <see langword="SetField" /> or <see langword="SetProperty" />.</span></span>  
  
<span data-ttu-id="9a871-3511">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-3511">-or-</span></span> 
 <span data-ttu-id="9a871-3512"><paramref name="invokeAttr" /> 包含 <see langword="SetField" /> 且 <paramref name="args" /> 具有一個以上的項目。</span><span class="sxs-lookup"><span data-stu-id="9a871-3512"><paramref name="invokeAttr" /> contains <see langword="SetField" /> and <paramref name="args" /> has more than one element.</span></span>  
  
<span data-ttu-id="9a871-3513">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-3513">-or-</span></span> 
<span data-ttu-id="9a871-3514">具名參數陣列大於引數陣列。</span><span class="sxs-lookup"><span data-stu-id="9a871-3514">The named parameter array is larger than the argument array.</span></span>  
  
<span data-ttu-id="9a871-3515">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-3515">-or-</span></span> 
<span data-ttu-id="9a871-3516">已在 COM 物件上呼叫此方法且下列其中一個繫結旗標未傳入：<see langword="BindingFlags.InvokeMethod" />、<see langword="BindingFlags.GetProperty" />、<see langword="BindingFlags.SetProperty" />、<see langword="BindingFlags.PutDispProperty" /> 或 <see langword="BindingFlags.PutRefDispProperty" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3516">This method is called on a COM object and one of the following binding flags was not passed in: <see langword="BindingFlags.InvokeMethod" />, <see langword="BindingFlags.GetProperty" />, <see langword="BindingFlags.SetProperty" />, <see langword="BindingFlags.PutDispProperty" />, or <see langword="BindingFlags.PutRefDispProperty" />.</span></span>  
  
<span data-ttu-id="9a871-3517">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-3517">-or-</span></span> 
<span data-ttu-id="9a871-3518">其中一個具名參數陣列包含的字串是 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3518">One of the named parameter arrays contains a string that is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="9a871-3519">指定的成員是類別初始設定式。</span><span class="sxs-lookup"><span data-stu-id="9a871-3519">The specified member is a class initializer.</span></span></exception>
        <exception cref="T:System.MissingFieldException"><span data-ttu-id="9a871-3520">找不到欄位或屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-3520">The field or property cannot be found.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="9a871-3521">找不到符合 <paramref name="args" /> 中之引數的方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-3521">No method can be found that matches the arguments in <paramref name="args" />.</span></span>  
  
<span data-ttu-id="9a871-3522">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-3522">-or-</span></span> 
<span data-ttu-id="9a871-3523">找不到具有 <paramref name="namedParameters" /> 中所提供引數名稱的成員。</span><span class="sxs-lookup"><span data-stu-id="9a871-3523">No member can be found that has the argument names supplied in <paramref name="namedParameters" />.</span></span>  
  
<span data-ttu-id="9a871-3524">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-3524">-or-</span></span> 
<span data-ttu-id="9a871-3525">目前的 <see cref="T:System.Type" /> 物件代表包含開啟類型參數的類型，亦即，<see cref="P:System.Type.ContainsGenericParameters" /> 傳回 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3525">The current <see cref="T:System.Type" /> object represents a type that contains open type parameters, that is, <see cref="P:System.Type.ContainsGenericParameters" /> returns <see langword="true" />.</span></span></exception>
        <exception cref="T:System.Reflection.TargetException"><span data-ttu-id="9a871-3526">無法在 <paramref name="target" /> 上叫用指定的成員。</span><span class="sxs-lookup"><span data-stu-id="9a871-3526">The specified member cannot be invoked on <paramref name="target" />.</span></span></exception>
        <exception cref="T:System.Reflection.AmbiguousMatchException"><span data-ttu-id="9a871-3527">有一個以上符合繫結準則的方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-3527">More than one method matches the binding criteria.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9a871-3528"><paramref name="name" /> 所表示的方法有一或多個未指定的泛型類型參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-3528">The method represented by <paramref name="name" /> has one or more unspecified generic type parameters.</span></span> <span data-ttu-id="9a871-3529">亦即，方法的 <see cref="P:System.Reflection.MethodBase.ContainsGenericParameters" /> 屬性傳回 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3529">That is, the method's <see cref="P:System.Reflection.MethodBase.ContainsGenericParameters" /> property returns <see langword="true" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="9a871-3530">用於存取非公用成員，不論其權限授權集。</span><span class="sxs-lookup"><span data-stu-id="9a871-3530">for accessing non-public members regardless of their grant set.</span></span> <span data-ttu-id="9a871-3531">相關聯的列舉型別： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="9a871-3531">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="9a871-3532">呼叫 unmanaged 程式碼。</span><span class="sxs-lookup"><span data-stu-id="9a871-3532">to call unmanaged code.</span></span> <span data-ttu-id="9a871-3533">相關聯的列舉型別： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="9a871-3533">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="T:System.Reflection.ParameterAttributes" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
      </Docs>
    </Member>
    <Member MemberName="IsAbstract">
      <MemberSignature Language="C#" Value="public bool IsAbstract { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAbstract" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsAbstract" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAbstract As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAbstract { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAbstract : bool" Usage="System.Type.IsAbstract" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsAbstract</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a871-3534">取得值，指出 <see cref="T:System.Type" /> 是否為抽象並且必須被覆寫。</span><span class="sxs-lookup"><span data-stu-id="9a871-3534">Gets a value indicating whether the <see cref="T:System.Type" /> is abstract and must be overridden.</span></span></summary>
        <value><span data-ttu-id="9a871-3535">如果 <see cref="T:System.Type" /> 是抽象，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3535"><see langword="true" /> if the <see cref="T:System.Type" /> is abstract; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-3536"><xref:System.Type.IsAbstract%2A>屬性會傳回`true`在下列情況：</span><span class="sxs-lookup"><span data-stu-id="9a871-3536">The <xref:System.Type.IsAbstract%2A> property returns `true` in the following cases:</span></span>  
  
-   <span data-ttu-id="9a871-3537">目前的類型是抽象的;也就是它無法具現化，但只可以做為衍生類別的基底類別。</span><span class="sxs-lookup"><span data-stu-id="9a871-3537">The current type is abstract; that is, it cannot be instantiated, but can only serve as the base class for derived classes.</span></span> <span data-ttu-id="9a871-3538">在 C# 中，抽象類別會標示[抽象](~/docs/csharp/language-reference/keywords/abstract.md)關鍵字，在 Visual Basic 中，所以會標示[MustInherit](~/docs/visual-basic/language-reference/modifiers/mustinherit.md)關鍵字。</span><span class="sxs-lookup"><span data-stu-id="9a871-3538">In C#, abstract classes are marked with the [abstract](~/docs/csharp/language-reference/keywords/abstract.md) keyword; in Visual Basic, they are marked with the [MustInherit](~/docs/visual-basic/language-reference/modifiers/mustinherit.md) keyword.</span></span>  
  
-   <span data-ttu-id="9a871-3539">目前的類型是介面。</span><span class="sxs-lookup"><span data-stu-id="9a871-3539">The current type is an interface.</span></span>  
  
 <span data-ttu-id="9a871-3540">如果目前<xref:System.Type>表示的類型參數的泛型類型或泛型方法定義中這個屬性一律傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="9a871-3540">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-3541">下列範例會建立的陣列<xref:System.Type>代表下列類型的物件： 包含型別傳回`true`指定的物件是否`abstract`; 否則它會傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="9a871-3541">The following example creates an array of <xref:System.Type> objects that represent the following types:contains type returns `true` if the specified object is `abstract`; otherwise, it returns `false`.</span></span>  
  
-   <span data-ttu-id="9a871-3542">`AbstractClass`抽象類別 (標示為類別`abstract`在 C# 和`MustInherit`Visual Basic 中)。</span><span class="sxs-lookup"><span data-stu-id="9a871-3542">`AbstractClass`, an abstract class (a class marked as `abstract` in C# and `MustInherit` in Visual Basic).</span></span>  
  
-   <span data-ttu-id="9a871-3543">`DerivedClass`繼承自類別`AbstractClass`。</span><span class="sxs-lookup"><span data-stu-id="9a871-3543">`DerivedClass`, a class that inherits from `AbstractClass`.</span></span>  
  
-   <span data-ttu-id="9a871-3544">`SingleClass`不可繼承的類別。</span><span class="sxs-lookup"><span data-stu-id="9a871-3544">`SingleClass`, a non-inheritable class.</span></span> <span data-ttu-id="9a871-3545">它指`sealed`在 C# 和`NotInheritable`Visual Basic 中。</span><span class="sxs-lookup"><span data-stu-id="9a871-3545">It is defined as `sealed` in C# and `NotInheritable` in Visual Basic.</span></span>  
  
-   <span data-ttu-id="9a871-3546">`ITypeInfo`介面。</span><span class="sxs-lookup"><span data-stu-id="9a871-3546">`ITypeInfo`, an interface.</span></span>  
  
-   <span data-ttu-id="9a871-3547">`ImplementingClass`實作的類別`ITypeInfo`介面。</span><span class="sxs-lookup"><span data-stu-id="9a871-3547">`ImplementingClass`, a class that implements the `ITypeInfo` interface.</span></span>  
  
 <span data-ttu-id="9a871-3548">此方法會傳回`true`僅適用於`AbstractClass`，抽象類別，以及`ITypeInfo`，介面。</span><span class="sxs-lookup"><span data-stu-id="9a871-3548">The method returns `true` only for `AbstractClass`, the abstract class, and `ITypeInfo`, the interface.</span></span>  
  
 [!code-csharp[System.Type.IsAbstract#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isabstract/cs/isabstract1.cs#1)]
 [!code-vb[System.Type.IsAbstract#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isabstract/vb/isabstract1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsAnsiClass">
      <MemberSignature Language="C#" Value="public bool IsAnsiClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAnsiClass" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsAnsiClass" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAnsiClass As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAnsiClass { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAnsiClass : bool" Usage="System.Type.IsAnsiClass" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsAnsiClass</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a871-3549">取得值，指出是否為 <see langword="AnsiClass" /> 選取字串格式屬性 <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3549">Gets a value indicating whether the string format attribute <see langword="AnsiClass" /> is selected for the <see cref="T:System.Type" />.</span></span></summary>
        <value><span data-ttu-id="9a871-3550">如果為 <see langword="true" /> 選取字串格式屬性 <see langword="AnsiClass" />，則為 <see cref="T:System.Type" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3550"><see langword="true" /> if the string format attribute <see langword="AnsiClass" /> is selected for the <see cref="T:System.Type" />; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-3551"><xref:System.Reflection.TypeAttributes.StringFormatMask>選取字串格式屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-3551">The <xref:System.Reflection.TypeAttributes.StringFormatMask> selects the string format attributes.</span></span> <span data-ttu-id="9a871-3552">字串格式屬性增強互通性，藉由定義應該如何解譯字串。</span><span class="sxs-lookup"><span data-stu-id="9a871-3552">The string format attributes enhance interoperability by defining how strings should be interpreted.</span></span>  
  
 <span data-ttu-id="9a871-3553">如果目前<xref:System.Type>表示泛型型別，這個屬性與從中建構類型的泛型類型定義。</span><span class="sxs-lookup"><span data-stu-id="9a871-3553">If the current <xref:System.Type> represents a generic type, this property pertains to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="9a871-3554">例如，如果目前<xref:System.Type>代表`MyGenericType<int>`(`MyGenericType(Of Integer)`在 Visual Basic 中)，這個屬性的值取決於`MyGenericType<T>`。</span><span class="sxs-lookup"><span data-stu-id="9a871-3554">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="9a871-3555">如果目前<xref:System.Type>表示的類型參數的泛型型別，這個屬性一律傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="9a871-3555">If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-3556">下列範例會取得欄位資訊，並檢查`AnsiClass`屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-3556">The following example gets the field information and checks for the `AnsiClass` attribute.</span></span>  
  
 [!code-cpp[Type_IsAnsiClass#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsAnsiClass/CPP/Type_IsAnsiClass.cpp#1)]
 [!code-csharp[Type_IsAnsiClass#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsAnsiClass/CS/type_isansiclass.cs#1)]
 [!code-vb[Type_IsAnsiClass#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsAnsiClass/VB/type_isansiclass.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="P:System.Type.IsUnicodeClass" />
        <altmember cref="P:System.Type.IsAutoClass" />
      </Docs>
    </Member>
    <Member MemberName="IsArray">
      <MemberSignature Language="C#" Value="public bool IsArray { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsArray" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsArray" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsArray As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsArray { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsArray : bool" Usage="System.Type.IsArray" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsArray</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a871-3557">取得值，以表示類型是否為陣列。</span><span class="sxs-lookup"><span data-stu-id="9a871-3557">Gets a value that indicates whether the type is an array.</span></span></summary>
        <value><span data-ttu-id="9a871-3558">如果目前的類型是陣列則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3558"><see langword="true" /> if the current type is an array; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-3559"><xref:System.Type.IsArray%2A>屬性會傳回`false`如<xref:System.Array>類別。</span><span class="sxs-lookup"><span data-stu-id="9a871-3559">The <xref:System.Type.IsArray%2A> property returns `false` for the <xref:System.Array> class.</span></span> <span data-ttu-id="9a871-3560">它也會傳回`false`如果目前的執行個體<xref:System.Type>物件，表示集合型別或介面設計用於搭配集合，例如<xref:System.Collections.IEnumerable>或<xref:System.Collections.Generic.IEnumerable%601>。</span><span class="sxs-lookup"><span data-stu-id="9a871-3560">It also returns `false` if the current instance is a <xref:System.Type> object that represents a collection type or an interface designed to work with collections, such as <xref:System.Collections.IEnumerable> or <xref:System.Collections.Generic.IEnumerable%601>.</span></span>  
  
 <span data-ttu-id="9a871-3561">若要檢查的陣列，使用程式碼類似如下所示：</span><span class="sxs-lookup"><span data-stu-id="9a871-3561">To check for an array, use code such as:</span></span>  
  
```csharp  
typeof(Array).IsAssignableFrom(type)  
```  
  
```vb  
GetType(Array).IsAssignableFrom(type)  
```  
  
 <span data-ttu-id="9a871-3562">如果目前的型別代表泛型類型或類型參數的泛型類型或泛型方法定義中，這個屬性一律傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="9a871-3562">If the current type represents a generic type, or a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="9a871-3563">這個屬性是唯讀的。</span><span class="sxs-lookup"><span data-stu-id="9a871-3563">This property is read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-3564">下列範例示範如何使用<xref:System.Type.IsArray%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-3564">The following example demonstrates using the <xref:System.Type.IsArray%2A> property.</span></span>  
  
 [!code-csharp[System.Type.IsArray#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isarray/cs/isarray2.cs#1)]
 [!code-vb[System.Type.IsArray#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isarray/vb/isarray2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.IsArrayImpl" />
      </Docs>
    </Member>
    <Member MemberName="IsArrayImpl">
      <MemberSignature Language="C#" Value="protected abstract bool IsArrayImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsArrayImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsArrayImpl" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function IsArrayImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool IsArrayImpl();" />
      <MemberSignature Language="F#" Value="abstract member IsArrayImpl : unit -&gt; bool" Usage="type.IsArrayImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9a871-3565">在衍生類別中覆寫時，實作 <see cref="P:System.Type.IsArray" /> 屬性並判斷 <see cref="T:System.Type" /> 是否為陣列。</span><span class="sxs-lookup"><span data-stu-id="9a871-3565">When overridden in a derived class, implements the <see cref="P:System.Type.IsArray" /> property and determines whether the <see cref="T:System.Type" /> is an array.</span></span></summary>
        <returns><span data-ttu-id="9a871-3566">如果 <see langword="true" /> 是陣列，則為 <see cref="T:System.Type" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3566"><see langword="true" /> if the <see cref="T:System.Type" /> is an array; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-3567">執行個體<xref:System.Array>類別必須傳回`false`因為它是一個物件，而不是陣列。</span><span class="sxs-lookup"><span data-stu-id="9a871-3567">An instance of the <xref:System.Array> class must return `false` because it is an object, not an array.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-3568">下列範例會覆寫`IsArrayImpl`方法中的`MyTypeDelegator`類別，如果變數是陣列，並顯示結果的檢查。</span><span class="sxs-lookup"><span data-stu-id="9a871-3568">The following example overrides the `IsArrayImpl` method in the `MyTypeDelegator` class, checks if a variable is an array, and displays the result.</span></span>  
  
 [!code-cpp[Type_IsArrayImpl#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsArrayImpl/CPP/type_isarrayimpl.cpp#1)]
 [!code-csharp[Type_IsArrayImpl#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsArrayImpl/CS/type_isarrayimpl.cs#1)]
 [!code-vb[Type_IsArrayImpl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsArrayImpl/VB/type_isarrayimpl.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.IsArray" />
      </Docs>
    </Member>
    <Member MemberName="IsAssignableFrom">
      <MemberSignature Language="C#" Value="public virtual bool IsAssignableFrom (Type c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsAssignableFrom(class System.Type c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsAssignableFrom(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsAssignableFrom (c As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsAssignableFrom(Type ^ c);" />
      <MemberSignature Language="F#" Value="abstract member IsAssignableFrom : Type -&gt; bool&#xA;override this.IsAssignableFrom : Type -&gt; bool" Usage="type.IsAssignableFrom c" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.IsAssignableFrom(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="9a871-3569">要與目前的類型比較的類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-3569">The type to compare with the current type.</span></span></param>
        <summary><span data-ttu-id="9a871-3570">判斷指定類型的執行個體是否可以指派給目前類型的執行個體。</span><span class="sxs-lookup"><span data-stu-id="9a871-3570">Determines whether an instance of a specified type can be assigned to an instance of the current type.</span></span></summary>
        <returns><span data-ttu-id="9a871-3571"><see langword="true" /> (下列任何條件成立時)：</span><span class="sxs-lookup"><span data-stu-id="9a871-3571"><see langword="true" /> if any of the following conditions is true:</span></span> <span data-ttu-id="9a871-3572">
-   <paramref name="c" /> 與目前的執行個體代表相同的型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-3572">
-   <paramref name="c" /> and the current instance represent the same type.</span></span>  
  <span data-ttu-id="9a871-3573">
-   <paramref name="c" /> 直接或間接衍生自目前執行個體。</span><span class="sxs-lookup"><span data-stu-id="9a871-3573">
-   <paramref name="c" /> is derived either directly or indirectly from the current instance.</span></span> <span data-ttu-id="9a871-3574"><paramref name="c" /> 會直接衍生自目前的執行個體 (如果它繼承自目前的執行個體)，<paramref name="c" /> 會間接衍生自目前的執行個體 (如果它繼承自目前的執行個體所繼承的一或多個一連串類別)。</span><span class="sxs-lookup"><span data-stu-id="9a871-3574"><paramref name="c" /> is derived directly from the current instance if it inherits from the current instance; <paramref name="c" /> is derived indirectly from the current instance if it inherits from a succession of one or more classes that inherit from the current instance.</span></span>  
  
<span data-ttu-id="9a871-3575">-   目前執行個體是 <paramref name="c" /> 實作的介面。</span><span class="sxs-lookup"><span data-stu-id="9a871-3575">-   The current instance is an interface that <paramref name="c" /> implements.</span></span>  
  <span data-ttu-id="9a871-3576">
-   <paramref name="c" /> 是泛型類型參數，而且目前執行個體代表 <paramref name="c" /> 的其中一個條件約束。</span><span class="sxs-lookup"><span data-stu-id="9a871-3576">
-   <paramref name="c" /> is a generic type parameter, and the current instance represents one of the constraints of <paramref name="c" />.</span></span>  
  
<span data-ttu-id="9a871-3577">在下列範例中，目前的執行個體是 <see cref="T:System.Type" /> 物件，代表 <see cref="T:System.IO.Stream" /> 類別。</span><span class="sxs-lookup"><span data-stu-id="9a871-3577">In the following example, the current instance is a <see cref="T:System.Type" /> object that represents the <see cref="T:System.IO.Stream" /> class.</span></span> <span data-ttu-id="9a871-3578"><c>GenericWithConstraint</c> 泛型型別，其泛型型別參數必須是型別 <see cref="T:System.IO.Stream" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3578"><c>GenericWithConstraint</c> is a generic type whose generic type parameter must be of type    <see cref="T:System.IO.Stream" />.</span></span> <span data-ttu-id="9a871-3579">傳遞其泛型型別參數至 <see cref="M:System.Type.IsAssignableFrom(System.Type)" /> 表示泛型型別參數的執行個體可以指派給 <see cref="T:System.IO.Stream" /> 物件。</span><span class="sxs-lookup"><span data-stu-id="9a871-3579">Passing its generic type parameter to the <see cref="M:System.Type.IsAssignableFrom(System.Type)" /> indicates that  an instance of the generic type parameter can be assigned to an <see cref="T:System.IO.Stream" /> object.</span></span>  
  
<span data-ttu-id="9a871-3580">[!code-csharp[System.Type.IsAssignableFrom#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isassignablefrom/cs/IsAssignableFrom2.cs#2)] [!code-vb[System.Type.IsAssignableFrom#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isassignablefrom/vb/IsAssignableFrom2.vb#2)]</span><span class="sxs-lookup"><span data-stu-id="9a871-3580">[!code-csharp[System.Type.IsAssignableFrom#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isassignablefrom/cs/IsAssignableFrom2.cs#2)] [!code-vb[System.Type.IsAssignableFrom#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isassignablefrom/vb/IsAssignableFrom2.vb#2)]</span></span> <span data-ttu-id="9a871-3581">
-   <paramref name="c" /> 代表實值型別，而目前執行個體代表 <c>Nullable&lt;c&gt;</c> (在 Visual Basic 中為 <c>Nullable(Of c)</c>)。</span><span class="sxs-lookup"><span data-stu-id="9a871-3581">
-   <paramref name="c" /> represents a value type, and the current instance represents <c>Nullable&lt;c&gt;</c> (<c>Nullable(Of c)</c> in Visual Basic).</span></span>  
  
 <span data-ttu-id="9a871-3582">如果以上條件都不成立，或者 <paramref name="c" /> 為 <see langword="false" />，則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3582"><see langword="false" /> if none of these conditions are true, or if <paramref name="c" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-3583"><xref:System.Type.IsAssignableFrom%2A>方法可用來判斷執行個體`c`可被指派目前型別的執行個體，方法是最有用，當您處理要知道其類型，這是在設計階段的物件並允許條件式指派，如下列範例會顯示。</span><span class="sxs-lookup"><span data-stu-id="9a871-3583">The <xref:System.Type.IsAssignableFrom%2A> method can be used to determine whether an instance of `c` can be assigned to an instance of the current type, The method is most useful when you are handling objects whose types are not known at design time and allows for conditional assignment, as the following example shows.</span></span>  
  
 [!code-csharp[System.Type.IsAssignableFrom#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isassignablefrom/cs/IsAssignableFrom3.cs#3)]
 [!code-vb[System.Type.IsAssignableFrom#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isassignablefrom/vb/IsAssignableFrom3.vb#3)]  
  
 <span data-ttu-id="9a871-3584">這個方法因此可確保程式碼，例如下列時，會執行在執行階段上，而不擲回<xref:System.InvalidCastException>例外狀況或類似的例外狀況：</span><span class="sxs-lookup"><span data-stu-id="9a871-3584">This method thus ensures that a line of code like the following will execute at runtime without throwing an <xref:System.InvalidCastException> exception or a similar exception:</span></span>  
  
 [!code-csharp[System.Type.IsAssignableFrom#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isassignablefrom/cs/IsAssignableFrom3.cs#4)]
 [!code-vb[System.Type.IsAssignableFrom#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isassignablefrom/vb/IsAssignableFrom3.vb#4)]  
  
 <span data-ttu-id="9a871-3585">在衍生類別可以覆寫此方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-3585">This method can be overridden by a derived class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9a871-3586">無法從封閉式建構類型可指派的泛型類型定義。</span><span class="sxs-lookup"><span data-stu-id="9a871-3586">A generic type definition is not assignable from a closed constructed type.</span></span> <span data-ttu-id="9a871-3587">也就是說，您無法將封閉式建構的類型的指派`MyGenericList<int>`(`MyGenericList(Of Integer)` Visual Basic 中) 至型別的變數`MyGenericList<T>`。</span><span class="sxs-lookup"><span data-stu-id="9a871-3587">That is, you cannot assign the closed constructed type `MyGenericList<int>` (`MyGenericList(Of Integer)` in Visual Basic) to a variable of type `MyGenericList<T>`.</span></span>  
  
 <span data-ttu-id="9a871-3588">如果`c`參數的類型是<xref:System.Reflection.Emit.TypeBuilder>，結果為基礎建置的型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-3588">If the `c` parameter is of type <xref:System.Reflection.Emit.TypeBuilder>, the result is based on the type that is to be built.</span></span> <span data-ttu-id="9a871-3589">下列程式碼範例示範此使用內建的類型，名為`B`。</span><span class="sxs-lookup"><span data-stu-id="9a871-3589">The following code example demonstrates this using a built type named `B`.</span></span>  
  
 [!code-csharp[System.Type.IsAssignableFrom#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isassignablefrom/cs/isassignablefrom_ex1.cs#1)]
 [!code-vb[System.Type.IsAssignableFrom#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isassignablefrom/vb/isassignablefrom_ex1.vb#1)]  
  
   
  
## Examples  
 <span data-ttu-id="9a871-3590">下列範例示範`IsAssignableFrom`類別、 整數陣列和泛型方法使用定義。</span><span class="sxs-lookup"><span data-stu-id="9a871-3590">The following example demonstrates the `IsAssignableFrom` method using defined classes, integer arrays, and generics.</span></span>  
  
 [!code-cpp[TestIsAssignableFrom#1](~/samples/snippets/cpp/VS_Snippets_CLR/TestIsAssignableFrom/cpp/testisassignablefrom.cpp#1)]
 [!code-csharp[TestIsAssignableFrom#1](~/samples/snippets/csharp/VS_Snippets_CLR/TestIsAssignableFrom/CS/testisassignablefrom.cs#1)]
 [!code-vb[TestIsAssignableFrom#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TestIsAssignableFrom/VB/testisassignablefrom.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAutoClass">
      <MemberSignature Language="C#" Value="public bool IsAutoClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAutoClass" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsAutoClass" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAutoClass As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAutoClass { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAutoClass : bool" Usage="System.Type.IsAutoClass" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsAutoClass</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a871-3591">取得值，指出是否為 <see langword="AutoClass" /> 選取字串格式屬性 <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3591">Gets a value indicating whether the string format attribute <see langword="AutoClass" /> is selected for the <see cref="T:System.Type" />.</span></span></summary>
        <value><span data-ttu-id="9a871-3592">如果為 <see langword="true" /> 選取字串格式屬性 <see langword="AutoClass" />，則為 <see cref="T:System.Type" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3592"><see langword="true" /> if the string format attribute <see langword="AutoClass" /> is selected for the <see cref="T:System.Type" />; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-3593"><xref:System.Reflection.TypeAttributes.StringFormatMask>選取字串格式屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-3593">The <xref:System.Reflection.TypeAttributes.StringFormatMask> selects the string format attributes.</span></span> <span data-ttu-id="9a871-3594">字串格式屬性增強互通性，藉由定義應該如何解譯字串。</span><span class="sxs-lookup"><span data-stu-id="9a871-3594">The string format attributes enhance interoperability by defining how strings should be interpreted.</span></span>  
  
 <span data-ttu-id="9a871-3595">如果目前<xref:System.Type>代表建構泛型型別，這個屬性會套用至泛型型別定義從中建構的類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-3595">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="9a871-3596">例如，如果目前<xref:System.Type>代表`MyGenericType<int>`(`MyGenericType(Of Integer)`在 Visual Basic 中)，這個屬性的值取決於`MyGenericType<T>`。</span><span class="sxs-lookup"><span data-stu-id="9a871-3596">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="9a871-3597">如果目前<xref:System.Type>表示的類型參數的泛型型別，這個屬性一律傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="9a871-3597">If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="P:System.Type.IsAnsiClass" />
        <altmember cref="P:System.Type.IsUnicodeClass" />
      </Docs>
    </Member>
    <Member MemberName="IsAutoLayout">
      <MemberSignature Language="C#" Value="public bool IsAutoLayout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAutoLayout" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsAutoLayout" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAutoLayout As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAutoLayout { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAutoLayout : bool" Usage="System.Type.IsAutoLayout" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsAutoLayout</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a871-3598">取得表示目前類型的欄位是否已由 Common Language Runtime 自動配置版面的值。</span><span class="sxs-lookup"><span data-stu-id="9a871-3598">Gets a value indicating whether the fields of the current type are laid out automatically by the common language runtime.</span></span></summary>
        <value><span data-ttu-id="9a871-3599">如果目前類型的 <see langword="true" /> 屬性包含 <see cref="P:System.Type.Attributes" /> 則為 <see cref="F:System.Reflection.TypeAttributes.AutoLayout" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3599"><see langword="true" /> if the <see cref="P:System.Type.Attributes" /> property of the current type includes <see cref="F:System.Reflection.TypeAttributes.AutoLayout" />; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-3600">為了方便起見提供這個屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-3600">This property is provided as a convenience.</span></span> <span data-ttu-id="9a871-3601">或者，您可以使用<xref:System.Reflection.TypeAttributes.LayoutMask?displayProperty=nameWithType>列舉值，以選取類型版面配置屬性，然後測試是否<xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType>設定。</span><span class="sxs-lookup"><span data-stu-id="9a871-3601">Alternatively, you can use the <xref:System.Reflection.TypeAttributes.LayoutMask?displayProperty=nameWithType> enumeration value to select the type layout attributes, and then test whether <xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType> is set.</span></span> <span data-ttu-id="9a871-3602"><xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType>，<xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType>，和<xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType>列舉值，表示類型的欄位配置記憶體中的方式。</span><span class="sxs-lookup"><span data-stu-id="9a871-3602">The <xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType>,<xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType>, and <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> enumeration values indicate the way the fields of the type are laid out in memory.</span></span>  
  
 <span data-ttu-id="9a871-3603">動態類型，您可以指定<xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType>當您建立的類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-3603">For dynamic types, you can specify <xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType> when you create the type.</span></span> <span data-ttu-id="9a871-3604">在程式碼中，套用<xref:System.Runtime.InteropServices.StructLayoutAttribute>屬性搭配<xref:System.Runtime.InteropServices.LayoutKind.Auto?displayProperty=nameWithType>列舉值的型別，以便判斷適當的方式來配置類別的執行階段。</span><span class="sxs-lookup"><span data-stu-id="9a871-3604">In code, apply the <xref:System.Runtime.InteropServices.StructLayoutAttribute> attribute with the <xref:System.Runtime.InteropServices.LayoutKind.Auto?displayProperty=nameWithType> enumeration value to the type, to let the runtime determine the appropriate way to lay out the class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9a871-3605">您無法使用<xref:System.Reflection.MemberInfo.GetCustomAttributes%2A>方法，以判斷是否<xref:System.Runtime.InteropServices.StructLayoutAttribute>已套用至型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-3605">You cannot use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> method to determine whether the <xref:System.Runtime.InteropServices.StructLayoutAttribute> has been applied to a type.</span></span>  
  
 <span data-ttu-id="9a871-3606">如果目前<xref:System.Type>代表建構泛型型別，這個屬性會套用至泛型型別定義從中建構的類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-3606">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="9a871-3607">例如，如果目前<xref:System.Type>代表`MyGenericType<int>`(`MyGenericType(Of Integer)` Visual Basic 中)，這個屬性的值由 `MyGenericType<T>.`</span><span class="sxs-lookup"><span data-stu-id="9a871-3607">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>.`</span></span>  
  
 <span data-ttu-id="9a871-3608">如果目前<xref:System.Type>表示的類型參數的泛型類型或泛型方法定義中這個屬性一律傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="9a871-3608">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-3609">下列範例會建立類型的執行個體，並顯示<xref:System.Type.IsAutoLayout%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-3609">The following example creates an instance of the type and displays the <xref:System.Type.IsAutoLayout%2A> property.</span></span>  
  
 [!code-cpp[Type_IsAutoLayout#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsAutoLayout/CPP/type_isautolayout.cpp#1)]
 [!code-csharp[Type_IsAutoLayout#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsAutoLayout/CS/type_isautolayout.cs#1)]
 [!code-vb[Type_IsAutoLayout#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsAutoLayout/VB/type_isautolayout.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="P:System.Type.IsLayoutSequential" />
        <altmember cref="P:System.Type.IsExplicitLayout" />
        <related type="Article" href="~/docs/standard/metadata-and-self-describing-components.md"><span data-ttu-id="9a871-3610">中繼資料和自我描述元件</span><span class="sxs-lookup"><span data-stu-id="9a871-3610">Metadata and Self-Describing Components</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsByRef">
      <MemberSignature Language="C#" Value="public bool IsByRef { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsByRef" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsByRef" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsByRef As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsByRef { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsByRef : bool" Usage="System.Type.IsByRef" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsByRef</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a871-3611">取得值，指出 <see cref="T:System.Type" /> 是否以傳址方式傳遞。</span><span class="sxs-lookup"><span data-stu-id="9a871-3611">Gets a value indicating whether the <see cref="T:System.Type" /> is passed by reference.</span></span></summary>
        <value><span data-ttu-id="9a871-3612">如果 <see cref="T:System.Type" /> 是以傳址方式傳遞，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3612"><see langword="true" /> if the <see cref="T:System.Type" /> is passed by reference; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-3613">若要取得實際的型別，由參考所傳遞的型別取值 （dereference），然後呼叫<xref:System.Type.GetElementType%2A>該型別上。</span><span class="sxs-lookup"><span data-stu-id="9a871-3613">To get to the actual type, dereference the type that was passed by reference, and then call <xref:System.Type.GetElementType%2A> on that type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-3614">下列範例示範使用`IsByRef`來檢查指定的型別傳址方式傳遞的屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-3614">The following example demonstrates a use of the `IsByRef` property to check whether a specified type is passed by reference.</span></span> <span data-ttu-id="9a871-3615">此範例會定義類別`MyTypeDelegator`，它會覆寫`HasElementTypeImpl`方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-3615">The example defines the class `MyTypeDelegator`, which overrides the `HasElementTypeImpl` method.</span></span> <span data-ttu-id="9a871-3616">主要的類別會檢查`HasElementType`屬性，並顯示項目類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-3616">The main class checks for the `HasElementType` property and displays the element type.</span></span>  
  
 [!code-cpp[Type_HasElementTypeImpl#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_HasElementTypeImpl/CPP/type_haselementtypeimpl.cpp#1)]
 [!code-csharp[Type_HasElementTypeImpl#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_HasElementTypeImpl/CS/type_haselementtypeimpl.cs#1)]
 [!code-vb[Type_HasElementTypeImpl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_HasElementTypeImpl/VB/type_haselementtypeimpl.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.IsByRefImpl" />
      </Docs>
    </Member>
    <Member MemberName="IsByRefImpl">
      <MemberSignature Language="C#" Value="protected abstract bool IsByRefImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsByRefImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsByRefImpl" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function IsByRefImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool IsByRefImpl();" />
      <MemberSignature Language="F#" Value="abstract member IsByRefImpl : unit -&gt; bool" Usage="type.IsByRefImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9a871-3617">在衍生類別中覆寫時，實作 <see cref="P:System.Type.IsByRef" /> 屬性並判斷 <see cref="T:System.Type" /> 是否以傳址方式傳遞。</span><span class="sxs-lookup"><span data-stu-id="9a871-3617">When overridden in a derived class, implements the <see cref="P:System.Type.IsByRef" /> property and determines whether the <see cref="T:System.Type" /> is passed by reference.</span></span></summary>
        <returns><span data-ttu-id="9a871-3618">如果 <see cref="T:System.Type" /> 是以傳址方式傳遞，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3618"><see langword="true" /> if the <see cref="T:System.Type" /> is passed by reference; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Type.IsByRef" />
      </Docs>
    </Member>
    <Member MemberName="IsByRefLike">
      <MemberSignature Language="C#" Value="public virtual bool IsByRefLike { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsByRefLike" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsByRefLike" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsByRefLike As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsByRefLike { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsByRefLike : bool" Usage="System.Type.IsByRefLike" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsClass">
      <MemberSignature Language="C#" Value="public bool IsClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsClass" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsClass" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsClass As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsClass { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsClass : bool" Usage="System.Type.IsClass" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsClass</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a871-3619">取得值，表示 <see cref="T:System.Type" /> 是類別或委派，也就是非實值類型或介面。</span><span class="sxs-lookup"><span data-stu-id="9a871-3619">Gets a value indicating whether the <see cref="T:System.Type" /> is a class or a delegate; that is, not a value type or interface.</span></span></summary>
        <value><span data-ttu-id="9a871-3620">如果 <see cref="T:System.Type" /> 是類別，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3620"><see langword="true" /> if the <see cref="T:System.Type" /> is a class; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-3621">這個屬性會傳回`true`類別，以及委派。</span><span class="sxs-lookup"><span data-stu-id="9a871-3621">This property returns `true` for classes as well as delegates.</span></span> <span data-ttu-id="9a871-3622">它會傳回`false`實值型別 （適用於結構和列舉型別） 即使 boxing 處理。</span><span class="sxs-lookup"><span data-stu-id="9a871-3622">It returns `false` for value types (for structures and enumerations) even if they are boxed.</span></span>  
  
 <span data-ttu-id="9a871-3623">如果目前<xref:System.Type>表示的類型參數的泛型類型或泛型方法定義中這個屬性一律傳回`true`。如果目前<xref:System.Type>代表建構的泛型型別，這個屬性會傳回`true`如果泛型類型定義是類別定義; 也就是它不會定義介面或實值型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-3623">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `true`.If the current <xref:System.Type> represents a constructed generic type, this property returns `true` if the generic type definition is a class definition; that is, it does not define an interface or a value type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9a871-3624">這個屬性會傳回`true`for`Type`執行個體，代表<xref:System.Enum>和<xref:System.ValueType>類別。</span><span class="sxs-lookup"><span data-stu-id="9a871-3624">This property returns `true` for `Type` instances that represent the <xref:System.Enum> and <xref:System.ValueType> classes.</span></span> <span data-ttu-id="9a871-3625">這兩個類別的基底類型的列舉型別和實值類型，分別是，但不是列舉型別或實值型別本身。</span><span class="sxs-lookup"><span data-stu-id="9a871-3625">These two classes are the base types for enumerations and value types, respectively, but they are not enumerations or value types themselves.</span></span> <span data-ttu-id="9a871-3626">如需詳細資訊，請參閱 <<c0> <xref:System.Type.IsValueType%2A> 和<xref:System.Type.IsEnum%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-3626">For more information, see the <xref:System.Type.IsValueType%2A> and <xref:System.Type.IsEnum%2A> properties.</span></span>  
  
 <span data-ttu-id="9a871-3627"><xref:System.Reflection.TypeAttributes.ClassSemanticsMask?displayProperty=nameWithType>列舉值會區分型別宣告為類別或介面。不過，類別和實值類型會標示<xref:System.Reflection.TypeAttributes.Class?displayProperty=nameWithType>屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-3627">The <xref:System.Reflection.TypeAttributes.ClassSemanticsMask?displayProperty=nameWithType> enumeration value  distinguishes a type declaration as class or interface.However, both classes and value types are marked with the <xref:System.Reflection.TypeAttributes.Class?displayProperty=nameWithType> attribute.</span></span> <span data-ttu-id="9a871-3628">如果您擷取的型別屬性的屬性，然後使用值<xref:System.Reflection.TypeAttributes.ClassSemanticsMask?displayProperty=nameWithType>值，以判斷是否為型別而不是實值型別為類別，您還必須呼叫<xref:System.Type.IsValueType%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-3628">If you retrieve the value of a type's Attributes property and use the <xref:System.Reflection.TypeAttributes.ClassSemanticsMask?displayProperty=nameWithType> value to determine whether a type is a class instead of a value type, you must also call the <xref:System.Type.IsValueType%2A> property.</span></span> <span data-ttu-id="9a871-3629">範例<xref:System.Reflection.TypeAttributes>列舉包含的其他資訊，以及 anexample。</span><span class="sxs-lookup"><span data-stu-id="9a871-3629">The example for the <xref:System.Reflection.TypeAttributes> enumeration contains additional information as well as anexample.</span></span>  
  
 <span data-ttu-id="9a871-3630">這個屬性是唯讀的。</span><span class="sxs-lookup"><span data-stu-id="9a871-3630">This property is read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-3631">下列範例會建立類型的執行個體，並指出類型是否為類別。</span><span class="sxs-lookup"><span data-stu-id="9a871-3631">The following example creates an instance of a type and indicates whether the type is a class.</span></span>  
  
 [!code-cpp[Type_IsClass#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsClass/CPP/type_isclass.cpp#1)]
 [!code-csharp[Type_IsClass#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsClass/CS/type_isclass.cs#1)]
 [!code-vb[Type_IsClass#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsClass/VB/type_isclass.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="P:System.Type.IsInterface" />
        <altmember cref="P:System.Type.IsValueType" />
        <altmember cref="F:System.Reflection.TypeAttributes.ClassSemanticsMask" />
      </Docs>
    </Member>
    <Member MemberName="IsCOMObject">
      <MemberSignature Language="C#" Value="public bool IsCOMObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCOMObject" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsCOMObject" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCOMObject As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCOMObject { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCOMObject : bool" Usage="System.Type.IsCOMObject" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsCOMObject</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a871-3632">取得值，指出 <see cref="T:System.Type" /> 是否為 COM 物件。</span><span class="sxs-lookup"><span data-stu-id="9a871-3632">Gets a value indicating whether the <see cref="T:System.Type" /> is a COM object.</span></span></summary>
        <value><span data-ttu-id="9a871-3633">如果 <see langword="true" /> 是 COM 物件，則為 <see cref="T:System.Type" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3633"><see langword="true" /> if the <see cref="T:System.Type" /> is a COM object; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-3634">這個方法會傳回`false`的 COM 介面，因為它們不是物件。</span><span class="sxs-lookup"><span data-stu-id="9a871-3634">This method returns `false` for COM interfaces because they are not objects.</span></span> <span data-ttu-id="9a871-3635">可以由 Microsoft.NET Framework 物件實作 COM 介面。</span><span class="sxs-lookup"><span data-stu-id="9a871-3635">COM interfaces can be implemented by Microsoft .NET Framework objects.</span></span>  
  
 <span data-ttu-id="9a871-3636">您也可以載入 COM 類別，並取得`Type`使用該 COM 類別的物件[Tlbimp.exe （型別程式庫匯入工具）](~/docs/framework/tools/tlbimp-exe-type-library-importer.md)工具。</span><span class="sxs-lookup"><span data-stu-id="9a871-3636">You can also load a COM class and get a `Type` object for that COM class by using the [Tlbimp.exe (Type Library Importer)](~/docs/framework/tools/tlbimp-exe-type-library-importer.md) tool.</span></span>  
  
 <span data-ttu-id="9a871-3637">如果目前<xref:System.Type>代表建構泛型型別，這個屬性會套用至泛型型別定義從中建構的類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-3637">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="9a871-3638">例如，如果目前<xref:System.Type>代表`MyGenericType<int`> (`MyGenericType(Of Integer)`在 Visual Basic 中)，這個屬性的值取決於`MyGenericType<T>`。</span><span class="sxs-lookup"><span data-stu-id="9a871-3638">For example, if the current <xref:System.Type> represents `MyGenericType<int`> (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="9a871-3639">如果目前<xref:System.Type>表示的類型參數的泛型類型或泛型方法定義中這個屬性一律傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="9a871-3639">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.IsCOMObjectImpl" />
      </Docs>
    </Member>
    <Member MemberName="IsCOMObjectImpl">
      <MemberSignature Language="C#" Value="protected abstract bool IsCOMObjectImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsCOMObjectImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsCOMObjectImpl" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function IsCOMObjectImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool IsCOMObjectImpl();" />
      <MemberSignature Language="F#" Value="abstract member IsCOMObjectImpl : unit -&gt; bool" Usage="type.IsCOMObjectImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9a871-3640">在衍生類別中覆寫時，實作 <see cref="P:System.Type.IsCOMObject" /> 屬性並判斷 <see cref="T:System.Type" /> 是否為 COM 物件。</span><span class="sxs-lookup"><span data-stu-id="9a871-3640">When overridden in a derived class, implements the <see cref="P:System.Type.IsCOMObject" /> property and determines whether the <see cref="T:System.Type" /> is a COM object.</span></span></summary>
        <returns><span data-ttu-id="9a871-3641">如果 <see langword="true" /> 是 COM 物件，則為 <see cref="T:System.Type" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3641"><see langword="true" /> if the <see cref="T:System.Type" /> is a COM object; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-3642">這個方法會傳回`false`的 COM 介面，因為它們不是物件。</span><span class="sxs-lookup"><span data-stu-id="9a871-3642">This method returns `false` for COM interfaces because they are not objects.</span></span> <span data-ttu-id="9a871-3643">可以由 Microsoft.NET Framework 物件實作 COM 介面。</span><span class="sxs-lookup"><span data-stu-id="9a871-3643">COM interfaces can be implemented by Microsoft .NET Framework objects.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.IsCOMObject" />
      </Docs>
    </Member>
    <Member MemberName="IsConstructedGenericType">
      <MemberSignature Language="C#" Value="public virtual bool IsConstructedGenericType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsConstructedGenericType" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsConstructedGenericType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsConstructedGenericType As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsConstructedGenericType { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsConstructedGenericType : bool" Usage="System.Type.IsConstructedGenericType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a871-3644">取得值，指出這個物件是否表示建構的泛型類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-3644">Gets a value that indicates whether this object represents a constructed generic type.</span></span> <span data-ttu-id="9a871-3645">您可以建立已建構之泛型類型的執行個體。</span><span class="sxs-lookup"><span data-stu-id="9a871-3645">You can create instances of a constructed generic type.</span></span></summary>
        <value><span data-ttu-id="9a871-3646">如果這個物件代表建構的泛型類型，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3646"><see langword="true" /> if this object represents a constructed generic type; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-3647">建構的泛型類型已明確提供給所有的泛型類型參數的類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-3647">A constructed generic type has had explicit types supplied for all of its generic type parameters.</span></span> <span data-ttu-id="9a871-3648">它也稱為封閉式的泛型型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-3648">It is also referred to as a closed generic type.</span></span>  
  
 <span data-ttu-id="9a871-3649">當這個屬性是`true`，您可以建立目前類型的執行個體; 時`false`，您不能。</span><span class="sxs-lookup"><span data-stu-id="9a871-3649">When this property is `true`, you can create instances of the current type; when it is `false`, you can't.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsContextful">
      <MemberSignature Language="C#" Value="public bool IsContextful { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsContextful" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsContextful" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsContextful As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsContextful { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsContextful : bool" Usage="System.Type.IsContextful" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsContextful</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a871-3650">取得值，指出在內容中是否可以裝載 <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3650">Gets a value indicating whether the <see cref="T:System.Type" /> can be hosted in a context.</span></span></summary>
        <value><span data-ttu-id="9a871-3651">如果在內容中可以裝載 <see cref="T:System.Type" />，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3651"><see langword="true" /> if the <see cref="T:System.Type" /> can be hosted in a context; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-3652">內容會攔截對類別成員的呼叫，並強制執行原則會套用至類別，例如同步處理。</span><span class="sxs-lookup"><span data-stu-id="9a871-3652">A context intercepts calls to the class members and enforces policies that are applied to the class, such as synchronization.</span></span> <span data-ttu-id="9a871-3653">如需詳細遠端內容的詳細資訊，請參閱<xref:System.Runtime.Remoting.Contexts.Context>。</span><span class="sxs-lookup"><span data-stu-id="9a871-3653">For more detailed information on remoting contexts, see <xref:System.Runtime.Remoting.Contexts.Context>.</span></span>  
  
 <span data-ttu-id="9a871-3654">如果目前<xref:System.Type>表示的類型參數的泛型類型或泛型方法定義中這個屬性一律傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="9a871-3654">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-3655">下列範例示範`IsContextful`， <xref:System.Type.IsMarshalByRef%2A>，並<xref:System.Type.IsPrimitive%2A>的屬性<xref:System.Type>類別。</span><span class="sxs-lookup"><span data-stu-id="9a871-3655">The following example demonstrates the `IsContextful`, <xref:System.Type.IsMarshalByRef%2A>, and <xref:System.Type.IsPrimitive%2A> properties of the <xref:System.Type> class.</span></span> <span data-ttu-id="9a871-3656">它會檢查是否裝載於內容中的指定型別是否它可以封送處理的參考，以及類型是否為基本資料類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-3656">It checks whether the given type can be hosted in the context, whether it can be marshaled by reference, and whether the type is a primitive data type.</span></span>  
  
 [!code-cpp[Type_IsContextful#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsContextful/CPP/type_iscontextful.cpp#1)]
 [!code-csharp[Type_IsContextful#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsContextful/CS/type_iscontextful.cs#1)]
 [!code-vb[Type_IsContextful#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsContextful/VB/type_iscontextful.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.IsContextfulImpl" />
      </Docs>
    </Member>
    <Member MemberName="IsContextfulImpl">
      <MemberSignature Language="C#" Value="protected virtual bool IsContextfulImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsContextfulImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsContextfulImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function IsContextfulImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool IsContextfulImpl();" />
      <MemberSignature Language="F#" Value="abstract member IsContextfulImpl : unit -&gt; bool&#xA;override this.IsContextfulImpl : unit -&gt; bool" Usage="type.IsContextfulImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9a871-3657">實作 <see cref="P:System.Type.IsContextful" /> 屬性並判斷在內容中是否可以裝載 <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3657">Implements the <see cref="P:System.Type.IsContextful" /> property and determines whether the <see cref="T:System.Type" /> can be hosted in a context.</span></span></summary>
        <returns><span data-ttu-id="9a871-3658">如果在內容中可以裝載 <see cref="T:System.Type" />，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3658"><see langword="true" /> if the <see cref="T:System.Type" /> can be hosted in a context; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-3659">在衍生類別可以覆寫此方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-3659">This method can be overridden by a derived class.</span></span>  
  
 <span data-ttu-id="9a871-3660">內容會攔截對類別成員的呼叫，並強制執行原則，套用至類別，例如同步處理。</span><span class="sxs-lookup"><span data-stu-id="9a871-3660">A context intercepts calls to the class members and enforce policies that are applied to the class, such as synchronization.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-3661">下列範例示範使用`IsContextfulImpl`方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-3661">The following example demonstrates a use of the `IsContextfulImpl` method.</span></span>  
  
 [!code-cpp[Type_IsContextfulImpl#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsContextfulImpl/CPP/type_iscontextfulimpl.cpp#1)]
 [!code-csharp[Type_IsContextfulImpl#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsContextfulImpl/CS/type_iscontextfulimpl.cs#1)]
 [!code-vb[Type_IsContextfulImpl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsContextfulImpl/VB/type_iscontextfulimpl.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.IsContextful" />
      </Docs>
    </Member>
    <Member MemberName="IsEnum">
      <MemberSignature Language="C#" Value="public virtual bool IsEnum { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnum" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsEnum" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsEnum As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsEnum { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEnum : bool" Usage="System.Type.IsEnum" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsEnum</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a871-3662">取得值，指出目前的 <see cref="T:System.Type" /> 是否表示列舉類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-3662">Gets a value indicating whether the current <see cref="T:System.Type" /> represents an enumeration.</span></span></summary>
        <value><span data-ttu-id="9a871-3663">如果目前 <see langword="true" /> 代表列舉，則為 <see cref="T:System.Type" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3663"><see langword="true" /> if the current <see cref="T:System.Type" /> represents an enumeration; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-3664">這個屬性會傳回`true`列舉型別，但不是適合用於<xref:System.Enum>型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-3664">This property returns `true` for an enumeration, but not for the <xref:System.Enum> type itself.</span></span>  
  
 <span data-ttu-id="9a871-3665">如果目前<xref:System.Type>代表建構泛型型別，這個屬性會套用至泛型型別定義從中建構的類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-3665">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="9a871-3666">例如，如果目前<xref:System.Type>代表`MyGenericType<int>`(`MyGenericType(Of Integer)`在 Visual Basic 中)，這個屬性的值取決於`MyGenericType<T>`。</span><span class="sxs-lookup"><span data-stu-id="9a871-3666">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="9a871-3667">如果目前<xref:System.Type>表示的類型參數的泛型類型或泛型方法定義中這個屬性一律傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="9a871-3667">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="9a871-3668">這個屬性是唯讀的。</span><span class="sxs-lookup"><span data-stu-id="9a871-3668">This property is read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-3669">下列範例示範如何使用`IsEnum`屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-3669">The following example demonstrates how to use the `IsEnum` property.</span></span>  
  
 [!code-cpp[TestIsEnum#1](~/samples/snippets/cpp/VS_Snippets_CLR/TestIsEnum/CPP/TestIsEnum.cpp#1)]
 [!code-csharp[TestIsEnum#1](~/samples/snippets/csharp/VS_Snippets_CLR/TestIsEnum/CS/testisenum.cs#1)]
 [!code-vb[TestIsEnum#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TestIsEnum/VB/testisenum.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsEnumDefined">
      <MemberSignature Language="C#" Value="public virtual bool IsEnumDefined (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsEnumDefined(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsEnumDefined(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsEnumDefined (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsEnumDefined(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member IsEnumDefined : obj -&gt; bool&#xA;override this.IsEnumDefined : obj -&gt; bool" Usage="type.IsEnumDefined value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="9a871-3670">要測試的值。</span><span class="sxs-lookup"><span data-stu-id="9a871-3670">The value to be tested.</span></span></param>
        <summary><span data-ttu-id="9a871-3671">傳回值，這個值表示指定的值是否存在於目前的列舉類型中。</span><span class="sxs-lookup"><span data-stu-id="9a871-3671">Returns a value that indicates whether the specified value exists in the current enumeration type.</span></span></summary>
        <returns><span data-ttu-id="9a871-3672">如果指定的值是目前列舉類型的成員，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3672"><see langword="true" /> if the specified value is a member of the current enumeration type; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9a871-3673">目前的類型不是列舉。</span><span class="sxs-lookup"><span data-stu-id="9a871-3673">The current type is not an enumeration.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9a871-3674"><paramref name="value" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3674"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9a871-3675"><paramref name="value" /> 的類型不能是列舉的基礎類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-3675"><paramref name="value" /> is of a type that cannot be the underlying type of an enumeration.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="IsEquivalentTo">
      <MemberSignature Language="C#" Value="public virtual bool IsEquivalentTo (Type other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsEquivalentTo(class System.Type other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsEquivalentTo(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsEquivalentTo (other As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsEquivalentTo(Type ^ other);" />
      <MemberSignature Language="F#" Value="abstract member IsEquivalentTo : Type -&gt; bool&#xA;override this.IsEquivalentTo : Type -&gt; bool" Usage="type.IsEquivalentTo other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="9a871-3676">進行測試以確定是否和目前類型等價的 COM 類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-3676">The COM type that is tested for equivalence with the current type.</span></span></param>
        <summary><span data-ttu-id="9a871-3677">判斷兩個 COM 類型是否具有相同的識別以及是否適合類型等價。</span><span class="sxs-lookup"><span data-stu-id="9a871-3677">Determines whether two COM types have the same identity and are eligible for type equivalence.</span></span></summary>
        <returns><span data-ttu-id="9a871-3678">如果 COM 類型相等，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3678"><see langword="true" /> if the COM types are equivalent; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="9a871-3679">如果一個類型位於已載入來執行的組件中，而另一個類型位於已載入至純反映性的內容的組件中，這個方法也會傳回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3679">This method also returns <see langword="false" /> if one type is in an assembly that is loaded for execution, and the other is in an assembly that is loaded into the reflection-only context.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-3680">開頭為[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]，common language runtime 支援內嵌 COM 類型的型別資訊，直接將 managed 組件，而不需要 managed 組件從 interop 取得適用於 COM 類型的類型資訊組件。</span><span class="sxs-lookup"><span data-stu-id="9a871-3680">Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], the common language runtime supports the embedding of type information for COM types directly into managed assemblies, instead of requiring the managed assemblies to obtain type information for COM types from interop assemblies.</span></span> <span data-ttu-id="9a871-3681">因為內嵌類型資訊僅包含 Managed 組件實際所使用的類型和成員，所以兩個 Managed 組件可能對於相同的 COM 類型會有非常不同的檢視。</span><span class="sxs-lookup"><span data-stu-id="9a871-3681">Because the embedded type information includes only the types and members that are actually used by a managed assembly, two managed assemblies might have very different views of the same COM type.</span></span> <span data-ttu-id="9a871-3682">每個 Managed 組件有不同的 <xref:System.Type> 物件以代表其 COM 類型檢視。</span><span class="sxs-lookup"><span data-stu-id="9a871-3682">Each managed assembly has a different <xref:System.Type> object to represent its view of the COM type.</span></span> <span data-ttu-id="9a871-3683">通用語言執行平台支援介面、結構、列舉和委派等這些不同檢視之間的類型等價。</span><span class="sxs-lookup"><span data-stu-id="9a871-3683">The common language runtime supports type equivalence between these different views for interfaces, structures, enumerations, and delegates.</span></span>  
  
 <span data-ttu-id="9a871-3684">類型等價表示從一個 Managed 組件傳到另一個的 COM 物件，可以在接收的組件中轉換成適當的 Managed 類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-3684">Type equivalence means that a COM object that is passed from one managed assembly to another can be cast to the appropriate managed type in the receiving assembly.</span></span> <span data-ttu-id="9a871-3685"><xref:System.Type.IsEquivalentTo%2A>方法讓組件以判斷 COM 物件，從另一個組件中取得具有相同的 COM 識別，做為其中一個第一組件的自己內嵌 interop 類型，並因此可以轉型為該型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-3685">The <xref:System.Type.IsEquivalentTo%2A> method enables an assembly to determine that a COM object obtained from another assembly has the same COM identity as one of the first assembly's own embedded interop types, and thus can be cast to that type.</span></span>  
  
 <span data-ttu-id="9a871-3686">如需詳細資訊，請參閱 <<c0> [ 類型等價和內嵌 Interop 類型](~/docs/framework/interop/type-equivalence-and-embedded-interop-types.md)。</span><span class="sxs-lookup"><span data-stu-id="9a871-3686">For more information, see [Type Equivalence and Embedded Interop Types](~/docs/framework/interop/type-equivalence-and-embedded-interop-types.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsExplicitLayout">
      <MemberSignature Language="C#" Value="public bool IsExplicitLayout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsExplicitLayout" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsExplicitLayout" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsExplicitLayout As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsExplicitLayout { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsExplicitLayout : bool" Usage="System.Type.IsExplicitLayout" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsExplicitLayout</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a871-3687">取得表示目前類型的欄位是否已在明確指定之位移配置版面的值。</span><span class="sxs-lookup"><span data-stu-id="9a871-3687">Gets a value indicating whether the fields of the current type are laid out at explicitly specified offsets.</span></span></summary>
        <value><span data-ttu-id="9a871-3688">如果目前類型的 <see langword="true" /> 屬性包含 <see cref="P:System.Type.Attributes" /> 則為 <see cref="F:System.Reflection.TypeAttributes.ExplicitLayout" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3688"><see langword="true" /> if the <see cref="P:System.Type.Attributes" /> property of the current type includes <see cref="F:System.Reflection.TypeAttributes.ExplicitLayout" />; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-3689">為了方便起見提供這個屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-3689">This property is provided as a convenience.</span></span> <span data-ttu-id="9a871-3690">或者，您可以使用<xref:System.Reflection.TypeAttributes.LayoutMask?displayProperty=nameWithType>列舉值，以選取類型版面配置屬性，然後測試是否<xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType>設定。</span><span class="sxs-lookup"><span data-stu-id="9a871-3690">Alternatively, you can use the <xref:System.Reflection.TypeAttributes.LayoutMask?displayProperty=nameWithType> enumeration value to select the type layout attributes, and then test whether <xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType> is set.</span></span> <span data-ttu-id="9a871-3691"><xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType>， <xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType>，和<xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType>列舉值，表示類型的欄位配置記憶體中的方式。</span><span class="sxs-lookup"><span data-stu-id="9a871-3691">The <xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType>, <xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType>, and <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> enumeration values indicate the way the fields of the type are laid out in memory.</span></span>  
  
 <span data-ttu-id="9a871-3692">動態類型，您可以指定<xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType>當您建立的類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-3692">For dynamic types, you can specify <xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType> when you create the type.</span></span> <span data-ttu-id="9a871-3693">在程式碼中，套用<xref:System.Runtime.InteropServices.StructLayoutAttribute>屬性搭配<xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType>的型別，來指定欄位開始的位移會明確指定的列舉值。</span><span class="sxs-lookup"><span data-stu-id="9a871-3693">In code, apply the <xref:System.Runtime.InteropServices.StructLayoutAttribute> attribute with the <xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType> enumeration value to the type, to specify that the offsets at which the fields start are specified explicitly.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9a871-3694">您無法使用<xref:System.Reflection.MemberInfo.GetCustomAttributes%2A>方法，以判斷是否<xref:System.Runtime.InteropServices.StructLayoutAttribute>已套用至型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-3694">You cannot use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> method to determine whether the <xref:System.Runtime.InteropServices.StructLayoutAttribute> has been applied to a type.</span></span>  
  
 <span data-ttu-id="9a871-3695">如果目前<xref:System.Type>代表建構泛型型別，這個屬性會套用至泛型型別定義從中建構的類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-3695">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="9a871-3696">例如，如果目前<xref:System.Type>代表`MyGenericType<int>`(`MyGenericType(Of Integer)`在 Visual Basic 中)，這個屬性的值取決於`MyGenericType<T>`。</span><span class="sxs-lookup"><span data-stu-id="9a871-3696">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="9a871-3697">如果目前<xref:System.Type>表示的類型參數的泛型類型或泛型方法定義中這個屬性一律傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="9a871-3697">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-3698">下列範例會建立類型的執行個體，並顯示的值及其<xref:System.Type.IsExplicitLayout%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-3698">The following example creates an instance of a type and displays the value of its <xref:System.Type.IsExplicitLayout%2A> property.</span></span> <span data-ttu-id="9a871-3699">它會使用`MySystemTime`類別，這也是在程式碼範例中，針對<xref:System.Runtime.InteropServices.StructLayoutAttribute>。</span><span class="sxs-lookup"><span data-stu-id="9a871-3699">It uses the `MySystemTime` class, which is also in the code example for <xref:System.Runtime.InteropServices.StructLayoutAttribute>.</span></span>  
  
 [!code-csharp[Type_IsExplicitLayout#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsExplicitLayout/CS/type_isexplicitlayout.cs#1)]
 [!code-vb[Type_IsExplicitLayout#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsExplicitLayout/VB/type_isexplicitlayout.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="T:System.Runtime.InteropServices.StructLayoutAttribute" />
        <altmember cref="P:System.Type.IsAutoLayout" />
        <altmember cref="P:System.Type.IsLayoutSequential" />
        <related type="Article" href="~/docs/standard/metadata-and-self-describing-components.md"><span data-ttu-id="9a871-3700">中繼資料和自我描述元件</span><span class="sxs-lookup"><span data-stu-id="9a871-3700">Metadata and Self-Describing Components</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsGenericMethodParameter">
      <MemberSignature Language="C#" Value="public virtual bool IsGenericMethodParameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGenericMethodParameter" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsGenericMethodParameter" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsGenericMethodParameter As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsGenericMethodParameter { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsGenericMethodParameter : bool" Usage="System.Type.IsGenericMethodParameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsGenericParameter">
      <MemberSignature Language="C#" Value="public virtual bool IsGenericParameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGenericParameter" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsGenericParameter" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsGenericParameter As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsGenericParameter { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsGenericParameter : bool" Usage="System.Type.IsGenericParameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a871-3701">取得值，指出目前的 <see cref="T:System.Type" /> 是否表示泛型類型或泛型方法定義中的型別參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-3701">Gets a value indicating whether the current <see cref="T:System.Type" /> represents a type parameter in the definition of a generic type or method.</span></span></summary>
        <value><span data-ttu-id="9a871-3702">如果 <see cref="T:System.Type" /> 物件表示泛型型別或泛型方法定義中的型別參數，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3702"><see langword="true" /> if the <see cref="T:System.Type" /> object represents a type parameter of a generic type definition or generic method definition; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-3703"><xref:System.Type> 物件表示泛型型別參數，可由呼叫<xref:System.Type.GetGenericArguments%2A>方法<xref:System.Type>物件，代表泛型類型定義，或有<xref:System.Reflection.MethodInfo.GetGenericArguments%2A>方法<xref:System.Reflection.MethodInfo>物件，代表泛型方法定義。</span><span class="sxs-lookup"><span data-stu-id="9a871-3703"><xref:System.Type> objects that represent generic type parameters can be obtained by calling the <xref:System.Type.GetGenericArguments%2A> method of a <xref:System.Type> object that represents a generic type definition, or the <xref:System.Reflection.MethodInfo.GetGenericArguments%2A> method of a <xref:System.Reflection.MethodInfo> object that represents a generic method definition.</span></span>  
  
-   <span data-ttu-id="9a871-3704">泛型型別或方法定義<xref:System.Type.IsGenericParameter%2A>屬性會傳回`true`產生陣列的每個項目。</span><span class="sxs-lookup"><span data-stu-id="9a871-3704">For a generic type or method definition, the <xref:System.Type.IsGenericParameter%2A> property returns `true` for every element of the resulting array.</span></span>  
  
-   <span data-ttu-id="9a871-3705">封閉式建構的類型或方法，如<xref:System.Type.IsGenericParameter%2A>屬性會傳回`false`所傳回的陣列的每個項目的<xref:System.Type.GetGenericArguments%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-3705">For a closed constructed type or method, the <xref:System.Type.IsGenericParameter%2A> property returns `false` for every element of the array returned by the <xref:System.Type.GetGenericArguments%2A> method.</span></span>  
  
-   <span data-ttu-id="9a871-3706">對於開放式建構的類型或方法，陣列的某些項目可能是特定類型而有些則可能是型別參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-3706">For an open constructed type or method, some elements of the array might be specific types and others might be type parameters.</span></span> <span data-ttu-id="9a871-3707"><xref:System.Type.IsGenericParameter%2A> 會傳回`false`類型和`true`的型別參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-3707"><xref:System.Type.IsGenericParameter%2A> returns `false` for the types and `true` for the type parameters.</span></span> <span data-ttu-id="9a871-3708">程式碼範例<xref:System.Type.ContainsGenericParameters%2A>屬性示範混用型別和型別參數的泛型類別。</span><span class="sxs-lookup"><span data-stu-id="9a871-3708">The code example for the <xref:System.Type.ContainsGenericParameters%2A> property demonstrates a generic class with a mixture of types and type parameters.</span></span>  
  
 <span data-ttu-id="9a871-3709">如需泛型反映中所使用之規範的恆成立條件清單，請參閱 <xref:System.Type.IsGenericType%2A> 屬性備註。</span><span class="sxs-lookup"><span data-stu-id="9a871-3709">For a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property remarks.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-3710">下列範例會使用<xref:System.Type.IsGenericParameter%2A>来測試是否為泛型類型的泛型型別參數的屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-3710">The following example uses the <xref:System.Type.IsGenericParameter%2A> property to test for generic type parameters in a generic type.</span></span>  
  
 [!code-cpp[System.Type.IsGenericParameter#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.IsGenericParameter/CPP/source.cpp#2)]
 [!code-csharp[System.Type.IsGenericParameter#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.IsGenericParameter/CS/source.cs#2)]
 [!code-vb[System.Type.IsGenericParameter#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.IsGenericParameter/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.GenericParameterPosition" />
        <altmember cref="M:System.Type.GetGenericArguments" />
        <altmember cref="M:System.Type.GetGenericParameterConstraints" />
        <altmember cref="P:System.Type.GenericParameterAttributes" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/reflection-and-generic-types.md"><span data-ttu-id="9a871-3711">反映和泛用類型</span><span class="sxs-lookup"><span data-stu-id="9a871-3711">Reflection and Generic Types</span></span></related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-examine-and-instantiate-generic-types-with-reflection.md"><span data-ttu-id="9a871-3712">如何：使用反映檢視和執行個體化泛型類型</span><span class="sxs-lookup"><span data-stu-id="9a871-3712">How to: Examine and Instantiate Generic Types with Reflection</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsGenericType">
      <MemberSignature Language="C#" Value="public virtual bool IsGenericType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGenericType" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsGenericType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsGenericType As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsGenericType { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsGenericType : bool" Usage="System.Type.IsGenericType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a871-3713">取得值，指出目前類型是否為泛型類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-3713">Gets a value indicating whether the current type is a generic type.</span></span></summary>
        <value><span data-ttu-id="9a871-3714"><see langword="true" /> 如果目前的型別為泛型類型，否則， <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3714"><see langword="true" /> if the current type is a generic type; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-3715">使用<xref:System.Type.IsGenericType%2A>屬性來判斷是否<xref:System.Type>物件代表泛型類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-3715">Use the <xref:System.Type.IsGenericType%2A> property to determine whether a <xref:System.Type> object represents a generic type.</span></span> <span data-ttu-id="9a871-3716">使用<xref:System.Type.ContainsGenericParameters%2A>屬性來判斷是否<xref:System.Type>物件都代表開放式建構的類型或封閉式的建構型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-3716">Use the <xref:System.Type.ContainsGenericParameters%2A> property to determine whether a <xref:System.Type> object represents an open constructed type or a closed constructed type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9a871-3717"><xref:System.Type.IsGenericType%2A>屬性會傳回`false`如果立即的型別不是泛型。</span><span class="sxs-lookup"><span data-stu-id="9a871-3717">The <xref:System.Type.IsGenericType%2A> property returns `false` if the immediate type is not generic.</span></span> <span data-ttu-id="9a871-3718">比方說，其項目屬於型別陣列`A<int>`(`A(Of Integer)` Visual Basic 中) 會本身不是泛型型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-3718">For example, an array whose elements are of type `A<int>` (`A(Of Integer)` in Visual Basic) is not itself a generic type.</span></span>  
  
 <span data-ttu-id="9a871-3719">下表摘要說明非變異條件 hapi 一般條款泛型反映中所使用。</span><span class="sxs-lookup"><span data-stu-id="9a871-3719">The following table summarizes the invariant conditions for common terms used in generic reflection.</span></span>  
  
|<span data-ttu-id="9a871-3720">詞彙</span><span class="sxs-lookup"><span data-stu-id="9a871-3720">Term</span></span>|<span data-ttu-id="9a871-3721">非變異值</span><span class="sxs-lookup"><span data-stu-id="9a871-3721">Invariant</span></span>|  
|----------|---------------|  
|<span data-ttu-id="9a871-3722">Generic Type Definition - 泛型類型定義</span><span class="sxs-lookup"><span data-stu-id="9a871-3722">generic type definition</span></span>|<span data-ttu-id="9a871-3723"><xref:System.Type.IsGenericTypeDefinition%2A> 屬性為 `true`。</span><span class="sxs-lookup"><span data-stu-id="9a871-3723">The <xref:System.Type.IsGenericTypeDefinition%2A> property is `true`.</span></span><br /><br /> <span data-ttu-id="9a871-3724">定義泛型型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-3724">Defines a generic type.</span></span> <span data-ttu-id="9a871-3725">建構的型別由呼叫<xref:System.Type.MakeGenericType%2A>方法<xref:System.Type>物件代表泛型類型定義，並指定型別引數陣列。</span><span class="sxs-lookup"><span data-stu-id="9a871-3725">A constructed type is created by calling the <xref:System.Type.MakeGenericType%2A> method on a <xref:System.Type> object that represents a generic type definition and specifying an array of type arguments.</span></span><br /><br /> <span data-ttu-id="9a871-3726"><xref:System.Type.MakeGenericType%2A> 可以只在泛型類型定義上呼叫。</span><span class="sxs-lookup"><span data-stu-id="9a871-3726"><xref:System.Type.MakeGenericType%2A> can be called only on generic type definitions.</span></span><br /><br /> <span data-ttu-id="9a871-3727">任何泛型型別定義為泛型類型 (<xref:System.Type.IsGenericType%2A>屬性是`true`)，但是反過來說就不正確。</span><span class="sxs-lookup"><span data-stu-id="9a871-3727">Any generic type definition is a generic type (the <xref:System.Type.IsGenericType%2A> property is `true`), but the converse is not true.</span></span>|  
|<span data-ttu-id="9a871-3728">Generic Type - 泛型類型</span><span class="sxs-lookup"><span data-stu-id="9a871-3728">generic type</span></span>|<span data-ttu-id="9a871-3729"><xref:System.Type.IsGenericType%2A> 屬性為 `true`。</span><span class="sxs-lookup"><span data-stu-id="9a871-3729">The <xref:System.Type.IsGenericType%2A> property is `true`.</span></span><br /><br /> <span data-ttu-id="9a871-3730">可以是泛型類型定義、 開放式建構的類型或封閉式的建構型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-3730">Can be a generic type definition, an open constructed type, or a closed constructed type.</span></span><br /><br /> <span data-ttu-id="9a871-3731">請注意，陣列類型的項目型別是泛型本身就不是泛型型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-3731">Note that an array type whose element type is generic is not itself a generic type.</span></span> <span data-ttu-id="9a871-3732">也是如此的<xref:System.Type>物件，代表泛型類型的指標。</span><span class="sxs-lookup"><span data-stu-id="9a871-3732">The same is true of a <xref:System.Type> object representing a pointer to a generic type.</span></span>|  
|<span data-ttu-id="9a871-3733">開放式建構的類型</span><span class="sxs-lookup"><span data-stu-id="9a871-3733">open constructed type</span></span>|<span data-ttu-id="9a871-3734"><xref:System.Type.ContainsGenericParameters%2A> 屬性為 `true`。</span><span class="sxs-lookup"><span data-stu-id="9a871-3734">The <xref:System.Type.ContainsGenericParameters%2A> property is `true`.</span></span><br /><br /> <span data-ttu-id="9a871-3735">範例包括已指派的型別參數的泛型型別、 開放式建構類型，或泛型類型定義中巢狀型別或具有類型引數的泛型型別<xref:System.Type.ContainsGenericParameters%2A>屬性是`true`。</span><span class="sxs-lookup"><span data-stu-id="9a871-3735">Examples are a generic type that has unassigned type parameters, a type that is nested in a generic type definition or in an open constructed type, or a generic type that has a type argument for which the <xref:System.Type.ContainsGenericParameters%2A> property is `true`.</span></span><br /><br /> <span data-ttu-id="9a871-3736">您不可能建立開放式建構類型的執行個體。</span><span class="sxs-lookup"><span data-stu-id="9a871-3736">It is not possible to create an instance of an open constructed type.</span></span><br /><br /> <span data-ttu-id="9a871-3737">請注意，並非所有開放式建構的類型是泛型。</span><span class="sxs-lookup"><span data-stu-id="9a871-3737">Note that not all open constructed types are generic.</span></span> <span data-ttu-id="9a871-3738">例如，其項目類型是泛型型別定義陣列不是泛型，而開放式建構類型的指標不是泛型。</span><span class="sxs-lookup"><span data-stu-id="9a871-3738">For example, an array whose element type is a generic type definition is not generic, and a pointer to an open constructed type is not generic.</span></span>|  
|<span data-ttu-id="9a871-3739">封閉式建構的類型</span><span class="sxs-lookup"><span data-stu-id="9a871-3739">closed constructed type</span></span>|<span data-ttu-id="9a871-3740"><xref:System.Type.ContainsGenericParameters%2A> 屬性為 `false`。</span><span class="sxs-lookup"><span data-stu-id="9a871-3740">The <xref:System.Type.ContainsGenericParameters%2A> property is `false`.</span></span><br /><br /> <span data-ttu-id="9a871-3741">當遞迴檢查，型別沒有任何未指派的泛型參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-3741">When examined recursively, the type has no unassigned generic parameters.</span></span>|  
|<span data-ttu-id="9a871-3742">Generic Type Parameter - 泛型型別參數</span><span class="sxs-lookup"><span data-stu-id="9a871-3742">generic type parameter</span></span>|<span data-ttu-id="9a871-3743"><xref:System.Type.IsGenericParameter%2A> 屬性為 `true`。</span><span class="sxs-lookup"><span data-stu-id="9a871-3743">The <xref:System.Type.IsGenericParameter%2A> property is `true`.</span></span><br /><br /> <span data-ttu-id="9a871-3744"><xref:System.Type.ContainsGenericParameters%2A> 屬性為 `true`。</span><span class="sxs-lookup"><span data-stu-id="9a871-3744">The <xref:System.Type.ContainsGenericParameters%2A> property is `true`.</span></span><br /><br /> <span data-ttu-id="9a871-3745">在泛型類型定義中，將會稍後再指派類型的預留位置。</span><span class="sxs-lookup"><span data-stu-id="9a871-3745">In a generic type definition, a placeholder for a type that will be assigned later.</span></span>|  
|<span data-ttu-id="9a871-3746">Generic Type Argument - 泛型類型引數</span><span class="sxs-lookup"><span data-stu-id="9a871-3746">generic type argument</span></span>|<span data-ttu-id="9a871-3747">可以是任何類型，包括泛型類型參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-3747">Can be any type, including a generic type parameter.</span></span><br /><br /> <span data-ttu-id="9a871-3748">型別引數會指定為陣列<xref:System.Type>物件傳遞至<xref:System.Type.MakeGenericType%2A>方法建立建構的泛型型別時。</span><span class="sxs-lookup"><span data-stu-id="9a871-3748">Type arguments are specified as an array of <xref:System.Type> objects passed to the <xref:System.Type.MakeGenericType%2A> method when creating a constructed generic type.</span></span> <span data-ttu-id="9a871-3749">如果產生之型別的執行個體建立<xref:System.Type.ContainsGenericParameters%2A>屬性必須是`false`所有型別引數。</span><span class="sxs-lookup"><span data-stu-id="9a871-3749">If instances of the resulting type are to be created, the <xref:System.Type.ContainsGenericParameters%2A> property must be `false` for all the type arguments.</span></span>|  
  
 <span data-ttu-id="9a871-3750">下列程式碼範例及下表說明其中一些詞彙和非變異值。</span><span class="sxs-lookup"><span data-stu-id="9a871-3750">The following code example and table illustrate some of these terms and invariants.</span></span> <span data-ttu-id="9a871-3751">`Derived`類別，特別感興趣的因為其基底型別建構的型別具有混合型別和型別參數，其型別引數清單中。</span><span class="sxs-lookup"><span data-stu-id="9a871-3751">The `Derived` class is of particular interest because its base type is a constructed type that has a mixture of types and type parameters in its type argument list.</span></span>  
  
 [!code-cpp[System.Type.IsGenericType#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.IsGenericType/cpp/remarks.cpp#2)]
 [!code-csharp[System.Type.IsGenericType#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.IsGenericType/cs/remarks.cs#2)]
 [!code-vb[System.Type.IsGenericType#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.IsGenericType/vb/remarks.vb#2)]  
  
 <span data-ttu-id="9a871-3752">下表顯示範例會使用建立的類別`Base`， `Derived`，和`G`。</span><span class="sxs-lookup"><span data-stu-id="9a871-3752">The following table shows examples that use and build on the classes `Base`, `Derived`, and `G`.</span></span> <span data-ttu-id="9a871-3753">當 c + + 和 C# 程式碼中都相同時，則會顯示只有一個項目。</span><span class="sxs-lookup"><span data-stu-id="9a871-3753">When the C++ and C# code is the same, only one entry is shown.</span></span>  
  
|<span data-ttu-id="9a871-3754">範例</span><span class="sxs-lookup"><span data-stu-id="9a871-3754">Example</span></span>|<span data-ttu-id="9a871-3755">非變異值</span><span class="sxs-lookup"><span data-stu-id="9a871-3755">Invariants</span></span>|  
|-------------|----------------|  
|`Derived(Of V)`<br /><br /> `Derived<V>`|<span data-ttu-id="9a871-3756">這種類型：</span><span class="sxs-lookup"><span data-stu-id="9a871-3756">For this type:</span></span><br /><br /> <span data-ttu-id="9a871-3757"><xref:System.Type.IsGenericType%2A> 為 `true`。</span><span class="sxs-lookup"><span data-stu-id="9a871-3757"><xref:System.Type.IsGenericType%2A> is `true`.</span></span><br /><br /> <span data-ttu-id="9a871-3758"><xref:System.Type.IsGenericTypeDefinition%2A> 為 `true`。</span><span class="sxs-lookup"><span data-stu-id="9a871-3758"><xref:System.Type.IsGenericTypeDefinition%2A> is `true`.</span></span><br /><br /> <span data-ttu-id="9a871-3759"><xref:System.Type.ContainsGenericParameters%2A> 為 `true`。</span><span class="sxs-lookup"><span data-stu-id="9a871-3759"><xref:System.Type.ContainsGenericParameters%2A> is `true`.</span></span>|  
|`Base(Of String, V)`<br /><br /> `Base<String,V>`<br /><br /> `Base<String^,V>`|<span data-ttu-id="9a871-3760">這種類型：</span><span class="sxs-lookup"><span data-stu-id="9a871-3760">For this type:</span></span><br /><br /> <span data-ttu-id="9a871-3761"><xref:System.Type.IsGenericType%2A> 為 `true`。</span><span class="sxs-lookup"><span data-stu-id="9a871-3761"><xref:System.Type.IsGenericType%2A> is `true`.</span></span><br /><br /> <span data-ttu-id="9a871-3762"><xref:System.Type.IsGenericTypeDefinition%2A> 為 `false`。</span><span class="sxs-lookup"><span data-stu-id="9a871-3762"><xref:System.Type.IsGenericTypeDefinition%2A> is `false`.</span></span><br /><br /> <span data-ttu-id="9a871-3763"><xref:System.Type.ContainsGenericParameters%2A> 為 `true`。</span><span class="sxs-lookup"><span data-stu-id="9a871-3763"><xref:System.Type.ContainsGenericParameters%2A> is `true`.</span></span>|  
|`Dim d() As Derived(Of Integer)`<br /><br /> `Derived<int>[] d;`<br /><br /> `array<Derived<int>^>^ d;`|<span data-ttu-id="9a871-3764">類型的變數`d`:</span><span class="sxs-lookup"><span data-stu-id="9a871-3764">For the type of variable `d`:</span></span><br /><br /> <span data-ttu-id="9a871-3765"><xref:System.Type.IsGenericType%2A> 已`false`因為`d`是陣列。</span><span class="sxs-lookup"><span data-stu-id="9a871-3765"><xref:System.Type.IsGenericType%2A> is `false` because `d` is an array.</span></span><br /><br /> <span data-ttu-id="9a871-3766"><xref:System.Type.IsGenericTypeDefinition%2A> 為 `false`。</span><span class="sxs-lookup"><span data-stu-id="9a871-3766"><xref:System.Type.IsGenericTypeDefinition%2A> is `false`.</span></span><br /><br /> <span data-ttu-id="9a871-3767"><xref:System.Type.ContainsGenericParameters%2A> 為 `false`。</span><span class="sxs-lookup"><span data-stu-id="9a871-3767"><xref:System.Type.ContainsGenericParameters%2A> is `false`.</span></span>|  
|<span data-ttu-id="9a871-3768">`T``U`，和`V`（everywhere 顯示）</span><span class="sxs-lookup"><span data-stu-id="9a871-3768">`T`, `U`, and `V` (everywhere they appear)</span></span>|<span data-ttu-id="9a871-3769"><xref:System.Type.IsGenericParameter%2A> 為 `true`。</span><span class="sxs-lookup"><span data-stu-id="9a871-3769"><xref:System.Type.IsGenericParameter%2A> is `true`.</span></span><br /><br /> <span data-ttu-id="9a871-3770"><xref:System.Type.IsGenericType%2A> 是`false`因為沒有任何方法來限制泛型類型的類型參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-3770"><xref:System.Type.IsGenericType%2A> is `false` because there is no way to constrain a type parameter to generic types.</span></span><br /><br /> <span data-ttu-id="9a871-3771"><xref:System.Type.IsGenericTypeDefinition%2A> 為 `false`。</span><span class="sxs-lookup"><span data-stu-id="9a871-3771"><xref:System.Type.IsGenericTypeDefinition%2A> is `false`.</span></span><br /><br /> <span data-ttu-id="9a871-3772"><xref:System.Type.ContainsGenericParameters%2A> 已`true`因為`T`， `U`，和`V`本身是泛型型別參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-3772"><xref:System.Type.ContainsGenericParameters%2A> is `true` because `T`, `U`, and `V` are themselves generic type parameters.</span></span> <span data-ttu-id="9a871-3773">這不表示有關稍後指派給他們的型別引數的任何項目。</span><span class="sxs-lookup"><span data-stu-id="9a871-3773">This does not imply anything about type arguments that are assigned to them later.</span></span>|  
|<span data-ttu-id="9a871-3774">欄位的型別 `F`</span><span class="sxs-lookup"><span data-stu-id="9a871-3774">The type of field `F`</span></span>|<span data-ttu-id="9a871-3775"><xref:System.Type.IsGenericType%2A> 為 `true`。</span><span class="sxs-lookup"><span data-stu-id="9a871-3775"><xref:System.Type.IsGenericType%2A> is `true`.</span></span><br /><br /> <span data-ttu-id="9a871-3776"><xref:System.Type.IsGenericTypeDefinition%2A> 已`false`因為型別具有指定的型別參數給`G`。</span><span class="sxs-lookup"><span data-stu-id="9a871-3776"><xref:System.Type.IsGenericTypeDefinition%2A> is `false` because a type has been assigned to the type parameter of `G`.</span></span> <span data-ttu-id="9a871-3777">請注意，這相當於呼叫<xref:System.Type.MakeGenericType%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-3777">Note that this is equivalent to having called the <xref:System.Type.MakeGenericType%2A> method.</span></span><br /><br /> <span data-ttu-id="9a871-3778"><xref:System.Type.ContainsGenericParameters%2A> 已`true`因為欄位的型別`F`已是開放式建構的類型的類型引數。</span><span class="sxs-lookup"><span data-stu-id="9a871-3778"><xref:System.Type.ContainsGenericParameters%2A> is `true` because the type of field `F` has a type argument that is an open constructed type.</span></span> <span data-ttu-id="9a871-3779">建構的型別為開放型因為其型別引數 (也就是`Base`) 是泛型類型定義。</span><span class="sxs-lookup"><span data-stu-id="9a871-3779">The constructed type is open because its type argument (that is, `Base`) is a generic type definition.</span></span> <span data-ttu-id="9a871-3780">這說明的遞迴本質<xref:System.Type.IsGenericType%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-3780">This illustrates the recursive nature of the <xref:System.Type.IsGenericType%2A> property.</span></span>|  
|<span data-ttu-id="9a871-3781">巢狀的類別 `Nested`</span><span class="sxs-lookup"><span data-stu-id="9a871-3781">The nested class `Nested`</span></span>|<span data-ttu-id="9a871-3782"><xref:System.Type.IsGenericType%2A> 已`true`，即使`Nested`類別具有自己的沒有泛型類型參數，因為它巢狀在泛型型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-3782"><xref:System.Type.IsGenericType%2A> is `true`, even though the `Nested` class has no generic type parameters of its own, because it is nested in a generic type.</span></span><br /><br /> <span data-ttu-id="9a871-3783"><xref:System.Type.IsGenericTypeDefinition%2A> 為 `true`。</span><span class="sxs-lookup"><span data-stu-id="9a871-3783"><xref:System.Type.IsGenericTypeDefinition%2A> is `true`.</span></span> <span data-ttu-id="9a871-3784">也就是說，您可以呼叫<xref:System.Type.MakeGenericType%2A>方法，並提供封入類型，型別參數`Derived`。</span><span class="sxs-lookup"><span data-stu-id="9a871-3784">That is, you can call the <xref:System.Type.MakeGenericType%2A> method and supply the type parameter of the enclosing type, `Derived`.</span></span><br /><br /> <span data-ttu-id="9a871-3785"><xref:System.Type.ContainsGenericParameters%2A> 已`true`封入類型，因為`Derived`，泛型類型參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-3785"><xref:System.Type.ContainsGenericParameters%2A> is `true` because the enclosing type, `Derived`, has generic type parameters.</span></span> <span data-ttu-id="9a871-3786">這說明的遞迴本質<xref:System.Type.ContainsGenericParameters%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-3786">This illustrates the recursive nature of the <xref:System.Type.ContainsGenericParameters%2A> property.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="9a871-3787">下列程式碼範例顯示的值<xref:System.Type.IsGenericType%2A>， <xref:System.Type.IsGenericTypeDefinition%2A>， <xref:System.Type.IsGenericParameter%2A>，和<xref:System.Type.ContainsGenericParameters%2A>< 備註 > 一節所述的類型屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-3787">The following code example displays the value of the <xref:System.Type.IsGenericType%2A>, <xref:System.Type.IsGenericTypeDefinition%2A>, <xref:System.Type.IsGenericParameter%2A>, and <xref:System.Type.ContainsGenericParameters%2A> properties for the types described in the Remarks section.</span></span> <span data-ttu-id="9a871-3788">如需更多的屬性值的說明，請參閱 < 備註 > 中的表格。</span><span class="sxs-lookup"><span data-stu-id="9a871-3788">For explanations of the property values, see the accompanying table in Remarks.</span></span>  
  
 [!code-cpp[System.Type.IsGenericType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.IsGenericType/cpp/source.cpp#1)]
 [!code-csharp[System.Type.IsGenericType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.IsGenericType/cs/source.cs#1)]
 [!code-vb[System.Type.IsGenericType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.IsGenericType/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.ContainsGenericParameters" />
        <altmember cref="P:System.Type.IsGenericTypeDefinition" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/reflection-and-generic-types.md"><span data-ttu-id="9a871-3789">反映和泛用類型</span><span class="sxs-lookup"><span data-stu-id="9a871-3789">Reflection and Generic Types</span></span></related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-examine-and-instantiate-generic-types-with-reflection.md"><span data-ttu-id="9a871-3790">如何：使用反映檢視和執行個體化泛型類型</span><span class="sxs-lookup"><span data-stu-id="9a871-3790">How to: Examine and Instantiate Generic Types with Reflection</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsGenericTypeDefinition">
      <MemberSignature Language="C#" Value="public virtual bool IsGenericTypeDefinition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGenericTypeDefinition" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsGenericTypeDefinition" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsGenericTypeDefinition As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsGenericTypeDefinition { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsGenericTypeDefinition : bool" Usage="System.Type.IsGenericTypeDefinition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a871-3791">取得值，指出目前的 <see cref="T:System.Type" /> 是否表示可用於建構其他泛型類型的泛型類型定義。</span><span class="sxs-lookup"><span data-stu-id="9a871-3791">Gets a value indicating whether the current <see cref="T:System.Type" /> represents a generic type definition, from which other generic types can be constructed.</span></span></summary>
        <value><span data-ttu-id="9a871-3792">如果 <see langword="true" /> 物件表示泛型類型定義，則為 <see cref="T:System.Type" />否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3792"><see langword="true" /> if the <see cref="T:System.Type" /> object represents a generic type definition; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-3793">泛型類型定義是可從中建構其他類型的範本。</span><span class="sxs-lookup"><span data-stu-id="9a871-3793">A generic type definition is a template from which other types can be constructed.</span></span> <span data-ttu-id="9a871-3794">例如，從泛型類型定義`G<T>`（以 C# 語法;`G(Of T)`在 Visual Basic 中或`generic <typename T> ref class G`c + + 中) 您可以建構和具現化型別`G<int>`(`G(Of Integer)` Visual Basic 中)，藉由呼叫<xref:System.Type.MakeGenericType%2A>方法的泛型引數清單包含<xref:System.Int32>型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-3794">For example, from the generic type definition `G<T>` (expressed in C# syntax; `G(Of T)` in Visual Basic or `generic <typename T> ref class G` in C++) you can construct and instantiate the type `G<int>` (`G(Of Integer)` in Visual Basic), by calling the <xref:System.Type.MakeGenericType%2A> method with a generic argument list containing the <xref:System.Int32> type.</span></span> <span data-ttu-id="9a871-3795">給定<xref:System.Type>物件，代表這個建構的型別，<xref:System.Type.GetGenericTypeDefinition%2A>方法取回的泛型類型定義一次。</span><span class="sxs-lookup"><span data-stu-id="9a871-3795">Given a <xref:System.Type> object representing this constructed type, the <xref:System.Type.GetGenericTypeDefinition%2A> method gets the generic type definition back again.</span></span>  
  
 <span data-ttu-id="9a871-3796">使用<xref:System.Type.IsGenericTypeDefinition%2A>屬性來判斷您是否可以從目前的型別來建立新的型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-3796">Use the <xref:System.Type.IsGenericTypeDefinition%2A> property to determine whether you can create new types from the current type.</span></span> <span data-ttu-id="9a871-3797">如果<xref:System.Type.IsGenericTypeDefinition%2A>屬性會傳回`true`，您可以呼叫<xref:System.Type.MakeGenericType%2A>方法用來建立新的泛型類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-3797">If the <xref:System.Type.IsGenericTypeDefinition%2A> property returns `true`, you can call the <xref:System.Type.MakeGenericType%2A> method to create new generic types.</span></span>  
  
 <span data-ttu-id="9a871-3798">如需泛型反映中所使用之規範的恆成立條件清單，請參閱 <xref:System.Type.IsGenericType%2A> 屬性備註。</span><span class="sxs-lookup"><span data-stu-id="9a871-3798">For a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property remarks.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-3799">下列範例會顯示類型，包括這是泛型型別定義的相關資訊。</span><span class="sxs-lookup"><span data-stu-id="9a871-3799">The following example displays information about a type, including whether or not it is a generic type definition.</span></span> <span data-ttu-id="9a871-3800">建構的類型、 其泛型型別定義，以及一般型別，則會顯示資訊。</span><span class="sxs-lookup"><span data-stu-id="9a871-3800">Information is displayed for a constructed type, for its generic type definition, and for an ordinary type.</span></span>  
  
 [!code-cpp[System.Type.IsGenericTypeDefinition#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.IsGenericTypeDefinition/CPP/source.cpp#1)]
 [!code-csharp[System.Type.IsGenericTypeDefinition#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.IsGenericTypeDefinition/CS/source.cs#1)]
 [!code-vb[System.Type.IsGenericTypeDefinition#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.IsGenericTypeDefinition/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.ContainsGenericParameters" />
        <altmember cref="M:System.Type.GetGenericTypeDefinition" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/reflection-and-generic-types.md"><span data-ttu-id="9a871-3801">反映和泛用類型</span><span class="sxs-lookup"><span data-stu-id="9a871-3801">Reflection and Generic Types</span></span></related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-examine-and-instantiate-generic-types-with-reflection.md"><span data-ttu-id="9a871-3802">如何：使用反映檢視和執行個體化泛型類型</span><span class="sxs-lookup"><span data-stu-id="9a871-3802">How to: Examine and Instantiate Generic Types with Reflection</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsGenericTypeParameter">
      <MemberSignature Language="C#" Value="public virtual bool IsGenericTypeParameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGenericTypeParameter" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsGenericTypeParameter" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsGenericTypeParameter As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsGenericTypeParameter { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsGenericTypeParameter : bool" Usage="System.Type.IsGenericTypeParameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsImport">
      <MemberSignature Language="C#" Value="public bool IsImport { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsImport" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsImport" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsImport As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsImport { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsImport : bool" Usage="System.Type.IsImport" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsImport</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a871-3803">取得值，指出 <see cref="T:System.Type" /> 是否套用了 <see cref="T:System.Runtime.InteropServices.ComImportAttribute" /> 屬性 (Attribute)，亦即其是否從 COM 類型程式庫匯入。</span><span class="sxs-lookup"><span data-stu-id="9a871-3803">Gets a value indicating whether the <see cref="T:System.Type" /> has a <see cref="T:System.Runtime.InteropServices.ComImportAttribute" /> attribute applied, indicating that it was imported from a COM type library.</span></span></summary>
        <value><span data-ttu-id="9a871-3804">如果 <see langword="true" /> 具有 <see cref="T:System.Type" />，則為 <see cref="T:System.Runtime.InteropServices.ComImportAttribute" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3804"><see langword="true" /> if the <see cref="T:System.Type" /> has a <see cref="T:System.Runtime.InteropServices.ComImportAttribute" />; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-3805">如果目前<xref:System.Type>代表建構泛型型別，這個屬性會套用至泛型型別定義從中建構的類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-3805">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="9a871-3806">例如，如果目前<xref:System.Type>代表`MyGenericType<int>`(`MyGenericType(Of Integer)` Visual Basic 中)，這個屬性的值由 `MyGenericType<T>.`</span><span class="sxs-lookup"><span data-stu-id="9a871-3806">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>.`</span></span>  
  
 <span data-ttu-id="9a871-3807">如果目前<xref:System.Type>表示的類型參數的泛型類型或泛型方法定義中這個屬性一律傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="9a871-3807">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsInstanceOfType">
      <MemberSignature Language="C#" Value="public virtual bool IsInstanceOfType (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsInstanceOfType(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsInstanceOfType(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsInstanceOfType (o As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsInstanceOfType(System::Object ^ o);" />
      <MemberSignature Language="F#" Value="abstract member IsInstanceOfType : obj -&gt; bool&#xA;override this.IsInstanceOfType : obj -&gt; bool" Usage="type.IsInstanceOfType o" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.IsInstanceOfType(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o"><span data-ttu-id="9a871-3808">要與目前的類型比較的物件。</span><span class="sxs-lookup"><span data-stu-id="9a871-3808">The object to compare with the current type.</span></span></param>
        <summary><span data-ttu-id="9a871-3809">判斷指定的物件是否為目前 <see cref="T:System.Type" /> 的執行個體。</span><span class="sxs-lookup"><span data-stu-id="9a871-3809">Determines whether the specified object is an instance of the current <see cref="T:System.Type" />.</span></span></summary>
        <returns><span data-ttu-id="9a871-3810">如果在目前 <see langword="Type" /> 位於 <paramref name="o" /> 所代表之物件的階層架構中，或者目前 <see langword="Type" /> 位於 <paramref name="o" /> 支援的介面中，則為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3810"><see langword="true" /> if the current <see langword="Type" /> is in the inheritance hierarchy of the object represented by <paramref name="o" />, or if the current <see langword="Type" /> is an interface that <paramref name="o" /> implements.</span></span> <span data-ttu-id="9a871-3811">如果都不是這些情況，或者如果 <paramref name="o" /> 為 <see langword="null" />，又或者如果目前 <see langword="Type" /> 為開放式泛型類型 (亦即 <see cref="P:System.Type.ContainsGenericParameters" /> 會傳回 <see langword="true" />)，則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3811"><see langword="false" /> if neither of these conditions is the case, if <paramref name="o" /> is <see langword="null" />, or if the current <see langword="Type" /> is an open generic type (that is, <see cref="P:System.Type.ContainsGenericParameters" /> returns <see langword="true" />).</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-3812">在衍生類別可以覆寫此方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-3812">This method can be overridden by a derived class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9a871-3813">建構的型別不是其泛型型別定義的執行個體。</span><span class="sxs-lookup"><span data-stu-id="9a871-3813">A constructed type is not an instance of its generic type definition.</span></span> <span data-ttu-id="9a871-3814">亦即`MyGenericList<int>`(`MyGenericList(Of Integer)` Visual Basic 中) 不是的執行個體`MyGenericList<T>`(`MyGenericList(Of T)` Visual Basic 中)。</span><span class="sxs-lookup"><span data-stu-id="9a871-3814">That is, `MyGenericList<int>` (`MyGenericList(Of Integer)` in Visual Basic) is not an instance of `MyGenericList<T>` (`MyGenericList(Of T)` in Visual Basic).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-3815">下列範例示範 `IsInstanceOfType` 方法的用法。</span><span class="sxs-lookup"><span data-stu-id="9a871-3815">The following example demonstrates the use of the `IsInstanceOfType` method.</span></span>  
  
 [!code-cpp[TestIsInstanceOfType#1](~/samples/snippets/cpp/VS_Snippets_CLR/TestIsInstanceOfType/CPP/testisinstanceoftype.cpp#1)]
 [!code-csharp[TestIsInstanceOfType#1](~/samples/snippets/csharp/VS_Snippets_CLR/TestIsInstanceOfType/CS/testisinstanceoftype.cs#1)]
 [!code-vb[TestIsInstanceOfType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TestIsInstanceOfType/VB/testisinstanceoftype.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInterface">
      <MemberSignature Language="C#" Value="public bool IsInterface { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInterface" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsInterface" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInterface As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInterface { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsInterface : bool" Usage="System.Type.IsInterface" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsInterface</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a871-3816">取得值，指出 <see cref="T:System.Type" /> 是否為介面；也就是說，不是類別或實值類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-3816">Gets a value indicating whether the <see cref="T:System.Type" /> is an interface; that is, not a class or a value type.</span></span></summary>
        <value><span data-ttu-id="9a871-3817">如果 <see langword="true" /> 是介面，則為 <see cref="T:System.Type" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3817"><see langword="true" /> if the <see cref="T:System.Type" /> is an interface; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-3818"><xref:System.Reflection.TypeAttributes.ClassSemanticsMask>區分型別宣告為類別、 介面或實值型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-3818">The <xref:System.Reflection.TypeAttributes.ClassSemanticsMask> distinguishes a type declaration as class, interface or value type.</span></span>  
  
 <span data-ttu-id="9a871-3819">如果目前<xref:System.Type>表示的類型參數的泛型類型或泛型方法定義中這個屬性一律傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="9a871-3819">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="9a871-3820">這個屬性是唯讀的。</span><span class="sxs-lookup"><span data-stu-id="9a871-3820">This property is read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-3821">下列範例會建立一個介面，介面型別，會檢查並指出類別是否有`IsInterface`屬性集。</span><span class="sxs-lookup"><span data-stu-id="9a871-3821">The following example creates an interface, checks for the interface type, and indicates whether a class has the `IsInterface` property set.</span></span>  
  
 [!code-cpp[Type_IsInterface#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsInterface/CPP/type_isinterface.cpp#1)]
 [!code-csharp[Type_IsInterface#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsInterface/CS/type_isinterface.cs#1)]
 [!code-vb[Type_IsInterface#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsInterface/VB/type_isinterface.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="P:System.Type.IsClass" />
        <altmember cref="P:System.Type.IsValueType" />
      </Docs>
    </Member>
    <Member MemberName="IsLayoutSequential">
      <MemberSignature Language="C#" Value="public bool IsLayoutSequential { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLayoutSequential" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsLayoutSequential" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsLayoutSequential As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsLayoutSequential { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsLayoutSequential : bool" Usage="System.Type.IsLayoutSequential" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsLayoutSequential</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a871-3822">取得表示目前類型的欄位是否已依為其定義或發出至中繼資料之順序，循序配置版面的值。</span><span class="sxs-lookup"><span data-stu-id="9a871-3822">Gets a value indicating whether the fields of the current type are laid out sequentially, in the order that they were defined or emitted to the metadata.</span></span></summary>
        <value><span data-ttu-id="9a871-3823">如果目前類型的 <see langword="true" /> 屬性包含 <see cref="P:System.Type.Attributes" /> 則為 <see cref="F:System.Reflection.TypeAttributes.SequentialLayout" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3823"><see langword="true" /> if the <see cref="P:System.Type.Attributes" /> property of the current type includes <see cref="F:System.Reflection.TypeAttributes.SequentialLayout" />; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-3824">為了方便起見提供這個屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-3824">This property is provided as a convenience.</span></span> <span data-ttu-id="9a871-3825">或者，您可以使用<xref:System.Reflection.TypeAttributes.LayoutMask?displayProperty=nameWithType>列舉值，以選取類型版面配置屬性，然後測試是否<xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType>設定。</span><span class="sxs-lookup"><span data-stu-id="9a871-3825">Alternatively, you can use the <xref:System.Reflection.TypeAttributes.LayoutMask?displayProperty=nameWithType> enumeration value to select the type layout attributes, and then test whether <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> is set.</span></span> <span data-ttu-id="9a871-3826"><xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType>， <xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType>，和<xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType>列舉值，表示類型的欄位配置記憶體中的方式。</span><span class="sxs-lookup"><span data-stu-id="9a871-3826">The <xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType>, <xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType>, and <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> enumeration values indicate the way the fields of the type are laid out in memory.</span></span>  
  
 <span data-ttu-id="9a871-3827">動態類型，您可以指定<xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType>當您建立的類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-3827">For dynamic types, you can specify <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> when you create the type.</span></span> <span data-ttu-id="9a871-3828">在程式碼中，套用<xref:System.Runtime.InteropServices.StructLayoutAttribute>屬性搭配<xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType>的型別，以指定該版面配置是循序的列舉值。</span><span class="sxs-lookup"><span data-stu-id="9a871-3828">In code, apply the <xref:System.Runtime.InteropServices.StructLayoutAttribute> attribute with the <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> enumeration value to the type, to specify that layout is sequential.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9a871-3829">您無法使用<xref:System.Reflection.MemberInfo.GetCustomAttributes%2A>方法，以判斷是否<xref:System.Runtime.InteropServices.StructLayoutAttribute>已套用至型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-3829">You cannot use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> method to determine whether the <xref:System.Runtime.InteropServices.StructLayoutAttribute> has been applied to a type.</span></span>  
  
 <span data-ttu-id="9a871-3830">如需詳細資訊，請參閱 Common Language Infrastructure (CLI) 文件規格的章節 9.1.2"Partition II:中繼資料定義和語意 」。</span><span class="sxs-lookup"><span data-stu-id="9a871-3830">For more information, see section 9.1.2 of the specification for the Common Language Infrastructure (CLI) documentation, "Partition II: Metadata Definition and Semantics".</span></span> <span data-ttu-id="9a871-3831">您可以線上取得這份文件；請參閱 MSDN 上的 [ECMA C# 和通用語言基礎結構標準](https://go.microsoft.com/fwlink/?LinkID=99212)，以及 Ecma International 網站上的[標準 ECMA-335 - 通用語言基礎結構 (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552)。</span><span class="sxs-lookup"><span data-stu-id="9a871-3831">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 <span data-ttu-id="9a871-3832">如果目前<xref:System.Type>代表建構泛型型別，這個屬性會套用至泛型型別定義從中建構的類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-3832">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="9a871-3833">例如，如果目前<xref:System.Type>代表`MyGenericType<int>`(`MyGenericType(Of Integer)`在 Visual Basic 中)，這個屬性的值取決於`MyGenericType<T>`。</span><span class="sxs-lookup"><span data-stu-id="9a871-3833">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="9a871-3834">如果目前<xref:System.Type>表示的類型參數的泛型類型或泛型方法定義中這個屬性一律傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="9a871-3834">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-3835">下列範例會建立類別的執行個體的<xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType>中的列舉值<xref:System.Runtime.InteropServices.StructLayoutAttribute>類別已設定，會檢查<xref:System.Type.IsLayoutSequential%2A>屬性，並顯示結果。</span><span class="sxs-lookup"><span data-stu-id="9a871-3835">The following example creates an instance of a class for which the <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> enumeration value in the <xref:System.Runtime.InteropServices.StructLayoutAttribute> class has been set, checks for the <xref:System.Type.IsLayoutSequential%2A> property, and displays the result.</span></span>  
  
 [!code-cpp[Type_IsLayoutSequential#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsLayoutSequential/CPP/type_islayoutsequential.cpp#1)]
 [!code-csharp[Type_IsLayoutSequential#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsLayoutSequential/CS/type_islayoutsequential.cs#1)]
 [!code-vb[Type_IsLayoutSequential#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsLayoutSequential/VB/type_islayoutsequential.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="P:System.Type.IsAutoLayout" />
        <altmember cref="P:System.Type.IsExplicitLayout" />
        <related type="Article" href="~/docs/standard/metadata-and-self-describing-components.md"><span data-ttu-id="9a871-3836">中繼資料和自我描述元件</span><span class="sxs-lookup"><span data-stu-id="9a871-3836">Metadata and Self-Describing Components</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsMarshalByRef">
      <MemberSignature Language="C#" Value="public bool IsMarshalByRef { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMarshalByRef" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsMarshalByRef" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMarshalByRef As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMarshalByRef { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMarshalByRef : bool" Usage="System.Type.IsMarshalByRef" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsMarshalByRef</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a871-3837">取得值，指出 <see cref="T:System.Type" /> 是否以傳址方式封送處理。</span><span class="sxs-lookup"><span data-stu-id="9a871-3837">Gets a value indicating whether the <see cref="T:System.Type" /> is marshaled by reference.</span></span></summary>
        <value><span data-ttu-id="9a871-3838">如果 <see langword="true" /> 是以傳址方式進行封送處理，則為 <see cref="T:System.Type" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3838"><see langword="true" /> if the <see cref="T:System.Type" /> is marshaled by reference; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="9a871-3839">下列範例示範`IsContextful`， <xref:System.Type.IsMarshalByRef%2A>，並<xref:System.Type.IsPrimitive%2A>的屬性<xref:System.Type>類別。</span><span class="sxs-lookup"><span data-stu-id="9a871-3839">The following example demonstrates the `IsContextful`, <xref:System.Type.IsMarshalByRef%2A>, and <xref:System.Type.IsPrimitive%2A> properties of the <xref:System.Type> class.</span></span> <span data-ttu-id="9a871-3840">它會檢查是否裝載於內容中的指定型別是否它可以封送處理的參考，以及類型是否為基本資料類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-3840">It checks whether the given type can be hosted in the context, whether it can be marshaled by reference, and whether the type is a primitive data type.</span></span>  
  
 [!code-cpp[Type_IsContextful#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsContextful/CPP/type_iscontextful.cpp#1)]
 [!code-csharp[Type_IsContextful#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsContextful/CS/type_iscontextful.cs#1)]
 [!code-vb[Type_IsContextful#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsContextful/VB/type_iscontextful.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.IsMarshalByRefImpl" />
      </Docs>
    </Member>
    <Member MemberName="IsMarshalByRefImpl">
      <MemberSignature Language="C#" Value="protected virtual bool IsMarshalByRefImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsMarshalByRefImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsMarshalByRefImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function IsMarshalByRefImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool IsMarshalByRefImpl();" />
      <MemberSignature Language="F#" Value="abstract member IsMarshalByRefImpl : unit -&gt; bool&#xA;override this.IsMarshalByRefImpl : unit -&gt; bool" Usage="type.IsMarshalByRefImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9a871-3841">實作 <see cref="P:System.Type.IsMarshalByRef" /> 屬性，判斷 <see cref="T:System.Type" /> 是否以傳址方式封送處理。</span><span class="sxs-lookup"><span data-stu-id="9a871-3841">Implements the <see cref="P:System.Type.IsMarshalByRef" /> property and determines whether the <see cref="T:System.Type" /> is marshaled by reference.</span></span></summary>
        <returns><span data-ttu-id="9a871-3842">如果 <see langword="true" /> 是以傳址方式進行封送處理，則為 <see cref="T:System.Type" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3842"><see langword="true" /> if the <see cref="T:System.Type" /> is marshaled by reference; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-3843">在衍生類別可以覆寫此方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-3843">This method can be overridden by a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-3844">下列範例會判斷指定的型別是否會傳址封送處理，並顯示結果。</span><span class="sxs-lookup"><span data-stu-id="9a871-3844">The following example determines whether the given type is marshaled by reference and displays the result.</span></span>  
  
 [!code-cpp[Type_IsMarshalByRefImpl#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsMarshalByRefImpl/CPP/type_ismarshalbyrefimpl.cpp#1)]
 [!code-csharp[Type_IsMarshalByRefImpl#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsMarshalByRefImpl/CS/type_ismarshalbyrefimpl.cs#1)]
 [!code-vb[Type_IsMarshalByRefImpl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsMarshalByRefImpl/VB/type_ismarshalbyrefimpl.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.IsMarshalByRef" />
      </Docs>
    </Member>
    <Member MemberName="IsNested">
      <MemberSignature Language="C#" Value="public bool IsNested { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNested" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsNested" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNested As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNested { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNested : bool" Usage="System.Type.IsNested" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a871-3845">取得值，表示目前的 <see cref="T:System.Type" /> 物件代表的類型之定義是否位於另一個類型的定義內部。</span><span class="sxs-lookup"><span data-stu-id="9a871-3845">Gets a value indicating whether the current <see cref="T:System.Type" /> object represents a type whose definition is nested inside the definition of another type.</span></span></summary>
        <value><span data-ttu-id="9a871-3846">如果 <see langword="true" /> 巢狀於另一個類型中，則為 <see cref="T:System.Type" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3846"><see langword="true" /> if the <see cref="T:System.Type" /> is nested inside another type; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-3847"><xref:System.Type.IsNested%2A>屬性會傳回`true`所有巢狀類型，不論可見性。</span><span class="sxs-lookup"><span data-stu-id="9a871-3847">The <xref:System.Type.IsNested%2A> property returns `true` for all nested types, regardless of visibility.</span></span> <span data-ttu-id="9a871-3848">若要在此同時測試巢狀結構和可見性，使用相關的屬性<xref:System.Type.IsNestedAssembly%2A>， <xref:System.Type.IsNestedFamily%2A>， <xref:System.Type.IsNestedFamANDAssem%2A>， <xref:System.Type.IsNestedFamORAssem%2A>， <xref:System.Type.IsNestedPrivate%2A>，或<xref:System.Type.IsNestedPublic%2A>。</span><span class="sxs-lookup"><span data-stu-id="9a871-3848">To test for nesting and visibility at the same time, use the related properties <xref:System.Type.IsNestedAssembly%2A>, <xref:System.Type.IsNestedFamily%2A>, <xref:System.Type.IsNestedFamANDAssem%2A>, <xref:System.Type.IsNestedFamORAssem%2A>, <xref:System.Type.IsNestedPrivate%2A>, or <xref:System.Type.IsNestedPublic%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9a871-3849"><xref:System.Reflection.TypeAttributes.VisibilityMask>列舉成員選取類型的可見性屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-3849">The <xref:System.Reflection.TypeAttributes.VisibilityMask> enumeration member selects the visibility attributes for a type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-3850">下列範例會建立外部的類別，以擁有各種類型的可見性的巢狀類別的數字。</span><span class="sxs-lookup"><span data-stu-id="9a871-3850">The following example creates an outer class with a number of nested classes that have various types of visibility.</span></span> <span data-ttu-id="9a871-3851">然後會擷取的值數目的可見性相關<xref:System.Type>父型別和其巢狀類型的每個屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-3851">It then retrieves the value of a number of visibility-related <xref:System.Type> properties for the parent type and each of its nested types.</span></span>  
  
 [!code-csharp[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isnestedfamandassem/cs/isnestedfamilyandassembly1.cs#1)]
 [!code-vb[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isnestedfamandassem/vb/isnestedfamilyandassembly1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.IsNestedAssembly" />
        <altmember cref="P:System.Type.IsNestedFamily" />
        <altmember cref="P:System.Type.IsNestedFamANDAssem" />
        <altmember cref="P:System.Type.IsNestedFamORAssem" />
        <altmember cref="P:System.Type.IsNestedPrivate" />
        <altmember cref="P:System.Type.IsNestedPublic" />
      </Docs>
    </Member>
    <Member MemberName="IsNestedAssembly">
      <MemberSignature Language="C#" Value="public bool IsNestedAssembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedAssembly" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsNestedAssembly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNestedAssembly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNestedAssembly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNestedAssembly : bool" Usage="System.Type.IsNestedAssembly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsNestedAssembly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a871-3852">取得值，指出 <see cref="T:System.Type" /> 是否為巢狀，並只在它自己的組件內為可見。</span><span class="sxs-lookup"><span data-stu-id="9a871-3852">Gets a value indicating whether the <see cref="T:System.Type" /> is nested and visible only within its own assembly.</span></span></summary>
        <value><span data-ttu-id="9a871-3853">如果 <see langword="true" /> 是巢狀並只在它自己的組件內為可見，則為 <see cref="T:System.Type" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3853"><see langword="true" /> if the <see cref="T:System.Type" /> is nested and visible only within its own assembly; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-3854">如果目前<xref:System.Type>表示的類型參數的泛型型別，這個屬性一律傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="9a871-3854">If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="9a871-3855"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> 選取的可見性屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-3855"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> selects the visibility attributes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-3856">下列範例會建立外部的類別，以擁有各種類型的可見性的巢狀類別的數字。</span><span class="sxs-lookup"><span data-stu-id="9a871-3856">The following example creates an outer class with a number of nested classes that have various types of visibility.</span></span> <span data-ttu-id="9a871-3857">然後會擷取的值數目的可見性相關<xref:System.Type>父型別和其巢狀類型的每個屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-3857">It then retrieves the value of a number of visibility-related <xref:System.Type> properties for the parent type and each of its nested types.</span></span>  
  
 [!code-csharp[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isnestedfamandassem/cs/isnestedfamilyandassembly1.cs#1)]
 [!code-vb[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isnestedfamandassem/vb/isnestedfamilyandassembly1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsNestedFamANDAssem">
      <MemberSignature Language="C#" Value="public bool IsNestedFamANDAssem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedFamANDAssem" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsNestedFamANDAssem" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNestedFamANDAssem As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNestedFamANDAssem { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNestedFamANDAssem : bool" Usage="System.Type.IsNestedFamANDAssem" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsNestedFamANDAssem</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a871-3858">取得值，指出 <see cref="T:System.Type" /> 是否為巢狀，並只對同時屬於它自己家族和它自己組件的類別為可見。</span><span class="sxs-lookup"><span data-stu-id="9a871-3858">Gets a value indicating whether the <see cref="T:System.Type" /> is nested and visible only to classes that belong to both its own family and its own assembly.</span></span></summary>
        <value><span data-ttu-id="9a871-3859">如果 <see cref="T:System.Type" /> 是巢狀並只對同時屬於它自己家族和它自己組件的類別為可見，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3859"><see langword="true" /> if the <see cref="T:System.Type" /> is nested and visible only to classes that belong to both its own family and its own assembly; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-3860">如果目前<xref:System.Type>表示的類型參數的泛型型別，這個屬性一律傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="9a871-3860">If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="9a871-3861"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> 選取的可見性屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-3861"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> selects the visibility attributes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9a871-3862">C# 和 Visual Basic 語言不包含可讓您定義只在它自己組件中的受保護類型可以看到的巢狀的類型的語意。</span><span class="sxs-lookup"><span data-stu-id="9a871-3862">The C# and Visual Basic languages do not include semantics that allow you to define a nested type that is visible only to protected types in its own assembly.</span></span> <span data-ttu-id="9a871-3863">`protected internal` 在 C# 中的可見性和`Protected Friend`Visual Basic 中的可見性定義會顯示受保護的類型和類型相同的組件中的巢狀的類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-3863">`protected internal` visibility in C# and `Protected Friend` visibility in Visual Basic define a nested type that is visible both to protected types and to types in the same assembly.</span></span>  
  
 <span data-ttu-id="9a871-3864">A<xref:System.Type>物件的系列指相同的所有物件<xref:System.Type>和及其子類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-3864">A <xref:System.Type> object's family is defined as all objects of the same <xref:System.Type> and of its subtypes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-3865">下列範例會建立外部的類別，以擁有各種類型的可見性的巢狀類別的數字。</span><span class="sxs-lookup"><span data-stu-id="9a871-3865">The following example creates an outer class with a number of nested classes that have various types of visibility.</span></span> <span data-ttu-id="9a871-3866">然後會擷取的值數目的可見性相關<xref:System.Type>父型別和其巢狀類型的每個屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-3866">It then retrieves the value of a number of visibility-related <xref:System.Type> properties for the parent type and each of its nested types.</span></span>  
  
 [!code-csharp[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isnestedfamandassem/cs/isnestedfamilyandassembly1.cs#1)]
 [!code-vb[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isnestedfamandassem/vb/isnestedfamilyandassembly1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsNestedFamily">
      <MemberSignature Language="C#" Value="public bool IsNestedFamily { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedFamily" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsNestedFamily" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNestedFamily As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNestedFamily { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNestedFamily : bool" Usage="System.Type.IsNestedFamily" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsNestedFamily</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a871-3867">取得值，指出 <see cref="T:System.Type" /> 是否為巢狀，並只在它自己的系列內為可見。</span><span class="sxs-lookup"><span data-stu-id="9a871-3867">Gets a value indicating whether the <see cref="T:System.Type" /> is nested and visible only within its own family.</span></span></summary>
        <value><span data-ttu-id="9a871-3868">如果 <see langword="true" /> 是巢狀並只在它自己的家族內為可見，則為 <see cref="T:System.Type" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3868"><see langword="true" /> if the <see cref="T:System.Type" /> is nested and visible only within its own family; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-3869">如果目前<xref:System.Type>表示的類型參數的泛型型別，這個屬性一律傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="9a871-3869">If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="9a871-3870"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> 選取的可見性屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-3870"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> selects the visibility attributes.</span></span>  
  
 <span data-ttu-id="9a871-3871">A<xref:System.Type>物件的系列指所有物件的完全相同<xref:System.Type>和及其子類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-3871">A <xref:System.Type> object's family is defined as all objects of the exact same <xref:System.Type> and of its subtypes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-3872">下列範例會建立外部的類別，以擁有各種類型的可見性的巢狀類別的數字。</span><span class="sxs-lookup"><span data-stu-id="9a871-3872">The following example creates an outer class with a number of nested classes that have various types of visibility.</span></span> <span data-ttu-id="9a871-3873">然後會擷取的值數目的可見性相關<xref:System.Type>父型別和其巢狀類型的每個屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-3873">It then retrieves the value of a number of visibility-related <xref:System.Type> properties for the parent type and each of its nested types.</span></span>  
  
 [!code-csharp[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isnestedfamandassem/cs/isnestedfamilyandassembly1.cs#1)]
 [!code-vb[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isnestedfamandassem/vb/isnestedfamilyandassembly1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsNestedFamORAssem">
      <MemberSignature Language="C#" Value="public bool IsNestedFamORAssem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedFamORAssem" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsNestedFamORAssem" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNestedFamORAssem As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNestedFamORAssem { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNestedFamORAssem : bool" Usage="System.Type.IsNestedFamORAssem" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsNestedFamORAssem</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a871-3874">取得值，指出 <see cref="T:System.Type" /> 是否為巢狀並只對屬於它自己家族或它自己組件的類別為可見。</span><span class="sxs-lookup"><span data-stu-id="9a871-3874">Gets a value indicating whether the <see cref="T:System.Type" /> is nested and visible only to classes that belong to either its own family or to its own assembly.</span></span></summary>
        <value><span data-ttu-id="9a871-3875">如果 <see langword="true" /> 是巢狀並只對屬於它自己家族或它自己組件的類別為可見，則為 <see cref="T:System.Type" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3875"><see langword="true" /> if the <see cref="T:System.Type" /> is nested and visible only to classes that belong to its own family or to its own assembly; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-3876">如果類型的可見性會`protected internal`C# 中或`Protected Friend`在 Visual Basic<xref:System.Type.IsNestedFamORAssem%2A>屬性會傳回`true`。</span><span class="sxs-lookup"><span data-stu-id="9a871-3876">If the visibility of a type is `protected internal` in C# or `Protected Friend` in Visual Basic, the <xref:System.Type.IsNestedFamORAssem%2A> property returns `true`.</span></span>  
  
 <span data-ttu-id="9a871-3877">如果目前<xref:System.Type>表示的類型參數的泛型型別，這個屬性一律傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="9a871-3877">If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="9a871-3878"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> 選取的可見性屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-3878"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> selects the visibility attributes.</span></span>  
  
 <span data-ttu-id="9a871-3879">A<xref:System.Type>物件的系列指所有物件的完全相同<xref:System.Type>和及其子類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-3879">A <xref:System.Type> object's family is defined as all objects of the exact same <xref:System.Type> and of its subtypes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-3880">下列範例會建立外部的類別，以擁有各種類型的可見性的巢狀類別的數字。</span><span class="sxs-lookup"><span data-stu-id="9a871-3880">The following example creates an outer class with a number of nested classes that have various types of visibility.</span></span> <span data-ttu-id="9a871-3881">然後會擷取的值數目的可見性相關<xref:System.Type>父型別和其巢狀類型的每個屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-3881">It then retrieves the value of a number of visibility-related <xref:System.Type> properties for the parent type and each of its nested types.</span></span>  
  
 [!code-csharp[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isnestedfamandassem/cs/isnestedfamilyandassembly1.cs#1)]
 [!code-vb[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isnestedfamandassem/vb/isnestedfamilyandassembly1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsNestedPrivate">
      <MemberSignature Language="C#" Value="public bool IsNestedPrivate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedPrivate" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsNestedPrivate" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNestedPrivate As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNestedPrivate { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNestedPrivate : bool" Usage="System.Type.IsNestedPrivate" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsNestedPrivate</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a871-3882">取得值，指出 <see cref="T:System.Type" /> 是否為巢狀並且宣告為私用。</span><span class="sxs-lookup"><span data-stu-id="9a871-3882">Gets a value indicating whether the <see cref="T:System.Type" /> is nested and declared private.</span></span></summary>
        <value><span data-ttu-id="9a871-3883">如果 <see langword="true" /> 是巢狀並且宣告為私用，則為 <see cref="T:System.Type" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3883"><see langword="true" /> if the <see cref="T:System.Type" /> is nested and declared private; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-3884">如果目前<xref:System.Type>表示的類型參數的泛型型別，這個屬性一律傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="9a871-3884">If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="9a871-3885"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> 選取的可見性屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-3885"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> selects the visibility attributes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-3886">下列範例會建立外部的類別，以擁有各種類型的可見性的巢狀類別的數字。</span><span class="sxs-lookup"><span data-stu-id="9a871-3886">The following example creates an outer class with a number of nested classes that have various types of visibility.</span></span> <span data-ttu-id="9a871-3887">然後會擷取的值數目的可見性相關<xref:System.Type>父型別和其巢狀類型的每個屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-3887">It then retrieves the value of a number of visibility-related <xref:System.Type> properties for the parent type and each of its nested types.</span></span>  
  
 [!code-csharp[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isnestedfamandassem/cs/isnestedfamilyandassembly1.cs#1)]
 [!code-vb[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isnestedfamandassem/vb/isnestedfamilyandassembly1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsNestedPublic">
      <MemberSignature Language="C#" Value="public bool IsNestedPublic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedPublic" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsNestedPublic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNestedPublic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNestedPublic { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNestedPublic : bool" Usage="System.Type.IsNestedPublic" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsNestedPublic</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a871-3888">取得值，指出類別是否為巢狀 (Nest) 並且宣告為公用 (Public)。</span><span class="sxs-lookup"><span data-stu-id="9a871-3888">Gets a value indicating whether a class is nested and declared public.</span></span></summary>
        <value><span data-ttu-id="9a871-3889">如果類別是巢狀並且宣告為公用，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3889"><see langword="true" /> if the class is nested and declared public; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-3890">如果目前<xref:System.Type>表示的類型參數的泛型型別，這個屬性一律傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="9a871-3890">If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="9a871-3891"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> 選取的可見性屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-3891"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> selects the visibility attributes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-3892">下列範例會建立外部的類別，以擁有各種類型的可見性的巢狀類別的數字。</span><span class="sxs-lookup"><span data-stu-id="9a871-3892">The following example creates an outer class with a number of nested classes that have various types of visibility.</span></span> <span data-ttu-id="9a871-3893">然後會擷取的值數目的可見性相關<xref:System.Type>父型別和其巢狀類型的每個屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-3893">It then retrieves the value of a number of visibility-related <xref:System.Type> properties for the parent type and each of its nested types.</span></span>  
  
 [!code-csharp[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isnestedfamandassem/cs/isnestedfamilyandassembly1.cs#1)]
 [!code-vb[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isnestedfamandassem/vb/isnestedfamilyandassembly1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsNotPublic">
      <MemberSignature Language="C#" Value="public bool IsNotPublic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNotPublic" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsNotPublic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNotPublic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNotPublic { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNotPublic : bool" Usage="System.Type.IsNotPublic" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsNotPublic</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a871-3894">取得值，指出 <see cref="T:System.Type" /> 是否未宣告為公用。</span><span class="sxs-lookup"><span data-stu-id="9a871-3894">Gets a value indicating whether the <see cref="T:System.Type" /> is not declared public.</span></span></summary>
        <value><span data-ttu-id="9a871-3895">如果 <see langword="true" /> 尚未宣告為公用而且不是巢狀類型，則為 <see cref="T:System.Type" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3895"><see langword="true" /> if the <see cref="T:System.Type" /> is not declared public and is not a nested type; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-3896">不要使用巢狀型別，這個屬性使用<xref:System.Type.IsNestedPublic%2A>屬性改為。</span><span class="sxs-lookup"><span data-stu-id="9a871-3896">Do not use this property with nested types; use the <xref:System.Type.IsNestedPublic%2A> property instead.</span></span>  
  
 <span data-ttu-id="9a871-3897">如果目前<xref:System.Type>表示的類型參數的泛型型別，這個屬性會傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="9a871-3897">If the current <xref:System.Type> represents a type parameter of a generic type, this property returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-3898">此範例使用`IsNotPublic`屬性來取得類型的可見性。</span><span class="sxs-lookup"><span data-stu-id="9a871-3898">This example usesthe `IsNotPublic` property to get the visibility of the type.</span></span>  
  
 [!code-cpp[Classic Type.IsNotPublic Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.IsNotPublic Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Type.IsNotPublic Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.IsNotPublic Example/CS/source.cs#1)]
 [!code-vb[Classic Type.IsNotPublic Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.IsNotPublic Example/VB/source.vb#1)]  
  
 <span data-ttu-id="9a871-3899">下列程式碼範例示範您為何無法使用`IsPublic`和`IsNotPublic`巢狀類別。</span><span class="sxs-lookup"><span data-stu-id="9a871-3899">The following code example demonstrates why you cannot use `IsPublic` and `IsNotPublic` for nested classes.</span></span>  
  
 [!code-cpp[Classic Type.IsNotPublic Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.IsNotPublic Example/CPP/source.cpp#2)]
 [!code-csharp[Classic Type.IsNotPublic Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.IsNotPublic Example/CS/source.cs#2)]
 [!code-vb[Classic Type.IsNotPublic Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.IsNotPublic Example/VB/source.vb#2)]  
  
 <span data-ttu-id="9a871-3900">對於巢狀類別，略過的結果`IsPublic`並`IsNotPublic`和結果的注意`IsNestedPublic`和`IsNestedPrivate`。</span><span class="sxs-lookup"><span data-stu-id="9a871-3900">For nested classes, ignore the results of `IsPublic` and `IsNotPublic` and pay attention only to the results of `IsNestedPublic` and `IsNestedPrivate`.</span></span> <span data-ttu-id="9a871-3901">此程式碼片段的反映輸出應如下所示：</span><span class="sxs-lookup"><span data-stu-id="9a871-3901">The reflection output for this code fragment would be as follows:</span></span>  
  
|<span data-ttu-id="9a871-3902">類別</span><span class="sxs-lookup"><span data-stu-id="9a871-3902">Class</span></span>|<span data-ttu-id="9a871-3903">IsNotPublic</span><span class="sxs-lookup"><span data-stu-id="9a871-3903">IsNotPublic</span></span>|<span data-ttu-id="9a871-3904">IsPublic</span><span class="sxs-lookup"><span data-stu-id="9a871-3904">IsPublic</span></span>|<span data-ttu-id="9a871-3905">IsNestedPublic</span><span class="sxs-lookup"><span data-stu-id="9a871-3905">IsNestedPublic</span></span>|<span data-ttu-id="9a871-3906">IsNestedPrivate</span><span class="sxs-lookup"><span data-stu-id="9a871-3906">IsNestedPrivate</span></span>|  
|-----------|-----------------|--------------|--------------------|---------------------|  
|<span data-ttu-id="9a871-3907">A</span><span class="sxs-lookup"><span data-stu-id="9a871-3907">A</span></span>|<span data-ttu-id="9a871-3908">false</span><span class="sxs-lookup"><span data-stu-id="9a871-3908">FALSE</span></span>|<span data-ttu-id="9a871-3909">true</span><span class="sxs-lookup"><span data-stu-id="9a871-3909">TRUE</span></span>|<span data-ttu-id="9a871-3910">false</span><span class="sxs-lookup"><span data-stu-id="9a871-3910">FALSE</span></span>|<span data-ttu-id="9a871-3911">false</span><span class="sxs-lookup"><span data-stu-id="9a871-3911">FALSE</span></span>|  
|<span data-ttu-id="9a871-3912">B</span><span class="sxs-lookup"><span data-stu-id="9a871-3912">B</span></span>|<span data-ttu-id="9a871-3913">false</span><span class="sxs-lookup"><span data-stu-id="9a871-3913">FALSE</span></span>|<span data-ttu-id="9a871-3914">false</span><span class="sxs-lookup"><span data-stu-id="9a871-3914">FALSE</span></span>|<span data-ttu-id="9a871-3915">true</span><span class="sxs-lookup"><span data-stu-id="9a871-3915">TRUE</span></span>|<span data-ttu-id="9a871-3916">false</span><span class="sxs-lookup"><span data-stu-id="9a871-3916">FALSE</span></span>|  
|<span data-ttu-id="9a871-3917">C</span><span class="sxs-lookup"><span data-stu-id="9a871-3917">C</span></span>|<span data-ttu-id="9a871-3918">false</span><span class="sxs-lookup"><span data-stu-id="9a871-3918">FALSE</span></span>|<span data-ttu-id="9a871-3919">false</span><span class="sxs-lookup"><span data-stu-id="9a871-3919">FALSE</span></span>|<span data-ttu-id="9a871-3920">false</span><span class="sxs-lookup"><span data-stu-id="9a871-3920">FALSE</span></span>|<span data-ttu-id="9a871-3921">true</span><span class="sxs-lookup"><span data-stu-id="9a871-3921">TRUE</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsPointer">
      <MemberSignature Language="C#" Value="public bool IsPointer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPointer" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsPointer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPointer As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPointer { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsPointer : bool" Usage="System.Type.IsPointer" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsPointer</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a871-3922">取得值，指出 <see cref="T:System.Type" /> 是否為指標。</span><span class="sxs-lookup"><span data-stu-id="9a871-3922">Gets a value indicating whether the <see cref="T:System.Type" /> is a pointer.</span></span></summary>
        <value><span data-ttu-id="9a871-3923">如果 <see cref="T:System.Type" /> 是指標，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3923"><see langword="true" /> if the <see cref="T:System.Type" /> is a pointer; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-3924">如果目前<xref:System.Type>代表泛型類型或類型參數的泛型類型或泛型方法定義中這個屬性一律傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="9a871-3924">If the current <xref:System.Type> represents a generic type, or a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="9a871-3925">這個屬性是唯讀的。</span><span class="sxs-lookup"><span data-stu-id="9a871-3925">This property is read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-3926">下列範例示範使用`IsPointer`屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-3926">The following example shows a use of the `IsPointer` property.</span></span>  
  
 [!code-cpp[Type_HasElementTypeImpl#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_HasElementTypeImpl/CPP/type_haselementtypeimpl.cpp#1)]
 [!code-csharp[Type_HasElementTypeImpl#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_HasElementTypeImpl/CS/type_haselementtypeimpl.cs#1)]
 [!code-vb[Type_HasElementTypeImpl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_HasElementTypeImpl/VB/type_haselementtypeimpl.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.IsPointerImpl" />
      </Docs>
    </Member>
    <Member MemberName="IsPointerImpl">
      <MemberSignature Language="C#" Value="protected abstract bool IsPointerImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsPointerImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsPointerImpl" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function IsPointerImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool IsPointerImpl();" />
      <MemberSignature Language="F#" Value="abstract member IsPointerImpl : unit -&gt; bool" Usage="type.IsPointerImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9a871-3927">在衍生類別中覆寫時，實作 <see cref="P:System.Type.IsPointer" /> 屬性並判斷 <see cref="T:System.Type" /> 是否為指標。</span><span class="sxs-lookup"><span data-stu-id="9a871-3927">When overridden in a derived class, implements the <see cref="P:System.Type.IsPointer" /> property and determines whether the <see cref="T:System.Type" /> is a pointer.</span></span></summary>
        <returns><span data-ttu-id="9a871-3928">如果 <see cref="T:System.Type" /> 是指標，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3928"><see langword="true" /> if the <see cref="T:System.Type" /> is a pointer; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Type.IsPointer" />
      </Docs>
    </Member>
    <Member MemberName="IsPrimitive">
      <MemberSignature Language="C#" Value="public bool IsPrimitive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPrimitive" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsPrimitive" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPrimitive As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPrimitive { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsPrimitive : bool" Usage="System.Type.IsPrimitive" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsPrimitive</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a871-3929">取得值，指出 <see cref="T:System.Type" /> 是否為其中一個基本類型 (Primitive Type)。</span><span class="sxs-lookup"><span data-stu-id="9a871-3929">Gets a value indicating whether the <see cref="T:System.Type" /> is one of the primitive types.</span></span></summary>
        <value><span data-ttu-id="9a871-3930">如果 <see langword="true" /> 是其中一個基本類型，則為 <see cref="T:System.Type" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3930"><see langword="true" /> if the <see cref="T:System.Type" /> is one of the primitive types; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-3931">基本類型所<xref:System.Boolean>， <xref:System.Byte>， <xref:System.SByte>， <xref:System.Int16>， <xref:System.UInt16>， <xref:System.Int32>， <xref:System.UInt32>， <xref:System.Int64>， <xref:System.UInt64>， <xref:System.IntPtr>， <xref:System.UIntPtr>， <xref:System.Char>，<xref:System.Double>，和<xref:System.Single>。</span><span class="sxs-lookup"><span data-stu-id="9a871-3931">The primitive types are <xref:System.Boolean>, <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, <xref:System.IntPtr>, <xref:System.UIntPtr>, <xref:System.Char>, <xref:System.Double>, and <xref:System.Single>.</span></span>  
  
 <span data-ttu-id="9a871-3932">如果目前<xref:System.Type>代表泛型類型或類型參數的泛型類型或泛型方法定義中這個屬性一律傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="9a871-3932">If the current <xref:System.Type> represents a generic type, or a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-3933">下列範例示範`IsContextful`， <xref:System.Type.IsMarshalByRef%2A>，並<xref:System.Type.IsPrimitive%2A>的屬性<xref:System.Type>類別。</span><span class="sxs-lookup"><span data-stu-id="9a871-3933">The following example demonstrates the `IsContextful`, <xref:System.Type.IsMarshalByRef%2A>, and <xref:System.Type.IsPrimitive%2A> properties of the <xref:System.Type> class.</span></span> <span data-ttu-id="9a871-3934">它會檢查是否裝載於內容中的指定型別是否它可以封送處理的參考，以及類型是否為基本資料類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-3934">It checks whether the given type can be hosted in the context, whether it can be marshaled by reference, and whether the type is a primitive data type.</span></span>  
  
 [!code-cpp[Type_IsContextful#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsContextful/CPP/type_iscontextful.cpp#1)]
 [!code-csharp[Type_IsContextful#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsContextful/CS/type_iscontextful.cs#1)]
 [!code-vb[Type_IsContextful#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsContextful/VB/type_iscontextful.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
        <altmember cref="T:System.Byte" />
        <altmember cref="T:System.SByte" />
        <altmember cref="T:System.Int16" />
        <altmember cref="T:System.UInt16" />
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.UInt32" />
        <altmember cref="T:System.Int64" />
        <altmember cref="T:System.UInt64" />
        <altmember cref="T:System.Char" />
        <altmember cref="T:System.Double" />
        <altmember cref="T:System.Single" />
        <altmember cref="M:System.Type.IsPrimitiveImpl" />
      </Docs>
    </Member>
    <Member MemberName="IsPrimitiveImpl">
      <MemberSignature Language="C#" Value="protected abstract bool IsPrimitiveImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsPrimitiveImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsPrimitiveImpl" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function IsPrimitiveImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool IsPrimitiveImpl();" />
      <MemberSignature Language="F#" Value="abstract member IsPrimitiveImpl : unit -&gt; bool" Usage="type.IsPrimitiveImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9a871-3935">在衍生類別中覆寫時，實作 <see cref="P:System.Type.IsPrimitive" /> 屬性並判斷 <see cref="T:System.Type" /> 是否為其中一個基本類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-3935">When overridden in a derived class, implements the <see cref="P:System.Type.IsPrimitive" /> property and determines whether the <see cref="T:System.Type" /> is one of the primitive types.</span></span></summary>
        <returns><span data-ttu-id="9a871-3936">如果 <see langword="true" /> 是其中一個基本類型，則為 <see cref="T:System.Type" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3936"><see langword="true" /> if the <see cref="T:System.Type" /> is one of the primitive types; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-3937">基本類型所<xref:System.Boolean>， <xref:System.Byte>， <xref:System.SByte>， <xref:System.Int16>， <xref:System.UInt16>， <xref:System.Int32>， <xref:System.UInt32>， <xref:System.Int64>， <xref:System.UInt64>， <xref:System.Char>， <xref:System.Double>，和<xref:System.Single>。</span><span class="sxs-lookup"><span data-stu-id="9a871-3937">The primitive types are <xref:System.Boolean>, <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, <xref:System.Char>, <xref:System.Double>, and <xref:System.Single>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-3938">下列範例會判斷指定的型別是否為基本型別，並顯示結果。</span><span class="sxs-lookup"><span data-stu-id="9a871-3938">The following example determines whether the given type is a primitive type and displays the result.</span></span>  
  
 [!code-cpp[Type_IsPrimitiveImpl#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsPrimitiveImpl/CPP/type_isprimitiveimpl.cpp#1)]
 [!code-csharp[Type_IsPrimitiveImpl#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsPrimitiveImpl/CS/type_isprimitiveimpl.cs#1)]
 [!code-vb[Type_IsPrimitiveImpl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsPrimitiveImpl/VB/type_isprimitiveimpl.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
        <altmember cref="T:System.Byte" />
        <altmember cref="T:System.SByte" />
        <altmember cref="T:System.Int16" />
        <altmember cref="T:System.UInt16" />
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.UInt32" />
        <altmember cref="T:System.Int64" />
        <altmember cref="T:System.UInt64" />
        <altmember cref="T:System.Char" />
        <altmember cref="T:System.Double" />
        <altmember cref="T:System.Single" />
        <altmember cref="P:System.Type.IsPrimitive" />
      </Docs>
    </Member>
    <Member MemberName="IsPublic">
      <MemberSignature Language="C#" Value="public bool IsPublic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPublic" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsPublic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPublic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPublic { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsPublic : bool" Usage="System.Type.IsPublic" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsPublic</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a871-3939">取得值，指出 <see cref="T:System.Type" /> 是否宣告為公用。</span><span class="sxs-lookup"><span data-stu-id="9a871-3939">Gets a value indicating whether the <see cref="T:System.Type" /> is declared public.</span></span></summary>
        <value><span data-ttu-id="9a871-3940">如果 <see langword="true" /> 已宣告為公用而且不是巢狀類型，則為 <see cref="T:System.Type" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3940"><see langword="true" /> if the <see cref="T:System.Type" /> is declared public and is not a nested type; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-3941">不要在使用巢狀型別，使用<xref:System.Type.IsNestedPublic%2A>改。</span><span class="sxs-lookup"><span data-stu-id="9a871-3941">Do not use with nested types; use <xref:System.Type.IsNestedPublic%2A> instead.</span></span>  
  
 <span data-ttu-id="9a871-3942">如果目前<xref:System.Type>表示的類型參數的泛型型別，這個屬性會傳回`true`。</span><span class="sxs-lookup"><span data-stu-id="9a871-3942">If the current <xref:System.Type> represents a type parameter of a generic type, this property returns `true`.</span></span>  
  
 <span data-ttu-id="9a871-3943"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> 選取的可見性屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-3943"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> selects the visibility attributes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-3944">下列範例建立的執行個體`MyTestClass`，檢查是否有`IsPublic`屬性，並顯示結果。</span><span class="sxs-lookup"><span data-stu-id="9a871-3944">The following example creates an instance of `MyTestClass`, checks for the `IsPublic` property, and displays the result.</span></span>  
  
 [!code-cpp[Type.IsPublic#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type.IsPublic/CPP/type_ispublic.cpp#1)]
 [!code-csharp[Type.IsPublic#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type.IsPublic/CS/type_ispublic.cs#1)]
 [!code-vb[Type.IsPublic#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type.IsPublic/VB/type_ispublic.vb#1)]  
  
 <span data-ttu-id="9a871-3945">對於巢狀類別，略過的結果`IsPublic`並`IsNotPublic`和結果的注意<xref:System.Type.IsNestedPublic%2A>和<xref:System.Type.IsNestedPrivate%2A>。</span><span class="sxs-lookup"><span data-stu-id="9a871-3945">For nested classes, ignore the results of `IsPublic` and `IsNotPublic` and pay attention only to the results of <xref:System.Type.IsNestedPublic%2A> and <xref:System.Type.IsNestedPrivate%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsSealed">
      <MemberSignature Language="C#" Value="public bool IsSealed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSealed" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsSealed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSealed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSealed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSealed : bool" Usage="System.Type.IsSealed" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsSealed</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a871-3946">取得值，指出 <see cref="T:System.Type" /> 是否宣告為密封。</span><span class="sxs-lookup"><span data-stu-id="9a871-3946">Gets a value indicating whether the <see cref="T:System.Type" /> is declared sealed.</span></span></summary>
        <value><span data-ttu-id="9a871-3947">如果 <see langword="true" /> 宣告為密封，則為 <see cref="T:System.Type" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3947"><see langword="true" /> if the <see cref="T:System.Type" /> is declared sealed; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-3948">如果目前<xref:System.Type>表示的類型參數的泛型型別，這個屬性一律傳回`true`。</span><span class="sxs-lookup"><span data-stu-id="9a871-3948">If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-3949">下列範例建立的執行個體`sealed`類別，檢查有無`IsSealed`屬性，並顯示結果。</span><span class="sxs-lookup"><span data-stu-id="9a871-3949">The following example creates an instance of a `sealed` class, checks for the `IsSealed` property, and displays the result.</span></span>  
  
 [!code-cpp[Type_IsSealed#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsSealed/CPP/type_issealed.cpp#1)]
 [!code-csharp[Type_IsSealed#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsSealed/CS/type_issealed.cs#1)]
 [!code-vb[Type_IsSealed#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsSealed/VB/type_issealed.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsSecurityCritical">
      <MemberSignature Language="C#" Value="public virtual bool IsSecurityCritical { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecurityCritical" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsSecurityCritical" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsSecurityCritical As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecurityCritical { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSecurityCritical : bool" Usage="System.Type.IsSecurityCritical" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a871-3950">取得值，這個值表示目前類型在目前信任層級上是否為安全性關鍵或安全性安全關鍵，因而可以執行重要的作業。</span><span class="sxs-lookup"><span data-stu-id="9a871-3950">Gets a value that indicates whether the current type is security-critical or security-safe-critical at the current trust level, and therefore can perform critical operations.</span></span></summary>
        <value><span data-ttu-id="9a871-3951">如果目前類型在目前信任層級上為安全性關鍵或安全性安全關鍵，則為 <see langword="true" />，如果是安全性透明，則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3951"><see langword="true" /> if the current type is security-critical or security-safe-critical at the current trust level; <see langword="false" /> if it is transparent.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-3952"><xref:System.Type.IsSecurityCritical%2A>， <xref:System.Type.IsSecuritySafeCritical%2A>，和<xref:System.Type.IsSecurityTransparent%2A>屬性報告在其目前信任層級，由 common language runtime (CLR) 類型的透明度。</span><span class="sxs-lookup"><span data-stu-id="9a871-3952">The <xref:System.Type.IsSecurityCritical%2A>, <xref:System.Type.IsSecuritySafeCritical%2A>, and <xref:System.Type.IsSecurityTransparent%2A> properties report the transparency level of the type at its current trust level, as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="9a871-3953">下表顯示這些屬性的組合：</span><span class="sxs-lookup"><span data-stu-id="9a871-3953">The combinations of these properties are shown in the following table:</span></span>  
  
|<span data-ttu-id="9a871-3954">安全性層級</span><span class="sxs-lookup"><span data-stu-id="9a871-3954">Security level</span></span>|<span data-ttu-id="9a871-3955">IsSecurityCritical</span><span class="sxs-lookup"><span data-stu-id="9a871-3955">IsSecurityCritical</span></span>|<span data-ttu-id="9a871-3956">IsSecuritySafeCritical</span><span class="sxs-lookup"><span data-stu-id="9a871-3956">IsSecuritySafeCritical</span></span>|<span data-ttu-id="9a871-3957">IsSecurityTransparent</span><span class="sxs-lookup"><span data-stu-id="9a871-3957">IsSecurityTransparent</span></span>|  
|--------------------|------------------------|----------------------------|---------------------------|  
|<span data-ttu-id="9a871-3958">Critical</span><span class="sxs-lookup"><span data-stu-id="9a871-3958">Critical</span></span>|`true`|`false`|`false`|  
|<span data-ttu-id="9a871-3959">安全關鍵</span><span class="sxs-lookup"><span data-stu-id="9a871-3959">Safe critical</span></span>|`true`|`true`|`false`|  
|<span data-ttu-id="9a871-3960">透明</span><span class="sxs-lookup"><span data-stu-id="9a871-3960">Transparent</span></span>|`false`|`false`|`true`|  
  
 <span data-ttu-id="9a871-3961">使用這些屬性會比檢查組件及其類型的安全性註釋、檢查目前的信任層級，以及嘗試複製執行階段規則更簡單。</span><span class="sxs-lookup"><span data-stu-id="9a871-3961">Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9a871-3962">部分信任組件，這個屬性的值取決於目前的組件的信任層級。</span><span class="sxs-lookup"><span data-stu-id="9a871-3962">For partial-trust assemblies, the value of this property depends on the current trust level of the assembly.</span></span> <span data-ttu-id="9a871-3963">如果組件載入至部分信任的應用程式網域 （例如，為沙箱化應用程式網域），執行階段會略過組件的安全性註釋。</span><span class="sxs-lookup"><span data-stu-id="9a871-3963">If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), then the runtime ignores the security annotations of the assembly.</span></span> <span data-ttu-id="9a871-3964">組件及其所有類型中視為透明。</span><span class="sxs-lookup"><span data-stu-id="9a871-3964">The assembly and all its types are treated as transparent.</span></span> <span data-ttu-id="9a871-3965">執行階段在該組件會載入至完全信任的應用程式網域 （例如，載入預設應用程式定義域的桌面應用程式） 時，才支付注意部分信任組件的安全性註釋。</span><span class="sxs-lookup"><span data-stu-id="9a871-3965">The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application).</span></span> <span data-ttu-id="9a871-3966">相較之下，信任的組件 （也就是強式名稱組件安裝在全域組件快取中） 會一律載入以完全信任，無論信任層級的應用程式定義域中，因此其目前的信任層級永遠都是完全受信任。</span><span class="sxs-lookup"><span data-stu-id="9a871-3966">By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted.</span></span> <span data-ttu-id="9a871-3967">您可以使用，以判斷目前的信任層級的組件和應用程式定義域<xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType>和<xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType>屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-3967">You can determine the current trust levels of assemblies and application domains by using the <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType> and <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType> properties.</span></span>  
  
 <span data-ttu-id="9a871-3968">如需有關反映和透明度的詳細資訊，請參閱[反映的安全性考量](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)。</span><span class="sxs-lookup"><span data-stu-id="9a871-3968">For more information about reflection and transparency, see [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).</span></span> <span data-ttu-id="9a871-3969">投影片的相關資訊，請參閱[安全性變更](~/docs/framework/security/security-changes.md)。</span><span class="sxs-lookup"><span data-stu-id="9a871-3969">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.IsSecuritySafeCritical" />
        <altmember cref="P:System.Type.IsSecurityTransparent" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md"><span data-ttu-id="9a871-3970">反映的安全性考量</span><span class="sxs-lookup"><span data-stu-id="9a871-3970">Security Considerations for Reflection</span></span></related>
        <related type="Article" href="~/docs/framework/security/security-changes.md"><span data-ttu-id="9a871-3971">.NET Framework 中的安全性變更</span><span class="sxs-lookup"><span data-stu-id="9a871-3971">Security Changes in the .NET Framework</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsSecuritySafeCritical">
      <MemberSignature Language="C#" Value="public virtual bool IsSecuritySafeCritical { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecuritySafeCritical" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsSecuritySafeCritical" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsSecuritySafeCritical As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecuritySafeCritical { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSecuritySafeCritical : bool" Usage="System.Type.IsSecuritySafeCritical" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a871-3972">取得值，這個值表示目前類型在目前信任層級上是否為安全性安全關鍵，也就是說，它是否能執行重要作業並由安全性透明的程式碼存取。</span><span class="sxs-lookup"><span data-stu-id="9a871-3972">Gets a value that indicates whether the current type is security-safe-critical at the current trust level; that is, whether it can perform critical operations and can be accessed by transparent code.</span></span></summary>
        <value><span data-ttu-id="9a871-3973">如果目前類型在目前信任層級上為安全性安全關鍵，則為 <see langword="true" />；如果為安全性關鍵或安全性透明，則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3973"><see langword="true" /> if the current type is security-safe-critical at the current trust level; <see langword="false" /> if it is security-critical or transparent.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-3974"><xref:System.Type.IsSecurityCritical%2A>， <xref:System.Type.IsSecuritySafeCritical%2A>，和<xref:System.Type.IsSecurityTransparent%2A>屬性報告在其目前信任層級，由 common language runtime (CLR) 類型的透明度。</span><span class="sxs-lookup"><span data-stu-id="9a871-3974">The <xref:System.Type.IsSecurityCritical%2A>, <xref:System.Type.IsSecuritySafeCritical%2A>, and <xref:System.Type.IsSecurityTransparent%2A> properties report the transparency level of the type at its current trust level, as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="9a871-3975">下表顯示這些屬性的組合：</span><span class="sxs-lookup"><span data-stu-id="9a871-3975">The combinations of these properties are shown in the following table:</span></span>  
  
|<span data-ttu-id="9a871-3976">安全性層級</span><span class="sxs-lookup"><span data-stu-id="9a871-3976">Security level</span></span>|<span data-ttu-id="9a871-3977">IsSecurityCritical</span><span class="sxs-lookup"><span data-stu-id="9a871-3977">IsSecurityCritical</span></span>|<span data-ttu-id="9a871-3978">IsSecuritySafeCritical</span><span class="sxs-lookup"><span data-stu-id="9a871-3978">IsSecuritySafeCritical</span></span>|<span data-ttu-id="9a871-3979">IsSecurityTransparent</span><span class="sxs-lookup"><span data-stu-id="9a871-3979">IsSecurityTransparent</span></span>|  
|--------------------|------------------------|----------------------------|---------------------------|  
|<span data-ttu-id="9a871-3980">Critical</span><span class="sxs-lookup"><span data-stu-id="9a871-3980">Critical</span></span>|`true`|`false`|`false`|  
|<span data-ttu-id="9a871-3981">安全關鍵</span><span class="sxs-lookup"><span data-stu-id="9a871-3981">Safe critical</span></span>|`true`|`true`|`false`|  
|<span data-ttu-id="9a871-3982">透明</span><span class="sxs-lookup"><span data-stu-id="9a871-3982">Transparent</span></span>|`false`|`false`|`true`|  
  
 <span data-ttu-id="9a871-3983">使用這些屬性會比檢查組件及其類型的安全性註釋、檢查目前的信任層級，以及嘗試複製執行階段規則更簡單。</span><span class="sxs-lookup"><span data-stu-id="9a871-3983">Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9a871-3984">部分信任組件，這個屬性的值取決於目前的組件的信任層級。</span><span class="sxs-lookup"><span data-stu-id="9a871-3984">For partial-trust assemblies, the value of this property depends on the current trust level of the assembly.</span></span> <span data-ttu-id="9a871-3985">如果組件載入至部分信任的應用程式網域 （例如，為沙箱化應用程式網域），執行階段會略過組件的安全性註釋。</span><span class="sxs-lookup"><span data-stu-id="9a871-3985">If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), then the runtime ignores the security annotations of the assembly.</span></span> <span data-ttu-id="9a871-3986">組件及其所有類型中視為透明。</span><span class="sxs-lookup"><span data-stu-id="9a871-3986">The assembly and all its types are treated as transparent.</span></span> <span data-ttu-id="9a871-3987">執行階段在該組件會載入至完全信任的應用程式網域 （例如，載入預設應用程式定義域的桌面應用程式） 時，才支付注意部分信任組件的安全性註釋。</span><span class="sxs-lookup"><span data-stu-id="9a871-3987">The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application).</span></span> <span data-ttu-id="9a871-3988">相較之下，信任的組件 （也就是強式名稱組件安裝在全域組件快取中） 會一律載入以完全信任，無論信任層級的應用程式定義域中，因此其目前的信任層級永遠都是完全受信任。</span><span class="sxs-lookup"><span data-stu-id="9a871-3988">By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted.</span></span> <span data-ttu-id="9a871-3989">您可以使用，以判斷目前的信任層級的組件和應用程式定義域<xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType>和<xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType>屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-3989">You can determine the current trust levels of assemblies and application domains by using the <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType> and <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType> properties.</span></span>  
  
 <span data-ttu-id="9a871-3990">如需有關反映和透明度的詳細資訊，請參閱[反映的安全性考量](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)。</span><span class="sxs-lookup"><span data-stu-id="9a871-3990">For more information about reflection and transparency, see [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).</span></span> <span data-ttu-id="9a871-3991">投影片的相關資訊，請參閱[安全性變更](~/docs/framework/security/security-changes.md)。</span><span class="sxs-lookup"><span data-stu-id="9a871-3991">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.IsSecurityCritical" />
        <altmember cref="P:System.Type.IsSecurityTransparent" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md"><span data-ttu-id="9a871-3992">反映的安全性考量</span><span class="sxs-lookup"><span data-stu-id="9a871-3992">Security Considerations for Reflection</span></span></related>
        <related type="Article" href="~/docs/framework/security/security-changes.md"><span data-ttu-id="9a871-3993">.NET Framework 中的安全性變更</span><span class="sxs-lookup"><span data-stu-id="9a871-3993">Security Changes in the .NET Framework</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsSecurityTransparent">
      <MemberSignature Language="C#" Value="public virtual bool IsSecurityTransparent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecurityTransparent" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsSecurityTransparent" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsSecurityTransparent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecurityTransparent { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSecurityTransparent : bool" Usage="System.Type.IsSecurityTransparent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a871-3994">取得值，這個值表示目前類型在目前信任層級上是否為透明，因此無法執行重要作業。</span><span class="sxs-lookup"><span data-stu-id="9a871-3994">Gets a value that indicates whether the current type is transparent at the current trust level, and therefore cannot perform critical operations.</span></span></summary>
        <value><span data-ttu-id="9a871-3995">如果型別在目前信任層級上為安全性透明，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-3995"><see langword="true" /> if the type is security-transparent at the current trust level; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-3996">如果這個屬性會傳回`true`，則<xref:System.Type.IsSecurityCritical%2A>並<xref:System.Type.IsSecuritySafeCritical%2A>屬性傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="9a871-3996">If this property returns `true`, the <xref:System.Type.IsSecurityCritical%2A> and <xref:System.Type.IsSecuritySafeCritical%2A> properties return `false`.</span></span>  
  
 <span data-ttu-id="9a871-3997"><xref:System.Type.IsSecurityCritical%2A>， <xref:System.Type.IsSecuritySafeCritical%2A>，和<xref:System.Type.IsSecurityTransparent%2A>屬性報告在其目前信任層級，由 common language runtime (CLR) 類型的透明度。</span><span class="sxs-lookup"><span data-stu-id="9a871-3997">The <xref:System.Type.IsSecurityCritical%2A>, <xref:System.Type.IsSecuritySafeCritical%2A>, and <xref:System.Type.IsSecurityTransparent%2A> properties report the transparency level of the type at its current trust level, as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="9a871-3998">使用這些屬性會比檢查組件及其類型的安全性註釋、檢查目前的信任層級，以及嘗試複製執行階段規則更簡單。</span><span class="sxs-lookup"><span data-stu-id="9a871-3998">Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9a871-3999">部分信任組件，這個屬性的值取決於目前的組件的信任層級。</span><span class="sxs-lookup"><span data-stu-id="9a871-3999">For partial-trust assemblies, the value of this property depends on the current trust level of the assembly.</span></span> <span data-ttu-id="9a871-4000">如果組件載入至部分信任的應用程式網域 （例如，為沙箱化應用程式網域），執行階段會略過組件的安全性註釋。</span><span class="sxs-lookup"><span data-stu-id="9a871-4000">If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), then the runtime ignores the security annotations of the assembly.</span></span> <span data-ttu-id="9a871-4001">組件及其所有類型中視為透明。</span><span class="sxs-lookup"><span data-stu-id="9a871-4001">The assembly and all its types are treated as transparent.</span></span> <span data-ttu-id="9a871-4002">執行階段在該組件會載入至完全信任的應用程式網域 （例如，載入預設應用程式定義域的桌面應用程式） 時，才支付注意部分信任組件的安全性註釋。</span><span class="sxs-lookup"><span data-stu-id="9a871-4002">The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application).</span></span> <span data-ttu-id="9a871-4003">相較之下，信任的組件 （也就是強式名稱組件安裝在全域組件快取中） 會一律載入以完全信任，無論信任層級的應用程式定義域中，因此其目前的信任層級永遠都是完全受信任。</span><span class="sxs-lookup"><span data-stu-id="9a871-4003">By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted.</span></span> <span data-ttu-id="9a871-4004">您可以使用，以判斷目前的信任層級的組件和應用程式定義域<xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType>和<xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType>屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-4004">You can determine the current trust levels of assemblies and application domains by using the <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType> and <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType> properties.</span></span>  
  
 <span data-ttu-id="9a871-4005">如需有關反映和透明度的詳細資訊，請參閱[反映的安全性考量](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)。</span><span class="sxs-lookup"><span data-stu-id="9a871-4005">For more information about reflection and transparency, see [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).</span></span> <span data-ttu-id="9a871-4006">投影片的相關資訊，請參閱[安全性變更](~/docs/framework/security/security-changes.md)。</span><span class="sxs-lookup"><span data-stu-id="9a871-4006">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.IsSecurityCritical" />
        <altmember cref="P:System.Type.IsSecuritySafeCritical" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md"><span data-ttu-id="9a871-4007">反映的安全性考量</span><span class="sxs-lookup"><span data-stu-id="9a871-4007">Security Considerations for Reflection</span></span></related>
        <related type="Article" href="~/docs/framework/security/security-changes.md"><span data-ttu-id="9a871-4008">.NET Framework 中的安全性變更</span><span class="sxs-lookup"><span data-stu-id="9a871-4008">Security Changes in the .NET Framework</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsSerializable">
      <MemberSignature Language="C#" Value="public virtual bool IsSerializable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSerializable" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsSerializable" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsSerializable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSerializable { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSerializable : bool" Usage="System.Type.IsSerializable" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsSerializable</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a871-4009">取得值，指出 <see cref="T:System.Type" /> 是否可序列化。</span><span class="sxs-lookup"><span data-stu-id="9a871-4009">Gets a value indicating whether the <see cref="T:System.Type" /> is serializable.</span></span></summary>
        <value><span data-ttu-id="9a871-4010">如果 <see cref="T:System.Type" /> 可序列化，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-4010"><see langword="true" /> if the <see cref="T:System.Type" /> is serializable; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 
<span data-ttu-id="9a871-4011">在.NET Standard 所定義的類型未標示有<xref:System.SerializableAttribute>。</span><span class="sxs-lookup"><span data-stu-id="9a871-4011">Types that are defined in the .NET Standard are not marked with <xref:System.SerializableAttribute>.</span></span> <span data-ttu-id="9a871-4012">相反地，每個.NET 實作會決定是否可序列化類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-4012">Instead, each .NET implementation determines whether a type is serializable.</span></span> <span data-ttu-id="9a871-4013">在執行階段，您可以使用<xref:System.Type.IsSerializable%2A>屬性來判斷該實作是否支援序列化之型別的執行個體。</span><span class="sxs-lookup"><span data-stu-id="9a871-4013">At run time, you can use the <xref:System.Type.IsSerializable%2A> property to determine whether that implementation supports serialization of an instance of the type.</span></span> <span data-ttu-id="9a871-4014">如需詳細資訊和範例，請參閱 <<c0> [ 如何判斷是否可序列化的.NET Standard 物件](~/docs/standard/serialization/how-to-determine-if-netstandard-object-is-serializable.md)。</span><span class="sxs-lookup"><span data-stu-id="9a871-4014">For more information and an example, see [How to determine if a .NET Standard object is serializable](~/docs/standard/serialization/how-to-determine-if-netstandard-object-is-serializable.md).</span></span>
  
 <span data-ttu-id="9a871-4015">如果目前<xref:System.Type>代表建構泛型型別，這個屬性會套用至泛型型別定義從中建構的類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-4015">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="9a871-4016">例如，如果目前<xref:System.Type>代表`MyGenericType<int>`(`MyGenericType(Of Integer)`在 Visual Basic 中)，這個屬性的值取決於`MyGenericType<T>`。</span><span class="sxs-lookup"><span data-stu-id="9a871-4016">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="9a871-4017">如果目前<xref:System.Type>表示的類型參數的泛型類型或泛型方法定義中這個屬性一律傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="9a871-4017">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-4018">下列範例建立的執行個體`MyTestClass`類別，設定 [Serializable] 屬性，並檢查`IsSerializable`屬性`true`或`false`。</span><span class="sxs-lookup"><span data-stu-id="9a871-4018">The following example creates an instance of `MyTestClass` class, sets the [Serializable] attribute, and checks the `IsSerializable` property for `true` or `false`.</span></span>  
  
 [!code-cpp[Type_IsSerializable#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsSerializable/CPP/type_isserializable.cpp#1)]
 [!code-csharp[Type_IsSerializable#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsSerializable/CS/type_isserializable.cs#1)]
 [!code-vb[Type_IsSerializable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsSerializable/VB/type_isserializable.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="T:System.Runtime.Serialization.ISerializable" />
      </Docs>
    </Member>
    <Member MemberName="IsSignatureType">
      <MemberSignature Language="C#" Value="public virtual bool IsSignatureType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSignatureType" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsSignatureType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsSignatureType As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSignatureType { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSignatureType : bool" Usage="System.Type.IsSignatureType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSpecialName">
      <MemberSignature Language="C#" Value="public bool IsSpecialName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSpecialName" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsSpecialName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSpecialName As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSpecialName { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSpecialName : bool" Usage="System.Type.IsSpecialName" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsSpecialName</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a871-4019">取得值，表示類型是否具有需要特殊處理的名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-4019">Gets a value indicating whether the type has a name that requires special handling.</span></span></summary>
        <value><span data-ttu-id="9a871-4020">如果類型具有需要特殊處理的名稱，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-4020"><see langword="true" /> if the type has a name that requires special handling; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-4021">開頭或包含底線字元 (_)、 屬性存取子和運算子多載方法的名稱都是由某些編譯器需要特殊處理的類型的範例。</span><span class="sxs-lookup"><span data-stu-id="9a871-4021">Names that begin with or contain an underscore character (_), property accessors, and operator overloading methods are examples of types that might require special treatment by some compilers.</span></span>  
  
 <span data-ttu-id="9a871-4022">如果目前<xref:System.Type>代表建構泛型型別，這個屬性會套用至泛型型別定義從中建構的類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-4022">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="9a871-4023">例如，如果目前<xref:System.Type>代表`MyGenericType<int>`(`MyGenericType(Of Integer)`在 Visual Basic 中)，這個屬性的值取決於`MyGenericType<T>`。</span><span class="sxs-lookup"><span data-stu-id="9a871-4023">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="9a871-4024">如果目前<xref:System.Type>表示的類型參數的泛型類型或泛型方法定義中這個屬性一律傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="9a871-4024">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsSubclassOf">
      <MemberSignature Language="C#" Value="public virtual bool IsSubclassOf (Type c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSubclassOf(class System.Type c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsSubclassOf(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsSubclassOf (c As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsSubclassOf(Type ^ c);" />
      <MemberSignature Language="F#" Value="abstract member IsSubclassOf : Type -&gt; bool&#xA;override this.IsSubclassOf : Type -&gt; bool" Usage="type.IsSubclassOf c" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.IsSubclassOf(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="9a871-4025">要與目前的類型比較的類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-4025">The type to compare with the current type.</span></span></param>
        <summary><span data-ttu-id="9a871-4026">判斷目前 <see cref="T:System.Type" /> 是否衍生自指定的 <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-4026">Determines whether the current <see cref="T:System.Type" /> derives from the specified <see cref="T:System.Type" />.</span></span></summary>
        <returns><span data-ttu-id="9a871-4027">如果目前 <see langword="true" /> 衍生自 <see langword="Type" />，則為 <paramref name="c" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-4027"><see langword="true" /> if the current <see langword="Type" /> derives from <paramref name="c" />; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="9a871-4028">如果 <see langword="false" /> 和目前 <paramref name="c" /> 相等，這個方法也會傳回 <see langword="Type" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-4028">This method also returns <see langword="false" /> if <paramref name="c" /> and the current <see langword="Type" /> are equal.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-4029">您可以呼叫<xref:System.Type.IsSubclassOf%2A>方法，以判斷下列任一項：</span><span class="sxs-lookup"><span data-stu-id="9a871-4029">You can call the <xref:System.Type.IsSubclassOf%2A> method to determine any of the following:</span></span>  
  
-   <span data-ttu-id="9a871-4030">不論一個類別衍生自另一個。</span><span class="sxs-lookup"><span data-stu-id="9a871-4030">Whether one class derives from another.</span></span>  
  
-   <span data-ttu-id="9a871-4031">型別是否衍生自<xref:System.ValueType>。</span><span class="sxs-lookup"><span data-stu-id="9a871-4031">Whether a type derives from <xref:System.ValueType>.</span></span> <span data-ttu-id="9a871-4032">不過，<xref:System.Type.IsValueType%2A>是更有效率的方式，來判斷類型是否為實值型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-4032">However, the <xref:System.Type.IsValueType%2A> is a more efficient way to determine whether a type is a value type.</span></span>  
  
-   <span data-ttu-id="9a871-4033">型別是否衍生自<xref:System.Enum>。</span><span class="sxs-lookup"><span data-stu-id="9a871-4033">Whether a type derives from <xref:System.Enum>.</span></span> <span data-ttu-id="9a871-4034">不過，<xref:System.Type.IsEnum%2A>方法是更有效率的方式，來判斷類型是否為列舉型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-4034">However, the <xref:System.Type.IsEnum%2A> method is a more efficient way to determine whether a type is an enumeration.</span></span>  
  
-   <span data-ttu-id="9a871-4035">是否類型是委派，也就是它衍生自其中一個是否<xref:System.Delegate>或<xref:System.MulticastDelegate>。</span><span class="sxs-lookup"><span data-stu-id="9a871-4035">Whether a type is a delegate, that is, whether it derives from either <xref:System.Delegate> or <xref:System.MulticastDelegate>.</span></span>  
  
 <span data-ttu-id="9a871-4036"><xref:System.Type.IsSubclassOf%2A>方法無法用來判斷是否介面是衍生自另一個介面，或者類別是否實作的介面。</span><span class="sxs-lookup"><span data-stu-id="9a871-4036">The <xref:System.Type.IsSubclassOf%2A> method cannot be used to determine whether an interface derives from another interface, or whether a class implements an interface.</span></span> <span data-ttu-id="9a871-4037">使用<xref:System.Type.IsAssignableFrom%2A>基於這個目的，如下列範例所示的方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-4037">Use the <xref:System.Type.IsAssignableFrom%2A> method for that purpose, as the following example shows.</span></span>  
  
 [!code-csharp[System.Type.IsSubclassOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.issubclassof/cs/issubclassof_interface1.cs#1)]
 [!code-vb[System.Type.IsSubclassOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.issubclassof/vb/issubclassof_interface1.vb#1)]  
  
 <span data-ttu-id="9a871-4038">如果目前<xref:System.Type>表示的類型參數在泛型類型或泛型方法定義中，它會衍生從其類別條件約束或<xref:System.Object?displayProperty=nameWithType>是否沒有類別條件約束。</span><span class="sxs-lookup"><span data-stu-id="9a871-4038">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, it derives from its class constraint or from <xref:System.Object?displayProperty=nameWithType> if it has no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9a871-4039">介面，搭配使用時，除非<xref:System.Type.IsSubclassOf%2A>是反向<xref:System.Type.IsAssignableFrom%2A>。</span><span class="sxs-lookup"><span data-stu-id="9a871-4039">Except when used with interfaces, <xref:System.Type.IsSubclassOf%2A> is the converse of <xref:System.Type.IsAssignableFrom%2A>.</span></span> <span data-ttu-id="9a871-4040">也就是說，如果`t1.IsSubclassOf(t2)`已`true`，然後`t2.IsAssignableFrom(t1)`也是`true`。</span><span class="sxs-lookup"><span data-stu-id="9a871-4040">That is, if `t1.IsSubclassOf(t2)` is `true`, then `t2.IsAssignableFrom(t1)` is also `true`.</span></span>  
  
 <span data-ttu-id="9a871-4041">在衍生類別可以覆寫此方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-4041">This method can be overridden by a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-4042">下列範例會建立名為類別`Class1`和衍生的類別，名為`DerivedC1`。</span><span class="sxs-lookup"><span data-stu-id="9a871-4042">The following example creates a class named `Class1` and a derived class named `DerivedC1`.</span></span> <span data-ttu-id="9a871-4043">它會呼叫<xref:System.Type.IsSubclassOf%2A>方法，以顯示`DerivedC1`是子類別的`Class1`。</span><span class="sxs-lookup"><span data-stu-id="9a871-4043">It calls the <xref:System.Type.IsSubclassOf%2A> method to show that `DerivedC1` is a subclass of `Class1`.</span></span>  
  
 [!code-csharp[TestIsSubclassOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/TestIsSubclassOf/CS/testissubclassof.cs#1)]
 [!code-vb[TestIsSubclassOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TestIsSubclassOf/VB/testissubclassof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9a871-4044"><paramref name="c" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-4044"><paramref name="c" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="P:System.Type.BaseType" />
      </Docs>
    </Member>
    <Member MemberName="IsSZArray">
      <MemberSignature Language="C#" Value="public virtual bool IsSZArray { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSZArray" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsSZArray" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsSZArray As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSZArray { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSZArray : bool" Usage="System.Type.IsSZArray" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTypeDefinition">
      <MemberSignature Language="C#" Value="public virtual bool IsTypeDefinition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTypeDefinition" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsTypeDefinition" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsTypeDefinition As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsTypeDefinition { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsTypeDefinition : bool" Usage="System.Type.IsTypeDefinition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUnicodeClass">
      <MemberSignature Language="C#" Value="public bool IsUnicodeClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsUnicodeClass" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsUnicodeClass" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsUnicodeClass As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsUnicodeClass { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsUnicodeClass : bool" Usage="System.Type.IsUnicodeClass" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsUnicodeClass</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a871-4045">取得值，指出是否為 <see langword="UnicodeClass" /> 選取字串格式屬性 <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-4045">Gets a value indicating whether the string format attribute <see langword="UnicodeClass" /> is selected for the <see cref="T:System.Type" />.</span></span></summary>
        <value><span data-ttu-id="9a871-4046">如果為 <see langword="true" /> 選取字串格式屬性 <see langword="UnicodeClass" />，則為 <see cref="T:System.Type" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-4046"><see langword="true" /> if the string format attribute <see langword="UnicodeClass" /> is selected for the <see cref="T:System.Type" />; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-4047"><xref:System.Reflection.TypeAttributes.StringFormatMask>用來選取字串格式屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-4047">The <xref:System.Reflection.TypeAttributes.StringFormatMask> is used to select the string format attributes.</span></span> <span data-ttu-id="9a871-4048">字串格式屬性增強互通性，藉由定義應該如何解譯字串。</span><span class="sxs-lookup"><span data-stu-id="9a871-4048">The string format attributes enhance interoperability by defining how strings should be interpreted.</span></span>  
  
 <span data-ttu-id="9a871-4049">如果目前<xref:System.Type>代表建構泛型型別，這個屬性會套用至泛型型別定義從中建構的類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-4049">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="9a871-4050">例如，如果目前<xref:System.Type>代表`MyGenericType<int>`(`MyGenericType(Of Integer)`在 Visual Basic 中)，這個屬性的值取決於`MyGenericType<T>`。</span><span class="sxs-lookup"><span data-stu-id="9a871-4050">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="9a871-4051">如果目前<xref:System.Type>表示的類型參數的泛型類型或泛型方法定義中這個屬性一律傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="9a871-4051">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="P:System.Type.IsAnsiClass" />
        <altmember cref="P:System.Type.IsAutoClass" />
      </Docs>
    </Member>
    <Member MemberName="IsValueType">
      <MemberSignature Language="C#" Value="public bool IsValueType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsValueType" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsValueType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsValueType As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsValueType { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsValueType : bool" Usage="System.Type.IsValueType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsValueType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a871-4052">取得值，指出 <see cref="T:System.Type" /> 是否為實值類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-4052">Gets a value indicating whether the <see cref="T:System.Type" /> is a value type.</span></span></summary>
        <value><span data-ttu-id="9a871-4053">如果 <see langword="true" /> 是實值類型，則為 <see cref="T:System.Type" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-4053"><see langword="true" /> if the <see cref="T:System.Type" /> is a value type; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-4054">實值型別是以位元; 序列的表示的型別實值型別不是類別或介面。</span><span class="sxs-lookup"><span data-stu-id="9a871-4054">Value types are types that are represented as sequences of bits; value types are not classes or interfaces.</span></span> <span data-ttu-id="9a871-4055">實值型別稱為 「 結構 」 中的某些程式設計語言。</span><span class="sxs-lookup"><span data-stu-id="9a871-4055">Value types are referred to as "structs" in some programming languages.</span></span> <span data-ttu-id="9a871-4056">列舉是特殊案例的實值型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-4056">Enums are a special case of value types.</span></span>  
  
 <span data-ttu-id="9a871-4057">這個屬性會傳回`false`for<xref:System.ValueType>類別，因為<xref:System.ValueType>不是實值型別本身。</span><span class="sxs-lookup"><span data-stu-id="9a871-4057">This property returns `false` for the <xref:System.ValueType> class, because <xref:System.ValueType> is not a value type itself.</span></span> <span data-ttu-id="9a871-4058">它是所有實值類型，基底類別，因此任何實值類型可以指派給它。</span><span class="sxs-lookup"><span data-stu-id="9a871-4058">It is the base class for all value types, and therefore any value type can be assigned to it.</span></span> <span data-ttu-id="9a871-4059">這不是可能如果<xref:System.ValueType>本身是實值型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-4059">This would not be possible if <xref:System.ValueType> itself was a value type.</span></span> <span data-ttu-id="9a871-4060">指派給類型的欄位時，會進行 boxed 處理實值型別<xref:System.ValueType>。</span><span class="sxs-lookup"><span data-stu-id="9a871-4060">Value types are boxed when they are assigned to a field of type <xref:System.ValueType>.</span></span>  
  
 <span data-ttu-id="9a871-4061">這個屬性會傳回`true`列舉型別，但不是適合用於<xref:System.Enum>型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-4061">This property returns `true` for enumerations, but not for the <xref:System.Enum> type itself.</span></span> <span data-ttu-id="9a871-4062">如需示範此行為的範例，請參閱<xref:System.Type.IsEnum%2A>。</span><span class="sxs-lookup"><span data-stu-id="9a871-4062">For an example that demonstrates this behavior, see <xref:System.Type.IsEnum%2A>.</span></span>  
  
 <span data-ttu-id="9a871-4063">這個屬性是唯讀的。</span><span class="sxs-lookup"><span data-stu-id="9a871-4063">This property is read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-4064">下列範例會建立類型的變數`MyEnum`，檢查是否有`IsValueType`屬性，並顯示結果。</span><span class="sxs-lookup"><span data-stu-id="9a871-4064">The following example creates a variable of type `MyEnum`, checks for the `IsValueType` property, and displays the result.</span></span>  
  
 [!code-cpp[Type_IsValueType#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsValueType/CPP/type_isvaluetype.cpp#1)]
 [!code-csharp[Type_IsValueType#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsValueType/CS/type_isvaluetype.cs#1)]
 [!code-vb[Type_IsValueType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsValueType/VB/type_isvaluetype.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="P:System.Type.IsClass" />
        <altmember cref="P:System.Type.IsInterface" />
        <altmember cref="T:System.ValueType" />
        <altmember cref="M:System.Type.IsValueTypeImpl" />
      </Docs>
    </Member>
    <Member MemberName="IsValueTypeImpl">
      <MemberSignature Language="C#" Value="protected virtual bool IsValueTypeImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsValueTypeImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsValueTypeImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function IsValueTypeImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool IsValueTypeImpl();" />
      <MemberSignature Language="F#" Value="abstract member IsValueTypeImpl : unit -&gt; bool&#xA;override this.IsValueTypeImpl : unit -&gt; bool" Usage="type.IsValueTypeImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9a871-4065">實作 <see cref="P:System.Type.IsValueType" /> 屬性並判斷 <see cref="T:System.Type" /> 是否為實值類型；也就是說，不是類別或介面。</span><span class="sxs-lookup"><span data-stu-id="9a871-4065">Implements the <see cref="P:System.Type.IsValueType" /> property and determines whether the <see cref="T:System.Type" /> is a value type; that is, not a class or an interface.</span></span></summary>
        <returns><span data-ttu-id="9a871-4066">如果 <see langword="true" /> 是實值類型，則為 <see cref="T:System.Type" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-4066"><see langword="true" /> if the <see cref="T:System.Type" /> is a value type; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-4067">這個方法可啟用替代的型別系統的實作。</span><span class="sxs-lookup"><span data-stu-id="9a871-4067">This method is provided to enable the implementation of alternate type systems.</span></span> <span data-ttu-id="9a871-4068">它不是常用的應用程式程式碼中。</span><span class="sxs-lookup"><span data-stu-id="9a871-4068">It is not generally used in application code.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="P:System.Type.IsClass" />
        <altmember cref="P:System.Type.IsInterface" />
        <altmember cref="T:System.ValueType" />
        <altmember cref="P:System.Type.IsValueType" />
      </Docs>
    </Member>
    <Member MemberName="IsVariableBoundArray">
      <MemberSignature Language="C#" Value="public virtual bool IsVariableBoundArray { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsVariableBoundArray" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsVariableBoundArray" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsVariableBoundArray As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsVariableBoundArray { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsVariableBoundArray : bool" Usage="System.Type.IsVariableBoundArray" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsVisible" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsVisible" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsVisible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsVisible { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsVisible : bool" Usage="System.Type.IsVisible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a871-4069">取得一個值，表示位於組件之外的程式碼是否能存取 <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-4069">Gets a value indicating whether the <see cref="T:System.Type" /> can be accessed by code outside the assembly.</span></span></summary>
        <value><span data-ttu-id="9a871-4070">如果目前 <see langword="true" /> 是公用類型或公用巢狀類型 (所有封入類型均為公用)，則為 <see cref="T:System.Type" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-4070"><see langword="true" /> if the current <see cref="T:System.Type" /> is a public type or a public nested type such that all the enclosing types are public; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-4071">使用這個屬性來判斷類型是否為元件組件的公用介面的一部分。</span><span class="sxs-lookup"><span data-stu-id="9a871-4071">Use this property to determine whether a type is part of the public interface of a component assembly.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-4072">下列程式碼範例會測試兩個類別，只是其中之一就是組件外部可見。</span><span class="sxs-lookup"><span data-stu-id="9a871-4072">The following code example tests two classes, only one of which is visible outside the assembly.</span></span>  
  
 [!code-cpp[System.Type.IsVisible#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.IsVisible/CPP/source.cpp#1)]
 [!code-csharp[System.Type.IsVisible#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.IsVisible/CS/source.cs#1)]
 [!code-vb[System.Type.IsVisible#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.IsVisible/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="MakeArrayType">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9a871-4073">傳回代表目前類型之陣列的 <see cref="T:System.Type" /> 物件。</span><span class="sxs-lookup"><span data-stu-id="9a871-4073">Returns a <see cref="T:System.Type" /> object that represents an array of the current type.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MakeArrayType">
      <MemberSignature Language="C#" Value="public virtual Type MakeArrayType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type MakeArrayType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.MakeArrayType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MakeArrayType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ MakeArrayType();" />
      <MemberSignature Language="F#" Value="abstract member MakeArrayType : unit -&gt; Type&#xA;override this.MakeArrayType : unit -&gt; Type" Usage="type.MakeArrayType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9a871-4074">傳回 <see cref="T:System.Type" /> 物件，代表由目前類型組成的一維陣列，其下限為零。</span><span class="sxs-lookup"><span data-stu-id="9a871-4074">Returns a <see cref="T:System.Type" /> object representing a one-dimensional array of the current type, with a lower bound of zero.</span></span></summary>
        <returns><span data-ttu-id="9a871-4075"><see cref="T:System.Type" /> 物件，代表由目前類型組成的一維陣列，其下限為零。</span><span class="sxs-lookup"><span data-stu-id="9a871-4075">A <see cref="T:System.Type" /> object representing a one-dimensional array of the current type, with a lower bound of zero.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-4076"><xref:System.Type.MakeArrayType%2A>方法可用來產生在執行階段計算其項目類型的陣列類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-4076">The <xref:System.Type.MakeArrayType%2A> method provides a way to generate array types whose element types are computed at run time.</span></span>  
  
 <span data-ttu-id="9a871-4077">**請注意**common language runtime 會區分向量 （也就是一維陣列，會一律以零為起始） 和多維度陣列。</span><span class="sxs-lookup"><span data-stu-id="9a871-4077">**Note** The common language runtime makes a distinction between vectors (that is, one-dimensional arrays that are always zero-based) and multidimensional arrays.</span></span> <span data-ttu-id="9a871-4078">向量，其一律只能有一個維度，不是剛好有只有一個維度的多維陣列相同。</span><span class="sxs-lookup"><span data-stu-id="9a871-4078">A vector, which always has only one dimension, is not the same as a multidimensional array that happens to have only one dimension.</span></span> <span data-ttu-id="9a871-4079">這個方法多載可以只用來建立的向量類型，它是唯一的方式建立的向量型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-4079">This method overload can only be used to create vector types, and it is the only way to create a vector type.</span></span> <span data-ttu-id="9a871-4080">使用<xref:System.Type.MakeArrayType%28System.Int32%29>方法多載來建立多維陣列型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-4080">Use the <xref:System.Type.MakeArrayType%28System.Int32%29> method overload to create multidimensional array types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-4081">下列程式碼範例會建立陣列， `ref` (`ByRef` Visual Basic 中)，和指標類型`Test`類別。</span><span class="sxs-lookup"><span data-stu-id="9a871-4081">The following code example creates array, `ref` (`ByRef` in Visual Basic), and pointer types for the `Test` class.</span></span>  
  
 [!code-cpp[System.Type.MakeXxxType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.MakeXxxType/CPP/source.cpp#1)]
 [!code-csharp[System.Type.MakeXxxType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.MakeXxxType/CS/source.cs#1)]
 [!code-vb[System.Type.MakeXxxType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.MakeXxxType/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="9a871-4082">基底類別不支援叫用的方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-4082">The invoked method is not supported in the base class.</span></span> <span data-ttu-id="9a871-4083">衍生類別必須提供實作。</span><span class="sxs-lookup"><span data-stu-id="9a871-4083">Derived classes must provide an implementation.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="9a871-4084">目前的類型為 <see cref="T:System.TypedReference" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-4084">The current type is <see cref="T:System.TypedReference" />.</span></span>  
  
<span data-ttu-id="9a871-4085">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-4085">-or-</span></span> 
<span data-ttu-id="9a871-4086">目前的類型為 <see langword="ByRef" /> 類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-4086">The current type is a <see langword="ByRef" /> type.</span></span> <span data-ttu-id="9a871-4087">亦即，<see cref="P:System.Type.IsByRef" /> 會傳回 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-4087">That is, <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span></span></exception>
        <altmember cref="M:System.Type.MakeByRefType" />
        <altmember cref="M:System.Type.MakePointerType" />
      </Docs>
    </Member>
    <Member MemberName="MakeArrayType">
      <MemberSignature Language="C#" Value="public virtual Type MakeArrayType (int rank);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type MakeArrayType(int32 rank) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.MakeArrayType(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MakeArrayType (rank As Integer) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ MakeArrayType(int rank);" />
      <MemberSignature Language="F#" Value="abstract member MakeArrayType : int -&gt; Type&#xA;override this.MakeArrayType : int -&gt; Type" Usage="type.MakeArrayType rank" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rank" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="rank"><span data-ttu-id="9a871-4088">陣列的維度數目。</span><span class="sxs-lookup"><span data-stu-id="9a871-4088">The number of dimensions for the array.</span></span> <span data-ttu-id="9a871-4089">這個數字必須小於或等於 32。</span><span class="sxs-lookup"><span data-stu-id="9a871-4089">This number must be less than or equal to 32.</span></span></param>
        <summary><span data-ttu-id="9a871-4090">傳回 <see cref="T:System.Type" /> 物件，代表由目前類型組成且為指定維度個數的陣列。</span><span class="sxs-lookup"><span data-stu-id="9a871-4090">Returns a <see cref="T:System.Type" /> object representing an array of the current type, with the specified number of dimensions.</span></span></summary>
        <returns><span data-ttu-id="9a871-4091">物件，代表由目前類型組成且為指定維度個數的陣列。</span><span class="sxs-lookup"><span data-stu-id="9a871-4091">An object representing an array of the current type, with the specified number of dimensions.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-4092"><xref:System.Type.MakeArrayType%2A>方法可用來產生在執行階段計算其項目類型的陣列類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-4092">The <xref:System.Type.MakeArrayType%2A> method provides a way to generate array types whose element types are computed at run time.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9a871-4093">Common language runtime 會區分向量 （也就是一維陣列，會一律以零為起始） 和多維度陣列。</span><span class="sxs-lookup"><span data-stu-id="9a871-4093">The common language runtime makes a distinction between vectors (that is, one-dimensional arrays that are always zero-based) and multidimensional arrays.</span></span> <span data-ttu-id="9a871-4094">向量，其一律只能有一個維度，不是剛好有只有一個維度的多維陣列相同。</span><span class="sxs-lookup"><span data-stu-id="9a871-4094">A vector, which always has only one dimension, is not the same as a multidimensional array that happens to have only one dimension.</span></span> <span data-ttu-id="9a871-4095">您無法使用這個方法多載來建立的向量型別;如果`rank`為 1，此方法多載會傳回剛好有一個維度的多維陣列類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-4095">You cannot use this method overload to create a vector type; if `rank` is 1, this method overload returns a multidimensional array type that happens to have one dimension.</span></span> <span data-ttu-id="9a871-4096">使用<xref:System.Type.MakeArrayType>方法多載來建立的向量類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-4096">Use the <xref:System.Type.MakeArrayType> method overload to create vector types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-4097">下列程式碼範例會建立陣列， `ref` (`ByRef` Visual Basic 中)，和指標類型`Test`類別。</span><span class="sxs-lookup"><span data-stu-id="9a871-4097">The following code example creates array, `ref` (`ByRef` in Visual Basic), and pointer types for the `Test` class.</span></span>  
  
 [!code-cpp[System.Type.MakeXxxType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.MakeXxxType/CPP/source.cpp#1)]
 [!code-csharp[System.Type.MakeXxxType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.MakeXxxType/CS/source.cs#1)]
 [!code-vb[System.Type.MakeXxxType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.MakeXxxType/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IndexOutOfRangeException"><span data-ttu-id="9a871-4098"><paramref name="rank" /> 無效。</span><span class="sxs-lookup"><span data-stu-id="9a871-4098"><paramref name="rank" /> is invalid.</span></span> <span data-ttu-id="9a871-4099">例如，0 或負數。</span><span class="sxs-lookup"><span data-stu-id="9a871-4099">For example, 0 or negative.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="9a871-4100">基底類別不支援叫用的方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-4100">The invoked method is not supported in the base class.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="9a871-4101">目前的類型為 <see cref="T:System.TypedReference" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-4101">The current type is <see cref="T:System.TypedReference" />.</span></span>  
  
<span data-ttu-id="9a871-4102">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-4102">-or-</span></span> 
<span data-ttu-id="9a871-4103">目前的類型為 <see langword="ByRef" /> 類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-4103">The current type is a <see langword="ByRef" /> type.</span></span> <span data-ttu-id="9a871-4104">亦即，<see cref="P:System.Type.IsByRef" /> 傳回 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-4104">That is, <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span></span>  
  
<span data-ttu-id="9a871-4105">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-4105">-or-</span></span> 
 <span data-ttu-id="9a871-4106"><paramref name="rank" /> 大於 32。</span><span class="sxs-lookup"><span data-stu-id="9a871-4106"><paramref name="rank" /> is greater than 32.</span></span></exception>
        <altmember cref="M:System.Type.MakeByRefType" />
        <altmember cref="M:System.Type.MakePointerType" />
      </Docs>
    </Member>
    <Member MemberName="MakeByRefType">
      <MemberSignature Language="C#" Value="public virtual Type MakeByRefType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type MakeByRefType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.MakeByRefType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MakeByRefType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ MakeByRefType();" />
      <MemberSignature Language="F#" Value="abstract member MakeByRefType : unit -&gt; Type&#xA;override this.MakeByRefType : unit -&gt; Type" Usage="type.MakeByRefType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9a871-4107">傳回 <see cref="T:System.Type" /> 物件，當做 <see langword="ref" /> (Visual Basic 中的 <see langword="ByRef" />) 參數傳遞時，代表目前的類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-4107">Returns a <see cref="T:System.Type" /> object that represents the current type when passed as a <see langword="ref" /> parameter (<see langword="ByRef" /> parameter in Visual Basic).</span></span></summary>
        <returns><span data-ttu-id="9a871-4108"><see cref="T:System.Type" /> 物件，當做 <see langword="ref" /> 參數 (在 Visual Basic 中為 <see langword="ByRef" /> 參數) 傳遞時，代表目前的類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-4108">A <see cref="T:System.Type" /> object that represents the current type when passed as a <see langword="ref" /> parameter (<see langword="ByRef" /> parameter in Visual Basic).</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-4109"><xref:System.Type.MakeByRefType%2A>方法可用來產生`ref`型別 (`ByRef` Visual Basic 中) 的參數清單。</span><span class="sxs-lookup"><span data-stu-id="9a871-4109">The <xref:System.Type.MakeByRefType%2A> method provides a way to generate `ref` types (`ByRef` in Visual Basic) for parameter lists.</span></span>  
  
 <span data-ttu-id="9a871-4110">使用語法的 Microsoft intermediate language (MSIL)，如果目前<xref:System.Type>物件代表<xref:System.Int32>，這個方法會傳回<xref:System.Type>物件，表示`Int32&`。</span><span class="sxs-lookup"><span data-stu-id="9a871-4110">Using the syntax of Microsoft intermediate language (MSIL), if the current <xref:System.Type> object represents <xref:System.Int32>, this method returns a <xref:System.Type> object representing `Int32&`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-4111">下列程式碼範例會建立陣列， `ref` (`ByRef` Visual Basic 中)，和指標類型`Test`類別。</span><span class="sxs-lookup"><span data-stu-id="9a871-4111">The following code example creates array, `ref` (`ByRef` in Visual Basic), and pointer types for the `Test` class.</span></span>  
  
 [!code-cpp[System.Type.MakeXxxType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.MakeXxxType/CPP/source.cpp#1)]
 [!code-csharp[System.Type.MakeXxxType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.MakeXxxType/CS/source.cs#1)]
 [!code-vb[System.Type.MakeXxxType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.MakeXxxType/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="9a871-4112">基底類別不支援叫用的方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-4112">The invoked method is not supported in the base class.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="9a871-4113">目前的類型為 <see cref="T:System.TypedReference" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-4113">The current type is <see cref="T:System.TypedReference" />.</span></span>  
  
<span data-ttu-id="9a871-4114">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-4114">-or-</span></span> 
<span data-ttu-id="9a871-4115">目前的類型為 <see langword="ByRef" /> 類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-4115">The current type is a <see langword="ByRef" /> type.</span></span> <span data-ttu-id="9a871-4116">亦即，<see cref="P:System.Type.IsByRef" /> 會傳回 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-4116">That is, <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span></span></exception>
        <altmember cref="M:System.Type.MakeArrayType" />
        <altmember cref="M:System.Type.MakePointerType" />
      </Docs>
    </Member>
    <Member MemberName="MakeGenericMethodParameter">
      <MemberSignature Language="C#" Value="public static Type MakeGenericMethodParameter (int position);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type MakeGenericMethodParameter(int32 position) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.MakeGenericMethodParameter(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MakeGenericMethodParameter (position As Integer) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ MakeGenericMethodParameter(int position);" />
      <MemberSignature Language="F#" Value="static member MakeGenericMethodParameter : int -&gt; Type" Usage="System.Type.MakeGenericMethodParameter position" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="position">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeGenericType">
      <MemberSignature Language="C#" Value="public virtual Type MakeGenericType (params Type[] typeArguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type MakeGenericType(class System.Type[] typeArguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.MakeGenericType(System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MakeGenericType (ParamArray typeArguments As Type()) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ MakeGenericType(... cli::array &lt;Type ^&gt; ^ typeArguments);" />
      <MemberSignature Language="F#" Value="abstract member MakeGenericType : Type[] -&gt; Type&#xA;override this.MakeGenericType : Type[] -&gt; Type" Usage="type.MakeGenericType typeArguments" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeArguments" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="typeArguments"><span data-ttu-id="9a871-4117">由類型組成的陣列，用來取代目前泛型類型的型別參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-4117">An array of types to be substituted for the type parameters of the current generic type.</span></span></param>
        <summary><span data-ttu-id="9a871-4118">用類型陣列的項目取代目前泛型類型定義的型別參數，並傳回代表所得結果建構類型的 <see cref="T:System.Type" /> 物件。</span><span class="sxs-lookup"><span data-stu-id="9a871-4118">Substitutes the elements of an array of types for the type parameters of the current generic type definition and returns a <see cref="T:System.Type" /> object representing the resulting constructed type.</span></span></summary>
        <returns><span data-ttu-id="9a871-4119"><see cref="T:System.Type" />，表示用 <paramref name="typeArguments" /> 的項目取代目前泛型類型之型別參數所得到的建構類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-4119">A <see cref="T:System.Type" /> representing the constructed type formed by substituting the elements of <paramref name="typeArguments" /> for the type parameters of the current generic type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-4120"><xref:System.Type.MakeGenericType%2A>方法可讓您撰寫程式碼，將特定類型指派給類型參數的泛型類型定義，因此建立<xref:System.Type>代表特定的建構的類型的物件。</span><span class="sxs-lookup"><span data-stu-id="9a871-4120">The <xref:System.Type.MakeGenericType%2A> method allows you to write code that assigns specific types to the type parameters of a generic type definition, thus creating a <xref:System.Type> object that represents a particular constructed type.</span></span> <span data-ttu-id="9a871-4121">您可以使用這個<xref:System.Type>物件來建立建構類型的執行階段執行個體。</span><span class="sxs-lookup"><span data-stu-id="9a871-4121">You can use this <xref:System.Type> object to create run-time instances of the constructed type.</span></span>  
  
 <span data-ttu-id="9a871-4122">類型建構<xref:System.Type.MakeGenericType%2A>可以開啟，也就是某些其類型引數可以是封閉式泛型方法或類型的型別參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-4122">Types constructed with <xref:System.Type.MakeGenericType%2A> can be open, that is, some of their type arguments can be type parameters of enclosing generic methods or types.</span></span> <span data-ttu-id="9a871-4123">當發出動態組件時，您可以使用這種開放式建構的類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-4123">You might use such open constructed types when you emit dynamic assemblies.</span></span> <span data-ttu-id="9a871-4124">例如，假設類別`Base`和`Derived`下列程式碼。</span><span class="sxs-lookup"><span data-stu-id="9a871-4124">For example, consider the classes `Base` and `Derived` in the following code.</span></span>  
  
 [!code-cpp[System.Type.MakeGenericType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.type.makegenerictype/cpp/remarks.cpp#1)]
 [!code-csharp[System.Type.MakeGenericType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.makegenerictype/cs/remarks.cs#1)]
 [!code-vb[System.Type.MakeGenericType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.makegenerictype/vb/remarks.vb#1)]  
  
 <span data-ttu-id="9a871-4125">若要產生`Derived`在動態組件，就必須建構其基底類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-4125">To generate `Derived` in a dynamic assembly, it is necessary to construct its base type.</span></span> <span data-ttu-id="9a871-4126">若要這樣做，請呼叫<xref:System.Type.MakeGenericType%2A>方法<xref:System.Type>物件，表示類別`Base`，使用泛型型別引數<xref:System.Int32>型別參數`V`從`Derived`。</span><span class="sxs-lookup"><span data-stu-id="9a871-4126">To do this, call the <xref:System.Type.MakeGenericType%2A> method on a <xref:System.Type> object representing the class `Base`, using the generic type arguments <xref:System.Int32> and the type parameter `V` from `Derived`.</span></span> <span data-ttu-id="9a871-4127">因為型別和泛型型別參數都表示所<xref:System.Type>物件，包含這兩個陣列可以傳遞至<xref:System.Type.MakeGenericType%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-4127">Because types and generic type parameters are both represented by <xref:System.Type> objects, an array containing both can be passed to the <xref:System.Type.MakeGenericType%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9a871-4128">建構的類型，例如`Base<int, V>`有用時，發出程式碼，但您不能呼叫<xref:System.Type.MakeGenericType%2A>方法，這個型別上的因為它不是泛型類型定義。</span><span class="sxs-lookup"><span data-stu-id="9a871-4128">A constructed type such as `Base<int, V>` is useful when emitting code, but you cannot call the <xref:System.Type.MakeGenericType%2A> method on this type because it is not a generic type definition.</span></span> <span data-ttu-id="9a871-4129">若要建立封閉式的建構型別可以具現化，請先呼叫<xref:System.Type.GetGenericTypeDefinition%2A>方法來取得<xref:System.Type>物件，代表泛型類型定義，然後呼叫<xref:System.Type.MakeGenericType%2A>使用所需的類型引數。</span><span class="sxs-lookup"><span data-stu-id="9a871-4129">To create a closed constructed type that can be instantiated, first call the <xref:System.Type.GetGenericTypeDefinition%2A> method to get a <xref:System.Type> object representing the generic type definition and then call <xref:System.Type.MakeGenericType%2A> with the desired type arguments.</span></span>  
  
 <span data-ttu-id="9a871-4130"><xref:System.Type>所傳回的物件<xref:System.Type.MakeGenericType%2A>等同於<xref:System.Type>藉由呼叫取得<xref:System.Object.GetType%2A>產生的方法建構的型別，或<xref:System.Object.GetType%2A>建構建立從相同泛型類型的任何的方法。使用相同的型別引數的型別定義。</span><span class="sxs-lookup"><span data-stu-id="9a871-4130">The <xref:System.Type> object returned by <xref:System.Type.MakeGenericType%2A> is the same as the <xref:System.Type> obtained by calling the <xref:System.Object.GetType%2A> method of the resulting constructed type, or the <xref:System.Object.GetType%2A> method of any constructed type that was created from the same generic type definition using the same type arguments.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9a871-4131">泛型型別的陣列本身就不是泛型型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-4131">An array of generic types is not itself a generic type.</span></span> <span data-ttu-id="9a871-4132">您不能呼叫<xref:System.Type.MakeGenericType%2A>陣列上輸入，例如`C<T>[]`(`Dim ac() As C(Of T)` Visual Basic 中)。</span><span class="sxs-lookup"><span data-stu-id="9a871-4132">You cannot call <xref:System.Type.MakeGenericType%2A> on an array type such as `C<T>[]` (`Dim ac() As C(Of T)` in Visual Basic).</span></span> <span data-ttu-id="9a871-4133">若要建構的封閉式泛型型別，從`C<T>[]`，呼叫<xref:System.Type.GetElementType%2A>取得泛型型別定義`C<T>`; 呼叫<xref:System.Type.MakeGenericType%2A>泛型型別定義，來建立建構的類型，最後呼叫<xref:System.Type.MakeArrayType%2A>方法若要建立此陣列型別建構的型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-4133">To construct a closed generic type from `C<T>[]`, call <xref:System.Type.GetElementType%2A> to obtain the generic type definition `C<T>`; call <xref:System.Type.MakeGenericType%2A> on the generic type definition to create the constructed type; and finally call the <xref:System.Type.MakeArrayType%2A> method on the constructed type to create the array type.</span></span> <span data-ttu-id="9a871-4134">這也是指標類型，則為 true 並`ref`型別 (`ByRef` Visual Basic 中)。</span><span class="sxs-lookup"><span data-stu-id="9a871-4134">The same is true of pointer types and `ref` types (`ByRef` in Visual Basic).</span></span>  
  
 <span data-ttu-id="9a871-4135">如需泛型反映中所使用之規範的恆成立條件清單，請參閱 <xref:System.Type.IsGenericType%2A> 屬性備註。</span><span class="sxs-lookup"><span data-stu-id="9a871-4135">For a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property remarks.</span></span>  
  
## <a name="nested-types"></a><span data-ttu-id="9a871-4136">巢狀類型</span><span class="sxs-lookup"><span data-stu-id="9a871-4136">Nested Types</span></span>  
 <span data-ttu-id="9a871-4137">如果泛型類型定義使用 C#、 c + + 或 Visual Basic，其巢狀的類型是所有泛用的。</span><span class="sxs-lookup"><span data-stu-id="9a871-4137">If a generic type is defined using C#, C++, or Visual Basic, then its nested types are all generic.</span></span> <span data-ttu-id="9a871-4138">這是 true，即使巢狀型別有自己的任何型別參數，因為所有的三種語言包含封入型別的型別參數清單中的巢狀型別的型別參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-4138">This is true even if the nested types have no type parameters of their own, because all three languages include the type parameters of enclosing types in the type parameter lists of nested types.</span></span> <span data-ttu-id="9a871-4139">請考慮下列類別：</span><span class="sxs-lookup"><span data-stu-id="9a871-4139">Consider the following classes:</span></span>  
  
 [!code-cpp[System.Type.MakeGenericType#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.type.makegenerictype/cpp/remarks.cpp#2)]
 [!code-csharp[System.Type.MakeGenericType#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.makegenerictype/cs/remarks.cs#2)]
 [!code-vb[System.Type.MakeGenericType#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.makegenerictype/vb/remarks.vb#2)]  
  
 <span data-ttu-id="9a871-4140">巢狀類別的型別參數清單`Inner`有兩個類型參數，`T`和`U`，其中第一個是其封入類別的型別參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-4140">The type parameter list of the nested class `Inner` has two type parameters, `T` and `U`, the first of which is the type parameter of its enclosing class.</span></span> <span data-ttu-id="9a871-4141">同樣地，巢狀類別的型別參數清單`Innermost1`有三個類型參數， `T`， `U`，以及`V`，使用`T`和`U`來自其封入類別。</span><span class="sxs-lookup"><span data-stu-id="9a871-4141">Similarly, the type parameter list of the nested class `Innermost1` has three type parameters, `T`, `U`, and `V`, with `T` and `U` coming from its enclosing classes.</span></span> <span data-ttu-id="9a871-4142">巢狀的類別`Innermost2`有兩個類型參數，`T`和`U`，這是來自其封入類別。</span><span class="sxs-lookup"><span data-stu-id="9a871-4142">The nested class `Innermost2` has two type parameters, `T` and `U`, which come from its enclosing classes.</span></span>  
  
 <span data-ttu-id="9a871-4143">如果封入類型的參數清單會有一個以上的型別參數，在順序中的所有型別參數會包含巢狀類型的類型參數清單中。</span><span class="sxs-lookup"><span data-stu-id="9a871-4143">If the parameter list of the enclosing type has more than one type parameter, all the type parameters in order are included in the type parameter list of the nested type.</span></span>  
  
 <span data-ttu-id="9a871-4144">若要建構泛型型別從巢狀類型的泛型類型定義，請呼叫<xref:System.Type.MakeGenericType%2A>串連起來型別引數陣列的所有封入類型、 最外層的泛型型別，開頭和結尾所構成的陣列的方法型別引數陣列的巢狀型別本身，如果它有自己的型別參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-4144">To construct a generic type from the generic type definition for a nested type, call the <xref:System.Type.MakeGenericType%2A> method with the array formed by concatenating the type argument arrays of all the enclosing types, beginning with the outermost generic type, and ending with the type argument array of the nested type itself, if it has type parameters of its own.</span></span> <span data-ttu-id="9a871-4145">若要建立的執行個體`Innermost1`，呼叫<xref:System.Type.MakeGenericType%2A>與陣列，包含要指派給 T、 U 和 V 的三種類型的方法。若要建立的執行個體`Innermost2`，呼叫<xref:System.Type.MakeGenericType%2A>方法與陣列，包含兩種類型，以指派給 T 和 u。</span><span class="sxs-lookup"><span data-stu-id="9a871-4145">To create an instance of `Innermost1`, call the <xref:System.Type.MakeGenericType%2A> method with an array containing three types, to be assigned to T, U, and V. To create an instance of `Innermost2`, call the <xref:System.Type.MakeGenericType%2A> method with an array containing two types, to be assigned to T and U.</span></span>  
  
 <span data-ttu-id="9a871-4146">語言傳播型別參數，以這種方式中封入類型，因此您可以使用封入類型的型別參數，以定義巢狀類型的欄位。</span><span class="sxs-lookup"><span data-stu-id="9a871-4146">The languages propagate the type parameters of enclosing types in this fashion so you can use the type parameters of an enclosing type to define fields of nested types.</span></span> <span data-ttu-id="9a871-4147">否則，型別參數不是在範圍內的巢狀類型的主體內。</span><span class="sxs-lookup"><span data-stu-id="9a871-4147">Otherwise, the type parameters would not be in scope within the bodies of the nested types.</span></span> <span data-ttu-id="9a871-4148">您可定義巢狀的類型，而不會傳播的封入類型，透過發出動態組件中的程式碼或使用的型別參數[Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md)。</span><span class="sxs-lookup"><span data-stu-id="9a871-4148">It is possible to define nested types without propagating the type parameters of enclosing types, by emitting code in dynamic assemblies or by using the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span></span> <span data-ttu-id="9a871-4149">MSIL 組譯工具，請考慮下列程式碼：</span><span class="sxs-lookup"><span data-stu-id="9a871-4149">Consider the following code for the MSIL assembler:</span></span>  
  
```  
.class public Outer<T> {  
    .class nested public Inner<U> {  
        .class nested public Innermost {  
        }  
    }  
}  
```  
  
 <span data-ttu-id="9a871-4150">在此範例中，它不是可以定義類型的欄位`T`或是`U`類別中`Innermost`，因為這些型別參數不在範圍內。</span><span class="sxs-lookup"><span data-stu-id="9a871-4150">In this example, it is not possible to define a field of type `T` or `U` in class `Innermost`, because those type parameters are not in scope.</span></span> <span data-ttu-id="9a871-4151">下列的組合器程式碼定義，其行為的方式就好似 c + +、 Visual Basic 和 C# 中定義的巢狀的類別：</span><span class="sxs-lookup"><span data-stu-id="9a871-4151">The following assembler code defines nested classes that behave the way they would if defined in C++, Visual Basic, and C#:</span></span>  
  
```  
.class public Outer<T> {  
    .class nested public Inner<T, U> {  
        .class nested public Innermost<T, U, V> {  
        }  
    }  
}  
```  
  
 <span data-ttu-id="9a871-4152">您可以使用[Ildasm.exe （IL 反組譯工具）](~/docs/framework/tools/ildasm-exe-il-disassembler.md)檢查高階語言中定義的巢狀的類別，並觀察這個命名配置。</span><span class="sxs-lookup"><span data-stu-id="9a871-4152">You can use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to examine nested classes defined in the high-level languages and observe this naming scheme.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-4153">下列範例會使用<xref:System.Type.MakeGenericType%2A>方法用來建立建構的類型的泛型型別定義從<xref:System.Collections.Generic.Dictionary%602>型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-4153">The following example uses the <xref:System.Type.MakeGenericType%2A> method to create a constructed type from the generic type definition for the <xref:System.Collections.Generic.Dictionary%602> type.</span></span> <span data-ttu-id="9a871-4154">建構的型別代表<xref:System.Collections.Generic.Dictionary%602>的`Test`具有字串索引鍵的物件。</span><span class="sxs-lookup"><span data-stu-id="9a871-4154">The constructed type represents a <xref:System.Collections.Generic.Dictionary%602> of `Test` objects with string keys.</span></span>  
  
 [!code-cpp[System.Type.BindGenericParameters#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.BindGenericParameters/CPP/source.cpp#1)]
 [!code-csharp[System.Type.BindGenericParameters#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.BindGenericParameters/CS/source.cs#1)]
 [!code-vb[System.Type.BindGenericParameters#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.BindGenericParameters/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9a871-4155">目前類型不代表泛型型別定義。</span><span class="sxs-lookup"><span data-stu-id="9a871-4155">The current type does not represent a generic type definition.</span></span> <span data-ttu-id="9a871-4156">亦即，<see cref="P:System.Type.IsGenericTypeDefinition" /> 會傳回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-4156">That is, <see cref="P:System.Type.IsGenericTypeDefinition" /> returns <see langword="false" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9a871-4157"><paramref name="typeArguments" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-4157"><paramref name="typeArguments" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="9a871-4158">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-4158">-or-</span></span> 
<span data-ttu-id="9a871-4159"><paramref name="typeArguments" /> 的所有項目都是 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-4159">Any element of <paramref name="typeArguments" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9a871-4160"><paramref name="typeArguments" /> 中的項目數和目前泛型型別定義的類型參數數目不同。</span><span class="sxs-lookup"><span data-stu-id="9a871-4160">The number of elements in <paramref name="typeArguments" /> is not the same as the number of type parameters in the current generic type definition.</span></span>  
  
<span data-ttu-id="9a871-4161">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-4161">-or-</span></span> 
<span data-ttu-id="9a871-4162"><paramref name="typeArguments" /> 的所有項目都不符合目前泛型型別的對應類型參數所指定的條件約束。</span><span class="sxs-lookup"><span data-stu-id="9a871-4162">Any element of <paramref name="typeArguments" /> does not satisfy the constraints specified for the corresponding type parameter of the current generic type.</span></span>  
  
<span data-ttu-id="9a871-4163">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-4163">-or-</span></span> 
 <span data-ttu-id="9a871-4164"><paramref name="typeArguments" /> 包含的項目是指標類型 (<see cref="P:System.Type.IsPointer" /> 傳回 <see langword="true" />)、傳址類型 (<see cref="P:System.Type.IsByRef" /> 傳回 <see langword="true" />) 或 <see cref="T:System.Void" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-4164"><paramref name="typeArguments" /> contains an element that is a pointer type (<see cref="P:System.Type.IsPointer" /> returns <see langword="true" />), a by-ref type (<see cref="P:System.Type.IsByRef" /> returns <see langword="true" />), or <see cref="T:System.Void" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="9a871-4165">基底類別不支援叫用的方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-4165">The invoked method is not supported in the base class.</span></span> <span data-ttu-id="9a871-4166">衍生類別必須提供實作。</span><span class="sxs-lookup"><span data-stu-id="9a871-4166">Derived classes must provide an implementation.</span></span></exception>
        <altmember cref="P:System.Type.IsGenericTypeDefinition" />
        <altmember cref="M:System.Type.GetGenericTypeDefinition" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/reflection-and-generic-types.md"><span data-ttu-id="9a871-4167">反映和泛用類型</span><span class="sxs-lookup"><span data-stu-id="9a871-4167">Reflection and Generic Types</span></span></related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-examine-and-instantiate-generic-types-with-reflection.md"><span data-ttu-id="9a871-4168">如何：使用反映檢視和執行個體化泛型類型</span><span class="sxs-lookup"><span data-stu-id="9a871-4168">How to: Examine and Instantiate Generic Types with Reflection</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="MakePointerType">
      <MemberSignature Language="C#" Value="public virtual Type MakePointerType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type MakePointerType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.MakePointerType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MakePointerType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ MakePointerType();" />
      <MemberSignature Language="F#" Value="abstract member MakePointerType : unit -&gt; Type&#xA;override this.MakePointerType : unit -&gt; Type" Usage="type.MakePointerType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9a871-4169">傳回 <see cref="T:System.Type" /> 物件，代表指向目前類型的指標。</span><span class="sxs-lookup"><span data-stu-id="9a871-4169">Returns a <see cref="T:System.Type" /> object that represents a pointer to the current type.</span></span></summary>
        <returns><span data-ttu-id="9a871-4170"><see cref="T:System.Type" /> 物件，代表指向目前類型的指標。</span><span class="sxs-lookup"><span data-stu-id="9a871-4170">A <see cref="T:System.Type" /> object that represents a pointer to the current type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-4171"><xref:System.Type.MakePointerType%2A>方法可用來產生參數清單的指標類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-4171">The <xref:System.Type.MakePointerType%2A> method provides a way to generate pointer types for parameter lists.</span></span>  
  
 <span data-ttu-id="9a871-4172">使用語法的 Microsoft intermediate language (MSIL)，如果目前<xref:System.Type>物件代表<xref:System.Int32>，這個方法會傳回<xref:System.Type>物件，表示`Int32*`。</span><span class="sxs-lookup"><span data-stu-id="9a871-4172">Using the syntax of Microsoft intermediate language (MSIL), if the current <xref:System.Type> object represents <xref:System.Int32>, this method returns a <xref:System.Type> object representing `Int32*`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-4173">下列程式碼範例會建立陣列， `ref` (`ByRef` Visual Basic 中)，和指標類型`Test`類別。</span><span class="sxs-lookup"><span data-stu-id="9a871-4173">The following code example creates array, `ref` (`ByRef` in Visual Basic), and pointer types for the `Test` class.</span></span>  
  
 [!code-cpp[System.Type.MakeXxxType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.MakeXxxType/CPP/source.cpp#1)]
 [!code-csharp[System.Type.MakeXxxType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.MakeXxxType/CS/source.cs#1)]
 [!code-vb[System.Type.MakeXxxType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.MakeXxxType/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="9a871-4174">基底類別不支援叫用的方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-4174">The invoked method is not supported in the base class.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="9a871-4175">目前的類型為 <see cref="T:System.TypedReference" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-4175">The current type is <see cref="T:System.TypedReference" />.</span></span>  
  
<span data-ttu-id="9a871-4176">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-4176">-or-</span></span> 
<span data-ttu-id="9a871-4177">目前的類型為 <see langword="ByRef" /> 類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-4177">The current type is a <see langword="ByRef" /> type.</span></span> <span data-ttu-id="9a871-4178">亦即，<see cref="P:System.Type.IsByRef" /> 會傳回 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-4178">That is, <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span></span></exception>
        <altmember cref="M:System.Type.MakeByRefType" />
        <altmember cref="M:System.Type.MakeArrayType" />
      </Docs>
    </Member>
    <Member MemberName="MemberType">
      <MemberSignature Language="C#" Value="public override System.Reflection.MemberTypes MemberType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.MemberTypes MemberType" />
      <MemberSignature Language="DocId" Value="P:System.Type.MemberType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property MemberType As MemberTypes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MemberTypes MemberType { System::Reflection::MemberTypes get(); };" />
      <MemberSignature Language="F#" Value="member this.MemberType : System.Reflection.MemberTypes" Usage="System.Type.MemberType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.MemberType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a871-4179">取得一個 <see cref="T:System.Reflection.MemberTypes" /> 值，代表這個成員是類型或巢狀類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-4179">Gets a <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is a type or a nested type.</span></span></summary>
        <value><span data-ttu-id="9a871-4180">一個 <see cref="T:System.Reflection.MemberTypes" /> 值，代表這個成員是類型或巢狀類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-4180">A <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is a type or a nested type.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-4181">此屬性會覆寫<xref:System.Reflection.MemberInfo.MemberType%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="9a871-4181">This property overrides <xref:System.Reflection.MemberInfo.MemberType%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="9a871-4182">因此，當您檢查一組<xref:System.Reflection.MemberInfo>物件，例如，將所傳回的陣列<xref:System.Type.GetMembers%2A>-<xref:System.Reflection.MemberInfo.MemberType%2A>屬性會傳回<xref:System.Reflection.MemberTypes.NestedType?displayProperty=nameWithType>時指定的成員是巢狀型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-4182">Therefore, when you examine a set of <xref:System.Reflection.MemberInfo> objects - for example, the array returned by <xref:System.Type.GetMembers%2A> - the <xref:System.Reflection.MemberInfo.MemberType%2A> property returns <xref:System.Reflection.MemberTypes.NestedType?displayProperty=nameWithType> when a given member is a nested type.</span></span>  
  
 <span data-ttu-id="9a871-4183">如果目前<xref:System.Type>代表建構泛型型別，這個屬性會套用至泛型型別定義從中建構的類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-4183">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="9a871-4184">例如，如果目前<xref:System.Type>代表`MyGenericType<int>`(`MyGenericType(Of Integer)`在 Visual Basic 中)，這個屬性的值取決於`MyGenericType<T>`。</span><span class="sxs-lookup"><span data-stu-id="9a871-4184">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="9a871-4185">如果目前<xref:System.Type>表示的類型參數的泛型類型或泛型方法定義中這個屬性一律傳回<xref:System.Reflection.MemberTypes.TypeInfo?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="9a871-4185">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns <xref:System.Reflection.MemberTypes.TypeInfo?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-4186">下列程式碼範例所示`MemberType`欄位做為參數`GetMember`方法：</span><span class="sxs-lookup"><span data-stu-id="9a871-4186">The following code example shows the `MemberType` field as a parameter to the `GetMember` method:</span></span>  
  
 [!code-cpp[Classic Type.MemberType Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.MemberType Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Type.MemberType Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.MemberType Example/CS/source.cs#1)]
 [!code-vb[Classic Type.MemberType Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.MemberType Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MemberTypes" />
      </Docs>
    </Member>
    <Member MemberName="Missing">
      <MemberSignature Language="C#" Value="public static readonly object Missing;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly object Missing" />
      <MemberSignature Language="DocId" Value="F:System.Type.Missing" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Missing As Object " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Object ^ Missing;" />
      <MemberSignature Language="F#" Value=" staticval mutable Missing : obj" Usage="System.Type.Missing" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a871-4187">表示在 <see cref="T:System.Type" /> 資訊中的遺漏值。</span><span class="sxs-lookup"><span data-stu-id="9a871-4187">Represents a missing value in the <see cref="T:System.Type" /> information.</span></span> <span data-ttu-id="9a871-4188">此欄位為唯讀。</span><span class="sxs-lookup"><span data-stu-id="9a871-4188">This field is read-only.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-4189">使用`Missing`欄位透過反射啟動以取得參數的預設值的引動過程。</span><span class="sxs-lookup"><span data-stu-id="9a871-4189">Use the `Missing` field for invocation through reflection to obtain the default value of a parameter.</span></span> <span data-ttu-id="9a871-4190">如果`Missing`欄位會傳遞為參數值，並針對該參數，沒有預設值<xref:System.ArgumentException>就會擲回。</span><span class="sxs-lookup"><span data-stu-id="9a871-4190">If the `Missing` field is passed in for a parameter value and there is no default value for that parameter, an <xref:System.ArgumentException> is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-4191">下列程式碼範例示範使用`Missing`欄位來叫用具有預設引數的方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-4191">The following code example shows the use of the `Missing` field to invoke a method with its default arguments.</span></span>  
  
 [!code-cpp[Classic Type.Missing Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.Missing Example/cpp/source.cpp#1)]
 [!code-csharp[Classic Type.Missing Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.Missing Example/cs/source.cs#1)]
 [!code-vb[Classic Type.Missing Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.Missing Example/VB/source.vb#1)]  
  
 <span data-ttu-id="9a871-4192">此程式碼會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="9a871-4192">This code produces the following output:</span></span>  
  
 <span data-ttu-id="9a871-4193">= 10 b = 55.3 c = 12</span><span class="sxs-lookup"><span data-stu-id="9a871-4193">a = 10 b = 55.3 c = 12</span></span>  
  
 <span data-ttu-id="9a871-4194">= 10 b = 1.3 c = 1</span><span class="sxs-lookup"><span data-stu-id="9a871-4194">a = 10 b = 1.3 c = 1</span></span>  
  
 <span data-ttu-id="9a871-4195">= 10 b = 1.2 c = 1</span><span class="sxs-lookup"><span data-stu-id="9a871-4195">a = 10 b = 1.2 c = 1</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.Missing" />
      </Docs>
    </Member>
    <Member MemberName="Module">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.Module Module { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Module Module" />
      <MemberSignature Language="DocId" Value="P:System.Type.Module" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Module As Module" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Reflection::Module ^ Module { System::Reflection::Module ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Module : System.Reflection.Module" Usage="System.Type.Module" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.Module</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Module</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a871-4196">在已定義的目前 <see cref="T:System.Type" /> 中取得模組 (DLL)。</span><span class="sxs-lookup"><span data-stu-id="9a871-4196">Gets the module (the DLL) in which the current <see cref="T:System.Type" /> is defined.</span></span></summary>
        <value><span data-ttu-id="9a871-4197">在目前已定義之 <see cref="T:System.Type" /> 中的模組。</span><span class="sxs-lookup"><span data-stu-id="9a871-4197">The module in which the current <see cref="T:System.Type" /> is defined.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-4198">如果目前<xref:System.Type>代表建構的泛型類型，這個屬性會傳回的模組中定義的泛型類型定義。</span><span class="sxs-lookup"><span data-stu-id="9a871-4198">If the current <xref:System.Type> represents a constructed generic type, this property returns the module in which the generic type definition was defined.</span></span> <span data-ttu-id="9a871-4199">例如，如果您建立的執行個體`MyGenericStack<int>`，則<xref:System.Type.Module%2A>建構類型的屬性會傳回模組中`MyGenericStack<T>`定義。</span><span class="sxs-lookup"><span data-stu-id="9a871-4199">For example, if you create an instance of `MyGenericStack<int>`, the <xref:System.Type.Module%2A> property for the constructed type returns the module in which `MyGenericStack<T>` is defined.</span></span>  
  
 <span data-ttu-id="9a871-4200">同樣地，如果目前<xref:System.Type>代表泛型參數`T`，這個屬性會傳回包含泛型型別定義的組件`T`。</span><span class="sxs-lookup"><span data-stu-id="9a871-4200">Similarly, if the current <xref:System.Type> represents a generic parameter `T`, this property returns the assembly that contains the generic type that defines `T`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-4201">下列範例示範的用法<xref:System.Type.Namespace%2A>並`Module`屬性和<xref:System.Type.ToString%2A>方法<xref:System.Type>。</span><span class="sxs-lookup"><span data-stu-id="9a871-4201">This following example demonstrates a use of the <xref:System.Type.Namespace%2A> and `Module` properties and the <xref:System.Type.ToString%2A> method of <xref:System.Type>.</span></span>  
  
 [!code-cpp[Type_ToString#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_ToString/CPP/type_tostring.cpp#1)]
 [!code-csharp[Type_ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_ToString/CS/type_tostring.cs#1)]
 [!code-vb[Type_ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_ToString/VB/type_tostring.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.Module" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public abstract string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Type.Name" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Type.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a871-4202">在衍生類別中覆寫時，取得目前類型的名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-4202">When overridden in a derived class, gets the name of the current type.</span></span></summary>
        <value><span data-ttu-id="9a871-4203">目前型別的名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-4203">The name of the current type.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public abstract string Namespace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Type.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ Namespace { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Namespace : string" Usage="System.Type.Namespace" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.Namespace</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a871-4204">取得 <see cref="T:System.Type" /> 的命名空間。</span><span class="sxs-lookup"><span data-stu-id="9a871-4204">Gets the namespace of the <see cref="T:System.Type" />.</span></span></summary>
        <value><span data-ttu-id="9a871-4205"><see cref="T:System.Type" /> 的命名空間；如果目前執行個體沒有命名空間或代表泛型參數，則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-4205">The namespace of the <see cref="T:System.Type" />; <see langword="null" /> if the current instance has no namespace or represents a generic parameter.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-4206">命名空間是邏輯設計階段命名慣例，主要用來定義應用程式中的範圍和組織類別和其他類型的單一階層式結構中。</span><span class="sxs-lookup"><span data-stu-id="9a871-4206">A namespace is a logical design-time naming convenience, used mainly to define scope in an application and organize classes and other types in a single hierarchical structure.</span></span> <span data-ttu-id="9a871-4207">從執行階段的觀點來看，沒有命名空間。</span><span class="sxs-lookup"><span data-stu-id="9a871-4207">From the viewpoint of the runtime, there are no namespaces.</span></span>  
  
 <span data-ttu-id="9a871-4208">如果目前<xref:System.Type>代表建構的泛型類型，這個屬性會傳回包含泛型型別定義的命名空間。</span><span class="sxs-lookup"><span data-stu-id="9a871-4208">If the current <xref:System.Type> represents a constructed generic type, this property returns the namespace that contains the generic type definition.</span></span> <span data-ttu-id="9a871-4209">同樣地，如果目前<xref:System.Type>代表泛型參數`T`，這個屬性會傳回包含定義的泛型類型定義的命名空間`T`。</span><span class="sxs-lookup"><span data-stu-id="9a871-4209">Similarly, if the current <xref:System.Type> represents a generic parameter `T`, this property returns the namespace that contains the generic type definition that defines `T`.</span></span>  
  
 <span data-ttu-id="9a871-4210">如果目前<xref:System.Type>物件代表泛型參數，則這個屬性會傳回`null`。</span><span class="sxs-lookup"><span data-stu-id="9a871-4210">If the current <xref:System.Type> object represents a generic parameter, this property returns `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-4211">下列範例示範的用法`Namespace`並<xref:System.Type.Module%2A>屬性和<xref:System.Type.ToString%2A>方法<xref:System.Type>。</span><span class="sxs-lookup"><span data-stu-id="9a871-4211">This following example demonstrates a use of the `Namespace` and <xref:System.Type.Module%2A> properties and the <xref:System.Type.ToString%2A> method of <xref:System.Type>.</span></span>  
  
 [!code-cpp[Type_ToString#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_ToString/CPP/type_tostring.cpp#1)]
 [!code-csharp[Type_ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_ToString/CS/type_tostring.cs#1)]
 [!code-vb[Type_ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_ToString/VB/type_tostring.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.FullName" />
        <altmember cref="P:System.Type.AssemblyQualifiedName" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/specifying-fully-qualified-type-names.md"><span data-ttu-id="9a871-4212">指定完整的類型名稱</span><span class="sxs-lookup"><span data-stu-id="9a871-4212">Specifying Fully Qualified Type Names</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (Type left, Type right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Type left, class System.Type right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.op_Equality(System.Type,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As Type, right As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(Type ^ left, Type ^ right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : Type * Type -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Type" />
        <Parameter Name="right" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="9a871-4213">要比較的第一個物件。</span><span class="sxs-lookup"><span data-stu-id="9a871-4213">The first object to compare.</span></span></param>
        <param name="right"><span data-ttu-id="9a871-4214">要比較的第二個物件。</span><span class="sxs-lookup"><span data-stu-id="9a871-4214">The second object to compare.</span></span></param>
        <summary><span data-ttu-id="9a871-4215">表示兩個 <see cref="T:System.Type" /> 物件是否相等。</span><span class="sxs-lookup"><span data-stu-id="9a871-4215">Indicates whether two <see cref="T:System.Type" /> objects are equal.</span></span></summary>
        <returns><span data-ttu-id="9a871-4216">如果 <see langword="true" /> 等於 <paramref name="left" />，則為 <paramref name="right" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-4216"><see langword="true" /> if <paramref name="left" /> is equal to <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (Type left, Type right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Type left, class System.Type right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.op_Inequality(System.Type,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As Type, right As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(Type ^ left, Type ^ right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : Type * Type -&gt; bool" Usage="System.Type.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Type" />
        <Parameter Name="right" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="9a871-4217">要比較的第一個物件。</span><span class="sxs-lookup"><span data-stu-id="9a871-4217">The first object to compare.</span></span></param>
        <param name="right"><span data-ttu-id="9a871-4218">要比較的第二個物件。</span><span class="sxs-lookup"><span data-stu-id="9a871-4218">The second object to compare.</span></span></param>
        <summary><span data-ttu-id="9a871-4219">表示兩個 <see cref="T:System.Type" /> 物件是否不相等。</span><span class="sxs-lookup"><span data-stu-id="9a871-4219">Indicates whether two <see cref="T:System.Type" /> objects are not equal.</span></span></summary>
        <returns><span data-ttu-id="9a871-4220">如果 <see langword="true" /> 不等於 <paramref name="left" />，則為 <paramref name="right" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-4220"><see langword="true" /> if <paramref name="left" /> is not equal to <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReflectedType">
      <MemberSignature Language="C#" Value="public override Type ReflectedType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ReflectedType" />
      <MemberSignature Language="DocId" Value="P:System.Type.ReflectedType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReflectedType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ ReflectedType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReflectedType : Type" Usage="System.Type.ReflectedType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.ReflectedType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a871-4221">取得用來取得這個成員的類別物件。</span><span class="sxs-lookup"><span data-stu-id="9a871-4221">Gets the class object that was used to obtain this member.</span></span></summary>
        <value><span data-ttu-id="9a871-4222"><see langword="Type" /> 物件，用來取得這個 <see cref="T:System.Type" /> 物件。</span><span class="sxs-lookup"><span data-stu-id="9a871-4222">The <see langword="Type" /> object through which this <see cref="T:System.Type" /> object was obtained.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-4223">針對<xref:System.Type>物件，這個屬性的值一律是相同的值為<xref:System.Type.DeclaringType%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-4223">For <xref:System.Type> objects, the value of this property is always the same as the value of the <xref:System.Type.DeclaringType%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-4224">此範例會顯示巢狀類別的反映型別。</span><span class="sxs-lookup"><span data-stu-id="9a871-4224">This example displays the reflected type of a nested class.</span></span>  
  
 [!code-cpp[Classic Type.ReflectedType Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.ReflectedType Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Type.ReflectedType Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.ReflectedType Example/CS/source.cs#1)]
 [!code-vb[Classic Type.ReflectedType Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.ReflectedType Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MemberInfo" />
        <altmember cref="P:System.Type.DeclaringType" />
      </Docs>
    </Member>
    <Member MemberName="ReflectionOnlyGetType">
      <MemberSignature Language="C#" Value="public static Type ReflectionOnlyGetType (string typeName, bool throwIfNotFound, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type ReflectionOnlyGetType(string typeName, bool throwIfNotFound, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.ReflectionOnlyGetType(System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReflectionOnlyGetType (typeName As String, throwIfNotFound As Boolean, ignoreCase As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ ReflectionOnlyGetType(System::String ^ typeName, bool throwIfNotFound, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="static member ReflectionOnlyGetType : string * bool * bool -&gt; Type" Usage="System.Type.ReflectionOnlyGetType (typeName, throwIfNotFound, ignoreCase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="throwIfNotFound" Type="System.Boolean" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="typeName"><span data-ttu-id="9a871-4225">要取得之 <see cref="T:System.Type" /> 的組件限定名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-4225">The assembly-qualified name of the <see cref="T:System.Type" /> to get.</span></span></param>
        <param name="throwIfNotFound"><span data-ttu-id="9a871-4226"><see langword="true" /> 表示找不到類型時擲回 <see cref="T:System.TypeLoadException" />，<see langword="false" /> 表示找不到類型時傳回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-4226"><see langword="true" /> to throw a <see cref="T:System.TypeLoadException" /> if the type cannot be found; <see langword="false" /> to return <see langword="null" /> if the type cannot be found.</span></span> <span data-ttu-id="9a871-4227">指定 <see langword="false" /> 也會隱藏其他某些例外狀況條件，但並不是全部。</span><span class="sxs-lookup"><span data-stu-id="9a871-4227">Specifying <see langword="false" /> also suppresses some other exception conditions, but not all of them.</span></span> <span data-ttu-id="9a871-4228">請參閱＜例外狀況＞一節。</span><span class="sxs-lookup"><span data-stu-id="9a871-4228">See the Exceptions section.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="9a871-4229"><see langword="true" /> 表示對 <paramref name="typeName" /> 執行不區分大小寫的搜尋，<see langword="false" /> 表示對 <paramref name="typeName" /> 執行區分大小寫的搜尋。</span><span class="sxs-lookup"><span data-stu-id="9a871-4229"><see langword="true" /> to perform a case-insensitive search for <paramref name="typeName" />; <see langword="false" /> to perform a case-sensitive search for <paramref name="typeName" />.</span></span></param>
        <summary><span data-ttu-id="9a871-4230">取得具有指定名稱的 <see cref="T:System.Type" />，指定是否執行區分大小寫的搜尋，以及若找不到該類型時是否擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9a871-4230">Gets the <see cref="T:System.Type" /> with the specified name, specifying whether to perform a case-sensitive search and whether to throw an exception if the type is not found.</span></span> <span data-ttu-id="9a871-4231">載入此類型的目的在於反映，而不是執行。</span><span class="sxs-lookup"><span data-stu-id="9a871-4231">The type is loaded for reflection only, not for execution.</span></span></summary>
        <returns><span data-ttu-id="9a871-4232">具有指定名稱的類型 (如有找到)，否則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-4232">The type with the specified name, if found; otherwise, <see langword="null" />.</span></span> <span data-ttu-id="9a871-4233">如果找不到該類型，<paramref name="throwIfNotFound" /> 參數會指定是要傳回 <see langword="null" /> 或是擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9a871-4233">If the type is not found, the <paramref name="throwIfNotFound" /> parameter specifies whether <see langword="null" /> is returned or an exception is thrown.</span></span> <span data-ttu-id="9a871-4234">在某些情況下，不論 <paramref name="throwIfNotFound" /> 的值為何，都會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9a871-4234">In some cases, an exception is thrown regardless of the value of <paramref name="throwIfNotFound" />.</span></span> <span data-ttu-id="9a871-4235">請參閱＜例外狀況＞一節。</span><span class="sxs-lookup"><span data-stu-id="9a871-4235">See the Exceptions section.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-4236">如果包含類型的組件尚未載入僅限反映的內容，使用<xref:System.Type.ReflectionOnlyGetType%2A>方法，是相當於第一個載入僅限反映的組件使用<xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A>方法，並接著藉由呼叫載入型別組件的<xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-4236">If the assembly containing the type is not already loaded into the reflection-only context, using the <xref:System.Type.ReflectionOnlyGetType%2A> method is equivalent to first loading the assembly for reflection only, using the <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A> method, and then loading the type by calling the assembly's <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="9a871-4237">如需組件限定名稱的資訊，請參閱<xref:System.Type.AssemblyQualifiedName%2A?displayProperty=nameWithType>屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-4237">For information about assembly-qualified names, see the <xref:System.Type.AssemblyQualifiedName%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="9a871-4238">如需有關指定的類型名稱的詳細資訊，請參閱<xref:System.Type.GetType%28System.String%2CSystem.Boolean%2CSystem.Boolean%29>方法多載。</span><span class="sxs-lookup"><span data-stu-id="9a871-4238">For additional details on specifying type names, see the <xref:System.Type.GetType%28System.String%2CSystem.Boolean%2CSystem.Boolean%29> method overload.</span></span>  
  
 <span data-ttu-id="9a871-4239">如果已執行載入組件，會將另一個複本載入僅限反映的內容。</span><span class="sxs-lookup"><span data-stu-id="9a871-4239">If the assembly is already loaded for execution, another copy is loaded into the reflection-only context.</span></span>  
  
 <span data-ttu-id="9a871-4240">`throwIfNotFound`參數會指定時會發生什麼事的型別找不到，並會隱藏其他某些例外情況，例外狀況 」 一節中所述。</span><span class="sxs-lookup"><span data-stu-id="9a871-4240">The `throwIfNotFound` parameter specifies what happens when the type is not found, and also suppresses certain other exception conditions, as described in the Exceptions section.</span></span> <span data-ttu-id="9a871-4241">某些例外狀況的值為何`throwIfNotFound`。</span><span class="sxs-lookup"><span data-stu-id="9a871-4241">Some exceptions are thrown regardless of the value of `throwIfNotFound`.</span></span> <span data-ttu-id="9a871-4242">例如，如果組件無效<xref:System.BadImageFormatException>就會擲回即使`throwIfNotFound`是`false`。</span><span class="sxs-lookup"><span data-stu-id="9a871-4242">For example, if the assembly is not valid, a <xref:System.BadImageFormatException> is thrown even if `throwIfNotFound` is `false`.</span></span>  
  
 <span data-ttu-id="9a871-4243">如需使用僅限反映內容的詳細資訊，請參閱[How to:將組件載入僅限反映的內容](~/docs/framework/reflection-and-codedom/how-to-load-assemblies-into-the-reflection-only-context.md)。</span><span class="sxs-lookup"><span data-stu-id="9a871-4243">For more information about using the reflection-only context, see [How to: Load Assemblies into the Reflection-Only Context](~/docs/framework/reflection-and-codedom/how-to-load-assemblies-into-the-reflection-only-context.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9a871-4244"><paramref name="typeName" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-4244"><paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="9a871-4245">叫用類別初始設定式並擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9a871-4245">A class initializer is invoked and throws an exception.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="9a871-4246"><paramref name="throwIfNotFound" /> 為 <see langword="true" />，而且找不到類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-4246"><paramref name="throwIfNotFound" /> is <see langword="true" /> and the type is not found.</span></span>  
  
<span data-ttu-id="9a871-4247">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-4247">-or-</span></span> 
 <span data-ttu-id="9a871-4248"><paramref name="throwIfNotFound" /> 為 <see langword="true" />，而且 <paramref name="typeName" /> 包含無效字元，例如內嵌的定位字元。</span><span class="sxs-lookup"><span data-stu-id="9a871-4248"><paramref name="throwIfNotFound" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid characters, such as an embedded tab.</span></span> 
<span data-ttu-id="9a871-4249">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-4249">-or-</span></span> 
 <span data-ttu-id="9a871-4250"><paramref name="throwIfNotFound" /> 為 <see langword="true" />，而且 <paramref name="typeName" /> 是空字串。</span><span class="sxs-lookup"><span data-stu-id="9a871-4250"><paramref name="throwIfNotFound" /> is <see langword="true" /> and <paramref name="typeName" /> is an empty string.</span></span>  
  
<span data-ttu-id="9a871-4251">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-4251">-or-</span></span> 
 <span data-ttu-id="9a871-4252"><paramref name="throwIfNotFound" /> 為 <see langword="true" />，而且 <paramref name="typeName" /> 代表大小無效的陣列類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-4252"><paramref name="throwIfNotFound" /> is <see langword="true" /> and <paramref name="typeName" /> represents an array type with an invalid size.</span></span>  
  
<span data-ttu-id="9a871-4253">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-4253">-or-</span></span> 
 <span data-ttu-id="9a871-4254"><paramref name="typeName" /> 代表 <see cref="T:System.TypedReference" /> 物件的陣列。</span><span class="sxs-lookup"><span data-stu-id="9a871-4254"><paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" /> objects.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9a871-4255"><paramref name="typeName" /> 不包含組件名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-4255"><paramref name="typeName" /> does not include the assembly name.</span></span>  
  
<span data-ttu-id="9a871-4256">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-4256">-or-</span></span> 
 <span data-ttu-id="9a871-4257"><paramref name="throwIfNotFound" /> 為 <see langword="true" />，而且 <paramref name="typeName" /> 包含無效語法 (例如 "MyType[,\*,]")。</span><span class="sxs-lookup"><span data-stu-id="9a871-4257"><paramref name="throwIfNotFound" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid syntax; for example, "MyType[,\*,]".</span></span>  
  
<span data-ttu-id="9a871-4258">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-4258">-or-</span></span> 
 <span data-ttu-id="9a871-4259"><paramref name="typeName" /> 代表的泛型類型以指標類型、<see langword="ByRef" /> 類型或 <see cref="T:System.Void" /> 做為其中一個類型引數。</span><span class="sxs-lookup"><span data-stu-id="9a871-4259"><paramref name="typeName" /> represents a generic type that has a pointer type, a <see langword="ByRef" /> type, or <see cref="T:System.Void" /> as one of its type arguments.</span></span>  
  
<span data-ttu-id="9a871-4260">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-4260">-or-</span></span> 
 <span data-ttu-id="9a871-4261"><paramref name="typeName" /> 代表的泛型類型具有不正確的類型引數數目。</span><span class="sxs-lookup"><span data-stu-id="9a871-4261"><paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.</span></span>  
  
<span data-ttu-id="9a871-4262">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-4262">-or-</span></span> 
 <span data-ttu-id="9a871-4263"><paramref name="typeName" /> 代表泛型類型，其中一個類型引數不符合對應類型參數的條件約束。</span><span class="sxs-lookup"><span data-stu-id="9a871-4263"><paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="9a871-4264"><paramref name="throwIfNotFound" /> 為 <see langword="true" />，而且找不到組件或組件的其中一個相依性。</span><span class="sxs-lookup"><span data-stu-id="9a871-4264"><paramref name="throwIfNotFound" /> is <see langword="true" /> and the assembly or one of its dependencies was not found.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="9a871-4265">找到組件或其相依性的其中一個，但無法載入。</span><span class="sxs-lookup"><span data-stu-id="9a871-4265">The assembly or one of its dependencies was found, but could not be loaded.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="9a871-4266">組件或組件的其中一個相依性無效。</span><span class="sxs-lookup"><span data-stu-id="9a871-4266">The assembly or one of its dependencies is not valid.</span></span>  
  
<span data-ttu-id="9a871-4267">-或-</span><span class="sxs-lookup"><span data-stu-id="9a871-4267">-or-</span></span> 
<span data-ttu-id="9a871-4268">用以編譯組件的通用語言執行平台，其版本比目前所載入的版本還要更新。</span><span class="sxs-lookup"><span data-stu-id="9a871-4268">The assembly was compiled with a later version of the common language runtime than the version that is currently loaded.</span></span></exception>
        <altmember cref="T:System.String" />
        <altmember cref="T:System.TypeLoadException" />
        <altmember cref="P:System.Type.AssemblyQualifiedName" />
        <altmember cref="M:System.Reflection.Assembly.GetAssembly(System.Type)" />
        <altmember cref="M:System.Reflection.Assembly.GetType(System.String)" />
        <altmember cref="T:System.Reflection.AssemblyName" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/specifying-fully-qualified-type-names.md"><span data-ttu-id="9a871-4269">指定完整的類型名稱</span><span class="sxs-lookup"><span data-stu-id="9a871-4269">Specifying Fully Qualified Type Names</span></span></related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-load-assemblies-into-the-reflection-only-context.md"><span data-ttu-id="9a871-4270">如何：將組件載入僅限反映的內容</span><span class="sxs-lookup"><span data-stu-id="9a871-4270">How to: Load Assemblies into the Reflection-Only Context</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StructLayoutAttribute">
      <MemberSignature Language="C#" Value="public virtual System.Runtime.InteropServices.StructLayoutAttribute StructLayoutAttribute { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Runtime.InteropServices.StructLayoutAttribute StructLayoutAttribute" />
      <MemberSignature Language="DocId" Value="P:System.Type.StructLayoutAttribute" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property StructLayoutAttribute As StructLayoutAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Runtime::InteropServices::StructLayoutAttribute ^ StructLayoutAttribute { System::Runtime::InteropServices::StructLayoutAttribute ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.StructLayoutAttribute : System.Runtime.InteropServices.StructLayoutAttribute" Usage="System.Type.StructLayoutAttribute" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.StructLayoutAttribute</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a871-4271">取得描述目前類型配置的 <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-4271">Gets a <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> that describes the layout of the current type.</span></span></summary>
        <value><span data-ttu-id="9a871-4272">取得描述目前類型概略配置特性的 <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-4272">Gets a <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> that describes the gross layout features of the current type.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-4273"><xref:System.Runtime.InteropServices.StructLayoutAttribute> 不會傳回<xref:System.Reflection.MemberInfo.GetCustomAttributes%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-4273"><xref:System.Runtime.InteropServices.StructLayoutAttribute> is not returned by the <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> method.</span></span> <span data-ttu-id="9a871-4274">相反地，使用這個屬性來取得它。</span><span class="sxs-lookup"><span data-stu-id="9a871-4274">Instead, use this property to get it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-4275">下列程式碼範例會先定義類別、 結構和具有特殊的版面配置屬性 （在類別內，巢狀結構） 的結構。</span><span class="sxs-lookup"><span data-stu-id="9a871-4275">The following code example first defines a class, a structure, and a structure with special layout attributes (the structures are nested within the class).</span></span> <span data-ttu-id="9a871-4276">然後此範例使用<xref:System.Type.StructLayoutAttribute%2A>屬性，以取得<xref:System.Runtime.InteropServices.StructLayoutAttribute>的每個型別，並顯示屬性的屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-4276">The example then uses the <xref:System.Type.StructLayoutAttribute%2A> property to obtain a <xref:System.Runtime.InteropServices.StructLayoutAttribute> for each type, and displays the properties of the attributes.</span></span>  
  
 [!code-cpp[Type.StructLayoutAttribute#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type.StructLayoutAttribute/CPP/Type.StructLayoutAttribute.cpp#1)]
 [!code-csharp[Type.StructLayoutAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type.StructLayoutAttribute/CS/source.cs#1)]
 [!code-vb[Type.StructLayoutAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type.StructLayoutAttribute/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="9a871-4277">基底類別不支援叫用的方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-4277">The invoked method is not supported in the base class.</span></span></exception>
        <altmember cref="T:System.Runtime.InteropServices.StructLayoutAttribute" />
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._Type.GetIDsOfNames">
      <MemberSignature Language="C#" Value="void _Type.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._Type.GetIDsOfNames([in]valuetype System.Guid&amp; riid, native int rgszNames, unsigned int32 cNames, unsigned int32 lcid, native int rgDispId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.System#Runtime#InteropServices#_Type#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetIDsOfNames (ByRef riid As Guid, rgszNames As IntPtr, cNames As UInteger, lcid As UInteger, rgDispId As IntPtr) Implements _Type.GetIDsOfNames" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._Type.GetIDsOfNames(Guid % riid, IntPtr rgszNames, System::UInt32 cNames, System::UInt32 lcid, IntPtr rgDispId) = System::Runtime::InteropServices::_Type::GetIDsOfNames;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="riid" Type="System.Guid" RefType="ref" />
        <Parameter Name="rgszNames" Type="System.IntPtr" />
        <Parameter Name="cNames" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="rgDispId" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="riid"><span data-ttu-id="9a871-4278">保留供未來使用。</span><span class="sxs-lookup"><span data-stu-id="9a871-4278">Reserved for future use.</span></span> <span data-ttu-id="9a871-4279">必須是 IID_NULL。</span><span class="sxs-lookup"><span data-stu-id="9a871-4279">Must be IID_NULL.</span></span></param>
        <param name="rgszNames"><span data-ttu-id="9a871-4280">要對應之傳入的名稱陣列。</span><span class="sxs-lookup"><span data-stu-id="9a871-4280">Passed-in array of names to be mapped.</span></span></param>
        <param name="cNames"><span data-ttu-id="9a871-4281">要對應的名稱計數。</span><span class="sxs-lookup"><span data-stu-id="9a871-4281">Count of the names to be mapped.</span></span></param>
        <param name="lcid"><span data-ttu-id="9a871-4282">用於解譯名稱的地區設定內容。</span><span class="sxs-lookup"><span data-stu-id="9a871-4282">The locale context in which to interpret the names.</span></span></param>
        <param name="rgDispId"><span data-ttu-id="9a871-4283">呼叫端配置的陣列，用於接收對應於名稱的 ID。</span><span class="sxs-lookup"><span data-stu-id="9a871-4283">Caller-allocated array which receives the IDs corresponding to the names.</span></span></param>
        <summary><span data-ttu-id="9a871-4284">將一組名稱對應至一組對應的分派識別項 (Dispatch Identifier)。</span><span class="sxs-lookup"><span data-stu-id="9a871-4284">Maps a set of names to a corresponding set of dispatch identifiers.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-4285">這個方法會從 unmanaged 程式碼，是用於存取 managed 類別，並不會呼叫從 managed 程式碼。</span><span class="sxs-lookup"><span data-stu-id="9a871-4285">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="9a871-4286">如需詳細資訊`IDispatch::GetIDsOfNames`，請參閱 MSDN Library。</span><span class="sxs-lookup"><span data-stu-id="9a871-4286">For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="9a871-4287">不支援使用 COM <c>IDispatch</c> 介面進行晚期繫結的存取。</span><span class="sxs-lookup"><span data-stu-id="9a871-4287">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._Type.GetTypeInfo">
      <MemberSignature Language="C#" Value="void _Type.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._Type.GetTypeInfo(unsigned int32 iTInfo, unsigned int32 lcid, native int ppTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.System#Runtime#InteropServices#_Type#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfo (iTInfo As UInteger, lcid As UInteger, ppTInfo As IntPtr) Implements _Type.GetTypeInfo" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._Type.GetTypeInfo(System::UInt32 iTInfo, System::UInt32 lcid, IntPtr ppTInfo) = System::Runtime::InteropServices::_Type::GetTypeInfo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iTInfo" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="ppTInfo" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="iTInfo"><span data-ttu-id="9a871-4288">要傳回的類型資訊。</span><span class="sxs-lookup"><span data-stu-id="9a871-4288">The type information to return.</span></span></param>
        <param name="lcid"><span data-ttu-id="9a871-4289">類型資訊的地區設定識別項。</span><span class="sxs-lookup"><span data-stu-id="9a871-4289">The locale identifier for the type information.</span></span></param>
        <param name="ppTInfo"><span data-ttu-id="9a871-4290">所要求類型資訊物件的指標。</span><span class="sxs-lookup"><span data-stu-id="9a871-4290">A pointer to the requested type information object.</span></span></param>
        <summary><span data-ttu-id="9a871-4291">擷取物件的類型資訊，可以用來取得介面的類型資訊。</span><span class="sxs-lookup"><span data-stu-id="9a871-4291">Retrieves the type information for an object, which can then be used to get the type information for an interface.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-4292">這個方法會從 unmanaged 程式碼，是用於存取 managed 類別，並不會呼叫從 managed 程式碼。</span><span class="sxs-lookup"><span data-stu-id="9a871-4292">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="9a871-4293">如需詳細資訊`IDispatch::GetTypeInfo`，請參閱 MSDN Library。</span><span class="sxs-lookup"><span data-stu-id="9a871-4293">For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="9a871-4294">不支援使用 COM <c>IDispatch</c> 介面進行晚期繫結的存取。</span><span class="sxs-lookup"><span data-stu-id="9a871-4294">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._Type.GetTypeInfoCount">
      <MemberSignature Language="C#" Value="void _Type.GetTypeInfoCount (out uint pcTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._Type.GetTypeInfoCount([out] unsigned int32&amp; pcTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.System#Runtime#InteropServices#_Type#GetTypeInfoCount(System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfoCount (ByRef pcTInfo As UInteger) Implements _Type.GetTypeInfoCount" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._Type.GetTypeInfoCount([Runtime::InteropServices::Out] System::UInt32 % pcTInfo) = System::Runtime::InteropServices::_Type::GetTypeInfoCount;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetTypeInfoCount(System.UInt32@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcTInfo" Type="System.UInt32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pcTInfo"><span data-ttu-id="9a871-4295">指向接收物件提供的類型資訊介面數目的位置。</span><span class="sxs-lookup"><span data-stu-id="9a871-4295">Points to a location that receives the number of type information interfaces provided by the object.</span></span></param>
        <summary><span data-ttu-id="9a871-4296">擷取物件提供的類型資訊介面數目 (0 或 1)。</span><span class="sxs-lookup"><span data-stu-id="9a871-4296">Retrieves the number of type information interfaces that an object provides (either 0 or 1).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-4297">這個方法會從 unmanaged 程式碼，是用於存取 managed 類別，並不會呼叫從 managed 程式碼。</span><span class="sxs-lookup"><span data-stu-id="9a871-4297">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="9a871-4298">如需詳細資訊`IDispatch::GetTypeInfoCount`，請參閱 MSDN Library。</span><span class="sxs-lookup"><span data-stu-id="9a871-4298">For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="9a871-4299">不支援使用 COM <c>IDispatch</c> 介面進行晚期繫結的存取。</span><span class="sxs-lookup"><span data-stu-id="9a871-4299">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._Type.Invoke">
      <MemberSignature Language="C#" Value="void _Type.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._Type.Invoke(unsigned int32 dispIdMember, [in]valuetype System.Guid&amp; riid, unsigned int32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.System#Runtime#InteropServices#_Type#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub Invoke (dispIdMember As UInteger, ByRef riid As Guid, lcid As UInteger, wFlags As Short, pDispParams As IntPtr, pVarResult As IntPtr, pExcepInfo As IntPtr, puArgErr As IntPtr) Implements _Type.Invoke" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._Type.Invoke(System::UInt32 dispIdMember, Guid % riid, System::UInt32 lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr) = System::Runtime::InteropServices::_Type::Invoke;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dispIdMember" Type="System.UInt32" />
        <Parameter Name="riid" Type="System.Guid" RefType="ref" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="wFlags" Type="System.Int16" />
        <Parameter Name="pDispParams" Type="System.IntPtr" />
        <Parameter Name="pVarResult" Type="System.IntPtr" />
        <Parameter Name="pExcepInfo" Type="System.IntPtr" />
        <Parameter Name="puArgErr" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="dispIdMember"><span data-ttu-id="9a871-4300">辨識成員。</span><span class="sxs-lookup"><span data-stu-id="9a871-4300">Identifies the member.</span></span></param>
        <param name="riid"><span data-ttu-id="9a871-4301">保留供未來使用。</span><span class="sxs-lookup"><span data-stu-id="9a871-4301">Reserved for future use.</span></span> <span data-ttu-id="9a871-4302">必須是 IID_NULL。</span><span class="sxs-lookup"><span data-stu-id="9a871-4302">Must be IID_NULL.</span></span></param>
        <param name="lcid"><span data-ttu-id="9a871-4303">地區設定內容，用於解譯引數。</span><span class="sxs-lookup"><span data-stu-id="9a871-4303">The locale context in which to interpret arguments.</span></span></param>
        <param name="wFlags"><span data-ttu-id="9a871-4304">描述呼叫之內容的旗標。</span><span class="sxs-lookup"><span data-stu-id="9a871-4304">Flags describing the context of the call.</span></span></param>
        <param name="pDispParams"><span data-ttu-id="9a871-4305">結構的指標，此結構包含引數陣列、指名引數之 DISPID 引數的陣列，以及陣列中項目數目的計數。</span><span class="sxs-lookup"><span data-stu-id="9a871-4305">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</span></span></param>
        <param name="pVarResult"><span data-ttu-id="9a871-4306">指向用於儲存結果之位置的指標。</span><span class="sxs-lookup"><span data-stu-id="9a871-4306">Pointer to the location where the result is to be stored.</span></span></param>
        <param name="pExcepInfo"><span data-ttu-id="9a871-4307">包含例外狀況資訊的結構指標。</span><span class="sxs-lookup"><span data-stu-id="9a871-4307">Pointer to a structure that contains exception information.</span></span></param>
        <param name="puArgErr"><span data-ttu-id="9a871-4308">第一個有錯誤的引數索引。</span><span class="sxs-lookup"><span data-stu-id="9a871-4308">The index of the first argument that has an error.</span></span></param>
        <summary><span data-ttu-id="9a871-4309">提供物件所公開的屬性和方法的存取權。</span><span class="sxs-lookup"><span data-stu-id="9a871-4309">Provides access to properties and methods exposed by an object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-4310">這個方法會從 unmanaged 程式碼，是用於存取 managed 類別，並不會呼叫從 managed 程式碼。</span><span class="sxs-lookup"><span data-stu-id="9a871-4310">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="9a871-4311">如需詳細資訊`IDispatch::Invoke`，請參閱 MSDN Library。</span><span class="sxs-lookup"><span data-stu-id="9a871-4311">For more information about `IDispatch::Invoke`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="9a871-4312">不支援使用 COM <c>IDispatch</c> 介面進行晚期繫結的存取。</span><span class="sxs-lookup"><span data-stu-id="9a871-4312">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="type.ToString " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.ToString</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9a871-4313">傳回表示目前 <see langword="String" /> 的名稱的 <see langword="Type" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-4313">Returns a <see langword="String" /> representing the name of the current <see langword="Type" />.</span></span></summary>
        <returns><span data-ttu-id="9a871-4314">表示目前 <see cref="T:System.String" /> 的名稱的 <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="9a871-4314">A <see cref="T:System.String" /> representing the name of the current <see cref="T:System.Type" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-4315">這個方法會傳回所有的基本類型的名稱與完整的 common language runtime 命名空間。</span><span class="sxs-lookup"><span data-stu-id="9a871-4315">This method returns the fully qualified common language runtime namespace and name for all primitive types.</span></span> <span data-ttu-id="9a871-4316">例如，C# 指令`(long)0.Type().ToString()`傳回 「 System.Int64"，而不是只是"Int64"。</span><span class="sxs-lookup"><span data-stu-id="9a871-4316">For example, the C# instruction, `(long)0.Type().ToString()` returns "System.Int64" instead of merely "Int64".</span></span>  
  
 <span data-ttu-id="9a871-4317">如果目前<xref:System.Type>代表泛型類型、 類型和其類型引數會限定命名空間和巢狀型別，但不是由組件。</span><span class="sxs-lookup"><span data-stu-id="9a871-4317">If the current <xref:System.Type> represents a generic type, the type and its type arguments are qualified by namespace and by nested type, but not by assembly.</span></span> <span data-ttu-id="9a871-4318">如果目前<xref:System.Type>代表型別參數定義中的泛型類型或泛型方法，這個方法會傳回非限定的型別參數名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-4318">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method returns the unqualified name of the type parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-4319">下列範例示範的用法<xref:System.Type.Namespace%2A>並<xref:System.Type.Module%2A>屬性和`ToString`方法<xref:System.Type>。</span><span class="sxs-lookup"><span data-stu-id="9a871-4319">This following example demonstrates a use of the <xref:System.Type.Namespace%2A> and <xref:System.Type.Module%2A> properties and the `ToString` method of <xref:System.Type>.</span></span>  
  
 [!code-cpp[Type_ToString#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_ToString/CPP/type_tostring.cpp#1)]
 [!code-csharp[Type_ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_ToString/CS/type_tostring.cs#1)]
 [!code-vb[Type_ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_ToString/VB/type_tostring.vb#1)]  
  
 <span data-ttu-id="9a871-4320">下列範例會比較所傳回的字串<xref:System.Type.ToString%2A>方法和`Name`， <xref:System.Type.FullName%2A>，和<xref:System.Type.AssemblyQualifiedName%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-4320">The following example compares the strings returned by the <xref:System.Type.ToString%2A> method and the `Name`, <xref:System.Type.FullName%2A>, and <xref:System.Type.AssemblyQualifiedName%2A> properties.</span></span>  
  
 [!code-csharp[System.Type.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.tostring/cs/fullname1.cs#1)]
 [!code-vb[System.Type.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.tostring/vb/fullname1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="TypeHandle">
      <MemberSignature Language="C#" Value="public virtual RuntimeTypeHandle TypeHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.RuntimeTypeHandle TypeHandle" />
      <MemberSignature Language="DocId" Value="P:System.Type.TypeHandle" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property TypeHandle As RuntimeTypeHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property RuntimeTypeHandle TypeHandle { RuntimeTypeHandle get(); };" />
      <MemberSignature Language="F#" Value="member this.TypeHandle : RuntimeTypeHandle" Usage="System.Type.TypeHandle" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.TypeHandle</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.RuntimeTypeHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a871-4321">取得目前 <see cref="T:System.Type" /> 的控制代碼。</span><span class="sxs-lookup"><span data-stu-id="9a871-4321">Gets the handle for the current <see cref="T:System.Type" />.</span></span></summary>
        <value><span data-ttu-id="9a871-4322">目前 <see cref="T:System.Type" /> 的控制代碼。</span><span class="sxs-lookup"><span data-stu-id="9a871-4322">The handle for the current <see cref="T:System.Type" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-4323">`TypeHandle` 封裝代表類型的內部資料結構的指標。</span><span class="sxs-lookup"><span data-stu-id="9a871-4323">`TypeHandle` encapsulates a pointer to an internal data structure that represents the type.</span></span> <span data-ttu-id="9a871-4324">這個控制代碼的處理序存留期間是唯一的。</span><span class="sxs-lookup"><span data-stu-id="9a871-4324">This handle is unique during the process lifetime.</span></span> <span data-ttu-id="9a871-4325">控制代碼無效，只能在取得應用程式定義域中。</span><span class="sxs-lookup"><span data-stu-id="9a871-4325">The handle is valid only in the application domain in which it was obtained.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a871-4326">下列範例會傳回對應的型別控制代碼，並將控制代碼傳遞取得控制代碼的類型，並顯示它的方法。</span><span class="sxs-lookup"><span data-stu-id="9a871-4326">The following example returns the handle of the corresponding type and passes the handle to a method that gets the type from the handle and displays it.</span></span>  
  
 [!code-cpp[Type_TypeHandle#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_TypeHandle/CPP/type_typehandle.cpp#1)]
 [!code-csharp[Type_TypeHandle#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_TypeHandle/CS/type_typehandle.cs#1)]
 [!code-vb[Type_TypeHandle#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_TypeHandle/VB/type_typehandle.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="9a871-4327">.NET Compact Framework 目前不支援這個屬性。</span><span class="sxs-lookup"><span data-stu-id="9a871-4327">The .NET Compact Framework does not currently support this property.</span></span></exception>
        <altmember cref="T:System.RuntimeTypeHandle" />
        <altmember cref="M:System.Type.GetTypeHandle(System.Object)" />
        <altmember cref="M:System.Type.GetTypeFromHandle(System.RuntimeTypeHandle)" />
      </Docs>
    </Member>
    <Member MemberName="TypeInitializer">
      <MemberSignature Language="C#" Value="public System.Reflection.ConstructorInfo TypeInitializer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.ConstructorInfo TypeInitializer" />
      <MemberSignature Language="DocId" Value="P:System.Type.TypeInitializer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TypeInitializer As ConstructorInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::ConstructorInfo ^ TypeInitializer { System::Reflection::ConstructorInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TypeInitializer : System.Reflection.ConstructorInfo" Usage="System.Type.TypeInitializer" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.TypeInitializer</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a871-4328">取得類型的初始設定式。</span><span class="sxs-lookup"><span data-stu-id="9a871-4328">Gets the initializer for the type.</span></span></summary>
        <value><span data-ttu-id="9a871-4329">物件，包含 <see cref="T:System.Type" /> 的類別建構函式名稱。</span><span class="sxs-lookup"><span data-stu-id="9a871-4329">An object that contains the name of the class constructor for the <see cref="T:System.Type" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a871-4330">類別初始設定式也都可透過<xref:System.Type.FindMembers%2A>方法，或透過多載<xref:System.Type.GetMember%2A>， <xref:System.Type.GetMembers%2A>， <xref:System.Type.GetConstructor%2A>，並<xref:System.Type.GetConstructors%2A>採用的方法<xref:System.Reflection.BindingFlags>做為參數。</span><span class="sxs-lookup"><span data-stu-id="9a871-4330">Class initializers are also available through the <xref:System.Type.FindMembers%2A> method, or through overloads of the <xref:System.Type.GetMember%2A>, <xref:System.Type.GetMembers%2A>, <xref:System.Type.GetConstructor%2A>, and <xref:System.Type.GetConstructors%2A> methods that take <xref:System.Reflection.BindingFlags> as a parameter.</span></span>  
  
 <span data-ttu-id="9a871-4331">如果目前<xref:System.Type>表示的類型參數的泛型類型或泛型方法定義中這個屬性會傳回`null`。</span><span class="sxs-lookup"><span data-stu-id="9a871-4331">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.ConstructorInfo" />
      </Docs>
    </Member>
    <Member MemberName="UnderlyingSystemType">
      <MemberSignature Language="C#" Value="public abstract Type UnderlyingSystemType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type UnderlyingSystemType" />
      <MemberSignature Language="DocId" Value="P:System.Type.UnderlyingSystemType" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property UnderlyingSystemType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property Type ^ UnderlyingSystemType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UnderlyingSystemType : Type" Usage="System.Type.UnderlyingSystemType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.UnderlyingSystemType</InterfaceMember>
        <InterfaceMember>P:System.Reflection.IReflect.UnderlyingSystemType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a871-4332">指示類型，該類型是由表示這個類型的 Common Language Runtime 所提供的。</span><span class="sxs-lookup"><span data-stu-id="9a871-4332">Indicates the type provided by the common language runtime that represents this type.</span></span></summary>
        <value><span data-ttu-id="9a871-4333"><see cref="T:System.Type" /> 的基礎系統類型。</span><span class="sxs-lookup"><span data-stu-id="9a871-4333">The underlying system type for the <see cref="T:System.Type" />.</span></span></value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Type.BaseType" />
      </Docs>
    </Member>
  </Members>
</Type>