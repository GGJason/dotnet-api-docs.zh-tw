<Type Name="FormatException" FullName="System.FormatException">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4a93dd5a1b32b673492b14ee08fcb14987d8749b" /><Meta Name="ms.sourcegitcommit" Value="0e1f030650a307c745ee84ed547ef858acaea587" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="11/29/2018" /><Meta Name="ms.locfileid" Value="52614784" /></Metadata><TypeSignature Language="C#" Value="public class FormatException : SystemException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit FormatException extends System.SystemException" />
  <TypeSignature Language="DocId" Value="T:System.FormatException" />
  <TypeSignature Language="VB.NET" Value="Public Class FormatException&#xA;Inherits SystemException" />
  <TypeSignature Language="C++ CLI" Value="public ref class FormatException : SystemException" />
  <TypeSignature Language="F#" Value="type FormatException = class&#xA;    inherit SystemException" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Exception</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.SystemException</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>引數格式無效或<see href="https://docs.microsoft.com/dotnet/standard/base-types/composite-formatting">複合格式字串</see>格式不正確時所擲回的例外狀況。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A<xref:System.FormatException>可以擲回例外狀況的其中一個原因如下：  
  
-   在將字串轉換成其他資料類型的方法呼叫中，字串不符合所需的模式。 這通常會發生呼叫的一些方法時<xref:System.Convert>類別和`Parse`和`ParseExact`某些類型的方法。  
  
     在大部分情況下，特別是如果您要轉換的字串是由使用者輸入，或讀取檔案，您應該使用`try/catch`封鎖，並處理<xref:System.FormatException>如果轉換失敗的例外狀況。 您也可以取代呼叫轉換方法，藉由呼叫`TryParse`或`TryParseExact`方法，如果有的話。 不過，<xref:System.FormatException>您想要將預先定義或硬式編碼的字串剖析時擲回的例外狀況表示程式錯誤。 在此情況下，您應該更正錯誤而不處理例外狀況。  
  
     中的下列類型的字串轉換<xref:System>命名空間可能會擲回<xref:System.FormatException>例外狀況：  
  
    -   <xref:System.Boolean>. <xref:System.Boolean.Parse%28System.String%29?displayProperty=nameWithType>和<xref:System.Convert.ToBoolean%28System.String%29?displayProperty=nameWithType>方法都需要字串，以將其轉換為"True"，"true"、"False"false"。 任何其他值則會擲回<xref:System.FormatException>例外狀況。  
  
    -   <xref:System.DateTime> 和 <xref:System.DateTimeOffset>。 根據特定文化特性的格式化慣例解譯所有的日期和時間資料： 可能是目前的執行緒文化特性 （或在某些情況下，目前的應用程式網域文化特性），而異的文化特性或指定的文化特性。 當您呼叫<xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>並<xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>方法，也必須符合日期和時間資料*完全*指定一或多個模式[標準格式字串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)或[自訂格式字串](~/docs/standard/base-types/custom-date-and-time-format-strings.md)提供做為方法呼叫中引數。 如果不符合預期的特定文化特性的模式，<xref:System.FormatException>擲回例外狀況。 這表示，在一個系統上儲存的文化特性特定格式的日期和時間資料可能無法成功剖析另一個系統上。  
  
         如需剖析日期和時間的詳細資訊，請參閱 <<c0> [ 剖析的日期和時間字串](~/docs/standard/base-types/parsing-datetime.md)和擲回例外狀況之方法的文件。  
  
    -   **Guid。** GUID 的字串表示法必須包含 32 個十六進位數字 (0-F)，而且必須是其中一種所輸出的五個格式<xref:System.Guid.ToString%2A?displayProperty=nameWithType>方法。 如需詳細資訊，請參閱 <xref:System.Guid.Parse%2A?displayProperty=nameWithType> 方法。  
  
    -   **數值類型，包括所有帶正負號的整數、 不帶正負號的整數和浮點類型。** 要剖析的字串必須只包含拉丁數字 0-9。 正或負號、 小數分隔符號、 群組分隔符號和貨幣符號也可能會允許。 嘗試剖析字串，包含任何其他字元一律會擲回<xref:System.FormatException>例外狀況。  
  
         所有數字的字串都會解譯依據特定文化特性的格式化慣例： 可能是目前的執行緒文化特性 （或在某些情況下，目前的應用程式網域文化特性），而異的文化特性或指定的文化特性。 如此一來，使用另一個慣例時，可能會失敗使用一個文化特性的慣例剖析數值字串。  
  
         如需有關如何剖析數值字串的詳細資訊，請參閱 <<c0> [ 剖析數值字串](~/docs/standard/base-types/parsing-numeric.md)和擲回例外狀況的特定方法的文件。  
  
    -   **時間間隔。** 要剖析的字串必須是固定的不區分文化特性格式，或由目前執行緒文化特性 （或定義，在某些情況下，目前的應用程式網域文化特性），以區分文化特性的格式而異的文化特性或指定的文化特性。 如果字串不是在適當的格式或如果，在最小值、 天、 小時、 分鐘的時間間隔的元件不存在，剖析方法會擲回<xref:System.FormatException>例外狀況。 如需詳細資訊，請參閱文件<xref:System.TimeSpan>剖析擲回例外狀況的方法。  
  
-   型別實作<xref:System.IFormattable>介面，可支援格式字串會定義如何將物件轉換成其字串表示，並用格式字串無效。 這是一種格式化作業中最常見的。 在下列範例中，"Q"標準格式字串用於複合格式字串來格式化數字。 不過，"Q"不是有效[標準格式字串](~/docs/standard/base-types/standard-numeric-format-strings.md)。  
  
     [!code-csharp[System.FormatException#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.formatexception/cs/iformattable1.cs#7)]
     [!code-vb[System.FormatException#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.formatexception/vb/iformattable1.vb#7)]  
  
     從程式碼的錯誤會造成這個例外狀況。 若要更正錯誤，或移除使用者的格式字串替換成有效。 下列範例會更正錯誤，以"C"（貨幣） 格式字串取代無效的格式字串。  
  
     [!code-csharp[System.FormatException#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.formatexception/cs/iformattable2.cs#8)]
     [!code-vb[System.FormatException#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.formatexception/vb/iformattable2.vb#8)]  
  
     A<xref:System.FormatException>例外狀況也會藉由剖析方法，例如擲回<xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType>和<xref:System.Guid.ParseExact%2A?displayProperty=nameWithType>，需要加以剖析才能完全符合格式字串所指定之模式的字串。 在下列範例中，預期 GUID 的字串表示符合"G"標準格式字串所指定的模式。 不過，<xref:System.Guid>結構的實作<xref:System.IFormattable>不支援"G"格式字串。  
  
     [!code-csharp[System.FormatException#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.formatexception/cs/iformattable3.cs#9)]
     [!code-vb[System.FormatException#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.formatexception/vb/iformattable3.vb#9)]  
  
     此例外狀況也會造成從程式碼的錯誤。 若要更正它，呼叫剖析方法時，不需要精確的格式，例如<xref:System.DateTime.Parse%2A?displayProperty=nameWithType>或<xref:System.Guid.Parse%2A?displayProperty=nameWithType>，或取代有效的格式字串。 下列範例會藉由呼叫來修正錯誤<xref:System.Guid.Parse%2A?displayProperty=nameWithType>方法。  
  
     [!code-csharp[System.FormatException#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.formatexception/cs/iformattable4.cs#10)]
     [!code-vb[System.FormatException#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.formatexception/vb/iformattable4.vb#10)]  
  
-   一或多個格式項目中的索引[複合格式字串](~/docs/standard/base-types/composite-formatting.md)大於物件清單或參數陣列中項目的索引。 在下列範例中，在格式字串的格式項目的最大索引為 3。 在 [物件] 清單中項目的索引是以零起始，因為此格式字串需要物件清單中，有四個項目。 相反地，它有只有三`dat`， `temp`，並`scale`，因此程式碼會產生<xref:System.FormatException>在執行階段的例外狀況:。  
  
     [!code-csharp[System.FormatException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.formatexception/cs/example1.cs#1)]
     [!code-vb[System.FormatException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.formatexception/vb/example1.vb#1)]  
  
     在此情況下，<xref:System.FormatException>例外狀況是開發人員錯誤的結果。 它應該已更正，而處理`try/catch`區塊，藉由確定在 [物件] 清單中的每個項目對應至格式項目的索引。 若要更正此範例中，變更要參考之第二個格式項目的索引`dat`變數，並遞減一個每個後續的格式項目的索引。  
  
     [!code-csharp[System.FormatException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.formatexception/cs/example2.cs#2)]
     [!code-vb[System.FormatException#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.formatexception/vb/example2.vb#2)]  
  
-   複合格式字串的格式不正確。 當發生這種情況時，<xref:System.FormatException>例外狀況永遠是開發人員錯誤的結果。 它應該已更正，而處理`try/catch`區塊。  
  
     嘗試在字串中，包含常值大括號，如下列範例不，將會擲回例外狀況。  
  
     [!code-csharp[System.String.Format#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/qa3.cs#23)]
     [!code-vb[System.String.Format#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/qa3.vb#23)]  
  
     複合格式字串中包括常值大括號的建議的技巧是將它們包含在物件清單，並使用將其插入至結果字串的格式項目。 例如，您可以修改先前的複合格式字串，如下所示。  
  
     [!code-csharp[System.String.Format#24](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/qa3.cs#24)]
     [!code-vb[System.String.Format#24](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/qa3.vb#24)]  
  
     如果您的格式字串包含打錯字，也會擲回例外狀況。 下列呼叫<xref:System.String.Format%2A?displayProperty=nameWithType>方法省略右括號和配對以右括弧的左大括號。  
  
     [!code-csharp[System.FormatException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.formatexception/cs/example3.cs#3)]
     [!code-vb[System.FormatException#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.formatexception/vb/example3.vb#3)]  
  
     若要更正錯誤，請確定所有左右大括號對應。  
  
     [!code-csharp[System.FormatException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.formatexception/cs/example3.cs#4)]
     [!code-vb[System.FormatException#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.formatexception/vb/example3.vb#4)]  
  
-   您已提供 [物件] 清單中的複合格式化方法，以強型別的參數陣列而<xref:System.FormatException>例外狀況表示的一個或多個格式項目索引超出物件清單中的引數數目。 這是因為陣列類型之間沒有明確的轉換存在，因此編譯器會將陣列做為單一引數，而不是參數陣列。 例如，下列呼叫來<xref:System.Console.WriteLine%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>方法會擲回<xref:System.FormatException>例外狀況，雖然格式項目的最高的索引為 3，而參數陣列型別的<xref:System.Int32>有四個項目。  
  
     [!code-csharp[System.FormatException#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.formatexception/cs/qa1.cs#5)]
     [!code-vb[System.FormatException#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.formatexception/vb/qa1.vb#5)]  
  
     而不是處理這個例外狀況，您應該會排除其原因。 因為 Visual Basic 和 C# 都不可以轉換成物件陣列的整數陣列，您必須自行執行轉換，然後再呼叫複合格式化方法。 下列範例提供一個實作。  
  
     [!code-csharp[System.FormatException#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.formatexception/cs/qa2.cs#6)]
     [!code-vb[System.FormatException#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.formatexception/vb/qa2.vb#6)]  
  
 <xref:System.FormatException> 會使用 HRESULT COR_E_FORMAT，其值 0x80131537。  
  
 <xref:System.FormatException>類別衍生自<xref:System.Exception>，並將任何唯一的成員。 如需執行個體的初始屬性值的清單<xref:System.FormatException>，請參閱<xref:System.FormatException.%23ctor%2A>建構函式。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Exception" />
    <related type="Article" href="~/docs/standard/exceptions/index.md">處理和擲回例外狀況</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.FormatException" /> 類別的新執行個體。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FormatException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.FormatException.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FormatException();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.FormatException" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個建構函式初始化<xref:System.Exception.Message%2A>屬性的新執行個體的系統提供的訊息描述錯誤，例如 「 無效的格式。 」 此訊息會考量目前的系統文化特性。  
  
 下表顯示 <xref:System.FormatException> 執行個體的初始屬性值。  
  
|屬性|值|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|null 參考 (在 Visual Basic 中為 `Nothing`)。|  
|<xref:System.Exception.Message%2A>|當地語系化的錯誤訊息字串。|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FormatException (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.FormatException.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FormatException(System::String ^ message);" />
      <MemberSignature Language="F#" Value="new FormatException : string -&gt; FormatException" Usage="new System.FormatException message" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">描述錯誤的訊息。</param>
        <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.FormatException" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個建構函式初始化<xref:System.Exception.Message%2A?displayProperty=nameWithType>屬性的新的例外狀況使用`message`參數。 `message` 的內容必須能讓人了解。 這個建構函式的呼叫端必須確保這個字串已經被當地語系化 (為了目前系統的文化特性)。  
  
 下表顯示 <xref:System.FormatException> 執行個體的初始屬性值。  
  
|屬性|值|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|null 參考 (在 Visual Basic 中為 `Nothing`)。|  
|<xref:System.Exception.Message%2A>|錯誤訊息字串。|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected FormatException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.FormatException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; FormatException(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="new FormatException : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; FormatException" Usage="new System.FormatException (info, context)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">存放序列物件資料的物件。</param>
        <param name="context">關於來源或目的端的內容資訊。</param>
        <summary>使用序列化資料，初始化 <see cref="T:System.FormatException" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 進行還原序列化 (Deserialization) 期間會呼叫這個建構函式，以便重新構成經由資料流傳送的例外狀況物件。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FormatException (string message, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.FormatException.#ctor(System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String, innerException As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FormatException(System::String ^ message, Exception ^ innerException);" />
      <MemberSignature Language="F#" Value="new FormatException : string * Exception -&gt; FormatException" Usage="new System.FormatException (message, innerException)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="message">解釋例外狀況原因的錯誤訊息。</param>
        <param name="innerException">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="innerException" /> 參數不是 Null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)，則會在處理內部例外的 <see langword="catch" /> 區塊中引發目前的例外狀況。</param>
        <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.FormatException" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 被擲回以做為前一個例外狀況直接結果的例外狀況，應該在 <xref:System.Exception.InnerException%2A> 屬性中包含對前一個例外狀況的參考。 <xref:System.Exception.InnerException%2A> 屬性會傳回與傳入建構函式中相同的值；如果 `Nothing` 屬性不提供內部例外值給建構函式，則傳回 null 參考 (在 Visual Basic 中為 <xref:System.Exception.InnerException%2A>)。  
  
 下表顯示 <xref:System.FormatException> 執行個體的初始屬性值。  
  
|屬性|值|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|內部例外狀況參考。|  
|<xref:System.Exception.Message%2A>|錯誤訊息字串。|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Exception" />
        <related type="Article" href="~/docs/standard/exceptions/index.md">處理和擲回例外狀況</related>
      </Docs>
    </Member>
  </Members>
</Type>