<Type Name="StringComparer" FullName="System.StringComparer">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ced8061de4befeb24104a02f855267ba0a712033" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39809503" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class StringComparer : System.Collections.Generic.IComparer&lt;string&gt;, System.Collections.Generic.IEqualityComparer&lt;string&gt;, System.Collections.IComparer, System.Collections.IEqualityComparer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit StringComparer extends System.Object implements class System.Collections.Generic.IComparer`1&lt;string&gt;, class System.Collections.Generic.IEqualityComparer`1&lt;string&gt;, class System.Collections.IComparer, class System.Collections.IEqualityComparer" />
  <TypeSignature Language="DocId" Value="T:System.StringComparer" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class StringComparer&#xA;Implements IComparer, IComparer(Of String), IEqualityComparer, IEqualityComparer(Of String)" />
  <TypeSignature Language="C++ CLI" Value="public ref class StringComparer abstract : System::Collections::Generic::IComparer&lt;System::String ^&gt;, System::Collections::Generic::IEqualityComparer&lt;System::String ^&gt;, System::Collections::IComparer, System::Collections::IEqualityComparer" />
  <TypeSignature Language="F#" Value="type StringComparer = class&#xA;    interface IComparer&#xA;    interface IEqualityComparer&#xA;    interface IComparer&lt;string&gt;&#xA;    interface IEqualityComparer&lt;string&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IComparer&lt;System.String&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEqualityComparer&lt;System.String&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IComparer</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEqualityComparer</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="0f18d-101">代表使用特定大小寫和文化特性架構或序數比較規則的字串比較作業。</span>
      <span class="sxs-lookup">
        <span data-stu-id="0f18d-101">Represents a string comparison operation that uses specific case and culture-based or ordinal comparison rules.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f18d-102">物件衍生自<xref:System.StringComparer>類別包含字串為基礎的比較，相等和雜湊程式碼作業，請考慮這兩個案例與特定文化特性的比較規則。</span><span class="sxs-lookup"><span data-stu-id="0f18d-102">An object derived from the <xref:System.StringComparer> class embodies string-based comparison, equality, and hash code operations that take into account both case and culture-specific comparison rules.</span></span> <span data-ttu-id="0f18d-103">您可以使用<xref:System.StringComparer>類別來建立特定型別的比較來排序的泛型集合中的項目。</span><span class="sxs-lookup"><span data-stu-id="0f18d-103">You can use the <xref:System.StringComparer> class to create a type-specific comparison to sort the elements in a generic collection.</span></span> <span data-ttu-id="0f18d-104">這類類別<xref:System.Collections.Hashtable>， <xref:System.Collections.Generic.Dictionary%602>， <xref:System.Collections.SortedList>，以及<xref:System.Collections.Generic.SortedList%602>使用<xref:System.StringComparer>排序用途的類別。</span><span class="sxs-lookup"><span data-stu-id="0f18d-104">Classes such as <xref:System.Collections.Hashtable>, <xref:System.Collections.Generic.Dictionary%602>, <xref:System.Collections.SortedList>, and <xref:System.Collections.Generic.SortedList%602> use the <xref:System.StringComparer> class for sorting purposes.</span></span>  
  
 <span data-ttu-id="0f18d-105">比對作業，由<xref:System.StringComparer>區分大小寫或區分大小寫，並使用任一單字 （區分文化特性） 定義類別或序數 （不區分文化特性） 的比較規則。</span><span class="sxs-lookup"><span data-stu-id="0f18d-105">A comparison operation that is represented by the <xref:System.StringComparer> class is defined to be either case-sensitive or case-insensitive, and use either word (culture-sensitive) or ordinal (culture-insensitive) comparison rules.</span></span> <span data-ttu-id="0f18d-106">如需 word 和序數比較規則的詳細資訊，請參閱<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="0f18d-106">For more information about word and ordinal comparison rules, see <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>.</span></span>  
  
## <a name="implemented-properties"></a><span data-ttu-id="0f18d-107">實作的屬性</span><span class="sxs-lookup"><span data-stu-id="0f18d-107">Implemented Properties</span></span>  
 <span data-ttu-id="0f18d-108">您可能不清楚如何使用<xref:System.StringComparer>因為紓解矛盾類別內容。</span><span class="sxs-lookup"><span data-stu-id="0f18d-108">You might be confused about how to use the <xref:System.StringComparer> class properties because of a seeming contradiction.</span></span> <span data-ttu-id="0f18d-109"><xref:System.StringComparer>類別的宣告`abstract`(`MustInherit`在 Visual Basic 中)，這表示其成員可只在衍生自類別的物件上叫用<xref:System.StringComparer>類別。</span><span class="sxs-lookup"><span data-stu-id="0f18d-109">The <xref:System.StringComparer> class is declared `abstract` (`MustInherit` in Visual Basic), which means its members can be invoked only on an object of a class derived from the <xref:System.StringComparer> class.</span></span> <span data-ttu-id="0f18d-110">在於每一個屬性的矛盾<xref:System.StringComparer>類別的宣告`static`(`Shared` Visual Basic 中)，這表示此屬性可以叫用不需要先建立衍生的類別。</span><span class="sxs-lookup"><span data-stu-id="0f18d-110">The contradiction is that each property of the <xref:System.StringComparer> class is declared `static` (`Shared` in Visual Basic), which means the property can be invoked without first creating a derived class.</span></span>  
  
 <span data-ttu-id="0f18d-111">您可以呼叫<xref:System.StringComparer>屬性直接因為每一個屬性實際上會傳回衍生自匿名類別的執行個體<xref:System.StringComparer>類別。</span><span class="sxs-lookup"><span data-stu-id="0f18d-111">You can call a <xref:System.StringComparer> property directly because each property actually returns an instance of an anonymous class that is derived from the <xref:System.StringComparer> class.</span></span> <span data-ttu-id="0f18d-112">因此，每個屬性值的型別是<xref:System.StringComparer>，這不是匿名類別的基底類別的匿名型別類別本身。</span><span class="sxs-lookup"><span data-stu-id="0f18d-112">Consequently, the type of each property value is <xref:System.StringComparer>, which is the base class of the anonymous class, not the type of the anonymous class itself.</span></span> <span data-ttu-id="0f18d-113">每個<xref:System.StringComparer>類別屬性會傳回<xref:System.StringComparer>支援預先定義的大小寫和比較規則的物件。</span><span class="sxs-lookup"><span data-stu-id="0f18d-113">Each <xref:System.StringComparer> class property returns a <xref:System.StringComparer> object that supports predefined case and comparison rules.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0f18d-114">下列範例示範屬性和<xref:System.StringComparer.Create%2A>方法的<xref:System.StringComparer>類別。</span><span class="sxs-lookup"><span data-stu-id="0f18d-114">The following example demonstrates the properties and the <xref:System.StringComparer.Create%2A> method of the <xref:System.StringComparer> class.</span></span> <span data-ttu-id="0f18d-115">此範例說明不同<xref:System.StringComparer>物件排序的三個版本拉丁文字母 I。</span><span class="sxs-lookup"><span data-stu-id="0f18d-115">The example illustrates how different <xref:System.StringComparer> objects sort three versions of the Latin letter I.</span></span>  
  
 [!code-cpp[System.StringComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.StringComparer/cpp/omni.cpp#1)]
 [!code-csharp[System.StringComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer/cs/omni.cs#1)]
 [!code-vb[System.StringComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer/vb/omni.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.String" />
    <altmember cref="T:System.Globalization.CompareOptions" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected StringComparer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; StringComparer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="0f18d-116">初始化 <see cref="T:System.StringComparer" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f18d-116">Initializes a new instance of the <see cref="T:System.StringComparer" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Compare">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="0f18d-117">比較兩個物件或字串，並且傳回其相對排序次序的指示。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f18d-117">Compares two objects or strings and returns an indication of their relative sort order.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public int Compare (object x, object y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(object x, object y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.Compare(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Compare (x As Object, y As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Compare(System::Object ^ x, System::Object ^ y);" />
      <MemberSignature Language="F#" Value="abstract member Compare : obj * obj -&gt; int&#xA;override this.Compare : obj * obj -&gt; int" Usage="stringComparer.Compare (x, y)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IComparer.Compare(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Object" />
        <Parameter Name="y" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="x">
          <span data-ttu-id="0f18d-118">要與 <c>y</c> 相比較的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f18d-118">An object to compare to <c>y</c>.</span>
          </span>
        </param>
        <param name="y">
          <span data-ttu-id="0f18d-119">要與 <c>x</c> 相比較的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f18d-119">An object to compare to <c>x</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f18d-120">以衍生類別覆寫時，比較兩個物件，並且傳回其相對排序次序的指示。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f18d-120">When overridden in a derived class, compares two objects and returns an indication of their relative sort order.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f18d-121">帶正負號的整數，表示 <paramref name="x" /> 和 <paramref name="y" /> 的相對值，如下表所示。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f18d-121">A signed integer that indicates the relative values of <paramref name="x" /> and <paramref name="y" />, as shown in the following table.</span>
          </span>
          <span data-ttu-id="0f18d-122">
            <list type="table">
              <listheader>
                <term> 值  </term>
                <description> 意義  </description>
              </listheader>
              <item>
                <term> 小於零  </term>
                <description>
                  <paramref name="x" /> 在排序順序中優先於 <paramref name="y" />。  -或-  <paramref name="x" /> 是 <see langword="null" /> 且 <paramref name="y" /> 不是 <see langword="null" />。</description>
              </item>
              <item>
                <term> 零  </term>
                <description>
                  <paramref name="x" /> 等於 <paramref name="y" />。  -或-  <paramref name="x" /> 與 <paramref name="y" /> 都是 <see langword="null" />。</description>
              </item>
              <item>
                <term> 大於零  </term>
                <description>
                  <paramref name="x" /> 在排序順序中排在 <paramref name="y" /> 之後。  -或-  <paramref name="y" /> 是 <see langword="null" /> 且 <paramref name="x" /> 不是 <see langword="null" />。</description>
              </item>
            </list>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="0f18d-122">
              <list type="table">
                <listheader>
                  <term> Value  </term>
                  <description> Meaning  </description>
                </listheader>
                <item>
                  <term> Less than zero  </term>
                  <description>
                    <paramref name="x" /> precedes  <paramref name="y" /> in the sort order.  -or-  <paramref name="x" /> is <see langword="null" /> and <paramref name="y" /> is not <see langword="null" />.  </description>
                </item>
                <item>
                  <term> Zero  </term>
                  <description>
                    <paramref name="x" /> is equal to <paramref name="y" />.  -or-  <paramref name="x" /> and <paramref name="y" /> are both <see langword="null" />.  </description>
                </item>
                <item>
                  <term> Greater than zero  </term>
                  <description>
                    <paramref name="x" /> follows <paramref name="y" /> in the sort order.  -or-  <paramref name="y" /> is <see langword="null" /> and <paramref name="x" /> is not <see langword="null" />.  </description>
                </item>
              </list>
            </span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f18d-123"><xref:System.StringComparer.Compare%28System.String%2CSystem.String%29?displayProperty=nameWithType>方法會比稍微更有效率<xref:System.StringComparer.Compare%28System.Object%2CSystem.Object%29?displayProperty=nameWithType>方法因為任何轉換`x`和`y`引數，才能執行比較。</span><span class="sxs-lookup"><span data-stu-id="0f18d-123">The <xref:System.StringComparer.Compare%28System.String%2CSystem.String%29?displayProperty=nameWithType> method is slightly more efficient than the <xref:System.StringComparer.Compare%28System.Object%2CSystem.Object%29?displayProperty=nameWithType> method because no conversion of the `x` and `y` arguments is needed to perform the comparison.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="0f18d-124">
            <paramref name="x" /> 和 <paramref name="y" /> 都不是 <see cref="T:System.String" /> 物件，而且 <paramref name="x" /> 和 <paramref name="y" /> 都未實作 <see cref="T:System.IComparable" /> 介面。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f18d-124">Neither <paramref name="x" /> nor <paramref name="y" /> is a <see cref="T:System.String" /> object, and neither <paramref name="x" /> nor <paramref name="y" /> implements the <see cref="T:System.IComparable" /> interface.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public abstract int Compare (string x, string y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(string x, string y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.Compare(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Compare (x As String, y As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract int Compare(System::String ^ x, System::String ^ y);" />
      <MemberSignature Language="F#" Value="abstract member Compare : string * string -&gt; int" Usage="stringComparer.Compare (x, y)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IComparer`1.Compare(`0,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.String" />
        <Parameter Name="y" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
          <span data-ttu-id="0f18d-125">要與 <c>y</c> 相比較的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f18d-125">A string to compare to <c>y</c>.</span>
          </span>
        </param>
        <param name="y">
          <span data-ttu-id="0f18d-126">要與 <c>x</c> 相比較的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f18d-126">A string to compare to <c>x</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f18d-127">以衍生類別覆寫時，比較兩個字串，並且傳回其相對排序次序的指示。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f18d-127">When overridden in a derived class, compares two strings and returns an indication of their relative sort order.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f18d-128">帶正負號的整數，表示 <paramref name="x" /> 和 <paramref name="y" /> 的相對值，如下表所示。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f18d-128">A signed integer that indicates the relative values of <paramref name="x" /> and <paramref name="y" />, as shown in the following table.</span>
          </span>
          <span data-ttu-id="0f18d-129">
            <list type="table">
              <listheader>
                <term> 值  </term>
                <description> 意義  </description>
              </listheader>
              <item>
                <term> 小於零  </term>
                <description>
                  <paramref name="x" /> 在排序順序中優先於 <paramref name="y" />。  -或-  <paramref name="x" /> 是 <see langword="null" /> 且 <paramref name="y" /> 不是 <see langword="null" />。</description>
              </item>
              <item>
                <term> 零  </term>
                <description>
                  <paramref name="x" /> 等於 <paramref name="y" />。  -或-  <paramref name="x" /> 與 <paramref name="y" /> 都是 <see langword="null" />。</description>
              </item>
              <item>
                <term> 大於零  </term>
                <description>
                  <paramref name="x" /> 在排序順序中排在 <paramref name="y" /> 之後。  -或-  <paramref name="y" /> 是 <see langword="null" /> 且 <paramref name="x" /> 不是 <see langword="null" />。</description>
              </item>
            </list>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="0f18d-129">
              <list type="table">
                <listheader>
                  <term> Value  </term>
                  <description> Meaning  </description>
                </listheader>
                <item>
                  <term> Less than zero  </term>
                  <description>
                    <paramref name="x" /> precedes <paramref name="y" /> in the sort order.  -or-  <paramref name="x" /> is <see langword="null" /> and <paramref name="y" /> is not <see langword="null" />.  </description>
                </item>
                <item>
                  <term> Zero  </term>
                  <description>
                    <paramref name="x" /> is equal to <paramref name="y" />.  -or-  <paramref name="x" /> and <paramref name="y" /> are both <see langword="null" />.  </description>
                </item>
                <item>
                  <term> Greater than zero  </term>
                  <description>
                    <paramref name="x" /> follows <paramref name="y" /> in the sort order.  -or-  <paramref name="y" /> is <see langword="null" /> and <paramref name="x" /> is not <see langword="null" />.  </description>
                </item>
              </list>
            </span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f18d-130"><xref:System.StringComparer.Compare%28System.String%2CSystem.String%29?displayProperty=nameWithType>方法會比稍微更有效率<xref:System.StringComparer.Compare%28System.Object%2CSystem.Object%29?displayProperty=nameWithType>方法因為任何轉換`x`和`y`引數，才能執行比較。</span><span class="sxs-lookup"><span data-stu-id="0f18d-130">The <xref:System.StringComparer.Compare%28System.String%2CSystem.String%29?displayProperty=nameWithType> method is slightly more efficient than the <xref:System.StringComparer.Compare%28System.Object%2CSystem.Object%29?displayProperty=nameWithType> method because no conversion of the `x` and `y` arguments is needed to perform the comparison.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static StringComparer Create (System.Globalization.CultureInfo culture, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.StringComparer Create(class System.Globalization.CultureInfo culture, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.Create(System.Globalization.CultureInfo,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (culture As CultureInfo, ignoreCase As Boolean) As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static StringComparer ^ Create(System::Globalization::CultureInfo ^ culture, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="static member Create : System.Globalization.CultureInfo * bool -&gt; StringComparer" Usage="System.StringComparer.Create (culture, ignoreCase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="culture">
          <span data-ttu-id="0f18d-131">文化特性，其語言規則可用於執行字串比較。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f18d-131">A culture whose linguistic rules are used to perform a string comparison.</span>
          </span>
        </param>
        <param name="ignoreCase">
          <span data-ttu-id="0f18d-132">
            <see langword="true" /> 表示將比較作業指定為不區分大小寫，<see langword="false" /> 表示將比較作業指定為區分大小寫。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f18d-132">
              <see langword="true" /> to specify that comparison operations be case-insensitive; <see langword="false" /> to specify that comparison operations be case-sensitive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f18d-133">建立 <see cref="T:System.StringComparer" /> 物件，以依據指定文化特性的規則比較字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f18d-133">Creates a <see cref="T:System.StringComparer" /> object that compares strings according to the rules of a specified culture.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f18d-134">新的 <see cref="T:System.StringComparer" /> 物件，會依據 <paramref name="culture" /> 參數使用的比較規則，以及 <paramref name="ignoreCase" /> 參數指定的大小寫規則，執行字串比較。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f18d-134">A new <see cref="T:System.StringComparer" /> object that performs string comparisons according to the comparison rules used by the <paramref name="culture" /> parameter and the case rule specified by the <paramref name="ignoreCase" /> parameter.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="0f18d-135">下列程式碼範例示範屬性和<xref:System.StringComparer.Create%2A>方法的<xref:System.StringComparer>類別。</span><span class="sxs-lookup"><span data-stu-id="0f18d-135">The following code example demonstrates the properties and the <xref:System.StringComparer.Create%2A> method of the <xref:System.StringComparer> class.</span></span> <span data-ttu-id="0f18d-136">此範例說明不同<xref:System.StringComparer>物件排序的三個版本拉丁文字母 I。</span><span class="sxs-lookup"><span data-stu-id="0f18d-136">The example illustrates how different <xref:System.StringComparer> objects sort three versions of the Latin letter I.</span></span>  
  
 [!code-cpp[System.StringComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.StringComparer/cpp/omni.cpp#1)]
 [!code-csharp[System.StringComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer/cs/omni.cs#1)]
 [!code-vb[System.StringComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer/vb/omni.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0f18d-137">
            <paramref name="culture" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f18d-137">
              <paramref name="culture" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static StringComparer Create (System.Globalization.CultureInfo culture, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.StringComparer Create(class System.Globalization.CultureInfo culture, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.Create(System.Globalization.CultureInfo,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (culture As CultureInfo, options As CompareOptions) As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static StringComparer ^ Create(System::Globalization::CultureInfo ^ culture, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="static member Create : System.Globalization.CultureInfo * System.Globalization.CompareOptions -&gt; StringComparer" Usage="System.StringComparer.Create (culture, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="culture">To be added.</param>
        <param name="options">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentCulture">
      <MemberSignature Language="C#" Value="public static StringComparer CurrentCulture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.StringComparer CurrentCulture" />
      <MemberSignature Language="DocId" Value="P:System.StringComparer.CurrentCulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentCulture As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property StringComparer ^ CurrentCulture { StringComparer ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentCulture : StringComparer" Usage="System.StringComparer.CurrentCulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0f18d-138">取得 <see cref="T:System.StringComparer" /> 物件；此物件會使用目前文化特性的字組比較規則，執行區分大小寫字串的比較。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f18d-138">Gets a <see cref="T:System.StringComparer" /> object that performs a case-sensitive string comparison using the word comparison rules of the current culture.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0f18d-139">新的 <see cref="T:System.StringComparer" /> 物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f18d-139">A new <see cref="T:System.StringComparer" /> object.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f18d-140"><xref:System.StringComparer>所傳回<xref:System.StringComparer.CurrentCulture%2A>語言相關字串時，就可以使用屬性。</span><span class="sxs-lookup"><span data-stu-id="0f18d-140">The <xref:System.StringComparer> returned by the <xref:System.StringComparer.CurrentCulture%2A> property can be used when strings are linguistically relevant.</span></span> <span data-ttu-id="0f18d-141">比方說，如果字串會顯示給使用者，或字串是使用者互動的結果，區分文化特性字串比較應該用來排序字串資料。</span><span class="sxs-lookup"><span data-stu-id="0f18d-141">For example, if strings are displayed to the user, or if strings are the result of user interaction, culture-sensitive string comparison should be used to order the string data.</span></span>  
  
 <span data-ttu-id="0f18d-142">目前的文化特性是<xref:System.Globalization.CultureInfo>與目前執行緒相關聯的物件。</span><span class="sxs-lookup"><span data-stu-id="0f18d-142">The current culture is the <xref:System.Globalization.CultureInfo> object associated with the current thread.</span></span>  
  
 <span data-ttu-id="0f18d-143"><xref:System.StringComparer.CurrentCulture%2A>屬性實際上會傳回衍生自匿名類別的執行個體<xref:System.StringComparer>類別。</span><span class="sxs-lookup"><span data-stu-id="0f18d-143">The <xref:System.StringComparer.CurrentCulture%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class.</span></span>  
  
 <span data-ttu-id="0f18d-144">每次呼叫<xref:System.StringComparer.CurrentCulture%2A>屬性`get`存取子會傳回新<xref:System.StringComparer>物件一般，如下列程式碼所示。</span><span class="sxs-lookup"><span data-stu-id="0f18d-144">Each call to the <xref:System.StringComparer.CurrentCulture%2A> property `get` accessor returns a new <xref:System.StringComparer> object, as the following code shows.</span></span>  
  
 [!code-csharp[System.StringComparer.CurrentCulture#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer.CurrentCulture/cs/CompareObjects.cs#1)]
 [!code-vb[System.StringComparer.CurrentCulture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer.CurrentCulture/vb/CompareObjects.vb#1)]  
  
 <span data-ttu-id="0f18d-145">若要改善效能，您可以儲存<xref:System.StringComparer>物件中的本機變數，而不是擷取的值<xref:System.StringComparer.CurrentCulture%2A>屬性多次。</span><span class="sxs-lookup"><span data-stu-id="0f18d-145">To improve performance, you can store the <xref:System.StringComparer> object in a local variable rather than retrieve the value of the <xref:System.StringComparer.CurrentCulture%2A> property multiple times.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0f18d-146">下列程式碼範例示範屬性和<xref:System.StringComparer.Create%2A>方法的<xref:System.StringComparer>類別。</span><span class="sxs-lookup"><span data-stu-id="0f18d-146">The following code example demonstrates the properties and the <xref:System.StringComparer.Create%2A> method of the <xref:System.StringComparer> class.</span></span> <span data-ttu-id="0f18d-147">此範例說明不同<xref:System.StringComparer>物件排序的三個版本拉丁文字母 I。</span><span class="sxs-lookup"><span data-stu-id="0f18d-147">The example illustrates how different <xref:System.StringComparer> objects sort three versions of the Latin letter I.</span></span>  
  
 [!code-cpp[System.StringComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.StringComparer/cpp/omni.cpp#1)]
 [!code-csharp[System.StringComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer/cs/omni.cs#1)]
 [!code-vb[System.StringComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer/vb/omni.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentCultureIgnoreCase">
      <MemberSignature Language="C#" Value="public static StringComparer CurrentCultureIgnoreCase { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.StringComparer CurrentCultureIgnoreCase" />
      <MemberSignature Language="DocId" Value="P:System.StringComparer.CurrentCultureIgnoreCase" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentCultureIgnoreCase As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property StringComparer ^ CurrentCultureIgnoreCase { StringComparer ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentCultureIgnoreCase : StringComparer" Usage="System.StringComparer.CurrentCultureIgnoreCase" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0f18d-148">取得 <see cref="T:System.StringComparer" /> 物件，此物件會使用目前文化特性的字組比較規則，執行不區分大小寫字串的比較。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f18d-148">Gets a <see cref="T:System.StringComparer" /> object that performs case-insensitive string comparisons using the word comparison rules of the current culture.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0f18d-149">新的 <see cref="T:System.StringComparer" /> 物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f18d-149">A new <see cref="T:System.StringComparer" /> object.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f18d-150">目前的文化特性是<xref:System.Globalization.CultureInfo>與目前執行緒相關聯的物件。</span><span class="sxs-lookup"><span data-stu-id="0f18d-150">The current culture is the <xref:System.Globalization.CultureInfo> object associated with the current thread.</span></span>  
  
 <span data-ttu-id="0f18d-151"><xref:System.StringComparer>所傳回<xref:System.StringComparer.CurrentCultureIgnoreCase%2A>字串是語言相關，但不是兩者的大小寫時，就可以使用屬性。</span><span class="sxs-lookup"><span data-stu-id="0f18d-151">The <xref:System.StringComparer> returned by the <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> property can be used when strings are linguistically relevant but their case is not.</span></span> <span data-ttu-id="0f18d-152">例如，如果字串會顯示給使用者，但就不重要，區分文化特性，不區分大小寫的字串比較應該用來排序字串資料。</span><span class="sxs-lookup"><span data-stu-id="0f18d-152">For example, if strings are displayed to the user but case is unimportant, culture-sensitive, case-insensitive string comparison should be used to order the string data.</span></span>  
  
 <span data-ttu-id="0f18d-153"><xref:System.StringComparer.CurrentCultureIgnoreCase%2A>屬性實際上會傳回衍生自匿名類別的執行個體<xref:System.StringComparer>類別。</span><span class="sxs-lookup"><span data-stu-id="0f18d-153">The <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class.</span></span>  
  
 <span data-ttu-id="0f18d-154">每次呼叫<xref:System.StringComparer.CurrentCultureIgnoreCase%2A>屬性`get`存取子會傳回新<xref:System.StringComparer>物件一般，如下列程式碼所示。</span><span class="sxs-lookup"><span data-stu-id="0f18d-154">Each call to the <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> property `get` accessor returns a new <xref:System.StringComparer> object, as the following code shows.</span></span>  
  
 [!code-csharp[System.StringComparer.CurrentCulture#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer.CurrentCulture/cs/CompareObjects.cs#2)]
 [!code-vb[System.StringComparer.CurrentCulture#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer.CurrentCulture/vb/CompareObjects.vb#2)]  
  
 <span data-ttu-id="0f18d-155">若要改善效能，您可以儲存<xref:System.StringComparer>物件中的本機變數，而不是擷取的值<xref:System.StringComparer.CurrentCultureIgnoreCase%2A>屬性多次。</span><span class="sxs-lookup"><span data-stu-id="0f18d-155">To improve performance, you can store the <xref:System.StringComparer> object in a local variable rather than retrieve the value of the <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> property multiple times.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="0f18d-156">以衍生類別覆寫時，表示兩個物件或字串是否相等。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f18d-156">When overridden in a derived class, indicates whether two objects or strings are equal.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (object x, object y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(object x, object y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.Equals(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (x As Object, y As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(System::Object ^ x, System::Object ^ y);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj * obj -&gt; bool" Usage="stringComparer.Equals (x, y)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEqualityComparer.Equals(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Object" />
        <Parameter Name="y" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="x">
          <span data-ttu-id="0f18d-157">要與 <c>y</c> 相比較的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f18d-157">An object to compare to <c>y</c>.</span>
          </span>
        </param>
        <param name="y">
          <span data-ttu-id="0f18d-158">要與 <c>x</c> 相比較的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f18d-158">An object to compare to <c>x</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f18d-159">以衍生類別覆寫時，表示兩個物件是否相等。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f18d-159">When overridden in a derived class, indicates whether two objects are equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f18d-160">當 <see langword="true" /> 和 <paramref name="x" /> 全都參考相同的物件，或 <paramref name="y" /> 和 <paramref name="x" /> 全都是相同的物件類型，而且 <paramref name="y" /> 和 <paramref name="x" /> 是 <paramref name="y" /> 時為 <see langword="null" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f18d-160">
              <see langword="true" /> if <paramref name="x" /> and <paramref name="y" /> refer to the same object, or <paramref name="x" /> and <paramref name="y" /> are both the same type of object and those objects are equal, or both <paramref name="x" /> and <paramref name="y" /> are <see langword="null" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f18d-161">因為執行階段並沒有要 unbox`x`或`y`如果其為實值型別，或嘗試向下轉型為`x`或`y`如果它們都是參考類型的字串<xref:System.StringComparer.Equals%28System.String%2CSystem.String%29>方法可能比稍微更有效率<xref:System.StringComparer.Equals%28System.Object%2CSystem.Object%29>方法。</span><span class="sxs-lookup"><span data-stu-id="0f18d-161">Because the runtime does not have to unbox `x` or `y` if they are value types or attempt to downcast `x` or `y` to strings if they are reference types, the <xref:System.StringComparer.Equals%28System.String%2CSystem.String%29> method may be slightly more efficient than the <xref:System.StringComparer.Equals%28System.Object%2CSystem.Object%29> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public abstract bool Equals (string x, string y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(string x, string y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.Equals(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Equals (x As String, y As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool Equals(System::String ^ x, System::String ^ y);" />
      <MemberSignature Language="F#" Value="override this.Equals : string * string -&gt; bool" Usage="stringComparer.Equals (x, y)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.String" />
        <Parameter Name="y" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
          <span data-ttu-id="0f18d-162">要與 <c>y</c> 相比較的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f18d-162">A string to compare to <c>y</c>.</span>
          </span>
        </param>
        <param name="y">
          <span data-ttu-id="0f18d-163">要與 <c>x</c> 相比較的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f18d-163">A string to compare to <c>x</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f18d-164">以衍生類別覆寫時，表示兩個字串是否相等。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f18d-164">When overridden in a derived class, indicates whether two strings are equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f18d-165">當 <see langword="true" /> 和 <paramref name="x" /> 全都參考相同的物件、<paramref name="y" /> 和 <paramref name="x" /> 相等，或 <paramref name="y" /> 和 <paramref name="x" /> 為 <paramref name="y" /> 時為 <see langword="null" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f18d-165">
              <see langword="true" /> if <paramref name="x" /> and <paramref name="y" /> refer to the same object, or <paramref name="x" /> and <paramref name="y" /> are equal, or <paramref name="x" /> and <paramref name="y" /> are <see langword="null" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f18d-166">因為執行階段並沒有要 unbox`x`或`y`如果其為實值型別，或嘗試向下轉型為`x`或`y`如果它們都是參考類型的字串<xref:System.StringComparer.Equals%28System.String%2CSystem.String%29>方法可能比稍微更有效率<xref:System.StringComparer.Equals%28System.Object%2CSystem.Object%29>方法。</span><span class="sxs-lookup"><span data-stu-id="0f18d-166">Because the runtime does not have to unbox `x` or `y` if they are value types or attempt to downcast `x` or `y` to strings if they are reference types, the <xref:System.StringComparer.Equals%28System.String%2CSystem.String%29> method may be slightly more efficient than the <xref:System.StringComparer.Equals%28System.Object%2CSystem.Object%29> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromComparison">
      <MemberSignature Language="C#" Value="public static StringComparer FromComparison (StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.StringComparer FromComparison(valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.FromComparison(System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromComparison (comparisonType As StringComparison) As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static StringComparer ^ FromComparison(StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="static member FromComparison : StringComparison -&gt; StringComparer" Usage="System.StringComparer.FromComparison comparisonType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparisonType" Type="System.StringComparison" />
      </Parameters>
      <Docs>
        <param name="comparisonType">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetHashCode">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="0f18d-167">在被衍生類別覆寫時，取得目前 <see cref="T:System.StringComparer" /> 物件的雜湊碼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f18d-167">When overridden in a derived class, gets the hash code for the current <see cref="T:System.StringComparer" /> object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public int GetHashCode (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetHashCode(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.GetHashCode(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetHashCode (obj As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetHashCode(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : obj -&gt; int" Usage="stringComparer.GetHashCode obj" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEqualityComparer.GetHashCode(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="0f18d-168">物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f18d-168">An object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f18d-169">以衍生類別覆寫時，取得指定之物件的雜湊碼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f18d-169">When overridden in a derived class, gets the hash code for the specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f18d-170">從 <paramref name="obj" /> 參數值計算所得之 32 位元帶正負號的雜湊碼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f18d-170">A 32-bit signed hash code calculated from the value of the <paramref name="obj" /> parameter.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f18d-171"><xref:System.StringComparer.GetHashCode%28System.String%29>方法的效率高於<xref:System.StringComparer.GetHashCode%2A>方法因為`obj`參數沒有 unboxed 執行作業。</span><span class="sxs-lookup"><span data-stu-id="0f18d-171">The <xref:System.StringComparer.GetHashCode%28System.String%29> method is more efficient than the <xref:System.StringComparer.GetHashCode%2A> method because the `obj` parameter does not have to be unboxed to perform the operation.</span></span>  
  
 <span data-ttu-id="0f18d-172"><xref:System.StringComparer.GetHashCode%28System.Object%29>方法會配置的大小成正比的記憶體數量`obj`若要計算的雜湊碼`obj`。</span><span class="sxs-lookup"><span data-stu-id="0f18d-172">The <xref:System.StringComparer.GetHashCode%28System.Object%29> method allocates an amount of memory that is proportional to the size of `obj` to calculate the hash code of `obj`.</span></span> <span data-ttu-id="0f18d-173">針對大型的字串，會嘗試擷取雜湊程式碼可能會擲回<xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="0f18d-173">In the case of large strings, trying to retrieve the hash code can throw an <xref:System.ArgumentException>.</span></span> <span data-ttu-id="0f18d-174">相反地，您可以使用替代演算法配置固定的記憶體數量，計算雜湊程式碼時。</span><span class="sxs-lookup"><span data-stu-id="0f18d-174">Instead, you can use an alternate algorithm that allocates a fixed amount of memory when calculating hash codes.</span></span> <span data-ttu-id="0f18d-175">若要使用此演算法，新增[< NetFx45_CultureAwareComparerGetHashCode_LongStrings >](~/docs/framework/configure-apps/file-schema/runtime/netfx45-cultureawarecomparergethashcode-longstrings-element.md)項目[ \<runtime >](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md)您的應用程式組態檔區段。</span><span class="sxs-lookup"><span data-stu-id="0f18d-175">To use this algorithm, add the [<NetFx45_CultureAwareComparerGetHashCode_LongStrings>](~/docs/framework/configure-apps/file-schema/runtime/netfx45-cultureawarecomparergethashcode-longstrings-element.md) element to the [\<runtime>](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md) section of your application's configuration file.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="0f18d-176">記憶體不足，無法配置用來計算雜湊碼所需的緩衝區。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f18d-176">Not enough memory is available to allocate the buffer that is required to compute the hash code.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0f18d-177">
            <paramref name="obj" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f18d-177">
              <paramref name="obj" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="  &#xA;            T:System.ArgumentException">
          <span data-ttu-id="0f18d-178">記憶體不足，無法配置用來計算雜湊碼所需的緩衝區。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f18d-178">Not enough memory is available to allocate the buffer that is required to compute the hash code.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public abstract int GetHashCode (string obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetHashCode(string obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.GetHashCode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetHashCode (obj As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract int GetHashCode(System::String ^ obj);" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : string -&gt; int" Usage="stringComparer.GetHashCode obj" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="0f18d-179">字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f18d-179">A string.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f18d-180">以衍生類別覆寫時，取得指定之字串的雜湊碼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f18d-180">When overridden in a derived class, gets the hash code for the specified string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f18d-181">從 <paramref name="obj" /> 參數值計算所得之 32 位元帶正負號的雜湊碼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f18d-181">A 32-bit signed hash code calculated from the value of the <paramref name="obj" /> parameter.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f18d-182"><xref:System.StringComparer.GetHashCode%28System.String%29>方法的效率高於<xref:System.StringComparer.GetHashCode%28System.Object%29>方法因為`obj`參數沒有 unboxed 執行作業。</span><span class="sxs-lookup"><span data-stu-id="0f18d-182">The <xref:System.StringComparer.GetHashCode%28System.String%29> method is more efficient than the <xref:System.StringComparer.GetHashCode%28System.Object%29> method because the `obj` parameter does not have to be unboxed to perform the operation.</span></span>  
  
 <span data-ttu-id="0f18d-183"><xref:System.StringComparer.GetHashCode%28System.String%29>方法會配置的大小成正比的記憶體數量`obj`若要計算的雜湊碼`obj`。</span><span class="sxs-lookup"><span data-stu-id="0f18d-183">The <xref:System.StringComparer.GetHashCode%28System.String%29> method allocates an amount of memory that is proportional to the size of `obj` to calculate the hash code of `obj`.</span></span> <span data-ttu-id="0f18d-184">針對大型的字串，會嘗試擷取雜湊程式碼可能會擲回<xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="0f18d-184">In the case of large strings, trying to retrieve the hash code can throw an <xref:System.ArgumentException>.</span></span> <span data-ttu-id="0f18d-185">相反地，您可以使用替代演算法配置固定的記憶體數量，計算雜湊程式碼時。</span><span class="sxs-lookup"><span data-stu-id="0f18d-185">Instead, you can use an alternate algorithm that allocates a fixed amount of memory when calculating hash codes.</span></span> <span data-ttu-id="0f18d-186">若要使用此演算法，新增[< NetFx45_CultureAwareComparerGetHashCode_LongStrings >](~/docs/framework/configure-apps/file-schema/runtime/netfx45-cultureawarecomparergethashcode-longstrings-element.md)項目[ \<runtime >](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md)您的應用程式組態檔區段。</span><span class="sxs-lookup"><span data-stu-id="0f18d-186">To use this algorithm, add the [<NetFx45_CultureAwareComparerGetHashCode_LongStrings>](~/docs/framework/configure-apps/file-schema/runtime/netfx45-cultureawarecomparergethashcode-longstrings-element.md) element to the [\<runtime>](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md) section of your application's configuration file.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="0f18d-187">記憶體不足，無法配置用來計算雜湊碼所需的緩衝區。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f18d-187">Not enough memory is available to allocate the buffer that is required to compute the hash code.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0f18d-188">
            <paramref name="obj" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f18d-188">
              <paramref name="obj" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="  &#xA;            T:System.ArgumentException">
          <span data-ttu-id="0f18d-189">記憶體不足，無法配置用來計算雜湊碼所需的緩衝區。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f18d-189">Not enough memory is available to allocate the buffer that is required to compute the hash code.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="InvariantCulture">
      <MemberSignature Language="C#" Value="public static StringComparer InvariantCulture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.StringComparer InvariantCulture" />
      <MemberSignature Language="DocId" Value="P:System.StringComparer.InvariantCulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property InvariantCulture As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property StringComparer ^ InvariantCulture { StringComparer ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InvariantCulture : StringComparer" Usage="System.StringComparer.InvariantCulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0f18d-190">取得 <see cref="T:System.StringComparer" /> 物件；此物件會使用不因國別而異的文化特性的字組比較規則，執行區分大小寫字串的比較。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f18d-190">Gets a <see cref="T:System.StringComparer" /> object that performs a case-sensitive string comparison using the word comparison rules of the invariant culture.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0f18d-191">新的 <see cref="T:System.StringComparer" /> 物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f18d-191">A new <see cref="T:System.StringComparer" /> object.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f18d-192"><xref:System.StringComparer>所傳回<xref:System.StringComparer.InvariantCulture%2A>屬性以語言相關的方式比較字串，但不適合顯示在任何特定的文化特性。</span><span class="sxs-lookup"><span data-stu-id="0f18d-192">The <xref:System.StringComparer> returned by the <xref:System.StringComparer.InvariantCulture%2A> property compares strings in a linguistically relevant manner, but it is not suitable for display in any particular culture.</span></span> <span data-ttu-id="0f18d-193">其主要的應用程式是順序的字串將會是跨文化特性相同的方式。</span><span class="sxs-lookup"><span data-stu-id="0f18d-193">Its major application is to order strings in a way that will be identical across cultures.</span></span>  
  
 <span data-ttu-id="0f18d-194">而異的文化特性<xref:System.Globalization.CultureInfo>所傳回的物件<xref:System.Globalization.CultureInfo.InvariantCulture%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="0f18d-194">The invariant culture is the <xref:System.Globalization.CultureInfo> object returned by the <xref:System.Globalization.CultureInfo.InvariantCulture%2A> property.</span></span>  
  
 <span data-ttu-id="0f18d-195"><xref:System.StringComparer.InvariantCulture%2A>屬性實際上會傳回衍生自匿名類別的執行個體<xref:System.StringComparer>類別。</span><span class="sxs-lookup"><span data-stu-id="0f18d-195">The <xref:System.StringComparer.InvariantCulture%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0f18d-196">下列程式碼範例示範屬性和<xref:System.StringComparer.Create%2A>方法的<xref:System.StringComparer>類別。</span><span class="sxs-lookup"><span data-stu-id="0f18d-196">The following code example demonstrates the properties and the <xref:System.StringComparer.Create%2A> method of the <xref:System.StringComparer> class.</span></span> <span data-ttu-id="0f18d-197">此範例說明不同<xref:System.StringComparer>物件排序的三個版本拉丁文字母 I。</span><span class="sxs-lookup"><span data-stu-id="0f18d-197">The example illustrates how different <xref:System.StringComparer> objects sort three versions of the Latin letter I.</span></span>  
  
 [!code-cpp[System.StringComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.StringComparer/cpp/omni.cpp#1)]
 [!code-csharp[System.StringComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer/cs/omni.cs#1)]
 [!code-vb[System.StringComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer/vb/omni.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvariantCultureIgnoreCase">
      <MemberSignature Language="C#" Value="public static StringComparer InvariantCultureIgnoreCase { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.StringComparer InvariantCultureIgnoreCase" />
      <MemberSignature Language="DocId" Value="P:System.StringComparer.InvariantCultureIgnoreCase" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property InvariantCultureIgnoreCase As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property StringComparer ^ InvariantCultureIgnoreCase { StringComparer ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InvariantCultureIgnoreCase : StringComparer" Usage="System.StringComparer.InvariantCultureIgnoreCase" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0f18d-198">取得 <see cref="T:System.StringComparer" /> 物件；此物件會使用不因國別而異的文化特性的字組比較規則，執行不區分大小寫字串的比較。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f18d-198">Gets a <see cref="T:System.StringComparer" /> object that performs a case-insensitive string comparison using the word comparison rules of the invariant culture.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0f18d-199">新的 <see cref="T:System.StringComparer" /> 物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f18d-199">A new <see cref="T:System.StringComparer" /> object.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f18d-200"><xref:System.StringComparer>所傳回<xref:System.StringComparer.InvariantCultureIgnoreCase%2A>屬性會忽略大小寫，以語言相關方式比較字串，但不適合顯示在任何特定的文化特性。</span><span class="sxs-lookup"><span data-stu-id="0f18d-200">The <xref:System.StringComparer> returned by the <xref:System.StringComparer.InvariantCultureIgnoreCase%2A> property compares strings in a linguistically relevant manner that ignores case, but it is not suitable for display in any particular culture.</span></span> <span data-ttu-id="0f18d-201">其主要的應用程式是順序的字串將會是跨文化特性相同的方式。</span><span class="sxs-lookup"><span data-stu-id="0f18d-201">Its major application is to order strings in a way that will be identical across cultures.</span></span>  
  
 <span data-ttu-id="0f18d-202">而異的文化特性<xref:System.Globalization.CultureInfo>所傳回的物件<xref:System.Globalization.CultureInfo.InvariantCulture%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="0f18d-202">The invariant culture is the <xref:System.Globalization.CultureInfo> object returned by the <xref:System.Globalization.CultureInfo.InvariantCulture%2A> property.</span></span>  
  
 <span data-ttu-id="0f18d-203"><xref:System.StringComparer.InvariantCultureIgnoreCase%2A>屬性實際上會傳回衍生自匿名類別的執行個體<xref:System.StringComparer>類別。</span><span class="sxs-lookup"><span data-stu-id="0f18d-203">The <xref:System.StringComparer.InvariantCultureIgnoreCase%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ordinal">
      <MemberSignature Language="C#" Value="public static StringComparer Ordinal { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.StringComparer Ordinal" />
      <MemberSignature Language="DocId" Value="P:System.StringComparer.Ordinal" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Ordinal As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property StringComparer ^ Ordinal { StringComparer ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Ordinal : StringComparer" Usage="System.StringComparer.Ordinal" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0f18d-204">取得 <see cref="T:System.StringComparer" /> 物件；此物件會執行區分大小寫的序數字串比較。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f18d-204">Gets a <see cref="T:System.StringComparer" /> object that performs a case-sensitive ordinal string comparison.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0f18d-205">
            <see cref="T:System.StringComparer" /> 物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f18d-205">A <see cref="T:System.StringComparer" /> object.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f18d-206"><xref:System.StringComparer>所傳回<xref:System.StringComparer.Ordinal%2A>屬性執行簡單的位元組比較無關的語言。</span><span class="sxs-lookup"><span data-stu-id="0f18d-206">The <xref:System.StringComparer> returned by the <xref:System.StringComparer.Ordinal%2A> property performs a simple byte comparison that is independent of language.</span></span> <span data-ttu-id="0f18d-207">比較字串時，會產生以程式設計方式或比較區分大小寫的資源，例如密碼時，這是最適合。</span><span class="sxs-lookup"><span data-stu-id="0f18d-207">This is most appropriate when comparing strings that are generated programmatically or when comparing case-sensitive resources such as passwords.</span></span>  
  
 <span data-ttu-id="0f18d-208"><xref:System.StringComparer.Ordinal%2A>屬性實際上會傳回衍生自匿名類別的執行個體<xref:System.StringComparer>類別。</span><span class="sxs-lookup"><span data-stu-id="0f18d-208">The <xref:System.StringComparer.Ordinal%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0f18d-209">下列程式碼範例示範屬性和<xref:System.StringComparer.Create%2A>方法的<xref:System.StringComparer>類別。</span><span class="sxs-lookup"><span data-stu-id="0f18d-209">The following code example demonstrates the properties and the <xref:System.StringComparer.Create%2A> method of the <xref:System.StringComparer> class.</span></span> <span data-ttu-id="0f18d-210">此範例說明不同<xref:System.StringComparer>物件排序的三個版本拉丁文字母 I。</span><span class="sxs-lookup"><span data-stu-id="0f18d-210">The example illustrates how different <xref:System.StringComparer> objects sort three versions of the Latin letter I.</span></span>  
  
 [!code-cpp[System.StringComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.StringComparer/cpp/omni.cpp#1)]
 [!code-csharp[System.StringComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer/cs/omni.cs#1)]
 [!code-vb[System.StringComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer/vb/omni.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OrdinalIgnoreCase">
      <MemberSignature Language="C#" Value="public static StringComparer OrdinalIgnoreCase { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.StringComparer OrdinalIgnoreCase" />
      <MemberSignature Language="DocId" Value="P:System.StringComparer.OrdinalIgnoreCase" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property OrdinalIgnoreCase As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property StringComparer ^ OrdinalIgnoreCase { StringComparer ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OrdinalIgnoreCase : StringComparer" Usage="System.StringComparer.OrdinalIgnoreCase" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0f18d-211">取得 <see cref="T:System.StringComparer" /> 物件；此物件會執行不區分大小寫的序數字串比較。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f18d-211">Gets a <see cref="T:System.StringComparer" /> object that performs a case-insensitive ordinal string comparison.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0f18d-212">
            <see cref="T:System.StringComparer" /> 物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f18d-212">A <see cref="T:System.StringComparer" /> object.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f18d-213"><xref:System.StringComparer>所傳回<xref:System.StringComparer.OrdinalIgnoreCase%2A>屬性中的字串比較，如果它們已轉換成大寫的使用而異的文化特性的慣例會將這些字元，然後執行 無關的簡單的位元組比較語言。</span><span class="sxs-lookup"><span data-stu-id="0f18d-213">The <xref:System.StringComparer> returned by the <xref:System.StringComparer.OrdinalIgnoreCase%2A> property treats the characters in the strings to compare as if they were converted to uppercase using the conventions of the invariant culture, and then performs a simple byte comparison that is independent of language.</span></span> <span data-ttu-id="0f18d-214">比較字串時，會產生以程式設計方式或當比較不區分大小寫的資源，例如路徑與檔案名稱時，這是最適合。</span><span class="sxs-lookup"><span data-stu-id="0f18d-214">This is most appropriate when comparing strings that are generated programmatically or when comparing case-insensitive resources such as paths and filenames.</span></span>  
  
 <span data-ttu-id="0f18d-215"><xref:System.StringComparer.OrdinalIgnoreCase%2A>屬性實際上會傳回衍生自匿名類別的執行個體<xref:System.StringComparer>類別。</span><span class="sxs-lookup"><span data-stu-id="0f18d-215">The <xref:System.StringComparer.OrdinalIgnoreCase%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0f18d-216">下列程式碼範例示範屬性和<xref:System.StringComparer.Create%2A>方法的<xref:System.StringComparer>類別。</span><span class="sxs-lookup"><span data-stu-id="0f18d-216">The following code example demonstrates the properties and the <xref:System.StringComparer.Create%2A> method of the <xref:System.StringComparer> class.</span></span> <span data-ttu-id="0f18d-217">此範例說明不同<xref:System.StringComparer>物件排序的三個版本拉丁文字母 I。</span><span class="sxs-lookup"><span data-stu-id="0f18d-217">The example illustrates how different <xref:System.StringComparer> objects sort three versions of the Latin letter I.</span></span>  
  
 [!code-cpp[System.StringComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.StringComparer/cpp/omni.cpp#1)]
 [!code-csharp[System.StringComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer/cs/omni.cs#1)]
 [!code-vb[System.StringComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer/vb/omni.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IComparer.Compare">
      <MemberSignature Language="C#" Value="int IComparer.Compare (object x, object y);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IComparer.Compare(object x, object y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.System#Collections#IComparer#Compare(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Compare (x As Object, y As Object) As Integer Implements IComparer.Compare" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IComparer.Compare(System::Object ^ x, System::Object ^ y) = System::Collections::IComparer::Compare;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IComparer.Compare(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Object" />
        <Parameter Name="y" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="x">To be added.</param>
        <param name="y">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEqualityComparer.Equals">
      <MemberSignature Language="C#" Value="bool IEqualityComparer.Equals (object x, object y);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IEqualityComparer.Equals(object x, object y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.System#Collections#IEqualityComparer#Equals(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Equals (x As Object, y As Object) As Boolean Implements IEqualityComparer.Equals" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IEqualityComparer.Equals(System::Object ^ x, System::Object ^ y) = System::Collections::IEqualityComparer::Equals;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEqualityComparer.Equals(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Object" />
        <Parameter Name="y" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="x">To be added.</param>
        <param name="y">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEqualityComparer.GetHashCode">
      <MemberSignature Language="C#" Value="int IEqualityComparer.GetHashCode (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IEqualityComparer.GetHashCode(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.System#Collections#IEqualityComparer#GetHashCode(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function GetHashCode (obj As Object) As Integer Implements IEqualityComparer.GetHashCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IEqualityComparer.GetHashCode(System::Object ^ obj) = System::Collections::IEqualityComparer::GetHashCode;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEqualityComparer.GetHashCode(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>