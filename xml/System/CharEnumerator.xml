<Type Name="CharEnumerator" FullName="System.CharEnumerator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="0570f4e2dd53178598e0e6fbf7b325d2cd252378" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30728372" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class CharEnumerator : ICloneable, System.Collections.Generic.IEnumerator&lt;char&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit CharEnumerator extends System.Object implements class System.Collections.Generic.IEnumerator`1&lt;char&gt;, class System.Collections.IEnumerator, class System.ICloneable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.CharEnumerator" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class CharEnumerator&#xA;Implements ICloneable, IEnumerator(Of Char)" />
  <TypeSignature Language="C++ CLI" Value="public ref class CharEnumerator sealed : ICloneable, System::Collections::Generic::IEnumerator&lt;char&gt;" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerator&lt;System.Char&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>支援逐一查看 <see cref="T:System.String" /> 物件和讀取其個別字元。 這個類別無法被繼承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A<xref:System.CharEnumerator>提供唯讀存取的字元參考<xref:System.String>物件。 例如，`foreach`陳述式的 Microsoft Visual Basic 和 C# 程式語言，逐一查看集合的項目，這會擷取<xref:System.CharEnumerator>從<xref:System.String>才能逐一中之字元的物件物件。  
  
 針對沒有公用建構函式<xref:System.CharEnumerator>。 請改為呼叫<xref:System.String>物件的<xref:System.String.GetEnumerator%2A>方法，以取得<xref:System.CharEnumerator>，初始化以參考的字串。  
  
 A<xref:System.CharEnumerator>會維護字串中字元的內部索引<xref:System.CharEnumerator>參考。 索引的狀態時，在參考字串中的字元位置以邏輯方式第一個字元之前或之後的最後一個字元時，無效和有效值參考字串內的字元。 此索引會初始化為前的第一個字元，邏輯上的位置，並完成反覆項目時的位置設定後的最後一個字元。 如果您嘗試存取該字元不正確的索引時，會擲回例外狀況。  
  
 <xref:System.CharEnumerator.MoveNext%2A>方法遞增索引 1，所以第一個與後續字元會依次存取。 <xref:System.CharEnumerator.Reset%2A>方法設定以邏輯方式前的第一個字元的位置索引。 <xref:System.CharEnumerator.Current%2A>屬性擷取目前由索引所參考的字元。 <xref:System.CharEnumerator.Clone%2A>方法會建立一份<xref:System.CharEnumerator>。  
  
> [!NOTE]
>  數個獨立的執行個體<xref:System.CharEnumerator>跨一或多個執行緒可以存取的單一執行個體<xref:System.String>。 這個類別會實作以支援<xref:System.Collections.IEnumerator>介面。 如需有關使用的列舉值，請參閱<xref:System.Collections.IEnumerator>主題。  
  
   
  
## Examples  
 下列範例會使用<xref:System.CharEnumerator>列舉個別字元在字串中的類別。 它會具現化<xref:System.CharEnumerator>藉由呼叫物件<xref:System.String.GetEnumerator%2A?displayProperty=nameWithType>方法，會進入從一個字元的下一步 藉由呼叫<xref:System.CharEnumerator.MoveNext%2A>方法，並擷取的值，來顯示目前的字元<xref:System.CharEnumerator.Current%2A>屬性。  
  
 [!code-cpp[System.CharEnumerator.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#1)]
 [!code-csharp[System.CharEnumerator.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#1)]
 [!code-vb[System.CharEnumerator.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#1)]  
  
 不過請注意，相同的作業可以稍微更直覺的方式執行使用`foreach`（C# 中） 或`For Each`（在 Visual Basic 中)，如下列範例所示。  
  
 [!code-cpp[System.CharEnumerator.Class#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#2)]
 [!code-csharp[System.CharEnumerator.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#2)]
 [!code-vb[System.CharEnumerator.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.String" />
    <altmember cref="T:System.Collections.IEnumerator" />
    <altmember cref="T:System.Collections.IEnumerable" />
    <altmember cref="T:System.Collections.ICollection" />
  </Docs>
  <Members>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>建立目前 <see cref="T:System.CharEnumerator" /> 物件的複本。</summary>
        <returns>
          <see cref="T:System.Object" />，是目前 <see cref="T:System.CharEnumerator" /> 物件的複本。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 傳回值是這個執行個體的副本<xref:System.CharEnumerator>和其目前狀態。 這可用於逐一查看時儲存您的狀態<xref:System.String>物件。  
  
 例如，假設您的應用程式使用的原始執行個體<xref:System.CharEnumerator>來逐一查看的每一個字元<xref:System.String>。 您的應用程式發生某些唯一的字元時，會暫停處理，並叫用<xref:System.CharEnumerator.Clone%2A>方法。 實際上，這樣可以節省<xref:System.CharEnumerator>中物件的索引<xref:System.String>。  
  
 應用程式用來瀏覽至另一個部分的複製`String`執行一些輔助的處理。 這個巡覽的副作用是位置的複製遺失停止處理。 不過，輔助的處理序完成時，您的應用程式會捨棄複製並使用原始<xref:System.CharEnumerator>繼續使用在執行個體<xref:System.String>原始處理停止。  
  
> [!NOTE]
>  這個方法實作以支援<xref:System.ICloneable>介面。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public char Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char Current" />
      <MemberSignature Language="DocId" Value="P:System.CharEnumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property char Current { char get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IEnumerator`1.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得此 <see cref="T:System.CharEnumerator" /> 物件所列舉的字串中目前所參考的字元。</summary>
        <value>此 <see cref="T:System.CharEnumerator" /> 物件目前所參考的 Unicode 字元。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.CharEnumerator>類別會維護列舉字串的內部索引和<xref:System.CharEnumerator.Current%2A>屬性會傳回目前正由索引所參考的字元。 索引無效; 時，才應叫用這個屬性否則，會擲回例外狀況。  
  
 索引一定是無效的空字串 ("")。 索引也不正確之後<xref:System.String.GetEnumerator%2A?displayProperty=nameWithType>或<xref:System.CharEnumerator.Reset%2A>方法呼叫。 其中一種方法呼叫之後，叫用<xref:System.CharEnumerator.MoveNext%2A>方法，以調整列舉字串的第一個字元的索引。 索引是有效每當<xref:System.CharEnumerator.MoveNext%2A>方法會傳回`true`。  
  
 <xref:System.CharEnumerator.Current%2A> 不會移動索引，並對連續呼叫<xref:System.CharEnumerator.Current%2A>傳回相同的字元，直到<xref:System.CharEnumerator.MoveNext%2A>， <xref:System.CharEnumerator.Reset%2A>，或<xref:System.String.GetEnumerator%2A?displayProperty=nameWithType>呼叫。  
  
   
  
## Examples  
 下列範例會使用<xref:System.CharEnumerator>列舉個別字元在字串中的類別。 它會具現化<xref:System.CharEnumerator>藉由呼叫物件<xref:System.String.GetEnumerator%2A?displayProperty=nameWithType>方法，會進入從一個字元的下一步 藉由呼叫<xref:System.CharEnumerator.MoveNext%2A>方法，並擷取的值，來顯示目前的字元<xref:System.CharEnumerator.Current%2A>屬性。  
  
 [!code-cpp[System.CharEnumerator.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#1)]
 [!code-csharp[System.CharEnumerator.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#1)]
 [!code-vb[System.CharEnumerator.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#1)]  
  
 不過請注意，相同的作業可以稍微更直覺的方式執行使用`foreach`（C# 中） 或`For Each`（在 Visual Basic 中)，如下列範例所示。  
  
 [!code-cpp[System.CharEnumerator.Class#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#2)]
 [!code-csharp[System.CharEnumerator.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#2)]
 [!code-vb[System.CharEnumerator.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">索引無效，也就是，索引位於列舉字串的第一個字元前或最後一個字元後。</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>將 <see cref="T:System.CharEnumerator" /> 類別目前的執行個體所使用的資源全部釋出。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.CharEnumerator.Dispose%2A> 使用完畢時，請呼叫 <xref:System.CharEnumerator>。 <xref:System.CharEnumerator.Dispose%2A> 方法會將 <xref:System.CharEnumerator> 保留在無法使用的狀態。 在呼叫<xref:System.CharEnumerator.Dispose%2A>，您必須釋放所有參考<xref:System.CharEnumerator>讓記憶體回收行程可以回收記憶體的<xref:System.CharEnumerator>所佔用。  
  
 如需詳細資訊，請參閱[清除 Unmanaged 資源上](~/docs/standard/garbage-collection/unmanaged.md)和[實作 Dispose 方法](~/docs/standard/garbage-collection/implementing-dispose.md)。  
  
> [!NOTE]
>  在您釋放最後一個 <xref:System.CharEnumerator.Dispose%2A> 參考之前，請務必呼叫 <xref:System.CharEnumerator>。 否則工作窗格所使用的資源不會釋放，直到記憶體回收行程呼叫 <xref:System.CharEnumerator> 物件的 `Finalize` 方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveNext();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.MoveNext</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>將目前 <see cref="T:System.CharEnumerator" /> 物件的內部索引遞增到列舉字串的下一個字元。</summary>
        <returns>
          如果索引遞增成功且在列舉字串內，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.CharEnumerator>類別會維護列舉字串的內部索引和<xref:System.CharEnumerator.MoveNext%2A>方法索引遞增一。 呼叫<xref:System.CharEnumerator.MoveNext%2A>之後呼叫<xref:System.String.GetEnumerator%2A>或<xref:System.CharEnumerator.Reset%2A>遞增列舉字串中的第一個字元目前字元位置。 傳回值的核取`true`來判斷目前的字元位置無效。  
  
 如果索引超出列舉字串的最後一個字元，不會變更索引和`false`傳回。  
  
 請注意，如果是空的列舉的字串 ("")，則狀態的<xref:System.CharEnumerator>永遠無效。 這是因為內部索引<xref:System.CharEnumerator>一開始是先列舉字串的第一個字元，因此無效。 <xref:System.CharEnumerator.MoveNext%2A> 以邏輯方式設定這也是無效的列舉字串 （不存在） 的最後一個字元之後的索引。  
  
   
  
## Examples  
 下列範例會使用<xref:System.CharEnumerator>列舉個別字元在字串中的類別。 它會具現化<xref:System.CharEnumerator>藉由呼叫物件<xref:System.String.GetEnumerator%2A?displayProperty=nameWithType>方法，會進入從一個字元的下一步 藉由呼叫<xref:System.CharEnumerator.MoveNext%2A>方法，並擷取的值，來顯示目前的字元<xref:System.CharEnumerator.Current%2A>屬性。  
  
 [!code-cpp[System.CharEnumerator.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#1)]
 [!code-csharp[System.CharEnumerator.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#1)]
 [!code-vb[System.CharEnumerator.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#1)]  
  
 不過請注意，相同的作業可以稍微更直覺的方式執行使用`foreach`（C# 中） 或`For Each`（在 Visual Basic 中)，如下列範例所示。  
  
 [!code-cpp[System.CharEnumerator.Class#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#2)]
 [!code-csharp[System.CharEnumerator.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#2)]
 [!code-vb[System.CharEnumerator.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reset();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.Reset</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>將索引初始化至邏輯上位於列舉字串第一個字元前的位置。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.CharEnumerator>類別會維護列舉字串的內部索引和<xref:System.CharEnumerator.Reset%2A>方法設定為無效狀態的索引。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerator.Current">
      <MemberSignature Language="C#" Value="object System.Collections.IEnumerator.Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IEnumerator.Current" />
      <MemberSignature Language="DocId" Value="P:System.CharEnumerator.System#Collections#IEnumerator#Current" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Current As Object Implements IEnumerator.Current" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.IEnumerator.Current { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IEnumerator.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得此 <see cref="T:System.CharEnumerator" /> 物件所列舉的字串中目前所參考的字元。 如需這個成員的說明，請參閱 <see cref="P:System.Collections.IEnumerator.Current" />。</summary>
        <value>此 <see cref="T:System.CharEnumerator" /> 物件目前所參考的 boxed Unicode 字元。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個成員是明確介面成員實作， 只有在 <xref:System.CharEnumerator> 執行個體轉換成 <xref:System.Collections.IEnumerator> 介面時，才能使用這個成員。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">列舉尚未啟動。  
  
 -或-  
  
 列舉已經結束。</exception>
      </Docs>
    </Member>
  </Members>
</Type>