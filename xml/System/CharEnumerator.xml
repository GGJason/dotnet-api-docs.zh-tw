<Type Name="CharEnumerator" FullName="System.CharEnumerator">
  <TypeSignature Language="C#" Value="public sealed class CharEnumerator : ICloneable, System.Collections.Generic.IEnumerator&lt;char&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit CharEnumerator extends System.Object implements class System.Collections.Generic.IEnumerator`1&lt;char&gt;, class System.Collections.IEnumerator, class System.ICloneable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.CharEnumerator" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class CharEnumerator&#xA;Implements ICloneable, IEnumerator(Of Char)" />
  <TypeSignature Language="C++ CLI" Value="public ref class CharEnumerator sealed : ICloneable, System::Collections::Generic::IEnumerator&lt;char&gt;" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerator&lt;System.Char&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="29bb8-101">支援逐一查看 <see cref="T:System.String" /> 物件和讀取其個別字元。</span><span class="sxs-lookup"><span data-stu-id="29bb8-101">Supports iterating over a <see cref="T:System.String" /> object and reading its individual characters.</span></span> <span data-ttu-id="29bb8-102">這個類別無法被繼承。</span><span class="sxs-lookup"><span data-stu-id="29bb8-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29bb8-103">A<xref:System.CharEnumerator>提供唯讀存取的字元參考<xref:System.String>物件。</span><span class="sxs-lookup"><span data-stu-id="29bb8-103">A <xref:System.CharEnumerator> provides read-only access to the characters in a referenced <xref:System.String> object.</span></span> <span data-ttu-id="29bb8-104">例如，`foreach`陳述式的 Microsoft Visual Basic 和 C# 程式語言，逐一查看集合的項目，這會擷取<xref:System.CharEnumerator>從<xref:System.String>才能逐一中之字元的物件物件。</span><span class="sxs-lookup"><span data-stu-id="29bb8-104">For example, the `foreach` statement of the Microsoft Visual Basic and C# programming languages, which iterates through the elements of a collection, retrieves a <xref:System.CharEnumerator> from a <xref:System.String> object in order to iterate through the characters in that object.</span></span>  
  
 <span data-ttu-id="29bb8-105">針對沒有公用建構函式<xref:System.CharEnumerator>。</span><span class="sxs-lookup"><span data-stu-id="29bb8-105">There is no public constructor for <xref:System.CharEnumerator>.</span></span> <span data-ttu-id="29bb8-106">請改為呼叫<xref:System.String>物件的<xref:System.String.GetEnumerator%2A>方法，以取得<xref:System.CharEnumerator>，初始化以參考的字串。</span><span class="sxs-lookup"><span data-stu-id="29bb8-106">Instead, call a <xref:System.String> object's <xref:System.String.GetEnumerator%2A> method to obtain a <xref:System.CharEnumerator> that is initialized to reference the string.</span></span>  
  
 <span data-ttu-id="29bb8-107">A<xref:System.CharEnumerator>會維護字串中字元的內部索引<xref:System.CharEnumerator>參考。</span><span class="sxs-lookup"><span data-stu-id="29bb8-107">A <xref:System.CharEnumerator> maintains an internal index to the characters in the string the <xref:System.CharEnumerator> references.</span></span> <span data-ttu-id="29bb8-108">索引的狀態時，在參考字串中的字元位置以邏輯方式第一個字元之前或之後的最後一個字元時，無效和有效值參考字串內的字元。</span><span class="sxs-lookup"><span data-stu-id="29bb8-108">The state of the index is invalid when it references a character position logically before the first character or after the last character in the string, and valid when it references a character within the string.</span></span> <span data-ttu-id="29bb8-109">此索引會初始化為前的第一個字元，邏輯上的位置，並完成反覆項目時的位置設定後的最後一個字元。</span><span class="sxs-lookup"><span data-stu-id="29bb8-109">The index is initialized to a position logically before the first character, and is set to a position after the last character when the iteration is complete.</span></span> <span data-ttu-id="29bb8-110">如果您嘗試存取該字元不正確的索引時，會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="29bb8-110">An exception is thrown if you attempt to access a character while the index is invalid.</span></span>  
  
 <span data-ttu-id="29bb8-111"><xref:System.CharEnumerator.MoveNext%2A>方法遞增索引 1，所以第一個與後續字元會依次存取。</span><span class="sxs-lookup"><span data-stu-id="29bb8-111">The <xref:System.CharEnumerator.MoveNext%2A> method increments the index by one, so the first and subsequent characters are accessed in turn.</span></span> <span data-ttu-id="29bb8-112"><xref:System.CharEnumerator.Reset%2A>方法設定以邏輯方式前的第一個字元的位置索引。</span><span class="sxs-lookup"><span data-stu-id="29bb8-112">The <xref:System.CharEnumerator.Reset%2A> method sets the index to a position logically before the first character.</span></span> <span data-ttu-id="29bb8-113"><xref:System.CharEnumerator.Current%2A>屬性擷取目前由索引所參考的字元。</span><span class="sxs-lookup"><span data-stu-id="29bb8-113">The <xref:System.CharEnumerator.Current%2A> property retrieves the character currently referenced by index.</span></span> <span data-ttu-id="29bb8-114"><xref:System.CharEnumerator.Clone%2A>方法會建立一份<xref:System.CharEnumerator>。</span><span class="sxs-lookup"><span data-stu-id="29bb8-114">The <xref:System.CharEnumerator.Clone%2A> method creates a copy of the <xref:System.CharEnumerator>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="29bb8-115">數個獨立的執行個體<xref:System.CharEnumerator>跨一或多個執行緒可以存取的單一執行個體<xref:System.String>。</span><span class="sxs-lookup"><span data-stu-id="29bb8-115">Several independent instances of <xref:System.CharEnumerator> across one or more threads can have access to a single instance of <xref:System.String>.</span></span> <span data-ttu-id="29bb8-116">這個類別會實作以支援<xref:System.Collections.IEnumerator>介面。</span><span class="sxs-lookup"><span data-stu-id="29bb8-116">This class is implemented to support the <xref:System.Collections.IEnumerator> interface.</span></span> <span data-ttu-id="29bb8-117">如需有關使用的列舉值，請參閱<xref:System.Collections.IEnumerator>主題。</span><span class="sxs-lookup"><span data-stu-id="29bb8-117">For more information regarding the use of an enumerator, see the <xref:System.Collections.IEnumerator> topic.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="29bb8-118">下列範例會使用<xref:System.CharEnumerator>列舉個別字元在字串中的類別。</span><span class="sxs-lookup"><span data-stu-id="29bb8-118">The following example uses the <xref:System.CharEnumerator> class to enumerate the individual characters in a string.</span></span> <span data-ttu-id="29bb8-119">它會具現化<xref:System.CharEnumerator>藉由呼叫物件<xref:System.String.GetEnumerator%2A?displayProperty=nameWithType>方法，會進入從一個字元的下一步 藉由呼叫<xref:System.CharEnumerator.MoveNext%2A>方法，並擷取的值，來顯示目前的字元<xref:System.CharEnumerator.Current%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="29bb8-119">It instantiates a <xref:System.CharEnumerator> object by calling the <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> method, moves from one character to the next by calling the <xref:System.CharEnumerator.MoveNext%2A> method, and displays the current character by retrieving the value of the <xref:System.CharEnumerator.Current%2A> property.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#1)]
 [!code-csharp[System.CharEnumerator.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#1)]
 [!code-vb[System.CharEnumerator.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#1)]  
  
 <span data-ttu-id="29bb8-120">不過請注意，相同的作業可以稍微更直覺的方式執行使用`foreach`（C# 中） 或`For Each`（在 Visual Basic 中)，如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="29bb8-120">Note, however, that the same operation can be performed somewhat more intuitively by using `foreach` (in C#) or `For Each` (in Visual Basic), as the following example shows.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#2)]
 [!code-csharp[System.CharEnumerator.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#2)]
 [!code-vb[System.CharEnumerator.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.String" />
    <altmember cref="T:System.Collections.IEnumerator" />
    <altmember cref="T:System.Collections.IEnumerable" />
    <altmember cref="T:System.Collections.ICollection" />
  </Docs>
  <Members>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="29bb8-121">建立目前 <see cref="T:System.CharEnumerator" /> 物件的複本。</span><span class="sxs-lookup"><span data-stu-id="29bb8-121">Creates a copy of the current <see cref="T:System.CharEnumerator" /> object.</span></span></summary>
        <returns><span data-ttu-id="29bb8-122"><see cref="T:System.Object" />，是目前 <see cref="T:System.CharEnumerator" /> 物件的複本。</span><span class="sxs-lookup"><span data-stu-id="29bb8-122">An <see cref="T:System.Object" /> that is a copy of the current <see cref="T:System.CharEnumerator" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29bb8-123">傳回值是這個執行個體的副本<xref:System.CharEnumerator>和其目前狀態。</span><span class="sxs-lookup"><span data-stu-id="29bb8-123">The return value is a copy of this instance of <xref:System.CharEnumerator> and its current state.</span></span> <span data-ttu-id="29bb8-124">這可用於逐一查看時儲存您的狀態<xref:System.String>物件。</span><span class="sxs-lookup"><span data-stu-id="29bb8-124">This is useful for saving your state while iterating through a <xref:System.String> object.</span></span>  
  
 <span data-ttu-id="29bb8-125">例如，假設您的應用程式使用的原始執行個體<xref:System.CharEnumerator>來逐一查看的每一個字元<xref:System.String>。</span><span class="sxs-lookup"><span data-stu-id="29bb8-125">For example, suppose your application uses an original instance of <xref:System.CharEnumerator> to iterate through each character in a <xref:System.String>.</span></span> <span data-ttu-id="29bb8-126">您的應用程式發生某些唯一的字元時，會暫停處理，並叫用<xref:System.CharEnumerator.Clone%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="29bb8-126">When some unique character is encountered, your application pauses processing and invokes the <xref:System.CharEnumerator.Clone%2A> method.</span></span> <span data-ttu-id="29bb8-127">實際上，這樣可以節省<xref:System.CharEnumerator>中物件的索引<xref:System.String>。</span><span class="sxs-lookup"><span data-stu-id="29bb8-127">In effect, this saves the <xref:System.CharEnumerator> object's index in the <xref:System.String>.</span></span>  
  
 <span data-ttu-id="29bb8-128">應用程式用來瀏覽至另一個部分的複製`String`執行一些輔助的處理。</span><span class="sxs-lookup"><span data-stu-id="29bb8-128">Your application uses the clone to navigate to another part of the `String` to perform some auxiliary processing.</span></span> <span data-ttu-id="29bb8-129">這個巡覽的副作用是位置的複製遺失停止處理。</span><span class="sxs-lookup"><span data-stu-id="29bb8-129">The side-effect of this navigation is the clone loses track of the position where processing stopped.</span></span> <span data-ttu-id="29bb8-130">不過，輔助的處理序完成時，您的應用程式會捨棄複製並使用原始<xref:System.CharEnumerator>繼續使用在執行個體<xref:System.String>原始處理停止。</span><span class="sxs-lookup"><span data-stu-id="29bb8-130">However, when the auxiliary processing is complete, your application discards the clone and uses the original <xref:System.CharEnumerator> instance to resume working on the <xref:System.String> where the original processing stopped.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="29bb8-131">這個方法實作以支援<xref:System.ICloneable>介面。</span><span class="sxs-lookup"><span data-stu-id="29bb8-131">This method is implemented to support the <xref:System.ICloneable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public char Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char Current" />
      <MemberSignature Language="DocId" Value="P:System.CharEnumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property char Current { char get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IEnumerator`1.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="29bb8-132">取得此 <see cref="T:System.CharEnumerator" /> 物件所列舉的字串中目前所參考的字元。</span><span class="sxs-lookup"><span data-stu-id="29bb8-132">Gets the currently referenced character in the string enumerated by this <see cref="T:System.CharEnumerator" /> object.</span></span></summary>
        <value><span data-ttu-id="29bb8-133">此 <see cref="T:System.CharEnumerator" /> 物件目前所參考的 Unicode 字元。</span><span class="sxs-lookup"><span data-stu-id="29bb8-133">The Unicode character currently referenced by this <see cref="T:System.CharEnumerator" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29bb8-134"><xref:System.CharEnumerator>類別會維護列舉字串的內部索引和<xref:System.CharEnumerator.Current%2A>屬性會傳回目前正由索引所參考的字元。</span><span class="sxs-lookup"><span data-stu-id="29bb8-134">The <xref:System.CharEnumerator> class maintains an internal index to the enumerated string, and the <xref:System.CharEnumerator.Current%2A> property returns the character that is currently referenced by the index.</span></span> <span data-ttu-id="29bb8-135">索引無效; 時，才應叫用這個屬性否則，會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="29bb8-135">This property should be invoked only when the index is valid; otherwise, an exception is thrown.</span></span>  
  
 <span data-ttu-id="29bb8-136">索引一定是無效的空字串 ("")。</span><span class="sxs-lookup"><span data-stu-id="29bb8-136">The index is always invalid for an empty string ("").</span></span> <span data-ttu-id="29bb8-137">索引也不正確之後<xref:System.String.GetEnumerator%2A?displayProperty=nameWithType>或<xref:System.CharEnumerator.Reset%2A>方法呼叫。</span><span class="sxs-lookup"><span data-stu-id="29bb8-137">The index is also invalid after the <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> or <xref:System.CharEnumerator.Reset%2A> method is called.</span></span> <span data-ttu-id="29bb8-138">其中一種方法呼叫之後，叫用<xref:System.CharEnumerator.MoveNext%2A>方法，以調整列舉字串的第一個字元的索引。</span><span class="sxs-lookup"><span data-stu-id="29bb8-138">After either of these methods is called, invoke the <xref:System.CharEnumerator.MoveNext%2A> method to adjust the index to the first character in the enumerated string.</span></span> <span data-ttu-id="29bb8-139">索引是有效每當<xref:System.CharEnumerator.MoveNext%2A>方法會傳回`true`。</span><span class="sxs-lookup"><span data-stu-id="29bb8-139">The index is valid whenever the <xref:System.CharEnumerator.MoveNext%2A> method returns `true`.</span></span>  
  
 <span data-ttu-id="29bb8-140"><xref:System.CharEnumerator.Current%2A> 不會移動索引，並對連續呼叫<xref:System.CharEnumerator.Current%2A>傳回相同的字元，直到<xref:System.CharEnumerator.MoveNext%2A>， <xref:System.CharEnumerator.Reset%2A>，或<xref:System.String.GetEnumerator%2A?displayProperty=nameWithType>呼叫。</span><span class="sxs-lookup"><span data-stu-id="29bb8-140"><xref:System.CharEnumerator.Current%2A> does not move the index, and consecutive calls to <xref:System.CharEnumerator.Current%2A> return the same character until <xref:System.CharEnumerator.MoveNext%2A>, <xref:System.CharEnumerator.Reset%2A>, or <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> is called.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="29bb8-141">下列範例會使用<xref:System.CharEnumerator>列舉個別字元在字串中的類別。</span><span class="sxs-lookup"><span data-stu-id="29bb8-141">The following example uses the <xref:System.CharEnumerator> class to enumerate the individual characters in a string.</span></span> <span data-ttu-id="29bb8-142">它會具現化<xref:System.CharEnumerator>藉由呼叫物件<xref:System.String.GetEnumerator%2A?displayProperty=nameWithType>方法，會進入從一個字元的下一步 藉由呼叫<xref:System.CharEnumerator.MoveNext%2A>方法，並擷取的值，來顯示目前的字元<xref:System.CharEnumerator.Current%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="29bb8-142">It instantiates a <xref:System.CharEnumerator> object by calling the <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> method, moves from one character to the next by calling the <xref:System.CharEnumerator.MoveNext%2A> method, and displays the current character by retrieving the value of the <xref:System.CharEnumerator.Current%2A> property.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#1)]
 [!code-csharp[System.CharEnumerator.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#1)]
 [!code-vb[System.CharEnumerator.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#1)]  
  
 <span data-ttu-id="29bb8-143">不過請注意，相同的作業可以稍微更直覺的方式執行使用`foreach`（C# 中） 或`For Each`（在 Visual Basic 中)，如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="29bb8-143">Note, however, that the same operation can be performed somewhat more intuitively by using `foreach` (in C#) or `For Each` (in Visual Basic), as the following example shows.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#2)]
 [!code-csharp[System.CharEnumerator.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#2)]
 [!code-vb[System.CharEnumerator.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="29bb8-144">索引無效，也就是，索引位於列舉字串的第一個字元前或最後一個字元後。</span><span class="sxs-lookup"><span data-stu-id="29bb8-144">The index is invalid; that is, it is before the first or after the last character of the enumerated string.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="29bb8-145">將 <see cref="T:System.CharEnumerator" /> 類別目前的執行個體所使用的資源全部釋出。</span><span class="sxs-lookup"><span data-stu-id="29bb8-145">Releases all resources used by the current instance of the <see cref="T:System.CharEnumerator" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29bb8-146"><xref:System.CharEnumerator.Dispose%2A> 使用完畢時，請呼叫 <xref:System.CharEnumerator>。</span><span class="sxs-lookup"><span data-stu-id="29bb8-146">Call <xref:System.CharEnumerator.Dispose%2A> when you are finished using the <xref:System.CharEnumerator>.</span></span> <span data-ttu-id="29bb8-147"><xref:System.CharEnumerator.Dispose%2A> 方法會將 <xref:System.CharEnumerator> 保留在無法使用的狀態。</span><span class="sxs-lookup"><span data-stu-id="29bb8-147">The <xref:System.CharEnumerator.Dispose%2A> method leaves the <xref:System.CharEnumerator> in an unusable state.</span></span> <span data-ttu-id="29bb8-148">在呼叫<xref:System.CharEnumerator.Dispose%2A>，您必須釋放所有參考<xref:System.CharEnumerator>讓記憶體回收行程可以回收記憶體的<xref:System.CharEnumerator>所佔用。</span><span class="sxs-lookup"><span data-stu-id="29bb8-148">After calling <xref:System.CharEnumerator.Dispose%2A>, you must release all references to the <xref:System.CharEnumerator> so the garbage collector can reclaim the memory that the <xref:System.CharEnumerator> was occupying.</span></span>  
  
 <span data-ttu-id="29bb8-149">如需詳細資訊，請參閱[清除 Unmanaged 資源上](~/docs/standard/garbage-collection/unmanaged.md)和[實作 Dispose 方法](~/docs/standard/garbage-collection/implementing-dispose.md)。</span><span class="sxs-lookup"><span data-stu-id="29bb8-149">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="29bb8-150">在您釋放最後一個 <xref:System.CharEnumerator.Dispose%2A> 參考之前，請務必呼叫 <xref:System.CharEnumerator>。</span><span class="sxs-lookup"><span data-stu-id="29bb8-150">Always call <xref:System.CharEnumerator.Dispose%2A> before you release your last reference to the <xref:System.CharEnumerator>.</span></span> <span data-ttu-id="29bb8-151">否則工作窗格所使用的資源不會釋放，直到記憶體回收行程呼叫 <xref:System.CharEnumerator> 物件的 `Finalize` 方法。</span><span class="sxs-lookup"><span data-stu-id="29bb8-151">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.CharEnumerator> object's `Finalize` method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveNext();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.MoveNext</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="29bb8-152">將目前 <see cref="T:System.CharEnumerator" /> 物件的內部索引遞增到列舉字串的下一個字元。</span><span class="sxs-lookup"><span data-stu-id="29bb8-152">Increments the internal index of the current <see cref="T:System.CharEnumerator" /> object to the next character of the enumerated string.</span></span></summary>
        <returns>
          <span data-ttu-id="29bb8-153">如果索引遞增成功且在列舉字串內，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="29bb8-153"><see langword="true" /> if the index is successfully incremented and within the enumerated string; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29bb8-154"><xref:System.CharEnumerator>類別會維護列舉字串的內部索引和<xref:System.CharEnumerator.MoveNext%2A>方法索引遞增一。</span><span class="sxs-lookup"><span data-stu-id="29bb8-154">The <xref:System.CharEnumerator> class maintains an internal index to the enumerated string, and the <xref:System.CharEnumerator.MoveNext%2A> method increments the index by one.</span></span> <span data-ttu-id="29bb8-155">呼叫<xref:System.CharEnumerator.MoveNext%2A>之後呼叫<xref:System.String.GetEnumerator%2A>或<xref:System.CharEnumerator.Reset%2A>遞增列舉字串中的第一個字元目前字元位置。</span><span class="sxs-lookup"><span data-stu-id="29bb8-155">Call <xref:System.CharEnumerator.MoveNext%2A> after calling <xref:System.String.GetEnumerator%2A> or <xref:System.CharEnumerator.Reset%2A> to increment the current character position to the first character in the enumerated string.</span></span> <span data-ttu-id="29bb8-156">傳回值的核取`true`來判斷目前的字元位置無效。</span><span class="sxs-lookup"><span data-stu-id="29bb8-156">Check that the return value is `true` to determine that the current character position is valid.</span></span>  
  
 <span data-ttu-id="29bb8-157">如果索引超出列舉字串的最後一個字元，不會變更索引和`false`傳回。</span><span class="sxs-lookup"><span data-stu-id="29bb8-157">If the index is already beyond the last character of the enumerated string, the index is not changed and `false` is returned.</span></span>  
  
 <span data-ttu-id="29bb8-158">請注意，如果是空的列舉的字串 ("")，則狀態的<xref:System.CharEnumerator>永遠無效。</span><span class="sxs-lookup"><span data-stu-id="29bb8-158">Notice that if the enumerated string is empty (""), the state of the <xref:System.CharEnumerator> is always invalid.</span></span> <span data-ttu-id="29bb8-159">這是因為內部索引<xref:System.CharEnumerator>一開始是先列舉字串的第一個字元，因此無效。</span><span class="sxs-lookup"><span data-stu-id="29bb8-159">This is because the internal index for the <xref:System.CharEnumerator> is initially before the first character of the enumerated string and is therefore invalid.</span></span> <span data-ttu-id="29bb8-160"><xref:System.CharEnumerator.MoveNext%2A> 以邏輯方式設定這也是無效的列舉字串 （不存在） 的最後一個字元之後的索引。</span><span class="sxs-lookup"><span data-stu-id="29bb8-160"><xref:System.CharEnumerator.MoveNext%2A> logically sets the index after the last (nonexistent) character of the enumerated string which is also invalid.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="29bb8-161">下列範例會使用<xref:System.CharEnumerator>列舉個別字元在字串中的類別。</span><span class="sxs-lookup"><span data-stu-id="29bb8-161">The following example uses the <xref:System.CharEnumerator> class to enumerate the individual characters in a string.</span></span> <span data-ttu-id="29bb8-162">它會具現化<xref:System.CharEnumerator>藉由呼叫物件<xref:System.String.GetEnumerator%2A?displayProperty=nameWithType>方法，會進入從一個字元的下一步 藉由呼叫<xref:System.CharEnumerator.MoveNext%2A>方法，並擷取的值，來顯示目前的字元<xref:System.CharEnumerator.Current%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="29bb8-162">It instantiates a <xref:System.CharEnumerator> object by calling the <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> method, moves from one character to the next by calling the <xref:System.CharEnumerator.MoveNext%2A> method, and displays the current character by retrieving the value of the <xref:System.CharEnumerator.Current%2A> property.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#1)]
 [!code-csharp[System.CharEnumerator.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#1)]
 [!code-vb[System.CharEnumerator.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#1)]  
  
 <span data-ttu-id="29bb8-163">不過請注意，相同的作業可以稍微更直覺的方式執行使用`foreach`（C# 中） 或`For Each`（在 Visual Basic 中)，如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="29bb8-163">Note, however, that the same operation can be performed somewhat more intuitively by using `foreach` (in C#) or `For Each` (in Visual Basic), as the following example shows.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#2)]
 [!code-csharp[System.CharEnumerator.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#2)]
 [!code-vb[System.CharEnumerator.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reset();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.Reset</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="29bb8-164">將索引初始化至邏輯上位於列舉字串第一個字元前的位置。</span><span class="sxs-lookup"><span data-stu-id="29bb8-164">Initializes the index to a position logically before the first character of the enumerated string.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29bb8-165"><xref:System.CharEnumerator>類別會維護列舉字串的內部索引和<xref:System.CharEnumerator.Reset%2A>方法設定為無效狀態的索引。</span><span class="sxs-lookup"><span data-stu-id="29bb8-165">The <xref:System.CharEnumerator> class maintains an internal index to the enumerated string, and the <xref:System.CharEnumerator.Reset%2A> method sets the index to the invalid state.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerator.Current">
      <MemberSignature Language="C#" Value="object System.Collections.IEnumerator.Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IEnumerator.Current" />
      <MemberSignature Language="DocId" Value="P:System.CharEnumerator.System#Collections#IEnumerator#Current" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Current As Object Implements IEnumerator.Current" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.IEnumerator.Current { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IEnumerator.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="29bb8-166">取得此 <see cref="T:System.CharEnumerator" /> 物件所列舉的字串中目前所參考的字元。</span><span class="sxs-lookup"><span data-stu-id="29bb8-166">Gets the currently referenced character in the string enumerated by this <see cref="T:System.CharEnumerator" /> object.</span></span> <span data-ttu-id="29bb8-167">如需這個成員的說明，請參閱 <see cref="P:System.Collections.IEnumerator.Current" />。</span><span class="sxs-lookup"><span data-stu-id="29bb8-167">For a description of this member, see <see cref="P:System.Collections.IEnumerator.Current" />.</span></span></summary>
        <value><span data-ttu-id="29bb8-168">此 <see cref="T:System.CharEnumerator" /> 物件目前所參考的 boxed Unicode 字元。</span><span class="sxs-lookup"><span data-stu-id="29bb8-168">The boxed Unicode character currently referenced by this <see cref="T:System.CharEnumerator" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29bb8-169">這個成員是明確介面成員實作，</span><span class="sxs-lookup"><span data-stu-id="29bb8-169">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="29bb8-170">只有在 <xref:System.CharEnumerator> 執行個體轉換成 <xref:System.Collections.IEnumerator> 介面時，才能使用這個成員。</span><span class="sxs-lookup"><span data-stu-id="29bb8-170">It can be used only when the <xref:System.CharEnumerator> instance is cast to an <xref:System.Collections.IEnumerator> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="29bb8-171">列舉尚未啟動。</span><span class="sxs-lookup"><span data-stu-id="29bb8-171">Enumeration has not started.</span></span>  
  
 <span data-ttu-id="29bb8-172">-或-</span><span class="sxs-lookup"><span data-stu-id="29bb8-172">-or-</span></span>  
  
 <span data-ttu-id="29bb8-173">列舉已經結束。</span><span class="sxs-lookup"><span data-stu-id="29bb8-173">Enumeration has ended.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>