<Type Name="IDisposable" FullName="System.IDisposable">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1e6b408b88af2e3e5027106be9c33751cc9e19c3" />
    <Meta Name="ms.sourcegitcommit" Value="3907f9a5780957d9c85af2e54c0a5bc2a5bf19ab" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/14/2018" />
    <Meta Name="ms.locfileid" Value="34452196" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.IDisposable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>提供用於釋放 Unmanaged 資源的機制。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此介面的主要用途是釋放 unmanaged 的資源。 記憶體回收行程自動釋放該物件已不再使用時，配置給受管理物件的記憶體。 不過，不能夠預測何時會發生記憶體回收。 此外，記憶體回收行程不認得的視窗控制代碼等的 unmanaged 資源，或開啟檔案和資料流。  
  
 使用<xref:System.IDisposable.Dispose%2A>明確與記憶體回收行程釋放 unmanaged 的資源，搭配這個介面的方法。 物件的取用者不再需要物件時，可以呼叫這個方法。  
  
> [!WARNING]
>  它是中斷變更，以便加入<xref:System.IDisposable>現有類別的介面。 因為您的型別既有的取用者無法呼叫<xref:System.IDisposable.Dispose%2A>，您就無法確定您的類型所持有的 unmanaged 的資源，將會釋放。  
  
 因為<xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>實作稱為取用者類型的執行個體所擁有的資源不再需要時，您可能必須換行中的受管理的物件<xref:System.Runtime.InteropServices.SafeHandle>（建議的替代做法），或應該覆寫<xref:System.Object.Finalize%2A?displayProperty=nameWithType>釋放 unmanaged 的資源的消費者忘記呼叫<xref:System.IDisposable.Dispose%2A>。  
  
> [!IMPORTANT]
>  在.NET Framework 中，c + + 編譯器支援決定性的資源處置，並不允許直接實作<xref:System.IDisposable.Dispose%2A>方法。  
  
 如需如何的詳細討論此介面和<xref:System.Object.Finalize%2A?displayProperty=nameWithType>方法可用，請參閱[回收](~/docs/standard/garbage-collection/index.md)和[實作 Dispose 方法](~/docs/standard/garbage-collection/implementing-dispose.md)主題。  
  
## <a name="using-an-object-that-implements-idisposable"></a>使用實作 IDisposable 的物件  
 如果您的應用程式會直接使用該物件會實作<xref:System.IDisposable>介面，您應該呼叫物件的<xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>實作，當您完成使用它。 根據您的程式語言，您可以執行下列其中一種：  
  
-   使用的語言建構例如`using`在 C# 和 Visual Basic 中的陳述式。  
  
-   藉由呼叫換行<xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>中的實作`try` / `finally`區塊。  
  
> [!NOTE]
>  文件型別都會實作<xref:System.IDisposable>請注意，並包含提醒來呼叫其<xref:System.IDisposable.Dispose%2A>實作。  
  
<a name="Using"></a>   
### <a name="the-c-and-visual-basic-using-statement"></a>C# 和 Visual Basic 所使用的陳述式  
 如果您的語言支援的建構，例如[使用](~/docs/csharp/language-reference/keywords/using.md)C# 中的陳述式和[使用](~/docs/visual-basic/language-reference/statements/using-statement.md)在 Visual Basic 中的陳述式，您可以使用它而不是明確地呼叫<xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>自己。 下列範例會使用這種方法在定義`WordCount`可以保留檔案中的字組數目的相關資訊的類別。  
  
 [!code-csharp[System.IDisposable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/calling1.cs#1)]
 [!code-vb[System.IDisposable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/calling1.vb#1)]  
  
 `using`陳述式是實際的語法便利性。 在編譯時期，語言編譯器實作中繼語言 (IL) `try` / `finally`區塊。  
  
 如需有關`using`陳述式，請參閱[Using 陳述式](~/docs/visual-basic/language-reference/statements/using-statement.md)或[使用陳述式](~/docs/csharp/language-reference/keywords/using-statement.md)主題。  
  
### <a name="the-tryfinally-block"></a>Try/Finally 區塊  
 如果您的程式語言不支援的建構，例如`using`陳述式，以 C# 或 Visual Basic 中，或如果您不想使用它，您可以呼叫<xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>實作從`finally`區塊`try` / `finally`陳述式。 下列範例會取代`using`封鎖先前的範例，但在`try` / `finally`區塊。  
  
 [!code-csharp[System.IDisposable#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/calling2.cs#2)]
 [!code-vb[System.IDisposable#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/calling2.vb#2)]  
  
 如需有關`try` / `finally`模式，請參閱[再試一次...Catch...Finally 陳述式](~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md)，[再試一次最後](~/docs/csharp/language-reference/keywords/try-finally.md)，或[try-finally 陳述式](http://msdn.microsoft.com/library/514400c1-c322-4bf3-9e48-3047240b8a82)。  
  
## <a name="implementing-idisposable"></a>實作 IDisposable  
 您應該實作<xref:System.IDisposable>只有當您的類型會直接使用 unmanaged 的資源。 類型的消費者可以呼叫您<xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>實作，以執行個體已不再需要時釋放資源。 為了處理呼叫的失敗的情況<xref:System.IDisposable.Dispose%2A>，您應該的使用的類別衍生自<xref:System.Runtime.InteropServices.SafeHandle>包裝的 unmanaged 的資源，或您應覆寫<xref:System.Object.Finalize%2A?displayProperty=nameWithType>參考類型的方法。 在任一情況下，您可以使用<xref:System.IDisposable.Dispose%2A>方法，以執行任何清理之後需要使用的 unmanaged 的資源，例如，釋出、 釋放或重設 unmanaged 的資源。  
  
> [!IMPORTANT]
>  如果您要定義基底類別所使用的 unmanaged 的資源，，或可能有，應該處置的子類別，您應該實作<xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>方法，並提供的第二個多載`Dispose`，如下所述的下一步一節。  
  
<a name="BaseClasses"></a>   
## <a name="idisposable-and-the-inheritance-hierarchy"></a>IDisposable 與繼承階層  
 應該是可處置的子類別的基底類別必須實作<xref:System.IDisposable>，如下所示。 您應該使用此模式，每當您實作<xref:System.IDisposable>上沒有任何型別`sealed`(`NotInheritable`在 Visual Basic 中)。  
  
-   它應該提供一個公用、 非虛擬<xref:System.IDisposable.Dispose>方法和一個受保護虛擬`Dispose(Boolean disposing)`方法。  
  
-   <xref:System.IDisposable.Dispose>方法必須呼叫`Dispose(true)`和應該隱藏最終處理的效能。  
  
-   基底類型不應該包含任何完成項。  
  
 下列程式碼片段會反映基底類別的處置模式。 它會假設您的類型不覆寫<xref:System.Object.Finalize%2A?displayProperty=nameWithType>方法。  
  
 [!code-csharp[System.IDisposable#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/base1.cs#3)]
 [!code-vb[System.IDisposable#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/base1.vb#3)]  
  
 如果您不要覆寫<xref:System.Object.Finalize%2A?displayProperty=nameWithType>方法，您的類別應實作下列的模式。  
  
 [!code-csharp[System.IDisposable#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/base2.cs#5)]
 [!code-vb[System.IDisposable#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/base2.vb#5)]  
  
 子類別應實作可處置模式，如下所示：  
  
-   它們必須覆寫 `Dispose(Boolean)` 並呼叫基底類別 `Dispose(Boolean)` 實作。  
  
-   如有需要，它們可以提供完成項。 完成項必須呼叫 `Dispose(false)`。  
  
 請注意，在衍生的類別不本身會實作<xref:System.IDisposable>介面，並不包含無參數<xref:System.IDisposable.Dispose%2A>方法。 它們只會覆寫基底類別`Dispose(Boolean)`方法。  
  
 下列程式碼片段會反映在衍生類別的處置模式。 它會假設您的類型不覆寫<xref:System.Object.Finalize%2A?displayProperty=nameWithType>方法。  
  
 [!code-csharp[System.IDisposable#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/derived1.cs#4)]
 [!code-vb[System.IDisposable#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/derived1.vb#4)]  
  
   
  
## Examples  
 下列範例示範如何建立資源類別可實作<xref:System.IDisposable>介面。  
  
 [!code-cpp[System.IDisposable.Dispose Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CPP/idisposabledispose.cpp#1)]
 [!code-csharp[System.IDisposable.Dispose Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CS/idisposabledispose.cs#1)]
 [!code-vb[System.IDisposable.Dispose Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/VB/idisposabledispose.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle" />
  </Docs>
  <Members>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IDisposable.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Dispose();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>執行與釋放 (Free)、釋放 (Release) 或重設 Unmanaged 資源相關聯之應用程式定義的工作。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用這個方法可以關閉或釋放 unmanaged 的資源，例如檔案、 資料流，以及實作此介面之類別的執行個體所持有的控制代碼。 依照慣例，這個方法用來執行與釋放物件所掌握的資源相關聯的所有工作或準備重複使用的物件。  
  
> [!WARNING]
>  如果您使用的類別，實作<xref:System.IDisposable>介面，您應該呼叫其<xref:System.IDisposable.Dispose%2A>當您完成使用類別的實作。 如需詳細資訊，請參閱中的 < 使用實作 IDisposable 的物件 > 一節<xref:System.IDisposable>主題。  
  
 當實作這個方法，請確定所有持有的資源釋放透過內含項目階層架構的呼叫傳播。 例如，如果物件 A 會配置物件 B，而物件 B 會配置物件 C，然後 A 的<xref:System.IDisposable.Dispose%2A>實作必須呼叫<xref:System.IDisposable.Dispose%2A>b，它必須接著呼叫<xref:System.IDisposable.Dispose%2A>c 上  
  
> [!IMPORTANT]
>  C + + 編譯器支援決定性的資源處置，並不允許直接實作<xref:System.IDisposable.Dispose%2A>方法。  
  
 物件也必須呼叫<xref:System.IDisposable.Dispose%2A>如果基底類別會實作其基底類別方法<xref:System.IDisposable>。 如需有關實作<xref:System.IDisposable>在基底類別和子類別，請參閱中的 < IDisposable 和繼承階層架構 > 一節<xref:System.IDisposable>主題。  
  
 如果物件<xref:System.IDisposable.Dispose%2A>方法呼叫一次以上，物件必須忽略所有呼叫的第一個之後。 物件不能擲回例外狀況如果其<xref:System.IDisposable.Dispose%2A>多次呼叫方法。 執行個體方法以外<xref:System.IDisposable.Dispose%2A>可以擲回<xref:System.ObjectDisposedException>時已經處置資源。  
  
 使用者可能預期要使用特定的慣例來代表已配置的狀態與 釋放狀態的資源類型。 舉例來說，這是資料流類別，以傳統上視為開啟或關閉。 類別具有這類的慣例的實作器可能會選擇實作的公用方法，以自訂名稱，例如`Close`，該呼叫<xref:System.IDisposable.Dispose%2A>方法。  
  
 因為<xref:System.IDisposable.Dispose%2A>必須明確地呼叫方法，一定會有危險的 unmanaged 的資源不會釋放，因為物件的取用者無法呼叫其<xref:System.IDisposable.Dispose%2A>方法。 有兩種方式可避免此狀況：  
  
-   將 managed 的資源包裝在物件衍生自<xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType>。 您<xref:System.IDisposable.Dispose%2A>然後實作會呼叫<xref:System.IDisposable.Dispose%2A>方法<xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType>執行個體。 如需詳細資訊，請參閱 「 SafeHandle 替代方法 」 一節<xref:System.Object.Finalize%2A?displayProperty=nameWithType>主題。  
  
-   實作完成項，以釋出資源時<xref:System.IDisposable.Dispose%2A>則不會呼叫。 根據預設，記憶體回收行程會自動呼叫物件的完成項再回收其記憶體。 不過，如果<xref:System.IDisposable.Dispose%2A>方法已被呼叫，為通常不必要的記憶體回收行程呼叫已處置的物件完成項。 若要避免自動最終處理，<xref:System.IDisposable.Dispose%2A>實作可以呼叫<xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType>方法。  
  
 當您使用的物件，例如存取 unmanaged 的資源， <xref:System.IO.StreamWriter>，最好的作法是建立與執行個體`using`陳述式。 `using`陳述式就會自動關閉資料流並呼叫<xref:System.IDisposable.Dispose%2A>時正在使用它的程式碼已完成在物件上。 如需範例，請參閱<xref:System.IO.StreamWriter>類別。  
  
   
  
## Examples  
 下列範例示範如何實作<xref:System.IDisposable.Dispose%2A>方法。  
  
 [!code-cpp[System.IDisposable.Dispose Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CPP/idisposabledispose.cpp#1)]
 [!code-csharp[System.IDisposable.Dispose Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CS/idisposabledispose.cs#1)]
 [!code-vb[System.IDisposable.Dispose Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/VB/idisposabledispose.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>