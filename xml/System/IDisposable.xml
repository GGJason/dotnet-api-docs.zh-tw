<Type Name="IDisposable" FullName="System.IDisposable">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="412bc937768dc61068983038308bc6d28e1b145d" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48590384" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.IDisposable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDisposable" />
  <TypeSignature Language="F#" Value="type IDisposable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="54546-101">提供用於釋放 Unmanaged 資源的機制。</span>
      <span class="sxs-lookup">
        <span data-stu-id="54546-101">Provides a mechanism for releasing unmanaged resources.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="54546-102">此介面的主要用途是釋放 unmanaged 的資源。</span><span class="sxs-lookup"><span data-stu-id="54546-102">The primary use of this interface is to release unmanaged resources.</span></span> <span data-ttu-id="54546-103">記憶體回收行程自動釋放該物件已不再使用時，配置給受管理物件的記憶體。</span><span class="sxs-lookup"><span data-stu-id="54546-103">The garbage collector automatically releases the memory allocated to a managed object when that object is no longer used.</span></span> <span data-ttu-id="54546-104">不過，不可能預測何時會發生記憶體回收。</span><span class="sxs-lookup"><span data-stu-id="54546-104">However, it is not possible to predict when garbage collection will occur.</span></span> <span data-ttu-id="54546-105">此外，記憶體回收行程對此一無所知的視窗控制代碼，例如的 unmanaged 資源，或開啟檔案和資料流。</span><span class="sxs-lookup"><span data-stu-id="54546-105">Furthermore, the garbage collector has no knowledge of unmanaged resources such as window handles, or open files and streams.</span></span>  
  
 <span data-ttu-id="54546-106">使用<xref:System.IDisposable.Dispose%2A>這個介面，明確地使用記憶體回收行程釋放搭配使用的 unmanaged 的資源的方法。</span><span class="sxs-lookup"><span data-stu-id="54546-106">Use the <xref:System.IDisposable.Dispose%2A> method of this interface to explicitly release unmanaged resources in conjunction with the garbage collector.</span></span> <span data-ttu-id="54546-107">當不再需要物件時，物件的取用者可以呼叫這個方法。</span><span class="sxs-lookup"><span data-stu-id="54546-107">The consumer of an object can call this method when the object is no longer needed.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="54546-108">它是重大變更，以便加入<xref:System.IDisposable>現有類別的介面。</span><span class="sxs-lookup"><span data-stu-id="54546-108">It is a breaking change to add the <xref:System.IDisposable> interface to an existing class.</span></span> <span data-ttu-id="54546-109">因為無法呼叫類型的預先存在的消費者<xref:System.IDisposable.Dispose%2A>，您就無法確定會釋出您的類型所持有的 unmanaged 的資源。</span><span class="sxs-lookup"><span data-stu-id="54546-109">Because pre-existing consumers of your type cannot call <xref:System.IDisposable.Dispose%2A>, you cannot be certain that unmanaged resources held by your type will be released.</span></span>  
  
 <span data-ttu-id="54546-110">因為<xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>不再需要的執行個體所擁有的資源時，將會呼叫型別的取用者的實作，您應是換行中的 managed 的物件<xref:System.Runtime.InteropServices.SafeHandle>（建議的替代做法），或應該覆寫<xref:System.Object.Finalize%2A?displayProperty=nameWithType>釋放 unmanaged 的資源，消費者忘記呼叫<xref:System.IDisposable.Dispose%2A>。</span><span class="sxs-lookup"><span data-stu-id="54546-110">Because the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation is called by the consumer of a type when the resources owned by an instance are no longer needed, you should either wrap the managed object in a <xref:System.Runtime.InteropServices.SafeHandle> (the recommended alternative), or you should override <xref:System.Object.Finalize%2A?displayProperty=nameWithType> to free unmanaged resources in the event that the consumer forgets to call <xref:System.IDisposable.Dispose%2A>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="54546-111">在.NET Framework 中，c + + 編譯器支援決定性的資源處置和不允許直接實作<xref:System.IDisposable.Dispose%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="54546-111">In the .NET Framework, the C++ compiler supports deterministic disposal of resources and does not allow direct implementation of the <xref:System.IDisposable.Dispose%2A> method.</span></span>  
  
 <span data-ttu-id="54546-112">詳細討論如何針對此介面和<xref:System.Object.Finalize%2A?displayProperty=nameWithType>方法使用，請參閱[回收](~/docs/standard/garbage-collection/index.md)並[實作 Dispose 方法](~/docs/standard/garbage-collection/implementing-dispose.md)主題。</span><span class="sxs-lookup"><span data-stu-id="54546-112">For a detailed discussion about how this interface and the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method are used, see the [Garbage Collection](~/docs/standard/garbage-collection/index.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md) topics.</span></span>  
  
## <a name="using-an-object-that-implements-idisposable"></a><span data-ttu-id="54546-113">使用實作 IDisposable 的物件</span><span class="sxs-lookup"><span data-stu-id="54546-113">Using an object that implements IDisposable</span></span>  
 <span data-ttu-id="54546-114">如果您的應用程式會直接使用該物件會實作<xref:System.IDisposable>介面，您應該呼叫物件的<xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>實作，當您完成使用它。</span><span class="sxs-lookup"><span data-stu-id="54546-114">If your app simply uses an object that implements the <xref:System.IDisposable> interface, you should call the object's <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation when you are finished using it.</span></span> <span data-ttu-id="54546-115">根據您的程式語言，您可以執行這兩種方式之一：</span><span class="sxs-lookup"><span data-stu-id="54546-115">Depending on your programming language, you can do this in one of two ways:</span></span>  
  
-   <span data-ttu-id="54546-116">使用的語言建構，例如`using`C# 和 Visual Basic 中的陳述式。</span><span class="sxs-lookup"><span data-stu-id="54546-116">By using a language construct such as the `using` statement in C# and Visual Basic.</span></span>  
  
-   <span data-ttu-id="54546-117">藉由包裝在呼叫<xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>中的實作`try` / `finally`區塊。</span><span class="sxs-lookup"><span data-stu-id="54546-117">By wrapping the call to the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation in a `try`/`finally` block.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="54546-118">文件型別都會實作<xref:System.IDisposable>請注意，並包含呼叫的提醒其<xref:System.IDisposable.Dispose%2A>實作。</span><span class="sxs-lookup"><span data-stu-id="54546-118">Documentation for types that implement <xref:System.IDisposable> note that fact and include a reminder to call its <xref:System.IDisposable.Dispose%2A> implementation.</span></span>  
  
<a name="Using"></a>   
### <a name="the-c-and-visual-basic-using-statement"></a><span data-ttu-id="54546-119">C# 和 Visual Basic 中使用的陳述式</span><span class="sxs-lookup"><span data-stu-id="54546-119">The C# and Visual Basic Using statement</span></span>  
 <span data-ttu-id="54546-120">如果您的語言支援一種建構，例如[使用](~/docs/csharp/language-reference/keywords/using.md)C# 中的陳述式並[Using](~/docs/visual-basic/language-reference/statements/using-statement.md)陳述式在 Visual Basic 中的，您可以使用它而不是明確地呼叫<xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>自己。</span><span class="sxs-lookup"><span data-stu-id="54546-120">If your language supports a construct such as the [using](~/docs/csharp/language-reference/keywords/using.md) statement in C# and the [Using](~/docs/visual-basic/language-reference/statements/using-statement.md) statement in Visual Basic, you can use it instead of explicitly calling <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> yourself.</span></span> <span data-ttu-id="54546-121">下列範例會使用這種方式定義`WordCount`保留檔案及中的單字數目的相關資訊的類別。</span><span class="sxs-lookup"><span data-stu-id="54546-121">The following example uses this approach in defining a `WordCount` class that preserves information about a file and the number of words in it.</span></span>  
  
 [!code-csharp[System.IDisposable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/calling1.cs#1)]
 [!code-vb[System.IDisposable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/calling1.vb#1)]  
  
 <span data-ttu-id="54546-122">`using`陳述式是語法便利性，實際。</span><span class="sxs-lookup"><span data-stu-id="54546-122">The `using` statement is actually a syntactic convenience.</span></span> <span data-ttu-id="54546-123">在編譯時期，語言編譯器會實作中繼語言 (IL) `try` / `finally`區塊。</span><span class="sxs-lookup"><span data-stu-id="54546-123">At compile time, the language compiler implements the intermediate language (IL) for a `try`/`finally` block.</span></span>  
  
 <span data-ttu-id="54546-124">如需詳細資訊`using`陳述式，請參閱 < [Using 陳述式](~/docs/visual-basic/language-reference/statements/using-statement.md)或是[using 陳述式](~/docs/csharp/language-reference/keywords/using-statement.md)主題。</span><span class="sxs-lookup"><span data-stu-id="54546-124">For more information about the `using` statement, see the [Using Statement](~/docs/visual-basic/language-reference/statements/using-statement.md) or [using Statement](~/docs/csharp/language-reference/keywords/using-statement.md) topics.</span></span>  
  
### <a name="the-tryfinally-block"></a><span data-ttu-id="54546-125">在 Try/Finally 區塊</span><span class="sxs-lookup"><span data-stu-id="54546-125">The Try/Finally block</span></span>  
 <span data-ttu-id="54546-126">如果您的程式語言不支援的建構，例如`using`陳述式，以 C# 或 Visual Basic 中，或如果您不想使用它，您可以呼叫<xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>實作`finally`區塊`try` / `finally`陳述式。</span><span class="sxs-lookup"><span data-stu-id="54546-126">If your programming language does not support a construct like the `using` statement in C# or Visual Basic, or if you prefer not to use it, you can call the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation from the `finally` block of a `try`/`finally` statement.</span></span> <span data-ttu-id="54546-127">下列範例會取代`using`在上述範例中使用封鎖`try` / `finally`區塊。</span><span class="sxs-lookup"><span data-stu-id="54546-127">The following example replaces the `using` block in the previous example with a `try`/`finally` block.</span></span>  
  
 [!code-csharp[System.IDisposable#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/calling2.cs#2)]
 [!code-vb[System.IDisposable#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/calling2.vb#2)]  
  
 <span data-ttu-id="54546-128">如需詳細資訊`try` / `finally`模式，請參閱[試...Catch...Try...catch...finally 陳述式](~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md)， [try finally](~/docs/csharp/language-reference/keywords/try-finally.md)，或[try-finally 陳述式](http://msdn.microsoft.com/library/514400c1-c322-4bf3-9e48-3047240b8a82)。</span><span class="sxs-lookup"><span data-stu-id="54546-128">For more information about the `try`/`finally` pattern, see [Try...Catch...Finally Statement](~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md), [try-finally](~/docs/csharp/language-reference/keywords/try-finally.md), or [try-finally Statement](http://msdn.microsoft.com/library/514400c1-c322-4bf3-9e48-3047240b8a82).</span></span>  
  
## <a name="implementing-idisposable"></a><span data-ttu-id="54546-129">實作 IDisposable</span><span class="sxs-lookup"><span data-stu-id="54546-129">Implementing IDisposable</span></span>  
 <span data-ttu-id="54546-130">您應該實作<xref:System.IDisposable>只有當您的型別會直接使用 unmanaged 的資源。</span><span class="sxs-lookup"><span data-stu-id="54546-130">You should implement <xref:System.IDisposable> only if your type uses unmanaged resources directly.</span></span> <span data-ttu-id="54546-131">類型的消費者可以呼叫您<xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>實作來釋放資源，當不再需要的執行個體。</span><span class="sxs-lookup"><span data-stu-id="54546-131">The consumers of your type can call your <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation to free resources when the instance is no longer needed.</span></span> <span data-ttu-id="54546-132">若要處理呼叫失敗的情況<xref:System.IDisposable.Dispose%2A>，您應該的使用的類別衍生自<xref:System.Runtime.InteropServices.SafeHandle>要包裝的 unmanaged 的資源，也應該覆寫<xref:System.Object.Finalize%2A?displayProperty=nameWithType>是參考類型的方法。</span><span class="sxs-lookup"><span data-stu-id="54546-132">To handle cases in which they fail to call <xref:System.IDisposable.Dispose%2A>, you should either use a class derived from <xref:System.Runtime.InteropServices.SafeHandle> to wrap the unmanaged resources, or you should override the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method for a reference type.</span></span> <span data-ttu-id="54546-133">在任一情況下，您可以使用<xref:System.IDisposable.Dispose%2A>執行任何清理之後使用的 unmanaged 的資源，例如釋出、 釋放或重設 unmanaged 的資源所需的方法。</span><span class="sxs-lookup"><span data-stu-id="54546-133">In either case, you use the <xref:System.IDisposable.Dispose%2A> method to perform whatever cleanup is necessary after using the unmanaged resources, such as freeing, releasing, or resetting the unmanaged resources.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="54546-134">如果您要定義基底類別使用 unmanaged 的資源所擁有，或可能有，應該受到處置的子類別，您應該實作<xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>方法，並提供的第二個多載`Dispose`、 下一步中所述一節。</span><span class="sxs-lookup"><span data-stu-id="54546-134">If you are defining a base class that uses unmanaged resources and that either has, or is likely to have, subclasses that should be disposed, you should implement the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> method and provide a second overload of `Dispose`, as discussed in the next section.</span></span>  
  
<a name="BaseClasses"></a>   
## <a name="idisposable-and-the-inheritance-hierarchy"></a><span data-ttu-id="54546-135">IDisposable 與繼承階層架構</span><span class="sxs-lookup"><span data-stu-id="54546-135">IDisposable and the inheritance hierarchy</span></span>  
 <span data-ttu-id="54546-136">具有應為可處置的子類別的基底類別必須實作<xref:System.IDisposable>，如下所示。</span><span class="sxs-lookup"><span data-stu-id="54546-136">A base class with subclasses that should be disposable must implement <xref:System.IDisposable> as follows.</span></span> <span data-ttu-id="54546-137">您應該使用此模式，每當您實作<xref:System.IDisposable>適用於不是任何類型`sealed`(`NotInheritable` Visual Basic 中)。</span><span class="sxs-lookup"><span data-stu-id="54546-137">You should use this pattern whenever you implement <xref:System.IDisposable> on any type that isn't `sealed` (`NotInheritable` in Visual Basic).</span></span>  
  
-   <span data-ttu-id="54546-138">它應該提供一個公用、 非虛擬<xref:System.IDisposable.Dispose>方法，並受保護虛擬`Dispose(Boolean disposing)`方法。</span><span class="sxs-lookup"><span data-stu-id="54546-138">It should provide one public, non-virtual <xref:System.IDisposable.Dispose> method and a protected virtual `Dispose(Boolean disposing)` method.</span></span>  
  
-   <span data-ttu-id="54546-139"><xref:System.IDisposable.Dispose>方法必須呼叫`Dispose(true)`和應該隱藏最終處理的效能。</span><span class="sxs-lookup"><span data-stu-id="54546-139">The <xref:System.IDisposable.Dispose> method must call `Dispose(true)` and should suppress finalization for performance.</span></span>  
  
-   <span data-ttu-id="54546-140">基底類型不應該包含任何完成項。</span><span class="sxs-lookup"><span data-stu-id="54546-140">The base type should not include any finalizers.</span></span>  
  
 <span data-ttu-id="54546-141">下列程式碼片段會反映基底類別的處置模式。</span><span class="sxs-lookup"><span data-stu-id="54546-141">The following code fragment reflects the dispose pattern for base classes.</span></span> <span data-ttu-id="54546-142">它會假設您的類型不覆寫<xref:System.Object.Finalize%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="54546-142">It assumes that your type does not override the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method.</span></span>  
  
 [!code-csharp[System.IDisposable#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/base1.cs#3)]
 [!code-vb[System.IDisposable#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/base1.vb#3)]  
  
 <span data-ttu-id="54546-143">如果您覆寫<xref:System.Object.Finalize%2A?displayProperty=nameWithType>方法中，您的類別應該實作下列模式。</span><span class="sxs-lookup"><span data-stu-id="54546-143">If you do override the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method, your class should implement the following pattern.</span></span>  
  
 [!code-csharp[System.IDisposable#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/base2.cs#5)]
 [!code-vb[System.IDisposable#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/base2.vb#5)]  
  
 <span data-ttu-id="54546-144">子類別應實作可處置模式，如下所示：</span><span class="sxs-lookup"><span data-stu-id="54546-144">Subclasses should implement the disposable pattern as follows:</span></span>  
  
-   <span data-ttu-id="54546-145">它們必須覆寫 `Dispose(Boolean)` 並呼叫基底類別 `Dispose(Boolean)` 實作。</span><span class="sxs-lookup"><span data-stu-id="54546-145">They must override `Dispose(Boolean)` and call the base class `Dispose(Boolean)` implementation.</span></span>  
  
-   <span data-ttu-id="54546-146">如有需要，它們可以提供完成項。</span><span class="sxs-lookup"><span data-stu-id="54546-146">They can provide a finalizer if needed.</span></span> <span data-ttu-id="54546-147">完成項必須呼叫 `Dispose(false)`。</span><span class="sxs-lookup"><span data-stu-id="54546-147">The finalizer must call `Dispose(false)`.</span></span>  
  
 <span data-ttu-id="54546-148">請注意，衍生的類別不本身會實作<xref:System.IDisposable>介面，並沒有無參數<xref:System.IDisposable.Dispose%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="54546-148">Note that derived classes do not themselves implement the <xref:System.IDisposable> interface and do not include a parameterless <xref:System.IDisposable.Dispose%2A> method.</span></span> <span data-ttu-id="54546-149">它們只會覆寫基底類別`Dispose(Boolean)`方法。</span><span class="sxs-lookup"><span data-stu-id="54546-149">They only override the base class `Dispose(Boolean)` method.</span></span>  
  
 <span data-ttu-id="54546-150">下列程式碼片段會反映在衍生類別的處置模式。</span><span class="sxs-lookup"><span data-stu-id="54546-150">The following code fragment reflects the dispose pattern for derived classes.</span></span> <span data-ttu-id="54546-151">它會假設您的類型不覆寫<xref:System.Object.Finalize%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="54546-151">It assumes that your type does not override the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method.</span></span>  
  
 [!code-csharp[System.IDisposable#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/derived1.cs#4)]
 [!code-vb[System.IDisposable#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/derived1.vb#4)]  
  
   
  
## Examples  
 <span data-ttu-id="54546-152">下列範例示範如何建立資源類別可實作<xref:System.IDisposable>介面。</span><span class="sxs-lookup"><span data-stu-id="54546-152">The following example demonstrates how to create a resource class that implements the <xref:System.IDisposable> interface.</span></span>  
  
 [!code-cpp[System.IDisposable.Dispose Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CPP/idisposabledispose.cpp#1)]
 [!code-csharp[System.IDisposable.Dispose Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CS/idisposabledispose.cs#1)]
 [!code-vb[System.IDisposable.Dispose Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/VB/idisposabledispose.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle" />
    <related type="Article" href="~/docs/standard/garbage-collection/implementing-dispose.md">
      <span data-ttu-id="54546-153">實作 Dispose 方法</span>
      <span class="sxs-lookup">
        <span data-stu-id="54546-153">Implementing a Dispose Method</span>
      </span>
    </related>
  </Docs>
  <Members>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IDisposable.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit" Usage="iDisposable.Dispose " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="54546-154">執行與釋放 (Free)、釋放 (Release) 或重設 Unmanaged 資源相關聯之應用程式定義的工作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="54546-154">Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="54546-155">使用此方法來關閉或釋放 unmanaged 的資源，例如檔案、 資料流，以及實作此介面之類別的執行個體所持有的控制代碼。</span><span class="sxs-lookup"><span data-stu-id="54546-155">Use this method to close or release unmanaged resources such as files, streams, and handles held by an instance of the class that implements this interface.</span></span> <span data-ttu-id="54546-156">依照慣例，這個方法用於所有與釋放物件所持有的資源相關聯的工作或準備重複使用的物件。</span><span class="sxs-lookup"><span data-stu-id="54546-156">By convention, this method is used for all tasks associated with freeing resources held by an object, or preparing an object for reuse.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="54546-157">如果您使用的類別可實作<xref:System.IDisposable>介面，您應該呼叫其<xref:System.IDisposable.Dispose%2A>當您完成使用類別的實作。</span><span class="sxs-lookup"><span data-stu-id="54546-157">If you are using a class that implements the <xref:System.IDisposable> interface, you should call its <xref:System.IDisposable.Dispose%2A> implementation when you are finished using the class.</span></span> <span data-ttu-id="54546-158">如需詳細資訊，請參閱中的 < 使用實作 IDisposable 的物件 > 一節<xref:System.IDisposable>主題。</span><span class="sxs-lookup"><span data-stu-id="54546-158">For more information, see the "Using an object that implements IDisposable" section in the <xref:System.IDisposable> topic.</span></span>  
  
 <span data-ttu-id="54546-159">當實作這個方法，請確定所有保留的資料傳播透過內含項目階層架構的呼叫所釋出資源。</span><span class="sxs-lookup"><span data-stu-id="54546-159">When implementing this method, ensure that all held resources are freed by propagating the call through the containment hierarchy.</span></span> <span data-ttu-id="54546-160">例如，如果物件的配置物件 B，而物件 B 會配置物件 C，然後 A<xref:System.IDisposable.Dispose%2A>實作必須呼叫<xref:System.IDisposable.Dispose%2A>b，它必須接著呼叫<xref:System.IDisposable.Dispose%2A>上 c。</span><span class="sxs-lookup"><span data-stu-id="54546-160">For example, if an object A allocates an object B, and object B allocates an object C, then A's <xref:System.IDisposable.Dispose%2A> implementation must call <xref:System.IDisposable.Dispose%2A> on B, which must in turn call <xref:System.IDisposable.Dispose%2A> on C.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="54546-161">C + + 編譯器支援決定性的資源處置，而且不允許直接實作<xref:System.IDisposable.Dispose%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="54546-161">The C++ compiler supports deterministic disposal of resources and does not allow direct implementation of the <xref:System.IDisposable.Dispose%2A> method.</span></span>  
  
 <span data-ttu-id="54546-162">物件還必須呼叫<xref:System.IDisposable.Dispose%2A>如果基底類別實作其基底類別方法<xref:System.IDisposable>。</span><span class="sxs-lookup"><span data-stu-id="54546-162">An object must also call the <xref:System.IDisposable.Dispose%2A> method of its base class if the base class implements <xref:System.IDisposable>.</span></span> <span data-ttu-id="54546-163">如需實作的詳細資訊<xref:System.IDisposable>上的基底類別和子類別，請參閱中的 < IDisposable 和繼承階層架構 > 一節<xref:System.IDisposable>主題。</span><span class="sxs-lookup"><span data-stu-id="54546-163">For more information about implementing <xref:System.IDisposable> on a base class and its subclasses, see the "IDisposable and the inheritance hierarchy" section in the <xref:System.IDisposable> topic.</span></span>  
  
 <span data-ttu-id="54546-164">如果物件的<xref:System.IDisposable.Dispose%2A>超過一次呼叫方法，該物件必須忽略所有呼叫第一個。</span><span class="sxs-lookup"><span data-stu-id="54546-164">If an object's <xref:System.IDisposable.Dispose%2A> method is called more than once, the object must ignore all calls after the first one.</span></span> <span data-ttu-id="54546-165">物件不能擲回例外狀況如果其<xref:System.IDisposable.Dispose%2A>多次呼叫方法。</span><span class="sxs-lookup"><span data-stu-id="54546-165">The object must not throw an exception if its <xref:System.IDisposable.Dispose%2A> method is called multiple times.</span></span> <span data-ttu-id="54546-166">執行個體方法以外<xref:System.IDisposable.Dispose%2A>可能會擲回<xref:System.ObjectDisposedException>時已經處置資源。</span><span class="sxs-lookup"><span data-stu-id="54546-166">Instance methods other than <xref:System.IDisposable.Dispose%2A> can throw an <xref:System.ObjectDisposedException> when resources are already disposed.</span></span>  
  
 <span data-ttu-id="54546-167">使用者可能預期資源類型，用以代表已配置的狀態，釋放的狀態與特定的慣例。</span><span class="sxs-lookup"><span data-stu-id="54546-167">Users might expect a resource type to use a particular convention to denote an allocated state versus a freed state.</span></span> <span data-ttu-id="54546-168">這個範例是資料流類別，以傳統上視為開啟或關閉。</span><span class="sxs-lookup"><span data-stu-id="54546-168">An example of this is stream classes, which are traditionally thought of as open or closed.</span></span> <span data-ttu-id="54546-169">具有這類的慣例的類別的實作器可能會選擇實作的公用方法，以自訂名稱，例如`Close`，以呼叫<xref:System.IDisposable.Dispose%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="54546-169">The implementer of a class that has such a convention might choose to implement a public method with a customized name, such as `Close`, that calls the <xref:System.IDisposable.Dispose%2A> method.</span></span>  
  
 <span data-ttu-id="54546-170">因為<xref:System.IDisposable.Dispose%2A>必須明確地呼叫方法，一律會有危險的 unmanaged 的資源並不會釋放，因為物件的取用者無法呼叫其<xref:System.IDisposable.Dispose%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="54546-170">Because the <xref:System.IDisposable.Dispose%2A> method must be called explicitly, there is always a danger that the unmanaged resources will not be released, because the consumer of an object fails to call its <xref:System.IDisposable.Dispose%2A> method.</span></span> <span data-ttu-id="54546-171">有兩種方式可避免這個問題：</span><span class="sxs-lookup"><span data-stu-id="54546-171">There are two ways to avoid this:</span></span>  
  
-   <span data-ttu-id="54546-172">將受控的資源包裝在物件衍生自<xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="54546-172">Wrap the managed resource in an object derived from <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType>.</span></span> <span data-ttu-id="54546-173">您<xref:System.IDisposable.Dispose%2A>實作，然後呼叫<xref:System.IDisposable.Dispose%2A>方法<xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType>執行個體。</span><span class="sxs-lookup"><span data-stu-id="54546-173">Your <xref:System.IDisposable.Dispose%2A> implementation then calls the <xref:System.IDisposable.Dispose%2A> method of the <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType> instances.</span></span> <span data-ttu-id="54546-174">如需詳細資訊，請參閱 「 SafeHandle 替代方法 」 一節<xref:System.Object.Finalize%2A?displayProperty=nameWithType>主題。</span><span class="sxs-lookup"><span data-stu-id="54546-174">For more information, see "The SafeHandle alternative" section in the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> topic.</span></span>  
  
-   <span data-ttu-id="54546-175">實作完成項來釋放資源時<xref:System.IDisposable.Dispose%2A>就不會呼叫。</span><span class="sxs-lookup"><span data-stu-id="54546-175">Implement a finalizer to free resources when <xref:System.IDisposable.Dispose%2A> is not called.</span></span> <span data-ttu-id="54546-176">根據預設，記憶體回收行程會自動呼叫物件的完成項再回收其記憶體。</span><span class="sxs-lookup"><span data-stu-id="54546-176">By default, the garbage collector automatically calls an object's finalizer before reclaiming its memory.</span></span> <span data-ttu-id="54546-177">不過，如果<xref:System.IDisposable.Dispose%2A>方法已被呼叫，為通常不必要的記憶體回收行程呼叫處置的物件的完成項。</span><span class="sxs-lookup"><span data-stu-id="54546-177">However, if the <xref:System.IDisposable.Dispose%2A> method has been called, it is typically unnecessary for the garbage collector to call the disposed object's finalizer.</span></span> <span data-ttu-id="54546-178">若要防止自動完成，<xref:System.IDisposable.Dispose%2A>實作可以呼叫<xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="54546-178">To prevent automatic finalization, <xref:System.IDisposable.Dispose%2A> implementations can call the <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="54546-179">當您使用的物件，例如存取 unmanaged 的資源， <xref:System.IO.StreamWriter>，理想的作法是建立與執行個體`using`陳述式。</span><span class="sxs-lookup"><span data-stu-id="54546-179">When you use an object that accesses unmanaged resources, such as a <xref:System.IO.StreamWriter>, a good practice is to create the instance with a `using` statement.</span></span> <span data-ttu-id="54546-180">`using`陳述式就會自動關閉資料流並呼叫<xref:System.IDisposable.Dispose%2A>物件正在使用它的程式碼完成時。</span><span class="sxs-lookup"><span data-stu-id="54546-180">The `using` statement automatically closes the stream and calls <xref:System.IDisposable.Dispose%2A> on the object when the code that is using it has completed.</span></span> <span data-ttu-id="54546-181">如需範例，請參閱<xref:System.IO.StreamWriter>類別。</span><span class="sxs-lookup"><span data-stu-id="54546-181">For an example, see the <xref:System.IO.StreamWriter> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="54546-182">下列範例示範如何實作<xref:System.IDisposable.Dispose%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="54546-182">The following example shows how you can implement the <xref:System.IDisposable.Dispose%2A> method.</span></span>  
  
 [!code-cpp[System.IDisposable.Dispose Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CPP/idisposabledispose.cpp#1)]
 [!code-csharp[System.IDisposable.Dispose Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CS/idisposabledispose.cs#1)]
 [!code-vb[System.IDisposable.Dispose Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/VB/idisposabledispose.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/garbage-collection/implementing-dispose.md">
          <span data-ttu-id="54546-183">實作 Dispose 方法</span>
          <span class="sxs-lookup">
            <span data-stu-id="54546-183">Implementing a Dispose Method</span>
          </span>
        </related>
      </Docs>
    </Member>
  </Members>
</Type>