<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IDisposable.xml" source-language="en-US" target-language="zh-TW">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac50f129b9e6cc6b4ce4a818f23df9a72208cdccc21.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0f129b9e6cc6b4ce4a818f23df9a72208cdccc21</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.IDisposable">
          <source>Provides a mechanism for releasing unmanaged resources.</source>
          <target state="translated">提供用於釋放 Unmanaged 資源的機制。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>The primary use of this interface is to release unmanaged resources.</source>
          <target state="translated">此介面的主要用途是釋放 unmanaged 的資源。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>The garbage collector automatically releases the memory allocated to a managed object when that object is no longer used.</source>
          <target state="translated">記憶體回收行程自動釋放該物件已不再使用時，配置給受管理物件的記憶體。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>However, it is not possible to predict when garbage collection will occur.</source>
          <target state="translated">不過，不能夠預測何時會發生記憶體回收。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>Furthermore, the garbage collector has no knowledge of unmanaged resources such as window handles, or open files and streams.</source>
          <target state="translated">此外，記憶體回收行程不認得的視窗控制代碼等的 unmanaged 資源，或開啟檔案和資料流。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>Use the <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method of this interface to explicitly release unmanaged resources in conjunction with the garbage collector.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>明確與記憶體回收行程釋放 unmanaged 的資源，搭配這個介面的方法。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>The consumer of an object can call this method when the object is no longer needed.</source>
          <target state="translated">物件的取用者不再需要物件時，可以呼叫這個方法。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>It is a breaking change to add the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface to an existing class.</source>
          <target state="translated">它是中斷變更，以便加入<ph id="ph1">&lt;xref:System.IDisposable&gt;</ph>現有類別的介面。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>Because pre-existing consumers of your type cannot call <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>, you cannot be certain that unmanaged resources held by your type will be released.</source>
          <target state="translated">因為您的型別既有的取用者無法呼叫<ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>，您就無法確定您的類型所持有的 unmanaged 的資源，將會釋放。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>Because the <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType&gt;</ph> implementation is called by the consumer of a type when the resources owned by an instance are no longer needed, you should either wrap the managed object in a <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> (the recommended alternative), or you should override <ph id="ph3">&lt;xref:System.Object.Finalize%2A?displayProperty=nameWithType&gt;</ph> to free unmanaged resources in the event that the consumer forgets to call <ph id="ph4">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>.</source>
          <target state="translated">因為<ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType&gt;</ph>實作稱為取用者類型的執行個體所擁有的資源不再需要時，您可能必須換行中的受管理的物件<ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph>（建議的替代做法），或應該覆寫<ph id="ph3">&lt;xref:System.Object.Finalize%2A?displayProperty=nameWithType&gt;</ph>釋放 unmanaged 的資源的消費者忘記呼叫<ph id="ph4">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>In the .NET Framework, the C++ compiler supports deterministic disposal of resources and does not allow direct implementation of the <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method.</source>
          <target state="translated">在.NET Framework 中，c + + 編譯器支援決定性的資源處置，並不允許直接實作<ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>For a detailed discussion about how this interface and the <ph id="ph1">&lt;xref:System.Object.Finalize%2A?displayProperty=nameWithType&gt;</ph> method are used, see the <bpt id="p1">[</bpt>Garbage Collection<ept id="p1">](http://msdn.microsoft.com/library/22b6cb97-0c80-4eeb-a2cf-5ed7655e37f9)</ept> and <bpt id="p2">[</bpt>Implementing a Dispose Method<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept> topics.</source>
          <target state="translated">如需如何的詳細討論此介面和<ph id="ph1">&lt;xref:System.Object.Finalize%2A?displayProperty=nameWithType&gt;</ph>方法可用，請參閱<bpt id="p1">[</bpt>回收<ept id="p1">](http://msdn.microsoft.com/library/22b6cb97-0c80-4eeb-a2cf-5ed7655e37f9)</ept>和<bpt id="p2">[</bpt>實作 Dispose 方法<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>主題。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>Using an object that implements IDisposable</source>
          <target state="translated">使用實作 IDisposable 的物件</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>If your app simply uses an object that implements the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface, you should call the object's <ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType&gt;</ph> implementation when you are finished using it.</source>
          <target state="translated">如果您的應用程式會直接使用該物件會實作<ph id="ph1">&lt;xref:System.IDisposable&gt;</ph>介面，您應該呼叫物件的<ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType&gt;</ph>實作，當您完成使用它。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>Depending on your programming language, you can do this in one of two ways:</source>
          <target state="translated">根據您的程式語言，您可以執行下列其中一種：</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>By using a language construct such as the <ph id="ph1">`using`</ph> statement in C# and Visual Basic.</source>
          <target state="translated">使用的語言建構例如<ph id="ph1">`using`</ph>在 C# 和 Visual Basic 中的陳述式。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>By wrapping the call to the <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType&gt;</ph> implementation in a <ph id="ph2">`try`</ph><ph id="ph3">/</ph><ph id="ph4">`finally`</ph> block.</source>
          <target state="translated">藉由呼叫換行<ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType&gt;</ph>中的實作<ph id="ph2">`try`</ph> <ph id="ph3">/</ph> <ph id="ph4">`finally`</ph>區塊。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>Documentation for types that implement <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> note that fact and include a reminder to call its <ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> implementation.</source>
          <target state="translated">文件型別都會實作<ph id="ph1">&lt;xref:System.IDisposable&gt;</ph>請注意，並包含提醒來呼叫其<ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>實作。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>The C# and Visual Basic Using statement</source>
          <target state="translated">C# 和 Visual Basic 所使用的陳述式</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>If your language supports a construct such as the <bpt id="p1">[</bpt>using<ept id="p1">](~/docs/csharp/language-reference/keywords/using.md)</ept> statement in C# and the <bpt id="p2">[</bpt>Using<ept id="p2">](~/docs/visual-basic/language-reference/statements/using-statement.md)</ept> statement in Visual Basic, you can use it instead of explicitly calling <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType&gt;</ph> yourself.</source>
          <target state="translated">如果您的語言支援的建構，例如<bpt id="p1">[</bpt>使用<ept id="p1">](~/docs/csharp/language-reference/keywords/using.md)</ept>C# 中的陳述式和<bpt id="p2">[</bpt>使用<ept id="p2">](~/docs/visual-basic/language-reference/statements/using-statement.md)</ept>在 Visual Basic 中的陳述式，您可以使用它而不是明確地呼叫<ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType&gt;</ph>自己。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>The following example uses this approach in defining a <ph id="ph1">`WordCount`</ph> class that preserves information about a file and the number of words in it.</source>
          <target state="translated">下列範例會使用這種方法在定義<ph id="ph1">`WordCount`</ph>可以保留檔案中的字組數目的相關資訊的類別。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>The <ph id="ph1">`using`</ph> statement is actually a syntactic convenience.</source>
          <target state="translated"><ph id="ph1">`using`</ph>陳述式是實際的語法便利性。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>At compile time, the language compiler implements the intermediate language (IL) for a <ph id="ph1">`try`</ph><ph id="ph2">/</ph><ph id="ph3">`finally`</ph> block.</source>
          <target state="translated">在編譯時期，語言編譯器實作中繼語言 (IL) <ph id="ph1">`try`</ph> <ph id="ph2">/</ph> <ph id="ph3">`finally`</ph>區塊。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>For more information about the <ph id="ph1">`using`</ph> statement, see the <bpt id="p1">[</bpt>Using Statement<ept id="p1">](~/docs/visual-basic/language-reference/statements/using-statement.md)</ept> or <bpt id="p2">[</bpt>using Statement<ept id="p2">](~/docs/csharp/language-reference/keywords/using-statement.md)</ept> topics.</source>
          <target state="translated">如需有關<ph id="ph1">`using`</ph>陳述式，請參閱<bpt id="p1">[</bpt>Using 陳述式<ept id="p1">](~/docs/visual-basic/language-reference/statements/using-statement.md)</ept>或<bpt id="p2">[</bpt>使用陳述式<ept id="p2">](~/docs/csharp/language-reference/keywords/using-statement.md)</ept>主題。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>The Try/Finally block</source>
          <target state="translated">Try/Finally 區塊</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>If your programming language does not support a construct like the <ph id="ph1">`using`</ph> statement in C# or Visual Basic, or if you prefer not to use it, you can call the <ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType&gt;</ph> implementation from the <ph id="ph3">`finally`</ph> block of a <ph id="ph4">`try`</ph><ph id="ph5">/</ph><ph id="ph6">`finally`</ph> statement.</source>
          <target state="translated">如果您的程式語言不支援的建構，例如<ph id="ph1">`using`</ph>陳述式，以 C# 或 Visual Basic 中，或如果您不想使用它，您可以呼叫<ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType&gt;</ph>實作從<ph id="ph3">`finally`</ph>區塊<ph id="ph4">`try`</ph> <ph id="ph5">/</ph> <ph id="ph6">`finally`</ph>陳述式。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>The following example replaces the <ph id="ph1">`using`</ph> block in the previous example with a <ph id="ph2">`try`</ph><ph id="ph3">/</ph><ph id="ph4">`finally`</ph> block.</source>
          <target state="translated">下列範例會取代<ph id="ph1">`using`</ph>封鎖先前的範例，但在<ph id="ph2">`try`</ph> <ph id="ph3">/</ph> <ph id="ph4">`finally`</ph>區塊。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>For more information about the <ph id="ph1">`try`</ph><ph id="ph2">/</ph><ph id="ph3">`finally`</ph> pattern, see <bpt id="p1">[</bpt>Try...Catch...Finally Statement<ept id="p1">](~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md)</ept>, <bpt id="p2">[</bpt>try-finally<ept id="p2">](~/docs/csharp/language-reference/keywords/try-finally.md)</ept>, or <bpt id="p3">[</bpt>try-finally Statement<ept id="p3">](http://msdn.microsoft.com/library/514400c1-c322-4bf3-9e48-3047240b8a82)</ept>.</source>
          <target state="translated">如需有關<ph id="ph1">`try`</ph> <ph id="ph2">/</ph> <ph id="ph3">`finally`</ph>模式，請參閱<bpt id="p1">[</bpt>再試一次...Catch...Finally 陳述式<ept id="p1">](~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md)</ept>，<bpt id="p2">[</bpt>再試一次最後<ept id="p2">](~/docs/csharp/language-reference/keywords/try-finally.md)</ept>，或<bpt id="p3">[</bpt>try-finally 陳述式<ept id="p3">](http://msdn.microsoft.com/library/514400c1-c322-4bf3-9e48-3047240b8a82)</ept>。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>Implementing IDisposable</source>
          <target state="translated">實作 IDisposable</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>You should implement <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> only if your type uses unmanaged resources directly.</source>
          <target state="translated">您應該實作<ph id="ph1">&lt;xref:System.IDisposable&gt;</ph>只有當您的類型會直接使用 unmanaged 的資源。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>The consumers of your type can call your <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType&gt;</ph> implementation to free resources when the instance is no longer needed.</source>
          <target state="translated">類型的消費者可以呼叫您<ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType&gt;</ph>實作，以執行個體已不再需要時釋放資源。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>To handle cases in which they fail to call <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>, you should either use a class derived from <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> to wrap the unmanaged resources, or you should override the <ph id="ph3">&lt;xref:System.Object.Finalize%2A?displayProperty=nameWithType&gt;</ph> method for a reference type.</source>
          <target state="translated">為了處理呼叫的失敗的情況<ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>，您應該的使用的類別衍生自<ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph>包裝的 unmanaged 的資源，或您應覆寫<ph id="ph3">&lt;xref:System.Object.Finalize%2A?displayProperty=nameWithType&gt;</ph>參考類型的方法。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>In either case, you use the <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method to perform whatever cleanup is necessary after using the unmanaged resources, such as freeing, releasing, or resetting the unmanaged resources.</source>
          <target state="translated">在任一情況下，您可以使用<ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>方法，以執行任何清理之後需要使用的 unmanaged 的資源，例如，釋出、 釋放或重設 unmanaged 的資源。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>If you are defining a base class that uses unmanaged resources and that either has, or is likely to have, subclasses that should be disposed, you should implement the <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType&gt;</ph> method and provide a second overload of <ph id="ph2">`Dispose`</ph>, as discussed in the next section.</source>
          <target state="translated">如果您要定義基底類別所使用的 unmanaged 的資源，，或可能有，應該處置的子類別，您應該實作<ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType&gt;</ph>方法，並提供的第二個多載<ph id="ph2">`Dispose`</ph>，如下所述的下一步一節。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>IDisposable and the inheritance hierarchy</source>
          <target state="translated">IDisposable 與繼承階層</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>A base class with subclasses that should be disposable must implement <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> as follows.</source>
          <target state="translated">應該是可處置的子類別的基底類別必須實作<ph id="ph1">&lt;xref:System.IDisposable&gt;</ph>，如下所示。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>You should use this pattern whenever you implement <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> on any type that isn't <ph id="ph2">`sealed`</ph> (<ph id="ph3">`NotInheritable`</ph> in Visual Basic).</source>
          <target state="translated">您應該使用此模式，每當您實作<ph id="ph1">&lt;xref:System.IDisposable&gt;</ph>上沒有任何型別<ph id="ph2">`sealed`</ph>(<ph id="ph3">`NotInheritable`</ph>在 Visual Basic 中)。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>It should provide one public, non-virtual <ph id="ph1">&lt;xref:System.IDisposable.Dispose&gt;</ph> method and a protected virtual <ph id="ph2">`Dispose(Boolean disposing)`</ph> method.</source>
          <target state="translated">它應該提供一個公用、 非虛擬<ph id="ph1">&lt;xref:System.IDisposable.Dispose&gt;</ph>方法和一個受保護虛擬<ph id="ph2">`Dispose(Boolean disposing)`</ph>方法。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>The <ph id="ph1">&lt;xref:System.IDisposable.Dispose&gt;</ph> method must call <ph id="ph2">`Dispose(true)`</ph> and should suppress finalization for performance.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IDisposable.Dispose&gt;</ph>方法必須呼叫<ph id="ph2">`Dispose(true)`</ph>和應該隱藏最終處理的效能。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>The base type should not include any finalizers.</source>
          <target state="translated">基底類型不應該包含任何完成項。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>The following code fragment reflects the dispose pattern for base classes.</source>
          <target state="translated">下列程式碼片段會反映基底類別的處置模式。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>It assumes that your type does not override the <ph id="ph1">&lt;xref:System.Object.Finalize%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">它會假設您的類型不覆寫<ph id="ph1">&lt;xref:System.Object.Finalize%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>If you do override the <ph id="ph1">&lt;xref:System.Object.Finalize%2A?displayProperty=nameWithType&gt;</ph> method, your class should implement the following pattern.</source>
          <target state="translated">如果您不要覆寫<ph id="ph1">&lt;xref:System.Object.Finalize%2A?displayProperty=nameWithType&gt;</ph>方法，您的類別應實作下列的模式。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>Subclasses should implement the disposable pattern as follows:</source>
          <target state="translated">子類別應實作可處置模式，如下所示：</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>They must override <ph id="ph1">`Dispose(Boolean)`</ph> and call the base class <ph id="ph2">`Dispose(Boolean)`</ph> implementation.</source>
          <target state="translated">它們必須覆寫 <ph id="ph1">`Dispose(Boolean)`</ph> 並呼叫基底類別 <ph id="ph2">`Dispose(Boolean)`</ph> 實作。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>They can provide a finalizer if needed.</source>
          <target state="translated">如有需要，它們可以提供完成項。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>The finalizer must call <ph id="ph1">`Dispose(false)`</ph>.</source>
          <target state="translated">完成項必須呼叫 <ph id="ph1">`Dispose(false)`</ph>。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>Note that derived classes do not themselves implement the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface and do not include a parameterless <ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method.</source>
          <target state="translated">請注意，在衍生的類別不本身會實作<ph id="ph1">&lt;xref:System.IDisposable&gt;</ph>介面，並不包含無參數<ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>They only override the base class <ph id="ph1">`Dispose(Boolean)`</ph> method.</source>
          <target state="translated">它們只會覆寫基底類別<ph id="ph1">`Dispose(Boolean)`</ph>方法。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>The following code fragment reflects the dispose pattern for derived classes.</source>
          <target state="translated">下列程式碼片段會反映在衍生類別的處置模式。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>It assumes that your type does not override the <ph id="ph1">&lt;xref:System.Object.Finalize%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">它會假設您的類型不覆寫<ph id="ph1">&lt;xref:System.Object.Finalize%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>The following example demonstrates how to create a resource class that implements the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface.</source>
          <target state="translated">下列範例示範如何建立資源類別可實作<ph id="ph1">&lt;xref:System.IDisposable&gt;</ph>介面。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.IDisposable.Dispose">
          <source>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</source>
          <target state="translated">執行與釋放 (Free)、釋放 (Release) 或重設 Unmanaged 資源相關聯之應用程式定義的工作。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>Use this method to close or release unmanaged resources such as files, streams, and handles held by an instance of the class that implements this interface.</source>
          <target state="translated">使用這個方法可以關閉或釋放 unmanaged 的資源，例如檔案、 資料流，以及實作此介面之類別的執行個體所持有的控制代碼。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>By convention, this method is used for all tasks associated with freeing resources held by an object, or preparing an object for reuse.</source>
          <target state="translated">依照慣例，這個方法用來執行與釋放物件所掌握的資源相關聯的所有工作或準備重複使用的物件。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>If you are using a class that implements the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface, you should call its <ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> implementation when you are finished using the class.</source>
          <target state="translated">如果您使用的類別，實作<ph id="ph1">&lt;xref:System.IDisposable&gt;</ph>介面，您應該呼叫其<ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>當您完成使用類別的實作。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>For more information, see the "Using an object that implements IDisposable" section in the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> topic.</source>
          <target state="translated">如需詳細資訊，請參閱中的 &lt; 使用實作 IDisposable 的物件 &gt; 一節<ph id="ph1">&lt;xref:System.IDisposable&gt;</ph>主題。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>When implementing this method, ensure that all held resources are freed by propagating the call through the containment hierarchy.</source>
          <target state="translated">當實作這個方法，請確定所有持有的資源釋放透過內含項目階層架構的呼叫傳播。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>For example, if an object A allocates an object B, and object B allocates an object C, then A's <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> implementation must call <ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> on B, which must in turn call <ph id="ph3">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> on C.</source>
          <target state="translated">例如，如果物件 A 會配置物件 B，而物件 B 會配置物件 C，然後 A 的<ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>實作必須呼叫<ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>b，它必須接著呼叫<ph id="ph3">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>c 上</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>The C++ compiler supports deterministic disposal of resources and does not allow direct implementation of the <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method.</source>
          <target state="translated">C + + 編譯器支援決定性的資源處置，並不允許直接實作<ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>An object must also call the <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method of its base class if the base class implements <ph id="ph2">&lt;xref:System.IDisposable&gt;</ph>.</source>
          <target state="translated">物件也必須呼叫<ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>如果基底類別會實作其基底類別方法<ph id="ph2">&lt;xref:System.IDisposable&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>For more information about implementing <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> on a base class and its subclasses, see the "IDisposable and the inheritance hierarchy" section in the <ph id="ph2">&lt;xref:System.IDisposable&gt;</ph> topic.</source>
          <target state="translated">如需有關實作<ph id="ph1">&lt;xref:System.IDisposable&gt;</ph>在基底類別和子類別，請參閱中的 &lt; IDisposable 和繼承階層架構 &gt; 一節<ph id="ph2">&lt;xref:System.IDisposable&gt;</ph>主題。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>If an object's <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method is called more than once, the object must ignore all calls after the first one.</source>
          <target state="translated">如果物件<ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>方法呼叫一次以上，物件必須忽略所有呼叫的第一個之後。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>The object must not throw an exception if its <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method is called multiple times.</source>
          <target state="translated">物件不能擲回例外狀況如果其<ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>多次呼叫方法。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>Instance methods other than <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> can throw an <ph id="ph2">&lt;xref:System.ObjectDisposedException&gt;</ph> when resources are already disposed.</source>
          <target state="translated">執行個體方法以外<ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>可以擲回<ph id="ph2">&lt;xref:System.ObjectDisposedException&gt;</ph>時已經處置資源。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>Users might expect a resource type to use a particular convention to denote an allocated state versus a freed state.</source>
          <target state="translated">使用者可能預期要使用特定的慣例來代表已配置的狀態與 釋放狀態的資源類型。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>An example of this is stream classes, which are traditionally thought of as open or closed.</source>
          <target state="translated">舉例來說，這是資料流類別，以傳統上視為開啟或關閉。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>The implementer of a class that has such a convention might choose to implement a public method with a customized name, such as <ph id="ph1">`Close`</ph>, that calls the <ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method.</source>
          <target state="translated">類別具有這類的慣例的實作器可能會選擇實作的公用方法，以自訂名稱，例如<ph id="ph1">`Close`</ph>，該呼叫<ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>Because the <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method must be called explicitly, there is always a danger that the unmanaged resources will not be released, because the consumer of an object fails to call its <ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method.</source>
          <target state="translated">因為<ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>必須明確地呼叫方法，一定會有危險的 unmanaged 的資源不會釋放，因為物件的取用者無法呼叫其<ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>There are two ways to avoid this:</source>
          <target state="translated">有兩種方式可避免此狀況：</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>Wrap the managed resource in an object derived from <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">將 managed 的資源包裝在物件衍生自<ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>Your <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> implementation then calls the <ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType&gt;</ph> instances.</source>
          <target state="translated">您<ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>然後實作會呼叫<ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>方法<ph id="ph3">&lt;xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType&gt;</ph>執行個體。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>For more information, see "The SafeHandle alternative" section in the <ph id="ph1">&lt;xref:System.Object.Finalize%2A?displayProperty=nameWithType&gt;</ph> topic.</source>
          <target state="translated">如需詳細資訊，請參閱 「 SafeHandle 替代方法 」 一節<ph id="ph1">&lt;xref:System.Object.Finalize%2A?displayProperty=nameWithType&gt;</ph>主題。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>Implement a finalizer to free resources when <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> is not called.</source>
          <target state="translated">實作完成項，以釋出資源時<ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>則不會呼叫。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>By default, the garbage collector automatically calls an object's finalizer before reclaiming its memory.</source>
          <target state="translated">根據預設，記憶體回收行程會自動呼叫物件的完成項再回收其記憶體。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>However, if the <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method has been called, it is typically unnecessary for the garbage collector to call the disposed object's finalizer.</source>
          <target state="translated">不過，如果<ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>方法已被呼叫，為通常不必要的記憶體回收行程呼叫已處置的物件完成項。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>To prevent automatic finalization, <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> implementations can call the <ph id="ph2">&lt;xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">若要避免自動最終處理，<ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>實作可以呼叫<ph id="ph2">&lt;xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>When you use an object that accesses unmanaged resources, such as a <ph id="ph1">&lt;xref:System.IO.StreamWriter&gt;</ph>, a good practice is to create the instance with a <ph id="ph2">`using`</ph> statement.</source>
          <target state="translated">當您使用的物件，例如存取 unmanaged 的資源， <ph id="ph1">&lt;xref:System.IO.StreamWriter&gt;</ph>，最好的作法是建立與執行個體<ph id="ph2">`using`</ph>陳述式。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>The <ph id="ph1">`using`</ph> statement automatically closes the stream and calls <ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> on the object when the code that is using it has completed.</source>
          <target state="translated"><ph id="ph1">`using`</ph>陳述式就會自動關閉資料流並呼叫<ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>時正在使用它的程式碼已完成在物件上。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>For an example, see the <ph id="ph1">&lt;xref:System.IO.StreamWriter&gt;</ph> class.</source>
          <target state="translated">如需範例，請參閱<ph id="ph1">&lt;xref:System.IO.StreamWriter&gt;</ph>類別。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>The following example shows how you can implement the <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method.</source>
          <target state="translated">下列範例示範如何實作<ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>方法。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>