<Type Name="Action&lt;T&gt;" FullName="System.Action&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="dd092c3c61377edf68a48487d8fa19cd17b06d55" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36433883" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate void Action&lt;in T&gt;(T obj);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Action`1&lt;- T&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Action`1" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub Action(Of In T)(obj As T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public delegate void Action(T obj);" />
  <TypeSignature Language="F#" Value="type Action&lt;'T&gt; = delegate of 'T -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="obj" Type="T" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T">這個委派所封裝之方法的參數類型。</typeparam>
    <param name="obj">這個委派所封裝之方法的參數。</param>
    <summary>封裝具有單一參數的方法，並且不會傳回值。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用<xref:System.Action%601>要做為參數傳遞給方法，而不必明確宣告自訂委派的委派。 封裝的方法必須對應至這個委派所定義的方法簽章。 這表示封裝的方法必須有一個由值傳遞給它的參數，而且必須傳回值。 (在 C# 中，此方法必須傳回`void`。 在 Visual Basic 中，它必須定義的`Sub`...`End Sub` 建構。 它也可以傳回值，則會忽略這個值的方法。）通常，這種方法用來執行作業。  
  
> [!NOTE]
>  若要參考具有 1 個參數並傳回值的方法，使用泛型<xref:System.Func%602>改為委派。  
  
 當您使用<xref:System.Action%601>委派，您不需要明確定義這個委派會封裝具有單一參數的方法。 例如，下列程式碼明確宣告委派，名為`DisplayMessage`和指派參考<xref:System.Console.WriteLine%2A>方法或`ShowWindowsMessage`其委派執行個體的方法。  
  
 [!code-cpp[System.Action~1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Action~1/cpp/delegate.cpp#1)]
 [!code-csharp[System.Action~1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Delegate.cs#1)]
 [!code-vb[System.Action~1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~1/vb/Delegate.vb#1)]  
  
 下列範例會具現化來簡化此程式碼<xref:System.Action%601>而不是明確地定義新的委派，並為其指派具名的方法的委派。  
  
 [!code-cpp[System.Action~1#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Action~1/cpp/action`1.cpp#2)]
 [!code-csharp[System.Action~1#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Action1.cs#2)]
 [!code-vb[System.Action~1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~1/vb/Action1.vb#2)]  
  
 您也可以使用<xref:System.Action%601>委派與 C# 中的匿名方法，如下列範例所示。 (如匿名方法的簡介，請參閱[匿名方法](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md)。)  
  
 [!code-csharp[System.Action~1#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Anon.cs#3)]  
  
 您也可以指派 lambda 運算式給<xref:System.Action%601>委派執行個體，如下列範例所示。 (如需 lambda 運算式的簡介，請參閱[Lambda 運算式](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)。)  
  
 [!code-csharp[System.Action~1#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Lambda.cs#4)]
 [!code-vb[System.Action~1#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~1/vb/lambda.vb#4)]  
  
 <xref:System.Collections.Generic.List%601.ForEach%2A>和<xref:System.Array.ForEach%2A>每個方法會採用<xref:System.Action%601>委派做為參數。 委派所封裝的方法可讓您在陣列或清單中的每個項目上執行的動作。 此範例會使用<xref:System.Collections.Generic.List%601.ForEach%2A>方法以提供一個實例。  
  
   
  
## Examples  
 下列範例示範如何使用<xref:System.Action%601>要列印的內容委派<xref:System.Collections.Generic.List%601>物件。 在此範例中，`Print`方法用來對主控台顯示清單的內容。 此外，C# 範例也示範如何使用對主控台顯示內容的匿名方法。 請注意，此範例未明確宣告<xref:System.Action%601>變數。 相反地，方法會接受單一參數，而不會傳回值，以將參考傳遞<xref:System.Collections.Generic.List%601.ForEach%2A?displayProperty=nameWithType>方法，其參數，就是<xref:System.Action%601>委派。 同樣地，在 C# 範例中，<xref:System.Action%601>委派不明確具現化因為匿名方法的簽章相符的簽章<xref:System.Action%601>委派所預期的<xref:System.Collections.Generic.List%601.ForEach%2A?displayProperty=nameWithType>方法。  
  
 [!code-csharp[System.Action_PrintExample#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action_PrintExample/cs/action.cs#01)]
 [!code-vb[System.Action_PrintExample#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action_PrintExample/vb/action.vb#01)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Func`2" />
  </Docs>
</Type>