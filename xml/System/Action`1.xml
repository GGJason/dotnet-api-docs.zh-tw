<Type Name="Action&lt;T&gt;" FullName="System.Action&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b5133ca4077102df8d9cecd009e0fc6e9c6b4bf0" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate void Action&lt;in T&gt;(T obj);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Action`1&lt;- T&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Action`1" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub Action(Of In T)(obj As T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public delegate void Action(T obj);" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="obj" Type="T" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T">
      <span data-ttu-id="78bbd-101">這個委派所封裝之方法的參數類型。</span>
      <span class="sxs-lookup">
        <span data-stu-id="78bbd-101">The type of the parameter of the method that this delegate encapsulates.</span>
      </span>
    </typeparam>
    <param name="obj">
      <span data-ttu-id="78bbd-102">這個委派所封裝之方法的參數。</span>
      <span class="sxs-lookup">
        <span data-stu-id="78bbd-102">The parameter of the method that this delegate encapsulates.</span>
      </span>
    </param>
    <summary>
      <span data-ttu-id="78bbd-103">封裝具有單一參數的方法，並且不會傳回值。</span>
      <span class="sxs-lookup">
        <span data-stu-id="78bbd-103">Encapsulates a method that has a single parameter and does not return a value.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78bbd-104">您可以使用<xref:System.Action%601>要做為參數傳遞給方法，而不必明確宣告自訂委派的委派。</span><span class="sxs-lookup"><span data-stu-id="78bbd-104">You can use the <xref:System.Action%601> delegate to pass a method as a parameter without explicitly declaring a custom delegate.</span></span> <span data-ttu-id="78bbd-105">封裝的方法必須對應至這個委派所定義的方法簽章。</span><span class="sxs-lookup"><span data-stu-id="78bbd-105">The encapsulated method must correspond to the method signature that is defined by this delegate.</span></span> <span data-ttu-id="78bbd-106">這表示封裝的方法必須有一個由值傳遞給它的參數，而且必須傳回值。</span><span class="sxs-lookup"><span data-stu-id="78bbd-106">This means that the encapsulated method must have one parameter that is passed to it by value, and it must not return a value.</span></span> <span data-ttu-id="78bbd-107">(在 C# 中，此方法必須傳回`void`。</span><span class="sxs-lookup"><span data-stu-id="78bbd-107">(In C#, the method must return `void`.</span></span> <span data-ttu-id="78bbd-108">在 Visual Basic 中，它必須定義的`Sub`...`End Sub`</span><span class="sxs-lookup"><span data-stu-id="78bbd-108">In Visual Basic, it must be defined by the `Sub`…`End Sub`</span></span> <span data-ttu-id="78bbd-109">建構。</span><span class="sxs-lookup"><span data-stu-id="78bbd-109">construct.</span></span> <span data-ttu-id="78bbd-110">它也可以傳回值，則會忽略這個值的方法。）通常，這種方法用來執行作業。</span><span class="sxs-lookup"><span data-stu-id="78bbd-110">It can also be a method that returns a value that is ignored.) Typically, such a method is used to perform an operation.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="78bbd-111">若要參考具有 1 個參數並傳回值的方法，使用泛型<xref:System.Func%602>改為委派。</span><span class="sxs-lookup"><span data-stu-id="78bbd-111">To reference a method that has one parameter and returns a value, use the generic <xref:System.Func%602> delegate instead.</span></span>  
  
 <span data-ttu-id="78bbd-112">當您使用<xref:System.Action%601>委派，您不需要明確定義這個委派會封裝具有單一參數的方法。</span><span class="sxs-lookup"><span data-stu-id="78bbd-112">When you use the <xref:System.Action%601> delegate, you do not have to explicitly define a delegate that encapsulates a method with a single parameter.</span></span> <span data-ttu-id="78bbd-113">例如，下列程式碼明確宣告委派，名為`DisplayMessage`和指派參考<xref:System.Console.WriteLine%2A>方法或`ShowWindowsMessage`其委派執行個體的方法。</span><span class="sxs-lookup"><span data-stu-id="78bbd-113">For example, the following code explicitly declares a delegate named `DisplayMessage` and assigns a reference to either the <xref:System.Console.WriteLine%2A> method or the `ShowWindowsMessage` method to its delegate instance.</span></span>  
  
 [!code-cpp[System.Action~1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Action~1/cpp/delegate.cpp#1)]
 [!code-csharp[System.Action~1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Delegate.cs#1)]
 [!code-vb[System.Action~1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~1/vb/Delegate.vb#1)]  
  
 <span data-ttu-id="78bbd-114">下列範例會具現化來簡化此程式碼<xref:System.Action%601>而不是明確地定義新的委派，並為其指派具名的方法的委派。</span><span class="sxs-lookup"><span data-stu-id="78bbd-114">The following example simplifies this code by instantiating the <xref:System.Action%601> delegate instead of explicitly defining a new delegate and assigning a named method to it.</span></span>  
  
 [!code-cpp[System.Action~1#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Action~1/cpp/action`1.cpp#2)]
 [!code-csharp[System.Action~1#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Action1.cs#2)]
 [!code-vb[System.Action~1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~1/vb/Action1.vb#2)]  
  
 <span data-ttu-id="78bbd-115">您也可以使用<xref:System.Action%601>委派與 C# 中的匿名方法，如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="78bbd-115">You can also use the <xref:System.Action%601> delegate with anonymous methods in C#, as the following example illustrates.</span></span> <span data-ttu-id="78bbd-116">(如匿名方法的簡介，請參閱[匿名方法](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md)。)</span><span class="sxs-lookup"><span data-stu-id="78bbd-116">(For an introduction to anonymous methods, see [Anonymous Methods](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)</span></span>  
  
 [!code-csharp[System.Action~1#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Anon.cs#3)]  
  
 <span data-ttu-id="78bbd-117">您也可以指派 lambda 運算式給<xref:System.Action%601>委派執行個體，如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="78bbd-117">You can also assign a lambda expression to an <xref:System.Action%601> delegate instance, as the following example illustrates.</span></span> <span data-ttu-id="78bbd-118">(如需 lambda 運算式的簡介，請參閱[Lambda 運算式](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)。)</span><span class="sxs-lookup"><span data-stu-id="78bbd-118">(For an introduction to lambda expressions, see [Lambda Expressions](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)</span></span>  
  
 [!code-csharp[System.Action~1#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Lambda.cs#4)]
 [!code-vb[System.Action~1#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~1/vb/lambda.vb#4)]  
  
 <span data-ttu-id="78bbd-119"><xref:System.Collections.Generic.List%601.ForEach%2A>和<xref:System.Array.ForEach%2A>每個方法會採用<xref:System.Action%601>委派做為參數。</span><span class="sxs-lookup"><span data-stu-id="78bbd-119">The <xref:System.Collections.Generic.List%601.ForEach%2A> and <xref:System.Array.ForEach%2A> methods each take an <xref:System.Action%601> delegate as a parameter.</span></span> <span data-ttu-id="78bbd-120">委派所封裝的方法可讓您在陣列或清單中的每個項目上執行的動作。</span><span class="sxs-lookup"><span data-stu-id="78bbd-120">The method encapsulated by the delegate allows you to perform an action on each element in the array or list.</span></span> <span data-ttu-id="78bbd-121">此範例會使用<xref:System.Collections.Generic.List%601.ForEach%2A>方法以提供一個實例。</span><span class="sxs-lookup"><span data-stu-id="78bbd-121">The example uses the <xref:System.Collections.Generic.List%601.ForEach%2A> method to provide an illustration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78bbd-122">下列範例示範如何使用<xref:System.Action%601>要列印的內容委派<xref:System.Collections.Generic.List%601>物件。</span><span class="sxs-lookup"><span data-stu-id="78bbd-122">The following example demonstrates the use of the <xref:System.Action%601> delegate to print the contents of a <xref:System.Collections.Generic.List%601> object.</span></span> <span data-ttu-id="78bbd-123">在此範例中，`Print`方法用來對主控台顯示清單的內容。</span><span class="sxs-lookup"><span data-stu-id="78bbd-123">In this example, the `Print` method is used to display the contents of the list to the console.</span></span> <span data-ttu-id="78bbd-124">此外，C# 範例也示範如何使用對主控台顯示內容的匿名方法。</span><span class="sxs-lookup"><span data-stu-id="78bbd-124">In addition, the C# example also demonstrates the use of anonymous methods to display the contents to the console.</span></span> <span data-ttu-id="78bbd-125">請注意，此範例未明確宣告<xref:System.Action%601>變數。</span><span class="sxs-lookup"><span data-stu-id="78bbd-125">Note that the example does not explicitly declare an <xref:System.Action%601> variable.</span></span> <span data-ttu-id="78bbd-126">相反地，方法會接受單一參數，而不會傳回值，以將參考傳遞<xref:System.Collections.Generic.List%601.ForEach%2A?displayProperty=nameWithType>方法，其參數，就是<xref:System.Action%601>委派。</span><span class="sxs-lookup"><span data-stu-id="78bbd-126">Instead, it passes a reference to a method that takes a single parameter and that does not return a value to the <xref:System.Collections.Generic.List%601.ForEach%2A?displayProperty=nameWithType> method, whose single parameter is an <xref:System.Action%601> delegate.</span></span> <span data-ttu-id="78bbd-127">同樣地，在 C# 範例中，<xref:System.Action%601>委派不明確具現化因為匿名方法的簽章相符的簽章<xref:System.Action%601>委派所預期的<xref:System.Collections.Generic.List%601.ForEach%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="78bbd-127">Similarly, in the C# example, an <xref:System.Action%601> delegate is not explicitly instantiated because the signature of the anonymous method matches the signature of the <xref:System.Action%601> delegate that is expected by the <xref:System.Collections.Generic.List%601.ForEach%2A?displayProperty=nameWithType> method.</span></span>  
  
 [!code-csharp[System.Action_PrintExample#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action_PrintExample/cs/action.cs#01)]
 [!code-vb[System.Action_PrintExample#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action_PrintExample/vb/action.vb#01)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Func`2" />
  </Docs>
</Type>