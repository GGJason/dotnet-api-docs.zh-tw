<Type Name="TypeInitializationException" FullName="System.TypeInitializationException">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4e010e0c78c65b529ed1ad5c97ca2f1013dd01bc" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30728512" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class TypeInitializationException : SystemException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit TypeInitializationException extends System.SystemException" />
  <TypeSignature Language="DocId" Value="T:System.TypeInitializationException" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TypeInitializationException&#xA;Inherits SystemException" />
  <TypeSignature Language="C++ CLI" Value="public ref class TypeInitializationException sealed : SystemException" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Exception</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.SystemException</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>因為當做類別初始設定式 (Class Initializer) 所擲回例外狀況的包裝函式，所擲回的例外狀況。 這個類別無法被繼承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當類別初始設定式無法初始化型別時，<xref:System.TypeInitializationException> 便會建立並傳遞參考至型別之類別初始設定式所擲回的例外狀況。 <xref:System.Exception.InnerException%2A>屬性<xref:System.TypeInitializationException>含有基礎例外狀況。  
  
 一般而言，<xref:System.TypeInitializationException>例外狀況會反映災難性的條件 （執行階段是無法具現化類型），用於防止應用程式無法繼續。  大多數情況下，<xref:System.TypeInitializationException>回應應用程式的執行環境中的某些變更會擲回。 因此，以外可能疑難排解偵錯程式碼中，例外狀況應該不會處理在`try` / `catch`區塊。 相反地，應調查和刪除例外狀況的原因。  
  
 <xref:System.TypeInitializationException> 會使用 HRESULT COR_E_TYPEINITIALIZATION，0x80131534 的值。  
  
 如需執行個體的初始屬性值的清單<xref:System.TypeInitializationException>，請參閱<xref:System.TypeInitializationException.%23ctor%2A>建構函式。  
  
 下列章節描述一些情況<xref:System.TypeInitializationException>擲回例外狀況。  
  
 [靜態建構函式和 TypeInitializationException 例外狀況](#Static)   
 [規則運算式相符項目逾時值](#Timeout)   
 [行事曆和文化特性的資料](#Calendars)  
  
<a name="Static"></a>   
## <a name="static-constructors-and-the-typeinitializationexception-exception"></a>靜態建構函式和 TypeInitializationException 例外狀況  
 靜態建構函式，如果有的話，會自動呼叫執行階段建立類型的新執行個體之前。 由開發人員都可以定義明確的靜態建構函式。 如果未明確定義靜態建構函式，編譯器會自動建立一個，以便初始化任何`static`（C# 中） 或`Shared`（在 Visual Basic) 型別的成員。  如需靜態建構函式的詳細資訊，請參閱[靜態建構函式](~/docs/csharp/programming-guide/classes-and-structs/static-constructors.md)。  
  
 大多數情況下，<xref:System.TypeInitializationException>無法具現化類型的靜態建構函式時，會擲回例外狀況。  <xref:System.Exception.InnerException%2A>屬性會指出無法具現化類型的靜態建構函式的原因。 一些較常見的原因之一<xref:System.TypeInitializationException>例外狀況是：  
  
 靜態建構函式中處理的例外狀況  
 如果靜態建構函式中擲回例外狀況，該例外狀況會包裝在<xref:System.TypeInitializationException>例外狀況，而類型無法具現化。  
  
 通常這個例外狀況難以進行疑難排解的是，靜態建構函式不一定明確定義在原始程式碼中。 型別中的靜態建構函式存在，如果：  
  
-   它已明確定義為型別的成員。  
  
-   類型具有`static`（C# 中） 或`Shared`（在 Visual Basic) 中宣告並在單一陳述式中初始化變數。 在此情況下，語言編譯器會產生類型的靜態建構函式。 您可以使用下列公用程式來檢查[IL 解譯器](~/docs/framework/tools/ildasm-exe-il-disassembler.md)。 比方說，當 C# 和 VB 編譯器編譯下列範例中，它們產生的 IL 就像這樣的靜態建構函式：  
  
    ```  
  
    .method private specialname rtspecialname static   
            void  .cctor() cil managed  
    {  
      // Code size       12 (0xc)  
      .maxstack  8  
      IL_0000:  ldc.i4.3  
      IL_0001:  newobj     instance void TestClass::.ctor(int32)  
      IL_0006:  stsfld     class TestClass Example::test  
      IL_000b:  ret  
    } // end of method Example::.cctor  
  
    ```  
  
 下列範例所示<xref:System.TypeInitializationException>編譯器產生的靜態建構函式擲回例外狀況。 `Example`類別包含`static`（C# 中） 或`Shared`（在 Visual Basic) 的型別欄位`TestClass`，具現化將 3 這個值傳遞至其類別建構函式。  值，不過，不合法;允許只為 0 或 1 的值。 如此一來，`TestClass`類別建構函式會擲回<xref:System.ArgumentOutOfRangeException>。 未處理此例外狀況，因為它會包裝在<xref:System.TypeInitializationException>例外狀況。  
  
 [!code-csharp[System.TypeInitializationException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TypeInitializationException/cs/ctorException1.cs#3)]
 [!code-vb[System.TypeInitializationException#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TypeInitializationException/vb/CtorException1.vb#3)]  
  
 請注意例外狀況訊息會顯示相關資訊<xref:System.Exception.InnerException%2A>屬性。  
  
 遺失的組件或資料檔案  
 常見的原因<xref:System.TypeInitializationException>例外狀況是在應用程式的開發和測試環境中存在的組件或資料檔案遺漏其執行階段環境。 例如，您可以編譯名 Missing1a.dll 為使用此組件的下列範例命令列語法：  
  
```csharp  
csc /t:library Missing1a.cs  
```  
  
```vb  
vbc Missing1a.vb /t:library  
```  
  
 [!code-csharp[System.TypeInitializationException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TypeInitializationException/cs/Missing1a.cs#1)]
 [!code-vb[System.TypeInitializationException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TypeInitializationException/vb/Missing1a.vb#1)]  
  
 然後，您可以編譯的可執行檔名為 Missing1.exe 包括 Missing1a.dll 參考下列範例：  
  
```csharp  
csc Missing1.cs /r:Missing1a.dll  
```  
  
```vb  
vbc Missing1.vb /r:Missing1a.dll  
```  
  
 不過，如果您重新命名、 移動或刪除 Missing1a.dll 和執行範例時，它會擲回<xref:System.TypeInitializationException>例外狀況，並顯示輸出範例所示。  請注意，例外狀況訊息包含下列資訊<xref:System.Exception.InnerException%2A>屬性。 在此案例中，內部例外狀況是<xref:System.IO.FileNotFoundException>擲回，因為執行階段找不到相依的組件。  
  
 [!code-csharp[System.TypeInitializationException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TypeInitializationException/cs/Missing1.cs#2)]
 [!code-vb[System.TypeInitializationException#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TypeInitializationException/vb/Missing1.vb#2)]  
  
> [!NOTE]
>  在此範例中，<xref:System.TypeInitializationException>已擲回例外狀況，因為無法載入組件。 如果靜態建構函式會嘗試開啟資料檔案，例如組態檔、 XML 檔案，或檔案，包含序列化資料，找不到，可能也會擲回例外狀況。  
  
<a name="Timeout"></a>   
## <a name="regular-expression-match-timeout-values"></a>規則運算式相符項目逾時值  
 您可以設定規則運算式模式比對作業，針對每個應用程式網域的預設逾時值。 在逾時由指定<xref:System.TimeSpan>"REGEX_DEFAULT_MATCH_TIMEOUT"屬性的值<xref:System.AppDomain.SetData%2A?displayProperty=nameWithType>方法。 時間間隔必須是有效<xref:System.TimeSpan>大於零且小於約 24 天的物件。 如果不符合這些需求，會擲回嘗試設定的預設逾時值<xref:System.ArgumentOutOfRangeException>，這又會包裝在<xref:System.TypeInitializationException>例外狀況。  
  
 下列範例所示<xref:System.TypeInitializationException>指派給 「 REGEX_DEFAULT_MATCH_TIMEOUT"屬性的值無效時擲回。 若要消除例外狀況，將 「 REGEX_DEFAULT_MATCH_TIMEOUT"屬性設定為<xref:System.TimeSpan>大於零且小於約 24 天的值。  
  
 [!code-csharp[System.TypeInitializationException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TypeInitializationException/cs/Regex1.cs#4)]
 [!code-vb[System.TypeInitializationException#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TypeInitializationException/vb/Regex1.vb#4)]  
  
<a name="Calendars"></a>   
## <a name="calendars-and-cultural-data"></a>行事曆和文化特性的資料  
 如果您嘗試具現化行事曆，而執行階段無法具現化<xref:System.Globalization.CultureInfo>對應到該行事曆，物件就會擲回<xref:System.TypeInitializationException>例外狀況。 下列的行事曆類別建構函式可能擲回這個例外狀況：  
  
-   預設建構函式<xref:System.Globalization.JapaneseCalendar>類別。  
  
-   預設建構函式<xref:System.Globalization.KoreanCalendar>類別。  
  
-   預設建構函式<xref:System.Globalization.TaiwanCalendar>類別。  
  
 因為這些文化特性的文化特性資料應該可在所有系統上，您應該很少，如果有的話，會發生這個例外狀況。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Exception" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TypeInitializationException (string fullTypeName, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fullTypeName, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TypeInitializationException.#ctor(System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fullTypeName As String, innerException As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TypeInitializationException(System::String ^ fullTypeName, Exception ^ innerException);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fullTypeName" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="fullTypeName">初始化失敗之型別的完整名稱。</param>
        <param name="innerException">做為目前例外狀況發生原因的例外狀況。 如果 <c>innerException</c> 參數不是 Null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)，則會在處理內部例外狀況的 <see langword="catch" /> 區塊中引發目前的例外狀況。</param>
        <summary>使用預設的錯誤訊息、特定的型別名稱和造成這個例外狀況根本原因的內部例外的參考，初始化 <see cref="T:System.TypeInitializationException" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 直接因為前一個例外狀況而擲回的例外狀況可能包含對 <xref:System.Exception.InnerException%2A> 屬性中前一個例外狀況的參考。 <xref:System.Exception.InnerException%2A> 屬性會傳回與傳入建構函式中相同的值；如果 `Nothing` 屬性不提供內部例外值給建構函式，則傳回 null 參考 (在 Visual Basic 中為 <xref:System.Exception.InnerException%2A>)。  
  
 下表顯示 <xref:System.TypeInitializationException> 執行個體的初始屬性值。  
  
|屬性|值|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|內部例外狀況參考。|  
|<xref:System.Exception.Message%2A>|當地語系化的錯誤訊息字串。|  
|<xref:System.TypeInitializationException.TypeName%2A>|型別的名稱。|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Exception" />
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public override void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TypeInitializationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub GetObjectData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">
          <see cref="T:System.Runtime.Serialization.SerializationInfo" />，包含所擲回之例外狀況的相關序列化物件資料。</param>
        <param name="context">包含有關來源或目的端內容資訊的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
        <summary>以型別名稱和其他例外狀況 (Exception) 資訊設定 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 物件。</summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">需要完全信任立即呼叫者。 這個成員無法供部分信任或安全性透明程式碼。</permission>
      </Docs>
    </Member>
    <Member MemberName="TypeName">
      <MemberSignature Language="C#" Value="public string TypeName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TypeName" />
      <MemberSignature Language="DocId" Value="P:System.TypeInitializationException.TypeName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TypeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TypeName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得初始化失敗之型別的完整名稱。</summary>
        <value>初始化失敗之型別的完整名稱。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>