<Type Name="TypeInitializationException" FullName="System.TypeInitializationException">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="fe7ccfb30b76163bc8d852bbac4f511f7c09d464" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37479765" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class TypeInitializationException : SystemException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit TypeInitializationException extends System.SystemException" />
  <TypeSignature Language="DocId" Value="T:System.TypeInitializationException" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TypeInitializationException&#xA;Inherits SystemException" />
  <TypeSignature Language="C++ CLI" Value="public ref class TypeInitializationException sealed : SystemException" />
  <TypeSignature Language="F#" Value="type TypeInitializationException = class&#xA;    inherit SystemException" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Exception</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.SystemException</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="53c37-101">因為當做類別初始設定式 (Class Initializer) 所擲回例外狀況的包裝函式，所擲回的例外狀況。</span>
      <span class="sxs-lookup">
        <span data-stu-id="53c37-101">The exception that is thrown as a wrapper around the exception thrown by the class initializer.</span>
      </span>
      <span data-ttu-id="53c37-102">此類別無法被繼承。</span>
      <span class="sxs-lookup">
        <span data-stu-id="53c37-102">This class cannot be inherited.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53c37-103">當類別初始設定式無法初始化型別時，<xref:System.TypeInitializationException> 便會建立並傳遞參考至型別之類別初始設定式所擲回的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="53c37-103">When a class initializer fails to initialize a type, a <xref:System.TypeInitializationException> is created and passed a reference to the exception thrown by the type's class initializer.</span></span> <span data-ttu-id="53c37-104"><xref:System.Exception.InnerException%2A>屬性<xref:System.TypeInitializationException>保存基礎例外狀況。</span><span class="sxs-lookup"><span data-stu-id="53c37-104">The <xref:System.Exception.InnerException%2A> property of <xref:System.TypeInitializationException> holds the underlying exception.</span></span>  
  
 <span data-ttu-id="53c37-105">一般而言，<xref:System.TypeInitializationException>例外狀況會反映嚴重條件 （執行階段是無法具現化類型），防止應用程式無法繼續。</span><span class="sxs-lookup"><span data-stu-id="53c37-105">Typically, the <xref:System.TypeInitializationException> exception reflects a catastrophic condition (the runtime is unable to instantiate a type) that prevents an application from continuing.</span></span>  <span data-ttu-id="53c37-106">大多數情況下，<xref:System.TypeInitializationException>回應某些應用程式的執行環境中的變更就會擲回。</span><span class="sxs-lookup"><span data-stu-id="53c37-106">Most commonly, the <xref:System.TypeInitializationException> is thrown in response to some change in the executing environment of the application.</span></span> <span data-ttu-id="53c37-107">因此，而不可能是疑難排解偵錯程式碼中，例外狀況應該不會以處理`try` / `catch`區塊。</span><span class="sxs-lookup"><span data-stu-id="53c37-107">Consequently, other than possibly for troubleshooting debug code, the exception should not be handled in a `try`/`catch` block.</span></span> <span data-ttu-id="53c37-108">相反地，應該調查並消除例外狀況的原因。</span><span class="sxs-lookup"><span data-stu-id="53c37-108">Instead, the cause of the exception should be investigated and eliminated.</span></span>  
  
 <span data-ttu-id="53c37-109"><xref:System.TypeInitializationException> 會使用 HRESULT COR_E_TYPEINITIALIZATION，其值 0x80131534。</span><span class="sxs-lookup"><span data-stu-id="53c37-109"><xref:System.TypeInitializationException> uses the HRESULT COR_E_TYPEINITIALIZATION, which has the value 0x80131534.</span></span>  
  
 <span data-ttu-id="53c37-110">如需執行個體的初始屬性值的清單<xref:System.TypeInitializationException>，請參閱<xref:System.TypeInitializationException.%23ctor%2A>建構函式。</span><span class="sxs-lookup"><span data-stu-id="53c37-110">For a list of initial property values for an instance of <xref:System.TypeInitializationException>, see the <xref:System.TypeInitializationException.%23ctor%2A> constructors.</span></span>  
  
 <span data-ttu-id="53c37-111">下列各節描述一些情況下會<xref:System.TypeInitializationException>擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="53c37-111">The following sections describe some of the situations in which a <xref:System.TypeInitializationException> exception is thrown.</span></span>  
  
- [<span data-ttu-id="53c37-112">靜態建構函式和 TypeInitializationException 例外狀況</span><span class="sxs-lookup"><span data-stu-id="53c37-112">Static constructors and the TypeInitializationException exception</span></span>](#Static)   
- [<span data-ttu-id="53c37-113">規則運算式相符項目逾時值</span><span class="sxs-lookup"><span data-stu-id="53c37-113">Regular expression match timeout values</span></span>](#Timeout)   
- [<span data-ttu-id="53c37-114">日曆和文化特性的資料</span><span class="sxs-lookup"><span data-stu-id="53c37-114">Calendars and cultural data</span></span>](#Calendars)  
  
<a name="Static"></a>   
## <a name="static-constructors-and-the-typeinitializationexception"></a><span data-ttu-id="53c37-115">靜態建構函式和 TypeInitializationException</span><span class="sxs-lookup"><span data-stu-id="53c37-115">Static constructors and the TypeInitializationException</span></span>

 <span data-ttu-id="53c37-116">靜態建構函式中，如果有的話，會自動呼叫執行階段建立類型的新執行個體之前。</span><span class="sxs-lookup"><span data-stu-id="53c37-116">A static constructor, if one exists, is called automatically by the runtime before creating a new instance of a type.</span></span> <span data-ttu-id="53c37-117">由開發人員都可以定義明確的靜態建構函式。</span><span class="sxs-lookup"><span data-stu-id="53c37-117">Static constructors can be explicitly defined by a developer.</span></span> <span data-ttu-id="53c37-118">如果未明確定義靜態建構函式，編譯器會自動建立一個用來初始化任何`static`（在 C# 中) 或`Shared`（在 Visual Basic) 型別的成員。</span><span class="sxs-lookup"><span data-stu-id="53c37-118">If a static  constructor is not explicitly defined, compilers automatically create one to initialize any `static` (in C#) or `Shared` (in Visual Basic) members of the type.</span></span>  <span data-ttu-id="53c37-119">如需靜態建構函式的詳細資訊，請參閱[靜態建構函式](~/docs/csharp/programming-guide/classes-and-structs/static-constructors.md)。</span><span class="sxs-lookup"><span data-stu-id="53c37-119">For more information on static constructors, see [Static Constructors](~/docs/csharp/programming-guide/classes-and-structs/static-constructors.md).</span></span>  
  
 <span data-ttu-id="53c37-120">大多數情況下，<xref:System.TypeInitializationException>無法具現化類型的靜態建構函式時，會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="53c37-120">Most commonly, a <xref:System.TypeInitializationException> exception is thrown when a static constructor is unable to instantiate a type.</span></span>  <span data-ttu-id="53c37-121"><xref:System.Exception.InnerException%2A>屬性會指出為什麼無法具現化類型的靜態建構函式。</span><span class="sxs-lookup"><span data-stu-id="53c37-121">The <xref:System.Exception.InnerException%2A> property indicates why the static constructor was unable to instantiate the type.</span></span> <span data-ttu-id="53c37-122">一些較常見的原因之一<xref:System.TypeInitializationException>例外狀況是：</span><span class="sxs-lookup"><span data-stu-id="53c37-122">Some of the more common causes of a <xref:System.TypeInitializationException> exception are:</span></span>  
  
- <span data-ttu-id="53c37-123">靜態建構函式中處理的例外狀況</span><span class="sxs-lookup"><span data-stu-id="53c37-123">An unhandled exception in a static constructor</span></span>  
 
   <span data-ttu-id="53c37-124">如果靜態建構函式中擲回例外狀況，該例外狀況會包裝在<xref:System.TypeInitializationException>例外狀況，以及類型無法具現化。</span><span class="sxs-lookup"><span data-stu-id="53c37-124">If an exception is thrown in a static constructor, that exception is wrapped in a <xref:System.TypeInitializationException> exception, and the type cannot be instantiated.</span></span>  
  
   <span data-ttu-id="53c37-125">什麼會使得這個例外狀況難以進行疑難排解時，靜態建構函式未明確地定義原始程式碼中。</span><span class="sxs-lookup"><span data-stu-id="53c37-125">What often makes this exception difficult to troubleshoot is that static constructors are not always explicitly defined in source code.</span></span> <span data-ttu-id="53c37-126">如果，靜態建構函式會存在於類型：</span><span class="sxs-lookup"><span data-stu-id="53c37-126">A static constructor exists in a type if:</span></span>  
  
   -   <span data-ttu-id="53c37-127">它已明確定義為類型的成員。</span><span class="sxs-lookup"><span data-stu-id="53c37-127">It has been explicitly defined as a member of a type.</span></span>  
  
   -   <span data-ttu-id="53c37-128">類型具有`static`（在 C# 中) 或`Shared`（在 Visual Basic 中) 會宣告並初始化單一陳述式中的變數。</span><span class="sxs-lookup"><span data-stu-id="53c37-128">The type has  `static` (in C#) or `Shared` (in Visual Basic) variables that are declared and initialized in a single statement.</span></span> <span data-ttu-id="53c37-129">在此情況下，語言編譯器會產生類型的靜態建構函式。</span><span class="sxs-lookup"><span data-stu-id="53c37-129">In this case, the language compiler generates a static constructor for the type.</span></span> <span data-ttu-id="53c37-130">您可以使用下列公用程式來檢查[IL 解譯器](~/docs/framework/tools/ildasm-exe-il-disassembler.md)。</span><span class="sxs-lookup"><span data-stu-id="53c37-130">You can inspect it by using a utility such as [IL Disassembler](~/docs/framework/tools/ildasm-exe-il-disassembler.md).</span></span> <span data-ttu-id="53c37-131">比方說，當 C# 和 VB 編譯器編譯下列範例中，它們會產生的 IL，就像這樣的靜態建構函式：</span><span class="sxs-lookup"><span data-stu-id="53c37-131">For instance, when the C# and VB compilers compile the following example, they generate the IL for a static constructor that is similar to this:</span></span>  
  
   ```  
   .method private specialname rtspecialname static   
           void  .cctor() cil managed  
   {  
     // Code size       12 (0xc)  
     .maxstack  8  
     IL_0000:  ldc.i4.3  
     IL_0001:  newobj     instance void TestClass::.ctor(int32)  
     IL_0006:  stsfld     class TestClass Example::test  
     IL_000b:  ret  
   } // end of method Example::.cctor  
   ```  
  
   <span data-ttu-id="53c37-132">下列範例所示<xref:System.TypeInitializationException>編譯器所產生的靜態建構函式擲回的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="53c37-132">The following example shows a <xref:System.TypeInitializationException> exception thrown by a compiler-generated static constructor.</span></span> <span data-ttu-id="53c37-133">`Example`類別包含`static`（在 C# 中) 或`Shared`（在 Visual Basic) 欄位的型別`TestClass`，具現化將 3 這個值傳遞至其類別建構函式。</span><span class="sxs-lookup"><span data-stu-id="53c37-133">The `Example` class includes a `static` (in C#) or `Shared` (in Visual Basic) field of type `TestClass` that is instantiated by passing a value of 3 to its class constructor.</span></span>  <span data-ttu-id="53c37-134">不過，該值，是不合法;允許只為 0 或 1 的值。</span><span class="sxs-lookup"><span data-stu-id="53c37-134">That value, however, is illegal; only values of 0 or 1 are permitted.</span></span> <span data-ttu-id="53c37-135">如此一來，`TestClass`類別建構函式會擲回<xref:System.ArgumentOutOfRangeException>。</span><span class="sxs-lookup"><span data-stu-id="53c37-135">As a result, the `TestClass` class constructor throws an <xref:System.ArgumentOutOfRangeException>.</span></span> <span data-ttu-id="53c37-136">因為未處理這個例外狀況，它會包裝在<xref:System.TypeInitializationException>例外狀況。</span><span class="sxs-lookup"><span data-stu-id="53c37-136">Since this exception is not handled, it is wrapped in a <xref:System.TypeInitializationException> exception.</span></span>  
  
   [!code-csharp[System.TypeInitializationException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TypeInitializationException/cs/ctorException1.cs#3)]
   [!code-vb[System.TypeInitializationException#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TypeInitializationException/vb/CtorException1.vb#3)]  
  
   <span data-ttu-id="53c37-137">請注意例外狀況訊息會顯示相關資訊<xref:System.Exception.InnerException%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="53c37-137">Note that the exception message displays information about the <xref:System.Exception.InnerException%2A> property.</span></span>  
  
- <span data-ttu-id="53c37-138">遺漏的組件或資料檔案</span><span class="sxs-lookup"><span data-stu-id="53c37-138">A missing assembly or data file</span></span>  
 
   <span data-ttu-id="53c37-139">常見的原因，<xref:System.TypeInitializationException>例外狀況是在應用程式的開發和測試環境中存在的組件或資料檔案遺漏其執行階段環境。</span><span class="sxs-lookup"><span data-stu-id="53c37-139">A common cause of a <xref:System.TypeInitializationException> exception is that an assembly or data file that was present in an application's development and test environments is missing from its runtime environment.</span></span> <span data-ttu-id="53c37-140">例如，您可以編譯下列範例來使用此命令列語法來命名 Missing1a.dll 組件：</span><span class="sxs-lookup"><span data-stu-id="53c37-140">For example, you can compile the following example to an assembly named Missing1a.dll by using this command-line syntax:</span></span>  
  
   ```csharp  
   csc -t:library Missing1a.cs  
   ```  
  
   ```vb  
   vbc Missing1a.vb -t:library  
   ```  
  
   [!code-csharp[System.TypeInitializationException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TypeInitializationException/cs/Missing1a.cs#1)]
   [!code-vb[System.TypeInitializationException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TypeInitializationException/vb/Missing1a.vb#1)]  
  
   <span data-ttu-id="53c37-141">然後，您可以編譯的可執行檔名為 Missing1.exe 包括 Missing1a.dll 參考下列範例：</span><span class="sxs-lookup"><span data-stu-id="53c37-141">You can then compile the following example to an executable named Missing1.exe by including a reference to Missing1a.dll:</span></span>  
  
   ```csharp
   csc Missing1.cs /r:Missing1a.dll  
   ```  
  
   ```vb
   vbc Missing1.vb /r:Missing1a.dll  
   ```  
  
   <span data-ttu-id="53c37-142">不過，如果您重新命名、 移動或刪除 Missing1a.dll 和執行範例時，它會擲回<xref:System.TypeInitializationException>例外狀況，並顯示範例所示的輸出。</span><span class="sxs-lookup"><span data-stu-id="53c37-142">However, if you rename, move, or delete Missing1a.dll and run the example, it throws a <xref:System.TypeInitializationException> exception and displays the output shown in the example.</span></span>  <span data-ttu-id="53c37-143">請注意，例外狀況訊息包含下列資訊<xref:System.Exception.InnerException%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="53c37-143">Note that the exception message includes information about the <xref:System.Exception.InnerException%2A> property.</span></span> <span data-ttu-id="53c37-144">在此案例中，內部例外狀況是<xref:System.IO.FileNotFoundException>擲回，因為執行階段找不到相依的組件。</span><span class="sxs-lookup"><span data-stu-id="53c37-144">In this case,  the inner exception is a <xref:System.IO.FileNotFoundException> that is thrown because the runtime cannot find the dependent assembly.</span></span>  
  
   [!code-csharp[System.TypeInitializationException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TypeInitializationException/cs/Missing1.cs#2)]
   [!code-vb[System.TypeInitializationException#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TypeInitializationException/vb/Missing1.vb#2)]  
  
   > [!NOTE]
   >  <span data-ttu-id="53c37-145">在此範例中，<xref:System.TypeInitializationException>已擲回例外狀況，因為無法載入組件。</span><span class="sxs-lookup"><span data-stu-id="53c37-145">In this example, a <xref:System.TypeInitializationException> exception was thrown because an assembly could not be loaded.</span></span> <span data-ttu-id="53c37-146">如果靜態建構函式會嘗試開啟資料檔案，例如組態檔、 XML 檔案，或檔案，包含序列化資料，找不到，可能也會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="53c37-146">The exception can also be thrown if a static constructor attempts to open a data file, such as a configuration file, an XML file, or a file containing serialized data, that it cannot find.</span></span>  
  
<a name="Timeout"></a>   
## <a name="regular-expression-match-timeout-values"></a><span data-ttu-id="53c37-147">規則運算式相符項目逾時值</span><span class="sxs-lookup"><span data-stu-id="53c37-147">Regular expression match timeout values</span></span>  
 <span data-ttu-id="53c37-148">您可以設定規則運算式模式比對作業，每個應用程式定義域為基礎的預設逾時值。</span><span class="sxs-lookup"><span data-stu-id="53c37-148">You can set the default timeout value for a regular expression pattern matching operation on a per-application domain basis.</span></span> <span data-ttu-id="53c37-149">藉由指定定義逾時<xref:System.TimeSpan>"REGEX_DEFAULT_MATCH_TIMEOUT"屬性的值<xref:System.AppDomain.SetData%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="53c37-149">The timeout is defined by a specifying a <xref:System.TimeSpan> value for the "REGEX_DEFAULT_MATCH_TIMEOUT" property to the  <xref:System.AppDomain.SetData%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="53c37-150">時間間隔必須是有效<xref:System.TimeSpan>大於零且小於約 24 天的物件。</span><span class="sxs-lookup"><span data-stu-id="53c37-150">The time interval must be a valid <xref:System.TimeSpan> object that is greater than zero and less than approximately 24 days.</span></span> <span data-ttu-id="53c37-151">如果不符合這些需求，嘗試設定的預設逾時值會擲回<xref:System.ArgumentOutOfRangeException>，這又會包裝在<xref:System.TypeInitializationException>例外狀況。</span><span class="sxs-lookup"><span data-stu-id="53c37-151">If these requirements are not met, the attempt to set the default timeout value throws an <xref:System.ArgumentOutOfRangeException>, which in turn is wrapped in a <xref:System.TypeInitializationException> exception.</span></span>  
  
 <span data-ttu-id="53c37-152">下列範例所示<xref:System.TypeInitializationException>指派給 「 REGEX_DEFAULT_MATCH_TIMEOUT"屬性的值無效時擲回。</span><span class="sxs-lookup"><span data-stu-id="53c37-152">The following example shows the <xref:System.TypeInitializationException> that is thrown when the value assigned to the "REGEX_DEFAULT_MATCH_TIMEOUT" property is invalid.</span></span> <span data-ttu-id="53c37-153">若要排除例外狀況，請將"REGEX_DEFAULT_MATCH_TIMEOUT"屬性設定為<xref:System.TimeSpan>大於零且小於約 24 天的值。</span><span class="sxs-lookup"><span data-stu-id="53c37-153">To eliminate the exception, set the"REGEX_DEFAULT_MATCH_TIMEOUT" property to a  <xref:System.TimeSpan> value that is greater than zero and less than approximately 24 days.</span></span>  
  
 [!code-csharp[System.TypeInitializationException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TypeInitializationException/cs/Regex1.cs#4)]
 [!code-vb[System.TypeInitializationException#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TypeInitializationException/vb/Regex1.vb#4)]  
  
<a name="Calendars"></a>   
## <a name="calendars-and-cultural-data"></a><span data-ttu-id="53c37-154">日曆和文化特性的資料</span><span class="sxs-lookup"><span data-stu-id="53c37-154">Calendars and cultural data</span></span>  
 <span data-ttu-id="53c37-155">如果您嘗試具現化行事曆，但執行階段是無法具現化<xref:System.Globalization.CultureInfo>物件，對應至該行事曆，就會擲回<xref:System.TypeInitializationException>例外狀況。</span><span class="sxs-lookup"><span data-stu-id="53c37-155">If you attempt to instantiate a calendar but the runtime is unable to instantiate  the <xref:System.Globalization.CultureInfo> object that corresponds to that calendar, it throws a <xref:System.TypeInitializationException> exception.</span></span> <span data-ttu-id="53c37-156">下列的行事曆類別建構函式會擲回這個例外狀況：</span><span class="sxs-lookup"><span data-stu-id="53c37-156">This exception can be thrown by the following calendar class constructors:</span></span>  
  
-   <span data-ttu-id="53c37-157">預設建構函式<xref:System.Globalization.JapaneseCalendar>類別。</span><span class="sxs-lookup"><span data-stu-id="53c37-157">The default constructor of the <xref:System.Globalization.JapaneseCalendar> class.</span></span>  
  
-   <span data-ttu-id="53c37-158">預設建構函式<xref:System.Globalization.KoreanCalendar>類別。</span><span class="sxs-lookup"><span data-stu-id="53c37-158">The default constructor of the <xref:System.Globalization.KoreanCalendar> class.</span></span>  
  
-   <span data-ttu-id="53c37-159">預設建構函式<xref:System.Globalization.TaiwanCalendar>類別。</span><span class="sxs-lookup"><span data-stu-id="53c37-159">The default constructor of the <xref:System.Globalization.TaiwanCalendar> class.</span></span>  
  
 <span data-ttu-id="53c37-160">因為這些文化特性的文化特性資料應該可在所有系統上，您應該很少，鮮，會遇到此例外狀況。</span><span class="sxs-lookup"><span data-stu-id="53c37-160">Since cultural data for these cultures should be available on all systems, you should rarely, if ever, encounter this exception.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Exception" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TypeInitializationException (string fullTypeName, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fullTypeName, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TypeInitializationException.#ctor(System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fullTypeName As String, innerException As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TypeInitializationException(System::String ^ fullTypeName, Exception ^ innerException);" />
      <MemberSignature Language="F#" Value="new TypeInitializationException : string * Exception -&gt; TypeInitializationException" Usage="new System.TypeInitializationException (fullTypeName, innerException)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fullTypeName" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="fullTypeName">
          <span data-ttu-id="53c37-161">初始化失敗之型別的完整名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53c37-161">The fully qualified name of the type that fails to initialize.</span>
          </span>
        </param>
        <param name="innerException">
          <span data-ttu-id="53c37-162">導致目前例外狀況的例外。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53c37-162">The exception that is the cause of the current exception.</span>
          </span>
          <span data-ttu-id="53c37-163">如果 <c>innerException</c> 參數不是 Null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)，則會在處理內部例外狀況的 <see langword="catch" /> 區塊中引發目前的例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53c37-163">If the <c>innerException</c> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="53c37-164">使用預設的錯誤訊息、特定的型別名稱和造成這個例外狀況根本原因的內部例外的參考，初始化 <see cref="T:System.TypeInitializationException" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53c37-164">Initializes a new instance of the <see cref="T:System.TypeInitializationException" /> class with the default error message, the specified type name, and a reference to the inner exception that is the root cause of this exception.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53c37-165">直接因為前一個例外狀況而擲回的例外狀況可能包含對 <xref:System.Exception.InnerException%2A> 屬性中前一個例外狀況的參考。</span><span class="sxs-lookup"><span data-stu-id="53c37-165">An exception that is thrown as a direct result of a previous exception can include a reference to the previous exception in the <xref:System.Exception.InnerException%2A> property.</span></span> <span data-ttu-id="53c37-166"><xref:System.Exception.InnerException%2A> 屬性會傳回與傳入建構函式中相同的值；如果 `Nothing` 屬性不提供內部例外值給建構函式，則傳回 null 參考 (在 Visual Basic 中為 <xref:System.Exception.InnerException%2A>)。</span><span class="sxs-lookup"><span data-stu-id="53c37-166">The <xref:System.Exception.InnerException%2A> property returns the same value that is passed into the constructor, or a null reference (`Nothing` in Visual Basic) if the <xref:System.Exception.InnerException%2A> property does not supply the inner exception value to the constructor.</span></span>  
  
 <span data-ttu-id="53c37-167">下表顯示 <xref:System.TypeInitializationException> 執行個體的初始屬性值。</span><span class="sxs-lookup"><span data-stu-id="53c37-167">The following table shows the initial property values for an instance of <xref:System.TypeInitializationException>.</span></span>  
  
|<span data-ttu-id="53c37-168">屬性</span><span class="sxs-lookup"><span data-stu-id="53c37-168">Property</span></span>|<span data-ttu-id="53c37-169">值</span><span class="sxs-lookup"><span data-stu-id="53c37-169">Value</span></span>|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|<span data-ttu-id="53c37-170">內部例外狀況參考。</span><span class="sxs-lookup"><span data-stu-id="53c37-170">The inner exception reference.</span></span>|  
|<xref:System.Exception.Message%2A>|<span data-ttu-id="53c37-171">當地語系化的錯誤訊息字串。</span><span class="sxs-lookup"><span data-stu-id="53c37-171">The localized error message string.</span></span>|  
|<xref:System.TypeInitializationException.TypeName%2A>|<span data-ttu-id="53c37-172">型別的名稱。</span><span class="sxs-lookup"><span data-stu-id="53c37-172">The name of the type.</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Exception" />
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public override void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TypeInitializationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub GetObjectData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="override this.GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="typeInitializationException.GetObjectData (info, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">
          <span data-ttu-id="53c37-173">
            <see cref="T:System.Runtime.Serialization.SerializationInfo" />，存放關於擲回例外狀況的序列物件資料。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53c37-173">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="53c37-174">
            <see cref="T:System.Runtime.Serialization.StreamingContext" />，包含關於來源或目的端的內容資訊。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53c37-174">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="53c37-175">以型別名稱和其他例外狀況 (Exception) 資訊設定 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53c37-175">Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the type name and additional exception information.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="53c37-176">需要完全信任立即呼叫端。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53c37-176">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="53c37-177">此成員不能由部分信任或不透明的程式碼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53c37-177">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="TypeName">
      <MemberSignature Language="C#" Value="public string TypeName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TypeName" />
      <MemberSignature Language="DocId" Value="P:System.TypeInitializationException.TypeName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TypeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TypeName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TypeName : string" Usage="System.TypeInitializationException.TypeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="53c37-178">取得初始化失敗之型別的完整名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53c37-178">Gets the fully qualified name of the type that fails to initialize.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="53c37-179">初始化失敗之型別的完整名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53c37-179">The fully qualified name of the type that fails to initialize.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>