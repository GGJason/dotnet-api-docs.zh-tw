<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="AppDomainSetup.xml" source-language="en-US" target-language="zh-TW">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5de1a8d1ecd07f9f8d0291eb6d18e2d042042a9b2.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">de1a8d1ecd07f9f8d0291eb6d18e2d042042a9b2</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.AppDomainSetup">
          <source>Represents assembly binding information that can be added to an instance of <ph id="ph1">&lt;see cref="T:System.AppDomain" /&gt;</ph>.</source>
          <target state="translated">表示可加入至 <ph id="ph1">&lt;see cref="T:System.AppDomain" /&gt;</ph> 的執行個體的組件 (Assembly) 繫結資訊。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppDomainSetup">
          <source>Changing the properties of an <ph id="ph1">&lt;xref:System.AppDomainSetup&gt;</ph> instance does not affect any existing <ph id="ph2">&lt;xref:System.AppDomain&gt;</ph>.</source>
          <target state="translated">變更的屬性<ph id="ph1">&lt;xref:System.AppDomainSetup&gt;</ph>執行個體不會影響任何現有<ph id="ph2">&lt;xref:System.AppDomain&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppDomainSetup">
          <source>It can affect only the creation of a new <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph>, when the <ph id="ph2">&lt;xref:System.AppDomain.CreateDomain%2A&gt;</ph> method is called with the <ph id="ph3">&lt;xref:System.AppDomainSetup&gt;</ph> instance as a parameter.</source>
          <target state="translated">它可能會影響建立新的<ph id="ph1">&lt;xref:System.AppDomain&gt;</ph>，當<ph id="ph2">&lt;xref:System.AppDomain.CreateDomain%2A&gt;</ph>方法呼叫<ph id="ph3">&lt;xref:System.AppDomainSetup&gt;</ph>做為參數的執行個體。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppDomainSetup">
          <source>This class implements the <ph id="ph1">&lt;xref:System.IAppDomainSetup&gt;</ph> interface.</source>
          <target state="translated">這個類別會實作 <ph id="ph1">&lt;xref:System.IAppDomainSetup&gt;</ph> 介面。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppDomainSetup">
          <source>The default value for the <ph id="ph1">&lt;xref:System.AppDomainSetup.DisallowCodeDownload%2A&gt;</ph> property is false.</source>
          <target state="translated">預設值為<ph id="ph1">&lt;xref:System.AppDomainSetup.DisallowCodeDownload%2A&gt;</ph>屬性為 false。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppDomainSetup">
          <source>This setting is unsafe for services.</source>
          <target state="translated">這項設定是不安全的服務。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppDomainSetup">
          <source>To help prevent services from downloading partially trusted code, set this property to true</source>
          <target state="translated">為了避免服務下載部分信任程式碼，將此屬性設定為 true</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="T:System.AppDomainSetup">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.AppDomainSetup" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.AppDomainSetup" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.AppDomainSetup.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.AppDomainSetup" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.AppDomainSetup" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.AppDomainSetup.#ctor(System.ActivationContext)">
          <source>The activation context to be used for an application domain.</source>
          <target state="translated">用於應用程式定義域的啟動內容。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.AppDomainSetup.#ctor(System.ActivationContext)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.AppDomainSetup" /&gt;</ph> class with the specified activation context to use for manifest-based activation of an application domain.</source>
          <target state="translated">使用指定之啟動內容初始化 <ph id="ph1">&lt;see cref="T:System.AppDomainSetup" /&gt;</ph> 類別的新執行個體 (此啟動內容是用於應用程式定義域之資訊清單為主的啟動作業)。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.#ctor(System.ActivationContext)">
          <source>The <ph id="ph1">&lt;xref:System.ActivationContext&gt;</ph> object specified for <ph id="ph2">`activationContext`</ph> is used to generate an <ph id="ph3">&lt;xref:System.Runtime.Hosting.ActivationArguments&gt;</ph> object containing information required to activate a new application domain.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ActivationContext&gt;</ph>物件指定<ph id="ph2">`activationContext`</ph>用來產生<ph id="ph3">&lt;xref:System.Runtime.Hosting.ActivationArguments&gt;</ph>物件，其中包含啟動新的應用程式定義域所需的資訊。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.#ctor(System.ActivationContext)">
          <source>This <ph id="ph1">&lt;xref:System.Runtime.Hosting.ActivationArguments&gt;</ph> object can be accessed by using the <ph id="ph2">&lt;xref:System.AppDomainSetup.ActivationArguments%2A&gt;</ph> property.</source>
          <target state="translated">這<ph id="ph1">&lt;xref:System.Runtime.Hosting.ActivationArguments&gt;</ph>物件可以使用來存取<ph id="ph2">&lt;xref:System.AppDomainSetup.ActivationArguments%2A&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.AppDomainSetup.#ctor(System.ActivationContext)">
          <source><ph id="ph1">&lt;paramref name="activationContext" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="activationContext" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.AppDomainSetup.#ctor(System.Runtime.Hosting.ActivationArguments)">
          <source>An object that specifies information required for the manifest-based activation of a new application domain.</source>
          <target state="translated">物件，可指定新應用程式定義域之資訊清單為主的啟動作業所需的資訊。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.AppDomainSetup.#ctor(System.Runtime.Hosting.ActivationArguments)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.AppDomainSetup" /&gt;</ph> class with the specified activation arguments required for manifest-based activation of an application domain.</source>
          <target state="translated">使用應用程式定義域之資訊清單為主的啟動作業所需的指定之啟動引數，初始化 <ph id="ph1">&lt;see cref="T:System.AppDomainSetup" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.#ctor(System.Runtime.Hosting.ActivationArguments)">
          <source>The object specified for <ph id="ph1">`activationArguments`</ph> can be accessed by using the <ph id="ph2">&lt;xref:System.AppDomainSetup.ActivationArguments%2A&gt;</ph> property.</source>
          <target state="translated">指定的物件<ph id="ph1">`activationArguments`</ph>可以使用來存取<ph id="ph2">&lt;xref:System.AppDomainSetup.ActivationArguments%2A&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.AppDomainSetup.#ctor(System.Runtime.Hosting.ActivationArguments)">
          <source><ph id="ph1">&lt;paramref name="activationArguments" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="activationArguments" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.ActivationArguments">
          <source>Gets or sets data about the activation of an application domain.</source>
          <target state="translated">取得或設定與應用程式定義域的啟動有關的資料。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ActivationArguments">
          <source>An object that contains data about the activation of an application domain.</source>
          <target state="translated">物件，包含與應用程式定義域之啟動有關的資料。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ActivationArguments">
          <source>No exception is thrown if this property is set to <ph id="ph1">`null`</ph>.</source>
          <target state="translated">如果這個屬性設定為將會擲回任何例外狀況<ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ActivationArguments">
          <source>The information provided by the <ph id="ph1">&lt;xref:System.Runtime.Hosting.ActivationArguments&gt;</ph> object supports manifest-based activation.</source>
          <target state="translated">所提供的資訊<ph id="ph1">&lt;xref:System.Runtime.Hosting.ActivationArguments&gt;</ph>物件支援資訊清單型啟用。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.ActivationArguments">
          <source>The property is set to an <ph id="ph1">&lt;see cref="T:System.Runtime.Hosting.ActivationArguments" /&gt;</ph> object whose application identity does not match the application identity of the <ph id="ph2">&lt;see cref="T:System.Security.Policy.ApplicationTrust" /&gt;</ph> object returned by the <ph id="ph3">&lt;see cref="P:System.AppDomainSetup.ApplicationTrust" /&gt;</ph> property.</source>
          <target state="translated">此屬性會設定為 <ph id="ph1">&lt;see cref="T:System.Runtime.Hosting.ActivationArguments" /&gt;</ph> 物件，而此物件的應用程式識別不符合 <ph id="ph2">&lt;see cref="T:System.Security.Policy.ApplicationTrust" /&gt;</ph> 屬性傳回的 <ph id="ph3">&lt;see cref="P:System.AppDomainSetup.ApplicationTrust" /&gt;</ph> 物件之應用程式識別。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.ActivationArguments">
          <source>No exception is thrown if the <ph id="ph1">&lt;see cref="P:System.AppDomainSetup.ApplicationTrust" /&gt;</ph> property is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph1">&lt;see cref="P:System.AppDomainSetup.ApplicationTrust" /&gt;</ph> 屬性為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>，則不會擲回例外狀況。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.AppDomainInitializer">
          <source>Gets or sets the <ph id="ph1">&lt;see cref="T:System.AppDomainInitializer" /&gt;</ph> delegate, which represents a callback method that is invoked when the application domain is initialized.</source>
          <target state="translated">取得或設定 <ph id="ph1">&lt;see cref="T:System.AppDomainInitializer" /&gt;</ph> 委派，其表示當初始化應用程式定義域時所叫用的回呼方法。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainInitializer">
          <source>A delegate that represents a callback method that is invoked when the application domain is initialized.</source>
          <target state="translated">表示回呼方法的委派，在應用程式定義域初始化時會叫用此方法。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainInitializer">
          <source>To pass information to the callback method, assign an array of strings to the <ph id="ph1">&lt;xref:System.AppDomainSetup.AppDomainInitializerArguments%2A&gt;</ph> property.</source>
          <target state="translated">若要將資訊傳遞至回呼方法，將指定的字串陣列<ph id="ph1">&lt;xref:System.AppDomainSetup.AppDomainInitializerArguments%2A&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainInitializer">
          <source>The array is passed to the callback method each time an <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph> is initialized.</source>
          <target state="translated">的陣列傳遞至回呼方法，每次<ph id="ph1">&lt;xref:System.AppDomain&gt;</ph>已初始化。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainInitializer">
          <source>The callback method is executed in the context of the newly created application domain.</source>
          <target state="translated">新建立的應用程式定義域的內容中執行的回呼方法。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainInitializer">
          <source>The following example creates a child application domain named <ph id="ph1">`ChildDomain`</ph>, using an <ph id="ph2">&lt;xref:System.AppDomainSetup&gt;</ph> object and evidence from the default application domain.</source>
          <target state="translated">下列範例會建立名為的子應用程式定義域<ph id="ph1">`ChildDomain`</ph>，並使用<ph id="ph2">&lt;xref:System.AppDomainSetup&gt;</ph>物件和來自預設應用程式定義域的辨識項。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainInitializer">
          <source>The <ph id="ph1">&lt;xref:System.AppDomainSetup.AppDomainInitializer%2A&gt;</ph> property is set to the callback method <ph id="ph2">`AppDomainInit`</ph>, which is invoked when the child domain is initialized.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.AppDomainSetup.AppDomainInitializer%2A&gt;</ph>屬性設定為回呼方法<ph id="ph2">`AppDomainInit`</ph>，子定義域初始化時會叫用。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainInitializer">
          <source>The arguments for the callback method are placed in an array of strings, which is assigned to the <ph id="ph1">&lt;xref:System.AppDomainSetup.AppDomainInitializerArguments%2A&gt;</ph> property.</source>
          <target state="translated">回呼方法的引數會放在字串指派給陣列<ph id="ph1">&lt;xref:System.AppDomainSetup.AppDomainInitializerArguments%2A&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainInitializer">
          <source>When the child domain is created, the callback method simply prints the strings.</source>
          <target state="translated">建立子網域時，回呼方法只會列印字串。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.AppDomainInitializerArguments">
          <source>Gets or sets the arguments passed to the callback method represented by the <ph id="ph1">&lt;see cref="T:System.AppDomainInitializer" /&gt;</ph> delegate.</source>
          <target state="translated">取得或設定傳遞給 <ph id="ph1">&lt;see cref="T:System.AppDomainInitializer" /&gt;</ph> 委派表示的回呼方法之引數。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.AppDomainInitializerArguments">
          <source>The callback method is invoked when the application domain is initialized.</source>
          <target state="translated">當初始化應用程式定義域時，會叫用此回呼方法。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainInitializerArguments">
          <source>An array of strings that is passed to the callback method represented by the <ph id="ph1">&lt;see cref="T:System.AppDomainInitializer" /&gt;</ph> delegate, when the callback method is invoked during <ph id="ph2">&lt;see cref="T:System.AppDomain" /&gt;</ph> initialization.</source>
          <target state="translated">在 <ph id="ph1">&lt;see cref="T:System.AppDomainInitializer" /&gt;</ph> 初始化期間叫用此回呼方法時，傳遞給 <ph id="ph2">&lt;see cref="T:System.AppDomain" /&gt;</ph> 委派表示的回呼方法之字串陣列。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainInitializerArguments">
          <source>Use the <ph id="ph1">&lt;xref:System.AppDomainSetup.AppDomainInitializer%2A&gt;</ph> property to specify a callback method that is invoked during <ph id="ph2">&lt;xref:System.AppDomain&gt;</ph> initialization.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.AppDomainSetup.AppDomainInitializer%2A&gt;</ph>屬性來指定期間所叫用的回呼方法<ph id="ph2">&lt;xref:System.AppDomain&gt;</ph>初始化。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainInitializerArguments">
          <source>If the <ph id="ph1">&lt;xref:System.AppDomainSetup.AppDomainInitializer%2A&gt;</ph> property is not set, the array assigned to this property is not used.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.AppDomainSetup.AppDomainInitializer%2A&gt;</ph>屬性未設定，表示未使用指派給這個屬性的陣列。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainInitializerArguments">
          <source>The callback method is executed in the context of the newly created application domain.</source>
          <target state="translated">新建立的應用程式定義域的內容中執行的回呼方法。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainInitializerArguments">
          <source>The following code example creates a child application domain named <ph id="ph1">`ChildDomain`</ph>, using an <ph id="ph2">&lt;xref:System.AppDomainSetup&gt;</ph> object and evidence from the default application domain.</source>
          <target state="translated">下列程式碼範例會建立名為的子應用程式定義域<ph id="ph1">`ChildDomain`</ph>，並使用<ph id="ph2">&lt;xref:System.AppDomainSetup&gt;</ph>物件和來自預設應用程式定義域的辨識項。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainInitializerArguments">
          <source>The <ph id="ph1">&lt;xref:System.AppDomainSetup.AppDomainInitializer%2A&gt;</ph> property is set to the callback method <ph id="ph2">`AppDomainInit`</ph>, which is invoked when the child domain is initialized.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.AppDomainSetup.AppDomainInitializer%2A&gt;</ph>屬性設定為回呼方法<ph id="ph2">`AppDomainInit`</ph>，子定義域初始化時會叫用。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainInitializerArguments">
          <source>The arguments for the callback method are placed in an array of strings, which is assigned to the <ph id="ph1">&lt;xref:System.AppDomainSetup.AppDomainInitializerArguments%2A&gt;</ph> property.</source>
          <target state="translated">回呼方法的引數會放在字串指派給陣列<ph id="ph1">&lt;xref:System.AppDomainSetup.AppDomainInitializerArguments%2A&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainInitializerArguments">
          <source>When the child domain is created, the callback method simply prints the strings.</source>
          <target state="translated">建立子網域時，回呼方法只會列印字串。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.AppDomainManagerAssembly">
          <source>Gets or sets the display name of the assembly that provides the type of the application domain manager for application domains created using this <ph id="ph1">&lt;see cref="T:System.AppDomainSetup" /&gt;</ph> object.</source>
          <target state="translated">取得或設定組件的顯示名稱，這個組件可為使用這個 <ph id="ph1">&lt;see cref="T:System.AppDomainSetup" /&gt;</ph> 物件建立的應用程式定義域，提供應用程式定義域管理員型別。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainManagerAssembly">
          <source>The display name of the assembly that provides the <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> of the application domain manager.</source>
          <target state="translated">組件的顯示名稱，這個組件可提供應用程式定義域管理員的 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainManagerAssembly">
          <source>To specify the type of the application domain manager, set both this property and the <ph id="ph1">&lt;xref:System.AppDomainSetup.AppDomainManagerType%2A&gt;</ph> property.</source>
          <target state="translated">指定的應用程式定義域管理員類型，請設定這個屬性與<ph id="ph1">&lt;xref:System.AppDomainSetup.AppDomainManagerType%2A&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainManagerAssembly">
          <source>If either of these properties is not set, the other is ignored.</source>
          <target state="translated">如果上述任一個屬性未設定，其他則忽略。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainManagerAssembly">
          <source>If no type is provided, the application domain manager is created from the same type as the parent application domain (that is, the application domain from which the <ph id="ph1">&lt;xref:System.AppDomain.CreateDomain%2A?displayProperty=nameWithType&gt;</ph> method is called).</source>
          <target state="translated">如果未不提供任何型別，則應用程式定義域管理員來建立父應用程式定義域相同的型別 (也就是應用程式定義域從中<ph id="ph1">&lt;xref:System.AppDomain.CreateDomain%2A?displayProperty=nameWithType&gt;</ph>方法呼叫)。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainManagerAssembly">
          <source>When the application domain is loaded, <ph id="ph1">&lt;xref:System.TypeLoadException&gt;</ph> is thrown if the assembly does not exist, or if the assembly does not contain the type specified by the <ph id="ph2">&lt;xref:System.AppDomainSetup.AppDomainManagerType%2A&gt;</ph> property.</source>
          <target state="translated">載入應用程式定義域時，<ph id="ph1">&lt;xref:System.TypeLoadException&gt;</ph>如果組件不存在，或組件不包含所指定的型別，會擲回<ph id="ph2">&lt;xref:System.AppDomainSetup.AppDomainManagerType%2A&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainManagerAssembly">
          <source><ph id="ph1">&lt;xref:System.IO.FileLoadException&gt;</ph> is thrown if the assembly is found but the version information does not match.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileLoadException&gt;</ph> 如果找到組件，但版本資訊不符合，會擲回。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainManagerAssembly">
          <source>To set the application domain manager for the default application domain, use the <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>appDomainManagerAssembly&gt;<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/appdomainmanagerassembly-element.md)</ept> and <bpt id="p2">[</bpt><ph id="ph2">\&lt;</ph>appDomainManagerType&gt;<ept id="p2">](~/docs/framework/configure-apps/file-schema/runtime/appdomainmanagertype-element.md)</ept> elements in the <bpt id="p3">[</bpt><ph id="ph3">\&lt;</ph>runtime&gt;<ept id="p3">](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md)</ept> section of the application configuration file, or use the environment variables described in <ph id="ph4">&lt;xref:System.AppDomainManager&gt;</ph>.</source>
          <target state="translated">若要設定的預設應用程式定義域的應用程式定義域管理員，使用<bpt id="p1">[</bpt> <ph id="ph1">\&lt;</ph>appDomainManagerAssembly &gt;<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/appdomainmanagerassembly-element.md)</ept>和<bpt id="p2">[</bpt> <ph id="ph2">\&lt;</ph>appDomainManagerType &gt;<ept id="p2">](~/docs/framework/configure-apps/file-schema/runtime/appdomainmanagertype-element.md)</ept>中的項目<bpt id="p3">[</bpt><ph id="ph3">\&lt;</ph>執行階段 &gt;<ept id="p3">](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md)</ept>應用程式組態檔或使用環境變數中所述的區段<ph id="ph4">&lt;xref:System.AppDomainManager&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainManagerAssembly">
          <source>This feature requires the application to have full trust.</source>
          <target state="translated">此功能需要具有完全信任應用程式。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainManagerAssembly">
          <source>(For example, an application running on the desktop has full trust.) If the application does not have full trust, a <ph id="ph1">&lt;xref:System.TypeLoadException&gt;</ph> is thrown.</source>
          <target state="translated">（例如，在桌面上執行的應用程式有完全信任）。如果應用程式並沒有完全信任，<ph id="ph1">&lt;xref:System.TypeLoadException&gt;</ph>就會擲回。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainManagerAssembly">
          <source>The format of the assembly display name is given by the <ph id="ph1">&lt;xref:System.Reflection.Assembly.FullName%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">組件顯示名稱的格式由提供<ph id="ph1">&lt;xref:System.Reflection.Assembly.FullName%2A?displayProperty=nameWithType&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.AppDomainManagerType">
          <source>Gets or sets the full name of the type that provides the application domain manager for application domains created using this <ph id="ph1">&lt;see cref="T:System.AppDomainSetup" /&gt;</ph> object.</source>
          <target state="translated">取得或設定型別的完整名稱，這個型別可為使用這個 <ph id="ph1">&lt;see cref="T:System.AppDomainSetup" /&gt;</ph> 物件建立的應用程式定義域，提供應用程式定義域管理員。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainManagerType">
          <source>The full name of the type, including the namespace.</source>
          <target state="translated">類型的完整名稱，包含命名空間。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainManagerType">
          <source>To specify the type of the application domain manager, set both this property and the <ph id="ph1">&lt;xref:System.AppDomainSetup.AppDomainManagerAssembly%2A&gt;</ph> property.</source>
          <target state="translated">指定的應用程式定義域管理員類型，請設定這個屬性與<ph id="ph1">&lt;xref:System.AppDomainSetup.AppDomainManagerAssembly%2A&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainManagerType">
          <source>If either of these properties is not set, the other is ignored.</source>
          <target state="translated">如果上述任一個屬性未設定，其他則忽略。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainManagerType">
          <source>If no type is provided, the application domain manager is created from the same type as the parent application domain (that is, the application domain from which the <ph id="ph1">&lt;xref:System.AppDomain.CreateDomain%2A?displayProperty=nameWithType&gt;</ph> method is called).</source>
          <target state="translated">如果未不提供任何型別，則應用程式定義域管理員來建立父應用程式定義域相同的型別 (也就是應用程式定義域從中<ph id="ph1">&lt;xref:System.AppDomain.CreateDomain%2A?displayProperty=nameWithType&gt;</ph>方法呼叫)。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainManagerType">
          <source>When the application domain is loaded, <ph id="ph1">&lt;xref:System.TypeLoadException&gt;</ph> is thrown if the assembly specified by the <ph id="ph2">&lt;xref:System.AppDomainSetup.AppDomainManagerAssembly%2A&gt;</ph> property does not contain the type specified by this property.</source>
          <target state="translated">載入應用程式定義域時，<ph id="ph1">&lt;xref:System.TypeLoadException&gt;</ph>如果所指定的組件，會擲回<ph id="ph2">&lt;xref:System.AppDomainSetup.AppDomainManagerAssembly%2A&gt;</ph>屬性不包含這個屬性所指定的型別。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainManagerType">
          <source>To set the application domain manager for the default application domain, use the <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>appDomainManagerAssembly&gt;<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/appdomainmanagerassembly-element.md)</ept> and <bpt id="p2">[</bpt><ph id="ph2">\&lt;</ph>appDomainManagerType&gt;<ept id="p2">](~/docs/framework/configure-apps/file-schema/runtime/appdomainmanagertype-element.md)</ept> elements in the <bpt id="p3">[</bpt><ph id="ph3">\&lt;</ph>runtime&gt;<ept id="p3">](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md)</ept> section of the application configuration file, or use the environment variables described in <ph id="ph4">&lt;xref:System.AppDomainManager&gt;</ph>.</source>
          <target state="translated">若要設定的預設應用程式定義域的應用程式定義域管理員，使用<bpt id="p1">[</bpt> <ph id="ph1">\&lt;</ph>appDomainManagerAssembly &gt;<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/appdomainmanagerassembly-element.md)</ept>和<bpt id="p2">[</bpt> <ph id="ph2">\&lt;</ph>appDomainManagerType &gt;<ept id="p2">](~/docs/framework/configure-apps/file-schema/runtime/appdomainmanagertype-element.md)</ept>中的項目<bpt id="p3">[</bpt><ph id="ph3">\&lt;</ph>執行階段 &gt;<ept id="p3">](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md)</ept>應用程式組態檔或使用環境變數中所述的區段<ph id="ph4">&lt;xref:System.AppDomainManager&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainManagerType">
          <source>This feature requires the application to have full trust.</source>
          <target state="translated">此功能需要具有完全信任應用程式。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainManagerType">
          <source>(For example, an application running on the desktop has full trust.) If the application does not have full trust, a <ph id="ph1">&lt;xref:System.TypeLoadException&gt;</ph> is thrown.</source>
          <target state="translated">（例如，在桌面上執行的應用程式有完全信任）。如果應用程式並沒有完全信任，<ph id="ph1">&lt;xref:System.TypeLoadException&gt;</ph>就會擲回。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainManagerType">
          <source>The format of the full name of a type is given by the <ph id="ph1">&lt;xref:System.Type.FullName%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">類型的完整名稱的格式由提供<ph id="ph1">&lt;xref:System.Type.FullName%2A?displayProperty=nameWithType&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.ApplicationBase">
          <source>Gets or sets the name of the directory containing the application.</source>
          <target state="translated">取得或設定包含應用程式的目錄名稱。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ApplicationBase">
          <source>The name of the application base directory.</source>
          <target state="translated">應用程式基底目錄的名稱。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ApplicationBase">
          <source>The application base directory is where the assembly manager begins probing for assemblies.</source>
          <target state="translated">應用程式基底目錄是組件管理員開始探查組件。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ApplicationBase">
          <source>The <ph id="ph1">&lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;</ph> property can influence which permissions are granted to an application domain.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;</ph>屬性可能會影響應用程式定義域授與的權限。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ApplicationBase">
          <source>For example, an application domain originating from the local computer normally receives full trust based on its location of origin.</source>
          <target state="translated">例如，通常來自本機電腦的應用程式定義域收到完全信任的來源的位置。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ApplicationBase">
          <source>However, if the <ph id="ph1">&lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;</ph> property of that <ph id="ph2">&lt;xref:System.AppDomain&gt;</ph> is set to the full name of an intranet directory, the <ph id="ph3">&lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;</ph> setting restricts the permissions granted to the application domain to a LocalIntranet grant even though the application domain actually originates from the local computer.</source>
          <target state="translated">不過，如果<ph id="ph1">&lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;</ph>屬性，<ph id="ph2">&lt;xref:System.AppDomain&gt;</ph>設定內部網路目錄的完整名稱為<ph id="ph3">&lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;</ph>設定會限制授與權限 LocalIntranet 授與應用程式定義域即使應用程式定義域確實來自本機電腦。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ApplicationBase">
          <source>The following example demonstrates how to use the <ph id="ph1">&lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;</ph> property to set the location where the assembly loader begins probing for assemblies to load into a new application domain.</source>
          <target state="translated">下列範例示範如何使用<ph id="ph1">&lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;</ph>屬性來設定組件載入器開始探查組件載入到新的應用程式定義域的位置。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ApplicationBase">
          <source>You must ensure that the folder you specify exists.</source>
          <target state="translated">您必須確定您指定的資料夾存在。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ApplicationBase">
          <source>for access to the path information.</source>
          <target state="translated">用於存取路徑資訊。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ApplicationBase">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph></source>
          <target state="translated">相關聯的列舉型別： <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.ApplicationName">
          <source>Gets or sets the name of the application.</source>
          <target state="translated">取得或設定應用程式的名稱。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ApplicationName">
          <source>The name of the application.</source>
          <target state="translated">應用程式的名稱。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ApplicationName">
          <source>The following example shows how to set the <ph id="ph1">&lt;xref:System.AppDomainSetup.ApplicationName%2A&gt;</ph> property when you create a new application domain.</source>
          <target state="translated">下列範例示範如何設定<ph id="ph1">&lt;xref:System.AppDomainSetup.ApplicationName%2A&gt;</ph>當您建立新的應用程式定義域的屬性。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ApplicationName">
          <source>The example creates a new application domain, and then calls the <ph id="ph1">&lt;xref:System.AppDomain.CreateInstanceAndUnwrap%2A?displayProperty=nameWithType&gt;</ph> method to load the example assembly into the new application domain and create an instance of the <ph id="ph2">`Worker`</ph> class.</source>
          <target state="translated">此範例會建立新的應用程式定義域，然後呼叫<ph id="ph1">&lt;xref:System.AppDomain.CreateInstanceAndUnwrap%2A?displayProperty=nameWithType&gt;</ph>方法範例組件載入到新的應用程式定義域，並建立的執行個體<ph id="ph2">`Worker`</ph>類別。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ApplicationName">
          <source>The <ph id="ph1">`Worker`</ph> class inherits <ph id="ph2">&lt;xref:System.MarshalByRefObject&gt;</ph>, so the example can use the proxy returned by <ph id="ph3">&lt;xref:System.AppDomain.CreateInstanceAndUnwrap%2A&gt;</ph> to call the <ph id="ph4">`TestLoad`</ph> method.</source>
          <target state="translated"><ph id="ph1">`Worker`</ph>類別會繼承<ph id="ph2">&lt;xref:System.MarshalByRefObject&gt;</ph>，所以此範例可以使用所傳回的 proxy<ph id="ph3">&lt;xref:System.AppDomain.CreateInstanceAndUnwrap%2A&gt;</ph>呼叫<ph id="ph4">`TestLoad`</ph>方法。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ApplicationName">
          <source>The <ph id="ph1">`TestLoad`</ph> method loads an assembly that you specify.</source>
          <target state="translated"><ph id="ph1">`TestLoad`</ph>方法載入組件，您所指定。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ApplicationName">
          <source>You must either specify a valid, fully qualified assembly name, or comment out the <ph id="ph1">&lt;xref:System.Reflection.Assembly.Load%28System.String%29&gt;</ph> method.</source>
          <target state="translated">您必須指定有效、 完整的組件名稱，或標記為註解<ph id="ph1">&lt;xref:System.Reflection.Assembly.Load%28System.String%29&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ApplicationName">
          <source>The <ph id="ph1">`TestLoad`</ph> method lists the assemblies that are loaded into the new application domain, showing that your specified assembly and the example assembly are loaded.</source>
          <target state="translated"><ph id="ph1">`TestLoad`</ph>方法列出載入新的應用程式定義域，顯示您指定的組件和範例組件會載入的組件。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ApplicationName">
          <source>The example uses the <ph id="ph1">&lt;xref:System.LoaderOptimizationAttribute&gt;</ph> attribute to tell the assembly loader how the application will share code across application domains.</source>
          <target state="translated">此範例會使用<ph id="ph1">&lt;xref:System.LoaderOptimizationAttribute&gt;</ph>告知如何應用程式時，將應用程式定義域之間共用程式碼的組件載入器的屬性。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.ApplicationTrust">
          <source>Gets or sets an object containing security and trust information.</source>
          <target state="translated">取得或設定包含安全性和信任資訊的物件。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ApplicationTrust">
          <source>An object that contains security and trust information.</source>
          <target state="translated">包含安全性和信任資訊的物件。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ApplicationTrust">
          <source>This property is <ph id="ph1">`null`</ph> when the <ph id="ph2">&lt;xref:System.AppDomainSetup&gt;</ph> is created.</source>
          <target state="translated">這個屬性是<ph id="ph1">`null`</ph>時<ph id="ph2">&lt;xref:System.AppDomainSetup&gt;</ph>建立。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ApplicationTrust">
          <source>Once changed, it cannot be reset to a null reference.</source>
          <target state="translated">一旦變更，無法重設為 null 參考。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.ApplicationTrust">
          <source>The property is set to an <ph id="ph1">&lt;see cref="T:System.Security.Policy.ApplicationTrust" /&gt;</ph> object whose application identity does not match the application identity of the <ph id="ph2">&lt;see cref="T:System.Runtime.Hosting.ActivationArguments" /&gt;</ph> object returned by the <ph id="ph3">&lt;see cref="P:System.AppDomainSetup.ActivationArguments" /&gt;</ph> property.</source>
          <target state="translated">此屬性會設定為 <ph id="ph1">&lt;see cref="T:System.Security.Policy.ApplicationTrust" /&gt;</ph> 物件，而此物件的應用程式識別不符合 <ph id="ph2">&lt;see cref="T:System.Runtime.Hosting.ActivationArguments" /&gt;</ph> 屬性傳回的 <ph id="ph3">&lt;see cref="P:System.AppDomainSetup.ActivationArguments" /&gt;</ph> 物件之應用程式識別。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.ApplicationTrust">
          <source>No exception is thrown if the <ph id="ph1">&lt;see cref="P:System.AppDomainSetup.ActivationArguments" /&gt;</ph> property is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph1">&lt;see cref="P:System.AppDomainSetup.ActivationArguments" /&gt;</ph> 屬性為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>，則不會擲回例外狀況。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.ApplicationTrust">
          <source>The property is set to <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">該屬性設定為 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.CachePath">
          <source>Gets or sets the name of an area specific to the application where files are shadow copied.</source>
          <target state="translated">取得和設定其中的檔案已陰影複製的應用程式特定區域的名稱。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.CachePath">
          <source>The fully qualified name of the directory path and file name where files are shadow copied.</source>
          <target state="translated">陰影複製之檔案的目錄路徑與檔案名稱的完整限定名稱。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.CachePath">
          <source>In order for this property to have an effect, the <ph id="ph1">&lt;xref:System.AppDomainSetup.ApplicationName%2A&gt;</ph> property must also be set.</source>
          <target state="translated">為了讓此屬性，讓效果，請<ph id="ph1">&lt;xref:System.AppDomainSetup.ApplicationName%2A&gt;</ph>也必須設定屬性。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.CachePath">
          <source>If the <ph id="ph1">&lt;xref:System.AppDomainSetup.ApplicationName%2A&gt;</ph> property is not set, the <ph id="ph2">&lt;xref:System.AppDomainSetup.CachePath%2A&gt;</ph> property is ignored and the shadow copy cache location defaults to the download cache.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.AppDomainSetup.ApplicationName%2A&gt;</ph>未設定屬性，<ph id="ph2">&lt;xref:System.AppDomainSetup.CachePath%2A&gt;</ph>屬性會被忽略，且陰影複本快取位置的預設值為下載快取。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.CachePath">
          <source>For more information on shadow copying, see <bpt id="p1">[</bpt>Shadow Copying Assemblies<ept id="p1">](~/docs/framework/app-domains/shadow-copy-assemblies.md)</ept>.</source>
          <target state="translated">如需有關陰影複製的詳細資訊，請參閱<bpt id="p1">[</bpt>陰影複製組件<ept id="p1">](~/docs/framework/app-domains/shadow-copy-assemblies.md)</ept>。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.CachePath">
          <source>for access to the path information.</source>
          <target state="translated">用於存取路徑資訊。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.CachePath">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph></source>
          <target state="translated">相關聯的列舉型別： <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.ConfigurationFile">
          <source>Gets or sets the name of the configuration file for an application domain.</source>
          <target state="translated">取得和設定應用程式定義域的組態檔名稱。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ConfigurationFile">
          <source>The name of the configuration file.</source>
          <target state="translated">組態檔的名稱。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ConfigurationFile">
          <source>The configuration file describes the search rules and configuration data for the application domain.</source>
          <target state="translated">組態檔會描述應用程式定義域的組態資料與搜尋規則。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ConfigurationFile">
          <source>The host that creates the application domain is responsible for supplying this data because the meaningful values vary from situation to situation.</source>
          <target state="translated">建立應用程式定義域的主機會負責提供這項資料，因為有意義的值不同的狀況。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ConfigurationFile">
          <source>For example, the configuration data for ASP.NET applications is stored for each application, site, and computer, while the configuration data for an executable is stored for each application, user, and computer.</source>
          <target state="translated">例如，ASP.NET 應用程式的組態資料會儲存為每個應用程式、 網站和電腦，而可執行檔的組態資料會儲存每個應用程式、 使用者及電腦。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ConfigurationFile">
          <source>Only the host knows the specifics of the configuration data for a particular circumstance.</source>
          <target state="translated">只有主機才會知道組態資料的詳細資訊，為特定狀況。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ConfigurationFile">
          <source>for access to the path information.</source>
          <target state="translated">用於存取路徑資訊。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ConfigurationFile">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph></source>
          <target state="translated">相關聯的列舉型別： <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.DisallowApplicationBaseProbing">
          <source>Specifies whether the application base path and private binary path are probed when searching for assemblies to load.</source>
          <target state="translated">指定當搜尋要載入的組件時，是否要探查應用程式基底路徑和私用二進位路徑。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DisallowApplicationBaseProbing">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if probing is not allowed; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果不允許探查，則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DisallowApplicationBaseProbing">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">預設值為 <ph id="ph1">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DisallowApplicationBaseProbing">
          <source>If the <ph id="ph1">&lt;xref:System.AppDomainSetup.DisallowApplicationBaseProbing%2A&gt;</ph> property is <ph id="ph2">`true`</ph>, the value of the <ph id="ph3">&lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;</ph> property is ignored.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.AppDomainSetup.DisallowApplicationBaseProbing%2A&gt;</ph>屬性是<ph id="ph2">`true`</ph>，值<ph id="ph3">&lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;</ph>屬性會被忽略。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DisallowApplicationBaseProbing">
          <source>That is, no assemblies are probed for in the directories specified by the <ph id="ph1">&lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;</ph> property.</source>
          <target state="translated">也就是任何組件會探查如中所指定目錄<ph id="ph1">&lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DisallowApplicationBaseProbing">
          <source>In addition, the values of the <ph id="ph1">&lt;xref:System.AppDomainSetup.PrivateBinPath%2A&gt;</ph> property and the <ph id="ph2">&lt;xref:System.AppDomainSetup.PrivateBinPathProbe%2A&gt;</ph> property are ignored.</source>
          <target state="translated">此外，值<ph id="ph1">&lt;xref:System.AppDomainSetup.PrivateBinPath%2A&gt;</ph>屬性和<ph id="ph2">&lt;xref:System.AppDomainSetup.PrivateBinPathProbe%2A&gt;</ph>屬性會被忽略。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DisallowApplicationBaseProbing">
          <source>No assemblies are probed for in the directories specified by the <ph id="ph1">&lt;xref:System.AppDomainSetup.PrivateBinPath%2A&gt;</ph> property.</source>
          <target state="translated">所指定之目錄中任何組件探查的<ph id="ph1">&lt;xref:System.AppDomainSetup.PrivateBinPath%2A&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DisallowApplicationBaseProbing">
          <source>The <ph id="ph1">&lt;xref:System.AppDomainSetup.DisallowApplicationBaseProbing%2A&gt;</ph> property provides an additional layer of control over the loading process.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.AppDomainSetup.DisallowApplicationBaseProbing%2A&gt;</ph>屬性會提供額外的控制載入程序。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DisallowApplicationBaseProbing">
          <source>In the normal assembly loading sequence, the application base is probed before the <ph id="ph1">&lt;xref:System.AppDomain.AssemblyResolve?displayProperty=nameWithType&gt;</ph> event is raised.</source>
          <target state="translated">標準的組件載入順序時，應用程式基底會探查之前<ph id="ph1">&lt;xref:System.AppDomain.AssemblyResolve?displayProperty=nameWithType&gt;</ph>就會引發事件。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DisallowApplicationBaseProbing">
          <source>However, some applications might need to load assemblies from an OLE compound file within a document, or from a unique known location that is neither in the global assembly cache nor in the directories specified by the <ph id="ph1">&lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.AppDomainSetup.PrivateBinPath%2A&gt;</ph> properties.</source>
          <target state="translated">不過，某些應用程式可能需要從 OLE 複合檔案的文件，或從唯一的已知位置不在全域組件快取和所指定之目錄中載入的組件<ph id="ph1">&lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.AppDomainSetup.PrivateBinPath%2A&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DisallowApplicationBaseProbing">
          <source>Such applications can use the <ph id="ph1">&lt;xref:System.AppDomainSetup.DisallowApplicationBaseProbing%2A&gt;</ph> property to avoid the delay caused by normal probing, and to avoid loading copies of the necessary assembly that might be located in the normal probing paths.</source>
          <target state="translated">這類應用程式可以使用<ph id="ph1">&lt;xref:System.AppDomainSetup.DisallowApplicationBaseProbing%2A&gt;</ph>屬性以避免一般探查時，所造成的延遲，並避免載入必要可能位在一般的探查路徑中的組件的複本。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.DisallowBindingRedirects">
          <source>Gets or sets a value that indicates whether an application domain allows assembly binding redirection.</source>
          <target state="translated">取得或設定值，這個值表示應用程式定義域是否允許組件繫結重新導向。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DisallowBindingRedirects">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if redirection of assemblies is not allowed; <ph id="ph2">&lt;see langword="false" /&gt;</ph> if it is allowed.</source>
          <target state="translated">如果不允許組件重新導向，則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；如果允許，則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DisallowBindingRedirects">
          <source>The <ph id="ph1">&lt;xref:System.AppDomainSetup.DisallowBindingRedirects%2A&gt;</ph> property is designed to be used by services and server applications where assembly binding redirection is not part of the application scenario.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.AppDomainSetup.DisallowBindingRedirects%2A&gt;</ph>屬性設計用於服務和伺服器應用程式組件繫結重新導向不是屬於應用程式的情況。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.DisallowCodeDownload">
          <source>Gets or sets a value that indicates whether HTTP download of assemblies is allowed for an application domain.</source>
          <target state="translated">取得或設定值，這個值表示應用程式定義域是否允許以 HTTP 下載組件。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DisallowCodeDownload">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if HTTP download of assemblies is not allowed; <ph id="ph2">&lt;see langword="false" /&gt;</ph> if it is allowed.</source>
          <target state="translated">如果不允許以 HTTP 下載組件，則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；如果允許，則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DisallowCodeDownload">
          <source>The <ph id="ph1">&lt;xref:System.AppDomainSetup.DisallowCodeDownload%2A&gt;</ph> property is designed to be used by services and server applications where downloading code from an intranet or the Internet is not part of the application scenario.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.AppDomainSetup.DisallowCodeDownload%2A&gt;</ph>屬性設計用於服務和伺服器應用程式從內部網路或網際網路下載的程式碼不是屬於應用程式的情況。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DisallowCodeDownload">
          <source>The default value for the <ph id="ph1">&lt;xref:System.AppDomainSetup.DisallowCodeDownload%2A&gt;</ph> property is <ph id="ph2">`false`</ph>.</source>
          <target state="translated">預設值為<ph id="ph1">&lt;xref:System.AppDomainSetup.DisallowCodeDownload%2A&gt;</ph>屬性是<ph id="ph2">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DisallowCodeDownload">
          <source>This setting is unsafe for services.</source>
          <target state="translated">這項設定是不安全的服務。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DisallowCodeDownload">
          <source>To help prevent services from downloading partially trusted code, set this property to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">為了避免服務下載部分信任程式碼，將此屬性設定為<ph id="ph1">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.DisallowPublisherPolicy">
          <source>Gets or sets a value that indicates whether the <bpt id="p1">[</bpt><ph id="ph1">&amp;lt;</ph>publisherPolicy<ph id="ph2">&amp;gt;</ph><ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/publisherpolicy-element.md)</ept> section of the configuration file is applied to an application domain.</source>
          <target state="translated">取得或設定值，指出組態檔的 <bpt id="p1">[</bpt><ph id="ph1">&amp;lt;</ph>publisherPolicy<ph id="ph2">&amp;gt;</ph><ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/publisherpolicy-element.md)</ept> 區段是否套用至應用程式定義域。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DisallowPublisherPolicy">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see langword="&amp;lt;publisherPolicy&amp;gt;" /&gt;</ph> section of the configuration file for an application domain is ignored; <ph id="ph3">&lt;see langword="false" /&gt;</ph> if the declared publisher policy is honored.</source>
          <target state="translated">如果忽略應用程式定義域之組態檔的 <ph id="ph2">&lt;see langword="&amp;lt;publisherPolicy&amp;gt;" /&gt;</ph> 區段，則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；如果遵循所宣告的發行者原則，則為 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DisallowPublisherPolicy">
          <source>The <ph id="ph1">&lt;xref:System.AppDomainSetup.DisallowPublisherPolicy%2A&gt;</ph> property specifically applies to a Web application that is loaded locally.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.AppDomainSetup.DisallowPublisherPolicy%2A&gt;</ph>屬性特別適用於在本機載入 Web 應用程式。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DisallowPublisherPolicy">
          <source>Use this property to help prevent a malicious attempt to execute an unsafe Web application in safe mode.</source>
          <target state="translated">使用這個屬性來協助防止惡意嘗試在安全模式中執行不安全的 Web 應用程式。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DisallowPublisherPolicy">
          <source>For more information about bypassing publisher policy, see the <bpt id="p1">[</bpt>Redirecting Assembly Versions<ept id="p1">](~/docs/framework/configure-apps/redirect-assembly-versions.md)</ept> topic.</source>
          <target state="translated">如需略過發行者原則的詳細資訊，請參閱<bpt id="p1">[</bpt>重新導向組件版本<ept id="p1">](~/docs/framework/configure-apps/redirect-assembly-versions.md)</ept>主題。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DisallowPublisherPolicy">
          <source>For more information about safe mode, see the "Examining the Configuration Files" section of the <bpt id="p1">[</bpt>How the Runtime Locates Assemblies<ept id="p1">](~/docs/framework/deployment/how-the-runtime-locates-assemblies.md)</ept> topic.</source>
          <target state="translated">如需安全模式的詳細資訊，請參閱的 &lt; 檢查組態檔案 &gt; 一節<bpt id="p1">[</bpt>執行階段如何找出組件<ept id="p1">](~/docs/framework/deployment/how-the-runtime-locates-assemblies.md)</ept>主題。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.DynamicBase">
          <source>Gets or sets the base directory where the directory for dynamically generated files is located.</source>
          <target state="translated">取得或設定動態產生的檔案之目錄所在的基底目錄。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>The directory where the <ph id="ph1">&lt;see cref="P:System.AppDomain.DynamicDirectory" /&gt;</ph> is located.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.AppDomain.DynamicDirectory" /&gt;</ph> 所在的目錄。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>The return value of this property is different from the value assigned.</source>
          <target state="translated">這個屬性的傳回值不同於指派的值。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>Use this property to set the base directory where the dynamic directory for the new application domain will be located.</source>
          <target state="translated">使用這個屬性來設定基底目錄即將放置新的應用程式定義域的動態目錄。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>When code in the new application domain loads an assembly, assembly resolution looks first in the normal probing paths.</source>
          <target state="translated">當新的應用程式定義域中的程式碼會載入組件、 組件解析看起來正常的探查路徑中的第一個。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>If it does not find the assembly, it looks in the dynamic directory, which is returned by the <ph id="ph1">&lt;xref:System.AppDomain.DynamicDirectory%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">如果找不到組件，它會尋找在動態的目錄中，由<ph id="ph1">&lt;xref:System.AppDomain.DynamicDirectory%2A?displayProperty=nameWithType&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>Dynamic assemblies that will be loaded and executed by the new application domain can be placed there.</source>
          <target state="translated">動態組件會載入並執行新的應用程式定義域可以放在該處。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>When you assign a path to the <ph id="ph1">&lt;xref:System.AppDomainSetup.DynamicBase%2A&gt;</ph> property, an additional subdirectory is added; the name of this subdirectory is the hash code of the value assigned to the <ph id="ph2">&lt;xref:System.AppDomainSetup.ApplicationName%2A&gt;</ph> property.</source>
          <target state="translated">當您指派的路徑<ph id="ph1">&lt;xref:System.AppDomainSetup.DynamicBase%2A&gt;</ph>屬性，就會加入額外的子目錄，則這個子目錄的名稱是指派給值的雜湊碼<ph id="ph2">&lt;xref:System.AppDomainSetup.ApplicationName%2A&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>Thus, the base directory subsequently returned by this property is always different from the value assigned.</source>
          <target state="translated">因此，之後這個屬性所傳回的基底目錄一定是不同於指派的值。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>Assigning a value to this property does not create any directories.</source>
          <target state="translated">將值指派給這個屬性不會建立任何目錄。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>The directories must be created or verified by the code that uses them.</source>
          <target state="translated">目錄必須建立或驗證的程式碼使用它們。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>The dynamic directory is a subdirectory of <ph id="ph1">&lt;xref:System.AppDomainSetup.DynamicBase%2A&gt;</ph>.</source>
          <target state="translated">動態的目錄是子目錄的<ph id="ph1">&lt;xref:System.AppDomainSetup.DynamicBase%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>Its simple name is the value returned by the <ph id="ph1">&lt;xref:System.AppDomainSetup.ApplicationName%2A&gt;</ph> property, so its format is <bpt id="p1">*</bpt>original path<ept id="p1">*</ept><ph id="ph2">\\</ph><bpt id="p2">*</bpt>hash code<ept id="p2">*</ept><ph id="ph3">\\</ph><bpt id="p3">*</bpt>application name<ept id="p3">*</ept>.</source>
          <target state="translated">其簡單的名稱是所傳回的值<ph id="ph1">&lt;xref:System.AppDomainSetup.ApplicationName%2A&gt;</ph>屬性，因此其格式是<bpt id="p1">*</bpt>原始路徑<ept id="p1">*</ept><ph id="ph2">\\</ph><bpt id="p2">*</bpt>雜湊碼<ept id="p2">*</ept><ph id="ph3">\\</ph><bpt id="p3">*</bpt>應用程式名稱<ept id="p3">*</ept>.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>The following example demonstrates how to use the <ph id="ph1">&lt;xref:System.AppDomainSetup.DynamicBase%2A&gt;</ph> property to set the path an application domain probes when loading dynamic assemblies.</source>
          <target state="translated">下列範例示範如何使用<ph id="ph1">&lt;xref:System.AppDomainSetup.DynamicBase%2A&gt;</ph>載入動態組件時，探查路徑設為應用程式定義域的屬性。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>The example creates an <ph id="ph1">&lt;xref:System.AppDomainSetup&gt;</ph> object and sets its <ph id="ph2">&lt;xref:System.AppDomainSetup.ApplicationName%2A&gt;</ph> property to "Example" and its <ph id="ph3">&lt;xref:System.AppDomainSetup.DynamicBase%2A&gt;</ph> property to "C:\DynamicAssemblyDir".</source>
          <target state="translated">此範例會建立<ph id="ph1">&lt;xref:System.AppDomainSetup&gt;</ph>物件，然後設定其<ph id="ph2">&lt;xref:System.AppDomainSetup.ApplicationName%2A&gt;</ph>「 範例 」 的屬性和其<ph id="ph3">&lt;xref:System.AppDomainSetup.DynamicBase%2A&gt;</ph>"C:\DynamicAssemblyDir"的屬性。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>The example then displays the <ph id="ph1">&lt;xref:System.AppDomainSetup.DynamicBase%2A&gt;</ph> property, to show that the hash code of the application name has been appended as a subdirectory of the path that was originally assigned.</source>
          <target state="translated">此範例接著會顯示<ph id="ph1">&lt;xref:System.AppDomainSetup.DynamicBase%2A&gt;</ph>屬性，以顯示應用程式名稱的雜湊碼，做為原本指派路徑的子目錄已附加。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>The base directory in this example is intended to be outside the probing path for the example application.</source>
          <target state="translated">在此範例中的基底目錄就是要外之探查路徑中的範例應用程式。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>Be sure to compile the example in a different location.</source>
          <target state="translated">請務必編譯此範例中不同的位置。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>Delete the base directory and all its subdirectories each time you run the example.</source>
          <target state="translated">刪除基底目錄和其所有子目錄每次您執行範例。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>The example creates a new application domain using the <ph id="ph1">&lt;xref:System.AppDomainSetup&gt;</ph> object.</source>
          <target state="translated">此範例會建立新的應用程式網域使用<ph id="ph1">&lt;xref:System.AppDomainSetup&gt;</ph>物件。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>The example then creates the dynamic directory if it does not already exist.</source>
          <target state="translated">這個範例會建立動態的目錄，如果不存在。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>Although the example uses the application domain's <ph id="ph1">&lt;xref:System.AppDomain.DynamicDirectory%2A?displayProperty=nameWithType&gt;</ph> property to get the name of the dynamic directory, it could just as easily create the directory beforehand by concatenating the original path, the hash code of the application name, and the application name.</source>
          <target state="translated">雖然此範例會使用應用程式定義域的<ph id="ph1">&lt;xref:System.AppDomain.DynamicDirectory%2A?displayProperty=nameWithType&gt;</ph>屬性，即可取得動態目錄的名稱就可輕鬆地建立目錄事先藉由串連的原始路徑，雜湊程式碼的應用程式名稱，而應用程式名稱。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>The example has a <ph id="ph1">`GenerateDynamicAssembly`</ph> method that emits an assembly named <ph id="ph2">`DynamicHelloWorld.dll`</ph> and stores it in the new application domain's dynamic directory.</source>
          <target state="translated">此範例包含<ph id="ph1">`GenerateDynamicAssembly`</ph>方法發出的組件名為<ph id="ph2">`DynamicHelloWorld.dll`</ph>並將它儲存在新的應用程式定義域動態目錄中。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>The dynamic assembly contains one type, <ph id="ph1">`HelloWorld`</ph>, that has a static method (<ph id="ph2">`Shared`</ph> method in Visual Basic) named <ph id="ph3">`HelloFromAD`</ph>.</source>
          <target state="translated">動態組件包含一種類型， <ph id="ph1">`HelloWorld`</ph>，具有靜態方法 (<ph id="ph2">`Shared`</ph>在 Visual Basic 中的方法) 名為<ph id="ph3">`HelloFromAD`</ph>。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>Calling this method displays the name of the application domain.</source>
          <target state="translated">呼叫這個方法會顯示應用程式網域的名稱。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>The <ph id="ph1">`Example`</ph> class derives from <ph id="ph2">&lt;xref:System.MarshalByRefObject&gt;</ph>, so the example can create an instance of the class in the new application domain and call its <ph id="ph3">`Test`</ph> method.</source>
          <target state="translated"><ph id="ph1">`Example`</ph>類別衍生自<ph id="ph2">&lt;xref:System.MarshalByRefObject&gt;</ph>，因此此範例可以建立類別的執行個體中的新應用程式定義域和呼叫其<ph id="ph3">`Test`</ph>方法。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>The <ph id="ph1">`Test`</ph> method loads the dynamic assembly by its display name and calls the static <ph id="ph2">`HelloFromAD`</ph> method.</source>
          <target state="translated"><ph id="ph1">`Test`</ph>方法會依其顯示名稱載入的動態組件，並呼叫靜態<ph id="ph2">`HelloFromAD`</ph>方法。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>You can show that the dynamic directory is searched after the normal probing paths by writing code for an assembly named <ph id="ph1">`DynamicHelloWorld.dll`</ph> and compiling it in the same directory as this example.</source>
          <target state="translated">您可以顯示動態目錄搜尋一般探查路徑之後，撰寫程式碼組件名為<ph id="ph1">`DynamicHelloWorld.dll`</ph>及編譯此範例中的相同目錄中。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>The assembly must have a class named <ph id="ph1">`HelloWorld`</ph> with a static method named <ph id="ph2">`HelloFromAD`</ph>.</source>
          <target state="translated">組件必須具有名為類別<ph id="ph1">`HelloWorld`</ph>的靜態方法，名為<ph id="ph2">`HelloFromAD`</ph>。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>This method does not have to have the same functionality as the one in the example; it can simply display a string to the console.</source>
          <target state="translated">這個方法不需要具有相同的功能與在範例中。它只可以在主控台中顯示字串。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>The assembly must also have an <ph id="ph1">&lt;xref:System.Reflection.AssemblyVersionAttribute&gt;</ph> attribute that sets its version to 1.0.0.0.</source>
          <target state="translated">組件也必須<ph id="ph1">&lt;xref:System.Reflection.AssemblyVersionAttribute&gt;</ph>其版本設定為 1.0.0.0 設定的屬性。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>When you run the example, the assembly you compiled in the current directory is found before the dynamic directory is searched.</source>
          <target state="translated">當您執行範例時，才能動態目錄中搜尋找到您目前的目錄中編譯的組件。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.DynamicBase">
          <source>This property cannot be set because the application name on the application domain is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">無法設定這個屬性，因為應用程式定義域中的應用程式名稱為 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>for access to the path information.</source>
          <target state="translated">用於存取路徑資訊。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph></source>
          <target state="translated">相關聯的列舉型別： <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="M:System.AppDomainSetup.GetConfigurationBytes">
          <source>Returns the XML configuration information set by the <ph id="ph1">&lt;see cref="M:System.AppDomainSetup.SetConfigurationBytes(System.Byte[])" /&gt;</ph> method, which overrides the application's XML configuration information.</source>
          <target state="translated">傳回 <ph id="ph1">&lt;see cref="M:System.AppDomainSetup.SetConfigurationBytes(System.Byte[])" /&gt;</ph> 方法設定的 XML 組態資訊，此方法會覆寫應用程式的 XML 組態資訊。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" uid="M:System.AppDomainSetup.GetConfigurationBytes">
          <source>An array that contains the XML configuration information that was set by the <ph id="ph1">&lt;see cref="M:System.AppDomainSetup.SetConfigurationBytes(System.Byte[])" /&gt;</ph> method, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if the <ph id="ph3">&lt;see cref="M:System.AppDomainSetup.SetConfigurationBytes(System.Byte[])" /&gt;</ph> method has not been called.</source>
          <target state="translated">包含 <ph id="ph1">&lt;see cref="M:System.AppDomainSetup.SetConfigurationBytes(System.Byte[])" /&gt;</ph> 方法所設定之 XML 組態資訊的陣列；如果尚未呼叫 <ph id="ph3">&lt;see cref="M:System.AppDomainSetup.SetConfigurationBytes(System.Byte[])" /&gt;</ph> 方法，則為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.GetConfigurationBytes">
          <source>The <ph id="ph1">&lt;xref:System.AppDomainSetup.SetConfigurationBytes%2A&gt;</ph> method provides a way to override the configuration information of an application that creates a new application domain.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.AppDomainSetup.SetConfigurationBytes%2A&gt;</ph>方法可用來建立新的應用程式定義域的應用程式的組態資訊會覆寫。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.GetConfigurationBytes">
          <source>The configuration file information in <ph id="ph1">`value`</ph> overrides the configuration file information for the application.</source>
          <target state="translated">中的設定檔資訊<ph id="ph1">`value`</ph>覆寫應用程式的組態檔資訊。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.GetConfigurationBytes">
          <source>For example, when the Example.exe application creates a new application domain, it can override the configuration information originally obtained from Example.exe.config file.</source>
          <target state="translated">例如，當 Example.exe 應用程式建立新的應用程式定義域時，它可以覆寫原先取自 Example.exe.config 檔案的組態資訊。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.GetConfigurationBytes">
          <source>Some consumers of configuration file information do not use the information stored by the <ph id="ph1">&lt;xref:System.AppDomainSetup.SetConfigurationBytes%2A&gt;</ph> method.</source>
          <target state="translated">部分的設定檔資訊的取用者不會使用儲存的資訊<ph id="ph1">&lt;xref:System.AppDomainSetup.SetConfigurationBytes%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.GetConfigurationBytes">
          <source>The runtime does not enforce this.</source>
          <target state="translated">執行階段不會強制這個屬性。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.GetConfigurationBytes">
          <source>To ensure that all configuration file information is overridden in a new application domain, use the <ph id="ph1">&lt;xref:System.AppDomainSetup.ConfigurationFile%2A&gt;</ph> property to specify a configuration file.</source>
          <target state="translated">若要確保新的應用程式定義域中會覆寫所有的設定檔資訊，請使用<ph id="ph1">&lt;xref:System.AppDomainSetup.ConfigurationFile%2A&gt;</ph>屬性來指定組態檔。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.GetConfigurationBytes">
          <source>The <ph id="ph1">&lt;xref:System.AppDomainSetup.SetConfigurationBytes%2A&gt;</ph> method does affect assembly binding.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.AppDomainSetup.SetConfigurationBytes%2A&gt;</ph>方法，並會影響組件繫結。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.GetConfigurationBytes">
          <source>The XML in <ph id="ph1">`value`</ph> is the same as the XML in a normal configuration file, except that it is stored as a <ph id="ph2">&lt;xref:System.Byte&gt;</ph> array.</source>
          <target state="translated">中的 XML<ph id="ph1">`value`</ph>等同於一般的組態檔中的 XML 之處在於它會儲存為<ph id="ph2">&lt;xref:System.Byte&gt;</ph>陣列。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.GetConfigurationBytes">
          <source>To access the configuration bytes for an application domain, use the <ph id="ph1">&lt;xref:System.AppDomain.SetupInformation%2A?displayProperty=nameWithType&gt;</ph> property to get the <ph id="ph2">&lt;xref:System.AppDomainSetup&gt;</ph> object for the application domain, then use the <ph id="ph3">&lt;xref:System.AppDomainSetup.GetConfigurationBytes%2A&gt;</ph> method.</source>
          <target state="translated">若要存取應用程式定義域的組態位元組，請使用<ph id="ph1">&lt;xref:System.AppDomain.SetupInformation%2A?displayProperty=nameWithType&gt;</ph>屬性來取得<ph id="ph2">&lt;xref:System.AppDomainSetup&gt;</ph>物件的應用程式定義域，然後使用<ph id="ph3">&lt;xref:System.AppDomainSetup.GetConfigurationBytes%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.LicenseFile">
          <source>Gets or sets the location of the license file associated with this domain.</source>
          <target state="translated">取得或設定與這個定義域相關聯的使用權檔案的位置。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.LicenseFile">
          <source>The location and name of the license file.</source>
          <target state="translated">授權檔的位置和名稱。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.LicenseFile">
          <source>for access to the path information.</source>
          <target state="translated">用於存取路徑資訊。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.LicenseFile">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph></source>
          <target state="translated">相關聯的列舉型別： <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.LoaderOptimization">
          <source>Specifies the optimization policy used to load an executable.</source>
          <target state="translated">指定用來載入可執行檔的最佳化原則。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.LoaderOptimization">
          <source>An enumerated constant that is used with the <ph id="ph1">&lt;see cref="T:System.LoaderOptimizationAttribute" /&gt;</ph>.</source>
          <target state="translated">和 <ph id="ph1">&lt;see cref="T:System.LoaderOptimizationAttribute" /&gt;</ph> 一起使用的列舉常數。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.LoaderOptimization">
          <source>The following example creates a dynamic assembly and saves it to disk, and then uses the <ph id="ph1">&lt;xref:System.AppDomainSetup.LoaderOptimization%2A&gt;</ph> property to set the optimization policy used to load the assembly into an application domain.</source>
          <target state="translated">下列範例會建立動態組件，並將它儲存至磁碟，然後使用<ph id="ph1">&lt;xref:System.AppDomainSetup.LoaderOptimization%2A&gt;</ph>屬性來設定用來將應用程式定義域載入組件的最佳化原則。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.PartialTrustVisibleAssemblies">
          <source>Gets or sets a list of assemblies marked with the <ph id="ph1">&lt;see cref="F:System.Security.PartialTrustVisibilityLevel.NotVisibleByDefault" /&gt;</ph> flag that are made visible to partial-trust code running in a sandboxed application domain.</source>
          <target state="translated">取得或設定標記有 <ph id="ph1">&lt;see cref="F:System.Security.PartialTrustVisibilityLevel.NotVisibleByDefault" /&gt;</ph> 旗標之組件的清單，這些組件設成對沙箱應用程式定義域中執行的部分信任程式碼為可見的。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.PartialTrustVisibleAssemblies">
          <source>An array of partial assembly names, where each partial name consists of the simple assembly name and the public key.</source>
          <target state="translated">部分組件名稱的陣列，其中每一個部分名稱都是由簡易組件名稱和公開金鑰組成。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.PartialTrustVisibleAssemblies">
          <source>Beginning with the <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, the <ph id="ph2">&lt;xref:System.Security.AllowPartiallyTrustedCallersAttribute&gt;</ph> (APTCA) attribute can be made conditional by setting its <ph id="ph3">&lt;xref:System.Security.AllowPartiallyTrustedCallersAttribute.PartialTrustVisibilityLevel%2A&gt;</ph> property to <ph id="ph4">&lt;xref:System.Security.PartialTrustVisibilityLevel.NotVisibleByDefault&gt;</ph>.</source>
          <target state="translated">開頭為<ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>、 <ph id="ph2">&lt;xref:System.Security.AllowPartiallyTrustedCallersAttribute&gt;</ph> (APTCA) 屬性才能進行條件式藉由設定其<ph id="ph3">&lt;xref:System.Security.AllowPartiallyTrustedCallersAttribute.PartialTrustVisibilityLevel%2A&gt;</ph>屬性<ph id="ph4">&lt;xref:System.Security.PartialTrustVisibilityLevel.NotVisibleByDefault&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.PartialTrustVisibleAssemblies">
          <source>An APTCA assembly that is marked with <ph id="ph1">&lt;xref:System.Security.PartialTrustVisibilityLevel.NotVisibleByDefault&gt;</ph> cannot be used by partially trusted code unless the host application allows it.</source>
          <target state="translated">已標記 APTCA 組件<ph id="ph1">&lt;xref:System.Security.PartialTrustVisibilityLevel.NotVisibleByDefault&gt;</ph>除非主應用程式可讓它無法供部分信任程式碼。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.PartialTrustVisibleAssemblies">
          <source>The host of a sandboxed application domain allows code in the application domain to use assemblies with conditional APTCA attributes by creating an array that contains the simple name and public key of each assembly, and assigning the array to this property.</source>
          <target state="translated">沙箱化應用程式定義域的主機可允許使用條件式 APTCA 屬性中的組件，藉由建立陣列，其中包含的簡單名稱和公開金鑰的每個組件，並將陣列指派給這個屬性的應用程式定義域中的程式碼。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.PartialTrustVisibleAssemblies">
          <source>For example, an element of the array might look like the following: "MyAssembly, PublicKey=0024000004800000940000000602000000240000525341310004000001000100db2ad5e5fedc67ea526ff72ad426ef68e08e241d296c499eedfec6648dcc62b1a12f72be5833a45bbec481b68415b08a5fbc9f9ef247b523dd72bbea65bb532784ddc5c704544bd2f1c2d46fdbe41e4f949e76f9947357b2d5cf8ca9f970701bbd6e8ab64ad31b20ad0be9b56dae4f6b83332b92a2a3b8ea2804c40efbc0b6b9".</source>
          <target state="translated">例如，陣列項目看起來可能如下所示:"MyAssembly，PublicKey =0024000004800000940000000602000000240000525341310004000001000100db2ad5e5fedc67ea526ff72ad426ef68e08e241d296c499eedfec6648dcc62b1a12f72be5833a45bbec481b68415b08a5fbc9f9ef247b523dd72bbea65bb532784ddc5c704544bd2f1c2d46fdbe41e4f949e76f9947357b2d5cf8ca9f970701bbd6e8ab64ad31b20ad0be9b56dae4f6b83332b92a2a3b8ea2804c40efbc0b6b9"。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.PartialTrustVisibleAssemblies">
          <source>If you are using a subclass of <ph id="ph1">&lt;xref:System.AppDomainManager&gt;</ph>, and the assembly that defines it depends on assemblies that are marked with the conditional APTCA attribute, you must include those assemblies in the list that you pass to the <ph id="ph2">&lt;xref:System.AppDomainSetup.PartialTrustVisibleAssemblies%2A&gt;</ph> property of the <ph id="ph3">&lt;xref:System.AppDomainSetup&gt;</ph> you use to create application domains.</source>
          <target state="translated">如果您使用的子類別<ph id="ph1">&lt;xref:System.AppDomainManager&gt;</ph>，並定義它的組件相依於以條件式 APTCA 屬性標記的組件時，您必須包含這些組件的清單中，您將傳遞給<ph id="ph2">&lt;xref:System.AppDomainSetup.PartialTrustVisibleAssemblies%2A&gt;</ph>屬性<ph id="ph3">&lt;xref:System.AppDomainSetup&gt;</ph>您用於建立應用程式定義域。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.PartialTrustVisibleAssemblies">
          <source>Otherwise the assemblies that are marked with the conditional APTCA attribute will be disabled.</source>
          <target state="translated">否則會使用條件式 APTCA 屬性標示組件將會停用。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.PartialTrustVisibleAssemblies">
          <source>When you are debugging an application that is running in a sandboxed application domain, some <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> messages can be misleading.</source>
          <target state="translated">當您偵錯的應用程式，在沙箱化應用程式網域中，執行某些<ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph>訊息可能會產生誤導。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.PartialTrustVisibleAssemblies">
          <source>For example, a message might state that one of your fully trusted assemblies has only limited permissions, when the real cause of the problem is that a security demand that exceeds the grant set of the sandboxed application domain has propagated to the boundary of the sandboxed application domain and failed.</source>
          <target state="translated">例如，訊息可能狀態，您完全信任組件的其中一個只具有有限的權限，當實際問題的原因是超過沙箱化應用程式網域的授權集的安全性要求已傳播至的界限沙箱應用程式定義域但失敗。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.PrivateBinPath">
          <source>Gets or sets the list of directories under the application base directory that are probed for private assemblies.</source>
          <target state="translated">取得或設定在應用程式基底目錄之下用於探查私用組件的目錄清單。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.PrivateBinPath">
          <source>A list of directory names separated by semicolons.</source>
          <target state="translated">以分號分隔的目錄名稱清單。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.PrivateBinPath">
          <source>Private assemblies are deployed in the same directory structure as the application.</source>
          <target state="translated">私用組件會部署在相同的目錄結構與應用程式。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.PrivateBinPath">
          <source>If the directories specified for <ph id="ph1">&lt;xref:System.AppDomainSetup.PrivateBinPath%2A&gt;</ph> are not under <ph id="ph2">&lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;</ph>, they are ignored.</source>
          <target state="translated">如果針對指定的目錄<ph id="ph1">&lt;xref:System.AppDomainSetup.PrivateBinPath%2A&gt;</ph>底下不<ph id="ph2">&lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;</ph>，便會予以忽略。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.PrivateBinPathProbe">
          <source>Gets or sets a string value that includes or excludes <ph id="ph1">&lt;see cref="P:System.AppDomainSetup.ApplicationBase" /&gt;</ph> from the search path for the application, and searches only <ph id="ph2">&lt;see cref="P:System.AppDomainSetup.PrivateBinPath" /&gt;</ph>.</source>
          <target state="translated">取得或設定字串值，此字串值會在應用程式的搜尋路徑中加入或排除 <ph id="ph1">&lt;see cref="P:System.AppDomainSetup.ApplicationBase" /&gt;</ph>，並僅搜尋 <ph id="ph2">&lt;see cref="P:System.AppDomainSetup.PrivateBinPath" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.PrivateBinPathProbe">
          <source>A null reference (<ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> in Visual Basic) to include the application base path when searching for assemblies; any non-null string value to exclude the path.</source>
          <target state="translated">Null 參考 (在 Visual Basic 中為 <ph id="ph1">&lt;see langword="Nothing" /&gt;</ph>) 表示要在搜尋組件時包含應用程式基底路徑。任何非 Null 字串值則表示不包含路徑。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.PrivateBinPathProbe">
          <source>The default value is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">預設值是 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.PrivateBinPathProbe">
          <source>Set this property to any non-null string value, including <ph id="ph1">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph> (""), to exclude the application directory path — that is, <ph id="ph2">&lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;</ph> — from the search path for the application, and to search for assemblies only in <ph id="ph3">&lt;xref:System.AppDomainSetup.PrivateBinPath%2A&gt;</ph>.</source>
          <target state="translated">將此屬性設定為任何非 null 字串值，包括<ph id="ph1">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>("")，若要排除的應用程式的目錄路徑，也就是<ph id="ph2">&lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;</ph>— 應用程式，並搜尋組件的搜尋路徑中只能在<ph id="ph3">&lt;xref:System.AppDomainSetup.PrivateBinPath%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.SandboxInterop">
          <source>Gets or sets a value that indicates whether interface caching is disabled for interop calls in the application domain, so that a <bpt id="p1">&lt;c&gt;</bpt>QueryInterface<ept id="p1">&lt;/c&gt;</ept> is performed on each call.</source>
          <target state="translated">取得或設定值，指出是否已停用應用程式定義域中 Interop 呼叫的介面快取，以便在每個呼叫上執行 <bpt id="p1">&lt;c&gt;</bpt>QueryInterface<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.SandboxInterop">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if interface caching is disabled for interop calls in application domains created with the current <ph id="ph2">&lt;see cref="T:System.AppDomainSetup" /&gt;</ph> object; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果停用應用程式定義域中使用目前 <ph id="ph2">&lt;see cref="T:System.AppDomainSetup" /&gt;</ph> 物件建立之 Interop 呼叫的介面快取則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.SandboxInterop">
          <source>Disabling interface caching has a significant impact on the performance of interop calls.</source>
          <target state="translated">停用介面快取 interop 呼叫的效能有重大影響。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.SandboxInterop">
          <source>This member is introduced in the <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph>.</source>
          <target state="translated">這個成員在引進<ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph>。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" uid="M:System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})">
          <source>An enumerable set of string values that specify compatibility switches, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> to erase the existing compatibility switches.</source>
          <target state="translated">可用來指定相容性參數的字串值可列舉集，或 <ph id="ph1">&lt;see langword="null" /&gt;</ph> 以清除現有的相容性參數。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" uid="M:System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})">
          <source>Sets the specified switches, making the application domain compatible with previous versions of the .NET Framework for the specified issues.</source>
          <target state="translated">針對指定的問題來設定指定的參數，讓應用程式定義域與舊版 .NET Framework 相容。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})">
          <source>Major versions of the .NET Framework sometimes introduce breaking changes from the previous version.</source>
          <target state="translated">主要版本的.NET framework 有時會引進重大變更來自舊版本。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})">
          <source>For example, the <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph> introduces a small number of breaking changes from the <ph id="ph2">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph>.</source>
          <target state="translated">例如，<ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>導入的重大變更的少數<ph id="ph2">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph>。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})">
          <source>Use the <ph id="ph1">&lt;xref:System.AppDomainSetup.SetCompatibilitySwitches%2A&gt;</ph> method to specify that one or more of these breaking changes should be rolled back for the application domain, to make the behavior compatible with the previous version of the .NET Framework.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.AppDomainSetup.SetCompatibilitySwitches%2A&gt;</ph>方法，以指定的一或多個這些重大變更將會回復要讓其行為與舊版的.NET Framework 相容的應用程式定義域。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})">
          <source>Each time you call this method, it replaces the existing switch settings.</source>
          <target state="translated">每次呼叫這個方法，它會取代現有參數設定。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})">
          <source>To erase the settings, specify <ph id="ph1">`null`</ph> for the <ph id="ph2">`switches`</ph> parameter.</source>
          <target state="translated">若要清除的設定值，指定<ph id="ph1">`null`</ph>如<ph id="ph2">`switches`</ph>參數。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})">
          <source>The set of string values you provide for <ph id="ph1">`switches`</ph> can be a simple string array, because arrays implement the <ph id="ph2">&lt;xref:System.Collections.IEnumerable&gt;</ph> interface.</source>
          <target state="translated">為所提供的字串值組<ph id="ph1">`switches`</ph>可以是簡單的字串陣列，因為陣列實作<ph id="ph2">&lt;xref:System.Collections.IEnumerable&gt;</ph>介面。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})">
          <source>The following table provides examples of compatibility switches that can be set to restore the behavior of earlier versions of the .NET Framework.</source>
          <target state="translated">下表提供可以還原舊版.NET Framework 的行為設定的相容性參數的範例。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})">
          <source>Switch</source>
          <target state="translated">參數</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})">
          <source>Meaning</source>
          <target state="translated">意義</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})">
          <source>"NetFx40_LegacySecurityPolicy"</source>
          <target state="translated">"NetFx40_LegacySecurityPolicy"</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})">
          <source>Code access security (CAS) for the <ph id="ph1">[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]</ph> is enabled in this application domain.</source>
          <target state="translated">程式碼存取安全性 (CAS)<ph id="ph1">[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]</ph>啟用這個應用程式定義域中。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})">
          <source>See <bpt id="p1">[</bpt><ph id="ph1">&amp;lt;</ph>NetFx40_LegacySecurityPolicy<ph id="ph2">&amp;gt;</ph> Element<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/netfx40-legacysecuritypolicy-element.md)</ept>.</source>
          <target state="translated">請參閱<bpt id="p1">[</bpt> <ph id="ph1">&amp;lt;</ph>NetFx40_LegacySecurityPolicy<ph id="ph2">&amp;gt;</ph>元素<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/netfx40-legacysecuritypolicy-element.md)</ept>。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})">
          <source>"NetFx40_Legacy20SortingBehavior"</source>
          <target state="translated">"NetFx40_Legacy20SortingBehavior"</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})">
          <source>String sorting defaults for the <ph id="ph1">[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]</ph> are enabled in this application domain.</source>
          <target state="translated">排序的預設值的字串<ph id="ph1">[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]</ph>這個應用程式定義域中已啟用。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})">
          <source>Successfully restoring legacy sorting behavior also requires the sort00001000.dll dynamic link library to be available on the local system.</source>
          <target state="translated">已成功還原舊版的排序行為也需要 sort00001000.dll 動態連結程式庫，可在本機系統上。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})">
          <source>See <bpt id="p1">[</bpt><ph id="ph1">&amp;lt;</ph>CompatSortNLSVersion<ph id="ph2">&amp;gt;</ph> Element<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/compatsortnlsversion-element.md)</ept>.</source>
          <target state="translated">請參閱<bpt id="p1">[</bpt> <ph id="ph1">&amp;lt;</ph>CompatSortNLSVersion<ph id="ph2">&amp;gt;</ph>元素<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/compatsortnlsversion-element.md)</ept>。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})">
          <source>"NetFx40_Legacy40SortingBehavior"</source>
          <target state="translated">"NetFx40_Legacy40SortingBehavior"</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})">
          <source>String sorting defaults for the <ph id="ph1">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph> and Unicode 5.0 are enabled in this application domain.</source>
          <target state="translated">排序的預設值的字串<ph id="ph1">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph>而且 Unicode 5.0 已啟用這個應用程式定義域中。</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})">
          <source>Successfully restoring legacy sorting behavior also requires the sort00060101.dll dynamic link library to be available on the local system.</source>
          <target state="translated">已成功還原舊版的排序行為也需要 sort00060101.dll 動態連結程式庫，可在本機系統上。</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})">
          <source>"NetFx40_TimeSpanLegacyFormatMode"</source>
          <target state="translated">"NetFx40_TimeSpanLegacyFormatMode"</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})">
          <source><ph id="ph1">&lt;xref:System.TimeSpan&gt;</ph> formatting behavior for the <ph id="ph2">[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]</ph> is enabled in this application domain.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.TimeSpan&gt;</ph> 格式化行為<ph id="ph2">[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]</ph>啟用這個應用程式定義域中。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})">
          <source>See <bpt id="p1">[</bpt><ph id="ph1">&amp;lt;</ph>TimeSpan_LegacyFormatMode<ph id="ph2">&amp;gt;</ph> Element<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/timespan-legacyformatmode-element.md)</ept> and the "Restoring Legacy TimeSpan Formatting" section of the <ph id="ph3">&lt;xref:System.TimeSpan&gt;</ph> topic.</source>
          <target state="translated">請參閱<bpt id="p1">[</bpt> <ph id="ph1">&amp;lt;</ph>TimeSpan_LegacyFormatMode<ph id="ph2">&amp;gt;</ph>元素<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/timespan-legacyformatmode-element.md)</ept>和 「 還原舊版 TimeSpan 格式 」 的區段<ph id="ph3">&lt;xref:System.TimeSpan&gt;</ph>主題。</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})">
          <source>"UseRandomizedStringHashAlgorithm"</source>
          <target state="translated">"UseRandomizedStringHashAlgorithm"</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})">
          <source>The runtime calculates hash codes for strings on a per application domain basis instead of using a single hashing algorithm that produces a consistent hash code across application domains.</source>
          <target state="translated">執行階段計算字串的雜湊程式碼上每個應用程式網域為基礎，而不是使用單一的雜湊演算法產生一致的雜湊程式碼在應用程式定義域。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})">
          <source>See <bpt id="p1">[</bpt><ph id="ph1">&amp;lt;</ph>UseRandomizedStringHashAlgorithm<ph id="ph2">&amp;gt;</ph> Element<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/userandomizedstringhashalgorithm-element.md)</ept>.</source>
          <target state="translated">請參閱<bpt id="p1">[</bpt> <ph id="ph1">&amp;lt;</ph>UseRandomizedStringHashAlgorithm<ph id="ph2">&amp;gt;</ph>元素<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/userandomizedstringhashalgorithm-element.md)</ept>。</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" uid="M:System.AppDomainSetup.SetConfigurationBytes(System.Byte[])">
          <source>An array that contains the XML configuration information to be used for the application domain.</source>
          <target state="translated">包含用於應用程式定義域之 XML 組態資訊的陣列。</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" uid="M:System.AppDomainSetup.SetConfigurationBytes(System.Byte[])">
          <source>Provides XML configuration information for the application domain, replacing the application's XML configuration information.</source>
          <target state="translated">為應用程式定義域提供 XML 組態資訊，以取代應用程式的 XML 組態資訊。</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetConfigurationBytes(System.Byte[])">
          <source>The <ph id="ph1">&lt;xref:System.AppDomainSetup.SetConfigurationBytes%2A&gt;</ph> method provides a way to replace the configuration information of an application that creates a new application domain.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.AppDomainSetup.SetConfigurationBytes%2A&gt;</ph>方法可用來取代建立新的應用程式定義域的應用程式的組態資訊。</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetConfigurationBytes(System.Byte[])">
          <source>The configuration file information in <ph id="ph1">`value`</ph> replaces the configuration file information for the application.</source>
          <target state="translated">中的設定檔資訊<ph id="ph1">`value`</ph>取代應用程式的設定檔資訊。</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetConfigurationBytes(System.Byte[])">
          <source>For example, when the Example.exe application creates a new application domain, it can replace the configuration information originally obtained from the Example.exe.config file.</source>
          <target state="translated">例如，當 Example.exe 應用程式建立新的應用程式定義域時，它可以取代原本取自 Example.exe.config 檔案的組態資訊。</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetConfigurationBytes(System.Byte[])">
          <source>Some consumers of configuration file information do not use the information stored by the <ph id="ph1">&lt;xref:System.AppDomainSetup.SetConfigurationBytes%2A&gt;</ph> method.</source>
          <target state="translated">部分的設定檔資訊的取用者不會使用儲存的資訊<ph id="ph1">&lt;xref:System.AppDomainSetup.SetConfigurationBytes%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetConfigurationBytes(System.Byte[])">
          <source>The runtime does not enforce this.</source>
          <target state="translated">執行階段不會強制這個屬性。</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetConfigurationBytes(System.Byte[])">
          <source>To ensure that all configuration file information is replaced in a new application domain, use the <ph id="ph1">&lt;xref:System.AppDomainSetup.ConfigurationFile%2A&gt;</ph> property to specify a configuration file.</source>
          <target state="translated">若要確保所有的設定檔資訊會取代新的應用程式定義域中，使用<ph id="ph1">&lt;xref:System.AppDomainSetup.ConfigurationFile%2A&gt;</ph>屬性來指定組態檔。</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetConfigurationBytes(System.Byte[])">
          <source>The <ph id="ph1">&lt;xref:System.AppDomainSetup.SetConfigurationBytes%2A&gt;</ph> method does affect assembly binding.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.AppDomainSetup.SetConfigurationBytes%2A&gt;</ph>方法，並會影響組件繫結。</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetConfigurationBytes(System.Byte[])">
          <source>The XML in <ph id="ph1">`value`</ph> is the same as the XML in a normal configuration file, except that it is stored as a <ph id="ph2">&lt;xref:System.Byte&gt;</ph> array.</source>
          <target state="translated">中的 XML<ph id="ph1">`value`</ph>等同於一般的組態檔中的 XML 之處在於它會儲存為<ph id="ph2">&lt;xref:System.Byte&gt;</ph>陣列。</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" uid="M:System.AppDomainSetup.SetNativeFunction(System.String,System.Int32,System.IntPtr)">
          <source>The name of the string comparison function to override.</source>
          <target state="translated">要覆寫的字串比較函式的名稱。</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" uid="M:System.AppDomainSetup.SetNativeFunction(System.String,System.Int32,System.IntPtr)">
          <source>The function version.</source>
          <target state="translated">函式版本。</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" uid="M:System.AppDomainSetup.SetNativeFunction(System.String,System.Int32,System.IntPtr)">
          <source>For <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, its value must be 1 or greater.</source>
          <target state="translated">若是 <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>，其值必須為 1 或更大。</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" uid="M:System.AppDomainSetup.SetNativeFunction(System.String,System.Int32,System.IntPtr)">
          <source>A pointer to the function that overrides <bpt id="p1">&lt;c&gt;</bpt>functionName<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">覆寫 <bpt id="p1">&lt;c&gt;</bpt>functionName<ept id="p1">&lt;/c&gt;</ept> 之函式的指標。</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" uid="M:System.AppDomainSetup.SetNativeFunction(System.String,System.Int32,System.IntPtr)">
          <source>Provides the common language runtime with an alternate implementation of a string comparison function.</source>
          <target state="translated">為 Common Language Runtime 提供字串比較函式的替代實作。</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetNativeFunction(System.String,System.Int32,System.IntPtr)">
          <source>The following string comparison and sorting methods can be overridden by the <ph id="ph1">&lt;xref:System.AppDomainSetup.SetNativeFunction%2A&gt;</ph> method:</source>
          <target state="translated">下列的字串比較和排序方法可以覆寫<ph id="ph1">&lt;xref:System.AppDomainSetup.SetNativeFunction%2A&gt;</ph>方法：</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetNativeFunction(System.String,System.Int32,System.IntPtr)">
          <source>For information about these functions, see <bpt id="p1">[</bpt>National Language Support Functions<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=228134)</ept>.</source>
          <target state="translated">如需這些函數的資訊，請參閱<bpt id="p1">[</bpt>國家語言支援函式<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=228134)</ept>。</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" uid="M:System.AppDomainSetup.SetNativeFunction(System.String,System.Int32,System.IntPtr)">
          <source><ph id="ph1">&lt;paramref name="functionName" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="functionName" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" uid="M:System.AppDomainSetup.SetNativeFunction(System.String,System.Int32,System.IntPtr)">
          <source><ph id="ph1">&lt;paramref name="functionVersion" /&gt;</ph> is not 1 or greater.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="functionVersion" /&gt;</ph> 不是 1 或更大數字。</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" uid="M:System.AppDomainSetup.SetNativeFunction(System.String,System.Int32,System.IntPtr)">
          <source>-or-</source>
          <target state="translated">-或-</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" uid="M:System.AppDomainSetup.SetNativeFunction(System.String,System.Int32,System.IntPtr)">
          <source><ph id="ph1">&lt;paramref name="functionPointer" /&gt;</ph> is <ph id="ph2">&lt;see cref="F:System.IntPtr.Zero" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="functionPointer" /&gt;</ph> 為 <ph id="ph2">&lt;see cref="F:System.IntPtr.Zero" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetNativeFunction(System.String,System.Int32,System.IntPtr)">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">需要完全信任立即呼叫者。</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetNativeFunction(System.String,System.Int32,System.IntPtr)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">這個成員無法供部分信任或安全性透明程式碼。</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.ShadowCopyDirectories">
          <source>Gets or sets the names of the directories containing assemblies to be shadow copied.</source>
          <target state="translated">取得或設定包含要陰影複製的組件的目錄名稱。</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ShadowCopyDirectories">
          <source>A list of directory names separated by semicolons.</source>
          <target state="translated">以分號分隔的目錄名稱清單。</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ShadowCopyDirectories">
          <source>When shadow copying is enabled, the default is to shadow copy all assemblies found through probing; that is, in the directories specified by the <ph id="ph1">&lt;xref:System.AppDomainSetup.PrivateBinPath%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;</ph> properties.</source>
          <target state="translated">啟用陰影複製時，預設值是要透過探查; 找到的所有組件的陰影複製也就是所指定目錄中<ph id="ph1">&lt;xref:System.AppDomainSetup.PrivateBinPath%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ShadowCopyDirectories">
          <source>The <ph id="ph1">&lt;xref:System.AppDomainSetup.ShadowCopyDirectories%2A&gt;</ph> property restricts the shadow copy to the assemblies in the directories specified by <ph id="ph2">&lt;xref:System.AppDomainSetup.ShadowCopyDirectories%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.AppDomainSetup.ShadowCopyDirectories%2A&gt;</ph>屬性會限制所指定目錄中的組件的陰影複製<ph id="ph2">&lt;xref:System.AppDomainSetup.ShadowCopyDirectories%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ShadowCopyDirectories">
          <source>If you don’t assign a string to the <ph id="ph1">&lt;xref:System.AppDomainSetup.ShadowCopyDirectories%2A&gt;</ph> property, or if you set this property to <ph id="ph2">`null`</ph>, all assemblies in the directories specified by the <ph id="ph3">&lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.AppDomainSetup.PrivateBinPath%2A&gt;</ph> properties are shadow copied.</source>
          <target state="translated">如果您不指派字串給 <ph id="ph1">&lt;xref:System.AppDomainSetup.ShadowCopyDirectories%2A&gt;</ph> 屬性，或如果您將這個屬性設定為 <ph id="ph2">`null`</ph>，則會陰影複製 <ph id="ph3">&lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;</ph> 和 <ph id="ph4">&lt;xref:System.AppDomainSetup.PrivateBinPath%2A&gt;</ph> 屬性所指定目錄中的所有組件。</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ShadowCopyDirectories">
          <source>Directory paths must not contain semicolons, because the semicolon is the delimiter character.</source>
          <target state="translated">目錄路徑不可包含分號，因為分號是分隔符號字元。</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ShadowCopyDirectories">
          <source>There is no escape character for semicolons.</source>
          <target state="translated">分號沒有逸出字元。</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ShadowCopyDirectories">
          <source>When shadow copying is in effect, assembly files are copied to another location before the assemblies are loaded.</source>
          <target state="translated">作用時，陰影複製，組件檔會複製到另一個位置載入組件之前。</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ShadowCopyDirectories">
          <source>The original assembly file is not locked, so it can be updated.</source>
          <target state="translated">原始的組件檔未鎖定，因此可以更新。</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ShadowCopyDirectories">
          <source>For more information on shadow copying, see <bpt id="p1">[</bpt>Shadow Copying Assemblies<ept id="p1">](~/docs/framework/app-domains/shadow-copy-assemblies.md)</ept>.</source>
          <target state="translated">如需有關陰影複製的詳細資訊，請參閱<bpt id="p1">[</bpt>陰影複製組件<ept id="p1">](~/docs/framework/app-domains/shadow-copy-assemblies.md)</ept>。</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ShadowCopyDirectories">
          <source>for access to the path information.</source>
          <target state="translated">用於存取路徑資訊。</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ShadowCopyDirectories">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph></source>
          <target state="translated">相關聯的列舉型別： <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.ShadowCopyFiles">
          <source>Gets or sets a string that indicates whether shadow copying is turned on or off.</source>
          <target state="translated">取得或設定指示陰影複製是開啟或關閉的字串。</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ShadowCopyFiles">
          <source>The string value "true" to indicate that shadow copying is turned on; or "false" to indicate that shadow copying is turned off.</source>
          <target state="translated">字串值 "true" 表示陰影複製為開啟，"false" 表示陰影複製為關閉。</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ShadowCopyFiles">
          <source>For more information on shadow copying, see <bpt id="p1">[</bpt>Shadow Copying Assemblies<ept id="p1">](~/docs/framework/app-domains/shadow-copy-assemblies.md)</ept>.</source>
          <target state="translated">如需有關陰影複製的詳細資訊，請參閱<bpt id="p1">[</bpt>陰影複製組件<ept id="p1">](~/docs/framework/app-domains/shadow-copy-assemblies.md)</ept>。</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.TargetFrameworkName">
          <source>Gets or sets a string that specifies the target version and profile of the .NET Framework for the application domain, in a format that can be parsed by the <ph id="ph1">&lt;see cref="M:System.Runtime.Versioning.FrameworkName.#ctor(System.String)" /&gt;</ph> constructor.</source>
          <target state="translated">取得或設定字串，以 <ph id="ph1">&lt;see cref="M:System.Runtime.Versioning.FrameworkName.#ctor(System.String)" /&gt;</ph> 建構函式可剖析的格式，為應用程式定義域指定 .NET Framework 的目標版本和設定檔。</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.TargetFrameworkName">
          <source>The target version and profile of the .NET Framework.</source>
          <target state="translated">.NET Framework 的目標版本和設定檔。</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.TargetFrameworkName">
          <source>Set this property to tell the currently running version of the .NET Framework that the application domain will be used to load and run assemblies that have been compiled for the target version and profile.</source>
          <target state="translated">設定這個屬性，以判斷目前正在執行版本的.NET framework 應用程式定義域，可用來載入及執行的目標版本和設定檔的已編譯的組件。</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.TargetFrameworkName">
          <source>If the currently running version of the .NET Framework has optional behaviors that affect the compatibility of code that was compiled with the target version, it can enable or disable those behaviors, as appropriate, to improve compatibility.</source>
          <target state="translated">如果目前執行的.NET framework 版本有選擇性的行為會影響相容性的目標版本編譯的程式碼，它可以啟用或停用這些行為，視需要以提高相容性。</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.TargetFrameworkName">
          <source>This can be useful when an application supports add-ins compiled with multiple versions of the .NET Framework by running them in separate application domains.</source>
          <target state="translated">當應用程式支援增益集由在個別的應用程式定義域中執行它們使用多個版本的.NET framework 編譯時，這非常有用。</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.TargetFrameworkName">
          <source>For client applications, the value of the <ph id="ph1">&lt;xref:System.AppDomainSetup.TargetFrameworkName%2A&gt;</ph> property is inferred from the <ph id="ph2">&lt;xref:System.Runtime.Versioning.TargetFrameworkAttribute&gt;</ph> attribute.</source>
          <target state="translated">用戶端應用程式，值<ph id="ph1">&lt;xref:System.AppDomainSetup.TargetFrameworkName%2A&gt;</ph>屬性會從推斷<ph id="ph2">&lt;xref:System.Runtime.Versioning.TargetFrameworkAttribute&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.TargetFrameworkName">
          <source>In <ph id="ph1">[!INCLUDE[vs_dev10_long](~/includes/vs-dev10-long-md.md)]</ph> and later, this attribute is added to the assembly automatically based on the setting of the project's <bpt id="p1">**</bpt>Target Framework<ept id="p1">**</ept> property.</source>
          <target state="translated">在<ph id="ph1">[!INCLUDE[vs_dev10_long](~/includes/vs-dev10-long-md.md)]</ph>和更新版本中，這個屬性會加入至組件會自動根據專案設定<bpt id="p1">**</bpt>目標 Framework<ept id="p1">**</ept>屬性。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>