<Type Name="MulticastDelegate" FullName="System.MulticastDelegate">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="53d55fb65dda42d603fed586e14887c2801674c9" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36431068" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class MulticastDelegate : Delegate" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi abstract serializable beforefieldinit MulticastDelegate extends System.Delegate" />
  <TypeSignature Language="DocId" Value="T:System.MulticastDelegate" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class MulticastDelegate&#xA;Inherits Delegate" />
  <TypeSignature Language="C++ CLI" Value="public ref class MulticastDelegate abstract : Delegate" />
  <TypeSignature Language="F#" Value="type MulticastDelegate = class&#xA;    inherit Delegate" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="90628-101">表示多點傳送委派；也就是說，委派可以在它的引動過程清單中包含一個以上的項目。</span>
      <span class="sxs-lookup">
        <span data-stu-id="90628-101">Represents a multicast delegate; that is, a delegate that can have more than one element in its invocation list.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90628-102"><xref:System.MulticastDelegate> 是特殊的類別。</span><span class="sxs-lookup"><span data-stu-id="90628-102"><xref:System.MulticastDelegate> is a special class.</span></span> <span data-ttu-id="90628-103">編譯器和其他工具可以從這個類別衍生，但無法從它衍生明確。</span><span class="sxs-lookup"><span data-stu-id="90628-103">Compilers and other tools can derive from this class, but you cannot derive from it explicitly.</span></span> <span data-ttu-id="90628-104">也是如此的<xref:System.Delegate>類別。</span><span class="sxs-lookup"><span data-stu-id="90628-104">The same is true of the <xref:System.Delegate> class.</span></span>  
  
 <span data-ttu-id="90628-105">除了委派類型的方法繼承自<xref:System.MulticastDelegate>，common language runtime 提供兩種特殊的方法：`BeginInvoke`和`EndInvoke`。</span><span class="sxs-lookup"><span data-stu-id="90628-105">In addition to the methods that delegate types inherit from <xref:System.MulticastDelegate>, the common language runtime provides two special methods: `BeginInvoke` and `EndInvoke`.</span></span> <span data-ttu-id="90628-106">如需有關這些方法的詳細資訊，請參閱[呼叫同步方法以非同步方式](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)。</span><span class="sxs-lookup"><span data-stu-id="90628-106">For more information about these methods, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
 <span data-ttu-id="90628-107">A<xref:System.MulticastDelegate>具有委派，呼叫的引動過程清單中，一或多個項目所組成的連結的清單。</span><span class="sxs-lookup"><span data-stu-id="90628-107">A <xref:System.MulticastDelegate> has a linked list of delegates, called an invocation list, consisting of one or more elements.</span></span> <span data-ttu-id="90628-108">叫用多點傳送的委派時，引動過程清單中的委派會以同步方式呼叫它們出現的順序。</span><span class="sxs-lookup"><span data-stu-id="90628-108">When a multicast delegate is invoked, the delegates in the invocation list are called synchronously in the order in which they appear.</span></span> <span data-ttu-id="90628-109">如果在清單的執行期間發生錯誤則會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="90628-109">If an error occurs during execution of the list then an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90628-110">下列範例會定義一個類別， `StringContainer`，其中包括字串的集合。</span><span class="sxs-lookup"><span data-stu-id="90628-110">The following example defines a class, `StringContainer`, which includes a collection of strings.</span></span> <span data-ttu-id="90628-111">其中一個成員是`CheckAndDisplayDelegate`委派，用來顯示字串儲存在`StringContainer`符合特定準則的物件。</span><span class="sxs-lookup"><span data-stu-id="90628-111">One of its members is the `CheckAndDisplayDelegate` delegate, which is used to display strings stored in a `StringContainer` object that satisfy particular criteria.</span></span> <span data-ttu-id="90628-112">委派會採用單一字串做為參數，並傳回`void`(或在 Visual Basic 中是`Sub`程序)。</span><span class="sxs-lookup"><span data-stu-id="90628-112">The delegate takes a single string as a parameter and returns `void` (or, in Visual Basic, it's a `Sub` procedure).</span></span> <span data-ttu-id="90628-113">它也包含一種方法， `DisplayAllQualified`，具有單一參數，`CheckAndDisplayDelegate`委派。</span><span class="sxs-lookup"><span data-stu-id="90628-113">It also includes a method, `DisplayAllQualified`, that has a single parameter, a `CheckAndDisplayDelegate` delegate.</span></span> <span data-ttu-id="90628-114">這可讓被呼叫的方法和顯示的一組篩選字串包含委派的方法。</span><span class="sxs-lookup"><span data-stu-id="90628-114">This allows the method to be called and to display a set of strings that are filtered based on the methods that the delegate contains.</span></span>  
  
 <span data-ttu-id="90628-115">此範例也會定義的公用程式類別， `StringExtensions`，，有兩種方法：</span><span class="sxs-lookup"><span data-stu-id="90628-115">The example also defines a utility class, `StringExtensions`, that has two methods:</span></span>  
  
-   <span data-ttu-id="90628-116">`ConStart`其中顯示開頭子音的字串。</span><span class="sxs-lookup"><span data-stu-id="90628-116">`ConStart`, which displays strings that begin with a consonant.</span></span>  
  
-   <span data-ttu-id="90628-117">`VowelStart`其中顯示母音以開頭的字串。</span><span class="sxs-lookup"><span data-stu-id="90628-117">`VowelStart`, which displays strings that begin with a vowel.</span></span>  
  
 <span data-ttu-id="90628-118">請注意，這兩種方法包含單一字串參數，以及傳回`void`。</span><span class="sxs-lookup"><span data-stu-id="90628-118">Note that both methods include a single string parameter and return `void`.</span></span> <span data-ttu-id="90628-119">換句話說，這兩種方法可以指派給`CheckAndDisplayDelegate`委派。</span><span class="sxs-lookup"><span data-stu-id="90628-119">In other words, both methods can be assigned to the  `CheckAndDisplayDelegate` delegate.</span></span>  
  
 <span data-ttu-id="90628-120">`Test.Main`方法是應用程式進入點。</span><span class="sxs-lookup"><span data-stu-id="90628-120">The `Test.Main` method is the application entry point.</span></span> <span data-ttu-id="90628-121">它會具現化`StringContainer`物件、 填入字串，並建立兩個`CheckAndDisplayDelegate`委派`conStart`和`vowelStart`，所叫用單一方法。</span><span class="sxs-lookup"><span data-stu-id="90628-121">It instantiates a `StringContainer` object, populates it with strings, and creates two `CheckAndDisplayDelegate` delegates, `conStart` and `vowelStart`, that invoke a single method.</span></span> <span data-ttu-id="90628-122">然後它會呼叫<xref:System.Delegate.Combine%2A?displayProperty=nameWithType>方法來建立`multipleDelegates`委派，其中一開始包含`ConStart`和`VowelStart`委派。</span><span class="sxs-lookup"><span data-stu-id="90628-122">It then calls the <xref:System.Delegate.Combine%2A?displayProperty=nameWithType> method to create the `multipleDelegates` delegate, which initially contains the `ConStart` and  `VowelStart` delegates.</span></span> <span data-ttu-id="90628-123">請注意，當`multipleDelegates`叫用委派時，它會將所有字串都顯示在原始順序的集合中。</span><span class="sxs-lookup"><span data-stu-id="90628-123">Note that when the `multipleDelegates` delegate is invoked, it displays all the strings in the collection in their original order.</span></span> <span data-ttu-id="90628-124">這是因為每個字母會分別傳遞至每個委派，而且每個字母符合篩選條件的兩個委派的其中之一。</span><span class="sxs-lookup"><span data-stu-id="90628-124">This is because each letter is passed separately to each delegate, and each letter meets the filtering criteria of only one of the two delegates.</span></span> <span data-ttu-id="90628-125">最後，在呼叫之後<xref:System.Delegate.Remove%2A?displayProperty=nameWithType>和<xref:System.Delegate.Combine%2A?displayProperty=nameWithType>，`multipleDelegates`包含兩個`conStart`委派。</span><span class="sxs-lookup"><span data-stu-id="90628-125">Finally, after calls to <xref:System.Delegate.Remove%2A?displayProperty=nameWithType> and <xref:System.Delegate.Combine%2A?displayProperty=nameWithType>, `multipleDelegates` contains two `conStart` delegates.</span></span> <span data-ttu-id="90628-126">它叫用時，每一個字串中的`StringContainer`物件會顯示兩次。</span><span class="sxs-lookup"><span data-stu-id="90628-126">When it is invoked, each string in the `StringContainer` object is displayed twice.</span></span>  
  
 [!code-cpp[Multicast Delegate Introduction#1](~/samples/snippets/cpp/VS_Snippets_CLR/Multicast Delegate Introduction/CPP/delegatestring.cpp#1)]
 [!code-csharp[Multicast Delegate Introduction#1](~/samples/snippets/csharp/VS_Snippets_CLR/Multicast Delegate Introduction/CS/delegatestring.cs#1)]
 [!code-vb[Multicast Delegate Introduction#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Multicast Delegate Introduction/VB/delegatestring.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="90628-127">初始化 <see cref="T:System.MulticastDelegate" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90628-127">Initializes a new instance of the <see cref="T:System.MulticastDelegate" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MulticastDelegate (object target, string method);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(object target, string method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MulticastDelegate.#ctor(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (target As Object, method As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; MulticastDelegate(System::Object ^ target, System::String ^ method);" />
      <MemberSignature Language="F#" Value="new MulticastDelegate : obj * string -&gt; MulticastDelegate" Usage="new System.MulticastDelegate (target, method)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="method" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="90628-128">物件，在此定義「方法」<c></c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90628-128">The object on which <c>method</c> is defined.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="90628-129">建立委派的方法名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90628-129">The name of the method for which a delegate is created.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90628-130">初始化 <see cref="T:System.MulticastDelegate" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90628-130">Initializes a new instance of the <see cref="T:System.MulticastDelegate" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90628-131">這個建構函式不能在應用程式程式碼。</span><span class="sxs-lookup"><span data-stu-id="90628-131">This constructor cannot be used in application code.</span></span> <span data-ttu-id="90628-132">若要建立委派，藉由指定的執行個體方法名稱，使用的多載<xref:System.Delegate.CreateDelegate%2A?displayProperty=nameWithType>指定方法名稱和目標物件的方法。</span><span class="sxs-lookup"><span data-stu-id="90628-132">To create a delegate by specifying the name of an instance method, use an overload of the <xref:System.Delegate.CreateDelegate%2A?displayProperty=nameWithType> method that specifies a method name and a target object.</span></span> <span data-ttu-id="90628-133">例如，<xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%29?displayProperty=nameWithType>方法多載會建立具有指定名稱的執行個體方法的委派。</span><span class="sxs-lookup"><span data-stu-id="90628-133">For example, the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%29?displayProperty=nameWithType> method overload creates a delegate for an instance method with a specified name.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="90628-134">無法建立抽象類別的執行個體，或者這個成員曾被晚期繫結機制叫用過。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90628-134">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="90628-135">叫用時晚期繫結透過機制例如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90628-135">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="90628-136">關聯的列舉型別：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90628-136">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MulticastDelegate (Type target, string method);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Type target, string method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MulticastDelegate.#ctor(System.Type,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (target As Type, method As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; MulticastDelegate(Type ^ target, System::String ^ method);" />
      <MemberSignature Language="F#" Value="new MulticastDelegate : Type * string -&gt; MulticastDelegate" Usage="new System.MulticastDelegate (target, method)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="target" Type="System.Type" />
        <Parameter Name="method" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="90628-137">物件類型，在此定義「方法」<c></c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90628-137">The type of object on which <c>method</c> is defined.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="90628-138">建立委派的靜態 (Static) 方法名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90628-138">The name of the static method for which a delegate is created.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90628-139">初始化 <see cref="T:System.MulticastDelegate" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90628-139">Initializes a new instance of the <see cref="T:System.MulticastDelegate" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90628-140">這個建構函式不能在應用程式程式碼。</span><span class="sxs-lookup"><span data-stu-id="90628-140">This constructor cannot be used in application code.</span></span> <span data-ttu-id="90628-141">若要建立委派，藉由指定的靜態方法名稱，使用的多載<xref:System.Delegate.CreateDelegate%2A?displayProperty=nameWithType>指定方法名稱，但未指定目標物件的方法。</span><span class="sxs-lookup"><span data-stu-id="90628-141">To create a delegate by specifying the name of a static method, use an overload of the <xref:System.Delegate.CreateDelegate%2A?displayProperty=nameWithType> method that specifies a method name but does not specify a target object.</span></span> <span data-ttu-id="90628-142">例如，<xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%29?displayProperty=nameWithType>方法多載會建立具有指定名稱的靜態方法的委派。</span><span class="sxs-lookup"><span data-stu-id="90628-142">For example, the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%29?displayProperty=nameWithType> method overload creates a static delegate for a method with a specified name.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="90628-143">無法建立抽象類別的執行個體，或者這個成員曾被晚期繫結機制叫用過。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90628-143">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="90628-144">叫用時晚期繫結透過機制例如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90628-144">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="90628-145">相關聯的列舉型別： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="90628-145">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="CombineImpl">
      <MemberSignature Language="C#" Value="protected override sealed Delegate CombineImpl (Delegate follow);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Delegate CombineImpl(class System.Delegate follow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MulticastDelegate.CombineImpl(System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides NotOverridable Function CombineImpl (follow As Delegate) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override Delegate ^ CombineImpl(Delegate ^ follow);" />
      <MemberSignature Language="F#" Value="override this.CombineImpl : Delegate -&gt; Delegate" Usage="multicastDelegate.CombineImpl follow" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="follow" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="follow">
          <span data-ttu-id="90628-146">要和這個委派結合的委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90628-146">The delegate to combine with this delegate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90628-147">結合這個 <see cref="T:System.Delegate" /> 和指定的 <see cref="T:System.Delegate" />，形成新的委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90628-147">Combines this <see cref="T:System.Delegate" /> with the specified <see cref="T:System.Delegate" /> to form a new delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90628-148">委派，為 <see cref="T:System.MulticastDelegate" /> 引動過程清單的新根目錄。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90628-148">A delegate that is the new root of the <see cref="T:System.MulticastDelegate" /> invocation list.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="90628-149">
            <paramref name="follow" /> 與這個執行個體的型別不同。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90628-149">
              <paramref name="follow" /> does not have the same type as this instance.</span>
          </span>
        </exception>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="90628-150">無法建立抽象類別的執行個體，或者這個成員曾被晚期繫結機制叫用過。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90628-150">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="90628-151">叫用時晚期繫結透過機制例如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90628-151">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="90628-152">相關聯的列舉型別： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="90628-152">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="DynamicInvokeImpl">
      <MemberSignature Language="C#" Value="protected override sealed object DynamicInvokeImpl (object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance object DynamicInvokeImpl(object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MulticastDelegate.DynamicInvokeImpl(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides NotOverridable Function DynamicInvokeImpl (args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Object ^ DynamicInvokeImpl(cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="override this.DynamicInvokeImpl : obj[] -&gt; obj" Usage="multicastDelegate.DynamicInvokeImpl args" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="args">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override sealed bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MulticastDelegate.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="multicastDelegate.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="90628-153">與這個執行個體相互比較的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90628-153">The object to compare with this instance.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90628-154">判斷這個多點傳送委派和指定的物件是否相等。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90628-154">Determines whether this multicast delegate and the specified object are equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90628-155">如果 <paramref name="obj" /> 和這個執行個體 (Instance) 具有相同的引動過程清單，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90628-155">
              <see langword="true" /> if <paramref name="obj" /> and this instance have the same invocation lists; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90628-156">兩個委派是否不相等`null`且完全相同的類型，其引動過程清單包含相同數目的項目，而且第一個委派的引動過程清單中的每個項目就等於引動過程中對應的項目第二個委派清單。</span><span class="sxs-lookup"><span data-stu-id="90628-156">Two delegates are equal if they are not `null` and are of exactly the same type, their invocation lists contain the same number of elements, and every element in the invocation list of the first delegate is equal to the corresponding element in the invocation list of the second delegate.</span></span>  
  
 <span data-ttu-id="90628-157">如果所叫用相同的執行個體方法，在相同的目標執行個體，或叫用相同的靜態方法，兩個引動過程清單項目相等。</span><span class="sxs-lookup"><span data-stu-id="90628-157">Two invocation list elements are equal if they invoke the same instance method on the same target instance, or they invoke the same static method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="90628-158">無法建立抽象類別的執行個體，或者這個成員曾被晚期繫結機制叫用過。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90628-158">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="90628-159">叫用時晚期繫結透過機制例如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90628-159">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="90628-160">相關聯的列舉型別： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="90628-160">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override sealed int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MulticastDelegate.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="multicastDelegate.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="90628-161">傳回這個執行個體的雜湊碼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90628-161">Returns the hash code for this instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90628-162">32 位元帶正負號的整數雜湊碼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90628-162">A 32-bit signed integer hash code.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="90628-163">無法建立抽象類別的執行個體，或者這個成員曾被晚期繫結機制叫用過。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90628-163">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="90628-164">叫用時晚期繫結透過機制例如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90628-164">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="90628-165">相關聯的列舉型別： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="90628-165">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="GetInvocationList">
      <MemberSignature Language="C#" Value="public override sealed Delegate[] GetInvocationList ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Delegate[] GetInvocationList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MulticastDelegate.GetInvocationList" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function GetInvocationList () As Delegate()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;Delegate ^&gt; ^ GetInvocationList();" />
      <MemberSignature Language="F#" Value="override this.GetInvocationList : unit -&gt; Delegate[]" Usage="multicastDelegate.GetInvocationList " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="90628-166">依照引動過程的順序，傳回這個多點傳送委派的引動過程清單。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90628-166">Returns the invocation list of this multicast delegate, in invocation order.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90628-167">委派陣列，其引動過程清單完全符合這個執行個體的引動過程清單。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90628-167">An array of delegates whose invocation lists collectively match the invocation list of this instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90628-168">陣列包含一系列的委派，各有一個項目引動過程清單。</span><span class="sxs-lookup"><span data-stu-id="90628-168">The array contains a set of delegates, each with an invocation list of one entry.</span></span> <span data-ttu-id="90628-169">在陣列中出現的順序，循序叫用這些委派，會產生與叫用目前執行個體相同的結果。</span><span class="sxs-lookup"><span data-stu-id="90628-169">Invoking these delegates sequentially, in the order they appear in the array, produces the same results as invoking the current instance.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="90628-170">無法建立抽象類別的執行個體，或者這個成員曾被晚期繫結機制叫用過。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90628-170">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="90628-171">叫用時晚期繫結透過機制例如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90628-171">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="90628-172">相關聯的列舉型別： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="90628-172">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="GetMethodImpl">
      <MemberSignature Language="C#" Value="protected override System.Reflection.MethodInfo GetMethodImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Reflection.MethodInfo GetMethodImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MulticastDelegate.GetMethodImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetMethodImpl () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Reflection::MethodInfo ^ GetMethodImpl();" />
      <MemberSignature Language="F#" Value="override this.GetMethodImpl : unit -&gt; System.Reflection.MethodInfo" Usage="multicastDelegate.GetMethodImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="90628-173">傳回目前 <see cref="T:System.MulticastDelegate" /> 所表示的靜態方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90628-173">Returns a static method represented by the current <see cref="T:System.MulticastDelegate" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90628-174">目前 <see cref="T:System.MulticastDelegate" /> 所表示的靜態方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90628-174">A static method represented by the current <see cref="T:System.MulticastDelegate" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90628-175">如果<xref:System.MulticastDelegate>代表多個方法，只有一個方法會傳回。</span><span class="sxs-lookup"><span data-stu-id="90628-175">If the <xref:System.MulticastDelegate> represents multiple methods, only one method is returned.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public override void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MulticastDelegate.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub GetObjectData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="override this.GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="multicastDelegate.GetObjectData (info, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">
          <span data-ttu-id="90628-176">物件，其保有序列化或還原序列化這個執行個體所需的所有資料。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90628-176">An object that holds all the data needed to serialize or deserialize this instance.</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="90628-177">(保留) 位置，序列化資料在此儲存和擷取。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90628-177">(Reserved) The location where serialized data is stored and retrieved.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90628-178">使用所有序列化這個執行個體所需的資料，填入 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90628-178">Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with all the data needed to serialize this instance.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90628-179">這個方法會儲存中的所有資訊`info`需要序列化這個執行個體。</span><span class="sxs-lookup"><span data-stu-id="90628-179">This method stores all the information in `info` necessary to serialize this instance.</span></span>  
  
 <span data-ttu-id="90628-180">`context`參數已保留，以及目前未使用此方法的執行中。</span><span class="sxs-lookup"><span data-stu-id="90628-180">The `context` parameter is reserved and is not currently used in the execution of this method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="90628-181">
            <paramref name="info" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90628-181">
              <paramref name="info" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="90628-182">無法建立抽象類別的執行個體，或者這個成員曾被晚期繫結機制叫用過。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90628-182">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</span>
          </span>
        </exception>
        <exception cref="T:System.Runtime.Serialization.SerializationException">
          <span data-ttu-id="90628-183">發生序列化錯誤。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90628-183">A serialization error occurred.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="90628-184">需要完全信任立即呼叫者。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90628-184">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="90628-185">這個成員無法供部分信任或安全性透明程式碼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90628-185">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.Runtime.Serialization.SerializationInfo" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (MulticastDelegate d1, MulticastDelegate d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.MulticastDelegate d1, class System.MulticastDelegate d2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MulticastDelegate.op_Equality(System.MulticastDelegate,System.MulticastDelegate)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (d1 As MulticastDelegate, d2 As MulticastDelegate) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(MulticastDelegate ^ d1, MulticastDelegate ^ d2);" />
      <MemberSignature Language="F#" Value="static member ( = ) : MulticastDelegate * MulticastDelegate -&gt; bool" Usage="d1 = d2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.MulticastDelegate" />
        <Parameter Name="d2" Type="System.MulticastDelegate" />
      </Parameters>
      <Docs>
        <param name="d1">
          <span data-ttu-id="90628-186">左運算元。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90628-186">The left operand.</span>
          </span>
        </param>
        <param name="d2">
          <span data-ttu-id="90628-187">右運算元。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90628-187">The right operand.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90628-188">判斷兩個 <see cref="T:System.MulticastDelegate" /> 物件是否相等。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90628-188">Determines whether two <see cref="T:System.MulticastDelegate" /> objects are equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90628-189">如果 <paramref name="d1" /> 和 <paramref name="d2" /> 具有相同的引動過程清單，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90628-189">
              <see langword="true" /> if <paramref name="d1" /> and <paramref name="d2" /> have the same invocation lists; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90628-190">兩個委派是否不相等`null`且完全相同的類型，其引動過程清單包含相同數目的項目，而且第一個委派的引動過程清單中的每個項目就等於引動過程中對應的項目第二個委派清單。</span><span class="sxs-lookup"><span data-stu-id="90628-190">Two delegates are equal if they are not `null` and are of exactly the same type, their invocation lists contain the same number of elements, and every element in the invocation list of the first delegate is equal to the corresponding element in the invocation list of the second delegate.</span></span>  
  
 <span data-ttu-id="90628-191">如果所叫用相同的執行個體方法，在相同的目標執行個體，或叫用相同的靜態方法，兩個引動過程清單項目相等。</span><span class="sxs-lookup"><span data-stu-id="90628-191">Two invocation list elements are equal if they invoke the same instance method on the same target instance, or they invoke the same static method.</span></span>  
  
 <span data-ttu-id="90628-192">這個運算子的對等方法是 <xref:System.MulticastDelegate.Equals%28System.Object%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="90628-192">The equivalent method for this operator is <xref:System.MulticastDelegate.Equals%28System.Object%29?displayProperty=nameWithType></span></span>]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="90628-193">無法建立抽象類別的執行個體，或者這個成員曾被晚期繫結機制叫用過。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90628-193">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="90628-194">叫用時晚期繫結透過機制例如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90628-194">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="90628-195">相關聯的列舉型別： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="90628-195">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (MulticastDelegate d1, MulticastDelegate d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.MulticastDelegate d1, class System.MulticastDelegate d2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MulticastDelegate.op_Inequality(System.MulticastDelegate,System.MulticastDelegate)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (d1 As MulticastDelegate, d2 As MulticastDelegate) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(MulticastDelegate ^ d1, MulticastDelegate ^ d2);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : MulticastDelegate * MulticastDelegate -&gt; bool" Usage="System.MulticastDelegate.op_Inequality (d1, d2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.MulticastDelegate" />
        <Parameter Name="d2" Type="System.MulticastDelegate" />
      </Parameters>
      <Docs>
        <param name="d1">
          <span data-ttu-id="90628-196">左運算元。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90628-196">The left operand.</span>
          </span>
        </param>
        <param name="d2">
          <span data-ttu-id="90628-197">右運算元。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90628-197">The right operand.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90628-198">判斷兩個 <see cref="T:System.MulticastDelegate" /> 物件是否不相等。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90628-198">Determines whether two <see cref="T:System.MulticastDelegate" /> objects are not equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90628-199">如果 <paramref name="d1" /> 和 <paramref name="d2" /> 不具有相同的引動過程清單，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90628-199">
              <see langword="true" /> if <paramref name="d1" /> and <paramref name="d2" /> do not have the same invocation lists; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90628-200">兩個委派是否不相等`null`且完全相同的類型，其引動過程清單包含相同數目的項目，而且第一個委派的引動過程清單中的每個項目就等於引動過程中對應的項目第二個委派清單。</span><span class="sxs-lookup"><span data-stu-id="90628-200">Two delegates are equal if they are not `null` and are of exactly the same type, their invocation lists contain the same number of elements, and every element in the invocation list of the first delegate is equal to the corresponding element in the invocation list of the second delegate.</span></span>  
  
 <span data-ttu-id="90628-201">如果所叫用相同的執行個體方法，在相同的目標執行個體，或叫用相同的靜態方法，兩個引動過程清單項目相等。</span><span class="sxs-lookup"><span data-stu-id="90628-201">Two invocation list elements are equal if they invoke the same instance method on the same target instance, or they invoke the same static method.</span></span>  
  
 <span data-ttu-id="90628-202">這個運算子的對等方法是 <xref:System.MulticastDelegate.Equals%28System.Object%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="90628-202">The equivalent method for this operator is <xref:System.MulticastDelegate.Equals%28System.Object%29?displayProperty=nameWithType></span></span>]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="90628-203">無法建立抽象類別的執行個體，或者這個成員曾被晚期繫結機制叫用過。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90628-203">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="90628-204">叫用時晚期繫結透過機制例如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90628-204">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="90628-205">相關聯的列舉型別： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="90628-205">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="RemoveImpl">
      <MemberSignature Language="C#" Value="protected override sealed Delegate RemoveImpl (Delegate value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Delegate RemoveImpl(class System.Delegate value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MulticastDelegate.RemoveImpl(System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides NotOverridable Function RemoveImpl (value As Delegate) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override Delegate ^ RemoveImpl(Delegate ^ value);" />
      <MemberSignature Language="F#" Value="override this.RemoveImpl : Delegate -&gt; Delegate" Usage="multicastDelegate.RemoveImpl value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="90628-206">要在引動過程清單中搜尋的委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90628-206">The delegate to search for in the invocation list.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90628-207">從這個 <see cref="T:System.MulticastDelegate" /> 的引動過程清單中，移除和指定委派相等的項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90628-207">Removes an element from the invocation list of this <see cref="T:System.MulticastDelegate" /> that is equal to the specified delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90628-208">如果在這個執行個體的引動過程清單中找到 <paramref name="value" />，則傳回引動過程清單中沒有 <paramref name="value" /> 的新 <see cref="T:System.Delegate" />，否則，傳回含有原始引動過程清單的這個執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90628-208">If <paramref name="value" /> is found in the invocation list for this instance, then a new <see cref="T:System.Delegate" /> without <paramref name="value" /> in its invocation list; otherwise, this instance with its original invocation list.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="90628-209">無法建立抽象類別的執行個體，或者這個成員曾被晚期繫結機制叫用過。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90628-209">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="90628-210">叫用時晚期繫結透過機制例如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90628-210">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="90628-211">相關聯的列舉型別： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="90628-211">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
  </Members>
</Type>