<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="MulticastDelegate.xml" source-language="en-US" target-language="zh-TW">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac568fe57d35963ff07229ce4e905392ba33a08e1b2.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">68fe57d35963ff07229ce4e905392ba33a08e1b2</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.MulticastDelegate">
          <source>Represents a multicast delegate; that is, a delegate that can have more than one element in its invocation list.</source>
          <target state="translated">表示多點傳送委派；也就是說，委派可以在它的引動過程清單中包含一個以上的項目。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MulticastDelegate">
          <source><ph id="ph1">&lt;xref:System.MulticastDelegate&gt;</ph> is a special class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.MulticastDelegate&gt;</ph> 是特殊的類別。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MulticastDelegate">
          <source>Compilers and other tools can derive from this class, but you cannot derive from it explicitly.</source>
          <target state="translated">編譯器和其他工具可以從這個類別衍生，但無法從它衍生明確。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MulticastDelegate">
          <source>The same is true of the <ph id="ph1">&lt;xref:System.Delegate&gt;</ph> class.</source>
          <target state="translated">也是如此的<ph id="ph1">&lt;xref:System.Delegate&gt;</ph>類別。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MulticastDelegate">
          <source>In addition to the methods that delegate types inherit from <ph id="ph1">&lt;xref:System.MulticastDelegate&gt;</ph>, the common language runtime provides two special methods: <ph id="ph2">`BeginInvoke`</ph> and <ph id="ph3">`EndInvoke`</ph>.</source>
          <target state="translated">除了委派類型的方法繼承自<ph id="ph1">&lt;xref:System.MulticastDelegate&gt;</ph>，common language runtime 提供兩種特殊的方法：<ph id="ph2">`BeginInvoke`</ph>和<ph id="ph3">`EndInvoke`</ph>。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MulticastDelegate">
          <source>For more information about these methods, see <bpt id="p1">[</bpt>Calling Synchronous Methods Asynchronously<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>.</source>
          <target state="translated">如需有關這些方法的詳細資訊，請參閱<bpt id="p1">[</bpt>呼叫同步方法以非同步方式<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MulticastDelegate">
          <source>A <ph id="ph1">&lt;xref:System.MulticastDelegate&gt;</ph> has a linked list of delegates, called an invocation list, consisting of one or more elements.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.MulticastDelegate&gt;</ph>具有委派，呼叫的引動過程清單中，一或多個項目所組成的連結的清單。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MulticastDelegate">
          <source>When a multicast delegate is invoked, the delegates in the invocation list are called synchronously in the order in which they appear.</source>
          <target state="translated">叫用多點傳送的委派時，引動過程清單中的委派會以同步方式呼叫它們出現的順序。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MulticastDelegate">
          <source>If an error occurs during execution of the list then an exception is thrown.</source>
          <target state="translated">如果在清單的執行期間發生錯誤則會擲回例外狀況。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MulticastDelegate">
          <source>The following example defines a class, <ph id="ph1">`StringContainer`</ph>, which includes a collection of strings.</source>
          <target state="translated">下列範例會定義一個類別， <ph id="ph1">`StringContainer`</ph>，其中包括字串的集合。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MulticastDelegate">
          <source>One of its members is the <ph id="ph1">`CheckAndDisplayDelegate`</ph> delegate, which is used to display strings stored in a <ph id="ph2">`StringContainer`</ph> object that satisfy particular criteria.</source>
          <target state="translated">其中一個成員是<ph id="ph1">`CheckAndDisplayDelegate`</ph>委派，用來顯示字串儲存在<ph id="ph2">`StringContainer`</ph>符合特定準則的物件。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MulticastDelegate">
          <source>The delegate takes a single string as a parameter and returns <ph id="ph1">`void`</ph> (or, in Visual Basic, it's a <ph id="ph2">`Sub`</ph> procedure).</source>
          <target state="translated">委派會採用單一字串做為參數，並傳回<ph id="ph1">`void`</ph>(或在 Visual Basic 中是<ph id="ph2">`Sub`</ph>程序)。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MulticastDelegate">
          <source>It also includes a method, <ph id="ph1">`DisplayAllQualified`</ph>, that has a single parameter, a <ph id="ph2">`CheckAndDisplayDelegate`</ph> delegate.</source>
          <target state="translated">它也包含一種方法， <ph id="ph1">`DisplayAllQualified`</ph>，具有單一參數，<ph id="ph2">`CheckAndDisplayDelegate`</ph>委派。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MulticastDelegate">
          <source>This allows the method to be called and to display a set of strings that are filtered based on the methods that the delegate contains.</source>
          <target state="translated">這可讓被呼叫的方法和顯示的一組篩選字串包含委派的方法。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MulticastDelegate">
          <source>The example also defines a utility class, <ph id="ph1">`StringExtensions`</ph>, that has two methods:</source>
          <target state="translated">此範例也會定義的公用程式類別， <ph id="ph1">`StringExtensions`</ph>，，有兩種方法：</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MulticastDelegate">
          <source><ph id="ph1">`ConStart`</ph>, which displays strings that begin with a consonant.</source>
          <target state="translated"><ph id="ph1">`ConStart`</ph>其中顯示開頭子音的字串。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MulticastDelegate">
          <source><ph id="ph1">`VowelStart`</ph>, which displays strings that begin with a vowel.</source>
          <target state="translated"><ph id="ph1">`VowelStart`</ph>其中顯示母音以開頭的字串。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MulticastDelegate">
          <source>Note that both methods include a single string parameter and return <ph id="ph1">`void`</ph>.</source>
          <target state="translated">請注意，這兩種方法包含單一字串參數，以及傳回<ph id="ph1">`void`</ph>。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MulticastDelegate">
          <source>In other words, both methods can be assigned to the  <ph id="ph1">`CheckAndDisplayDelegate`</ph> delegate.</source>
          <target state="translated">換句話說，這兩種方法可以指派給<ph id="ph1">`CheckAndDisplayDelegate`</ph>委派。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MulticastDelegate">
          <source>The <ph id="ph1">`Test.Main`</ph> method is the application entry point.</source>
          <target state="translated"><ph id="ph1">`Test.Main`</ph>方法是應用程式進入點。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MulticastDelegate">
          <source>It instantiates a <ph id="ph1">`StringContainer`</ph> object, populates it with strings, and creates two <ph id="ph2">`CheckAndDisplayDelegate`</ph> delegates, <ph id="ph3">`conStart`</ph> and <ph id="ph4">`vowelStart`</ph>, that invoke a single method.</source>
          <target state="translated">它會具現化<ph id="ph1">`StringContainer`</ph>物件、 填入字串，並建立兩個<ph id="ph2">`CheckAndDisplayDelegate`</ph>委派<ph id="ph3">`conStart`</ph>和<ph id="ph4">`vowelStart`</ph>，所叫用單一方法。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MulticastDelegate">
          <source>It then calls the <ph id="ph1">&lt;xref:System.Delegate.Combine%2A?displayProperty=nameWithType&gt;</ph> method to create the <ph id="ph2">`multipleDelegates`</ph> delegate, which initially contains the <ph id="ph3">`ConStart`</ph> and  <ph id="ph4">`VowelStart`</ph> delegates.</source>
          <target state="translated">然後它會呼叫<ph id="ph1">&lt;xref:System.Delegate.Combine%2A?displayProperty=nameWithType&gt;</ph>方法來建立<ph id="ph2">`multipleDelegates`</ph>委派，其中一開始包含<ph id="ph3">`ConStart`</ph>和<ph id="ph4">`VowelStart`</ph>委派。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MulticastDelegate">
          <source>Note that when the <ph id="ph1">`multipleDelegates`</ph> delegate is invoked, it displays all the strings in the collection in their original order.</source>
          <target state="translated">請注意，當<ph id="ph1">`multipleDelegates`</ph>叫用委派時，它會將所有字串都顯示在原始順序的集合中。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MulticastDelegate">
          <source>This is because each letter is passed separately to each delegate, and each letter meets the filtering criteria of only one of the two delegates.</source>
          <target state="translated">這是因為每個字母會分別傳遞至每個委派，而且每個字母符合篩選條件的兩個委派的其中之一。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MulticastDelegate">
          <source>Finally, after calls to <ph id="ph1">&lt;xref:System.Delegate.Remove%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Delegate.Combine%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph3">`multipleDelegates`</ph> contains two <ph id="ph4">`conStart`</ph> delegates.</source>
          <target state="translated">最後，在呼叫之後<ph id="ph1">&lt;xref:System.Delegate.Remove%2A?displayProperty=nameWithType&gt;</ph>和<ph id="ph2">&lt;xref:System.Delegate.Combine%2A?displayProperty=nameWithType&gt;</ph>，<ph id="ph3">`multipleDelegates`</ph>包含兩個<ph id="ph4">`conStart`</ph>委派。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MulticastDelegate">
          <source>When it is invoked, each string in the <ph id="ph1">`StringContainer`</ph> object is displayed twice.</source>
          <target state="translated">它叫用時，每一個字串中的<ph id="ph1">`StringContainer`</ph>物件會顯示兩次。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="T:System.MulticastDelegate">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.MulticastDelegate" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.MulticastDelegate" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.#ctor(System.Object,System.String)">
          <source>The object on which <bpt id="p1">&lt;c&gt;</bpt>method<ept id="p1">&lt;/c&gt;</ept> is defined.</source>
          <target state="translated">物件，在此定義「方法」<bpt id="p1">&lt;c&gt;</bpt><ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.#ctor(System.Object,System.String)">
          <source>The name of the method for which a delegate is created.</source>
          <target state="translated">建立委派的方法名稱。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.#ctor(System.Object,System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.MulticastDelegate" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.MulticastDelegate" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.#ctor(System.Object,System.String)">
          <source>This constructor cannot be used in application code.</source>
          <target state="translated">這個建構函式不能在應用程式程式碼。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.#ctor(System.Object,System.String)">
          <source>To create a delegate by specifying the name of an instance method, use an overload of the <ph id="ph1">&lt;xref:System.Delegate.CreateDelegate%2A?displayProperty=nameWithType&gt;</ph> method that specifies a method name and a target object.</source>
          <target state="translated">若要建立委派，藉由指定的執行個體方法名稱，使用的多載<ph id="ph1">&lt;xref:System.Delegate.CreateDelegate%2A?displayProperty=nameWithType&gt;</ph>指定方法名稱和目標物件的方法。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.#ctor(System.Object,System.String)">
          <source>For example, the <ph id="ph1">&lt;xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%29?displayProperty=nameWithType&gt;</ph> method overload creates a delegate for an instance method with a specified name.</source>
          <target state="translated">例如，<ph id="ph1">&lt;xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%29?displayProperty=nameWithType&gt;</ph>方法多載會建立具有指定名稱的執行個體方法的委派。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.#ctor(System.Object,System.String)">
          <source>Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</source>
          <target state="translated">無法建立抽象類別的執行個體，或者這個成員曾被晚期繫結機制叫用過。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.#ctor(System.Object,System.String)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">叫用時晚期繫結透過機制例如<ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.#ctor(System.Object,System.String)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">關聯的列舉型別：<ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.#ctor(System.Type,System.String)">
          <source>The type of object on which <bpt id="p1">&lt;c&gt;</bpt>method<ept id="p1">&lt;/c&gt;</ept> is defined.</source>
          <target state="translated">物件類型，在此定義「方法」<bpt id="p1">&lt;c&gt;</bpt><ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.#ctor(System.Type,System.String)">
          <source>The name of the static method for which a delegate is created.</source>
          <target state="translated">建立委派的靜態 (Static) 方法名稱。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.#ctor(System.Type,System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.MulticastDelegate" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.MulticastDelegate" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.#ctor(System.Type,System.String)">
          <source>This constructor cannot be used in application code.</source>
          <target state="translated">這個建構函式不能在應用程式程式碼。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.#ctor(System.Type,System.String)">
          <source>To create a delegate by specifying the name of a static method, use an overload of the <ph id="ph1">&lt;xref:System.Delegate.CreateDelegate%2A?displayProperty=nameWithType&gt;</ph> method that specifies a method name but does not specify a target object.</source>
          <target state="translated">若要建立委派，藉由指定的靜態方法名稱，使用的多載<ph id="ph1">&lt;xref:System.Delegate.CreateDelegate%2A?displayProperty=nameWithType&gt;</ph>指定方法名稱，但未指定目標物件的方法。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.#ctor(System.Type,System.String)">
          <source>For example, the <ph id="ph1">&lt;xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%29?displayProperty=nameWithType&gt;</ph> method overload creates a static delegate for a method with a specified name.</source>
          <target state="translated">例如，<ph id="ph1">&lt;xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%29?displayProperty=nameWithType&gt;</ph>方法多載會建立具有指定名稱的靜態方法的委派。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.#ctor(System.Type,System.String)">
          <source>Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</source>
          <target state="translated">無法建立抽象類別的執行個體，或者這個成員曾被晚期繫結機制叫用過。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.#ctor(System.Type,System.String)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">叫用時晚期繫結透過機制例如<ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.#ctor(System.Type,System.String)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></source>
          <target state="translated">相關聯的列舉型別： <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.CombineImpl(System.Delegate)">
          <source>The delegate to combine with this delegate.</source>
          <target state="translated">要和這個委派結合的委派。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.CombineImpl(System.Delegate)">
          <source>Combines this <ph id="ph1">&lt;see cref="T:System.Delegate" /&gt;</ph> with the specified <ph id="ph2">&lt;see cref="T:System.Delegate" /&gt;</ph> to form a new delegate.</source>
          <target state="translated">結合這個 <ph id="ph1">&lt;see cref="T:System.Delegate" /&gt;</ph> 和指定的 <ph id="ph2">&lt;see cref="T:System.Delegate" /&gt;</ph>，形成新的委派。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.CombineImpl(System.Delegate)">
          <source>A delegate that is the new root of the <ph id="ph1">&lt;see cref="T:System.MulticastDelegate" /&gt;</ph> invocation list.</source>
          <target state="translated">委派，為 <ph id="ph1">&lt;see cref="T:System.MulticastDelegate" /&gt;</ph> 引動過程清單的新根目錄。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.CombineImpl(System.Delegate)">
          <source><ph id="ph1">&lt;paramref name="follow" /&gt;</ph> does not have the same type as this instance.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="follow" /&gt;</ph> 與這個執行個體的型別不同。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.CombineImpl(System.Delegate)">
          <source>Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</source>
          <target state="translated">無法建立抽象類別的執行個體，或者這個成員曾被晚期繫結機制叫用過。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.CombineImpl(System.Delegate)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">叫用時晚期繫結透過機制例如<ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.CombineImpl(System.Delegate)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></source>
          <target state="translated">相關聯的列舉型別： <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.Equals(System.Object)">
          <source>The object to compare with this instance.</source>
          <target state="translated">與這個執行個體相互比較的物件。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.Equals(System.Object)">
          <source>Determines whether this multicast delegate and the specified object are equal.</source>
          <target state="translated">判斷這個多點傳送委派和指定的物件是否相等。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> and this instance have the same invocation lists; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> 和這個執行個體 (Instance) 具有相同的引動過程清單，則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.Equals(System.Object)">
          <source>Two delegates are equal if they are not <ph id="ph1">`null`</ph> and are of exactly the same type, their invocation lists contain the same number of elements, and every element in the invocation list of the first delegate is equal to the corresponding element in the invocation list of the second delegate.</source>
          <target state="translated">兩個委派是否不相等<ph id="ph1">`null`</ph>且完全相同的類型，其引動過程清單包含相同數目的項目，而且第一個委派的引動過程清單中的每個項目就等於引動過程中對應的項目第二個委派清單。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.Equals(System.Object)">
          <source>Two invocation list elements are equal if they invoke the same instance method on the same target instance, or they invoke the same static method.</source>
          <target state="translated">如果所叫用相同的執行個體方法，在相同的目標執行個體，或叫用相同的靜態方法，兩個引動過程清單項目相等。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.Equals(System.Object)">
          <source>Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</source>
          <target state="translated">無法建立抽象類別的執行個體，或者這個成員曾被晚期繫結機制叫用過。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.Equals(System.Object)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">叫用時晚期繫結透過機制例如<ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.Equals(System.Object)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></source>
          <target state="translated">相關聯的列舉型別： <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.GetHashCode">
          <source>Returns the hash code for this instance.</source>
          <target state="translated">傳回這個執行個體的雜湊碼。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.GetHashCode">
          <source>A 32-bit signed integer hash code.</source>
          <target state="translated">32 位元帶正負號的整數雜湊碼。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.GetHashCode">
          <source>Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</source>
          <target state="translated">無法建立抽象類別的執行個體，或者這個成員曾被晚期繫結機制叫用過。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.GetHashCode">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">叫用時晚期繫結透過機制例如<ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.GetHashCode">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></source>
          <target state="translated">相關聯的列舉型別： <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.GetInvocationList">
          <source>Returns the invocation list of this multicast delegate, in invocation order.</source>
          <target state="translated">依照引動過程的順序，傳回這個多點傳送委派的引動過程清單。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.GetInvocationList">
          <source>An array of delegates whose invocation lists collectively match the invocation list of this instance.</source>
          <target state="translated">委派陣列，其引動過程清單完全符合這個執行個體的引動過程清單。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.GetInvocationList">
          <source>The array contains a set of delegates, each with an invocation list of one entry.</source>
          <target state="translated">陣列包含一系列的委派，各有一個項目引動過程清單。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.GetInvocationList">
          <source>Invoking these delegates sequentially, in the order they appear in the array, produces the same results as invoking the current instance.</source>
          <target state="translated">在陣列中出現的順序，循序叫用這些委派，會產生與叫用目前執行個體相同的結果。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.GetInvocationList">
          <source>Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</source>
          <target state="translated">無法建立抽象類別的執行個體，或者這個成員曾被晚期繫結機制叫用過。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.GetInvocationList">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">叫用時晚期繫結透過機制例如<ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.GetInvocationList">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></source>
          <target state="translated">相關聯的列舉型別： <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.GetMethodImpl">
          <source>Returns a static method represented by the current <ph id="ph1">&lt;see cref="T:System.MulticastDelegate" /&gt;</ph>.</source>
          <target state="translated">傳回目前 <ph id="ph1">&lt;see cref="T:System.MulticastDelegate" /&gt;</ph> 所表示的靜態方法。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.GetMethodImpl">
          <source>A static method represented by the current <ph id="ph1">&lt;see cref="T:System.MulticastDelegate" /&gt;</ph>.</source>
          <target state="translated">目前 <ph id="ph1">&lt;see cref="T:System.MulticastDelegate" /&gt;</ph> 所表示的靜態方法。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.GetMethodImpl">
          <source>If the <ph id="ph1">&lt;xref:System.MulticastDelegate&gt;</ph> represents multiple methods, only one method is returned.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.MulticastDelegate&gt;</ph>代表多個方法，只有一個方法會傳回。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>An object that holds all the data needed to serialize or deserialize this instance.</source>
          <target state="translated">物件，其保有序列化或還原序列化這個執行個體所需的所有資料。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>(Reserved) The location where serialized data is stored and retrieved.</source>
          <target state="translated">(保留) 位置，序列化資料在此儲存和擷取。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Populates a <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> object with all the data needed to serialize this instance.</source>
          <target state="translated">使用所有序列化這個執行個體所需的資料，填入 <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> 物件。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>This method stores all the information in <ph id="ph1">`info`</ph> necessary to serialize this instance.</source>
          <target state="translated">這個方法會儲存中的所有資訊<ph id="ph1">`info`</ph>需要序列化這個執行個體。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The <ph id="ph1">`context`</ph> parameter is reserved and is not currently used in the execution of this method.</source>
          <target state="translated"><ph id="ph1">`context`</ph>參數已保留，以及目前未使用此方法的執行中。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source><ph id="ph1">&lt;paramref name="info" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="info" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</source>
          <target state="translated">無法建立抽象類別的執行個體，或者這個成員曾被晚期繫結機制叫用過。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>A serialization error occurred.</source>
          <target state="translated">發生序列化錯誤。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">需要完全信任立即呼叫者。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">這個成員無法供部分信任或安全性透明程式碼。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.op_Equality(System.MulticastDelegate,System.MulticastDelegate)">
          <source>The left operand.</source>
          <target state="translated">左運算元。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.op_Equality(System.MulticastDelegate,System.MulticastDelegate)">
          <source>The right operand.</source>
          <target state="translated">右運算元。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.op_Equality(System.MulticastDelegate,System.MulticastDelegate)">
          <source>Determines whether two <ph id="ph1">&lt;see cref="T:System.MulticastDelegate" /&gt;</ph> objects are equal.</source>
          <target state="translated">判斷兩個 <ph id="ph1">&lt;see cref="T:System.MulticastDelegate" /&gt;</ph> 物件是否相等。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.op_Equality(System.MulticastDelegate,System.MulticastDelegate)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="d1" /&gt;</ph> and <ph id="ph3">&lt;paramref name="d2" /&gt;</ph> have the same invocation lists; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph2">&lt;paramref name="d1" /&gt;</ph> 和 <ph id="ph3">&lt;paramref name="d2" /&gt;</ph> 具有相同的引動過程清單，則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.op_Equality(System.MulticastDelegate,System.MulticastDelegate)">
          <source>Two delegates are equal if they are not <ph id="ph1">`null`</ph> and are of exactly the same type, their invocation lists contain the same number of elements, and every element in the invocation list of the first delegate is equal to the corresponding element in the invocation list of the second delegate.</source>
          <target state="translated">兩個委派是否不相等<ph id="ph1">`null`</ph>且完全相同的類型，其引動過程清單包含相同數目的項目，而且第一個委派的引動過程清單中的每個項目就等於引動過程中對應的項目第二個委派清單。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.op_Equality(System.MulticastDelegate,System.MulticastDelegate)">
          <source>Two invocation list elements are equal if they invoke the same instance method on the same target instance, or they invoke the same static method.</source>
          <target state="translated">如果所叫用相同的執行個體方法，在相同的目標執行個體，或叫用相同的靜態方法，兩個引動過程清單項目相等。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.op_Equality(System.MulticastDelegate,System.MulticastDelegate)">
          <source>The equivalent method for this operator is <ph id="ph1">&lt;xref:System.MulticastDelegate.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph></source>
          <target state="translated">這個運算子的對等方法是 <ph id="ph1">&lt;xref:System.MulticastDelegate.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph></target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.op_Equality(System.MulticastDelegate,System.MulticastDelegate)">
          <source>Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</source>
          <target state="translated">無法建立抽象類別的執行個體，或者這個成員曾被晚期繫結機制叫用過。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.op_Equality(System.MulticastDelegate,System.MulticastDelegate)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">叫用時晚期繫結透過機制例如<ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.op_Equality(System.MulticastDelegate,System.MulticastDelegate)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></source>
          <target state="translated">相關聯的列舉型別： <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.op_Inequality(System.MulticastDelegate,System.MulticastDelegate)">
          <source>The left operand.</source>
          <target state="translated">左運算元。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.op_Inequality(System.MulticastDelegate,System.MulticastDelegate)">
          <source>The right operand.</source>
          <target state="translated">右運算元。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.op_Inequality(System.MulticastDelegate,System.MulticastDelegate)">
          <source>Determines whether two <ph id="ph1">&lt;see cref="T:System.MulticastDelegate" /&gt;</ph> objects are not equal.</source>
          <target state="translated">判斷兩個 <ph id="ph1">&lt;see cref="T:System.MulticastDelegate" /&gt;</ph> 物件是否不相等。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.op_Inequality(System.MulticastDelegate,System.MulticastDelegate)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="d1" /&gt;</ph> and <ph id="ph3">&lt;paramref name="d2" /&gt;</ph> do not have the same invocation lists; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph2">&lt;paramref name="d1" /&gt;</ph> 和 <ph id="ph3">&lt;paramref name="d2" /&gt;</ph> 不具有相同的引動過程清單，則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.op_Inequality(System.MulticastDelegate,System.MulticastDelegate)">
          <source>Two delegates are equal if they are not <ph id="ph1">`null`</ph> and are of exactly the same type, their invocation lists contain the same number of elements, and every element in the invocation list of the first delegate is equal to the corresponding element in the invocation list of the second delegate.</source>
          <target state="translated">兩個委派是否不相等<ph id="ph1">`null`</ph>且完全相同的類型，其引動過程清單包含相同數目的項目，而且第一個委派的引動過程清單中的每個項目就等於引動過程中對應的項目第二個委派清單。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.op_Inequality(System.MulticastDelegate,System.MulticastDelegate)">
          <source>Two invocation list elements are equal if they invoke the same instance method on the same target instance, or they invoke the same static method.</source>
          <target state="translated">如果所叫用相同的執行個體方法，在相同的目標執行個體，或叫用相同的靜態方法，兩個引動過程清單項目相等。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.op_Inequality(System.MulticastDelegate,System.MulticastDelegate)">
          <source>The equivalent method for this operator is <ph id="ph1">&lt;xref:System.MulticastDelegate.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph></source>
          <target state="translated">這個運算子的對等方法是 <ph id="ph1">&lt;xref:System.MulticastDelegate.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph></target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.op_Inequality(System.MulticastDelegate,System.MulticastDelegate)">
          <source>Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</source>
          <target state="translated">無法建立抽象類別的執行個體，或者這個成員曾被晚期繫結機制叫用過。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.op_Inequality(System.MulticastDelegate,System.MulticastDelegate)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">叫用時晚期繫結透過機制例如<ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.op_Inequality(System.MulticastDelegate,System.MulticastDelegate)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></source>
          <target state="translated">相關聯的列舉型別： <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.RemoveImpl(System.Delegate)">
          <source>The delegate to search for in the invocation list.</source>
          <target state="translated">要在引動過程清單中搜尋的委派。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.RemoveImpl(System.Delegate)">
          <source>Removes an element from the invocation list of this <ph id="ph1">&lt;see cref="T:System.MulticastDelegate" /&gt;</ph> that is equal to the specified delegate.</source>
          <target state="translated">從這個 <ph id="ph1">&lt;see cref="T:System.MulticastDelegate" /&gt;</ph> 的引動過程清單中，移除和指定委派相等的項目。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.RemoveImpl(System.Delegate)">
          <source>If <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is found in the invocation list for this instance, then a new <ph id="ph2">&lt;see cref="T:System.Delegate" /&gt;</ph> without <ph id="ph3">&lt;paramref name="value" /&gt;</ph> in its invocation list; otherwise, this instance with its original invocation list.</source>
          <target state="translated">如果在這個執行個體的引動過程清單中找到 <ph id="ph1">&lt;paramref name="value" /&gt;</ph>，則傳回引動過程清單中沒有 <ph id="ph3">&lt;paramref name="value" /&gt;</ph> 的新 <ph id="ph2">&lt;see cref="T:System.Delegate" /&gt;</ph>，否則，傳回含有原始引動過程清單的這個執行個體。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.RemoveImpl(System.Delegate)">
          <source>Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</source>
          <target state="translated">無法建立抽象類別的執行個體，或者這個成員曾被晚期繫結機制叫用過。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.RemoveImpl(System.Delegate)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">叫用時晚期繫結透過機制例如<ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.RemoveImpl(System.Delegate)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></source>
          <target state="translated">相關聯的列舉型別： <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>