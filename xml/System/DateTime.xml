<Type Name="DateTime" FullName="System.DateTime">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="0e0f91e3e6e3eea5c50028b600eadc103187a955" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30731462" />
  </Metadata>
  <TypeSignature Language="C#" Value="public struct DateTime : IComparable, IComparable&lt;DateTime&gt;, IConvertible, IEquatable&lt;DateTime&gt;, IFormattable, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit DateTime extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;valuetype System.DateTime&gt;, class System.IConvertible, class System.IEquatable`1&lt;valuetype System.DateTime&gt;, class System.IFormattable, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.DateTime" />
  <TypeSignature Language="VB.NET" Value="Public Structure DateTime&#xA;Implements IComparable, IComparable(Of DateTime), IConvertible, IEquatable(Of DateTime), IFormattable, ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public value class DateTime : IComparable, IComparable&lt;DateTime&gt;, IConvertible, IEquatable&lt;DateTime&gt;, IFormattable, System::Runtime::Serialization::ISerializable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;System.DateTime&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IConvertible</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.DateTime&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>表示時間的瞬間，通常以一天的日期和時間表示。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

## <a name="quick-links-to-example-code"></a>範例程式碼的快速連結

[!INCLUDE[interactive-note](~/includes/csharp-interactive-note.md)]

本文包含數個範例使用`DateTime`類型：

**初始化範例**      
 [叫用建構函式](#initialization-01)     
 [叫用隱含的預設建構函式](#initialization-02)     
 [傳回值的指派](#initialization-03)     
 [剖析字串，表示日期和時間](#initialization-04)     
 [Visual Basic 語法，來初始化日期和時間](#initialization-05)     

**格式化`DateTime`物件做為字串**  
 [使用預設的日期時間格式](#formatting-01)     
 [格式化的日期和時間使用特定文化特性](#formatting-02)     
 [使用標準或自訂格式字串的日期時間格式](#formatting-03)     
 [指定格式字串和特定文化特性](#formatting-04)     
 [使用 ISO 8601 標準 web 服務的日期時間格式](#formatting-05)     

**剖析字串做為`DateTime`物件**  
 [使用`Parse`或`TryParse`將字串轉換成日期和時間](#parsing-01)     
 [使用`ParseExact`或`TryParseExact`中已知的格式字串轉換](#parsing-02)     
 [將 ISO 8601 字串表示轉換為日期和時間](#parsing-03)     

**`DateTime` 解決方式**  
 [瀏覽的日期和時間值的解析度](#resolution-01)     
 [在容許範圍內的相等比較](#comparison-01)     

**文化特性和行事曆**  
 [顯示使用的文化特性特定的行事曆的日期和時間值](#calendars-01)     
 [剖析字串，根據文化特性特定行事曆](#calendars-02)     
 [初始化的日期和時間的特定文化特性的曆法](#calendars-03)     
 [存取使用特定文化特性的曆法的日期和時間屬性](#calendars-04)     
 [擷取使用文化特性特定的行事曆的年度週次](#calendars-05)     

**持續性**  
 [保存的日期和時間值以本地時區的字串](#persistence-01)     
 [文化特性和時間的非變異格式字串的形式保存的日期和時間值](#persistence-02)     
 [保存的日期和時間值做為整數](#persistence-03)     
 [使用保存的日期和時間值 `XmlSerializer`](#persistence-04)     
 [使用保存的日期和時間值 `BinaryFormatter`](#persistence-05)     
 [保存的日期和時間值的時區資料](#persistence-06)     

## <a name="quick-links-to-remarks-topics"></a>快速連結至 < 備註 > 主題。

此章節包含許多常見的用法`DateTime`結構：
  
 [初始化`DateTime`物件](#initializing-a-datetime-object)   
 [日期時間值和其字串表示法](#datetime-values-and-their-string-representations)   
 [從字串剖析日期時間值](#parsing-datetime-values-from-strings)   
 [日期時間值](#datetime-values)   
 [DateTime 作業](#datetime-operations)   
 [日期時間解析](#datetime-resolution)   
 [日期時間值和行事曆](#datetime-values-and-calendars)   
 [保存的日期時間值](#persisting-datetime-values)   
 [DateTime vs。TimeSpan](#datetime-vs-timespan)   
 [是否在容許範圍內的相等比較](#comparing-for-equality-within-tolerance) [COM interop 的考量](#com-interop-considerations)  
   
<xref:System.DateTime>實值類型代表日期和時間值範圍介於 00:00:00 （午夜），年 1 月 1 日 0001 如下 （一般紀元） 到 11:59:59 P.M.年 12 月 31 到西元 9999年日 (C.E.)西曆。  
  
時間值會以稱為刻度的 100 奈秒為單位測量。 在特定日期是西元 1 日 0001年 12:00 午夜起的刻度數 (C.E.)在<xref:System.Globalization.GregorianCalendar>行事曆。 數字會排除會加入閏秒的刻度。 例如，31241376000000000l 刻度值代表日期 0100 年 1 月 01，星期五午夜 12:00:00。 A<xref:System.DateTime>值一律表示在內容明確或預設的行事曆。  
  
> [!NOTE]
>  如果您正在使用刻度值，您要轉換成某些其他時間間隔，例如分鐘或秒鐘，您應該使用<xref:System.TimeSpan.TicksPerDay?displayProperty=nameWithType>， <xref:System.TimeSpan.TicksPerHour?displayProperty=nameWithType>， <xref:System.TimeSpan.TicksPerMinute?displayProperty=nameWithType>， <xref:System.TimeSpan.TicksPerSecond?displayProperty=nameWithType>，或<xref:System.TimeSpan.TicksPerMillisecond?displayProperty=nameWithType>常數，以執行轉換。 例如，若要加入的秒數表示所指定的刻度數<xref:System.DateTime.Second%2A>元件<xref:System.DateTime>值，您可以使用運算式`dateValue.Second + nTicks/Timespan.TicksPerSecond`。  

您可以檢視完整的範例，在此文件的來源在[Visual Basic](https://github.com/dotnet/samples/tree/master/snippets/visualbasic/System.DateTime/)或[C#](https://github.com/dotnet/samples/tree/master/snippets/csharp/System.DateTime/)從 GitHub 上的文件儲存機制。

> [!NOTE]
>  替代<xref:System.DateTime>結構處理日期和時間值特別時區是<xref:System.DateTimeOffset>結構。 <xref:System.DateTimeOffset>結構會將日期和時間資訊儲存在私用<xref:System.DateTime>欄位，依據該日期和時間的分鐘數與 UTC 差異大小的私用<xref:System.Int16>欄位。 這可讓<xref:System.DateTimeOffset>值，以反映為特定時區的時間，而<xref:System.DateTime>只 UTC 和本機時區的時間，可以明確地反映值。 如需有關使用時機的討論<xref:System.DateTime>結構或<xref:System.DateTimeOffset>結構處理日期和時間值時，請參閱[選擇之間 DateTime、 DateTimeOffset、 TimeSpan 和 TimeZoneInfo](~/docs/standard/datetime/choosing-between-datetime.md)。  
  
### <a name="initializing-a-datetime-object"></a>初始化為 DateTime 物件  

您可以將初始值指派給新`DateTime`許多不同的方式中的值：

- 呼叫建構函式，讓您指定引數的值，其中一個，或使用隱含的預設建構函式。
- 指派`DateTime`屬性或方法的傳回值。
- 剖析`DateTime`從物件的字串表示的值。
- 使用 Visual Basic 特定的語言功能來具現化`DateTime`。 

下列程式碼片段會顯示每個範例：

#### <a name="invoke-constructors"></a>叫用建構函式

您呼叫任何的多載<xref:System.DateTime>建構函式會指定日期和時間值 （例如年、 月和日或刻度數目） 的項目。 下列程式碼會建立特定的日期使用<xref:System.DateTime>指定年、 月、 日、 小時、 分鐘和第二個建構函式。  

<a name="initialization-01"></a> [!code-vb[System.DateTime.Instantiation#1](~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb#1)]  
[!code-csharp-interactive[System.DateTime.Instantiation#1](~/samples/snippets/csharp/System.DateTime/Instantiation.cs#1)]

您可以叫用`DateTime`結構的隱含預設建構函式時要`DateTime`初始化為其預設值。 (如實值類型的隱含的預設建構函式的詳細資訊，請參閱[實值型別](~/docs/csharp/language-reference/keywords/value-types.md)。)某些編譯器也支援宣告<xref:System.DateTime>之前明確指派值給它的值。 建立不使用明確的初始設定值，也會導致預設值。 下列範例說明<xref:System.DateTime>隱含的預設建構函式，在 C# 和 Visual Basic 中，以及<xref:System.DateTime>宣告未在 Visual Basic 中的指派。  

<a name="initialization-02"></a> [!code-vb[System.DateTime.Instantiation#5](~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb#5)]  
[!code-csharp-interactive[System.DateTime.Instantiation#5](~/samples/snippets/csharp/System.DateTime/Instantiation.cs#5)]
    
#### <a name="assigning-a-computed-value"></a>指定計算的值

您可以指派<xref:System.DateTime>物件屬性或方法傳回的日期和時間值。 下列範例會指派目前的日期和時間、 目前的國際標準時間 (UTC) 日期和時間，以及目前的日期到三個新<xref:System.DateTime>變數。  

<a name="initialization-03"></a> [!code-vb[System.DateTime.Instantiation#3](~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb#3)]  
[!code-csharp[System.DateTime.Instantiation#3](~/samples/snippets/csharp/System.DateTime/Instantiation.cs#3)]

#### <a name="parsing-a-string-that-represents-a-datetime"></a>剖析字串，表示為 DateTime

<xref:System.DateTime.Parse%2A>， <xref:System.DateTime.ParseExact%2A>， <xref:System.DateTime.TryParse%2A>，和<xref:System.DateTime.TryParseExact%2A>方法全都會將字串轉換為其相等的日期和時間值。 下列範例會使用<xref:System.DateTime.Parse%2A>和<xref:System.DateTime.ParseExact%2A>方法來剖析字串，並將它轉換成<xref:System.DateTime>值。 第二種格式會使用支援的形式[ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html)標準表示的日期和時間格式字串。 此標準的表示法通常用來傳送 web 服務中的日期資訊。

<a name="initialization-04"></a> [!code-vb[System.DateTime.Instantiation#4](~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb#4)]  
[!code-csharp[System.DateTime.Instantiation#4](~/samples/snippets/csharp/System.DateTime/Instantiation.cs#4)]

<xref:System.DateTime.TryParse%2A>和<xref:System.DateTime.TryParseExact%2A>方法指出字串是否有效表示法<xref:System.DateTime>值，而且如果是，會執行轉換。  

#### <a name="language-specific-syntax-for-visual-basic"></a>Visual basic 中的特定語言的語法

下列 Visual Basic 陳述式初始化新<xref:System.DateTime>值。  

<a name="initialization-05"></a> [!code-vb[System.DateTime.Instantiation#2](~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb#2)]  

### <a name="datetime-values-and-their-string-representations"></a>日期時間值和其字串表示法  

就內部而言，所有<xref:System.DateTime>值會表示為 0001 年 1 月 1 日的 12:00:00 午夜以來已經過的刻度 （100 奈秒間隔數） 數目。 實際<xref:System.DateTime>值無關的方式顯示時，出現的值。 外觀<xref:System.DateTime>值是將值轉換為其字串表示的格式設定作業的結果。  
  
日期和時間值的外觀會相依於文化特性、 國際標準、 應用程式需求和個人的喜好設定。 <xref:System.DateTime>結構，可提供彈性格式化日期和時間值的多載透過<xref:System.DateTime.ToString%2A>。 預設值<xref:System.DateTime.ToString?displayProperty=nameWithType>方法會傳回使用目前文化特性的簡短日期和完整時間模式的日期和時間值的字串表示。 下列範例會使用預設<xref:System.DateTime.ToString?displayProperty=nameWithType>方法。 它會顯示的日期和時間使用目前的文化特性的簡短日期和完整時間模式。 EN-US 文化特性是在此範例執行所在電腦上目前的文化特性。  
  
<a name="formatting-01"></a> [!code-csharp-interactive[System.DateTime.Formatting#1](~/samples/snippets/csharp/System.DateTime/StringFormat.cs#1)]
[!code-vb[System.DateTime.Formatting#1](~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb#1)]  

您可能需要格式化特定文化特性中支援，伺服器可能在不同的文化特性，從用戶端的 web 案例的日期。 您指定的文化特性使用<xref:System.DateTime.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>方法，建立特定的文化特性的簡短日期和完整時間表示。 下列範例會使用<xref:System.DateTime.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>方法來顯示日期和時間使用 FR-FR 文化特性的簡短日期和完整時間模式。  
  
<a name="formatting-02"></a> [!code-csharp-interactive[System.DateTime.Formatting#2](~/samples/snippets/csharp/System.DateTime/StringFormat.cs#2)]
[!code-vb[System.DateTime.Formatting#2](~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb#2)]  

 其他應用程式可能需要不同的字串表示的日期。 <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType>方法會傳回使用目前文化特性的格式化慣例的標準或自訂格式規範所定義的字串表示。 下列範例會使用<xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType>方法，以顯示完整日期和時間模式的 EN-US 文化特性，在此範例執行所在電腦上目前的文化特性。  
  
<a name="formatting-03"></a> [!code-csharp-interactive[System.DateTime.Formatting#3](~/samples/snippets/csharp/System.DateTime/StringFormat.cs#3)]
[!code-vb[System.DateTime.Formatting#3](~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb#3)]  

 最後，您可以指定文化特性及格式使用<xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>方法。 下列範例會使用<xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>方法，以顯示完整日期和時間模式的 FR-FR 文化特性。  

<a name="formatting-04"></a> [!code-csharp-interactive[System.DateTime.Formatting#4](~/samples/snippets/csharp/System.DateTime/StringFormat.cs#4)]
[!code-vb[System.DateTime.Formatting#4](~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb#4)]  

<xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType>多載也可用以自訂格式字串來指定其他格式。 下列範例示範如何格式化字串，使用[ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html)通常用於 web 服務的標準格式。 Iso 8601 格式沒有對應的標準格式字串。

<a name="formatting05"></a> [!code-csharp-interactive[System.DateTime.Formatting#5](~/samples/snippets/csharp/System.DateTime/StringFormat.cs#5)]
[!code-vb[System.DateTime.Formatting#5](~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb#5)]  

如需有關格式<xref:System.DateTime>值，請參閱[標準日期和時間格式字串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)和[自訂日期和時間格式字串](~/docs/standard/base-types/custom-date-and-time-format-strings.md)。  

### <a name="parsing-datetime-values-from-strings"></a>從字串剖析日期時間值

剖析的字串表示轉換的日期和時間<xref:System.DateTime>值。 一般而言，日期和時間字串的應用程式中都有兩個不同的使用方式：  
  
-   日期和時間會有各種形式，都會反映目前文化特性或特定文化特性的慣例。 例如，應用程式可讓其目前的文化特性是 EN-US 輸入日期值為"12/15/2013"或"2013 年 12 月 15 日 」 的使用者。 它可讓的使用者，其目前的文化特性是 en-us gb 到輸入日期值做為 「 15/12/2013 」 或 「 15 2013 年 12 月 」。  
  
-   預先定義的格式表示的日期和時間。 例如，應用程式將序列化"20130103"獨立應用程式執行所在的文化特性的日期。 應用程式可能需要在目前文化特性的簡短日期格式輸入日期。
  
您使用<xref:System.DateTime.Parse%2A>或<xref:System.DateTime.TryParse%2A>方法，將字串轉換的文化特性所使用的一般日期和時間格式的其中一個<xref:System.DateTime>值。 下列範例示範如何使用<xref:System.DateTime.TryParse%2A>轉換至不同的特定文化特性的格式的日期字串<xref:System.DateTime>值。 目前的文化特性變更為 英文 （英國） 以及呼叫<xref:System.DateTime.GetDateTimeFormats>方法來產生日期和時間字串的陣列。 接著，將每個項目陣列中要<xref:System.DateTime.TryParse%2A>方法。 範例輸出會顯示剖析方法能夠成功地將每個特定文化特性的日期和時間字串轉換。  
  
<a name="parsing-01"></a> [!code-csharp-interactive[System.DateTime.Parsing#1](~/samples/snippets/csharp/System.DateTime/Parsing.cs#1)]
[!code-vb[System.DateTime.Parsing#1](~/samples/snippets/visualbasic/System.DateTime/Parsing.vb#1)]  

您使用<xref:System.DateTime.ParseExact%2A>和<xref:System.DateTime.TryParseExact%2A>方法，將轉換的字串必須符合特定的格式或格式，以便<xref:System.DateTime>值。 您可以指定一或多個日期和時間格式字串當做剖析方法的參數。 下列範例會使用<xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29>方法，將必須在 「 yyyyMMdd"格式或"HHmmss"格式的字串轉換<xref:System.DateTime>值。  
  
<a name="parsing-02"></a> [!code-csharp-interactive[System.DateTime.Parsing#2](~/samples/snippets/csharp/System.DateTime/Parsing.cs#2)]
[!code-vb[System.DateTime.Parsing#2](~/samples/snippets/visualbasic/System.DateTime/Parsing.vb#2)]  

常見用法之一<xref:System.DateTime.ParseExact%2A>為字串表示轉換成 web 服務，通常在[ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html)標準格式。 下列程式碼顯示使用正確的格式字串：

<a name="parsing-03"></a> [!code-csharp-interactive[System.DateTime.Parsing#3](~/samples/snippets/csharp/System.DateTime/Parsing.cs#3)]
[!code-vb[System.DateTime.Parsing#3](~/samples/snippets/visualbasic/System.DateTime/Parsing.vb#3)]  

如果無法剖析字串，<xref:System.DateTime.Parse%2A>和<xref:System.DateTime.ParseExact%2A>方法會擲回的例外狀況。 <xref:System.DateTime.TryParse%2A>和<xref:System.DateTime.TryParseExact%2A>方法會傳回<xref:System.Boolean>值，指出轉換成功或失敗。 您應該使用<xref:System.DateTime.TryParse%2A>或<xref:System.DateTime.TryParseExact%2A>效能很重要的案例中的方法。 日期和時間字串的剖析作業通常會有高失敗比率，而且例外狀況處理費用昂貴。 使用這些方法，如果字串由使用者輸入，或來自未知來源。 
  
如需剖析日期和時間值的詳細資訊，請參閱[剖析日期和時間字串](~/docs/standard/base-types/parsing-datetime.md)。  

### <a name="datetime-values"></a>日期時間值

中的時間值的描述<xref:System.DateTime>類型通常會使用標準的國際標準時間 (UTC) 來表示。 國際標準時間是國際認可的名稱格林威治標準時間 (GMT)。 國際標準時間是在 UTC 原點零度經度測量的時間。 不適用 UTC 日光節約時間。  
  
本地時間為相對於特定的時區。 時區是時區位移與相關聯。 時區位移是時區的以 UTC 原點小時為單位位移。 此外，其中加上或減去的時間間隔調整日光節約時間 （選擇性） 會影響本地時間。 本地時間的計算方式加入 UTC，如有必要，日光節約時間調整的時區位移。 UTC 原點的時區位移為零。  
  
UTC 時間為適用於計算、 比較，並儲存日期和時間的檔案。 本地時間為適當的桌面應用程式的使用者介面中顯示的資料。 時區感知應用程式 （例如許多 Web 應用程式） 也需要處理一些其他的時區。  
  
如果<xref:System.DateTime.Kind%2A>屬性<xref:System.DateTime>物件是<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>，是未指定表示的時間是否本地時間、 UTC 時間或某些其他時區的時間。  

### <a name="datetime-resolution"></a>日期時間解析
  
> [!NOTE]
>  做為執行日期和時間運算上替代<xref:System.DateTime>值測量已耗用時間，您可以使用<xref:System.Diagnostics.Stopwatch>類別。  
  
<xref:System.DateTime.Ticks%2A>屬性表示的日期和時間值的第二個一個 10-百萬分之一秒為單位。 <xref:System.DateTime.Millisecond%2A>屬性會傳回千分之一秒的日期和時間值中。 使用重複的呼叫<xref:System.DateTime.Now%2A?displayProperty=nameWithType>測量已耗用時間屬性是相依於系統時鐘。 在 Windows 7 和 Windows 8 的系統上的系統時鐘已的解析度大約 15 毫秒。 此解析度會影響短暫間隔低於 100 毫秒。 
  
下列範例說明目前日期和時間值的相依的性，根據系統時鐘的解析度。 在範例中，外部迴圈會重複 20 倍，而且內部迴圈是用來延遲外部迴圈。 如果外部迴圈計數器的值是 10，呼叫<xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType>方法會導入了 5 毫秒的延遲。 下列範例示範所傳回的毫秒數`DateTime.Now.Milliseconds`屬性變更，只有在呼叫之後<xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType>。  

<a name="resolution-01"></a> [!code-csharp-interactive[System.DateTime.Resolution#1](~/samples/snippets/csharp/System.DateTime/Resolution.cs#1)]
[!code-vb[System.DateTime.Resolution#1](~/samples/snippets/visualbasic/System.DateTime/Resolution.vb#1)]  

### <a name="datetime-operations"></a>DateTime 作業  

計算使用<xref:System.DateTime>結構，例如<xref:System.DateTime.Add%2A>或<xref:System.DateTime.Subtract%2A>，不會修改結構的值。 相反地，傳回新的計算<xref:System.DateTime>結構，其值會計算的結果。  
  
時區 （例如 UTC 與本地時間，或是一個時區，另一個之間） 之間的轉換作業會將日光節約時間列入考量，但算術和比較作業不這麼做。  
  
<xref:System.DateTime>結構本身提供有限的支援從一個時區轉換。 您可以使用<xref:System.DateTime.ToLocalTime%2A>方法來轉換 UTC 到本地時間，或者您可以使用<xref:System.DateTime.ToUniversalTime%2A>方法從本地時間轉換為 UTC。 不過，一組完整的時區轉換方法，可以在<xref:System.TimeZoneInfo>類別。 您使用這些方法的任何其他時間區域的時間轉換的任何一種全世界的時區時間。  
  
計算和比較<xref:System.DateTime>物件才有意義的物件都代表在相同時區的時間。 您可以使用<xref:System.TimeZoneInfo>物件以代表<xref:System.DateTime>區域值的時間，雖然兩種鬆散耦合。 A<xref:System.DateTime>物件沒有屬性，可傳回物件，表示該日期和時間值的時區。 <xref:System.DateTime.Kind%2A>屬性會指出如果`DateTime`代表 UTC，本機時間，或未指定。 在時區感知應用程式中，您必須依賴某種外部機制來判斷所在時區<xref:System.DateTime>建立物件。 您可以使用包裝兩者的結構<xref:System.DateTime>值和<xref:System.TimeZoneInfo>物件，代表<xref:System.DateTime>值的時區。 如需詳細資訊，在計算和比較中使用 UTC<xref:System.DateTime>值，請參閱[使用日期和時間執行算術運算](~/docs/standard/datetime/performing-arithmetic-operations.md)。  
  
每個<xref:System.DateTime>成員以隱含方式來執行其作業使用西曆。 例外狀況都是隱含地指定行事曆的方法。 其中包括建構函式指定行事曆，以及方法的參數衍生自<xref:System.IFormatProvider>，例如<xref:System.Globalization.DateTimeFormatInfo?displayProperty=nameWithType>。  
  
作業的成員<xref:System.DateTime>類型納入帳戶詳細資料，例如潤年和月中的天數。  

## <a name="datetime-values-and-calendars"></a>日期時間值和行事曆  

.NET Framework 類別庫包含數個行事曆類別，全部都是衍生自<xref:System.Globalization.Calendar>類別。  包括：  
  
-   <xref:System.Globalization.ChineseLunisolarCalendar> 類別。  
-   <xref:System.Globalization.EastAsianLunisolarCalendar> 類別。  
-   <xref:System.Globalization.GregorianCalendar> 類別。  
-   <xref:System.Globalization.HebrewCalendar> 類別。  
-   <xref:System.Globalization.HijriCalendar> 類別。  
-   <xref:System.Globalization.JapaneseCalendar> 類別。  
-   <xref:System.Globalization.JapaneseLunisolarCalendar> 類別。  
-   <xref:System.Globalization.JulianCalendar> 類別。  
-   <xref:System.Globalization.KoreanCalendar> 類別。  
-   <xref:System.Globalization.KoreanLunisolarCalendar> 類別。  
-   <xref:System.Globalization.PersianCalendar> 類別。  
-   <xref:System.Globalization.TaiwanCalendar> 類別。  
-   <xref:System.Globalization.TaiwanLunisolarCalendar> 類別。  
-   <xref:System.Globalization.ThaiBuddhistCalendar> 類別。  
-   <xref:System.Globalization.UmAlQuraCalendar> 類別。  
  
每個文化特性會使用預設的行事曆，定義其唯讀<xref:System.Globalization.CultureInfo.Calendar%2A?displayProperty=nameWithType>屬性。 每個文化特性可能支援其唯讀屬性所定義的一個或多個行事曆<xref:System.Globalization.CultureInfo.OptionalCalendars%2A?displayProperty=nameWithType>屬性。 目前由特定的行事曆<xref:System.Globalization.CultureInfo>物件由定義其<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=nameWithType>屬性。 它必須是其中一個中找到的行事曆<xref:System.Globalization.CultureInfo.OptionalCalendars%2A?displayProperty=nameWithType>陣列。  
  
文化特性的現行曆法用於所有文化特性的格式化作業。 比方說，泰國佛教文化特性的預設曆法是由表示泰國佛教紀元行事曆<xref:System.Globalization.ThaiBuddhistCalendar>類別。  當<xref:System.Globalization.CultureInfo>代表泰國佛教文化特性的物件用於日期和時間格式的作業，預設會使用泰國佛教紀元行事曆。 只有當使用西曆的文化特性<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=nameWithType>屬性變更，如下列範例所示：  

<a name="calendars-01"></a> [!code-csharp-interactive[System.DateTime.Calendar#1](~/samples/snippets/csharp/System.DateTime/Calendar.cs#1)]
[!code-vb[System.DateTime.Calendar#1](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#1)]  

文化特性的現行曆法也用於所有的剖析作業，該文化特性，如下列範例所示。  
  
<a name="calendars-02"></a> [!code-csharp-interactive[System.DateTime.Calendar#2](~/samples/snippets/csharp/System.DateTime/Calendar.cs#2)]
[!code-vb[System.DateTime.Calendar#2](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#2)]  

您具現化<xref:System.DateTime>值藉由呼叫使用日期和時間的項目 （年、 月和日的數字） 特定的行事曆[DateTime 建構函式](xref:System.DateTime.%23ctor%2A)包含`calendar`參數，並將其傳遞<xref:System.Globalization.CultureInfo.Calendar%2A>物件，表示該行事曆。 下列範例會使用日期和時間的項目從<xref:System.Globalization.ThaiBuddhistCalendar>行事曆。  
  
<a name="calendars-03"></a> [!code-csharp-interactive[System.DateTime.Calendar#3](~/samples/snippets/csharp/System.DateTime/Calendar.cs#3)]
[!code-vb[System.DateTime.Calendar#3](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#3)]  

<xref:System.DateTime> 建構函式不包含`calendar`參數假設的日期和時間的項目以西曆中的單位表示。  
  
所有其他<xref:System.DateTime>屬性和方法使用西曆。 例如，<xref:System.DateTime.Year%2A?displayProperty=nameWithType>屬性西曆，傳回年份和<xref:System.DateTime.IsLeapYear%28System.Int32%29?displayProperty=nameWithType>方法會假設`year`參數是西曆年份。  每個<xref:System.DateTime>使用西曆的成員都有對應的成員<xref:System.Globalization.CultureInfo.Calendar%2A>使用特定曆法類別。 例如，<xref:System.Globalization.Calendar.GetYear%2A?displayProperty=nameWithType>方法會傳回特定曆法，年份和<xref:System.Globalization.Calendar.IsLeapYear%2A?displayProperty=nameWithType>方法解譯`year`參數中特定曆法的年數字。 下列範例會使用這兩者<xref:System.DateTime>和對應的成員的<xref:System.Globalization.ThaiBuddhistCalendar>類別。  
  
<a name="calendars-04"></a> [!code-csharp-interactive[System.DateTime.Calendar#4](~/samples/snippets/csharp/System.DateTime/Calendar.cs#4)]
[!code-vb[System.DateTime.Calendar#4](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#4)]  

<xref:System.DateTime>結構包含<xref:System.DateTime.DayOfWeek%2A>屬性會傳回西曆中的一週天數。 它不包含可讓您擷取一年的週數的成員。 若要擷取的年度週次，呼叫個別的行事曆<xref:System.Globalization.Calendar.GetWeekOfYear%2A?displayProperty=nameWithType>方法。 下列範例提供一個實例。  
  
<a name="calendars-05"></a> [!code-csharp-interactive[System.DateTime.Calendar#5](~/samples/snippets/csharp/System.DateTime/Calendar.cs#5)]
[!code-vb[System.DateTime.Calendar#5](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#5)]  

如需有關日期和行事曆的詳細資訊，請參閱[使用行事曆](~/docs/standard/datetime/working-with-calendars.md)。  
  
### <a name="persisting-datetime-values"></a>保存的日期時間值  

您可以保存<xref:System.DateTime>四種方式中的值：  
  
-   您[將它們轉換成字串](#persisting-values-as-strings)，並將保存的字串。  
-   您[將它們轉換成 64 位元整數值](#persisting-values-as-integers)(值<xref:System.DateTime.Ticks%2A>屬性)，並將保存的整數。  
-   您[序列化 DateTime 值](#serializing-dateTime-values)。  
-   您[序列化以及時區資訊的日期時間值](#serializing-datetime-and-time-zone-data)。  
  
您必須確保還原的常式<xref:System.DateTime>值不會遺失資料或您選擇哪一種技術不論發生例外狀況。 <xref:System.DateTime> 值應該反覆存取。 也就是原始的值與已還原的值應相同。 如果原始<xref:System.DateTime>值代表單一時刻，它應該識別的時間還原時相同的時間。  
  
#### <a name="persisting-values-as-strings"></a>保存的值為字串  

已成功還原<xref:System.DateTime>值保存為字串，請遵循這些規則：  
  
-   對特定文化特性的格式設定，當您還原形式保存它的字串相同的假設。 若要確保字串可以還原其目前的文化特性是不同的系統儲存的文化特性的系統上，呼叫<xref:System.DateTime.ToString%2A>多載，以將字串儲存使用的文化特性而異的慣例。 呼叫<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>或<xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29>来使用的文化特性而異的慣例來還原字串多載。 絕對不要使用<xref:System.DateTime.ToString>， <xref:System.DateTime.Parse%28System.String%29>，或<xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29>多載，會使用目前執行緒文化特性的慣例。  
  
-   如果日期代表時間的單一時間點，請確定它代表在同一時間，它還原時，甚至在不同時區的時間。 轉換<xref:System.DateTime>儲存它之前的值為國際標準時間 (UTC)。 您也可以序列化的值，以及時區資訊。 如需這種方法的詳細資訊，請參閱[序列化的日期時間和時區資料](#TimeZone)。  
  
 最常見的錯誤進行保存時<xref:System.DateTime>依賴預設值或目前的文化特性的格式化慣例是以字串形式的值。 如果目前的文化特性不同儲存及還原字串時，會發生問題。 下列範例會說明這些問題。 它會將儲存五個使用在此案例中是英文 （美國） 的目前文化特性的格式化慣例的日期。 還原使用不同的文化特性，在此案例中是英文 （英國） 的格式設定慣例的日期。 因為不同的兩個文化特性的格式化慣例，無法還原兩個日期，以及剩餘的三個日期的不正確地解譯。 此外，如果原始的日期和時間值代表單一時間的還原時間不正確，因為時區資訊將會遺失。  
  
<a name="persistence-01"></a> [!code-csharp[System.DateTime.Persistence#1](~/samples/snippets/csharp/System.DateTime/Persistence.cs#1)]
[!code-vb[System.DateTime.Persistence#1](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#1)]  

若要反覆存取<xref:System.DateTime>值已成功，請遵循下列步驟：  
  
1.  如果值代表單一分鐘的時間，將它們轉換從本地時間到 UTC 藉由呼叫<xref:System.DateTime.ToUniversalTime%2A>方法。  
1.  將日期轉換成其字串表示法中，藉由呼叫<xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29>或<xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>多載。 藉由指定使用的文化特性而異的格式設定慣例<xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType>為`provider`引數。 指定使用"O"或"R"標準格式字串應該反覆存取值。  
  
若要還原的保存<xref:System.DateTime>值不會遺失資料，請遵循下列步驟：  
  
1.  剖析資料，藉由呼叫<xref:System.DateTime.ParseExact%2A>或<xref:System.DateTime.TryParseExact%2A>多載。 指定<xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType>為`provider`引數，並使用相同的標準格式字串的`format`轉換期間的引數。 包含<xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType>值`styles`引數。  
1.  如果<xref:System.DateTime>值代表在時間中，呼叫的單一時刻<xref:System.DateTime.ToLocalTime%2A>方法來轉換本地時間與 utc 之間的已剖析的日期。  
  
下列範例會使用而異的文化特性和"O"標準格式字串，確保<xref:System.DateTime>儲存和還原的值代表不論系統、 文化特性或來源和目標系統的時區時間在同一時間。  
  
<a name="persistence-02"></a> [!code-csharp[System.DateTime.Persistence#2](~/samples/snippets/csharp/System.DateTime/Persistence.cs#2)]
[!code-vb[System.DateTime.Persistence#2](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#2)]  

#### <a name="persisting-values-as-integers"></a>保存的值做為整數  

您可以保存日期和時間當做<xref:System.Int64>值代表微秒刻度數。 在此情況下，您不需要考慮的系統文化特性<xref:System.DateTime>值會保存，並且上還原。  
  
保存<xref:System.DateTime>為整數的值：  
  
-   如果<xref:System.DateTime>代表單一時間的值，將它們轉換成 UTC 藉由呼叫<xref:System.DateTime.ToUniversalTime%2A>方法。  
-   擷取所表示之刻度數<xref:System.DateTime>值從其<xref:System.DateTime.Ticks%2A>屬性。  
  
若要還原<xref:System.DateTime>已保存為整數的值：  
  
1.  具現化新<xref:System.DateTime>物件，並傳遞<xref:System.Int64>值設定為<xref:System.DateTime.%23ctor%28System.Int64%29>建構函式。  
1.  如果<xref:System.DateTime>值代表單一時間點，將它從轉換 UTC 與本地時間藉由呼叫<xref:System.DateTime.ToLocalTime%2A>方法。  
  
下列範例會保存陣列<xref:System.DateTime>值做為在美國太平洋時區系統上的整數。 UTC 時區系統上還原它。 包含整數的檔案包含<xref:System.Int32>值，指出總數<xref:System.Int64>緊接著它的值。  
  
<a name="persistence-03"></a> [!code-csharp[System.DateTime.Persistence#3](~/samples/snippets/csharp/System.DateTime/Persistence.cs#3)]
[!code-vb[System.DateTime.Persistence#3](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#3)]  

#### <a name="serializing-datetime-values"></a>序列化的日期時間值  

您可以保存<xref:System.DateTime>值透過序列化到資料流或檔案，然後再還原它們透過還原序列化。 <xref:System.DateTime> 資料會以某些指定的物件格式序列化。 將物件還原序列化時還原。 格式器或序列化程式，例如<xref:System.Xml.Serialization.XmlSerializer>或<xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter>，處理的序列化和還原序列化程序。 如需序列化和.NET Framework 所支援的序列化類型的詳細資訊，請參閱[序列化](~/docs/standard/serialization/index.md)。
  
下列範例會使用<xref:System.Xml.Serialization.XmlSerializer>類別來序列化和還原序列化<xref:System.DateTime>值。 值代表所有閏年第二十一世紀的日期。 如果目前文化特性是英文 （英國） 的系統上執行此範例輸出會表示結果。 因為您已還原序列化<xref:System.DateTime>物件本身的程式碼不需要處理日期和時間格式的文化特性差異。  
  
<a name="persistence-04"></a> [!code-csharp[System.DateTime.Persistence#4](~/samples/snippets/csharp/System.DateTime/Persistence.cs#4)]
[!code-vb[System.DateTime.Persistence#4](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#4)]  

上述範例未包含時間資訊。 如果<xref:System.DateTime>值代表時間點，並以本地時間表示之前, 將它轉換從本地時間到 UTC 序列化藉由呼叫<xref:System.DateTime.ToUniversalTime%2A>方法。 將它還原序列化之後，將它從轉換 UTC 到本地時間藉由呼叫<xref:System.DateTime.ToLocalTime%2A>方法。 下列範例會使用<xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter>類別來序列化<xref:System.DateTime>在美國太平洋時區系統上的資料太平洋標準時間區域，並將它在美國太平洋時區系統上還原序列化管理中心的標準區域。  
  
<a name="persistence-05"></a> [!code-csharp[System.DateTime.Persistence#5](~/samples/snippets/csharp/System.DateTime/Persistence.cs#5)]
[!code-vb[System.DateTime.Persistence#5](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#5)]  

#### <a name="serializing-datetime-and-time-zone-data"></a>序列化的日期時間和時區的資料  

先前的範例全都假設<xref:System.DateTime>值會表示為當地時間。 程式碼轉換 UTC 與本地時間之間的值，所以它們反映在來源和目標系統上的相同時間點。 <xref:System.DateTime> 值可能也會反映在 local 以外的時區與 UTC 時間。 因為<xref:System.DateTime>結構不是時區感知，您必須同時序列化<xref:System.DateTime>值和<xref:System.TimeZoneInfo>代表時區的物件。 建立的類型，其欄位同時包含<xref:System.DateTime>值和時區。 下列範例會定義`DateWithTimeZone`結構。  
  
<a name="persistence-06"></a> [!code-csharp[System.DateTime.Persistence#6](~/samples/snippets/csharp/System.DateTime/DateWithTimeZone.cs#6)]
[!code-vb[System.DateTime.Persistence#6](~/samples/snippets/visualbasic/System.DateTime/DateWithTimeZone.vb#6)]  

> [!IMPORTANT]
>  `DateWithTimeZone`結構用於下面兩個範例，可以序列化和還原序列化的陣列`DateWithTimeZone`物件。 您可以檢視完整的範例，在此文件的來源在[Visual Basic](https://github.com/dotnet/samples/tree/master/snippets/visualbasic/System.DateTime/)或[C#](https://github.com/dotnet/samples/tree/master/snippets/csharp/System.DateTime/)從 GitHub 上的文件儲存機制。
  
使用`DateWithTimeZone`結構，您可以再保存日期和時間以及時區資訊。 下列範例會使用<xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter>類別來序列化的陣列`DateWithTimeZone`物件。  
  
[!code-csharp[System.DateTime.Persistence#7](~/samples/snippets/csharp/System.DateTime/Persistence.cs#7)]
[!code-vb[System.DateTime.Persistence#7](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#7)]  

下列範例會接著呼叫<xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize%2A?displayProperty=nameWithType>方法來加以還原序列化。  
  
[!code-csharp[System.DateTime.Persistence#8](~/samples/snippets/csharp/System.DateTime/Persistence.cs#8)]
[!code-vb[System.DateTime.Persistence#8](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#8)]  

### <a name="datetime-vs-timespan"></a>DateTime vs。TimeSpan  

<xref:System.DateTime>和<xref:System.TimeSpan>實值型別的差別在於<xref:System.DateTime>表示時間的瞬間而<xref:System.TimeSpan>表示時間間隔。 您可以將一個執行個體減去<xref:System.DateTime>從另一個取得<xref:System.TimeSpan>物件，表示它們之間的時間間隔。 或者您可以增加正<xref:System.TimeSpan>目前<xref:System.DateTime>取得<xref:System.DateTime>表示未來的日期值。  
  
您可以加入或減去的時間間隔<xref:System.DateTime>物件。 時間間隔可以是負數或正數，並以刻度為單位，例如單位來表示秒，或為<xref:System.TimeSpan>物件。  

### <a name="comparing-for-equality-within-tolerance"></a>在容許範圍內的相等比較

相等比較的<xref:System.DateTime>並精確的值。 這表示兩個值必須以相同數目的刻度，才會被視為相等。 有效位數通常是不必要或甚至不正確，對於許多應用程式。 通常，您要測試是否<xref:System.DateTime>物件**大約等於**。 

下列範例示範如何比較大致相等<xref:System.DateTime>。 宣告它們相等時，它會接受差異小邊界。  
  
<a name="comparison-02"></a> [!code-csharp[System.DateTime.Comparisons#1](~/samples/snippets/csharp/System.DateTime/DateTimeComparisons.cs#1)]
[!code-vb[System.DateTime.Comparisons#1](~/samples/snippets/visualbasic/System.DateTime/DateTimeComparisons.vb#1)]  

### <a name="com-interop-considerations"></a>COM interop 的考量  

A<xref:System.DateTime>轉移到 COM 應用程式，然後傳送到受管理的應用程式中，值稱為往返。 不過，<xref:System.DateTime>值，指定的時間並不會如您預期反覆存取。  
  
如果您反覆存取只有時間，例如下午 3 」，最後的日期和時間是 1899 年 12 月 30 日西元 下午 3:00，而不是 年 1 月 1日日公元 0001 在下午 3:00 .NET Framework 和 COM 假設預設的日期時指定的時間。 不過，COM 系統會假設 1899 年 12 月 30 日西元，基底日期時.NET Framework 假設基底日期的年 1 月 1 日公元 0001  
  
當只有時間從.NET Framework 傳遞至 COM 時，特殊的處理會執行，將時間轉換成 COM 所使用的格式 當只有一次從 COM 傳遞至.NET Framework 時，合法的日期和時間或 1899 年 12 月 30 日之前會損毀，因為不執行任何特殊處理。 如果日期開始其來回從 COM，.NET Framework 和 COM 會保留日期。  
  
.NET Framework 和 COM 的行為表示，如果您的應用程式往返<xref:System.DateTime>，只指定時間，您的應用程式必須記得來修改或忽略錯誤的日期，從最後<xref:System.DateTime>物件。  
     
 ]]></format>
    </remarks>
    <threadsafe>這個型別的所有成員都是安全執行緒。 修改執行個體狀態會顯示的成員實際上會傳回新的值初始化的新執行個體。 做為任何其他類型，以讀取和寫入至共用的變數，其中包含此類型的執行個體必須受到鎖定來保證的執行緒安全。</threadsafe>
    <altmember cref="T:System.DateTimeOffset" />
    <altmember cref="T:System.TimeSpan" />
    <altmember cref="T:System.Globalization.Calendar" />
    <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
    <altmember cref="T:System.TimeZoneInfo" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.DateTime" /> 結構的新執行個體。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (long ticks);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 ticks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ticks As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(long ticks);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ticks" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="ticks">以 0001 年 1 月 1 日 00:00:00.000 (西曆) 以來經過的 100 奈秒間隔數表示的日期和時間。</param>
        <summary>將 <see cref="T:System.DateTime" /> 結構的新執行個體初始化為刻度的指定數目。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.Kind%2A> 屬性會初始化為 <xref:System.DateTimeKind.Unspecified>。  
  
 中的日期和時間資料或時區有限的度的可攜性時的重要應用程式，您可以使用對應<xref:System.DateTimeOffset>建構函式。  
  
   
  
## Examples  
 下列範例會示範其中<xref:System.DateTime>建構函式。  
  
 [!code-cpp[datetime.ctor_Int64#1](~/samples/snippets/cpp/VS_Snippets_CLR/datetime.ctor_Int64/CPP/ticks.cpp#1)]
 [!code-csharp[datetime.ctor_Int64#1](~/samples/snippets/csharp/VS_Snippets_CLR/datetime.ctor_Int64/CS/ticks.cs#1)]
 [!code-vb[datetime.ctor_Int64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/datetime.ctor_Int64/VB/ticks.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="ticks" /> 小於 <see cref="F:System.DateTime.MinValue" /> 或大於 <see cref="F:System.DateTime.MaxValue" />。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (long ticks, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 ticks, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int64,System.DateTimeKind)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ticks As Long, kind As DateTimeKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(long ticks, DateTimeKind kind);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ticks" Type="System.Int64" />
        <Parameter Name="kind" Type="System.DateTimeKind" />
      </Parameters>
      <Docs>
        <param name="ticks">以 0001 年 1 月 1 日 00:00:00.000 (西曆) 以來經過的 100 奈秒間隔數表示的日期和時間。</param>
        <param name="kind">指出 <c>ticks</c> 是指定本地時間或國際標準時間 (UTC)，或是兩者皆非的其中一個列舉值。</param>
        <summary>將 <see cref="T:System.DateTime" /> 結構的新執行個體初始化為指定的刻度數以及國際標準時間 (UTC) 或本地時間。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 中的日期和時間資料或時區有限的度的可攜性時的重要應用程式，您可以使用對應<xref:System.DateTimeOffset>建構函式。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="ticks" /> 小於 <see cref="F:System.DateTime.MinValue" /> 或大於 <see cref="F:System.DateTime.MaxValue" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="kind" /> 不是其中一個 <see cref="T:System.DateTimeKind" /> 值。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">年份 (1 到 9999)。</param>
        <param name="month">月份 (1 到 12)。</param>
        <param name="day">日 (1 到 <c>month</c> 中的天數)。</param>
        <summary>將 <see cref="T:System.DateTime" /> 結構的新執行個體初始化為指定的年、月和日。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個建構函式解譯`year`， `month`，和`day`為年、 月和日西曆中的。 具現化<xref:System.DateTime>使用另一個日曆，呼叫中的年、 月和日值<xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29>建構函式。  
  
 為產生的一天時間<xref:System.DateTime>為午夜 (00: 00:00)。 <xref:System.DateTime.Kind%2A> 屬性會初始化為 <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>。  
  
   
  
## Examples  
 下列範例會使用<xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%29>建構函式來具現化<xref:System.DateTime>值。 此範例也會說明這個多載會建立<xref:System.DateTime>其時間元件等於午夜的值 (或 0:00)。  
  
 [!code-csharp[System.DateTime.Constructor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs#1)]
 [!code-vb[System.DateTime.Constructor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> 小於 1 或大於 9999。  
  
 -或-  
  
 <paramref name="month" /> 小於 1 或大於 12。  
  
 -或-  
  
 <paramref name="day" /> 小於 1 或大於 <paramref name="month" /> 中的天數。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, System.Globalization.Calendar calendar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, class System.Globalization.Calendar calendar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, System::Globalization::Calendar ^ calendar);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" />
      </Parameters>
      <Docs>
        <param name="year">年 (1 到 <c>calendar</c> 中的年數)。</param>
        <param name="month">月 (1 到 <c>calendar</c> 中的月數)。</param>
        <param name="day">日 (1 到 <c>month</c> 中的天數)。</param>
        <param name="calendar">用以解譯 <c>year</c>、<c>month</c> 和 <c>day</c> 的行事曆。</param>
        <summary>將 <see cref="T:System.DateTime" /> 結構的新執行個體初始化為指定行事曆的指定年、月和日。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 為產生的一天時間<xref:System.DateTime>為午夜 (00: 00:00)。 <xref:System.DateTime.Kind%2A> 屬性會初始化為 <xref:System.DateTimeKind.Unspecified>。  
  
 允許值`year`， `month`，和`day`相依於`calendar`。 如果指定的日期和時間不能表示使用，會擲回例外狀況`calendar`。  
  
 <xref:System.Globalization>命名空間提供數個行事曆，包括<xref:System.Globalization.GregorianCalendar>和<xref:System.Globalization.JulianCalendar>。  
  
   
  
## Examples  
 下列範例會呼叫<xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29>建構函式兩次來具現化兩個<xref:System.DateTime>值。 第一次呼叫會具現化<xref:System.DateTime>值使用<xref:System.Globalization.PersianCalendar>物件。 因為波斯曆無法指定為文化特性的預設曆法，顯示波斯曆中的日期需要個別呼叫其<xref:System.Globalization.PersianCalendar.GetMonth%2A?displayProperty=nameWithType>， <xref:System.Globalization.PersianCalendar.GetDayOfMonth%2A?displayProperty=nameWithType>，和<xref:System.Globalization.PersianCalendar.GetYear%2A?displayProperty=nameWithType>方法。 建構函式的第二個呼叫會具現化<xref:System.DateTime>值使用<xref:System.Globalization.HijriCalendar>物件。 此範例會變更目前的文化特性為阿拉伯文 （敘利亞），並且目前文化特性的預設曆法變更為回曆。 因為阿拉伯回曆是目前的文化特性的預設曆法，<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>方法會使用它來格式化日期。 還原先前目前文化特性 （此案例中是英文 （美國）） 時，<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>方法會使用目前文化特性的預設西曆日期格式。  
  
 [!code-csharp[System.DateTime.Constructor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample2.cs#2)]
 [!code-vb[System.DateTime.Constructor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="calendar" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> 不在 <paramref name="calendar" /> 支援的範圍內。  
  
 -或-  
  
 <paramref name="month" /> 小於 1 或大於 <paramref name="calendar" /> 中的月數。  
  
 -或-  
  
 <paramref name="day" /> 小於 1 或大於 <paramref name="month" /> 中的天數。</exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Globalization.Calendar" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">年份 (1 到 9999)。</param>
        <param name="month">月份 (1 到 12)。</param>
        <param name="day">日 (1 到 <c>month</c> 中的天數)。</param>
        <param name="hour">小時 (0 到 23)。</param>
        <param name="minute">分鐘 (0 到 59)。</param>
        <param name="second">秒數 (0 到 59)。</param>
        <summary>將 <see cref="T:System.DateTime" /> 結構的新執行個體初始化為指定的年、月、日、時、分和秒。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.Kind%2A> 屬性會初始化為 <xref:System.DateTimeKind.Unspecified>。  
  
 這個建構函式解譯`year`， `month`，和`day`為年、 月和日西曆中的。 具現化<xref:System.DateTime>使用另一個日曆，呼叫中的年、 月和日值<xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29>建構函式。  
  
 中的日期和時間資料或時區有限的度的可攜性時的重要應用程式，您可以使用對應<xref:System.DateTimeOffset>建構函式。  
  
   
  
## Examples  
 下列範例會使用<xref:System.DateTime.%23ctor%2A>建構函式來具現化<xref:System.DateTime>值。  
  
 [!code-csharp[System.DateTime.Constructor#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs#3)]
 [!code-vb[System.DateTime.Constructor#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> 小於 1 或大於 9999。  
  
 -或-  
  
 <paramref name="month" /> 小於 1 或大於 12。  
  
 -或-  
  
 <paramref name="day" /> 小於 1 或大於 <paramref name="month" /> 中的天數。  
  
 -或-  
  
 <paramref name="hour" /> 小於 0 或大於 23。  
  
 -或-  
  
 <paramref name="minute" /> 小於 0 或大於 59。  
  
 -或-  
  
 <paramref name="second" /> 小於 0 或大於 59。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, kind As DateTimeKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, DateTimeKind kind);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="kind" Type="System.DateTimeKind" />
      </Parameters>
      <Docs>
        <param name="year">年份 (1 到 9999)。</param>
        <param name="month">月份 (1 到 12)。</param>
        <param name="day">日 (1 到 <c>month</c> 中的天數)。</param>
        <param name="hour">小時 (0 到 23)。</param>
        <param name="minute">分鐘 (0 到 59)。</param>
        <param name="second">秒數 (0 到 59)。</param>
        <param name="kind">指出 <c>year</c>、<c>month</c>、<c>day</c>、<c>hour</c>、<c>minute</c> 和 <c>second</c> 是指定本地時間或國際標準時間 (UTC)，或是兩者皆非的其中一個列舉值。</param>
        <summary>將 <see cref="T:System.DateTime" /> 結構的新執行個體初始化為指定年、月、日、時、分、秒以及國際標準時間 (UTC) 或本地時間。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個建構函式解譯`year`， `month`，和`day`為年、 月和日西曆中的。 具現化<xref:System.DateTime>使用另一個日曆，呼叫中的年、 月和日值<xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.DateTimeKind%29>建構函式。  
  
 中的日期和時間資料或時區有限的度的可攜性時的重要應用程式，您可以使用對應<xref:System.DateTimeOffset>建構函式。  
  
   
  
## Examples  
 下列範例會使用<xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.DateTimeKind%29>建構函式來具現化<xref:System.DateTime>值。  
  
 [!code-csharp[System.DateTime.Constructor#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs#7)]
 [!code-vb[System.DateTime.Constructor#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> 小於 1 或大於 9999。  
  
 -或-  
  
 <paramref name="month" /> 小於 1 或大於 12。  
  
 -或-  
  
 <paramref name="day" /> 小於 1 或大於 <paramref name="month" /> 中的天數。  
  
 -或-  
  
 <paramref name="hour" /> 小於 0 或大於 23。  
  
 -或-  
  
 <paramref name="minute" /> 小於 0 或大於 59。  
  
 -或-  
  
 <paramref name="second" /> 小於 0 或大於 59。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="kind" /> 不是其中一個 <see cref="T:System.DateTimeKind" /> 值。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, System.Globalization.Calendar calendar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, class System.Globalization.Calendar calendar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, System::Globalization::Calendar ^ calendar);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" />
      </Parameters>
      <Docs>
        <param name="year">年 (1 到 <c>calendar</c> 中的年數)。</param>
        <param name="month">月 (1 到 <c>calendar</c> 中的月數)。</param>
        <param name="day">日 (1 到 <c>month</c> 中的天數)。</param>
        <param name="hour">小時 (0 到 23)。</param>
        <param name="minute">分鐘 (0 到 59)。</param>
        <param name="second">秒數 (0 到 59)。</param>
        <param name="calendar">用以解譯 <c>year</c>、<c>month</c> 和 <c>day</c> 的行事曆。</param>
        <summary>將 <see cref="T:System.DateTime" /> 結構的新執行個體初始化為指定行事曆的指定年、月、日、時、分和秒。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.Kind%2A> 屬性會初始化為 <xref:System.DateTimeKind.Unspecified>。  
  
 允許值`year`， `month`，和`day`相依於`calendar`。 如果指定的日期和時間不能表示使用，會擲回例外狀況`calendar`。  
  
 <xref:System.Globalization>命名空間提供數個行事曆，包括<xref:System.Globalization.GregorianCalendar>和<xref:System.Globalization.JulianCalendar>。  
  
   
  
## Examples  
 下列範例會呼叫<xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29>建構函式兩次來具現化兩個<xref:System.DateTime>值。 第一次呼叫會具現化<xref:System.DateTime>值使用<xref:System.Globalization.PersianCalendar>物件。 因為波斯曆無法指定為文化特性的預設曆法，顯示波斯曆中的日期需要個別呼叫其<xref:System.Globalization.PersianCalendar.GetMonth%2A?displayProperty=nameWithType>， <xref:System.Globalization.PersianCalendar.GetDayOfMonth%2A?displayProperty=nameWithType>，和<xref:System.Globalization.PersianCalendar.GetYear%2A?displayProperty=nameWithType>方法。 建構函式的第二個呼叫會具現化<xref:System.DateTime>值使用<xref:System.Globalization.HijriCalendar>物件。 此範例會變更目前的文化特性為阿拉伯文 （敘利亞），並且目前文化特性的預設曆法變更為回曆。 因為阿拉伯回曆是目前的文化特性的預設曆法，<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>方法會使用它來格式化日期。 還原先前目前文化特性 （此案例中是英文 （美國）） 時，<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>方法會使用目前文化特性的預設西曆日期格式。  
  
 [!code-csharp[System.DateTime.Constructor#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample4.cs#4)]
 [!code-vb[System.DateTime.Constructor#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="calendar" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> 不在 <paramref name="calendar" /> 支援的範圍內。  
  
 -或-  
  
 <paramref name="month" /> 小於 1 或大於 <paramref name="calendar" /> 中的月數。  
  
 -或-  
  
 <paramref name="day" /> 小於 1 或大於 <paramref name="month" /> 中的天數。  
  
 -或-  
  
 <paramref name="hour" /> 小於 0 或大於 23。  
  
 -或-  
  
 <paramref name="minute" /> 小於 0 或大於 59。  
  
 -或-  
  
 <paramref name="second" /> 小於 0 或大於 59。</exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Globalization.Calendar" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, int millisecond);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, millisecond As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">年份 (1 到 9999)。</param>
        <param name="month">月份 (1 到 12)。</param>
        <param name="day">日 (1 到 <c>month</c> 中的天數)。</param>
        <param name="hour">小時 (0 到 23)。</param>
        <param name="minute">分鐘 (0 到 59)。</param>
        <param name="second">秒數 (0 到 59)。</param>
        <param name="millisecond">毫秒 (0 到 999)。</param>
        <summary>將 <see cref="T:System.DateTime" /> 結構的新執行個體初始化為指定的年、月、日、時、分、秒和毫秒。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個建構函式解譯`year`， `month`，和`day`為年、 月和日西曆中的。 具現化<xref:System.DateTime>使用另一個日曆，呼叫中的年、 月和日值<xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29>建構函式。  
  
 <xref:System.DateTime.Kind%2A> 屬性會初始化為 <xref:System.DateTimeKind.Unspecified>。  
  
 中的日期和時間資料或時區有限的度的可攜性時的重要應用程式，您可以使用對應<xref:System.DateTimeOffset>建構函式。  
  
   
  
## Examples  
 下列範例會使用<xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%29>建構函式來具現化<xref:System.DateTime>值。  
  
 [!code-csharp[System.DateTime.Constructor#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs#5)]
 [!code-vb[System.DateTime.Constructor#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> 小於 1 或大於 9999。  
  
 -或-  
  
 <paramref name="month" /> 小於 1 或大於 12。  
  
 -或-  
  
 <paramref name="day" /> 小於 1 或大於 <paramref name="month" /> 中的天數。  
  
 -或-  
  
 <paramref name="hour" /> 小於 0 或大於 23。  
  
 -或-  
  
 <paramref name="minute" /> 小於 0 或大於 59。  
  
 -或-  
  
 <paramref name="second" /> 小於 0 或大於 59。  
  
 -或-  
  
 <paramref name="millisecond" /> 小於 0 或大於 999。</exception>
        <altmember cref="T:System.Int32" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, millisecond As Integer, kind As DateTimeKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, DateTimeKind kind);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
        <Parameter Name="kind" Type="System.DateTimeKind" />
      </Parameters>
      <Docs>
        <param name="year">年份 (1 到 9999)。</param>
        <param name="month">月份 (1 到 12)。</param>
        <param name="day">日 (1 到 <c>month</c> 中的天數)。</param>
        <param name="hour">小時 (0 到 23)。</param>
        <param name="minute">分鐘 (0 到 59)。</param>
        <param name="second">秒數 (0 到 59)。</param>
        <param name="millisecond">毫秒 (0 到 999)。</param>
        <param name="kind">指出 <c>year</c>、<c>month</c>、<c>day</c>、<c>hour</c>、<c>minute</c>、<c>second</c> 和 <c>millisecond</c> 是指定本地時間或國際標準時間 (UTC)，或是兩者皆非的其中一個列舉值。</param>
        <summary>將 <see cref="T:System.DateTime" /> 結構的新執行個體初始化為指定年、月、日、時、分、秒、毫秒以及國際標準時間 (UTC) 或本地時間。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個建構函式解譯`year`， `month`，和`day`為年、 月和日西曆中的。 具現化<xref:System.DateTime>使用另一個日曆，呼叫中的年、 月和日值<xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.DateTimeKind%29>建構函式。  
  
 中的日期和時間資料或時區有限的度的可攜性時的重要應用程式，您可以使用對應<xref:System.DateTimeOffset>建構函式。  
  
   
  
## Examples  
 下列範例會使用<xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.DateTimeKind%29>建構函式來具現化<xref:System.DateTime>值。  
  
 [!code-csharp[System.DateTime.Constructor#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs#8)]
 [!code-vb[System.DateTime.Constructor#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> 小於 1 或大於 9999。  
  
 -或-  
  
 <paramref name="month" /> 小於 1 或大於 12。  
  
 -或-  
  
 <paramref name="day" /> 小於 1 或大於 <paramref name="month" /> 中的天數。  
  
 -或-  
  
 <paramref name="hour" /> 小於 0 或大於 23。  
  
 -或-  
  
 <paramref name="minute" /> 小於 0 或大於 59。  
  
 -或-  
  
 <paramref name="second" /> 小於 0 或大於 59。  
  
 -或-  
  
 <paramref name="millisecond" /> 小於 0 或大於 999。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="kind" /> 不是其中一個 <see cref="T:System.DateTimeKind" /> 值。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, System.Globalization.Calendar calendar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, class System.Globalization.Calendar calendar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, System::Globalization::Calendar ^ calendar);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" />
      </Parameters>
      <Docs>
        <param name="year">年 (1 到 <c>calendar</c> 中的年數)。</param>
        <param name="month">月 (1 到 <c>calendar</c> 中的月數)。</param>
        <param name="day">日 (1 到 <c>month</c> 中的天數)。</param>
        <param name="hour">小時 (0 到 23)。</param>
        <param name="minute">分鐘 (0 到 59)。</param>
        <param name="second">秒數 (0 到 59)。</param>
        <param name="millisecond">毫秒 (0 到 999)。</param>
        <param name="calendar">用以解譯 <c>year</c>、<c>month</c> 和 <c>day</c> 的行事曆。</param>
        <summary>將 <see cref="T:System.DateTime" /> 結構的新執行個體初始化為指定行事曆的指定年、月、日、時、分、秒和毫秒。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.Kind%2A> 屬性會初始化為 <xref:System.DateTimeKind.Unspecified>。  
  
 允許值`year`， `month`，和`day`相依於`calendar`。 如果指定的日期和時間不能表示使用，會擲回例外狀況`calendar`。  
  
 中的日期和時間資料或時區有限的度的可攜性時的重要應用程式，您可以使用對應<xref:System.DateTimeOffset>建構函式。  
  
 <xref:System.Globalization>命名空間提供數個行事曆，包括<xref:System.Globalization.GregorianCalendar>和<xref:System.Globalization.JulianCalendar>。  
  
   
  
## Examples  
 下列範例會呼叫<xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29>建構函式兩次來具現化兩個<xref:System.DateTime>值。 第一次呼叫會具現化<xref:System.DateTime>值使用<xref:System.Globalization.PersianCalendar>物件。 因為波斯曆無法指定為文化特性的預設曆法，顯示波斯曆中的日期需要個別呼叫其<xref:System.Globalization.PersianCalendar.GetMonth%2A?displayProperty=nameWithType>， <xref:System.Globalization.PersianCalendar.GetDayOfMonth%2A?displayProperty=nameWithType>，和<xref:System.Globalization.PersianCalendar.GetYear%2A?displayProperty=nameWithType>方法。 建構函式的第二個呼叫會具現化<xref:System.DateTime>值使用<xref:System.Globalization.HijriCalendar>物件。 此範例會變更目前的文化特性為阿拉伯文 （敘利亞），並且目前文化特性的預設曆法變更為回曆。 因為阿拉伯回曆是目前的文化特性的預設曆法，<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>方法會使用它來格式化日期。 還原先前目前文化特性 （此案例中是英文 （美國）） 時，<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>方法會使用目前文化特性的預設西曆日期格式。  
  
 [!code-csharp[System.DateTime.Constructor#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample6.cs#6)]
 [!code-vb[System.DateTime.Constructor#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample6.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="calendar" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> 不在 <paramref name="calendar" /> 支援的範圍內。  
  
 -或-  
  
 <paramref name="month" /> 小於 1 或大於 <paramref name="calendar" /> 中的月數。  
  
 -或-  
  
 <paramref name="day" /> 小於 1 或大於 <paramref name="month" /> 中的天數。  
  
 -或-  
  
 <paramref name="hour" /> 小於 0 或大於 23。  
  
 -或-  
  
 <paramref name="minute" /> 小於 0 或大於 59。  
  
 -或-  
  
 <paramref name="second" /> 小於 0 或大於 59。  
  
 -或-  
  
 <paramref name="millisecond" /> 小於 0 或大於 999。</exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Globalization.Calendar" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, System.Globalization.Calendar calendar, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, class System.Globalization.Calendar calendar, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar,System.DateTimeKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, System::Globalization::Calendar ^ calendar, DateTimeKind kind);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" />
        <Parameter Name="kind" Type="System.DateTimeKind" />
      </Parameters>
      <Docs>
        <param name="year">年 (1 到 <c>calendar</c> 中的年數)。</param>
        <param name="month">月 (1 到 <c>calendar</c> 中的月數)。</param>
        <param name="day">日 (1 到 <c>month</c> 中的天數)。</param>
        <param name="hour">小時 (0 到 23)。</param>
        <param name="minute">分鐘 (0 到 59)。</param>
        <param name="second">秒數 (0 到 59)。</param>
        <param name="millisecond">毫秒 (0 到 999)。</param>
        <param name="calendar">用以解譯 <c>year</c>、<c>month</c> 和 <c>day</c> 的行事曆。</param>
        <param name="kind">指出 <c>year</c>、<c>month</c>、<c>day</c>、<c>hour</c>、<c>minute</c>、<c>second</c> 和 <c>millisecond</c> 是指定本地時間或國際標準時間 (UTC)，或是兩者皆非的其中一個列舉值。</param>
        <summary>將 <see cref="T:System.DateTime" /> 結構的新執行個體初始化為指定行事曆的指定年、月、日、時、分、秒、毫秒以及國際標準時間 (UTC) 或本地時間。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 允許值`year`， `month`，和`day`參數取決於`calendar`參數。 如果指定的日期和時間不能表示使用，會擲回例外狀況`calendar`。  
  
 中的日期和時間資料或時區有限的度的可攜性時的重要應用程式，您可以使用對應<xref:System.DateTimeOffset>建構函式。  
  
 <xref:System.Globalization>命名空間提供數個行事曆，包括<xref:System.Globalization.GregorianCalendar>和<xref:System.Globalization.JulianCalendar>。  
  
   
  
## Examples  
 下列範例會呼叫<xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.DateTimeKind%29>建構函式兩次來具現化兩個<xref:System.DateTime>值。 第一次呼叫會具現化<xref:System.DateTime>值使用<xref:System.Globalization.PersianCalendar>物件。 因為波斯曆無法指定為文化特性的預設曆法，顯示波斯曆中的日期需要個別呼叫其<xref:System.Globalization.PersianCalendar.GetMonth%2A?displayProperty=nameWithType>， <xref:System.Globalization.PersianCalendar.GetDayOfMonth%2A?displayProperty=nameWithType>，和<xref:System.Globalization.PersianCalendar.GetYear%2A?displayProperty=nameWithType>方法。 建構函式的第二個呼叫會具現化<xref:System.DateTime>值使用<xref:System.Globalization.HijriCalendar>物件。 此範例會變更目前的文化特性為阿拉伯文 （敘利亞），並且目前文化特性的預設曆法變更為回曆。 因為阿拉伯回曆是目前的文化特性的預設曆法，<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>方法會使用它來格式化日期。 還原先前目前文化特性 （此案例中是英文 （美國）） 時，<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>方法會使用目前文化特性的預設西曆日期格式。  
  
 [!code-csharp[System.DateTime.Constructor#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample9.cs#9)]
 [!code-vb[System.DateTime.Constructor#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample9.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="calendar" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> 不在 <paramref name="calendar" /> 支援的範圍內。  
  
 -或-  
  
 <paramref name="month" /> 小於 1 或大於 <paramref name="calendar" /> 中的月數。  
  
 -或-  
  
 <paramref name="day" /> 小於 1 或大於 <paramref name="month" /> 中的天數。  
  
 -或-  
  
 <paramref name="hour" /> 小於 0 或大於 23。  
  
 -或-  
  
 <paramref name="minute" /> 小於 0 或大於 59。  
  
 -或-  
  
 <paramref name="second" /> 小於 0 或大於 59。  
  
 -或-  
  
 <paramref name="millisecond" /> 小於 0 或大於 999。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="kind" /> 不是其中一個 <see cref="T:System.DateTimeKind" /> 值。</exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public DateTime Add (TimeSpan value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime Add(valuetype System.TimeSpan value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Add(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (value As TimeSpan) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime Add(TimeSpan value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="value">正數或負數時間間隔。</param>
        <summary>傳回新的 <see cref="T:System.DateTime" />，將這個執行個體的值加上指定之 <see cref="T:System.TimeSpan" /> 的值。</summary>
        <returns>物件，其值為這個執行個體所表示日期和時間加上 <paramref name="value" /> 所表示時間間隔的總和。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用<xref:System.DateTime.Add%2A>方法可在單一作業中加入一種以上的時間間隔 （天、 小時、 分鐘、 秒或毫秒為單位）。 這個方法的行為是相同的加法運算子。 <xref:System.DateTime>結構也支援特殊的加法方法 (例如<xref:System.DateTime.AddDays%2A>， <xref:System.DateTime.AddHours%2A>，和<xref:System.DateTime.AddMinutes%2A>) 的每個時間間隔。  
  
 <xref:System.DateTime.Add%2A>方法會將帳戶潤年和月，當執行日期算術中的天數。  
  
 這個方法不會變更這個值<xref:System.DateTime>。 相反地，它會傳回新<xref:System.DateTime>其實此作業的結果。 <xref:System.DateTime.Kind%2A>屬性的新<xref:System.DateTime>執行個體是目前的執行個體相同。  
  
   
  
## Examples  
 下列範例會示範<xref:System.DateTime.Add%2A>方法。 它會計算為從目前的 36 天 （864 小時） 的一週天數。  
  
 [!code-cpp[DateTime.Add#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Add/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Add#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Add/CS/class1.cs#1)]
 [!code-vb[DateTime.Add#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Add/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTime" /> 小於 <see cref="F:System.DateTime.MinValue" /> 或大於 <see cref="F:System.DateTime.MaxValue" />。</exception>
        <altmember cref="T:System.TimeSpan" />
        <altmember cref="M:System.TimeSpan.Add(System.TimeSpan)" />
      </Docs>
    </Member>
    <Member MemberName="AddDays">
      <MemberSignature Language="C#" Value="public DateTime AddDays (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddDays(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddDays(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddDays (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddDays(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">整數和小數的天數。 <c>value</c> 參數可以是負數或正數。</param>
        <summary>傳回新的 <see cref="T:System.DateTime" />，將這個執行個體的值加上指定的天數。</summary>
        <returns>物件，其值為這個執行個體所表示日期和時間加上 <paramref name="value" /> 所表示天數的總和。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法不會變更這個值<xref:System.DateTime>。 相反地，它會傳回新<xref:System.DateTime>其實此作業的結果。  
  
 小數點後的部分`value`是一天的分數部分。 例如，4.5 是相當於 4 天、 12 小時，0 分，0 秒，0 毫秒為單位，0 刻度。  
  
 `value`參數四捨五入至最接近的毫秒數。  
  
 <xref:System.DateTime.AddDays%2A>方法會將帳戶潤年和月，當執行日期算術中的天數。  
  
   
  
## Examples  
 下列範例會使用<xref:System.DateTime.AddDays%2A>方法，以判斷目前的日期後的 36 天一週天數。  
  
 [!code-cpp[DateTime.AddDays#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.AddDays/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.AddDays#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.AddDays/CS/class1.cs#1)]
 [!code-vb[DateTime.AddDays#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.AddDays/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTime" /> 小於 <see cref="F:System.DateTime.MinValue" /> 或大於 <see cref="F:System.DateTime.MaxValue" />。</exception>
        <altmember cref="T:System.Double" />
      </Docs>
    </Member>
    <Member MemberName="AddHours">
      <MemberSignature Language="C#" Value="public DateTime AddHours (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddHours(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddHours(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddHours (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddHours(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">整數和小數的時數。 <c>value</c> 參數可以是負數或正數。</param>
        <summary>傳回新的 <see cref="T:System.DateTime" />，將這個執行個體的值加上指定的時數。</summary>
        <returns>物件，其值為這個執行個體所表示日期和時間加上 <paramref name="value" /> 所表示時數的總和。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法不會變更這個值<xref:System.DateTime>。 相反地，它會傳回新<xref:System.DateTime>其實此作業的結果。 <xref:System.DateTime.Kind%2A>屬性傳回之<xref:System.DateTime>物件是屬於相同`value`。  
  
 小數點後的部分`value`是一小時的小數部分。 例如，4.5 是相當於 4 小時 30 分鐘，0 秒，0 毫秒為單位，0 刻度。  
  
 `value`參數四捨五入至最接近的毫秒數。  
  
 將轉換為小數少於一小時的時間間隔可能會涉及遺失有效位數，如果結果為非終止重複十進位數。 （例如，一分鐘是一小時的 0.016667）。若這確為問題，您可以使用<xref:System.DateTime.Add%2A>方法，它可讓您在單一方法呼叫中指定一種以上的時間間隔，並不需要轉換成小數部分，一小時的時間間隔。  
  
   
  
## Examples  
 下列範例會使用<xref:System.DateTime.AddHours%2A>方法，將日期和時間的整數和小數的值數目。 它也會說明如何藉由傳遞方法包含小數部分的值導致精確度遺失。  
  
 [!code-csharp[System.DateTime.AddHours#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.AddHours/cs/AddHours1.cs#1)]
 [!code-vb[System.DateTime.AddHours#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.AddHours/vb/AddHours1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTime" /> 小於 <see cref="F:System.DateTime.MinValue" /> 或大於 <see cref="F:System.DateTime.MaxValue" />。</exception>
        <altmember cref="M:System.DateTime.Add(System.TimeSpan)" />
      </Docs>
    </Member>
    <Member MemberName="AddMilliseconds">
      <MemberSignature Language="C#" Value="public DateTime AddMilliseconds (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddMilliseconds(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddMilliseconds(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMilliseconds (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddMilliseconds(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">整數和小數的毫秒數。 <c>value</c> 參數可以是負數或正數。 請注意，這個值會四捨五入為最接近的整數。</param>
        <summary>傳回新的 <see cref="T:System.DateTime" />，將這個執行個體的值加上指定的毫秒數。</summary>
        <returns>物件，其值為這個執行個體所表示日期和時間加上 <paramref name="value" /> 所表示毫秒數的總和。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法不會變更這個值<xref:System.DateTime>。 相反地，它會傳回新<xref:System.DateTime>其實此作業的結果。  
  
 小數點後的部分`value`屬於小數的毫秒數。 例如，4.5 相當於 4 毫秒，5000 刻度，其中毫秒 = 10000 的刻度。  
  
 `value`參數四捨五入至最接近的整數。  
  
   
  
## Examples  
 下列範例會使用<xref:System.DateTime.AddMilliseconds%2A>方法，將一毫秒，1.5 毫秒<xref:System.DateTime>值。 然後顯示每個新的值，並顯示它的原始值之間的差異。 差異會顯示同時時間範圍和微秒刻度數。 此範例可以清楚，其中毫秒等於 10,000 刻度。 它也會顯示毫秒會四捨五入之前執行加法。<xref:System.DateTime>所產生的原始日期中加入 1.5 毫秒的值為 2 毫秒大於原始日期。  
  
 [!code-csharp[System.DateTime.AddMilliseconds#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addmilliseconds/cs/addmilliseconds2.cs#1)]
 [!code-vb[System.DateTime.AddMilliseconds#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addmilliseconds/vb/addmilliseconds2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTime" /> 小於 <see cref="F:System.DateTime.MinValue" /> 或大於 <see cref="F:System.DateTime.MaxValue" />。</exception>
        <altmember cref="T:System.Double" />
      </Docs>
    </Member>
    <Member MemberName="AddMinutes">
      <MemberSignature Language="C#" Value="public DateTime AddMinutes (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddMinutes(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddMinutes(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMinutes (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddMinutes(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">整數和小數的分鐘數。 <c>value</c> 參數可以是負數或正數。</param>
        <summary>傳回新的 <see cref="T:System.DateTime" />，將這個執行個體的值加上指定的分鐘數。</summary>
        <returns>物件，其值為這個執行個體所表示日期和時間加上 <paramref name="value" /> 所表示分鐘數的總和。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法不會變更這個值<xref:System.DateTime>。 相反地，它會傳回新<xref:System.DateTime>其實此作業的結果。  
  
 小數點後的部分`value`是一分鐘的小數部分。 例如，4.5 就相當於 4 分鐘、 30 秒、 0 毫秒和 0 刻度。  
  
 `value`參數四捨五入至最接近的毫秒數。  
  
   
  
## Examples  
 下列範例會使用<xref:System.DateTime.AddMinutes%2A>方法，將日期和時間的整數和小數的值數目。  
  
 [!code-cpp[System.DateTime.AddMinutes#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.datetime.addminutes/cpp/addminutes1.cpp#1)]
 [!code-csharp[System.DateTime.AddMinutes#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addminutes/cs/addminutes1.cs#1)]
 [!code-vb[System.DateTime.AddMinutes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addminutes/vb/addminutes1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTime" /> 小於 <see cref="F:System.DateTime.MinValue" /> 或大於 <see cref="F:System.DateTime.MaxValue" />。</exception>
        <altmember cref="T:System.Double" />
      </Docs>
    </Member>
    <Member MemberName="AddMonths">
      <MemberSignature Language="C#" Value="public DateTime AddMonths (int months);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddMonths(int32 months) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddMonths(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMonths (months As Integer) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddMonths(int months);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="months" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="months">月份數。 <c>months</c> 參數可以是負數或正數。</param>
        <summary>傳回新的 <see cref="T:System.DateTime" />，將這個執行個體的值加上指定的月數。</summary>
        <returns>物件，其值為這個執行個體所表示日期和時間加上 <paramref name="months" /> 的總和。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法不會變更這個值<xref:System.DateTime>物件。 相反地，它會傳回新<xref:System.DateTime>物件，其值為這個作業的結果。  
  
 <xref:System.DateTime.AddMonths%2A>方法計算產生的月份並納入帳戶潤年和月，日數的年份，然後調整所產生的日期部分<xref:System.DateTime>物件。 如果產生的日期不是有效的日期，產生月份中，會使用產生的月份有效的最後一天。 例如，年 3 月 31 + 1 個月 = 30 年 4 月和年 3 月 31-1 個月 = 年 2 月 28 的非潤年及年 2 月 29 為閏年。  
  
 產生的日期時間部分<xref:System.DateTime>維持與這個執行個體相同的物件。  
  
   
  
## Examples  
 下列範例會加入到 2015 年 12 月，最後一天介於 0 到 15 個月。 在此情況下，AddMonths 方法傳回的每個月的最後一天的日期，並成功處理潤年。  
  
 [!code-csharp[System.DateTime.AddMonths#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addmonths/cs/addmonths1.cs#1)]
 [!code-vb[System.DateTime.AddMonths#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addmonths/vb/addmonths1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTime" /> 小於 <see cref="F:System.DateTime.MinValue" /> 或大於 <see cref="F:System.DateTime.MaxValue" />。  
  
 -或-  
  
 <paramref name="months" /> 小於 -120,000 或大於 120,000。</exception>
      </Docs>
    </Member>
    <Member MemberName="AddSeconds">
      <MemberSignature Language="C#" Value="public DateTime AddSeconds (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddSeconds(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddSeconds(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddSeconds (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddSeconds(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">整數和小數的秒數。 <c>value</c> 參數可以是負數或正數。</param>
        <summary>傳回新的 <see cref="T:System.DateTime" />，將這個執行個體的值加上指定的秒數。</summary>
        <returns>物件，其值為這個執行個體所表示日期和時間加上 <paramref name="value" /> 所表示秒數的總和。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法不會變更這個值<xref:System.DateTime>。 相反地，它會傳回新<xref:System.DateTime>其實此作業的結果。  
  
 小數點後的部分`value`是每秒的小數部分。 例如，4.5 是相當於 4 秒，500 毫秒為單位，0 刻度。  
  
 `value`參數四捨五入至最接近的毫秒數。  
  
   
  
## Examples  
 下列範例會使用<xref:System.DateTime.AddSeconds%2A>方法，在一天才能將 30 秒和秒數<xref:System.DateTime>值。 然後顯示每個新的值，並顯示它的原始值之間的差異。 差異會顯示同時時間範圍和微秒刻度數。  
  
 [!code-csharp[System.DateTime.AddSeconds#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addseconds/cs/addseconds1.cs#1)]
 [!code-vb[System.DateTime.AddSeconds#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addseconds/vb/addseconds1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTime" /> 小於 <see cref="F:System.DateTime.MinValue" /> 或大於 <see cref="F:System.DateTime.MaxValue" />。</exception>
        <altmember cref="T:System.Double" />
      </Docs>
    </Member>
    <Member MemberName="AddTicks">
      <MemberSignature Language="C#" Value="public DateTime AddTicks (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddTicks(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddTicks(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddTicks (value As Long) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddTicks(long value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">100 毫微秒刻度數。 <c>value</c> 參數可以是正數或負數。</param>
        <summary>傳回新的 <see cref="T:System.DateTime" />，將這個執行個體的值加上指定的刻度數。</summary>
        <returns>物件，其值為這個執行個體所表示日期和時間加上 <paramref name="value" /> 所表示時間的總和。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法不會變更這個值<xref:System.DateTime>。 相反地，它會傳回新<xref:System.DateTime>其實此作業的結果。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTime" /> 小於 <see cref="F:System.DateTime.MinValue" /> 或大於 <see cref="F:System.DateTime.MaxValue" />。</exception>
        <altmember cref="T:System.Int64" />
        <altmember cref="P:System.DateTime.Ticks" />
      </Docs>
    </Member>
    <Member MemberName="AddYears">
      <MemberSignature Language="C#" Value="public DateTime AddYears (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddYears(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddYears(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddYears (value As Integer) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddYears(int value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">年份數。 <c>value</c> 參數可以是負數或正數。</param>
        <summary>傳回新的 <see cref="T:System.DateTime" />，將這個執行個體的值加上指定的年數。</summary>
        <returns>物件，其值為這個執行個體所表示日期和時間加上 <paramref name="value" /> 所表示年數的總和。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法不會變更這個值<xref:System.DateTime>物件。 相反地，它會傳回新<xref:System.DateTime>物件，其值為這個作業的結果。  
  
 <xref:System.DateTime.AddYears%2A>方法會計算產生的年份閏年列入考量。 產生的月份和日期時間部分<xref:System.DateTime>維持與這個執行個體相同的物件。  
  
 如果目前的執行個體代表閏年閏日，則傳回值會取決於目標日期：  
  
-   如果`value`  +  <xref:System.DateTime.Year%2A?displayProperty=nameWithType>也為閏年，傳回值表示該年度的閏日。 例如，如果在 2012 年 2 月 29 日加入四年傳回的日期是 2016 年 2 月 29 日。  
  
-   如果`value`  +  <xref:System.DateTime.Year%2A?displayProperty=nameWithType>不為閏年，傳回值表示該年度的閏天前一天。 例如，如果在 2012 年 2 月 29 日一年加入傳回的日期是 2013 年 2 月 28 日。  
  
 下列範例說明如何使用<xref:System.DateTime.AddYears%2A>方法<xref:System.DateTime>代表閏年的一天的值。 它會顯示日期早於 15 的年和遵循 15 年 2000 年 2 月 29 日。  
  
 [!code-csharp[System.DateTime.AddYears#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addyears/cs/addyears1.cs#1)]
 [!code-vb[System.DateTime.AddYears#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addyears/vb/addyears1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="value" /> 或產生的 <see cref="T:System.DateTime" /> 小於 <see cref="F:System.DateTime.MinValue" /> 或大於 <see cref="F:System.DateTime.MaxValue" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (t1 As DateTime, t2 As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(DateTime t1, DateTime t2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">要比較的第一個物件。</param>
        <param name="t2">要比較的第二個物件。</param>
        <summary>比較 <see cref="T:System.DateTime" /> 的兩個執行個體，並傳回整數，這個整數表示第一個執行個體早於、同於或晚於第二個執行個體。</summary>
        <returns>帶正負號的數字，該數字表示 <paramref name="t1" /> 和 <paramref name="t2" /> 的相對值。  
  
 <list type="table"><listheader><term>實值類型  
  
 </term><description>條件  
  
 </description></listheader><item><term>小於零  
  
 </term><description><paramref name="t1" /> 早於 <paramref name="t2" />。  
  
 </description></item><item><term> 零  
  
 </term><description><paramref name="t1" /> 與 <paramref name="t2" /> 相同。  
  
 </description></item><item><term> 大於零  
  
 </term><description><paramref name="t1" /> 晚於 <paramref name="t2" />。  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要判斷的關聯性`t1`來`t2`、<xref:System.DateTime.Compare%2A>方法會比較<xref:System.DateTime.Ticks%2A>屬性`t1`和`t2`，但會忽略其<xref:System.DateTime.Kind%2A>屬性。 比較之前<xref:System.DateTime>物件，請確認物件是否代表相同的時區中的時間。  
  
   
  
## Examples  
 下列範例會示範<xref:System.DateTime.Compare%2A>方法。  
  
 [!code-csharp[System.DateTime.Compare#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.compare/cs/compare1.cs#1)]
 [!code-vb[System.DateTime.Compare#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.compare/vb/compare1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.Object)" />
        <altmember cref="M:System.DateTime.Equals(System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CompareTo">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>比較這個執行個體的值與指定的 <see cref="T:System.DateTime" /> 值，指出這個執行個體早於、同於或晚於指定的 <see cref="T:System.DateTime" /> 值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 兩個多載的<xref:System.DateTime.CompareTo%2A>方法傳回的帶正負號的數字，指出這個執行個體的相對價值和`value`引數，如下表所示。  
  
|值|描述|  
|-----------|-----------------|  
|小於零|這個執行個體早於 `value`。|  
|零|這個執行個體和 `value` 相同。|  
|大於零|這個執行個體晚於 `value`。|  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.CompareTo(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (value As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(DateTime value);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable`1.CompareTo(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">要與目前執行個體相比較的物件。</param>
        <summary>比較這個執行個體的值與指定的 <see cref="T:System.DateTime" /> 值，並且傳回一個整數，指出這個執行個體是早於、同於或晚於指定的 <see cref="T:System.DateTime" /> 值。</summary>
        <returns>帶正負號的數字，指出這個執行個體與 <paramref name="value" /> 參數的相對值。  
  
 <list type="table"><listheader><term> 值  
  
 </term><description> 描述  
  
 </description></listheader><item><term>小於零  
  
 </term><description>這個執行個體早於 <paramref name="value" />。  
  
 </description></item><item><term> 零  
  
 </term><description>這個執行個體和 <paramref name="value" /> 相同。  
  
 </description></item><item><term> 大於零  
  
 </term><description>這個執行個體晚於 <paramref name="value" />。  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要判斷目前的執行個體的關聯性`value`、<xref:System.DateTime.CompareTo%2A>方法會比較<xref:System.DateTime.Ticks%2A>目前執行個體的屬性和`value`，但會忽略其<xref:System.DateTime.Kind%2A>屬性。  比較之前<xref:System.DateTime>物件，請確定物件代表相同的時區中的時間。 您可以藉由比較的值及其<xref:System.DateTime.Kind%2A>屬性。  
  
 這個方法會實作<xref:System.IComparable%601?displayProperty=nameWithType>介面並執行稍微優於<xref:System.DateTime.CompareTo%28System.Object%29?displayProperty=nameWithType>方法多載，因為它沒有轉換`value`參數物件。  
  
   
  
## Examples  
 下列範例會執行個體化三個<xref:System.DateTime>物件，其中一個代表今天的日期，另一個代表一年之前的日期，並第三個，表示在未來一年的日期。 然後它會呼叫<xref:System.DateTime.CompareTo%28System.DateTime%29>方法，並顯示比較的結果。  
  
 [!code-csharp[DateTime.CompareTo.2#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.CompareTo.2/CS/CompareTo_CS1_24564.cs#1)]
 [!code-vb[DateTime.CompareTo.2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.CompareTo.2/VB/CompareTo_VB1_24564.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (value As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">要比較的 Boxed 物件，或 <see langword="null" />。</param>
        <summary>比較這個執行個體的值與含有指定之 <see cref="T:System.DateTime" /> 值的指定物件，並且傳回一個整數，指出這個執行個體是早於、同於或晚於指定的 <see cref="T:System.DateTime" /> 值。</summary>
        <returns>帶正負號的數字，指出這個執行個體與 <paramref name="value" /> 的相對值。  
  
 <list type="table"><listheader><term> 值  
  
 </term><description> 描述  
  
 </description></listheader><item><term>小於零  
  
 </term><description>這個執行個體早於 <paramref name="value" />。  
  
 </description></item><item><term> 零  
  
 </term><description>這個執行個體和 <paramref name="value" /> 相同。  
  
 </description></item><item><term> 大於零  
  
 </term><description>這個執行個體晚於 <paramref name="value" />，或者 <paramref name="value" /> 為 <see langword="null" />。  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要判斷目前的執行個體的關聯性`value`、<xref:System.DateTime.CompareTo%2A>方法會比較<xref:System.DateTime.Ticks%2A>目前執行個體的屬性和`value`，但會忽略其<xref:System.DateTime.Kind%2A>屬性。 比較之前<xref:System.DateTime>物件，請確定物件代表相同的時區中的時間。 您可以藉由比較的值及其<xref:System.DateTime.Kind%2A>屬性。  
  
 任何執行個體<xref:System.DateTime>，不論其值會被視為大於`null`。  
  
   
  
## Examples  
 下列範例會示範<xref:System.DateTime.CompareTo%2A>方法。  
  
 [!code-cpp[DateTime.CompareTo#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.CompareTo/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.CompareTo#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.CompareTo/CS/class1.cs#1)]
 [!code-vb[DateTime.CompareTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.CompareTo/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="value" /> 不是 <see cref="T:System.DateTime" />。</exception>
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Date">
      <MemberSignature Language="C#" Value="public DateTime Date { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime Date" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Date" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Date As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime Date { DateTime get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得這個執行個體的日期部分。</summary>
        <value>新的物件，具有與這個執行個體相同的日期，並將時間值設定為午夜 12:00:00 (00:00:00)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.DateTime.Kind%2A>屬性傳回之<xref:System.DateTime>值是目前的執行個體相同。  
  
 因為<xref:System.DateTime>型別代表兩個日期和時間在單一類型中，務必避免錯誤解譯日期，傳回<xref:System.DateTime.Date%2A>屬性做為日期和時間。  
  
   
  
## Examples  
 下列範例會使用<xref:System.DateTime.Date%2A>屬性來擷取日期元件的<xref:System.DateTime>時間元件設定為零的值 (或 0:00:00 或午夜)。 它也說明了，根據格式字串，用來顯示<xref:System.DateTime>時間元件可以繼續在格式化輸出中顯示值。  
  
 [!code-cpp[System.DateTime.Date#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Date/cpp/date1.cpp#1)]
 [!code-csharp[System.DateTime.Date#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Date/cs/Date1.cs#1)]
 [!code-vb[System.DateTime.Date#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Date/vb/Date1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Day">
      <MemberSignature Language="C#" Value="public int Day { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Day" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Day" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Day As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Day { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得由這個執行個體表示的月份天數。</summary>
        <value>日期元件，以 1 到 31 之間的值表示。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.Day%2A>屬性一律會傳回當月日期西曆，即使目前<xref:System.DateTime>值未具現化使用其他行事曆，或如果目前執行緒文化特性的預設曆法不是西曆。 若要擷取使用其他行事曆的特定日期的月份天數，呼叫該曆法的<xref:System.Globalization.Calendar.GetDayOfMonth%2A?displayProperty=nameWithType>方法。 下列範例會使用這兩者<xref:System.DateTime.Day%2A>屬性和<xref:System.Globalization.HijriCalendar.GetDayOfMonth%2A?displayProperty=nameWithType>方法來擷取的月份天數<xref:System.DateTime>使用回曆具現化的值。  
  
 [!code-csharp[System.DateTime.Day#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Day/cs/Day1.cs#1)]
 [!code-vb[System.DateTime.Day#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Day/vb/Day1.vb#1)]  
  
 同樣地，下列範例會使用這兩者<xref:System.DateTime.Day%2A>屬性和<xref:System.Globalization.HijriCalendar.GetDayOfMonth%2A?displayProperty=nameWithType>方法來擷取目前執行緒文化特性時 AR-SA，其使用回曆，做為其預設行事曆月份天數。  
  
 [!code-csharp[System.DateTime.Day#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Day/cs/Day2.cs#2)]
 [!code-vb[System.DateTime.Day#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Day/vb/Day2.vb#2)]  
  
   
  
## Examples  
 下列範例會示範<xref:System.DateTime.Day%2A>屬性。  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DayOfWeek">
      <MemberSignature Language="C#" Value="public DayOfWeek DayOfWeek { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DayOfWeek DayOfWeek" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.DayOfWeek" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DayOfWeek As DayOfWeek" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DayOfWeek DayOfWeek { DayOfWeek get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DayOfWeek</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得由這個執行個體表示的一週天數。</summary>
        <value>列舉的常數，表示這個 <see cref="T:System.DateTime" /> 值代表的是一週的哪一天。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 中的常數的值<xref:System.DayOfWeek>列舉型別的範圍從<xref:System.DayOfWeek.Sunday?displayProperty=nameWithType>至<xref:System.DayOfWeek.Saturday?displayProperty=nameWithType>。 如果轉換成整數，其值範圍從零 (表示<xref:System.DayOfWeek.Sunday?displayProperty=nameWithType>) 為六個 (表示<xref:System.DayOfWeek.Saturday?displayProperty=nameWithType>)。  
  
 <xref:System.DateTime.DayOfWeek%2A>屬性會傳回的列舉的常數，它並不會反映的系統地區及語言設定。 若要擷取字串，表示在特定日期的當地語系化的工作日名稱，請呼叫其中一個多載的<xref:System.DateTime.ToString%2A>方法包含`format`參數並將它傳遞是`ddd`或`dddd`自訂格式字串。 如需詳細資訊，請參閱[How to： 從特定日期擷取星期幾](~/docs/standard/base-types/how-to-extract-the-day-of-the-week-from-a-specific-date.md)。  
  
   
  
## Examples  
 下列範例會示範<xref:System.DateTime.DayOfWeek%2A>屬性和<xref:System.DayOfWeek?displayProperty=nameWithType>列舉型別。  
  
 [!code-cpp[DateTime.DayOfWeek#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.DayOfWeek/CPP/dow.cpp#1)]
 [!code-csharp[DateTime.DayOfWeek#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.DayOfWeek/CS/dow.cs#1)]
 [!code-vb[DateTime.DayOfWeek#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.DayOfWeek/VB/dow.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTime.Ticks" />
        <altmember cref="T:System.Int32" />
      </Docs>
    </Member>
    <Member MemberName="DayOfYear">
      <MemberSignature Language="C#" Value="public int DayOfYear { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 DayOfYear" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.DayOfYear" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DayOfYear As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int DayOfYear { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得由這個執行個體表示的一年天數。</summary>
        <value>一年中的日期，以 1 到 366 之間的值表示。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.DayOfYear%2A>屬性考量潤年計算年份的日期時。 屬性值一律會反映西曆，不論目前執行緒文化特性的現行曆法中年份的日期。 若要擷取在不同的行事曆年份的日期，請呼叫<xref:System.Globalization.Calendar.GetDayOfYear%2A?displayProperty=nameWithType>該行事曆的方法。  
  
   
  
## Examples  
 下列範例會顯示一年的 12 月 31，2010年 2020 年的日西曆。 請注意，該範例顯示 December 31 是潤年中年份的第 366 天。  
  
 [!code-csharp[System.DateTime.DayOfYear#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.dayofyear/cs/dayofyear2.cs#1)]
 [!code-vb[System.DateTime.DayOfYear#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.dayofyear/vb/dayofyear2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Globalization.Calendar.GetDayOfYear(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="DaysInMonth">
      <MemberSignature Language="C#" Value="public static int DaysInMonth (int year, int month);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 DaysInMonth(int32 year, int32 month) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.DaysInMonth(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DaysInMonth (year As Integer, month As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int DaysInMonth(int year, int month);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">年。</param>
        <param name="month">月 (範圍從 1 到 12 的數字)。</param>
        <summary>傳回所指定年份中指定月份的天數。</summary>
        <returns>指定 <paramref name="month" /> 的 <paramref name="year" /> 中的天數。  
  
 例如，如果 <paramref name="month" /> 等於 2 (表示二月)，傳回值是 28 或 29 (根據 <paramref name="year" /> 是否為閏年)。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.DaysInMonth%2A>方法一律會解譯`month`和`year`為月份和年份為西曆日曆即使西曆不是目前的文化特性的現行曆法。 若要取得特定行事曆的指定月份中的日數，呼叫該曆法的<xref:System.Globalization.Calendar.GetDaysInMonth%2A>方法。  
  
   
  
## Examples  
 下列範例示範如何使用<xref:System.DateTime.DaysInMonth%2A>方法，以判斷在 July 2001 年、 年 2 月的日數 1998 非-年 （閏年） 和 2 月版 1996 年 （閏年）。  
  
 [!code-cpp[DateTime.DaysInMonth#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.DaysInMonth/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.DaysInMonth#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.DaysInMonth/CS/class1.cs#1)]
 [!code-vb[DateTime.DaysInMonth#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.DaysInMonth/VB/class1.vb#1)]  
  
 下列範例會顯示在指定的整數陣列中之年的每月的天數。  
  
 [!code-csharp[System.DateTime.DaysInMonth#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.daysinmonth/cs/daysinmonth3.cs#1)]
 [!code-vb[System.DateTime.DaysInMonth#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.daysinmonth/vb/daysinmonth3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="month" /> 小於 1 或大於 12。  
  
 -或-  
  
 <paramref name="year" /> 小於 1 或大於 9999。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>傳回值，指出兩個 <see cref="T:System.DateTime" /> 物件，或 <see cref="T:System.DateTime" /> 執行個體和另一個物件或 <see cref="T:System.DateTime" /> 是否有相同的值。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Equals(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (value As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(DateTime value);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">與這個執行個體相比較的物件。</param>
        <summary>傳回值，該值指出這個執行個體的值是否等於指定之 <see cref="T:System.DateTime" /> 執行個體的值。</summary>
        <returns>
          如果 <paramref name="value" /> 參數等於這個執行個體的值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 目前的執行個體和`value`相等如果其<xref:System.DateTime.Ticks%2A>屬性值是否相等。 其<xref:System.DateTime.Kind%2A>屬性值不會視為在等號比較測試。  
  
 這個方法會實作<xref:System.IEquatable%601?displayProperty=nameWithType>介面，並執行稍微優於<xref:System.DateTime.Equals%2A>方法因為`value`參數沒有轉換為物件。  
  
   
  
## Examples  
 下列範例會示範<xref:System.DateTime.Equals%2A>方法。  
  
 [!code-csharp[System.DateTime.Equals-Instance#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Equals-Instance/cs/sample.cs#1)]
 [!code-vb[System.DateTime.Equals-Instance#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Equals-Instance/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Equals(System.Object)" />
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">與這個執行個體相比較的物件。</param>
        <summary>傳回值，指出這個執行個體 (Instance) 是否和指定的物件相等。</summary>
        <returns>
          如果 <see langword="true" /> 是 <paramref name="value" /> 的執行個體，並且等於這個執行個體的值，則為 <see cref="T:System.DateTime" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 目前的執行個體和`value`相等如果其<xref:System.DateTime.Ticks%2A>屬性值是否相等。 其<xref:System.DateTime.Kind%2A>屬性值不會視為在等號比較測試。  
  
   
  
## Examples  
 下列範例會示範<xref:System.DateTime.Equals%2A>方法。  
  
 [!code-csharp[System.DateTime.Equals-Instance#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Equals-Instance/cs/sample.cs#1)]
 [!code-vb[System.DateTime.Equals-Instance#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Equals-Instance/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static bool Equals (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Equals(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Equals(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equals (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Equals(DateTime t1, DateTime t2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">要比較的第一個物件。</param>
        <param name="t2">要比較的第二個物件。</param>
        <summary>傳回值，指出兩個 <see cref="T:System.DateTime" /> 執行個體是否有相同的日期和時間值。</summary>
        <returns>
          如果兩個值相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `t1` 和`t2`相等如果其<xref:System.DateTime.Ticks%2A>屬性值是否相等。 其<xref:System.DateTime.Kind%2A>屬性值不會視為在等號比較測試。  
  
   
  
## Examples  
 下列範例會示範<xref:System.DateTime.Equals%2A>方法。  
  
 [!code-cpp[DateTime.Equals#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Equals/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Equals/CS/class1.cs#1)]
 [!code-vb[DateTime.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Equals/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="FromBinary">
      <MemberSignature Language="C#" Value="public static DateTime FromBinary (long dateData);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime FromBinary(int64 dateData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.FromBinary(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromBinary (dateData As Long) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FromBinary(long dateData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateData" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="dateData">64 位元帶正負號的整數，可在 2 位元欄位中編碼 <see cref="P:System.DateTime.Kind" /> 屬性，並在 62 位元欄位中編碼 <see cref="P:System.DateTime.Ticks" /> 屬性。</param>
        <summary>還原序列化 64 位元的二進位值，並重新建立原始的序列化 <see cref="T:System.DateTime" /> 物件。</summary>
        <returns>物件，與 <see cref="T:System.DateTime" /> 方法所序列化的 <see cref="M:System.DateTime.ToBinary" /> 物件相等。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.DateTime.ToBinary%2A>方法，將目前值轉換<xref:System.DateTime>二進位值的物件。 接著，使用二進位值和<xref:System.DateTime.FromBinary%2A>方法來重新建立原始<xref:System.DateTime>物件。  
  
> [!IMPORTANT]
>  在某些情況下，<xref:System.DateTime>所傳回的值<xref:System.DateTime.FromBinary%2A>方法不是與相同原始<xref:System.DateTime>值提供給<xref:System.DateTime.ToBinary%2A>方法。 如需詳細資訊，請參閱下節中，「 本機時間調整 」。  
  
## <a name="local-time-adjustment"></a>本機時間調整  
 本地時間、 國際標準時間調整，以當地時區，由<xref:System.DateTime>結構其<xref:System.DateTime.Kind%2A>屬性具有值<xref:System.DateTimeKind.Local>。 還原本機時<xref:System.DateTime>值所產生的二進位表示法<xref:System.DateTime.ToBinary%2A>方法，<xref:System.DateTime.FromBinary%2A>方法可能會調整重建後的值，使不等於原始值。 在下列狀況下可能會發生這種情形：  
  
-   如果本機<xref:System.DateTime>物件由一個時區中序列化<xref:System.DateTime.ToBinary%2A>方法，然後在不同的時區，由還原序列化和<xref:System.DateTime.FromBinary%2A>方法，表示所產生的本機時間<xref:System.DateTime>物件會自動調整第二個時區中。  
  
     例如，請考慮<xref:System.DateTime>物件，代表本地時間為下午 3。 在美國太平洋時區中執行的應用程式太平洋時區使用<xref:System.DateTime.ToBinary%2A>方法，以將其轉換<xref:System.DateTime>二進位值的物件。 在美國太平洋時區中執行的另一個應用程式接著會使用美國東部時區<xref:System.DateTime.FromBinary%2A>方法，將二進位值，轉換至新<xref:System.DateTime>物件。 新的值<xref:System.DateTime>物件是下午 6 點，以時間為原始的下午 3 代表相同的點 值，但會以美國東部時區為準的當地時間調整。  
  
-   如果在本機的二進位表示法<xref:System.DateTime>值代表本地時區系統上的時間無效<xref:System.DateTime.FromBinary%2A>是呼叫，時間會調整，以便有效。  
  
     比方說，從標準時間到日光節約時間轉換發生的美國太平洋時區中在 2010 年 3 月 14 日的上午 2:00，時間推進到上午 3:00 的一小時 這個小時間隔內會是無效的時間，也就是不存在於這個時區的時間間隔。 下列範例顯示時的時間之內這個範圍會轉換為二進位值的<xref:System.DateTime.ToBinary%2A>方法，然後還原<xref:System.DateTime.FromBinary%2A>成為有效的時間會調整的方法，將原始值。 您可以判斷是否是特定日期和時間值可能會受限於修改傳遞至<xref:System.TimeZoneInfo.IsInvalidTime%2A?displayProperty=nameWithType>方法，為此範例會說明。  
  
     [!code-csharp[System.DateTime.FromBinary#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.frombinary/cs/frombinary1.cs#1)]
     [!code-vb[System.DateTime.FromBinary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.frombinary/vb/frombinary1.vb#1)]  
  
## <a name="version-considerations"></a>版本的考量  
 以.NET Framework 2.0 版中，啟動<xref:System.DateTime>結構所組成的私用的類型欄位，指出是否在指定的時間本地時間、 國際標準時間 (UTC) 或兩者皆否，串連的私用的刻度欄位，其中包含指定的日期和時間的 100 奈秒刻度數目。 使用可以存取的刻度數<xref:System.DateTime.Ticks%2A>使用可以存取的屬性和 theKind 欄位<xref:System.DateTime.Kind%2A>屬性。  
  
 在.NET Framework 2.0，如果您序列化之前<xref:System.DateTime>物件手動而不是使用序列化介面，例如<xref:System.Runtime.Serialization.ISerializable?displayProperty=nameWithType>，序列化的刻度資料中您所需<xref:System.DateTime>。 從.NET Framework 2.0 開始，您也必須序列化類型的資料。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="dateData" /> 小於 <see cref="F:System.DateTime.MinValue" /> 或大於 <see cref="F:System.DateTime.MaxValue" />。</exception>
        <altmember cref="M:System.DateTime.ToBinary" />
      </Docs>
    </Member>
    <Member MemberName="FromFileTime">
      <MemberSignature Language="C#" Value="public static DateTime FromFileTime (long fileTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime FromFileTime(int64 fileTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.FromFileTime(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromFileTime (fileTime As Long) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FromFileTime(long fileTime);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileTime" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="fileTime">Windows 檔案時間以刻度表示。</param>
        <summary>將指定的 Windows 檔案時間轉換成相等的本地時間。</summary>
        <returns>物件，表示 <paramref name="fileTime" /> 參數所表示日期和時間的本地時間對應項。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Windows 檔案時間是 64 位元值，表示 12:00，年 1 月 1 西元 1601年日午夜起已經過的 100 奈秒間隔數 (C.E.)國際標準時間 (UTC)。 Windows 用來記錄應用程式建立、 存取，或寫入檔案時的檔案時間。  
  
 `fileTime`參數指定的檔案時間以 100 奈秒刻度表示。  
  
 從.NET Framework 2.0 版開始，傳回值是<xref:System.DateTime>其<xref:System.DateTime.Kind%2A>屬性是<xref:System.DateTimeKind.Local?displayProperty=nameWithType>。  
  
   
  
## Examples  
 下列範例會示範<xref:System.DateTime.FromFileTime%2A>方法。  
  
 [!code-cpp[DateTime.FromFileTime#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.FromFileTime/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.FromFileTime#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.FromFileTime/CS/class1.cs#1)]
 [!code-vb[DateTime.FromFileTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.FromFileTime/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="fileTime" /> 小於 0，或表示大於 <see cref="F:System.DateTime.MaxValue" /> 的時間。</exception>
        <block subset="none" type="usage">
          <para>一般情況下，<see cref="M:System.DateTime.FromFileTime(System.Int64)" />方法還原<see cref="T:System.DateTime" />所儲存的值<see cref="M:System.DateTime.ToFileTime" />方法。 不過，在下列情況下的兩個值可能與不同：  
  
-   如果序列化和還原序列化<see cref="T:System.DateTime" />值偏高，在不同時區。 例如，如果<see cref="T:System.DateTime" />時間為下午 12:30 的值 在美國太平洋時區美加東部時區是序列化的而且在美國太平洋時區然後還原序列化太平洋時區，下午 12:30 的原始值 會調整為上午 9:30 以反映兩個時區之間的差異。  
  
-   如果<see cref="T:System.DateTime" />序列化的值代表本地時區中無效的時間。 在此情況下，<see cref="M:System.DateTime.ToFileTime" />方法調整還原<see cref="T:System.DateTime" />值，使其以當地時區表示有效的時間。  
  
     例如，從標準時間轉換到日光節約時間發生在美國太平洋時區太平洋時區在 2010 年 3 月 14 日到上午 2:00，時間推進到上午 3:00 的一小時 這個小時間隔內會是無效的時間，也就是不存在於這個時區的時間間隔。 下列範例顯示時間的年份時的長整數值轉換此範圍<see cref="M:System.DateTime.ToFileTime" />方法，然後還原<see cref="M:System.DateTime.FromFileTime(System.Int64)" />成為有效的時間會調整的方法，將原始值。 您可以判斷是否是特定日期和時間值可能會受限於修改傳遞至<see cref="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" />方法，為此範例會說明。  
  
     [!code-csharp[System.DateTime.FromFileTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.fromfiletime/cs/fromfiletime1.cs#1)]
     [!code-vb[System.DateTime.FromFileTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.fromfiletime/vb/fromfiletime1.vb#1)]</para>
        </block>
        <altmember cref="M:System.DateTime.ToUniversalTime" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="FromFileTimeUtc">
      <MemberSignature Language="C#" Value="public static DateTime FromFileTimeUtc (long fileTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime FromFileTimeUtc(int64 fileTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.FromFileTimeUtc(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromFileTimeUtc (fileTime As Long) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FromFileTimeUtc(long fileTime);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileTime" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="fileTime">Windows 檔案時間以刻度表示。</param>
        <summary>將指定的 Windows 檔案時間轉換成相等的 UTC 時間。</summary>
        <returns>物件，表示 <paramref name="fileTime" /> 參數所表示日期和時間的 UTC 時間對應項。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Windows 檔案時間是 64 位元值，表示 12:00，年 1 月 1 西元 1601年日午夜起已經過的 100 奈秒間隔數 (C.E.)國際標準時間 (UTC)。 Windows 用來記錄應用程式建立、 存取，或寫入檔案時的檔案時間。  
  
 `fileTime`參數指定的檔案時間以 100 奈秒刻度表示。  
  
 從.NET Framework 2.0 版開始，傳回值是<xref:System.DateTime>其<xref:System.DateTime.Kind%2A>屬性是<xref:System.DateTimeKind.Utc>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="fileTime" /> 小於 0，或表示大於 <see cref="F:System.DateTime.MaxValue" /> 的時間。</exception>
        <altmember cref="M:System.DateTime.ToUniversalTime" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
        <altmember cref="M:System.DateTime.FromFileTime(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FromOADate">
      <MemberSignature Language="C#" Value="public static DateTime FromOADate (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime FromOADate(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.FromOADate(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromOADate (d As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FromOADate(double d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d">OLE Automation 日期值。</param>
        <summary>傳回等於指定 OLE Automation 日期的 <see cref="T:System.DateTime" />。</summary>
        <returns>物件，表示和 <paramref name="d" /> 相同的日期和時間。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `d`參數是代表日期做為基底日期前後，午夜，30 1899 年的日數的雙精確度浮點數。 符號和整數類資料類型屬於`d`編碼日期做為正或負一天加上的位移，從 1899 年 30，以及小數部分的絕對值`d`編碼為一天加上位移，從午夜一部分的一天時間。 `d` 必須是正數 2958465.99999999 透過負數 657435.0 之間的值。  
  
 請注意，由於日期編碼的方式，有兩種代表 30 1899 年當天任何時間。 例如，-0.5，0.5 表示中午 30 1899 年，因為日期加上位移的加號或減號基底日期則從零天仍然是基底的日期，而且從午夜的半天位移中午。  
  
 請參閱<xref:System.DateTime.ToOADate%2A>如需有關 OLE Automation。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">日期不是有效的 OLE Automation 日期值。</exception>
        <altmember cref="M:System.DateTime.ToOADate" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetDateTimeFormats">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將這個執行個體的值轉換為標準日期和時間格式規範所支援的所有字串表示。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  您不應該假設多個呼叫<xref:System.DateTime.GetDateTimeFormats%2A>多載會傳回相同的資料。 根據特定多載中，如果目前的文化特性變更，使用者會覆寫個別的文化特性設定，或系統的文化特性的資料，就會更新，可以變更這個方法所傳回的資料。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDateTimeFormats">
      <MemberSignature Language="C#" Value="public string[] GetDateTimeFormats ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetDateTimeFormats() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetDateTimeFormats" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDateTimeFormats () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetDateTimeFormats();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>將這個執行個體的值轉換為標準日期和時間格式規範所支援的所有字串表示。</summary>
        <returns>字串陣列，其中的每個項目都是這個執行個體的值使用其中一個標準日期和時間格式規範所格式化的表示。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 所傳回的字串陣列<xref:System.DateTime.GetDateTimeFormats?displayProperty=nameWithType>方法相當於結合個別呼叫所傳回的字串陣列<xref:System.DateTime.GetDateTimeFormats%28System.Char%29?displayProperty=nameWithType>具有"d"、"D"、"f"、"F"、"g"、"G"、"m"、"o"、"r"、"s"、"t"、"T"、"u"、"U"和"y"標準格式字串的方法。 如需標準格式規範的詳細資訊，請參閱[標準日期和時間格式字串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)。  
  
 傳回值的每個項目會格式化為使用目前文化特性的資訊。 如需目前的文化特性的文化特性格式資訊的詳細資訊，請參閱<xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>。  
  
> [!IMPORTANT]
>  這個方法會使用區分文化特性的資料，因為您不應該假設該方法的多個呼叫會傳回相同的資料。 如果目前的文化特性變更，使用者會覆寫個別的文化特性設定，或系統的文化特性的資料，就會更新，可以變更這個方法所傳回的資料。  
  
   
  
## Examples  
 下列範例會示範<xref:System.DateTime.GetDateTimeFormats?displayProperty=nameWithType>方法。 它會顯示電腦的目前文化特性中，在此案例中是 EN-US 使用所有可能的標準日期和時間格式的日期的字串表示。  
  
 [!code-cpp[DateTime.GetDateTimeFormats#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.GetDateTimeFormats#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CS/class1.cs#1)]
 [!code-vb[DateTime.GetDateTimeFormats#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.GetDateTimeFormats/VB/class1.vb#1)]  
  
 此範例會顯示下列輸出：  
  
```  
7/28/2009  
7/28/09  
07/28/09  
07/28/2009  
09/07/28  
2009-07-28  
28-Jul-09  
Tuesday, July 28, 2009  
July 28, 2009  
Tuesday, 28 July, 2009  
28 July, 2009  
Tuesday, July 28, 2009 5:23 AM  
Tuesday, July 28, 2009 05:23 AM  
Tuesday, July 28, 2009 5:23  
Tuesday, July 28, 2009 05:23  
July 28, 2009 5:23 AM  
July 28, 2009 05:23 AM  
July 28, 2009 5:23  
July 28, 2009 05:23  
Tuesday, 28 July, 2009 5:23 AM  
Tuesday, 28 July, 2009 05:23 AM  
Tuesday, 28 July, 2009 5:23  
Tuesday, 28 July, 2009 05:23  
28 July, 2009 5:23 AM  
28 July, 2009 05:23 AM  
28 July, 2009 5:23  
28 July, 2009 05:23  
Tuesday, July 28, 2009 5:23:15 AM  
Tuesday, July 28, 2009 05:23:15 AM  
Tuesday, July 28, 2009 5:23:15  
Tuesday, July 28, 2009 05:23:15  
July 28, 2009 5:23:15 AM  
July 28, 2009 05:23:15 AM  
July 28, 2009 5:23:15  
July 28, 2009 05:23:15  
Tuesday, 28 July, 2009 5:23:15 AM  
Tuesday, 28 July, 2009 05:23:15 AM  
Tuesday, 28 July, 2009 5:23:15  
Tuesday, 28 July, 2009 05:23:15  
28 July, 2009 5:23:15 AM  
28 July, 2009 05:23:15 AM  
28 July, 2009 5:23:15  
28 July, 2009 05:23:15  
7/28/2009 5:23 AM  
7/28/2009 05:23 AM  
7/28/2009 5:23  
7/28/2009 05:23  
7/28/09 5:23 AM  
7/28/09 05:23 AM  
7/28/09 5:23  
7/28/09 05:23  
07/28/09 5:23 AM  
07/28/09 05:23 AM  
07/28/09 5:23  
07/28/09 05:23  
07/28/2009 5:23 AM  
07/28/2009 05:23 AM  
07/28/2009 5:23  
07/28/2009 05:23  
09/07/28 5:23 AM  
09/07/28 05:23 AM  
09/07/28 5:23  
09/07/28 05:23  
2009-07-28 5:23 AM  
2009-07-28 05:23 AM  
2009-07-28 5:23  
2009-07-28 05:23  
28-Jul-09 5:23 AM  
28-Jul-09 05:23 AM  
28-Jul-09 5:23  
28-Jul-09 05:23  
7/28/2009 5:23:15 AM  
7/28/2009 05:23:15 AM  
7/28/2009 5:23:15  
7/28/2009 05:23:15  
7/28/09 5:23:15 AM  
7/28/09 05:23:15 AM  
7/28/09 5:23:15  
7/28/09 05:23:15  
07/28/09 5:23:15 AM  
07/28/09 05:23:15 AM  
07/28/09 5:23:15  
07/28/09 05:23:15  
07/28/2009 5:23:15 AM  
07/28/2009 05:23:15 AM  
07/28/2009 5:23:15  
07/28/2009 05:23:15  
09/07/28 5:23:15 AM  
09/07/28 05:23:15 AM  
09/07/28 5:23:15  
09/07/28 05:23:15  
2009-07-28 5:23:15 AM  
2009-07-28 05:23:15 AM  
2009-07-28 5:23:15  
2009-07-28 05:23:15  
28-Jul-09 5:23:15 AM  
28-Jul-09 05:23:15 AM  
28-Jul-09 5:23:15  
28-Jul-09 05:23:15  
July 28  
July 28  
2009-07-28T05:23:15.0160000  
2009-07-28T05:23:15.0160000  
Tue, 28 Jul 2009 05:23:15 GMT  
Tue, 28 Jul 2009 05:23:15 GMT  
2009-07-28T05:23:15  
5:23 AM  
05:23 AM  
5:23  
05:23  
5:23:15 AM  
05:23:15 AM  
5:23:15  
05:23:15  
2009-07-28 05:23:15Z  
Tuesday, July 28, 2009 12:23:15 PM  
Tuesday, July 28, 2009 12:23:15 PM  
Tuesday, July 28, 2009 12:23:15  
Tuesday, July 28, 2009 12:23:15  
July 28, 2009 12:23:15 PM  
July 28, 2009 12:23:15 PM  
July 28, 2009 12:23:15  
July 28, 2009 12:23:15  
Tuesday, 28 July, 2009 12:23:15 PM  
Tuesday, 28 July, 2009 12:23:15 PM  
Tuesday, 28 July, 2009 12:23:15  
Tuesday, 28 July, 2009 12:23:15  
28 July, 2009 12:23:15 PM  
28 July, 2009 12:23:15 PM  
28 July, 2009 12:23:15  
28 July, 2009 12:23:15  
July, 2009  
July, 2009  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDateTimeFormats">
      <MemberSignature Language="C#" Value="public string[] GetDateTimeFormats (char format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetDateTimeFormats(char format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetDateTimeFormats(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDateTimeFormats (format As Char) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetDateTimeFormats(char format);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="format">標準日期和時間格式字串。</param>
        <summary>將這個執行個體的值轉換為指定的標準日期和時間格式規範所支援的所有字串表示。</summary>
        <returns>字串陣列，其中的每個項目都是這個執行個體的值使用 <paramref name="format" /> 標準日期和時間格式規範所格式化的表示。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `format`參數可以是任何一個標準日期和時間格式規範。 這些包括 d、 D、 f、 F、 g、 G、 M （或 m），O （或 o），R （或 r） s、 t、 T、 u、 U 和 Y （或 y）。 如需詳細資訊，請參閱[標準日期和時間格式字串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)。  
  
 傳回值的每個項目會格式化為使用目前文化特性的資訊。 如需目前的文化特性的文化特性格式資訊的詳細資訊，請參閱<xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>。  
  
> [!IMPORTANT]
>  這個方法會使用區分文化特性的資料，因為您不應該假設該方法的多個呼叫會傳回相同的資料。 如果目前的文化特性變更，使用者會覆寫個別的文化特性設定，或系統的文化特性的資料，就會更新，可以變更這個方法所傳回的資料。  
  
   
  
## Examples  
 下列範例會示範<xref:System.DateTime.GetDateTimeFormats%28System.Char%29>方法。 它會顯示完整日期格式規範 ("D") 會使用目前文化特性的日期的字串表示。  
  
 [!code-csharp[DateTime.GetDateTimeFormats#3](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CS/class1.cs#3)]
 [!code-vb[DateTime.GetDateTimeFormats#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.GetDateTimeFormats/VB/class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> 不是有效的標準日期和時間格式規範字元。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetDateTimeFormats">
      <MemberSignature Language="C#" Value="public string[] GetDateTimeFormats (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetDateTimeFormats(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetDateTimeFormats(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDateTimeFormats (provider As IFormatProvider) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetDateTimeFormats(IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">物件，提供關於這個執行個體的特定文化特性格式資訊。</param>
        <summary>將這個執行個體的值轉換為標準日期和時間格式規範和指定的特定文化特性格式資訊所支援的所有字串表示。</summary>
        <returns>字串陣列，其中的每個項目都是這個執行個體的值使用其中一個標準日期和時間格式規範所格式化的表示。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 所傳回的字串陣列<xref:System.DateTime.GetDateTimeFormats%28System.IFormatProvider%29?displayProperty=nameWithType>方法相當於結合個別呼叫所傳回的字串陣列<xref:System.DateTime.GetDateTimeFormats%28System.Char%2CSystem.IFormatProvider%29?displayProperty=nameWithType>具有"d"、"D"、"f"、"F"、"g"、"G"、"m"、"o"、"r"、"s"、"t"、"T"、"u"、"U"和"y"標準格式字串的方法。 如需標準格式規範的詳細資訊，請參閱[標準日期和時間格式字串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)。  
  
 傳回值的每個項目使用所提供的特定文化特性資訊進行格式化`provider`。  
  
> [!IMPORTANT]
>  這個方法會使用區分文化特性的資料，因為您不應該假設該方法的多個呼叫會傳回相同的資料，除非`provider`是<xref:System.Globalization.CultureInfo>物件，代表文化特性而異。 如果使用者覆寫個別文化特性設定，可以變更這個方法所傳回的資料`provider`或是系統的文化特性的資料更新發生`provider`。  
  
   
  
## Examples  
 下列範例會示範<xref:System.DateTime.GetDateTimeFormats%28System.IFormatProvider%29?displayProperty=nameWithType>方法。 它會顯示的日期使用 FR-FR 文化特性的所有可能的標準日期和時間格式的字串表示。  
  
 [!code-cpp[DateTime.GetDateTimeFormats#2](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CPP/class1.cpp#2)]
 [!code-csharp[DateTime.GetDateTimeFormats#2](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CS/class1.cs#2)]
 [!code-vb[DateTime.GetDateTimeFormats#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.GetDateTimeFormats/VB/class1.vb#2)]  
  
 此範例會顯示下列輸出：  
  
```  
28/07/2009  
28/07/09  
28.07.09  
28-07-09  
2009-07-28  
mardi 28 juillet 2009  
28 juil. 09  
28 juillet 2009  
mardi 28 juillet 2009 05:23  
mardi 28 juillet 2009 5:23  
mardi 28 juillet 2009 05.23  
mardi 28 juillet 2009 05 h 23  
28 juil. 09 05:23  
28 juil. 09 5:23  
28 juil. 09 05.23  
28 juil. 09 05 h 23  
28 juillet 2009 05:23  
28 juillet 2009 5:23  
28 juillet 2009 05.23  
28 juillet 2009 05 h 23  
mardi 28 juillet 2009 05:23:15  
mardi 28 juillet 2009 5:23:15  
mardi 28 juillet 2009 05.23  
mardi 28 juillet 2009 05 h 23  
28 juil. 09 05:23:15  
28 juil. 09 5:23:15  
28 juil. 09 05.23  
28 juil. 09 05 h 23  
28 juillet 2009 05:23:15  
28 juillet 2009 5:23:15  
28 juillet 2009 05.23  
28 juillet 2009 05 h 23  
28/07/2009 05:23  
28/07/2009 5:23  
28/07/2009 05.23  
28/07/2009 05 h 23  
28/07/09 05:23  
28/07/09 5:23  
28/07/09 05.23  
28/07/09 05 h 23  
28.07.09 05:23  
28.07.09 5:23  
28.07.09 05.23  
28.07.09 05 h 23  
28-07-09 05:23  
28-07-09 5:23  
28-07-09 05.23  
28-07-09 05 h 23  
2009-07-28 05:23  
2009-07-28 5:23  
2009-07-28 05.23  
2009-07-28 05 h 23  
28/07/2009 05:23:15  
28/07/2009 5:23:15  
28/07/2009 05.23  
28/07/2009 05 h 23  
28/07/09 05:23:15  
28/07/09 5:23:15  
28/07/09 05.23  
28/07/09 05 h 23  
28.07.09 05:23:15  
28.07.09 5:23:15  
28.07.09 05.23  
28.07.09 05 h 23  
28-07-09 05:23:15  
28-07-09 5:23:15  
28-07-09 05.23  
28-07-09 05 h 23  
2009-07-28 05:23:15  
2009-07-28 5:23:15  
2009-07-28 05.23  
2009-07-28 05 h 23  
28 juillet  
28 juillet  
2009-07-28T05:23:15.0160000  
2009-07-28T05:23:15.0160000  
Tue, 28 Jul 2009 05:23:15 GMT  
Tue, 28 Jul 2009 05:23:15 GMT  
2009-07-28T05:23:15  
05:23  
5:23  
05.23  
05 h 23  
05:23:15  
5:23:15  
05.23  
05 h 23  
2009-07-28 05:23:15Z  
mardi 28 juillet 2009 12:23:15  
mardi 28 juillet 2009 12:23:15  
mardi 28 juillet 2009 12.23  
mardi 28 juillet 2009 12 h 23  
28 juil. 09 12:23:15  
28 juil. 09 12:23:15  
28 juil. 09 12.23  
28 juil. 09 12 h 23  
28 juillet 2009 12:23:15  
28 juillet 2009 12:23:15  
28 juillet 2009 12.23  
28 juillet 2009 12 h 23  
juillet 2009  
juillet 2009  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDateTimeFormats">
      <MemberSignature Language="C#" Value="public string[] GetDateTimeFormats (char format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetDateTimeFormats(char format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetDateTimeFormats(System.Char,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDateTimeFormats (format As Char, provider As IFormatProvider) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetDateTimeFormats(char format, IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Char" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">日期和時間格式字串。</param>
        <param name="provider">物件，提供關於這個執行個體的特定文化特性格式資訊。</param>
        <summary>將這個執行個體的值轉換為指定的標準日期和時間格式規範和特定文化特性格式資訊所支援的所有字串表示。</summary>
        <returns>字串陣列，其中的每個項目都是這個執行個體的值使用其中一個標準日期和時間格式規範所格式化的表示。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 格式參數可以是任何的標準日期和時間格式規範。 這些包括 d、 D、 f、 F、 g、 G、 M （或 m），O （或 o），R （或 r） s、 t、 T、 u、 U 和 Y （或 y）。 如需詳細資訊，請參閱[標準日期和時間格式字串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)。  
  
 傳回值的每個項目使用所提供的特定文化特性資訊進行格式化`provider`。  
  
> [!IMPORTANT]
>  這個方法會使用區分文化特性的資料，因為您不應該假設該方法的多個呼叫會傳回相同的資料，除非`provider`是<xref:System.Globalization.CultureInfo>物件，代表文化特性而異。 如果使用者覆寫個別文化特性設定，可以變更這個方法所傳回的資料`provider`或是系統的文化特性的資料更新發生`provider`。  
  
   
  
## Examples  
 下列範例會示範<xref:System.DateTime.GetDateTimeFormats%28System.Char%2CSystem.IFormatProvider%29>方法。 它會顯示日期的字串表示使用 FR-FR 文化特性的簡短日期格式規範 ("d")。  
  
 [!code-csharp[DateTime.GetDateTimeFormats#4](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CS/class1.cs#4)]
 [!code-vb[DateTime.GetDateTimeFormats#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.GetDateTimeFormats/VB/class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> 不是有效的標準日期和時間格式規範字元。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回這個執行個體的雜湊碼。</summary>
        <returns>32 位元帶正負號的整數雜湊碼。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTypeCode">
      <MemberSignature Language="C#" Value="public TypeCode GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.TypeCode GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTypeCode () As TypeCode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual TypeCode GetTypeCode();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回實值類型 <see cref="T:System.TypeCode" /> 的 <see cref="T:System.DateTime" />。</summary>
        <returns>列舉常數 <see cref="F:System.TypeCode.DateTime" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Hour">
      <MemberSignature Language="C#" Value="public int Hour { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Hour" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Hour" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Hour As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Hour { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得這個執行個體所表示日期的小時元件。</summary>
        <value>小時元件，以 0 到 23 之間的值表示。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.DateTime.Hour%2A>屬性一定使用 24 小時制來表示。 若要擷取的字串表示的日期和時間使用 12 小時制的小時，請呼叫<xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType>或<xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>使用"h"自訂格式規範的方法。 例如:   
  
 [!code-csharp[System.DateTime.Hour#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Hour/cs/Hour1.cs#1)]
 [!code-vb[System.DateTime.Hour#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Hour/vb/Hour1.vb#1)]  
  
   
  
## Examples  
 下列範例會示範<xref:System.DateTime.Hour%2A>屬性。  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public bool IsDaylightSavingTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsDaylightSavingTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.IsDaylightSavingTime" />
      <MemberSignature Language="VB.NET" Value="Public Function IsDaylightSavingTime () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsDaylightSavingTime();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>指出這個 <see cref="T:System.DateTime" /> 執行個體是否在目前時區的日光節約時間範圍內。</summary>
        <returns>
          當 <see langword="true" /> 屬性的值為 <see cref="P:System.DateTime.Kind" /> 或 <see cref="F:System.DateTimeKind.Local" />，且這個 <see cref="F:System.DateTimeKind.Unspecified" /> 執行個體的值位於當地時區的日光節約時間範圍內時為 <see cref="T:System.DateTime" />；當 <see langword="false" /> 是 <see cref="P:System.DateTime.Kind" /> 時為 <see cref="F:System.DateTimeKind.Utc" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會判斷是否目前<xref:System.DateTime>值落在日光節約時間範圍內的當地時區，這由<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>屬性。 您可以判斷是否時區支援日光節約時間擷取的值及其<xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A?displayProperty=nameWithType>屬性。 觀察日光節約時間的時區，您可以判斷所擷取的日光節約時間的來回轉換發生時<xref:System.TimeZoneInfo.AdjustmentRule?displayProperty=nameWithType>時區所傳回的陣列<xref:System.TimeZoneInfo.GetAdjustmentRules%2A?displayProperty=nameWithType>屬性。  
  
 如果目前<xref:System.DateTime>值代表本地時區的模稜兩可或無效的時間，則方法會傳回`false`。  
  
 在[!INCLUDE[winxp](~/includes/winxp-md.md)]系統<xref:System.DateTime.IsDaylightSavingTime%2A>方法會判斷目前的執行個體是否日光節約時間時，會辨識只在目前的調整規則。 如此一來，此方法可能不正確地回報目前的執行個體是否為目前的調整規則生效之前的時間日光節約時間。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="IsLeapYear">
      <MemberSignature Language="C#" Value="public static bool IsLeapYear (int year);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLeapYear(int32 year) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.IsLeapYear(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsLeapYear (year As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsLeapYear(int year);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">4 位數的年份。</param>
        <summary>傳回指定年份是否為閏年的指示。</summary>
        <returns>
          當 <see langword="true" /> 是閏年時為 <paramref name="year" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `year` 指定為 4 位數基底 10 數值。例如，1996年。  
  
 `year` 一律解譯為西曆日曆中之年。 若要判斷特定年份是否為閏年中其他行事曆，請呼叫 行事曆物件的`IsLeapYear`方法。  
  
   
  
## Examples  
 下列範例會使用<xref:System.DateTime.IsLeapYear%2A>方法來判斷哪些之間 1994年和 2014 年都是閏年。 此範例也說明結果時<xref:System.DateTime.AddYears%2A>方法用來將一年加入至為閏日。  
  
 [!code-csharp[System.DateTime.IsLeapYear#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.IsLeapYear/cs/IsLeapYear1.cs#1)]
 [!code-vb[System.DateTime.IsLeapYear#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.IsLeapYear/vb/IsLeapYear1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> 小於 1 或大於 9999。</exception>
      </Docs>
    </Member>
    <Member MemberName="Kind">
      <MemberSignature Language="C#" Value="public DateTimeKind Kind { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTimeKind Kind" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Kind" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Kind As DateTimeKind" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTimeKind Kind { DateTimeKind get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeKind</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，指出這個執行個體表示的時間是根據本地時間、國際標準時間 (UTC)，或兩者皆非。</summary>
        <value>一個列舉值，表示目前時間表示的是什麼時間。 預設值為 <see cref="F:System.DateTimeKind.Unspecified" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以明確設定<xref:System.DateTime.Kind%2A>屬性的新<xref:System.DateTime>為特定值<xref:System.DateTimeKind>藉由呼叫值<xref:System.DateTime.SpecifyKind%2A>方法。  
  
 <xref:System.DateTime.Kind%2A>屬性可讓<xref:System.DateTime>以清楚地反映 Coordinated Universal Time (UTC) 或本地時間的值。 相反地，<xref:System.DateTimeOffset>結構可以明確地反映任何時區中的任何時間做為單一點的時間。  
  
   
  
## Examples  
 下列範例會使用<xref:System.DateTime.SpecifyKind%2A>方法，示範如何<xref:System.DateTime.Kind%2A>屬性會影響<xref:System.DateTime.ToLocalTime%2A>和<xref:System.DateTime.ToUniversalTime%2A>轉換方法。  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.SpecifyKind(System.DateTime,System.DateTimeKind)" />
      </Docs>
    </Member>
    <Member MemberName="MaxValue">
      <MemberSignature Language="C#" Value="public static readonly DateTime MaxValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTime MaxValue" />
      <MemberSignature Language="DocId" Value="F:System.DateTime.MaxValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MaxValue As DateTime " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTime MaxValue;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>代表 <see cref="T:System.DateTime" /> 最大的可能值。 此欄位為唯讀。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個常數的值相當於 23:59:59.9999999 UTC，年 12 月 31 日西曆，只有一個 100 奈秒刻度之前 00:00:00 UTC，10000 年 1 月 1 日到 9999。  
  
 部分月曆，例如<xref:System.Globalization.ThaiBuddhistCalendar>，支援早於上方的日期範圍<xref:System.DateTime.MaxValue>。 在這些情況下，嘗試存取<xref:System.DateTime.MaxValue>指派變數或格式化和剖析作業可能會擲回<xref:System.ArgumentOutOfRangeException>。 而擷取的值不是<xref:System.DateTime.MaxValue?displayProperty=nameWithType>，您可以擷取從指定的文化特性最有效的日期值的<xref:System.Globalization.Calendar.MaxSupportedDateTime?displayProperty=nameWithType>屬性。  
  
   
  
## Examples  
 下列範例會具現化<xref:System.DateTime>物件，並傳遞其建構函式<xref:System.Int64>值代表微秒刻度數。 叫用之前建構函式，範例會確保此值是大於或等於`DateTime.MinValue.Ticks`且小於或等於`DateTime.MaxValue.Ticks`。 如果沒有，就會擲回<xref:System.ArgumentOutOfRangeException>。  
  
 [!code-csharp[System.DateTime.MinValue#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.MinValue/cs/MinValue.cs#2)]
 [!code-vb[System.DateTime.MinValue#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.MinValue/vb/MinValue.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.DateTime.MinValue" />
      </Docs>
    </Member>
    <Member MemberName="Millisecond">
      <MemberSignature Language="C#" Value="public int Millisecond { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Millisecond" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Millisecond" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Millisecond As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Millisecond { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得這個執行個體所表示日期的毫秒元件。</summary>
        <value>毫秒元件，以 0 到 999 之間的值表示。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以顯示的字串表示<xref:System.DateTime.Millisecond%2A>"fff"格式規範的屬性。 例如，下列程式碼會顯示日期和時間，在主控台中包含的毫秒數的字串。  
  
 [!code-csharp[System.DateTime.Millisecond#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Millisecond/cs/Millisecond.cs#1)]
 [!code-vb[System.DateTime.Millisecond#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Millisecond/vb/Millisecond.vb#1)]  
  
 您也可以使用"o"標準格式規範來顯示毫秒數元件，以及日期和時間值的其他元件。 例如:   
  
 [!code-csharp[System.DateTime.Millisecond#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Millisecond/cs/Millisecond.cs#2)]
 [!code-vb[System.DateTime.Millisecond#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Millisecond/vb/Millisecond.vb#2)]  
  
 不過，"o"格式規範是較少往返或儲存顯示比<xref:System.DateTime>值。 您也可以使用自訂格式字串，如下列範例所示，以顯示毫秒為單位，以及其他的日期和時間元件。  
  
 [!code-csharp[System.DateTime.Millisecond#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Millisecond/cs/Millisecond.cs#3)]
 [!code-vb[System.DateTime.Millisecond#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Millisecond/vb/Millisecond.vb#3)]  
  
   
  
## Examples  
 下列範例會示範<xref:System.DateTime.Millisecond%2A>屬性。  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Minute">
      <MemberSignature Language="C#" Value="public int Minute { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Minute" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Minute" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Minute As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Minute { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得這個執行個體所表示日期的分鐘元件。</summary>
        <value>分鐘元件，以 0 到 59 之間的值表示。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列範例會示範<xref:System.DateTime.Minute%2A>屬性。  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinValue">
      <MemberSignature Language="C#" Value="public static readonly DateTime MinValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTime MinValue" />
      <MemberSignature Language="DocId" Value="F:System.DateTime.MinValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MinValue As DateTime " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTime MinValue;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>代表 <see cref="T:System.DateTime" /> 最小的可能值。 此欄位為唯讀。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個常數的值相當於 00:00:00.0000000 UTC，年 1 月 1 日 0001 西曆。  
  
 <xref:System.DateTime.MinValue> 定義日期和時間所指派到未初始化<xref:System.DateTime>變數。 下列範例將說明這點。  
  
 [!code-csharp[System.DateTime.MinValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.MinValue/cs/MinValue.cs#1)]
 [!code-vb[System.DateTime.MinValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.MinValue/vb/MinValue.vb#1)]  
  
 <xref:System.DateTime.MinValue>和<xref:System.DateTime.MaxValue>屬性可以用來確保值位於支援的範圍內再傳遞給<xref:System.DateTime>建構函式。 範例 > 一節中的程式碼說明這個的使用方式。  
  
   
  
## Examples  
 下列範例會具現化<xref:System.DateTime>物件，並傳遞其建構函式<xref:System.Int64>值代表微秒刻度數。 叫用之前建構函式，範例會確保此值是大於或等於`DateTime.MinValue.Ticks`且小於或等於`DateTime.MaxValue.Ticks`。 如果沒有，就會擲回<xref:System.ArgumentOutOfRangeException>。  
  
 [!code-csharp[System.DateTime.MinValue#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.MinValue/cs/MinValue.cs#2)]
 [!code-vb[System.DateTime.MinValue#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.MinValue/vb/MinValue.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Month">
      <MemberSignature Language="C#" Value="public int Month { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Month" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Month" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Month As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Month { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得這個執行個體所表示日期的月份元件。</summary>
        <value>月份元件，以 1 到 12 之間的值表示。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列範例會示範<xref:System.DateTime.Month%2A>屬性。  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Now">
      <MemberSignature Language="C#" Value="public static DateTime Now { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime Now" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Now" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Now As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime Now { DateTime get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得 <see cref="T:System.DateTime" /> 物件，此物件會設定為這部電腦上目前的日期和時間，以本地時間表示。</summary>
        <value>物件，其值為目前的本地日期和時間。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.Now%2A>屬性會傳回<xref:System.DateTime>值，表示目前的日期和時間在本機電腦上的。 請注意會有差異<xref:System.DateTime>值，表示 0001 年 1 月 1 日午夜起已經過的刻度數的字串表示法，該<xref:System.DateTime>表示的日期和時間值中的值特定的特定文化特性的格式。 如需格式的日期和時間值的資訊，請參閱<xref:System.DateTime.ToString%2A>方法。 下列範例會顯示簡短日期和時間字串中的特定文化特性格式數字。  
  
 [!code-cpp[System.DateTime.Now#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.datetime.now/cpp/now1.cpp#2)]
 [!code-csharp[System.DateTime.Now#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.now/cs/now1.cs#2)]
 [!code-vb[System.DateTime.Now#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.now/vb/now1.vb#2)]  
  
 這個屬性的解析取決於系統計時器，取決於基礎作業系統。 它通常會以 0.5 和 15 毫秒之間。 如此一來，重複呼叫<xref:System.DateTime.Now%2A>在短時間間隔內，例如迴圈、 內嵌的屬性可能會傳回相同的值。  
  
 <xref:System.DateTime.Now%2A>屬性經常用來測量效能。 不過，由於其低的解析度不適合作為效能評定工具。 較佳替代方式是使用<xref:System.Diagnostics.Stopwatch>類別。  
  
 從.NET Framework 2.0 版開始，傳回值是<xref:System.DateTime>其<xref:System.DateTime.Kind%2A>屬性會傳回<xref:System.DateTimeKind.Local?displayProperty=nameWithType>。  
  
> [!NOTE]
>  您也可以使用<xref:System.DateTimeOffset.Now%2A?displayProperty=nameWithType>屬性，以擷取目前的本地日期和時間。 它可讓以明確表示為單一點的時間，接著該時間使值成為可攜式跨電腦的本地時間。  
  
   
  
## Examples  
 下列範例會使用<xref:System.DateTime.Now%2A>和<xref:System.DateTime.UtcNow%2A>屬性，以擷取目前的本地日期和時間和目前的通用協調 (UTC) 日期和時間。 接著會使用數字的文化特性的格式設定慣例的值，以及顯示字串，其<xref:System.DateTime.Kind%2A>屬性。  
  
 [!code-cpp[System.DateTime.Now#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.datetime.now/cpp/now2.cpp#3)]
 [!code-csharp[System.DateTime.Now#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.now/cs/now2.cs#3)]
 [!code-vb[System.DateTime.Now#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.now/vb/now2.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.Now" />
        <altmember cref="P:System.DateTime.UtcNow" />
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static DateTime operator + (DateTime d, TimeSpan t);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTime op_Addition(valuetype System.DateTime d, valuetype System.TimeSpan t) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Addition(System.DateTime,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (d As DateTime, t As TimeSpan) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime operator +(DateTime d, TimeSpan t);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.DateTime" />
        <Parameter Name="t" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="d">要加上的日期和時間值。</param>
        <param name="t">要加入的時間間隔。</param>
        <summary>將指定的日期和時間加上指定的時間間隔，產生新的日期和時間。</summary>
        <returns>物件，這個物件是 <paramref name="d" /> 和 <paramref name="t" /> 之值的總和。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[這個運算子的對等方法是 <xref:System.DateTime.Add%28System.TimeSpan%29?displayProperty=nameWithType>  
  
## Examples  
 下列範例會示範加法運算子。  
  
 [!code-cpp[DateTime Operators#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime Operators/CPP/class1.cpp#1)]
 [!code-csharp[DateTime Operators#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime Operators/CS/class1.cs#1)]
 [!code-vb[DateTime Operators#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime Operators/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTime" /> 小於 <see cref="F:System.DateTime.MinValue" /> 或大於 <see cref="F:System.DateTime.MaxValue" />。</exception>
        <altmember cref="M:System.DateTime.Add(System.TimeSpan)" />
        <altmember cref="T:System.TimeSpan" />
        <altmember cref="P:System.DateTime.Ticks" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (DateTime d1, DateTime d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.DateTime d1, valuetype System.DateTime d2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Equality(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (d1 As DateTime, d2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(DateTime d1, DateTime d2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.DateTime" />
        <Parameter Name="d2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="d1">要比較的第一個物件。</param>
        <param name="d2">要比較的第二個物件。</param>
        <summary>判斷 <see cref="T:System.DateTime" /> 的兩個指定執行個體是否相等。</summary>
        <returns>
          如果 <paramref name="d1" /> 和 <paramref name="d2" /> 表示相同的日期和時間，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.op_Equality%2A>運算子判斷兩個<xref:System.DateTime>藉由比較其刻度數目值是否相等。 比較之前<xref:System.DateTime>物件，請確定物件代表相同的時區中的時間。 只要比較其 <xref:System.DateTime.Kind%2A> 屬性的值，即可做到這一點。  
  
 這個運算子的對等方法是 <xref:System.DateTime.Equals%28System.Object%29?displayProperty=nameWithType>  
  
## Examples  
 下列範例會示範等號比較運算子。  
  
 [!code-cpp[DateTime Operators#2](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime Operators/CPP/class1.cpp#2)]
 [!code-csharp[DateTime Operators#2](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime Operators/CS/class1.cs#2)]
 [!code-vb[DateTime Operators#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime Operators/VB/class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Equals(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool operator &gt; (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_GreaterThan(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt; (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;(DateTime t1, DateTime t2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">要比較的第一個物件。</param>
        <param name="t2">要比較的第二個物件。</param>
        <summary>判斷某個指定的 <see cref="T:System.DateTime" /> 是否晚於另一個指定的 <see cref="T:System.DateTime" />。</summary>
        <returns>
          當 <see langword="true" /> 晚於 <paramref name="t1" /> 時為 <paramref name="t2" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.op_GreaterThan%2A>運算子會判斷兩個之間的關聯性<xref:System.DateTime>藉由比較其刻度數目的值。 比較之前<xref:System.DateTime>物件，請確定物件代表相同的時區中的時間。 只要比較其 <xref:System.DateTime.Kind%2A> 屬性的值，即可做到這一點。  
  
 這個運算子的對等方法是 <xref:System.DateTime.Compare%28System.DateTime%2CSystem.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &gt;= (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_GreaterThanOrEqual(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt;= (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;=(DateTime t1, DateTime t2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">要比較的第一個物件。</param>
        <param name="t2">要比較的第二個物件。</param>
        <summary>判斷某個指定之 <see cref="T:System.DateTime" /> 表示的是同於還是晚於另一個指定之 <see cref="T:System.DateTime" /> 的日期和時間。</summary>
        <returns>
          如果 <paramref name="t1" /> 與 <paramref name="t2" /> 同時或更晚則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.op_GreaterThanOrEqual%2A>運算子會判斷兩個之間的關聯性<xref:System.DateTime>藉由比較其刻度數目的值。 比較之前<xref:System.DateTime>物件，請確定物件代表相同的時區中的時間。 只要比較其 <xref:System.DateTime.Kind%2A> 屬性的值，即可做到這一點。  
  
 這個運算子的對等方法是 <xref:System.DateTime.Compare%28System.DateTime%2CSystem.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (DateTime d1, DateTime d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.DateTime d1, valuetype System.DateTime d2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Inequality(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (d1 As DateTime, d2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(DateTime d1, DateTime d2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.DateTime" />
        <Parameter Name="d2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="d1">要比較的第一個物件。</param>
        <param name="d2">要比較的第二個物件。</param>
        <summary>判斷 <see cref="T:System.DateTime" /> 的兩個指定執行個體是否不相等。</summary>
        <returns>
          當 <see langword="true" /> 和 <paramref name="d1" /> 不代表相同的日期和時間時為 <paramref name="d2" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.op_Inequality%2A>運算子判斷兩個<xref:System.DateTime>值是否不相等比較它們的刻度數。 比較之前<xref:System.DateTime>物件，請確定物件代表相同的時區中的時間。 只要比較其 <xref:System.DateTime.Kind%2A> 屬性的值，即可做到這一點。  
  
 這個運算子的對等方法是 <xref:System.DateTime.Equals%28System.Object%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool operator &lt; (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_LessThan(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt; (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;(DateTime t1, DateTime t2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">要比較的第一個物件。</param>
        <param name="t2">要比較的第二個物件。</param>
        <summary>判斷某個指定的 <see cref="T:System.DateTime" /> 是否早於另一個指定的 <see cref="T:System.DateTime" />。</summary>
        <returns>
          當 <see langword="true" /> 早於 <paramref name="t1" /> 時為 <paramref name="t2" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.op_LessThan%2A>運算子會判斷兩個之間的關聯性<xref:System.DateTime>藉由比較其刻度數目的值。 比較之前<xref:System.DateTime>物件，請確定物件代表相同的時區中的時間。 只要比較其 <xref:System.DateTime.Kind%2A> 屬性的值，即可做到這一點。  
  
 這個運算子的對等方法是 <xref:System.DateTime.Compare%28System.DateTime%2CSystem.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &lt;= (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_LessThanOrEqual(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;= (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;=(DateTime t1, DateTime t2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">要比較的第一個物件。</param>
        <param name="t2">要比較的第二個物件。</param>
        <summary>判斷某個指定之 <see cref="T:System.DateTime" /> 表示的是同於還是早於另一個指定之 <see cref="T:System.DateTime" /> 的日期和時間。</summary>
        <returns>
          當 <paramref name="t1" /> 與 <paramref name="t2" /> 為同時或更早時為 <see langword="true" />；否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.op_LessThanOrEqual%2A>運算子會判斷兩個之間的關聯性<xref:System.DateTime>藉由比較其刻度數目的值。 比較之前<xref:System.DateTime>物件，請確定物件代表相同的時區中的時間。 只要比較其 <xref:System.DateTime.Kind%2A> 屬性的值，即可做到這一點。  
  
 這個運算子的對等方法是 <xref:System.DateTime.Compare%28System.DateTime%2CSystem.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Subtraction">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>從指定的 <see cref="T:System.DateTime" /> 減去指定的 <see cref="T:System.DateTime" /> 或 <see cref="T:System.TimeSpan" />。</summary>
        <altmember cref="M:System.DateTime.Subtract(System.DateTime)" />
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static TimeSpan operator - (DateTime d1, DateTime d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.TimeSpan op_Subtraction(valuetype System.DateTime d1, valuetype System.DateTime d2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Subtraction(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (d1 As DateTime, d2 As DateTime) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan operator -(DateTime d1, DateTime d2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.DateTime" />
        <Parameter Name="d2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="d1">位於減號左邊的日期和時間值 (被減數)。</param>
        <param name="d2">位於減號右邊的日期和時間值 (減數)。</param>
        <summary>將另一個指定的日期和時間減去指定的日期和時間，並傳回時間間隔。</summary>
        <returns>
          <paramref name="d1" /> 和 <paramref name="d2" /> 之間的時間間隔，也就是 <paramref name="d1" /> 減 <paramref name="d2" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.op_Subtraction%28System.DateTime%2CSystem.DateTime%29>方法不會考慮值<xref:System.DateTime.Kind%2A>兩個屬性<xref:System.DateTime>值時執行減法運算。 之前減去<xref:System.DateTime>物件，請確認物件是否代表相同的時區中的時間。 否則，結果會包含時區之間的差異。  
  
> [!NOTE]
>  <xref:System.DateTimeOffset.op_Subtraction%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>方法就會考慮執行減法運算時的時區之間的差異。  
  
 這個運算子的對等方法是 <xref:System.DateTime.Subtract%28System.DateTime%29?displayProperty=nameWithType>  
  
## Examples  
 下列範例會示範<xref:System.DateTime.Subtract%2A>方法和減法運算子。  
  
 [!code-cpp[DateTime.Subtraction#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Subtraction/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Subtraction#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Subtraction/CS/class1.cs#1)]
 [!code-vb[DateTime.Subtraction#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Subtraction/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Subtract(System.DateTime)" />
        <altmember cref="P:System.DateTime.Ticks" />
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static DateTime operator - (DateTime d, TimeSpan t);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTime op_Subtraction(valuetype System.DateTime d, valuetype System.TimeSpan t) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Subtraction(System.DateTime,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (d As DateTime, t As TimeSpan) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime operator -(DateTime d, TimeSpan t);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.DateTime" />
        <Parameter Name="t" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="d">位於減號左邊的日期和時間值。</param>
        <param name="t">要減去的時間間隔。</param>
        <summary>將指定的日期和時間減去指定的時間間隔，並傳回新的日期和時間。</summary>
        <returns>物件，其值為 <paramref name="d" /> 值減掉 <paramref name="t" /> 值的差異值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法值減去刻度`t`刻度值`d`。  
  
 這個運算子的對等方法是 <xref:System.DateTime.Subtract%28System.DateTime%29?displayProperty=nameWithType>  
  
## Examples  
 下列範例會示範<xref:System.DateTime.Subtract%2A>方法和減法運算子。  
  
 [!code-cpp[DateTime.Subtraction#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Subtraction/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Subtraction#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Subtraction/CS/class1.cs#1)]
 [!code-vb[DateTime.Subtraction#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Subtraction/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTime" /> 小於 <see cref="F:System.DateTime.MinValue" /> 或大於 <see cref="F:System.DateTime.MaxValue" />。</exception>
        <altmember cref="M:System.DateTime.Subtract(System.TimeSpan)" />
        <altmember cref="P:System.DateTime.Ticks" />
        <altmember cref="T:System.TimeSpan" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將日期和時間的字串表示，轉換為其相等的 <see cref="T:System.DateTime" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 本節內容：  
  
 [沒有呼叫的方法？](#Tasks)   
 [要剖析的字串](#StringToParse)   
 [剖析和文化特性的慣例](#Culture)   
 [剖析和樣式項目](#Styles)   
 [傳回值和 DateTime.Kind](#kind)
 
<a name="Tasks"></a>   
### <a name="which-method-do-i-call"></a>沒有呼叫的方法？  
  
|以|Call|  
|--------|----------|  
|使用目前文化特性的慣例來剖析日期和時間的字串。|<xref:System.DateTime.Parse%28System.String%29> 多載|  
|使用特定文化特性的慣例來剖析日期和時間的字串。|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> 多載 (請參閱[剖析及文化習慣](#Culture))|  
|剖析特殊的樣式項目 （例如空白字元或沒有泛空白字元） 的日期和時間字串。|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> 多載|  
|剖析必須採用特定格式的日期和時間字串。|<xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType> 或 <xref:System.DateTime.TryParseExact%2A?displayProperty=nameWithType>|
|剖析日期和時間字串，並執行轉換成 UTC 或本地時間。|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> 多載|  
|剖析日期和時間字串，而不處理例外狀況。|<xref:System.DateTime.TryParse%2A?displayProperty=nameWithType> 方法|  
|格式化作業所還原 （來回） 建立的日期和時間值。|傳遞"o"或"r"標準格式字串以<xref:System.DateTime.ToString%28System.String%29>方法，並呼叫<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>多載 <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType>|  
|剖析日期和時間格式字串的固定跨電腦 （或可能是文化特性） 的界限。|<xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType> 或<xref:System.DateTime.TryParseExact%2A?displayProperty=nameWithType>方法|  
  
<a name="StringToParse"></a>   
### <a name="the-string-to-parse"></a>要剖析的字串  
 <xref:System.DateTime.Parse%2A>方法嘗試之日期和時間值的字串表示轉換成其<xref:System.DateTime>相等。 它會嘗試將輸入的字串完全剖析而不擲回<xref:System.FormatException>例外狀況。  
  
> [!IMPORTANT]
>  如果在剖析作業失敗，因為無法辨識的字串格式，所以<xref:System.DateTime.Parse%2A>方法會擲回<xref:System.FormatException>，而<xref:System.DateTime.TryParse%2A>方法會傳回`false`。 由於例外狀況處理可能會耗費資源，您應使用<xref:System.DateTime.Parse%2A>當預期在剖析作業成功，因為輸入的來源是受信任。 <xref:System.DateTime.TryParse%2A> 何時可能會剖析失敗，因為輸入的來源不受信任，或您有合理的預設值來替代字串時，不會被剖析成功，則會偏好。   

 要剖析的字串可以採用任何下列形式：  
  
-   字串，含有日期和時間元件。  
  
-   含日期，但沒有時間部分的字串。 如果時間元件不存在，則方法會假設午夜 12:00。 如果日期元件有兩位數年份，則會轉換為根據的年份<xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType>目前文化特性的現行曆法或指定的文化特性的現行曆法的 (如果您使用多載具有非 null`provider`引數)。  
  
- 字串，包含只月份和年份的日期元件，但沒有日期元件。 方法會假設每月的第一天。

- 字串，包含只月和日的日期元件，但沒有年元件。 方法會假設目前的年份。

-   具有一次，但沒有日期元件的字串。 方法會假設目前的日期，除非您呼叫<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>多載，並包含<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType>中`styles`引數，在其中案例方法假設年 1 月 1 日 0001。  

- 具有時間元件，其中包含在一小時和 AM/PM 指示項，與沒有日期元件的字串。 方法會假設目前的日期和時間不分鐘和不含秒數。 您可以變更此行為，藉由呼叫<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>多載，並包含<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType>中`styles`引數，在其中案例方法假設年 1 月 1 日 0001。

-   字串，包含時區資訊，並符合 ISO 8601 標準。 在下列範例中，第一個字串代表國際標準時間 (UTC)，而第二個指定為七個小時的時區的時間早於 UTC:  
  
    "2008-11-01T19:35:00.0000000Z"   
    "2008-11-01T19:35:00.0000000-07:00"  
  
-   字串，包含 GMT 指示項，並符合 RFC 1123 時間格式。例如：  
  
     「 2008 年 11 月 01 年，星期六格林威治時間 19:35:00"  
  
-   字串，其中包含的日期和時間以及時區位移資訊。例如：  
  
     "03/01/2009 05:42:00 -5:00"  

下列範例會使用目前的文化特性，在此案例中是 EN-US 文化特性的格式化慣例來剖析每一種格式的字串：

[!code-csharp-interactive[Default parsing](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse6.cs)]
[!code-vb[Default parsing](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse6.vb)]  
  
 如果輸入的字串代表在閏年中使用之曆法所剖析的方法為閏日 (請參閱[剖析和文化特性的慣例](#Culture))、<xref:System.DateTime.Parse%2A>方法已成功剖析字串。 如果輸入的字串代表為閏日在非為閏年，方法會擲回<xref:System.FormatException>。  
  
 因為<xref:System.DateTime.Parse%2A>方法會嘗試剖析日期字串表示法，並使用目前或指定的文化特性，嘗試將字串剖析跨不同的文化特性的格式規則的時間可能會失敗。 若要分為不同的地區設定特定的日期和時間格式，使用其中一個多載的<xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType>方法，並提供的格式規範。  
  
<a name="Culture"></a>   
### <a name="parsing-and-cultural-conventions"></a>剖析和文化特性的慣例  
 所有多載<xref:System.DateTime.Parse%2A>方法有區分文化特性除非要剖析的字串 (這由`s`下表) 符合 ISO 8601 模式。 剖析作業所使用的格式設定資訊中<xref:System.Globalization.DateTimeFormatInfo>物件衍生，如下所示：  
  
|如果您呼叫|和`provider`是|格式設定資訊衍生自|  
|-----------------|-----------------------|--------------------------------------------|  
|<xref:System.DateTime.Parse%28System.String%29>|-|目前執行緒文化特性 (<xref:System.Globalization.DateTimeFormatInfo.CurrentInfo%2A?displayProperty=nameWithType>屬性)|  
|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> 或 <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|A<xref:System.Globalization.DateTimeFormatInfo>物件|指定<xref:System.Globalization.DateTimeFormatInfo>物件|  
|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> 或 <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|`null`|目前執行緒文化特性 (<xref:System.Globalization.DateTimeFormatInfo.CurrentInfo%2A?displayProperty=nameWithType>屬性)|  
|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> 或 <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|A<xref:System.Globalization.CultureInfo>物件|<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> 屬性|  
|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> 或 <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|自訂<xref:System.IFormatProvider>實作|<xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> 方法|  
  
 當格式化資訊衍生自<xref:System.Globalization.DateTimeFormatInfo>物件<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=nameWithType>屬性會定義剖析作業中使用的曆法。  
  
 如果使用剖析日期和時間字串<xref:System.Globalization.DateTimeFormatInfo>物件自訂是不同於標準的文化特性的設定，請使用<xref:System.DateTime.ParseExact%2A>方法，而非<xref:System.DateTime.Parse%2A>方法，以改善成功轉換的機率。 非標準的日期和時間字串可以是複雜且難以剖析。 <xref:System.DateTime.Parse%2A>方法會嘗試剖析的字串與數個隱含剖析模式，其中可能會失敗。 相反地，<xref:System.DateTime.ParseExact%2A>方法需要您明確地指定一或多個正確剖析模式，可能會成功。 如需詳細資訊，請參閱中的 < DateTimeFormatInfo 和動態資料 > 一節<xref:System.Globalization.DateTimeFormatInfo>主題。  
  
> [!IMPORTANT]
>  請注意的特定文化特性的格式化慣例是動態的而且可能會受到變更的影響。 這取決於預設值 （目前） 的文化特性或格式設定慣例的剖析作業指定的意義<xref:System.IFormatProvider>代表文化特性而異的文化特性以外的物件可能會發生下列任何一個非預期地失敗：  
>   
> -   .NET Framework 的或現有的.NET framework 版本的更新結果的主要或次要版本之間已經變更的特定文化特性的資料。  
> -   特定文化特性的資料會反映使用者喜好設定，所以可能會從電腦或工作階段。  
> -   特定文化特性的資料代表取代文化特性來覆寫標準的文化特性或自訂的文化特性設定。  
>   
>  若要避免在剖析日期和時間字串文化特性的資料變更與相關聯的問題，您可以使用文化特性而異，剖析日期和時間字串，或您可以呼叫<xref:System.DateTime.ParseExact%2A>或<xref:System.DateTime.TryParseExact%2A>方法並指定確切的格式要剖析的字串。 如果您要序列化和還原序列化時的日期和時間資料，您可以使用的格式設定慣例的文化特性而異，或您可以序列化和還原序列化<xref:System.DateTime>二進位格式值。  
>   
>  如需詳細資訊，請參閱中的 「 動態文化特性資料 」 一節<xref:System.Globalization.CultureInfo>主題和 < Persisting DateTime 值 > 一節中<xref:System.DateTime>主題。  
  
<a name="Styles"></a>   
### <a name="parsing-and-style-elements"></a>剖析和樣式項目  
 所有<xref:System.DateTime.Parse%2A>多載會忽略輸入字串中的前置字元、 內部或尾端空格字元 (這由`s`下表中)。 日期和時間可以是以一組的開頭和尾端數字符號字元 （"#"、 U + 0023），而且必須尾隨一或多個 NULL 字元 (U + 0000)。  
  
 此外，<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>多載具有`styles`組成的一或多個成員的參數<xref:System.Globalization.DateTimeStyles>列舉型別。 這個參數會定義如何`s`應解譯和剖析作業應該如何將轉換`s`日期和時間。 下表描述每個效果<xref:System.Globalization.DateTimeStyles>成員在剖析作業。  
  
|DateTimeStyles 成員|在轉換的效果|  
|---------------------------|--------------------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|剖析`s`而且，如果有必要，將它轉換成 UTC，如下所示：<br /><br /> -如果`s`包含時區時差，或如果`s`未包含任何時區資訊但`styles`包含<xref:System.Globalization.DateTimeStyles.AssumeLocal>旗標，方法會剖析字串，呼叫<xref:System.DateTime.ToUniversalTime%2A>轉換傳回<xref:System.DateTime>值設定為UTC 和集合<xref:System.DateTime.Kind%2A>屬性<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>。<br />-如果`s`表示它代表 UTC，或如果`s`不含時區資訊但`styles`包含<xref:System.Globalization.DateTimeStyles.AssumeUniversal>旗標，方法會剖析字串，不執行時區轉換針對傳回<xref:System.DateTime>值，並設定<xref:System.DateTime.Kind%2A>屬性<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>。<br />-在所有其他情況下，此旗標會有任何作用。|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|這個值會被忽略。 內部空白字元一律允許的日期和時間項目中`s`。|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|這個值會被忽略。 在日期和時間的項目中，則一律允許前置空白字元`s`。|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|這個值會被忽略。 在日期和時間的項目一律允許尾端泛空白字元`s`。|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|指定`s`可能包含前置、 內部和尾端空白字元。 這是預設行為。 無法藉由提供更具限制性覆寫<xref:System.Globalization.DateTimeStyles>列舉值，例如<xref:System.Globalization.DateTimeStyles.None>。|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|指定當`s`缺少任何時區資訊，而本機時間會假設。 除非<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>旗標已存在，<xref:System.DateTime.Kind%2A>屬性傳回之<xref:System.DateTime>值設定為<xref:System.DateTimeKind.Local?displayProperty=nameWithType>。|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|指定當`s`缺少會假設 UTC 任何時區資訊。 除非<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>旗標存在，則方法會將轉換傳回<xref:System.DateTime>值與 utc 之間的當地時間和設定其<xref:System.DateTime.Kind%2A>屬性<xref:System.DateTimeKind.Local?displayProperty=nameWithType>。|  
|<xref:System.Globalization.DateTimeStyles.None>|雖然有效，但會忽略此值。|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|包含時區資訊的字串，請嘗試避免轉換的日期和時間字串的<xref:System.DateTime>值以本地時間表示其<xref:System.DateTime.Kind%2A>屬性設定為<xref:System.DateTimeKind.Local?displayProperty=nameWithType>。 一般來說，此類字串會藉由呼叫建立<xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType>方法也可以使用"o"、"r"或"u"標準格式規範。|  

<a name="kind"></a>   
### <a name="the-return-value-and-datetimekind"></a>傳回值和 DateTime.Kind

`DateTime.Parse`多載會傳回<xref:System.DateTime>值其<xref:System.DateTime.Kind>屬性包含時區資訊。 它可以表示的時間是：

- 國際標準時間 (<xref:System.DateTimeKind.Utc?displayProperty=fullName>)。
- 本地時區的時間 (<xref:System.DateTimeKind.Local?displayProperty=fullName>)。
- 未知的時區中的時間 (xref:System.DateTimeKind.Unspecified?displayProperty=fullName >)。
 
 一般而言，<xref:System.DateTime.Parse%2A>方法會傳回<xref:System.DateTime>物件，其<xref:System.DateTime.Kind%2A>屬性是<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>。 不過，<xref:System.DateTime.Parse%2A>方法可能會執行時區轉換，並設定的值<xref:System.DateTime.Kind%2A>屬性依據的值不同，`s`和`styles`參數：  
  
|如果|進行時區轉換|Kind 屬性|  
|--------|--------------------------|-------------------|  
|`s` 包含時區資訊。|日期和時間會以當地時區轉換為時間。|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|  
|`s` 包含時區資訊和`styles`包含<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>旗標。|日期和時間會轉換為國際標準時間 (UTC)。|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
|`s` 包含 Z 或 GMT 時區指示項，並`styles`包含<xref:System.Globalization.DateTimeStyles.RoundtripKind>旗標。|日期和時間會解譯為 UTC。|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
  
 下列範例會將包含本地時區的時區資訊的時間的日期字串轉換：  
  
 [!code-csharp-interactive[System.DateTime.Parse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse2.cs#2)]
 [!code-vb[System.DateTime.Parse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse2.vb#2)]  

  您也可以保留的日期和時間的值<xref:System.DateTime.Kind%2A>屬性的格式設定和使用剖析作業期間<xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType>旗標。 下列範例說明如何<xref:System.Globalization.DateTimeStyles.RoundtripKind>旗標會影響在剖析作業上<xref:System.DateTime>使用"o"、"r"或"u"格式規範來轉換為字串的值。  
  
 [!code-csharp-interactive[System.DateTime.Parse#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse5.cs#5)]
 [!code-vb[System.DateTime.Parse#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse5.vb#5)]  
  
### Examples

呼叫的數個範例`DateTime.Parse`方法散佈整個[備註](#remarks)這篇文章和個別的文件中一節`DateTime.Parse`多載。

[!INCLUDE[interactive-note](~/includes/csharp-interactive-note.md)]

您也可以下載完整的`DateTime.Parse`範例中所包含的[C#.NET Core 2.0 專案](https://github.com/dotnet/docs/raw/master/samples/snippets/csharp/downloads/api/System/DateTime.Parse.zip)和[適用於 Visual Basic.NET Core 2.0 專案](https://github.com/dotnet/docs/raw/master/samples/snippets/visualbasic/downloads/api/System/DateTime.Parse.zip)，從[dotnet/文件GitHub 儲存機制](https://github.com/dotnet/docs)。

 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider)" />
        <altmember cref="Overload:System.DateTime.TryParse" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTime Parse (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime Parse(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime Parse(System::String ^ s);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">字串，包含要轉換的日期和時間。 如需詳細資訊，請參閱[要剖析的字串](#StringToParse)。</param>
        <summary>使用目前執行緒文化特性的慣例，將日期和時間的字串表示轉換為其相等的 <see cref="T:System.DateTime" />。</summary>
        <returns>物件，與 <paramref name="s" /> 中包含的日期和時間相等。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
如果`s`包含時區資訊，此方法會傳回<xref:System.DateTime>值其<xref:System.DateTime.Kind%2A>屬性是<xref:System.DateTimeKind.Local?displayProperty=nameWithType>，並將轉換的日期和時間在`s`本地時間。 否則，它會執行任何時區轉換並傳回<xref:System.DateTime>值其<xref:System.DateTime.Kind%2A>屬性是<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>。

這個多載嘗試剖析`s`使用目前文化特性的格式設定慣例。 目前的文化特性會由<xref:System.Globalization.CultureInfo.CurrentCulture>屬性。 若要使用之特定文化特性的格式化慣例將字串剖析，呼叫<xref:System.DateTime.Parse(System.String,System.IFormatProvider)>或<xref:System.DateTime.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)>多載。

這個多載嘗試剖析`s`使用<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces?displayProperty=nameWithType>樣式。

## <a name="example"></a>範例

下列範例會剖析多個日期和時間值的字串表示：

- 使用預設的格式提供者，提供用來產生範例輸出的電腦的目前執行緒文化特性的格式設定慣例。 此範例的輸出會反映 EN-US 文化特性的格式設定慣例。

- 使用預設的樣式值，亦即<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces?displayProperty=nameWIthType>。 

它會處理<xref:System.FormatException>方法嘗試使用其他文化特性剖析日期和時間的字串表示時，會擲回的例外狀況的格式化慣例。 它也會示範如何成功剖析日期和時間值，不會使用目前執行緒文化特性的格式設定慣例。  
  
 [!code-csharp-interactive[System.DateTime.Parse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse1.cs#1)]
 [!code-vb[System.DateTime.Parse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse1.vb#1)]  

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> 不包含日期和時間的有效字串表示。</exception>
        <altmember cref="Overload:System.DateTime.TryParse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTime Parse (string s, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime Parse(string s, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Parse(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String, provider As IFormatProvider) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime Parse(System::String ^ s, IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="s">字串，包含要轉換的日期和時間。 如需詳細資訊，請參閱[要剖析的字串](#StringToParse)。</param>
        <param name="provider">物件，提供關於 <c>s</c> 的文化特性格式資訊。  請參閱[剖析和文化特性慣例](#Culture)</param>
        <summary>使用特定文化特性格式資訊，將日期和時間的字串表示轉換為其相等的 <see cref="T:System.DateTime" />。</summary>
        <returns>物件，與 <paramref name="s" /> 中包含的日期和時間相等，如 <paramref name="provider" /> 所指定。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
如果`s`包含時區資訊，此方法會傳回<xref:System.DateTime>值其<xref:System.DateTime.Kind%2A>屬性是<xref:System.DateTimeKind.Local?displayProperty=nameWithType>，並將轉換的日期和時間在`s`本地時間。 否則，它會執行任何時區轉換並傳回<xref:System.DateTime>值其<xref:System.DateTime.Kind%2A>屬性是<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>。

這個多載嘗試剖析`s`使用<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces?displayProperty=nameWithType>樣式。

## <a name="example"></a>範例

下列範例會使用 EN-US FR-FR 及 DE-DE 文化特性的慣例，來剖析日期字串陣列。 它會示範，單一日期的字串表示可以解譯以不同的方式跨不同的文化特性。  
  
[!code-csharp-interactive[System.DateTime.Parse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse3.cs#3)]
[!code-vb[System.DateTime.Parse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> 不包含日期和時間的有效字串表示。</exception>
        <altmember cref="Overload:System.DateTime.TryParse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTime Parse (ReadOnlySpan&lt;char&gt; s, IFormatProvider provider = null, System.Globalization.DateTimeStyles styles = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime Parse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As ReadOnlySpan(Of Char), Optional provider As IFormatProvider = null, Optional styles As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="styles">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTime Parse (string s, IFormatProvider provider, System.Globalization.DateTimeStyles styles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime Parse(string s, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String, provider As IFormatProvider, styles As DateTimeStyles) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime Parse(System::String ^ s, IFormatProvider ^ provider, System::Globalization::DateTimeStyles styles);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">字串，包含要轉換的日期和時間。 如需詳細資訊，請參閱[要剖析的字串](#StringToParse)。</param>
        <param name="provider">物件，提供關於 <c>s</c> 的文化特性特定格式資訊。  請參閱[剖析和文化特性慣例](#Culture)</param>
        <param name="styles">列舉值的位元組合，表示可以在 <c>s</c> 中出現使剖析作業成功，以及定義如何解譯剖析的日期與目前時區或目前日期之間關聯性的樣式元素。 一般會指定的值是 <see cref="F:System.Globalization.DateTimeStyles.None" />。</param>
        <summary>使用特定文化特性格式資訊及格式樣式，將日期和時間的字串表示轉換為其相等的 <see cref="T:System.DateTime" />。</summary>
        <returns>物件，與 <paramref name="s" /> 中包含的日期和時間相等，如 <paramref name="provider" /> 和 <paramref name="styles" /> 所指定。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

這個方法多載將轉換的日期和時間在`s`並設定<xref:System.DateTime.Kind%2A>屬性傳回之<xref:System.DateTime>值，如下所示：

|如果 |進行時區轉換|Kind 屬性|   
|-----|-----|-----|  
|`s` 包含沒有時區資訊。|無。|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|
|`s` 包含時區資訊。|本地時區的時間|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|
|`s` 包含時區資訊和 ' 樣式包含<xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType>旗標。|以國際標準的時間 (UTC)|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|
|`s` 包含 Z 或 GMT 時區指示項，並`styles`包含<xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType>。|無。|<xref:System.DateTimeKind.Utc>| 

## <a name="example"></a>範例

下列範例會示範<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>方法，並顯示的值<xref:System.DateTime.Kind%2A>屬性產生<xref:System.DateTime>值。  
  
[!code-csharp-interactive[System.DateTime.Parse#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse4.cs#4)]
[!code-vb[System.DateTime.Parse#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> 不包含日期和時間的有效字串表示。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="styles" /> 包含無效的 <see cref="T:System.Globalization.DateTimeStyles" /> 值組合。 例如，<see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> 和 <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" /> 兩者。</exception>
        <altmember cref="Overload:System.DateTime.TryParse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ParseExact">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將日期和時間的指定字串表示，轉換為其相等的 <see cref="T:System.DateTime" />。 字串表示的格式必須完全符合指定的格式，否則會擲回例外狀況。</summary>
        <altmember cref="Overload:System.DateTime.TryParseExact" />
      </Docs>
    </MemberGroup>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (string s, string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(string s, string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As String, format As String, provider As IFormatProvider) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ParseExact(System::String ^ s, System::String ^ format, IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="s">字串，包含要轉換的日期和時間。</param>
        <param name="format">格式規範，其定義 <c>s</c> 所需的格式。 如需詳細資訊，請參閱＜備註＞一節。</param>
        <param name="provider">物件，提供關於 <c>s</c> 的文化特性格式資訊。</param>
        <summary>使用指定的格式以及特定文化特性的格式資訊，將日期和時間的指定字串表示，轉換為其相等的 <see cref="T:System.DateTime" />。 字串表示的格式必須完全符合指定的格式。</summary>
        <returns>物件，與 <paramref name="s" /> 中包含的日期和時間相等，如 <paramref name="format" /> 和 <paramref name="provider" /> 所指定。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>方法剖析字串表示法中所定義的格式必須是日期`format`參數。 它也需要\<日期 > 和\<時間 > 日期和時間的字串表示的項目會出現在所指定的順序`format`，而且`s`不有非的允許任何空白字元`format`. 如果`format`定義日期任何時間元素和剖析作業成功時，所產生的<xref:System.DateTime>值具有午夜的時間 (00: 00:00)。 如果`format`所定義的時間沒有任何日期項目與剖析作業成功時，所產生的<xref:System.DateTime>值具有日期`DateTime.Now.Date`。  
  
 如果`s`不的代表時間以特定的時區，剖析作業成功，<xref:System.DateTime.Kind%2A>屬性傳回之<xref:System.DateTime>值是<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>。 如果`s`代表特定時區的時間和`format`允許必須存在的時區資訊 (例如，如果`format`相當於"o"、"r"或"u"標準格式規範，如果它包含"z"、"zz"或"zzz"自訂格式規範）<xref:System.DateTime.Kind%2A>屬性傳回之<xref:System.DateTime>值是<xref:System.DateTimeKind.Local?displayProperty=nameWithType>。  
  
 `format`參數是包含單一標準格式規範或一或多個自訂格式規範會定義所需的格式字串`s`。 如需有效格式的程式碼的詳細資訊，請參閱[標準日期和時間格式字串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)或[自訂日期和時間格式字串](~/docs/standard/base-types/custom-date-and-time-format-strings.md)。  
  
> [!NOTE]
>  如果`format`是不包含日期或時間分隔符號 （例如"yyyyMMddHHmm")，使用的文化特性而異的自訂格式模式`provider`參數和寬形式的每個自訂格式規範。 例如，如果您想要指定時數的格式模式中，指定寬表單中，"HH"，而不是較窄的表單中，"H"。  
  
 特定日期和時間符號和字串 （例如一週中特定語言的名稱） 用於`s`會由`provider`參數，因為是精確的格式`s`如果`format`是標準格式規範的字串。 `provider`參數可以是下列任一項：  
  
-   A<xref:System.Globalization.CultureInfo>物件，代表用來解譯的文化特性`s`。 <xref:System.Globalization.DateTimeFormatInfo>所傳回的物件及其<xref:System.Globalization.CultureInfo.DateTimeFormat%2A>屬性會定義符號與中的格式化`s`。  
  
-   A<xref:System.Globalization.DateTimeFormatInfo>物件，定義日期和時間資料的格式。  
  
-   自訂<xref:System.IFormatProvider>實作其<xref:System.IFormatProvider.GetFormat%2A>方法會傳回<xref:System.Globalization.CultureInfo>物件或<xref:System.Globalization.DateTimeFormatInfo>提供格式設定資訊的物件。  
  
 如果`provider`是`null`、<xref:System.Globalization.CultureInfo>使用對應至目前的文化特性的物件。  
  
   
  
## Examples  
 下列範例會示範<xref:System.DateTime.ParseExact%2A>方法。  
  
 [!code-csharp[System.DateTime.ParseExact#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ParseExact/cs/ParseExact1.cs#1)]
 [!code-vb[System.DateTime.ParseExact#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ParseExact/vb/ParseExact1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> 或 <paramref name="format" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> 或 <paramref name="format" /> 是空字串。  
  
 -或-  
  
 <paramref name="s" /> 不包含對應至 <paramref name="format" /> 中指定模式的日期和時間。  
  
 -或-  
  
 <paramref name="s" /> 中的小時元件和 AM/PM 指示項不一致。</exception>
        <block subset="none" type="usage">
          <para>在[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]、<see cref="Overload:System.DateTime.ParseExact" />方法會擲回<see cref="T:System.FormatException" />小時元件和 AM/PM 指示項不在協議中，如果包含要剖析的字串。 在[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]和舊版中，AM/PM 指示項會被忽略。</para>
        </block>
        <altmember cref="Overload:System.DateTime.TryParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (ReadOnlySpan&lt;char&gt; s, ReadOnlySpan&lt;char&gt; format, IFormatProvider provider, System.Globalization.DateTimeStyles style = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; s, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As ReadOnlySpan(Of Char), format As ReadOnlySpan(Of Char), provider As IFormatProvider, Optional style As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="format">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="style">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (ReadOnlySpan&lt;char&gt; s, string[] formats, IFormatProvider provider, System.Globalization.DateTimeStyles style = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; s, string[] formats, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As ReadOnlySpan(Of Char), formats As String(), provider As IFormatProvider, Optional style As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="formats">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="style">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (string s, string format, IFormatProvider provider, System.Globalization.DateTimeStyles style);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(string s, string format, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As String, format As String, provider As IFormatProvider, style As DateTimeStyles) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ParseExact(System::String ^ s, System::String ^ format, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">字串，含有要轉換的日期和時間。</param>
        <param name="format">格式規範，其定義 <c>s</c> 所需的格式。 如需詳細資訊，請參閱＜備註＞一節。</param>
        <param name="provider">物件，提供關於 <c>s</c> 的文化特性特定格式資訊。</param>
        <param name="style">列舉值的位元組合，提供有關 <c>s</c>、可以出現在 <c>s</c> 中的樣式元素，或是從 <c>s</c> 轉換成 <see cref="T:System.DateTime" /> 值的詳細資訊。 一般會指定的值是 <see cref="F:System.Globalization.DateTimeStyles.None" />。</param>
        <summary>使用指定的格式、特定文化特性格式資訊以及樣式，將日期和時間的指定字串表示，轉換為其相等的 <see cref="T:System.DateTime" />。 字串表示的格式必須完全符合指定的格式，否則會擲回例外狀況。</summary>
        <returns>物件，與 <paramref name="s" /> 中包含的日期和時間相等，如 <paramref name="format" />、<paramref name="provider" /> 和 <paramref name="style" /> 所指定。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>方法剖析字串表示法中所定義的格式必須是日期`format`參數。 它也要求中的日期和時間的項目`s`所指定的順序顯示`format`。 如果`s`不符合的模式`format`參數，所定義的任何變化`style`參數，方法會擲回<xref:System.FormatException>。 相反地，<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>方法剖析日期的任何一種格式提供者所辨識的格式的字串表示<xref:System.Globalization.DateTimeFormatInfo>物件。 <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>方法也允許的日期和時間的項目中`s`依任何順序出現。  
  
 如果`s`參數包含僅一次，而且沒有日期，目前的日期會使用，除非`style`參數包含<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType>旗標，在此情況下的預設日期 (`DateTime.Date.MinValue`) 使用。 如果`s`參數包含的日期沒有時間、 午夜 (00: 00:00) 使用。 `style`參數也會決定是否`s`參數可以包含前置、 內部或尾端空白字元。  
  
 如果`s`包含沒有時區資訊<xref:System.DateTime.Kind%2A>屬性傳回之<xref:System.DateTime>物件是<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>。 此行為可以透過變更<xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType>旗標，它會傳回<xref:System.DateTime>值的<xref:System.DateTime.Kind%2A>屬性是<xref:System.DateTimeKind.Local?displayProperty=nameWithType>，或使用<xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType>和<xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType>旗標，它會傳回<xref:System.DateTime>其值<xref:System.DateTime.Kind%2A>屬性是<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>。 如果`s`包含時區資訊，如有必要，時間會轉換為本地時間和<xref:System.DateTime.Kind%2A>屬性傳回之<xref:System.DateTime>物件設定為<xref:System.DateTimeKind.Local?displayProperty=nameWithType>。 此行為可以透過變更<xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType>旗標將國際標準時間 (UTC) 轉換為本地時間，並設定<xref:System.DateTime.Kind%2A>屬性<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>。  
  
 `format`參數會定義所需的模式`s`參數。 它可以包含一或多個自訂格式規範，從[自訂日期和時間格式字串](~/docs/standard/base-types/custom-date-and-time-format-strings.md)資料表或單一標準格式規範，它會識別預先定義的模式，從[標準日期和時間格式字串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)資料表。  
  
 如果您未使用自訂格式模式中的日期或時間分隔符號，使用的文化特性而異`provider`參數和寬形式的每個自訂格式規範。 例如，如果您想要指定模式中，指定寬表單中，"HH"，而不是較窄的表單中，"H"。  
  
> [!NOTE]
>  不需要的`s`符合單一格式的剖析作業成功，您可以呼叫<xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>方法並指定多個允許的格式。 這樣更有可能成功，剖析作業。  
  
 `styles`參數包含一個或多個成員<xref:System.Globalization.DateTimeStyles>列舉型別，以決定是否和位置所未定義空白字元`format`可以出現在`s`及控制精確的剖析作業行為。 下表描述如何每個成員的<xref:System.Globalization.DateTimeStyles>列舉型別會影響的作業<xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>方法。  
  
|DateTimeStyles 成員|描述|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|剖析`s`而且，如果有必要，將它轉換成 UTC。 如果`s`包含時區時差，或如果`s`未包含任何時區資訊但`styles`包含<xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType>旗標，方法會剖析字串，呼叫<xref:System.DateTime.ToUniversalTime%2A>轉換傳回<xref:System.DateTime>值以 UTC並設定<xref:System.DateTime.Kind%2A>屬性<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>。 如果`s`表示它代表 UTC，或如果`s`不含時區資訊但`styles`包含<xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType>旗標，方法會剖析字串，不執行時區轉換針對傳回<xref:System.DateTime>值，並設定<xref:System.DateTime.Kind%2A>屬性<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>。 在其他情況下，此旗標會有任何作用。|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|指定未定義的泛空白字元`format`之間任何個別的日期或時間項目可能會出現。|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|指定未定義的泛空白字元`format`可以出現在開頭`s`。|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|指定未定義的泛空白字元`format`可以出現在結尾`s`。|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|指定`s`可能包含前置、 內部和尾端空白字元未定義`format`。|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|指定當`s`缺少任何時區資訊，則會假設為代表當地時間。 除非<xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType>旗標已存在，<xref:System.DateTime.Kind%2A>屬性傳回之<xref:System.DateTime>值設定為<xref:System.DateTimeKind.Local?displayProperty=nameWithType>。|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|指定當`s`缺少任何時區資訊，它會假設來表示 UTC。 除非<xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType>旗標存在，則方法會將轉換傳回<xref:System.DateTime>值與 utc 之間的當地時間和設定其<xref:System.DateTime.Kind%2A>屬性<xref:System.DateTimeKind.Local?displayProperty=nameWithType>。|  
|<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>|如果`s`包含時間日期的詳細資訊，不傳回值的日期會設定為`DateTime.MinValue.Date`。|  
|<xref:System.Globalization.DateTimeStyles.None>|`s`參數會剖析使用預設值。 該位於以外的任何空格`format`允許。 如果`s`缺少傳回之日期的日期元件，<xref:System.DateTime>值設定為 1/1/0001。 如果`s`包含沒有時區資訊<xref:System.DateTime.Kind%2A>屬性傳回之<xref:System.DateTime>物件設定為<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>。 如果時區資訊存在於`s`，時間會轉換為本機時間而<xref:System.DateTime.Kind%2A>屬性傳回之<xref:System.DateTime>物件設定為<xref:System.DateTimeKind.Local?displayProperty=nameWithType>。|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|包含時區資訊的字串，請嘗試避免轉換為<xref:System.DateTime>值日期和時間以其<xref:System.DateTime.Kind%2A>屬性設定為<xref:System.DateTimeKind.Local?displayProperty=nameWithType>。 主要，此旗標可避免 UTC 時間轉換為本地時間。|  
  
 特定日期和時間符號和字串 （例如一週中特定語言的名稱） 用於`s`會由`provider`參數，因為是精確的格式`s`如果`format`是標準格式規範的字串。 `provider`參數可以是下列任一項：  
  
-   A<xref:System.Globalization.CultureInfo>物件，代表用來解譯的文化特性`s`。 <xref:System.Globalization.DateTimeFormatInfo>所傳回的物件及其<xref:System.Globalization.CultureInfo.DateTimeFormat%2A>屬性會定義符號與中的格式化`s`。  
  
-   A<xref:System.Globalization.DateTimeFormatInfo>物件，定義日期和時間資料的格式。  
  
-   自訂<xref:System.IFormatProvider>實作其<xref:System.IFormatProvider.GetFormat%2A>方法會傳回<xref:System.Globalization.CultureInfo>物件或<xref:System.Globalization.DateTimeFormatInfo>提供格式設定資訊的物件。  
  
 如果`provider`是`null`、<xref:System.Globalization.CultureInfo>使用對應至目前的文化特性的物件。  
  
   
  
## Examples  
 下列範例會示範<xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29>方法。 請注意，字串"5/01/2009年上午 8:30"無法剖析成功時`styles`參數等於<xref:System.Globalization.DateTimeStyles.None?displayProperty=nameWithType>所不允許前置空格，因此`format`。 此外，字串"5/01/2009年 09:00 」 無法以成功地剖析`format`的"MM/dd/yyyyhh:mm"因為日期字串前面沒有前置零，月份數字為`format`需要。  
  
 [!code-csharp[System.DateTime.ParseExact#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ParseExact/cs/parseexact2.cs#2)]
 [!code-vb[System.DateTime.ParseExact#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ParseExact/vb/parseexact2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> 或 <paramref name="format" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> 或 <paramref name="format" /> 是空字串。  
  
 -或-  
  
 <paramref name="s" /> 不包含對應至 <paramref name="format" /> 中指定模式的日期和時間。  
  
 -或-  
  
 <paramref name="s" /> 中的小時元件和 AM/PM 指示項不一致。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="style" /> 包含無效的 <see cref="T:System.Globalization.DateTimeStyles" /> 值組合。 例如，<see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> 和 <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" /> 兩者。</exception>
        <block subset="none" type="usage">
          <para>在[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]、<see cref="Overload:System.DateTime.ParseExact" />方法會擲回<see cref="T:System.FormatException" />小時元件和 AM/PM 指示項不在協議中，如果包含要剖析的字串。 在[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]和舊版中，AM/PM 指示項會被忽略。</para>
        </block>
        <altmember cref="Overload:System.DateTime.TryParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (string s, string[] formats, IFormatProvider provider, System.Globalization.DateTimeStyles style);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(string s, string[] formats, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As String, formats As String(), provider As IFormatProvider, style As DateTimeStyles) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ParseExact(System::String ^ s, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">字串，包含要轉換的日期和時間。</param>
        <param name="formats">
          <c>s</c> 允許的格式陣列。 如需詳細資訊，請參閱＜備註＞一節。</param>
        <param name="provider">物件，提供關於 <c>s</c> 的文化特性格式資訊。</param>
        <param name="style">列舉值的位元組合，表示允許的 <c>s</c> 格式。 一般會指定的值是 <see cref="F:System.Globalization.DateTimeStyles.None" />。</param>
        <summary>使用指定的格式陣列、特定文化特性格式資訊以及樣式，將日期和時間的指定字串表示，轉換為其相等的 <see cref="T:System.DateTime" />。 字串表示的格式必須至少完全符合其中一個指定的格式，否則會擲回例外狀況。</summary>
        <returns>物件，與 <paramref name="s" /> 中包含的日期和時間相等，如 <paramref name="formats" />、<paramref name="provider" /> 和 <paramref name="style" /> 所指定。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>方法剖析符合指派給任何的模式一個日期的字串表示`formats`參數。 如果字串`s`不符合任何一種模式與任何所定義的變化`styles`參數，方法會擲回<xref:System.FormatException>。 除了比較`s`至多個格式模式，而非單一的格式模式，這個多載的行為即會相同與<xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>方法。  
  
 `s`參數包含要剖析的日期和時間。 如果`s`參數包含僅一次，而且沒有日期，目前的日期會使用，除非`style`參數包含<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType>旗標，在此情況下的預設日期 (`DateTime.Date.MinValue`) 使用。 如果`s`參數包含的日期沒有時間、 午夜 (00: 00:00) 使用。 `style`參數也會決定是否`s`參數可以包含前置、 內部或尾端空格字元而不是所允許的格式字串中的其中一個`formats`。  
  
 如果`s`包含沒有時區資訊<xref:System.DateTime.Kind%2A>屬性傳回之<xref:System.DateTime>物件是<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>。 此行為可以透過變更<xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType>旗標，它會傳回<xref:System.DateTime>值的<xref:System.DateTime.Kind%2A>屬性是<xref:System.DateTimeKind.Local?displayProperty=nameWithType>，或使用<xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType>和<xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType>旗標，它會傳回<xref:System.DateTime>其值<xref:System.DateTime.Kind%2A>屬性是<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>。 如果`s`包含時區資訊，如有必要，時間會轉換為本地時間和<xref:System.DateTime.Kind%2A>屬性傳回之<xref:System.DateTime>物件設定為<xref:System.DateTimeKind.Local?displayProperty=nameWithType>。 此行為可以透過變更<xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType>旗標不當地時間轉換成國際標準時間 (UTC)，並設定<xref:System.DateTime.Kind%2A>屬性<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>。  
  
 `formats`參數包含陣列的模式，其中`s`必須完全符合，剖析作業會成功。 中的模式`formats`參數包含一個或多個自訂格式規範，從[自訂日期和時間格式字串](~/docs/standard/base-types/custom-date-and-time-format-strings.md)資料表或單一標準格式規範，它會識別預先定義的模式，從[標準日期和時間格式字串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)資料表。  
  
 如果您未使用自訂格式模式中的日期或時間分隔符號，使用的文化特性而異`provider`參數和寬形式的每個自訂格式規範。 例如，如果您想要指定模式中，指定寬表單中，"HH"，而不是較窄的表單中，"H"。  
  
 `styles`參數包含一個或多個成員<xref:System.Globalization.DateTimeStyles>列舉型別，以決定是否和位置所未定義空白字元`format`可以出現在`s`及控制精確的剖析作業行為。 下表描述如何每個成員的<xref:System.Globalization.DateTimeStyles>列舉型別會影響的作業<xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>方法。  
  
|DateTimeStyles 成員|描述|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|剖析`s`而且，如果有必要，將它轉換成 UTC。 如果`s`包含時區時差，或如果`s`未包含任何時區資訊但`styles`包含<xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType>旗標，方法會剖析字串，呼叫<xref:System.DateTime.ToUniversalTime%2A>轉換傳回<xref:System.DateTime>值以 UTC並設定<xref:System.DateTime.Kind%2A>屬性<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>。 如果`s`表示它代表 UTC，或如果`s`不含時區資訊但`styles`包含<xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType>旗標，方法會剖析字串，不執行時區轉換針對傳回<xref:System.DateTime>值，並設定<xref:System.DateTime.Kind%2A>屬性<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>。 在其他情況下，此旗標會有任何作用。|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|指定未定義的泛空白字元`format`之間任何個別的日期或時間項目可能會出現。|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|指定未定義的泛空白字元`format`可以出現在開頭`s`。|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|指定未定義的泛空白字元`format`可以出現在結尾`s`。|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|指定`s`可能包含前置、 內部和尾端空白字元未定義`format`。|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|指定當`s`缺少任何時區資訊，則會假設為代表當地時間。 除非<xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType>旗標已存在，<xref:System.DateTime.Kind%2A>屬性傳回之<xref:System.DateTime>值設定為<xref:System.DateTimeKind.Local?displayProperty=nameWithType>。|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|指定當`s`缺少任何時區資訊，它會假設來表示 UTC。 除非<xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType>旗標存在，則方法會將轉換傳回<xref:System.DateTime>值與 utc 之間的當地時間和設定其<xref:System.DateTime.Kind%2A>屬性<xref:System.DateTimeKind.Local?displayProperty=nameWithType>。|  
|<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>|如果`s`包含時間日期的詳細資訊，不傳回值的日期會設定為`DateTime.MinValue.Date`。|  
|<xref:System.Globalization.DateTimeStyles.None>|`s`參數會剖析使用預設值。 該位於以外的任何空格`format`允許。 如果`s`缺少傳回之日期的日期元件，<xref:System.DateTime>值設定為 1/1/0001。 如果`s`包含沒有時區資訊<xref:System.DateTime.Kind%2A>屬性傳回之<xref:System.DateTime>物件設定為<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>。 如果時區資訊存在於`s`，時間會轉換為本機時間而<xref:System.DateTime.Kind%2A>屬性傳回之<xref:System.DateTime>物件設定為<xref:System.DateTimeKind.Local?displayProperty=nameWithType>。|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|包含時區資訊的字串，請嘗試 無法轉換成日期的日期和時間以其<xref:System.DateTime.Kind%2A>屬性設定為<xref:System.DateTimeKind.Local?displayProperty=nameWithType>。 主要，此旗標可避免 UTC 時間轉換為本地時間。|  
  
 特定日期和時間符號和字串 （例如一週中特定語言的名稱） 用於`s`會由`provider`參數，因為是精確的格式`s`如果`format`是標準格式規範的字串。 `provider`參數可以是下列任一項：  
  
-   A<xref:System.Globalization.CultureInfo>物件，代表用來解譯的文化特性`s`。 <xref:System.Globalization.DateTimeFormatInfo>所傳回的物件及其<xref:System.Globalization.CultureInfo.DateTimeFormat%2A>屬性會定義符號與中的格式化`s`。  
  
-   A<xref:System.Globalization.DateTimeFormatInfo>物件，定義日期和時間資料的格式。  
  
-   自訂<xref:System.IFormatProvider>實作其<xref:System.IFormatProvider.GetFormat%2A>方法會傳回<xref:System.Globalization.CultureInfo>物件或<xref:System.Globalization.DateTimeFormatInfo>提供格式設定資訊的物件。  
  
 如果`provider`是`null`、<xref:System.Globalization.CultureInfo>使用對應至目前的文化特性的物件。  
  
   
  
## Examples  
 下列範例會使用<xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>方法，以確定可以成功剖析中的可能格式的數字的字串。  
  
 [!code-csharp[System.Datetime.ParseExact#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ParseExact/cs/parseexact3.cs#3)]
 [!code-vb[System.Datetime.ParseExact#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ParseExact/vb/parseexact3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> 或 <paramref name="formats" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> 為空字串。  
  
 -或-  
  
 <paramref name="formats" /> 的某個項目是空字串。  
  
 -或-  
  
 <paramref name="s" /> 不包含對應至 <paramref name="formats" /> 任何項目的日期和時間。  
  
 -或-  
  
 <paramref name="s" /> 中的小時元件和 AM/PM 指示項不一致。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="style" /> 包含無效的 <see cref="T:System.Globalization.DateTimeStyles" /> 值組合。 例如，<see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> 和 <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" /> 兩者。</exception>
        <block subset="none" type="usage">
          <para>在[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]、<see cref="Overload:System.DateTime.ParseExact" />方法會擲回<see cref="T:System.FormatException" />小時元件和 AM/PM 指示項不在協議中，如果包含要剖析的字串。 在[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]和舊版中，AM/PM 指示項會被忽略。</para>
        </block>
        <altmember cref="Overload:System.DateTime.TryParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="Second">
      <MemberSignature Language="C#" Value="public int Second { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Second" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Second" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Second As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Second { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得這個執行個體所表示日期的秒數元件。</summary>
        <value>秒數元件，以 0 到 59 之間的值表示。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列範例會示範<xref:System.DateTime.Second%2A>屬性。  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpecifyKind">
      <MemberSignature Language="C#" Value="public static DateTime SpecifyKind (DateTime value, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime SpecifyKind(valuetype System.DateTime value, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.SpecifyKind(System.DateTime,System.DateTimeKind)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SpecifyKind (value As DateTime, kind As DateTimeKind) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime SpecifyKind(DateTime value, DateTimeKind kind);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
        <Parameter Name="kind" Type="System.DateTimeKind" />
      </Parameters>
      <Docs>
        <param name="value">日期和時間。</param>
        <param name="kind">其中一個列舉值，表示新的物件表示本地時間、UTC，或兩者都不是。</param>
        <summary>建立新的 <see cref="T:System.DateTime" /> 物件，此物件的刻度數與指定的 <see cref="T:System.DateTime" /> 相同，但依指定的 <see cref="T:System.DateTimeKind" /> 值所示，指定為本地時間、國際標準時間 (Coordinated Universal Time，UTC)，或兩者都不是。</summary>
        <returns>新物件，這個物件的刻度數與 <paramref name="value" /> 參數代表的物件相同，且具有 <see cref="T:System.DateTimeKind" /> 參數指定的 <paramref name="kind" /> 值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A<xref:System.DateTime>物件包含的類型 欄位，指出是否將時間值根據本地時間、 國際標準時間 (UTC) 或兩者皆否，而且包含時間值的刻度欄位以 100 奈秒刻度為單位。 <xref:System.DateTime.SpecifyKind%2A>方法建立新<xref:System.DateTime>物件使用指定`kind`參數，而且原始時間值。  
  
> [!IMPORTANT]
>  傳回<xref:System.DateTime>值不代表相同即時時間`value`參數，以及<xref:System.DateTime.SpecifyKind%2A>不是時區轉換方法。 相反地，它會保留所指定的時間`value`參數保持不變，與集<xref:System.DateTime.Kind%2A>屬性`kind`。 時區轉換的相關資訊，請參閱[之間時區間轉換時間](~/docs/standard/datetime/converting-between-time-zones.md)。  
  
 <xref:System.DateTime.SpecifyKind%2A>方法收到的互通性案例中很有用<xref:System.DateTime>物件未指定類型 欄位，但您可以判斷獨立表示刻度欄位代表本地時間或 UTC。  
  
   
  
## Examples  
 下列範例會使用<xref:System.DateTime.SpecifyKind%2A>方法，示範如何<xref:System.DateTime.Kind%2A>屬性會影響<xref:System.DateTime.ToLocalTime%2A>和<xref:System.DateTime.ToUniversalTime%2A>轉換方法。  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Subtract">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將這個執行個體減去指定的時間或持續期間。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public TimeSpan Subtract (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan Subtract(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Subtract(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Subtract (value As DateTime) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan Subtract(DateTime value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">要減去的日期和時間。</param>
        <summary>將這個執行個體減去指定的日期和時間。</summary>
        <returns>時間間隔，等於由此執行個體所表示的日期和時間減去由 <paramref name="value" /> 所表示的日期和時間。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.Subtract%28System.DateTime%29>方法會判斷兩個日期之間的差異。 要減去的時間間隔，從目前的執行個體，呼叫<xref:System.DateTime.Subtract%28System.TimeSpan%29>方法。 要減去目前的執行個體的特定時間間隔，呼叫的方法，將該時間間隔加入至目前的日期，並提供負值做為方法引數。 例如，若要減去目前的日期的兩個月，呼叫<xref:System.DateTime.AddMonths%28System.Int32%29>方法-2 的值。  
  
 日期和時間的目前執行個體是早於`value`，方法會傳回<xref:System.TimeSpan>物件，表示負的時間範圍。 也就是所有的非零屬性的值 (例如<xref:System.TimeSpan.Days%2A>或<xref:System.TimeSpan.Ticks%2A>) 是負數。  
  
 <xref:System.DateTime.Subtract%28System.DateTime%29>方法不會考慮值<xref:System.DateTime.Kind%2A>兩個屬性<xref:System.DateTime>值時執行減法運算。 之前減去<xref:System.DateTime>物件，請確認物件是否代表相同的時區中的時間。 否則，結果會包含時區之間的差異。  
  
> [!NOTE]
>  <xref:System.DateTimeOffset.Subtract%28System.DateTimeOffset%29?displayProperty=nameWithType>方法就會考慮執行減法運算時的時區之間的差異。  
  
   
  
## Examples  
 下列範例會示範<xref:System.DateTime.Subtract%2A>方法和減法運算子。  
  
 [!code-cpp[DateTime.Subtraction#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Subtraction/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Subtraction#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Subtraction/CS/class1.cs#1)]
 [!code-vb[DateTime.Subtraction#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Subtraction/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">這個結果小於 <see cref="F:System.DateTime.MinValue" /> 或大於 <see cref="F:System.DateTime.MaxValue" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public DateTime Subtract (TimeSpan value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime Subtract(valuetype System.TimeSpan value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Subtract(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Subtract (value As TimeSpan) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime Subtract(TimeSpan value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="value">要減去的時間間隔。</param>
        <summary>將這個執行個體減去指定的持續期間。</summary>
        <returns>物件，等於由此執行個體所表示的日期和時間減去由 <paramref name="value" /> 所表示的時間間隔。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.Subtract%28System.TimeSpan%29>方法會傳回日期，這是目前的執行個體指定的時間間隔差。 若要判斷兩個日期之間的時間間隔，請呼叫<xref:System.DateTime.Subtract%28System.DateTime%29>方法。 要減去目前的執行個體的特定時間間隔，呼叫的方法，將該時間間隔加入至目前的日期，並提供負值做為方法引數。 例如，若要減去目前的日期的兩個月，呼叫<xref:System.DateTime.AddMonths%28System.Int32%29>方法-2 的值。  
  
 這個方法不會變更這個值<xref:System.DateTime>。 相反地，它會傳回新<xref:System.DateTime>其實此作業的結果。  
  
 一般情況下，<xref:System.DateTime.Subtract%28System.TimeSpan%29?displayProperty=nameWithType>方法會減去<xref:System.TimeSpan>物件，表示正的時間範圍，並傳回<xref:System.DateTime>之前的日期和時間的目前執行個體的值。 不過，如果<xref:System.TimeSpan>物件都代表負的時間範圍內，<xref:System.DateTime.Subtract%28System.TimeSpan%29?displayProperty=nameWithType>方法會傳回<xref:System.DateTime>晚的日期和時間的目前執行個體的值。  
  
 <xref:System.DateTime.Subtract%28System.TimeSpan%29?displayProperty=nameWithType>方法可讓您要減去的時間，例如 （指定數字的時數） 和指定的分鐘數的多個單位所組成的時間間隔。 要減去的時間 （例如年、 月或日） 的單一單位從<xref:System.DateTime>執行個體，您可以負的數字值當做參數傳遞至任何下列方法：  
  
-   <xref:System.DateTime.AddYears%2A>要減去特定數目的年份，從目前的日期和時間執行個體。  
  
-   <xref:System.DateTime.AddMonths%2A>要減去特定數目的月份，從目前的日期和時間執行個體。  
  
-   <xref:System.DateTime.AddDays%2A>要減去目前的日期和時間執行個體在特定天數。  
  
-   <xref:System.DateTime.AddHours%2A>要減去的時間會從目前的日期和時間執行個體的特定數字。  
  
-   <xref:System.DateTime.AddMinutes%2A>要減去的特定從目前的日期和時間執行個體的分鐘數。  
  
-   <xref:System.DateTime.AddSeconds%2A>要減去特定的目前的日期和時間執行個體的秒數。  
  
-   <xref:System.DateTime.AddMilliseconds%2A>要減去特定數目的目前日期和時間執行個體 （毫秒）。  
  
-   <xref:System.DateTime.AddTicks%2A>要減去為特定的目前的日期和時間執行個體的刻度數。  
  
   
  
## Examples  
 下列範例會示範<xref:System.DateTime.Subtract%2A>方法和減法運算子。  
  
 [!code-cpp[DateTime.Subtraction#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Subtraction/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Subtraction#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Subtraction/CS/class1.cs#1)]
 [!code-vb[DateTime.Subtraction#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Subtraction/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">這個結果小於 <see cref="F:System.DateTime.MinValue" /> 或大於 <see cref="F:System.DateTime.MaxValue" />。</exception>
        <altmember cref="T:System.TimeSpan" />
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IComparable#CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (value As Object) As Integer Implements IComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IComparable.CompareTo(System::Object ^ value) = IComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.GetTypeCode">
      <MemberSignature Language="C#" Value="TypeCode IConvertible.GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.TypeCode System.IConvertible.GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Function GetTypeCode () As TypeCode Implements IConvertible.GetTypeCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual TypeCode System.IConvertible.GetTypeCode() = IConvertible::GetTypeCode;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToBoolean">
      <MemberSignature Language="C#" Value="bool IConvertible.ToBoolean (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.IConvertible.ToBoolean(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToBoolean(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToBoolean (provider As IFormatProvider) As Boolean Implements IConvertible.ToBoolean" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.IConvertible.ToBoolean(IFormatProvider ^ provider) = IConvertible::ToBoolean;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToBoolean(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">實作 <see cref="T:System.IFormatProvider" /> 介面的物件。 (不使用這個參數；請指定 <see langword="null" />)。</param>
        <summary>不支援這個轉換。 嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
        <returns>不使用此成員的傳回值。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToByte">
      <MemberSignature Language="C#" Value="byte IConvertible.ToByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int8 System.IConvertible.ToByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToByte (provider As IFormatProvider) As Byte Implements IConvertible.ToByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Byte System.IConvertible.ToByte(IFormatProvider ^ provider) = IConvertible::ToByte;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">實作 <see cref="T:System.IFormatProvider" /> 介面的物件。 (不使用這個參數；請指定 <see langword="null" />)。</param>
        <summary>不支援這個轉換。 嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
        <returns>不使用此成員的傳回值。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToChar">
      <MemberSignature Language="C#" Value="char IConvertible.ToChar (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance char System.IConvertible.ToChar(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToChar(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToChar (provider As IFormatProvider) As Char Implements IConvertible.ToChar" />
      <MemberSignature Language="C++ CLI" Value=" virtual char System.IConvertible.ToChar(IFormatProvider ^ provider) = IConvertible::ToChar;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToChar(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">實作 <see cref="T:System.IFormatProvider" /> 介面的物件。 (不使用這個參數；請指定 <see langword="null" />)。</param>
        <summary>不支援這個轉換。 嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
        <returns>不使用此成員的傳回值。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDateTime">
      <MemberSignature Language="C#" Value="DateTime IConvertible.ToDateTime (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.DateTime System.IConvertible.ToDateTime(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToDateTime(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDateTime (provider As IFormatProvider) As DateTime Implements IConvertible.ToDateTime" />
      <MemberSignature Language="C++ CLI" Value=" virtual DateTime System.IConvertible.ToDateTime(IFormatProvider ^ provider) = IConvertible::ToDateTime;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDateTime(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">實作 <see cref="T:System.IFormatProvider" /> 介面的物件。 (不使用這個參數；請指定 <see langword="null" />)。</param>
        <summary>傳回目前的 <see cref="T:System.DateTime" />物件。</summary>
        <returns>目前的物件。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDecimal">
      <MemberSignature Language="C#" Value="decimal IConvertible.ToDecimal (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Decimal System.IConvertible.ToDecimal(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToDecimal(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDecimal (provider As IFormatProvider) As Decimal Implements IConvertible.ToDecimal" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Decimal System.IConvertible.ToDecimal(IFormatProvider ^ provider) = IConvertible::ToDecimal;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDecimal(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">實作 <see cref="T:System.IFormatProvider" /> 介面的物件。 (不使用這個參數；請指定 <see langword="null" />)。</param>
        <summary>不支援這個轉換。 嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
        <returns>不使用此成員的傳回值。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDouble">
      <MemberSignature Language="C#" Value="double IConvertible.ToDouble (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float64 System.IConvertible.ToDouble(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToDouble(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDouble (provider As IFormatProvider) As Double Implements IConvertible.ToDouble" />
      <MemberSignature Language="C++ CLI" Value=" virtual double System.IConvertible.ToDouble(IFormatProvider ^ provider) = IConvertible::ToDouble;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDouble(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">實作 <see cref="T:System.IFormatProvider" /> 介面的物件。 (不使用這個參數；請指定 <see langword="null" />)。</param>
        <summary>不支援這個轉換。 嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
        <returns>不使用此成員的傳回值。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt16">
      <MemberSignature Language="C#" Value="short IConvertible.ToInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int16 System.IConvertible.ToInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt16 (provider As IFormatProvider) As Short Implements IConvertible.ToInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual short System.IConvertible.ToInt16(IFormatProvider ^ provider) = IConvertible::ToInt16;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">實作 <see cref="T:System.IFormatProvider" /> 介面的物件。 (不使用這個參數；請指定 <see langword="null" />)。</param>
        <summary>不支援這個轉換。 嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
        <returns>不使用此成員的傳回值。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt32">
      <MemberSignature Language="C#" Value="int IConvertible.ToInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IConvertible.ToInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt32 (provider As IFormatProvider) As Integer Implements IConvertible.ToInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IConvertible.ToInt32(IFormatProvider ^ provider) = IConvertible::ToInt32;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">實作 <see cref="T:System.IFormatProvider" /> 介面的物件。 (不使用這個參數；請指定 <see langword="null" />)。</param>
        <summary>不支援這個轉換。 嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
        <returns>不使用此成員的傳回值。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt64">
      <MemberSignature Language="C#" Value="long IConvertible.ToInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int64 System.IConvertible.ToInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt64 (provider As IFormatProvider) As Long Implements IConvertible.ToInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual long System.IConvertible.ToInt64(IFormatProvider ^ provider) = IConvertible::ToInt64;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">實作 <see cref="T:System.IFormatProvider" /> 介面的物件。 (不使用這個參數；請指定 <see langword="null" />)。</param>
        <summary>不支援這個轉換。 嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
        <returns>不使用此成員的傳回值。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSByte">
      <MemberSignature Language="C#" Value="sbyte IConvertible.ToSByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int8 System.IConvertible.ToSByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToSByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSByte (provider As IFormatProvider) As SByte Implements IConvertible.ToSByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::SByte System.IConvertible.ToSByte(IFormatProvider ^ provider) = IConvertible::ToSByte;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">實作 <see cref="T:System.IFormatProvider" /> 介面的物件。 (不使用這個參數；請指定 <see langword="null" />)。</param>
        <summary>不支援這個轉換。 嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
        <returns>不使用此成員的傳回值。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSingle">
      <MemberSignature Language="C#" Value="float IConvertible.ToSingle (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float32 System.IConvertible.ToSingle(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToSingle(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSingle (provider As IFormatProvider) As Single Implements IConvertible.ToSingle" />
      <MemberSignature Language="C++ CLI" Value=" virtual float System.IConvertible.ToSingle(IFormatProvider ^ provider) = IConvertible::ToSingle;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSingle(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">實作 <see cref="T:System.IFormatProvider" /> 介面的物件。 (不使用這個參數；請指定 <see langword="null" />)。</param>
        <summary>不支援這個轉換。 嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
        <returns>不使用此成員的傳回值。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToType">
      <MemberSignature Language="C#" Value="object IConvertible.ToType (Type type, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.IConvertible.ToType(class System.Type type, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToType(System.Type,System.IFormatProvider)" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.IConvertible.ToType(Type ^ type, IFormatProvider ^ provider) = IConvertible::ToType;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToType(System.Type,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="type">所要的類型。</param>
        <param name="provider">實作 <see cref="T:System.IFormatProvider" /> 介面的物件。 (不使用這個參數；請指定 <see langword="null" />)。</param>
        <summary>將目前的 <see cref="T:System.DateTime" /> 物件轉換為指定類型的物件。</summary>
        <returns>
          <paramref name="type" /> 參數所指定之類型的物件，包含相當於目前 <see cref="T:System.DateTime" /> 物件的值。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="type" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidCastException">不支援 <see cref="T:System.DateTime" /> 型別進行這種轉換。</exception>
        <altmember cref="T:System.Convert" />
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt16">
      <MemberSignature Language="C#" Value="ushort IConvertible.ToUInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int16 System.IConvertible.ToUInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToUInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt16 (provider As IFormatProvider) As UShort Implements IConvertible.ToUInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt16 System.IConvertible.ToUInt16(IFormatProvider ^ provider) = IConvertible::ToUInt16;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">實作 <see cref="T:System.IFormatProvider" /> 介面的物件。 (不使用這個參數；請指定 <see langword="null" />)。</param>
        <summary>不支援這個轉換。 嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
        <returns>不使用此成員的傳回值。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt32">
      <MemberSignature Language="C#" Value="uint IConvertible.ToUInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int32 System.IConvertible.ToUInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToUInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt32 (provider As IFormatProvider) As UInteger Implements IConvertible.ToUInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt32 System.IConvertible.ToUInt32(IFormatProvider ^ provider) = IConvertible::ToUInt32;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">實作 <see cref="T:System.IFormatProvider" /> 介面的物件。 (不使用這個參數；請指定 <see langword="null" />)。</param>
        <summary>不支援這個轉換。 嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
        <returns>不使用此成員的傳回值。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt64">
      <MemberSignature Language="C#" Value="ulong IConvertible.ToUInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int64 System.IConvertible.ToUInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToUInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt64 (provider As IFormatProvider) As ULong Implements IConvertible.ToUInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt64 System.IConvertible.ToUInt64(IFormatProvider ^ provider) = IConvertible::ToUInt64;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">實作 <see cref="T:System.IFormatProvider" /> 介面的物件。 (不使用這個參數；請指定 <see langword="null" />)。</param>
        <summary>不支援這個轉換。 嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
        <returns>不使用此成員的傳回值。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">要填入資料的物件。</param>
        <param name="context">這個序列化的目的端。 (不使用這個參數；請指定 <see langword="null" />)。</param>
        <summary>使用序列化目前 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 物件所需的資料，填入 <see cref="T:System.DateTime" /> 物件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會填入`info`參數<xref:System.DateTime.Ticks%2A>和<xref:System.DateTime.Kind%2A>屬性值。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="info" /> 為 <see langword="null" />。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">需要完全信任立即呼叫者。 這個成員無法供部分信任或安全性透明程式碼。</permission>
      </Docs>
    </Member>
    <Member MemberName="Ticks">
      <MemberSignature Language="C#" Value="public long Ticks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Ticks" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Ticks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Ticks As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long Ticks { long get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得表示這個執行個體日期和時間的刻度數目。</summary>
        <value>刻度數目，表示這個執行個體的日期和時間。 值介於 <see langword="DateTime.MinValue.Ticks" /> 和 <see langword="DateTime.MaxValue.Ticks" /> 之間。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 單一刻度表示一百個奈秒或每秒的一個 10-百萬分之一秒。 沒有刻度 10,000 毫秒或 10 百萬個的每秒的刻度。  
  
 這個屬性的值代表 0001 年 1 月 1 日的 12:00:00 午夜以來已經過的 100 奈秒間隔數 (0: 00:00 年 1 月 1 日的 UTC 0001 西曆中)，表示<xref:System.DateTime.MinValue?displayProperty=nameWithType>。 它不包含是能歸因於 leap 秒的刻度的數。  
  
   
  
## Examples  
 下列範例會使用<xref:System.DateTime.Ticks%2A>屬性若要顯示的第二十一世紀起已經過的刻度數以及具現化<xref:System.TimeSpan>物件。 <xref:System.TimeSpan>物件會被用來顯示使用數個其他時間間隔的已耗用時間。  
  
 [!code-csharp[System.DateTime.Ticks#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Ticks/cs/Ticks.cs#1)]
 [!code-vb[System.DateTime.Ticks#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Ticks/vb/Ticks.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TimeOfDay">
      <MemberSignature Language="C#" Value="public TimeSpan TimeOfDay { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan TimeOfDay" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.TimeOfDay" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TimeOfDay As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan TimeOfDay { TimeSpan get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得這個執行個體的一天時間。</summary>
        <value>時間間隔，表示從午夜以來已經過的當天部分。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不同於<xref:System.DateTime.Date%2A>屬性。 它會傳回<xref:System.DateTime>值，表示日期，但沒有時間元件，<xref:System.DateTime.TimeOfDay%2A>屬性會傳回<xref:System.TimeSpan>值，表示<xref:System.DateTime>值的時間元件。  
  
 如果您想要顯示的當日時間，或擷取的一天時間的字串表示<xref:System.DateTime>值，您可以改為呼叫的多載<xref:System.DateTime.ToString%2A>方法`format`參數或使用[複合格式](~/docs/standard/base-types/composite-formatting.md) "t"或"T"標準格式字串的功能。  
  
   
  
## Examples  
 下列範例顯示的值<xref:System.DateTime.TimeOfDay%2A>屬性的陣列<xref:System.DateTime>值。 它也傳回值的相反複合格式化作業中的"t"標準格式字串所傳回的字串。  
  
 [!code-csharp[System.DateTime.TimeOfDay#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.timeofday/cs/timeofday1.cs#1)]
 [!code-vb[System.DateTime.TimeOfDay#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.timeofday/vb/timeofday1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.TimeSpan" />
      </Docs>
    </Member>
    <Member MemberName="ToBinary">
      <MemberSignature Language="C#" Value="public long ToBinary ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToBinary() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToBinary" />
      <MemberSignature Language="VB.NET" Value="Public Function ToBinary () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToBinary();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>將目前的 <see cref="T:System.DateTime" /> 物件序列化成 64 位元的二進位值，之後可以用這個值來重新建立 <see cref="T:System.DateTime" /> 物件。</summary>
        <returns>64 位元帶正負號的整數，可以編碼 <see cref="P:System.DateTime.Kind" /> 和 <see cref="P:System.DateTime.Ticks" /> 屬性。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.DateTime.ToBinary%2A>方法，將目前值轉換<xref:System.DateTime>二進位值的物件。 接著，使用二進位值和<xref:System.DateTime.FromBinary%2A>方法來重新建立原始<xref:System.DateTime>物件。  
  
> [!IMPORTANT]
>  在某些情況下，<xref:System.DateTime>所傳回的值<xref:System.DateTime.FromBinary%2A>方法不是與相同原始<xref:System.DateTime>值提供給<xref:System.DateTime.ToBinary%2A>方法。 如需詳細資訊，請參閱下節中，「 本機時間調整 」。  
  
## <a name="local-time-adjustment"></a>本機時間調整  
 本地時間、 國際標準時間調整，以當地時區，由<xref:System.DateTime>結構其<xref:System.DateTime.Kind%2A>屬性具有值<xref:System.DateTimeKind.Local>。 還原本機時<xref:System.DateTime>值所產生的二進位表示法<xref:System.DateTime.ToBinary%2A>方法，<xref:System.DateTime.FromBinary%2A>方法可能會調整重建後的值，使不等於原始值。 在下列狀況下可能會發生這種情形：  
  
-   如果本機<xref:System.DateTime>物件由一個時區中序列化<xref:System.DateTime.ToBinary%2A>方法，然後在不同的時區，由還原序列化和<xref:System.DateTime.FromBinary%2A>方法，表示所產生的本機時間<xref:System.DateTime>物件會自動調整第二個時區中。  
  
     例如，請考慮<xref:System.DateTime>物件，代表本地時間為下午 3。 在美國太平洋時區中執行的應用程式太平洋時區使用<xref:System.DateTime.ToBinary%2A>方法，以將其轉換<xref:System.DateTime>二進位值的物件。 在美國太平洋時區中執行的另一個應用程式美加東部時區使用<xref:System.DateTime.FromBinary%2A>方法，將二進位值，轉換至新<xref:System.DateTime>物件。 新的值<xref:System.DateTime>物件是下午 6 點，以時間為原始的下午 3 代表相同的點 值，但會以美國東部時區為準的當地時間調整。  
  
-   如果在本機的二進位表示法<xref:System.DateTime>值代表本地時區系統上的時間無效<xref:System.DateTime.FromBinary%2A>是呼叫，時間會調整，以便有效。  
  
     例如，從標準時間轉換到日光節約時間發生在美國太平洋時區太平洋時區在 2010 年 3 月 14 日到上午 2:00，時間推進到上午 3:00 的一小時 這個小時間隔內會是無效的時間，也就是不存在於這個時區的時間間隔。 下列範例顯示時的時間之內這個範圍會轉換為二進位值的<xref:System.DateTime.ToBinary%2A>方法，然後還原<xref:System.DateTime.FromBinary%2A>成為有效的時間會調整的方法，將原始值。 您可以判斷是否是特定日期和時間值可能會受限於修改傳遞至<xref:System.TimeZoneInfo.IsInvalidTime%2A?displayProperty=nameWithType>方法，為此範例會說明。  
  
     [!code-csharp[System.DateTime.FromBinary#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.frombinary/cs/frombinary1.cs#1)]
     [!code-vb[System.DateTime.FromBinary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.frombinary/vb/frombinary1.vb#1)]  
  
## <a name="version-considerations"></a>版本的考量  
 以.NET Framework 2.0 版中，啟動<xref:System.DateTime>結構包含私用的類型欄位，指出指定的時間值根據本地時間、 國際標準時間 (UTC) 或兩者皆非和私用的刻度欄位，其中包含指定的日期和時間的 100 奈秒刻度數目。 使用可以存取刻度欄位<xref:System.DateTime.Ticks%2A>屬性和 [類型] 欄位可以使用存取<xref:System.DateTime.Kind%2A>屬性。  
  
 在.NET Framework 2.0，如果您序列化之前<xref:System.DateTime>物件手動而不是使用序列化介面，例如<xref:System.Runtime.Serialization.ISerializable?displayProperty=nameWithType>，您只需要序列化中的刻度資料<xref:System.DateTime>結構。 從 2.0 版開始，您也必須序列化類型的資料。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.FromBinary(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="Today">
      <MemberSignature Language="C#" Value="public static DateTime Today { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime Today" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Today" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Today As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime Today { DateTime get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得目前的日期。</summary>
        <value>物件，設定為今天的日期，且時間元件設定為 00:00:00。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 從.NET Framework 2.0 版開始，傳回值是<xref:System.DateTime>其<xref:System.DateTime.Kind%2A>屬性會傳回<xref:System.DateTimeKind.Local>。  
  
 因為它會傳回目前的日期，但目前的時間，沒有<xref:System.DateTime.Today%2A>屬性是適用於只使用日期的應用程式中使用。 如需詳細資訊，請參閱[選擇之間 DateTime、 DateTimeOffset、 TimeSpan 和 TimeZoneInfo](~/docs/standard/datetime/choosing-between-datetime.md)。 相反地，<xref:System.DateTime.TimeOfDay%2A>屬性會傳回目前的時間，不含目前的日期，而<xref:System.DateTime.Now%2A>屬性會傳回目前的日期和目前的時間。  
  
   
  
## Examples  
 下列範例會使用<xref:System.DateTime.Date%2A>屬性，以擷取目前的日期。 它也說明了如何<xref:System.DateTime>值可以使用某些標準日期和時間格式字串格式化。 請注意的第三個呼叫所產生的輸出<xref:System.DateTime.ToString%28System.String%29>方法使用 g 格式規範來包含時間元件，也就是零。  
  
 [!code-csharp[System.DateTime.Today#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Today/cs/Today1.cs#1)]
 [!code-vb[System.DateTime.Today#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Today/vb/Today1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTime.Now" />
        <altmember cref="P:System.DateTime.TimeOfDay" />
      </Docs>
    </Member>
    <Member MemberName="ToFileTime">
      <MemberSignature Language="C#" Value="public long ToFileTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToFileTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToFileTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToFileTime () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToFileTime();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>將目前 <see cref="T:System.DateTime" /> 物件的值轉換成 Windows 檔案時間。</summary>
        <returns>以 Windows 檔案時間表示的目前 <see cref="T:System.DateTime" /> 物件的值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Windows 檔案時間是 64 位元值，表示 12:00，年 1 月 1 西元 1601年日午夜起已經過的 100 奈秒間隔數 (C.E.)國際標準時間 (UTC)。 Windows 用來記錄應用程式建立、 存取，或寫入檔案時的檔案時間。  
  
 <xref:System.DateTime.ToFileTime%2A>方法會使用<xref:System.DateTime.Kind%2A>屬性來判斷是否目前<xref:System.DateTime>物件是本地時間、 UTC 時間或未指定的一種會被視為本地時間的時間。  
  
   
  
## Examples  
 下列範例會示範<xref:System.DateTime.ToFileTime%2A>方法。  
  
 [!code-cpp[DateTime.ToFileTime#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.ToFileTime/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.ToFileTime#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToFileTime/CS/class1.cs#1)]
 [!code-vb[DateTime.ToFileTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToFileTime/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">產生的檔案時間會代表西元 1601 年 1 月 1 日午夜 12:00 之前的日期和時間。 UTC。</exception>
        <block subset="none" type="usage">
          <para>一般情況下，<see cref="M:System.DateTime.FromFileTime(System.Int64)" />方法還原<see cref="T:System.DateTime" />所儲存的值<see cref="M:System.DateTime.ToFileTime" />方法。 不過，在下列情況下的兩個值可能與不同：  
  
-   如果序列化和還原序列化<see cref="T:System.DateTime" />值偏高，在不同時區。 例如，如果<see cref="T:System.DateTime" />時間為下午 12:30 的值 在美國太平洋時區美加東部時區是序列化的而且在美國太平洋時區然後還原序列化太平洋時區，下午 12:30 的原始值 會調整為上午 9:30 以反映兩個時區之間的差異。  
  
-   如果<see cref="T:System.DateTime" />序列化的值代表本地時區中無效的時間。 在此情況下，<see cref="M:System.DateTime.ToFileTime" />方法調整還原<see cref="T:System.DateTime" />值，使其以當地時區表示有效的時間。  
  
     例如，從標準時間轉換到日光節約時間發生在美國太平洋時區太平洋時區在 2010 年 3 月 14 日到上午 2:00，時間推進到上午 3:00 的一小時 這個小時間隔內會是無效的時間，也就是不存在於這個時區的時間間隔。 下列範例顯示時間的年份時的長整數值轉換此範圍<see cref="M:System.DateTime.ToFileTime" />方法，然後還原<see cref="M:System.DateTime.FromFileTime(System.Int64)" />成為有效的時間會調整的方法，將原始值。 您可以判斷是否是特定日期和時間值可能會受限於修改傳遞至<see cref="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" />方法，為此範例會說明。  
  
     [!code-csharp[System.DateTime.FromFileTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.fromfiletime/cs/fromfiletime1.cs#1)]
     [!code-vb[System.DateTime.FromFileTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.fromfiletime/vb/fromfiletime1.vb#1)]</para>
        </block>
        <altmember cref="M:System.DateTime.ToFileTimeUtc" />
        <altmember cref="T:System.Int64" />
        <altmember cref="M:System.DateTime.ToUniversalTime" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="ToFileTimeUtc">
      <MemberSignature Language="C#" Value="public long ToFileTimeUtc ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToFileTimeUtc() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToFileTimeUtc" />
      <MemberSignature Language="VB.NET" Value="Public Function ToFileTimeUtc () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToFileTimeUtc();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>將目前 <see cref="T:System.DateTime" /> 物件的值轉換成 Windows 檔案時間。</summary>
        <returns>以 Windows 檔案時間表示的目前 <see cref="T:System.DateTime" /> 物件的值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Windows 檔案時間是 64 位元值，表示 12:00，年 1 月 1 西元 1601年日午夜起已經過的 100 奈秒間隔數 (C.E.)國際標準時間 (UTC)。 Windows 用來記錄應用程式建立、 存取，或寫入檔案時的檔案時間。  
  
 <xref:System.DateTime.ToFileTimeUtc%2A>方法會使用<xref:System.DateTime.Kind%2A>屬性來判斷是否目前<xref:System.DateTime>物件是本地時間、 UTC 時間或未指定的類型的時間會被視為 UTC 時間。 如果是當地時間，它將時間轉換成 UTC 執行成 Windows 檔案時間轉換之前。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">產生的檔案時間會代表西元 1601 年 1 月 1 日午夜 12:00 之前的日期和時間。 UTC。</exception>
        <block subset="none" type="usage">
          <para>
            <see cref="M:System.DateTime.ToFileTimeUtc" />方法有時候會將本地時間轉換成 UTC，並接著還原藉由呼叫<see cref="M:System.DateTime.FromFileTimeUtc(System.Int64)" />後面接著方法<see cref="M:System.DateTime.ToLocalTime" />方法。 不過，如果原始時間代表本地時區的時間無效，兩個的當地時間值不會相等。 如需詳細資訊，請參閱<see cref="M:System.DateTime.ToLocalTime" />方法。</para>
        </block>
        <altmember cref="M:System.DateTime.ToFileTime" />
        <altmember cref="T:System.Int64" />
        <altmember cref="M:System.DateTime.ToUniversalTime" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="ToLocalTime">
      <MemberSignature Language="C#" Value="public DateTime ToLocalTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime ToLocalTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToLocalTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToLocalTime () As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime ToLocalTime();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>將目前 <see cref="T:System.DateTime" /> 物件的值轉換成本地時間。</summary>
        <returns>物件，其 <see cref="P:System.DateTime.Kind" /> 屬性為 <see cref="F:System.DateTimeKind.Local" />，而其值為與目前 <see cref="T:System.DateTime" /> 物件的值相等的本地時間；如果轉換過的值太大，而無法由 <see cref="F:System.DateTime.MaxValue" /> 物件表示，則為 <see cref="T:System.DateTime" />；如果轉換過的值太小，而無法表示為 <see cref="F:System.DateTime.MinValue" /> 物件，則為 <see cref="T:System.DateTime" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 本地時間等於 Coordinated Universal Time (UTC) 時間再加上的 UTC 位移。 如需詳細的 UTC 位移的詳細資訊，請參閱<xref:System.TimeZone.GetUtcOffset%2A?displayProperty=nameWithType>。 轉換也會考量適用於由目前時間的日光節約時間規則<xref:System.DateTime>物件。  
  
> [!IMPORTANT]
>  在[!INCLUDE[winxp](~/includes/winxp-md.md)]系統<xref:System.DateTime.ToLocalTime%2A>方法會轉換為本地時間 UTC 時，辨識只在目前的調整規則。 如此一來，轉換為目前的調整規則生效之前的期間，可能不會正確反映 UTC 與本地時間之間的差異。  
  
 從.NET Framework 2.0 版中，所傳回的值開始<xref:System.DateTime.ToLocalTime%2A>方法由<xref:System.DateTime.Kind%2A>屬性的目前<xref:System.DateTime>物件。 下表說明可能的結果。  
  
|類型|結果|  
|----------|-------------|  
|<xref:System.DateTimeKind.Utc>|這個執行個體<xref:System.DateTime>轉換為當地時間。|  
|<xref:System.DateTimeKind.Local>|不會執行轉換。|  
|<xref:System.DateTimeKind.Unspecified>|這個執行個體<xref:System.DateTime>假設為 UTC 時間，會執行轉換，如同<xref:System.DateTime.Kind%2A>已<xref:System.DateTimeKind.Utc>。|  
  
> [!NOTE]
>  <xref:System.DateTime.ToLocalTime%2A>方法轉換<xref:System.DateTime>從 UTC 到本地時間值。 若要將任何指定的時區時間轉換為本地時間，使用<xref:System.TimeZoneInfo.ConvertTime%2A?displayProperty=nameWithType>方法。  
  
 轉換所傳回的值是<xref:System.DateTime>其<xref:System.DateTime.Kind%2A>屬性一律會傳回<xref:System.DateTimeKind.Local>。 有效的結果傳回的結果，即使<xref:System.DateTime.ToLocalTime%2A>重複套用至相同<xref:System.DateTime>。  
  
   
  
## Examples  
 下列範例會示範<xref:System.DateTime.ToLocalTime%2A>方法。 請注意，確切的輸出取決於目前的文化特性和本機系統執行所在的時區。  
  
 [!code-cpp[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/CS/class1.cs#1)]
 [!code-vb[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/VB/class1.vb#1)]  
  
 下列範例會使用<xref:System.DateTime.SpecifyKind%2A>方法，示範如何<xref:System.DateTime.Kind%2A>屬性會影響<xref:System.DateTime.ToLocalTime%2A>和<xref:System.DateTime.ToUniversalTime%2A>轉換方法。  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>您可以使用<see cref="M:System.DateTime.ToLocalTime" />方法還原本地日期和時間值，轉換成 UTC 的<see cref="M:System.DateTime.ToUniversalTime" />或<see cref="M:System.DateTime.FromFileTimeUtc(System.Int64)" />方法。 不過，如果原始時間代表本地時區的時間無效，它不會符合已還原的值。 當<see cref="M:System.DateTime.ToLocalTime" />方法將時間與 utc 之間的當地時區，它也會因此也就是有效的時間調整以當地時區。  
  
 例如，從標準時間轉換到日光節約時間發生在美國太平洋時區太平洋時區在 2010 年 3 月 14 日到上午 2:00，時間推進到上午 3:00 的一小時 這個小時間隔內會是無效的時間，也就是不存在於這個時區的時間間隔。 下列範例顯示時的時間之內這個範圍會轉換成 UTC 的<see cref="M:System.DateTime.ToUniversalTime" />方法，然後還原<see cref="M:System.DateTime.ToLocalTime" />成為有效的時間會調整的方法，將原始值。 您可以判斷是否是特定日期和時間值可能會受限於修改傳遞至<see cref="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" />方法，為此範例會說明。  
  
 [!code-csharp[System.DateTime.ToLocalTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tolocaltime/cs/tolocaltime1.cs#1)]
 [!code-vb[System.DateTime.ToLocalTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tolocaltime/vb/tolocaltime1.vb#1)]</para>
        </block>
        <altmember cref="T:System.TimeZone" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
        <altmember cref="M:System.TimeZone.GetDaylightChanges(System.Int32)" />
        <altmember cref="M:System.DateTime.ToUniversalTime" />
      </Docs>
    </Member>
    <Member MemberName="ToLongDateString">
      <MemberSignature Language="C#" Value="public string ToLongDateString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToLongDateString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToLongDateString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToLongDateString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToLongDateString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>將目前 <see cref="T:System.DateTime" /> 物件的值轉換為其相等的完整日期 (Long Date) 字串表示。</summary>
        <returns>字串，內含目前 <see cref="T:System.DateTime" /> 物件的完整日期字串表示。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 目前的值<xref:System.DateTime>物件使用所定義的模式進行格式化<xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A>與目前執行緒文化特性相關聯的屬性。 傳回值是藉由指定"D"傳回的值相同[標準 DateTime 格式字串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)與<xref:System.DateTime.ToString%28System.String%29>方法。  
  
> [!IMPORTANT]
>  所傳回的字串<xref:System.DateTime.ToLongDateString%2A>方法會區分文化特性。 它反映出目前的文化特性所定義的模式<xref:System.Globalization.DateTimeFormatInfo>物件。 例如，EN-US 文化特性，標準的完整日期模式為"dddd，MMMMdd，yyyy";DE-DE 文化特性，它為"dddd，d。 MMMMyyyy";若為 JA-JP 文化特性則是"yyyy'？ 'M'？ 'd'？ ' 」。 特定電腦上特定的格式字串也可以自訂，因此不同於標準的完整日期格式字串。  
  
 如需目前的執行緒文化特性的詳細資訊，請參閱<xref:System.Threading.Thread.CurrentCulture%2A>屬性。 多個它們產生的格式字元、 格式模式和輸出的相關資訊，請參閱[格式化型別](~/docs/standard/base-types/formatting-types.md)主題。 如需變更格式字元相關聯的格式模式的詳細資訊，請參閱<xref:System.Globalization.DateTimeFormatInfo>類別。  
  
   
  
## Examples  
 下列範例會示範<xref:System.DateTime.ToLongDateString%2A>方法。  
  
 [!code-csharp[DateTime.ToShortLongString#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToShortLongString/cs/sls.cs#1)]
 [!code-vb[DateTime.ToShortLongString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToShortLongString/vb/sls.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="M:System.DateTime.ToString" />
      </Docs>
    </Member>
    <Member MemberName="ToLongTimeString">
      <MemberSignature Language="C#" Value="public string ToLongTimeString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToLongTimeString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToLongTimeString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToLongTimeString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToLongTimeString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>將目前 <see cref="T:System.DateTime" /> 物件的值轉換為其相等的完整時間 (Long Time) 字串表示。</summary>
        <returns>字串，內含目前 <see cref="T:System.DateTime" /> 物件的完整時間字串表示。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 目前的值<xref:System.DateTime>物件使用所定義的模式進行格式化<xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A?displayProperty=nameWithType>與目前執行緒文化特性相關聯的屬性。 傳回值是藉由指定"T"傳回的值相同[標準日期和時間格式字串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)與<xref:System.DateTime.ToString%28System.String%29>方法。  
  
> [!IMPORTANT]
>  所傳回的字串<xref:System.DateTime.ToLongTimeString%2A>方法會區分文化特性。 它反映出所定義的模式<xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A>屬性目前的文化特性<xref:System.Globalization.DateTimeFormatInfo>物件。 例如，EN-US 文化特性，標準的完整時間模式是 「 h:mm: ss tt";DE-DE 文化特性，則是"Hh: mm:;"若為 JA-JP 文化特性，它可以是"H:mm: ss"。 特定電腦上特定的格式字串也可以自訂，讓不同於標準的完整時間格式字串。  
  
 如需目前的執行緒文化特性的詳細資訊，請參閱<xref:System.Threading.Thread.CurrentCulture%2A>屬性。 多個它們產生的格式字元、 格式模式和輸出的相關資訊，請參閱[格式化型別](~/docs/standard/base-types/formatting-types.md)主題。 如需變更格式字元相關聯的格式模式的詳細資訊，請參閱<xref:System.Globalization.DateTimeFormatInfo>類別。  
  
   
  
## Examples  
 下列範例會示範<xref:System.DateTime.ToLongTimeString%2A>方法。  
  
 [!code-csharp[System.DateTime.ToLongTimeString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tolongtimestring/cs/sls.cs#1)]
 [!code-vb[System.DateTime.ToLongTimeString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tolongtimestring/vb/sls.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="M:System.DateTime.ToString" />
      </Docs>
    </Member>
    <Member MemberName="ToOADate">
      <MemberSignature Language="C#" Value="public double ToOADate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 ToOADate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToOADate" />
      <MemberSignature Language="VB.NET" Value="Public Function ToOADate () As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ToOADate();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>將這個執行個體的值轉換為相等的 OLE Automation 日期。</summary>
        <returns>雙精確度浮點數，含有等於這個執行個體值的 OLE Automation 日期。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 OLE Automation 日期會實作為浮點數，其不可或缺的元件之前或之後午夜，30 1899 年的日數，且其小數部分代表在除以 24 那一天的時間。 例如，午夜 31 1899 年所表示 1.0;上午 6 點 2.25; 表示 1 年 1 月 1900午夜-1.0; 表示 29 1899 年而且早上 6 點-1.25 表示 29 1899 年。  
  
 基底 OLE Automation 日期為午夜，30 1899 年。 OLE Automation 日期的下限為 1 年 1 月 0100年的午夜。 最大 OLE Automation 日期等同於<xref:System.DateTime.MaxValue?displayProperty=nameWithType>、 31 年 12 月的最後一刻 9999。  
  
 <xref:System.DateTime.ToOADate%2A>方法會擲回<xref:System.OverflowException>如果目前的執行個體代表日期晚於<xref:System.DateTime.MinValue>及更早的版本比 0100 January1，在午夜。 不過，如果目前的執行個體的值為<xref:System.DateTime.MinValue>，方法會傳回 0。  
  
 如需 OLE Automation 的詳細資訊，請參閱[MSDN Library](http://go.microsoft.com/fwlink/?linkid=37118)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">這個執行個體的值無法表示為 OLE Automation 日期。</exception>
        <altmember cref="T:System.Double" />
        <altmember cref="M:System.DateTime.FromOADate(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="ToShortDateString">
      <MemberSignature Language="C#" Value="public string ToShortDateString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToShortDateString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToShortDateString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToShortDateString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToShortDateString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>將目前 <see cref="T:System.DateTime" /> 物件的值轉換為其相等的簡短日期 (Short Date) 字串表示。</summary>
        <returns>字串，內含目前 <see cref="T:System.DateTime" /> 物件的簡短日期字串表示。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 目前的值<xref:System.DateTime>物件使用所定義的模式進行格式化<xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A?displayProperty=nameWithType>與目前執行緒文化特性相關聯的屬性。 傳回值是藉由指定"d"傳回的值相同[標準 DateTime 格式字串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)與<xref:System.DateTime.ToString%28System.String%29>方法。  
  
> [!IMPORTANT]
>  所傳回的字串<xref:System.DateTime.ToShortDateString%2A>方法會區分文化特性。 它反映出目前的文化特性所定義的模式<xref:System.Globalization.DateTimeFormatInfo>物件。 例如，EN-US 文化特性，標準的簡短日期模式是"yyyy/m /";DE-DE 文化特性，它會是"dd。MM.yyyy";若為 JA-JP 文化特性，它是"yyyy/M/d"。 特定電腦上特定的格式字串也可以自訂，因此不同於標準的簡短日期格式字串。  
  
 如需目前的執行緒文化特性的詳細資訊，請參閱<xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=nameWithType>屬性。 多個它們產生的格式字元、 格式模式和輸出的相關資訊，請參閱[格式化型別](~/docs/standard/base-types/formatting-types.md)主題。 如需變更格式字元相關聯的格式模式的詳細資訊，請參閱<xref:System.Globalization.DateTimeFormatInfo>類別。  
  
   
  
## Examples  
 下列範例會示範<xref:System.DateTime.ToShortDateString%2A>方法。 它也會顯示呼叫<xref:System.DateTime.ToShortDateString%2A>方法等同於呼叫<xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType>具有"d"格式參數的方法。  
  
 [!code-csharp[System.DateTime.ToShortDateString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToShortDateString/cs/ToShortDateString.cs#1)]
 [!code-vb[System.DateTime.ToShortDateString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToShortDateString/vb/ToShortDateString.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="M:System.DateTime.ToString" />
      </Docs>
    </Member>
    <Member MemberName="ToShortTimeString">
      <MemberSignature Language="C#" Value="public string ToShortTimeString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToShortTimeString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToShortTimeString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToShortTimeString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToShortTimeString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>將目前 <see cref="T:System.DateTime" /> 物件的值轉換為其相等的簡短時間 (Short Time) 字串表示。</summary>
        <returns>字串，內含目前 <see cref="T:System.DateTime" /> 物件的簡短時間字串表示。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 目前的值<xref:System.DateTime>物件使用所定義的模式進行格式化<xref:System.Globalization.DateTimeFormatInfo.ShortTimePattern%2A?displayProperty=nameWithType>與目前執行緒文化特性相關聯的屬性。 傳回值是藉由指定"t"傳回的值相同[標準 DateTime 格式字串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)與<xref:System.DateTime.ToString%28System.String%29>方法。  
  
> [!IMPORTANT]
>  所傳回的字串<xref:System.DateTime.ToShortTimeString%2A>方法會區分文化特性。 它反映出目前的文化特性所定義的模式<xref:System.Globalization.DateTimeFormatInfo>物件。 例如，EN-US 文化特性，標準的簡短時間模式是 「 h:mm tt";DE-DE 文化特性，則是"Hh: mm"。若為 JA-JP 文化特性，它是"H:mm"。 特定電腦上特定的格式字串也可以自訂，因此不同於標準的簡短時間格式字串。  
  
 如需目前的執行緒文化特性的詳細資訊，請參閱<xref:System.Threading.Thread.CurrentCulture%2A>屬性。 多個它們產生的格式字元、 格式模式和輸出的相關資訊，請參閱[格式化型別](~/docs/standard/base-types/formatting-types.md)主題。 如需變更格式字元相關聯的格式模式的詳細資訊，請參閱<xref:System.Globalization.DateTimeFormatInfo>類別。  
  
   
  
## Examples  
 下列範例會示範<xref:System.DateTime.ToShortTimeString%2A>方法。  
  
 [!code-csharp[DateTime.ToShortLongString#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToShortLongString/cs/sls.cs#1)]
 [!code-vb[DateTime.ToShortLongString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToShortLongString/vb/sls.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="M:System.DateTime.ToString" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將目前 <see cref="T:System.DateTime" /> 物件的值，轉換為其相等的字串表示。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>使用目前文化特性的格式化慣例，將目前 <see cref="T:System.DateTime" /> 物件的值轉換為其相等的字串表示。</summary>
        <returns>目前 <see cref="T:System.DateTime" /> 物件值的字串表示。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 目前的值<xref:System.DateTime>物件的格式會使用一般的日期和時間格式規範 ('G')。 若要設定使用特定的日期和時間格式規範的格式，請呼叫<xref:System.DateTime.ToString%28System.String%29>方法。 若要格式化特定文化特性會使用一般的日期和時間格式規範 ('G')，呼叫<xref:System.DateTime.ToString%28System.IFormatProvider%29>方法。 若要格式化使用的特定日期和時間格式規範和特定文化特性的慣例，呼叫<xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29>方法。  
  
 這個方法會使用衍生自目前的文化特性格式資訊。 特別是，它結合了所傳回的自訂格式字串<xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A>和<xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A>屬性<xref:System.Globalization.DateTimeFormatInfo>所傳回物件`Thread.CurrentThread.CurrentCulture.DateTimeFormat`屬性。 如需詳細資訊，請參閱<xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>。 其他多載<xref:System.DateTime.ToString%2A>方法可讓您指定的文化特性的格式，若要使用，並定義輸出的模式<xref:System.DateTime>值。  
  
   
  
## Examples  
 下列範例說明如何的字串表示<xref:System.DateTime>所傳回的值<xref:System.DateTime.ToString>方法取決於目前執行緒的文化特性。 它 EN-US 從目前的執行緒文化特性變更為 FR-FR 為 JA-JP。 並在每個情況下呼叫<xref:System.DateTime.ToString>方法來傳回日期和時間值，使用該文化特性的字串表示。  
  
 [!code-csharp[System.DateTime.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/ToString1.cs#1)]
 [!code-vb[System.DateTime.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/ToString1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">日期和時間超出目前文化特性使用之曆法所支援的日期範圍。</exception>
        <block subset="none" type="usage">
          <para>
            <see cref="M:System.DateTime.ToString" />方法會傳回目前文化特性所使用的行事曆中的日期和時間的字串表示。 如果目前的值<see cref="T:System.DateTime" />執行個體是早於<see cref="P:System.Globalization.Calendar.MinSupportedDateTime" />或更晚<see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />，方法會擲回<see cref="T:System.ArgumentOutOfRangeException" />。 下列範例提供一個實例。 它會嘗試以超出範圍的日期格式<see cref="T:System.Globalization.HijriCalendar" />類別目前的文化特性為阿拉伯文 （敘利亞） 時。  
  
 [!code-csharp[System.DateTime.ToString.ArgumentOutOfRangeException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/cs/datetime.tostring.argumentoutofrangeexception2.cs#2)]
 [!code-vb[System.DateTime.ToString.ArgumentOutOfRangeException#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/vb/datetime.tostring.argumentoutofrangeexception2.vb#2)]</para>
        </block>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToString(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">物件，提供特定文化特性格式資訊。</param>
        <summary>使用指定的特定文化特性格式資訊，將目前 <see cref="T:System.DateTime" /> 物件的值轉換為其相等的字串表示。</summary>
        <returns>目前 <see cref="T:System.DateTime" /> 物件值的字串表示，如 <paramref name="provider" /> 所指定。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 目前的值<xref:System.DateTime>物件的格式會使用一般的日期和時間格式規範 ('G') 的格式化輸出使用簡短日期模式和完整時間模式。  
  
 簡短日期和完整時間模式的格式由所定義`provider`參數。 `provider`參數可以是下列任一項：  
  
-   A<xref:System.Globalization.CultureInfo>表示傳回的字串中反映其格式設定慣例的文化特性的物件。 <xref:System.Globalization.DateTimeFormatInfo>所傳回物件<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>屬性會定義傳回之字串的格式。  
  
-   A<xref:System.Globalization.DateTimeFormatInfo>物件，定義日期和時間資料的格式。  
  
-   自訂物件實作<xref:System.IFormatProvider>介面。 其<xref:System.IFormatProvider.GetFormat%2A>方法會傳回<xref:System.Globalization.DateTimeFormatInfo>提供格式設定資訊的物件。  
  
 如果`provider`是`null`、<xref:System.Globalization.DateTimeFormatInfo>會使用目前文化特性相關聯的物件。 如需詳細資訊，請參閱<xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>。  
  
   
  
## Examples  
 下列範例會顯示日期和時間使用的字串表示<xref:System.Globalization.CultureInfo>代表五個不同的文化特性的物件。  
  
 [!code-csharp[System.DateTime.ToString#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/ToString4.cs#3)]
 [!code-vb[System.DateTime.ToString#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/ToString4.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">日期與時間超出 <paramref name="provider" /> 使用之日曆所支援的日期範圍。</exception>
        <block subset="none" type="usage">
          <para>
            <see cref="M:System.DateTime.ToString(System.IFormatProvider)" />方法傳回的日期和時間的字串表示中所代表的文化特性所使用的行事曆<paramref name="provider" />參數。 其行事曆由定義<see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" />屬性。 如果目前的值<see cref="T:System.DateTime" />執行個體是早於<see cref="P:System.Globalization.Calendar.MinSupportedDateTime" />或更晚<see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />，方法會擲回<see cref="T:System.ArgumentOutOfRangeException" />。 下列範例提供一個實例。 它會嘗試以超出範圍的日期格式<see cref="T:System.Globalization.JapaneseCalendar" />類別。  
  
 [!code-csharp[System.DateTime.ToString.ArgumentOutOfRangeException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/cs/datetime.tostring.argumentoutofrangeexception1.cs#1)]
 [!code-vb[System.DateTime.ToString.ArgumentOutOfRangeException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/vb/datetime.tostring.argumentoutofrangeexception1.vb#1)]</para>
        </block>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(System::String ^ format);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">標準或自訂的日期和時間格式字串。</param>
        <summary>使用指定的格式和目前文化特性的格式化慣例，將目前 <see cref="T:System.DateTime" /> 物件的值轉換為其相等的字串表示。</summary>
        <returns>目前 <see cref="T:System.DateTime" /> 物件值的字串表示，如 <paramref name="format" /> 所指定。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.ToString%28System.String%29>方法傳回的字串表示的日期和時間值中使用目前文化特性; 如需詳細資訊的格式設定慣例的特定格式，請參閱<xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>。  
  
 `format`參數應該包含單一格式規範字元 (請參閱[標準日期和時間格式字串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)) 或自訂格式模式 (請參閱[自訂日期和時間格式字串](~/docs/standard/base-types/custom-date-and-time-format-strings.md))，定義傳回之字串的格式。 如果`format`是`null`或是空字串，一般格式規範，而 'G'，會使用。  
  
 這個方法的一些用法包括：  
  
-   取得字串中目前的文化特性的簡短日期和時間格式顯示日期和時間。 若要這樣做，您可以使用"G"格式規範。  
  
-   取得字串，包含只在月份和年份。 若要這樣做，您可以使用 「 MM/yyyy"格式字串。 格式字串會使用目前文化特性之日期分隔符號。  
  
-   取得字串，包含的日期和時間以特定格式。 例如，"MM/dd/yyyyHH:mm"格式字串的日期和時間字串的固定格式顯示這類"19 的 / 03 / / 2013年 18:06"。 格式字串會使用"/"做為固定的日期分隔符號，不論特定文化特性設定為何。  
  
-   取得壓縮格式的日期，可以用來序列化的日期字串。 例如，"yyyyMMdd"格式字串會顯示與任何日期分隔符號後面兩位數月份和兩位數天數的四位數年份。  
  
 下列範例會使用這三個格式字串來使用 EN-US 和 FR-FR 文化特性的慣例，來顯示日期和時間值。  
  
 [!code-csharp[System.DateTime.ToString#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/tostring5.cs#5)]
 [!code-vb[System.DateTime.ToString#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/tostring5.vb#5)]  
  
   
  
## Examples  
 下列範例使用每個標準日期和時間格式字串和選取的自訂日期和時間格式字串來顯示的字串表示<xref:System.DateTime>值。 此範例的執行緒目前文化特性是 EN-US。  
  
 [!code-csharp[System.DateTime.ToString#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/ToString2.cs#2)]
 [!code-vb[System.DateTime.ToString#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/ToString2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> 的長度為 1，而且不是為 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 所定義的格式規範字元之一。  
  
 -或-  
  
 <paramref name="format" /> 並沒不包含有效的自訂格式模式。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">日期和時間超出目前文化特性使用之曆法所支援的日期範圍。</exception>
        <block subset="none" type="usage">
          <para>
            <see cref="M:System.DateTime.ToString(System.String)" />方法會傳回目前文化特性所使用的行事曆中的日期和時間的字串表示。 如果目前的值<see cref="T:System.DateTime" />執行個體是早於<see cref="P:System.Globalization.Calendar.MinSupportedDateTime" />或更晚<see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />，方法會擲回<see cref="T:System.ArgumentOutOfRangeException" />。 下列範例提供一個實例。 它會嘗試以超出範圍的日期格式<see cref="T:System.Globalization.HebrewCalendar" />類別目前的文化特性時希伯來文 （以色列）。  
  
 [!code-csharp[System.DateTime.ToString.ArgumentOutOfRangeException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/cs/datetime.tostring.argumentoutofrangeexception3.cs#3)]
 [!code-vb[System.DateTime.ToString.ArgumentOutOfRangeException#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/vb/datetime.tostring.argumentoutofrangeexception3.vb#3)]</para>
        </block>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(System::String ^ format, IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">標準或自訂的日期和時間格式字串。</param>
        <param name="provider">物件，提供特定文化特性格式資訊。</param>
        <summary>使用指定的格式和特定文化特性的格式資訊，將目前 <see cref="T:System.DateTime" /> 物件的值，轉換為其相等的字串表示。</summary>
        <returns>目前 <see cref="T:System.DateTime" /> 物件值的字串表示，如 <paramref name="format" /> 及 <paramref name="provider" />所指定。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `format`參數可以包含單一格式規範字元 (請參閱[標準日期和時間格式字串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)) 或自訂格式模式 (請參閱[自訂日期和時間格式字串](~/docs/standard/base-types/custom-date-and-time-format-strings.md))。 如果`format`是`null`或空字串 ("")，使用標準格式規範，"G"、。  
  
 `provider`參數定義的模式，對應的標準格式規範，以及在符號和的日期和時間元件的名稱。 `provider`參數可以是下列任一項：  
  
-   A<xref:System.Globalization.CultureInfo>表示傳回的字串中反映其格式設定慣例的文化特性的物件。 <xref:System.Globalization.DateTimeFormatInfo>所傳回物件<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>屬性會定義傳回之字串的格式。  
  
-   A<xref:System.Globalization.DateTimeFormatInfo>物件，定義日期和時間資料的格式。  
  
-   自訂物件實作<xref:System.IFormatProvider>介面。 其<xref:System.IFormatProvider.GetFormat%2A>方法會傳回<xref:System.Globalization.DateTimeFormatInfo>提供格式設定資訊的物件。  
  
 如果`provider`是`null`、<xref:System.Globalization.DateTimeFormatInfo>聯目前在使用的文化特性。 如需詳細資訊，請參閱<xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>。  
  
   
  
## Examples  
 下列範例會使用每個標準日期時間格式字串來顯示日期和時間的四個不同的文化特性的字串表示。  
  
 [!code-csharp[System.DateTime.ToString#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/tostring3.cs#4)]
 [!code-vb[System.DateTime.ToString#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/tostring3.vb#4)]  
  
 下列範例將示範不同的方式格式化<xref:System.DateTime>值使用的非變異<xref:System.Globalization.DateTimeFormatInfo>。  
  
 [!code-cpp[Classic DateTime.ToString2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic DateTime.ToString2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic DateTime.ToString2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic DateTime.ToString2 Example/CS/source.cs#1)]
 [!code-vb[Classic DateTime.ToString2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic DateTime.ToString2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> 的長度為 1，而且不是為 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 所定義的格式規範字元之一。  
  
 -或-  
  
 <paramref name="format" /> 並沒不包含有效的自訂格式模式。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">日期與時間超出 <paramref name="provider" /> 使用之日曆所支援的日期範圍。</exception>
        <block subset="none" type="usage">
          <para>
            <see cref="M:System.DateTime.ToString(System.String,System.IFormatProvider)" />方法傳回的日期和時間的字串表示中使用的曆法<paramref name="provider" />參數。 其行事曆由定義<see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" />屬性。 如果目前的值<see cref="T:System.DateTime" />執行個體是早於<see cref="P:System.Globalization.Calendar.MinSupportedDateTime" />或更晚<see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />，方法會擲回<see cref="T:System.ArgumentOutOfRangeException" />。 下列範例提供一個實例。 它會嘗試以超出範圍的日期格式<see cref="T:System.Globalization.UmAlQuraCalendar" />類別。  
  
 [!code-csharp[System.DateTime.ToString.ArgumentOutOfRangeException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/cs/datetime.tostring.argumentoutofrangeexception4.cs#4)]
 [!code-vb[System.DateTime.ToString.ArgumentOutOfRangeException#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/vb/datetime.tostring.argumentoutofrangeexception4.vb#4)]</para>
        </block>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="ToUniversalTime">
      <MemberSignature Language="C#" Value="public DateTime ToUniversalTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime ToUniversalTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToUniversalTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToUniversalTime () As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime ToUniversalTime();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>將目前 <see cref="T:System.DateTime" /> 物件的值轉換成國際標準時間 (UTC)。</summary>
        <returns>物件，其 <see cref="P:System.DateTime.Kind" /> 屬性為 <see cref="F:System.DateTimeKind.Utc" />，而其值為與目前 <see cref="T:System.DateTime" /> 物件的值相等的 UTC 時間；如果轉換過的值太大，而無法由 <see cref="F:System.DateTime.MaxValue" /> 物件表示，則為 <see cref="T:System.DateTime" />；如果轉換過的值太小，而無法表示為 <see cref="F:System.DateTime.MinValue" /> 物件，則為 <see cref="T:System.DateTime" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 國際標準時間 (UTC) 會等於的當地時間減去 UTC 時差。 如需詳細的 UTC 位移的詳細資訊，請參閱<xref:System.TimeZone.GetUtcOffset%2A?displayProperty=nameWithType>。 轉換也會考量適用於由目前時間的日光節約時間規則<xref:System.DateTime>物件。  
  
> [!IMPORTANT]
>  在[!INCLUDE[winxp](~/includes/winxp-md.md)]系統<xref:System.DateTime.ToUniversalTime%2A>方法會從本地時間轉換為 UTC 時，辨識只在目前的調整規則。 如此一來，轉換為目前的調整規則生效之前的期間，可能不會正確反映本地時間與 UTC 之間的差異。  
  
 從.NET Framework 2.0 版中，所傳回的值開始<xref:System.DateTime.ToUniversalTime%2A>方法由<xref:System.DateTime.Kind%2A>屬性的目前<xref:System.DateTime>物件。 下表說明可能的結果。  
  
|類型|結果|  
|----------|-------------|  
|<xref:System.DateTimeKind.Utc>|不會執行轉換。|  
|<xref:System.DateTimeKind.Local>|目前<xref:System.DateTime>物件轉換為 UTC。|  
|<xref:System.DateTimeKind.Unspecified>|目前<xref:System.DateTime>物件會被假設為本地時間、，然後執行轉換如同<xref:System.DateTime.Kind%2A>已<xref:System.DateTimeKind.Local>。|  
  
> [!NOTE]
>  <xref:System.DateTime.ToUniversalTime%2A>方法轉換<xref:System.DateTime>UTC 到本地時間的值。 若要將時間轉換成 UTC 非當地時間區域中，使用<xref:System.TimeZoneInfo.ConvertTimeToUtc%28System.DateTime%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType>方法。 若要轉換其與 UTC 相差的已知的時間，使用<xref:System.DateTimeOffset.ToUniversalTime%2A>方法。  
  
 如果日期和時間的執行個體值是模稜兩可的時間，這個方法會假設它是標準時間。 （模稜兩可的時間是可對應至標準時間或本地時區的日光節約時間）如果日期和時間的執行個體值是無效的時間，此方法只會減去本地時間的本地時區的 UTC 位移傳回 UTC。 （不正確的時間是指因為日光節約時間調整規則的應用程式不存在。）  
  
   
  
## Examples  
 下列範例會示範<xref:System.DateTime.ToUniversalTime%2A>方法。  
  
 [!code-cpp[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/CS/class1.cs#1)]
 [!code-vb[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/VB/class1.vb#1)]  
  
 下列範例會使用<xref:System.DateTime.SpecifyKind%2A>方法，示範如何<xref:System.DateTime.Kind%2A>屬性會影響<xref:System.DateTime.ToLocalTime%2A>和<xref:System.DateTime.ToUniversalTime%2A>轉換方法。  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>
            <see cref="M:System.DateTime.ToUniversalTime" />方法有時用來將本地時間轉換成 UTC。 <see cref="M:System.DateTime.ToLocalTime" />然後會呼叫方法來還原原始的本機時間。 不過，如果原始時間代表本地時區的時間無效，兩個的當地時間值不會相等。 如需詳細資訊和範例，請參閱<see cref="M:System.DateTime.ToLocalTime" />方法。  
  
 在[!INCLUDE[winxp](~/includes/winxp-md.md)]系統<see cref="M:System.DateTime.ToUniversalTime" />方法可辨識的當地時區，它只適用於所有日期，包括下層日期 （亦即，日期早於目前的調整的開始日期，則只有目前調整規則規則）。 應用程式上執行[!INCLUDE[winxp](~/includes/winxp-md.md)]需要在過去精確的本地日期和時間計算使用，必須處理這種行為<see cref="M:System.TimeZoneInfo.FindSystemTimeZoneById(System.String)" />方法來擷取<see cref="T:System.TimeZoneInfo" />物件對應於當地時區，並呼叫其<see cref="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime,System.TimeZoneInfo)" />方法。  
  
 下列範例說明之間的差異<see cref="M:System.DateTime.ToUniversalTime" />和<see cref="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime,System.TimeZoneInfo)" />方法[!INCLUDE[winxp](~/includes/winxp-md.md)]美國太平洋時區中。 第一次這兩個方法呼叫會套用目前的時區調整規則 （這在 2007年進入效果） 為 2006 年的日期。 提供轉換到日光節約時間的第二個星期日的年 3 月; 目前的調整規則上一個規則，在 2006 中，供轉換到日光節約時間發生在 4 月的第一個星期日，已在作用中。 在第三個方法呼叫正確地執行這個歷程記錄的日期和時間轉換。  
  
 [!code-csharp[System.DateTime.ToUniversalTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.touniversaltime/cs/touniversaltime.cs#1)]
 [!code-vb[System.DateTime.ToUniversalTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.touniversaltime/vb/touniversaltime.vb#1)]</para>
        </block>
        <altmember cref="M:System.DateTime.ToLocalTime" />
      </Docs>
    </Member>
    <Member MemberName="TryFormat">
      <MemberSignature Language="C#" Value="public bool TryFormat (Span&lt;char&gt; destination, out int charsWritten, ReadOnlySpan&lt;char&gt; format = null, IFormatProvider provider = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryFormat(valuetype System.Span`1&lt;char&gt; destination, [out] int32&amp; charsWritten, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryFormat (destination As Span(Of Char), ByRef charsWritten As Integer, Optional format As ReadOnlySpan(Of Char) = null, Optional provider As IFormatProvider = null) As Boolean" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" />
        <Parameter Name="charsWritten" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="destination">To be added.</param>
        <param name="charsWritten">To be added.</param>
        <param name="format">To be added.</param>
        <param name="provider">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將日期和時間的指定字串表示，轉換為其相等的 <see cref="T:System.DateTime" />，並傳回一個值表示轉換是否成功。</summary>
        <altmember cref="Overload:System.DateTime.Parse" />
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; s, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParse(System.ReadOnlySpan{System.Char},System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As ReadOnlySpan(Of Char), ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; s, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="result" Type="System.DateTime&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParse(System.String,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As String, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ s, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="result" Type="System.DateTime&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">字串，含有要轉換的日期和時間。</param>
        <param name="result">如果轉換成功，這個方法會傳回包含與 <c>s</c> 中內含之日期與時間相等的 <see cref="T:System.DateTime" /> 值；如果轉換失敗，則為 <see cref="F:System.DateTime.MinValue" />。 如果 <c>s</c> 參數為 <see langword="null" />、為空字串 ("") 或者不包含日期和時間的有效字串表示，則轉換會失敗。 這個參數會以未初始化的狀態傳遞。</param>
        <summary>將日期和時間的指定字串表示，轉換為其相等的 <see cref="T:System.DateTime" />，並傳回一個值表示轉換是否成功。</summary>
        <returns>
          如果 <paramref name="s" /> 參數轉換成功，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=nameWithType>方法很類似<xref:System.DateTime.Parse%28System.String%29?displayProperty=nameWithType>方法，不同處在於<xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29>方法不會擲回例外狀況如果轉換失敗。  
  
 字串`s`會剖析使用在目前的格式資訊<xref:System.Globalization.DateTimeFormatInfo>由目前執行緒文化特性隱含提供的物件。  
  
 可能的話，這個方法會嘗試將忽略無法辨認的資料，填入遺漏的月、 日和年資訊以目前的日期。 如果`s`包含的日期和任何時間，此方法會假設時間為午夜 12:00。 如果`s`包括日期元件含有兩位數年份，它會轉換成目前的文化特性的現行曆法為基礎的值中之年<xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType>屬性。 前置、 內部或結尾中的空白字元`s`會被忽略。 日期和時間可以是以一組的開頭和尾端數字符號字元 （' #'，U + 0023），而且必須尾隨一或多個 NULL 字元 (U + 0000)。  
  
 因為<xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=nameWithType>方法會嘗試剖析日期字串表示法，而且使用目前的文化特性，並嘗試將特定的字串剖析跨不同的文化特性的格式化規則的時間可能會失敗或傳回不同的結果。 如果特定的日期和時間格式會剖析跨不同的地區設定中，使用<xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType>方法或其中一個多載的<xref:System.DateTime.TryParseExact%2A>方法，並提供的格式規範。  
  
 如果`s`閏年中為閏日，以現行曆法方法剖析的字串表示法`s`成功。 如果`s`是在目前文化特性的現行曆法為閏日在非為閏年的字串表示，剖析作業失敗，而且方法會傳回`false`。  
  
 如果`s`包含沒有時區資訊`result`包含<xref:System.DateTime>值其<xref:System.DateTime.Kind%2A>屬性是<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>此方法傳回時。 如果要剖析的字串包含時區資訊`result`包含<xref:System.DateTime>值其<xref:System.DateTime.Kind%2A>屬性是<xref:System.DateTimeKind.Local?displayProperty=nameWithType>此方法傳回時。  
  
   
  
## Examples  
 下列範例會將傳遞的日期和時間字串數目<xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=nameWithType>方法。  
  
 [!code-cpp[System.DateTime.TryParse#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.TryParse/cpp/datetime.tryparse1.cpp#1)]
 [!code-csharp[System.DateTime.TryParse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.TryParse/cs/TryParse1.cs#1)]
 [!code-vb[System.DateTime.TryParse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.TryParse/vb/TryParse1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>格式會受到目前<see cref="T:System.Globalization.DateTimeFormatInfo" />物件，其預設值衍生自**地區及語言選項**控制台 中的項目。 <see cref="Overload:System.DateTime.TryParse" />方法可以非預期地失敗並傳回<see langword="False" />如果目前<see cref="P:System.Globalization.DateTimeFormatInfo.DateSeparator" />和<see cref="P:System.Globalization.DateTimeFormatInfo.TimeSeparator" />屬性會設定為相同的值。</para>
        </block>
        <altmember cref="Overload:System.DateTime.Parse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; s, IFormatProvider provider, System.Globalization.DateTimeStyles styles, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As ReadOnlySpan(Of Char), provider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; s, IFormatProvider ^ provider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTime&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="styles">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, IFormatProvider provider, System.Globalization.DateTimeStyles styles, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As String, provider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ s, IFormatProvider ^ provider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTime&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">字串，含有要轉換的日期和時間。</param>
        <param name="provider">物件，提供關於 <c>s</c> 的文化特性特定格式資訊。</param>
        <param name="styles">列舉值的位元組合，這個組合會定義如何根據目前時區或目前日期解譯已剖析的日期。 一般會指定的值是 <see cref="F:System.Globalization.DateTimeStyles.None" />。</param>
        <param name="result">如果轉換成功，這個方法會傳回包含與 <c>s</c> 中內含之日期與時間相等的 <see cref="T:System.DateTime" /> 值；如果轉換失敗，則為 <see cref="F:System.DateTime.MinValue" />。 如果 <c>s</c> 參數為 <see langword="null" />、為空字串 ("") 或者不包含日期和時間的有效字串表示，則轉換會失敗。 這個參數會以未初始化的狀態傳遞。</param>
        <summary>使用指定的特定文化特性格式資訊和格式樣式，將日期和時間的指定字串表示轉換為其相等的 <see cref="T:System.DateTime" />，並傳回值，這個值表示轉換是否成功。</summary>
        <returns>
          如果 <paramref name="s" /> 參數轉換成功，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType>方法剖析字串，包含日期、 時間和時區資訊。 類似於<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>方法，不同處在於<xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=nameWithType>方法不會擲回例外狀況如果轉換失敗。  
  
 這個方法會嘗試忽略無法辨識的資料，以及剖析`s`完全。 如果`s`包含一次，但沒有日期，則此方法的預設值取代目前的日期或，如果`styles`包含<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>旗標，以取代`DateTime.Date.MinValue`。 如果`s`包含日期，但沒有時間，12:00 午夜做為預設的時間。 如果日期存在，但是它的年份元件只有兩位數所組成，它會轉換成中之年`provider`參數的現行曆法為基礎的值<xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType>屬性。 前置、 內部或結尾中的空白字元`s`都會被忽略。 日期和時間可以是以一組的開頭和尾端數字符號字元 （' #'，U + 0023），而且必須尾隨一或多個 NULL 字元 (U + 0000)。  
  
 特定日期和時間元素，以及名稱及日期和時間、 中使用符號的有效格式由定義`provider`參數，它可以是下列任一項：  
  
-   A<xref:System.Globalization.CultureInfo>物件，表示其格式設定中使用的文化特性`s`參數。 <xref:System.Globalization.DateTimeFormatInfo>所傳回物件<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>屬性會定義所使用的格式`s`。  
  
-   A<xref:System.Globalization.DateTimeFormatInfo>物件，定義所使用的格式`s`。  
  
-   自訂 <xref:System.IFormatProvider> 實作。 其<xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType>方法會傳回<xref:System.Globalization.DateTimeFormatInfo>物件，定義所使用的格式`s`。  
  
 如果 `provider` 是 `null`，則會使用目前的文化特性。  
  
 如果`s`閏年中為閏日，以現行曆法方法剖析的字串表示法`s`成功。 如果`s`中的現行曆法為閏日在非為閏年的字串表示法`provider`，剖析作業會失敗，且該方法會傳回`false`。  
  
 `styles`參數定義的精確解譯剖析的字串和剖析作業應該如何處理它。 它可以是一個或多個成員<xref:System.Globalization.DateTimeStyles>列舉型別下, 表中所述。  
  
|DateTimeStyles 成員|描述|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|剖析`s`而且，如果有必要，將它轉換成 UTC。 如果`s`包含時區時差，或如果`s`未包含任何時區資訊但`styles`包含<xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType>旗標，方法會剖析字串，呼叫<xref:System.DateTime.ToUniversalTime%2A>轉換傳回<xref:System.DateTime>值以 UTC並設定<xref:System.DateTime.Kind%2A>屬性<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>。 如果`s`表示它代表 UTC，或如果`s`不含時區資訊但`styles`包含<xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType>旗標，方法會剖析字串，不執行時區轉換針對傳回<xref:System.DateTime>值，並設定<xref:System.DateTime.Kind%2A>屬性<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>。 在其他情況下，此旗標會有任何作用。|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|雖然有效，但會忽略此值。 日期和時間的項目中可以使用內部空白字元`s`。|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|雖然有效，但會忽略此值。 日期和時間的項目中可以使用前置空白字元`s`。|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|雖然有效，但會忽略此值。 尾端空白字元的日期和時間項目中允許`s`。|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|指定`s`可能包含前置、 內部和尾端空白字元。 這是預設行為。 無法藉由提供更具限制性覆寫<xref:System.Globalization.DateTimeStyles>列舉值，例如<xref:System.Globalization.DateTimeStyles.None?displayProperty=nameWithType>。|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|指定當`s`缺少任何時區資訊，則會假設為代表當地時間。 除非<xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType>旗標已存在，<xref:System.DateTime.Kind%2A>屬性傳回之<xref:System.DateTime>值設定為<xref:System.DateTimeKind.Local?displayProperty=nameWithType>。|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|指定當`s`缺少任何時區資訊，它會假設來表示 UTC。 除非<xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType>旗標存在，則方法會將轉換傳回<xref:System.DateTime>值與 utc 之間的當地時間和設定其<xref:System.DateTime.Kind%2A>屬性<xref:System.DateTimeKind.Local?displayProperty=nameWithType>。|  
|<xref:System.Globalization.DateTimeStyles.None>|雖然有效，但會忽略此值。|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|包含時區資訊的字串，請嘗試避免轉換的日期和時間字串的<xref:System.DateTime>值與它<xref:System.DateTime.Kind%2A>屬性設定為<xref:System.DateTimeKind.Local?displayProperty=nameWithType>。 一般來說，此類字串會藉由呼叫建立<xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType>使用"o"、"r"或"u"標準格式規範的方法。|  
  
 如果`s`未包含任何時區資訊，<xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType>方法會傳回<xref:System.DateTime>值其<xref:System.DateTime.Kind%2A>屬性是<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>除非`styles`否則表示旗標。 如果`s`時區位移的資訊，包括<xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType>方法會執行任何所需的時間轉換，並傳回下列其中之一：  
  
-   A<xref:System.DateTime>其日期和時間反映當地時間，其值<xref:System.DateTime.Kind%2A>屬性是<xref:System.DateTimeKind.Local?displayProperty=nameWithType>。  
  
-   或者，如果`styles`包含<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>旗標，<xref:System.DateTime>其日期和時間反映 UTC，其值<xref:System.DateTime.Kind%2A>屬性是<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>。  
  
 使用覆寫這個行為<xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType>旗標。  
  
## <a name="parsing-custom-cultures"></a>剖析自訂文化特性  
 如果您剖析產生自訂的文化特性的日期和時間字串，使用<xref:System.DateTime.TryParseExact%2A>方法，而非<xref:System.DateTime.TryParse%2A>方法，以改善剖析作業會成功的機率。 自訂文化特性的日期和時間字串可以很複雜且難以剖析。 <xref:System.DateTime.TryParse%2A>方法會嘗試剖析字串與數個隱含剖析模式，其中可能會失敗。 相反地，<xref:System.DateTime.TryParseExact%2A>方法需要您明確地指定一或多個正確剖析模式，可能會成功。  
  
 如需自訂文化特性的詳細資訊，請參閱<xref:System.Globalization.CultureAndRegionInfoBuilder?displayProperty=nameWithType>類別。  
  
   
  
## Examples  
 下列範例說明<xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType>方法。  
  
 [!code-csharp[System.DateTime.TryParse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.TryParse/cs/tryparse2.cs#2)]
 [!code-vb[System.DateTime.TryParse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.TryParse/vb/tryparse2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="styles" /> 不是有效的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。  
  
 -或-  
  
 <paramref name="styles" /> 包含 <see cref="T:System.Globalization.DateTimeStyles" /> 值的無效組合 (例如 <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> 和 <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" /> 兩者)。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="provider" /> 屬於中性的文化特性，而且不能用於剖析作業中。</exception>
        <block subset="none" type="usage">
          <para>格式會受到目前<see cref="T:System.Globalization.DateTimeFormatInfo" />物件，它由提供<paramref name="provider" />參數。 <see cref="Overload:System.DateTime.TryParse" />方法可以非預期地失敗並傳回<see langword="False" />如果目前<see cref="P:System.Globalization.DateTimeFormatInfo.DateSeparator" />和<see cref="P:System.Globalization.DateTimeFormatInfo.TimeSeparator" />屬性會設定為相同的值。</para>
        </block>
        <altmember cref="Overload:System.DateTime.Parse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParseExact">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將日期和時間的指定字串表示，轉換為其相等的 <see cref="T:System.DateTime" />。 字串表示的格式必須完全符合指定的格式。 此方法會傳回值，這個值表示轉換是否成功。</summary>
        <altmember cref="Overload:System.DateTime.ParseExact" />
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (ReadOnlySpan&lt;char&gt; s, ReadOnlySpan&lt;char&gt; format, IFormatProvider provider, System.Globalization.DateTimeStyles style, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; s, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (s As ReadOnlySpan(Of Char), format As ReadOnlySpan(Of Char), provider As IFormatProvider, style As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(ReadOnlySpan&lt;char&gt; s, ReadOnlySpan&lt;char&gt; format, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTime&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="format">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="style">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (ReadOnlySpan&lt;char&gt; s, string[] formats, IFormatProvider provider, System.Globalization.DateTimeStyles style, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; s, string[] formats, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (s As ReadOnlySpan(Of Char), formats As String(), provider As IFormatProvider, style As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(ReadOnlySpan&lt;char&gt; s, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTime&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="formats">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="style">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string s, string format, IFormatProvider provider, System.Globalization.DateTimeStyles style, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string s, string format, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (s As String, format As String, provider As IFormatProvider, style As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(System::String ^ s, System::String ^ format, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTime&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">字串，含有要轉換的日期和時間。</param>
        <param name="format">
          <c>s</c> 的必要格式。</param>
        <param name="provider">物件，提供關於 <c>s</c> 的文化特性特定格式資訊。</param>
        <param name="style">一個或多個列舉值的位元組合，表示 <c>s</c> 的允許格式。</param>
        <param name="result">如果轉換成功，這個方法會傳回包含與 <c>s</c> 中內含之日期與時間相等的 <see cref="T:System.DateTime" /> 值；如果轉換失敗，則為 <see cref="F:System.DateTime.MinValue" />。 如果 <c>s</c> 或 <c>format</c> 參數為 <see langword="null" />、空字串，或不包含與 <c>format</c> 中指定之模式相對應的日期和時間，則此轉換作業會失敗。 這個參數會以未初始化的狀態傳遞。</param>
        <summary>使用指定的格式、特定文化特性格式資訊以及樣式，將日期和時間的指定字串表示，轉換為其相等的 <see cref="T:System.DateTime" />。 字串表示的格式必須完全符合指定的格式。 此方法會傳回值，這個值表示轉換是否成功。</summary>
        <returns>
          如果 <see langword="true" /> 轉換成功，則為 <paramref name="s" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType>方法剖析字串表示法中所定義的格式必須是日期`format`參數。 類似於<xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>方法，不同處在於<xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29>方法不會擲回例外狀況如果轉換失敗。  
  
 `s`參數包含要剖析的日期和時間，而且必須在所定義的格式`format`參數。 如果日期、 時間和時區的項目會在`s`，也必須在所指定的順序出現`format`。 如果`format`定義日期任何時間元素和剖析作業成功時，所產生的<xref:System.DateTime>值具有午夜的時間 (00: 00:00)。 如果`format`所定義的時間沒有任何日期項目與剖析作業成功時，所產生的<xref:System.DateTime>預設的值具有日期`DateTime.Now.Date`，或其中含有日期`DateTime.MinValue.Date`如果`styles`包含<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType>旗標。 `style`參數會決定是否`s`參數可以包含前置、 內部或尾端空白字元。  
  
 如果`s`包含沒有時區資訊<xref:System.DateTime.Kind%2A>屬性傳回之<xref:System.DateTime>物件是<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>。 此行為可以透過變更<xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType>旗標，它會傳回<xref:System.DateTime>值的<xref:System.DateTime.Kind%2A>屬性是<xref:System.DateTimeKind.Local?displayProperty=nameWithType>，或使用<xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType>和<xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType>旗標，它會傳回<xref:System.DateTime>其值<xref:System.DateTime.Kind%2A>屬性是<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>。 必要時，如果 s 包含時區資訊，將時間會轉換為本機時間而<xref:System.DateTime.Kind%2A>屬性傳回之<xref:System.DateTime>物件設定為<xref:System.DateTimeKind.Local?displayProperty=nameWithType>。 此行為可以透過變更<xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType>旗標不當地時間轉換成國際標準時間 (UTC)，並設定<xref:System.DateTime.Kind%2A>屬性<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>。  
  
 `format`參數包含對應至預期的格式模式`s`參數。 中的模式`format`參數包含一個或多個自訂格式規範，從[自訂日期和時間格式字串](~/docs/standard/base-types/custom-date-and-time-format-strings.md)資料表或單一標準格式規範，它會識別預先定義的模式，從[標準日期和時間格式字串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)資料表。  
  
 如果您未使用自訂格式模式中的日期或時間分隔符號，使用的文化特性而異`provider`參數和寬形式的每個自訂格式規範。 例如，如果您想要指定模式中，指定寬表單中，"HH"，而不是較窄的表單中，"H"。  
  
> [!NOTE]
>  不需要的`s`符合單一格式的剖析作業成功，您可以呼叫<xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType>方法並指定多個允許的格式。 這樣更有可能成功，剖析作業。  
  
 特定日期和時間符號和字串 （例如一週中特定語言的名稱） 用於`s`會由`provider`參數，因為是精確的格式`s`如果`format`是標準格式規範的字串。 `provider`參數可以是下列任一項：  
  
-   A<xref:System.Globalization.CultureInfo>物件，代表用來解譯的文化特性`s`。 <xref:System.Globalization.DateTimeFormatInfo>所傳回的物件及其<xref:System.Globalization.CultureInfo.DateTimeFormat%2A>屬性會定義符號與中的格式化`s`。  
  
-   A<xref:System.Globalization.DateTimeFormatInfo>物件，定義日期和時間資料的格式。  
  
-   自訂<xref:System.IFormatProvider>實作其<xref:System.IFormatProvider.GetFormat%2A>方法會傳回<xref:System.Globalization.CultureInfo>物件或<xref:System.Globalization.DateTimeFormatInfo>提供格式設定資訊的物件。  
  
 如果`provider`是`null`、<xref:System.Globalization.CultureInfo>使用對應至目前的文化特性的物件。  
  
 `styles`參數包含一個或多個成員<xref:System.Globalization.DateTimeStyles>列舉型別，以決定是否和位置所未定義空白字元`format`可以出現在`s`及控制精確的剖析作業行為。 下表描述如何每個成員的<xref:System.Globalization.DateTimeStyles>列舉型別會影響的作業<xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29>方法。  
  
|DateTimeStyles 成員|描述|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|剖析`s`而且，如果有必要，將它轉換成 UTC。 如果`s`包含時區時差，或如果`s`未包含任何時區資訊但`styles`包含<xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType>旗標，方法會剖析字串，呼叫<xref:System.DateTime.ToUniversalTime%2A>轉換傳回<xref:System.DateTime>值以 UTC並設定<xref:System.DateTime.Kind%2A>屬性<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>。 如果`s`表示它代表 UTC，或如果`s`不含時區資訊但`styles`包含<xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType>旗標，方法會剖析字串，不執行時區轉換針對傳回<xref:System.DateTime>值，並設定<xref:System.DateTime.Kind%2A>屬性<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>。 在其他情況下，此旗標會有任何作用。|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|指定未定義的泛空白字元`format`之間任何個別的日期或時間項目可能會出現。|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|指定未定義的泛空白字元`format`可以出現在開頭`s`。|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|指定未定義的泛空白字元`format`可以出現在結尾`s`。|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|指定`s`可能包含前置、 內部和尾端空白字元未定義`format`。|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|指定當`s`缺少任何時區資訊，則會假設為代表當地時間。 除非<xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType>旗標已存在，<xref:System.DateTime.Kind%2A>屬性傳回之<xref:System.DateTime>值設定為<xref:System.DateTimeKind.Local?displayProperty=nameWithType>。|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|指定當`s`缺少任何時區資訊，它會假設來表示 UTC。 除非<xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType>旗標存在，則方法會將轉換傳回<xref:System.DateTime>值與 utc 之間的當地時間和設定其<xref:System.DateTime.Kind%2A>屬性<xref:System.DateTimeKind.Local?displayProperty=nameWithType>。|  
|<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>|如果`s`包含時間日期的詳細資訊，不傳回值的日期會設定為`DateTime.MinValue.Date`。|  
|<xref:System.Globalization.DateTimeStyles.None>|`s`參數會剖析使用預設值。 該位於以外的任何空格`format`允許。 如果`s`缺少傳回之日期的日期元件，<xref:System.DateTime>值設定為 1/1/0001。 如果`s`包含沒有時區資訊<xref:System.DateTime.Kind%2A>屬性傳回之<xref:System.DateTime>物件設定為<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>。 如果時區資訊存在於`s`，時間會轉換為本機時間而<xref:System.DateTime.Kind%2A>屬性傳回之<xref:System.DateTime>物件設定為<xref:System.DateTimeKind.Local?displayProperty=nameWithType>。|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|包含時區資訊的字串，請嘗試避免轉換為<xref:System.DateTime>值與它<xref:System.DateTime.Kind%2A>屬性設定為<xref:System.DateTimeKind.Local?displayProperty=nameWithType>。 主要，此旗標可避免 UTC 時間轉換為本地時間。|  
  
   
  
## Examples  
 下列範例會示範<xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType>方法。 請注意，字串"5/01/2009年上午 8:30"無法剖析成功時`styles`參數等於<xref:System.Globalization.DateTimeStyles.None?displayProperty=nameWithType>所不允許前置空格，因此`format`。 此外，字串"5/01/2009年 09:00 」 無法以成功地剖析`format`的"MM/dd/yyyyhh:mm"因為日期字串前面沒有前置零，月份數字為`format`需要。  
  
 [!code-csharp[System.DateTime.TryParseExact#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.TryParseExact/cs/TryParseExact1.cs#1)]
 [!code-vb[System.DateTime.TryParseExact#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.TryParseExact/vb/TryParseExact1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="styles" /> 不是有效的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。  
  
 -或-  
  
 <paramref name="styles" /> 包含 <see cref="T:System.Globalization.DateTimeStyles" /> 值的無效組合 (例如 <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> 和 <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" /> 兩者)。</exception>
        <block subset="none" type="usage">
          <para>在[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]、<see cref="Overload:System.DateTime.TryParseExact" />方法會傳回<see langword="false" />小時元件和 AM/PM 指示項不在協議中，如果包含要剖析的字串。 在[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]和舊版中，AM/PM 指示項會被忽略。</para>
        </block>
        <altmember cref="Overload:System.DateTime.ParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string s, string[] formats, IFormatProvider provider, System.Globalization.DateTimeStyles style, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string s, string[] formats, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (s As String, formats As String(), provider As IFormatProvider, style As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(System::String ^ s, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTime&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">字串，包含要轉換的日期和時間。</param>
        <param name="formats">
          <c>s</c> 允許的格式陣列。</param>
        <param name="provider">物件，提供關於 <c>s</c> 的文化特性格式資訊。</param>
        <param name="style">列舉值的位元組合，表示允許的 <c>s</c> 格式。 一般會指定的值是 <see cref="F:System.Globalization.DateTimeStyles.None" />。</param>
        <param name="result">如果轉換成功，這個方法會傳回包含與 <c>s</c> 中內含之日期與時間相等的 <see cref="T:System.DateTime" /> 值；如果轉換失敗，則為 <see cref="F:System.DateTime.MinValue" />。 如果 <c>s</c> 或 <c>formats</c> 為 <see langword="null" />、<c>s</c> 或 <c>formats</c> 的一個元素為空字串，或是 <c>s</c> 的格式沒有與 <c>formats</c> 中的至少一個格式模式所指定的內容完全相同，則此轉換作業會失敗。 這個參數會以未初始化的狀態傳遞。</param>
        <summary>使用指定的格式陣列、特定文化特性格式資訊以及樣式，將日期和時間的指定字串表示，轉換為其相等的 <see cref="T:System.DateTime" />。 字串表示的格式必須至少完全符合其中一個指定格式。 此方法會傳回值，這個值表示轉換是否成功。</summary>
        <returns>
          如果 <paramref name="s" /> 參數轉換成功，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType>方法剖析符合指派給任何的模式一個日期的字串表示`formats`參數。 就像<xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>方法，除了<xref:System.DateTime.TryParseExact%2A>方法不會擲回例外狀況如果轉換失敗。  
  
 `s`參數包含要剖析的日期和時間。 如果`s`參數包含僅一次，而且沒有日期，目前的日期會使用，除非`style`參數包含<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType>旗標，在此情況下的預設日期 (`DateTime.Date.MinValue`) 使用。 如果`s`參數包含的日期沒有時間、 午夜 (00: 00:00) 使用。 `style`參數也會決定是否`s`參數可以包含前置、 內部或尾端空格字元而不是所允許的格式字串中的其中一個`formats`。  
  
 如果`s`包含沒有時區資訊<xref:System.DateTime.Kind%2A>屬性傳回之<xref:System.DateTime>物件是<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>。 此行為可以透過變更<xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType>旗標，它會傳回<xref:System.DateTime>值的<xref:System.DateTime.Kind%2A>屬性是<xref:System.DateTimeKind.Local?displayProperty=nameWithType>，或使用<xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType>和<xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType>旗標，它會傳回<xref:System.DateTime>其值<xref:System.DateTime.Kind%2A>屬性是<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>。 必要時，如果 s 包含時區資訊，將時間會轉換為本機時間而<xref:System.DateTime.Kind%2A>屬性傳回之<xref:System.DateTime>物件設定為<xref:System.DateTimeKind.Local?displayProperty=nameWithType>。 此行為可以透過變更<xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType>旗標不當地時間轉換成國際標準時間 (UTC)，並設定<xref:System.DateTime.Kind%2A>屬性<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>。  
  
 `formats`參數包含陣列的模式，其中`s`必須完全符合，剖析作業會成功。 中的模式`formats`參數組成一或多個自訂格式規範，從[自訂日期和時間格式字串](~/docs/standard/base-types/custom-date-and-time-format-strings.md)資料表或單一標準格式規範，它會識別預先定義的模式，從[標準日期和時間格式字串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)資料表。  
  
 如果您未使用自訂格式模式中的日期或時間分隔符號，使用的文化特性而異`provider`參數和寬形式的每個自訂格式規範。 例如，如果您想要指定模式中，指定寬表單中，"HH"，而不是較窄的表單中，"H"。  
  
 特定日期和時間符號和字串 （例如一週中特定語言的名稱） 用於`s`會由`provider`參數，因為是精確的格式`s`如果`format`是標準格式規範的字串。 `provider`參數可以是下列任一項：  
  
-   A<xref:System.Globalization.CultureInfo>物件，代表用來解譯的文化特性`s`。 <xref:System.Globalization.DateTimeFormatInfo>所傳回的物件及其<xref:System.Globalization.CultureInfo.DateTimeFormat%2A>屬性會定義符號與中的格式化`s`。  
  
-   A<xref:System.Globalization.DateTimeFormatInfo>物件，定義日期和時間資料的格式。  
  
-   自訂<xref:System.IFormatProvider>實作其<xref:System.IFormatProvider.GetFormat%2A>方法會傳回<xref:System.Globalization.CultureInfo>物件或<xref:System.Globalization.DateTimeFormatInfo>提供格式設定資訊的物件。  
  
 如果`provider`是`null`、<xref:System.Globalization.CultureInfo>使用對應至目前的文化特性的物件。  
  
 `styles`參數包含一個或多個成員<xref:System.Globalization.DateTimeStyles>列舉型別，以決定是否和位置所未定義空白字元`format`可以出現在`s`及控制精確的剖析作業行為。 下表描述如何每個成員的<xref:System.Globalization.DateTimeStyles>列舉型別會影響的作業<xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29>方法。  
  
|DateTimeStyles 成員|描述|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|剖析`s`而且，如果有必要，將它轉換成 UTC。 如果`s`包含時區時差，或如果`s`未包含任何時區資訊但`styles`包含<xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType>旗標，方法會剖析字串，呼叫<xref:System.DateTime.ToUniversalTime%2A>轉換傳回<xref:System.DateTime>值以 UTC並設定<xref:System.DateTime.Kind%2A>屬性<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>。 如果`s`表示它代表 UTC，或如果`s`不含時區資訊但`styles`包含<xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType>旗標，方法會剖析字串，不執行時區轉換針對傳回<xref:System.DateTime>值，並設定<xref:System.DateTime.Kind%2A>屬性<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>。 在其他情況下，此旗標會有任何作用。|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|指定未定義的泛空白字元`format`之間任何個別的日期或時間項目可能會出現。|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|指定未定義的泛空白字元`format`可以出現在開頭`s`。|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|指定未定義的泛空白字元`format`可以出現在結尾`s`。|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|指定`s`可能包含前置、 內部和尾端空白字元未定義`format`。|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|指定當`s`缺少任何時區資訊，則會假設為代表當地時間。 除非<xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType>旗標已存在，<xref:System.DateTime.Kind%2A>屬性傳回之<xref:System.DateTime>值設定為<xref:System.DateTimeKind.Local?displayProperty=nameWithType>。|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|指定當`s`缺少任何時區資訊，它會假設來表示 UTC。 除非<xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType>旗標存在，則方法會將轉換傳回<xref:System.DateTime>值與 utc 之間的當地時間和設定其<xref:System.DateTime.Kind%2A>屬性<xref:System.DateTimeKind.Local?displayProperty=nameWithType>。|  
|<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>|如果`s`包含時間日期的詳細資訊，不傳回值的日期會設定為`DateTime.MinValue.Date`。|  
|<xref:System.Globalization.DateTimeStyles.None>|`s`參數會剖析使用預設值。 該位於以外的任何空格`format`允許。 如果`s`缺少傳回之日期的日期元件，<xref:System.DateTime>值設定為 1/1/0001。 如果`s`包含沒有時區資訊<xref:System.DateTime.Kind%2A>屬性傳回之<xref:System.DateTime>物件設定為<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>。 如果時區資訊存在於`s`，時間會轉換為本機時間而<xref:System.DateTime.Kind%2A>屬性傳回之<xref:System.DateTime>物件設定為<xref:System.DateTimeKind.Local?displayProperty=nameWithType>。|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|包含時區資訊的字串，請嘗試避免轉換為<xref:System.DateTime>值與它<xref:System.DateTime.Kind%2A>屬性設定為<xref:System.DateTimeKind.Local?displayProperty=nameWithType>。 主要，此旗標可避免 UTC 時間轉換為本地時間。|  
  
   
  
## Examples  
 下列範例會使用<xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType>方法，以確定可以成功剖析中的可能格式的數字的字串。  
  
 [!code-csharp[System.Datetime.TryParseExact#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.TryParseExact/cs/TryParseExact2.cs#2)]
 [!code-vb[System.Datetime.TryParseExact#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.TryParseExact/vb/TryParseExact2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="styles" /> 不是有效的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。  
  
 -或-  
  
 <paramref name="styles" /> 包含 <see cref="T:System.Globalization.DateTimeStyles" /> 值的無效組合 (例如 <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> 和 <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" /> 兩者)。</exception>
        <block subset="none" type="usage">
          <para>在[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]、<see cref="Overload:System.DateTime.TryParseExact" />方法會傳回<see langword="false" />小時元件和 AM/PM 指示項不在協議中，如果包含要剖析的字串。 在[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]和舊版中，AM/PM 指示項會被忽略。</para>
        </block>
        <altmember cref="Overload:System.DateTime.ParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="UnixEpoch">
      <MemberSignature Language="C#" Value="public static readonly DateTime UnixEpoch;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTime UnixEpoch" />
      <MemberSignature Language="DocId" Value="F:System.DateTime.UnixEpoch" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UnixEpoch As DateTime " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTime UnixEpoch;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UtcNow">
      <MemberSignature Language="C#" Value="public static DateTime UtcNow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime UtcNow" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.UtcNow" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property UtcNow As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime UtcNow { DateTime get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得 <see cref="T:System.DateTime" /> 物件，此物件會設定為這部電腦上目前的日期和時間，以國際標準時間 (UTC) 表示。</summary>
        <value>物件，其值為目前的 UTC 日期和時間。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個屬性的解析取決於系統計時器，取決於基礎作業系統。 它通常會以 0.5 和 15 毫秒之間。

 從.NET Framework 2.0 版開始，傳回值是<xref:System.DateTime>其<xref:System.DateTime.Kind%2A>屬性會傳回<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>。

 除了使用<xref:System.DateTime.UtcNow%2A>是<xref:System.DateTimeOffset.UtcNow%2A?displayProperty=nameWithType>。 而前者則表示日期和時間值是國際標準時間 (UTC)，藉由指派<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>至其<xref:System.DateTime.Kind%2A>屬性，後者會將指派日期和時間值的 UTC 時間的時差 (等於<xref:System.TimeSpan.Zero?displayProperty=nameWithType>)。
  
## Examples  
 下列範例會使用<xref:System.DateTime.SpecifyKind%2A>方法，示範如何<xref:System.DateTime.Kind%2A>屬性會影響<xref:System.DateTime.ToLocalTime%2A>和<xref:System.DateTime.ToUniversalTime%2A>轉換方法。  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.UtcNow" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="Year">
      <MemberSignature Language="C#" Value="public int Year { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Year" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Year" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Year As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Year { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得這個執行個體所表示日期的年份元件。</summary>
        <value>年份，在 1 和 9999 之間。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.Year%2A>屬性會傳回西曆中的目前執行個體的年份。 它不會傳回使用目前文化特性的預設曆法的年。 若要擷取使用特定的日曆年度，您可以呼叫該曆法的`GetYear`方法，如下列程式碼所示。  
  
 [!code-csharp[System.DateTime.Year#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Year/cs/Year.cs#1)]
 [!code-vb[System.DateTime.Year#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Year/vb/Year.vb#1)]  
  
   
  
## Examples  
 下列範例會示範<xref:System.DateTime.Year%2A>屬性。  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Globalization.Calendar" />
      </Docs>
    </Member>
  </Members>
</Type>