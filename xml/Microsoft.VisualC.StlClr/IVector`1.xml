<Type Name="IVector&lt;TValue&gt;" FullName="Microsoft.VisualC.StlClr.IVector&lt;TValue&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4c2e5b3e0ddd6ff7846db250c1a8ee6231c84499" /><Meta Name="ms.sourcegitcommit" Value="4ee26ac79338b0bf99fa1e0913e8a06b21994d8e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="03/26/2019" /><Meta Name="ms.locfileid" Value="58457545" /></Metadata><TypeSignature Language="C#" Value="public interface IVector&lt;TValue&gt; : ICloneable, Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer&lt;TValue&gt;, System.Collections.ICollection" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IVector`1&lt;TValue&gt; implements class Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer`1&lt;!TValue&gt;, class System.Collections.ICollection, class System.Collections.IEnumerable, class System.ICloneable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualC.StlClr.IVector`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IVector(Of TValue)&#xA;Implements ICloneable, ICollection, IRandomAccessContainer(Of TValue)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TValue&gt;&#xA;public interface class IVector : ICloneable, Microsoft::VisualC::StlClr::Generic::IRandomAccessContainer&lt;TValue&gt;, System::Collections::ICollection" />
  <TypeSignature Language="F#" Value="type IVector&lt;'Value&gt; = interface&#xA;    interface IRandomAccessContainer&lt;'Value&gt;&#xA;    interface ICloneable&#xA;    interface ICollection&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TValue" />
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer&lt;TValue&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TValue">受控制序列中項目的類型。</typeparam>
    <summary>定義 STL/CLR <see href="https://docs.microsoft.com/cpp/dotnet/vector-stl-clr">vector</see> 物件的介面。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[unnamed_parm](~/includes/unnamed-parm-md.md)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="assign">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>以指定的項目取代容器中的所有項目。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如需詳細資訊，請參閱 < [vector:: assign (STL/CLR)](/cpp/dotnet/vector-stl-clr#assign)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="assign">
      <MemberSignature Language="C#" Value="public void assign (System.Collections.IEnumerable _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void assign(class System.Collections.IEnumerable _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IVector`1.assign(System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub assign (_Right As IEnumerable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void assign(System::Collections::IEnumerable ^ _Right);" />
      <MemberSignature Language="F#" Value="abstract member assign : System.Collections.IEnumerable -&gt; unit" Usage="iVector.assign _Right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="_Right">要將其項目插入至容器的列舉型別。</param>
        <summary>以指定列舉中的項目取代容器中的所有項目。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如需詳細資訊，請參閱 < [vector:: assign (STL/CLR)](/cpp/dotnet/vector-stl-clr#assign)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="assign">
      <MemberSignature Language="C#" Value="public void assign (Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt; _First, Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt; _Last);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void assign(class Microsoft.VisualC.StlClr.Generic.IInputIterator`1&lt;!TValue&gt; _First, class Microsoft.VisualC.StlClr.Generic.IInputIterator`1&lt;!TValue&gt; _Last) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IVector`1.assign(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0},Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub assign (_First As IInputIterator(Of TValue), _Last As IInputIterator(Of TValue))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void assign(Microsoft::VisualC::StlClr::Generic::IInputIterator&lt;TValue&gt; ^ _First, Microsoft::VisualC::StlClr::Generic::IInputIterator&lt;TValue&gt; ^ _Last);" />
      <MemberSignature Language="F#" Value="abstract member assign : Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;'Value&gt; * Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;'Value&gt; -&gt; unit" Usage="iVector.assign (_First, _Last)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_First" Type="Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt;" />
        <Parameter Name="_Last" Type="Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_First">要插入之項目範圍的開頭位置。</param>
        <param name="_Last">超過要插入之項目範圍結尾的第一個位置。</param>
        <summary>以指定之 Iterator 之間的項目取代容器中的所有項目。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如需詳細資訊，請參閱 < [vector:: assign (STL/CLR)](/cpp/dotnet/vector-stl-clr#assign)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="assign">
      <MemberSignature Language="C#" Value="public void assign (int _Count, TValue _Val);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void assign(int32 _Count, !TValue _Val) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IVector`1.assign(System.Int32,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub assign (_Count As Integer, _Val As TValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void assign(int _Count, TValue _Val);" />
      <MemberSignature Language="F#" Value="abstract member assign : int * 'Value -&gt; unit" Usage="iVector.assign (_Count, _Val)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Count" Type="System.Int32" />
        <Parameter Name="_Val" Type="TValue" />
      </Parameters>
      <Docs>
        <param name="_Count">要插入至容器的項目數目。</param>
        <param name="_Val">要插入的元素值。</param>
        <summary>以具有指定值之指定數目的項目取代容器中的所有項目。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如需詳細資訊，請參閱 < [vector:: assign (STL/CLR)](/cpp/dotnet/vector-stl-clr#assign)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="at">
      <MemberSignature Language="C#" Value="public TValue at (int _Pos);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TValue at(int32 _Pos) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IVector`1.at(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function at (_Pos As Integer) As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TValue % at(int _Pos);" />
      <MemberSignature Language="F#" Value="abstract member at : int -&gt; " Usage="iVector.at _Pos" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue@</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Pos" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="_Pos">要存取的項目之位置。</param>
        <summary>存取容器中位於指定位置的項目。</summary>
        <returns>位於 <paramref name="_Pos" /> 之受控制序列的項目。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如需詳細資訊，請參閱 < [vector:: at (STL/CLR)](/cpp/dotnet/vector-stl-clr#at)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="back">
      <MemberSignature Language="C#" Value="public TValue back ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TValue back() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IVector`1.back" />
      <MemberSignature Language="VB.NET" Value="Public Function back () As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TValue % back();" />
      <MemberSignature Language="F#" Value="abstract member back : unit -&gt; " Usage="iVector.back " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue@</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>存取容器的最後一個項目。</summary>
        <returns>受控制序列的最後一個項目，此序列必須為非空白序列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如需詳細資訊，請參閱 < [vector:: back (STL/CLR)](/cpp/dotnet/vector-stl-clr#back)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="back_item">
      <MemberSignature Language="C#" Value="public TValue back_item { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TValue back_item" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualC.StlClr.IVector`1.back_item" />
      <MemberSignature Language="VB.NET" Value="Public Property back_item As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TValue back_item { TValue get(); void set(TValue value); };" />
      <MemberSignature Language="F#" Value="member this.back_item : 'Value with get, set" Usage="Microsoft.VisualC.StlClr.IVector&lt;'Value&gt;.back_item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>存取容器的最後一個項目。</summary>
        <value>受控制序列的最後一個項目，此序列必須為非空白序列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如需詳細資訊，請參閱 < [vector::back_item (STL/CLR)](/cpp/dotnet/vector-stl-clr#back_item)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="begin">
      <MemberSignature Language="C#" Value="public void begin (ref Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt; );" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.void begin(class Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1&lt;!TValue&gt;&amp; ) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IVector`1.begin(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@)" />
      <MemberSignature Language="VB.NET" Value="Public Function begin (ByRef  As ContainerRandomAccessIterator(Of TValue)) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ begin(Microsoft::VisualC::StlClr::Generic::ContainerRandomAccessIterator&lt;TValue&gt; ^ % );" />
      <MemberSignature Language="F#" Value="abstract member begin :  -&gt; unit" Usage="iVector.begin " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="">隨機存取 Iterator，指派受控制序列的第一個項目，或只是超出空序列的結尾。 您要用它來取得的 Iterator 可指定受控制序列之 <paramref name="current" /> 開頭，但是，如果受控制序列的長度變更，它的狀態也可以變更。</param>
        <summary>指定受控制序列的開頭。</summary>
        <returns>迭代器。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
 如需詳細資訊，請參閱 < [vector:: begin (STL/CLR)](/cpp/dotnet/vector-stl-clr#begin)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="capacity">
      <MemberSignature Language="C#" Value="public int capacity ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 capacity() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IVector`1.capacity" />
      <MemberSignature Language="VB.NET" Value="Public Function capacity () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int capacity();" />
      <MemberSignature Language="F#" Value="abstract member capacity : unit -&gt; int" Usage="iVector.capacity " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>報告容器配置儲存區的大小。</summary>
        <returns>目前所配置用以保存受控制序列的儲存區，值至少和 <see cref="M:Microsoft.VisualC.StlClr.IVector`1.size" /> 一樣大。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如需詳細資訊，請參閱 < [vector:: capacity (STL/CLR)](/cpp/dotnet/vector-stl-clr#capacity)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="clear">
      <MemberSignature Language="C#" Value="public void clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IVector`1.clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void clear();" />
      <MemberSignature Language="F#" Value="abstract member clear : unit -&gt; unit" Usage="iVector.clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>移除容器中的所有項目。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如需詳細資訊，請參閱 < [vector:: clear (STL/CLR)](/cpp/dotnet/vector-stl-clr#clear)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="empty">
      <MemberSignature Language="C#" Value="public bool empty ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool empty() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IVector`1.empty" />
      <MemberSignature Language="VB.NET" Value="Public Function empty () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool empty();" />
      <MemberSignature Language="F#" Value="abstract member empty : unit -&gt; bool" Usage="iVector.empty " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>測試容器是否沒有項目。</summary>
        <returns>如果容器沒有項目則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如需詳細資訊，請參閱 < [vector:: empty (STL/CLR)](/cpp/dotnet/vector-stl-clr#empty)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="end">
      <MemberSignature Language="C#" Value="public void end (ref Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt; );" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.void end(class Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1&lt;!TValue&gt;&amp; ) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IVector`1.end(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@)" />
      <MemberSignature Language="VB.NET" Value="Public Function end (ByRef  As ContainerRandomAccessIterator(Of TValue)) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ end(Microsoft::VisualC::StlClr::Generic::ContainerRandomAccessIterator&lt;TValue&gt; ^ % );" />
      <MemberSignature Language="F#" Value="abstract member end :  -&gt; unit" Usage="iVector.end " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="">指向超過受控制序列之結尾的隨機存取 Iterator。 您會用它來取得指定受控制序列之 <paramref name="current" /> 結尾的 Iterator，但是如果受控制序列的長度變更，它的狀態也會變更。</param>
        <summary>指定受控制序列的結尾。</summary>
        <returns>迭代器。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
 如需詳細資訊，請參閱 < [vector:: end (STL/CLR)](/cpp/dotnet/vector-stl-clr#end)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="erase">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>從容器中的指定位置移除項目。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如需詳細資訊，請參閱 < [vector:: erase (STL/CLR)](/cpp/dotnet/vector-stl-clr#erase)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="erase">
      <MemberSignature Language="C#" Value="public void erase (ref Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt; , Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt; _Where);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.void erase(class Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1&lt;!TValue&gt;&amp; , class Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1&lt;!TValue&gt; _Where) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IVector`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue)" />
      <MemberSignature Language="VB.NET" Value="Public Function erase (ByRef  As ContainerRandomAccessIterator(Of TValue), _Where As ContainerRandomAccessIterator(Of TValue)) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ erase(Microsoft::VisualC::StlClr::Generic::ContainerRandomAccessIterator&lt;TValue&gt; ^ % , Microsoft::VisualC::StlClr::Generic::ContainerRandomAccessIterator&lt;TValue&gt; ^ _Where);" />
      <MemberSignature Language="F#" Value="abstract member erase :  * Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;'Value&gt; -&gt; unit" Usage="iVector.erase (, _Where)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt;" RefType="ref" />
        <Parameter Name="_Where" Type="Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="">指定保持在超過所移除項目之第一個項目的 Iterator，如果沒有此類項目存在則為 <see cref="M:Microsoft.VisualC.StlClr.IVector`1.end(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@)" />。</param>
        <param name="_Where">要移除之項目的位置。</param>
        <summary>移除由 *\_Where* 所指向之受控制序列的單一項目。</summary>
        <returns>迭代器。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
如需詳細資訊，請參閱 < [vector:: erase (STL/CLR)](/cpp/dotnet/vector-stl-clr#erase)。

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="erase">
      <MemberSignature Language="C#" Value="public void erase (ref Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt; , Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt; _First_iter, Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt; _Last_iter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.void erase(class Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1&lt;!TValue&gt;&amp; , class Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1&lt;!TValue&gt; _First_iter, class Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1&lt;!TValue&gt; _Last_iter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IVector`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue)" />
      <MemberSignature Language="VB.NET" Value="Public Function erase (ByRef  As ContainerRandomAccessIterator(Of TValue), _First_iter As ContainerRandomAccessIterator(Of TValue), _Last_iter As ContainerRandomAccessIterator(Of TValue)) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ erase(Microsoft::VisualC::StlClr::Generic::ContainerRandomAccessIterator&lt;TValue&gt; ^ % , Microsoft::VisualC::StlClr::Generic::ContainerRandomAccessIterator&lt;TValue&gt; ^ _First_iter, Microsoft::VisualC::StlClr::Generic::ContainerRandomAccessIterator&lt;TValue&gt; ^ _Last_iter);" />
      <MemberSignature Language="F#" Value="abstract member erase :  * Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;'Value&gt; * Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;'Value&gt; -&gt; unit" Usage="iVector.erase (, _First_iter, _Last_iter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt;" RefType="ref" />
        <Parameter Name="_First_iter" Type="Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt;" />
        <Parameter Name="_Last_iter" Type="Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="">指定保持在超過所移除項目之第一個項目的 Iterator，如果沒有此類項目存在則為 <see cref="M:Microsoft.VisualC.StlClr.IVector`1.end(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@)" />。</param>
        <param name="_First_iter">要清除之項目範圍的開頭。</param>
        <param name="_Last_iter">超過要清除之項目範圍的第一個位置。</param>
        <summary>移除範圍 [<paramref name="_First_iter" />, <paramref name="_Last_iter" />] 中受控制序列的項目。</summary>
        <returns>迭代器。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
如需詳細資訊，請參閱 < [vector:: erase (STL/CLR)](/cpp/dotnet/vector-stl-clr#erase)。

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="front">
      <MemberSignature Language="C#" Value="public TValue front ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TValue front() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IVector`1.front" />
      <MemberSignature Language="VB.NET" Value="Public Function front () As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TValue % front();" />
      <MemberSignature Language="F#" Value="abstract member front : unit -&gt; " Usage="iVector.front " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue@</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>存取容器的第一個項目。</summary>
        <returns>受控制序列的第一個項目，此序列必須為非空白序列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如需詳細資訊，請參閱 < [vector:: front (STL/CLR)](/cpp/dotnet/vector-stl-clr#front)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="front_item">
      <MemberSignature Language="C#" Value="public TValue front_item { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TValue front_item" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualC.StlClr.IVector`1.front_item" />
      <MemberSignature Language="VB.NET" Value="Public Property front_item As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TValue front_item { TValue get(); void set(TValue value); };" />
      <MemberSignature Language="F#" Value="member this.front_item : 'Value with get, set" Usage="Microsoft.VisualC.StlClr.IVector&lt;'Value&gt;.front_item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>存取容器的第一個項目。</summary>
        <value>受控制序列的第一個項目，此序列必須為非空白序列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如需詳細資訊，請參閱 < [vector::front_item (STL/CLR)](/cpp/dotnet/vector-stl-clr#front_item)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="get_generation">
      <MemberSignature Language="C#" Value="public uint get_generation ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.UInt32 modopt(System.Runtime.CompilerServices.IsLong) get_generation() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IVector`1.get_generation" />
      <MemberSignature Language="VB.NET" Value="Public Function get_generation () As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::UInt32 get_generation();" />
      <MemberSignature Language="F#" Value="abstract member get_generation : unit -&gt; UInt32" Usage="iVector.get_generation " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>取得基礎容器的目前變化層代 (Generation)。</summary>
        <returns>基礎容器的目前變化層代 (Generation)。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="insert">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將項目新增至容器的指定位置。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如需詳細資訊，請參閱 < [vector:: insert (STL/CLR)](/cpp/dotnet/vector-stl-clr#insert)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="insert">
      <MemberSignature Language="C#" Value="public void insert (Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt; _Where_iter, System.Collections.IEnumerable _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void insert(class Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1&lt;!TValue&gt; _Where_iter, class System.Collections.IEnumerable _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IVector`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub insert (_Where_iter As ContainerRandomAccessIterator(Of TValue), _Right As IEnumerable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void insert(Microsoft::VisualC::StlClr::Generic::ContainerRandomAccessIterator&lt;TValue&gt; ^ _Where_iter, System::Collections::IEnumerable ^ _Right);" />
      <MemberSignature Language="F#" Value="abstract member insert : Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;'Value&gt; * System.Collections.IEnumerable -&gt; unit" Usage="iVector.insert (_Where_iter, _Right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Where_iter" Type="Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt;" />
        <Parameter Name="_Right" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="_Where_iter">容器中的位置，插入此位置前。</param>
        <param name="_Right">要插入容器中的列舉型別。</param>
        <summary>將列舉程式所指定的序列插入容器。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="insert">
      <MemberSignature Language="C#" Value="public void insert (ref Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt; , Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt; _Where, TValue _Val);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.void insert(class Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1&lt;!TValue&gt;&amp; , class Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1&lt;!TValue&gt; _Where, !TValue _Val) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IVector`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function insert (ByRef  As ContainerRandomAccessIterator(Of TValue), _Where As ContainerRandomAccessIterator(Of TValue), _Val As TValue) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ insert(Microsoft::VisualC::StlClr::Generic::ContainerRandomAccessIterator&lt;TValue&gt; ^ % , Microsoft::VisualC::StlClr::Generic::ContainerRandomAccessIterator&lt;TValue&gt; ^ _Where, TValue _Val);" />
      <MemberSignature Language="F#" Value="abstract member insert :  * Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;'Value&gt; * 'Value -&gt; unit" Usage="iVector.insert (, _Where, _Val)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt;" RefType="ref" />
        <Parameter Name="_Where" Type="Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt;" />
        <Parameter Name="_Val" Type="TValue" />
      </Parameters>
      <Docs>
        <param name="">指定新插入之元素的迭代器。</param>
        <param name="_Where">容器中的位置，插入此位置前。</param>
        <param name="_Val">要插入至容器中的項目值。</param>
        <summary>將指定的值插入容器。</summary>
        <returns>迭代器。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="insert">
      <MemberSignature Language="C#" Value="public void insert (Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt; _Where, Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt; _First, Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt; _Last);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void insert(class Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1&lt;!TValue&gt; _Where, class Microsoft.VisualC.StlClr.Generic.IInputIterator`1&lt;!TValue&gt; _First, class Microsoft.VisualC.StlClr.Generic.IInputIterator`1&lt;!TValue&gt; _Last) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IVector`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.IInputIterator{`0},Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub insert (_Where As ContainerRandomAccessIterator(Of TValue), _First As IInputIterator(Of TValue), _Last As IInputIterator(Of TValue))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void insert(Microsoft::VisualC::StlClr::Generic::ContainerRandomAccessIterator&lt;TValue&gt; ^ _Where, Microsoft::VisualC::StlClr::Generic::IInputIterator&lt;TValue&gt; ^ _First, Microsoft::VisualC::StlClr::Generic::IInputIterator&lt;TValue&gt; ^ _Last);" />
      <MemberSignature Language="F#" Value="abstract member insert : Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;'Value&gt; * Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;'Value&gt; * Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;'Value&gt; -&gt; unit" Usage="iVector.insert (_Where, _First, _Last)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Where" Type="Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt;" />
        <Parameter Name="_First" Type="Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt;" />
        <Parameter Name="_Last" Type="Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Where">容器中的位置，插入此位置前。</param>
        <param name="_First">要插入容器之範圍的開頭位置。</param>
        <param name="_Last">超過要插入容器之範圍的第一個位置。</param>
        <summary>將以 <paramref name="_First" /> 為開頭和以 <paramref name="_Last" /> 之前的項目為結尾的序列插入容器。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="insert">
      <MemberSignature Language="C#" Value="public void insert (Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt; _Where, int _Count, TValue _Val);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void insert(class Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1&lt;!TValue&gt; _Where, int32 _Count, !TValue _Val) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IVector`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,System.Int32,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub insert (_Where As ContainerRandomAccessIterator(Of TValue), _Count As Integer, _Val As TValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void insert(Microsoft::VisualC::StlClr::Generic::ContainerRandomAccessIterator&lt;TValue&gt; ^ _Where, int _Count, TValue _Val);" />
      <MemberSignature Language="F#" Value="abstract member insert : Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;'Value&gt; * int * 'Value -&gt; unit" Usage="iVector.insert (_Where, _Count, _Val)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Where" Type="Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt;" />
        <Parameter Name="_Count" Type="System.Int32" />
        <Parameter Name="_Val" Type="TValue" />
      </Parameters>
      <Docs>
        <param name="_Where">容器中的位置，插入此位置前。</param>
        <param name="_Count">要插入至容器的項目數目。</param>
        <param name="_Val">要插入至容器中的項目值。</param>
        <summary>將指定的值插入容器。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
如需詳細資訊，請參閱 < [vector:: insert (STL/CLR)](/cpp/dotnet/vector-stl-clr#insert)。

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public TValue this[int _Pos] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TValue Item(int32)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualC.StlClr.IVector`1.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public Property Item(_Pos As Integer) As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TValue default[int] { TValue get(int _Pos); void set(int _Pos, TValue value); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : 'Value with get, set" Usage="Microsoft.VisualC.StlClr.IVector&lt;'Value&gt;.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Pos" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="_Pos">要存取的項目之位置。</param>
        <summary>存取容器中位於指定位置的項目。</summary>
        <value>位於 <paramref name="_Pos" /> 的項目。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如需詳細資訊，請參閱 < [vector::operator(STL/CLR)](/cpp/dotnet/vector-stl-clr#op)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="pop_back">
      <MemberSignature Language="C#" Value="public void pop_back ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void pop_back() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IVector`1.pop_back" />
      <MemberSignature Language="VB.NET" Value="Public Sub pop_back ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void pop_back();" />
      <MemberSignature Language="F#" Value="abstract member pop_back : unit -&gt; unit" Usage="iVector.pop_back " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>從容器移除最後一個項目。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如需詳細資訊，請參閱 < [vector:: pop_back (STL/CLR)](/cpp/dotnet/vector-stl-clr#pop_back)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="push_back">
      <MemberSignature Language="C#" Value="public void push_back (TValue _Val);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void push_back(!TValue _Val) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IVector`1.push_back(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub push_back (_Val As TValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void push_back(TValue _Val);" />
      <MemberSignature Language="F#" Value="abstract member push_back : 'Value -&gt; unit" Usage="iVector.push_back _Val" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Val" Type="TValue" />
      </Parameters>
      <Docs>
        <param name="_Val">要插入至容器中的項目值。</param>
        <summary>將新的項目新增至容器結尾。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如需詳細資訊，請參閱 < [vector:: push_back (STL/CLR)](/cpp/dotnet/vector-stl-clr#push_back)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="rbegin">
      <MemberSignature Language="C#" Value="public void rbegin (ref Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator&lt;TValue&gt; );" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.void rbegin(class Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1&lt;!TValue&gt;&amp; ) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IVector`1.rbegin(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@)" />
      <MemberSignature Language="VB.NET" Value="Public Function rbegin (ByRef  As ReverseRandomAccessIterator(Of TValue)) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ rbegin(Microsoft::VisualC::StlClr::Generic::ReverseRandomAccessIterator&lt;TValue&gt; ^ % );" />
      <MemberSignature Language="F#" Value="abstract member rbegin :  -&gt; unit" Usage="iVector.rbegin " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator&lt;TValue&gt;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="">反向 Iterator，指派受控制序列的最後一個項目，或只是超出空序列的開頭。 因此，它會指定反向序列的 <paramref name="beginning" />。 您會用它來取得指定以反向順序顯示之受控制序列 <paramref name="current" /> 開頭的 Iterator，但是如果受控制序列的長度變更，它的狀態也會變更。</param>
        <summary>指定反向受控制序列的開頭。</summary>
        <returns>迭代器。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
 如需詳細資訊，請參閱 < [vector:: rbegin (STL/CLR)](/cpp/dotnet/vector-stl-clr#rbegin)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="rend">
      <MemberSignature Language="C#" Value="public void rend (ref Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator&lt;TValue&gt; );" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.void rend(class Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1&lt;!TValue&gt;&amp; ) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IVector`1.rend(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@)" />
      <MemberSignature Language="VB.NET" Value="Public Function rend (ByRef  As ReverseRandomAccessIterator(Of TValue)) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ rend(Microsoft::VisualC::StlClr::Generic::ReverseRandomAccessIterator&lt;TValue&gt; ^ % );" />
      <MemberSignature Language="F#" Value="abstract member rend :  -&gt; unit" Usage="iVector.rend " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator&lt;TValue&gt;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="">反向 Iterator，指向超出受控制序列的開頭。 因此，它會指定反向序列的 <paramref name="end" />。 您要用它來取得的 Iterator 可指定以相反順序顯示的受控制序列之 <paramref name="current" /> 結尾，但是，如果受控制序列的長度變更，它的狀態也可以變更。</param>
        <summary>指定反向受控制序列的結尾。</summary>
        <returns>迭代器。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
 如需詳細資訊，請參閱 < [vector:: rend (STL/CLR)](/cpp/dotnet/vector-stl-clr#rend)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="reserve">
      <MemberSignature Language="C#" Value="public void reserve (int _Capacity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void reserve(int32 _Capacity) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IVector`1.reserve(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub reserve (_Capacity As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void reserve(int _Capacity);" />
      <MemberSignature Language="F#" Value="abstract member reserve : int -&gt; unit" Usage="iVector.reserve _Capacity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Capacity" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="_Capacity">新的容器最小容量。</param>
        <summary>保留儲存區，以確保容器最小的成長容量。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如需詳細資訊，請參閱 < [vector:: reserve (STL/CLR)](/cpp/dotnet/vector-stl-clr#reserve)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="resize">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>變更容器可保存的項目數目。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如需詳細資訊，請參閱 < [vector:: resize (STL/CLR)](/cpp/dotnet/vector-stl-clr#resize)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="resize">
      <MemberSignature Language="C#" Value="public void resize (int _Newsize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void resize(int32 _Newsize) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IVector`1.resize(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub resize (_Newsize As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void resize(int _Newsize);" />
      <MemberSignature Language="F#" Value="abstract member resize : int -&gt; unit" Usage="iVector.resize _Newsize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Newsize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="_Newsize">受控制序列的新大小。</param>
        <summary>將容器中的項目數目變更為指定的大小。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如需詳細資訊，請參閱 < [vector:: resize (STL/CLR)](/cpp/dotnet/vector-stl-clr#resize)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="resize">
      <MemberSignature Language="C#" Value="public void resize (int _Newsize, TValue _Val);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void resize(int32 _Newsize, !TValue _Val) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IVector`1.resize(System.Int32,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub resize (_Newsize As Integer, _Val As TValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void resize(int _Newsize, TValue _Val);" />
      <MemberSignature Language="F#" Value="abstract member resize : int * 'Value -&gt; unit" Usage="iVector.resize (_Newsize, _Val)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Newsize" Type="System.Int32" />
        <Parameter Name="_Val" Type="TValue" />
      </Parameters>
      <Docs>
        <param name="_Newsize">受控制序列的新大小。</param>
        <param name="_Val">要插入之項目的值。</param>
        <summary>將容器中的項目數目變更為指定的大小。 如果新的大小大於舊的大小，此方法會附加具有 <paramref name="_Val" /> 值的項目。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如需詳細資訊，請參閱 < [vector:: resize (STL/CLR)](/cpp/dotnet/vector-stl-clr#resize)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="size">
      <MemberSignature Language="C#" Value="public int size ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 size() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IVector`1.size" />
      <MemberSignature Language="VB.NET" Value="Public Function size () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int size();" />
      <MemberSignature Language="F#" Value="abstract member size : unit -&gt; int" Usage="iVector.size " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>計算容器中的項目數目。</summary>
        <returns>受控制序列的長度。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如需詳細資訊，請參閱 < [vector:: size (STL/CLR)](/cpp/dotnet/vector-stl-clr#size)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="swap">
      <MemberSignature Language="C#" Value="public void swap (Microsoft.VisualC.StlClr.IVector&lt;TValue&gt; );" FrameworkAlternate="netframework-3.5;netframework-4.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void swap(class Microsoft.VisualC.StlClr.IVector`1&lt;!TValue&gt; ) cil managed" FrameworkAlternate="netframework-3.5;netframework-4.0" />
      <MemberSignature Language="VB.NET" Value="Public Sub swap ( As IVector(Of TValue))" FrameworkAlternate="netframework-3.5;netframework-4.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void swap(Microsoft::VisualC::StlClr::IVector&lt;TValue&gt; ^ );" FrameworkAlternate="netframework-3.5;netframework-4.0" />
      <MemberSignature Language="C#" Value="public void swap (Microsoft.VisualC.StlClr.IVector&lt;TValue&gt; A_0);" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void swap(class Microsoft.VisualC.StlClr.IVector`1&lt;!TValue&gt; A_0) cil managed" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IVector`1.swap(Microsoft.VisualC.StlClr.IVector{`0})" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Public Sub swap (A_0 As IVector(Of TValue))" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void swap(Microsoft::VisualC::StlClr::IVector&lt;TValue&gt; ^ A_0);" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="abstract member swap : Microsoft.VisualC.StlClr.IVector&lt;'Value&gt; -&gt; unit" Usage="iVector.swap A_0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IVector`1.swap(Microsoft.VisualC.StlClr.IVector{`0})" FrameworkAlternate="netframework-4.5;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="F#" Value="abstract member swap : Microsoft.VisualC.StlClr.IVector&lt;'Value&gt; -&gt; unit" Usage="iVector.swap A_0" FrameworkAlternate="netframework-4.5;netframework-3.5;netframework-4.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.IVector&lt;TValue&gt;" Index="0" FrameworkAlternate="netframework-3.5;netframework-4.0" />
        <Parameter Name="A_0" Type="Microsoft.VisualC.StlClr.IVector&lt;TValue&gt;" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="A_0">要和其交換內容的容器。</param>
        <param name="">要和其交換內容的容器。</param>
        <summary>交換兩個容器的內容。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
 如需詳細資訊，請參閱 < [vector:: swap (STL/CLR)](/cpp/dotnet/vector-stl-clr#swap)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>