<Type Name="RegexCompilationInfo" FullName="System.Text.RegularExpressions.RegexCompilationInfo">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7209323c5df7eb4955c832df732c089c306d181b" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48761529" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class RegexCompilationInfo" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit RegexCompilationInfo extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Text.RegularExpressions.RegexCompilationInfo" />
  <TypeSignature Language="VB.NET" Value="Public Class RegexCompilationInfo" />
  <TypeSignature Language="C++ CLI" Value="public ref class RegexCompilationInfo" />
  <TypeSignature Language="F#" Value="type RegexCompilationInfo = class" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Text.RegularExpressions</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>提供有關規則運算式的資訊，用於將規則運算式編譯成獨立組件。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 陣列<xref:System.Text.RegularExpressions.RegexCompilationInfo>物件傳遞至<xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A>方法，以提供要包含在組件中的每個規則運算式的相關資訊。 包含組件中每個已編譯規則運算式表示為類別衍生自<xref:System.Text.RegularExpressions.Regex>。 屬性<xref:System.Text.RegularExpressions.RegexCompilationInfo>類型定義的規則運算式的類別名稱、 其完整的名稱 （也就是它的命名空間和其型別名稱）、 其規則運算式模式 （例如，規則運算式是任何其他選項不區分大小寫），並指定相符項目中搜尋規則運算式引擎應該多久的逾時間隔。  
  
 您可以具現化<xref:System.Text.RegularExpressions.RegexCompilationInfo>藉由呼叫其多載的類別建構函式的物件。  
  
 ]]></format>
    </remarks>
    <altmember cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />
    <related type="Article" href="~/docs/standard/base-types/compilation-and-reuse-in-regular-expressions.md">編譯和重複使用</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Text.RegularExpressions.RegexCompilationInfo" /> 類別的新執行個體。</summary>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">規則運算式語言項目</related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegexCompilationInfo (string pattern, System.Text.RegularExpressions.RegexOptions options, string name, string fullnamespace, bool ispublic);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string pattern, valuetype System.Text.RegularExpressions.RegexOptions options, string name, string fullnamespace, bool ispublic) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.RegexCompilationInfo.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (pattern As String, options As RegexOptions, name As String, fullnamespace As String, ispublic As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RegexCompilationInfo(System::String ^ pattern, System::Text::RegularExpressions::RegexOptions options, System::String ^ name, System::String ^ fullnamespace, bool ispublic);" />
      <MemberSignature Language="F#" Value="new System.Text.RegularExpressions.RegexCompilationInfo : string * System.Text.RegularExpressions.RegexOptions * string * string * bool -&gt; System.Text.RegularExpressions.RegexCompilationInfo" Usage="new System.Text.RegularExpressions.RegexCompilationInfo (pattern, options, name, fullnamespace, ispublic)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="fullnamespace" Type="System.String" />
        <Parameter Name="ispublic" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="pattern">要編譯的規則運算式。</param>
        <param name="options">要在編譯規則運算式時使用的規則運算式選項。</param>
        <param name="name">代表已編譯之規則運算式的型別名稱。</param>
        <param name="fullnamespace">新型別所屬的命名空間。</param>
        <param name="ispublic">如果要使編譯過的規則運算式公開可見，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
        <summary>初始化 <see cref="T:System.Text.RegularExpressions.RegexCompilationInfo" /> 類別的新執行個體，其中包含有關要包含在組件中的規則運算式的資訊。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 每個參數<xref:System.Text.RegularExpressions.RegexCompilationInfo.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.String%2CSystem.String%2CSystem.Boolean%29>建構函式會直接對應到屬性的<xref:System.Text.RegularExpressions.RegexCompilationInfo>類別。 因為所有屬性都是讀取/寫入，也可以直接指派其值。  
  
 <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A>方法會產生包含已編譯規則運算式的組件。 因此，您不應指定<xref:System.Text.RegularExpressions.RegexOptions.Compiled>做為其中一個值`options`。  
  
 如果`ispublic`是`true`，編譯的規則運算式類別提供公用存取範圍。 也就是說，它可以具現化從任何組件中執行的程式碼。 如果`ispublic`是`false`，指定已編譯的規則運算式類別`internal`（在 C# 中) 或`Friend`（在 Visual Basic) 存取範圍。 也就是說，它可以具現化只能從相同的規則運算式類別的組件中執行程式碼。  
  
   
  
## Examples  
 下列範例會建立，並使用兩個步驟的已編譯的規則運算式。  
  
 在第一個步驟中，編譯並執行下列程式碼範例。 <xref:System.Text.RegularExpressions.RegexCompilationInfo.%23ctor%2A>建構函式程式碼範例中的定義的已編譯的規則運算式。 執行程式碼的結果是名為 FishRegex.dll 包含名為編譯的規則運算式類型的組件`FishRegex`。  
  
 [!code-csharp[sys.txt.rgxCompInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.txt.rgxCompInfo/cs/genFishRegex.cs#1)]
 [!code-vb[sys.txt.rgxCompInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.txt.rgxCompInfo/vb/genFishRegex.vb#1)]  
  
 在第二個步驟中，編譯下列程式碼範例使用 FishRegex.dll 的參考，並接著執行產生的可執行檔。 可執行檔使用符合目標字串`FishRegex`輸入，然後顯示目標字串中的相符項目、 群組、 擷取群組和相符的項目索引位置。  
  
 [!code-csharp[sys.txt.rgxCompInfo#2](~/samples/snippets/csharp/VS_Snippets_CLR/sys.txt.rgxCompInfo/cs/useFishRegex.cs#2)]
 [!code-vb[sys.txt.rgxCompInfo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.txt.rgxCompInfo/vb/useFishRegex.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> 為 <see cref="F:System.String.Empty" />。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pattern" /> 為 <see langword="null" />。  
  
-或- 
 <paramref name="name" /> 為 <see langword="null" />。  
  
-或- 
 <paramref name="fullnamespace" /> 為 <see langword="null" />。</exception>
        <block subset="none" type="usage">
          <para>這個建構函式會建立編譯的規則運算式會使用預設的逾時值，在其中建立應用程式定義域。 如果針對應用程式定義域中定義的逾時值，則編譯的規則運算式使用的值<see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />，這樣就不會逾時模式比對作業。建立編譯的規則運算式的建議建構函式是<see cref="M:System.Text.RegularExpressions.RegexCompilationInfo.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.String,System.Boolean,System.TimeSpan)" />，可讓您設定的逾時間隔。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegexCompilationInfo (string pattern, System.Text.RegularExpressions.RegexOptions options, string name, string fullnamespace, bool ispublic, TimeSpan matchTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string pattern, valuetype System.Text.RegularExpressions.RegexOptions options, string name, string fullnamespace, bool ispublic, valuetype System.TimeSpan matchTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.RegexCompilationInfo.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.String,System.Boolean,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (pattern As String, options As RegexOptions, name As String, fullnamespace As String, ispublic As Boolean, matchTimeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RegexCompilationInfo(System::String ^ pattern, System::Text::RegularExpressions::RegexOptions options, System::String ^ name, System::String ^ fullnamespace, bool ispublic, TimeSpan matchTimeout);" />
      <MemberSignature Language="F#" Value="new System.Text.RegularExpressions.RegexCompilationInfo : string * System.Text.RegularExpressions.RegexOptions * string * string * bool * TimeSpan -&gt; System.Text.RegularExpressions.RegexCompilationInfo" Usage="new System.Text.RegularExpressions.RegexCompilationInfo (pattern, options, name, fullnamespace, ispublic, matchTimeout)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="fullnamespace" Type="System.String" />
        <Parameter Name="ispublic" Type="System.Boolean" />
        <Parameter Name="matchTimeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="pattern">要編譯的規則運算式。</param>
        <param name="options">要在編譯規則運算式時使用的規則運算式選項。</param>
        <param name="name">代表已編譯之規則運算式的型別名稱。</param>
        <param name="fullnamespace">新型別所屬的命名空間。</param>
        <param name="ispublic">如果要使編譯過的規則運算式公開可見，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
        <param name="matchTimeout">規則運算式的預設逾時間隔。</param>
        <summary>初始化 <see cref="T:System.Text.RegularExpressions.RegexCompilationInfo" /> 類別的新執行個體，這個執行個體包含要在組件中加入指定逾時值之規則運算式的相關資訊。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 每個參數<xref:System.Text.RegularExpressions.RegexCompilationInfo.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.String%2CSystem.String%2CSystem.Boolean%29>建構函式會直接對應到屬性的<xref:System.Text.RegularExpressions.RegexCompilationInfo>類別。 因為所有屬性都是讀取/寫入，也可以直接指派其值。  
  
 <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A>方法會產生包含已編譯規則運算式的組件。 因此，您不應指定<xref:System.Text.RegularExpressions.RegexOptions.Compiled>做為其中一個值`options`。  
  
 如果`ispublic`是`true`，編譯的規則運算式類別提供公用存取範圍。 也就是說，它可以具現化從任何組件中執行的程式碼。 如果`ispublic`是`false`，指定已編譯的規則運算式類別`internal`（在 C# 中) 或`Friend`（在 Visual Basic) 存取範圍。 也就是說，它可以具現化只能從相同的規則運算式類別的組件中執行程式碼。  
  
 `matchTimeout`參數會定義編譯的規則運算式的預設逾時間隔。 這個值表示已編譯的規則運算式物件將會執行單一比對作業，作業逾時和規則運算式引擎會擲回之前的時間大約數量<xref:System.Text.RegularExpressions.RegexMatchTimeoutException>在其下一步 計時檢查期間的例外狀況. 其他的逾時值的詳細資訊，請參閱<xref:System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout%2A>屬性。  
  
> [!IMPORTANT]
>  我們建議您一律將編譯的規則運算式的預設逾時值。 您的規則運算式程式庫的取用者可以藉由傳遞項目覆寫該逾時值<xref:System.TimeSpan>值，代表這個建構函式多載的新的逾時間隔。  
  
   
  
## Examples  
 下列範例會定義名為單一編譯規則運算式`DuplicateChars`可識別輸入字串中的相同字元的兩個或多個發生次數。 已編譯的規則運算式具有 2 秒的預設逾時。 當您執行範例時，它會建立名為 RegexLib.dll，其中包含已編譯的規則運算式的類別庫。  
  
 [!code-csharp[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/cs/example1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/vb/example1.vb#1)]  
  
 規則運算式模式 `(\w)\1+` 的定義如下表所示。  
  
|模式|描述|  
|-------------|-----------------|  
|`(\w)`|比對任何文字字元，並將它指派給第一個擷取群組。|  
|`\1+`|比對一或多個出現的第一個擷取群組的值。|  
  
 下列範例會使用`DuplicatedChars`來識別重複的字元字串陣列中的規則運算式。 當呼叫`DuplicatedChars`建構函式，它變更為.5 秒的逾時間隔。  
  
 [!code-csharp[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/cs/example1a.cs#2)]
 [!code-vb[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/vb/example1a.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> 為 <see cref="F:System.String.Empty" />。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pattern" /> 為 <see langword="null" />。  
  
-或- 
 <paramref name="name" /> 為 <see langword="null" />。  
  
-或- 
 <paramref name="fullnamespace" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="matchTimeout" /> 為負數、零或大約大於 24 天。</exception>
        <altmember cref="P:System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout" />
      </Docs>
    </Member>
    <Member MemberName="IsPublic">
      <MemberSignature Language="C#" Value="public bool IsPublic { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPublic" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.IsPublic" />
      <MemberSignature Language="VB.NET" Value="Public Property IsPublic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPublic { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsPublic : bool with get, set" Usage="System.Text.RegularExpressions.RegexCompilationInfo.IsPublic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出已編譯的規則運算式是否具有公用可視性。</summary>
        <value>如果規則運算式具有公用可視性，則為 <see langword="true" />，否則為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Text.RegularExpressions.RegexCompilationInfo.IsPublic%2A>屬性是`false`，目前的執行個體所定義的規則運算式類別可以具現化只能由執行包含類別的組件中的程式碼。 不過，因為<xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A?displayProperty=nameWithType>方法會產生包含已編譯的規則運算式，且不允許其他程式碼以加入的組件，通常是沒有理由来指派此屬性的值`false`。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MatchTimeout">
      <MemberSignature Language="C#" Value="public TimeSpan MatchTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan MatchTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property MatchTimeout As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan MatchTimeout { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="F#" Value="member this.MatchTimeout : TimeSpan with get, set" Usage="System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定規則運算式的預設逾時間隔。</summary>
        <value>在<see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" />擲回之前，可在模式比對作業中流逝的預設最大時間間隔，或者為<see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />（如果停用逾時）。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout%2A>屬性會定義編譯的規則運算式的預設逾時間隔。 這個值表示已編譯的規則運算式將會執行單一比對作業，作業逾時和規則運算式引擎會擲回之前的時間大約數量<xref:System.Text.RegularExpressions.RegexMatchTimeoutException>在其下一步 計時檢查期間的例外狀況。  
  
> [!IMPORTANT]
>  我們建議您一律將編譯的規則運算式的預設逾時值。 您的規則運算式程式庫的取用者可以藉由傳遞項目覆寫該逾時值<xref:System.TimeSpan>值，表示新的逾時間隔已編譯規則運算式的類別建構函式。  
  
 您可以指派到預設的逾時值<xref:System.Text.RegularExpressions.RegexCompilationInfo>物件在下列任一方式：  
  
-   藉由呼叫<xref:System.AppDomain.SetData%2A?displayProperty=nameWithType>方法，並提供的字串表示<xref:System.TimeSpan>"REGEX_DEFAULT_MATCH_TIMEOUT"屬性值。  
  
-   藉由呼叫<xref:System.Text.RegularExpressions.RegexCompilationInfo.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.String%2CSystem.String%2CSystem.Boolean%2CSystem.TimeSpan%29>建構函式，並提供值`matchTimeout`參數。  
  
-   藉由設定這個屬性的值。  
  
 若要設定合理的逾時間隔，請考慮下列因素：  
  
-   長度和複雜度的規則運算式模式。 時間更長、 更複雜的規則運算式需要更多的時間比比較簡短而簡單的項目。  
  
-   預期的電腦工作負載。 處理會需要更多時間，CPU 和記憶體使用率過高的系統上。  
  
   
  
## Examples  
 下列範例會定義名為單一編譯規則運算式`DuplicateChars`可識別輸入字串中的相同字元的兩個或多個發生次數。 已編譯的規則運算式具有 2 秒的預設逾時。 當您執行範例時，它會建立名為 RegexLib.dll，其中包含已編譯的規則運算式的類別庫。  
  
 [!code-csharp[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/cs/example1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/vb/example1.vb#1)]  
  
 規則運算式模式 `(\w)\1+` 的定義如下表所示。  
  
|模式|描述|  
|-------------|-----------------|  
|`(\w)`|比對任何文字字元，並將它指派給第一個擷取群組。|  
|`\1+`|比對一或多個出現的第一個擷取群組的值。|  
  
 下列範例會使用`DuplicatedChars`來識別重複的字元字串陣列中的規則運算式。 當呼叫`DuplicatedChars`建構函式，它變更為.5 秒的逾時間隔。  
  
 [!code-csharp[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/cs/example1a.cs#2)]
 [!code-vb[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/vb/example1a.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.RegularExpressions.RegexCompilationInfo.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.String,System.Boolean,System.TimeSpan)" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Text.RegularExpressions.RegexCompilationInfo.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定代表已編譯之規則運算式的型別名稱。</summary>
        <value>新型別的名稱。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.RegexCompilationInfo>類別用來定義已編譯的規則運算式，表示為類別衍生自<xref:System.Text.RegularExpressions.Regex>。 <xref:System.Text.RegularExpressions.RegexCompilationInfo.Name%2A>屬性會定義規則運算式類型的類別名稱，<xref:System.Text.RegularExpressions.RegexCompilationInfo.Namespace%2A>和<xref:System.Text.RegularExpressions.RegexCompilationInfo.Name%2A>屬性一起定義其完整的名稱。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">這個屬性的值為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">這個屬性的值是空字串。</exception>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Namespace { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Namespace : string with get, set" Usage="System.Text.RegularExpressions.RegexCompilationInfo.Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定新型別所屬的命名空間。</summary>
        <value>新型別的命名空間。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.RegexCompilationInfo>類別用來定義已編譯的規則運算式，表示為類別衍生自<xref:System.Text.RegularExpressions.Regex>。 <xref:System.Text.RegularExpressions.RegexCompilationInfo.Namespace%2A>屬性會定義命名空間包含的已編譯的規則運算式型別，而<xref:System.Text.RegularExpressions.RegexCompilationInfo.Namespace%2A>和<xref:System.Text.RegularExpressions.RegexCompilationInfo.Name%2A>屬性一起定義其完整的名稱。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">這個屬性的值為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.RegexOptions Options { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Text.RegularExpressions.RegexOptions Options" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.Options" />
      <MemberSignature Language="VB.NET" Value="Public Property Options As RegexOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::RegularExpressions::RegexOptions Options { System::Text::RegularExpressions::RegexOptions get(); void set(System::Text::RegularExpressions::RegexOptions value); };" />
      <MemberSignature Language="F#" Value="member this.Options : System.Text.RegularExpressions.RegexOptions with get, set" Usage="System.Text.RegularExpressions.RegexCompilationInfo.Options" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.RegexOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定要在編譯規則運算式時使用的選項。</summary>
        <value>列舉值的位元組合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A>方法會產生包含已編譯規則運算式的組件。 因此，您並不需要指定<xref:System.Text.RegularExpressions.RegexOptions.Compiled>做為其中一個值，這個屬性。 如果有的話，<xref:System.Text.RegularExpressions.RegexOptions.Compiled>選項會被忽略。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Pattern">
      <MemberSignature Language="C#" Value="public string Pattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Pattern" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.Pattern" />
      <MemberSignature Language="VB.NET" Value="Public Property Pattern As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Pattern { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Pattern : string with get, set" Usage="System.Text.RegularExpressions.RegexCompilationInfo.Pattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定要編譯的規則運算式。</summary>
        <value>要編譯的規則運算式。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.RegexCompilationInfo.Pattern%2A>屬性可包含任何有效的規則運算式。 如果值<xref:System.Text.RegularExpressions.RegexCompilationInfo.Pattern%2A>屬性不是語法正確的規則運算式模式中，呼叫<xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A>方法會擲回<xref:System.ArgumentException>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">這個屬性的值為 <see langword="null" />。</exception>
        <related type="Article" href="~/docs/standard/base-types/regular-expressions.md">.NET Framework 規則運算式</related>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">規則運算式語言項目</related>
      </Docs>
    </Member>
  </Members>
</Type>