<Type Name="GroupCollection" FullName="System.Text.RegularExpressions.GroupCollection">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="88745e6fd7ac5403f750a8bd7fe3115e386d3db4" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class GroupCollection : System.Collections.ICollection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit GroupCollection extends System.Object implements class System.Collections.ICollection, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Text.RegularExpressions.GroupCollection" />
  <TypeSignature Language="VB.NET" Value="Public Class GroupCollection&#xA;Implements ICollection" />
  <TypeSignature Language="C++ CLI" Value="public ref class GroupCollection : System::Collections::ICollection" />
  <AssemblyInfo>
    <AssemblyName>System.Text.RegularExpressions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="b7c5d-101">在單一比對中傳回擷取之群組的集合。</span>
      <span class="sxs-lookup">
        <span data-stu-id="b7c5d-101">Returns the set of captured groups in a single match.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7c5d-102"><xref:System.Text.RegularExpressions.GroupCollection>類別是以零為起始的集合類別，其中包含一或多個<xref:System.Text.RegularExpressions.Group>提供下列資訊的物件擷取規則運算式相符項目中的群組。</span><span class="sxs-lookup"><span data-stu-id="b7c5d-102">The <xref:System.Text.RegularExpressions.GroupCollection> class is a zero-based collection class that consists of one or more <xref:System.Text.RegularExpressions.Group> objects that provide information about captured groups in a regular expression match.</span></span> <span data-ttu-id="b7c5d-103">集合是不可變 （唯讀） 並沒有公用建構函式。</span><span class="sxs-lookup"><span data-stu-id="b7c5d-103">The collection is immutable (read-only) and has no public constructor.</span></span> <span data-ttu-id="b7c5d-104">A<xref:System.Text.RegularExpressions.GroupCollection>物件由<xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=nameWithType>屬性。</span><span class="sxs-lookup"><span data-stu-id="b7c5d-104">A <xref:System.Text.RegularExpressions.GroupCollection> object is returned by the <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="b7c5d-105">集合包含一或多個<xref:System.Text.RegularExpressions.Group?displayProperty=nameWithType>物件。</span><span class="sxs-lookup"><span data-stu-id="b7c5d-105">The collection contains one or more <xref:System.Text.RegularExpressions.Group?displayProperty=nameWithType> objects.</span></span> <span data-ttu-id="b7c5d-106">如果比對成功時，集合中的第一個項目包含<xref:System.Text.RegularExpressions.Group>物件對應於整個相符項目。</span><span class="sxs-lookup"><span data-stu-id="b7c5d-106">If the match is successful, the first element in the collection contains the <xref:System.Text.RegularExpressions.Group> object that corresponds to the entire match.</span></span> <span data-ttu-id="b7c5d-107">每個後續的項目代表擷取的群組，如果規則運算式包含擷取群組。</span><span class="sxs-lookup"><span data-stu-id="b7c5d-107">Each subsequent element represents a captured group, if the regular expression includes capturing groups.</span></span> <span data-ttu-id="b7c5d-108">中 （未命名） 的編號擷取群組相符項目會出現相符項目之前的數字順序從具名擷取群組。</span><span class="sxs-lookup"><span data-stu-id="b7c5d-108">Matches from numbered (unnamed) capturing groups appear in numeric order before matches from named capturing groups.</span></span> <span data-ttu-id="b7c5d-109">如果比對失敗時，集合包含單一<xref:System.Text.RegularExpressions.Group?displayProperty=nameWithType>物件，其<xref:System.Text.RegularExpressions.Group.Success%2A>屬性是`false`，且<xref:System.Text.RegularExpressions.Capture.Value%2A>屬性等於<xref:System.String.Empty?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b7c5d-109">If the match is unsuccessful, the collection contains a single <xref:System.Text.RegularExpressions.Group?displayProperty=nameWithType> object whose <xref:System.Text.RegularExpressions.Group.Success%2A> property is `false` and whose <xref:System.Text.RegularExpressions.Capture.Value%2A> property equals <xref:System.String.Empty?displayProperty=nameWithType>.</span></span> <span data-ttu-id="b7c5d-110">如需詳細資訊，請參閱中的 < 群組建構和規則運算式物件 > 一節[群組建構](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md)發行項。</span><span class="sxs-lookup"><span data-stu-id="b7c5d-110">For more information, see the "Grouping Constructs and Regular Expression Objects" section in the [Grouping Constructs](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md) article.</span></span>  
  
 <span data-ttu-id="b7c5d-111">若要逐一查看集合的成員，您應該使用您的語言所提供的反覆項目集合建構 (例如`foreach`在 C# 和`For Each`...`Next`</span><span class="sxs-lookup"><span data-stu-id="b7c5d-111">To iterate through the members of the collection, you should use the collection iteration construct provided by your language (such as `foreach` in C# and `For Each`…`Next`</span></span> <span data-ttu-id="b7c5d-112">在 Visual Basic 中) 而不是擷取所傳回的列舉值<xref:System.Text.RegularExpressions.GroupCollection.GetEnumerator%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="b7c5d-112">in Visual Basic) instead of retrieving the enumerator that is returned by the <xref:System.Text.RegularExpressions.GroupCollection.GetEnumerator%2A> method.</span></span> <span data-ttu-id="b7c5d-113">此外，您可以存取個別編號的擷取的群組，從<xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29>屬性 （索引子在 C# 中），而且您可以存取個別具名的擷取的群組，從<xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29>屬性。</span><span class="sxs-lookup"><span data-stu-id="b7c5d-113">In addition, you can access individual numbered captured groups from the <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29> property (the indexer in C#), and you can access individual named captured groups from the <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29> property.</span></span> <span data-ttu-id="b7c5d-114">請注意，您可以擷取陣列，其中包含的數字和所有的擷取群組的名稱，藉由呼叫<xref:System.Text.RegularExpressions.Regex.GetGroupNumbers%2A?displayProperty=nameWithType>和<xref:System.Text.RegularExpressions.Regex.GetGroupNames%2A?displayProperty=nameWithType>方法，分別。</span><span class="sxs-lookup"><span data-stu-id="b7c5d-114">Note that you can retrieve an array that contains the numbers and names of all capturing groups by calling the <xref:System.Text.RegularExpressions.Regex.GetGroupNumbers%2A?displayProperty=nameWithType> and <xref:System.Text.RegularExpressions.Regex.GetGroupNames%2A?displayProperty=nameWithType> methods, respectively.</span></span> <span data-ttu-id="b7c5d-115">兩者都是執行個體方法，而且需要您具現化<xref:System.Text.RegularExpressions.Regex>物件，代表要比對的規則運算式。</span><span class="sxs-lookup"><span data-stu-id="b7c5d-115">Both are instance methods and require that you instantiate a <xref:System.Text.RegularExpressions.Regex> object that represents the regular expression to be matched.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b7c5d-116">下列範例會使用規則運算式的擷取群組來擷取資訊商標和文字中所使用的註冊的商標。</span><span class="sxs-lookup"><span data-stu-id="b7c5d-116">The following example uses a regular expression with capturing groups to extract information about trademarks and registered trademarks used in text.</span></span> <span data-ttu-id="b7c5d-117">規則運算式模式是`\b(\w+?)([\u00AE\u2122])`，可解譯如下表所示。</span><span class="sxs-lookup"><span data-stu-id="b7c5d-117">The regular expression pattern is `\b(\w+?)([\u00AE\u2122])`, which is interpreted as shown in the following table.</span></span>  
  
|<span data-ttu-id="b7c5d-118">模式</span><span class="sxs-lookup"><span data-stu-id="b7c5d-118">Pattern</span></span>|<span data-ttu-id="b7c5d-119">描述</span><span class="sxs-lookup"><span data-stu-id="b7c5d-119">Description</span></span>|  
|-------------|-----------------|  
|`\b`|<span data-ttu-id="b7c5d-120">尋找字邊界。</span><span class="sxs-lookup"><span data-stu-id="b7c5d-120">Look for a word boundary.</span></span>|  
|`(\w+?)`|<span data-ttu-id="b7c5d-121">尋找一個或多個文字字元。</span><span class="sxs-lookup"><span data-stu-id="b7c5d-121">Look for one or more word characters.</span></span> <span data-ttu-id="b7c5d-122">結合在一起，這些形成商標的名稱。</span><span class="sxs-lookup"><span data-stu-id="b7c5d-122">Together, these form the trademarked name.</span></span> <span data-ttu-id="b7c5d-123">（請注意，這個規則運算式會假設商標組成單一文字）。這是第一個擷取群組。</span><span class="sxs-lookup"><span data-stu-id="b7c5d-123">(Note that this regular expression assumes that a trademark consists of a single word.) This is the first capturing group.</span></span>|  
|`([\u00AE\u2122])`|<span data-ttu-id="b7c5d-124">尋找® 或™ 字元。</span><span class="sxs-lookup"><span data-stu-id="b7c5d-124">Look for either the ® or the ™ character.</span></span> <span data-ttu-id="b7c5d-125">這是第二個擷取群組。</span><span class="sxs-lookup"><span data-stu-id="b7c5d-125">This is the second capturing group.</span></span>|  
  
 <span data-ttu-id="b7c5d-126">每次比對，<xref:System.Text.RegularExpressions.GroupCollection>包含三種<xref:System.Text.RegularExpressions.Group>物件。</span><span class="sxs-lookup"><span data-stu-id="b7c5d-126">For each match, the <xref:System.Text.RegularExpressions.GroupCollection> contains three <xref:System.Text.RegularExpressions.Group> objects.</span></span> <span data-ttu-id="b7c5d-127">第一個物件包含符合整個規則運算式的字串。</span><span class="sxs-lookup"><span data-stu-id="b7c5d-127">The first object contains the string that matches the entire regular expression.</span></span> <span data-ttu-id="b7c5d-128">第二個物件，代表第一個擷取的群組，其中包含產品名稱。</span><span class="sxs-lookup"><span data-stu-id="b7c5d-128">The second object, which represents the first captured group, contains the product name.</span></span> <span data-ttu-id="b7c5d-129">第三個物件，代表第二個擷取的群組，包含商標或註冊商標符號。</span><span class="sxs-lookup"><span data-stu-id="b7c5d-129">The third object, which represents the second captured group, contains the trademark or registered trademark symbol.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.GroupCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.GroupCollection/cs/Example1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.GroupCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.GroupCollection/vb/Example1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Text.RegularExpressions.Group" />
  </Docs>
  <Members>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (Array array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class System.Array array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(Array ^ array, int arrayIndex);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="b7c5d-130">複製集合的目標陣列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7c5d-130">The array the collection is to be copied into.</span>
          </span>
        </param>
        <param name="arrayIndex">
          <span data-ttu-id="b7c5d-131">在目的陣列中要開始複製的位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7c5d-131">The position in the destination array where the copying is to begin.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b7c5d-132">複製集合的所有項目至指定索引處開始的指定陣列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7c5d-132">Copies all the elements of the collection to the given array beginning at the given index.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7c5d-133">將整個集合複製到指定索引處開始的陣列，因為目的陣列必須至少與集合一樣大。</span><span class="sxs-lookup"><span data-stu-id="b7c5d-133">Because the entire collection is copied into the array starting at the given index, the destination array must be at least as large as the collection.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="b7c5d-134">這個成員是不存在於[!INCLUDE[net_portable](~/includes/net-portable-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="b7c5d-134">This member is not present in the [!INCLUDE[net_portable](~/includes/net-portable-md.md)].</span></span> <span data-ttu-id="b7c5d-135">如果您正在開發的應用程式目標[!INCLUDE[net_portable](~/includes/net-portable-md.md)]，使用<xref:System.Text.RegularExpressions.GroupCollection.System%23Collections%23ICollection%23CopyTo%2A?displayProperty=nameWithType>方法改為。</span><span class="sxs-lookup"><span data-stu-id="b7c5d-135">If you are developing applications that target the [!INCLUDE[net_portable](~/includes/net-portable-md.md)], use the <xref:System.Text.RegularExpressions.GroupCollection.System%23Collections%23ICollection%23CopyTo%2A?displayProperty=nameWithType> method instead.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b7c5d-136">下列範例會擷取句子中的每個字，並擷取中的擷取群組，<xref:System.Text.RegularExpressions.GroupCollection.CopyTo%2A>方法再用來在每個相符複製項目的<xref:System.Text.RegularExpressions.GroupCollection>物件陣列，其中包含擷取群組的所有相符項目。</span><span class="sxs-lookup"><span data-stu-id="b7c5d-136">The following example extracts each word from a sentence and captures it in a capturing group, The <xref:System.Text.RegularExpressions.GroupCollection.CopyTo%2A> method is then used to copy the elements in each match's <xref:System.Text.RegularExpressions.GroupCollection> object to an array that contains the capturing groups from all matches.</span></span> <span data-ttu-id="b7c5d-137">個別擷取的文字隨即顯示到主控台。</span><span class="sxs-lookup"><span data-stu-id="b7c5d-137">The individual captured words are then displayed to the console.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.GroupCollection.CopyTo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.groupcollection.copyto/cs/copyto1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.GroupCollection.CopyTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.groupcollection.copyto/vb/copyto1.vb#1)]  
  
 <span data-ttu-id="b7c5d-138">規則運算式的定義方式如下：</span><span class="sxs-lookup"><span data-stu-id="b7c5d-138">The regular expression is defined as follows:</span></span>  
  
|<span data-ttu-id="b7c5d-139">模式</span><span class="sxs-lookup"><span data-stu-id="b7c5d-139">Pattern</span></span>|<span data-ttu-id="b7c5d-140">描述</span><span class="sxs-lookup"><span data-stu-id="b7c5d-140">Description</span></span>|  
|-------------|-----------------|  
|`\b`|<span data-ttu-id="b7c5d-141">比對字邊界。</span><span class="sxs-lookup"><span data-stu-id="b7c5d-141">Match a word boundary.</span></span>|  
|`(\S+?)`|<span data-ttu-id="b7c5d-142">比對一個或多個非空白字元的字元。</span><span class="sxs-lookup"><span data-stu-id="b7c5d-142">Match one or more non-white space characters.</span></span> <span data-ttu-id="b7c5d-143">請將它們指派給第一個擷取群組。</span><span class="sxs-lookup"><span data-stu-id="b7c5d-143">Assign them to the first capturing group.</span></span>|  
|`\b`|<span data-ttu-id="b7c5d-144">比對字邊界。</span><span class="sxs-lookup"><span data-stu-id="b7c5d-144">Match a word boundary.</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b7c5d-145">
            <paramref name="array" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7c5d-145">
              <paramref name="array" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.IndexOutOfRangeException">
          <span data-ttu-id="b7c5d-146">
            <paramref name="arrayIndex" /> 不在 <paramref name="array" /> 範圍內。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7c5d-146">
              <paramref name="arrayIndex" /> is outside the bounds of <paramref name="array" />.</span>
          </span>
          <span data-ttu-id="b7c5d-147">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7c5d-147">-or-</span>
          </span>
          <span data-ttu-id="b7c5d-148">
            <paramref name="arrayIndex" /> 加上 <see cref="P:System.Text.RegularExpressions.GroupCollection.Count" /> 落在 <paramref name="array" /> 範圍以外。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7c5d-148">
              <paramref name="arrayIndex" /> plus <see cref="P:System.Text.RegularExpressions.GroupCollection.Count" /> is outside the bounds of <paramref name="array" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (System.Text.RegularExpressions.Group[] array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class System.Text.RegularExpressions.Group[] array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.CopyTo(System.Text.RegularExpressions.Group[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (array As Group(), arrayIndex As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(cli::array &lt;System::Text::RegularExpressions::Group ^&gt; ^ array, int arrayIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Text.RegularExpressions.Group[]" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">To be added.</param>
        <param name="arrayIndex">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GroupCollection.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b7c5d-149">傳回集合中的群組數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7c5d-149">Returns the number of groups in the collection.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b7c5d-150">集合中的群組數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7c5d-150">The number of groups in the collection.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7c5d-151"><xref:System.Text.RegularExpressions.GroupCollection>物件永遠有至少一個成員。</span><span class="sxs-lookup"><span data-stu-id="b7c5d-151">The <xref:System.Text.RegularExpressions.GroupCollection> object always has at least one member.</span></span> <span data-ttu-id="b7c5d-152">如果比對不成功，<xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=nameWithType>屬性會傳回<xref:System.Text.RegularExpressions.GroupCollection>物件，其中包含單一成員。</span><span class="sxs-lookup"><span data-stu-id="b7c5d-152">If a match is unsuccessful, the <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=nameWithType> property returns a <xref:System.Text.RegularExpressions.GroupCollection> object that contains a single member.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b7c5d-153">提供逐一查看集合的列舉值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7c5d-153">Provides an enumerator that iterates through the collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b7c5d-154">列舉程式，包含 <see cref="T:System.Text.RegularExpressions.Group" /> 中的所有 <see cref="T:System.Text.RegularExpressions.GroupCollection" /> 物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7c5d-154">An enumerator that contains all <see cref="T:System.Text.RegularExpressions.Group" /> objects in the <see cref="T:System.Text.RegularExpressions.GroupCollection" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7c5d-155">而不是呼叫<xref:System.Text.RegularExpressions.GroupCollection.GetEnumerator%2A>方法來擷取列舉值，可讓您逐一<xref:System.Text.RegularExpressions.Group>物件在集合中，您應該使用群組反覆項目建構 (例如`foreach`在 C# 和`For Each`...`Next`</span><span class="sxs-lookup"><span data-stu-id="b7c5d-155">Instead of calling the <xref:System.Text.RegularExpressions.GroupCollection.GetEnumerator%2A> method to retrieve an enumerator that lets you iterate through the <xref:System.Text.RegularExpressions.Group> objects in the collection, you should use the group iteration construct (such as `foreach` in C# and `For Each`…`Next`</span></span> <span data-ttu-id="b7c5d-156">在 Visual Basic 中)，是由您的程式語言提供。</span><span class="sxs-lookup"><span data-stu-id="b7c5d-156">in Visual Basic) that is provided by your programming language.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GroupCollection.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b7c5d-157">取得值，這個值表示集合是否為唯讀。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7c5d-157">Gets a value that indicates whether the collection is read-only.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b7c5d-158">所有情況下都是 <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7c5d-158">
              <see langword="true" /> in all cases.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSynchronized">
      <MemberSignature Language="C#" Value="public bool IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GroupCollection.IsSynchronized" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSynchronized As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSynchronized { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b7c5d-159">取得值，指出 <see cref="T:System.Text.RegularExpressions.GroupCollection" /> 的存取是否同步 (安全執行緒)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7c5d-159">Gets a value that indicates whether access to the <see cref="T:System.Text.RegularExpressions.GroupCollection" /> is synchronized (thread-safe).</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b7c5d-160">所有情況下都是 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7c5d-160">
              <see langword="false" /> in all cases.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!WARNING]
>  <span data-ttu-id="b7c5d-161">這個成員是不存在於[!INCLUDE[net_portable](~/includes/net-portable-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="b7c5d-161">This member is not present in the [!INCLUDE[net_portable](~/includes/net-portable-md.md)].</span></span> <span data-ttu-id="b7c5d-162">如果您正在開發的應用程式目標[!INCLUDE[net_portable](~/includes/net-portable-md.md)]，使用<xref:System.Text.RegularExpressions.CaptureCollection.System%23Collections%23ICollection%23IsSynchronized%2A?displayProperty=nameWithType>屬性改為。</span><span class="sxs-lookup"><span data-stu-id="b7c5d-162">If you are developing applications that target the [!INCLUDE[net_portable](~/includes/net-portable-md.md)], use the <xref:System.Text.RegularExpressions.CaptureCollection.System%23Collections%23ICollection%23IsSynchronized%2A?displayProperty=nameWithType> property instead.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Text.RegularExpressions.GroupCollection.SyncRoot" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Item">
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="b7c5d-163">啟用依據整數或字串索引來存取集合的單一成員。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7c5d-163">Enables access to a single member of the collection by integer or string index.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.Group this[int groupnum] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.RegularExpressions.Group Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GroupCollection.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(groupnum As Integer) As Group" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::RegularExpressions::Group ^ default[int] { System::Text::RegularExpressions::Group ^ get(int groupnum); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Group</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="groupnum" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="groupnum">
          <span data-ttu-id="b7c5d-164">要擷取之集合成員的以零起始的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7c5d-164">The zero-based index of the collection member to be retrieved.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b7c5d-165">以整數索引啟用對集合成員的存取。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7c5d-165">Enables access to a member of the collection by integer index.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b7c5d-166">
            <paramref name="groupnum" /> 指定的集合成員。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7c5d-166">The member of the collection specified by <paramref name="groupnum" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7c5d-167"><xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29>屬性是索引 （在 C# 中) 或預設屬性 （在 Visual Basic) 的<xref:System.Text.RegularExpressions.GroupCollection>類別。</span><span class="sxs-lookup"><span data-stu-id="b7c5d-167">The <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29> property is the index (in C#) or the default property (in Visual Basic) of the <xref:System.Text.RegularExpressions.GroupCollection> class.</span></span> <span data-ttu-id="b7c5d-168">它可讓您列舉集合的成員使用`foreach`C# 中的陳述式或`For Each`在 Visual Basic 中的陳述式。</span><span class="sxs-lookup"><span data-stu-id="b7c5d-168">It allows you to enumerate the members of the collection by using a `foreach` statement in C# or a `For Each` statement in Visual Basic.</span></span>  
  
 <span data-ttu-id="b7c5d-169">您也可以使用此屬性依其索引編號擷取個別的擷取的群組。</span><span class="sxs-lookup"><span data-stu-id="b7c5d-169">You can also use this property to retrieve individual captured groups by their index number.</span></span> <span data-ttu-id="b7c5d-170">您可以擷取陣列，其中包含所有的擷取群組，規則運算式中的數字藉由呼叫執行個體<xref:System.Text.RegularExpressions.Regex.GetGroupNumbers%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="b7c5d-170">You can retrieve an array that contains the numbers of all capturing groups in a regular expression by calling the instance <xref:System.Text.RegularExpressions.Regex.GetGroupNumbers%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="b7c5d-171">您也可以對應至其號碼具名擷取群組，藉由呼叫執行個體<xref:System.Text.RegularExpressions.Regex.GroupNumberFromName%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="b7c5d-171">You can also map named capturing groups to their numbers by calling the instance <xref:System.Text.RegularExpressions.Regex.GroupNumberFromName%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="b7c5d-172">您可以擷取的值來判斷集合中的項目數<xref:System.Text.RegularExpressions.GroupCollection.Count%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="b7c5d-172">You can determine the number of items in the collection by retrieving the value of the <xref:System.Text.RegularExpressions.GroupCollection.Count%2A> property.</span></span> <span data-ttu-id="b7c5d-173">有效值`groupnum`參數範圍從 0 到集合中的項目數減一。</span><span class="sxs-lookup"><span data-stu-id="b7c5d-173">Valid values for the `groupnum` parameter range from 0 to one less than the number of items in the collection.</span></span>  
  
 <span data-ttu-id="b7c5d-174"><xref:System.Text.RegularExpressions.GroupCollection>所傳回物件<xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=nameWithType>屬性永遠有至少一個成員。</span><span class="sxs-lookup"><span data-stu-id="b7c5d-174">The <xref:System.Text.RegularExpressions.GroupCollection> object returned by the <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=nameWithType> property always has at least one member.</span></span> <span data-ttu-id="b7c5d-175">如果規則運算式引擎在特定的輸入字串，單一中找不到任何相符項目<xref:System.Text.RegularExpressions.Group>物件在集合中的具有其<xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType>屬性設定為`false`及其`Group.Value`屬性設定為<xref:System.String.Empty?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b7c5d-175">If the regular expression engine cannot find any matches in a particular input string, the single <xref:System.Text.RegularExpressions.Group> object in the collection has its <xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType> property set to `false` and its `Group.Value` property set to <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="b7c5d-176">如果`groupnum`不是集合的成員的索引或`groupnum`已經有不符合在輸入字串中，此方法會傳回之擷取群組的索引<xref:System.Text.RegularExpressions.Group>物件，其<xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType>屬性是`false`，且`Group.Value`屬性是<xref:System.String.Empty?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b7c5d-176">If `groupnum` is not the index of a member of the collection, or if `groupnum` is the index of a capturing group that has not been matched in the input string, the method returns a <xref:System.Text.RegularExpressions.Group> object whose <xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType> property is `false` and whose `Group.Value` property is <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b7c5d-177">下列範例會定義規則運算式包含兩個編號的群組。</span><span class="sxs-lookup"><span data-stu-id="b7c5d-177">The following example defines a regular expression that consists of two numbered groups.</span></span> <span data-ttu-id="b7c5d-178">第一個群組擷取一或多個連續的數字。</span><span class="sxs-lookup"><span data-stu-id="b7c5d-178">The first group captures one or more consecutive digits.</span></span> <span data-ttu-id="b7c5d-179">第二個群組會比對單一字元。</span><span class="sxs-lookup"><span data-stu-id="b7c5d-179">The second group matches a single character.</span></span> <span data-ttu-id="b7c5d-180">規則運算式引擎會尋找第一個群組出現零或一次，因為它不一定會找到相符項目即使規則運算式比對成功。</span><span class="sxs-lookup"><span data-stu-id="b7c5d-180">Because the regular expression engine looks for zero or one occurrence of the first group, it does not always find a match even if the regular expression match is successful.</span></span> <span data-ttu-id="b7c5d-181">然後此範例說明的結果時<xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29>屬性用來擷取不相符的群組、 一個相符的群組和規則運算式中未定義的群組。</span><span class="sxs-lookup"><span data-stu-id="b7c5d-181">The example then illustrates the result when the <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29> property is used to retrieve an unmatched group, a matched group, and a group that is not defined in the regular expression.</span></span> <span data-ttu-id="b7c5d-182">此範例會定義規則運算式模式`(\d+)*(\w)\2`，可解譯如下表所示。</span><span class="sxs-lookup"><span data-stu-id="b7c5d-182">The example defines a regular expression pattern `(\d+)*(\w)\2`, which is interpreted as shown in the following table.</span></span>  
  
|<span data-ttu-id="b7c5d-183">模式</span><span class="sxs-lookup"><span data-stu-id="b7c5d-183">Pattern</span></span>|<span data-ttu-id="b7c5d-184">描述</span><span class="sxs-lookup"><span data-stu-id="b7c5d-184">Description</span></span>|  
|-------------|-----------------|  
|`(\d+)*`|<span data-ttu-id="b7c5d-185">比對一個或多個十進位數字。</span><span class="sxs-lookup"><span data-stu-id="b7c5d-185">Match one or more occurrence of a decimal digit.</span></span> <span data-ttu-id="b7c5d-186">這是第一個擷取群組。</span><span class="sxs-lookup"><span data-stu-id="b7c5d-186">This is the first capturing group.</span></span> <span data-ttu-id="b7c5d-187">此模式比對零或一次。</span><span class="sxs-lookup"><span data-stu-id="b7c5d-187">Match this pattern either zero or one time.</span></span>|  
|`(\w)`|<span data-ttu-id="b7c5d-188">這是第二個擷取群組。</span><span class="sxs-lookup"><span data-stu-id="b7c5d-188">This is the second capturing group.</span></span>|  
|`\k`|<span data-ttu-id="b7c5d-189">比對第二個擷取群組所擷取的字串。</span><span class="sxs-lookup"><span data-stu-id="b7c5d-189">Match the string captured by the second capturing group.</span></span>|  
  
 [!code-csharp[System.Text.RegularExpressions.GroupCollection.Item#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.groupcollection.item/cs/item3.cs#2)]
 [!code-vb[System.Text.RegularExpressions.GroupCollection.Item#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.groupcollection.item/vb/item3.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.Group this[string groupname] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.RegularExpressions.Group Item(string)" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GroupCollection.Item(System.String)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(groupname As String) As Group" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::RegularExpressions::Group ^ default[System::String ^] { System::Text::RegularExpressions::Group ^ get(System::String ^ groupname); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Group</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="groupname" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="groupname">
          <span data-ttu-id="b7c5d-190">擷取群組的名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7c5d-190">The name of a capturing group.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b7c5d-191">以字串索引啟用對集合成員的存取。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7c5d-191">Enables access to a member of the collection by string index.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b7c5d-192">
            <paramref name="groupname" /> 指定的集合成員。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7c5d-192">The member of the collection specified by <paramref name="groupname" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7c5d-193">`groupName` 可以是所定義之擷取群組的名稱`(?<`*名稱*`>)`規則運算式或群組所定義之擷取群組的數字的字串表示中的項目建構。</span><span class="sxs-lookup"><span data-stu-id="b7c5d-193">`groupName` can be either the name of a capturing group that is defined by the `(?<`*name*`>)` element in a regular expression, or the string representation of the number of a capturing group that is defined by a grouping construct.</span></span> <span data-ttu-id="b7c5d-194">如需規則運算式中的群組的詳細資訊，請參閱[群組建構](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md)。</span><span class="sxs-lookup"><span data-stu-id="b7c5d-194">For more information about groups in regular expressions, see [Grouping Constructs](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md).</span></span>  
  
 <span data-ttu-id="b7c5d-195">您可以擷取所有擷取的群組中的名稱<xref:System.Text.RegularExpressions.Regex>藉由呼叫物件<xref:System.Text.RegularExpressions.Regex.GetGroupNames%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="b7c5d-195">You can retrieve the names of all the captured groups in a <xref:System.Text.RegularExpressions.Regex> object by calling the <xref:System.Text.RegularExpressions.Regex.GetGroupNames%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="b7c5d-196">您也可以將對應的數字的擷取規則運算式，其名稱中的群組，藉由呼叫<xref:System.Text.RegularExpressions.Regex.GroupNameFromNumber%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="b7c5d-196">You can also map the numbers of capturing groups in a regular expression to their names by calling the <xref:System.Text.RegularExpressions.Regex.GroupNameFromNumber%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="b7c5d-197">從陣列的個別名稱然後傳遞至<xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29>屬性，以擷取所擷取的字串。</span><span class="sxs-lookup"><span data-stu-id="b7c5d-197">Individual names from the array can then be passed to the <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29> property to retrieve the captured string.</span></span>  
  
 <span data-ttu-id="b7c5d-198">如果`groupname`不在集合中，擷取群組的名稱或`groupname`已經有不符合在輸入字串中，此方法會傳回之擷取群組的名稱<xref:System.Text.RegularExpressions.Group>物件，其<xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType>屬性是`false`且`Group.Value`屬性是<xref:System.String.Empty?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b7c5d-198">If `groupname` is not the name of a capturing group in the collection, or if `groupname` is the name of a capturing group that has not been matched in the input string, the method returns a <xref:System.Text.RegularExpressions.Group> object whose <xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType> property is `false` and whose `Group.Value` property is <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b7c5d-199">下列範例會定義包含兩個具名群組的規則運算式。</span><span class="sxs-lookup"><span data-stu-id="b7c5d-199">The following example defines a regular expression that consists of two named groups.</span></span> <span data-ttu-id="b7c5d-200">第一個群組， `numbers`，擷取一個或多個連續的數字。</span><span class="sxs-lookup"><span data-stu-id="b7c5d-200">The first group, `numbers`, captures one or more consecutive digits.</span></span> <span data-ttu-id="b7c5d-201">第二個群組， `letter`，比對單一字元。</span><span class="sxs-lookup"><span data-stu-id="b7c5d-201">The second group, `letter`, matches a single character.</span></span> <span data-ttu-id="b7c5d-202">因為規則運算式引擎會尋找所定義的模式出現零或一次`numbers`群組`numbers`群組不一定存在即使才成功比對。</span><span class="sxs-lookup"><span data-stu-id="b7c5d-202">Because the regular expression engine looks for zero or one occurrence of the pattern defined by the `numbers` group, the `numbers` group is not always present even if a match is successful.</span></span> <span data-ttu-id="b7c5d-203">然後此範例說明的結果時<xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29>屬性用來擷取不相符的群組、 一個相符的群組和規則運算式中未定義的群組。</span><span class="sxs-lookup"><span data-stu-id="b7c5d-203">The example then illustrates the result when the <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29> property is used to retrieve an unmatched group, a matched group, and a group that is not defined in the regular expression.</span></span> <span data-ttu-id="b7c5d-204">此範例會定義規則運算式模式`(?<numbers>\d+)*(?<letter>\w)\k<letter>`，可解譯如下表所示。</span><span class="sxs-lookup"><span data-stu-id="b7c5d-204">The example defines a regular expression pattern `(?<numbers>\d+)*(?<letter>\w)\k<letter>`, which is interpreted as shown in the following table.</span></span>  
  
|<span data-ttu-id="b7c5d-205">模式</span><span class="sxs-lookup"><span data-stu-id="b7c5d-205">Pattern</span></span>|<span data-ttu-id="b7c5d-206">描述</span><span class="sxs-lookup"><span data-stu-id="b7c5d-206">Description</span></span>|  
|-------------|-----------------|  
|`(?<numbers>\d+)*`|<span data-ttu-id="b7c5d-207">比對一個或多個十進位數字。</span><span class="sxs-lookup"><span data-stu-id="b7c5d-207">Match one or more occurrence of a decimal digit.</span></span> <span data-ttu-id="b7c5d-208">此名稱`numbers`擷取群組。</span><span class="sxs-lookup"><span data-stu-id="b7c5d-208">Name this the `numbers` capturing group.</span></span> <span data-ttu-id="b7c5d-209">此模式比對零或一次。</span><span class="sxs-lookup"><span data-stu-id="b7c5d-209">Match this pattern either zero or one time.</span></span>|  
|`(?<letter>\w)`|<span data-ttu-id="b7c5d-210">比對單一文字字元。</span><span class="sxs-lookup"><span data-stu-id="b7c5d-210">Match a single word character.</span></span> <span data-ttu-id="b7c5d-211">此名稱`letter`擷取群組。</span><span class="sxs-lookup"><span data-stu-id="b7c5d-211">Name this the `letter` capturing group.</span></span>|  
|`\k<letter>`|<span data-ttu-id="b7c5d-212">比對所擷取的字串`letter`擷取群組。</span><span class="sxs-lookup"><span data-stu-id="b7c5d-212">Match the string captured by the `letter` capturing group.</span></span>|  
  
 [!code-csharp[System.Text.RegularExpressions.GroupCollection.Item#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.groupcollection.item/cs/item2.cs#1)]
 [!code-vb[System.Text.RegularExpressions.GroupCollection.Item#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.groupcollection.item/vb/item2.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SyncRoot">
      <MemberSignature Language="C#" Value="public object SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GroupCollection.SyncRoot" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SyncRoot As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ SyncRoot { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b7c5d-213">取得可用以同步存取 <see cref="T:System.Text.RegularExpressions.GroupCollection" /> 的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7c5d-213">Gets an object that can be used to synchronize access to the <see cref="T:System.Text.RegularExpressions.GroupCollection" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b7c5d-214">要同步化的 <see cref="T:System.Text.RegularExpressions.Match" /> 物件複本。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7c5d-214">A copy of the <see cref="T:System.Text.RegularExpressions.Match" /> object to synchronize.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!WARNING]
>  <span data-ttu-id="b7c5d-215">這個成員是不存在於[!INCLUDE[net_portable](~/includes/net-portable-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="b7c5d-215">This member is not present in the [!INCLUDE[net_portable](~/includes/net-portable-md.md)].</span></span> <span data-ttu-id="b7c5d-216">如果您正在開發的應用程式目標[!INCLUDE[net_portable](~/includes/net-portable-md.md)]，使用<xref:System.Text.RegularExpressions.GroupCollection.System%23Collections%23ICollection%23SyncRoot%2A?displayProperty=nameWithType>屬性改為。</span><span class="sxs-lookup"><span data-stu-id="b7c5d-216">If you are developing applications that target the [!INCLUDE[net_portable](~/includes/net-portable-md.md)], use the <xref:System.Text.RegularExpressions.GroupCollection.System%23Collections%23ICollection%23SyncRoot%2A?displayProperty=nameWithType> property instead.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Text.RegularExpressions.GroupCollection.IsSynchronized" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Add">
      <MemberSignature Language="C#" Value="void ICollection&lt;Group&gt;.Add (System.Text.RegularExpressions.Group item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Add(class System.Text.RegularExpressions.Group item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection&lt;System#Text#RegularExpressions#Group&gt;#Add(System.Text.RegularExpressions.Group)" />
      <MemberSignature Language="VB.NET" Value="Sub Add (item As Group) Implements ICollection(Of Group).Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Add(System::Text::RegularExpressions::Group ^ item) = System::Collections::Generic::ICollection&lt;System::Text::RegularExpressions::Group ^&gt;::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Add(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Text.RegularExpressions.Group" />
      </Parameters>
      <Docs>
        <param name="item">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Clear">
      <MemberSignature Language="C#" Value="void ICollection&lt;Group&gt;.Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection&lt;System#Text#RegularExpressions#Group&gt;#Clear" />
      <MemberSignature Language="VB.NET" Value="Sub Clear () Implements ICollection(Of Group).Clear" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Clear() = System::Collections::Generic::ICollection&lt;System::Text::RegularExpressions::Group ^&gt;::Clear;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Contains">
      <MemberSignature Language="C#" Value="bool ICollection&lt;Group&gt;.Contains (System.Text.RegularExpressions.Group item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Contains(class System.Text.RegularExpressions.Group item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection&lt;System#Text#RegularExpressions#Group&gt;#Contains(System.Text.RegularExpressions.Group)" />
      <MemberSignature Language="VB.NET" Value="Function Contains (item As Group) As Boolean Implements ICollection(Of Group).Contains" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Contains(System::Text::RegularExpressions::Group ^ item) = System::Collections::Generic::ICollection&lt;System::Text::RegularExpressions::Group ^&gt;::Contains;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Contains(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Text.RegularExpressions.Group" />
      </Parameters>
      <Docs>
        <param name="item">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Remove">
      <MemberSignature Language="C#" Value="bool ICollection&lt;Group&gt;.Remove (System.Text.RegularExpressions.Group item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Remove(class System.Text.RegularExpressions.Group item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection&lt;System#Text#RegularExpressions#Group&gt;#Remove(System.Text.RegularExpressions.Group)" />
      <MemberSignature Language="VB.NET" Value="Function Remove (item As Group) As Boolean Implements ICollection(Of Group).Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Remove(System::Text::RegularExpressions::Group ^ item) = System::Collections::Generic::ICollection&lt;System::Text::RegularExpressions::Group ^&gt;::Remove;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Remove(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Text.RegularExpressions.Group" />
      </Parameters>
      <Docs>
        <param name="item">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;System.Text.RegularExpressions.Group&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;System.Text.RegularExpressions.Group&gt; IEnumerable&lt;Group&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;class System.Text.RegularExpressions.Group&gt; System.Collections.Generic.IEnumerable&lt;System.Text.RegularExpressions.Group&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IEnumerable&lt;System#Text#RegularExpressions#Group&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of Group) Implements IEnumerable(Of Group).GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IEnumerator&lt;System::Text::RegularExpressions::Group ^&gt; ^ System.Collections.Generic.IEnumerable&lt;System.Text.RegularExpressions.Group&gt;.GetEnumerator() = System::Collections::Generic::IEnumerable&lt;System::Text::RegularExpressions::Group ^&gt;::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.Text.RegularExpressions.Group&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.IndexOf">
      <MemberSignature Language="C#" Value="int IList&lt;Group&gt;.IndexOf (System.Text.RegularExpressions.Group item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.IndexOf(class System.Text.RegularExpressions.Group item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList&lt;System#Text#RegularExpressions#Group&gt;#IndexOf(System.Text.RegularExpressions.Group)" />
      <MemberSignature Language="VB.NET" Value="Function IndexOf (item As Group) As Integer Implements IList(Of Group).IndexOf" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.IndexOf(System::Text::RegularExpressions::Group ^ item) = System::Collections::Generic::IList&lt;System::Text::RegularExpressions::Group ^&gt;::IndexOf;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IList`1.IndexOf(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Text.RegularExpressions.Group" />
      </Parameters>
      <Docs>
        <param name="item">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.Insert">
      <MemberSignature Language="C#" Value="void IList&lt;Group&gt;.Insert (int index, System.Text.RegularExpressions.Group item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.Insert(int32 index, class System.Text.RegularExpressions.Group item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList&lt;System#Text#RegularExpressions#Group&gt;#Insert(System.Int32,System.Text.RegularExpressions.Group)" />
      <MemberSignature Language="VB.NET" Value="Sub Insert (index As Integer, item As Group) Implements IList(Of Group).Insert" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.Insert(int index, System::Text::RegularExpressions::Group ^ item) = System::Collections::Generic::IList&lt;System::Text::RegularExpressions::Group ^&gt;::Insert;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="item" Type="System.Text.RegularExpressions.Group" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <param name="item">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.Item">
      <MemberSignature Language="C#" Value="System.Text.RegularExpressions.Group System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.Item[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.RegularExpressions.Group System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList&lt;System#Text#RegularExpressions#Group&gt;#Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" Property Item(index As Integer) As Group Implements IList(Of Group).Item" />
      <MemberSignature Language="C++ CLI" Value="property System::Text::RegularExpressions::Group ^ System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.Item[int] { System::Text::RegularExpressions::Group ^ get(int index); void set(int index, System::Text::RegularExpressions::Group ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IList`1.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Group</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.RemoveAt">
      <MemberSignature Language="C#" Value="void IList&lt;Group&gt;.RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList&lt;System#Text#RegularExpressions#Group&gt;#RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Sub RemoveAt (index As Integer) Implements IList(Of Group).RemoveAt" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.RemoveAt(int index) = System::Collections::Generic::IList&lt;System::Text::RegularExpressions::Group ^&gt;::RemoveAt;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.ICollection.CopyTo(Array ^ array, int arrayIndex) = System::Collections::ICollection::CopyTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">To be added.</param>
        <param name="arrayIndex">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GroupCollection.System#Collections#ICollection#IsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSynchronized As Boolean Implements ICollection.IsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Collections.ICollection.IsSynchronized { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GroupCollection.System#Collections#ICollection#SyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property SyncRoot As Object Implements ICollection.SyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.ICollection.SyncRoot { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Add">
      <MemberSignature Language="C#" Value="int IList.Add (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.Add(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Add(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Add (value As Object) As Integer Implements IList.Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.Add(System::Object ^ value) = System::Collections::IList::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Add(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Clear">
      <MemberSignature Language="C#" Value="void IList.Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Clear" />
      <MemberSignature Language="VB.NET" Value="Sub Clear () Implements IList.Clear" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Clear() = System::Collections::IList::Clear;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Contains">
      <MemberSignature Language="C#" Value="bool IList.Contains (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IList.Contains(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Contains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Contains (value As Object) As Boolean Implements IList.Contains" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IList.Contains(System::Object ^ value) = System::Collections::IList::Contains;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Contains(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IndexOf">
      <MemberSignature Language="C#" Value="int IList.IndexOf (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.IndexOf(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#IndexOf(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function IndexOf (value As Object) As Integer Implements IList.IndexOf" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.IndexOf(System::Object ^ value) = System::Collections::IList::IndexOf;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.IndexOf(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Insert">
      <MemberSignature Language="C#" Value="void IList.Insert (int index, object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Insert(int32 index, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Insert(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Insert (index As Integer, value As Object) Implements IList.Insert" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Insert(int index, System::Object ^ value) = System::Collections::IList::Insert;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Insert(System.Int32,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsFixedSize">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsFixedSize" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#IsFixedSize" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsFixedSize As Boolean Implements IList.IsFixedSize" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Collections.IList.IsFixedSize { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsFixedSize</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Item">
      <MemberSignature Language="C#" Value="object System.Collections.IList.Item[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IList.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" Property Item(index As Integer) As Object Implements IList.Item" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.IList.Item[int] { System::Object ^ get(int index); void set(int index, System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Remove">
      <MemberSignature Language="C#" Value="void IList.Remove (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Remove(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Remove (value As Object) Implements IList.Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Remove(System::Object ^ value) = System::Collections::IList::Remove;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Remove(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.RemoveAt">
      <MemberSignature Language="C#" Value="void IList.RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Sub RemoveAt (index As Integer) Implements IList.RemoveAt" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.RemoveAt(int index) = System::Collections::IList::RemoveAt;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.RemoveAt(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>