<Type Name="Match" FullName="System.Text.RegularExpressions.Match">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c886bcea5d17b2ba683b40687e65b1b31de9ad20" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36408133" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Match : System.Text.RegularExpressions.Group" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Match extends System.Text.RegularExpressions.Group" />
  <TypeSignature Language="DocId" Value="T:System.Text.RegularExpressions.Match" />
  <TypeSignature Language="VB.NET" Value="Public Class Match&#xA;Inherits Group" />
  <TypeSignature Language="C++ CLI" Value="public ref class Match : System::Text::RegularExpressions::Group" />
  <TypeSignature Language="F#" Value="type Match = class&#xA;    inherit Group" />
  <AssemblyInfo>
    <AssemblyName>System.Text.RegularExpressions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Text.RegularExpressions.Group</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>表示單一規則運算式 (Regular Expression) 比對的結果。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Match>物件是不可變的而且沒有公用建構函式。 執行個體<xref:System.Text.RegularExpressions.Match>類別由<xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=nameWithType>方法，並代表第一個模式比對字串中。 後續的相符項目都由<xref:System.Text.RegularExpressions.Match>所傳回的物件<xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType>方法。 此外，<xref:System.Text.RegularExpressions.MatchCollection>包含零個、 一個或多個物件，<xref:System.Text.RegularExpressions.Match>物件由<xref:System.Text.RegularExpressions.Regex.Matches%2A?displayProperty=nameWithType>方法。  
  
 如果<xref:System.Text.RegularExpressions.Regex.Matches%2A?displayProperty=nameWithType>方法無法比對輸入字串中的規則運算式模式，它會傳回空<xref:System.Text.RegularExpressions.MatchCollection>物件。 然後您可以使用`foreach`建構在 C# 或`For Each`建構來逐一查看集合的 Visual Basic 中。  
  
 如果<xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=nameWithType>方法時，無法比對規則運算式模式，它會傳回<xref:System.Text.RegularExpressions.Match>物件是否等於<xref:System.Text.RegularExpressions.Match.Empty%2A?displayProperty=nameWithType>。 您可以使用<xref:System.Text.RegularExpressions.Group.Success%2A>屬性來判斷比對是否成功。 下列範例提供一個實例。  
  
 [!code-csharp[System.Text.RegularExpressions.Match.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/cs/Match1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Match.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/vb/Match1.vb#1)]  
  
 如果模式比對成功，<xref:System.Text.RegularExpressions.Capture.Value%2A>屬性包含相符的子字串，<xref:System.Text.RegularExpressions.Capture.Index%2A>屬性會指出以零為起始，輸入字串中相符的子字串的起始位置和<xref:System.Text.RegularExpressions.Capture.Length%2A>屬性指示輸入字串中相符的子字串的長度。  
  
 由於單一比對可能牽涉到多個擷取群組，<xref:System.Text.RegularExpressions.Match>具有<xref:System.Text.RegularExpressions.Match.Groups%2A>屬性，傳回<xref:System.Text.RegularExpressions.GroupCollection>。 <xref:System.Text.RegularExpressions.Match>本身的執行個體相當於集合中的第一個物件在`Match.Groups[0]`(`Match.Groups(0)`在 Visual Basic 中)，它代表整個比對。 您可以下列方式存取的擷取的群組相符：  
  
-   您可以逐一查看的成員<xref:System.Text.RegularExpressions.GroupCollection>物件使用`foreach`(C#) 或`For Each`(Visual Basic) 的建構。  
  
-   您可以使用<xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29?displayProperty=nameWithType>屬性，以擷取群組所擷取的群組數目。 請注意，您可以判斷哪些編號的群組出現在規則運算式中呼叫執行個體<xref:System.Text.RegularExpressions.Regex.GetGroupNumbers%2A?displayProperty=nameWithType>方法。  
  
-   您可以使用<xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29?displayProperty=nameWithType>屬性，以擷取群組的擷取群組的名稱。 請注意，您可以判斷哪些具名的群組出現在規則運算式中呼叫執行個體<xref:System.Text.RegularExpressions.Regex.GetGroupNames?displayProperty=nameWithType>方法。  
  
   
  
## Examples  
 下列範例會使用規則運算式`Console\.Write(Line)?`。 規則運算式解譯如下：  
  
|||  
|-|-|  
|主控台\\。寫入|比對字串 "Console.Write"。 請注意，"。"，以便將它解譯為常值句號，而不是萬用字元，比對任何字元的逸出字元。|  
|（換行）？|比對出現零或一次的字串 "Line"。|  
  
 **範例 1**  
  
 下列範例會呼叫<xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29?displayProperty=nameWithType>方法來擷取所有的模式比對輸入字串中。 然後逐一查看<xref:System.Text.RegularExpressions.Match>中傳回的物件<xref:System.Text.RegularExpressions.MatchCollection>物件，以顯示每個相符項目的資訊。  
  
 [!code-csharp[System.Text.RegularExpressions.Match.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/cs/Match2.cs#2)]
 [!code-vb[System.Text.RegularExpressions.Match.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/vb/Match2.vb#2)]  
  
 **範例 2**  
  
 下列範例會呼叫<xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%29>和<xref:System.Text.RegularExpressions.Match.NextMatch%2A>方法一次擷取一個符合項目。  
  
 [!code-csharp[System.Text.RegularExpressions.Match.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/cs/Match3.cs#3)]
 [!code-vb[System.Text.RegularExpressions.Match.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/vb/Match3.vb#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Text.RegularExpressions.MatchCollection" />
    <altmember cref="T:System.Text.RegularExpressions.Regex" />
  </Docs>
  <Members>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static System.Text.RegularExpressions.Match Empty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Text.RegularExpressions.Match Empty" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Match.Empty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Empty As Match" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Text::RegularExpressions::Match ^ Empty { System::Text::RegularExpressions::Match ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Empty : System.Text.RegularExpressions.Match" Usage="System.Text.RegularExpressions.Match.Empty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得空白群組。 所有失敗的比對會傳回這個空白比對。</summary>
        <value>空的符合項目。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個屬性不應該用於判斷相符項目是否成功。 請改用`Match.Success`屬性 (繼承自<xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType>)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Groups">
      <MemberSignature Language="C#" Value="public virtual System.Text.RegularExpressions.GroupCollection Groups { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.RegularExpressions.GroupCollection Groups" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Match.Groups" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Groups As GroupCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Text::RegularExpressions::GroupCollection ^ Groups { System::Text::RegularExpressions::GroupCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Groups : System.Text.RegularExpressions.GroupCollection" Usage="System.Text.RegularExpressions.Match.Groups" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.GroupCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得符合規則運算式的群組集合。</summary>
        <value>符合模式的字元群組。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 規則運算式模式中可以包含子運算式，會由以括弧括住的規則運算式模式的一部分。 每個這類的子運算式會形成一個群組。 <xref:System.Text.RegularExpressions.Match.Groups%2A>屬性可存取這些子運算式相符項目的相關資訊。 例如，規則運算式模式`(\d{3})-(\d{3}-\d{4})`，它會比對北美地區的電話號碼，有兩個子運算式。 第一個是由區域程式碼，撰寫的電話號碼的前三個位數所組成。 此群組規則運算式的第一個部分擷取`(\d{3})`。第二個組成個別的電話號碼，其撰寫的電話號碼的末七碼。 此群組規則運算式的第二個部分所擷取`(\d{3}-\d{4})`。 這兩個群組便可以擷取從<xref:System.Text.RegularExpressions.GroupCollection>所傳回的物件<xref:System.Text.RegularExpressions.Match.Groups%2A>屬性，如下列範例所示。  
  
 [!code-csharp[System.Text.RegularExpressions.Match.Groups#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.match.groups/cs/groups1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Match.Groups#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.match.groups/vb/groups1.vb#1)]  
  
 <xref:System.Text.RegularExpressions.GroupCollection>所傳回物件<xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=nameWithType>屬性是永遠有至少一個成員的以零為起始的集合物件。 如果規則運算式引擎在特定的輸入字串中，找不到任何相符項目<xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType>屬性的單一<xref:System.Text.RegularExpressions.Group>集合 （位於索引 0 的物件） 中的物件設定為`false`和<xref:System.Text.RegularExpressions.Group>物件的<xref:System.Text.RegularExpressions.Capture.Value%2A>屬性設定為<xref:System.String.Empty?displayProperty=nameWithType>。 如果規則運算式引擎可以找到相符項目，第一個項目<xref:System.Text.RegularExpressions.GroupCollection>所傳回的物件 （索引 0 處的項目）<xref:System.Text.RegularExpressions.Match.Groups%2A>屬性包含符合整個規則運算式模式的字串。 每個後續的項目從一個索引向上，代表擷取的群組，如果規則運算式包含擷取群組。 如需詳細資訊，請參閱 「 群組建構和規則運算式物件 」 一節[群組建構](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md)發行項。  
  
   
  
## Examples  
 下列範例會嘗試比對規則運算式模式，對範例字串。 此範例會使用<xref:System.Text.RegularExpressions.Match.Groups%2A>屬性，將顯示於主控台的比對所擷取的資訊。  
  
 [!code-cpp[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/cpp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cpp/snippet8.cpp#8)]
 [!code-csharp[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/csharp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cs/snippet8.cs#8)]
 [!code-vb[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/regex match, nextmatch, groups, captures/vb/snippet8.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NextMatch">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.Match NextMatch ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.RegularExpressions.Match NextMatch() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Match.NextMatch" />
      <MemberSignature Language="VB.NET" Value="Public Function NextMatch () As Match" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::RegularExpressions::Match ^ NextMatch();" />
      <MemberSignature Language="F#" Value="member this.NextMatch : unit -&gt; System.Text.RegularExpressions.Match" Usage="match.NextMatch " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>自最後一個比對結束的位置 (在最後符合字元之後的字元) 開始，傳回具有下一個比對結果的新 <see cref="T:System.Text.RegularExpressions.Match" /> 物件。</summary>
        <returns>下一個規則運算式相符項目。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法是類似於呼叫<xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%29?displayProperty=nameWithType>一次，然後傳遞 (`Index+Length`) 做為新的開始位置。  
  
> [!NOTE]
>  這個方法不會修改目前的執行個體。 相反地，它會傳回新<xref:System.Text.RegularExpressions.Match>物件，其中包含下一個相符項目的資訊。  
  
 嘗試擷取下一個相符項目可能會擲回<xref:System.Text.RegularExpressions.RegexMatchTimeoutException>如果比對作業的逾時值作用中，嘗試尋找下一個相符項目超過的逾時間隔。  
  
   
  
## Examples  
 下列範例會使用<xref:System.Text.RegularExpressions.Match.NextMatch%2A>方法來擷取規則運算式比對第一個相符項目以外。  
  
 [!code-cpp[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/cpp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cpp/snippet8.cpp#8)]
 [!code-csharp[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/csharp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cs/snippet8.cs#8)]
 [!code-vb[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/regex match, nextmatch, groups, captures/vb/snippet8.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">發生逾時。</exception>
        <block subset="none" type="usage">
          <para>在比對嘗試藉由呼叫的重複當<see cref="M:System.Text.RegularExpressions.Match.NextMatch" />方法，規則運算式引擎提供空白比對特殊處理。通常，<see cref="M:System.Text.RegularExpressions.Match.NextMatch" />開始搜尋下一個相符項目剛好一個比對離開的地方。空白的相符項目，不過之後,<see cref="M:System.Text.RegularExpressions.Match.NextMatch" />方法才會嘗試下一個相符項前進一個字元。此行為可確保規則運算式引擎會透過字串進度。否則，因為空的相符項目不會導致任何向前移動下, 一個相符項目會啟動在先前比對，完全相同的位置，它將會重複比對相同的空字串。下列範例提供一個實例。規則運算式模式<c>*</c>搜尋零或多個出現字母"a"，"abaabb"的字串。範例輸出所示，搜尋會尋找六個相符項目。第一個比對嘗試尋找第一個"a"。在完全第一個符合的第一個 b; 之前就會結束，其中的第二個相符項目啟動它會尋找"a"的零個項目，並傳回空字串。第三個相符項目不是完全第二個比對結束的地方，因為第二個相符項目會傳回空字串。相反地，就會開始一個字元後第一個"b"。第三個相符項目尋找兩個"a"，並傳回"aa"。第四個比對嘗試開始，第三個相符項目之前已結束，第二個"b"，並傳回空字串。第五個比對嘗試一次前進一個字元，因此第三個"b"之前開始，並傳回空字串。第六個相符項目開始之後最後一個"b"，並再次傳回空字串。 [！ code-csharp[System.Text.RegularExpressions.Match.NextMatch#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.match.nextmatch/cs/nextmatch1.cs#1)][！ code-vb[System.Text.RegularExpressions.Match.NextMatch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.match.nextmatch/vb/nextmatch1.vb#1)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Result">
      <MemberSignature Language="C#" Value="public virtual string Result (string replacement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Result(string replacement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Match.Result(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Result (replacement As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ Result(System::String ^ replacement);" />
      <MemberSignature Language="F#" Value="abstract member Result : string -&gt; string&#xA;override this.Result : string -&gt; string" Usage="match.Result replacement" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="replacement" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="replacement">要使用的取代模式。</param>
        <summary>傳回所指定取代模式的展開 (Expansion)。</summary>
        <returns>
          <paramref name="replacement" /> 參數的展開版本。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 而<xref:System.Text.RegularExpressions.Regex.Replace%2A?displayProperty=nameWithType>方法會取代為指定的取代模式中，輸入字串中的所有相符項目<xref:System.Text.RegularExpressions.Match.Result%2A>方法會取代為指定的取代模式的單一相符項目。 因為它作用於個別的相符項目，所以也可能在相符字串上執行處理，才能呼叫<xref:System.Text.RegularExpressions.Match.Result%2A>方法。  
  
 `replacement`參數是標準的規則運算式取代模式。 它可以包含常值字元和規則運算式的替代項目。 如需詳細資訊，請參閱[替代](~/docs/standard/base-types/substitutions-in-regular-expressions.md)。  
  
   
  
## Examples  
 下列範例會取代連字號的開頭和結尾加上括弧括號運算式。  
  
 [!code-csharp[System.Text.RegularExpressions.Match.Result#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.match.result/cs/result1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Match.Result#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.match.result/vb/result1.vb#1)]  
  
 規則運算式模式 `--(.+?)--` 的解譯方式如下表所示。  
  
|模式|描述|  
|-------------|-----------------|  
|`--`|比對兩個連字號。|  
|`(.+?)`|比對任何字元一或多次，但越少次越好。 這是第一個擷取群組。|  
|`--`|比對兩個連字號。|  
  
 請注意，規則運算式模式`--(.+?)--`使用 lazy 數量詞`+?`。 如果窮盡數量詞`+`用相反地，規則運算式引擎會尋找單一比對輸入字串中。  
  
 取代字串`($1)`取代第一個擷取群組，放在括號比對。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="replacement" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.NotSupportedException">這種模式不允許展開。</exception>
        <altmember cref="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Synchronized">
      <MemberSignature Language="C#" Value="public static System.Text.RegularExpressions.Match Synchronized (System.Text.RegularExpressions.Match inner);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.RegularExpressions.Match Synchronized(class System.Text.RegularExpressions.Match inner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Match.Synchronized(System.Text.RegularExpressions.Match)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Synchronized (inner As Match) As Match" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Text::RegularExpressions::Match ^ Synchronized(System::Text::RegularExpressions::Match ^ inner);" />
      <MemberSignature Language="F#" Value="static member Synchronized : System.Text.RegularExpressions.Match -&gt; System.Text.RegularExpressions.Match" Usage="System.Text.RegularExpressions.Match.Synchronized inner" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inner" Type="System.Text.RegularExpressions.Match" />
      </Parameters>
      <Docs>
        <param name="inner">相當於所需項目的規則運算式相符項目。</param>
        <summary>傳回 <see cref="T:System.Text.RegularExpressions.Match" /> 執行個體，相當於可在多個執行緒之間提供一個可共用的執行個體。</summary>
        <returns>適合在多個執行緒之間共用的規則運算式相符項目。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="inner" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
  </Members>
</Type>