<Type Name="XamlTypeName" FullName="System.Xaml.Schema.XamlTypeName">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="2d420d4d7b160647a411ba1d5a80ff33d17c9e54" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30720172" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XamlTypeName" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XamlTypeName extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xaml.Schema.XamlTypeName" />
  <TypeSignature Language="VB.NET" Value="Public Class XamlTypeName" />
  <TypeSignature Language="C++ CLI" Value="public ref class XamlTypeName" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("{{{Namespace}}}{Name}{TypeArgStringForDebugger}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>提供以名稱和命名空間指定 XAML 型別的方法。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xaml.XamlType> 在 XAML 類型系統中，是型別資訊類別，而<xref:System.Xaml.Schema.XamlTypeName>是多個提供不同的方式指定該類型的資料結構。 <xref:System.Xaml.Schema.XamlTypeName> 也提供靜態 helper 方法來產生<xref:System.Xaml.Schema.XamlTypeName>解析 XAML 命名空間中的現有類型識別項。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 類別的新執行個體。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlTypeName ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeName.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlTypeName();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 類別的新執行個體。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlTypeName (System.Xaml.XamlType xamlType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xaml.XamlType xamlType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeName.#ctor(System.Xaml.XamlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlTypeName(System::Xaml::XamlType ^ xamlType);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="xamlType" Type="System.Xaml.XamlType" />
      </Parameters>
      <Docs>
        <param name="xamlType">現有的 <see cref="T:System.Xaml.XamlType" />。</param>
        <summary>根據現有的 <see cref="T:System.Xaml.Schema.XamlTypeName" />，初始化 <see cref="T:System.Xaml.XamlType" /> 類別的新執行個體。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="xamlType" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlTypeName (string xamlNamespace, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string xamlNamespace, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeName.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (xamlNamespace As String, name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlTypeName(System::String ^ xamlNamespace, System::String ^ name);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="xamlNamespace" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="xamlNamespace">包含名稱的 XAML 命名空間。</param>
        <param name="name">要建立 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 的型別名稱。</param>
        <summary>根據名稱和命名空間字串，初始化 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 類別的新執行個體。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlTypeName (string xamlNamespace, string name, System.Collections.Generic.IEnumerable&lt;System.Xaml.Schema.XamlTypeName&gt; typeArguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string xamlNamespace, string name, class System.Collections.Generic.IEnumerable`1&lt;class System.Xaml.Schema.XamlTypeName&gt; typeArguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeName.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.Xaml.Schema.XamlTypeName})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (xamlNamespace As String, name As String, typeArguments As IEnumerable(Of XamlTypeName))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlTypeName(System::String ^ xamlNamespace, System::String ^ name, System::Collections::Generic::IEnumerable&lt;System::Xaml::Schema::XamlTypeName ^&gt; ^ typeArguments);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="xamlNamespace" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="typeArguments" Type="System.Collections.Generic.IEnumerable&lt;System.Xaml.Schema.XamlTypeName&gt;" />
      </Parameters>
      <Docs>
        <param name="xamlNamespace">包含 <c>name</c> 的 XAML 命名空間。</param>
        <param name="name">要建立 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 的型別名稱。</param>
        <param name="typeArguments">型別引數的陣列，其中每個型別引數都必須是 <see cref="T:System.Xaml.Schema.XamlTypeName" />。</param>
        <summary>根據名稱和命名空間以及型別引數陣列，初始化 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這是您要指定泛型型別和型別引數，該類型時所要使用的簽章。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.Schema.XamlTypeName.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得用來建構這個 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 的名稱。</summary>
        <value>型別的名稱。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Xaml.XamlType>已用來建構這個<xref:System.Xaml.Schema.XamlTypeName>，值<xref:System.Xaml.Schema.XamlTypeName.Name%2A>是<xref:System.Xaml.XamlType.Name%2A?displayProperty=nameWithType>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.Schema.XamlTypeName.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Namespace { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得用來建構這個 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 的 XAML 命名空間識別項。</summary>
        <value>XAML 命名空間識別項。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Xaml.XamlType>已用來建構這個<xref:System.Xaml.Schema.XamlTypeName>，值<xref:System.Xaml.Schema.XamlTypeName.Namespace%2A>是`xamlType.GetXamlNamespaces()[0]`。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Xaml.Schema.XamlTypeName Parse (string typeName, System.Xaml.IXamlNamespaceResolver namespaceResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xaml.Schema.XamlTypeName Parse(string typeName, class System.Xaml.IXamlNamespaceResolver namespaceResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeName.Parse(System.String,System.Xaml.IXamlNamespaceResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (typeName As String, namespaceResolver As IXamlNamespaceResolver) As XamlTypeName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xaml::Schema::XamlTypeName ^ Parse(System::String ^ typeName, System::Xaml::IXamlNamespaceResolver ^ namespaceResolver);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlTypeName</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="namespaceResolver" Type="System.Xaml.IXamlNamespaceResolver" />
      </Parameters>
      <Docs>
        <param name="typeName">要建立 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 值的型別名稱。</param>
        <param name="namespaceResolver">實作 <see cref="T:System.Xaml.IXamlNamespaceResolver" /> 的物件或服務提供者。</param>
        <summary>根據型別名稱和可將標記前置詞解析為命名空間的物件，提供 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 值。</summary>
        <returns>建立的 <see cref="T:System.Xaml.Schema.XamlTypeName" />。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="typeName" /> 或 <paramref name="namespaceResolver" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.FormatException">無法剖析字串。</exception>
      </Docs>
    </Member>
    <Member MemberName="ParseList">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IList&lt;System.Xaml.Schema.XamlTypeName&gt; ParseList (string typeNameList, System.Xaml.IXamlNamespaceResolver namespaceResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IList`1&lt;class System.Xaml.Schema.XamlTypeName&gt; ParseList(string typeNameList, class System.Xaml.IXamlNamespaceResolver namespaceResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeName.ParseList(System.String,System.Xaml.IXamlNamespaceResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseList (typeNameList As String, namespaceResolver As IXamlNamespaceResolver) As IList(Of XamlTypeName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IList&lt;System::Xaml::Schema::XamlTypeName ^&gt; ^ ParseList(System::String ^ typeNameList, System::Xaml::IXamlNamespaceResolver ^ namespaceResolver);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Xaml.Schema.XamlTypeName&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeNameList" Type="System.String" />
        <Parameter Name="namespaceResolver" Type="System.Xaml.IXamlNamespaceResolver" />
      </Parameters>
      <Docs>
        <param name="typeNameList">包含多個型別的字串。</param>
        <param name="namespaceResolver">實作 <see cref="T:System.Xaml.IXamlNamespaceResolver" /> 的物件或服務提供者。</param>
        <summary>根據可指定多個型別名稱的字串，以及可將標記前置詞解析為命名空間的物件，提供 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 值。</summary>
        <returns>建立的 <see cref="T:System.Xaml.Schema.XamlTypeName" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 以下是巢狀的類型名稱或多個型別名稱剖析這個方法所啟用的 quasi BNF:  
  
```  
NestedTypeName = Name | Name '+' NestedTypeName  
TypeName = NestedTypeName | NestedTypeName ‘[]’  
XamlTypeName = Prefix ‘:’ TypeName TypeArgs  | TypeName TypeArgs  
TypeArgs = empty | ‘(‘ XamlTypeNameList ‘)’  
XamlTypeNameList = XamlTypeName XamlTypeNameList1  
XamlTypeNameList1 = empty | ‘,’ XamlTypeNameList  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="typeNameList" /> 或 <paramref name="namespaceResolver" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.FormatException">無法剖析字串。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將這個 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 的值轉換成它的對等字串表示。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeName.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>將這個 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 的值轉換成它的對等字串表示。</summary>
        <returns>這個 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 的對等字串表示。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此簽章就相當於呼叫<xref:System.Xaml.Schema.XamlTypeName.ToString%28System.Xaml.INamespacePrefixLookup%29>，並傳遞`null`如`prefixLookup`。 秒  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (System.Xaml.INamespacePrefixLookup prefixLookup);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(class System.Xaml.INamespacePrefixLookup prefixLookup) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeName.ToString(System.Xaml.INamespacePrefixLookup)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (prefixLookup As INamespacePrefixLookup) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(System::Xaml::INamespacePrefixLookup ^ prefixLookup);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefixLookup" Type="System.Xaml.INamespacePrefixLookup" />
      </Parameters>
      <Docs>
        <param name="prefixLookup">前置詞查閱的服務參考。</param>
        <summary>將這個 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 的值轉換為它的對等字串表示，此表示可用在標記語法中，讓物件項目使用某個型別。</summary>
        <returns>含前置詞的使用字串。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">
          這個 <see cref="P:System.Xaml.Schema.XamlTypeName.Namespace" /> 的 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 為 <see langword="null" />。  
  
 -或-  
  
 <see cref="P:System.Xaml.Schema.XamlTypeName.Name" /> 無效。  
  
 -或-  
  
 無法查詢前置詞。</exception>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (System.Collections.Generic.IList&lt;System.Xaml.Schema.XamlTypeName&gt; typeNameList, System.Xaml.INamespacePrefixLookup prefixLookup);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(class System.Collections.Generic.IList`1&lt;class System.Xaml.Schema.XamlTypeName&gt; typeNameList, class System.Xaml.INamespacePrefixLookup prefixLookup) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeName.ToString(System.Collections.Generic.IList{System.Xaml.Schema.XamlTypeName},System.Xaml.INamespacePrefixLookup)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (typeNameList As IList(Of XamlTypeName), prefixLookup As INamespacePrefixLookup) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(System::Collections::Generic::IList&lt;System::Xaml::Schema::XamlTypeName ^&gt; ^ typeNameList, System::Xaml::INamespacePrefixLookup ^ prefixLookup);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeNameList" Type="System.Collections.Generic.IList&lt;System.Xaml.Schema.XamlTypeName&gt;" />
        <Parameter Name="prefixLookup" Type="System.Xaml.INamespacePrefixLookup" />
      </Parameters>
      <Docs>
        <param name="typeNameList">型別清單。</param>
        <param name="prefixLookup">前置詞查閱的服務參考。</param>
        <summary>將這個 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 的值轉換為它的對等字串表示，此表示可用在標記語法中，讓物件項目使用多個型別。</summary>
        <returns>所有型別結果的串連字串。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="prefixLookup" /> 或 <paramref name="typeNameList" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string typeName, System.Xaml.IXamlNamespaceResolver namespaceResolver, out System.Xaml.Schema.XamlTypeName result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string typeName, class System.Xaml.IXamlNamespaceResolver namespaceResolver, [out] class System.Xaml.Schema.XamlTypeName&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeName.TryParse(System.String,System.Xaml.IXamlNamespaceResolver,System.Xaml.Schema.XamlTypeName@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (typeName As String, namespaceResolver As IXamlNamespaceResolver, ByRef result As XamlTypeName) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ typeName, System::Xaml::IXamlNamespaceResolver ^ namespaceResolver, [Runtime::InteropServices::Out] System::Xaml::Schema::XamlTypeName ^ % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="namespaceResolver" Type="System.Xaml.IXamlNamespaceResolver" />
        <Parameter Name="result" Type="System.Xaml.Schema.XamlTypeName&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="typeName">要建立 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 值的型別名稱。</param>
        <param name="namespaceResolver">實作 <see cref="T:System.Xaml.IXamlNamespaceResolver" /> 的物件或服務提供者。</param>
        <param name="result">如果傳回值為 <see langword="true" />，則為包含所建立 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 的 Out 參數。</param>
        <summary>根據型別名稱和可將標記前置詞解析為命名空間的物件，提供 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 值。</summary>
        <returns>
          如果剖析成功則為 <see langword="true" />，而且 <paramref name="result" /> 包含有用的值，否則為 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="typeName" /> 或 <paramref name="namespaceResolver" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="TryParseList">
      <MemberSignature Language="C#" Value="public static bool TryParseList (string typeNameList, System.Xaml.IXamlNamespaceResolver namespaceResolver, out System.Collections.Generic.IList&lt;System.Xaml.Schema.XamlTypeName&gt; result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseList(string typeNameList, class System.Xaml.IXamlNamespaceResolver namespaceResolver, [out] class System.Collections.Generic.IList`1&lt;class System.Xaml.Schema.XamlTypeName&gt;&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeName.TryParseList(System.String,System.Xaml.IXamlNamespaceResolver,System.Collections.Generic.IList{System.Xaml.Schema.XamlTypeName}@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseList (typeNameList As String, namespaceResolver As IXamlNamespaceResolver, ByRef result As IList(Of XamlTypeName)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseList(System::String ^ typeNameList, System::Xaml::IXamlNamespaceResolver ^ namespaceResolver, [Runtime::InteropServices::Out] System::Collections::Generic::IList&lt;System::Xaml::Schema::XamlTypeName ^&gt; ^ % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeNameList" Type="System.String" />
        <Parameter Name="namespaceResolver" Type="System.Xaml.IXamlNamespaceResolver" />
        <Parameter Name="result" Type="System.Collections.Generic.IList&lt;System.Xaml.Schema.XamlTypeName&gt;&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="typeNameList">包含多個型別的字串。</param>
        <param name="namespaceResolver">實作 <see cref="T:System.Xaml.IXamlNamespaceResolver" /> 的物件或服務提供者。</param>
        <param name="result">如果傳回值為 <see langword="true" />，則為包含所建立 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 的 Out 參數。</param>
        <summary>根據可指定多個型別名稱的字串，以及可將標記前置詞解析為命名空間的物件，提供 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 值。</summary>
        <returns>
          如果剖析成功則為 <see langword="true" />，而且 <paramref name="result" /> 包含有用的值，否則為 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="typeNameList" /> 或 <paramref name="namespaceResolver" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="TypeArguments">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;System.Xaml.Schema.XamlTypeName&gt; TypeArguments { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class System.Xaml.Schema.XamlTypeName&gt; TypeArguments" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.Schema.XamlTypeName.TypeArguments" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TypeArguments As IList(Of XamlTypeName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IList&lt;System::Xaml::Schema::XamlTypeName ^&gt; ^ TypeArguments { System::Collections::Generic::IList&lt;System::Xaml::Schema::XamlTypeName ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Xaml.Schema.XamlTypeName&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得用來建構這個 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 的型別引數。</summary>
        <value>型別引數 (如果有的話)。 可能是 Null。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Xaml.XamlType>已用來建構這個<xref:System.Xaml.Schema.XamlTypeName>，值<xref:System.Xaml.Schema.XamlTypeName.TypeArguments%2A>形成的<xref:System.Xaml.XamlType.TypeArguments%2A>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>