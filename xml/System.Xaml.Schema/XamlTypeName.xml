<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="XamlTypeName.xml" source-language="en-US" target-language="zh-TW">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac52d420d4d7b160647a411ba1d5a80ff33d17c9e54.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2d420d4d7b160647a411ba1d5a80ff33d17c9e54</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Xaml.Schema.XamlTypeName">
          <source>Provides a means to specify a XAML type in terms of name and namespace.</source>
          <target state="translated">提供以名稱和命名空間指定 XAML 型別的方法。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.Schema.XamlTypeName">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> is the type information class in the XAML type system, whereas <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeName&gt;</ph> is more of a data structure that provides different ways of specifying that type.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> 在 XAML 類型系統中，是型別資訊類別，而<ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeName&gt;</ph>是多個提供不同的方式指定該類型的資料結構。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.Schema.XamlTypeName">
          <source><ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeName&gt;</ph> also provides static helper methods for generating a <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeName&gt;</ph> by resolving an existing type identifier in a XAML namespace.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeName&gt;</ph> 也提供靜態 helper 方法來產生<ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeName&gt;</ph>解析 XAML 命名空間中的現有類型識別項。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" uid="T:System.Xaml.Schema.XamlTypeName">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.#ctor(System.Xaml.XamlType)">
          <source>An existing <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">現有的 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.#ctor(System.Xaml.XamlType)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph> class, based on an existing <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">根據現有的 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph>，初始化 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.#ctor(System.Xaml.XamlType)">
          <source><ph id="ph1">&lt;paramref name="xamlType" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="xamlType" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.#ctor(System.String,System.String)">
          <source>The XAML namespace that contains name.</source>
          <target state="translated">包含名稱的 XAML 命名空間。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.#ctor(System.String,System.String)">
          <source>The name of the type to create a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph> for.</source>
          <target state="translated">要建立 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph> 的型別名稱。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.#ctor(System.String,System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph> class, based on name and namespace strings.</source>
          <target state="translated">根據名稱和命名空間字串，初始化 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.Xaml.Schema.XamlTypeName})">
          <source>The XAML namespace that contains <bpt id="p1">&lt;c&gt;</bpt>name<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">包含 <bpt id="p1">&lt;c&gt;</bpt>name<ept id="p1">&lt;/c&gt;</ept> 的 XAML 命名空間。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.Xaml.Schema.XamlTypeName})">
          <source>The name of the type to create a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph> for.</source>
          <target state="translated">要建立 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph> 的型別名稱。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.Xaml.Schema.XamlTypeName})">
          <source>An array of type arguments, each of which must be a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph>.</source>
          <target state="translated">型別引數的陣列，其中每個型別引數都必須是 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.Xaml.Schema.XamlTypeName})">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph> class, based on name and namespace strings as well as an array of type arguments.</source>
          <target state="translated">根據名稱和命名空間以及型別引數陣列，初始化 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeName.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.Xaml.Schema.XamlTypeName})">
          <source>This is the signature to use if you are specifying a generic type and type arguments for that type.</source>
          <target state="translated">這是您要指定泛型型別和型別引數，該類型時所要使用的簽章。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="P:System.Xaml.Schema.XamlTypeName.Name">
          <source>Gets the name used to construct this <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph>.</source>
          <target state="translated">取得用來建構這個 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph> 的名稱。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.Schema.XamlTypeName.Name">
          <source>The name of the type.</source>
          <target state="translated">型別的名稱。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.Schema.XamlTypeName.Name">
          <source>If a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> was used to construct this <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeName&gt;</ph>, the value of <ph id="ph3">&lt;xref:System.Xaml.Schema.XamlTypeName.Name%2A&gt;</ph> is <ph id="ph4">&lt;xref:System.Xaml.XamlType.Name%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>已用來建構這個<ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeName&gt;</ph>，值<ph id="ph3">&lt;xref:System.Xaml.Schema.XamlTypeName.Name%2A&gt;</ph>是<ph id="ph4">&lt;xref:System.Xaml.XamlType.Name%2A?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="P:System.Xaml.Schema.XamlTypeName.Namespace">
          <source>Gets the XAML namespace identifier used to construct this <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph>.</source>
          <target state="translated">取得用來建構這個 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph> 的 XAML 命名空間識別項。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.Schema.XamlTypeName.Namespace">
          <source>The XAML namespace identifier.</source>
          <target state="translated">XAML 命名空間識別項。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.Schema.XamlTypeName.Namespace">
          <source>If a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> was used to construct this <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeName&gt;</ph>, the value of <ph id="ph3">&lt;xref:System.Xaml.Schema.XamlTypeName.Namespace%2A&gt;</ph> is <ph id="ph4">`xamlType.GetXamlNamespaces()[0]`</ph>.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>已用來建構這個<ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeName&gt;</ph>，值<ph id="ph3">&lt;xref:System.Xaml.Schema.XamlTypeName.Namespace%2A&gt;</ph>是<ph id="ph4">`xamlType.GetXamlNamespaces()[0]`</ph>。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.Parse(System.String,System.Xaml.IXamlNamespaceResolver)">
          <source>The type name to create a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph> value for.</source>
          <target state="translated">要建立 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph> 值的型別名稱。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.Parse(System.String,System.Xaml.IXamlNamespaceResolver)">
          <source>An object or service provider that implements <ph id="ph1">&lt;see cref="T:System.Xaml.IXamlNamespaceResolver" /&gt;</ph>.</source>
          <target state="translated">實作 <ph id="ph1">&lt;see cref="T:System.Xaml.IXamlNamespaceResolver" /&gt;</ph> 的物件或服務提供者。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.Parse(System.String,System.Xaml.IXamlNamespaceResolver)">
          <source>Provides a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph> value based on a type name and an object that can resolve a markup prefix into a namespace.</source>
          <target state="translated">根據型別名稱和可將標記前置詞解析為命名空間的物件，提供 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph> 值。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.Parse(System.String,System.Xaml.IXamlNamespaceResolver)">
          <source>The created <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph>.</source>
          <target state="translated">建立的 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.Parse(System.String,System.Xaml.IXamlNamespaceResolver)">
          <source><ph id="ph1">&lt;paramref name="typeName" /&gt;</ph> or <ph id="ph2">&lt;paramref name="namespaceResolver" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="typeName" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="namespaceResolver" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.Parse(System.String,System.Xaml.IXamlNamespaceResolver)">
          <source>String cannot be parsed.</source>
          <target state="translated">無法剖析字串。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.ParseList(System.String,System.Xaml.IXamlNamespaceResolver)">
          <source>A string that contains multiple types.</source>
          <target state="translated">包含多個型別的字串。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.ParseList(System.String,System.Xaml.IXamlNamespaceResolver)">
          <source>An object or service provider that implements <ph id="ph1">&lt;see cref="T:System.Xaml.IXamlNamespaceResolver" /&gt;</ph>.</source>
          <target state="translated">實作 <ph id="ph1">&lt;see cref="T:System.Xaml.IXamlNamespaceResolver" /&gt;</ph> 的物件或服務提供者。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.ParseList(System.String,System.Xaml.IXamlNamespaceResolver)">
          <source>Provides a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph> value based on a string that can specify multiple type names, and an object that can resolve a markup prefix into a namespace.</source>
          <target state="translated">根據可指定多個型別名稱的字串，以及可將標記前置詞解析為命名空間的物件，提供 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph> 值。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.ParseList(System.String,System.Xaml.IXamlNamespaceResolver)">
          <source>The created <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph>.</source>
          <target state="translated">建立的 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeName.ParseList(System.String,System.Xaml.IXamlNamespaceResolver)">
          <source>The following is quasi-BNF for the nested type name or multiple type name parsing enabled by this method:</source>
          <target state="translated">以下是巢狀的類型名稱或多個型別名稱剖析這個方法所啟用的 quasi BNF:</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.ParseList(System.String,System.Xaml.IXamlNamespaceResolver)">
          <source><ph id="ph1">&lt;paramref name="typeNameList" /&gt;</ph> or <ph id="ph2">&lt;paramref name="namespaceResolver" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="typeNameList" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="namespaceResolver" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.ParseList(System.String,System.Xaml.IXamlNamespaceResolver)">
          <source>String cannot be parsed.</source>
          <target state="translated">無法剖析字串。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="T:System.Xaml.Schema.XamlTypeName">
          <source>Converts the value of this <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph> to its equivalent string representation.</source>
          <target state="translated">將這個 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph> 的值轉換成它的對等字串表示。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.ToString">
          <source>Converts the value of this <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph> to its equivalent string representation.</source>
          <target state="translated">將這個 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph> 的值轉換成它的對等字串表示。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.ToString">
          <source>The equivalent string representation of this <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph> .</source>
          <target state="translated">這個 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph> 的對等字串表示。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeName.ToString">
          <source>This signature is equivalent to calling <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeName.ToString%28System.Xaml.INamespacePrefixLookup%29&gt;</ph>, passing <ph id="ph2">`null`</ph> for <ph id="ph3">`prefixLookup`</ph>.</source>
          <target state="translated">此簽章就相當於呼叫<ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeName.ToString%28System.Xaml.INamespacePrefixLookup%29&gt;</ph>，並傳遞<ph id="ph2">`null`</ph>如<ph id="ph3">`prefixLookup`</ph>。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeName.ToString">
          <source>s</source>
          <target state="translated">秒</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.ToString(System.Xaml.INamespacePrefixLookup)">
          <source>A service reference for prefix lookup.</source>
          <target state="translated">前置詞查閱的服務參考。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.ToString(System.Xaml.INamespacePrefixLookup)">
          <source>Converts the value of this <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph> to its equivalent string representation, which can be used in markup syntax for an object element usage of a type.</source>
          <target state="translated">將這個 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph> 的值轉換為它的對等字串表示，此表示可用在標記語法中，讓物件項目使用某個型別。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.ToString(System.Xaml.INamespacePrefixLookup)">
          <source>A prefixed usage string.</source>
          <target state="translated">含前置詞的使用字串。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.ToString(System.Xaml.INamespacePrefixLookup)">
          <source><ph id="ph1">&lt;see cref="P:System.Xaml.Schema.XamlTypeName.Namespace" /&gt;</ph> for this <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">這個 <ph id="ph1">&lt;see cref="P:System.Xaml.Schema.XamlTypeName.Namespace" /&gt;</ph> 的 <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.ToString(System.Xaml.INamespacePrefixLookup)">
          <source>-or-</source>
          <target state="translated">-或-</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.ToString(System.Xaml.INamespacePrefixLookup)">
          <source><ph id="ph1">&lt;see cref="P:System.Xaml.Schema.XamlTypeName.Name" /&gt;</ph> is not valid.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Xaml.Schema.XamlTypeName.Name" /&gt;</ph> 無效。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.ToString(System.Xaml.INamespacePrefixLookup)">
          <source>-or-</source>
          <target state="translated">-或-</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.ToString(System.Xaml.INamespacePrefixLookup)">
          <source>Could not look up the prefix.</source>
          <target state="translated">無法查詢前置詞。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.ToString(System.Collections.Generic.IList{System.Xaml.Schema.XamlTypeName},System.Xaml.INamespacePrefixLookup)">
          <source>A list of types.</source>
          <target state="translated">型別清單。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.ToString(System.Collections.Generic.IList{System.Xaml.Schema.XamlTypeName},System.Xaml.INamespacePrefixLookup)">
          <source>A service reference for prefix lookup.</source>
          <target state="translated">前置詞查閱的服務參考。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.ToString(System.Collections.Generic.IList{System.Xaml.Schema.XamlTypeName},System.Xaml.INamespacePrefixLookup)">
          <source>Converts the value of this <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph> to its equivalent string representation, which can be used in markup syntax for an object element usage of multiple types.</source>
          <target state="translated">將這個 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph> 的值轉換為它的對等字串表示，此表示可用在標記語法中，讓物件項目使用多個型別。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.ToString(System.Collections.Generic.IList{System.Xaml.Schema.XamlTypeName},System.Xaml.INamespacePrefixLookup)">
          <source>A concatenated string of all type results.</source>
          <target state="translated">所有型別結果的串連字串。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.ToString(System.Collections.Generic.IList{System.Xaml.Schema.XamlTypeName},System.Xaml.INamespacePrefixLookup)">
          <source><ph id="ph1">&lt;paramref name="prefixLookup" /&gt;</ph> or <ph id="ph2">&lt;paramref name="typeNameList" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="prefixLookup" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="typeNameList" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.TryParse(System.String,System.Xaml.IXamlNamespaceResolver,System.Xaml.Schema.XamlTypeName@)">
          <source>The type name to create a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph> value for.</source>
          <target state="translated">要建立 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph> 值的型別名稱。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.TryParse(System.String,System.Xaml.IXamlNamespaceResolver,System.Xaml.Schema.XamlTypeName@)">
          <source>An object or service provider that implements <ph id="ph1">&lt;see cref="T:System.Xaml.IXamlNamespaceResolver" /&gt;</ph>.</source>
          <target state="translated">實作 <ph id="ph1">&lt;see cref="T:System.Xaml.IXamlNamespaceResolver" /&gt;</ph> 的物件或服務提供者。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.TryParse(System.String,System.Xaml.IXamlNamespaceResolver,System.Xaml.Schema.XamlTypeName@)">
          <source>Out parameter that contains the created <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph> if the return value is <ph id="ph2">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">如果傳回值為 <ph id="ph2">&lt;see langword="true" /&gt;</ph>，則為包含所建立 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph> 的 Out 參數。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.TryParse(System.String,System.Xaml.IXamlNamespaceResolver,System.Xaml.Schema.XamlTypeName@)">
          <source>Provides a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph> value based on a type name and an object that can resolve a markup prefix into a namespace.</source>
          <target state="translated">根據型別名稱和可將標記前置詞解析為命名空間的物件，提供 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph> 值。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.TryParse(System.String,System.Xaml.IXamlNamespaceResolver,System.Xaml.Schema.XamlTypeName@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the parse was successful and <ph id="ph2">&lt;paramref name="result" /&gt;</ph> contains a useful value; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果剖析成功則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，而且 <ph id="ph2">&lt;paramref name="result" /&gt;</ph> 包含有用的值，否則為 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.TryParse(System.String,System.Xaml.IXamlNamespaceResolver,System.Xaml.Schema.XamlTypeName@)">
          <source><ph id="ph1">&lt;paramref name="typeName" /&gt;</ph> or <ph id="ph2">&lt;paramref name="namespaceResolver" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="typeName" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="namespaceResolver" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.TryParseList(System.String,System.Xaml.IXamlNamespaceResolver,System.Collections.Generic.IList{System.Xaml.Schema.XamlTypeName}@)">
          <source>A string that contains multiple types.</source>
          <target state="translated">包含多個型別的字串。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.TryParseList(System.String,System.Xaml.IXamlNamespaceResolver,System.Collections.Generic.IList{System.Xaml.Schema.XamlTypeName}@)">
          <source>An object or service provider that implements <ph id="ph1">&lt;see cref="T:System.Xaml.IXamlNamespaceResolver" /&gt;</ph>.</source>
          <target state="translated">實作 <ph id="ph1">&lt;see cref="T:System.Xaml.IXamlNamespaceResolver" /&gt;</ph> 的物件或服務提供者。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.TryParseList(System.String,System.Xaml.IXamlNamespaceResolver,System.Collections.Generic.IList{System.Xaml.Schema.XamlTypeName}@)">
          <source>Out parameter that contains the created <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph> if the return value is <ph id="ph2">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">如果傳回值為 <ph id="ph2">&lt;see langword="true" /&gt;</ph>，則為包含所建立 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph> 的 Out 參數。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.TryParseList(System.String,System.Xaml.IXamlNamespaceResolver,System.Collections.Generic.IList{System.Xaml.Schema.XamlTypeName}@)">
          <source>Provides a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph> value based on a string that can specify multiple type names, and an object that can resolve a markup prefix into a namespace.</source>
          <target state="translated">根據可指定多個型別名稱的字串，以及可將標記前置詞解析為命名空間的物件，提供 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph> 值。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.TryParseList(System.String,System.Xaml.IXamlNamespaceResolver,System.Collections.Generic.IList{System.Xaml.Schema.XamlTypeName}@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the parse was successful and <ph id="ph2">&lt;paramref name="result" /&gt;</ph> contains a useful value; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果剖析成功則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，而且 <ph id="ph2">&lt;paramref name="result" /&gt;</ph> 包含有用的值，否則為 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.TryParseList(System.String,System.Xaml.IXamlNamespaceResolver,System.Collections.Generic.IList{System.Xaml.Schema.XamlTypeName}@)">
          <source><ph id="ph1">&lt;paramref name="typeNameList" /&gt;</ph> or <ph id="ph2">&lt;paramref name="namespaceResolver" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="typeNameList" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="namespaceResolver" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="P:System.Xaml.Schema.XamlTypeName.TypeArguments">
          <source>Gets the type arguments used to construct this <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph>.</source>
          <target state="translated">取得用來建構這個 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph> 的型別引數。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.Schema.XamlTypeName.TypeArguments">
          <source>The type arguments, if any.</source>
          <target state="translated">型別引數 (如果有的話)。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.Schema.XamlTypeName.TypeArguments">
          <source>May be null.</source>
          <target state="translated">可能是 Null。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.Schema.XamlTypeName.TypeArguments">
          <source>If a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> was used to construct this <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeName&gt;</ph>, the value of <ph id="ph3">&lt;xref:System.Xaml.Schema.XamlTypeName.TypeArguments%2A&gt;</ph> is formed from <ph id="ph4">&lt;xref:System.Xaml.XamlType.TypeArguments%2A&gt;</ph>.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>已用來建構這個<ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeName&gt;</ph>，值<ph id="ph3">&lt;xref:System.Xaml.Schema.XamlTypeName.TypeArguments%2A&gt;</ph>形成的<ph id="ph4">&lt;xref:System.Xaml.XamlType.TypeArguments%2A&gt;</ph>。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>