<Type Name="XamlTypeInvoker" FullName="System.Xaml.Schema.XamlTypeInvoker">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="504f5574033cb4de7a3c6a42e6208306d4dd86e5" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30720672" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XamlTypeInvoker" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XamlTypeInvoker extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xaml.Schema.XamlTypeInvoker" />
  <TypeSignature Language="VB.NET" Value="Public Class XamlTypeInvoker" />
  <TypeSignature Language="C++ CLI" Value="public ref class XamlTypeInvoker" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="b37f8-101">提供延伸點，這個延伸點可透過反映和建構函式以外的技術來建構 XAML 型別的執行個體。</span>
      <span class="sxs-lookup">
        <span data-stu-id="b37f8-101">Provides an extension point that can construct instances of a XAML type through techniques other than reflection and constructors.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b37f8-102">目的<xref:System.Xaml.Schema.XamlTypeInvoker>是啟用可延伸的 XAML 類型系統、 架構以及工作執行時間，不會依賴完全 CLR 功能，例如 CLR 屬性，透過反映資訊<xref:System.Type>和<xref:System.Reflection.MemberInfo>，依此類推。</span><span class="sxs-lookup"><span data-stu-id="b37f8-102">The purpose of <xref:System.Xaml.Schema.XamlTypeInvoker> is to enable an extensible XAML type system, schema, and a working run time that does not rely as fully on CLR features such as CLR attributes, reflection information through <xref:System.Type> and <xref:System.Reflection.MemberInfo>, and so on.</span></span> <span data-ttu-id="b37f8-103">子類別<xref:System.Xaml.Schema.XamlTypeInvoker>可用做為輸入參數的替代的 XAML 結構描述類別的建構函式例如<xref:System.Xaml.XamlType>。</span><span class="sxs-lookup"><span data-stu-id="b37f8-103">Subclasses of <xref:System.Xaml.Schema.XamlTypeInvoker> are used as input parameters for the alternate constructors of XAML schema classes such as <xref:System.Xaml.XamlType>.</span></span> <span data-ttu-id="b37f8-104">您的子類別<xref:System.Xaml.XamlType>並傳遞<xref:System.Xaml.Schema.XamlTypeInvoker>透過基底建構函式。</span><span class="sxs-lookup"><span data-stu-id="b37f8-104">You subclass <xref:System.Xaml.XamlType> and pass the <xref:System.Xaml.Schema.XamlTypeInvoker> through to the base constructor.</span></span> <span data-ttu-id="b37f8-105">以及定義<xref:System.Xaml.Schema.XamlTypeInvoker>建構函式，您也必須提供的覆寫至少部分`Lookup`方法<xref:System.Xaml.XamlType>。</span><span class="sxs-lookup"><span data-stu-id="b37f8-105">Along with defining a <xref:System.Xaml.Schema.XamlTypeInvoker> for the constructor, you must also provide overrides for at least some of the `Lookup` methods of <xref:System.Xaml.XamlType>.</span></span>  
  
 <span data-ttu-id="b37f8-106"><xref:System.Xaml.Schema.XamlTypeInvoker> 其預設實作。</span><span class="sxs-lookup"><span data-stu-id="b37f8-106"><xref:System.Xaml.Schema.XamlTypeInvoker> has a default implementation.</span></span> <span data-ttu-id="b37f8-107">預設實作會遵循類似的模型至 XAML 結構描述類型的預設實作<xref:System.Xaml.XamlType>和<xref:System.Xaml.XamlMember>: CLR 型別系統用於具現化、 值和查閱而言，包括使用 CLR 屬性<xref:System.Type>和<xref:System.Reflection.MemberInfo>，依此類推。</span><span class="sxs-lookup"><span data-stu-id="b37f8-107">The default implementation follows a similar model to the default implementation of XAML schema types <xref:System.Xaml.XamlType> and <xref:System.Xaml.XamlMember>: the CLR type system is used for instantiation, values and lookups, including using CLR attributes, <xref:System.Type> and <xref:System.Reflection.MemberInfo>, and so on.</span></span>  
  
 <span data-ttu-id="b37f8-108"><xref:System.Xaml.Schema.XamlTypeInvoker> 提供基本的具現化的方法 (<xref:System.Xaml.Schema.XamlTypeInvoker.CreateInstance%2A>) 和相關類型的方法其中<xref:System.Xaml.XamlType>代表集合、 字典或陣列 (<xref:System.Xaml.Schema.XamlTypeInvoker.AddToCollection%2A>;<xref:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary%2A>;<xref:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod%2A>;<xref:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod%2A>;<xref:System.Xaml.Schema.XamlTypeInvoker.GetItems%2A>).</span><span class="sxs-lookup"><span data-stu-id="b37f8-108"><xref:System.Xaml.Schema.XamlTypeInvoker> provides methods for basic instantiation (<xref:System.Xaml.Schema.XamlTypeInvoker.CreateInstance%2A>) and methods that are relevant for types where the <xref:System.Xaml.XamlType> represents a collection, dictionary or array (<xref:System.Xaml.Schema.XamlTypeInvoker.AddToCollection%2A>; <xref:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary%2A>; <xref:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod%2A>; <xref:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod%2A>; <xref:System.Xaml.Schema.XamlTypeInvoker.GetItems%2A>).</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="b37f8-109">初始化 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b37f8-109">Initializes a new instance of the <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected XamlTypeInvoker ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; XamlTypeInvoker();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b37f8-110">初始化 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b37f8-110">Initializes a new instance of the <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b37f8-111">預設實作是空的。</span><span class="sxs-lookup"><span data-stu-id="b37f8-111">The default implementation is empty.</span></span>  
  
 <span data-ttu-id="b37f8-112">這個建構函式是在內部叫用提供的值<xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A>。</span><span class="sxs-lookup"><span data-stu-id="b37f8-112">This constructor is invoked internally to provide a value for <xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A>.</span></span> <span data-ttu-id="b37f8-113">如<xref:System.Xaml.Schema.XamlTypeInvoker>子類別，請使用<xref:System.Xaml.Schema.XamlTypeInvoker.%23ctor%28System.Xaml.XamlType%29>建構簽章或提供的覆寫呼叫<xref:System.Xaml.Schema.XamlTypeInvoker.%23ctor%28System.Xaml.XamlType%29>為基底。</span><span class="sxs-lookup"><span data-stu-id="b37f8-113">For a <xref:System.Xaml.Schema.XamlTypeInvoker> subclass, it is expected that you either use the <xref:System.Xaml.Schema.XamlTypeInvoker.%23ctor%28System.Xaml.XamlType%29> signature for construction or provide an override that calls <xref:System.Xaml.Schema.XamlTypeInvoker.%23ctor%28System.Xaml.XamlType%29> as base.</span></span> <span data-ttu-id="b37f8-114">提供<xref:System.Xaml.XamlType>實作的預設模式 where<xref:System.Xaml.Schema.XamlTypeInvoker>是不變。</span><span class="sxs-lookup"><span data-stu-id="b37f8-114">Providing the <xref:System.Xaml.XamlType> implements a default pattern where <xref:System.Xaml.Schema.XamlTypeInvoker> is immutable.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlTypeInvoker (System.Xaml.XamlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xaml.XamlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.#ctor(System.Xaml.XamlType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (type As XamlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlTypeInvoker(System::Xaml::XamlType ^ type);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="type" Type="System.Xaml.XamlType" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="b37f8-115">特定 XAML 型別與這個 <see cref="T:System.Xaml.XamlType" /> 相關的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b37f8-115">The <see cref="T:System.Xaml.XamlType" /> value for the specific XAML type relevant to this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b37f8-116">根據提供的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />，初始化 <see cref="T:System.Xaml.XamlType" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b37f8-116">Initializes a new instance of the <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> class, based on a provided <see cref="T:System.Xaml.XamlType" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b37f8-117">這個建構函式會呼叫在內部根據<xref:System.Xaml.XamlType>其中<xref:System.Xaml.Schema.XamlTypeInvoker>用於建構。</span><span class="sxs-lookup"><span data-stu-id="b37f8-117">This constructor is called internally based on the <xref:System.Xaml.XamlType> where the <xref:System.Xaml.Schema.XamlTypeInvoker> is used for construction.</span></span> <span data-ttu-id="b37f8-118">`type`此處提供適用於所有其他方法呼叫<xref:System.Xaml.Schema.XamlTypeInvoker>。</span><span class="sxs-lookup"><span data-stu-id="b37f8-118">The `type` provided here is relevant to all other method calls for <xref:System.Xaml.Schema.XamlTypeInvoker>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b37f8-119">
            <paramref name="type" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b37f8-119">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="AddToCollection">
      <MemberSignature Language="C#" Value="public virtual void AddToCollection (object instance, object item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddToCollection(object instance, object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddToCollection (instance As Object, item As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddToCollection(System::Object ^ instance, System::Object ^ item);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance">
          <span data-ttu-id="b37f8-120">
            <see cref="T:System.Xaml.XamlType" /> (用於建構這個 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />) 所指定之類型的執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b37f8-120">An instance of the type specified by the <see cref="T:System.Xaml.XamlType" /> used for constructing this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</span>
          </span>
        </param>
        <param name="item">
          <span data-ttu-id="b37f8-121">要新增的項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b37f8-121">The item to add.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b37f8-122">將提供的項目加入至與這個 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 相關之類型的執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b37f8-122">Adds the provided item to an instance of the type that is relevant to this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b37f8-123">您只應該呼叫這個方法在<xref:System.Xaml.XamlType>，表示集合。</span><span class="sxs-lookup"><span data-stu-id="b37f8-123">You should only call this method on a <xref:System.Xaml.XamlType> that represents a collection.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="b37f8-124">在以未知 <see cref="T:System.Xaml.XamlType" /> 為根據的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 上，叫用這個方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b37f8-124">Invoked this method on a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> that is based on an unknown <see cref="T:System.Xaml.XamlType" />.</span>
          </span>
          <span data-ttu-id="b37f8-125">**-或-**</span>
          <span class="sxs-lookup">
            <span data-stu-id="b37f8-125">**-or-**</span>
          </span>
          <span data-ttu-id="b37f8-126">在其中的相關類型不是集合的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 上，叫用這個方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b37f8-126">Invoked this method on a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> where the relevant type is not a collection.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b37f8-127">
            <paramref name="instance" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b37f8-127">
              <paramref name="instance" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Xaml.XamlSchemaException">
          <span data-ttu-id="b37f8-128">這個 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 的 <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> 會傳回 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b37f8-128">
              <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> for this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> returns <see langword="null" />.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="b37f8-129">基底實作都會呼叫內部協助程式<c>ThrowIfUnknown</c>。</span>
            <span class="sxs-lookup">
              <span data-stu-id="b37f8-129">The base implementation includes a call to the internal helper <c>ThrowIfUnknown</c>.</span>
            </span>
            <span data-ttu-id="b37f8-130">這個 helper 一律會擲回的情況下其中<see cref="T:System.Xaml.Schema.XamlTypeInvoker" />根據未知<see cref="T:System.Xaml.XamlType" />，其中包括狀況下<see cref="P:System.Xaml.XamlType.UnderlyingType" />的<see cref="T:System.Xaml.XamlType" />是<see langword="null" />。</span>
            <span class="sxs-lookup">
              <span data-stu-id="b37f8-130">This helper always throws for cases where a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> is based on an unknown <see cref="T:System.Xaml.XamlType" />, which includes cases where the <see cref="P:System.Xaml.XamlType.UnderlyingType" /> of the <see cref="T:System.Xaml.XamlType" /> is <see langword="null" />.</span>
            </span>
            <span data-ttu-id="b37f8-131">就內部而言，基底實作會呼叫<see cref="P:System.Xaml.XamlType.IsCollection" />，而且會擲回，如果結果為<see langword="false" />。</span>
            <span class="sxs-lookup">
              <span data-stu-id="b37f8-131">Internally, the base implementation calls <see cref="P:System.Xaml.XamlType.IsCollection" />, and throws if the result is <see langword="false" />.</span>
            </span>
            <span data-ttu-id="b37f8-132">基底實作不一定要使用自己<see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" />實作。</span>
            <span class="sxs-lookup">
              <span data-stu-id="b37f8-132">The base implementation does not necessarily use its own <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> implementation.</span>
            </span>
            <span data-ttu-id="b37f8-133">首先，轉型<paramref name="instance" />至<see cref="T:System.Collections.IList" />嘗試。</span>
            <span class="sxs-lookup">
              <span data-stu-id="b37f8-133">First, a cast of <paramref name="instance" /> to <see cref="T:System.Collections.IList" /> is attempted.</span>
            </span>
            <span data-ttu-id="b37f8-134">如果成功的話，呼叫<see cref="M:System.Collections.IList.Add(System.Object)" />進行而且方法會傳回。</span>
            <span class="sxs-lookup">
              <span data-stu-id="b37f8-134">If this succeeds, a call to <see cref="M:System.Collections.IList.Add(System.Object)" /> is made and the method returns.</span>
            </span>
            <span data-ttu-id="b37f8-135">否則，基底實作會使用 CLR<see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" />叫用基礎<see langword="Add" />方法，如取自呼叫<see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" />這個<paramref name="" /><see cref="T:System.Xaml.Schema.XamlTypeInvoker" />。</span>
            <span class="sxs-lookup">
              <span data-stu-id="b37f8-135">Otherwise, the base implementation uses CLR <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /> to invoke the underlying <see langword="Add" /> method, as obtained from a call to <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> for this <paramref name="" /><see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</span>
            </span>
            <span data-ttu-id="b37f8-136">基底實作中沒有例外狀況會在此層級如果引發<paramref name="item" />是<see langword="null" />。</span>
            <span class="sxs-lookup">
              <span data-stu-id="b37f8-136">In the base implementation no exception is raised at this level if <paramref name="item" /> is <see langword="null" />.</span>
            </span>
            <span data-ttu-id="b37f8-137">仍有可能，基礎<see langword="Add" />方法會引發例外狀況時叫用。</span>
            <span class="sxs-lookup">
              <span data-stu-id="b37f8-137">It is still possible that the underlying <see langword="Add" /> method will raise an exception when invoked.</span>
            </span>
            <span data-ttu-id="b37f8-138">可能會有其他執行的階段例外狀況如果<see cref="P:System.Xaml.XamlType.ItemType" />不會傳回有效的結果。</span>
            <span class="sxs-lookup">
              <span data-stu-id="b37f8-138">Other run time exceptions are possible if <see cref="P:System.Xaml.XamlType.ItemType" /> does not return a valid result.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="AddToDictionary">
      <MemberSignature Language="C#" Value="public virtual void AddToDictionary (object instance, object key, object item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddToDictionary(object instance, object key, object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddToDictionary (instance As Object, key As Object, item As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddToDictionary(System::Object ^ instance, System::Object ^ key, System::Object ^ item);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance">
          <span data-ttu-id="b37f8-139">
            <see cref="T:System.Xaml.XamlType" /> (用於建構這個 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />) 所指定之類型的執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b37f8-139">An instance of the type specified by the <see cref="T:System.Xaml.XamlType" /> used for constructing this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</span>
          </span>
        </param>
        <param name="key">
          <span data-ttu-id="b37f8-140">要加入項目的字典索引鍵。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b37f8-140">Dictionary key for the item to add.</span>
          </span>
        </param>
        <param name="item">
          <span data-ttu-id="b37f8-141">要加入的項目值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b37f8-141">The item value to add.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b37f8-142">將提供的索引鍵和項目值加入至與這個 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 相關之類型的執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b37f8-142">Adds the provided key and item value to an instance of the type that is relevant to this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b37f8-143">您只應該呼叫這個方法在<xref:System.Xaml.XamlType>表示字典。</span><span class="sxs-lookup"><span data-stu-id="b37f8-143">You should only call this method on a <xref:System.Xaml.XamlType> that represents a dictionary.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="b37f8-144">在以未知 <see cref="T:System.Xaml.XamlType" /> 為根據的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 上，叫用這個方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b37f8-144">Invoked this method on a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> that is based on an unknown <see cref="T:System.Xaml.XamlType" />.</span>
          </span>
          <span data-ttu-id="b37f8-145">**-或-**</span>
          <span class="sxs-lookup">
            <span data-stu-id="b37f8-145">**-or-**</span>
          </span>
          <span data-ttu-id="b37f8-146">在其中的相關類型不是字典的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 上，叫用這個方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b37f8-146">Invoked this method on a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> where the relevant type is not a dictionary.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b37f8-147">
            <paramref name="instance" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b37f8-147">
              <paramref name="instance" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Xaml.XamlSchemaException">
          <span data-ttu-id="b37f8-148">這個 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 的 <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> 會傳回 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b37f8-148">
              <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> for this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> returns <see langword="null" />.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="b37f8-149">基底實作都會呼叫內部協助程式<c>ThrowIfUnknown</c>。</span>
            <span class="sxs-lookup">
              <span data-stu-id="b37f8-149">The base implementation includes a call to the internal helper <c>ThrowIfUnknown</c>.</span>
            </span>
            <span data-ttu-id="b37f8-150">這個 helper 一律會擲回的情況下其中<see cref="T:System.Xaml.Schema.XamlTypeInvoker" />根據未知<see cref="T:System.Xaml.XamlType" />，其中包括狀況下<see cref="P:System.Xaml.XamlType.UnderlyingType" />的<see cref="T:System.Xaml.XamlType" />是<see langword="null" />。</span>
            <span class="sxs-lookup">
              <span data-stu-id="b37f8-150">This helper always throws for cases where a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> is based on an unknown <see cref="T:System.Xaml.XamlType" />, which includes cases where the <see cref="P:System.Xaml.XamlType.UnderlyingType" /> of the <see cref="T:System.Xaml.XamlType" /> is <see langword="null" />.</span>
            </span>
            <span data-ttu-id="b37f8-151">就內部而言，基底實作會呼叫<see cref="P:System.Xaml.XamlType.IsDictionary" />，而且會擲回，如果結果為<see langword="false" />。</span>
            <span class="sxs-lookup">
              <span data-stu-id="b37f8-151">Internally, the base implementation calls <see cref="P:System.Xaml.XamlType.IsDictionary" />, and throws if the result is <see langword="false" />.</span>
            </span>
            <span data-ttu-id="b37f8-152">基底實作不一定要使用自己<see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" />實作。</span>
            <span class="sxs-lookup">
              <span data-stu-id="b37f8-152">The base implementation does not necessarily use its own <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> implementation.</span>
            </span>
            <span data-ttu-id="b37f8-153">首先，轉型<paramref name="instance" />至<see cref="T:System.Collections.IDictionary" />嘗試。</span>
            <span class="sxs-lookup">
              <span data-stu-id="b37f8-153">First, a cast of <paramref name="instance" /> to <see cref="T:System.Collections.IDictionary" /> is attempted.</span>
            </span>
            <span data-ttu-id="b37f8-154">如果成功的話，呼叫<see cref="M:System.Collections.IDictionary.Add(System.Object,System.Object)" />進行而且方法會傳回。</span>
            <span class="sxs-lookup">
              <span data-stu-id="b37f8-154">If this succeeds, a call to <see cref="M:System.Collections.IDictionary.Add(System.Object,System.Object)" /> is made and the method returns.</span>
            </span>
            <span data-ttu-id="b37f8-155">否則，基底實作會使用 CLR<see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" />叫用基礎<see langword="Add" />方法，如取自呼叫<see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" />這個<paramref name="" /><see cref="T:System.Xaml.Schema.XamlTypeInvoker" />。</span>
            <span class="sxs-lookup">
              <span data-stu-id="b37f8-155">Otherwise, the base implementation uses CLR <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /> to invoke the underlying <see langword="Add" /> method, as obtained from a call to <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> for this <paramref name="" /><see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</span>
            </span>
            <span data-ttu-id="b37f8-156">基底實作中沒有例外狀況會在此層級如果引發<paramref name="item" />或<paramref name="key" />是<see langword="null" />。</span>
            <span class="sxs-lookup">
              <span data-stu-id="b37f8-156">In the base implementation no exception is raised at this level if <paramref name="item" /> or <paramref name="key" /> are <see langword="null" />.</span>
            </span>
            <span data-ttu-id="b37f8-157">仍有可能，基礎<see langword="Add" />方法會引發例外狀況時叫用。</span>
            <span class="sxs-lookup">
              <span data-stu-id="b37f8-157">It is still possible that the underlying <see langword="Add" /> method will raise an exception when invoked.</span>
            </span>
            <span data-ttu-id="b37f8-158">可能會有其他執行的階段例外狀況如果<see cref="P:System.Xaml.XamlType.ItemType" />不會傳回有效的結果。</span>
            <span class="sxs-lookup">
              <span data-stu-id="b37f8-158">Other run time exceptions are possible if <see cref="P:System.Xaml.XamlType.ItemType" /> does not return a valid result.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public virtual object CreateInstance (object[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object CreateInstance(object[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.CreateInstance(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateInstance (arguments As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ CreateInstance(cli::array &lt;System::Object ^&gt; ^ arguments);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arguments" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="arguments">
          <span data-ttu-id="b37f8-159">為執行個體提供 <see langword="x:ConstructorArgs" /> 的物件陣列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b37f8-159">An array of objects that supply the <see langword="x:ConstructorArgs" /> for the instance.</span>
          </span>
          <span data-ttu-id="b37f8-160">對於不需要或不使用 <see langword="null" /> 的型別，可能為 <see langword="x:ConstructorArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b37f8-160">May be <see langword="null" /> for types that do not require or use <see langword="x:ConstructorArgs" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b37f8-161">根據這個 <see cref="T:System.Xaml.XamlType" /> 之由建構啟始的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />，建立物件執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b37f8-161">Creates an object instance based on the construction-initiated <see cref="T:System.Xaml.XamlType" /> for this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b37f8-162">已根據這個 <see cref="T:System.Xaml.XamlType" /> 之由建構啟始的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 所建立的執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b37f8-162">The created instance based on the construction-initiated <see cref="T:System.Xaml.XamlType" /> for this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="b37f8-163">無法解析建構函式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b37f8-163">Could not resolve a constructor.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="b37f8-164">基底實作都會呼叫內部協助程式<c>ThrowIfUnknown</c>。</span>
            <span class="sxs-lookup">
              <span data-stu-id="b37f8-164">The base implementation includes a call to the internal helper <c>ThrowIfUnknown</c>.</span>
            </span>
            <span data-ttu-id="b37f8-165">這個 helper 一律會擲回的情況下其中<see cref="T:System.Xaml.Schema.XamlTypeInvoker" />根據未知<see cref="T:System.Xaml.XamlType" />，其中包括狀況下<see cref="P:System.Xaml.XamlType.UnderlyingType" />的<see cref="T:System.Xaml.XamlType" />是<see langword="null" />。</span>
            <span class="sxs-lookup">
              <span data-stu-id="b37f8-165">This helper always throws for cases where a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> is based on an unknown <see cref="T:System.Xaml.XamlType" />, which includes cases where the <see cref="P:System.Xaml.XamlType.UnderlyingType" /> of the <see cref="T:System.Xaml.XamlType" /> is <see langword="null" />.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetAddMethod">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodInfo GetAddMethod (System.Xaml.XamlType contentType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetAddMethod(class System.Xaml.XamlType contentType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAddMethod (contentType As XamlType) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetAddMethod(System::Xaml::XamlType ^ contentType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contentType" Type="System.Xaml.XamlType" />
      </Parameters>
      <Docs>
        <param name="contentType">
          <span data-ttu-id="b37f8-166">
            <see langword="Add" /> 方法所使用項目型別的 <see cref="T:System.Xaml.XamlType" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b37f8-166">
              <see cref="T:System.Xaml.XamlType" /> for the item type that is used by the <see langword="Add" /> method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b37f8-167">針對與集合或字典相關的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />，傳回相關的 <see langword="Add" /> 方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b37f8-167">Returns the relevant <see langword="Add" /> method for a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> that is relevant to a collection or dictionary.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b37f8-168">
            <see langword="Add" /> 方法的 CLR <see cref="T:System.Reflection.MethodInfo" /> 資訊，或 Null。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b37f8-168">CLR <see cref="T:System.Reflection.MethodInfo" /> information for the <see langword="Add" /> method, or null.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b37f8-169">此方法應傳回`null`的情況下其中<xref:System.Xaml.XamlType>這個<xref:System.Xaml.Schema.XamlTypeInvoker>不是可寫入的集合或字典。</span><span class="sxs-lookup"><span data-stu-id="b37f8-169">This method should return `null` for cases where the <xref:System.Xaml.XamlType> for this <xref:System.Xaml.Schema.XamlTypeInvoker> is not a writeable collection or dictionary.</span></span> <span data-ttu-id="b37f8-170">具體而言，應傳回`null`的情況下其中<xref:System.Xaml.XamlType.LookupCollectionKind%2A?displayProperty=nameWithType>傳回`None`。</span><span class="sxs-lookup"><span data-stu-id="b37f8-170">Specifically, should return `null` for cases where <xref:System.Xaml.XamlType.LookupCollectionKind%2A?displayProperty=nameWithType> returns `None`.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="b37f8-171">如果您未存取完全受信任的 XAML 類型系統，此方法有可能會報告 false<xref:System.Reflection.MethodInfo>給呼叫端的資訊。</span><span class="sxs-lookup"><span data-stu-id="b37f8-171">If you are not accessing a fully trusted XAML type system, this method has the potential to report false <xref:System.Reflection.MethodInfo> information to callers.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b37f8-172">
            <paramref name="contentType" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b37f8-172">
              <paramref name="contentType" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="b37f8-173">基底實作會傳回<see langword="null" />的情況下其中<see cref="T:System.Xaml.Schema.XamlTypeInvoker" />根據未知<see cref="T:System.Xaml.XamlType" />，其中包含案例 where<see cref="P:System.Xaml.XamlType.UnderlyingType" />的<see cref="T:System.Xaml.XamlType" />是<see langword="null" />。</span>
            <span class="sxs-lookup">
              <span data-stu-id="b37f8-173">The base implementation returns <see langword="null" /> for cases where a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> is based on an unknown <see cref="T:System.Xaml.XamlType" />, which includes cases where the <see cref="P:System.Xaml.XamlType.UnderlyingType" /> of the <see cref="T:System.Xaml.XamlType" /> is <see langword="null" />.</span>
            </span>
            <span data-ttu-id="b37f8-174">它也會傳回<see langword="null" />如果<see cref="P:System.Xaml.XamlType.ItemType" />是<see langword="null" />。</span>
            <span class="sxs-lookup">
              <span data-stu-id="b37f8-174">It also returns <see langword="null" /> if <see cref="P:System.Xaml.XamlType.ItemType" /> is <see langword="null" />.</span>
            </span>
            <span data-ttu-id="b37f8-175">XAML 集合可能會有一個以上<see langword="Add" />方法，因為 XAML 集合可能可以支援多個內容類型 (請參閱<see cref="P:System.Xaml.XamlType.AllowedContentTypes" />，或參閱<see cref="T:System.Windows.Markup.ContentWrapperAttribute" />一個實作，這個概念，在 WPF 中有關)。</span>
            <span class="sxs-lookup">
              <span data-stu-id="b37f8-175">XAML collections potentially have more than one <see langword="Add" /> method, because a XAML collection can potentially support more than one content type (see <see cref="P:System.Xaml.XamlType.AllowedContentTypes" />, or see <see cref="T:System.Windows.Markup.ContentWrapperAttribute" /> for information about one implementation of this concept in WPF).</span>
            </span>
            <span data-ttu-id="b37f8-176">預設實作會使用內部邏輯傳回最符合項目，並根據所提供的類型和簽章<paramref name="contentType" />。</span>
            <span class="sxs-lookup">
              <span data-stu-id="b37f8-176">The default implementation uses internal logic to return the best match based on the signatures and the type of the supplied <paramref name="contentType" />.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetEnumeratorMethod">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodInfo GetEnumeratorMethod ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetEnumeratorMethod() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnumeratorMethod () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetEnumeratorMethod();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b37f8-177">傳回物件，這個物件表示可列舉項目的方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b37f8-177">Returns an object representing a method that can enumerate over items.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b37f8-178">列舉程式方法的 <see cref="T:System.Reflection.MethodInfo" />，或 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b37f8-178">
              <see cref="T:System.Reflection.MethodInfo" /> for an enumerator method, or <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b37f8-179">應傳回`null`的情況下其中<xref:System.Xaml.XamlType.LookupCollectionKind%2A?displayProperty=nameWithType>傳回`None`。</span><span class="sxs-lookup"><span data-stu-id="b37f8-179">Should return `null` for cases where <xref:System.Xaml.XamlType.LookupCollectionKind%2A?displayProperty=nameWithType> returns `None`.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="b37f8-180">如果您未存取完全受信任的 XAML 類型系統，此方法有可能會報告 false<xref:System.Reflection.MethodInfo>給呼叫端的資訊。</span><span class="sxs-lookup"><span data-stu-id="b37f8-180">If you are not accessing a fully trusted XAML type system, this method has the potential to report false <xref:System.Reflection.MethodInfo> information to callers.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="b37f8-181">基底實作會呼叫的內部協助程式方法。</span>
            <span class="sxs-lookup">
              <span data-stu-id="b37f8-181">The base implementation calls an internal helper method.</span>
            </span>
            <span data-ttu-id="b37f8-182">傳回該協助程式<see langword="null" />的情況下其中<see cref="T:System.Xaml.Schema.XamlTypeInvoker" />根據未知<see cref="T:System.Xaml.XamlType" />，其中包括狀況下<see cref="P:System.Xaml.XamlType.UnderlyingType" />的<see cref="T:System.Xaml.XamlType" />是<see langword="null" />。</span>
            <span class="sxs-lookup">
              <span data-stu-id="b37f8-182">That helper returns <see langword="null" /> for cases where a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> is based on an unknown <see cref="T:System.Xaml.XamlType" />, which includes cases where the <see cref="P:System.Xaml.XamlType.UnderlyingType" /> of the <see cref="T:System.Xaml.XamlType" /> is <see langword="null" />.</span>
            </span>
            <span data-ttu-id="b37f8-183">它也會傳回<see langword="null" />的情況下其中<see cref="M:System.Xaml.XamlType.LookupCollectionKind" />傳回<see langword="None" />。</span>
            <span class="sxs-lookup">
              <span data-stu-id="b37f8-183">It also returns <see langword="null" /> for cases where <see cref="M:System.Xaml.XamlType.LookupCollectionKind" /> returns <see langword="None" />.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetItems">
      <MemberSignature Language="C#" Value="public virtual System.Collections.IEnumerator GetItems (object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetItems(object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetItems (instance As Object) As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IEnumerator ^ GetItems(System::Object ^ instance);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance">
          <span data-ttu-id="b37f8-184">
            <see cref="T:System.Xaml.XamlType" /> (用於建構這個 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />) 所指定之類型的執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b37f8-184">An instance of the type specified by the <see cref="T:System.Xaml.XamlType" /> used for constructing this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b37f8-185">傳回表示項目集的 <see cref="T:System.Collections.IEnumerator" /> 物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b37f8-185">Returns an <see cref="T:System.Collections.IEnumerator" /> object representing the set of items.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b37f8-186">
            <see cref="T:System.Collections.IEnumerator" /> 物件，或 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b37f8-186">An <see cref="T:System.Collections.IEnumerator" /> object, or <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="b37f8-187">在以未知 <see cref="T:System.Xaml.XamlType" /> 為根據的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 上，叫用這個方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b37f8-187">Invoked this method on a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> that is based on an unknown <see cref="T:System.Xaml.XamlType" />.</span>
          </span>
          <span data-ttu-id="b37f8-188">**-或-**</span>
          <span class="sxs-lookup">
            <span data-stu-id="b37f8-188">**-or-**</span>
          </span>
          <span data-ttu-id="b37f8-189">在 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 上叫用這個方法，所在的相關型別不是集合或字典。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b37f8-189">Invoked this method on a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> where the relevant type is not a collection or dictionary.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b37f8-190">
            <paramref name="instance" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b37f8-190">
              <paramref name="instance" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="b37f8-191">基底實作都會呼叫內部協助程式<c>ThrowIfUnknown</c>。</span>
            <span class="sxs-lookup">
              <span data-stu-id="b37f8-191">The base implementation includes a call to the internal helper <c>ThrowIfUnknown</c>.</span>
            </span>
            <span data-ttu-id="b37f8-192">這個 helper 一律會擲回的情況下其中<see cref="T:System.Xaml.Schema.XamlTypeInvoker" />根據未知<see cref="T:System.Xaml.XamlType" />，其中包括狀況下<see cref="P:System.Xaml.XamlType.UnderlyingType" />的<see cref="T:System.Xaml.XamlType" />是<see langword="null" />。</span>
            <span class="sxs-lookup">
              <span data-stu-id="b37f8-192">This helper always throws for cases where a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> is based on an unknown <see cref="T:System.Xaml.XamlType" />, which includes cases where the <see cref="P:System.Xaml.XamlType.UnderlyingType" /> of the <see cref="T:System.Xaml.XamlType" /> is <see langword="null" />.</span>
            </span>
            <span data-ttu-id="b37f8-193">基底實作不一定要使用自己<see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod" />實作。</span>
            <span class="sxs-lookup">
              <span data-stu-id="b37f8-193">The base implementation does not necessarily use its own <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod" /> implementation.</span>
            </span>
            <span data-ttu-id="b37f8-194">首先，轉型<paramref name="instance" />至<see cref="T:System.Collections.IEnumerable" />嘗試。</span>
            <span class="sxs-lookup">
              <span data-stu-id="b37f8-194">First, a cast of <paramref name="instance" /> to <see cref="T:System.Collections.IEnumerable" /> is attempted.</span>
            </span>
            <span data-ttu-id="b37f8-195">如果成功的話，呼叫<see cref="M:System.Collections.IEnumerable.GetEnumerator" />進行和傳回值的方法會傳回。</span>
            <span class="sxs-lookup">
              <span data-stu-id="b37f8-195">If this succeeds, a call to <see cref="M:System.Collections.IEnumerable.GetEnumerator" /> is made and the method returns that return value.</span>
            </span>
            <span data-ttu-id="b37f8-196">否則，基底實作會使用 CLR<see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" />叫用基礎<see langword="GetEnumerator" />方法，如取自呼叫<see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod" />這個<paramref name="" /><see cref="T:System.Xaml.Schema.XamlTypeInvoker" />。</span>
            <span class="sxs-lookup">
              <span data-stu-id="b37f8-196">Otherwise, the base implementation uses CLR <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /> to invoke the underlying <see langword="GetEnumerator" /> method, as obtained from a call to <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod" /> for this <paramref name="" /><see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="SetMarkupExtensionHandler">
      <MemberSignature Language="C#" Value="public EventHandler&lt;System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt; SetMarkupExtensionHandler { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.EventHandler`1&lt;class System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt; SetMarkupExtensionHandler" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.Schema.XamlTypeInvoker.SetMarkupExtensionHandler" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SetMarkupExtensionHandler As EventHandler(Of XamlSetMarkupExtensionEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property EventHandler&lt;System::Windows::Markup::XamlSetMarkupExtensionEventArgs ^&gt; ^ SetMarkupExtensionHandler { EventHandler&lt;System::Windows::Markup::XamlSetMarkupExtensionEventArgs ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b37f8-197">取得當 <see cref="T:System.Xaml.XamlObjectWriter" /> 呼叫實作的 <see cref="T:System.Windows.Markup.MarkupExtension" /> 時，所要使用的處理常式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b37f8-197">Gets the handler to use when a <see cref="T:System.Xaml.XamlObjectWriter" /> calls into an implemented <see cref="T:System.Windows.Markup.MarkupExtension" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b37f8-198">處理這個案例的處理常式實作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b37f8-198">A handler implementation that handles this case.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b37f8-199">此事件處理常式根據<xref:System.EventHandler%601>限制<xref:System.Windows.Markup.XamlSetMarkupExtensionEventArgs>事件資料。</span><span class="sxs-lookup"><span data-stu-id="b37f8-199">The event handler is based on <xref:System.EventHandler%601> constrained with <xref:System.Windows.Markup.XamlSetMarkupExtensionEventArgs> event data.</span></span>  
  
 <span data-ttu-id="b37f8-200">傳回的值會叫用<xref:System.Xaml.XamlType.LookupSetMarkupExtensionHandler%2A>行為<xref:System.Xaml.XamlType>，<xref:System.Xaml.Schema.XamlTypeInvoker>為基礎。</span><span class="sxs-lookup"><span data-stu-id="b37f8-200">The value returned invokes the <xref:System.Xaml.XamlType.LookupSetMarkupExtensionHandler%2A> behavior of the <xref:System.Xaml.XamlType> that the <xref:System.Xaml.Schema.XamlTypeInvoker> is based on.</span></span>  
  
 <span data-ttu-id="b37f8-201">傳回值是`null`如<xref:System.Xaml.Schema.XamlTypeInvoker>根據未知<xref:System.Xaml.XamlType>。</span><span class="sxs-lookup"><span data-stu-id="b37f8-201">The return value is `null` for a <xref:System.Xaml.Schema.XamlTypeInvoker> that is based on an unknown <xref:System.Xaml.XamlType>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetTypeConverterHandler">
      <MemberSignature Language="C#" Value="public EventHandler&lt;System.Windows.Markup.XamlSetTypeConverterEventArgs&gt; SetTypeConverterHandler { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.EventHandler`1&lt;class System.Windows.Markup.XamlSetTypeConverterEventArgs&gt; SetTypeConverterHandler" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.Schema.XamlTypeInvoker.SetTypeConverterHandler" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SetTypeConverterHandler As EventHandler(Of XamlSetTypeConverterEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property EventHandler&lt;System::Windows::Markup::XamlSetTypeConverterEventArgs ^&gt; ^ SetTypeConverterHandler { EventHandler&lt;System::Windows::Markup::XamlSetTypeConverterEventArgs ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Markup.XamlSetTypeConverterEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b37f8-202">取得當 <see cref="T:System.Xaml.XamlObjectWriter" /> 呼叫 CLR 實作的 <see cref="T:System.ComponentModel.TypeConverter" /> 時，所要使用的處理常式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b37f8-202">Gets the handler to use when a <see cref="T:System.Xaml.XamlObjectWriter" /> calls into a CLR-implemented <see cref="T:System.ComponentModel.TypeConverter" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b37f8-203">處理這個案例的處理常式實作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b37f8-203">A handler implementation that handles this case.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b37f8-204">此事件處理常式根據<xref:System.EventHandler%601>限制<xref:System.Windows.Markup.XamlSetMarkupExtensionEventArgs>事件資料。</span><span class="sxs-lookup"><span data-stu-id="b37f8-204">The event handler is based on <xref:System.EventHandler%601> constrained with <xref:System.Windows.Markup.XamlSetMarkupExtensionEventArgs> event data.</span></span>  
  
 <span data-ttu-id="b37f8-205">傳回的值會叫用<xref:System.Xaml.XamlType.LookupSetTypeConverterHandler%2A>行為<xref:System.Xaml.XamlType>，<xref:System.Xaml.Schema.XamlTypeInvoker>為基礎。</span><span class="sxs-lookup"><span data-stu-id="b37f8-205">The value returned invokes the <xref:System.Xaml.XamlType.LookupSetTypeConverterHandler%2A> behavior of the <xref:System.Xaml.XamlType> that the <xref:System.Xaml.Schema.XamlTypeInvoker> is based on.</span></span>  
  
 <span data-ttu-id="b37f8-206">傳回值是`null`如<xref:System.Xaml.Schema.XamlTypeInvoker>根據未知<xref:System.Xaml.XamlType>。</span><span class="sxs-lookup"><span data-stu-id="b37f8-206">The return value is `null` for a <xref:System.Xaml.Schema.XamlTypeInvoker> that is based on an unknown <xref:System.Xaml.XamlType>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnknownInvoker">
      <MemberSignature Language="C#" Value="public static System.Xaml.Schema.XamlTypeInvoker UnknownInvoker { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Xaml.Schema.XamlTypeInvoker UnknownInvoker" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property UnknownInvoker As XamlTypeInvoker" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Xaml::Schema::XamlTypeInvoker ^ UnknownInvoker { System::Xaml::Schema::XamlTypeInvoker ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlTypeInvoker</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b37f8-207">提供靜態值，這個值表示未完整實作的未知 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b37f8-207">Provides a static value that represents an unknown, not fully implemented <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b37f8-208">靜態值，表示未完整實作的未知 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b37f8-208">A static value that represents an unknown, not fully implemented <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b37f8-209">提供此值<xref:System.Xaml.Schema.XamlTypeInvoker>System.Xaml 參數定義 API 通常會導致擲回例外狀況呼叫的程式碼。</span><span class="sxs-lookup"><span data-stu-id="b37f8-209">Supplying this value for a <xref:System.Xaml.Schema.XamlTypeInvoker> parameter of System.Xaml defined API will typically cause the called code to throw exceptions.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>