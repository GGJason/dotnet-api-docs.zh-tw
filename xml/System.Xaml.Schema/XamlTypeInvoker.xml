<Type Name="XamlTypeInvoker" FullName="System.Xaml.Schema.XamlTypeInvoker">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="bd266704ee3fe75b84f3b0e3aa578f64c1e8009d" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36445040" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XamlTypeInvoker" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XamlTypeInvoker extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xaml.Schema.XamlTypeInvoker" />
  <TypeSignature Language="VB.NET" Value="Public Class XamlTypeInvoker" />
  <TypeSignature Language="C++ CLI" Value="public ref class XamlTypeInvoker" />
  <TypeSignature Language="F#" Value="type XamlTypeInvoker = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供延伸點，這個延伸點可透過反映和建構函式以外的技術來建構 XAML 型別的執行個體。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 目的<xref:System.Xaml.Schema.XamlTypeInvoker>是啟用可延伸的 XAML 類型系統、 架構以及工作執行時間，不會依賴完全 CLR 功能，例如 CLR 屬性，透過反映資訊<xref:System.Type>和<xref:System.Reflection.MemberInfo>，依此類推。 子類別<xref:System.Xaml.Schema.XamlTypeInvoker>可用做為輸入參數的替代的 XAML 結構描述類別的建構函式例如<xref:System.Xaml.XamlType>。 您的子類別<xref:System.Xaml.XamlType>並傳遞<xref:System.Xaml.Schema.XamlTypeInvoker>透過基底建構函式。 以及定義<xref:System.Xaml.Schema.XamlTypeInvoker>建構函式，您也必須提供的覆寫至少部分`Lookup`方法<xref:System.Xaml.XamlType>。  
  
 <xref:System.Xaml.Schema.XamlTypeInvoker> 其預設實作。 預設實作會遵循類似的模型至 XAML 結構描述類型的預設實作<xref:System.Xaml.XamlType>和<xref:System.Xaml.XamlMember>: CLR 型別系統用於具現化、 值和查閱而言，包括使用 CLR 屬性<xref:System.Type>和<xref:System.Reflection.MemberInfo>，依此類推。  
  
 <xref:System.Xaml.Schema.XamlTypeInvoker> 提供基本的具現化的方法 (<xref:System.Xaml.Schema.XamlTypeInvoker.CreateInstance%2A>) 和相關類型的方法其中<xref:System.Xaml.XamlType>代表集合、 字典或陣列 (<xref:System.Xaml.Schema.XamlTypeInvoker.AddToCollection%2A>;<xref:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary%2A>;<xref:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod%2A>;<xref:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod%2A>;<xref:System.Xaml.Schema.XamlTypeInvoker.GetItems%2A>).  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 類別的新執行個體。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected XamlTypeInvoker ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; XamlTypeInvoker();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 預設實作是空的。  
  
 這個建構函式是在內部叫用提供的值<xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A>。 如<xref:System.Xaml.Schema.XamlTypeInvoker>子類別，請使用<xref:System.Xaml.Schema.XamlTypeInvoker.%23ctor%28System.Xaml.XamlType%29>建構簽章或提供的覆寫呼叫<xref:System.Xaml.Schema.XamlTypeInvoker.%23ctor%28System.Xaml.XamlType%29>為基底。 提供<xref:System.Xaml.XamlType>實作的預設模式 where<xref:System.Xaml.Schema.XamlTypeInvoker>是不變。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlTypeInvoker (System.Xaml.XamlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xaml.XamlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.#ctor(System.Xaml.XamlType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (type As XamlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlTypeInvoker(System::Xaml::XamlType ^ type);" />
      <MemberSignature Language="F#" Value="new System.Xaml.Schema.XamlTypeInvoker : System.Xaml.XamlType -&gt; System.Xaml.Schema.XamlTypeInvoker" Usage="new System.Xaml.Schema.XamlTypeInvoker type" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="type" Type="System.Xaml.XamlType" />
      </Parameters>
      <Docs>
        <param name="type">特定 XAML 型別與這個 <see cref="T:System.Xaml.XamlType" /> 相關的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 值。</param>
        <summary>根據提供的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />，初始化 <see cref="T:System.Xaml.XamlType" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個建構函式會呼叫在內部根據<xref:System.Xaml.XamlType>其中<xref:System.Xaml.Schema.XamlTypeInvoker>用於建構。 `type`此處提供適用於所有其他方法呼叫<xref:System.Xaml.Schema.XamlTypeInvoker>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="type" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="AddToCollection">
      <MemberSignature Language="C#" Value="public virtual void AddToCollection (object instance, object item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddToCollection(object instance, object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddToCollection (instance As Object, item As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddToCollection(System::Object ^ instance, System::Object ^ item);" />
      <MemberSignature Language="F#" Value="abstract member AddToCollection : obj * obj -&gt; unit&#xA;override this.AddToCollection : obj * obj -&gt; unit" Usage="xamlTypeInvoker.AddToCollection (instance, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance">
          <see cref="T:System.Xaml.XamlType" /> (用於建構這個 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />) 所指定之類型的執行個體。</param>
        <param name="item">要新增的項目。</param>
        <summary>將提供的項目加入至與這個 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 相關之類型的執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您只應該呼叫這個方法在<xref:System.Xaml.XamlType>，表示集合。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">在以未知 <see cref="T:System.Xaml.XamlType" /> 為根據的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 上，叫用這個方法。  **-或-**  在相關型別不是集合的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 上叫用此方法。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="instance" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.Xaml.XamlSchemaException">這個 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 的 <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> 會傳回 <see langword="null" />。</exception>
        <block subset="none" type="overrides">
          <para>基底實作都會呼叫內部協助程式<c>ThrowIfUnknown</c>。這個 helper 一律會擲回的情況下其中<see cref="T:System.Xaml.Schema.XamlTypeInvoker" />根據未知<see cref="T:System.Xaml.XamlType" />，其中包括狀況下<see cref="P:System.Xaml.XamlType.UnderlyingType" />的<see cref="T:System.Xaml.XamlType" />是<see langword="null" />。就內部而言，基底實作會呼叫<see cref="P:System.Xaml.XamlType.IsCollection" />，而且會擲回，如果結果為<see langword="false" />。基底實作不一定要使用自己<see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" />實作。首先，轉型<paramref name="instance" />至<see cref="T:System.Collections.IList" />嘗試。如果成功的話，呼叫<see cref="M:System.Collections.IList.Add(System.Object)" />進行而且方法會傳回。否則，基底實作會使用 CLR<see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" />叫用基礎<see langword="Add" />方法，如取自呼叫<see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" />這個<paramref name="" /><see cref="T:System.Xaml.Schema.XamlTypeInvoker" />。基底實作中沒有例外狀況會在此層級如果引發<paramref name="item" />是<see langword="null" />。仍有可能，基礎<see langword="Add" />方法會引發例外狀況時叫用。可能會有其他執行的階段例外狀況如果<see cref="P:System.Xaml.XamlType.ItemType" />不會傳回有效的結果。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="AddToDictionary">
      <MemberSignature Language="C#" Value="public virtual void AddToDictionary (object instance, object key, object item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddToDictionary(object instance, object key, object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddToDictionary (instance As Object, key As Object, item As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddToDictionary(System::Object ^ instance, System::Object ^ key, System::Object ^ item);" />
      <MemberSignature Language="F#" Value="abstract member AddToDictionary : obj * obj * obj -&gt; unit&#xA;override this.AddToDictionary : obj * obj * obj -&gt; unit" Usage="xamlTypeInvoker.AddToDictionary (instance, key, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance">
          <see cref="T:System.Xaml.XamlType" /> (用於建構這個 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />) 所指定之類型的執行個體。</param>
        <param name="key">要加入項目的字典索引鍵。</param>
        <param name="item">要加入的項目值。</param>
        <summary>將提供的索引鍵和項目值加入至與這個 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 相關之類型的執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您只應該呼叫這個方法在<xref:System.Xaml.XamlType>表示字典。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">在以未知 <see cref="T:System.Xaml.XamlType" /> 為根據的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 上，叫用這個方法。  **-或-**  在相關型別不是字典的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 上叫用此方法。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="instance" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.Xaml.XamlSchemaException">這個 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 的 <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> 會傳回 <see langword="null" />。</exception>
        <block subset="none" type="overrides">
          <para>基底實作都會呼叫內部協助程式<c>ThrowIfUnknown</c>。這個 helper 一律會擲回的情況下其中<see cref="T:System.Xaml.Schema.XamlTypeInvoker" />根據未知<see cref="T:System.Xaml.XamlType" />，其中包括狀況下<see cref="P:System.Xaml.XamlType.UnderlyingType" />的<see cref="T:System.Xaml.XamlType" />是<see langword="null" />。就內部而言，基底實作會呼叫<see cref="P:System.Xaml.XamlType.IsDictionary" />，而且會擲回，如果結果為<see langword="false" />。基底實作不一定要使用自己<see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" />實作。首先，轉型<paramref name="instance" />至<see cref="T:System.Collections.IDictionary" />嘗試。如果成功的話，呼叫<see cref="M:System.Collections.IDictionary.Add(System.Object,System.Object)" />進行而且方法會傳回。否則，基底實作會使用 CLR<see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" />叫用基礎<see langword="Add" />方法，如取自呼叫<see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" />這個<paramref name="" /><see cref="T:System.Xaml.Schema.XamlTypeInvoker" />。基底實作中沒有例外狀況會在此層級如果引發<paramref name="item" />或<paramref name="key" />是<see langword="null" />。仍有可能，基礎<see langword="Add" />方法會引發例外狀況時叫用。可能會有其他執行的階段例外狀況如果<see cref="P:System.Xaml.XamlType.ItemType" />不會傳回有效的結果。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public virtual object CreateInstance (object[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object CreateInstance(object[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.CreateInstance(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateInstance (arguments As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ CreateInstance(cli::array &lt;System::Object ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="abstract member CreateInstance : obj[] -&gt; obj&#xA;override this.CreateInstance : obj[] -&gt; obj" Usage="xamlTypeInvoker.CreateInstance arguments" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arguments" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="arguments">為執行個體提供 <see langword="x:ConstructorArgs" /> 的物件陣列。 對於不需要或不使用 <see langword="null" /> 的型別，可能為 <see langword="x:ConstructorArgs" />。</param>
        <summary>根據這個 <see cref="T:System.Xaml.XamlType" /> 之由建構啟始的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />，建立物件執行個體。</summary>
        <returns>已根據這個 <see cref="T:System.Xaml.XamlType" /> 之由建構啟始的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 所建立的執行個體。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.MissingMethodException">無法解析建構函式。</exception>
        <block subset="none" type="overrides">
          <para>基底實作都會呼叫內部協助程式<c>ThrowIfUnknown</c>。這個 helper 一律會擲回的情況下其中<see cref="T:System.Xaml.Schema.XamlTypeInvoker" />根據未知<see cref="T:System.Xaml.XamlType" />，其中包括狀況下<see cref="P:System.Xaml.XamlType.UnderlyingType" />的<see cref="T:System.Xaml.XamlType" />是<see langword="null" />。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetAddMethod">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodInfo GetAddMethod (System.Xaml.XamlType contentType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetAddMethod(class System.Xaml.XamlType contentType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAddMethod (contentType As XamlType) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetAddMethod(System::Xaml::XamlType ^ contentType);" />
      <MemberSignature Language="F#" Value="abstract member GetAddMethod : System.Xaml.XamlType -&gt; System.Reflection.MethodInfo&#xA;override this.GetAddMethod : System.Xaml.XamlType -&gt; System.Reflection.MethodInfo" Usage="xamlTypeInvoker.GetAddMethod contentType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contentType" Type="System.Xaml.XamlType" />
      </Parameters>
      <Docs>
        <param name="contentType">
          <see langword="Add" /> 方法所使用項目型別的 <see cref="T:System.Xaml.XamlType" />。</param>
        <summary>針對與集合或字典相關的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />，傳回相關的 <see langword="Add" /> 方法。</summary>
        <returns>
          <see langword="Add" /> 方法的 CLR <see cref="T:System.Reflection.MethodInfo" /> 資訊，或 Null。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法應傳回`null`的情況下其中<xref:System.Xaml.XamlType>這個<xref:System.Xaml.Schema.XamlTypeInvoker>不是可寫入的集合或字典。 具體而言，應傳回`null`的情況下其中<xref:System.Xaml.XamlType.LookupCollectionKind%2A?displayProperty=nameWithType>傳回`None`。  
  
> [!IMPORTANT]
>  如果您未存取完全受信任的 XAML 類型系統，此方法有可能會報告 false<xref:System.Reflection.MethodInfo>給呼叫端的資訊。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="contentType" /> 為 <see langword="null" />。</exception>
        <block subset="none" type="overrides">
          <para>基底實作會傳回<see langword="null" />的情況下其中<see cref="T:System.Xaml.Schema.XamlTypeInvoker" />根據未知<see cref="T:System.Xaml.XamlType" />，其中包含案例 where<see cref="P:System.Xaml.XamlType.UnderlyingType" />的<see cref="T:System.Xaml.XamlType" />是<see langword="null" />。它也會傳回<see langword="null" />如果<see cref="P:System.Xaml.XamlType.ItemType" />是<see langword="null" />。XAML 集合可能會有一個以上<see langword="Add" />方法，因為 XAML 集合可能可以支援多個內容類型 (請參閱<see cref="P:System.Xaml.XamlType.AllowedContentTypes" />，或參閱<see cref="T:System.Windows.Markup.ContentWrapperAttribute" />一個實作，這個概念，在 WPF 中有關)。預設實作會使用內部邏輯傳回最符合項目，並根據所提供的類型和簽章<paramref name="contentType" />。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetEnumeratorMethod">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodInfo GetEnumeratorMethod ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetEnumeratorMethod() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnumeratorMethod () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetEnumeratorMethod();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumeratorMethod : unit -&gt; System.Reflection.MethodInfo&#xA;override this.GetEnumeratorMethod : unit -&gt; System.Reflection.MethodInfo" Usage="xamlTypeInvoker.GetEnumeratorMethod " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回物件，這個物件表示可列舉項目的方法。</summary>
        <returns>列舉程式方法的 <see cref="T:System.Reflection.MethodInfo" />，或 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 應傳回`null`的情況下其中<xref:System.Xaml.XamlType.LookupCollectionKind%2A?displayProperty=nameWithType>傳回`None`。  
  
> [!IMPORTANT]
>  如果您未存取完全受信任的 XAML 類型系統，此方法有可能會報告 false<xref:System.Reflection.MethodInfo>給呼叫端的資訊。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>基底實作會呼叫的內部協助程式方法。傳回該協助程式<see langword="null" />的情況下其中<see cref="T:System.Xaml.Schema.XamlTypeInvoker" />根據未知<see cref="T:System.Xaml.XamlType" />，其中包括狀況下<see cref="P:System.Xaml.XamlType.UnderlyingType" />的<see cref="T:System.Xaml.XamlType" />是<see langword="null" />。它也會傳回<see langword="null" />的情況下其中<see cref="M:System.Xaml.XamlType.LookupCollectionKind" />傳回<see langword="None" />。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetItems">
      <MemberSignature Language="C#" Value="public virtual System.Collections.IEnumerator GetItems (object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetItems(object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetItems (instance As Object) As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IEnumerator ^ GetItems(System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="abstract member GetItems : obj -&gt; System.Collections.IEnumerator&#xA;override this.GetItems : obj -&gt; System.Collections.IEnumerator" Usage="xamlTypeInvoker.GetItems instance" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance">
          <see cref="T:System.Xaml.XamlType" /> (用於建構這個 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />) 所指定之類型的執行個體。</param>
        <summary>傳回表示項目集的 <see cref="T:System.Collections.IEnumerator" /> 物件。</summary>
        <returns>
          <see cref="T:System.Collections.IEnumerator" /> 物件，或 <see langword="null" />。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">在以未知 <see cref="T:System.Xaml.XamlType" /> 為根據的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 上，叫用這個方法。  **-或-**  在相關型別不是集合或字典的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 上叫用此方法。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="instance" /> 為 <see langword="null" />。</exception>
        <block subset="none" type="overrides">
          <para>基底實作都會呼叫內部協助程式<c>ThrowIfUnknown</c>。這個 helper 一律會擲回的情況下其中<see cref="T:System.Xaml.Schema.XamlTypeInvoker" />根據未知<see cref="T:System.Xaml.XamlType" />，其中包括狀況下<see cref="P:System.Xaml.XamlType.UnderlyingType" />的<see cref="T:System.Xaml.XamlType" />是<see langword="null" />。基底實作不一定要使用自己<see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod" />實作。首先，轉型<paramref name="instance" />至<see cref="T:System.Collections.IEnumerable" />嘗試。如果成功的話，呼叫<see cref="M:System.Collections.IEnumerable.GetEnumerator" />進行和傳回值的方法會傳回。否則，基底實作會使用 CLR<see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" />叫用基礎<see langword="GetEnumerator" />方法，如取自呼叫<see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod" />這個<paramref name="" /><see cref="T:System.Xaml.Schema.XamlTypeInvoker" />。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="SetMarkupExtensionHandler">
      <MemberSignature Language="C#" Value="public EventHandler&lt;System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt; SetMarkupExtensionHandler { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.EventHandler`1&lt;class System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt; SetMarkupExtensionHandler" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.Schema.XamlTypeInvoker.SetMarkupExtensionHandler" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SetMarkupExtensionHandler As EventHandler(Of XamlSetMarkupExtensionEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property EventHandler&lt;System::Windows::Markup::XamlSetMarkupExtensionEventArgs ^&gt; ^ SetMarkupExtensionHandler { EventHandler&lt;System::Windows::Markup::XamlSetMarkupExtensionEventArgs ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SetMarkupExtensionHandler : EventHandler&lt;System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt;" Usage="System.Xaml.Schema.XamlTypeInvoker.SetMarkupExtensionHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得當 <see cref="T:System.Xaml.XamlObjectWriter" /> 呼叫實作的 <see cref="T:System.Windows.Markup.MarkupExtension" /> 時，所要使用的處理常式。</summary>
        <value>處理這個案例的處理常式實作。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此事件處理常式根據<xref:System.EventHandler%601>限制<xref:System.Windows.Markup.XamlSetMarkupExtensionEventArgs>事件資料。  
  
 傳回的值會叫用<xref:System.Xaml.XamlType.LookupSetMarkupExtensionHandler%2A>行為<xref:System.Xaml.XamlType>，<xref:System.Xaml.Schema.XamlTypeInvoker>為基礎。  
  
 傳回值是`null`如<xref:System.Xaml.Schema.XamlTypeInvoker>根據未知<xref:System.Xaml.XamlType>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetTypeConverterHandler">
      <MemberSignature Language="C#" Value="public EventHandler&lt;System.Windows.Markup.XamlSetTypeConverterEventArgs&gt; SetTypeConverterHandler { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.EventHandler`1&lt;class System.Windows.Markup.XamlSetTypeConverterEventArgs&gt; SetTypeConverterHandler" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.Schema.XamlTypeInvoker.SetTypeConverterHandler" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SetTypeConverterHandler As EventHandler(Of XamlSetTypeConverterEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property EventHandler&lt;System::Windows::Markup::XamlSetTypeConverterEventArgs ^&gt; ^ SetTypeConverterHandler { EventHandler&lt;System::Windows::Markup::XamlSetTypeConverterEventArgs ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SetTypeConverterHandler : EventHandler&lt;System.Windows.Markup.XamlSetTypeConverterEventArgs&gt;" Usage="System.Xaml.Schema.XamlTypeInvoker.SetTypeConverterHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Markup.XamlSetTypeConverterEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得當 <see cref="T:System.Xaml.XamlObjectWriter" /> 呼叫 CLR 實作的 <see cref="T:System.ComponentModel.TypeConverter" /> 時，所要使用的處理常式。</summary>
        <value>處理這個案例的處理常式實作。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此事件處理常式根據<xref:System.EventHandler%601>限制<xref:System.Windows.Markup.XamlSetMarkupExtensionEventArgs>事件資料。  
  
 傳回的值會叫用<xref:System.Xaml.XamlType.LookupSetTypeConverterHandler%2A>行為<xref:System.Xaml.XamlType>，<xref:System.Xaml.Schema.XamlTypeInvoker>為基礎。  
  
 傳回值是`null`如<xref:System.Xaml.Schema.XamlTypeInvoker>根據未知<xref:System.Xaml.XamlType>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnknownInvoker">
      <MemberSignature Language="C#" Value="public static System.Xaml.Schema.XamlTypeInvoker UnknownInvoker { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Xaml.Schema.XamlTypeInvoker UnknownInvoker" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property UnknownInvoker As XamlTypeInvoker" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Xaml::Schema::XamlTypeInvoker ^ UnknownInvoker { System::Xaml::Schema::XamlTypeInvoker ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UnknownInvoker : System.Xaml.Schema.XamlTypeInvoker" Usage="System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlTypeInvoker</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>提供靜態值，這個值表示未完整實作的未知 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />。</summary>
        <value>靜態值，表示未完整實作的未知 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 提供此值<xref:System.Xaml.Schema.XamlTypeInvoker>System.Xaml 參數定義 API 通常會導致擲回例外狀況呼叫的程式碼。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>