<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="XamlTypeInvoker.xml" source-language="en-US" target-language="zh-TW">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5504f5574033cb4de7a3c6a42e6208306d4dd86e5.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">504f5574033cb4de7a3c6a42e6208306d4dd86e5</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Xaml.Schema.XamlTypeInvoker">
          <source>Provides an extension point that can construct instances of a XAML type through techniques other than reflection and constructors.</source>
          <target state="translated">提供延伸點，這個延伸點可透過反映和建構函式以外的技術來建構 XAML 型別的執行個體。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.Schema.XamlTypeInvoker">
          <source>The purpose of <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> is to enable an extensible XAML type system, schema, and a working run time that does not rely as fully on CLR features such as CLR attributes, reflection information through <ph id="ph2">&lt;xref:System.Type&gt;</ph> and <ph id="ph3">&lt;xref:System.Reflection.MemberInfo&gt;</ph>, and so on.</source>
          <target state="translated">目的<ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph>是啟用可延伸的 XAML 類型系統、 架構以及工作執行時間，不會依賴完全 CLR 功能，例如 CLR 屬性，透過反映資訊<ph id="ph2">&lt;xref:System.Type&gt;</ph>和<ph id="ph3">&lt;xref:System.Reflection.MemberInfo&gt;</ph>，依此類推。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.Schema.XamlTypeInvoker">
          <source>Subclasses of <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> are used as input parameters for the alternate constructors of XAML schema classes such as <ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph>.</source>
          <target state="translated">子類別<ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph>可用做為輸入參數的替代的 XAML 結構描述類別的建構函式例如<ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.Schema.XamlTypeInvoker">
          <source>You subclass <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> and pass the <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> through to the base constructor.</source>
          <target state="translated">您的子類別<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>並傳遞<ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph>透過基底建構函式。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.Schema.XamlTypeInvoker">
          <source>Along with defining a <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> for the constructor, you must also provide overrides for at least some of the <ph id="ph2">`Lookup`</ph> methods of <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>.</source>
          <target state="translated">以及定義<ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph>建構函式，您也必須提供的覆寫至少部分<ph id="ph2">`Lookup`</ph>方法<ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.Schema.XamlTypeInvoker">
          <source><ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> has a default implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> 其預設實作。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.Schema.XamlTypeInvoker">
          <source>The default implementation follows a similar model to the default implementation of XAML schema types <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> and <ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph>: the CLR type system is used for instantiation, values and lookups, including using CLR attributes, <ph id="ph3">&lt;xref:System.Type&gt;</ph> and <ph id="ph4">&lt;xref:System.Reflection.MemberInfo&gt;</ph>, and so on.</source>
          <target state="translated">預設實作會遵循類似的模型至 XAML 結構描述類型的預設實作<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>和<ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph>: CLR 型別系統用於具現化、 值和查閱而言，包括使用 CLR 屬性<ph id="ph3">&lt;xref:System.Type&gt;</ph>和<ph id="ph4">&lt;xref:System.Reflection.MemberInfo&gt;</ph>，依此類推。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.Schema.XamlTypeInvoker">
          <source><ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> provides methods for basic instantiation (<ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.CreateInstance%2A&gt;</ph>) and methods that are relevant for types where the <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> represents a collection, dictionary or array (<ph id="ph4">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.AddToCollection%2A&gt;</ph>; <ph id="ph5">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary%2A&gt;</ph>; <ph id="ph6">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod%2A&gt;</ph>; <ph id="ph7">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod%2A&gt;</ph>; <ph id="ph8">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.GetItems%2A&gt;</ph>).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> 提供基本的具現化的方法 (<ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.CreateInstance%2A&gt;</ph>) 和相關類型的方法其中<ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>代表集合、 字典或陣列 (<ph id="ph4">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.AddToCollection%2A&gt;</ph>;<ph id="ph5">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary%2A&gt;</ph>;<ph id="ph6">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod%2A&gt;</ph>;<ph id="ph7">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod%2A&gt;</ph>;<ph id="ph8">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.GetItems%2A&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="T:System.Xaml.Schema.XamlTypeInvoker">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.#ctor">
          <source>The default implementation is empty.</source>
          <target state="translated">預設實作是空的。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.#ctor">
          <source>This constructor is invoked internally to provide a value for <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A&gt;</ph>.</source>
          <target state="translated">這個建構函式是在內部叫用提供的值<ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.#ctor">
          <source>For a <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> subclass, it is expected that you either use the <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.%23ctor%28System.Xaml.XamlType%29&gt;</ph> signature for construction or provide an override that calls <ph id="ph3">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.%23ctor%28System.Xaml.XamlType%29&gt;</ph> as base.</source>
          <target state="translated">如<ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph>子類別，請使用<ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.%23ctor%28System.Xaml.XamlType%29&gt;</ph>建構簽章或提供的覆寫呼叫<ph id="ph3">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.%23ctor%28System.Xaml.XamlType%29&gt;</ph>為基底。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.#ctor">
          <source>Providing the <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> implements a default pattern where <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> is immutable.</source>
          <target state="translated">提供<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>實作的預設模式 where<ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph>是不變。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.#ctor(System.Xaml.XamlType)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> value for the specific XAML type relevant to this <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</source>
          <target state="translated">特定 XAML 型別與這個 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 相關的 <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> 值。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.#ctor(System.Xaml.XamlType)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> class, based on a provided <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">根據提供的 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>，初始化 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.#ctor(System.Xaml.XamlType)">
          <source>This constructor is called internally based on the <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> where the <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> is used for construction.</source>
          <target state="translated">這個建構函式會呼叫在內部根據<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>其中<ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph>用於建構。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.#ctor(System.Xaml.XamlType)">
          <source>The <ph id="ph1">`type`</ph> provided here is relevant to all other method calls for <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`type`</ph>此處提供適用於所有其他方法呼叫<ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.#ctor(System.Xaml.XamlType)">
          <source><ph id="ph1">&lt;paramref name="type" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="type" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source>An instance of the type specified by the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> used for constructing this <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> (用於建構這個 <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>) 所指定之類型的執行個體。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source>The item to add.</source>
          <target state="translated">要新增的項目。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source>Adds the provided item to an instance of the type that is relevant to this <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</source>
          <target state="translated">將提供的項目加入至與這個 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> 相關之類型的執行個體。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source>You should only call this method on a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> that represents a collection.</source>
          <target state="translated">您只應該呼叫這個方法在<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>，表示集合。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source>Invoked this method on a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> that is based on an unknown <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">在以未知 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 為根據的 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> 上，叫用這個方法。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source><bpt id="p1">**</bpt>-or-<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>-或-<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source>Invoked this method on a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> where the relevant type is not a collection.</source>
          <target state="translated">在其中的相關類型不是集合的 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> 上，叫用這個方法。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source><ph id="ph1">&lt;paramref name="instance" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="instance" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source><ph id="ph1">&lt;see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /&gt;</ph> for this <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> returns <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">這個 <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> 的 <ph id="ph1">&lt;see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /&gt;</ph> 會傳回 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source>The base implementation includes a call to the internal helper <bpt id="p1">&lt;c&gt;</bpt>ThrowIfUnknown<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">基底實作都會呼叫內部協助程式<bpt id="p1">&lt;c&gt;</bpt>ThrowIfUnknown<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source>This helper always throws for cases where a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> is based on an unknown <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>, which includes cases where the <ph id="ph3">&lt;see cref="P:System.Xaml.XamlType.UnderlyingType" /&gt;</ph> of the <ph id="ph4">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> is <ph id="ph5">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">這個 helper 一律會擲回的情況下其中<ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>根據未知<ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>，其中包括狀況下<ph id="ph3">&lt;see cref="P:System.Xaml.XamlType.UnderlyingType" /&gt;</ph>的<ph id="ph4">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>是<ph id="ph5">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source>Internally, the base implementation calls <ph id="ph1">&lt;see cref="P:System.Xaml.XamlType.IsCollection" /&gt;</ph>, and throws if the result is <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">就內部而言，基底實作會呼叫<ph id="ph1">&lt;see cref="P:System.Xaml.XamlType.IsCollection" /&gt;</ph>，而且會擲回，如果結果為<ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source>The base implementation does not necessarily use its own <ph id="ph1">&lt;see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /&gt;</ph> implementation.</source>
          <target state="translated">基底實作不一定要使用自己<ph id="ph1">&lt;see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /&gt;</ph>實作。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source>First, a cast of <ph id="ph1">&lt;paramref name="instance" /&gt;</ph> to <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph> is attempted.</source>
          <target state="translated">首先，轉型<ph id="ph1">&lt;paramref name="instance" /&gt;</ph>至<ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph>嘗試。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source>If this succeeds, a call to <ph id="ph1">&lt;see cref="M:System.Collections.IList.Add(System.Object)" /&gt;</ph> is made and the method returns.</source>
          <target state="translated">如果成功的話，呼叫<ph id="ph1">&lt;see cref="M:System.Collections.IList.Add(System.Object)" /&gt;</ph>進行而且方法會傳回。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source>Otherwise, the base implementation uses CLR <ph id="ph1">&lt;see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /&gt;</ph> to invoke the underlying <ph id="ph2">&lt;see langword="Add" /&gt;</ph> method, as obtained from a call to <ph id="ph3">&lt;see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /&gt;</ph> for this <ph id="ph4">&lt;paramref name="" /&gt;</ph><ph id="ph5">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</source>
          <target state="translated">否則，基底實作會使用 CLR<ph id="ph1">&lt;see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /&gt;</ph>叫用基礎<ph id="ph2">&lt;see langword="Add" /&gt;</ph>方法，如取自呼叫<ph id="ph3">&lt;see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /&gt;</ph>這個<ph id="ph4">&lt;paramref name="" /&gt;</ph> <ph id="ph5">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source>In the base implementation no exception is raised at this level if <ph id="ph1">&lt;paramref name="item" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">基底實作中沒有例外狀況會在此層級如果引發<ph id="ph1">&lt;paramref name="item" /&gt;</ph>是<ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source>It is still possible that the underlying <ph id="ph1">&lt;see langword="Add" /&gt;</ph> method will raise an exception when invoked.</source>
          <target state="translated">仍有可能，基礎<ph id="ph1">&lt;see langword="Add" /&gt;</ph>方法會引發例外狀況時叫用。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source>Other run time exceptions are possible if <ph id="ph1">&lt;see cref="P:System.Xaml.XamlType.ItemType" /&gt;</ph> does not return a valid result.</source>
          <target state="translated">可能會有其他執行的階段例外狀況如果<ph id="ph1">&lt;see cref="P:System.Xaml.XamlType.ItemType" /&gt;</ph>不會傳回有效的結果。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source>An instance of the type specified by the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> used for constructing this <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> (用於建構這個 <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>) 所指定之類型的執行個體。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source>Dictionary key for the item to add.</source>
          <target state="translated">要加入項目的字典索引鍵。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source>The item value to add.</source>
          <target state="translated">要加入的項目值。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source>Adds the provided key and item value to an instance of the type that is relevant to this <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</source>
          <target state="translated">將提供的索引鍵和項目值加入至與這個 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> 相關之類型的執行個體。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source>You should only call this method on a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> that represents a dictionary.</source>
          <target state="translated">您只應該呼叫這個方法在<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>表示字典。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source>Invoked this method on a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> that is based on an unknown <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">在以未知 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 為根據的 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> 上，叫用這個方法。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source><bpt id="p1">**</bpt>-or-<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>-或-<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source>Invoked this method on a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> where the relevant type is not a dictionary.</source>
          <target state="translated">在其中的相關類型不是字典的 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> 上，叫用這個方法。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source><ph id="ph1">&lt;paramref name="instance" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="instance" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source><ph id="ph1">&lt;see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /&gt;</ph> for this <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> returns <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">這個 <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> 的 <ph id="ph1">&lt;see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /&gt;</ph> 會傳回 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source>The base implementation includes a call to the internal helper <bpt id="p1">&lt;c&gt;</bpt>ThrowIfUnknown<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">基底實作都會呼叫內部協助程式<bpt id="p1">&lt;c&gt;</bpt>ThrowIfUnknown<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source>This helper always throws for cases where a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> is based on an unknown <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>, which includes cases where the <ph id="ph3">&lt;see cref="P:System.Xaml.XamlType.UnderlyingType" /&gt;</ph> of the <ph id="ph4">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> is <ph id="ph5">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">這個 helper 一律會擲回的情況下其中<ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>根據未知<ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>，其中包括狀況下<ph id="ph3">&lt;see cref="P:System.Xaml.XamlType.UnderlyingType" /&gt;</ph>的<ph id="ph4">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>是<ph id="ph5">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source>Internally, the base implementation calls <ph id="ph1">&lt;see cref="P:System.Xaml.XamlType.IsDictionary" /&gt;</ph>, and throws if the result is <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">就內部而言，基底實作會呼叫<ph id="ph1">&lt;see cref="P:System.Xaml.XamlType.IsDictionary" /&gt;</ph>，而且會擲回，如果結果為<ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source>The base implementation does not necessarily use its own <ph id="ph1">&lt;see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /&gt;</ph> implementation.</source>
          <target state="translated">基底實作不一定要使用自己<ph id="ph1">&lt;see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /&gt;</ph>實作。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source>First, a cast of <ph id="ph1">&lt;paramref name="instance" /&gt;</ph> to <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> is attempted.</source>
          <target state="translated">首先，轉型<ph id="ph1">&lt;paramref name="instance" /&gt;</ph>至<ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>嘗試。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source>If this succeeds, a call to <ph id="ph1">&lt;see cref="M:System.Collections.IDictionary.Add(System.Object,System.Object)" /&gt;</ph> is made and the method returns.</source>
          <target state="translated">如果成功的話，呼叫<ph id="ph1">&lt;see cref="M:System.Collections.IDictionary.Add(System.Object,System.Object)" /&gt;</ph>進行而且方法會傳回。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source>Otherwise, the base implementation uses CLR <ph id="ph1">&lt;see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /&gt;</ph> to invoke the underlying <ph id="ph2">&lt;see langword="Add" /&gt;</ph> method, as obtained from a call to <ph id="ph3">&lt;see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /&gt;</ph> for this <ph id="ph4">&lt;paramref name="" /&gt;</ph><ph id="ph5">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</source>
          <target state="translated">否則，基底實作會使用 CLR<ph id="ph1">&lt;see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /&gt;</ph>叫用基礎<ph id="ph2">&lt;see langword="Add" /&gt;</ph>方法，如取自呼叫<ph id="ph3">&lt;see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /&gt;</ph>這個<ph id="ph4">&lt;paramref name="" /&gt;</ph> <ph id="ph5">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source>In the base implementation no exception is raised at this level if <ph id="ph1">&lt;paramref name="item" /&gt;</ph> or <ph id="ph2">&lt;paramref name="key" /&gt;</ph> are <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">基底實作中沒有例外狀況會在此層級如果引發<ph id="ph1">&lt;paramref name="item" /&gt;</ph>或<ph id="ph2">&lt;paramref name="key" /&gt;</ph>是<ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source>It is still possible that the underlying <ph id="ph1">&lt;see langword="Add" /&gt;</ph> method will raise an exception when invoked.</source>
          <target state="translated">仍有可能，基礎<ph id="ph1">&lt;see langword="Add" /&gt;</ph>方法會引發例外狀況時叫用。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source>Other run time exceptions are possible if <ph id="ph1">&lt;see cref="P:System.Xaml.XamlType.ItemType" /&gt;</ph> does not return a valid result.</source>
          <target state="translated">可能會有其他執行的階段例外狀況如果<ph id="ph1">&lt;see cref="P:System.Xaml.XamlType.ItemType" /&gt;</ph>不會傳回有效的結果。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.CreateInstance(System.Object[])">
          <source>An array of objects that supply the <ph id="ph1">&lt;see langword="x:ConstructorArgs" /&gt;</ph> for the instance.</source>
          <target state="translated">為執行個體提供 <ph id="ph1">&lt;see langword="x:ConstructorArgs" /&gt;</ph> 的物件陣列。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.CreateInstance(System.Object[])">
          <source>May be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for types that do not require or use <ph id="ph2">&lt;see langword="x:ConstructorArgs" /&gt;</ph>.</source>
          <target state="translated">對於不需要或不使用 <ph id="ph1">&lt;see langword="null" /&gt;</ph> 的型別，可能為 <ph id="ph2">&lt;see langword="x:ConstructorArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.CreateInstance(System.Object[])">
          <source>Creates an object instance based on the construction-initiated <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> for this <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</source>
          <target state="translated">根據這個 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 之由建構啟始的 <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>，建立物件執行個體。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.CreateInstance(System.Object[])">
          <source>The created instance based on the construction-initiated <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> for this <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</source>
          <target state="translated">已根據這個 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 之由建構啟始的 <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> 所建立的執行個體。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.CreateInstance(System.Object[])">
          <source>Could not resolve a constructor.</source>
          <target state="translated">無法解析建構函式。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.CreateInstance(System.Object[])">
          <source>The base implementation includes a call to the internal helper <bpt id="p1">&lt;c&gt;</bpt>ThrowIfUnknown<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">基底實作都會呼叫內部協助程式<bpt id="p1">&lt;c&gt;</bpt>ThrowIfUnknown<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.CreateInstance(System.Object[])">
          <source>This helper always throws for cases where a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> is based on an unknown <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>, which includes cases where the <ph id="ph3">&lt;see cref="P:System.Xaml.XamlType.UnderlyingType" /&gt;</ph> of the <ph id="ph4">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> is <ph id="ph5">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">這個 helper 一律會擲回的情況下其中<ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>根據未知<ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>，其中包括狀況下<ph id="ph3">&lt;see cref="P:System.Xaml.XamlType.UnderlyingType" /&gt;</ph>的<ph id="ph4">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>是<ph id="ph5">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)">
          <source><ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> for the item type that is used by the <ph id="ph2">&lt;see langword="Add" /&gt;</ph> method.</source>
          <target state="translated"><ph id="ph2">&lt;see langword="Add" /&gt;</ph> 方法所使用項目型別的 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)">
          <source>Returns the relevant <ph id="ph1">&lt;see langword="Add" /&gt;</ph> method for a <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> that is relevant to a collection or dictionary.</source>
          <target state="translated">針對與集合或字典相關的 <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>，傳回相關的 <ph id="ph1">&lt;see langword="Add" /&gt;</ph> 方法。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)">
          <source>CLR <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> information for the <ph id="ph2">&lt;see langword="Add" /&gt;</ph> method, or null.</source>
          <target state="translated"><ph id="ph2">&lt;see langword="Add" /&gt;</ph> 方法的 CLR <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> 資訊，或 Null。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)">
          <source>This method should return <ph id="ph1">`null`</ph> for cases where the <ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph> for this <ph id="ph3">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> is not a writeable collection or dictionary.</source>
          <target state="translated">此方法應傳回<ph id="ph1">`null`</ph>的情況下其中<ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph>這個<ph id="ph3">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph>不是可寫入的集合或字典。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)">
          <source>Specifically, should return <ph id="ph1">`null`</ph> for cases where <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A?displayProperty=nameWithType&gt;</ph> returns <ph id="ph3">`None`</ph>.</source>
          <target state="translated">具體而言，應傳回<ph id="ph1">`null`</ph>的情況下其中<ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A?displayProperty=nameWithType&gt;</ph>傳回<ph id="ph3">`None`</ph>。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)">
          <source>If you are not accessing a fully trusted XAML type system, this method has the potential to report false <ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph> information to callers.</source>
          <target state="translated">如果您未存取完全受信任的 XAML 類型系統，此方法有可能會報告 false<ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph>給呼叫端的資訊。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)">
          <source><ph id="ph1">&lt;paramref name="contentType" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="contentType" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)">
          <source>The base implementation returns <ph id="ph1">&lt;see langword="null" /&gt;</ph> for cases where a <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> is based on an unknown <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>, which includes cases where the <ph id="ph4">&lt;see cref="P:System.Xaml.XamlType.UnderlyingType" /&gt;</ph> of the <ph id="ph5">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> is <ph id="ph6">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">基底實作會傳回<ph id="ph1">&lt;see langword="null" /&gt;</ph>的情況下其中<ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>根據未知<ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>，其中包含案例 where<ph id="ph4">&lt;see cref="P:System.Xaml.XamlType.UnderlyingType" /&gt;</ph>的<ph id="ph5">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>是<ph id="ph6">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)">
          <source>It also returns <ph id="ph1">&lt;see langword="null" /&gt;</ph> if <ph id="ph2">&lt;see cref="P:System.Xaml.XamlType.ItemType" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">它也會傳回<ph id="ph1">&lt;see langword="null" /&gt;</ph>如果<ph id="ph2">&lt;see cref="P:System.Xaml.XamlType.ItemType" /&gt;</ph>是<ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)">
          <source>XAML collections potentially have more than one <ph id="ph1">&lt;see langword="Add" /&gt;</ph> method, because a XAML collection can potentially support more than one content type (see <ph id="ph2">&lt;see cref="P:System.Xaml.XamlType.AllowedContentTypes" /&gt;</ph>, or see <ph id="ph3">&lt;see cref="T:System.Windows.Markup.ContentWrapperAttribute" /&gt;</ph> for information about one implementation of this concept in WPF).</source>
          <target state="translated">XAML 集合可能會有一個以上<ph id="ph1">&lt;see langword="Add" /&gt;</ph>方法，因為 XAML 集合可能可以支援多個內容類型 (請參閱<ph id="ph2">&lt;see cref="P:System.Xaml.XamlType.AllowedContentTypes" /&gt;</ph>，或參閱<ph id="ph3">&lt;see cref="T:System.Windows.Markup.ContentWrapperAttribute" /&gt;</ph>一個實作，這個概念，在 WPF 中有關)。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)">
          <source>The default implementation uses internal logic to return the best match based on the signatures and the type of the supplied <ph id="ph1">&lt;paramref name="contentType" /&gt;</ph>.</source>
          <target state="translated">預設實作會使用內部邏輯傳回最符合項目，並根據所提供的類型和簽章<ph id="ph1">&lt;paramref name="contentType" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod">
          <source>Returns an object representing a method that can enumerate over items.</source>
          <target state="translated">傳回物件，這個物件表示可列舉項目的方法。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod">
          <source><ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> for an enumerator method, or <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">列舉程式方法的 <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph>，或 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod">
          <source>Should return <ph id="ph1">`null`</ph> for cases where <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A?displayProperty=nameWithType&gt;</ph> returns <ph id="ph3">`None`</ph>.</source>
          <target state="translated">應傳回<ph id="ph1">`null`</ph>的情況下其中<ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A?displayProperty=nameWithType&gt;</ph>傳回<ph id="ph3">`None`</ph>。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod">
          <source>If you are not accessing a fully trusted XAML type system, this method has the potential to report false <ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph> information to callers.</source>
          <target state="translated">如果您未存取完全受信任的 XAML 類型系統，此方法有可能會報告 false<ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph>給呼叫端的資訊。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod">
          <source>The base implementation calls an internal helper method.</source>
          <target state="translated">基底實作會呼叫的內部協助程式方法。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod">
          <source>That helper returns <ph id="ph1">&lt;see langword="null" /&gt;</ph> for cases where a <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> is based on an unknown <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>, which includes cases where the <ph id="ph4">&lt;see cref="P:System.Xaml.XamlType.UnderlyingType" /&gt;</ph> of the <ph id="ph5">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> is <ph id="ph6">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">傳回該協助程式<ph id="ph1">&lt;see langword="null" /&gt;</ph>的情況下其中<ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>根據未知<ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>，其中包括狀況下<ph id="ph4">&lt;see cref="P:System.Xaml.XamlType.UnderlyingType" /&gt;</ph>的<ph id="ph5">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>是<ph id="ph6">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod">
          <source>It also returns <ph id="ph1">&lt;see langword="null" /&gt;</ph> for cases where <ph id="ph2">&lt;see cref="M:System.Xaml.XamlType.LookupCollectionKind" /&gt;</ph> returns <ph id="ph3">&lt;see langword="None" /&gt;</ph>.</source>
          <target state="translated">它也會傳回<ph id="ph1">&lt;see langword="null" /&gt;</ph>的情況下其中<ph id="ph2">&lt;see cref="M:System.Xaml.XamlType.LookupCollectionKind" /&gt;</ph>傳回<ph id="ph3">&lt;see langword="None" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)">
          <source>An instance of the type specified by the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> used for constructing this <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> (用於建構這個 <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>) 所指定之類型的執行個體。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)">
          <source>Returns an <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> object representing the set of items.</source>
          <target state="translated">傳回表示項目集的 <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> 物件。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> object, or <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> 物件，或 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)">
          <source>Invoked this method on a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> that is based on an unknown <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">在以未知 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 為根據的 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> 上，叫用這個方法。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)">
          <source><bpt id="p1">**</bpt>-or-<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>-或-<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)">
          <source>Invoked this method on a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> where the relevant type is not a collection or dictionary.</source>
          <target state="translated">在 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> 上叫用這個方法，所在的相關型別不是集合或字典。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)">
          <source><ph id="ph1">&lt;paramref name="instance" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="instance" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)">
          <source>The base implementation includes a call to the internal helper <bpt id="p1">&lt;c&gt;</bpt>ThrowIfUnknown<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">基底實作都會呼叫內部協助程式<bpt id="p1">&lt;c&gt;</bpt>ThrowIfUnknown<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)">
          <source>This helper always throws for cases where a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> is based on an unknown <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>, which includes cases where the <ph id="ph3">&lt;see cref="P:System.Xaml.XamlType.UnderlyingType" /&gt;</ph> of the <ph id="ph4">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> is <ph id="ph5">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">這個 helper 一律會擲回的情況下其中<ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>根據未知<ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>，其中包括狀況下<ph id="ph3">&lt;see cref="P:System.Xaml.XamlType.UnderlyingType" /&gt;</ph>的<ph id="ph4">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>是<ph id="ph5">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)">
          <source>The base implementation does not necessarily use its own <ph id="ph1">&lt;see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod" /&gt;</ph> implementation.</source>
          <target state="translated">基底實作不一定要使用自己<ph id="ph1">&lt;see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod" /&gt;</ph>實作。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)">
          <source>First, a cast of <ph id="ph1">&lt;paramref name="instance" /&gt;</ph> to <ph id="ph2">&lt;see cref="T:System.Collections.IEnumerable" /&gt;</ph> is attempted.</source>
          <target state="translated">首先，轉型<ph id="ph1">&lt;paramref name="instance" /&gt;</ph>至<ph id="ph2">&lt;see cref="T:System.Collections.IEnumerable" /&gt;</ph>嘗試。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)">
          <source>If this succeeds, a call to <ph id="ph1">&lt;see cref="M:System.Collections.IEnumerable.GetEnumerator" /&gt;</ph> is made and the method returns that return value.</source>
          <target state="translated">如果成功的話，呼叫<ph id="ph1">&lt;see cref="M:System.Collections.IEnumerable.GetEnumerator" /&gt;</ph>進行和傳回值的方法會傳回。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)">
          <source>Otherwise, the base implementation uses CLR <ph id="ph1">&lt;see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /&gt;</ph> to invoke the underlying <ph id="ph2">&lt;see langword="GetEnumerator" /&gt;</ph> method, as obtained from a call to <ph id="ph3">&lt;see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod" /&gt;</ph> for this <ph id="ph4">&lt;paramref name="" /&gt;</ph><ph id="ph5">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</source>
          <target state="translated">否則，基底實作會使用 CLR<ph id="ph1">&lt;see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /&gt;</ph>叫用基礎<ph id="ph2">&lt;see langword="GetEnumerator" /&gt;</ph>方法，如取自呼叫<ph id="ph3">&lt;see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod" /&gt;</ph>這個<ph id="ph4">&lt;paramref name="" /&gt;</ph> <ph id="ph5">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="P:System.Xaml.Schema.XamlTypeInvoker.SetMarkupExtensionHandler">
          <source>Gets the handler to use when a <ph id="ph1">&lt;see cref="T:System.Xaml.XamlObjectWriter" /&gt;</ph> calls into an implemented <ph id="ph2">&lt;see cref="T:System.Windows.Markup.MarkupExtension" /&gt;</ph>.</source>
          <target state="translated">取得當 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlObjectWriter" /&gt;</ph> 呼叫實作的 <ph id="ph2">&lt;see cref="T:System.Windows.Markup.MarkupExtension" /&gt;</ph> 時，所要使用的處理常式。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.Schema.XamlTypeInvoker.SetMarkupExtensionHandler">
          <source>A handler implementation that handles this case.</source>
          <target state="translated">處理這個案例的處理常式實作。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.Schema.XamlTypeInvoker.SetMarkupExtensionHandler">
          <source>The event handler is based on <ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> constrained with <ph id="ph2">&lt;xref:System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt;</ph> event data.</source>
          <target state="translated">此事件處理常式根據<ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph>限制<ph id="ph2">&lt;xref:System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt;</ph>事件資料。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.Schema.XamlTypeInvoker.SetMarkupExtensionHandler">
          <source>The value returned invokes the <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupSetMarkupExtensionHandler%2A&gt;</ph> behavior of the <ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph> that the <ph id="ph3">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> is based on.</source>
          <target state="translated">傳回的值會叫用<ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupSetMarkupExtensionHandler%2A&gt;</ph>行為<ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph>，<ph id="ph3">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph>為基礎。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.Schema.XamlTypeInvoker.SetMarkupExtensionHandler">
          <source>The return value is <ph id="ph1">`null`</ph> for a <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> that is based on an unknown <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>.</source>
          <target state="translated">傳回值是<ph id="ph1">`null`</ph>如<ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph>根據未知<ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="P:System.Xaml.Schema.XamlTypeInvoker.SetTypeConverterHandler">
          <source>Gets the handler to use when a <ph id="ph1">&lt;see cref="T:System.Xaml.XamlObjectWriter" /&gt;</ph> calls into a CLR-implemented <ph id="ph2">&lt;see cref="T:System.ComponentModel.TypeConverter" /&gt;</ph>.</source>
          <target state="translated">取得當 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlObjectWriter" /&gt;</ph> 呼叫 CLR 實作的 <ph id="ph2">&lt;see cref="T:System.ComponentModel.TypeConverter" /&gt;</ph> 時，所要使用的處理常式。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.Schema.XamlTypeInvoker.SetTypeConverterHandler">
          <source>A handler implementation that handles this case.</source>
          <target state="translated">處理這個案例的處理常式實作。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.Schema.XamlTypeInvoker.SetTypeConverterHandler">
          <source>The event handler is based on <ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> constrained with <ph id="ph2">&lt;xref:System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt;</ph> event data.</source>
          <target state="translated">此事件處理常式根據<ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph>限制<ph id="ph2">&lt;xref:System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt;</ph>事件資料。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.Schema.XamlTypeInvoker.SetTypeConverterHandler">
          <source>The value returned invokes the <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupSetTypeConverterHandler%2A&gt;</ph> behavior of the <ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph> that the <ph id="ph3">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> is based on.</source>
          <target state="translated">傳回的值會叫用<ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupSetTypeConverterHandler%2A&gt;</ph>行為<ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph>，<ph id="ph3">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph>為基礎。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.Schema.XamlTypeInvoker.SetTypeConverterHandler">
          <source>The return value is <ph id="ph1">`null`</ph> for a <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> that is based on an unknown <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>.</source>
          <target state="translated">傳回值是<ph id="ph1">`null`</ph>如<ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph>根據未知<ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="P:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker">
          <source>Provides a static value that represents an unknown, not fully implemented <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</source>
          <target state="translated">提供靜態值，這個值表示未完整實作的未知 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker">
          <source>A static value that represents an unknown, not fully implemented <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</source>
          <target state="translated">靜態值，表示未完整實作的未知 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker">
          <source>Supplying this value for a <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> parameter of System.Xaml defined API will typically cause the called code to throw exceptions.</source>
          <target state="translated">提供此值<ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph>System.Xaml 參數定義 API 通常會導致擲回例外狀況呼叫的程式碼。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>