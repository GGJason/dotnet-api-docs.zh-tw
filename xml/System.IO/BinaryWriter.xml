<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="BinaryWriter.xml" source-language="en-US" target-language="zh-TW">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5dd725d2ff791bd98de6fbbfa825469547776be40.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dd725d2ff791bd98de6fbbfa825469547776be40</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.IO.BinaryWriter">
          <source>Writes primitive types in binary to a stream and supports writing strings in a specific encoding.</source>
          <target state="translated">以二進位方式將基本類型寫入資料流，並支援以特定編碼方式寫入字串。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BinaryWriter">
          <source>The <ph id="ph1">&lt;xref:System.IO.BinaryWriter&gt;</ph> class provides methods that simplify writing primitive data types to a stream.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.BinaryWriter&gt;</ph>類別提供方法，簡化寫入資料流的基本資料型別。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BinaryWriter">
          <source>For example, you can use the <ph id="ph1">&lt;xref:System.IO.BinaryWriter.Write%2A&gt;</ph> method to write a Boolean value to the stream as a one-byte value.</source>
          <target state="translated">例如，您可以使用<ph id="ph1">&lt;xref:System.IO.BinaryWriter.Write%2A&gt;</ph>方法來寫入資料流做為單位元組值的布林值。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BinaryWriter">
          <source>The class includes write methods that support different data types.</source>
          <target state="translated">類別包含支援不同資料類型的寫入方法。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BinaryWriter">
          <source>When you create a new instance of the <ph id="ph1">&lt;xref:System.IO.BinaryWriter&gt;</ph> class, you provide the stream to write to, and optionally specify the type of encoding and whether to leave the stream open after disposing the <ph id="ph2">&lt;xref:System.IO.BinaryWriter&gt;</ph> object.</source>
          <target state="translated">當您建立的新執行個體<ph id="ph1">&lt;xref:System.IO.BinaryWriter&gt;</ph>類別，您提供要寫入的資料流，並選擇性地指定的編碼類型和要保留資料流開啟之後處置<ph id="ph2">&lt;xref:System.IO.BinaryWriter&gt;</ph>物件。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BinaryWriter">
          <source>If you do not specify an encoding type, UTF-8 is used.</source>
          <target state="translated">如果您未指定編碼類型，則會使用 utf-8。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BinaryWriter">
          <source>This type implements the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface.</source>
          <target state="translated">此類型會實作<ph id="ph1">&lt;xref:System.IDisposable&gt;</ph>介面。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BinaryWriter">
          <source>When you have finished using the type, you should dispose of it either directly or indirectly.</source>
          <target state="translated">當您完成使用類型時，您應該會處置它直接或間接。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BinaryWriter">
          <source>To dispose of the type directly, call its <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method in a <ph id="ph2">`try`</ph><ph id="ph3">/</ph><ph id="ph4">`catch`</ph> block.</source>
          <target state="translated">若要直接處置的類型，呼叫其<ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>方法中的<ph id="ph2">`try`</ph> <ph id="ph3">/</ph> <ph id="ph4">`catch`</ph>區塊。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BinaryWriter">
          <source>To dispose of it indirectly, use a language construct such as <ph id="ph1">`using`</ph> (in C#) or <ph id="ph2">`Using`</ph> (in Visual Basic).</source>
          <target state="translated">若要為其配置間接，使用語言建構例如<ph id="ph1">`using`</ph>（C# 中） 或<ph id="ph2">`Using`</ph>（在 Visual Basic)。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BinaryWriter">
          <source>For more information, see the "Using an Object that Implements IDisposable" section in the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface topic.</source>
          <target state="translated">如需詳細資訊，請參閱中的 「 使用物件的實作 IDisposable 」 一節<ph id="ph1">&lt;xref:System.IDisposable&gt;</ph>介面 &gt; 主題。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BinaryWriter">
          <source>A derived class can override the methods of this class to give unique character encodings.</source>
          <target state="translated">在衍生的類別可以覆寫這個類別提供唯一的字元編碼的方法。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BinaryWriter">
          <source>The following code example demonstrates how to store and retrieve application settings in a file.</source>
          <target state="translated">下列程式碼範例示範如何儲存和擷取應用程式設定檔中。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="T:System.IO.BinaryWriter">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.BinaryWriter" /&gt;</ph> class that writes to a stream.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.IO.BinaryWriter" /&gt;</ph> 類別的新執行個體，其將寫入資料流。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.BinaryWriter" /&gt;</ph> class that writes to a stream.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.IO.BinaryWriter" /&gt;</ph> 類別的新執行個體，其將寫入資料流。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.#ctor">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">如需的一般 I/O 工作清單，請參閱<bpt id="p1">[</bpt>一般 I/O 工作<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.#ctor(System.IO.Stream)">
          <source>The output stream.</source>
          <target state="translated">輸出資料流。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.#ctor(System.IO.Stream)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.BinaryWriter" /&gt;</ph> class based on the specified stream and using UTF-8 encoding.</source>
          <target state="translated">根據指定的資料流並使用 UTF-8 編碼方式，初始化 <ph id="ph1">&lt;see cref="T:System.IO.BinaryWriter" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.#ctor(System.IO.Stream)">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">如需的一般 I/O 工作清單，請參閱<bpt id="p1">[</bpt>一般 I/O 工作<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.#ctor(System.IO.Stream)">
          <source>The following code example demonstrates how to store and retrieve application settings in a file.</source>
          <target state="translated">下列程式碼範例示範如何儲存和擷取應用程式設定檔中。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.#ctor(System.IO.Stream)">
          <source>The stream does not support writing or is already closed.</source>
          <target state="translated">資料流不支援寫入，或已經關閉。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.#ctor(System.IO.Stream)">
          <source><ph id="ph1">&lt;paramref name="output" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="output" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
          <source>The output stream.</source>
          <target state="translated">輸出資料流。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
          <source>The character encoding to use.</source>
          <target state="translated">要使用的字元編碼。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.BinaryWriter" /&gt;</ph> class based on the specified stream and character encoding.</source>
          <target state="translated">根據指定的資料流和字元編碼，初始化 <ph id="ph1">&lt;see cref="T:System.IO.BinaryWriter" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">如需的一般 I/O 工作清單，請參閱<bpt id="p1">[</bpt>一般 I/O 工作<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
          <source>The stream does not support writing or is already closed.</source>
          <target state="translated">資料流不支援寫入，或已經關閉。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
          <source><ph id="ph1">&lt;paramref name="output" /&gt;</ph> or <ph id="ph2">&lt;paramref name="encoding" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="output" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="encoding" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
          <source>The output stream.</source>
          <target state="translated">輸出資料流。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
          <source>The character encoding to use.</source>
          <target state="translated">要使用的字元編碼。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to leave the stream open after the <ph id="ph2">&lt;see cref="T:System.IO.BinaryWriter" /&gt;</ph> object is disposed; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> 表示在處置 <ph id="ph2">&lt;see cref="T:System.IO.BinaryWriter" /&gt;</ph> 物件之後，將資料流保持開啟；否則為 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.BinaryWriter" /&gt;</ph> class based on the specified stream and character encoding, and optionally leaves the stream open.</source>
          <target state="translated">根據指定的資料流和特定的字元編碼，初始化 <ph id="ph1">&lt;see cref="T:System.IO.BinaryWriter" /&gt;</ph> 類別的新執行個體，並選擇性地保留資料流開啟狀態。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
          <source>The stream does not support writing or is already closed.</source>
          <target state="translated">資料流不支援寫入，或已經關閉。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="output" /&gt;</ph> or <ph id="ph2">&lt;paramref name="encoding" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="output" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="encoding" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="P:System.IO.BinaryWriter.BaseStream">
          <source>Gets the underlying stream of the <ph id="ph1">&lt;see cref="T:System.IO.BinaryWriter" /&gt;</ph>.</source>
          <target state="translated">取得 <ph id="ph1">&lt;see cref="T:System.IO.BinaryWriter" /&gt;</ph> 的基礎資料流。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.BinaryWriter.BaseStream">
          <source>The underlying stream associated with the <ph id="ph1">&lt;see langword="BinaryWriter" /&gt;</ph>.</source>
          <target state="translated">與 <ph id="ph1">&lt;see langword="BinaryWriter" /&gt;</ph> 相關聯的基礎資料流。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.BinaryWriter.BaseStream">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">如需的一般 I/O 工作清單，請參閱<bpt id="p1">[</bpt>一般 I/O 工作<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.BinaryWriter.BaseStream">
          <source>The following code example shows how to read and write <ph id="ph1">`Double`</ph> data to memory by using the <ph id="ph2">&lt;xref:System.IO.BinaryReader&gt;</ph> and <ph id="ph3">`BinaryWriter`</ph> classes on top of the <ph id="ph4">&lt;xref:System.IO.MemoryStream&gt;</ph> class.</source>
          <target state="translated">下列程式碼範例示範如何讀取和寫入<ph id="ph1">`Double`</ph>資料傳送到使用的記憶體<ph id="ph2">&lt;xref:System.IO.BinaryReader&gt;</ph>和<ph id="ph3">`BinaryWriter`</ph>類別頂端的<ph id="ph4">&lt;xref:System.IO.MemoryStream&gt;</ph>類別。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.BinaryWriter.BaseStream">
          <source><ph id="ph1">`MemoryStream`</ph> only reads and writes <ph id="ph2">`Byte`</ph> data.</source>
          <target state="translated"><ph id="ph1">`MemoryStream`</ph> 僅讀取和寫入<ph id="ph2">`Byte`</ph>資料。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Close">
          <source>Closes the current <ph id="ph1">&lt;see cref="T:System.IO.BinaryWriter" /&gt;</ph> and the underlying stream.</source>
          <target state="translated">關閉目前 <ph id="ph1">&lt;see cref="T:System.IO.BinaryWriter" /&gt;</ph> 和基礎資料流。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Close">
          <source>This implementation of <ph id="ph1">`Close`</ph> calls the <ph id="ph2">&lt;xref:System.IO.BinaryWriter.Dispose%2A&gt;</ph> method passing a <ph id="ph3">`true`</ph> value.</source>
          <target state="translated">這項實作<ph id="ph1">`Close`</ph>呼叫<ph id="ph2">&lt;xref:System.IO.BinaryWriter.Dispose%2A&gt;</ph>方法傳遞<ph id="ph3">`true`</ph>值。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Close">
          <source>Flushing the stream will not flush its underlying encoder unless you explicitly call <ph id="ph1">&lt;xref:System.IO.BinaryWriter.Flush%2A&gt;</ph> or <ph id="ph2">`Close`</ph>.</source>
          <target state="translated">清除資料流不會清除其基礎的編碼器，除非您明確地呼叫<ph id="ph1">&lt;xref:System.IO.BinaryWriter.Flush%2A&gt;</ph>或<ph id="ph2">`Close`</ph>。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Close">
          <source>Setting <ph id="ph1">&lt;xref:System.IO.StreamWriter.AutoFlush%2A&gt;</ph> to <ph id="ph2">`true`</ph> means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed.</source>
          <target state="translated">設定<ph id="ph1">&lt;xref:System.IO.StreamWriter.AutoFlush%2A&gt;</ph>至<ph id="ph2">`true`</ph>表示從緩衝區資料流，清除資料，但並不會清除編碼器狀態。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Close">
          <source>This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly.</source>
          <target state="translated">這可讓編碼器將保存其狀態 （部分字元），讓它可以正確編碼字元的下一個區塊。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Close">
          <source>This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters.</source>
          <target state="translated">這種情況下會影響 UTF8 及 UTF7 其中某些字元可以只編碼的編碼器接收或多個相鄰的字元之後。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="T:System.IO.BinaryWriter">
          <source>Releases the resources used by the <ph id="ph1">&lt;see cref="T:System.IO.BinaryWriter" /&gt;</ph>.</source>
          <target state="translated">釋放 <ph id="ph1">&lt;see cref="T:System.IO.BinaryWriter" /&gt;</ph> 使用的資源。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Dispose">
          <source>Releases all resources used by the current instance of the <ph id="ph1">&lt;see cref="T:System.IO.BinaryWriter" /&gt;</ph> class.</source>
          <target state="translated">將 <ph id="ph1">&lt;see cref="T:System.IO.BinaryWriter" /&gt;</ph> 類別目前的執行個體所使用的資源全部釋出。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to release both managed and unmanaged resources; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to release only unmanaged resources.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> 表示釋放 Managed 和 Unmanaged 資源，<ph id="ph2">&lt;see langword="false" /&gt;</ph> 則表示只釋放 Unmanaged 資源。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Dispose(System.Boolean)">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;see cref="T:System.IO.BinaryWriter" /&gt;</ph> and optionally releases the managed resources.</source>
          <target state="translated">釋放 <ph id="ph1">&lt;see cref="T:System.IO.BinaryWriter" /&gt;</ph> 所使用的 Unmanaged 資源，並選擇性地釋放 Managed 資源。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Flush">
          <source>Clears all buffers for the current writer and causes any buffered data to be written to the underlying device.</source>
          <target state="translated">清除目前寫入器的所有緩衝區，並造成任何緩衝資料都寫入基礎裝置。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Flush">
          <source>All derived classes should override <ph id="ph1">`Flush`</ph> to ensure that all buffered data is sent to the stream.</source>
          <target state="translated">所有衍生的類別應該覆寫<ph id="ph1">`Flush`</ph>以確保所有緩衝的資料會傳送至資料流。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Flush">
          <source>Flushing the stream will not flush its underlying encoder unless you explicitly call <ph id="ph1">`Flush`</ph> or <ph id="ph2">&lt;xref:System.IO.BinaryWriter.Close%2A&gt;</ph>.</source>
          <target state="translated">清除資料流不會清除其基礎的編碼器，除非您明確地呼叫<ph id="ph1">`Flush`</ph>或<ph id="ph2">&lt;xref:System.IO.BinaryWriter.Close%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Flush">
          <source>Setting <ph id="ph1">&lt;xref:System.IO.StreamWriter.AutoFlush%2A&gt;</ph> to <ph id="ph2">`true`</ph> means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed.</source>
          <target state="translated">設定<ph id="ph1">&lt;xref:System.IO.StreamWriter.AutoFlush%2A&gt;</ph>至<ph id="ph2">`true`</ph>表示從緩衝區資料流，清除資料，但並不會清除編碼器狀態。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Flush">
          <source>This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly.</source>
          <target state="translated">這可讓編碼器將保存其狀態 （部分字元），讓它可以正確編碼字元的下一個區塊。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Flush">
          <source>This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters.</source>
          <target state="translated">這種情況下會影響 UTF8 及 UTF7 其中某些字元可以只編碼的編碼器接收或多個相鄰的字元之後。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Flush">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">如需的一般 I/O 工作清單，請參閱<bpt id="p1">[</bpt>一般 I/O 工作<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="F:System.IO.BinaryWriter.Null">
          <source>Specifies a <ph id="ph1">&lt;see cref="T:System.IO.BinaryWriter" /&gt;</ph> with no backing store.</source>
          <target state="translated">指定沒有備份存放區的 <ph id="ph1">&lt;see cref="T:System.IO.BinaryWriter" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.IO.BinaryWriter.Null">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">如需的一般 I/O 工作清單，請參閱<bpt id="p1">[</bpt>一般 I/O 工作<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="F:System.IO.BinaryWriter.OutStream">
          <source>Holds the underlying stream.</source>
          <target state="translated">容納基礎資料流。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.IO.BinaryWriter.OutStream">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">如需的一般 I/O 工作清單，請參閱<bpt id="p1">[</bpt>一般 I/O 工作<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Seek(System.Int32,System.IO.SeekOrigin)">
          <source>A byte offset relative to <bpt id="p1">&lt;c&gt;</bpt>origin<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">相對於「原點」<bpt id="p1">&lt;c&gt;</bpt><ept id="p1">&lt;/c&gt;</ept>的位元組位移。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Seek(System.Int32,System.IO.SeekOrigin)">
          <source>A field of <ph id="ph1">&lt;see cref="T:System.IO.SeekOrigin" /&gt;</ph> indicating the reference point from which the new position is to be obtained.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.SeekOrigin" /&gt;</ph> 的欄位，表示要取得新位置的參考點。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Seek(System.Int32,System.IO.SeekOrigin)">
          <source>Sets the position within the current stream.</source>
          <target state="translated">設定目前資料流位置。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Seek(System.Int32,System.IO.SeekOrigin)">
          <source>The position with the current stream.</source>
          <target state="translated">目前資料流的位置。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Seek(System.Int32,System.IO.SeekOrigin)">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">如需的一般 I/O 工作清單，請參閱<bpt id="p1">[</bpt>一般 I/O 工作<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Seek(System.Int32,System.IO.SeekOrigin)">
          <source>The following example writes a series of byte values to a file.</source>
          <target state="translated">下列範例會將一系列的位元組值寫入檔案。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Seek(System.Int32,System.IO.SeekOrigin)">
          <source>The example uses <ph id="ph1">&lt;xref:System.IO.BinaryWriter.Seek%2A&gt;</ph> to move to various locations in the file, and then writes marker bytes by using the <ph id="ph2">&lt;xref:System.IO.BinaryWriter.Write%2A&gt;</ph> method.</source>
          <target state="translated">此範例會使用<ph id="ph1">&lt;xref:System.IO.BinaryWriter.Seek%2A&gt;</ph>移至不同位置，檔案，並再寫入標記位元組使用<ph id="ph2">&lt;xref:System.IO.BinaryWriter.Write%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Seek(System.Int32,System.IO.SeekOrigin)">
          <source>The file pointer was moved to an invalid location.</source>
          <target state="translated">檔案指標已移至無效的位置。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Seek(System.Int32,System.IO.SeekOrigin)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IO.SeekOrigin" /&gt;</ph> value is invalid.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.SeekOrigin" /&gt;</ph> 值是無效的。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="T:System.IO.BinaryWriter">
          <source>Writes a value to the current stream.</source>
          <target state="translated">寫入一個值到目前資料流。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Boolean)">
          <source>The <ph id="ph1">&lt;see langword="Boolean" /&gt;</ph> value to write (0 or 1).</source>
          <target state="translated">要寫入的 <ph id="ph1">&lt;see langword="Boolean" /&gt;</ph> 值 (0 或 1)。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Boolean)">
          <source>Writes a one-byte <ph id="ph1">&lt;see langword="Boolean" /&gt;</ph> value to the current stream, with 0 representing <ph id="ph2">&lt;see langword="false" /&gt;</ph> and 1 representing <ph id="ph3">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">寫入一位元組的 <ph id="ph1">&lt;see langword="Boolean" /&gt;</ph> 值至目前資料流，其中 0 表示 <ph id="ph2">&lt;see langword="false" /&gt;</ph>，1 表示 <ph id="ph3">&lt;see langword="true" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Boolean)">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">如需的一般 I/O 工作清單，請參閱<bpt id="p1">[</bpt>一般 I/O 工作<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Boolean)">
          <source>The following code example demonstrates how to store and retrieve application settings in a file.</source>
          <target state="translated">下列程式碼範例示範如何儲存和擷取應用程式設定檔中。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Boolean)">
          <source>An I/O error occurs.</source>
          <target state="translated">發生 I/O 錯誤。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Boolean)">
          <source>The stream is closed.</source>
          <target state="translated">資料流已關閉。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Byte)">
          <source>The unsigned byte to write.</source>
          <target state="translated">要寫入的不帶正負號位元組。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Byte)">
          <source>Writes an unsigned byte to the current stream and advances the stream position by one byte.</source>
          <target state="translated">將不帶正負號 (Unsigned) 位元組寫入目前資料流，並將資料流位置前移一個位元組。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Byte)">
          <source>Because of data formatting conflicts, using this method with the following encodings is not recommended:</source>
          <target state="translated">資料格式的衝突，因為不建議使用此方法搭配下列編碼：</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Byte)">
          <source>UTF-7</source>
          <target state="translated">UTF-7</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Byte)">
          <source>ISO-2022-JP</source>
          <target state="translated">ISO-2022-JP</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Byte)">
          <source>ISCII</source>
          <target state="translated">ISCII</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Byte)">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">如需的一般 I/O 工作清單，請參閱<bpt id="p1">[</bpt>一般 I/O 工作<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Byte)">
          <source>The following code example shows how to write binary data using memory as a backing store, and then verify that the data was written correctly.</source>
          <target state="translated">下列程式碼範例示範如何寫入二進位資料做為備份存放區中，使用的記憶體，然後確認已正確地寫入資料。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Byte)">
          <source>An I/O error occurs.</source>
          <target state="translated">發生 I/O 錯誤。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Byte)">
          <source>The stream is closed.</source>
          <target state="translated">資料流已關閉。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Byte[])">
          <source>A byte array containing the data to write.</source>
          <target state="translated">含有要寫入之資料的位元組陣列。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Byte[])">
          <source>Writes a byte array to the underlying stream.</source>
          <target state="translated">將位元組陣列寫入基礎資料流。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Byte[])">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">如需的一般 I/O 工作清單，請參閱<bpt id="p1">[</bpt>一般 I/O 工作<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Byte[])">
          <source>The following code example shows how to write binary data using memory as a backing store, and then verify that the data was written correctly.</source>
          <target state="translated">下列程式碼範例示範如何寫入二進位資料做為備份存放區中，使用的記憶體，然後確認已正確地寫入資料。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Byte[])">
          <source>An I/O error occurs.</source>
          <target state="translated">發生 I/O 錯誤。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Byte[])">
          <source>The stream is closed.</source>
          <target state="translated">資料流已關閉。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Byte[])">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Char)">
          <source>The non-surrogate, Unicode character to write.</source>
          <target state="translated">非 Surrogate，要寫入的 Unicode 字元。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Char)">
          <source>Writes a Unicode character to the current stream and advances the current position of the stream in accordance with the <ph id="ph1">&lt;see langword="Encoding" /&gt;</ph> used and the specific characters being written to the stream.</source>
          <target state="translated">將 Unicode 字元寫入至目前資料流，並按照所使用的 <ph id="ph1">&lt;see langword="Encoding" /&gt;</ph> 和寫入資料流的特定字元，將資料流中目前的位置往前移。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Char)">
          <source>Because of data formatting conflicts, using this method with the following encodings is not recommended:</source>
          <target state="translated">資料格式的衝突，因為不建議使用此方法搭配下列編碼：</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Char)">
          <source>UTF-7</source>
          <target state="translated">UTF-7</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Char)">
          <source>ISO-2022-JP</source>
          <target state="translated">ISO-2022-JP</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Char)">
          <source>ISCII</source>
          <target state="translated">ISCII</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Char)">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">如需的一般 I/O 工作清單，請參閱<bpt id="p1">[</bpt>一般 I/O 工作<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Char)">
          <source>Unicode surrogate characters must be written out as pairs together in the same call, not individually.</source>
          <target state="translated">Unicode surrogate 字元必須寫出一起在相同的呼叫中，不會個別。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Char)">
          <source>If you require support for surrogate pairs in your application, consider using a character array and the <ph id="ph1">&lt;xref:System.IO.BinaryWriter.Write%2A&gt;</ph> method overload.</source>
          <target state="translated">如果您需要支援 surrogate 字組的應用程式中，請考慮使用的字元陣列和<ph id="ph1">&lt;xref:System.IO.BinaryWriter.Write%2A&gt;</ph>方法多載。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Char)">
          <source>The following code example shows how to read and write data using memory as a backing store.</source>
          <target state="translated">下列程式碼範例示範如何讀取和寫入資料做為備份存放區使用的記憶體。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Char)">
          <source>An I/O error occurs.</source>
          <target state="translated">發生 I/O 錯誤。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Char)">
          <source>The stream is closed.</source>
          <target state="translated">資料流已關閉。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Char)">
          <source><ph id="ph1">&lt;paramref name="ch" /&gt;</ph> is a single surrogate character.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="ch" /&gt;</ph> 是單一 Surrogate 字元。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Char[])">
          <source>A character array containing the data to write.</source>
          <target state="translated">含有要寫入之資料的字元陣列。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Char[])">
          <source>Writes a character array to the current stream and advances the current position of the stream in accordance with the <ph id="ph1">&lt;see langword="Encoding" /&gt;</ph> used and the specific characters being written to the stream.</source>
          <target state="translated">將字元陣列寫入至目前資料流，並按照所使用的 <ph id="ph1">&lt;see langword="Encoding" /&gt;</ph> 和寫入資料流的特定字元，將資料流中目前的位置往前移。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Char[])">
          <source>The following table lists examples of other typical or related I/O tasks.</source>
          <target state="translated">下表列出的其他一般或相關的 I/O 工作的範例。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Char[])">
          <source>To do this...</source>
          <target state="translated">若要執行相關作業…</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Char[])">
          <source>See the example in this topic...</source>
          <target state="translated">請參閱這個主題中的範例…</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Char[])">
          <source>Create a text file.</source>
          <target state="translated">建立文字檔</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Char[])">
          <source><bpt id="p1">[</bpt>How to: Write Text to a File<ept id="p1">](~/docs/standard/io/how-to-write-text-to-a-file.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>如何：將文字寫入檔案<ept id="p1">](~/docs/standard/io/how-to-write-text-to-a-file.md)</ept></target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Char[])">
          <source>Write to a text file.</source>
          <target state="translated">寫入文字檔案。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Char[])">
          <source><bpt id="p1">[</bpt>How to: Write Text to a File<ept id="p1">](~/docs/standard/io/how-to-write-text-to-a-file.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>如何：將文字寫入檔案<ept id="p1">](~/docs/standard/io/how-to-write-text-to-a-file.md)</ept></target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Char[])">
          <source>Read from a text file.</source>
          <target state="translated">從文字檔讀取。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Char[])">
          <source><bpt id="p1">[</bpt>How to: Read Text from a File<ept id="p1">](~/docs/standard/io/how-to-read-text-from-a-file.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>如何：從檔案讀取文字<ept id="p1">](~/docs/standard/io/how-to-read-text-from-a-file.md)</ept></target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Char[])">
          <source>Append text to a file.</source>
          <target state="translated">將文字附加至檔案。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Char[])">
          <source><bpt id="p1">[</bpt>How to: Open and Append to a Log File<ept id="p1">](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>如何：開啟並附加至記錄檔<ept id="p1">](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)</ept></target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Char[])">
          <source>Get the size of a file.</source>
          <target state="translated">取得檔案的大小。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Char[])">
          <source>Get the attributes of a file.</source>
          <target state="translated">取得檔案的屬性。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Char[])">
          <source>Set the attributes of a file.</source>
          <target state="translated">設定檔案屬性。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Char[])">
          <source>Determine if a file exists.</source>
          <target state="translated">判斷檔案是否存在。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Char[])">
          <source>Read from a binary file.</source>
          <target state="translated">讀取二進位檔案。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Char[])">
          <source><bpt id="p1">[</bpt>How to: Read and Write to a Newly Created Data File<ept id="p1">](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>如何：讀取和寫入新建立的資料檔案<ept id="p1">](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)</ept></target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Char[])">
          <source>Write to a binary file.</source>
          <target state="translated">寫入二進位檔案。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Char[])">
          <source><bpt id="p1">[</bpt>How to: Read and Write to a Newly Created Data File<ept id="p1">](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>如何：讀取和寫入新建立的資料檔案<ept id="p1">](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)</ept></target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Char[])">
          <source>The following code example shows how to read and write data using memory as a backing store.</source>
          <target state="translated">下列程式碼範例示範如何讀取和寫入資料做為備份存放區使用的記憶體。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Char[])">
          <source><ph id="ph1">&lt;paramref name="chars" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="chars" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Char[])">
          <source>The stream is closed.</source>
          <target state="translated">資料流已關閉。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Char[])">
          <source>An I/O error occurs.</source>
          <target state="translated">發生 I/O 錯誤。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Decimal)">
          <source>The decimal value to write.</source>
          <target state="translated">要寫入的十進位值。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Decimal)">
          <source>Writes a decimal value to the current stream and advances the stream position by sixteen bytes.</source>
          <target state="translated">將十進位值寫入目前的資料流，並將資料流位置往前移十六個位元組。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Decimal)">
          <source>The following table lists examples of other typical or related I/O tasks.</source>
          <target state="translated">下表列出的其他一般或相關的 I/O 工作的範例。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Decimal)">
          <source>To do this...</source>
          <target state="translated">若要執行相關作業…</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Decimal)">
          <source>See the example in this topic...</source>
          <target state="translated">請參閱這個主題中的範例…</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Decimal)">
          <source>Create a text file.</source>
          <target state="translated">建立文字檔</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Decimal)">
          <source><bpt id="p1">[</bpt>How to: Write Text to a File<ept id="p1">](~/docs/standard/io/how-to-write-text-to-a-file.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>如何：將文字寫入檔案<ept id="p1">](~/docs/standard/io/how-to-write-text-to-a-file.md)</ept></target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Decimal)">
          <source>Write to a text file.</source>
          <target state="translated">寫入文字檔案。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Decimal)">
          <source><bpt id="p1">[</bpt>How to: Write Text to a File<ept id="p1">](~/docs/standard/io/how-to-write-text-to-a-file.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>如何：將文字寫入檔案<ept id="p1">](~/docs/standard/io/how-to-write-text-to-a-file.md)</ept></target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Decimal)">
          <source>Read from a text file.</source>
          <target state="translated">從文字檔讀取。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Decimal)">
          <source><bpt id="p1">[</bpt>How to: Read Text from a File<ept id="p1">](~/docs/standard/io/how-to-read-text-from-a-file.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>如何：從檔案讀取文字<ept id="p1">](~/docs/standard/io/how-to-read-text-from-a-file.md)</ept></target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Decimal)">
          <source>Append text to a file.</source>
          <target state="translated">將文字附加至檔案。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Decimal)">
          <source><bpt id="p1">[</bpt>How to: Open and Append to a Log File<ept id="p1">](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>如何：開啟並附加至記錄檔<ept id="p1">](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)</ept></target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Decimal)">
          <source>Get the size of a file.</source>
          <target state="translated">取得檔案的大小。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Decimal)">
          <source>Get the attributes of a file.</source>
          <target state="translated">取得檔案的屬性。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Decimal)">
          <source>Set the attributes of a file.</source>
          <target state="translated">設定檔案屬性。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Decimal)">
          <source>Determine if a file exists.</source>
          <target state="translated">判斷檔案是否存在。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Decimal)">
          <source>Read from a binary file.</source>
          <target state="translated">讀取二進位檔案。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Decimal)">
          <source><bpt id="p1">[</bpt>How to: Read and Write to a Newly Created Data File<ept id="p1">](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>如何：讀取和寫入新建立的資料檔案<ept id="p1">](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)</ept></target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Decimal)">
          <source>Write to a binary file.</source>
          <target state="translated">寫入二進位檔案。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Decimal)">
          <source><bpt id="p1">[</bpt>How to: Read and Write to a Newly Created Data File<ept id="p1">](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>如何：讀取和寫入新建立的資料檔案<ept id="p1">](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)</ept></target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Decimal)">
          <source>An I/O error occurs.</source>
          <target state="translated">發生 I/O 錯誤。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Decimal)">
          <source>The stream is closed.</source>
          <target state="translated">資料流已關閉。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Double)">
          <source>The eight-byte floating-point value to write.</source>
          <target state="translated">要寫入的八位元組浮點數值。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Double)">
          <source>Writes an eight-byte floating-point value to the current stream and advances the stream position by eight bytes.</source>
          <target state="translated">將八位元組浮點數值寫入目前資料流，並將資料流目前位置前移八個位元組。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Double)">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">如需的一般 I/O 工作清單，請參閱<bpt id="p1">[</bpt>一般 I/O 工作<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Double)">
          <source>The following code example shows how to read and write <ph id="ph1">`Double`</ph> data to memory by using the <ph id="ph2">&lt;xref:System.IO.BinaryReader&gt;</ph> and <ph id="ph3">`BinaryWriter`</ph> classes on top of the <ph id="ph4">&lt;xref:System.IO.MemoryStream&gt;</ph> class.</source>
          <target state="translated">下列程式碼範例示範如何讀取和寫入<ph id="ph1">`Double`</ph>資料傳送到使用的記憶體<ph id="ph2">&lt;xref:System.IO.BinaryReader&gt;</ph>和<ph id="ph3">`BinaryWriter`</ph>類別頂端的<ph id="ph4">&lt;xref:System.IO.MemoryStream&gt;</ph>類別。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Double)">
          <source><ph id="ph1">`MemoryStream`</ph> only reads and writes <ph id="ph2">`Byte`</ph> data.</source>
          <target state="translated"><ph id="ph1">`MemoryStream`</ph> 僅讀取和寫入<ph id="ph2">`Byte`</ph>資料。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Double)">
          <source>An I/O error occurs.</source>
          <target state="translated">發生 I/O 錯誤。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Double)">
          <source>The stream is closed.</source>
          <target state="translated">資料流已關閉。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Int16)">
          <source>The two-byte signed integer to write.</source>
          <target state="translated">要寫入的二位元組帶正負號的整數值。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Int16)">
          <source>Writes a two-byte signed integer to the current stream and advances the stream position by two bytes.</source>
          <target state="translated">將二位元組帶正負號的整數 (Signed Integer) 寫入目前資料流，並將資料流目前位置前移兩個位元組。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Int16)">
          <source><ph id="ph1">`BinaryWriter`</ph> stores this data type in little endian format.</source>
          <target state="translated"><ph id="ph1">`BinaryWriter`</ph> 將此資料類型儲存在 little endian 格式。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Int16)">
          <source>The following table lists examples of other typical or related I/O tasks.</source>
          <target state="translated">下表列出的其他一般或相關的 I/O 工作的範例。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Int16)">
          <source>To do this...</source>
          <target state="translated">若要執行相關作業…</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Int16)">
          <source>See the example in this topic...</source>
          <target state="translated">請參閱這個主題中的範例…</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Int16)">
          <source>Create a text file.</source>
          <target state="translated">建立文字檔</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Int16)">
          <source><bpt id="p1">[</bpt>How to: Write Text to a File<ept id="p1">](~/docs/standard/io/how-to-write-text-to-a-file.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>如何：將文字寫入檔案<ept id="p1">](~/docs/standard/io/how-to-write-text-to-a-file.md)</ept></target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Int16)">
          <source>Write to a text file.</source>
          <target state="translated">寫入文字檔案。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Int16)">
          <source><bpt id="p1">[</bpt>How to: Write Text to a File<ept id="p1">](~/docs/standard/io/how-to-write-text-to-a-file.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>如何：將文字寫入檔案<ept id="p1">](~/docs/standard/io/how-to-write-text-to-a-file.md)</ept></target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Int16)">
          <source>Read from a text file.</source>
          <target state="translated">從文字檔讀取。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Int16)">
          <source><bpt id="p1">[</bpt>How to: Read Text from a File<ept id="p1">](~/docs/standard/io/how-to-read-text-from-a-file.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>如何：從檔案讀取文字<ept id="p1">](~/docs/standard/io/how-to-read-text-from-a-file.md)</ept></target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Int16)">
          <source>Append text to a file.</source>
          <target state="translated">將文字附加至檔案。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Int16)">
          <source><bpt id="p1">[</bpt>How to: Open and Append to a Log File<ept id="p1">](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>如何：開啟並附加至記錄檔<ept id="p1">](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)</ept></target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Int16)">
          <source>Get the size of a file.</source>
          <target state="translated">取得檔案的大小。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Int16)">
          <source>Get the attributes of a file.</source>
          <target state="translated">取得檔案的屬性。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Int16)">
          <source>Set the attributes of a file.</source>
          <target state="translated">設定檔案屬性。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Int16)">
          <source>Determine if a file exists.</source>
          <target state="translated">判斷檔案是否存在。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Int16)">
          <source>Read from a binary file.</source>
          <target state="translated">讀取二進位檔案。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Int16)">
          <source><bpt id="p1">[</bpt>How to: Read and Write to a Newly Created Data File<ept id="p1">](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>如何：讀取和寫入新建立的資料檔案<ept id="p1">](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)</ept></target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Int16)">
          <source>Write to a binary file.</source>
          <target state="translated">寫入二進位檔案。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Int16)">
          <source><bpt id="p1">[</bpt>How to: Read and Write to a Newly Created Data File<ept id="p1">](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>如何：讀取和寫入新建立的資料檔案<ept id="p1">](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)</ept></target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Int16)">
          <source>An I/O error occurs.</source>
          <target state="translated">發生 I/O 錯誤。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Int16)">
          <source>The stream is closed.</source>
          <target state="translated">資料流已關閉。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Int32)">
          <source>The four-byte signed integer to write.</source>
          <target state="translated">要寫入的四位元組帶正負號的整數。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Int32)">
          <source>Writes a four-byte signed integer to the current stream and advances the stream position by four bytes.</source>
          <target state="translated">將四位元組帶正負號的整數寫入目前資料流，並將資料流目前位置前移四個位元組。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Int32)">
          <source><ph id="ph1">`BinaryWriter`</ph> stores this data type in little endian format.</source>
          <target state="translated"><ph id="ph1">`BinaryWriter`</ph> 將此資料類型儲存在 little endian 格式。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Int32)">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">如需的一般 I/O 工作清單，請參閱<bpt id="p1">[</bpt>一般 I/O 工作<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Int32)">
          <source>The following code example demonstrates how to store and retrieve application settings in a file.</source>
          <target state="translated">下列程式碼範例示範如何儲存和擷取應用程式設定檔中。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Int32)">
          <source>An I/O error occurs.</source>
          <target state="translated">發生 I/O 錯誤。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Int32)">
          <source>The stream is closed.</source>
          <target state="translated">資料流已關閉。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Int64)">
          <source>The eight-byte signed integer to write.</source>
          <target state="translated">要寫入的八位元組帶正負號的整數。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Int64)">
          <source>Writes an eight-byte signed integer to the current stream and advances the stream position by eight bytes.</source>
          <target state="translated">將八位元組帶正負號的整數寫入目前資料流，並將資料流目前位置前移八個位元組。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Int64)">
          <source><ph id="ph1">`BinaryWriter`</ph> stores this data type in little endian format.</source>
          <target state="translated"><ph id="ph1">`BinaryWriter`</ph> 將此資料類型儲存在 little endian 格式。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Int64)">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">如需的一般 I/O 工作清單，請參閱<bpt id="p1">[</bpt>一般 I/O 工作<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Int64)">
          <source>An I/O error occurs.</source>
          <target state="translated">發生 I/O 錯誤。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Int64)">
          <source>The stream is closed.</source>
          <target state="translated">資料流已關閉。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.SByte)">
          <source>The signed byte to write.</source>
          <target state="translated">要寫入的帶正負號位元組。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.SByte)">
          <source>Writes a signed byte to the current stream and advances the stream position by one byte.</source>
          <target state="translated">將帶正負號 (Signed) 位元組寫入目前資料流，並將資料流位置前移一個位元組。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.SByte)">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">如需的一般 I/O 工作清單，請參閱<bpt id="p1">[</bpt>一般 I/O 工作<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.SByte)">
          <source>An I/O error occurs.</source>
          <target state="translated">發生 I/O 錯誤。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.SByte)">
          <source>The stream is closed.</source>
          <target state="translated">資料流已關閉。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Single)">
          <source>The four-byte floating-point value to write.</source>
          <target state="translated">要寫入的四位元組浮點數值。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Single)">
          <source>Writes a four-byte floating-point value to the current stream and advances the stream position by four bytes.</source>
          <target state="translated">將四位元組浮點數 (Floating-Point) 值寫入目前資料流，並將資料流目前位置前移四個位元組。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Single)">
          <source><ph id="ph1">`BinaryWriter`</ph> stores this data type in little endian format.</source>
          <target state="translated"><ph id="ph1">`BinaryWriter`</ph> 將此資料類型儲存在 little endian 格式。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Single)">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">如需的一般 I/O 工作清單，請參閱<bpt id="p1">[</bpt>一般 I/O 工作<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Single)">
          <source>The following code example demonstrates how to store and retrieve application settings in a file.</source>
          <target state="translated">下列程式碼範例示範如何儲存和擷取應用程式設定檔中。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Single)">
          <source>An I/O error occurs.</source>
          <target state="translated">發生 I/O 錯誤。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Single)">
          <source>The stream is closed.</source>
          <target state="translated">資料流已關閉。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.String)">
          <source>The value to write.</source>
          <target state="translated">要寫入的值。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.String)">
          <source>Writes a length-prefixed string to this stream in the current encoding of the <ph id="ph1">&lt;see cref="T:System.IO.BinaryWriter" /&gt;</ph>, and advances the current position of the stream in accordance with the encoding used and the specific characters being written to the stream.</source>
          <target state="translated">將有長度前置字元的字串以目前 <ph id="ph1">&lt;see cref="T:System.IO.BinaryWriter" /&gt;</ph> 的編碼方式寫入此資料流，並按照所使用的編碼方式和寫入資料流的特定字元，將資料流中目前的位置往前移。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.String)">
          <source>Length-prefixed means that this method first writes the length of the string, in bytes, when encoded with the <ph id="ph1">&lt;xref:System.IO.BinaryWriter&gt;</ph> instance's current encoding to the stream.</source>
          <target state="translated">固定長度的方式，這個方法會先寫字串的長度，以位元組為單位，編碼與<ph id="ph1">&lt;xref:System.IO.BinaryWriter&gt;</ph>執行個體的目前編碼方式寫入資料流。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.String)">
          <source>This value is written as an unsigned integer.</source>
          <target state="translated">這個值會寫入做為不帶正負號的整數。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.String)">
          <source>This method then writes that many bytes to the stream.</source>
          <target state="translated">然後這個方法會將足夠的位元組數目寫入資料流中。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.String)">
          <source>For example, the string "A" has a length of 1, but when encoded with UTF-16; the length is 2 bytes, so the value written in the prefix is 2, and 3 bytes are written to the stream, including the prefix.</source>
          <target state="translated">比方說，"A"的字串長度為 1，但編碼為 utf-16。長度是 2 個位元組，因此在前置詞中寫入的值為 2，3 個位元組會寫入資料流，包含前置詞。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.String)">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">如需的一般 I/O 工作清單，請參閱<bpt id="p1">[</bpt>一般 I/O 工作<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.String)">
          <source>The following code example demonstrates how to store and retrieve application settings in a file.</source>
          <target state="translated">下列程式碼範例示範如何儲存和擷取應用程式設定檔中。</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.String)">
          <source>An I/O error occurs.</source>
          <target state="translated">發生 I/O 錯誤。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.String)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.String)">
          <source>The stream is closed.</source>
          <target state="translated">資料流已關閉。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.UInt16)">
          <source>The two-byte unsigned integer to write.</source>
          <target state="translated">要寫入的二位元組不帶正負號的整數。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.UInt16)">
          <source>Writes a two-byte unsigned integer to the current stream and advances the stream position by two bytes.</source>
          <target state="translated">將二位元組不帶正負號的整數寫入目前資料流，並將資料流目前位置前移兩個位元組。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.UInt16)">
          <source><ph id="ph1">`BinaryWriter`</ph> stores this data type in little endian format.</source>
          <target state="translated"><ph id="ph1">`BinaryWriter`</ph> 將此資料類型儲存在 little endian 格式。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.UInt16)">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">如需的一般 I/O 工作清單，請參閱<bpt id="p1">[</bpt>一般 I/O 工作<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.UInt16)">
          <source>An I/O error occurs.</source>
          <target state="translated">發生 I/O 錯誤。</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.UInt16)">
          <source>The stream is closed.</source>
          <target state="translated">資料流已關閉。</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.UInt32)">
          <source>The four-byte unsigned integer to write.</source>
          <target state="translated">要寫入的四位元組不帶正負號的整數。</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.UInt32)">
          <source>Writes a four-byte unsigned integer to the current stream and advances the stream position by four bytes.</source>
          <target state="translated">將四位元組不帶正負號的整數寫入目前資料流，並將資料流目前位置前移四個位元組。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.UInt32)">
          <source><ph id="ph1">`BinaryWriter`</ph> stores this data type in little endian format.</source>
          <target state="translated"><ph id="ph1">`BinaryWriter`</ph> 將此資料類型儲存在 little endian 格式。</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.UInt32)">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">如需的一般 I/O 工作清單，請參閱<bpt id="p1">[</bpt>一般 I/O 工作<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>。</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.UInt32)">
          <source>An I/O error occurs.</source>
          <target state="translated">發生 I/O 錯誤。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.UInt32)">
          <source>The stream is closed.</source>
          <target state="translated">資料流已關閉。</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.UInt64)">
          <source>The eight-byte unsigned integer to write.</source>
          <target state="translated">要寫入的八位元組不帶正負號的整數值。</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.UInt64)">
          <source>Writes an eight-byte unsigned integer to the current stream and advances the stream position by eight bytes.</source>
          <target state="translated">將八位元組不帶正負號的整數值寫入目前資料流，並將資料流目前位置前移八個位元組。</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.UInt64)">
          <source><ph id="ph1">`BinaryWriter`</ph> stores this data type in little endian format.</source>
          <target state="translated"><ph id="ph1">`BinaryWriter`</ph> 將此資料類型儲存在 little endian 格式。</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.UInt64)">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">如需的一般 I/O 工作清單，請參閱<bpt id="p1">[</bpt>一般 I/O 工作<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>。</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.UInt64)">
          <source>An I/O error occurs.</source>
          <target state="translated">發生 I/O 錯誤。</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.UInt64)">
          <source>The stream is closed.</source>
          <target state="translated">資料流已關閉。</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Byte[],System.Int32,System.Int32)">
          <source>A byte array containing the data to write.</source>
          <target state="translated">含有要寫入之資料的位元組陣列。</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The starting point in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> at which to begin writing.</source>
          <target state="translated">「緩衝區」<bpt id="p1">&lt;c&gt;</bpt><ept id="p1">&lt;/c&gt;</ept>中開始寫入的起始點。</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The number of bytes to write.</source>
          <target state="translated">要寫入的位元組數。</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Byte[],System.Int32,System.Int32)">
          <source>Writes a region of a byte array to the current stream.</source>
          <target state="translated">將一個區域的位元組陣列寫入目前資料流。</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Byte[],System.Int32,System.Int32)">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">如需的一般 I/O 工作清單，請參閱<bpt id="p1">[</bpt>一般 I/O 工作<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>。</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The following code example shows how to write binary data using memory as a backing store, and then verify that the data was written correctly.</source>
          <target state="translated">下列程式碼範例示範如何寫入二進位資料做為備份存放區中，使用的記憶體，然後確認已正確地寫入資料。</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The buffer length minus <ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than <ph id="ph2">&lt;paramref name="count" /&gt;</ph>.</source>
          <target state="translated">緩衝區長度減去 <ph id="ph1">&lt;paramref name="index" /&gt;</ph> 小於 <ph id="ph2">&lt;paramref name="count" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="count" /&gt;</ph> 為負。</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Byte[],System.Int32,System.Int32)">
          <source>An I/O error occurs.</source>
          <target state="translated">發生 I/O 錯誤。</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The stream is closed.</source>
          <target state="translated">資料流已關閉。</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Char[],System.Int32,System.Int32)">
          <source>A character array containing the data to write.</source>
          <target state="translated">含有要寫入之資料的字元陣列。</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Char[],System.Int32,System.Int32)">
          <source>The starting point in <bpt id="p1">&lt;c&gt;</bpt>chars<ept id="p1">&lt;/c&gt;</ept> from which to begin writing.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>chars<ept id="p1">&lt;/c&gt;</ept> 中開始寫入的起始點。</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Char[],System.Int32,System.Int32)">
          <source>The number of characters to write.</source>
          <target state="translated">要寫入的字元數。</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Char[],System.Int32,System.Int32)">
          <source>Writes a section of a character array to the current stream, and advances the current position of the stream in accordance with the <ph id="ph1">&lt;see langword="Encoding" /&gt;</ph> used and perhaps the specific characters being written to the stream.</source>
          <target state="translated">將字元陣列中的一區段寫入至目前的資料流，並按照所使用的 <ph id="ph1">&lt;see langword="Encoding" /&gt;</ph> 和可能為寫入資料流的特定字元，將資料流中目前的位置往前移。</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Char[],System.Int32,System.Int32)">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">如需的一般 I/O 工作清單，請參閱<bpt id="p1">[</bpt>一般 I/O 工作<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>。</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write(System.Char[],System.Int32,System.Int32)">
          <source>The following code example shows how to read and write data using memory as a backing store.</source>
          <target state="translated">下列程式碼範例示範如何讀取和寫入資料做為備份存放區使用的記憶體。</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Char[],System.Int32,System.Int32)">
          <source>The buffer length minus <ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than <ph id="ph2">&lt;paramref name="count" /&gt;</ph>.</source>
          <target state="translated">緩衝區長度減去 <ph id="ph1">&lt;paramref name="index" /&gt;</ph> 小於 <ph id="ph2">&lt;paramref name="count" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="chars" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="chars" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="count" /&gt;</ph> 為負。</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Char[],System.Int32,System.Int32)">
          <source>An I/O error occurs.</source>
          <target state="translated">發生 I/O 錯誤。</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write(System.Char[],System.Int32,System.Int32)">
          <source>The stream is closed.</source>
          <target state="translated">資料流已關閉。</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write7BitEncodedInt(System.Int32)">
          <source>The 32-bit integer to be written.</source>
          <target state="translated">要寫入的 32 位元整數。</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write7BitEncodedInt(System.Int32)">
          <source>Writes a 32-bit integer in a compressed format.</source>
          <target state="translated">以壓縮格式寫入 32 位元整數。</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write7BitEncodedInt(System.Int32)">
          <source>The integer of the <ph id="ph1">`value`</ph> parameter is written out seven bits at a time, starting with the seven least-significant bits.</source>
          <target state="translated">整數<ph id="ph1">`value`</ph>參數會寫出七個位元一次開頭的七個最小顯著性位元。</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write7BitEncodedInt(System.Int32)">
          <source>The high bit of a byte indicates whether there are more bytes to be written after this one.</source>
          <target state="translated">高的位元的位元組表示是否有更多的位元組寫入之後這一個。</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write7BitEncodedInt(System.Int32)">
          <source>If <ph id="ph1">`value`</ph> will fit in seven bits, it takes only one byte of space.</source>
          <target state="translated">如果<ph id="ph1">`value`</ph>符合七個位元，它會採用只有一個位元組的空間。</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write7BitEncodedInt(System.Int32)">
          <source>If <ph id="ph1">`value`</ph> will not fit in seven bits, the high bit is set on the first byte and written out. <ph id="ph2">`value`</ph> is then shifted by seven bits and the next byte is written.</source>
          <target state="translated">如果<ph id="ph1">`value`</ph>無法容納七個位元，在設定上的第一個位元組並寫出高位元。<ph id="ph2">`value`</ph>然後移位位元組會寫入七個位元，下一步。</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write7BitEncodedInt(System.Int32)">
          <source>This process is repeated until the entire integer has been written.</source>
          <target state="translated">重複執行此程序，直到已寫入整個的整數。</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryWriter.Write7BitEncodedInt(System.Int32)">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">如需的一般 I/O 工作清單，請參閱<bpt id="p1">[</bpt>一般 I/O 工作<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>。</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write7BitEncodedInt(System.Int32)">
          <source>The end of the stream is reached.</source>
          <target state="translated">已到達資料流的末端。</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write7BitEncodedInt(System.Int32)">
          <source>The stream is closed.</source>
          <target state="translated">資料流已關閉。</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryWriter.Write7BitEncodedInt(System.Int32)">
          <source>The stream is closed.</source>
          <target state="translated">資料流已關閉。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>