<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="FileSystemWatcher.xml" source-language="en-US" target-language="zh-TW">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5f524b1e2438cea1c3c824aa9514a36244ccff373.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f524b1e2438cea1c3c824aa9514a36244ccff373</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.IO.FileSystemWatcher">
          <source>Listens to the file system change notifications and raises events when a directory, or file in a directory, changes.</source>
          <target state="translated">當目錄或目錄內的檔案變更時，接聽 (Listen) 檔案系統變更通知並引發事件。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>Use <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> to watch for changes in a specified directory.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>監看的指定目錄中的變更。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>You can watch for changes in files and subdirectories of the specified directory.</source>
          <target state="translated">您可以監看檔案與指定之目錄的子目錄中的變更。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>You can create a component to watch files on a local computer, a network drive, or a remote computer.</source>
          <target state="translated">您可以建立監看檔案在本機電腦、 網路磁碟機或遠端電腦上的元件。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>To watch for changes in all files, set the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph> property to an empty string ("") or use wildcards ("*.<ph id="ph2">\*</ph>").</source>
          <target state="translated">若要監看所有檔案中的變更，將<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph>屬性設為空字串 ("") 或使用萬用字元 ("*。<ph id="ph2">\*</ph>")。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>To watch a specific file, set the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph> property to the file name.</source>
          <target state="translated">若要觀察特定的檔案，將<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph>屬性設為檔案名稱。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>For example, to watch for changes in the file MyDoc.txt, set the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph> property to "MyDoc.txt".</source>
          <target state="translated">例如，若要觀看檔案 MyDoc.txt 中變更，設定<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph>"MyDoc.txt"的屬性。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>You can also watch for changes in a certain type of file.</source>
          <target state="translated">您也可以觀看中特定檔案類型的變更。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>For example, to watch for changes in text files, set the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph> property to "<ph id="ph2">\*</ph>.txt".</source>
          <target state="translated">例如，若要監看的文字檔案中的變更，將<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph>屬性為"<ph id="ph2">\*</ph>.txt"。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>There are several types of changes you can watch for in a directory or file.</source>
          <target state="translated">有幾種類型的變更，您可以監看目錄或檔案中。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>For example, you can watch for changes in <ph id="ph1">`Attributes`</ph>, the <ph id="ph2">`LastWrite`</ph> date and time, or the <ph id="ph3">`Size`</ph> of files or directories.</source>
          <target state="translated">例如，您可以觀看中變更<ph id="ph1">`Attributes`</ph>、<ph id="ph2">`LastWrite`</ph>日期和時間，或<ph id="ph3">`Size`</ph>檔案或目錄。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>This is done by setting the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.NotifyFilter%2A&gt;</ph> property to one of the <ph id="ph2">&lt;xref:System.IO.NotifyFilters&gt;</ph> values.</source>
          <target state="translated">這是藉由設定<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.NotifyFilter%2A&gt;</ph>屬性設為其中的<ph id="ph2">&lt;xref:System.IO.NotifyFilters&gt;</ph>值。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>For more information on the type of changes you can watch, see <ph id="ph1">&lt;xref:System.IO.NotifyFilters&gt;</ph>.</source>
          <target state="translated">多個您可以監看的變更類型資訊，請參閱<ph id="ph1">&lt;xref:System.IO.NotifyFilters&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>You can watch for renaming, deletion, or creation of files or directories.</source>
          <target state="translated">您可以觀看重新命名、 刪除或建立檔案或目錄。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>For example, to watch for renaming of text files, set the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph> property to "*.txt" and call the <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.WaitForChanged%2A&gt;</ph> method with a <ph id="ph3">&lt;xref:System.IO.WatcherChangeTypes.Renamed&gt;</ph> specified for its parameter.</source>
          <target state="translated">例如，若要觀看的文字檔案重新命名，設定<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph>屬性設為"*.txt 」 並呼叫<ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.WaitForChanged%2A&gt;</ph>方法<ph id="ph3">&lt;xref:System.IO.WatcherChangeTypes.Renamed&gt;</ph>其參數所指定。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>The Windows operating system notifies your component of file changes in a buffer created by the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>.</source>
          <target state="translated">Windows 作業系統會通知您的元件所建立的緩衝區中的檔案變更的<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>If there are many changes in a short time, the buffer can overflow.</source>
          <target state="translated">如果短時間內有許多變更，緩衝區會溢位。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>This causes the component to lose track of changes in the directory, and it will only provide blanket notification.</source>
          <target state="translated">這會導致遺失的目錄中的變更追蹤的元件，它只會提供概括性的告知。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>Increasing the size of the buffer with the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.InternalBufferSize%2A&gt;</ph> property is expensive, as it comes from non-paged memory that cannot be swapped out to disk, so keep the buffer as small yet large enough to not miss any file change events.</source>
          <target state="translated">增加內部緩衝區大小<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.InternalBufferSize%2A&gt;</ph>屬性是高度耗費資源，因為它來自非分頁記憶體無法空出給磁碟，所以較小的緩衝區尚未大型足以不會遺漏任何檔案會變更事件。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>To avoid a buffer overflow, use the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.NotifyFilter%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A&gt;</ph> properties so you can filter out unwanted change notifications.</source>
          <target state="translated">若要避免緩衝區溢位，請使用<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.NotifyFilter%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A&gt;</ph>屬性，因此您可以篩選掉不必要的變更通知。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>For a list of initial property values for an instance of <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>, see the <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.%23ctor%2A&gt;</ph> constructor.</source>
          <target state="translated">如需執行個體的初始屬性值的清單<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>，請參閱<ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.%23ctor%2A&gt;</ph>建構函式。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>Please note the following when using the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> class.</source>
          <target state="translated">使用時，請注意下列<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>類別。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>Hidden files are not ignored.</source>
          <target state="translated">隱藏的檔案不會忽略。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>In some systems, <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> reports changes to files using the short 8.3 file name format.</source>
          <target state="translated">在某些系統上，<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>使用簡短的 8.3 檔案名稱格式的檔案來報告變更。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>For example, a change to  "LongFileName.LongExtension" could be reported as "LongFil~.Lon".</source>
          <target state="translated">例如，"LongFileName.LongExtension 」 的變更無法回報為 「 LongFil ~。Lon"。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>This class contains a link demand and an inheritance demand at the class level that applies to all members.</source>
          <target state="translated">這個類別包含的連結要求和繼承要求套用到所有成員的類別層級。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>A <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> is thrown when either the immediate caller or the derived class does not have full-trust permission.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph>立即呼叫者或衍生的類別並沒有完全信任權限時，會擲回。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>For details about security demands, see <bpt id="p1">[</bpt>Link Demands<ept id="p1">](~/docs/framework/misc/link-demands.md)</ept>.</source>
          <target state="translated">如需安全性需求的詳細資訊，請參閱<bpt id="p1">[</bpt>連結要求<ept id="p1">](~/docs/framework/misc/link-demands.md)</ept>。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>The maximum size you can set for the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.InternalBufferSize%2A&gt;</ph> property for monitoring a directory over the network is 64 KB.</source>
          <target state="translated">您可以設定的大小上限<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.InternalBufferSize%2A&gt;</ph>屬性透過網路監視的目錄是 64 KB。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>Running <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> on Windows 98 is not supported.</source>
          <target state="translated">執行<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>不支援 Windows 98 上。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>Copying and moving folders</source>
          <target state="translated">複製和移動資料夾</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>The operating system and <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> object interpret a cut-and-paste action or a move action as a rename action for a folder and its contents.</source>
          <target state="translated">作業系統和<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>物件解譯剪下和貼上動作或 move 動作做為重新命名動作的資料夾及其內容。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>If you cut and paste a folder with files into a folder being watched, the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> object reports only the folder as new, but not its contents because they are essentially only renamed.</source>
          <target state="translated">如果您剪下並將資料夾與檔案貼到正在監看資料夾<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>物件會報告的資料夾做為新的但不是其內容因為基本上只重新命名。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>To be notified that the contents of folders have been moved or copied into a watched folder, provide <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnChanged%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.OnRenamed%2A&gt;</ph> event handler methods as suggested in the following table.</source>
          <target state="translated">若要收到通知資料夾的內容已移動或複製到監看資料夾中，提供<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnChanged%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.OnRenamed%2A&gt;</ph>依下表中的事件處理常式方法。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>Event Handler</source>
          <target state="translated">事件處理常式</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>Events Handled</source>
          <target state="translated">處理的事件</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>Performs</source>
          <target state="translated">執行</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Changed&gt;</ph>, <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.Deleted&gt;</ph></source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Changed&gt;</ph>, <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.Deleted&gt;</ph></target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>Report changes in file attributes, created files, and deleted files.</source>
          <target state="translated">報表中的檔案屬性、 建立的檔案和已刪除之檔案的變更。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>List the old and new paths of renamed files and folders, expanding recursively if needed.</source>
          <target state="translated">列出舊的和新的路徑重新命名的檔案和資料夾，視需要展開以遞迴方式。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>Events and Buffer Sizes</source>
          <target state="translated">事件和緩衝區大小</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>Note that several factors can affect which file system change events are raised, as described by the following:</source>
          <target state="translated">請注意，許多因素可能會影響哪些檔案系統變更會引發事件，如以下所述：</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>Common file system operations might raise more than one event.</source>
          <target state="translated">常見的檔案系統作業可能會引發多個事件。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>For example, when a file is moved from one directory to another, several <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnChanged%2A&gt;</ph> and some <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.OnCreated%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.OnDeleted%2A&gt;</ph> events might be raised.</source>
          <target state="translated">例如，當檔案移到另一個，有數個目錄從<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnChanged%2A&gt;</ph>和某些<ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.OnCreated%2A&gt;</ph>和<ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.OnDeleted%2A&gt;</ph>可能引發事件。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>Moving a file is a complex operation that consists of multiple simple operations, therefore raising multiple events.</source>
          <target state="translated">移動檔案一種複雜的作業，包含多個簡單的作業，因此會引發多個事件。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>Likewise, some applications (for example, antivirus software) might cause additional file system events that are detected by <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>.</source>
          <target state="translated">同樣地，某些應用程式 （例如，防毒軟體） 可能會造成偵測到的其他檔案系統事件<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>The <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> can watch disks as long as they are not switched or removed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>可以觀看磁碟，只要不切換或移除。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>The <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> does not raise events for CDs and DVDs, because time stamps and properties cannot change.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>不會引發事件的 Cd 與 Dvd，因為時間戳記和屬性不能變更。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>Remote computers must have one of the required platforms installed for the component to function properly.</source>
          <target state="translated">遠端電腦必須有一個必要的平台安裝元件正確運作。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>If multiple <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> objects are watching the same UNC path in Windows XP prior to Service Pack 1, or Windows 2000 SP2 or earlier, then only one of the objects will raise an event.</source>
          <target state="translated">若為多個<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>觀賞物件在 Windows XP Service Pack 1 之前的相同 UNC 路徑，或 Windows 2000 SP2 或更早版本，則只有其中一個物件將會引發事件。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>On machines running Windows XP SP1 and newer, Windows 2000 SP3 or newer or Windows Server 2003, all <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> objects will raise the appropriate events.</source>
          <target state="translated">在電腦上執行 Windows XP SP1 和更新版本中，Windows 2000 SP3 或更新版本或 Windows Server 2003，所有<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>物件將會引發適當的事件。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>Note that a <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> may miss an event when the buffer size is exceeded.</source>
          <target state="translated">請注意，<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>可能會遺失超過緩衝區大小時的事件。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>To avoid missing events, follow these guidelines:</source>
          <target state="translated">若要避免遺失事件，請遵循這些指導方針：</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>Increase the buffer size by setting the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.InternalBufferSize%2A&gt;</ph> property.</source>
          <target state="translated">增加所設定的緩衝區大小<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.InternalBufferSize%2A&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>Avoid watching files with long file names, because a long file name contributes to filling up the buffer.</source>
          <target state="translated">避免監看檔案具有長檔名，因為長檔名作為填滿緩衝區。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>Consider renaming these files using shorter names.</source>
          <target state="translated">請考慮重新命名這些檔案使用較短的名稱。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>Keep your event handling code as short as possible.</source>
          <target state="translated">讓事件處理程式碼越短越好。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>The following example creates a <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> to watch the directory specified at run time.</source>
          <target state="translated">下列範例會建立<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>監看在執行階段指定的目錄。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>The component is set to watch for changes in <ph id="ph1">`LastWrite`</ph> and <ph id="ph2">`LastAccess`</ph> time, the creation, deletion, or renaming of text files in the directory.</source>
          <target state="translated">元件會設定為監看的變更在<ph id="ph1">`LastWrite`</ph>和<ph id="ph2">`LastAccess`</ph>時間、 建立、 刪除、 或重新命名目錄中的文字檔案。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>If a file is changed, created, or deleted, the path to the file prints to the console.</source>
          <target state="translated">如果變更、 建立或刪除檔案，檔案的路徑會列印到主控台。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>When a file is renamed, the old and new paths print to the console.</source>
          <target state="translated">重新命名檔案時，新舊路徑列印到主控台。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>Use the <ph id="ph1">&lt;xref:System.Diagnostics&gt;</ph> and <ph id="ph2">&lt;xref:System.IO&gt;</ph> namespaces for this example.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Diagnostics&gt;</ph>和<ph id="ph2">&lt;xref:System.IO&gt;</ph>此範例中的命名空間。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>for deriving from the <ph id="ph1">&lt;see cref="T:System.Diagnostics.ProcessStartInfo" /&gt;</ph> class.</source>
          <target state="translated">針對衍生自<ph id="ph1">&lt;see cref="T:System.Diagnostics.ProcessStartInfo" /&gt;</ph>類別。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>Demand value: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand" /&gt;</ph>; Named Permission Sets: <ph id="ph2">&lt;see langword="FullTrust" /&gt;</ph>.</source>
          <target state="translated">要求的值： <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand" /&gt;</ph>;具名使用權限集合： <ph id="ph2">&lt;see langword="FullTrust" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="T:System.IO.FileSystemWatcher">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.FileSystemWatcher" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.IO.FileSystemWatcher" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.FileSystemWatcher" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.IO.FileSystemWatcher" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor">
          <source>You cannot watch a remote computer that does not have Windows NT or Windows 2000.</source>
          <target state="translated">您無法監看遠端電腦沒有 Windows NT 或 Windows 2000。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor">
          <source>You cannot watch a remote Windows NT 4.0 computer from a Windows NT 4.0 computer.</source>
          <target state="translated">您無法監看遠端 Windows NT 4.0 電腦從 Windows NT 4.0 的電腦。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor">
          <source>The following table shows initial property values for an instance of <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>.</source>
          <target state="translated">下表顯示的執行個體的初始屬性值<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor">
          <source>Property</source>
          <target state="translated">屬性</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor">
          <source>Initial Value</source>
          <target state="translated">初始值</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor">
          <source>bitwise OR combination of <ph id="ph1">`LastWrite`</ph>, <ph id="ph2">`FileName`</ph>, and <ph id="ph3">`DirectoryName`</ph></source>
          <target state="translated">位元 OR 組合的<ph id="ph1">`LastWrite`</ph>， <ph id="ph2">`FileName`</ph>，和 <ph id="ph3">`DirectoryName`</ph></target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor">
          <source>"*.<ph id="ph1">\*</ph>" (Watch all files.)</source>
          <target state="translated">"*.<ph id="ph1">\*</ph>「 （監看所有檔案。）</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor">
          <source>8192</source>
          <target state="translated">8192</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor">
          <source>empty string ("")</source>
          <target state="translated">空字串 ("")</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor">
          <source>The component will not watch the specified directory until the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Path%2A&gt;</ph> is set, and <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A&gt;</ph> is <ph id="ph3">`true`</ph>.</source>
          <target state="translated">此元件將無法觀賞直到指定的目錄<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Path%2A&gt;</ph>設定，和<ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A&gt;</ph>是<ph id="ph3">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor">
          <source>The following example creates a <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> object to watch the directory specified at run time.</source>
          <target state="translated">下列範例會建立<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>監看的目錄，在執行階段指定的物件。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor">
          <source>The <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> object watches for changes in <ph id="ph2">`LastWrite`</ph> and <ph id="ph3">`LastAccess`</ph> times, and for the creation, deletion, or renaming of text files in the directory.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>物件監看的變更<ph id="ph2">`LastWrite`</ph>和<ph id="ph3">`LastAccess`</ph>刪除或重新命名的文字，以及建立，檔案的目錄中。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor">
          <source>If a file is changed, created, or deleted, the path to the file displays to the console.</source>
          <target state="translated">如果變更、 建立或刪除檔案，檔案的路徑會顯示到主控台。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor">
          <source>When a file is renamed, the old and new paths display to the console.</source>
          <target state="translated">重新命名檔案時對主控台顯示舊的和新的路徑。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor">
          <source>This example uses the <ph id="ph1">&lt;xref:System.Diagnostics&gt;</ph> and <ph id="ph2">&lt;xref:System.IO&gt;</ph> namespaces.</source>
          <target state="translated">這個範例會使用<ph id="ph1">&lt;xref:System.Diagnostics&gt;</ph>和<ph id="ph2">&lt;xref:System.IO&gt;</ph>命名空間。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">針對完全信任立即呼叫者。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">這個成員無法供部分信任的程式碼使用。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.#ctor(System.String)">
          <source>The directory to monitor, in standard or Universal Naming Convention (UNC) notation.</source>
          <target state="translated">要監視的目錄，使用標準或通用命名慣例標記法。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.#ctor(System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.FileSystemWatcher" /&gt;</ph> class, given the specified directory to monitor.</source>
          <target state="translated">提供要監視的指定目錄，初始化 <ph id="ph1">&lt;see cref="T:System.IO.FileSystemWatcher" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor(System.String)">
          <source>The component will not watch the specified directory until the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Path%2A&gt;</ph> is set, and <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A&gt;</ph> is <ph id="ph3">`true`</ph>.</source>
          <target state="translated">此元件將無法觀賞直到指定的目錄<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Path%2A&gt;</ph>設定，和<ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A&gt;</ph>是<ph id="ph3">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor(System.String)">
          <source>The component can watch files on your personal computer, a network drive, or a remote computer.</source>
          <target state="translated">元件可以監看您的個人電腦、 網路磁碟機或遠端電腦上的檔案。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor(System.String)">
          <source>You cannot watch a remote computer that does not have Windows NT or Windows 2000.</source>
          <target state="translated">您無法監看遠端電腦沒有 Windows NT 或 Windows 2000。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor(System.String)">
          <source>You cannot watch a remote Windows NT 4.0 computer from a Windows NT 4.0 computer.</source>
          <target state="translated">您無法監看遠端 Windows NT 4.0 電腦從 Windows NT 4.0 的電腦。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph> property is set by default to watch all files.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph>屬性由預設設定要監看所有檔案。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.#ctor(System.String)">
          <source>The <ph id="ph1">&lt;paramref name="path" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="path" /&gt;</ph> 參數為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.#ctor(System.String)">
          <source>The <ph id="ph1">&lt;paramref name="path" /&gt;</ph> parameter is an empty string ("").</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="path" /&gt;</ph> 參數是空字串 ("")。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.#ctor(System.String)">
          <source>-or-</source>
          <target state="translated">-或-</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.#ctor(System.String)">
          <source>The path specified through the <ph id="ph1">&lt;paramref name="path" /&gt;</ph> parameter does not exist.</source>
          <target state="translated">透過 <ph id="ph1">&lt;paramref name="path" /&gt;</ph> 參數指定的路徑不存在。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.#ctor(System.String)">
          <source><ph id="ph1">&lt;paramref name="path" /&gt;</ph> is too long.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="path" /&gt;</ph> 太長。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor(System.String)">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">針對完全信任立即呼叫者。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor(System.String)">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">這個成員無法供部分信任的程式碼使用。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.#ctor(System.String,System.String)">
          <source>The directory to monitor, in standard or Universal Naming Convention (UNC) notation.</source>
          <target state="translated">要監視的目錄，使用標準或通用命名慣例標記法。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.#ctor(System.String,System.String)">
          <source>The type of files to watch.</source>
          <target state="translated">要監看的檔案類型。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.#ctor(System.String,System.String)">
          <source>For example, "*.txt" watches for changes to all text files.</source>
          <target state="translated">例如，"*.txt" 監看所有文字檔的變更。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.#ctor(System.String,System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.FileSystemWatcher" /&gt;</ph> class, given the specified directory and type of files to monitor.</source>
          <target state="translated">提供要監視的指定目錄和檔案類型，初始化 <ph id="ph1">&lt;see cref="T:System.IO.FileSystemWatcher" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor(System.String,System.String)">
          <source>The component will not watch the specified directory until the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Path%2A&gt;</ph> is set, and <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A&gt;</ph> is <ph id="ph3">`true`</ph>.</source>
          <target state="translated">此元件將無法觀賞直到指定的目錄<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Path%2A&gt;</ph>設定，和<ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A&gt;</ph>是<ph id="ph3">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor(System.String,System.String)">
          <source>The component can watch files on your personal computer, a network drive, or a remote computer.</source>
          <target state="translated">元件可以監看您的個人電腦、 網路磁碟機或遠端電腦上的檔案。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor(System.String,System.String)">
          <source>You cannot watch a remote computer that does not have Windows NT or Windows 2000.</source>
          <target state="translated">您無法監看遠端電腦沒有 Windows NT 或 Windows 2000。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor(System.String,System.String)">
          <source>You cannot watch a remote Windows NT 4.0 computer from a Windows NT 4.0 computer.</source>
          <target state="translated">您無法監看遠端 Windows NT 4.0 電腦從 Windows NT 4.0 的電腦。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.#ctor(System.String,System.String)">
          <source>The <ph id="ph1">&lt;paramref name="path" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="path" /&gt;</ph> 參數為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.#ctor(System.String,System.String)">
          <source>-or-</source>
          <target state="translated">-或-</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.#ctor(System.String,System.String)">
          <source>The <ph id="ph1">&lt;paramref name="filter" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="filter" /&gt;</ph> 參數為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.#ctor(System.String,System.String)">
          <source>The <ph id="ph1">&lt;paramref name="path" /&gt;</ph> parameter is an empty string ("").</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="path" /&gt;</ph> 參數是空字串 ("")。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.#ctor(System.String,System.String)">
          <source>-or-</source>
          <target state="translated">-或-</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.#ctor(System.String,System.String)">
          <source>The path specified through the <ph id="ph1">&lt;paramref name="path" /&gt;</ph> parameter does not exist.</source>
          <target state="translated">透過 <ph id="ph1">&lt;paramref name="path" /&gt;</ph> 參數指定的路徑不存在。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.#ctor(System.String,System.String)">
          <source><ph id="ph1">&lt;paramref name="path" /&gt;</ph> is too long.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="path" /&gt;</ph> 太長。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor(System.String,System.String)">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">針對完全信任立即呼叫者。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor(System.String,System.String)">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">這個成員無法供部分信任的程式碼使用。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.BeginInit">
          <source>Begins the initialization of a <ph id="ph1">&lt;see cref="T:System.IO.FileSystemWatcher" /&gt;</ph> used on a form or used by another component.</source>
          <target state="translated">開始初始化用於表單或為另一個元件所使用的 <ph id="ph1">&lt;see cref="T:System.IO.FileSystemWatcher" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.BeginInit">
          <source>The initialization occurs at run time.</source>
          <target state="translated">初始化發生於執行階段。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.BeginInit">
          <source>The <ph id="ph1">[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]</ph> design environment uses this method to start the initialization of a component used on a form or used by another component.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]</ph>設計環境會使用這個方法來啟動元件的初始化用於表單或另一個元件所使用。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.BeginInit">
          <source>The <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.EndInit%2A&gt;</ph> method ends the initialization.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.EndInit%2A&gt;</ph>方法結束初始化。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.BeginInit">
          <source>Using the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.BeginInit%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.EndInit%2A&gt;</ph> methods prevents the control from being used before it is fully initialized.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.BeginInit%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.EndInit%2A&gt;</ph>方法可防止控制項完全初始化之前使用。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="E:System.IO.FileSystemWatcher.Changed">
          <source>Occurs when a file or directory in the specified <ph id="ph1">&lt;see cref="P:System.IO.FileSystemWatcher.Path" /&gt;</ph> is changed.</source>
          <target state="translated">發生在指定之 <ph id="ph1">&lt;see cref="P:System.IO.FileSystemWatcher.Path" /&gt;</ph> 內的檔案或目錄變更時。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Changed">
          <source>The <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Changed&gt;</ph> event is raised when changes are made to the size, system attributes, last write time, last access time, or security permissions of a file or directory in the directory being monitored.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Changed&gt;</ph>大小變更時引發事件時，系統屬性、 上次寫入時間、 上次存取時間或檔案或目錄的安全性權限受監視的目錄中。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Changed">
          <source>Common file system operations might raise more than one event.</source>
          <target state="translated">常見的檔案系統作業可能會引發多個事件。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Changed">
          <source>For example, when a file is moved from one directory to another, several <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnChanged%2A&gt;</ph> and some <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.OnCreated%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.OnDeleted%2A&gt;</ph> events might be raised.</source>
          <target state="translated">例如，當檔案移到另一個，有數個目錄從<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnChanged%2A&gt;</ph>和某些<ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.OnCreated%2A&gt;</ph>和<ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.OnDeleted%2A&gt;</ph>可能引發事件。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Changed">
          <source>Moving a file is a complex operation that consists of multiple simple operations, therefore raising multiple events.</source>
          <target state="translated">移動檔案一種複雜的作業，包含多個簡單的作業，因此會引發多個事件。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Changed">
          <source>Likewise, some applications (for example, antivirus software) might cause additional file system events that are detected by <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>.</source>
          <target state="translated">同樣地，某些應用程式 （例如，防毒軟體） 可能會造成偵測到的其他檔案系統事件<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Changed">
          <source>Use <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.NotifyFilter%2A&gt;</ph> to restrict the number of notifications raised when this event is handled.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.NotifyFilter%2A&gt;</ph>限制處理此事件時引發的通知數目。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Changed">
          <source>The <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Changed&gt;</ph> event is raised unexpectedly when a file is renamed, but is not raised when a directory is renamed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Changed&gt;</ph>檔案重新命名，但在重新命名目錄時，不會引發時非預期地引發事件。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Changed">
          <source>To watch for renaming, use the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Renamed&gt;</ph> event.</source>
          <target state="translated">若要觀看重新命名，使用<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Renamed&gt;</ph>事件。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Changed">
          <source>The order in which the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Changed&gt;</ph> event is raised in relation to the other <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> events may change when the <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.SynchronizingObject%2A&gt;</ph> property is not <ph id="ph4">`null`</ph>.</source>
          <target state="translated">順序<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Changed&gt;</ph>引發彼此<ph id="ph2">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>事件時可能會變更<ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.SynchronizingObject%2A&gt;</ph>屬性不是<ph id="ph4">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Changed">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Changed&gt;</ph> event to display the file path to the console whenever the watched file is changed.</source>
          <target state="translated">下列範例會使用<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Changed&gt;</ph>事件，以對主控台顯示的檔案路徑，每當監看的檔案變更時。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="E:System.IO.FileSystemWatcher.Created">
          <source>Occurs when a file or directory in the specified <ph id="ph1">&lt;see cref="P:System.IO.FileSystemWatcher.Path" /&gt;</ph> is created.</source>
          <target state="translated">發生在指定之 <ph id="ph1">&lt;see cref="P:System.IO.FileSystemWatcher.Path" /&gt;</ph> 內的檔案或目錄建立時。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Created">
          <source>Some common occurrences, such as copying or moving a file or directory, do not correspond directly to an event, but these occurrences do cause events to be raised.</source>
          <target state="translated">一些常見的動作，例如複製或移動檔案或目錄中，執行不直接對應到事件，而這些項目會導致引發的事件。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Created">
          <source>When you copy a file or directory, the system raises a <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph> event in the directory to which the file was copied, if that directory is being watched.</source>
          <target state="translated">當您複製檔案或目錄時，系統就會引發<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph>要複製檔案，如果該目錄正在監看的目錄中的事件。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Created">
          <source>If the directory from which you copied was being watched by another instance of <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>, no event would be raised.</source>
          <target state="translated">如果您複製的目錄已被另一個執行個體所監看<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>，就會引發任何事件。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Created">
          <source>For example, you create two instances of <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>.</source>
          <target state="translated">例如，您建立兩個執行個體<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Created">
          <source>FileSystemWatcher1 is set to watch "C:\My Documents", and FileSystemWatcher2 is set to watch "C:\Your Documents".</source>
          <target state="translated">FileSystemWatcher1 設定要監看"C:\My Documents"和 FileSystemWatcher2 設定要監看 「 C:\Your 文件 」。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Created">
          <source>If you copy a file from "My Documents" into "Your Documents", a <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph> event will be raised by FileSystemWatcher2, but no event is raised for FileSystemWatcher1.</source>
          <target state="translated">如果您將檔案從 「 我的文件 」 複製到 「 您文件 」 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph> FileSystemWatcher2，將會引發事件，但不會引發事件的 FileSystemWatcher1。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Created">
          <source>Unlike copying, moving a file or directory would raise two events.</source>
          <target state="translated">不同於複製、 移動檔案或目錄將會引發兩個事件。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Created">
          <source>From the previous example, if you moved a file from "My Documents" to "Your Documents", a <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph> event would be raised by FileSystemWatcher2 and a <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.Deleted&gt;</ph> event would be raised by FileSystemWatcher1.</source>
          <target state="translated">上述範例中，如果您將檔案從 「 我的文件 」 移到 「 您文件 」，從<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph>FileSystemWatcher2 會引發事件和<ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.Deleted&gt;</ph>FileSystemWatcher1 會引發事件。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Created">
          <source>Common file system operations might raise more than one event.</source>
          <target state="translated">常見的檔案系統作業可能會引發多個事件。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Created">
          <source>For example, when a file is moved from one directory to another, several <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnChanged%2A&gt;</ph> and some <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.OnCreated%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.OnDeleted%2A&gt;</ph> events might be raised.</source>
          <target state="translated">例如，當檔案移到另一個，有數個目錄從<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnChanged%2A&gt;</ph>和某些<ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.OnCreated%2A&gt;</ph>和<ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.OnDeleted%2A&gt;</ph>可能引發事件。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Created">
          <source>Moving a file is a complex operation that consists of multiple simple operations, therefore raising multiple events.</source>
          <target state="translated">移動檔案一種複雜的作業，包含多個簡單的作業，因此會引發多個事件。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Created">
          <source>Likewise, some applications (for example, antivirus software) might cause additional file system events that are detected by <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>.</source>
          <target state="translated">同樣地，某些應用程式 （例如，防毒軟體） 可能會造成偵測到的其他檔案系統事件<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Created">
          <source>The order in which the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph> event is raised in relation to the other <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> events may change when the <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.SynchronizingObject%2A&gt;</ph> property is not <ph id="ph4">`null`</ph>.</source>
          <target state="translated">順序<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph>引發彼此<ph id="ph2">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>事件時可能會變更<ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.SynchronizingObject%2A&gt;</ph>屬性不是<ph id="ph4">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Created">
          <source>The <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnCreated%2A&gt;</ph> event is raised as soon as a file is created.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnCreated%2A&gt;</ph>會建立一個檔案時，就會引發事件。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Created">
          <source>If a file is being copied or transferred into a watched directory, the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnCreated%2A&gt;</ph> event will be raised immediately, followed by one or more <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.OnChanged%2A&gt;</ph> events.</source>
          <target state="translated">如果正在將檔案複製或傳送到監看的目錄中，<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnCreated%2A&gt;</ph>會立即引發事件，後面接著一或多個<ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.OnChanged%2A&gt;</ph>事件。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Created">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph> event to display the file path to the console whenever the watched file is created.</source>
          <target state="translated">下列範例會使用<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph>事件，以建立保存的檔案時對主控台顯示的檔案路徑。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="E:System.IO.FileSystemWatcher.Deleted">
          <source>Occurs when a file or directory in the specified <ph id="ph1">&lt;see cref="P:System.IO.FileSystemWatcher.Path" /&gt;</ph> is deleted.</source>
          <target state="translated">發生在指定之 <ph id="ph1">&lt;see cref="P:System.IO.FileSystemWatcher.Path" /&gt;</ph> 內的檔案或目錄刪除時。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Deleted">
          <source>Some common occurrences, such as copying or moving a file or directory, do not correspond directly to an event, but these occurrences do cause events to be raised.</source>
          <target state="translated">一些常見的動作，例如複製或移動檔案或目錄中，執行不直接對應到事件，而這些項目會導致引發的事件。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Deleted">
          <source>When you copy a file or directory, the system raises a <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph> event in the directory to which the file was copied, if that directory is being watched.</source>
          <target state="translated">當您複製檔案或目錄時，系統就會引發<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph>要複製檔案，如果該目錄正在監看的目錄中的事件。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Deleted">
          <source>If the directory from which you copied was being watched by another instance of <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>, no event would be raised.</source>
          <target state="translated">如果您複製的目錄已被另一個執行個體所監看<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>，就會引發任何事件。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Deleted">
          <source>For example, you create two instances of <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>.</source>
          <target state="translated">例如，您建立兩個執行個體<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Deleted">
          <source>FileSystemWatcher1 is set to watch "C:\My Documents", and FileSystemWatcher2 is set to watch "C:\Your Documents".</source>
          <target state="translated">FileSystemWatcher1 設定要監看"C:\My Documents"和 FileSystemWatcher2 設定要監看 「 C:\Your 文件 」。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Deleted">
          <source>If you copy a file from "My Documents" into "Your Documents", a <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph> event will be raised by FileSystemWatcher2, but no event is raised for FileSystemWatcher1.</source>
          <target state="translated">如果您將檔案從 「 我的文件 」 複製到 「 您文件 」 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph> FileSystemWatcher2，將會引發事件，但不會引發事件的 FileSystemWatcher1。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Deleted">
          <source>Unlike copying, moving a file or directory would raise two events.</source>
          <target state="translated">不同於複製、 移動檔案或目錄將會引發兩個事件。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Deleted">
          <source>From the previous example, if you moved a file from "My Documents" to "Your Documents", a <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph> event would be raised by FileSystemWatcher2 and a <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.Deleted&gt;</ph> event would be raised by FileSystemWatcher1.</source>
          <target state="translated">上述範例中，如果您將檔案從 「 我的文件 」 移到 「 您文件 」，從<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph>FileSystemWatcher2 會引發事件和<ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.Deleted&gt;</ph>FileSystemWatcher1 會引發事件。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Deleted">
          <source>Common file system operations might raise more than one event.</source>
          <target state="translated">常見的檔案系統作業可能會引發多個事件。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Deleted">
          <source>For example, when a file is moved from one directory to another, several <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnChanged%2A&gt;</ph> and some <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.OnCreated%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.OnDeleted%2A&gt;</ph> events might be raised.</source>
          <target state="translated">例如，當檔案移到另一個，有數個目錄從<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnChanged%2A&gt;</ph>和某些<ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.OnCreated%2A&gt;</ph>和<ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.OnDeleted%2A&gt;</ph>可能引發事件。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Deleted">
          <source>Moving a file is a complex operation that consists of multiple simple operations, therefore raising multiple events.</source>
          <target state="translated">移動檔案一種複雜的作業，包含多個簡單的作業，因此會引發多個事件。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Deleted">
          <source>Likewise, some applications (for example, antivirus software) might cause additional file system events that are detected by <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>.</source>
          <target state="translated">同樣地，某些應用程式 （例如，防毒軟體） 可能會造成偵測到的其他檔案系統事件<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Deleted">
          <source>The order in which the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Deleted&gt;</ph> event is raised in relation to the other <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> events may change when the <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.SynchronizingObject%2A&gt;</ph> property is not <ph id="ph4">`null`</ph>.</source>
          <target state="translated">順序<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Deleted&gt;</ph>引發彼此<ph id="ph2">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>事件時可能會變更<ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.SynchronizingObject%2A&gt;</ph>屬性不是<ph id="ph4">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Deleted">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Deleted&gt;</ph> event to display the file path to the console whenever the watched file is deleted.</source>
          <target state="translated">下列範例會使用<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Deleted&gt;</ph>事件，以對主控台顯示的檔案路徑，只要刪除監看的檔案。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to release both managed and unmanaged resources; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to release only unmanaged resources.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> 表示釋放 Managed 和 Unmanaged 資源，<ph id="ph2">&lt;see langword="false" /&gt;</ph> 則表示只釋放 Unmanaged 資源。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.Dispose(System.Boolean)">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;see cref="T:System.IO.FileSystemWatcher" /&gt;</ph> and optionally releases the managed resources.</source>
          <target state="translated">釋放 <ph id="ph1">&lt;see cref="T:System.IO.FileSystemWatcher" /&gt;</ph> 所使用的 Unmanaged 資源，並選擇性地釋放 Managed 資源。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.Dispose(System.Boolean)">
          <source>This method is called by the public <ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> method and the <ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph> method.</source>
          <target state="translated">這個方法會呼叫公用<ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph>方法和<ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> invokes the protected <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.Dispose%2A&gt;</ph> method with the <ph id="ph3">`disposing`</ph> parameter set to <ph id="ph4">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> 叫用受保護<ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.Dispose%2A&gt;</ph>方法<ph id="ph3">`disposing`</ph>參數設定為<ph id="ph4">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.Dispose%2A&gt;</ph> with <ph id="ph3">`disposing`</ph> set to <ph id="ph4">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> 叫用<ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.Dispose%2A&gt;</ph>與<ph id="ph3">`disposing`</ph>設<ph id="ph4">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.Dispose(System.Boolean)">
          <source>When the <ph id="ph1">`disposing`</ph> parameter is <ph id="ph2">`true`</ph>, this method releases all resources held by any managed objects that this <ph id="ph3">&lt;xref:System.IO.Compression.DeflateStream&gt;</ph> references.</source>
          <target state="translated"><ph id="ph1">`disposing`</ph> 參數為 <ph id="ph2">`true`</ph> 時，這個方法會釋放 <ph id="ph3">&lt;xref:System.IO.Compression.DeflateStream&gt;</ph> 參考的任何 Managed 物件所掌握的資源。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.Dispose(System.Boolean)">
          <source>This method invokes the <ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> method of each referenced object.</source>
          <target state="translated">這個方法會叫用每個參考物件的 <ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> 方法。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph> can be called multiple times by other objects.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph> 可以被其他物件呼叫多次。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.Dispose(System.Boolean)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.IO.FileSystemWatcher.Dispose(System.Boolean)" /&gt;</ph> be careful not to reference objects that have been previously disposed of in an earlier call to <ph id="ph2">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph>.</source>
          <target state="translated">在覆寫<ph id="ph1">&lt;see cref="M:System.IO.FileSystemWatcher.Dispose(System.Boolean)" /&gt;</ph>小心不要參考物件已處置過的早期呼叫中<ph id="ph2">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.Dispose(System.Boolean)">
          <source>For more information about how to implement <ph id="ph1">&lt;see cref="M:System.IO.FileSystemWatcher.Dispose(System.Boolean)" /&gt;</ph>, see <bpt id="p1">[</bpt>Implementing a Dispose Method<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">如需有關如何實作<ph id="ph1">&lt;see cref="M:System.IO.FileSystemWatcher.Dispose(System.Boolean)" /&gt;</ph>，請參閱<bpt id="p1">[</bpt>實作 Dispose 方法<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.Dispose(System.Boolean)">
          <source>For more information about <ph id="ph1">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph> and <ph id="ph2">&lt;see cref="M:System.Object.Finalize" /&gt;</ph>, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>.</source>
          <target state="translated">如需有關<ph id="ph1">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph>和<ph id="ph2">&lt;see cref="M:System.Object.Finalize" /&gt;</ph>，請參閱<bpt id="p1">[</bpt>清除 Unmanaged 資源上<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="P:System.IO.FileSystemWatcher.EnableRaisingEvents">
          <source>Gets or sets a value indicating whether the component is enabled.</source>
          <target state="translated">取得或設定數值，表示是否啟用元件。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.EnableRaisingEvents">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the component is enabled; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果啟用元件，則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.EnableRaisingEvents">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">預設值為 <ph id="ph1">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.EnableRaisingEvents">
          <source>If you are using the component on a designer in <ph id="ph1">[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]</ph>, the default is <ph id="ph2">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">如果您在 <ph id="ph1">[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]</ph> 中使用設計工具上的元件，則預設值為 <ph id="ph2">&lt;see langword="true" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.EnableRaisingEvents">
          <source>The component will not raise events unless you set <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A&gt;</ph> to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">元件不會引發事件，除非您將設定<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A&gt;</ph>至<ph id="ph2">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.EnableRaisingEvents">
          <source>The component will not watch the specified directory until the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Path%2A&gt;</ph> property has been set and <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A&gt;</ph> is <ph id="ph3">`true`</ph>.</source>
          <target state="translated">此元件將無法觀賞直到指定的目錄<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Path%2A&gt;</ph>屬性已設定和<ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A&gt;</ph>是<ph id="ph3">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.EnableRaisingEvents">
          <source>The <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.WaitForChanged%2A&gt;</ph> method allows event handlers to be invoked to respond to file changes even if this property is set to <ph id="ph2">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.WaitForChanged%2A&gt;</ph>方法可讓事件處理常式被叫用來回應檔案的變更，即使此屬性設定為<ph id="ph2">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.EnableRaisingEvents">
          <source>The following example creates a <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> to watch the directory specified at run time.</source>
          <target state="translated">下列範例會建立<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>監看在執行階段指定的目錄。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.EnableRaisingEvents">
          <source>The component is set to watch for changes in <ph id="ph1">`LastWrite`</ph> and <ph id="ph2">`LastAccess`</ph> time, the creation, deletion, or renaming of text files in the directory.</source>
          <target state="translated">元件會設定為監看的變更在<ph id="ph1">`LastWrite`</ph>和<ph id="ph2">`LastAccess`</ph>時間、 建立、 刪除、 或重新命名目錄中的文字檔案。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.EnableRaisingEvents">
          <source>If a file is changed, created, or deleted, the path to the file prints to the console.</source>
          <target state="translated">如果變更、 建立或刪除檔案，檔案的路徑會列印到主控台。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.EnableRaisingEvents">
          <source>When a file is renamed, the old and new paths print to the console.</source>
          <target state="translated">重新命名檔案時，新舊路徑列印到主控台。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.EnableRaisingEvents">
          <source>Use the <ph id="ph1">&lt;xref:System.Diagnostics&gt;</ph> and <ph id="ph2">&lt;xref:System.IO&gt;</ph> namespaces for this example.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Diagnostics&gt;</ph>和<ph id="ph2">&lt;xref:System.IO&gt;</ph>此範例中的命名空間。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="P:System.IO.FileSystemWatcher.EnableRaisingEvents">
          <source>The <ph id="ph1">&lt;see cref="T:System.IO.FileSystemWatcher" /&gt;</ph> object has been disposed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.FileSystemWatcher" /&gt;</ph> 物件已經處置。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="P:System.IO.FileSystemWatcher.EnableRaisingEvents">
          <source>The current operating system is not Microsoft Windows NT or later.</source>
          <target state="translated">目前的作業系統不是 Microsoft Windows NT 或更新版本。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="P:System.IO.FileSystemWatcher.EnableRaisingEvents">
          <source>The directory specified in <ph id="ph1">&lt;see cref="P:System.IO.FileSystemWatcher.Path" /&gt;</ph> could not be found.</source>
          <target state="translated">找不到在 <ph id="ph1">&lt;see cref="P:System.IO.FileSystemWatcher.Path" /&gt;</ph> 中指定的目錄。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="P:System.IO.FileSystemWatcher.EnableRaisingEvents">
          <source><ph id="ph1">&lt;see cref="P:System.IO.FileSystemWatcher.Path" /&gt;</ph> has not been set or is invalid.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.IO.FileSystemWatcher.Path" /&gt;</ph> 尚未設定或無效。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.EndInit">
          <source>Ends the initialization of a <ph id="ph1">&lt;see cref="T:System.IO.FileSystemWatcher" /&gt;</ph> used on a form or used by another component.</source>
          <target state="translated">結束初始化用於表單或為另一個元件所使用的 <ph id="ph1">&lt;see cref="T:System.IO.FileSystemWatcher" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.EndInit">
          <source>The initialization occurs at run time.</source>
          <target state="translated">初始化發生於執行階段。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.EndInit">
          <source>The <ph id="ph1">[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]</ph> design environment uses this method to end the initialization of a component used on a form or used by another component.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]</ph>設計環境會使用這個方法來結束一個元件的初始化用於表單或另一個元件所使用。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.EndInit">
          <source>The <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.BeginInit%2A&gt;</ph> method starts the initialization.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.BeginInit%2A&gt;</ph>方法初始化開始。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.EndInit">
          <source>Using the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.BeginInit%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.EndInit%2A&gt;</ph> methods prevents the control from being used before it is fully initialized.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.BeginInit%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.EndInit%2A&gt;</ph>方法可防止控制項完全初始化之前使用。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="E:System.IO.FileSystemWatcher.Error">
          <source>Occurs when the instance of <ph id="ph1">&lt;see cref="T:System.IO.FileSystemWatcher" /&gt;</ph> is unable to continue monitoring changes or when the internal buffer overflows.</source>
          <target state="translated">發生在 <ph id="ph1">&lt;see cref="T:System.IO.FileSystemWatcher" /&gt;</ph> 執行個體無法繼續執行監視變更時或在內部緩衝區溢位時。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Error">
          <source>This event is raised whenever something prevents the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> object from monitoring changes.</source>
          <target state="translated">會引發這個事件，只要項目會阻止<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>從監視變更的物件。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Error">
          <source>For example, if the object is monitoring changes in a remote directory and the connection to that directory is lost, the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Error&gt;</ph> event is raised.</source>
          <target state="translated">例如，如果物件正在監視遠端目錄中的變更，該目錄的連線已中斷，<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Error&gt;</ph>就會引發事件。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Error">
          <source>The system notifies you of file changes, and it stores those changes in a buffer that the component creates and passes to the APIs.</source>
          <target state="translated">系統會通知您的檔案變更，並將這些變更儲存在緩衝區中的元件建立及傳遞至應用程式開發介面。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Error">
          <source>If there are many changes in a short time, the buffer can overflow.</source>
          <target state="translated">如果短時間內有許多變更，緩衝區會溢位。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Error">
          <source>This causes the component to lose track of changes in the directory, and it will only provide blanket notification.</source>
          <target state="translated">這會導致遺失的目錄中的變更追蹤的元件，它只會提供概括性的告知。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Error">
          <source>Increasing the size of the buffer is expensive, because it comes from non paged memory that cannot be swapped out to disk, so keep the buffer as small as possible.</source>
          <target state="translated">增加緩衝區的大小很高，因為它來自非分頁記憶體無法空出的磁碟，因此保留緩衝區越小越好。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Error">
          <source>To avoid a buffer overflow, use the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.NotifyFilter%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A&gt;</ph> properties to filter out unwanted change notifications.</source>
          <target state="translated">若要避免緩衝區溢位，請使用<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.NotifyFilter%2A&gt;</ph>， <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph>，和<ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A&gt;</ph>屬性篩選掉不必要的變更通知。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Error">
          <source>Common file system operations might raise more than one event.</source>
          <target state="translated">常見的檔案系統作業可能會引發多個事件。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Error">
          <source>For example, when a file is moved from one directory to another, several <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnChanged%2A&gt;</ph> and some <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.OnCreated%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.OnDeleted%2A&gt;</ph> events might be raised.</source>
          <target state="translated">例如，當檔案移到另一個，有數個目錄從<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnChanged%2A&gt;</ph>和某些<ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.OnCreated%2A&gt;</ph>和<ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.OnDeleted%2A&gt;</ph>可能引發事件。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Error">
          <source>Moving a file is a complex operation that consists of multiple simple operations, therefore raising multiple events.</source>
          <target state="translated">移動檔案一種複雜的作業，包含多個簡單的作業，因此會引發多個事件。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Error">
          <source>Likewise, some applications (for example, antivirus software) might cause additional file system events that are detected by <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>.</source>
          <target state="translated">同樣地，某些應用程式 （例如，防毒軟體） 可能會造成偵測到的其他檔案系統事件<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>Gets or sets the filter string used to determine what files are monitored in a directory.</source>
          <target state="translated">取得或設定篩選字串，用以判斷在目錄中監視什麼檔案。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>The filter string.</source>
          <target state="translated">篩選條件字串。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>The default is "*.<ph id="ph1">\*</ph>" (Watches all files.)</source>
          <target state="translated">預設值是"*。<ph id="ph1">\*</ph>"（監看所有檔案）。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>To watch changes in all files, set the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph> property to an empty string ("").</source>
          <target state="translated">若要觀看所有檔案中的變更，設定<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph>屬性設為空字串 ("")。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>To watch a specific file, set the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph> property to the file name.</source>
          <target state="translated">若要觀察特定的檔案，將<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph>屬性設為檔案名稱。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>For example, to watch for changes in the file MyDoc.txt, set the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph> property to "MyDoc.txt".</source>
          <target state="translated">例如，若要觀看檔案 MyDoc.txt 中變更，設定<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph>"MyDoc.txt"的屬性。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>You can also watch for changes in a certain type of file.</source>
          <target state="translated">您也可以觀看中特定檔案類型的變更。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>For example, to watch for changes in any text files, set the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph> property to "*.txt".</source>
          <target state="translated">例如，若要監看的任何文字檔案中的變更，將<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph>"*.txt"的屬性。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>Use of multiple filters such as "<ph id="ph1">\*</ph>.txt&amp;#124;<ph id="ph2">\*</ph>.doc" is not supported.</source>
          <target state="translated">使用多個篩選條件，例如"<ph id="ph1">\*</ph>.txt&amp;#124;<ph id="ph2">\*</ph>.doc"不支援。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>The <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph> property can be changed after the <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> object has started receiving events.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph>之後可以變更屬性<ph id="ph2">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>物件已開始接收事件。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>For more information about filtering out unwanted notifications, see the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.NotifyFilter%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.InternalBufferSize%2A&gt;</ph> properties.</source>
          <target state="translated">如需篩選出不想要通知的詳細資訊，請參閱<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.NotifyFilter%2A&gt;</ph>， <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A&gt;</ph>，和<ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.InternalBufferSize%2A&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph> accepts wildcards for matching files, as shown in the following examples.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph> 接受萬用字元相符的檔案，如下列範例所示。</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>Filter string</source>
          <target state="translated">篩選條件字串</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>Watches the following files</source>
          <target state="translated">監看下列的檔案</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>*.<ph id="ph1">\*</ph></source>
          <target state="translated">*.<ph id="ph1">\*</ph></target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>All files (default).</source>
          <target state="translated">所有檔案 （預設值）。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>An empty string ("") also watches all files.</source>
          <target state="translated">空字串 ("") 也會監看所有檔案。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>*.txt</source>
          <target state="translated">*.txt</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>All files with a "txt" extension.</source>
          <target state="translated">副檔名為"txt"的所有檔案。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>*recipe.doc</source>
          <target state="translated">*recipe.doc</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>All files ending in "recipe" with a "doc" extension.</source>
          <target state="translated">結束 「 配方 」 與 「 文件 」 延伸模組中的所有檔案。</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>win*.xml</source>
          <target state="translated">win*.xml</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>All files beginning with "win" with an "xml" extension.</source>
          <target state="translated">所有檔案開頭為"都 win"的副檔名為"xml"。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>Sales*200?.xls</source>
          <target state="translated">Sales*200?.xls</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>Matches the following:</source>
          <target state="translated">符合下列項目：</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>Sales July 2001.xlsSales Aug 2002.xlsSales March 2004.xls</source>
          <target state="translated">銷售年 7 月 2001.xlsSales Aug 2002.xlsSales 年 3 月 2004.xls</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>but does not match:</source>
          <target state="translated">但不符合：</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>Sales Nov 1999.xls</source>
          <target state="translated">銷售年 11 月 1999.xls</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>MyReport.Doc</source>
          <target state="translated">MyReport.Doc</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>Watches only MyReport.doc</source>
          <target state="translated">監看只 MyReport.doc</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>The following example creates a <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> to watch the directory specified at run time.</source>
          <target state="translated">下列範例會建立<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>監看在執行階段指定的目錄。</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>The component is set to watch for changes in <ph id="ph1">`LastWrite`</ph> and <ph id="ph2">`LastAccess`</ph> time, the creation, deletion, or renaming of text files in the directory.</source>
          <target state="translated">元件會設定為監看的變更在<ph id="ph1">`LastWrite`</ph>和<ph id="ph2">`LastAccess`</ph>時間、 建立、 刪除、 或重新命名目錄中的文字檔案。</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>If a file is changed, created, or deleted, the path to the file prints to the console.</source>
          <target state="translated">如果變更、 建立或刪除檔案，檔案的路徑會列印到主控台。</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>When a file is renamed, the old and new paths print to the console.</source>
          <target state="translated">重新命名檔案時，新舊路徑列印到主控台。</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>Use the <ph id="ph1">&lt;xref:System.Diagnostics&gt;</ph> and <ph id="ph2">&lt;xref:System.IO&gt;</ph> namespaces for this example.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Diagnostics&gt;</ph>和<ph id="ph2">&lt;xref:System.IO&gt;</ph>此範例中的命名空間。</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="P:System.IO.FileSystemWatcher.IncludeSubdirectories">
          <source>Gets or sets a value indicating whether subdirectories within the specified path should be monitored.</source>
          <target state="translated">取得或設定數值，表示是否應該監視指定路徑內的子目錄。</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.IncludeSubdirectories">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if you want to monitor subdirectories; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果您想要監視子目錄，則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.IncludeSubdirectories">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">預設值為 <ph id="ph1">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.IncludeSubdirectories">
          <source>Set <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A&gt;</ph> to <ph id="ph2">`true`</ph> when you want to watch for change notifications for files and directories contained within the directory specified through the <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.Path%2A&gt;</ph> property, and its subdirectories.</source>
          <target state="translated">設定<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A&gt;</ph>至<ph id="ph2">`true`</ph>當您想要監看的檔案和包含在透過所指定的目錄內的目錄變更通知<ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.Path%2A&gt;</ph>屬性，而其子目錄。</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.IncludeSubdirectories">
          <source>Setting the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A&gt;</ph> property to <ph id="ph2">`false`</ph> helps reduce the number of notifications sent to the internal buffer.</source>
          <target state="translated">設定<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A&gt;</ph>屬性<ph id="ph2">`false`</ph>有助於降低的通知傳送至內部緩衝區數目。</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.IncludeSubdirectories">
          <source>For more information on filtering out unwanted notifications, see the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.NotifyFilter%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.InternalBufferSize%2A&gt;</ph> properties.</source>
          <target state="translated">如需有關篩選出不想要通知的詳細資訊，請參閱<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.NotifyFilter%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.InternalBufferSize%2A&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.IncludeSubdirectories">
          <source>When <ph id="ph1">`true`</ph>, <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A&gt;</ph> is recursive through the entire sub tree, not just the immediate child directories.</source>
          <target state="translated">當<ph id="ph1">`true`</ph>，<ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A&gt;</ph>是透過整個子樹狀結構，而不只是直屬子系目錄的遞迴。</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.IncludeSubdirectories">
          <source>The relative path to a file or directory within the sub tree returns in the <ph id="ph1">&lt;xref:System.IO.FileSystemEventArgs.Name%2A&gt;</ph> property of <ph id="ph2">&lt;xref:System.IO.FileSystemEventArgs&gt;</ph> and the <ph id="ph3">&lt;xref:System.IO.RenamedEventArgs.OldName%2A&gt;</ph> property of <ph id="ph4">&lt;xref:System.IO.RenamedEventArgs&gt;</ph>, depending on changes you are watching for.</source>
          <target state="translated">檔案或目錄子樹狀結構內的相對路徑會傳回在<ph id="ph1">&lt;xref:System.IO.FileSystemEventArgs.Name%2A&gt;</ph>屬性<ph id="ph2">&lt;xref:System.IO.FileSystemEventArgs&gt;</ph>和<ph id="ph3">&lt;xref:System.IO.RenamedEventArgs.OldName%2A&gt;</ph>屬性<ph id="ph4">&lt;xref:System.IO.RenamedEventArgs&gt;</ph>，視您監看的變更。</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.IncludeSubdirectories">
          <source>You can get the fully qualified path from the <ph id="ph1">&lt;xref:System.IO.FileSystemEventArgs.FullPath%2A&gt;</ph> property of <ph id="ph2">&lt;xref:System.IO.FileSystemEventArgs&gt;</ph> and the <ph id="ph3">&lt;xref:System.IO.RenamedEventArgs.OldFullPath%2A&gt;</ph> property of <ph id="ph4">&lt;xref:System.IO.RenamedEventArgs&gt;</ph>, depending on the changes you are watching for.</source>
          <target state="translated">您可以取得的完整的路徑<ph id="ph1">&lt;xref:System.IO.FileSystemEventArgs.FullPath%2A&gt;</ph>屬性<ph id="ph2">&lt;xref:System.IO.FileSystemEventArgs&gt;</ph>和<ph id="ph3">&lt;xref:System.IO.RenamedEventArgs.OldFullPath%2A&gt;</ph>屬性<ph id="ph4">&lt;xref:System.IO.RenamedEventArgs&gt;</ph>，視您監看的變更。</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.IncludeSubdirectories">
          <source>If a directory is created in the sub tree of the directory you are watching, and <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A&gt;</ph> is <ph id="ph2">`true`</ph>, that directory will automatically be watched.</source>
          <target state="translated">如果您正在觀賞，目錄的子樹狀目錄中建立目錄和<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A&gt;</ph>是<ph id="ph2">`true`</ph>，將會自動保存該目錄。</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" uid="P:System.IO.FileSystemWatcher.InternalBufferSize">
          <source>Gets or sets the size (in bytes) of the internal buffer.</source>
          <target state="translated">取得或設定內部緩衝區的大小 (以位元組為單位)。</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.InternalBufferSize">
          <source>The internal buffer size in bytes.</source>
          <target state="translated">內部緩衝區大小 (以位元組為單位)。</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.InternalBufferSize">
          <source>The default is 8192 (8 KB).</source>
          <target state="translated">預設為 8192 (8 KB)。</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.InternalBufferSize">
          <source>You can set the buffer to 4 KB or larger, but it must not exceed 64 KB.</source>
          <target state="translated">您可以設定緩衝區為 4 KB 或更大，但不是能超過 64 KB。</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.InternalBufferSize">
          <source>If you try to set the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.InternalBufferSize%2A&gt;</ph> property to less than 4096 bytes, your value is discarded and the <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.InternalBufferSize%2A&gt;</ph> property is set to 4096 bytes.</source>
          <target state="translated">如果您嘗試設定<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.InternalBufferSize%2A&gt;</ph>捨棄屬性為小於 4096 個位元組，您的值和<ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.InternalBufferSize%2A&gt;</ph>屬性設定為 4096 個位元組。</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.InternalBufferSize">
          <source>For best performance, use a multiple of 4 KB on Intel-based computers.</source>
          <target state="translated">為了達到最佳效能，使用 intel 的電腦上的 4 KB 的倍數。</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.InternalBufferSize">
          <source>The system notifies the component of file changes, and it stores those changes in a buffer the component creates and passes to the APIs.</source>
          <target state="translated">系統通知檔案變更的元件，並將這些變更儲存在緩衝區中的元件建立及傳遞至應用程式開發介面。</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.InternalBufferSize">
          <source>Each event can use up to 16 bytes of memory, not including the file name.</source>
          <target state="translated">每個事件都可以使用最多 16 個位元組的記憶體，不包括檔案名稱。</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.InternalBufferSize">
          <source>If there are many changes in a short time, the buffer can overflow.</source>
          <target state="translated">如果短時間內有許多變更，緩衝區會溢位。</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.InternalBufferSize">
          <source>This causes the component to lose track of changes in the directory, and it will only provide blanket notification.</source>
          <target state="translated">這會導致遺失的目錄中的變更追蹤的元件，它只會提供概括性的告知。</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.InternalBufferSize">
          <source>Increasing the size of the buffer can prevent missing file system change events.</source>
          <target state="translated">增加緩衝區的大小，可以防止遺失檔案系統變更事件。</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.InternalBufferSize">
          <source>However, increasing buffer size is expensive, because it comes from non-paged memory that cannot be swapped out to disk, so keep the buffer as small as possible.</source>
          <target state="translated">不過，增加緩衝區的大小是昂貴，因為它來自非分頁記憶體無法空出給磁碟，所以讓緩衝區越小越好。</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.InternalBufferSize">
          <source>To avoid a buffer overflow, use the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.NotifyFilter%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A&gt;</ph> properties to filter out unwanted change notifications.</source>
          <target state="translated">若要避免緩衝區溢位，請使用<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.NotifyFilter%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A&gt;</ph>屬性篩選掉不必要的變更通知。</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" uid="P:System.IO.FileSystemWatcher.NotifyFilter">
          <source>Gets or sets the type of changes to watch for.</source>
          <target state="translated">取得或設定要監看的變更類型。</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.NotifyFilter">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.IO.NotifyFilters" /&gt;</ph> values.</source>
          <target state="translated">其中一個 <ph id="ph1">&lt;see cref="T:System.IO.NotifyFilters" /&gt;</ph> 值。</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.NotifyFilter">
          <source>The default is the bitwise OR combination of <ph id="ph1">&lt;see langword="LastWrite" /&gt;</ph>, <ph id="ph2">&lt;see langword="FileName" /&gt;</ph>, and <ph id="ph3">&lt;see langword="DirectoryName" /&gt;</ph>.</source>
          <target state="translated">預設值為 <ph id="ph1">&lt;see langword="LastWrite" /&gt;</ph>、<ph id="ph2">&lt;see langword="FileName" /&gt;</ph> 與 <ph id="ph3">&lt;see langword="DirectoryName" /&gt;</ph> 的位元 OR 運算子組合。</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.NotifyFilter">
          <source>You can combine the members of the <ph id="ph1">&lt;xref:System.IO.NotifyFilters&gt;</ph> enumeration to watch for more than one type of change at a time.</source>
          <target state="translated">您可以結合的成員<ph id="ph1">&lt;xref:System.IO.NotifyFilters&gt;</ph>監看一次變更多個類型的列舉。</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.NotifyFilter">
          <source>For example, you can watch for changes in size of a file, and for changes in the <ph id="ph1">`LastWrite`</ph> time.</source>
          <target state="translated">例如，您可以觀看用於變更中檔案的大小，以及變更<ph id="ph1">`LastWrite`</ph>時間。</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.NotifyFilter">
          <source>This raises an event anytime there is a change in file or folder size, or a change in the <ph id="ph1">`LastWrite`</ph> time of the file or folder.</source>
          <target state="translated">這會引發事件，每當變更檔案或資料夾的大小或變更<ph id="ph1">`LastWrite`</ph>檔案或資料夾的時間。</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.NotifyFilter">
          <source>This is one way to filter out unwanted notifications.</source>
          <target state="translated">這是一種方式篩選掉不必要的通知。</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.NotifyFilter">
          <source>For more information on filtering out unwanted notifications, see the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.InternalBufferSize%2A&gt;</ph> properties.</source>
          <target state="translated">如需有關篩選出不想要通知的詳細資訊，請參閱<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph>， <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A&gt;</ph>，和<ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.InternalBufferSize%2A&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.NotifyFilter">
          <source>The following example creates a <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> to watch the directory specified at run time.</source>
          <target state="translated">下列範例會建立<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>監看在執行階段指定的目錄。</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.NotifyFilter">
          <source>The component is set to watch for changes in <ph id="ph1">`LastWrite`</ph> and <ph id="ph2">`LastAccess`</ph> time, the creation, deletion, or renaming of text files in the directory.</source>
          <target state="translated">元件會設定為監看的變更在<ph id="ph1">`LastWrite`</ph>和<ph id="ph2">`LastAccess`</ph>時間、 建立、 刪除、 或重新命名目錄中的文字檔案。</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.NotifyFilter">
          <source>If a file is changed, created, or deleted, the path to the file prints to the console.</source>
          <target state="translated">如果變更、 建立或刪除檔案，檔案的路徑會列印到主控台。</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.NotifyFilter">
          <source>When a file is renamed, the old and new paths print to the console.</source>
          <target state="translated">重新命名檔案時，新舊路徑列印到主控台。</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.NotifyFilter">
          <source>Use the <ph id="ph1">&lt;xref:System.Diagnostics&gt;</ph> and <ph id="ph2">&lt;xref:System.IO&gt;</ph> namespaces for this example.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Diagnostics&gt;</ph>和<ph id="ph2">&lt;xref:System.IO&gt;</ph>此範例中的命名空間。</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" uid="P:System.IO.FileSystemWatcher.NotifyFilter">
          <source>The value is not a valid bitwise OR combination of the <ph id="ph1">&lt;see cref="T:System.IO.NotifyFilters" /&gt;</ph> values.</source>
          <target state="translated">其值不是 <ph id="ph1">&lt;see cref="T:System.IO.NotifyFilters" /&gt;</ph> 值的有效位元的 OR 運算子組合。</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" uid="P:System.IO.FileSystemWatcher.NotifyFilter">
          <source>The value that is being set is not valid.</source>
          <target state="translated">要設定的值無效。</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.IO.FileSystemEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.FileSystemEventArgs" /&gt;</ph>，其中包含事件資料。</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.IO.FileSystemWatcher.Changed" /&gt;</ph> event.</source>
          <target state="translated">引發 <ph id="ph1">&lt;see cref="E:System.IO.FileSystemWatcher.Changed" /&gt;</ph> 事件。</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)">
          <source><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnChanged%2A&gt;</ph> is called when changes are made to the size, system attributes, last write time, last access time, or security permissions of a file or directory in the directory being monitored.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnChanged%2A&gt;</ph> 變更大小、 系統屬性、 上次寫入時間、 上次存取時間或檔案或目錄中的受監視的目錄的安全性權限時呼叫。</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.NotifyFilter%2A&gt;</ph> property to restrict the number of events raised when the <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.Changed&gt;</ph> event is handled.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.NotifyFilter%2A&gt;</ph>限制的事件數目的屬性時引發<ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.Changed&gt;</ph>處理事件。</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnCreated%2A&gt;</ph> event is raised as soon as a file is created.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnCreated%2A&gt;</ph>會建立一個檔案時，就會引發事件。</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)">
          <source>If a file is being copied or transferred into a watched directory, the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnCreated%2A&gt;</ph> event will be raised immediately, followed by one or more <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.OnChanged%2A&gt;</ph> events.</source>
          <target state="translated">如果正在將檔案複製或傳送到監看的目錄中，<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnCreated%2A&gt;</ph>會立即引發事件，後面接著一或多個<ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.OnChanged%2A&gt;</ph>事件。</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">引發事件會透過委派叫用此事件處理常式。</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">如需詳細資訊，請參閱<bpt id="p1">[</bpt>處理和引發事件<ept id="p1">](~/docs/standard/events/index.md)</ept>。</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)" /&gt;</ph> method.</source>
          <target state="translated">在覆寫<ph id="ph1">&lt;see cref="M:System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)" /&gt;</ph>在衍生類別中，請務必呼叫基底類別的<ph id="ph2">&lt;see cref="M:System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)" /&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.IO.FileSystemEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.FileSystemEventArgs" /&gt;</ph>，其中包含事件資料。</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.IO.FileSystemWatcher.Created" /&gt;</ph> event.</source>
          <target state="translated">引發 <ph id="ph1">&lt;see cref="E:System.IO.FileSystemWatcher.Created" /&gt;</ph> 事件。</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)">
          <source><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnCreated%2A&gt;</ph> is called when a file or directory is created in the directory being monitored.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnCreated%2A&gt;</ph> 受監視的目錄中建立檔案或目錄時呼叫。</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)">
          <source>Some common occurrences, such as copying or moving a file or directory, do not correspond directly to an event, but these occurrences do cause events to be raised.</source>
          <target state="translated">一些常見的動作，例如複製或移動檔案或目錄中，執行不直接對應到事件，而這些項目會導致引發的事件。</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)">
          <source>When you copy a file or directory, the system raises a <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph> event in the directory to which the file was copied, if that directory is being watched.</source>
          <target state="translated">當您複製檔案或目錄時，系統就會引發<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph>要複製檔案，如果該目錄正在監看的目錄中的事件。</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)">
          <source>If the directory from which you copied was being watched by another instance of <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>, no event would be raised.</source>
          <target state="translated">如果您複製的目錄已被另一個執行個體所監看<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>，就會引發任何事件。</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)">
          <source>For example, you create two instances of <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>.</source>
          <target state="translated">例如，您建立兩個執行個體<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)">
          <source>FileSystemWatcher1 is set to watch "C:\My Documents", and FileSystemWatcher2 is set to watch "C:\Your Documents".</source>
          <target state="translated">FileSystemWatcher1 設定要監看"C:\My Documents"和 FileSystemWatcher2 設定要監看 「 C:\Your 文件 」。</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)">
          <source>If you copy a file from "My Documents" and paste it into "Your Documents", a <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph> event will be raised in FileSystemWatcher2, but no event is raised for FileSystemWatcher1.</source>
          <target state="translated">如果您將檔案從 「 我的文件 」 複製並貼到 「 您文件 」<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph>中 FileSystemWatcher2，便會引發事件，但不會引發事件的 FileSystemWatcher1。</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)">
          <source>Unlike copying, moving a file or directory raises two events.</source>
          <target state="translated">不同於複製、 移動檔案或目錄，將會引發兩個事件。</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)">
          <source>From the previous example, if you moved a file from "My Documents" to "Your Documents", a <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph> event would be raised in FileSystemWatcher2 and a <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.Deleted&gt;</ph> event would be raised in FileSystemWatcher1.</source>
          <target state="translated">上述範例中，如果您將檔案從 「 我的文件 」 移到 「 您文件 」，從<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph>FileSystemWatcher2 中，會引發事件和<ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.Deleted&gt;</ph>FileSystemWatcher1 中，會引發事件。</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnCreated%2A&gt;</ph> event is raised as soon as a file is created.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnCreated%2A&gt;</ph>會建立一個檔案時，就會引發事件。</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)">
          <source>If a file is being copied or transferred into a watched directory, the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnCreated%2A&gt;</ph> event will be raised immediately, followed by one or more <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.OnChanged%2A&gt;</ph> events.</source>
          <target state="translated">如果正在將檔案複製或傳送到監看的目錄中，<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnCreated%2A&gt;</ph>會立即引發事件，後面接著一或多個<ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.OnChanged%2A&gt;</ph>事件。</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">引發事件會透過委派叫用此事件處理常式。</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">如需詳細資訊，請參閱<bpt id="p1">[</bpt>處理和引發事件<ept id="p1">](~/docs/standard/events/index.md)</ept>。</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)" /&gt;</ph> method.</source>
          <target state="translated">在覆寫<ph id="ph1">&lt;see cref="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)" /&gt;</ph>在衍生類別中，請務必呼叫基底類別的<ph id="ph2">&lt;see cref="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)" /&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.IO.FileSystemEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.FileSystemEventArgs" /&gt;</ph>，其中包含事件資料。</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.IO.FileSystemWatcher.Deleted" /&gt;</ph> event.</source>
          <target state="translated">引發 <ph id="ph1">&lt;see cref="E:System.IO.FileSystemWatcher.Deleted" /&gt;</ph> 事件。</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)">
          <source><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnDeleted%2A&gt;</ph> is called when a file or directory, within the directory being monitored, is deleted.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnDeleted%2A&gt;</ph> 刪除檔案或目錄，在受監視的目錄中時呼叫。</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)">
          <source>Some common occurrences, such as copying or moving a file or directory, do not correspond directly to an event, but these occurrences do cause events to be raised.</source>
          <target state="translated">一些常見的動作，例如複製或移動檔案或目錄中，執行不直接對應到事件，而這些項目會導致引發的事件。</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)">
          <source>When you copy a file or directory, the system raises a <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph> event in the directory to which the file was copied, if that directory is being watched.</source>
          <target state="translated">當您複製檔案或目錄時，系統就會引發<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph>要複製檔案，如果該目錄正在監看的目錄中的事件。</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)">
          <source>If the directory from which you copied was being watched by another instance of <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>, no event would be raised.</source>
          <target state="translated">如果您複製的目錄已被另一個執行個體所監看<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>，就會引發任何事件。</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)">
          <source>For example, you create two instances of <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>.</source>
          <target state="translated">例如，您建立兩個執行個體<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)">
          <source>FileSystemWatcher1 is set to watch "C:\My Documents", and FileSystemWatcher2 is set to watch "C:\Your Documents".</source>
          <target state="translated">FileSystemWatcher1 設定要監看"C:\My Documents"和 FileSystemWatcher2 設定要監看 「 C:\Your 文件 」。</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)">
          <source>If you copy a file from "My Documents" into "Your Documents", a <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph> event will be raised by FileSystemWatcher2, but no event is raised for FileSystemWatcher1.</source>
          <target state="translated">如果您將檔案從 「 我的文件 」 複製到 「 您文件 」 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph> FileSystemWatcher2，將會引發事件，但不會引發事件的 FileSystemWatcher1。</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)">
          <source>Unlike copying, moving a file or directory raises two events.</source>
          <target state="translated">不同於複製、 移動檔案或目錄，將會引發兩個事件。</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)">
          <source>From the previous example, if you moved a file from "My Documents" to "Your Documents", a <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph> event would be raised by FileSystemWatcher2 and a <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.Deleted&gt;</ph> event would be raised by FileSystemWatcher1.</source>
          <target state="translated">上述範例中，如果您將檔案從 「 我的文件 」 移到 「 您文件 」，從<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph>FileSystemWatcher2 會引發事件和<ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.Deleted&gt;</ph>FileSystemWatcher1 會引發事件。</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">引發事件會透過委派叫用此事件處理常式。</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">如需詳細資訊，請參閱<bpt id="p1">[</bpt>處理和引發事件<ept id="p1">](~/docs/standard/events/index.md)</ept>。</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)" /&gt;</ph> method.</source>
          <target state="translated">在覆寫<ph id="ph1">&lt;see cref="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)" /&gt;</ph>在衍生類別中，請務必呼叫基底類別的<ph id="ph2">&lt;see cref="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)" /&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.IO.ErrorEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">包含事件資料的 <ph id="ph1">&lt;see cref="T:System.IO.ErrorEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.IO.FileSystemWatcher.Error" /&gt;</ph> event.</source>
          <target state="translated">引發 <ph id="ph1">&lt;see cref="E:System.IO.FileSystemWatcher.Error" /&gt;</ph> 事件。</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)">
          <source><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnError%2A&gt;</ph> is called when an error occurs.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnError%2A&gt;</ph> 錯誤發生時呼叫。</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">引發事件會透過委派叫用此事件處理常式。</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">如需詳細資訊，請參閱<bpt id="p1">[</bpt>處理和引發事件<ept id="p1">](~/docs/standard/events/index.md)</ept>。</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)" /&gt;</ph> method.</source>
          <target state="translated">在覆寫<ph id="ph1">&lt;see cref="M:System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)" /&gt;</ph>在衍生類別中，請務必呼叫基底類別的<ph id="ph2">&lt;see cref="M:System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)" /&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.IO.RenamedEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.RenamedEventArgs" /&gt;</ph>，其中包含事件資料。</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.IO.FileSystemWatcher.Renamed" /&gt;</ph> event.</source>
          <target state="translated">引發 <ph id="ph1">&lt;see cref="E:System.IO.FileSystemWatcher.Renamed" /&gt;</ph> 事件。</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)">
          <source><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnRenamed%2A&gt;</ph> is called when a file or directory within the directory being monitored is renamed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnRenamed%2A&gt;</ph> 重新命名檔案或目錄內受監視的目錄時呼叫。</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)">
          <source>Its <ph id="ph1">&lt;xref:System.IO.RenamedEventArgs&gt;</ph> argument contains information about the renaming operation, such as the type of change, the old and new path, and the old and new name.</source>
          <target state="translated">其<ph id="ph1">&lt;xref:System.IO.RenamedEventArgs&gt;</ph>引數包含在重新命名作業，例如變更、 舊的和新路徑和舊的和新名稱的類型資訊。</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)">
          <source>Note that its <ph id="ph1">&lt;xref:System.IO.FileSystemEventArgs.Name&gt;</ph> property may be null for renamed events if the <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> does not get matching old and new name events from the operating system.</source>
          <target state="translated">請注意，其<ph id="ph1">&lt;xref:System.IO.FileSystemEventArgs.Name&gt;</ph>屬性可能是 null 如果重新命名事件<ph id="ph2">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>不會取得不符作業系統從舊的和新名稱事件。</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">引發事件會透過委派叫用此事件處理常式。</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">如需詳細資訊，請參閱<bpt id="p1">[</bpt>處理和引發事件<ept id="p1">](~/docs/standard/events/index.md)</ept>。</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)" /&gt;</ph> method.</source>
          <target state="translated">在覆寫<ph id="ph1">&lt;see cref="M:System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)" /&gt;</ph>在衍生類別中，請務必呼叫基底類別的<ph id="ph2">&lt;see cref="M:System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)" /&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" uid="P:System.IO.FileSystemWatcher.Path">
          <source>Gets or sets the path of the directory to watch.</source>
          <target state="translated">取得或設定要監看的目錄路徑。</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Path">
          <source>The path to monitor.</source>
          <target state="translated">要監視的路徑。</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Path">
          <source>The default is an empty string ("").</source>
          <target state="translated">預設為空字串 ("")。</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Path">
          <source>This is a fully qualified path to a directory.</source>
          <target state="translated">這是目錄的完整的路徑。</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Path">
          <source>If the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A&gt;</ph> property is <ph id="ph2">`true`</ph>, this directory is the root at which the system watches for changes; otherwise it is the only directory watched.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A&gt;</ph>屬性是<ph id="ph2">`true`</ph>，此目錄是的根目錄的系統監控的變更; 否則就只有監看的目錄。</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Path">
          <source>To watch a specific file, set the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Path%2A&gt;</ph> property to the fully qualified, correct directory, and the <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph> property to the file name.</source>
          <target state="translated">若要觀察特定的檔案，將<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Path%2A&gt;</ph>至完整的正確目錄中，屬性和<ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph>屬性設為檔案名稱。</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Path">
          <source>The <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Path%2A&gt;</ph> property supports Universal Naming Convention (UNC) paths.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Path%2A&gt;</ph>屬性支援的通用命名慣例 (UNC) 路徑。</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Path">
          <source>This property must be set before the component can watch for changes.</source>
          <target state="translated">元件可以監看的變更之前，必須設定這個屬性。</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Path">
          <source>When a directory is renamed, the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> automatically reattaches itself to the newly renamed item.</source>
          <target state="translated">當目錄已重新命名時，<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>重新本身會自動附加至剛重新命名的項目。</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Path">
          <source>For example, if you set the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Path%2A&gt;</ph> property to "C:\My Documents" and then manually rename the directory to "C:\Your Documents", the component continues listening for change notifications on the newly renamed directory.</source>
          <target state="translated">例如，如果您設定<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Path%2A&gt;</ph>"C:\My Documents"的屬性，然後手動重新命名 「 C:\Your 文件 」 的目錄元件會繼續接聽剛重新命名目錄上的變更通知。</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Path">
          <source>However, when you ask for the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Path%2A&gt;</ph> property, it contains the old path.</source>
          <target state="translated">不過，當您尋求<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Path%2A&gt;</ph>屬性，它含有舊的路徑。</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Path">
          <source>This happens because the component determines what directory watches based on the handle, rather than the name of the directory.</source>
          <target state="translated">這是因為此元件可讓您判斷監看基礎控制代碼，而不是目錄的名稱。</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Path">
          <source>Renaming does not affect the handle.</source>
          <target state="translated">重新命名並不會影響此控制代碼。</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Path">
          <source>So, if you destroy the component, and then recreate it without updating the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Path%2A&gt;</ph> property, your application will fail because the directory no longer exists.</source>
          <target state="translated">因此，如果您損毀元件，並再重新建立它，而無須更新<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Path%2A&gt;</ph>屬性，您的應用程式會失敗，因為目錄不再存在。</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Path">
          <source>The following example creates a <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> to watch the directory specified at run time.</source>
          <target state="translated">下列範例會建立<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>監看在執行階段指定的目錄。</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Path">
          <source>The component is set to watch for changes in <ph id="ph1">`LastWrite`</ph> and <ph id="ph2">`LastAccess`</ph> time, the creation, deletion, or renaming of text files in the directory.</source>
          <target state="translated">元件會設定為監看的變更在<ph id="ph1">`LastWrite`</ph>和<ph id="ph2">`LastAccess`</ph>時間、 建立、 刪除、 或重新命名目錄中的文字檔案。</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Path">
          <source>If a file is changed, created, or deleted, the path to the file prints to the console.</source>
          <target state="translated">如果變更、 建立或刪除檔案，檔案的路徑會列印到主控台。</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Path">
          <source>When a file is renamed, the old and new paths print to the console.</source>
          <target state="translated">重新命名檔案時，新舊路徑列印到主控台。</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Path">
          <source>Use the <ph id="ph1">&lt;xref:System.Diagnostics&gt;</ph> and <ph id="ph2">&lt;xref:System.IO&gt;</ph> namespaces for this example.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Diagnostics&gt;</ph>和<ph id="ph2">&lt;xref:System.IO&gt;</ph>此範例中的命名空間。</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" uid="P:System.IO.FileSystemWatcher.Path">
          <source>The specified path does not exist or could not be found.</source>
          <target state="translated">指定的路徑不存在或找不到該路徑。</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" uid="P:System.IO.FileSystemWatcher.Path">
          <source>-or-</source>
          <target state="translated">-或-</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" uid="P:System.IO.FileSystemWatcher.Path">
          <source>The specified path contains wildcard characters.</source>
          <target state="translated">指定路徑包含萬用字元。</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" uid="P:System.IO.FileSystemWatcher.Path">
          <source>-or-</source>
          <target state="translated">-或-</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" uid="P:System.IO.FileSystemWatcher.Path">
          <source>The specified path contains invalid path characters.</source>
          <target state="translated">指定路徑包含無效路徑字元。</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" uid="E:System.IO.FileSystemWatcher.Renamed">
          <source>Occurs when a file or directory in the specified <ph id="ph1">&lt;see cref="P:System.IO.FileSystemWatcher.Path" /&gt;</ph> is renamed.</source>
          <target state="translated">發生在指定之 <ph id="ph1">&lt;see cref="P:System.IO.FileSystemWatcher.Path" /&gt;</ph> 內的檔案或目錄重新命名時。</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Renamed">
          <source>The <ph id="ph1">`Renamed`</ph> event is an <ph id="ph2">&lt;xref:System.IO.RenamedEventHandler&gt;</ph> delegate that has the following signature:</source>
          <target state="translated"><ph id="ph1">`Renamed`</ph>事件是<ph id="ph2">&lt;xref:System.IO.RenamedEventHandler&gt;</ph>具有下列簽章的委派：</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Renamed">
          <source>The <ph id="ph1">&lt;xref:System.IO.RenamedEventArgs&gt;</ph> object provides information about the renaming operation, such as the type of the rename (the <ph id="ph2">&lt;xref:System.IO.FileSystemEventArgs.ChangeType&gt;</ph> property), the old and new name, and the old and new path.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.RenamedEventArgs&gt;</ph>物件會提供有關在重新命名作業，例如重新命名的類型資訊 (<ph id="ph2">&lt;xref:System.IO.FileSystemEventArgs.ChangeType&gt;</ph>屬性)，舊的和新名稱，而舊的和新的路徑。</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Renamed">
          <source>Note that the <ph id="ph1">&lt;xref:System.IO.FileSystemEventArgs.Name&gt;</ph> property may be null for renamed events if the <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> does not get matching old and new name events from the operating system.</source>
          <target state="translated">請注意，<ph id="ph1">&lt;xref:System.IO.FileSystemEventArgs.Name&gt;</ph>屬性可能是 null 如果重新命名事件<ph id="ph2">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>不會取得不符作業系統從舊的和新名稱事件。</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Renamed">
          <source>Renaming the directory you are watching will not raise a notification.</source>
          <target state="translated">您監看的目錄重新命名將不會引發通知。</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Renamed">
          <source>Notifications are only raised for entries inside the directory you are watching.</source>
          <target state="translated">您監看的目錄內的項目，才會引發通知。</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Renamed">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Renamed&gt;</ph> event to display the file path to the console whenever the watched file is renamed.</source>
          <target state="translated">下列範例會使用<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Renamed&gt;</ph>事件，以對主控台顯示的檔案路徑，每當重新命名保存的檔案。</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" uid="P:System.IO.FileSystemWatcher.Site">
          <source>Gets or sets an <ph id="ph1">&lt;see cref="T:System.ComponentModel.ISite" /&gt;</ph> for the <ph id="ph2">&lt;see cref="T:System.IO.FileSystemWatcher" /&gt;</ph>.</source>
          <target state="translated">取得或設定 <ph id="ph2">&lt;see cref="T:System.IO.FileSystemWatcher" /&gt;</ph> 的 <ph id="ph1">&lt;see cref="T:System.ComponentModel.ISite" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Site">
          <source>An <ph id="ph1">&lt;see cref="T:System.ComponentModel.ISite" /&gt;</ph> for the <ph id="ph2">&lt;see cref="T:System.IO.FileSystemWatcher" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ComponentModel.ISite" /&gt;</ph> 的 <ph id="ph2">&lt;see cref="T:System.IO.FileSystemWatcher" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Site">
          <source>Sites bind a <ph id="ph1">&lt;xref:System.ComponentModel.Component&gt;</ph> to a <ph id="ph2">&lt;xref:System.ComponentModel.Design.IDesignerHost.Container%2A&gt;</ph> and enable communication between them, as well as provide a way for the container to manage its components.</source>
          <target state="translated">站台繫結<ph id="ph1">&lt;xref:System.ComponentModel.Component&gt;</ph>至<ph id="ph2">&lt;xref:System.ComponentModel.Design.IDesignerHost.Container%2A&gt;</ph>和啟用它們之間的通訊，以及提供容器以管理其元件的方法。</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" uid="P:System.IO.FileSystemWatcher.SynchronizingObject">
          <source>Gets or sets the object used to marshal the event handler calls issued as a result of a directory change.</source>
          <target state="translated">取得或設定物件，用以封送處理因目錄變更而發出的事件處理常式呼叫。</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.SynchronizingObject">
          <source>The <ph id="ph1">&lt;see cref="T:System.ComponentModel.ISynchronizeInvoke" /&gt;</ph> that represents the object used to marshal the event handler calls issued as a result of a directory change.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ComponentModel.ISynchronizeInvoke" /&gt;</ph>，代表用以封送處理因目錄變更而發出的事件處理常式呼叫的物件。</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.SynchronizingObject">
          <source>The default is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">預設值為 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.SynchronizingObject">
          <source>When <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.SynchronizingObject%2A&gt;</ph> is <ph id="ph2">`null`</ph>, methods handling the <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.Changed&gt;</ph>, <ph id="ph4">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph>, <ph id="ph5">&lt;xref:System.IO.FileSystemWatcher.Deleted&gt;</ph>, and <ph id="ph6">&lt;xref:System.IO.FileSystemWatcher.Renamed&gt;</ph> events are called on a thread from the system thread pool.</source>
          <target state="translated">當<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.SynchronizingObject%2A&gt;</ph>是<ph id="ph2">`null`</ph>，方法處理<ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.Changed&gt;</ph>， <ph id="ph4">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph>， <ph id="ph5">&lt;xref:System.IO.FileSystemWatcher.Deleted&gt;</ph>，和<ph id="ph6">&lt;xref:System.IO.FileSystemWatcher.Renamed&gt;</ph>系統執行緒集區的執行緒上呼叫事件。</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.SynchronizingObject">
          <source>For more information on system thread pools, see <ph id="ph1">&lt;xref:System.Threading.ThreadPool&gt;</ph>.</source>
          <target state="translated">如需有關系統執行緒集區的詳細資訊，請參閱<ph id="ph1">&lt;xref:System.Threading.ThreadPool&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.SynchronizingObject">
          <source>When the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Changed&gt;</ph>, <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.Deleted&gt;</ph>, and <ph id="ph4">&lt;xref:System.IO.FileSystemWatcher.Renamed&gt;</ph> events are handled by a visual Windows Forms component, such as a <ph id="ph5">&lt;xref:System.Windows.Forms.Button&gt;</ph>, accessing the component through the system thread pool might not work, or may result in an exception.</source>
          <target state="translated">當<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Changed&gt;</ph>， <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph>， <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.Deleted&gt;</ph>，和<ph id="ph4">&lt;xref:System.IO.FileSystemWatcher.Renamed&gt;</ph>事件由處理視覺化的 Windows Form 元件，例如<ph id="ph5">&lt;xref:System.Windows.Forms.Button&gt;</ph>，透過系統執行緒集區存取元件可能無法運作，或可能會導致例外狀況。</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.SynchronizingObject">
          <source>Avoid this by setting <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.SynchronizingObject%2A&gt;</ph> to a Windows Forms component, which causes the methods that handle the <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.Changed&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph>, <ph id="ph4">&lt;xref:System.IO.FileSystemWatcher.Deleted&gt;</ph>, and <ph id="ph5">&lt;xref:System.IO.FileSystemWatcher.Renamed&gt;</ph> events to be called on the same thread on which the component was created.</source>
          <target state="translated">避免這種設定<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.SynchronizingObject%2A&gt;</ph>給 Windows Form 元件時，會導致處理的方法<ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.Changed&gt;</ph>， <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph>， <ph id="ph4">&lt;xref:System.IO.FileSystemWatcher.Deleted&gt;</ph>，和<ph id="ph5">&lt;xref:System.IO.FileSystemWatcher.Renamed&gt;</ph>元件建立所在的相同執行緒上呼叫的事件。</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.SynchronizingObject">
          <source>If the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> is used inside <ph id="ph2">[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]</ph> in a Windows Forms designer, <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.SynchronizingObject%2A&gt;</ph> automatically sets to the control that contains the <ph id="ph4">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>內使用<ph id="ph2">[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]</ph>在 Windows Form 設計工具中，<ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.SynchronizingObject%2A&gt;</ph>自動設定為包含的控制項<ph id="ph4">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.SynchronizingObject">
          <source>For example, if you place a <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> on a designer for Form1 (which inherits from <ph id="ph2">&lt;xref:System.Windows.Forms.Form&gt;</ph>) the <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.SynchronizingObject%2A&gt;</ph> property of <ph id="ph4">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> is set to the instance of Form1.</source>
          <target state="translated">例如，如果您將放置<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>form1 設計工具上 (繼承自<ph id="ph2">&lt;xref:System.Windows.Forms.Form&gt;</ph>)<ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.SynchronizingObject%2A&gt;</ph>屬性<ph id="ph4">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>設為 Form1 的執行個體。</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" uid="T:System.IO.FileSystemWatcher">
          <source>A synchronous method that returns a structure that contains specific information on the change that occurred.</source>
          <target state="translated">同步方法，傳回含有發生的變更之特定資訊的結構。</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IO.WatcherChangeTypes" /&gt;</ph> to watch for.</source>
          <target state="translated">要監視的 <ph id="ph1">&lt;see cref="T:System.IO.WatcherChangeTypes" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes)">
          <source>A synchronous method that returns a structure that contains specific information on the change that occurred, given the type of change you want to monitor.</source>
          <target state="translated">提供想要監視的變更類型，同步方法會傳回含有發生的變更之特定資訊的結構。</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes)">
          <source>A <ph id="ph1">&lt;see cref="T:System.IO.WaitForChangedResult" /&gt;</ph> that contains specific information on the change that occurred.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.WaitForChangedResult" /&gt;</ph>，含有發生之變更的特定資訊。</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes)">
          <source>This method waits indefinitely until the first change occurs and then returns.</source>
          <target state="translated">這個方法會等候直到第一個變更，就會發生，然後傳回。</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes)">
          <source>This is the same as using <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.WaitForChanged%2A&gt;</ph> with the <ph id="ph2">`timeout`</ph> parameter set to -1.</source>
          <target state="translated">這是使用相同<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.WaitForChanged%2A&gt;</ph>與<ph id="ph2">`timeout`</ph>參數設為-1。</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes)">
          <source>This method allows an event handler to be invoked to respond to file changes even if the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A&gt;</ph> property is set to <ph id="ph2">`false`</ph>.</source>
          <target state="translated">這個方法可讓事件處理常式被叫用來回應檔案的變更，即使<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A&gt;</ph>屬性設定為<ph id="ph2">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes)">
          <source>In some systems, <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> reports changes to files using the short 8.3 file name format.</source>
          <target state="translated">在某些系統上，<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>使用簡短的 8.3 檔案名稱格式的檔案來報告變更。</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes)">
          <source>For example, a change to  "LongFileName.LongExtension" could be reported as "LongFi~.Lon".</source>
          <target state="translated">例如，"LongFileName.LongExtension 」 的變更無法回報為 「 LongFi ~。Lon"。</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IO.WatcherChangeTypes" /&gt;</ph> to watch for.</source>
          <target state="translated">要監視的 <ph id="ph1">&lt;see cref="T:System.IO.WatcherChangeTypes" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes,System.Int32)">
          <source>The time (in milliseconds) to wait before timing out.</source>
          <target state="translated">逾時之前的等候時間 (單位為毫秒)。</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes,System.Int32)">
          <source>A synchronous method that returns a structure that contains specific information on the change that occurred, given the type of change you want to monitor and the time (in milliseconds) to wait before timing out.</source>
          <target state="translated">提供您想要監視的變更類型和逾時前的等候時間 (以毫秒計)，同步方法會傳回含有發生的變更之特定資訊的結構。</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes,System.Int32)">
          <source>A <ph id="ph1">&lt;see cref="T:System.IO.WaitForChangedResult" /&gt;</ph> that contains specific information on the change that occurred.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.WaitForChangedResult" /&gt;</ph>，含有發生之變更的特定資訊。</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes,System.Int32)">
          <source>This method waits until a change occurs or it has timed out. A value of -1 for the <ph id="ph1">`timeout`</ph> parameter means wait indefinitely.</source>
          <target state="translated">這個方法會等候直到發生變更或已逾時。值為-1 代表<ph id="ph1">`timeout`</ph>參數表示無限期等候。</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes,System.Int32)">
          <source>This method allows an event handler to be invoked to respond to file changes even if the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A&gt;</ph> property is set to <ph id="ph2">`false`</ph>.</source>
          <target state="translated">這個方法可讓事件處理常式被叫用來回應檔案的變更，即使<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A&gt;</ph>屬性設定為<ph id="ph2">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes,System.Int32)">
          <source>In some systems, <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> reports changes to files using the short 8.3 file name format.</source>
          <target state="translated">在某些系統上，<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>使用簡短的 8.3 檔案名稱格式的檔案來報告變更。</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes,System.Int32)">
          <source>For example, a change to  "LongFileName.LongExtension" could be reported as "LongFi~.Lon".</source>
          <target state="translated">例如，"LongFileName.LongExtension 」 的變更無法回報為 「 LongFi ~。Lon"。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>