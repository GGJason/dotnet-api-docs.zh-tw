<Type Name="WindowsRuntimeStreamExtensions" FullName="System.IO.WindowsRuntimeStreamExtensions">
  <Metadata><Meta Name="ms.openlocfilehash" Value="875502c86324cd7e5a5244ce809261d8b2fe0dc1" /><Meta Name="ms.sourcegitcommit" Value="4ee26ac79338b0bf99fa1e0913e8a06b21994d8e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="03/26/2019" /><Meta Name="ms.locfileid" Value="58460379" /></Metadata><TypeSignature Language="C#" Value="public static class WindowsRuntimeStreamExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit WindowsRuntimeStreamExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.IO.WindowsRuntimeStreamExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module WindowsRuntimeStreamExtensions" />
  <TypeSignature Language="C++ CLI" Value="public ref class WindowsRuntimeStreamExtensions abstract sealed" />
  <TypeSignature Language="F#" Value="type WindowsRuntimeStreamExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.WindowsRuntime</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.14.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="dotnet-uwp-10.0">
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>包含用於在 Windows 執行階段中之資料流與適用於 Windows 市集應用程式的 .NET 中之受控資料流之間轉換的擴充方法。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[
## Remarks

只有當您開發 Windows 市集應用程式時，可使用這些擴充方法。 這些方法會提供便利的方法，處理 Windows 市集應用程式中的資料流。 您未建立的執行個體`WindowsRuntimeStreamExtensions`類別; 相反地，您可以使用這些方法的執行個體<xref:Windows.Storage.Streams.IInputStream>並<xref:Windows.Storage.Streams.IOutputStream>介面和<xref:System.IO.Stream>類別。

`WindowsRuntimeStreamExtensions`類別包含兩個方法來將 managed 類型轉換<xref:System.IO.Stream>Windows 執行階段中的資料流的物件：

  - <xref:System.IO.WindowsRuntimeStreamExtensions.AsInputStream%2A>
  - <xref:System.IO.WindowsRuntimeStreamExtensions.AsOutputStream%2A>

`WindowsRuntimeStreamExtensions`類別包含三個多載的方法，來轉換至 Windows 執行階段中的資料流<xref:System.IO.Stream>物件：

  - <xref:System.IO.WindowsRuntimeStreamExtensions.AsStream%2A>
  - <xref:System.IO.WindowsRuntimeStreamExtensions.AsStreamForRead%2A>
  - <xref:System.IO.WindowsRuntimeStreamExtensions.AsStreamForWrite%2A>

從.NET Framework 4.5.1 開始`WindowsRuntimeStreamExtensions`類別包含一個方法來將資料流轉換成 Windows 執行階段<xref:Windows.Storage.Streams.RandomAccessStream>:

  - <xref:System.IO.WindowsRuntimeStreamExtensions.AsRandomAccessStream(System.IO.Stream)>

## Examples

下列範例示範如何使用<xref:System.IO.WindowsRuntimeStreamExtensions.AsStreamForWrite%2A>和 <xref:System.IO.WindowsRuntimeStreamExtensions.AsStreamForRead%2A>

[!code-csharp[windowsruntimestreamextensions#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.windowsruntimestreamextensions/cs/blankpage.xaml.cs#2)]
[!code-vb[windowsruntimestreamextensions#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.windowsruntimestreamextensions/vb/blankpage.xaml.vb#2)]

以下是前一個範例與相關聯的 XAML 程式碼。 

[!code-xaml[windowsruntimestreamextensions#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.windowsruntimestreamextensions/cs/blankpage.xaml#1)]
]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AsInputStream">
      <MemberSignature Language="C#" Value="public static Windows.Storage.Streams.IInputStream AsInputStream (this System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Windows.Storage.Streams.IInputStream AsInputStream(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.WindowsRuntimeStreamExtensions.AsInputStream(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Windows::Storage::Streams::IInputStream ^ AsInputStream(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="static member AsInputStream : System.IO.Stream -&gt; Windows.Storage.Streams.IInputStream" Usage="System.IO.WindowsRuntimeStreamExtensions.AsInputStream stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.WindowsRuntime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Windows.Storage.Streams.IInputStream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" RefType="this" />
      </Parameters>
      <Docs>
        <param name="stream">要轉換的資料流。</param>
        <summary>將適用於 Windows 市集應用程式的 .NET 中的受控資料流轉換成 Windows 執行階段中的輸入資料流。</summary>
        <returns>代表已轉換之資料流的 Windows 執行階段 <see cref="T:Windows.Storage.Streams.IInputStream" /> 物件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
          
> [!NOTE]
> 在 Visual Basic 中， C#，您可以在任何物件型別 < System.IO.Stream > 執行個體方法呼叫這個方法。 使用執行個體方法語法呼叫這個方法時，請省略第一個參數。 如需詳細資訊，請參閱 <<c0> [ 擴充方法 (Visual Basic)](~/docs/visual-basic/programming-guide/language-features/procedures/extension-methods.md)或是[擴充方法 (C#程式設計指南)](~/docs/csharp/programming-guide/classes-and-structs/extension-methods.md)。</c0>

## Examples

下列範例示範如何使用`AsInputStream`和<xref:System.IO.WindowsRuntimeStreamExtensions.AsOutputStream%2A>Windows 執行階段中的資料流來回轉換的 managed 資料流的方法。

[!code-csharp[windowsruntimestreamextensions#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.windowsruntimestreamextensions/cs/blankpage2.xaml.cs#4)]
[!code-vb[windowsruntimestreamextensions#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.windowsruntimestreamextensions/vb/blankpage2.xaml.vb#4)]

以下是前一個範例與相關聯的 XAML 程式碼。

[!code-xaml[windowsruntimestreamextensions#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.windowsruntimestreamextensions/cs/blankpage2.xaml#3)]

]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stream" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.NotSupportedException">資料流不支援讀取。</exception>
      </Docs>
    </Member>
    <Member MemberName="AsOutputStream">
      <MemberSignature Language="C#" Value="public static Windows.Storage.Streams.IOutputStream AsOutputStream (this System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Windows.Storage.Streams.IOutputStream AsOutputStream(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.WindowsRuntimeStreamExtensions.AsOutputStream(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Windows::Storage::Streams::IOutputStream ^ AsOutputStream(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="static member AsOutputStream : System.IO.Stream -&gt; Windows.Storage.Streams.IOutputStream" Usage="System.IO.WindowsRuntimeStreamExtensions.AsOutputStream stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.WindowsRuntime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Windows.Storage.Streams.IOutputStream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" RefType="this" />
      </Parameters>
      <Docs>
        <param name="stream">要轉換的資料流。</param>
        <summary>將適用於 Windows 市集應用程式的 .NET 中的受控資料流轉換成 Windows 執行階段中的輸出資料流。</summary>
        <returns>代表已轉換之資料流的 Windows 執行階段 <see cref="T:Windows.Storage.Streams.IOutputStream" /> 物件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

> [!NOTE]
> 在 Visual Basic 中， C#，您可以在任何物件型別執行個體方法呼叫這個方法<xref:System.IO.Stream>。 使用執行個體方法語法呼叫這個方法時，請省略第一個參數。 如需詳細資訊，請參閱 <<c0> [ 擴充方法 (Visual Basic)](~/docs/visual-basic/programming-guide/language-features/procedures/extension-methods.md)或是[擴充方法 (C#程式設計指南)](~/docs/csharp/programming-guide/classes-and-structs/extension-methods.md)。</c0>

## Examples

下列範例示範如何使用<xref:System.IO.WindowsRuntimeStreamExtensions.AsInputStream%2A>和`AsOutputStream`> 方法，以將 managed 資料流與 Windows 執行階段中的資料流。

[!code-csharp[windowsruntimestreamextensions#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.windowsruntimestreamextensions/cs/blankpage2.xaml.cs#4)]
[!code-vb[windowsruntimestreamextensions#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.windowsruntimestreamextensions/vb/blankpage2.xaml.vb#4)]

以下是前一個範例與相關聯的 XAML 程式碼。

[!code-xaml[windowsruntimestreamextensions#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.windowsruntimestreamextensions/cs/blankpage2.xaml#3)]

]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stream" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.NotSupportedException">資料流不支援讀取。</exception>
      </Docs>
    </Member>
    <Member MemberName="AsRandomAccessStream">
      <MemberSignature Language="C#" Value="public static Windows.Storage.Streams.IRandomAccessStream AsRandomAccessStream (this System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Windows.Storage.Streams.IRandomAccessStream AsRandomAccessStream(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.WindowsRuntimeStreamExtensions.AsRandomAccessStream(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Windows::Storage::Streams::IRandomAccessStream ^ AsRandomAccessStream(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="static member AsRandomAccessStream : System.IO.Stream -&gt; Windows.Storage.Streams.IRandomAccessStream" Usage="System.IO.WindowsRuntimeStreamExtensions.AsRandomAccessStream stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.WindowsRuntime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Windows.Storage.Streams.IRandomAccessStream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" RefType="this" />
      </Parameters>
      <Docs>
        <param name="stream">要轉換的資料流。</param>
        <summary>將指定的資料流轉換為隨機存取資料流。</summary>
        <returns>代表已轉換之資料流的 Windows 執行階段 <see cref="T:Windows.Storage.Streams.IRandomAccessStream" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks


> [!NOTE]
> 在 Visual Basic 中， C#，您可以在任何物件型別執行個體方法呼叫這個方法<xref:System.IO.Stream>。 使用執行個體方法語法呼叫這個方法時，請省略第一個參數。 如需詳細資訊，請參閱 <<c0> [ 擴充方法 (Visual Basic)](~/docs/visual-basic/programming-guide/language-features/procedures/extension-methods.md)或是[擴充方法 (C#程式設計指南)](~/docs/csharp/programming-guide/classes-and-structs/extension-methods.md)。</c0>

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AsStream">
      <MemberSignature Language="C#" Value="public static System.IO.Stream AsStream (this Windows.Storage.Streams.IRandomAccessStream windowsRuntimeStream);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream AsStream(class Windows.Storage.Streams.IRandomAccessStream windowsRuntimeStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.WindowsRuntimeStreamExtensions.AsStream(Windows.Storage.Streams.IRandomAccessStream)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsStream (windowsRuntimeStream As IRandomAccessStream) As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::IO::Stream ^ AsStream(Windows::Storage::Streams::IRandomAccessStream ^ windowsRuntimeStream);" />
      <MemberSignature Language="F#" Value="static member AsStream : Windows.Storage.Streams.IRandomAccessStream -&gt; System.IO.Stream" Usage="System.IO.WindowsRuntimeStreamExtensions.AsStream windowsRuntimeStream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.WindowsRuntime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="windowsRuntimeStream" Type="Windows.Storage.Streams.IRandomAccessStream" RefType="this" />
      </Parameters>
      <Docs>
        <param name="windowsRuntimeStream">要轉換的 Windows 執行階段 <see cref="T:Windows.Storage.Streams.IRandomAccessStream" /> 物件。</param>
        <summary>將 Windows 執行階段中的隨機存取資料流轉換成適用於 Windows 市集應用程式的 .NET 中的受控資料流。</summary>
        <returns>轉換的資料流。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

> [!NOTE]
> 在 Visual Basic 中， C#，您可以在任何物件型別執行個體方法呼叫這個方法<xref:System.IO.Stream>。 使用執行個體方法語法呼叫這個方法時，請省略第一個參數。 如需詳細資訊，請參閱 <<c0> [ 擴充方法 (Visual Basic)](~/docs/visual-basic/programming-guide/language-features/procedures/extension-methods.md)或是[擴充方法 (C#程式設計指南)](~/docs/csharp/programming-guide/classes-and-structs/extension-methods.md)。</c0>

轉換資料流時，會使用預設緩衝區大小為 16,384 個位元組。 若要指定不同的緩衝區大小，請使用<xref:System.IO.WindowsRuntimeStreamExtensions.AsStream(Windows.Storage.Streams.IRandomAccessStream,System.Int32)>多載。

]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="windowsRuntimeStream" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="AsStream">
      <MemberSignature Language="C#" Value="public static System.IO.Stream AsStream (this Windows.Storage.Streams.IRandomAccessStream windowsRuntimeStream, int bufferSize);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream AsStream(class Windows.Storage.Streams.IRandomAccessStream windowsRuntimeStream, int32 bufferSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.WindowsRuntimeStreamExtensions.AsStream(Windows.Storage.Streams.IRandomAccessStream,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsStream (windowsRuntimeStream As IRandomAccessStream, bufferSize As Integer) As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::IO::Stream ^ AsStream(Windows::Storage::Streams::IRandomAccessStream ^ windowsRuntimeStream, int bufferSize);" />
      <MemberSignature Language="F#" Value="static member AsStream : Windows.Storage.Streams.IRandomAccessStream * int -&gt; System.IO.Stream" Usage="System.IO.WindowsRuntimeStreamExtensions.AsStream (windowsRuntimeStream, bufferSize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.WindowsRuntime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="windowsRuntimeStream" Type="Windows.Storage.Streams.IRandomAccessStream" RefType="this" />
        <Parameter Name="bufferSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="windowsRuntimeStream">要轉換的 Windows 執行階段 <see cref="T:Windows.Storage.Streams.IRandomAccessStream" /> 物件。</param>
        <param name="bufferSize">緩衝區的大小 (以位元組為單位)。 這個值不可以是負數，但可以是 0 (零)，以停用緩衝處理。</param>
        <summary>使用指定的緩衝區大小將 Windows 執行階段中的隨機存取資料流轉換成適用於 Windows 市集應用程式的 .NET 中的受控資料流。</summary>
        <returns>轉換的資料流。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

> [!NOTE]
> 在 Visual Basic 中， C#，您可以在任何物件型別執行個體方法呼叫這個方法<xref:System.IO.Stream>。 使用執行個體方法語法呼叫這個方法時，請省略第一個參數。 如需詳細資訊，請參閱 <<c0> [ 擴充方法 (Visual Basic)](~/docs/visual-basic/programming-guide/language-features/procedures/extension-methods.md)或是[擴充方法 (C#程式設計指南)](~/docs/csharp/programming-guide/classes-and-structs/extension-methods.md)。</c0>

您可以使用這個方法來轉換資料流時指定的緩衝區大小。 若要使用 16,384 個位元組的預設緩衝區大小，請使用<xref:System.IO.WindowsRuntimeStreamExtensions.AsStream(Windows.Storage.Streams.IRandomAccessStream)>多載。

在大部分情況下，緩衝處理，將可改善資料流作業的效能。 您可以停用緩衝處理，藉由設定`bufferSize`為零，但您應該執行此動作僅在您確定停用緩衝處理，是適合您的情況。

]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="windowsRuntimeStream" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferSize" /> 為負。</exception>
      </Docs>
    </Member>
    <Member MemberName="AsStreamForRead">
      <MemberSignature Language="C#" Value="public static System.IO.Stream AsStreamForRead (this Windows.Storage.Streams.IInputStream windowsRuntimeStream);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream AsStreamForRead(class Windows.Storage.Streams.IInputStream windowsRuntimeStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.WindowsRuntimeStreamExtensions.AsStreamForRead(Windows.Storage.Streams.IInputStream)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsStreamForRead (windowsRuntimeStream As IInputStream) As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::IO::Stream ^ AsStreamForRead(Windows::Storage::Streams::IInputStream ^ windowsRuntimeStream);" />
      <MemberSignature Language="F#" Value="static member AsStreamForRead : Windows.Storage.Streams.IInputStream -&gt; System.IO.Stream" Usage="System.IO.WindowsRuntimeStreamExtensions.AsStreamForRead windowsRuntimeStream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.WindowsRuntime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="windowsRuntimeStream" Type="Windows.Storage.Streams.IInputStream" RefType="this" />
      </Parameters>
      <Docs>
        <param name="windowsRuntimeStream">要轉換的 Windows 執行階段 <see cref="T:Windows.Storage.Streams.IInputStream" /> 物件。</param>
        <summary>將 Windows 執行階段中的輸入資料流轉換成適用於 Windows 市集應用程式的 .NET 中的受控資料流。</summary>
        <returns>轉換的資料流。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

> [!NOTE]
> 在 Visual Basic 中， C#，您可以在任何物件型別執行個體方法呼叫這個方法<xref:System.IO.Stream>。 使用執行個體方法語法呼叫這個方法時，請省略第一個參數。 如需詳細資訊，請參閱 <<c0> [ 擴充方法 (Visual Basic)](~/docs/visual-basic/programming-guide/language-features/procedures/extension-methods.md)或是[擴充方法 (C#程式設計指南)](~/docs/csharp/programming-guide/classes-and-structs/extension-methods.md)。</c0>

轉換資料流時，會使用預設緩衝區大小為 16,384 個位元組。 若要指定不同的緩衝區大小，請使用<xref:System.IO.WindowsRuntimeStreamExtensions.AsStreamForRead(Windows.Storage.Streams.IInputStream,System.Int32)>多載。

## Examples

下列範例示範如何使用<xref:System.IO.WindowsRuntimeStreamExtensions.AsStreamForWrite%2A>和<xref:System.IO.WindowsRuntimeStreamExtensions.AsStreamForRead%2A>Windows 執行階段中的資料流來回轉換的 managed 資料流的方法。

[!code-csharp[windowsruntimestreamextensions#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.windowsruntimestreamextensions/cs/blankpage.xaml.cs#2)]
[!code-vb[windowsruntimestreamextensions#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.windowsruntimestreamextensions/vb/blankpage.xaml.vb#2)]

以下是前一個範例與相關聯的 XAML 程式碼。

[!code-xaml[windowsruntimestreamextensions#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.windowsruntimestreamextensions/cs/blankpage.xaml#1)]

]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="windowsRuntimeStream" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="AsStreamForRead">
      <MemberSignature Language="C#" Value="public static System.IO.Stream AsStreamForRead (this Windows.Storage.Streams.IInputStream windowsRuntimeStream, int bufferSize);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream AsStreamForRead(class Windows.Storage.Streams.IInputStream windowsRuntimeStream, int32 bufferSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.WindowsRuntimeStreamExtensions.AsStreamForRead(Windows.Storage.Streams.IInputStream,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsStreamForRead (windowsRuntimeStream As IInputStream, bufferSize As Integer) As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::IO::Stream ^ AsStreamForRead(Windows::Storage::Streams::IInputStream ^ windowsRuntimeStream, int bufferSize);" />
      <MemberSignature Language="F#" Value="static member AsStreamForRead : Windows.Storage.Streams.IInputStream * int -&gt; System.IO.Stream" Usage="System.IO.WindowsRuntimeStreamExtensions.AsStreamForRead (windowsRuntimeStream, bufferSize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.WindowsRuntime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="windowsRuntimeStream" Type="Windows.Storage.Streams.IInputStream" RefType="this" />
        <Parameter Name="bufferSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="windowsRuntimeStream">要轉換的 Windows 執行階段 <see xref="T:Windows.Storage.Streams.IInputStream" /> 物件。</param>
        <param name="bufferSize">緩衝區的大小 (以位元組為單位)。 這個值不可以是負數，但可以是 0 (零)，以停用緩衝處理。</param>
        <summary>使用指定的緩衝區大小將 Windows 執行階段中的輸入資料流轉換成適用於 Windows 8.x 市集應用程式的 .NET 中的受控資料流。</summary>
        <returns>轉換的資料流。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
## Remarks

> [!NOTE]
> 在 Visual Basic 中， C#，您可以在任何物件型別執行個體方法呼叫這個方法<xref:System.IO.Stream>。 使用執行個體方法語法呼叫這個方法時，請省略第一個參數。 如需詳細資訊，請參閱 <<c0> [ 擴充方法 (Visual Basic)](~/docs/visual-basic/programming-guide/language-features/procedures/extension-methods.md)或是[擴充方法 (C#程式設計指南)](~/docs/csharp/programming-guide/classes-and-structs/extension-methods.md)。</c0>

您可以使用這個方法來轉換資料流時指定的緩衝區大小。 若要使用 16,384 個位元組的預設緩衝區大小，請使用<xref:System.IO.WindowsRuntimeStreamExtensions.AsStreamForRead(Windows.Storage.Streams.IInputStream)>多載。

在大部分情況下，緩衝處理，將可改善資料流作業的效能。 您可以停用緩衝處理，藉由設定`bufferSize`為零，但您應該執行此動作僅在您確定停用緩衝處理，是適合您的情況。

]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="windowsRuntimeStream" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferSize" /> 為負。</exception>
      </Docs>
    </Member>
    <Member MemberName="AsStreamForWrite">
      <MemberSignature Language="C#" Value="public static System.IO.Stream AsStreamForWrite (this Windows.Storage.Streams.IOutputStream windowsRuntimeStream);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream AsStreamForWrite(class Windows.Storage.Streams.IOutputStream windowsRuntimeStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.WindowsRuntimeStreamExtensions.AsStreamForWrite(Windows.Storage.Streams.IOutputStream)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsStreamForWrite (windowsRuntimeStream As IOutputStream) As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::IO::Stream ^ AsStreamForWrite(Windows::Storage::Streams::IOutputStream ^ windowsRuntimeStream);" />
      <MemberSignature Language="F#" Value="static member AsStreamForWrite : Windows.Storage.Streams.IOutputStream -&gt; System.IO.Stream" Usage="System.IO.WindowsRuntimeStreamExtensions.AsStreamForWrite windowsRuntimeStream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.WindowsRuntime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="windowsRuntimeStream" Type="Windows.Storage.Streams.IOutputStream" RefType="this" />
      </Parameters>
      <Docs>
        <param name="windowsRuntimeStream">要轉換的 Windows 執行階段 <see xref="T:Windows.Storage.Streams.IOutputStream" /> 物件。</param>
        <summary>將 Windows 執行階段中的輸出資料流轉換成適用於 Windows 8.x 市集應用程式的 .NET 中的受控資料流。</summary>
        <returns>轉換的資料流。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
## Remarks

> [!NOTE]
> 在 Visual Basic 中， C#，您可以在任何物件型別執行個體方法呼叫這個方法<xref:System.IO.Stream>。 使用執行個體方法語法呼叫這個方法時，請省略第一個參數。 如需詳細資訊，請參閱 <<c0> [ 擴充方法 (Visual Basic)](~/docs/visual-basic/programming-guide/language-features/procedures/extension-methods.md)或是[擴充方法 (C#程式設計指南)](~/docs/csharp/programming-guide/classes-and-structs/extension-methods.md)。</c0>

轉換資料流時，會使用預設緩衝區大小為 16,384 個位元組。 若要指定不同的緩衝區大小，請使用<xref:>多載。

## Examples
下列範例示範如何使用<xref:System.IO.WindowsRuntimeStreamExtensions.AsStreamForWrite%2A>和<xref:System.IO.WindowsRuntimeStreamExtensions.AsStreamForRead%2A>Windows 執行階段中的資料流來回轉換的 managed 資料流的方法。

[!code-csharp[windowsruntimestreamextensions#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.windowsruntimestreamextensions/cs/blankpage.xaml.cs#2)]
[!code-vb[windowsruntimestreamextensions#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.windowsruntimestreamextensions/vb/blankpage.xaml.vb#2)]

以下是前一個範例與相關聯的 XAML 程式碼。

[!code-xaml[windowsruntimestreamextensions#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.windowsruntimestreamextensions/cs/blankpage.xaml#1)]

]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="windowsRuntimeStream" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="AsStreamForWrite">
      <MemberSignature Language="C#" Value="public static System.IO.Stream AsStreamForWrite (this Windows.Storage.Streams.IOutputStream windowsRuntimeStream, int bufferSize);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream AsStreamForWrite(class Windows.Storage.Streams.IOutputStream windowsRuntimeStream, int32 bufferSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.WindowsRuntimeStreamExtensions.AsStreamForWrite(Windows.Storage.Streams.IOutputStream,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsStreamForWrite (windowsRuntimeStream As IOutputStream, bufferSize As Integer) As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::IO::Stream ^ AsStreamForWrite(Windows::Storage::Streams::IOutputStream ^ windowsRuntimeStream, int bufferSize);" />
      <MemberSignature Language="F#" Value="static member AsStreamForWrite : Windows.Storage.Streams.IOutputStream * int -&gt; System.IO.Stream" Usage="System.IO.WindowsRuntimeStreamExtensions.AsStreamForWrite (windowsRuntimeStream, bufferSize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.WindowsRuntime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="windowsRuntimeStream" Type="Windows.Storage.Streams.IOutputStream" RefType="this" />
        <Parameter Name="bufferSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="windowsRuntimeStream">要轉換的 Windows 執行階段 <see cref="T:Windows.Storage.Streams.IOutputStream" /> 物件。</param>
        <param name="bufferSize">緩衝區的大小 (以位元組為單位)。 這個值不可以是負數，但可以是 0 (零)，以停用緩衝處理。</param>
        <summary>使用指定的緩衝區大小將 Windows 執行階段中的輸出資料流轉換成適用於 Windows 市集應用程式的 .NET 中的受控資料流。</summary>
        <returns>轉換的資料流。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

> [!NOTE]
> 在 Visual Basic 中， C#，您可以在任何物件型別執行個體方法呼叫這個方法<xref:System.IO.Stream>。 使用執行個體方法語法呼叫這個方法時，請省略第一個參數。 如需詳細資訊，請參閱 <<c0> [ 擴充方法 (Visual Basic)](~/docs/visual-basic/programming-guide/language-features/procedures/extension-methods.md)或是[擴充方法 (C#程式設計指南)](~/docs/csharp/programming-guide/classes-and-structs/extension-methods.md)。</c0>

您可以使用這個方法來轉換資料流時指定的緩衝區大小。 若要使用 16,384 個位元組的預設緩衝區大小，請使用<xref:System.IO.WindowsRuntimeStreamExtensions.AsStreamForWrite(Windows.Storage.Streams.IOutputStream)>多載。

在大部分情況下，緩衝處理，將可改善資料流作業的效能。 您可以停用緩衝處理，藉由設定`bufferSize`為零，但您應該執行此動作僅在您確定停用緩衝處理，是適合您的情況。

]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="windowsRuntimeStream" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferSize" /> 為負。</exception>
      </Docs>
    </Member>
  </Members>
</Type>