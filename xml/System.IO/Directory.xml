<Type Name="Directory" FullName="System.IO.Directory">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6b2dfc84f48aa62b20974348afaefe56611626b9" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57915824" /></Metadata><TypeSignature Language="C#" Value="public static class Directory" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Directory extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.IO.Directory" />
  <TypeSignature Language="VB.NET" Value="Public Class Directory" />
  <TypeSignature Language="C++ CLI" Value="public ref class Directory abstract sealed" />
  <TypeSignature Language="F#" Value="type Directory = class" />
  <AssemblyInfo>
    <AssemblyName>System.IO.FileSystem</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>公開建立、移動和全面列舉目錄和子目錄的靜態方法。 這個類別無法被繼承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.IO.Directory>類別，例如複製、 移動、 重新命名、 建立和刪除目錄的一般作業。  
  
-   若要建立一個目錄，使用其中一種<xref:System.IO.Directory.CreateDirectory%2A>方法。  
  
-   若要刪除的目錄，使用其中一種<xref:System.IO.Directory.Delete%2A>方法。  
  
-   若要取得或設定目前的目錄的應用程式，使用<xref:System.IO.Directory.GetCurrentDirectory%2A>或<xref:System.IO.Directory.SetCurrentDirectory%2A>方法。  
  
-   若要操作<xref:System.DateTime>相關的資訊建立、 存取和寫入的目錄中，使用方法這類<xref:System.IO.Directory.SetLastAccessTime%2A>和<xref:System.IO.Directory.SetCreationTime%2A>。  
  
 靜態方法<xref:System.IO.Directory>類別執行的所有方法的安全性檢查。 如果您要重複使用的物件數次，請考慮使用對應的執行個體方法的<xref:System.IO.DirectoryInfo>相反地，因為安全性檢查會不一定是必要。  
  
 如果您正在執行只有一個目錄相關的動作，它可能更有效率使用靜態<xref:System.IO.Directory>方法，而不是對應<xref:System.IO.DirectoryInfo>執行個體方法。 大部分<xref:System.IO.Directory>方法需要您操作的目錄路徑。  
  
> [!NOTE]
>  在接受字串的成員中`path`參數，該路徑必須是語式正確，或引發例外狀況。 比方說，如果路徑是完整名稱，但開頭是空格 ("c:\temp")，路徑字串未修剪，因此路徑會被視為格式不正確，並引發例外狀況。 此外，路徑的組合無法完整限定兩次。 例如，"c:\temp c:\windows，"也會引發例外狀況。 請確定您的路徑是語式正確的當您使用接受路徑字串的方法。 如需詳細資訊，請參閱<xref:System.IO.Path>。  
  
 在接受路徑的成員，路徑可以參考到檔案或目錄。 您可以使用完整的路徑、 相對路徑或通用命名慣例 (UNC) 路徑的伺服器和共用的名稱。 例如，如果以下所有狀況可接受的路徑：  
  
-   "c:\\\MyDir 」 以 C# 或 Visual Basic 中的 「 c:\mydir\"。  
  
-   "MyDir\\\MySubdir 」 以 C# 或 Visual Basic 中的 「 MyDir\MySubDir"。  
  
-   「\\\\\\\MyServer\\\MyShare 」 在 C# 中，或 「\\\MyServer\MyShare"在 Visual Basic 中。  
  
 根據預設，新的目錄完整讀取/寫入存取會授與所有使用者。 不過，應用程式必須有正確的安全性來存取現有的目錄。  
  
 若要要求權限的目錄和所有其子目錄，最後目錄分隔符號字元的路徑字串。 (例如，"C:\Temp\\」 會授與 C:\Temp\ 及其所有子目錄的存取。)若要只針對特定的目錄路徑字串，以句點結束的要求權限。 (例如，"C:\Temp\\。 」 僅授權存取至 C:\Temp\\，而非其子目錄。)  
  
 在 接受的成員`searchPattern`參數，搜尋字串可以是常值字元和兩個萬用字元; 的任何組合\*和？。 這個參數無法辨識的規則運算式。 如需詳細資訊，請參閱 <<c0> <xref:System.IO.Directory.EnumerateDirectories%28System.String%2CSystem.String%29> 方法或任何其他方法，會使用`searchPattern`參數。  
  
 如需一般 I/O 工作的清單，請參閱 <<c0> [ 一般 I/O 工作](~/docs/standard/io/common-i-o-tasks.md)。  
  
 <xref:System.IO.Directory> 並<xref:System.IO.DirectoryInfo>不支援用於[!INCLUDE[win8_appstore_long](~/includes/win8-appstore-long-md.md)]應用程式。 如需如何存取檔案和資料夾[!INCLUDE[win8_appstore_long](~/includes/win8-appstore-long-md.md)]應用程式，請參閱[存取資料和檔案 （Windows 市集應用程式）](https://msdn.microsoft.com/library/windows/apps/hh758319.aspx)。  
  
   
  
## Examples  
 下列範例示範如何從目錄擷取所有文字檔案，並將其移至新的目錄。 不會移動檔案之後，它們不再存在於原始的目錄。  
  
 [!code-csharp[System.IO.Directory#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Directory/CS/class2.cs#10)]
 [!code-vb[System.IO.Directory#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Directory/VB/class2.vb#10)]  
  
 下列範例示範如何使用<xref:System.IO.Directory.EnumerateFiles%2A>方法從目錄中，擷取一組文字檔案，並接著在查詢中使用該集合，來尋找包含"Example"的所有行。  
  
 [!code-csharp[System.IO.Directory#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Directory/CS/class3.cs#11)]
 [!code-vb[System.IO.Directory#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Directory/VB/class3.vb#11)]  
  
 下列範例示範如何將目錄和其所有的檔案移至新的目錄。 已移動之後，原始的目錄不存在。  
  
 [!code-csharp[System.IO.Directory#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Directory/CS/class6.cs#14)]
 [!code-vb[System.IO.Directory#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Directory/VB/class6.vb#14)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IO.DriveInfo" />
    <altmember cref="T:System.IO.File" />
    <altmember cref="T:System.IO.DirectoryInfo" />
    <altmember cref="T:System.IO.FileInfo" />
    <altmember cref="T:System.IO.FileSystemWatcher" />
    <related type="Article" href="~/docs/standard/io/index.md">檔案和資料流 I/O</related>
    <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md">如何：從檔案讀取文字</related>
    <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md">如何：將文字寫入檔案</related>
    <related type="Article" href="~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md">如何：讀取和寫入新建立的資料檔案</related>
  </Docs>
  <Members>
    <MemberGroup MemberName="CreateDirectory">
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>在指定的路徑中建立所有目錄。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateDirectory">
      <MemberSignature Language="C#" Value="public static System.IO.DirectoryInfo CreateDirectory (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.DirectoryInfo CreateDirectory(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.CreateDirectory(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateDirectory (path As String) As DirectoryInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::DirectoryInfo ^ CreateDirectory(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member CreateDirectory : string -&gt; System.IO.DirectoryInfo" Usage="System.IO.Directory.CreateDirectory path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.DirectoryInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">要建立的目錄。</param>
        <summary>在指定的路徑建立所有目錄和子目錄 (如果這些目錄尚不存在)。</summary>
        <returns>物件，表示指定之路徑的目錄。 不論指定之路徑的目錄是否已經存在，都會傳回這個物件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 中指定的所有目錄`path`會建立，除非它們已經存在，或有部分的`path`無效。 如果目錄已經存在，這個方法不會建立新的目錄，但它會傳回<xref:System.IO.DirectoryInfo>現有的目錄物件。  
  
 `path`參數指定的目錄路徑，不是檔案路徑。  
  
 從結尾會移除尾端空格`path`參數之前建立的目錄。  
  
 您可以在您擁有寫入權限的共用上的遠端電腦上建立目錄。 支援 UNC 路徑;例如，您可以指定下列`path`:`\\2009\Archives\December`在 Visual Basic 和`\\\\2009\\Archives\\December`C# 中。  
  
 只有冒號字元 （:） 中建立的目錄不支援，且會導致`NotSupportedException`擲回。  
  
   
  
## Examples  
 下列範例會建立和刪除指定的目錄。  
  
 [!code-cpp[Dir_CreateDir#1](~/samples/snippets/cpp/VS_Snippets_CLR/Dir_CreateDir/CPP/dir_createdir.cpp#1)]
 [!code-csharp[Dir_CreateDir#1](~/samples/snippets/csharp/VS_Snippets_CLR/Dir_CreateDir/CS/dir_createdir.cs#1)]
 [!code-vb[Dir_CreateDir#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Dir_CreateDir/VB/dir_createdir.vb#1)]  
  
 若要建立目錄 C:\Users\User1\Public\Html C:\Users\User1 目前的目錄時，請使用任何下列呼叫以確保反斜線會正確解譯。  
  
 在 Visual Basic:  
  
```  
Directory.CreateDirectory("Public\Html")   
    Directory.CreateDirectory("\Users\User1\Public\Html")   
    Directory.CreateDirectory("c:\Users\User1\Public\Html")  
```  
  
 在 C# 中：  
  
```  
Directory.CreateDirectory("Public\\Html");  
    Directory.CreateDirectory("\\Users\\User1\\Public\\Html");  
    Directory.CreateDirectory("c:\\Users\\User1\\Public\\Html");  
```  
  
 在 c + +:  
  
```  
Directory::CreateDirectory("Public\\Html");  
    Directory::CreateDirectory("\\Users\\User1\\Public\\Html");  
    Directory::CreateDirectory("c:\\Users\\User1\\Public\\Html");  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><paramref name="path" /> 指定的目錄是檔案。  
  
-或- 
未知的網路名稱。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼叫端沒有必要的使用權限。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 為零長度字串、只包含空格，或包含一或多個無效字元。 您可以使用 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 方法查詢無效字元。  
  
-或- 
 <paramref name="path" /> 前面只具有或包含冒號字元 (:)。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱，或兩者都超出系統定義的長度上限。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定的路徑無效 (例如，它位於未對應的磁碟機上)。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="path" /> 包含不是磁碟機標籤 ("C:\\") 一部分的冒號字元 (:)。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">針對讀取和寫入檔案或目錄。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />， <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
        <altmember cref="T:System.IO.DirectoryInfo" />
        <related type="Article" href="~/docs/standard/io/index.md">檔案和資料流 I/O</related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md">如何：從檔案讀取文字</related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md">如何：將文字寫入檔案</related>
      </Docs>
    </Member>
    <Member MemberName="CreateDirectory">
      <MemberSignature Language="C#" Value="public static System.IO.DirectoryInfo CreateDirectory (string path, System.Security.AccessControl.DirectorySecurity directorySecurity);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.DirectoryInfo CreateDirectory(string path, class System.Security.AccessControl.DirectorySecurity directorySecurity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.CreateDirectory(System.String,System.Security.AccessControl.DirectorySecurity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::DirectoryInfo ^ CreateDirectory(System::String ^ path, System::Security::AccessControl::DirectorySecurity ^ directorySecurity);" />
      <MemberSignature Language="F#" Value="static member CreateDirectory : string * System.Security.AccessControl.DirectorySecurity -&gt; System.IO.DirectoryInfo" Usage="System.IO.Directory.CreateDirectory (path, directorySecurity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.DirectoryInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="directorySecurity" Type="System.Security.AccessControl.DirectorySecurity" Index="1" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="path">要建立的目錄。</param>
        <param name="directorySecurity">要套用至目錄的存取控制。</param>
        <summary>在指定的路徑中建立所有目錄 (如果尚不存在)，同時套用指定的 Windows 安全性。</summary>
        <returns>物件，表示指定之路徑的目錄。 不論指定之路徑的目錄是否已經存在，都會傳回這個物件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用這個方法多載來建立目錄透過存取控制，因此不會有的機會可以存取的目錄，才能套用安全性。  
  
 中指定的所有目錄`path`參數所建立，除非它們已經存在，或有部分的`path`無效。 `path`參數指定的目錄路徑，不是檔案路徑。 如果目錄已經存在，這個方法不會建立新的目錄，但它會傳回<xref:System.IO.DirectoryInfo>現有的目錄物件。  
  
 從結尾會移除尾端空格`path`參數之前建立的目錄。  
  
 您可以在您擁有寫入權限的共用上的遠端電腦上建立目錄。 支援 UNC 路徑;例如，您可以指定下列`path`:`\\2009\Archives\December`在 Visual Basic 和`\\\\2009\\Archives\\December`C# 中。  
  
 建立目錄以只有冒號字元 （:） 不支援，而且會導致`NotSupportedException`擲回。  
  
   
  
## Examples  
 下列範例會建立新的目錄，兩個使用者帳戶的存取規則。  
  
 [!code-csharp[System.IO.Directory#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Directory/CS/class7.cs#15)]
 [!code-vb[System.IO.Directory#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Directory/VB/class7.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><paramref name="path" /> 指定的目錄是檔案。  
  
-或- 
未知的網路名稱。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼叫端沒有必要的使用權限。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 為零長度字串、只包含空格，或包含一或多個無效字元。 您可以使用 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 方法查詢無效字元。  
  
-或- 
 <paramref name="path" /> 前面只具有或包含冒號字元 (:)。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱，或兩者都超出系統定義的長度上限。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定的路徑無效 (例如，它位於未對應的磁碟機上)。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="path" /> 包含不是磁碟機標籤 ("C:\\") 一部分的冒號字元 (:)。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">用於讀取和寫入檔案和目錄和目的地目錄的存取權。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />，<see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />安全性動作： <see cref="F:System.Security.Permissions.SecurityAction.Demand" /></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="Delete">
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>刪除指定的目錄和選擇性地刪除任何子目錄。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public static void Delete (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Delete(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.Delete(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Delete (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Delete(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member Delete : string -&gt; unit" Usage="System.IO.Directory.Delete path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">要移除的空目錄名稱。 這個目錄必須為可寫入的和空的。</param>
        <summary>從指定的路徑刪除空目錄。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法的行為相同於<xref:System.IO.Directory.Delete%28System.String%2CSystem.Boolean%29>與`false`第二個參數所指定。  
  
 `path`參數可以指定相對或絕對路徑資訊。 相對於目前工作目錄，會解譯相對路徑的資訊。 若要取得目前工作目錄，請參閱<xref:System.IO.Directory.GetCurrentDirectory%2A>。  
  
 從結尾會移除尾端空格`path`參數，然後再刪除目錄。  
  
 這個方法會擲回<xref:System.IO.IOException>如果在指定的目錄`path`參數包含檔案或子目錄。  
  
 `path`參數不區分大小寫。  
  
 在某些情況下，如果您有指定的目錄中檔案總管 中，開啟<xref:System.IO.Directory.Delete%2A>方法可能無法將它刪除。  
  
   
  
## Examples  
 下列範例示範如何建立新的目錄和子目錄，然後再刪除僅的子目錄。  
  
 [!code-csharp[System.IO.Directory.Delete#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.directory.delete/cs/class1.cs#1)]
 [!code-vb[System.IO.Directory.Delete#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.directory.delete/vb/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">與 <paramref name="path" /> 所指定名稱和位置相同的檔案存在。  
  
-或- 
目錄是應用程式目前的工作目錄。  
  
-或- 
<paramref name="path" /> 指定的目錄不是空的。  
  
-或- 
目錄是唯讀的或包含唯讀檔案。  
  
-或- 
其他處理序正在使用此目錄。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼叫端沒有必要的使用權限。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 為零長度字串、只包含空格，或包含一或多個無效字元。 您可以使用 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 方法查詢無效字元。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱，或兩者都超出系統定義的長度上限。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> 不存在或找不到。  
  
-或- 
指定的路徑無效 (例如，它位於未對應的磁碟機上)。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">用於寫入至指定的目錄。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
        <related type="Article" href="~/docs/standard/io/index.md">檔案和資料流 I/O</related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md">如何：從檔案讀取文字</related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md">如何：將文字寫入檔案</related>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public static void Delete (string path, bool recursive);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Delete(string path, bool recursive) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.Delete(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Delete (path As String, recursive As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Delete(System::String ^ path, bool recursive);" />
      <MemberSignature Language="F#" Value="static member Delete : string * bool -&gt; unit" Usage="System.IO.Directory.Delete (path, recursive)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="recursive" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="path">要移除的目錄名稱。</param>
        <param name="recursive">若要移除 <paramref name="path" /> 中的目錄、子目錄和檔案，則為 <see langword="true" />；否則為 <see langword="false" />。</param>
        <summary>刪除指定目錄，並且若有指示，則刪除目錄中的任何子目錄和檔案。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `path`參數可以指定相對或絕對路徑資訊。 相對於目前工作目錄，會解譯相對路徑的資訊。 若要取得目前工作目錄，請參閱<xref:System.IO.Directory.GetCurrentDirectory%2A>。  
  
 從結尾會移除尾端空格`path`參數，然後再刪除目錄。  
  
 `path`參數不區分大小寫。  
  
 如果`recursive`參數是`true`，使用者必須擁有目前的目錄也與所有子目錄的寫入權限。  
  
 當您刪除此目錄包含重新分析點，例如符號連結或掛接點時，此方法的行為稍有不同。 如果重新分析點是目錄，例如掛接點，會取消掛接並掛接點已刪除。 這個方法不會遞迴到重新分析點。 如果重新分析點是檔案的符號連結，也會刪除重新分析點並不是符號連結的目標。  
  
 在某些情況下，如果您有指定的目錄中檔案總管 中，開啟<xref:System.IO.Directory.Delete%2A>方法可能無法將它刪除。  
  
   
  
## Examples  
 下列範例示範如何建立新的目錄、 子目錄和檔案中的子目錄，然後再以遞迴方式刪除所有新的項目。  
  
 [!code-csharp[System.IO.Directory.Delete#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.directory.delete/cs/class2.cs#2)]
 [!code-vb[System.IO.Directory.Delete#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.directory.delete/vb/class2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">與 <paramref name="path" /> 所指定名稱和位置相同的檔案存在。  
  
-或- 
<paramref name="path" /> 所指定的目錄是唯讀，或 <paramref name="recursive" /> 是 <see langword="false" />，而 <paramref name="path" /> 不是空目錄。  
  
-或- 
目錄是應用程式目前的工作目錄。  
  
-或- 
目錄包含唯讀檔案。  
  
-或- 
其他處理序正在使用此目錄。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼叫端沒有必要的使用權限。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 為零長度字串、只包含空格，或包含一或多個無效字元。 您可以使用 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 方法查詢無效字元。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱，或兩者都超出系統定義的長度上限。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> 不存在或找不到。  
  
-或- 
指定的路徑無效 (例如，它位於未對應的磁碟機上)。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">用於寫入至指定的目錄。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
        <related type="Article" href="~/docs/standard/io/index.md">檔案和資料流 I/O</related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md">如何：從檔案讀取文字</related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md">如何：將文字寫入檔案</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="EnumerateDirectories">
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>傳回符合指定準則之目錄名稱的可列舉集合。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="EnumerateDirectories">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;string&gt; EnumerateDirectories (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;string&gt; EnumerateDirectories(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.EnumerateDirectories(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnumerateDirectories (path As String) As IEnumerable(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ EnumerateDirectories(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member EnumerateDirectories : string -&gt; seq&lt;string&gt;" Usage="System.IO.Directory.EnumerateDirectories path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="path">要搜尋之目錄的相對或絕對路徑。 這個字串不會區分大小寫。</param>
        <summary>傳回指定之路徑中目錄名稱的可列舉集合。</summary>
        <returns><paramref name="path" /> 指定的目錄中，目錄完整名稱 (包括路徑) 的可列舉集合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以指定相對或絕對路徑資訊`path`參數。 相對路徑的資訊會相對於目前工作目錄，您可以使用判斷解譯<xref:System.IO.Directory.GetCurrentDirectory%2A>方法。 傳回的目錄名稱前面會加上您在中提供的值`path`參數。 例如，如果您提供相關的相對路徑`path`參數，傳回的目錄名稱會包含相對路徑。  
  
 <xref:System.IO.Directory.EnumerateDirectories%2A>和<xref:System.IO.Directory.GetDirectories%2A>方法的差異，如下所示：當您使用<xref:System.IO.Directory.EnumerateDirectories%2A>，您可以開始列舉的名稱集合，則會傳回整個集合之前，當您使用<xref:System.IO.Directory.GetDirectories%2A>，您必須等到整個陣列的名稱，才能存取陣列傳回。 因此，當您使用許多檔案和目錄、<xref:System.IO.Directory.EnumerateDirectories%2A>可能會更有效率。  
  
 不會快取傳回的集合;每次呼叫<xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A>集合上將會啟動新的列舉型別。  
  
   
  
## Examples  
 下列範例會列舉指定之路徑中的最上層目錄。  
  
 [!code-csharp[System.IO.EnumDirs1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.enumdirs1/cs/program.cs#1)]
 [!code-vb[System.IO.EnumDirs1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.enumdirs1/vb/program.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 為零長度字串、只包含空格或包含無效字元。 您可以使用 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 方法查詢無效字元。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> 無效，例如參考到未對應的磁碟機。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="path" /> 為檔案名稱。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱，或兩者合計超出系統定義的長度上限。</exception>
        <exception cref="T:System.Security.SecurityException">呼叫端沒有必要的使用權限。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼叫端沒有必要的使用權限。</exception>
      </Docs>
    </Member>
    <Member MemberName="EnumerateDirectories">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;string&gt; EnumerateDirectories (string path, string searchPattern);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;string&gt; EnumerateDirectories(string path, string searchPattern) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.EnumerateDirectories(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnumerateDirectories (path As String, searchPattern As String) As IEnumerable(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ EnumerateDirectories(System::String ^ path, System::String ^ searchPattern);" />
      <MemberSignature Language="F#" Value="static member EnumerateDirectories : string * string -&gt; seq&lt;string&gt;" Usage="System.IO.Directory.EnumerateDirectories (path, searchPattern)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="searchPattern" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="path">要搜尋之目錄的相對或絕對路徑。 這個字串不會區分大小寫。</param>
        <param name="searchPattern">要比對 <paramref name="path" /> 中目錄名稱的搜尋字串。  這個參數可以包含有效常值路徑與萬用 (* 和 ?) 字元的組合，但是不支援規則運算式。</param>
        <summary>傳回指定之路徑中符合搜尋模式之目錄名稱的可列舉集合。</summary>
        <returns><paramref name="path" /> 指定的目錄中，符合指定搜尋模式的目錄完整名稱 (包括路徑) 的可列舉集合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `searchPattern` 可以是常值與萬用字元字元的組合，但它不支援規則運算式。 允許使用下列萬用字元規範`searchPattern`。  
  
|萬用字元規範|符合|  
|------------------------|-------------|  
|\* （星號）|在該位置的零或多個字元。|  
|? （問號）|該位置中的零個或一個字元。|  
  
 非萬用字元的字元是常值字元。 比方說，`searchPattern`字串 」\*t 」 中的所有名稱搜尋`path`結尾字母"t"。 `searchPattern`字串"s\*」 中的所有名稱搜尋`path`開頭為字母"s"。  
  
 `searchPattern` 結尾不能兩個句點 ("...") 或包含兩個句點 ("...") 後面接著<xref:System.IO.Path.DirectorySeparatorChar>或<xref:System.IO.Path.AltDirectorySeparatorChar>，也不能包含任何無效的字元。 您可以使用 <xref:System.IO.Path.GetInvalidPathChars%2A> 方法查詢無效字元。  
  
 您可以指定相對或絕對路徑資訊`path`參數。 相對路徑的資訊會相對於目前工作目錄，您可以使用判斷解譯<xref:System.IO.Directory.GetCurrentDirectory%2A>方法。 傳回的目錄名稱前面會加上您在中提供的值`path`參數。 例如，如果您提供相關的相對路徑`path`參數，傳回的目錄名稱會包含相對路徑。  
  
 <xref:System.IO.Directory.EnumerateDirectories%2A>和<xref:System.IO.Directory.GetDirectories%2A>方法的差異，如下所示：當您使用<xref:System.IO.Directory.EnumerateDirectories%2A>，您可以開始列舉的名稱集合，則會傳回整個集合之前，當您使用<xref:System.IO.Directory.GetDirectories%2A>，您必須等到整個陣列的名稱，才能存取陣列傳回。 因此，當您使用許多檔案和目錄、<xref:System.IO.Directory.EnumerateDirectories%2A>可能會更有效率。  
  
 不會快取傳回的集合;每次呼叫<xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A>集合上將會啟動新的列舉型別。  
  
   
  
## Examples  
 下列範例會列舉指定之路徑中符合指定的搜尋模式的最上層目錄。  
  
 [!code-csharp[System.IO.EnumDirs2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.enumdirs2/cs/program.cs#1)]
 [!code-vb[System.IO.EnumDirs2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.enumdirs2/vb/program.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 為零長度字串、只包含空格或包含無效字元。 您可以使用 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 方法查詢無效字元。  
  
-或- 
 <paramref name="searchPattern" /> 不包含有效模式。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 為 <see langword="null" />。  
  
-或- 
 <paramref name="searchPattern" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> 無效，例如參考到未對應的磁碟機。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="path" /> 為檔案名稱。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱，或兩者合計超出系統定義的長度上限。</exception>
        <exception cref="T:System.Security.SecurityException">呼叫端沒有必要的使用權限。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼叫端沒有必要的使用權限。</exception>
      </Docs>
    </Member>
    <Member MemberName="EnumerateDirectories">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;string&gt; EnumerateDirectories (string path, string searchPattern, System.IO.EnumerationOptions enumerationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;string&gt; EnumerateDirectories(string path, string searchPattern, class System.IO.EnumerationOptions enumerationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.EnumerateDirectories(System.String,System.String,System.IO.EnumerationOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ EnumerateDirectories(System::String ^ path, System::String ^ searchPattern, System::IO::EnumerationOptions ^ enumerationOptions);" />
      <MemberSignature Language="F#" Value="static member EnumerateDirectories : string * string * System.IO.EnumerationOptions -&gt; seq&lt;string&gt;" Usage="System.IO.Directory.EnumerateDirectories (path, searchPattern, enumerationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="searchPattern" Type="System.String" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="enumerationOptions" Type="System.IO.EnumerationOptions" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <param name="searchPattern">To be added.</param>
        <param name="enumerationOptions">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateDirectories">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;string&gt; EnumerateDirectories (string path, string searchPattern, System.IO.SearchOption searchOption);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;string&gt; EnumerateDirectories(string path, string searchPattern, valuetype System.IO.SearchOption searchOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.EnumerateDirectories(System.String,System.String,System.IO.SearchOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ EnumerateDirectories(System::String ^ path, System::String ^ searchPattern, System::IO::SearchOption searchOption);" />
      <MemberSignature Language="F#" Value="static member EnumerateDirectories : string * string * System.IO.SearchOption -&gt; seq&lt;string&gt;" Usage="System.IO.Directory.EnumerateDirectories (path, searchPattern, searchOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="searchPattern" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="searchOption" Type="System.IO.SearchOption" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="path">要搜尋之目錄的相對或絕對路徑。 這個字串不會區分大小寫。</param>
        <param name="searchPattern">要比對 <paramref name="path" /> 中目錄名稱的搜尋字串。  這個參數可以包含有效常值路徑與萬用 (* 和 ?) 字元的組合，但是不支援規則運算式。</param>
        <param name="searchOption">其中一個列舉值，該值會指定搜尋作業應該只包含目前目錄還是包含所有子目錄。  
  
預設值為 <see cref="F:System.IO.SearchOption.TopDirectoryOnly" />。</param>
        <summary>傳回指定之路徑中符合搜尋模式之目錄名稱的可列舉集合，並選擇性地搜尋子目錄。</summary>
        <returns>符合指定搜尋模式與選項之 <paramref name="path" /> 所指定目錄中目錄完整名稱 (包括路徑) 的可列舉集合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `searchPattern` 可以是常值與萬用字元字元的組合，但它不支援規則運算式。 允許使用下列萬用字元規範`searchPattern`。  
  
|萬用字元規範|符合|  
|------------------------|-------------|  
|\* （星號）|在該位置的零或多個字元。|  
|? （問號）|該位置中的一個字元。|  
  
 非萬用字元的字元是常值字元。 比方說，`searchPattern`字串 」\*t 」 中的所有名稱搜尋`path`結尾字母"t"。 `searchPattern`字串"s\*」 中的所有名稱搜尋`path`開頭為字母"s"。  
  
 `searchPattern` 結尾不能兩個句點 ("...") 或包含兩個句點 ("...") 後面接著<xref:System.IO.Path.DirectorySeparatorChar>或<xref:System.IO.Path.AltDirectorySeparatorChar>，也不能包含任何無效的字元。 您可以使用 <xref:System.IO.Path.GetInvalidPathChars%2A> 方法查詢無效字元。  
  
 您可以指定相對或絕對路徑資訊`path`參數。 相對路徑的資訊會相對於目前工作目錄，您可以使用判斷解譯<xref:System.IO.Directory.GetCurrentDirectory%2A>方法。 傳回的目錄名稱前面會加上您在中提供的值`path`參數。 例如，如果您提供相關的相對路徑`path`參數，傳回的目錄名稱會包含相對路徑。  
  
 <xref:System.IO.Directory.EnumerateDirectories%2A>和<xref:System.IO.Directory.GetDirectories%2A>方法的差異，如下所示：當您使用<xref:System.IO.Directory.EnumerateDirectories%2A>，您可以開始列舉的名稱集合，則會傳回整個集合之前，當您使用<xref:System.IO.Directory.GetDirectories%2A>，您必須等到整個陣列的名稱，才能存取陣列傳回。 因此，當您使用許多檔案和目錄、<xref:System.IO.Directory.EnumerateDirectories%2A>可能會更有效率。  
  
 不會快取傳回的集合;每次呼叫<xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A>集合上將會啟動新的列舉型別。  
  
   
  
## Examples  
 下列範例會列舉指定之路徑中符合指定的搜尋模式的目錄。 它會使用`searchOption`參數來指定應該在搜尋中包含所有子目錄。  
  
 [!code-csharp[System.IO.EnumDirs3#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.enumdirs3/cs/program.cs#1)]
 [!code-vb[System.IO.EnumDirs3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.enumdirs3/vb/program.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 為零長度字串、只包含空格或包含無效字元。 您可以使用 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 方法查詢無效字元。  
  
-或- 
 <paramref name="searchPattern" /> 不包含有效模式。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 為 <see langword="null" />。  
  
-或- 
 <paramref name="searchPattern" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="searchOption" /> 不是有效的 <see cref="T:System.IO.SearchOption" /> 值。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> 無效，例如參考到未對應的磁碟機。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="path" /> 為檔案名稱。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱，或兩者合計超出系統定義的長度上限。</exception>
        <exception cref="T:System.Security.SecurityException">呼叫端沒有必要的使用權限。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼叫端沒有必要的使用權限。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="EnumerateFiles">
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>傳回符合指定準則之檔案名稱的可列舉集合。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="EnumerateFiles">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;string&gt; EnumerateFiles (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;string&gt; EnumerateFiles(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.EnumerateFiles(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnumerateFiles (path As String) As IEnumerable(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ EnumerateFiles(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member EnumerateFiles : string -&gt; seq&lt;string&gt;" Usage="System.IO.Directory.EnumerateFiles path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="path">要搜尋之目錄的相對或絕對路徑。 這個字串不會區分大小寫。</param>
        <summary>傳回指定之路徑中檔案名稱的可列舉集合。</summary>
        <returns><paramref name="path" /> 指定的目錄中，檔案完整名稱 (包括路徑) 的可列舉集合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以指定相對路徑的資訊與`path`參數。 相對路徑的資訊會相對於目前工作目錄，您可以使用判斷解譯<xref:System.IO.Directory.GetCurrentDirectory%2A>方法。  
  
 <xref:System.IO.Directory.EnumerateFiles%2A>和<xref:System.IO.Directory.GetFiles%2A>方法的差異，如下所示：當您使用<xref:System.IO.Directory.EnumerateFiles%2A>，您可以開始列舉的名稱集合，則會傳回整個集合之前，當您使用<xref:System.IO.Directory.GetFiles%2A>，您必須等到整個陣列的名稱，才能存取陣列傳回。 因此，當您使用許多檔案和目錄、<xref:System.IO.Directory.EnumerateFiles%2A>可能會更有效率。  
  
 不會快取傳回的集合;每次呼叫<xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A>集合上將會啟動新的列舉型別。  
  
   
  
## Examples  
 下列範例示範如何擷取目錄中的所有檔案，並將其移至新的目錄。 不會移動檔案之後，它們不再存在於原始的目錄。  
  
 [!code-csharp[System.IO.Directory#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Directory/CS/class4.cs#12)]
 [!code-vb[System.IO.Directory#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Directory/VB/class4.vb#12)]  
  
 下列範例會列舉指定的目錄中的檔案讀取的檔案，每一行，並顯示列，如果它包含字串 「 歐洲 」。  
  
 [!code-csharp[System.IO.Directory.EnumFiles#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.directory.enumfiles/cs/program.cs#1)]
 [!code-vb[System.IO.Directory.EnumFiles#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.directory.enumfiles/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 為零長度字串、只包含空格或包含無效字元。 您可以使用 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 方法查詢無效字元。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> 無效，例如參考到未對應的磁碟機。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="path" /> 為檔案名稱。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱，或兩者合計超出系統定義的長度上限。</exception>
        <exception cref="T:System.Security.SecurityException">呼叫端沒有必要的使用權限。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼叫端沒有必要的使用權限。</exception>
      </Docs>
    </Member>
    <Member MemberName="EnumerateFiles">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;string&gt; EnumerateFiles (string path, string searchPattern);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;string&gt; EnumerateFiles(string path, string searchPattern) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.EnumerateFiles(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnumerateFiles (path As String, searchPattern As String) As IEnumerable(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ EnumerateFiles(System::String ^ path, System::String ^ searchPattern);" />
      <MemberSignature Language="F#" Value="static member EnumerateFiles : string * string -&gt; seq&lt;string&gt;" Usage="System.IO.Directory.EnumerateFiles (path, searchPattern)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="searchPattern" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="path">要搜尋之目錄的相對或絕對路徑。 這個字串不會區分大小寫。</param>
        <param name="searchPattern">要比對 <paramref name="path" /> 中檔案名稱的搜尋字串。  這個參數可以包含有效常值路徑與萬用 (* 和 ?) 字元的組合，但是不支援規則運算式。</param>
        <summary>傳回指定之路徑中符合搜尋模式之檔名的可列舉集合。</summary>
        <returns><paramref name="path" /> 指定的目錄中，符合指定搜尋模式的檔案之完整名稱 (包括路徑) 的可列舉集合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `searchPattern` 可以是常值與萬用字元字元的組合，但它不支援規則運算式。 允許使用下列萬用字元規範`searchPattern`。  
  
|萬用字元規範|符合|  
|------------------------|-------------|  
|\* （星號）|在該位置的零或多個字元。|  
|? （問號）|該位置中的零個或一個字元。|  
  
 非萬用字元的字元是常值字元。 比方說，`searchPattern`字串 」\*t 」 中的所有名稱搜尋`path`結尾字母"t"。 `searchPattern`字串"s\*」 中的所有名稱搜尋`path`開頭為字母"s"。  
  
> [!NOTE]
>  當您使用星號萬用字元，在`searchPattern`這類 「\*.txt 」，在指定的延伸模組中的字元數會影響搜尋，如下所示：  
>   
> -   如果指定的延伸模組是剛好三個字元，則這個方法會傳回具有延伸模組可開始具有指定副檔名的檔案。 例如，"\*.xls"傳回"book.xls 」 和 「 book.xlsx"。  
> -   在其他情況下，這個方法會傳回完全符合指定的延伸模組的檔案。 例如，"\*.ai"會傳回 「 file.ai"，而不是 「 file.aif"。  
>   
>  當您使用問號萬用字元時，則這個方法會傳回符合指定的副檔名的檔案。 例如，假設"file1.txt"和"file1.txtother 」，兩個檔案，在目錄中，搜尋模式的 「 檔案？。txt"會傳回只是第一個檔案，而搜尋模式的 「 檔案\*.txt"會傳回這兩個檔案。  
  
 `searchPattern` 結尾不能兩個句點 ("...") 或包含兩個句點 ("...") 後面接著<xref:System.IO.Path.DirectorySeparatorChar>或<xref:System.IO.Path.AltDirectorySeparatorChar>，也不能包含任何無效的字元。 您可以使用 <xref:System.IO.Path.GetInvalidPathChars%2A> 方法查詢無效字元。  
  
 您可以指定相對路徑的資訊與`path`參數。 相對路徑的資訊會相對於目前工作目錄，您可以使用判斷解譯<xref:System.IO.Directory.GetCurrentDirectory%2A>方法。  
  
 <xref:System.IO.Directory.EnumerateFiles%2A>和<xref:System.IO.Directory.GetFiles%2A>方法的差異，如下所示：當您使用<xref:System.IO.Directory.EnumerateFiles%2A>，您可以開始列舉的名稱集合，則會傳回整個集合之前，當您使用<xref:System.IO.Directory.GetFiles%2A>，您必須等到整個陣列的名稱，才能存取陣列傳回。 因此，當您使用許多檔案和目錄、<xref:System.IO.Directory.EnumerateFiles%2A>可能會更有效率。  
  
 不會快取傳回的集合;每次呼叫<xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A>集合上將會啟動新的列舉型別。  
  
   
  
## Examples  
 下列範例示範如何擷取目錄中的所有文字檔案，並將其移至新的目錄。 不會移動檔案之後，它們不再存在於原始的目錄。  
  
 [!code-csharp[System.IO.Directory#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Directory/CS/class2.cs#10)]
 [!code-vb[System.IO.Directory#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Directory/VB/class2.vb#10)]  
  
 下列範例會列舉指定的目錄中，副檔名為.txt 的檔案讀取的檔案，每一行，並顯示列，如果它包含字串 「 歐洲 」。  
  
 [!code-csharp[System.IO.Directory.EnumFiles2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.directory.enumfiles2/cs/program.cs#1)]
 [!code-vb[System.IO.Directory.EnumFiles2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.directory.enumfiles2/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 為零長度字串、只包含空格或包含無效字元。 您可以使用 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 方法查詢無效字元。  
  
-或- 
 <paramref name="searchPattern" /> 不包含有效模式。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 為 <see langword="null" />。  
  
-或- 
 <paramref name="searchPattern" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> 無效，例如參考到未對應的磁碟機。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="path" /> 為檔案名稱。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱，或兩者合計超出系統定義的長度上限。</exception>
        <exception cref="T:System.Security.SecurityException">呼叫端沒有必要的使用權限。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼叫端沒有必要的使用權限。</exception>
      </Docs>
    </Member>
    <Member MemberName="EnumerateFiles">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;string&gt; EnumerateFiles (string path, string searchPattern, System.IO.EnumerationOptions enumerationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;string&gt; EnumerateFiles(string path, string searchPattern, class System.IO.EnumerationOptions enumerationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.EnumerateFiles(System.String,System.String,System.IO.EnumerationOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ EnumerateFiles(System::String ^ path, System::String ^ searchPattern, System::IO::EnumerationOptions ^ enumerationOptions);" />
      <MemberSignature Language="F#" Value="static member EnumerateFiles : string * string * System.IO.EnumerationOptions -&gt; seq&lt;string&gt;" Usage="System.IO.Directory.EnumerateFiles (path, searchPattern, enumerationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="searchPattern" Type="System.String" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="enumerationOptions" Type="System.IO.EnumerationOptions" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <param name="searchPattern">To be added.</param>
        <param name="enumerationOptions">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateFiles">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;string&gt; EnumerateFiles (string path, string searchPattern, System.IO.SearchOption searchOption);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;string&gt; EnumerateFiles(string path, string searchPattern, valuetype System.IO.SearchOption searchOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.EnumerateFiles(System.String,System.String,System.IO.SearchOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ EnumerateFiles(System::String ^ path, System::String ^ searchPattern, System::IO::SearchOption searchOption);" />
      <MemberSignature Language="F#" Value="static member EnumerateFiles : string * string * System.IO.SearchOption -&gt; seq&lt;string&gt;" Usage="System.IO.Directory.EnumerateFiles (path, searchPattern, searchOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="searchPattern" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="searchOption" Type="System.IO.SearchOption" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="path">要搜尋之目錄的相對或絕對路徑。 這個字串不會區分大小寫。</param>
        <param name="searchPattern">要比對 <paramref name="path" /> 中檔案名稱的搜尋字串。  這個參數可以包含有效常值路徑與萬用 (* 和 ?) 字元的組合，但是不支援規則運算式。</param>
        <param name="searchOption">其中一個列舉值，該值會指定搜尋作業應該只包含目前目錄還是包含所有子目錄。  
  
預設值為 <see cref="F:System.IO.SearchOption.TopDirectoryOnly" />。</param>
        <summary>傳回指定之路徑中符合搜尋模式之檔名的可列舉集合，並選擇性地搜尋子目錄。</summary>
        <returns><paramref name="path" /> 指定的目錄中，符合指定搜尋模式和選項的檔案之完整名稱 (包括路徑) 的可列舉集合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `searchPattern` 可以是常值與萬用字元字元的組合，但它不支援規則運算式。 允許使用下列萬用字元規範`searchPattern`。  
  
|萬用字元規範|符合|  
|------------------------|-------------|  
|\* （星號）|在該位置的零或多個字元。|  
|? （問號）|該位置中的零個或一個字元。|  
  
 非萬用字元的字元是常值字元。 比方說，`searchPattern`字串 」\*t 」 中的所有名稱搜尋`path`結尾字母"t"。 `searchPattern`字串"s\*」 中的所有名稱搜尋`path`開頭為字母"s"。  
  
> [!NOTE]
>  當您使用星號萬用字元，在`searchPattern`這類 「\*.txt 」，在指定的延伸模組中的字元數會影響搜尋，如下所示：  
>   
> -   如果指定的延伸模組是剛好三個字元，則這個方法會傳回具有延伸模組可開始具有指定副檔名的檔案。 例如，"\*.xls"傳回"book.xls 」 和 「 book.xlsx"。  
> -   在其他情況下，這個方法會傳回完全符合指定的延伸模組的檔案。 例如，"\*.ai"會傳回 「 file.ai"，而不是 「 file.aif"。  
>   
>  當您使用問號萬用字元時，則這個方法會傳回符合指定的副檔名的檔案。 例如，假設"file1.txt"和"file1.txtother 」，兩個檔案，在目錄中，搜尋模式的 「 檔案？。txt"會傳回只是第一個檔案，而搜尋模式的 「 檔案\*.txt"會傳回這兩個檔案。  
  
 `searchPattern` 結尾不能兩個句點 ("...") 或包含兩個句點 ("...") 後面接著<xref:System.IO.Path.DirectorySeparatorChar>或<xref:System.IO.Path.AltDirectorySeparatorChar>，也不能包含任何無效的字元。 您可以使用 <xref:System.IO.Path.GetInvalidPathChars%2A> 方法查詢無效字元。  
  
 您可以指定相對路徑的資訊與`path`參數。 相對路徑的資訊會相對於目前工作目錄，您可以使用判斷解譯<xref:System.IO.Directory.GetCurrentDirectory%2A>方法。  
  
 <xref:System.IO.Directory.EnumerateFiles%2A>和<xref:System.IO.Directory.GetFiles%2A>方法的差異，如下所示：當您使用<xref:System.IO.Directory.EnumerateFiles%2A>，您可以開始列舉的名稱集合，則會傳回整個集合之前，當您使用<xref:System.IO.Directory.GetFiles%2A>，您必須等到整個陣列的名稱，才能存取陣列傳回。 因此，當您使用許多檔案和目錄、<xref:System.IO.Directory.EnumerateFiles%2A>可能會更有效率。  
  
 不會快取傳回的集合;每次呼叫<xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A>集合上將會啟動新的列舉型別。  
  
   
  
## Examples  
 下列範例示範如何擷取目錄和其子目錄中的所有文字檔案，並將其移至新的目錄。 不會移動檔案之後，它們不再存在於原始的目錄。  
  
 [!code-csharp[System.IO.Directory#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Directory/CS/class5.cs#13)]
 [!code-vb[System.IO.Directory#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Directory/VB/class5.vb#13)]  
  
 下列範例以遞迴方式列舉所有副檔名為.txt 的檔案讀取的檔案，每一行，並顯示列，如果它包含字串"Microsoft"。  
  
 [!code-csharp[System.IO.Directory.EnumerateFiles#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.directory.enumeratefiles/cs/program.cs#1)]
 [!code-vb[System.IO.Directory.EnumerateFiles#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.directory.enumeratefiles/vb/program.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 為零長度字串、只包含空格或包含無效字元。 您可以使用 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 方法查詢無效字元。  
  
-或- 
 <paramref name="searchPattern" /> 不包含有效模式。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 為 <see langword="null" />。  
  
-或- 
 <paramref name="searchPattern" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="searchOption" /> 不是有效的 <see cref="T:System.IO.SearchOption" /> 值。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> 無效，例如參考到未對應的磁碟機。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="path" /> 為檔案名稱。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱，或兩者合計超出系統定義的長度上限。</exception>
        <exception cref="T:System.Security.SecurityException">呼叫端沒有必要的使用權限。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼叫端沒有必要的使用權限。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="EnumerateFileSystemEntries">
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>傳回符合指定準則之檔案系統項目的可列舉集合。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="EnumerateFileSystemEntries">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;string&gt; EnumerateFileSystemEntries (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;string&gt; EnumerateFileSystemEntries(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.EnumerateFileSystemEntries(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnumerateFileSystemEntries (path As String) As IEnumerable(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ EnumerateFileSystemEntries(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member EnumerateFileSystemEntries : string -&gt; seq&lt;string&gt;" Usage="System.IO.Directory.EnumerateFileSystemEntries path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="path">要搜尋之目錄的相對或絕對路徑。 這個字串不會區分大小寫。</param>
        <summary>傳回指定之路徑中檔案名稱及目錄名稱的可列舉集合。</summary>
        <returns><paramref name="path" /> 所指定目錄中檔案系統項目的可列舉集合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以指定相對路徑的資訊與`path`參數。 相對路徑的資訊會相對於目前工作目錄，您可以使用判斷解譯<xref:System.IO.Directory.GetCurrentDirectory%2A>方法。  
  
 <xref:System.IO.Directory.EnumerateFileSystemEntries%2A>和<xref:System.IO.Directory.GetFileSystemEntries%2A>方法的差異，如下所示：當您使用<xref:System.IO.Directory.EnumerateFileSystemEntries%2A>，您可以開始列舉項目的集合，傳回整個集合之前，當您使用<xref:System.IO.Directory.GetFileSystemEntries%2A>，您必須等到整個陣列的項目，才能存取陣列傳回。 因此，當您使用許多檔案和目錄、<xref:System.IO.Directory.EnumerateFiles%2A>可能會更有效率。  
  
 不會快取傳回的集合;每次呼叫<xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A>集合上將會啟動新的列舉型別。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 為零長度字串、只包含空格或包含無效字元。 您可以使用 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 方法查詢無效字元。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> 無效，例如參考到未對應的磁碟機。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="path" /> 為檔案名稱。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱，或兩者合計超出系統定義的長度上限。</exception>
        <exception cref="T:System.Security.SecurityException">呼叫端沒有必要的使用權限。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼叫端沒有必要的使用權限。</exception>
      </Docs>
    </Member>
    <Member MemberName="EnumerateFileSystemEntries">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;string&gt; EnumerateFileSystemEntries (string path, string searchPattern);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;string&gt; EnumerateFileSystemEntries(string path, string searchPattern) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.EnumerateFileSystemEntries(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnumerateFileSystemEntries (path As String, searchPattern As String) As IEnumerable(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ EnumerateFileSystemEntries(System::String ^ path, System::String ^ searchPattern);" />
      <MemberSignature Language="F#" Value="static member EnumerateFileSystemEntries : string * string -&gt; seq&lt;string&gt;" Usage="System.IO.Directory.EnumerateFileSystemEntries (path, searchPattern)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="searchPattern" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="path">要搜尋之目錄的相對或絕對路徑。 這個字串不會區分大小寫。</param>
        <param name="searchPattern">要比對 <paramref name="path" /> 中檔案系統項目名稱的搜尋字串。  這個參數可以包含有效常值路徑與萬用 (* 和 ?) 字元的組合，但是不支援規則運算式。</param>
        <summary>傳回指定之路徑中符合搜尋模式之檔案名稱及目錄名稱的可列舉集合。</summary>
        <returns><paramref name="path" /> 指定的目錄中，符合指定搜尋模式之檔案系統項目的可列舉集合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `searchPattern` 可以是常值與萬用字元字元的組合，但它不支援規則運算式。 允許使用下列萬用字元規範`searchPattern`。 
  
|萬用字元規範|符合|  
|------------------------|-------------|  
|\* （星號）|在該位置的零或多個字元。|  
|? （問號）|該位置中的零個或一個字元。|  
  
 非萬用字元的字元是常值字元。 比方說，`searchPattern`字串 」\*t 」 中的所有名稱搜尋`path`結尾字母"t"。 `searchPattern`字串"s\*」 中的所有名稱搜尋`path`開頭為字母"s"。  
  
> [!NOTE]
>  當您使用星號萬用字元，在`searchPattern`這類 「\*.txt 」，在指定的延伸模組中的字元數會影響搜尋，如下所示：  
>   
> -   如果指定的延伸模組是剛好三個字元，則這個方法會傳回具有延伸模組可開始具有指定副檔名的檔案。 例如，"\*.xls"傳回"book.xls 」 和 「 book.xlsx"。  
> -   在其他情況下，這個方法會傳回完全符合指定的延伸模組的檔案。 例如，"\*.ai"會傳回 「 file.ai"，而不是 「 file.aif"。  
>   
>  當您使用問號萬用字元時，則這個方法會傳回符合指定的副檔名的檔案。 例如，假設"file1.txt"和"file1.txtother 」，兩個檔案，在目錄中，搜尋模式的 「 檔案？。txt"會傳回只是第一個檔案，而搜尋模式的 「 檔案\*.txt"會傳回這兩個檔案。  
  
 `searchPattern` 結尾不能兩個句點 ("...") 或包含兩個句點 ("...") 後面接著<xref:System.IO.Path.DirectorySeparatorChar>或<xref:System.IO.Path.AltDirectorySeparatorChar>，也不能包含任何無效的字元。 您可以使用 <xref:System.IO.Path.GetInvalidPathChars%2A> 方法查詢無效字元。  
  
 您可以指定相對路徑的資訊與`path`參數。 相對路徑的資訊會相對於目前工作目錄，您可以使用判斷解譯<xref:System.IO.Directory.GetCurrentDirectory%2A>方法。  
  
 <xref:System.IO.Directory.EnumerateFileSystemEntries%2A>和<xref:System.IO.Directory.GetFileSystemEntries%2A>方法的差異，如下所示：當您使用<xref:System.IO.Directory.EnumerateFileSystemEntries%2A>，您可以開始列舉項目的集合，傳回整個集合之前，當您使用<xref:System.IO.Directory.GetFileSystemEntries%2A>，您必須等到整個陣列的項目，才能存取陣列傳回。 因此，當您使用許多檔案和目錄、<xref:System.IO.Directory.EnumerateFiles%2A>可能會更有效率。  
  
 不會快取傳回的集合;每次呼叫<xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A>集合上將會啟動新的列舉型別。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 為零長度字串、只包含空格或包含無效字元。 您可以使用 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 方法查詢無效字元。  
  
-或- 
 <paramref name="searchPattern" /> 不包含有效模式。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 為 <see langword="null" />。  
  
-或- 
 <paramref name="searchPattern" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> 無效，例如參考到未對應的磁碟機。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="path" /> 為檔案名稱。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱，或兩者合計超出系統定義的長度上限。</exception>
        <exception cref="T:System.Security.SecurityException">呼叫端沒有必要的使用權限。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼叫端沒有必要的使用權限。</exception>
      </Docs>
    </Member>
    <Member MemberName="EnumerateFileSystemEntries">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;string&gt; EnumerateFileSystemEntries (string path, string searchPattern, System.IO.EnumerationOptions enumerationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;string&gt; EnumerateFileSystemEntries(string path, string searchPattern, class System.IO.EnumerationOptions enumerationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.EnumerateFileSystemEntries(System.String,System.String,System.IO.EnumerationOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ EnumerateFileSystemEntries(System::String ^ path, System::String ^ searchPattern, System::IO::EnumerationOptions ^ enumerationOptions);" />
      <MemberSignature Language="F#" Value="static member EnumerateFileSystemEntries : string * string * System.IO.EnumerationOptions -&gt; seq&lt;string&gt;" Usage="System.IO.Directory.EnumerateFileSystemEntries (path, searchPattern, enumerationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="searchPattern" Type="System.String" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="enumerationOptions" Type="System.IO.EnumerationOptions" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <param name="searchPattern">To be added.</param>
        <param name="enumerationOptions">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateFileSystemEntries">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;string&gt; EnumerateFileSystemEntries (string path, string searchPattern, System.IO.SearchOption searchOption);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;string&gt; EnumerateFileSystemEntries(string path, string searchPattern, valuetype System.IO.SearchOption searchOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.EnumerateFileSystemEntries(System.String,System.String,System.IO.SearchOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ EnumerateFileSystemEntries(System::String ^ path, System::String ^ searchPattern, System::IO::SearchOption searchOption);" />
      <MemberSignature Language="F#" Value="static member EnumerateFileSystemEntries : string * string * System.IO.SearchOption -&gt; seq&lt;string&gt;" Usage="System.IO.Directory.EnumerateFileSystemEntries (path, searchPattern, searchOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="searchPattern" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="searchOption" Type="System.IO.SearchOption" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="path">要搜尋之目錄的相對或絕對路徑。 這個字串不會區分大小寫。</param>
        <param name="searchPattern">要比對 <paramref name="path" /> 中檔案系統項目的搜尋字串。  這個參數可以包含有效常值路徑與萬用 (* 和 ?) 字元的組合，但是不支援規則運算式。</param>
        <param name="searchOption">其中一個列舉值，該值會指定搜尋作業應該只包含目前目錄還是包含所有子目錄。  
  
預設值為 <see cref="F:System.IO.SearchOption.TopDirectoryOnly" />。</param>
        <summary>傳回指定之路徑中符合搜尋模式之檔名和目錄名稱的可列舉集合，並選擇性地搜尋子目錄。</summary>
        <returns><paramref name="path" /> 指定的目錄中，符合指定搜尋模式和選項之檔案系統項目的可列舉集合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `searchPattern` 可以是常值與萬用字元字元的組合，但它不支援規則運算式。 允許使用下列萬用字元規範`searchPattern`。  
  
|萬用字元規範|符合|  
|------------------------|-------------|  
|\* （星號）|在該位置的零或多個字元。|  
|? （問號）|該位置中的零個或一個字元。|  
  
 非萬用字元的字元是常值字元。 比方說，`searchPattern`字串 」\*t 」 中的所有名稱搜尋`path`結尾字母"t"。 `searchPattern`字串"s\*」 中的所有名稱搜尋`path`開頭為字母"s"。  
  
> [!NOTE]
>  當您使用星號萬用字元，在`searchPattern`這類 「\*.txt 」，在指定的延伸模組中的字元數會影響搜尋，如下所示：  
>   
> -   如果指定的延伸模組是剛好三個字元，則這個方法會傳回具有延伸模組可開始具有指定副檔名的檔案。 例如，"\*.xls"傳回"book.xls 」 和 「 book.xlsx"。  
> -   在其他情況下，這個方法會傳回完全符合指定的延伸模組的檔案。 例如，"\*.ai"會傳回 「 file.ai"，而不是 「 file.aif"。  
>   
>  當您使用問號萬用字元時，則這個方法會傳回符合指定的副檔名的檔案。 例如，假設"file1.txt"和"file1.txtother 」，兩個檔案，在目錄中，搜尋模式的 「 檔案？。txt"會傳回只是第一個檔案，而搜尋模式的 「 檔案\*.txt"會傳回這兩個檔案。  
  
 `searchPattern` 結尾不能兩個句點 ("...") 或包含兩個句點 ("...") 後面接著<xref:System.IO.Path.DirectorySeparatorChar>或<xref:System.IO.Path.AltDirectorySeparatorChar>，也不能包含任何無效的字元。 您可以使用 <xref:System.IO.Path.GetInvalidPathChars%2A> 方法查詢無效字元。  
  
 您可以指定相對路徑的資訊與`path`參數。 相對路徑的資訊會相對於目前工作目錄，您可以使用判斷解譯<xref:System.IO.Directory.GetCurrentDirectory%2A>方法。  
  
 <xref:System.IO.Directory.EnumerateFileSystemEntries%2A>和<xref:System.IO.Directory.GetFileSystemEntries%2A>方法的差異，如下所示：當您使用<xref:System.IO.Directory.EnumerateFileSystemEntries%2A>，您可以開始列舉項目的集合，傳回整個集合之前，當您使用<xref:System.IO.Directory.GetFileSystemEntries%2A>，您必須等到整個陣列的項目，才能存取陣列傳回。 因此，當您使用許多檔案和目錄、<xref:System.IO.Directory.EnumerateFiles%2A>可能會更有效率。  
  
 不會快取傳回的集合;每次呼叫<xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A>集合上將會啟動新的列舉型別。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 為零長度字串、只包含空格或包含無效字元。 您可以使用 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 方法查詢無效字元。  
  
-或- 
 <paramref name="searchPattern" /> 不包含有效模式。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 為 <see langword="null" />。  
  
-或- 
 <paramref name="searchPattern" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="searchOption" /> 不是有效的 <see cref="T:System.IO.SearchOption" /> 值。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> 無效，例如參考到未對應的磁碟機。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="path" /> 為檔案名稱。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱，或兩者合計超出系統定義的長度上限。</exception>
        <exception cref="T:System.Security.SecurityException">呼叫端沒有必要的使用權限。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼叫端沒有必要的使用權限。</exception>
      </Docs>
    </Member>
    <Member MemberName="Exists">
      <MemberSignature Language="C#" Value="public static bool Exists (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Exists(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.Exists(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Exists (path As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Exists(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member Exists : string -&gt; bool" Usage="System.IO.Directory.Exists path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">要測試的路徑。</param>
        <summary>判斷指定路徑是否參考磁碟上的現有目錄。</summary>
        <returns>如果 <paramref name="path" /> 會參考現有的目錄，則為 <see langword="true" />；如果目錄不存在，或嘗試判斷指定的目錄是否存在時發生錯誤，則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `path`參數可以指定相對或絕對路徑資訊。 相對於目前工作目錄，會解譯相對路徑的資訊。  
  
 從結尾會移除尾端空格`path`再檢查目錄是否存在的參數。  
  
 `path`參數不區分大小寫。  
  
 如果您不需要在目錄中，最小唯讀權限<xref:System.IO.Directory.Exists%2A>方法會傳回`false`。  
  
 <xref:System.IO.Directory.Exists%2A>方法會傳回`false`如果嘗試判斷指定的檔案是否存在時發生任何錯誤。 可能發生這種情況下，會引發例外狀況，例如傳遞檔名無效的字元或太多字元、 失敗或遺失的磁碟，或如果呼叫端沒有讀取檔案的權限。  
  
   
  
## Examples  
 下列範例會在命令列上的檔案或目錄名稱的陣列，決定何種名稱，並適當地加以處理。  
  
 [!code-cpp[Recursive file finder#2](~/samples/snippets/cpp/VS_Snippets_CLR/Recursive file finder/CPP/directorylisting.cpp#2)]
 [!code-csharp[Recursive file finder#2](~/samples/snippets/csharp/VS_Snippets_CLR/Recursive file finder/CS/directorylisting.cs#2)]
 [!code-vb[Recursive file finder#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Recursive file finder/VB/directorylisting.vb#2)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">用於讀取檔案。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></permission>
        <altmember cref="T:System.IO.DirectoryInfo" />
        <related type="Article" href="~/docs/standard/io/index.md">檔案和資料流 I/O</related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md">如何：從檔案讀取文字</related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md">如何：將文字寫入檔案</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAccessControl">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>傳回目錄的 Windows 存取控制清單 (ACL)。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAccessControl">
      <MemberSignature Language="C#" Value="public static System.Security.AccessControl.DirectorySecurity GetAccessControl (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.AccessControl.DirectorySecurity GetAccessControl(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetAccessControl(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetAccessControl (path As String) As DirectorySecurity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::AccessControl::DirectorySecurity ^ GetAccessControl(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member GetAccessControl : string -&gt; System.Security.AccessControl.DirectorySecurity" Usage="System.IO.Directory.GetAccessControl path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.DirectorySecurity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="path">目錄的路徑，內含 <see cref="T:System.Security.AccessControl.DirectorySecurity" /> 物件，其描述了檔案的存取控制清單 (ACL) 資訊。</param>
        <summary>取得 <see cref="T:System.Security.AccessControl.DirectorySecurity" /> 物件，該物件會封裝指定目錄的存取控制清單 (ACL) 項目。</summary>
        <returns>封裝 <paramref name="path" /> 參數所描述之檔案存取控制規則的物件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.IO.Directory.GetAccessControl%2A>方法，以擷取目錄的存取控制清單 (ACL) 項目。  
  
 ACL 描述個人及/或群組，或沒有，在指定的檔案或目錄上的特定動作的權限。 如需詳細資訊，請參閱[如何：新增或移除存取控制清單項目](~/docs/standard/io/how-to-add-or-remove-access-control-list-entries.md)。  
  
 在 NTFS 環境中，<xref:System.Security.AccessControl.FileSystemRights.ReadAttributes>並<xref:System.Security.AccessControl.FileSystemRights.ReadExtendedAttributes>如果使用者已對使用者授與<xref:System.Security.AccessControl.FileSystemRights.ListDirectory>父資料夾上的權限。 若要拒絕<xref:System.Security.AccessControl.FileSystemRights.ReadAttributes>並<xref:System.Security.AccessControl.FileSystemRights.ReadExtendedAttributes>，拒絕<xref:System.Security.AccessControl.FileSystemRights.ListDirectory>父目錄上。  
  
   
  
## Examples  
 下列範例會使用<xref:System.IO.Directory.GetAccessControl%2A>而<xref:System.IO.Directory.SetAccessControl%2A>方法以新增存取控制清單 (ACL) 項目，並從目錄移除的 ACL 項目。  您必須提供有效的使用者或群組帳戶，才能執行這個範例。  
  
 [!code-cpp[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/samples/snippets/cpp/VS_Snippets_CLR/IO.DiretoryInfo.GetAccessControl-SetAccessControl/cpp/sample.cpp#1)]
 [!code-csharp[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/samples/snippets/csharp/VS_Snippets_CLR/IO.DiretoryInfo.GetAccessControl-SetAccessControl/CS/sample.cs#1)]
 [!code-vb[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IO.DiretoryInfo.GetAccessControl-SetAccessControl/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.IO.IOException">開啟目錄時發生 I/O 錯誤。</exception>
        <exception cref="T:System.PlatformNotSupportedException">目前的作業系統不是 Windows 2000 或更新版本。</exception>
        <exception cref="T:System.SystemException">發生系統層級錯誤，例如找不到目錄。 特定的例外狀況可能為 <see cref="T:System.SystemException" /> 的子類別。</exception>
        <exception cref="T:System.UnauthorizedAccessException"><paramref name="path" /> 參數指定了唯讀的目錄。  
  
-或- 
這個作業在目前平台不受支援。  
  
-或- 
呼叫端沒有必要的使用權限。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">若要列舉目錄的存取控制清單 (ACL) 的權限。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.NoAccess" /> ， <see cref="F:System.Security.AccessControl.AccessControlActions.View" />  
  
安全性動作：需求。</permission>
      </Docs>
    </Member>
    <Member MemberName="GetAccessControl">
      <MemberSignature Language="C#" Value="public static System.Security.AccessControl.DirectorySecurity GetAccessControl (string path, System.Security.AccessControl.AccessControlSections includeSections);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.AccessControl.DirectorySecurity GetAccessControl(string path, valuetype System.Security.AccessControl.AccessControlSections includeSections) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetAccessControl(System.String,System.Security.AccessControl.AccessControlSections)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetAccessControl (path As String, includeSections As AccessControlSections) As DirectorySecurity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::AccessControl::DirectorySecurity ^ GetAccessControl(System::String ^ path, System::Security::AccessControl::AccessControlSections includeSections);" />
      <MemberSignature Language="F#" Value="static member GetAccessControl : string * System.Security.AccessControl.AccessControlSections -&gt; System.Security.AccessControl.DirectorySecurity" Usage="System.IO.Directory.GetAccessControl (path, includeSections)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.DirectorySecurity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="includeSections" Type="System.Security.AccessControl.AccessControlSections" Index="1" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="path">目錄的路徑，內含 <see cref="T:System.Security.AccessControl.DirectorySecurity" /> 物件，其描述了檔案的存取控制清單 (ACL) 資訊。</param>
        <param name="includeSections">其中一個 <see cref="T:System.Security.AccessControl.AccessControlSections" /> 值，指定要接收的存取控制清單 (ACL) 資訊之類型。</param>
        <summary>取得 <see cref="T:System.Security.AccessControl.DirectorySecurity" /> 物件，該物件會為指定的目錄封裝指定類型的存取控制清單 (ACL) 項目。</summary>
        <returns>封裝 <paramref name="path" /> 參數所描述之檔案存取控制規則的物件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.IO.Directory.GetAccessControl%2A>方法，以擷取目錄的存取控制清單 (ACL) 項目。  
  
 ACL 描述個人及/或群組，或沒有，在指定的檔案或目錄上的特定動作的權限。 如需詳細資訊，請參閱[如何：新增或移除存取控制清單項目](~/docs/standard/io/how-to-add-or-remove-access-control-list-entries.md)。  
  
 在 NTFS 環境中，<xref:System.Security.AccessControl.FileSystemRights.ReadAttributes>並<xref:System.Security.AccessControl.FileSystemRights.ReadExtendedAttributes>如果使用者已對使用者授與<xref:System.Security.AccessControl.FileSystemRights.ListDirectory>父資料夾上的權限。 若要拒絕<xref:System.Security.AccessControl.FileSystemRights.ReadAttributes>並<xref:System.Security.AccessControl.FileSystemRights.ReadExtendedAttributes>，拒絕<xref:System.Security.AccessControl.FileSystemRights.ListDirectory>父目錄上。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.IO.IOException">開啟目錄時發生 I/O 錯誤。</exception>
        <exception cref="T:System.PlatformNotSupportedException">目前的作業系統不是 Windows 2000 或更新版本。</exception>
        <exception cref="T:System.SystemException">發生系統層級錯誤，例如找不到目錄。 特定的例外狀況可能為 <see cref="T:System.SystemException" /> 的子類別。</exception>
        <exception cref="T:System.UnauthorizedAccessException"><paramref name="path" /> 參數指定了唯讀的目錄。  
  
-或- 
這個作業在目前平台不受支援。  
  
-或- 
呼叫端沒有必要的使用權限。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">若要列舉目錄的存取控制清單 (ACL) 的權限。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.NoAccess" /> ， <see cref="F:System.Security.AccessControl.AccessControlActions.View" />  
  
安全性動作：需求。</permission>
      </Docs>
    </Member>
    <Member MemberName="GetCreationTime">
      <MemberSignature Language="C#" Value="public static DateTime GetCreationTime (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime GetCreationTime(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetCreationTime(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCreationTime (path As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime GetCreationTime(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member GetCreationTime : string -&gt; DateTime" Usage="System.IO.Directory.GetCreationTime path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">目錄的路徑。</param>
        <summary>取得目錄的建立日期和時間。</summary>
        <returns>結構，設定為指定之目錄的建立日期和時間。 這個值以本地時間表示。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  這個方法可能傳回不正確的值，因為它會使用其值可能不會持續更新作業系統的原生函式。  
  
 這個方法相當於<xref:System.IO.File.GetCreationTime%2A?displayProperty=nameWithType>。  
  
 如果目錄中所述`path`參數不存在，這個方法會傳回 12:00，年 1 月 1 西元 1601年日午夜 (C.E.)Coordinated Universal Time (UTC) 調整為當地時間。  
  
 `path`參數可以指定相對或絕對路徑資訊。 相對於目前工作目錄，會解譯相對路徑的資訊。 若要取得目前工作目錄，請參閱<xref:System.IO.Directory.GetCurrentDirectory%2A>。  
  
 `path`參數不區分大小寫。  
  
 如需一般 I/O 工作的清單，請參閱 <<c0> [ 一般 I/O 工作](~/docs/standard/io/common-i-o-tasks.md)。  
  
   
  
## Examples  
 下列範例會取得指定之目錄的建立時間。  
  
 [!code-cpp[Dir_GetCreation#1](~/samples/snippets/cpp/VS_Snippets_CLR/Dir_GetCreation/CPP/dir_getcreation.cpp#1)]
 [!code-csharp[Dir_GetCreation#1](~/samples/snippets/csharp/VS_Snippets_CLR/Dir_GetCreation/CS/dir_getcreation.cs#1)]
 [!code-vb[Dir_GetCreation#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Dir_GetCreation/VB/dir_getcreation.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">呼叫端沒有必要的使用權限。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 為零長度字串、只包含空格，或包含一或多個無效字元。 您可以使用 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 方法查詢無效字元。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱，或兩者都超出系統定義的長度上限。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">讀取指定的檔案或目錄。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></permission>
        <altmember cref="T:System.IO.FileSystemWatcher" />
        <related type="Article" href="~/docs/standard/io/index.md">檔案和資料流 I/O</related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md">如何：從檔案讀取文字</related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md">如何：將文字寫入檔案</related>
      </Docs>
    </Member>
    <Member MemberName="GetCreationTimeUtc">
      <MemberSignature Language="C#" Value="public static DateTime GetCreationTimeUtc (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime GetCreationTimeUtc(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetCreationTimeUtc(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCreationTimeUtc (path As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime GetCreationTimeUtc(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member GetCreationTimeUtc : string -&gt; DateTime" Usage="System.IO.Directory.GetCreationTimeUtc path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">目錄的路徑。</param>
        <summary>取得目錄的建立日期和時間，格式為國際標準時間 (UTC)。</summary>
        <returns>結構，設定為指定之目錄的建立日期和時間。 這個值以 UTC 時間表示。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  這個方法可能傳回不正確的值，因為它會使用其值可能不會持續更新作業系統的原生函式。  
  
 如果目錄中所述`path`參數不存在，這個方法會傳回 12:00，年 1 月 1 西元 1601年日午夜 (C.E.)國際標準時間 (UTC)。  
  
 您可以使用這個方法，取得基礎上 Coordinated Universal Time (UTC) 的目錄的建立時間。  
  
   
  
## Examples  
 使用 Coordinated Universal Time (UTC) 的輸出時，下列範例會說明在輸出中的差異。  
  
 [!code-cpp[System.IO.UTCExample#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.UTCExample/CPP/example.cpp#1)]
 [!code-csharp[System.IO.UTCExample#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.UTCExample/CS/example.cs#1)]
 [!code-vb[System.IO.UTCExample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.UTCExample/VB/example.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">呼叫端沒有必要的使用權限。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 為零長度字串、只包含空格，或包含一或多個無效字元。 您可以使用 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 方法查詢無效字元。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱，或兩者都超出系統定義的長度上限。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">讀取指定的檔案或目錄。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></permission>
        <altmember cref="T:System.IO.FileSystemWatcher" />
        <related type="Article" href="~/docs/standard/io/index.md">檔案和資料流 I/O</related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md">如何：從檔案讀取文字</related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md">如何：將文字寫入檔案</related>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentDirectory">
      <MemberSignature Language="C#" Value="public static string GetCurrentDirectory ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetCurrentDirectory() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetCurrentDirectory" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCurrentDirectory () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetCurrentDirectory();" />
      <MemberSignature Language="F#" Value="static member GetCurrentDirectory : unit -&gt; string" Usage="System.IO.Directory.GetCurrentDirectory " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>取得應用程式的目前工作目錄。</summary>
        <returns>包含目前工作目錄完整路徑且未以反斜線 (\\) 結尾的字串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 目前的目錄是不同於原始的目錄，也就是從中啟動程序。  
  
 如需一般 I/O 工作的清單，請參閱 <<c0> [ 一般 I/O 工作](~/docs/standard/io/common-i-o-tasks.md)。  
  
   
  
## Examples  
 下列範例示範如何使用 `GetCurrentDirectory` 方法。  
  
 [!code-cpp[Dir_GetCurDir#1](~/samples/snippets/cpp/VS_Snippets_CLR/Dir_GetCurDir/CPP/dir_getcurdir.cpp#1)]
 [!code-csharp[Dir_GetCurDir#1](~/samples/snippets/csharp/VS_Snippets_CLR/Dir_GetCurDir/CS/dir_getcurdir.cs#1)]
 [!code-vb[Dir_GetCurDir#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Dir_GetCurDir/VB/dir_getcurdir.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">呼叫端沒有必要的使用權限。</exception>
        <exception cref="T:System.NotSupportedException">作業系統是 Windows CE，它沒有當前的目錄功能。  
  
.NET Compact Framework 提供方法，但目前不支援。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">目前的目錄路徑資訊存取。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /></permission>
        <related type="Article" href="~/docs/standard/io/index.md">檔案和資料流 I/O</related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md">如何：從檔案讀取文字</related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md">如何：將文字寫入檔案</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetDirectories">
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>傳回符合指定準則之子目錄的名稱。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDirectories">
      <MemberSignature Language="C#" Value="public static string[] GetDirectories (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetDirectories(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetDirectories(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDirectories (path As String) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetDirectories(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member GetDirectories : string -&gt; string[]" Usage="System.IO.Directory.GetDirectories path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">要搜尋之目錄的相對或絕對路徑。 這個字串不會區分大小寫。</param>
        <summary>傳回指定之目錄中的子目錄名稱 (包括其路徑)。</summary>
        <returns>指定之路徑中的子目錄完整名稱 (包括路徑) 陣列，如果找不到任何目錄則為空陣列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法相當於<xref:System.IO.Directory.GetDirectories%28System.String%2CSystem.String%29>開頭是星號 (\*) 指定為搜尋模式，所以它會傳回所有子目錄。如果您要搜尋的子目錄，請使用<xref:System.IO.Directory.GetDirectories%28System.String%2CSystem.String%2CSystem.IO.SearchOption%29>方法，可讓您指定具有子目錄搜尋`searchOption`參數。  
  
 <xref:System.IO.Directory.EnumerateDirectories%2A>和<xref:System.IO.Directory.GetDirectories%2A>方法的差異，如下所示：當您使用<xref:System.IO.Directory.EnumerateDirectories%2A>，您可以開始列舉的名稱集合，則會傳回整個集合之前，當您使用<xref:System.IO.Directory.GetDirectories%2A>，您必須等到整個陣列的名稱，才能存取陣列傳回。 因此，當您使用許多檔案和目錄、<xref:System.IO.Directory.EnumerateDirectories%2A>可能會更有效率。  
  
 `path`參數可以指定相對或絕對路徑資訊。 相對於目前工作目錄，會解譯相對路徑的資訊。 若要取得目前工作目錄，請參閱<xref:System.IO.Directory.GetCurrentDirectory%2A>。  
  
 這個方法所傳回的名稱前面會加上提供的目錄資訊`path`。  
  
 `path`參數不區分大小寫。  
  
 如需一般 I/O 工作的清單，請參閱 <<c0> [ 一般 I/O 工作](~/docs/standard/io/common-i-o-tasks.md)。  
  
   
  
## Examples  
 下列範例會在命令列上的檔案或目錄名稱的陣列，決定何種名稱，並適當地加以處理。  
  
 [!code-cpp[Recursive file finder#1](~/samples/snippets/cpp/VS_Snippets_CLR/Recursive file finder/CPP/directorylisting.cpp#1)]
 [!code-csharp[Recursive file finder#1](~/samples/snippets/csharp/VS_Snippets_CLR/Recursive file finder/CS/directorylisting.cs#1)]
 [!code-vb[Recursive file finder#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Recursive file finder/VB/directorylisting.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">呼叫端沒有必要的使用權限。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 為零長度字串、只包含空格，或包含一或多個無效字元。 您可以使用 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 方法查詢無效字元。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱，或兩者都超出系統定義的長度上限。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="path" /> 為檔案名稱。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定的路徑無效 (例如，它位於未對應的磁碟機上)。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">用來存取目前的目錄路徑資訊。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /></permission>
        <altmember cref="M:System.IO.Directory.GetCurrentDirectory" />
        <related type="Article" href="~/docs/standard/io/index.md">檔案和資料流 I/O</related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md">如何：從檔案讀取文字</related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md">如何：將文字寫入檔案</related>
      </Docs>
    </Member>
    <Member MemberName="GetDirectories">
      <MemberSignature Language="C#" Value="public static string[] GetDirectories (string path, string searchPattern);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetDirectories(string path, string searchPattern) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetDirectories(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDirectories (path As String, searchPattern As String) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetDirectories(System::String ^ path, System::String ^ searchPattern);" />
      <MemberSignature Language="F#" Value="static member GetDirectories : string * string -&gt; string[]" Usage="System.IO.Directory.GetDirectories (path, searchPattern)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="searchPattern" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">要搜尋之目錄的相對或絕對路徑。 這個字串不會區分大小寫。</param>
        <param name="searchPattern">要比對 <paramref name="path" /> 中子目錄名稱的搜尋字串。 這個參數可以包含有效常值與萬用字元的組合，但是不支援規則運算式。</param>
        <summary>傳回指定目錄中符合指定搜尋模式的子目錄名稱 (包括檔案的路徑)。</summary>
        <returns>指定目錄中，符合搜尋模式的子目錄完整名稱 (包括路徑) 陣列，如果找不到任何目錄則為空陣列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會傳回指定目錄直接下所有符合指定的搜尋模式的子目錄。 如果指定的目錄有任何子目錄中，或任何子目錄符合`searchPattern`參數，這個方法會傳回空陣列。 只有最上層目錄中搜尋。 如果您想要搜尋子目錄，使用<xref:System.IO.Directory.GetDirectories%28System.String%2CSystem.String%2CSystem.IO.SearchOption%29>方法並指定<xref:System.IO.SearchOption.AllDirectories>在`searchOption`參數。  
  
 `searchPattern` 可以是常值與萬用字元字元的組合，但它不支援規則運算式。 允許使用下列萬用字元規範`searchPattern`。  
  
|萬用字元規範|符合|  
|------------------------|-------------|  
|\* （星號）|在該位置的零或多個字元。|  
|? （問號）|該位置中的零個或一個字元。|  
  
 非萬用字元的字元是常值字元。 比方說，`searchPattern`字串 」\*t 」 中的所有名稱搜尋`path`結尾字母"t"。 `searchPattern`字串"s\*」 中的所有名稱搜尋`path`開頭為字母"s"。  
  
 `searchPattern` 結尾不能兩個句點 ("...") 或包含兩個句點 ("...") 後面接著<xref:System.IO.Path.DirectorySeparatorChar>或<xref:System.IO.Path.AltDirectorySeparatorChar>，也不能包含任何無效的字元。 您可以使用 <xref:System.IO.Path.GetInvalidPathChars%2A> 方法查詢無效字元。  
  
 `path`參數可以指定相對或絕對路徑資訊，且不區分大小寫。  相對於目前工作目錄，會解譯相對路徑的資訊。 若要取得目前工作目錄，請參閱<xref:System.IO.Directory.GetCurrentDirectory%2A>。  
  
 <xref:System.IO.Directory.EnumerateDirectories%2A>和<xref:System.IO.Directory.GetDirectories%2A>方法的差異，如下所示：當您使用<xref:System.IO.Directory.EnumerateDirectories%2A>，您可以開始列舉的名稱集合，則會傳回整個集合之前，當您使用<xref:System.IO.Directory.GetDirectories%2A>，您必須等到整個陣列的名稱，才能存取陣列傳回。 因此，當您使用許多檔案和目錄、<xref:System.IO.Directory.EnumerateDirectories%2A>可能會更有效率。  
  
 如需一般 I/O 工作的清單，請參閱 <<c0> [ 一般 I/O 工作](~/docs/standard/io/common-i-o-tasks.md)。  
  
   
  
## Examples  
 下列範例會計算指定字母開頭的目錄路徑中的數目。  
  
 [!code-cpp[Dir_GetDirs2#1](~/samples/snippets/cpp/VS_Snippets_CLR/Dir_GetDirs2/CPP/dir_getdirs2.cpp#1)]
 [!code-csharp[Dir_GetDirs2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Dir_GetDirs2/CS/dir_getdirs2.cs#1)]
 [!code-vb[Dir_GetDirs2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Dir_GetDirs2/VB/dir_getdirs2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">呼叫端沒有必要的使用權限。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 為零長度字串、只包含空格，或包含一或多個無效字元。 您可以使用 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 查詢無效字元。  
  
-或- 
 <paramref name="searchPattern" /> 不包含有效模式。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 或 <paramref name="searchPattern" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱，或兩者都超出系統定義的長度上限。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="path" /> 為檔案名稱。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定的路徑無效 (例如，它位於未對應的磁碟機上)。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">目前的目錄路徑資訊存取。 關聯的列舉型別：<see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />。</permission>
        <altmember cref="M:System.IO.Directory.GetCurrentDirectory" />
        <related type="Article" href="~/docs/standard/io/index.md">檔案和資料流 I/O</related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md">如何：從檔案讀取文字</related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md">如何：將文字寫入檔案</related>
      </Docs>
    </Member>
    <Member MemberName="GetDirectories">
      <MemberSignature Language="C#" Value="public static string[] GetDirectories (string path, string searchPattern, System.IO.EnumerationOptions enumerationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetDirectories(string path, string searchPattern, class System.IO.EnumerationOptions enumerationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetDirectories(System.String,System.String,System.IO.EnumerationOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetDirectories(System::String ^ path, System::String ^ searchPattern, System::IO::EnumerationOptions ^ enumerationOptions);" />
      <MemberSignature Language="F#" Value="static member GetDirectories : string * string * System.IO.EnumerationOptions -&gt; string[]" Usage="System.IO.Directory.GetDirectories (path, searchPattern, enumerationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="searchPattern" Type="System.String" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="enumerationOptions" Type="System.IO.EnumerationOptions" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <param name="searchPattern">To be added.</param>
        <param name="enumerationOptions">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDirectories">
      <MemberSignature Language="C#" Value="public static string[] GetDirectories (string path, string searchPattern, System.IO.SearchOption searchOption);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetDirectories(string path, string searchPattern, valuetype System.IO.SearchOption searchOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetDirectories(System.String,System.String,System.IO.SearchOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetDirectories(System::String ^ path, System::String ^ searchPattern, System::IO::SearchOption searchOption);" />
      <MemberSignature Language="F#" Value="static member GetDirectories : string * string * System.IO.SearchOption -&gt; string[]" Usage="System.IO.Directory.GetDirectories (path, searchPattern, searchOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="searchPattern" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="searchOption" Type="System.IO.SearchOption" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="path">要搜尋之目錄的相對或絕對路徑。 這個字串不會區分大小寫。</param>
        <param name="searchPattern">要比對 <paramref name="path" /> 中子目錄名稱的搜尋字串。 這個參數可以包含有效常值與萬用字元的組合，但是不支援規則運算式。</param>
        <param name="searchOption">其中一個列舉值，這個值會指定搜尋作業應該包含所有子目錄或只包含目前目錄。</param>
        <summary>傳回指定目錄中符合指定搜尋模式之子目錄 (包含其路徑) 的名稱，並且選擇性地搜尋子目錄。</summary>
        <returns>符合指定之準則的子目錄完整名稱 (包括路徑) 陣列，如果找不到任何目錄則為空陣列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `path`參數可以指定相對或絕對路徑資訊，且不區分大小寫。 相對於目前工作目錄，會解譯相對路徑的資訊。 若要取得目前工作目錄，請參閱<xref:System.IO.Directory.GetCurrentDirectory%2A>。  
  
 `searchPattern` 可以是常值與萬用字元字元的組合，但它不支援規則運算式。 允許使用下列萬用字元規範`searchPattern`。  
  
|萬用字元規範|符合|  
|------------------------|-------------|  
|\* （星號）|在該位置的零或多個字元。|  
|? （問號）|該位置中的零個或一個字元。|  
  
 非萬用字元的字元是常值字元。 比方說，`searchPattern`字串 」\*t 」 中的所有名稱搜尋`path`結尾字母"t"。 `searchPattern`字串"s\*」 中的所有名稱搜尋`path`開頭為字母"s"。  
  
 `searchPattern` 結尾不能兩個句點 ("...") 或包含兩個句點 ("...") 後面接著<xref:System.IO.Path.DirectorySeparatorChar>或<xref:System.IO.Path.AltDirectorySeparatorChar>，也不能包含任何無效的字元。 您可以使用 <xref:System.IO.Path.GetInvalidPathChars%2A> 方法查詢無效字元。  
  
 <xref:System.IO.Directory.EnumerateDirectories%2A>和<xref:System.IO.Directory.GetDirectories%2A>方法的差異，如下所示：當您使用<xref:System.IO.Directory.EnumerateDirectories%2A>，您可以開始列舉的名稱集合，則會傳回整個集合之前，當您使用<xref:System.IO.Directory.GetDirectories%2A>，您必須等到整個陣列的名稱，才能存取陣列傳回。 因此，當您使用許多檔案和目錄、<xref:System.IO.Directory.EnumerateDirectories%2A>可能會更有效率。  
  
 如需一般 I/O 工作的清單，請參閱 <<c0> [ 一般 I/O 工作](~/docs/standard/io/common-i-o-tasks.md)。  
  
   
  
## Examples  
 下列範例會計算指定的路徑中的字母為開頭的目錄數目。 只有最上層目錄中搜尋。  
  
 [!code-csharp[Dir_GetDirs2#2](~/samples/snippets/csharp/VS_Snippets_CLR/Dir_GetDirs2/CS/dir_getdirs3.cs#2)]
 [!code-vb[Dir_GetDirs2#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Dir_GetDirs2/VB/dir_getdirs3.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 為零長度字串、只包含空格，或包含一或多個無效字元。 您可以使用 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 方法查詢無效字元。  
  
-或- 
 <paramref name="searchPattern" /> 不包含有效模式。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 或 <paramref name="searchPattern" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="searchOption" /> 不是有效的 <see cref="T:System.IO.SearchOption" /> 值。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼叫端沒有必要的使用權限。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱，或兩者都超出系統定義的長度上限。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="path" /> 為檔案名稱。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定的路徑無效 (例如，它位於未對應的磁碟機上)。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">目前的目錄路徑資訊存取。 關聯的列舉型別：<see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />。</permission>
        <altmember cref="M:System.IO.Directory.GetCurrentDirectory" />
        <related type="Article" href="~/docs/standard/io/index.md">檔案和資料流 I/O</related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md">如何：從檔案讀取文字</related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md">如何：將文字寫入檔案</related>
      </Docs>
    </Member>
    <Member MemberName="GetDirectoryRoot">
      <MemberSignature Language="C#" Value="public static string GetDirectoryRoot (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetDirectoryRoot(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetDirectoryRoot(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDirectoryRoot (path As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetDirectoryRoot(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member GetDirectoryRoot : string -&gt; string" Usage="System.IO.Directory.GetDirectoryRoot path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">檔案或目錄的路徑。</param>
        <summary>傳回指定路徑的磁碟區資訊、根目錄資訊或兩者。</summary>
        <returns>含有指定路徑的磁碟區資訊、根目錄資訊或兩者的字串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會取得的完整的路徑名稱`path`、 所傳回<xref:System.IO.Path.GetFullPath%2A>，並傳回根目錄的目錄資訊。 指定的路徑不需要存在。  
  
 `path`參數可以指定相對或絕對路徑資訊。 相對於目前工作目錄，會解譯相對路徑的資訊。 若要取得目前工作目錄，請參閱<xref:System.IO.Directory.GetCurrentDirectory%2A>。  
  
 `path`參數不區分大小寫。  
  
 如需一般 I/O 工作的清單，請參閱 <<c0> [ 一般 I/O 工作](~/docs/standard/io/common-i-o-tasks.md)。  
  
   
  
## Examples  
 下列範例說明如何設定目前的目錄，並顯示根目錄。  
  
 [!code-cpp[System.IO.DirectoryRoot#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.DirectoryRoot/CPP/example.cpp#1)]
 [!code-csharp[System.IO.DirectoryRoot#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.DirectoryRoot/CS/example.cs#1)]
 [!code-vb[System.IO.DirectoryRoot#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.DirectoryRoot/VB/example.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">呼叫端沒有必要的使用權限。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 為零長度字串、只包含空格，或包含一或多個無效字元。 您可以使用 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 查詢無效字元。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱，或兩者都超出系統定義的長度上限。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">目前的目錄路徑資訊存取。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /></permission>
        <related type="Article" href="~/docs/standard/io/index.md">檔案和資料流 I/O</related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md">如何：從檔案讀取文字</related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md">如何：將文字寫入檔案</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetFiles">
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>傳回符合指定準則之檔案的名稱。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetFiles">
      <MemberSignature Language="C#" Value="public static string[] GetFiles (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetFiles(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetFiles(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetFiles (path As String) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetFiles(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member GetFiles : string -&gt; string[]" Usage="System.IO.Directory.GetFiles path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">要搜尋之目錄的相對或絕對路徑。 這個字串不會區分大小寫。</param>
        <summary>傳回指定目錄中的檔案名稱 (包括路徑)。</summary>
        <returns>指定之目錄中的檔案完整名稱 (包括路徑) 陣列，如果找不到任何檔案則為空陣列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Directory.EnumerateFiles%2A>和<xref:System.IO.Directory.GetFiles%2A>方法的差異，如下所示：當您使用<xref:System.IO.Directory.EnumerateFiles%2A>，您可以開始列舉的名稱集合，則會傳回整個集合之前，當您使用<xref:System.IO.Directory.GetFiles%2A>，您必須等到整個陣列的名稱，才能存取陣列傳回。 因此，當您使用許多檔案和目錄、<xref:System.IO.Directory.EnumerateFiles%2A>可能會更有效率。  
  
 傳回的檔案名稱會附加至提供`path`參數。  
  
 這個方法相當於<xref:System.IO.Directory.GetFiles%28System.String%2CSystem.String%29>開頭是星號 (\*) 指定為搜尋模式。  
  
 `path`參數可以指定相對或絕對路徑資訊。 相對於目前工作目錄，會解譯相對路徑的資訊。 若要取得目前工作目錄，請參閱<xref:System.IO.Directory.GetCurrentDirectory%2A>。  
  
 不保證的順序傳回的檔案名稱;使用<xref:System.Array.Sort%2A>是否需要特定的排序次序的方法。  
  
 `path`參數不區分大小寫。  
  
 如需一般 I/O 工作的清單，請參閱 <<c0> [ 一般 I/O 工作](~/docs/standard/io/common-i-o-tasks.md)。  
  
   
  
## Examples  
 下列範例示範如何使用<xref:System.IO.Directory.GetFiles%2A>方法來傳回檔案名稱，從使用者指定的位置。 此範例會設定為擷取所有錯誤通用於這個方法。  
  
 [!code-cpp[Recursive file finder#1](~/samples/snippets/cpp/VS_Snippets_CLR/Recursive file finder/CPP/directorylisting.cpp#1)]
 [!code-csharp[Recursive file finder#1](~/samples/snippets/csharp/VS_Snippets_CLR/Recursive file finder/CS/directorylisting.cs#1)]
 [!code-vb[Recursive file finder#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Recursive file finder/VB/directorylisting.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><paramref name="path" /> 為檔案名稱。  
  
-或- 
發生網路錯誤。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼叫端沒有必要的使用權限。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 為零長度字串、只包含空格，或包含一或多個無效字元。 您可以使用 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 方法查詢無效字元。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱，或兩者都超出系統定義的長度上限。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定的路徑未找到或無效 (例如，它位於未對應的磁碟機上)。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">目前的目錄路徑資訊存取。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /></permission>
        <related type="Article" href="~/docs/standard/io/index.md">檔案和資料流 I/O</related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md">如何：從檔案讀取文字</related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md">如何：將文字寫入檔案</related>
      </Docs>
    </Member>
    <Member MemberName="GetFiles">
      <MemberSignature Language="C#" Value="public static string[] GetFiles (string path, string searchPattern);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetFiles(string path, string searchPattern) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetFiles(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetFiles (path As String, searchPattern As String) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetFiles(System::String ^ path, System::String ^ searchPattern);" />
      <MemberSignature Language="F#" Value="static member GetFiles : string * string -&gt; string[]" Usage="System.IO.Directory.GetFiles (path, searchPattern)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="searchPattern" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">要搜尋之目錄的相對或絕對路徑。 這個字串不會區分大小寫。</param>
        <param name="searchPattern">要比對 <paramref name="path" /> 中檔案名稱的搜尋字串。  這個參數可以包含有效常值路徑與萬用 (* 和 ?) 字元的組合，但是不支援規則運算式。</param>
        <summary>傳回指定目錄中符合指定搜尋模式的檔案名稱 (包括檔案的路徑)。</summary>
        <returns>指定目錄中，符合指定搜尋模式的檔案完整名稱 (包括路徑) 陣列，如果找不到任何檔案則為空陣列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 傳回的檔案名稱會附加至所提供`path`參數和傳回的檔案名稱的順序並不保證; 使用<xref:System.Array.Sort%2A>是否需要特定的排序次序的方法。  
  
 `searchPattern` 可以是常值與萬用字元字元的組合，但它不支援規則運算式。 允許使用下列萬用字元規範`searchPattern`。  
  
|萬用字元規範|符合|  
|------------------------|-------------|  
|\* （星號）|在該位置的零或多個字元。|  
|? （問號）|該位置中的零個或一個字元。|  
  
 非萬用字元的字元是常值字元。 比方說，`searchPattern`字串 」\*t 」 中的所有名稱搜尋`path`結尾字母"t"。 `searchPattern`字串"s\*」 中的所有名稱搜尋`path`開頭為字母"s"。  
  
 `searchPattern` 結尾不能兩個句點 ("...") 或包含兩個句點 ("...") 後面接著<xref:System.IO.Path.DirectorySeparatorChar>或<xref:System.IO.Path.AltDirectorySeparatorChar>，也不能包含任何無效的字元。 您可以使用 <xref:System.IO.Path.GetInvalidPathChars%2A> 方法查詢無效字元。  
  
> [!NOTE]
>  當您使用星號萬用字元，在`searchPattern`這類 「\*.txt 」，在指定的延伸模組中的字元數會影響搜尋，如下所示：  
>   
> -   如果指定的延伸模組是剛好三個字元，則這個方法會傳回具有延伸模組可開始具有指定副檔名的檔案。 例如，"\*.xls"傳回"book.xls 」 和 「 book.xlsx"。  
> -   在其他情況下，這個方法會傳回完全符合指定的延伸模組的檔案。 例如，"\*.ai"會傳回 「 file.ai"，而不是 「 file.aif"。  
>   
>  當您使用問號萬用字元時，則這個方法會傳回符合指定的副檔名的檔案。 例如，假設"file1.txt"和"file1.txtother 」，兩個檔案，在目錄中，搜尋模式的 「 檔案？。txt"會傳回只是第一個檔案，而搜尋模式的 「 檔案\*.txt"會傳回這兩個檔案。  
  
> [!NOTE]
>  因為這個方法會檢查使用 8.3 檔案名稱格式和長時間的檔案名稱格式的檔案名稱，搜尋模式類似於 「\*1\*.txt 」 可能會傳回未預期的檔案名稱。 例如，使用搜尋模式的 「\*1\*.txt"傳回"longfilename.txt"，因為對等的 8.3 檔案名稱格式是 「 LONGFI~1.TXT"。  
  
 <xref:System.IO.Directory.EnumerateFiles%2A>和<xref:System.IO.Directory.GetFiles%2A>方法的差異，如下所示：當您使用<xref:System.IO.Directory.EnumerateFiles%2A>，您可以開始列舉的名稱集合，則會傳回整個集合之前，當您使用<xref:System.IO.Directory.GetFiles%2A>，您必須等到整個陣列的名稱，才能存取陣列傳回。 因此，當您使用許多檔案和目錄、<xref:System.IO.Directory.EnumerateFiles%2A>可能會更有效率。  
  
 `path`參數可以指定相對或絕對路徑資訊。 相對於目前工作目錄，會解譯相對路徑的資訊。 若要取得目前工作目錄，請參閱<xref:System.IO.Directory.GetCurrentDirectory%2A>。  
  
 `path`參數不區分大小寫。  
  
 如需一般 I/O 工作的清單，請參閱 <<c0> [ 一般 I/O 工作](~/docs/standard/io/common-i-o-tasks.md)。  
  
   
  
## Examples  
 下列範例會計算指定的字母為開頭的檔案數目。  
  
 [!code-cpp[Dir_GetFiles2#1](~/samples/snippets/cpp/VS_Snippets_CLR/Dir_GetFiles2/CPP/dir_getfiles2.cpp#1)]
 [!code-csharp[Dir_GetFiles2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Dir_GetFiles2/CS/dir_getfiles2.cs#1)]
 [!code-vb[Dir_GetFiles2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Dir_GetFiles2/VB/dir_getfiles2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><paramref name="path" /> 為檔案名稱。  
  
-或- 
發生網路錯誤。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼叫端沒有必要的使用權限。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 為零長度字串、只包含空格，或包含一或多個無效字元。 您可以使用 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 查詢無效字元。  
  
-或- 
 <paramref name="searchPattern" /> 不包含有效模式。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 或 <paramref name="searchPattern" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱，或兩者都超出系統定義的長度上限。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定的路徑未找到或無效 (例如，它位於未對應的磁碟機上)。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">目前的目錄路徑資訊存取。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /></permission>
        <related type="Article" href="~/docs/standard/io/index.md">檔案和資料流 I/O</related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md">如何：從檔案讀取文字</related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md">如何：將文字寫入檔案</related>
      </Docs>
    </Member>
    <Member MemberName="GetFiles">
      <MemberSignature Language="C#" Value="public static string[] GetFiles (string path, string searchPattern, System.IO.EnumerationOptions enumerationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetFiles(string path, string searchPattern, class System.IO.EnumerationOptions enumerationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetFiles(System.String,System.String,System.IO.EnumerationOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetFiles(System::String ^ path, System::String ^ searchPattern, System::IO::EnumerationOptions ^ enumerationOptions);" />
      <MemberSignature Language="F#" Value="static member GetFiles : string * string * System.IO.EnumerationOptions -&gt; string[]" Usage="System.IO.Directory.GetFiles (path, searchPattern, enumerationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="searchPattern" Type="System.String" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="enumerationOptions" Type="System.IO.EnumerationOptions" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <param name="searchPattern">To be added.</param>
        <param name="enumerationOptions">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFiles">
      <MemberSignature Language="C#" Value="public static string[] GetFiles (string path, string searchPattern, System.IO.SearchOption searchOption);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetFiles(string path, string searchPattern, valuetype System.IO.SearchOption searchOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetFiles(System.String,System.String,System.IO.SearchOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetFiles(System::String ^ path, System::String ^ searchPattern, System::IO::SearchOption searchOption);" />
      <MemberSignature Language="F#" Value="static member GetFiles : string * string * System.IO.SearchOption -&gt; string[]" Usage="System.IO.Directory.GetFiles (path, searchPattern, searchOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="searchPattern" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="searchOption" Type="System.IO.SearchOption" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="path">要搜尋之目錄的相對或絕對路徑。 這個字串不會區分大小寫。</param>
        <param name="searchPattern">要比對 <paramref name="path" /> 中檔案名稱的搜尋字串。  這個參數可以包含有效常值路徑與萬用 (* 和 ?) 字元的組合，但是不支援規則運算式。</param>
        <param name="searchOption">其中一個列舉值，這個值會指定搜尋作業應該包含所有子目錄或只包含目前目錄。</param>
        <summary>傳回指定目錄中符合指定搜尋模式的檔案名稱 (包括檔案的路徑)，並使用值判斷是否搜尋子目錄。</summary>
        <returns>指定目錄中，符合指定搜尋模式和選項的檔案完整名稱 (包括路徑) 陣列，如果找不到任何檔案則為空陣列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 傳回的檔案名稱會附加至所提供的參數`path`並無法保證傳回的檔案名稱的順序; 請使用<xref:System.Array.Sort%2A>是否需要特定的排序次序的方法。  
  
 `searchPattern` 可以是常值與萬用字元字元的組合，但它不支援規則運算式。 允許使用下列萬用字元規範`searchPattern`。  
  
|萬用字元規範|符合|  
|------------------------|-------------|  
|\* （星號）|在該位置的零或多個字元。|  
|? （問號）|該位置中的零個或一個字元。|  
  
 非萬用字元的字元是常值字元。 比方說，`searchPattern`字串 」\*t 」 中的所有名稱搜尋`path`結尾字母"t"。 `searchPattern`字串"s\*」 中的所有名稱搜尋`path`開頭為字母"s"。  
  
 `searchPattern` 結尾不能兩個句點 ("...") 或包含兩個句點 ("...") 後面接著<xref:System.IO.Path.DirectorySeparatorChar>或<xref:System.IO.Path.AltDirectorySeparatorChar>，也不能包含任何無效的字元。 您可以使用 <xref:System.IO.Path.GetInvalidPathChars%2A> 方法查詢無效字元。  
  
> [!NOTE]
>  當您使用星號萬用字元，在`searchPattern`這類 「\*.txt 」，在指定的延伸模組中的字元數會影響搜尋，如下所示：  
>   
> -   如果指定的延伸模組是剛好三個字元，則這個方法會傳回具有延伸模組可開始具有指定副檔名的檔案。 例如，"\*.xls"傳回"book.xls 」 和 「 book.xlsx"。  
> -   在其他情況下，這個方法會傳回完全符合指定的延伸模組的檔案。 例如，"\*.ai"會傳回 「 file.ai"，而不是 「 file.aif"。  
>   
>  當您使用問號萬用字元時，則這個方法會傳回符合指定的副檔名的檔案。 例如，假設"file1.txt"和"file1.txtother 」，兩個檔案，在目錄中，搜尋模式的 「 檔案？。txt"會傳回只是第一個檔案，而 「 file*.txt"的搜尋模式傳回這兩個檔案。  
  
> [!NOTE]
>  因為這個方法會檢查使用 8.3 檔案名稱格式和長時間的檔案名稱格式的檔案名稱，搜尋模式類似於 「\*1\*.txt 」 可能會傳回未預期的檔案名稱。 例如，使用搜尋模式的 「\*1\*.txt"傳回"longfilename.txt"，因為對等的 8.3 檔案名稱格式是 「 LONGFI~1.TXT"。  
  
 <xref:System.IO.Directory.EnumerateFiles%2A>和<xref:System.IO.Directory.GetFiles%2A>方法的差異，如下所示：當您使用<xref:System.IO.Directory.EnumerateFiles%2A>，您可以開始列舉的名稱集合，則會傳回整個集合之前，當您使用<xref:System.IO.Directory.GetFiles%2A>，您必須等到整個陣列的名稱，才能存取陣列傳回。 因此，當您使用許多檔案和目錄、<xref:System.IO.Directory.EnumerateFiles%2A>可能會更有效率。  
  
 檔案名稱中包含的完整路徑。  
  
 `path`參數可以指定相對或絕對路徑資訊。 相對於目前工作目錄，會解譯相對路徑的資訊。 若要取得目前工作目錄，請參閱<xref:System.IO.Directory.GetCurrentDirectory%2A>。  
  
 `path`參數不區分大小寫。  
  
 如需一般 I/O 工作的清單，請參閱 <<c0> [ 一般 I/O 工作](~/docs/standard/io/common-i-o-tasks.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 為零長度字串、只包含空格，或包含一或多個無效字元。 您可以使用 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 方法查詢無效字元。  
  
-或- 
 <paramref name="searchPattern" /> 不包含有效模式。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 或 <paramref name="searchpattern" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="searchOption" /> 不是有效的 <see cref="T:System.IO.SearchOption" /> 值。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼叫端沒有必要的使用權限。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定的路徑未找到或無效 (例如，它位於未對應的磁碟機上)。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱，或兩者都超出系統定義的長度上限。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="path" /> 為檔案名稱。  
  
-或- 
發生網路錯誤。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">目前的目錄路徑資訊存取。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /></permission>
        <related type="Article" href="~/docs/standard/io/index.md">檔案和資料流 I/O</related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md">如何：從檔案讀取文字</related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md">如何：將文字寫入檔案</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetFileSystemEntries">
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>傳回符合指定準則之所有檔案和子目錄的名稱。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetFileSystemEntries">
      <MemberSignature Language="C#" Value="public static string[] GetFileSystemEntries (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetFileSystemEntries(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetFileSystemEntries(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetFileSystemEntries (path As String) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetFileSystemEntries(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member GetFileSystemEntries : string -&gt; string[]" Usage="System.IO.Directory.GetFileSystemEntries path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">要搜尋之目錄的相對或絕對路徑。 這個字串不會區分大小寫。</param>
        <summary>傳回指定路徑中所有檔案和子目錄的名稱。</summary>
        <returns>指定之目錄中的檔案及子目錄名稱陣列，如果找不到檔案或子目錄則為空陣列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不保證的順序傳回的檔案和目錄名稱;使用<xref:System.Array.Sort%2A>是否需要特定的排序次序的方法。  
  
 <xref:System.IO.Directory.EnumerateFileSystemEntries%2A>和<xref:System.IO.Directory.GetFileSystemEntries%2A>方法的差異，如下所示：當您使用<xref:System.IO.Directory.EnumerateFileSystemEntries%2A>，您可以開始列舉項目的集合，傳回整個集合之前，當您使用<xref:System.IO.Directory.GetFileSystemEntries%2A>，您必須等到整個陣列的項目，才能存取陣列傳回。 因此，當您使用許多檔案和目錄、<xref:System.IO.Directory.EnumerateFiles%2A>可能會更有效率。  
  
 這個方法相當於<xref:System.IO.Directory.GetFileSystemEntries%2A>開頭是星號 (\*) 指定為搜尋模式。  
  
 `path`參數可以指定相對或絕對路徑資訊。 相對於目前工作目錄，會解譯相對路徑的資訊。 若要取得目前工作目錄，請參閱<xref:System.IO.Directory.GetCurrentDirectory%2A>。  
  
 `path`參數不區分大小寫。  
  
 如需一般 I/O 工作的清單，請參閱 <<c0> [ 一般 I/O 工作](~/docs/standard/io/common-i-o-tasks.md)。  
  
   
  
## Examples  
 下列範例會使用<xref:System.IO.Directory.GetFileSystemEntries%2A>每一個字串陣列中要在主控台的方法，以字串陣列中填入所有檔案和子目錄中的使用者指定的位置，並將列印的名稱。 此範例會設定為擷取所有錯誤通用於這個方法。  
  
 [!code-cpp[System.IO.Directory#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Directory/CPP/class1.cpp#1)]
 [!code-csharp[System.IO.Directory#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Directory/CS/class1.cs#1)]
 [!code-vb[System.IO.Directory#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Directory/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">呼叫端沒有必要的使用權限。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 為零長度字串、只包含空格，或包含一或多個無效字元。 您可以使用 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 查詢無效字元。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱，或兩者都超出系統定義的長度上限。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="path" /> 為檔案名稱。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定的路徑無效 (例如，它位於未對應的磁碟機上)。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">目前的目錄路徑資訊存取。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /></permission>
        <altmember cref="T:System.IO.FileSystemWatcher" />
        <altmember cref="T:System.IO.FileSystemInfo" />
        <related type="Article" href="~/docs/standard/io/index.md">檔案和資料流 I/O</related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md">如何：從檔案讀取文字</related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md">如何：將文字寫入檔案</related>
      </Docs>
    </Member>
    <Member MemberName="GetFileSystemEntries">
      <MemberSignature Language="C#" Value="public static string[] GetFileSystemEntries (string path, string searchPattern);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetFileSystemEntries(string path, string searchPattern) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetFileSystemEntries(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetFileSystemEntries (path As String, searchPattern As String) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetFileSystemEntries(System::String ^ path, System::String ^ searchPattern);" />
      <MemberSignature Language="F#" Value="static member GetFileSystemEntries : string * string -&gt; string[]" Usage="System.IO.Directory.GetFileSystemEntries (path, searchPattern)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="searchPattern" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">要搜尋之目錄的相對或絕對路徑。 這個字串不會區分大小寫。</param>
        <param name="searchPattern">要比對 <paramref name="path" /> 中檔案及目錄名稱的搜尋字串。  這個參數可以包含有效常值路徑與萬用 (* 和 ?) 字元的組合，但是不支援規則運算式。</param>
        <summary>傳回符合指定路徑中搜尋模式的目錄名稱，及檔案名稱的陣列。</summary>
        <returns>符合指定搜尋條件的檔案名稱及目錄名稱陣列，如果找不到檔案或目錄則為空陣列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不保證的順序傳回的檔案和目錄名稱;使用<xref:System.Array.Sort%2A>是否需要特定的排序次序的方法。  
  
 `searchPattern` 可以是常值與萬用字元字元的組合，但它不支援規則運算式。 允許使用下列萬用字元規範`searchPattern`。  
  
|萬用字元規範|符合|  
|------------------------|-------------|  
|\* （星號）|在該位置的零或多個字元。|  
|? （問號）|該位置中的零個或一個字元。|  
  
 非萬用字元的字元是常值字元。 比方說，`searchPattern`字串 」\*t 」 中的所有名稱搜尋`path`結尾字母"t"。 `searchPattern`字串"s\*」 中的所有名稱搜尋`path`開頭為字母"s"。  
  
 `searchPattern` 結尾不能兩個句點 ("...") 或包含兩個句點 ("...") 後面接著<xref:System.IO.Path.DirectorySeparatorChar>或<xref:System.IO.Path.AltDirectorySeparatorChar>，也不能包含任何無效的字元。 您可以使用 <xref:System.IO.Path.GetInvalidPathChars%2A> 方法查詢無效字元。  
  
> [!NOTE]
>  當您使用星號萬用字元，在`searchPattern`這類 「\*.txt 」，在指定的延伸模組中的字元數會影響搜尋，如下所示：  
>   
> -   如果指定的延伸模組是剛好三個字元，則這個方法會傳回具有延伸模組可開始具有指定副檔名的檔案。 例如，"\*.xls"傳回"book.xls 」 和 「 book.xlsx"。  
> -   在其他情況下，這個方法會傳回完全符合指定的延伸模組的檔案。 例如，"\*.ai"會傳回 「 file.ai"，而不是 「 file.aif"。  
>   
>  當您使用問號萬用字元時，則這個方法會傳回符合指定的副檔名的檔案。 例如，假設"file1.txt"和"file1.txtother 」，兩個檔案，在目錄中，搜尋模式的 「 檔案？。txt"會傳回只是第一個檔案，而搜尋模式的 「 檔案\*.txt"會傳回這兩個檔案。  
  
 `path`參數可以指定相對或絕對路徑資訊。 相對於目前工作目錄，會解譯相對路徑的資訊。 若要取得目前工作目錄，請參閱<xref:System.IO.Directory.GetCurrentDirectory%2A>。  
  
 `path`參數不區分大小寫。  
  
 如需一般 I/O 工作的清單，請參閱 <<c0> [ 一般 I/O 工作](~/docs/standard/io/common-i-o-tasks.md)。  
  
   
  
## Examples  
 下列範例會使用<xref:System.IO.Directory.GetFileSystemEntries%2A>方法將字串陣列中填入所有名稱比對使用者指定的篩選條件，在特定位置的檔案，並列印到主控台陣列中的每個字串。 此範例會設定為擷取所有錯誤通用於這個方法。  
  
 [!code-cpp[System.IO.Directory#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Directory/CPP/class1.cpp#2)]
 [!code-csharp[System.IO.Directory#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Directory/CS/class1.cs#2)]
 [!code-vb[System.IO.Directory#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Directory/VB/class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">呼叫端沒有必要的使用權限。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 為零長度字串、只包含空格，或包含一或多個無效字元。 您可以使用 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 方法查詢無效字元。  
  
-或- 
 <paramref name="searchPattern" /> 不包含有效模式。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 或 <paramref name="searchPattern" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱，或兩者都超出系統定義的長度上限。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="path" /> 為檔案名稱。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定的路徑無效 (例如，它位於未對應的磁碟機上)。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">目前的目錄路徑資訊存取。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /></permission>
        <altmember cref="T:System.IO.FileSystemInfo" />
        <altmember cref="T:System.IO.FileSystemWatcher" />
        <related type="Article" href="~/docs/standard/io/index.md">檔案和資料流 I/O</related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md">如何：從檔案讀取文字</related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md">如何：將文字寫入檔案</related>
      </Docs>
    </Member>
    <Member MemberName="GetFileSystemEntries">
      <MemberSignature Language="C#" Value="public static string[] GetFileSystemEntries (string path, string searchPattern, System.IO.EnumerationOptions enumerationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetFileSystemEntries(string path, string searchPattern, class System.IO.EnumerationOptions enumerationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetFileSystemEntries(System.String,System.String,System.IO.EnumerationOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetFileSystemEntries(System::String ^ path, System::String ^ searchPattern, System::IO::EnumerationOptions ^ enumerationOptions);" />
      <MemberSignature Language="F#" Value="static member GetFileSystemEntries : string * string * System.IO.EnumerationOptions -&gt; string[]" Usage="System.IO.Directory.GetFileSystemEntries (path, searchPattern, enumerationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="searchPattern" Type="System.String" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="enumerationOptions" Type="System.IO.EnumerationOptions" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <param name="searchPattern">To be added.</param>
        <param name="enumerationOptions">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFileSystemEntries">
      <MemberSignature Language="C#" Value="public static string[] GetFileSystemEntries (string path, string searchPattern, System.IO.SearchOption searchOption);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetFileSystemEntries(string path, string searchPattern, valuetype System.IO.SearchOption searchOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetFileSystemEntries(System.String,System.String,System.IO.SearchOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetFileSystemEntries(System::String ^ path, System::String ^ searchPattern, System::IO::SearchOption searchOption);" />
      <MemberSignature Language="F#" Value="static member GetFileSystemEntries : string * string * System.IO.SearchOption -&gt; string[]" Usage="System.IO.Directory.GetFileSystemEntries (path, searchPattern, searchOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="searchPattern" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="searchOption" Type="System.IO.SearchOption" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="path">要搜尋之目錄的相對或絕對路徑。 這個字串不會區分大小寫。</param>
        <param name="searchPattern">要比對 <paramref name="path" /> 中檔案及目錄名稱的搜尋字串。  這個參數可以包含有效常值路徑與萬用 (* 和 ?) 字元的組合，但是不支援規則運算式。</param>
        <param name="searchOption">其中一個列舉值，該值會指定搜尋作業應該只包含目前目錄還是包含所有子目錄。  
  
預設值為 <see cref="F:System.IO.SearchOption.TopDirectoryOnly" />。</param>
        <summary>傳回指定之路徑中符合搜尋模式之所有檔名和目錄名稱的陣列，並選擇性地搜尋子目錄。</summary>
        <returns>檔案名稱及目錄名稱符合指定搜尋條件的檔案陣列，如果找不到檔案或目錄則為空陣列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不保證的順序傳回的檔案和目錄名稱;使用<xref:System.Array.Sort%2A>是否需要特定的排序次序的方法。  
  
 `searchPattern` 可以是常值與萬用字元字元的組合，但它不支援規則運算式。 允許使用下列萬用字元規範`searchPattern`。  
  
|萬用字元規範|符合|  
|------------------------|-------------|  
|\* （星號）|在該位置的零或多個字元。|  
|? （問號）|該位置中的零個或一個字元。|  
  
 非萬用字元的字元是常值字元。 比方說，`searchPattern`字串 」\*t 」 中的所有名稱搜尋`path`結尾字母"t"。 `searchPattern`字串"s\*」 中的所有名稱搜尋`path`開頭為字母"s"。  
  
 `searchPattern` 結尾不能兩個句點 ("...") 或包含兩個句點 ("...") 後面接著<xref:System.IO.Path.DirectorySeparatorChar>或<xref:System.IO.Path.AltDirectorySeparatorChar>，也不能包含任何無效的字元。 您可以使用 <xref:System.IO.Path.GetInvalidPathChars%2A> 方法查詢無效字元。  
  
> [!NOTE]
>  當您使用星號萬用字元，在`searchPattern`這類 「\*.txt 」，在指定的延伸模組中的字元數會影響搜尋，如下所示：  
>   
> -   如果指定的延伸模組是剛好三個字元，則這個方法會傳回具有延伸模組可開始具有指定副檔名的檔案。 例如，"\*.xls"傳回"book.xls 」 和 「 book.xlsx"。  
> -   在其他情況下，這個方法會傳回完全符合指定的延伸模組的檔案。 例如，"\*.ai"會傳回 「 file.ai"，而不是 「 file.aif"。  
>   
>  當您使用問號萬用字元時，則這個方法會傳回符合指定的副檔名的檔案。 例如，假設"file1.txt"和"file1.txtother 」，兩個檔案，在目錄中，搜尋模式的 「 檔案？。txt"會傳回只是第一個檔案，而搜尋模式的 「 檔案\*.txt"會傳回這兩個檔案。  
  
 <xref:System.IO.Directory.EnumerateFileSystemEntries%2A>和<xref:System.IO.Directory.GetFileSystemEntries%2A>方法的差異，如下所示：當您使用<xref:System.IO.Directory.EnumerateFileSystemEntries%2A>，您可以開始列舉項目的集合，傳回整個集合之前，當您使用<xref:System.IO.Directory.GetFileSystemEntries%2A>，您必須等到整個陣列的項目，才能存取陣列傳回。 因此，當您使用許多檔案和目錄、<xref:System.IO.Directory.EnumerateFiles%2A>可能會更有效率。  
  
 您可以指定相對路徑的資訊與`path`參數。 相對路徑的資訊會相對於目前工作目錄，您可以使用判斷解譯<xref:System.IO.Directory.GetCurrentDirectory%2A>方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 為零長度字串、只包含空格或包含無效字元。 您可以使用 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 方法查詢無效字元。  
  
-或- 
 <paramref name="searchPattern" /> 不包含有效模式。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 為 <see langword="null" />。  
  
-或- 
 <paramref name="searchPattern" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="searchOption" /> 不是有效的 <see cref="T:System.IO.SearchOption" /> 值。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> 無效，例如參考到未對應的磁碟機。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="path" /> 為檔案名稱。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱，或兩者合計超出系統定義的長度上限。</exception>
        <exception cref="T:System.Security.SecurityException">呼叫端沒有必要的使用權限。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼叫端沒有必要的使用權限。</exception>
        <altmember cref="T:System.IO.FileSystemWatcher" />
      </Docs>
    </Member>
    <Member MemberName="GetLastAccessTime">
      <MemberSignature Language="C#" Value="public static DateTime GetLastAccessTime (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime GetLastAccessTime(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetLastAccessTime(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetLastAccessTime (path As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime GetLastAccessTime(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member GetLastAccessTime : string -&gt; DateTime" Usage="System.IO.Directory.GetLastAccessTime path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">要取得其存取日期和時間資訊的檔案或目錄。</param>
        <summary>傳回指定檔案或目錄上次被存取的日期和時間。</summary>
        <returns>結構，設定為指定之檔案或目錄上次被存取的日期和時間。 這個值以本地時間表示。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  這個方法可能傳回不正確的值，因為它會使用其值可能不會持續更新作業系統的原生函式。  
  
 這個方法相當於<xref:System.IO.File.GetLastAccessTime%2A?displayProperty=nameWithType>。  
  
 如果目錄中所述`path`參數不存在，這個方法會傳回 12:00，年 1 月 1 西元 1601年日午夜 (C.E.)Coordinated Universal Time (UTC) 調整為當地時間。  
  
 `path`參數可以指定相對或絕對路徑資訊。 相對於目前工作目錄，會解譯相對路徑的資訊。 若要取得目前工作目錄，請參閱<xref:System.IO.Directory.GetCurrentDirectory%2A>。  
  
 `path`參數不區分大小寫。  
  
 如需一般 I/O 工作的清單，請參閱 <<c0> [ 一般 I/O 工作](~/docs/standard/io/common-i-o-tasks.md)。  
  
   
  
## Examples  
 下列範例示範如何使用`GetLastAccessTime`。  
  
 [!code-cpp[Dir_GetLastAccess#1](~/samples/snippets/cpp/VS_Snippets_CLR/Dir_GetLastAccess/CPP/dir_getlastaccess.cpp#1)]
 [!code-csharp[Dir_GetLastAccess#1](~/samples/snippets/csharp/VS_Snippets_CLR/Dir_GetLastAccess/CS/dir_getlastaccess.cs#1)]
 [!code-vb[Dir_GetLastAccess#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Dir_GetLastAccess/VB/dir_getlastaccess.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">呼叫端沒有必要的使用權限。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 為零長度字串、只包含空格，或包含一或多個無效字元。 您可以使用 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 方法查詢無效字元。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱，或兩者都超出系統定義的長度上限。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="path" /> 參數的格式無效。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">讀取指定的檔案或目錄。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></permission>
        <altmember cref="T:System.IO.FileSystemWatcher" />
        <related type="Article" href="~/docs/standard/io/index.md">檔案和資料流 I/O</related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md">如何：從檔案讀取文字</related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md">如何：將文字寫入檔案</related>
      </Docs>
    </Member>
    <Member MemberName="GetLastAccessTimeUtc">
      <MemberSignature Language="C#" Value="public static DateTime GetLastAccessTimeUtc (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime GetLastAccessTimeUtc(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetLastAccessTimeUtc(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetLastAccessTimeUtc (path As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime GetLastAccessTimeUtc(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member GetLastAccessTimeUtc : string -&gt; DateTime" Usage="System.IO.Directory.GetLastAccessTimeUtc path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">要取得其存取日期和時間資訊的檔案或目錄。</param>
        <summary>傳回上次存取指定檔案或目錄的日期和時間，格式為國際標準時間 (UTC)。</summary>
        <returns>結構，設定為指定之檔案或目錄上次被存取的日期和時間。 這個值以 UTC 時間表示。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  這個方法可能傳回不正確的值，因為它會使用其值可能不會持續更新作業系統的原生函式。  
  
 如果目錄中所述`path`參數不存在，這個方法會傳回 12:00，年 1 月 1 西元 1601年日午夜 (C.E.)國際標準時間 (UTC)。  
  
 如需一般 I/O 工作的清單，請參閱 <<c0> [ 一般 I/O 工作](~/docs/standard/io/common-i-o-tasks.md)。  
  
   
  
## Examples  
 使用 Coordinated Universal Time (UTC) 的輸出時，下列範例會說明在輸出中的差異。  
  
 [!code-cpp[System.IO.UTCExample#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.UTCExample/CPP/example.cpp#1)]
 [!code-csharp[System.IO.UTCExample#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.UTCExample/CS/example.cs#1)]
 [!code-vb[System.IO.UTCExample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.UTCExample/VB/example.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">呼叫端沒有必要的使用權限。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 為零長度字串、只包含空格，或包含一或多個無效字元。 您可以使用 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 方法查詢無效字元。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱，或兩者都超出系統定義的長度上限。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="path" /> 參數的格式無效。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">讀取指定的檔案或目錄。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></permission>
        <altmember cref="T:System.IO.FileSystemWatcher" />
        <related type="Article" href="~/docs/standard/io/index.md">檔案和資料流 I/O</related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md">如何：從檔案讀取文字</related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md">如何：將文字寫入檔案</related>
      </Docs>
    </Member>
    <Member MemberName="GetLastWriteTime">
      <MemberSignature Language="C#" Value="public static DateTime GetLastWriteTime (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime GetLastWriteTime(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetLastWriteTime(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetLastWriteTime (path As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime GetLastWriteTime(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member GetLastWriteTime : string -&gt; DateTime" Usage="System.IO.Directory.GetLastWriteTime path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">要取得其修改日期和時間資訊的檔案或目錄。</param>
        <summary>傳回指定檔案或目錄上次被寫入的日期和時間。</summary>
        <returns>結構，設定為指定之檔案或目錄上次被寫入的日期和時間。 這個值以本地時間表示。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  這個方法可能傳回不正確的值，因為它會使用其值可能不會持續更新作業系統的原生函式。  
  
 如果目錄中所述`path`參數不存在，這個方法會傳回 12:00，年 1 月 1 西元 1601年日午夜 (C.E.)Coordinated Universal Time (UTC) 調整為當地時間。  
  
 `path`參數可以指定相對或絕對路徑資訊。 相對於目前工作目錄，會解譯相對路徑的資訊。 若要取得目前工作目錄，請參閱<xref:System.IO.Directory.GetCurrentDirectory%2A>。  
  
 `path`參數不區分大小寫。  
  
 如需一般 I/O 工作的清單，請參閱 <<c0> [ 一般 I/O 工作](~/docs/standard/io/common-i-o-tasks.md)。  
  
   
  
## Examples  
 下列範例示範如何使用`GetLastWriteTime`。  
  
 [!code-cpp[Dir_GetLastWrite#1](~/samples/snippets/cpp/VS_Snippets_CLR/Dir_GetLastWrite/CPP/dir_getlastwrite.cpp#1)]
 [!code-csharp[Dir_GetLastWrite#1](~/samples/snippets/csharp/VS_Snippets_CLR/Dir_GetLastWrite/CS/dir_getlastwrite.cs#1)]
 [!code-vb[Dir_GetLastWrite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Dir_GetLastWrite/VB/dir_getlastwrite.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">呼叫端沒有必要的使用權限。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 為零長度字串、只包含空格，或包含一或多個無效字元。 您可以使用 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 方法查詢無效字元。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱，或兩者都超出系統定義的長度上限。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">讀取指定的檔案或目錄。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></permission>
        <altmember cref="T:System.IO.FileSystemWatcher" />
        <related type="Article" href="~/docs/standard/io/index.md">檔案和資料流 I/O</related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md">如何：從檔案讀取文字</related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md">如何：將文字寫入檔案</related>
      </Docs>
    </Member>
    <Member MemberName="GetLastWriteTimeUtc">
      <MemberSignature Language="C#" Value="public static DateTime GetLastWriteTimeUtc (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime GetLastWriteTimeUtc(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetLastWriteTimeUtc(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetLastWriteTimeUtc (path As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime GetLastWriteTimeUtc(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member GetLastWriteTimeUtc : string -&gt; DateTime" Usage="System.IO.Directory.GetLastWriteTimeUtc path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">要取得其修改日期和時間資訊的檔案或目錄。</param>
        <summary>傳回上次寫入指定檔案或目錄的日期和時間，格式為國際標準時間 (UTC)。</summary>
        <returns>結構，設定為指定之檔案或目錄上次被寫入的日期和時間。 這個值以 UTC 時間表示。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  這個方法可能傳回不正確的值，因為它會使用其值可能不會持續更新作業系統的原生函式。  
  
 如果目錄中所述`path`參數不存在，這個方法會傳回 12:00，年 1 月 1 西元 1601年日午夜 (C.E.)國際標準時間 (UTC)。  
  
 如需一般 I/O 工作的清單，請參閱 <<c0> [ 一般 I/O 工作](~/docs/standard/io/common-i-o-tasks.md)。  
  
   
  
## Examples  
 使用 Coordinated Universal Time (UTC) 的輸出時，下列範例會說明在輸出中的差異。  
  
 [!code-cpp[System.IO.UTCExample#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.UTCExample/CPP/example.cpp#1)]
 [!code-csharp[System.IO.UTCExample#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.UTCExample/CS/example.cs#1)]
 [!code-vb[System.IO.UTCExample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.UTCExample/VB/example.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">呼叫端沒有必要的使用權限。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 為零長度字串、只包含空格，或包含一或多個無效字元。 您可以使用 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 方法查詢無效字元。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱，或兩者都超出系統定義的長度上限。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">讀取指定的檔案或目錄。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></permission>
        <altmember cref="T:System.IO.FileSystemWatcher" />
        <related type="Article" href="~/docs/standard/io/index.md">檔案和資料流 I/O</related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md">如何：從檔案讀取文字</related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md">如何：將文字寫入檔案</related>
      </Docs>
    </Member>
    <Member MemberName="GetLogicalDrives">
      <MemberSignature Language="C#" Value="public static string[] GetLogicalDrives ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetLogicalDrives() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetLogicalDrives" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetLogicalDrives () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetLogicalDrives();" />
      <MemberSignature Language="F#" Value="static member GetLogicalDrives : unit -&gt; string[]" Usage="System.IO.Directory.GetLogicalDrives " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>以 "&lt;磁碟機代號&gt;:\\" 的形式來擷取這個電腦上邏輯磁碟機的名稱。</summary>
        <returns>這個電腦的邏輯磁碟。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 GetLogicalDrives 會傳回所有可存取的磁碟機在特定電腦上，包括磁碟機和任何的光碟機。  
  
 如需一般 I/O 工作的清單，請參閱 <<c0> [ 一般 I/O 工作](~/docs/standard/io/common-i-o-tasks.md)。  
  
   
  
## Examples  
 下列範例會使用<xref:System.IO.Directory.GetLogicalDrives%2A>方法，以將呼叫端的電腦上的每個磁碟機的名稱指派給字串的陣列。 這個字串陣列的每個成員接著會列印到主控台。 此範例會設定為擷取所有錯誤通用於這個方法。  
  
 [!code-cpp[System.IO.Directory#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Directory/CPP/class1.cpp#3)]
 [!code-csharp[System.IO.Directory#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Directory/CS/class1.cs#3)]
 [!code-vb[System.IO.Directory#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Directory/VB/class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">發生 I/O 錯誤 (例如磁碟錯誤)。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼叫端沒有必要的使用權限。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">呼叫 unmanaged 程式碼，例如呼叫使用 PInvoke 或 COM interop 的原生程式碼。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <related type="Article" href="~/docs/standard/io/index.md">檔案和資料流 I/O</related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md">如何：從檔案讀取文字</related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md">如何：將文字寫入檔案</related>
      </Docs>
    </Member>
    <Member MemberName="GetParent">
      <MemberSignature Language="C#" Value="public static System.IO.DirectoryInfo GetParent (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.DirectoryInfo GetParent(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetParent(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetParent (path As String) As DirectoryInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::DirectoryInfo ^ GetParent(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member GetParent : string -&gt; System.IO.DirectoryInfo" Usage="System.IO.Directory.GetParent path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.DirectoryInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">要擷取其父目錄的路徑。</param>
        <summary>擷取指定路徑的父目錄，包括絕對和相對路徑兩者。</summary>
        <returns>父目錄；如果 <paramref name="path" /> 是根目錄，包括 UNC 伺服器或共用名稱的根目錄，則為 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `path`參數可以指定相對或絕對路徑資訊。 相對於目前工作目錄，會解譯相對路徑的資訊。 若要取得目前工作目錄，請參閱<xref:System.IO.Directory.GetCurrentDirectory%2A>。  
  
 從結尾會移除尾端空格`path`才能取得目錄的參數。  
  
 這個方法所傳回的字串所組成的路徑，一直到但不是包括，最後一個中的所有字元<xref:System.IO.Path.DirectorySeparatorChar>或<xref:System.IO.Path.AltDirectorySeparatorChar>。 例如，將路徑 「 C:\Directory\SubDirectory\test.txt"傳遞至<xref:System.IO.Directory.GetParent%2A>傳回 「 C:\Directory\SubDirectory"。 傳遞"C:\Directory\SubDirectory"傳回"C:\Directory 」。 不過，傳遞"C:\Directory\SubDirectory\\"會傳回 「 C:\Directory\SubDirectory"，因為結束的目錄分隔符號之後 「 子目錄 」。  
  
 `path`參數不區分大小寫。  
  
 如需一般 I/O 工作的清單，請參閱 <<c0> [ 一般 I/O 工作](~/docs/standard/io/common-i-o-tasks.md)。  
  
   
  
## Examples  
 下列範例示範如何使用<xref:System.IO.Directory.GetParent%2A>方法來擷取使用者指定的位置，其父目錄 「 路徑 」。 所傳回的值<xref:System.IO.Directory.GetParent%2A>方法就會列印到主控台。 此範例會設定為擷取所有錯誤通用於這個方法。  
  
 [!code-cpp[System.IO.Directory#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Directory/CPP/class1.cpp#4)]
 [!code-csharp[System.IO.Directory#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Directory/CS/class1.cs#4)]
 [!code-vb[System.IO.Directory#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Directory/VB/class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><paramref name="path" /> 指定的目錄是唯讀的。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼叫端沒有必要的使用權限。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 為零長度字串、只包含空格，或包含一或多個無效字元。 您可以使用 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 方法查詢無效字元。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱，或兩者都超出系統定義的長度上限。 如需詳細資訊，請參閱 <see cref="T:System.IO.PathTooLongException" /> 主題。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">找不到指定的路徑。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="path" /> 格式無效。</exception>
        <exception cref="T:System.Security.SecurityException">僅限 .NET Framework：呼叫端沒有必要的權限。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">用於讀取檔案或目錄。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></permission>
        <altmember cref="T:System.IO.DirectoryInfo" />
        <related type="Article" href="~/docs/standard/io/index.md">檔案和資料流 I/O</related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md">如何：從檔案讀取文字</related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md">如何：將文字寫入檔案</related>
      </Docs>
    </Member>
    <Member MemberName="Move">
      <MemberSignature Language="C#" Value="public static void Move (string sourceDirName, string destDirName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Move(string sourceDirName, string destDirName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.Move(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Move (sourceDirName As String, destDirName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Move(System::String ^ sourceDirName, System::String ^ destDirName);" />
      <MemberSignature Language="F#" Value="static member Move : string * string -&gt; unit" Usage="System.IO.Directory.Move (sourceDirName, destDirName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirName" Type="System.String" />
        <Parameter Name="destDirName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sourceDirName">要移動的檔案或目錄的路徑。</param>
        <param name="destDirName"><paramref name="sourceDirName" /> 的新位置路徑。 如果 <paramref name="sourceDirName" /> 是檔案，則 <paramref name="destDirName" /> 也必須是檔案名稱。</param>
        <summary>移動檔案或目錄和其內容到新位置。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會建立新的目錄與所指定的名稱`destDirName`，並將內容移`sourceDirName`新建立的目的地目錄。 如果您嘗試將目錄移至目錄已經存在，<xref:System.IO.IOException>就會發生。 例如，如果您嘗試將 c:\mydir\ 移至 c:\public，而且 c:\public 已經存在，會發生例外狀況。 或者，您可以指定"c:\\\public\\\mydir"作為`destDirName`提供"mydir"不存在底下的參數"c:\\\public"，或指定新的目錄名稱，例如"c:\\\newdir"。  
  
 `sourceDirName`和`destDirName`引數可以指定相對或絕對路徑資訊。 相對於目前工作目錄，會解譯相對路徑的資訊。 若要取得目前工作目錄，請參閱<xref:System.IO.Directory.GetCurrentDirectory%2A>。  
  
 從 path 參數的結尾會移除尾端空格，再移動的目錄。  
  
 如需一般 I/O 工作的清單，請參閱 <<c0> [ 一般 I/O 工作](~/docs/standard/io/common-i-o-tasks.md)。  
  
   
  
## Examples  
 下列範例示範如何將目錄和其所有的檔案移至新的目錄。 已移動之後，原始的目錄不存在。  
  
 [!code-csharp[System.IO.Directory#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Directory/CS/class6.cs#14)]
 [!code-vb[System.IO.Directory#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Directory/VB/class6.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">嘗試將目錄移至不同的磁碟區。  
  
-或- 
 <paramref name="destDirName" /> 已經存在。  
  
-或- 
<paramref name="sourceDirName" /> 和 <paramref name="destDirName" /> 參數參考相同的檔案或目錄。  
  
-或- 
其他處理序正在使用此目錄或其中的檔案。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼叫端沒有必要的使用權限。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="sourceDirName" /> 或 <paramref name="destDirName" /> 為零長度字串，只包含空格或包含一或多個無效字元。 您可以使用 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 方法查詢無效字元。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="sourceDirName" /> 或 <paramref name="destDirName" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱，或兩者都超出系統定義的長度上限。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="sourceDirName" /> 指定的路徑無效 (例如，它位於未對應的磁碟機上)。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">從讀取<paramref name="sourceDirName" />寫入<paramref name="sourceDirName" />和<paramref name="destDirName" />。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />， <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
        <related type="Article" href="~/docs/standard/io/index.md">檔案和資料流 I/O</related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md">如何：從檔案讀取文字</related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md">如何：將文字寫入檔案</related>
      </Docs>
    </Member>
    <Member MemberName="SetAccessControl">
      <MemberSignature Language="C#" Value="public static void SetAccessControl (string path, System.Security.AccessControl.DirectorySecurity directorySecurity);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetAccessControl(string path, class System.Security.AccessControl.DirectorySecurity directorySecurity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.SetAccessControl(System.String,System.Security.AccessControl.DirectorySecurity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetAccessControl(System::String ^ path, System::Security::AccessControl::DirectorySecurity ^ directorySecurity);" />
      <MemberSignature Language="F#" Value="static member SetAccessControl : string * System.Security.AccessControl.DirectorySecurity -&gt; unit" Usage="System.IO.Directory.SetAccessControl (path, directorySecurity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="directorySecurity" Type="System.Security.AccessControl.DirectorySecurity" Index="1" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="path">要加入或從中移除存取控制清單 (ACL) 項目的目錄。</param>
        <param name="directorySecurity"><see cref="T:System.Security.AccessControl.DirectorySecurity" /> 物件，描述要套用至 <paramref name="path" /> 參數所描述之目錄的 ACL 項目。</param>
        <summary>將 <see cref="T:System.Security.AccessControl.DirectorySecurity" /> 物件描述的存取控制清單 (ACL) 項目套用至指定的目錄。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Directory.SetAccessControl%2A>方法適用於存取控制清單 (ACL) 項目代表 noninherited 的 ACL 清單的檔案。  
  
> [!CAUTION]
>  指定 ACL`directorySecurity`參數已取代現有目錄的 ACL。 若要新增之新使用者的權限，請使用<xref:System.IO.Directory.GetAccessControl%2A>方法來取得現有的 ACL，並修改它。  
  
 ACL 描述個人及/或群組，或沒有，在指定的檔案或目錄上的特定動作的權限。 如需詳細資訊，請參閱[如何：新增或移除存取控制清單項目](~/docs/standard/io/how-to-add-or-remove-access-control-list-entries.md)。  
  
 <xref:System.IO.Directory.SetAccessControl%2A>方法仍然只存在<xref:System.Security.AccessControl.DirectorySecurity>物件建立後已修改的物件。  如果<xref:System.Security.AccessControl.DirectorySecurity>不修改物件，它不會保存至檔案。  因此，不可以擷取<xref:System.Security.AccessControl.DirectorySecurity>物件從一個檔案，並重新套用到另一個檔案的相同的物件。  
  
 若要將 ACL 資訊從一個檔案複製到另一個：  
  
1.  使用<xref:System.IO.Directory.GetAccessControl%2A>方法來擷取<xref:System.Security.AccessControl.DirectorySecurity>從原始程式檔的物件。  
  
2.  建立新<xref:System.Security.AccessControl.DirectorySecurity>目的地檔案的物件。  
  
3.  使用<xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorBinaryForm%2A>或是<xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A>來源方法<xref:System.Security.AccessControl.DirectorySecurity>擷取 ACL 資訊的物件。  
  
4.  使用<xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm%2A>或是<xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A>方法，以將資訊複製到目的地的步驟 3 中所擷取<xref:System.Security.AccessControl.DirectorySecurity>物件。  
  
5.  設定目的地<xref:System.Security.AccessControl.DirectorySecurity>目的地檔案使用的物件<xref:System.IO.Directory.SetAccessControl%2A>方法。  
  
 在 NTFS 環境中，<xref:System.Security.AccessControl.FileSystemRights.ReadAttributes>並<xref:System.Security.AccessControl.FileSystemRights.ReadExtendedAttributes>如果使用者已對使用者授與<xref:System.Security.AccessControl.FileSystemRights.ListDirectory>父資料夾上的權限。 若要拒絕<xref:System.Security.AccessControl.FileSystemRights.ReadAttributes>並<xref:System.Security.AccessControl.FileSystemRights.ReadExtendedAttributes>，拒絕<xref:System.Security.AccessControl.FileSystemRights.ListDirectory>父目錄上。  
  
   
  
## Examples  
 下列範例會使用<xref:System.IO.Directory.GetAccessControl%2A>而<xref:System.IO.Directory.SetAccessControl%2A>方法以新增存取控制清單 (ACL) 項目，並從目錄移除的 ACL 項目。  您必須提供有效的使用者或群組帳戶，才能執行這個範例。  
  
 [!code-cpp[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/samples/snippets/cpp/VS_Snippets_CLR/IO.DiretoryInfo.GetAccessControl-SetAccessControl/cpp/sample.cpp#1)]
 [!code-csharp[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/samples/snippets/csharp/VS_Snippets_CLR/IO.DiretoryInfo.GetAccessControl-SetAccessControl/CS/sample.cs#1)]
 [!code-vb[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IO.DiretoryInfo.GetAccessControl-SetAccessControl/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="directorySecurity" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">找不到此目錄。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 無效。</exception>
        <exception cref="T:System.UnauthorizedAccessException">目前的處理序無法存取 <paramref name="path" /> 所指定的目錄。  
  
-或- 
目前的處理序沒有足夠的權限可設定 ACL 項目。</exception>
        <exception cref="T:System.PlatformNotSupportedException">目前的作業系統不是 Windows 2000 或更新版本。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">若要列舉目錄的存取控制清單 (ACL) 的權限。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.NoAccess" /> ， <see cref="F:System.Security.AccessControl.AccessControlActions.View" />  
  
安全性動作：需求。</permission>
        <altmember cref="T:System.IO.FileSystemWatcher" />
      </Docs>
    </Member>
    <Member MemberName="SetCreationTime">
      <MemberSignature Language="C#" Value="public static void SetCreationTime (string path, DateTime creationTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetCreationTime(string path, valuetype System.DateTime creationTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.SetCreationTime(System.String,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetCreationTime (path As String, creationTime As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetCreationTime(System::String ^ path, DateTime creationTime);" />
      <MemberSignature Language="F#" Value="static member SetCreationTime : string * DateTime -&gt; unit" Usage="System.IO.Directory.SetCreationTime (path, creationTime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="creationTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="path">要設定其日期和時間資訊的檔案或目錄。</param>
        <param name="creationTime">上次寫入檔案或目錄的日期和時間。 這個值以本地時間表示。</param>
        <summary>設定指定檔案或目錄建立的日期和時間。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `path`參數可以指定相對或絕對路徑資訊。 相對於目前工作目錄，會解譯相對路徑的資訊。 若要取得目前工作目錄，請參閱<xref:System.IO.Directory.GetCurrentDirectory%2A>。  
  
 `path`參數不區分大小寫。  
  
   
  
## Examples  
 使用 Coordinated Universal Time (UTC) 的輸出時，下列範例會說明在輸出中的差異。  
  
 [!code-cpp[System.IO.UTCExample#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.UTCExample/CPP/example.cpp#1)]
 [!code-csharp[System.IO.UTCExample#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.UTCExample/CS/example.cs#1)]
 [!code-vb[System.IO.UTCExample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.UTCExample/VB/example.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException">找不到指定的路徑。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 為零長度字串、只包含空格，或包含一或多個無效字元。 您可以使用 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 方法查詢無效字元。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱，或兩者都超出系統定義的長度上限。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼叫端沒有必要的使用權限。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="creationTime" /> 指定的值超出這項作業允許的日期或時間範圍。</exception>
        <exception cref="T:System.PlatformNotSupportedException">目前的作業系統不是 Windows NT 或更新版本。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">用於寫入至指定的檔案或目錄。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
        <altmember cref="T:System.IO.FileSystemWatcher" />
        <related type="Article" href="~/docs/standard/io/index.md">檔案和資料流 I/O</related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md">如何：從檔案讀取文字</related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md">如何：將文字寫入檔案</related>
      </Docs>
    </Member>
    <Member MemberName="SetCreationTimeUtc">
      <MemberSignature Language="C#" Value="public static void SetCreationTimeUtc (string path, DateTime creationTimeUtc);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetCreationTimeUtc(string path, valuetype System.DateTime creationTimeUtc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.SetCreationTimeUtc(System.String,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetCreationTimeUtc (path As String, creationTimeUtc As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetCreationTimeUtc(System::String ^ path, DateTime creationTimeUtc);" />
      <MemberSignature Language="F#" Value="static member SetCreationTimeUtc : string * DateTime -&gt; unit" Usage="System.IO.Directory.SetCreationTimeUtc (path, creationTimeUtc)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="creationTimeUtc" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="path">要設定其日期和時間資訊的檔案或目錄。</param>
        <param name="creationTimeUtc">建立目錄或檔案的日期和時間。 這個值以本地時間表示。</param>
        <summary>設定指定檔案或目錄的建立日期和時間，格式為國際標準時間 (UTC)。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `path`參數可以指定相對或絕對路徑資訊。 相對於目前工作目錄，會解譯相對路徑的資訊。 若要取得目前工作目錄，請參閱<xref:System.IO.Directory.GetCurrentDirectory%2A>。  
  
 `path`參數不區分大小寫。  
  
 如需一般 I/O 工作的清單，請參閱 <<c0> [ 一般 I/O 工作](~/docs/standard/io/common-i-o-tasks.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException">找不到指定的路徑。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 為零長度字串、只包含空格，或包含一或多個無效字元。 您可以使用 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 方法查詢無效字元。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱，或兩者都超出系統定義的長度上限。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼叫端沒有必要的使用權限。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="creationTime" /> 指定的值超出這項作業允許的日期或時間範圍。</exception>
        <exception cref="T:System.PlatformNotSupportedException">目前的作業系統不是 Windows NT 或更新版本。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">用於寫入至指定的檔案或目錄。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
        <altmember cref="T:System.IO.FileSystemWatcher" />
        <related type="Article" href="~/docs/standard/io/index.md">檔案和資料流 I/O</related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md">如何：從檔案讀取文字</related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md">如何：將文字寫入檔案</related>
      </Docs>
    </Member>
    <Member MemberName="SetCurrentDirectory">
      <MemberSignature Language="C#" Value="public static void SetCurrentDirectory (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetCurrentDirectory(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.SetCurrentDirectory(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetCurrentDirectory (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetCurrentDirectory(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member SetCurrentDirectory : string -&gt; unit" Usage="System.IO.Directory.SetCurrentDirectory path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">設定為目前工作目錄的路徑。</param>
        <summary>將應用程式的目前工作目錄設定為指定目錄。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 應用程式終止時，會將工作目錄還原至其原始位置 （處理序開始的所在的目錄）。  
  
 `path`參數可以指定相對或絕對路徑資訊。 相對於目前工作目錄，會解譯相對路徑的資訊。 若要取得目前工作目錄，請參閱<xref:System.IO.Directory.GetCurrentDirectory%2A>。  
  
 從結尾會移除尾端空格`path`參數之前設定的目錄。  
  
 `path`參數不區分大小寫。  
  
 如果您要設定目錄卸除式媒體 （例如，"e:"的 USB 快閃磁碟機） 的磁碟機，您可以判斷磁碟機是否準備好使用<xref:System.IO.DriveInfo.IsReady%2A>屬性。  
  
   
  
## Examples  
 下列範例說明如何設定目前的目錄，並顯示根目錄。  
  
 [!code-cpp[System.IO.DirectoryRoot#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.DirectoryRoot/CPP/example.cpp#1)]
 [!code-csharp[System.IO.DirectoryRoot#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.DirectoryRoot/CS/example.cs#1)]
 [!code-vb[System.IO.DirectoryRoot#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.DirectoryRoot/VB/example.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 為零長度字串、只包含空格，或包含一或多個無效字元。 您可以使用 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 方法查詢無效字元。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱，或兩者都超出系統定義的長度上限。</exception>
        <exception cref="T:System.Security.SecurityException">呼叫端沒有必要的權限。</exception>
        <exception cref="T:System.IO.FileNotFoundException">找不到指定的路徑。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">找不到指定目錄。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">用於寫入至檔案或目錄。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">呼叫 unmanaged 程式碼。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <altmember cref="T:System.IO.FileSystemWatcher" />
        <related type="Article" href="~/docs/standard/io/index.md">檔案和資料流 I/O</related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md">如何：從檔案讀取文字</related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md">如何：將文字寫入檔案</related>
      </Docs>
    </Member>
    <Member MemberName="SetLastAccessTime">
      <MemberSignature Language="C#" Value="public static void SetLastAccessTime (string path, DateTime lastAccessTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetLastAccessTime(string path, valuetype System.DateTime lastAccessTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.SetLastAccessTime(System.String,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetLastAccessTime (path As String, lastAccessTime As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetLastAccessTime(System::String ^ path, DateTime lastAccessTime);" />
      <MemberSignature Language="F#" Value="static member SetLastAccessTime : string * DateTime -&gt; unit" Usage="System.IO.Directory.SetLastAccessTime (path, lastAccessTime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="lastAccessTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="path">要設定其存取日期和時間資訊的檔案或目錄。</param>
        <param name="lastAccessTime">包含值以設定 <paramref name="path" /> 存取日期和時間的物件。 這個值以本地時間表示。</param>
        <summary>設定指定檔案或目錄上次被存取的日期和時間。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `path`參數可以指定相對或絕對路徑資訊。 相對於目前工作目錄，會解譯相對路徑的資訊。 若要取得目前工作目錄，請參閱<xref:System.IO.Directory.GetCurrentDirectory%2A>。  
  
 `path`參數不區分大小寫。  
  
 如需一般 I/O 工作的清單，請參閱 <<c0> [ 一般 I/O 工作](~/docs/standard/io/common-i-o-tasks.md)。  
  
   
  
## Examples  
 下列範例示範如何使用`SetLastAccessTime`。  
  
 [!code-cpp[Dir_SetLastAccess#1](~/samples/snippets/cpp/VS_Snippets_CLR/Dir_SetLastAccess/CPP/dir_setlastaccess.cpp#1)]
 [!code-csharp[Dir_SetLastAccess#1](~/samples/snippets/csharp/VS_Snippets_CLR/Dir_SetLastAccess/CS/dir_setlastaccess.cs#1)]
 [!code-vb[Dir_SetLastAccess#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Dir_SetLastAccess/VB/dir_setlastaccess.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException">找不到指定的路徑。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 為零長度字串、只包含空格，或包含一或多個無效字元。 您可以使用 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 方法查詢無效字元。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱，或兩者都超出系統定義的長度上限。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼叫端沒有必要的使用權限。</exception>
        <exception cref="T:System.PlatformNotSupportedException">目前的作業系統不是 Windows NT 或更新版本。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="lastAccessTime" /> 指定的值超出這項作業允許的日期或時間範圍。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">用於寫入至指定的檔案或目錄。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
        <altmember cref="T:System.IO.FileSystemWatcher" />
        <related type="Article" href="~/docs/standard/io/index.md">檔案和資料流 I/O</related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md">如何：從檔案讀取文字</related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md">如何：將文字寫入檔案</related>
      </Docs>
    </Member>
    <Member MemberName="SetLastAccessTimeUtc">
      <MemberSignature Language="C#" Value="public static void SetLastAccessTimeUtc (string path, DateTime lastAccessTimeUtc);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetLastAccessTimeUtc(string path, valuetype System.DateTime lastAccessTimeUtc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.SetLastAccessTimeUtc(System.String,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetLastAccessTimeUtc (path As String, lastAccessTimeUtc As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetLastAccessTimeUtc(System::String ^ path, DateTime lastAccessTimeUtc);" />
      <MemberSignature Language="F#" Value="static member SetLastAccessTimeUtc : string * DateTime -&gt; unit" Usage="System.IO.Directory.SetLastAccessTimeUtc (path, lastAccessTimeUtc)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="lastAccessTimeUtc" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="path">要設定其存取日期和時間資訊的檔案或目錄。</param>
        <param name="lastAccessTimeUtc">包含值以設定 <paramref name="path" /> 存取日期和時間的物件。 這個值以 UTC 時間表示。</param>
        <summary>設定上次存取指定檔案或目錄的日期和時間，格式為國際標準時間 (UTC)。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `path`參數可以指定相對或絕對路徑資訊。 相對於目前工作目錄，會解譯相對路徑的資訊。 若要取得目前工作目錄，請參閱<xref:System.IO.Directory.GetCurrentDirectory%2A>。  
  
 `path`參數不區分大小寫。  
  
 如需一般 I/O 工作的清單，請參閱 <<c0> [ 一般 I/O 工作](~/docs/standard/io/common-i-o-tasks.md)。  
  
   
  
## Examples  
 使用 Coordinated Universal Time (UTC) 的輸出時，下列範例會說明在輸出中的差異。  
  
 [!code-cpp[System.IO.UTCExample#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.UTCExample/CPP/example.cpp#1)]
 [!code-csharp[System.IO.UTCExample#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.UTCExample/CS/example.cs#1)]
 [!code-vb[System.IO.UTCExample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.UTCExample/VB/example.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException">找不到指定的路徑。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 為零長度字串、只包含空格，或包含一或多個無效字元。 您可以使用 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 方法查詢無效字元。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱，或兩者都超出系統定義的長度上限。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼叫端沒有必要的使用權限。</exception>
        <exception cref="T:System.PlatformNotSupportedException">目前的作業系統不是 Windows NT 或更新版本。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="lastAccessTimeUtc" /> 指定的值超出這項作業允許的日期或時間範圍。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">用於寫入至指定的檔案或目錄。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
        <altmember cref="T:System.IO.FileSystemWatcher" />
        <related type="Article" href="~/docs/standard/io/index.md">檔案和資料流 I/O</related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md">如何：從檔案讀取文字</related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md">如何：將文字寫入檔案</related>
      </Docs>
    </Member>
    <Member MemberName="SetLastWriteTime">
      <MemberSignature Language="C#" Value="public static void SetLastWriteTime (string path, DateTime lastWriteTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetLastWriteTime(string path, valuetype System.DateTime lastWriteTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.SetLastWriteTime(System.String,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetLastWriteTime (path As String, lastWriteTime As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetLastWriteTime(System::String ^ path, DateTime lastWriteTime);" />
      <MemberSignature Language="F#" Value="static member SetLastWriteTime : string * DateTime -&gt; unit" Usage="System.IO.Directory.SetLastWriteTime (path, lastWriteTime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="lastWriteTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="path">目錄的路徑。</param>
        <param name="lastWriteTime">目錄上次被寫入的日期和時間。 這個值以本地時間表示。</param>
        <summary>設定目錄上次被寫入的日期和時間。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `path`參數可以指定相對或絕對路徑資訊。 相對於目前工作目錄，會解譯相對路徑的資訊。 若要取得目前工作目錄，請參閱<xref:System.IO.Directory.GetCurrentDirectory%2A>。  
  
 `path`參數不區分大小寫。  
  
 如需一般 I/O 工作的清單，請參閱 <<c0> [ 一般 I/O 工作](~/docs/standard/io/common-i-o-tasks.md)。  
  
   
  
## Examples  
 下列範例示範如何使用`SetLastWriteTime`。  
  
 [!code-cpp[Dir_SetLastWrite#1](~/samples/snippets/cpp/VS_Snippets_CLR/Dir_SetLastWrite/CPP/dir_setlastwrite.cpp#1)]
 [!code-csharp[Dir_SetLastWrite#1](~/samples/snippets/csharp/VS_Snippets_CLR/Dir_SetLastWrite/CS/dir_setlastwrite.cs#1)]
 [!code-vb[Dir_SetLastWrite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Dir_SetLastWrite/VB/dir_setlastwrite.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException">找到 <paramref name="path" /> (例如，該目錄不存在或其位於未對應的磁碟機上)。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">找到 <paramref name="path" /> (例如，該目錄不存在或其位於未對應的磁碟機上)。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 為零長度字串、只包含空格，或包含一或多個無效字元。 您可以使用 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 方法查詢無效字元。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱，或兩者都超出系統定義的長度上限。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼叫端沒有必要的使用權限。</exception>
        <exception cref="T:System.PlatformNotSupportedException">目前的作業系統不是 Windows NT 或更新版本。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="lastWriteTime" /> 指定的值超出這項作業允許的日期或時間範圍。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">用於寫入至指定的檔案或目錄。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
        <altmember cref="T:System.IO.FileSystemWatcher" />
        <related type="Article" href="~/docs/standard/io/index.md">檔案和資料流 I/O</related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md">如何：從檔案讀取文字</related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md">如何：將文字寫入檔案</related>
      </Docs>
    </Member>
    <Member MemberName="SetLastWriteTimeUtc">
      <MemberSignature Language="C#" Value="public static void SetLastWriteTimeUtc (string path, DateTime lastWriteTimeUtc);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetLastWriteTimeUtc(string path, valuetype System.DateTime lastWriteTimeUtc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.SetLastWriteTimeUtc(System.String,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetLastWriteTimeUtc (path As String, lastWriteTimeUtc As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetLastWriteTimeUtc(System::String ^ path, DateTime lastWriteTimeUtc);" />
      <MemberSignature Language="F#" Value="static member SetLastWriteTimeUtc : string * DateTime -&gt; unit" Usage="System.IO.Directory.SetLastWriteTimeUtc (path, lastWriteTimeUtc)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="lastWriteTimeUtc" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="path">目錄的路徑。</param>
        <param name="lastWriteTimeUtc">目錄上次被寫入的日期和時間。 這個值以 UTC 時間表示。</param>
        <summary>設定上次寫入目錄的日期和時間，格式為國際標準時間 (UTC)。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `path`參數可以指定相對或絕對路徑資訊。 相對於目前工作目錄，會解譯相對路徑的資訊。 若要取得目前工作目錄，請參閱<xref:System.IO.Directory.GetCurrentDirectory%2A>。  
  
 `path`參數不區分大小寫。  
  
 如需一般 I/O 工作的清單，請參閱 <<c0> [ 一般 I/O 工作](~/docs/standard/io/common-i-o-tasks.md)。  
  
   
  
## Examples  
 使用 Coordinated Universal Time (UTC) 的輸出時，下列範例會說明在輸出中的差異。  
  
 [!code-cpp[System.IO.UTCExample#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.UTCExample/CPP/example.cpp#1)]
 [!code-csharp[System.IO.UTCExample#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.UTCExample/CS/example.cs#1)]
 [!code-vb[System.IO.UTCExample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.UTCExample/VB/example.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException">找到 <paramref name="path" /> (例如，該目錄不存在或其位於未對應的磁碟機上)。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">找到 <paramref name="path" /> (例如，該目錄不存在或其位於未對應的磁碟機上)。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 為零長度字串、只包含空格，或包含一或多個無效字元。 您可以使用 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 方法查詢無效字元。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱，或兩者都超出系統定義的長度上限。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼叫端沒有必要的使用權限。</exception>
        <exception cref="T:System.PlatformNotSupportedException">目前的作業系統不是 Windows NT 或更新版本。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="lastWriteTimeUtc" /> 指定的值超出這項作業允許的日期或時間範圍。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">用於寫入至指定的檔案或目錄。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
        <altmember cref="T:System.IO.FileSystemWatcher" />
        <related type="Article" href="~/docs/standard/io/index.md">檔案和資料流 I/O</related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md">如何：從檔案讀取文字</related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md">如何：將文字寫入檔案</related>
      </Docs>
    </Member>
  </Members>
</Type>