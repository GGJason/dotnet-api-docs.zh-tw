<Type Name="Stream" FullName="System.IO.Stream">
  <TypeSignature Language="C#" Value="public abstract class Stream : MarshalByRefObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit Stream extends System.MarshalByRefObject implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.IO.Stream" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Stream&#xA;Inherits MarshalByRefObject&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Stream abstract : MarshalByRefObject, IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.IO</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="5915d-101">提供位元組順序的一般觀點。</span><span class="sxs-lookup"><span data-stu-id="5915d-101">Provides a generic view of a sequence of bytes.</span></span> <span data-ttu-id="5915d-102">這是 abstract 類別。</span><span class="sxs-lookup"><span data-stu-id="5915d-102">This is an abstract class.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5915d-103"><xref:System.IO.Stream> 是抽象的基底類別的所有資料流。</span><span class="sxs-lookup"><span data-stu-id="5915d-103"><xref:System.IO.Stream> is the abstract base class of all streams.</span></span> <span data-ttu-id="5915d-104">資料流是位元組序列的抽象，例如，檔案、輸入/輸出裝置、處理序間的通訊管道或 TCP/IP 通訊端。</span><span class="sxs-lookup"><span data-stu-id="5915d-104">A stream is an abstraction of a sequence of bytes, such as a file, an input/output device, an inter-process communication pipe, or a TCP/IP socket.</span></span> <span data-ttu-id="5915d-105"><xref:System.IO.Stream>類別和其衍生的類別提供的輸入和輸出，這些不同類型的一般檢視，並隔離程式設計人員的作業系統及基礎裝置的特定詳細資訊。</span><span class="sxs-lookup"><span data-stu-id="5915d-105">The <xref:System.IO.Stream> class and its derived classes provide a generic view of these different types of input and output, and isolate the programmer from the specific details of the operating system and the underlying devices.</span></span>  
  
 <span data-ttu-id="5915d-106">資料流包含三項基本作業：</span><span class="sxs-lookup"><span data-stu-id="5915d-106">Streams involve three fundamental operations:</span></span>  
  
-   <span data-ttu-id="5915d-107">您可以從資料流讀取。</span><span class="sxs-lookup"><span data-stu-id="5915d-107">You can read from streams.</span></span> <span data-ttu-id="5915d-108">讀取，則從資料流的資料傳輸至資料結構，例如位元組陣列。</span><span class="sxs-lookup"><span data-stu-id="5915d-108">Reading is the transfer of data from a stream into a data structure, such as an array of bytes.</span></span>  
  
-   <span data-ttu-id="5915d-109">您可以寫入資料流。</span><span class="sxs-lookup"><span data-stu-id="5915d-109">You can write to streams.</span></span> <span data-ttu-id="5915d-110">寫入，則資料可從資料結構將傳入資料流。</span><span class="sxs-lookup"><span data-stu-id="5915d-110">Writing is the transfer of data from a data structure into a stream.</span></span>  
  
-   <span data-ttu-id="5915d-111">資料流支援搜尋。</span><span class="sxs-lookup"><span data-stu-id="5915d-111">Streams can support seeking.</span></span> <span data-ttu-id="5915d-112">搜尋是指查詢及修改資料流中目前的位置。</span><span class="sxs-lookup"><span data-stu-id="5915d-112">Seeking refers to querying and modifying the current position within a stream.</span></span> <span data-ttu-id="5915d-113">搜尋功能仍取決於資料流所具有的備份存放區的類型。</span><span class="sxs-lookup"><span data-stu-id="5915d-113">Seek capability depends on the kind of backing store a stream has.</span></span> <span data-ttu-id="5915d-114">例如，網路資料流的目前位置中，沒有統一的概念，並因此通常不支援搜尋。</span><span class="sxs-lookup"><span data-stu-id="5915d-114">For example, network streams have no unified concept of a current position, and therefore typically do not support seeking.</span></span>  
  
 <span data-ttu-id="5915d-115">某些較常用的資料流是繼承自<xref:System.IO.Stream>是<xref:System.IO.FileStream>，和<xref:System.IO.MemoryStream>。</span><span class="sxs-lookup"><span data-stu-id="5915d-115">Some of the more commonly used streams that inherit from <xref:System.IO.Stream> are <xref:System.IO.FileStream>, and <xref:System.IO.MemoryStream>.</span></span>  
  
 <span data-ttu-id="5915d-116">根據基礎資料來源或儲存機制中，資料流可能會支援只有某些功能。</span><span class="sxs-lookup"><span data-stu-id="5915d-116">Depending on the underlying data source or repository, streams might support only some of these capabilities.</span></span> <span data-ttu-id="5915d-117">您可以使用，以查詢其功能的資料流<xref:System.IO.Stream.CanRead%2A>， <xref:System.IO.Stream.CanWrite%2A>，和<xref:System.IO.Stream.CanSeek%2A>屬性<xref:System.IO.Stream>類別。</span><span class="sxs-lookup"><span data-stu-id="5915d-117">You can query a stream for its capabilities by using the <xref:System.IO.Stream.CanRead%2A>, <xref:System.IO.Stream.CanWrite%2A>, and <xref:System.IO.Stream.CanSeek%2A> properties of the <xref:System.IO.Stream> class.</span></span>  
  
 <span data-ttu-id="5915d-118"><xref:System.IO.Stream.Read%2A>和<xref:System.IO.Stream.Write%2A>方法讀取和寫入不同的格式中的資料。</span><span class="sxs-lookup"><span data-stu-id="5915d-118">The <xref:System.IO.Stream.Read%2A> and <xref:System.IO.Stream.Write%2A> methods read and write data in a variety of formats.</span></span> <span data-ttu-id="5915d-119">資料流支援搜尋的使用<xref:System.IO.Stream.Seek%2A>和<xref:System.IO.Stream.SetLength%2A>方法和<xref:System.IO.Stream.Position%2A>和<xref:System.IO.Stream.Length%2A>屬性來查詢及修改目前的位置和長度的資料流。</span><span class="sxs-lookup"><span data-stu-id="5915d-119">For streams that support seeking, use the <xref:System.IO.Stream.Seek%2A> and <xref:System.IO.Stream.SetLength%2A> methods and the <xref:System.IO.Stream.Position%2A> and <xref:System.IO.Stream.Length%2A> properties to query and modify the current position and length of a stream.</span></span>  
  
 <span data-ttu-id="5915d-120">此類型會實作<xref:System.IDisposable>介面。</span><span class="sxs-lookup"><span data-stu-id="5915d-120">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="5915d-121">當您完成使用類型時，您應該會處置它直接或間接。</span><span class="sxs-lookup"><span data-stu-id="5915d-121">When you have finished using the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="5915d-122">若要直接處置的類型，呼叫其<xref:System.IDisposable.Dispose%2A>方法中的`try` / `catch`區塊。</span><span class="sxs-lookup"><span data-stu-id="5915d-122">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="5915d-123">若要為其配置間接，使用語言建構例如`using`（C# 中） 或`Using`（在 Visual Basic)。</span><span class="sxs-lookup"><span data-stu-id="5915d-123">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="5915d-124">如需詳細資訊，請參閱中的 「 使用物件的實作 IDisposable 」 一節<xref:System.IDisposable>介面 > 主題。</span><span class="sxs-lookup"><span data-stu-id="5915d-124">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="5915d-125">處置<xref:System.IO.Stream>物件排清所有緩衝的資料，以及基本上呼叫<xref:System.IO.Stream.Flush%2A>您的方法。</span><span class="sxs-lookup"><span data-stu-id="5915d-125">Disposing a <xref:System.IO.Stream> object flushes any buffered data, and essentially calls the <xref:System.IO.Stream.Flush%2A> method for you.</span></span> <span data-ttu-id="5915d-126"><xref:System.IO.Stream.Dispose%2A> 也會釋放作業系統檔案控制代碼、 或等資源的網路連線，用於任何內部緩衝區的記憶體。</span><span class="sxs-lookup"><span data-stu-id="5915d-126"><xref:System.IO.Stream.Dispose%2A> also releases operating system resources such as file handles, network connections, or memory used for any internal buffering.</span></span> <span data-ttu-id="5915d-127"><xref:System.IO.BufferedStream>類別提供的功能以改善讀取和寫入效能的另一個資料流周圍包裝緩衝的資料流。</span><span class="sxs-lookup"><span data-stu-id="5915d-127">The <xref:System.IO.BufferedStream> class provides the capability of wrapping a buffered stream around another stream in order to improve read and write performance.</span></span>  
  
 <span data-ttu-id="5915d-128">從開始[!INCLUDE[net_v45](~/includes/net-v45-md.md)]、<xref:System.IO.Stream>類別包括非同步方法，來簡化非同步作業。</span><span class="sxs-lookup"><span data-stu-id="5915d-128">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], the <xref:System.IO.Stream> class includes async methods to simplify asynchronous operations.</span></span> <span data-ttu-id="5915d-129">非同步方法包含`Async`中它的名稱，例如<xref:System.IO.Stream.ReadAsync%2A>， <xref:System.IO.Stream.WriteAsync%2A>， <xref:System.IO.Stream.CopyToAsync%2A>，和<xref:System.IO.Stream.FlushAsync%2A>。</span><span class="sxs-lookup"><span data-stu-id="5915d-129">An async method contains `Async` in its name, such as <xref:System.IO.Stream.ReadAsync%2A>, <xref:System.IO.Stream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, and <xref:System.IO.Stream.FlushAsync%2A>.</span></span> <span data-ttu-id="5915d-130">這些方法可讓您執行需要大量資源的 I/O 作業，而不會封鎖主執行緒。</span><span class="sxs-lookup"><span data-stu-id="5915d-130">These methods enable you to perform resource-intensive I/O operations without blocking the main thread.</span></span> <span data-ttu-id="5915d-131">這項效能考量對於 [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]應用程式或[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]應用程式而言特別重要，尤其是針對耗時的資料流作業可能會阻礙 UI 執行緒，使應用程式看起來像是停止運作的情況。</span><span class="sxs-lookup"><span data-stu-id="5915d-131">This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</span></span> <span data-ttu-id="5915d-132">非同步方法會用於搭配`async`和`await`Visual Basic 和 C# 中的關鍵字。</span><span class="sxs-lookup"><span data-stu-id="5915d-132">The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#.</span></span>  
  
 <span data-ttu-id="5915d-133">當用於[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]應用程式，<xref:System.IO.Stream>包含兩種擴充方法：<xref:System.IO.WindowsRuntimeStreamExtensions.AsInputStream%2A>和<xref:System.IO.WindowsRuntimeStreamExtensions.AsOutputStream%2A>。</span><span class="sxs-lookup"><span data-stu-id="5915d-133">When used in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app, <xref:System.IO.Stream> includes two extension methods: <xref:System.IO.WindowsRuntimeStreamExtensions.AsInputStream%2A> and <xref:System.IO.WindowsRuntimeStreamExtensions.AsOutputStream%2A>.</span></span> <span data-ttu-id="5915d-134">這些方法會將轉換<xref:System.IO.Stream>物件中的資料流[!INCLUDE[wrt](~/includes/wrt-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="5915d-134">These methods convert a <xref:System.IO.Stream> object to a stream in the [!INCLUDE[wrt](~/includes/wrt-md.md)].</span></span> <span data-ttu-id="5915d-135">您也可以轉換中的資料流[!INCLUDE[wrt](~/includes/wrt-md.md)]至<xref:System.IO.Stream>物件使用<xref:System.IO.WindowsRuntimeStreamExtensions.AsStreamForRead%2A>和<xref:System.IO.WindowsRuntimeStreamExtensions.AsStreamForWrite%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="5915d-135">You can also convert a stream in the [!INCLUDE[wrt](~/includes/wrt-md.md)] to a <xref:System.IO.Stream> object by using the <xref:System.IO.WindowsRuntimeStreamExtensions.AsStreamForRead%2A> and <xref:System.IO.WindowsRuntimeStreamExtensions.AsStreamForWrite%2A> methods.</span></span> <span data-ttu-id="5915d-136">如需詳細資訊，請參閱[How to： 轉換之間.NET Framework 資料流和 Windows 執行階段資料流](~/docs/standard/io/how-to-convert-between-dotnet-streams-and-winrt-streams.md)</span><span class="sxs-lookup"><span data-stu-id="5915d-136">For more information, see [How to: Convert Between .NET Framework Streams and Windows Runtime Streams](~/docs/standard/io/how-to-convert-between-dotnet-streams-and-winrt-streams.md)</span></span>  
  
 <span data-ttu-id="5915d-137">某些資料流實作執行本機緩衝處理的基礎資料來改善效能。</span><span class="sxs-lookup"><span data-stu-id="5915d-137">Some stream implementations perform local buffering of the underlying data to improve performance.</span></span> <span data-ttu-id="5915d-138">您可以使用這類資料流，<xref:System.IO.Stream.Flush%2A>或<xref:System.IO.Stream.FlushAsync%2A>方法來清除任何內部緩衝區，並確認所有資料，已都寫入基礎資料來源或儲存機制。</span><span class="sxs-lookup"><span data-stu-id="5915d-138">For such streams, you can use the <xref:System.IO.Stream.Flush%2A> or <xref:System.IO.Stream.FlushAsync%2A> method to clear any internal buffers and ensure that all data has been written to the underlying data source or repository.</span></span>  
  
 <span data-ttu-id="5915d-139">如果您需要的資料流不支援的存放區 （也稱為位元值區），使用<xref:System.IO.Stream.Null>欄位來擷取執行個體針對此用途的資料流。</span><span class="sxs-lookup"><span data-stu-id="5915d-139">If you need a stream with no backing store (also known as a bit bucket), use the <xref:System.IO.Stream.Null> field to retrieve an instance of a stream that is designed for this purpose.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5915d-140">下列範例示範如何使用兩個<xref:System.IO.FileStream>將以非同步方式從某個目錄的檔案複製到另一個目錄物件。</span><span class="sxs-lookup"><span data-stu-id="5915d-140">The following example demonstrates how to use two <xref:System.IO.FileStream> objects to asynchronously copy the files from one directory to another directory.</span></span> <span data-ttu-id="5915d-141"><xref:System.IO.FileStream> 類別衍生自 <xref:System.IO.Stream> 類別。</span><span class="sxs-lookup"><span data-stu-id="5915d-141">The <xref:System.IO.FileStream> class derives from the <xref:System.IO.Stream> class.</span></span> <span data-ttu-id="5915d-142">請注意， <xref:System.Web.UI.WebControls.Button.Click> 控制項的 <xref:System.Windows.Controls.Button> 事件處理常式由於會呼叫非同步方法，因此會以 `async` 修飾詞標記。</span><span class="sxs-lookup"><span data-stu-id="5915d-142">Notice that the <xref:System.Web.UI.WebControls.Button.Click> event handler for the <xref:System.Windows.Controls.Button> control is marked with the `async` modifier because it calls an asynchronous method.</span></span>  
  
 [!code-csharp[Asynchronous_File_IO_async#1](~/samples/snippets/csharp/VS_Snippets_CLR/Asynchronous_File_IO_async/cs/example.cs#1)]
 [!code-vb[Asynchronous_File_IO_async#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Asynchronous_File_IO_async/vb/example.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para><span data-ttu-id="5915d-143">當您實作的衍生的類別<see cref="T:System.IO.Stream" />，您必須提供實作<see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" />和<see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" />方法。</span><span class="sxs-lookup"><span data-stu-id="5915d-143">When you implement a derived class of <see cref="T:System.IO.Stream" />, you must provide implementations for the <see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" /> and <see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /> methods.</span></span> <span data-ttu-id="5915d-144">非同步方法<see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)" />， <see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)" />，和<see cref="M:System.IO.Stream.CopyToAsync(System.IO.Stream)" />使用同步方法<see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" />和<see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" />在他們的實作。</span><span class="sxs-lookup"><span data-stu-id="5915d-144">The asynchronous methods <see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)" />, <see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)" />, and <see cref="M:System.IO.Stream.CopyToAsync(System.IO.Stream)" /> use the synchronous methods <see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" /> and <see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /> in their implementations.</span></span> <span data-ttu-id="5915d-145">因此，您的實作<see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" />和<see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" />將以非同步的方法正常運作。</span><span class="sxs-lookup"><span data-stu-id="5915d-145">Therefore, your implementations of <see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" /> and <see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /> will work correctly with the asynchronous methods.</span></span> <span data-ttu-id="5915d-146">預設實作之<see cref="M:System.IO.Stream.ReadByte" />和<see cref="M:System.IO.Stream.WriteByte(System.Byte)" />建立新的單一元素位元組陣列，並接著呼叫您的實作<see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" />和<see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" />。</span><span class="sxs-lookup"><span data-stu-id="5915d-146">The default implementations of <see cref="M:System.IO.Stream.ReadByte" /> and <see cref="M:System.IO.Stream.WriteByte(System.Byte)" /> create a new single-element byte array, and then call your implementations of <see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" /> and <see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" />.</span></span> <span data-ttu-id="5915d-147">當您衍生自<see cref="T:System.IO.Stream" />，我們建議您覆寫這些方法來存取您的內部緩衝區，如果有的話，以大幅提升效能。</span><span class="sxs-lookup"><span data-stu-id="5915d-147">When you derive from <see cref="T:System.IO.Stream" />, we recommend that you override these methods to access your internal buffer, if you have one, for substantially better performance.</span></span> <span data-ttu-id="5915d-148">您也必須提供實作<see cref="P:System.IO.Stream.CanRead" />， <see cref="P:System.IO.Stream.CanSeek" />， <see cref="P:System.IO.Stream.CanWrite" />， <see cref="M:System.IO.Stream.Flush" />， <see cref="P:System.IO.Stream.Length" />， <see cref="P:System.IO.Stream.Position" />， <see cref="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)" />，和<see cref="M:System.IO.Stream.SetLength(System.Int64)" />。</span><span class="sxs-lookup"><span data-stu-id="5915d-148">You must also provide implementations of <see cref="P:System.IO.Stream.CanRead" />, <see cref="P:System.IO.Stream.CanSeek" />, <see cref="P:System.IO.Stream.CanWrite" />, <see cref="M:System.IO.Stream.Flush" />, <see cref="P:System.IO.Stream.Length" />, <see cref="P:System.IO.Stream.Position" />, <see cref="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)" />, and <see cref="M:System.IO.Stream.SetLength(System.Int64)" />.</span></span>  
  
 <span data-ttu-id="5915d-149">不會覆寫<see cref="M:System.IO.Stream.Close" />方法，而是將所有<see cref="T:System.IO.Stream" />中的清除邏輯<see cref="M:System.IO.Stream.Dispose(System.Boolean)" />方法。</span><span class="sxs-lookup"><span data-stu-id="5915d-149">Do not override the <see cref="M:System.IO.Stream.Close" /> method, instead, put all the <see cref="T:System.IO.Stream" /> cleanup logic in the <see cref="M:System.IO.Stream.Dispose(System.Boolean)" /> method.</span></span> <span data-ttu-id="5915d-150">如需詳細資訊，請參閱[實作 Dispose 方法](~/docs/standard/garbage-collection/implementing-dispose.md)。</span><span class="sxs-lookup"><span data-stu-id="5915d-150">For more information, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span></para>
    </block>
    <altmember cref="T:System.IO.FileStream" />
    <altmember cref="T:System.IO.MemoryStream" />
    <altmember cref="T:System.IO.BufferedStream" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Stream ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Stream();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5915d-151">初始化 <see cref="T:System.IO.Stream" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="5915d-151">Initializes a new instance of the <see cref="T:System.IO.Stream" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5915d-152"><xref:System.IO.Stream> 是抽象的基底類別的所有資料流。</span><span class="sxs-lookup"><span data-stu-id="5915d-152"><xref:System.IO.Stream> is the abstract base class of all streams.</span></span>  
  
 <span data-ttu-id="5915d-153">某些較常用的資料流是繼承自<xref:System.IO.Stream>是<xref:System.IO.FileStream>，和<xref:System.IO.MemoryStream>。</span><span class="sxs-lookup"><span data-stu-id="5915d-153">Some of the more commonly used streams that inherit from <xref:System.IO.Stream> are <xref:System.IO.FileStream>, and <xref:System.IO.MemoryStream>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginRead">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginRead (byte[] buffer, int offset, int count, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginRead(unsigned int8[] buffer, int32 offset, int32 count, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BeginRead (buffer As Byte(), offset As Integer, count As Integer, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginRead(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="5915d-154">讀取資料的緩衝區。</span><span class="sxs-lookup"><span data-stu-id="5915d-154">The buffer to read the data into.</span></span></param>
        <param name="offset"><span data-ttu-id="5915d-155">開始寫入自資料流讀取資料的「緩衝區」<c></c> 位元組位移。</span><span class="sxs-lookup"><span data-stu-id="5915d-155">The byte offset in <c>buffer</c> at which to begin writing data read from the stream.</span></span></param>
        <param name="count"><span data-ttu-id="5915d-156">要讀取的最大位元組數。</span><span class="sxs-lookup"><span data-stu-id="5915d-156">The maximum number of bytes to read.</span></span></param>
        <param name="callback"><span data-ttu-id="5915d-157">選擇性的非同步回呼，在讀取完成時呼叫。</span><span class="sxs-lookup"><span data-stu-id="5915d-157">An optional asynchronous callback, to be called when the read is complete.</span></span></param>
        <param name="state"><span data-ttu-id="5915d-158">使用者所提供的物件，其可以從其他要求中區分出這個特定非同步讀取的要求。</span><span class="sxs-lookup"><span data-stu-id="5915d-158">A user-provided object that distinguishes this particular asynchronous read request from other requests.</span></span></param>
        <summary><span data-ttu-id="5915d-159">開始非同步的讀取作業。</span><span class="sxs-lookup"><span data-stu-id="5915d-159">Begins an asynchronous read operation.</span></span> <span data-ttu-id="5915d-160">(請考慮用 <see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)" /> 替代。)</span><span class="sxs-lookup"><span data-stu-id="5915d-160">(Consider using <see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)" /> instead.)</span></span></summary>
        <returns><span data-ttu-id="5915d-161"><see cref="T:System.IAsyncResult" />，代表可能還在擱置中的非同步讀取。</span><span class="sxs-lookup"><span data-stu-id="5915d-161">An <see cref="T:System.IAsyncResult" /> that represents the asynchronous read, which could still be pending.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5915d-162">在 .NET Framework 4 (含) 以前版本中，您必須使用方法 (例如 <xref:System.IO.Stream.BeginRead%2A> 和 <xref:System.IO.Stream.EndRead%2A> ) 實作非同步 I/O 作業。</span><span class="sxs-lookup"><span data-stu-id="5915d-162">In the .NET Framework 4 and earlier versions, you have to use methods such as <xref:System.IO.Stream.BeginRead%2A> and <xref:System.IO.Stream.EndRead%2A> to implement asynchronous I/O operations.</span></span> <span data-ttu-id="5915d-163">這些方法都仍有[!INCLUDE[net_v45](~/includes/net-v45-md.md)]以支援舊版的程式碼; 不過，新的非同步方法，例如<xref:System.IO.Stream.ReadAsync%2A>， <xref:System.IO.Stream.WriteAsync%2A>， <xref:System.IO.Stream.CopyToAsync%2A>，和<xref:System.IO.Stream.FlushAsync%2A>，協助您更輕鬆地實作非同步 I/O 作業。</span><span class="sxs-lookup"><span data-stu-id="5915d-163">These methods are still available in the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] to support legacy code; however, the new async methods, such as <xref:System.IO.Stream.ReadAsync%2A>, <xref:System.IO.Stream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, and <xref:System.IO.Stream.FlushAsync%2A>, help you implement asynchronous I/O operations more easily.</span></span>  
  
 <span data-ttu-id="5915d-164">預設實作`BeginRead`資料流上呼叫<xref:System.IO.Stream.Read%2A>方法同步執行，這表示`Read`可能會封鎖某些資料流。</span><span class="sxs-lookup"><span data-stu-id="5915d-164">The default implementation of `BeginRead` on a stream calls the <xref:System.IO.Stream.Read%2A> method synchronously, which means that `Read` might block on some streams.</span></span> <span data-ttu-id="5915d-165">不過，執行個體的類別，例如`FileStream`和`NetworkStream`完全支援非同步作業，如果已經以非同步方式開啟執行個體。</span><span class="sxs-lookup"><span data-stu-id="5915d-165">However, instances of classes such as `FileStream` and `NetworkStream` fully support asynchronous operations if the instances have been opened asynchronously.</span></span> <span data-ttu-id="5915d-166">因此，呼叫`BeginRead`不會封鎖這些資料流。</span><span class="sxs-lookup"><span data-stu-id="5915d-166">Therefore, calls to `BeginRead` will not block on those streams.</span></span> <span data-ttu-id="5915d-167">您可以覆寫`BeginRead`（藉由使用非同步委派，例如） 以提供非同步行為。</span><span class="sxs-lookup"><span data-stu-id="5915d-167">You can override `BeginRead` (by using async delegates, for example) to provide asynchronous behavior.</span></span>  
  
 <span data-ttu-id="5915d-168">傳遞`IAsyncResult`傳回值來<xref:System.IO.Stream.EndRead%2A>，判斷有多少位元組被讀取，以便釋放系統資源用來讀取資料流的方法。</span><span class="sxs-lookup"><span data-stu-id="5915d-168">Pass the `IAsyncResult` return value to the <xref:System.IO.Stream.EndRead%2A> method of the stream to determine how many bytes were read and to release operating system resources used for reading.</span></span> <span data-ttu-id="5915d-169"><xref:System.IO.Stream.EndRead%2A> 必須針對每次呼叫一次呼叫<xref:System.IO.Stream.BeginRead%2A>。</span><span class="sxs-lookup"><span data-stu-id="5915d-169"><xref:System.IO.Stream.EndRead%2A> must be called once for every call to <xref:System.IO.Stream.BeginRead%2A>.</span></span> <span data-ttu-id="5915d-170">您可以使用相同的程式碼呼叫`BeginRead`或傳遞至回呼`BeginRead`。</span><span class="sxs-lookup"><span data-stu-id="5915d-170">You can do this either by using the same code that called `BeginRead` or in a callback passed to `BeginRead`.</span></span>  
  
 <span data-ttu-id="5915d-171">非同步的讀取或寫入發出時，在 I/O 作業完成時，無法更新資料流中目前的位置。</span><span class="sxs-lookup"><span data-stu-id="5915d-171">The current position in the stream is updated when the asynchronous read or write is issued, not when the I/O operation completes.</span></span>  
  
 <span data-ttu-id="5915d-172">多個同時進行非同步要求轉譯要求完成順序不確定。</span><span class="sxs-lookup"><span data-stu-id="5915d-172">Multiple simultaneous asynchronous requests render the request completion order uncertain.</span></span>  
  
 <span data-ttu-id="5915d-173">使用<xref:System.IO.Stream.CanRead%2A>屬性來判斷目前的執行個體是否支援讀取。</span><span class="sxs-lookup"><span data-stu-id="5915d-173">Use the <xref:System.IO.Stream.CanRead%2A> property to determine whether the current instance supports reading.</span></span>  
  
 <span data-ttu-id="5915d-174">如果資料流已關閉，或是您傳遞了無效的引數，會擲回例外狀況立即從`BeginRead`。</span><span class="sxs-lookup"><span data-stu-id="5915d-174">If a stream is closed or you pass an invalid argument, exceptions are thrown immediately from `BeginRead`.</span></span> <span data-ttu-id="5915d-175">非同步讀取要求，例如磁碟失敗期間，在 I/O 要求期間發生的錯誤發生在執行緒集區執行緒，並且呼叫時擲回例外狀況`EndRead`。</span><span class="sxs-lookup"><span data-stu-id="5915d-175">Errors that occur during an asynchronous read request, such as a disk failure during the I/O request, occur on the thread pool thread and throw exceptions when calling `EndRead`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="5915d-176">嘗試超越資料流結尾的非同步讀取，或發生磁碟錯誤。</span><span class="sxs-lookup"><span data-stu-id="5915d-176">Attempted an asynchronous read past the end of the stream, or a disk error occurs.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5915d-177">一或多個引數無效。</span><span class="sxs-lookup"><span data-stu-id="5915d-177">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="5915d-178">關閉資料流後呼叫了方法。</span><span class="sxs-lookup"><span data-stu-id="5915d-178">Methods were called after the stream was closed.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="5915d-179">目前的 <see langword="Stream" /> 實作不支援讀取作業。</span><span class="sxs-lookup"><span data-stu-id="5915d-179">The current <see langword="Stream" /> implementation does not support the read operation.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BeginWrite">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginWrite (byte[] buffer, int offset, int count, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginWrite(unsigned int8[] buffer, int32 offset, int32 count, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BeginWrite (buffer As Byte(), offset As Integer, count As Integer, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginWrite(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="5915d-180">寫入資料的來源緩衝區。</span><span class="sxs-lookup"><span data-stu-id="5915d-180">The buffer to write data from.</span></span></param>
        <param name="offset"><span data-ttu-id="5915d-181"><c>buffer</c> 中要從該處開始寫入的位元組位移。</span><span class="sxs-lookup"><span data-stu-id="5915d-181">The byte offset in <c>buffer</c> from which to begin writing.</span></span></param>
        <param name="count"><span data-ttu-id="5915d-182">寫入的最大位元組數。</span><span class="sxs-lookup"><span data-stu-id="5915d-182">The maximum number of bytes to write.</span></span></param>
        <param name="callback"><span data-ttu-id="5915d-183">選擇性的非同步回呼，在寫入完成時呼叫。</span><span class="sxs-lookup"><span data-stu-id="5915d-183">An optional asynchronous callback, to be called when the write is complete.</span></span></param>
        <param name="state"><span data-ttu-id="5915d-184">使用者所提供的物件，其可以從其他要求中區分出這個特定非同步寫入的要求。</span><span class="sxs-lookup"><span data-stu-id="5915d-184">A user-provided object that distinguishes this particular asynchronous write request from other requests.</span></span></param>
        <summary><span data-ttu-id="5915d-185">開始非同步的寫入作業。</span><span class="sxs-lookup"><span data-stu-id="5915d-185">Begins an asynchronous write operation.</span></span> <span data-ttu-id="5915d-186">(請考慮用 <see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)" /> 替代。)</span><span class="sxs-lookup"><span data-stu-id="5915d-186">(Consider using <see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)" /> instead.)</span></span></summary>
        <returns><span data-ttu-id="5915d-187"><see langword="IAsyncResult" />，代表可能還在擱置中的非同步寫入。</span><span class="sxs-lookup"><span data-stu-id="5915d-187">An <see langword="IAsyncResult" /> that represents the asynchronous write, which could still be pending.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5915d-188">在 .NET Framework 4 (含) 以前版本中，您必須使用方法 (例如 <xref:System.IO.Stream.BeginWrite%2A> 和 <xref:System.IO.Stream.EndWrite%2A>) 實作非同步 I/O 作業。</span><span class="sxs-lookup"><span data-stu-id="5915d-188">In the .NET Framework 4 and earlier versions, you have to use methods such as <xref:System.IO.Stream.BeginWrite%2A> and <xref:System.IO.Stream.EndWrite%2A> to implement asynchronous I/O operations.</span></span> <span data-ttu-id="5915d-189">這些方法都仍有[!INCLUDE[net_v45](~/includes/net-v45-md.md)]以支援舊版的程式碼; 不過，新的非同步方法，例如<xref:System.IO.Stream.ReadAsync%2A>， <xref:System.IO.Stream.WriteAsync%2A>， <xref:System.IO.Stream.CopyToAsync%2A>，和<xref:System.IO.Stream.FlushAsync%2A>，協助您更輕鬆地實作非同步 I/O 作業。</span><span class="sxs-lookup"><span data-stu-id="5915d-189">These methods are still available in the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] to support legacy code; however, the new async methods, such as <xref:System.IO.Stream.ReadAsync%2A>, <xref:System.IO.Stream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, and <xref:System.IO.Stream.FlushAsync%2A>, help you implement asynchronous I/O operations more easily.</span></span>  
  
 <span data-ttu-id="5915d-190">預設實作`BeginWrite`資料流上呼叫<xref:System.IO.Stream.Write%2A>方法同步執行，這表示`Write`可能會封鎖某些資料流。</span><span class="sxs-lookup"><span data-stu-id="5915d-190">The default implementation of `BeginWrite` on a stream calls the <xref:System.IO.Stream.Write%2A> method synchronously, which means that `Write` might block on some streams.</span></span> <span data-ttu-id="5915d-191">不過，執行個體的類別，例如`FileStream`和`NetworkStream`完全支援非同步作業，如果已經以非同步方式開啟執行個體。</span><span class="sxs-lookup"><span data-stu-id="5915d-191">However, instances of classes such as `FileStream` and `NetworkStream` fully support asynchronous operations if the instances have been opened asynchronously.</span></span> <span data-ttu-id="5915d-192">因此，呼叫`BeginWrite`不會封鎖這些資料流。</span><span class="sxs-lookup"><span data-stu-id="5915d-192">Therefore, calls to `BeginWrite` will not block on those streams.</span></span> <span data-ttu-id="5915d-193">您可以覆寫`BeginWrite`（藉由使用非同步委派，例如） 以提供非同步行為。</span><span class="sxs-lookup"><span data-stu-id="5915d-193">You can override `BeginWrite` (by using async delegates, for example) to provide asynchronous behavior.</span></span>  
  
 <span data-ttu-id="5915d-194">傳遞`IAsyncResult`目前的方法來傳回<xref:System.IO.Stream.EndWrite%2A>以確保寫入完成，並適當地釋放資源。</span><span class="sxs-lookup"><span data-stu-id="5915d-194">Pass the `IAsyncResult` returned by the current method to <xref:System.IO.Stream.EndWrite%2A> to ensure that the write completes and frees resources appropriately.</span></span> <span data-ttu-id="5915d-195"><xref:System.IO.Stream.EndWrite%2A> 必須針對每次呼叫一次呼叫<xref:System.IO.Stream.BeginWrite%2A>。</span><span class="sxs-lookup"><span data-stu-id="5915d-195"><xref:System.IO.Stream.EndWrite%2A> must be called once for every call to <xref:System.IO.Stream.BeginWrite%2A>.</span></span> <span data-ttu-id="5915d-196">您可以使用相同的程式碼呼叫`BeginWrite`或傳遞至回呼`BeginWrite`。</span><span class="sxs-lookup"><span data-stu-id="5915d-196">You can do this either by using the same code that called `BeginWrite` or in a callback passed to `BeginWrite`.</span></span> <span data-ttu-id="5915d-197">如果在非同步寫入期間發生錯誤，將不會擲回例外狀況之前`EndWrite`呼叫`IAsyncResult`這個方法所傳回。</span><span class="sxs-lookup"><span data-stu-id="5915d-197">If an error occurs during an asynchronous write, an exception will not be thrown until `EndWrite` is called with the `IAsyncResult` returned by this method.</span></span>  
  
 <span data-ttu-id="5915d-198">如果資料流是可寫入，寫入資料流的結尾會擴充資料流。</span><span class="sxs-lookup"><span data-stu-id="5915d-198">If a stream is writable, writing at the end of the stream expands the stream.</span></span>  
  
 <span data-ttu-id="5915d-199">當您發出非同步的讀取或寫入 I/O 作業完成時，不更新資料流中目前的位置。</span><span class="sxs-lookup"><span data-stu-id="5915d-199">The current position in the stream is updated when you issue the asynchronous read or write, not when the I/O operation completes.</span></span> <span data-ttu-id="5915d-200">多個同時進行非同步要求轉譯要求完成順序不確定。</span><span class="sxs-lookup"><span data-stu-id="5915d-200">Multiple simultaneous asynchronous requests render the request completion order uncertain.</span></span>  
  
 <span data-ttu-id="5915d-201">使用<xref:System.IO.Stream.CanWrite%2A>屬性來判斷目前的執行個體是否支援寫入。</span><span class="sxs-lookup"><span data-stu-id="5915d-201">Use the <xref:System.IO.Stream.CanWrite%2A> property to determine whether the current instance supports writing.</span></span>  
  
 <span data-ttu-id="5915d-202">如果資料流已關閉，或是您傳遞了無效的引數，會擲回例外狀況立即從`BeginWrite`。</span><span class="sxs-lookup"><span data-stu-id="5915d-202">If a stream is closed or you pass an invalid argument, exceptions are thrown immediately from `BeginWrite`.</span></span> <span data-ttu-id="5915d-203">在非同步寫入要求，例如磁碟失敗期間，在 I/O 要求期間發生的錯誤發生在執行緒集區執行緒，並且呼叫時擲回例外狀況`EndWrite`。</span><span class="sxs-lookup"><span data-stu-id="5915d-203">Errors that occur during an asynchronous write request, such as a disk failure during the I/O request, occur on the thread pool thread and throw exceptions when calling `EndWrite`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="5915d-204">嘗試超出資料流結尾的非同步寫入，或發生磁碟錯誤。</span><span class="sxs-lookup"><span data-stu-id="5915d-204">Attempted an asynchronous write past the end of the stream, or a disk error occurs.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5915d-205">一或多個引數無效。</span><span class="sxs-lookup"><span data-stu-id="5915d-205">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="5915d-206">關閉資料流後呼叫了方法。</span><span class="sxs-lookup"><span data-stu-id="5915d-206">Methods were called after the stream was closed.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="5915d-207">目前的 <see langword="Stream" /> 實作不支援寫入作業。</span><span class="sxs-lookup"><span data-stu-id="5915d-207">The current <see langword="Stream" /> implementation does not support the write operation.</span></span></exception>
        <altmember cref="M:System.IO.Stream.EndWrite(System.IAsyncResult)" />
        <altmember cref="P:System.IO.Stream.CanWrite" />
      </Docs>
    </Member>
    <Member MemberName="CanRead">
      <MemberSignature Language="C#" Value="public abstract bool CanRead { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanRead" />
      <MemberSignature Language="DocId" Value="P:System.IO.Stream.CanRead" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property CanRead As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property bool CanRead { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5915d-208">在衍生類別中覆寫時，取得指示目前的資料流是否支援讀取的數值。</span><span class="sxs-lookup"><span data-stu-id="5915d-208">When overridden in a derived class, gets a value indicating whether the current stream supports reading.</span></span></summary>
        <value>
          <span data-ttu-id="5915d-209">如果資料流支援讀取，則為 <see langword="true" />；否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="5915d-209"><see langword="true" /> if the stream supports reading; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5915d-210">如果類別衍生自<xref:System.IO.Stream>不支援讀取，但呼叫<xref:System.IO.Stream.Read%2A>， <xref:System.IO.Stream.ReadByte%2A>，和<xref:System.IO.Stream.BeginRead%2A>方法會擲回<xref:System.NotSupportedException>。</span><span class="sxs-lookup"><span data-stu-id="5915d-210">If a class derived from <xref:System.IO.Stream> does not support reading, calls to the <xref:System.IO.Stream.Read%2A>, <xref:System.IO.Stream.ReadByte%2A>, and <xref:System.IO.Stream.BeginRead%2A> methods throw a <xref:System.NotSupportedException>.</span></span>  
  
 <span data-ttu-id="5915d-211">如果資料流已關閉，則這個屬性會傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="5915d-211">If the stream is closed, this property returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5915d-212">以下是示範如何使用`CanRead`屬性。</span><span class="sxs-lookup"><span data-stu-id="5915d-212">The following is an example of using the `CanRead` property.</span></span>  
  
 [!code-cpp[Classic FileStream.CanRead Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic FileStream.CanRead Example/CPP/source.cpp#1)]
 [!code-csharp[Classic FileStream.CanRead Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic FileStream.CanRead Example/CS/source.cs#1)]
 [!code-vb[Classic FileStream.CanRead Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic FileStream.CanRead Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSeek">
      <MemberSignature Language="C#" Value="public abstract bool CanSeek { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanSeek" />
      <MemberSignature Language="DocId" Value="P:System.IO.Stream.CanSeek" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property CanSeek As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property bool CanSeek { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5915d-213">在衍生類別中覆寫時，取得指示目前資料流是否支援搜尋的數值。</span><span class="sxs-lookup"><span data-stu-id="5915d-213">When overridden in a derived class, gets a value indicating whether the current stream supports seeking.</span></span></summary>
        <value>
          <span data-ttu-id="5915d-214">如果資料流支援搜尋，則為 <see langword="true" />，否則，為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="5915d-214"><see langword="true" /> if the stream supports seeking; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5915d-215">如果類別衍生自<xref:System.IO.Stream>不支援搜尋，但呼叫<xref:System.IO.Stream.Length%2A>， <xref:System.IO.Stream.SetLength%2A>， <xref:System.IO.Stream.Position%2A>，和<xref:System.IO.Stream.Seek%2A>擲回<xref:System.NotSupportedException>。</span><span class="sxs-lookup"><span data-stu-id="5915d-215">If a class derived from <xref:System.IO.Stream> does not support seeking, calls to <xref:System.IO.Stream.Length%2A>, <xref:System.IO.Stream.SetLength%2A>, <xref:System.IO.Stream.Position%2A>, and <xref:System.IO.Stream.Seek%2A> throw a <xref:System.NotSupportedException>.</span></span>  
  
 <span data-ttu-id="5915d-216">如果資料流已關閉，則這個屬性會傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="5915d-216">If the stream is closed, this property returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanTimeout">
      <MemberSignature Language="C#" Value="public virtual bool CanTimeout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanTimeout" />
      <MemberSignature Language="DocId" Value="P:System.IO.Stream.CanTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CanTimeout As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanTimeout { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5915d-217">取得值，該值判斷目前的資料流是否可以逾時。</span><span class="sxs-lookup"><span data-stu-id="5915d-217">Gets a value that determines whether the current stream can time out.</span></span></summary>
        <value><span data-ttu-id="5915d-218">值，判斷目前的資料流是否可以逾時。</span><span class="sxs-lookup"><span data-stu-id="5915d-218">A value that determines whether the current stream can time out.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5915d-219"><xref:System.IO.Stream.CanTimeout%2A> 屬性一定會傳回 `false`。</span><span class="sxs-lookup"><span data-stu-id="5915d-219">The <xref:System.IO.Stream.CanTimeout%2A> property always returns `false`.</span></span> <span data-ttu-id="5915d-220">某些資料流實作需要不同的行為，例如<xref:System.Net.Sockets.NetworkStream>，如果網路連線已中斷或遺失的逾時。</span><span class="sxs-lookup"><span data-stu-id="5915d-220">Some stream implementations require different behavior, such as <xref:System.Net.Sockets.NetworkStream>, which times out if network connectivity is interrupted or lost.</span></span> <span data-ttu-id="5915d-221">如果您要實作資料流，必須要能夠逾時，這個屬性應該覆寫來傳回`true`。</span><span class="sxs-lookup"><span data-stu-id="5915d-221">If you are implementing a stream that must be able to time out, this property should be overridden to return `true`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.IO.Stream.ReadTimeout" />
        <altmember cref="P:System.IO.Stream.WriteTimeout" />
      </Docs>
    </Member>
    <Member MemberName="CanWrite">
      <MemberSignature Language="C#" Value="public abstract bool CanWrite { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanWrite" />
      <MemberSignature Language="DocId" Value="P:System.IO.Stream.CanWrite" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property CanWrite As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property bool CanWrite { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5915d-222">在衍生類別中覆寫時，取得指示目前資料流是否支援寫入的數值。</span><span class="sxs-lookup"><span data-stu-id="5915d-222">When overridden in a derived class, gets a value indicating whether the current stream supports writing.</span></span></summary>
        <value>
          <span data-ttu-id="5915d-223">如果資料流支援寫入，則為 <see langword="true" />；否則，為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="5915d-223"><see langword="true" /> if the stream supports writing; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5915d-224">如果類別衍生自<xref:System.IO.Stream>不支援寫入，呼叫<xref:System.IO.Stream.Write%2A>， <xref:System.IO.Stream.BeginWrite%2A>，或<xref:System.IO.Stream.WriteByte%2A>會擲回<xref:System.NotSupportedException>。</span><span class="sxs-lookup"><span data-stu-id="5915d-224">If a class derived from <xref:System.IO.Stream> does not support writing, a call to <xref:System.IO.Stream.Write%2A>, <xref:System.IO.Stream.BeginWrite%2A>, or <xref:System.IO.Stream.WriteByte%2A> throws a <xref:System.NotSupportedException>.</span></span>  
  
 <span data-ttu-id="5915d-225">如果資料流已關閉，則這個屬性會傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="5915d-225">If the stream is closed, this property returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5915d-226">以下是示範如何使用`CanWrite`屬性。</span><span class="sxs-lookup"><span data-stu-id="5915d-226">The following is an example of using the `CanWrite` property.</span></span>  
  
 [!code-cpp[Classic Stream.CanWrite Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Stream.CanWrite Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Stream.CanWrite Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Stream.CanWrite Example/CS/source.cs#1)]
 [!code-vb[Classic Stream.CanWrite Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Stream.CanWrite Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public virtual void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5915d-227">關閉目前資料流和釋放與目前資料流相關聯的任何資源 (例如通訊端和檔案控制代碼)。</span><span class="sxs-lookup"><span data-stu-id="5915d-227">Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream.</span></span> <span data-ttu-id="5915d-228">請確定正確地處置資料流，而非呼叫這個方法。</span><span class="sxs-lookup"><span data-stu-id="5915d-228">Instead of calling this method, ensure that the stream is properly disposed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5915d-229">這個方法會呼叫<xref:System.IO.Stream.Dispose%2A>，並指定`true`釋放所有資源。</span><span class="sxs-lookup"><span data-stu-id="5915d-229">This method calls <xref:System.IO.Stream.Dispose%2A>, specifying `true` to release all resources.</span></span> <span data-ttu-id="5915d-230">您不需要特別呼叫<xref:System.IO.Stream.Close%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="5915d-230">You do not have to specifically call the <xref:System.IO.Stream.Close%2A> method.</span></span> <span data-ttu-id="5915d-231">相反地，請確認每個<xref:System.IO.Stream>適當處置物件。</span><span class="sxs-lookup"><span data-stu-id="5915d-231">Instead, ensure that every <xref:System.IO.Stream> object is properly disposed.</span></span> <span data-ttu-id="5915d-232">您可以宣告<xref:System.IO.Stream>物件內`using`區塊 (或`Using`封鎖在 Visual Basic 中)，確保可處置的資料流和其所有資源，或您可以明確地呼叫<xref:System.IO.Stream.Dispose%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="5915d-232">You can declare <xref:System.IO.Stream> objects within a `using` block (or `Using` block in Visual Basic) to ensure that the stream and all of its resources are disposed, or you can explicitly call the <xref:System.IO.Stream.Dispose%2A> method.</span></span>  
  
 <span data-ttu-id="5915d-233">除非您明確呼叫的實作並清除資料流不會清除它的基礎編碼器<xref:System.IO.Stream.Flush%2A>或`Close`。</span><span class="sxs-lookup"><span data-stu-id="5915d-233">Flushing the stream will not flush its underlying encoder unless you explicitly call an implementation of <xref:System.IO.Stream.Flush%2A> or `Close`.</span></span> <span data-ttu-id="5915d-234">設定<xref:System.IO.StreamWriter.AutoFlush%2A>至`true`表示從緩衝區資料流，清除資料，但並不會清除編碼器狀態。</span><span class="sxs-lookup"><span data-stu-id="5915d-234">Setting <xref:System.IO.StreamWriter.AutoFlush%2A> to `true` means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed.</span></span> <span data-ttu-id="5915d-235">這可讓編碼器將保存其狀態 （部分字元），讓它可以正確編碼字元的下一個區塊。</span><span class="sxs-lookup"><span data-stu-id="5915d-235">This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly.</span></span> <span data-ttu-id="5915d-236">這種情況下會影響 UTF8 及 UTF7 其中編碼某些字元才編碼器接收或多個相鄰的字元。</span><span class="sxs-lookup"><span data-stu-id="5915d-236">This scenario affects UTF8 and UTF7 where certain characters can be encoded only after the encoder receives the adjacent character or characters.</span></span>  
  
 <span data-ttu-id="5915d-237">嘗試將資料流關閉之後，管理資料流可能會擲回<xref:System.ObjectDisposedException>。</span><span class="sxs-lookup"><span data-stu-id="5915d-237">Attempts to manipulate the stream after the stream has been closed might throw an <xref:System.ObjectDisposedException>.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="5915d-238">在衍生類別中，不會覆寫<see cref="M:System.IO.Stream.Close" />方法，而是將所有<see langword="Stream" />中的清除邏輯<see cref="M:System.IO.Stream.Dispose(System.Boolean)" />方法。</span><span class="sxs-lookup"><span data-stu-id="5915d-238">In derived classes, do not override the <see cref="M:System.IO.Stream.Close" /> method, instead, put all of the <see langword="Stream" /> cleanup logic in the <see cref="M:System.IO.Stream.Dispose(System.Boolean)" /> method.</span></span> <span data-ttu-id="5915d-239">如需詳細資訊，請參閱[實作 Dispose 方法](~/docs/standard/garbage-collection/implementing-dispose.md)。</span><span class="sxs-lookup"><span data-stu-id="5915d-239">For more information, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span></para>
        </block>
      </Docs>
    </Member>
    <MemberGroup MemberName="CopyTo">
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="5915d-240">從目前資料流讀取位元組，並將其寫入另一個資料流中。</span><span class="sxs-lookup"><span data-stu-id="5915d-240">Reads the bytes from the current stream and writes them to another stream.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (System.IO.Stream destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(class System.IO.Stream destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.CopyTo(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (destination As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(System::IO::Stream ^ destination);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="5915d-241">目前資料流的內容將複製到其中的資料流。</span><span class="sxs-lookup"><span data-stu-id="5915d-241">The stream to which the contents of the current stream will be copied.</span></span></param>
        <summary><span data-ttu-id="5915d-242">從目前資料流讀取位元組，並將其寫入另一個資料流中。</span><span class="sxs-lookup"><span data-stu-id="5915d-242">Reads the bytes from the current stream and writes them to another stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5915d-243">複製目前的資料流中的目前位置開始，並複製作業完成之後，不重設目的地資料流的位置。</span><span class="sxs-lookup"><span data-stu-id="5915d-243">Copying begins at the current position in the current stream, and does not reset the position of the destination stream after the copy operation is complete.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5915d-244">下列範例會將複製的內容<xref:System.IO.FileStream>至<xref:System.IO.MemoryStream>。</span><span class="sxs-lookup"><span data-stu-id="5915d-244">The following example copies the contents of a <xref:System.IO.FileStream> to a <xref:System.IO.MemoryStream>.</span></span>  
  
 [!code-csharp[System.IO.Stream.CopyTo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.stream.copyto/cs/program.cs#1)]
 [!code-vb[System.IO.Stream.CopyTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.stream.copyto/vb/program.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5915d-245"><paramref name="destination" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="5915d-245"><paramref name="destination" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="5915d-246">目前的資料流不支援讀取。</span><span class="sxs-lookup"><span data-stu-id="5915d-246">The current stream does not support reading.</span></span>  
  
 <span data-ttu-id="5915d-247">-或-</span><span class="sxs-lookup"><span data-stu-id="5915d-247">-or-</span></span>  
  
 <span data-ttu-id="5915d-248"><paramref name="destination" /> 不支援寫入。</span><span class="sxs-lookup"><span data-stu-id="5915d-248"><paramref name="destination" /> does not support writing.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="5915d-249">目前資料流或 <paramref name="destination" /> 已經在呼叫 <see cref="M:System.IO.Stream.CopyTo(System.IO.Stream)" /> 方法之前關閉。</span><span class="sxs-lookup"><span data-stu-id="5915d-249">Either the current stream or <paramref name="destination" /> were closed before the <see cref="M:System.IO.Stream.CopyTo(System.IO.Stream)" /> method was called.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="5915d-250">發生 I/O 錯誤。</span><span class="sxs-lookup"><span data-stu-id="5915d-250">An I/O error occurred.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (System.IO.Stream destination, int bufferSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(class System.IO.Stream destination, int32 bufferSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (destination As Stream, bufferSize As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(System::IO::Stream ^ destination, int bufferSize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.IO.Stream" />
        <Parameter Name="bufferSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="5915d-251">目前資料流的內容將複製到其中的資料流。</span><span class="sxs-lookup"><span data-stu-id="5915d-251">The stream to which the contents of the current stream will be copied.</span></span></param>
        <param name="bufferSize"><span data-ttu-id="5915d-252">緩衝區的大小。</span><span class="sxs-lookup"><span data-stu-id="5915d-252">The size of the buffer.</span></span> <span data-ttu-id="5915d-253">這個值必須大於零。</span><span class="sxs-lookup"><span data-stu-id="5915d-253">This value must be greater than zero.</span></span> <span data-ttu-id="5915d-254">預設大小為 81920。</span><span class="sxs-lookup"><span data-stu-id="5915d-254">The default size is 81920.</span></span></param>
        <summary><span data-ttu-id="5915d-255">使用指定的緩衝區大小，從目前資料流讀取所有位元組，並將其寫入另一個資料流中。</span><span class="sxs-lookup"><span data-stu-id="5915d-255">Reads the bytes from the current stream and writes them to another stream, using a specified buffer size.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5915d-256">複製目前的資料流中的目前位置開始，並複製作業完成之後，不重設目的地資料流的位置。</span><span class="sxs-lookup"><span data-stu-id="5915d-256">Copying begins at the current position in the current stream, and does not reset the position of the destination stream after the copy operation is complete.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5915d-257"><paramref name="destination" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="5915d-257"><paramref name="destination" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="5915d-258"><paramref name="bufferSize" /> 為負值或零。</span><span class="sxs-lookup"><span data-stu-id="5915d-258"><paramref name="bufferSize" /> is negative or zero.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="5915d-259">目前的資料流不支援讀取。</span><span class="sxs-lookup"><span data-stu-id="5915d-259">The current stream does not support reading.</span></span>  
  
 <span data-ttu-id="5915d-260">-或-</span><span class="sxs-lookup"><span data-stu-id="5915d-260">-or-</span></span>  
  
 <span data-ttu-id="5915d-261"><paramref name="destination" /> 不支援寫入。</span><span class="sxs-lookup"><span data-stu-id="5915d-261"><paramref name="destination" /> does not support writing.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="5915d-262">目前資料流或 <paramref name="destination" /> 已經在呼叫 <see cref="M:System.IO.Stream.CopyTo(System.IO.Stream)" /> 方法之前關閉。</span><span class="sxs-lookup"><span data-stu-id="5915d-262">Either the current stream or <paramref name="destination" /> were closed before the <see cref="M:System.IO.Stream.CopyTo(System.IO.Stream)" /> method was called.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="5915d-263">發生 I/O 錯誤。</span><span class="sxs-lookup"><span data-stu-id="5915d-263">An I/O error occurred.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="CopyToAsync">
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="5915d-264">以非同步的方式從目前資料流讀取所有位元組，並將其寫入另一個資料流中。</span><span class="sxs-lookup"><span data-stu-id="5915d-264">Asynchronously reads the bytes from the current stream and writes them to another stream.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CopyToAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task CopyToAsync (System.IO.Stream destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task CopyToAsync(class System.IO.Stream destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.CopyToAsync(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Function CopyToAsync (destination As Stream) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ CopyToAsync(System::IO::Stream ^ destination);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="5915d-265">目前資料流的內容將複製到其中的資料流。</span><span class="sxs-lookup"><span data-stu-id="5915d-265">The stream to which the contents of the current stream will be copied.</span></span></param>
        <summary><span data-ttu-id="5915d-266">以非同步的方式從目前資料流讀取所有位元組，並將其寫入另一個資料流中。</span><span class="sxs-lookup"><span data-stu-id="5915d-266">Asynchronously reads the bytes from the current stream and writes them to another stream.</span></span></summary>
        <returns><span data-ttu-id="5915d-267">表示非同步複製作業的工作。</span><span class="sxs-lookup"><span data-stu-id="5915d-267">A task that represents the asynchronous copy operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5915d-268"><xref:System.IO.Stream.CopyToAsync%2A>方法可讓您執行需要大量資源的 I/O 作業，而不會封鎖主執行緒。</span><span class="sxs-lookup"><span data-stu-id="5915d-268">The <xref:System.IO.Stream.CopyToAsync%2A> method enables you to perform resource-intensive I/O operations without blocking the main thread.</span></span> <span data-ttu-id="5915d-269">這項效能考量對於 [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] 應用程式或 [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] 應用程式而言特別重要，尤其是針對耗時的資料流作業可能會阻礙 UI 執行緒，使應用程式看起來像是停止運作的情況。</span><span class="sxs-lookup"><span data-stu-id="5915d-269">This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</span></span> <span data-ttu-id="5915d-270">非同步方法會用於搭配`async`和`await`Visual Basic 和 C# 中的關鍵字。</span><span class="sxs-lookup"><span data-stu-id="5915d-270">The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#.</span></span>  
  
 <span data-ttu-id="5915d-271">開始複製的目前資料流中目前的位置。</span><span class="sxs-lookup"><span data-stu-id="5915d-271">Copying begins at the current position in the current stream.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5915d-272">下列範例示範如何使用兩個<xref:System.IO.FileStream>將以非同步方式從某個目錄的檔案複製到另一個物件。</span><span class="sxs-lookup"><span data-stu-id="5915d-272">The following example demonstrates how to use two <xref:System.IO.FileStream> objects to asynchronously copy the files from one directory to another.</span></span> <span data-ttu-id="5915d-273"><xref:System.IO.FileStream> 類別衍生自 <xref:System.IO.Stream> 類別。</span><span class="sxs-lookup"><span data-stu-id="5915d-273">The <xref:System.IO.FileStream> class derives from the <xref:System.IO.Stream> class.</span></span>  <span data-ttu-id="5915d-274">請注意，<xref:System.Web.UI.WebControls.Button.Click>事件處理常式<xref:System.Windows.Controls.Button>控制項以標記`async`修飾詞因為它會呼叫非同步方法</span><span class="sxs-lookup"><span data-stu-id="5915d-274">Notice that the <xref:System.Web.UI.WebControls.Button.Click> event handler for the <xref:System.Windows.Controls.Button> control is marked with the `async` modifier because it calls an asynchronous method</span></span>  
  
 [!code-csharp[Asynchronous_File_IO_async#1](~/samples/snippets/csharp/VS_Snippets_CLR/Asynchronous_File_IO_async/cs/example.cs#1)]
 [!code-vb[Asynchronous_File_IO_async#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Asynchronous_File_IO_async/vb/example.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5915d-275"><paramref name="destination" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="5915d-275"><paramref name="destination" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="5915d-276">目前資料流或目的資料流已處置。</span><span class="sxs-lookup"><span data-stu-id="5915d-276">Either the current stream or the destination stream is disposed.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="5915d-277">目前資料流不支援讀取，或目的資料流不支援寫入。</span><span class="sxs-lookup"><span data-stu-id="5915d-277">The current stream does not support reading, or the destination stream does not support writing.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CopyToAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task CopyToAsync (System.IO.Stream destination, int bufferSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task CopyToAsync(class System.IO.Stream destination, int32 bufferSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function CopyToAsync (destination As Stream, bufferSize As Integer) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ CopyToAsync(System::IO::Stream ^ destination, int bufferSize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.IO.Stream" />
        <Parameter Name="bufferSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="5915d-278">目前資料流的內容將複製到其中的資料流。</span><span class="sxs-lookup"><span data-stu-id="5915d-278">The stream to which the contents of the current stream will be copied.</span></span></param>
        <param name="bufferSize"><span data-ttu-id="5915d-279">緩衝區的大小 (以位元組為單位)。</span><span class="sxs-lookup"><span data-stu-id="5915d-279">The size, in bytes, of the buffer.</span></span> <span data-ttu-id="5915d-280">這個值必須大於零。</span><span class="sxs-lookup"><span data-stu-id="5915d-280">This value must be greater than zero.</span></span> <span data-ttu-id="5915d-281">預設大小為 81920。</span><span class="sxs-lookup"><span data-stu-id="5915d-281">The default size is 81920.</span></span></param>
        <summary><span data-ttu-id="5915d-282">使用指定的緩衝區大小，以非同步的方式從目前資料流讀取所有位元組，並將其寫入另一個資料流中。</span><span class="sxs-lookup"><span data-stu-id="5915d-282">Asynchronously reads the bytes from the current stream and writes them to another stream, using a specified buffer size.</span></span></summary>
        <returns><span data-ttu-id="5915d-283">表示非同步複製作業的工作。</span><span class="sxs-lookup"><span data-stu-id="5915d-283">A task that represents the asynchronous copy operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5915d-284"><xref:System.IO.Stream.CopyToAsync%2A>方法可讓您執行需要大量資源的 I/O 作業，而不會封鎖主執行緒。</span><span class="sxs-lookup"><span data-stu-id="5915d-284">The <xref:System.IO.Stream.CopyToAsync%2A> method enables you to perform resource-intensive I/O operations without blocking the main thread.</span></span> <span data-ttu-id="5915d-285">這項效能考量對於 [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] 應用程式或 [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] 應用程式而言特別重要，尤其是針對耗時的資料流作業可能會阻礙 UI 執行緒，使應用程式看起來像是停止運作的情況。</span><span class="sxs-lookup"><span data-stu-id="5915d-285">This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</span></span> <span data-ttu-id="5915d-286">非同步方法會用於搭配`async`和`await`Visual Basic 和 C# 中的關鍵字。</span><span class="sxs-lookup"><span data-stu-id="5915d-286">The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#.</span></span>  
  
 <span data-ttu-id="5915d-287">開始複製的目前資料流中目前的位置。</span><span class="sxs-lookup"><span data-stu-id="5915d-287">Copying begins at the current position in the current stream.</span></span>  
  
 <span data-ttu-id="5915d-288">如需兩個資料流之間進行複製的範例，請參閱<xref:System.IO.Stream.CopyToAsync%28System.IO.Stream%29>多載。</span><span class="sxs-lookup"><span data-stu-id="5915d-288">For an example of copying between two streams, see the <xref:System.IO.Stream.CopyToAsync%28System.IO.Stream%29> overload.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5915d-289"><paramref name="destination" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="5915d-289"><paramref name="destination" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="5915d-290"><paramref name="buffersize" /> 為負值或零。</span><span class="sxs-lookup"><span data-stu-id="5915d-290"><paramref name="buffersize" /> is negative or zero.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="5915d-291">目前資料流或目的資料流已處置。</span><span class="sxs-lookup"><span data-stu-id="5915d-291">Either the current stream or the destination stream is disposed.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="5915d-292">目前資料流不支援讀取，或目的資料流不支援寫入。</span><span class="sxs-lookup"><span data-stu-id="5915d-292">The current stream does not support reading, or the destination stream does not support writing.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CopyToAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task CopyToAsync (System.IO.Stream destination, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task CopyToAsync(class System.IO.Stream destination, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ CopyToAsync(System::IO::Stream ^ destination, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.IO.Stream" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="destination">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyToAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task CopyToAsync (System.IO.Stream destination, int bufferSize, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task CopyToAsync(class System.IO.Stream destination, int32 bufferSize, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ CopyToAsync(System::IO::Stream ^ destination, int bufferSize, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.IO.Stream" />
        <Parameter Name="bufferSize" Type="System.Int32" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="5915d-293">目前資料流的內容將複製到其中的資料流。</span><span class="sxs-lookup"><span data-stu-id="5915d-293">The stream to which the contents of the current stream will be copied.</span></span></param>
        <param name="bufferSize"><span data-ttu-id="5915d-294">緩衝區的大小 (以位元組為單位)。</span><span class="sxs-lookup"><span data-stu-id="5915d-294">The size, in bytes, of the buffer.</span></span> <span data-ttu-id="5915d-295">這個值必須大於零。</span><span class="sxs-lookup"><span data-stu-id="5915d-295">This value must be greater than zero.</span></span> <span data-ttu-id="5915d-296">預設大小為 81920。</span><span class="sxs-lookup"><span data-stu-id="5915d-296">The default size is 81920.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="5915d-297">用來監視是否有取消要求的語彙基元。</span><span class="sxs-lookup"><span data-stu-id="5915d-297">The token to monitor for cancellation requests.</span></span> <span data-ttu-id="5915d-298">預設值是 <see cref="P:System.Threading.CancellationToken.None" />。</span><span class="sxs-lookup"><span data-stu-id="5915d-298">The default value is <see cref="P:System.Threading.CancellationToken.None" />.</span></span></param>
        <summary><span data-ttu-id="5915d-299">使用指定的緩衝區大小和取消語彙基元，以非同步的方式從目前資料流讀取位元組，並將其寫入另一個資料流。</span><span class="sxs-lookup"><span data-stu-id="5915d-299">Asynchronously reads the bytes from the current stream and writes them to another stream, using a specified buffer size and cancellation token.</span></span></summary>
        <returns><span data-ttu-id="5915d-300">表示非同步複製作業的工作。</span><span class="sxs-lookup"><span data-stu-id="5915d-300">A task that represents the asynchronous copy operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5915d-301"><xref:System.IO.Stream.CopyToAsync%2A>方法可讓您執行需要大量資源的 I/O 作業，而不會封鎖主執行緒。</span><span class="sxs-lookup"><span data-stu-id="5915d-301">The <xref:System.IO.Stream.CopyToAsync%2A> method enables you to perform resource-intensive I/O operations without blocking the main thread.</span></span> <span data-ttu-id="5915d-302">這項效能考量對於 [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] 應用程式或 [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] 應用程式而言特別重要，尤其是針對耗時的資料流作業可能會阻礙 UI 執行緒，使應用程式看起來像是停止運作的情況。</span><span class="sxs-lookup"><span data-stu-id="5915d-302">This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</span></span> <span data-ttu-id="5915d-303">非同步方法會用於搭配`async`和`await`Visual Basic 和 C# 中的關鍵字。</span><span class="sxs-lookup"><span data-stu-id="5915d-303">The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#.</span></span>  
  
 <span data-ttu-id="5915d-304">如果在作業完成之前將其取消，則傳回的工作包含<xref:System.Threading.Tasks.TaskStatus.Canceled>值<xref:System.Threading.Tasks.Task.Status%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="5915d-304">If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus.Canceled> value for the <xref:System.Threading.Tasks.Task.Status%2A> property.</span></span>  
  
 <span data-ttu-id="5915d-305">開始複製的目前資料流中目前的位置。</span><span class="sxs-lookup"><span data-stu-id="5915d-305">Copying begins at the current position in the current stream.</span></span>  
  
 <span data-ttu-id="5915d-306">如需兩個資料流之間進行複製的範例，請參閱<xref:System.IO.Stream.CopyToAsync%28System.IO.Stream%29>多載。</span><span class="sxs-lookup"><span data-stu-id="5915d-306">For an example of copying between two streams, see the <xref:System.IO.Stream.CopyToAsync%28System.IO.Stream%29> overload.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5915d-307"><paramref name="destination" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="5915d-307"><paramref name="destination" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="5915d-308"><paramref name="buffersize" /> 為負值或零。</span><span class="sxs-lookup"><span data-stu-id="5915d-308"><paramref name="buffersize" /> is negative or zero.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="5915d-309">目前資料流或目的資料流已處置。</span><span class="sxs-lookup"><span data-stu-id="5915d-309">Either the current stream or the destination stream is disposed.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="5915d-310">目前資料流不支援讀取，或目的資料流不支援寫入。</span><span class="sxs-lookup"><span data-stu-id="5915d-310">The current stream does not support reading, or the destination stream does not support writing.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CreateWaitHandle">
      <MemberSignature Language="C#" Value="protected virtual System.Threading.WaitHandle CreateWaitHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Threading.WaitHandle CreateWaitHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.CreateWaitHandle" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateWaitHandle () As WaitHandle" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Threading::WaitHandle ^ CreateWaitHandle();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("CreateWaitHandle will be removed eventually.  Please use "new ManualResetEvent(false)" instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.WaitHandle</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5915d-311">配置 <see cref="T:System.Threading.WaitHandle" /> 物件。</span><span class="sxs-lookup"><span data-stu-id="5915d-311">Allocates a <see cref="T:System.Threading.WaitHandle" /> object.</span></span></summary>
        <returns><span data-ttu-id="5915d-312">所配置 <see langword="WaitHandle" /> 的參考。</span><span class="sxs-lookup"><span data-stu-id="5915d-312">A reference to the allocated <see langword="WaitHandle" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5915d-313">針對第一次呼叫時，目前的方法會建立`WaitHandle`物件，並傳回它。</span><span class="sxs-lookup"><span data-stu-id="5915d-313">When called for the first time, the current method creates a `WaitHandle` object and returns it.</span></span> <span data-ttu-id="5915d-314">在後續呼叫，`CreateWaitHandle`傳回新的等候控制代碼的參考。</span><span class="sxs-lookup"><span data-stu-id="5915d-314">On subsequent calls, `CreateWaitHandle` returns a reference to a new wait handle.</span></span>  
  
 <span data-ttu-id="5915d-315">使用這個方法，如果您實作非同步方法，並要求中封鎖使用這種<xref:System.IO.Stream.EndRead%2A>或<xref:System.IO.Stream.EndWrite%2A>直到非同步作業完成為止。</span><span class="sxs-lookup"><span data-stu-id="5915d-315">Use this method if you implement the asynchronous methods and require a way of blocking in <xref:System.IO.Stream.EndRead%2A> or <xref:System.IO.Stream.EndWrite%2A> until the asynchronous operation is complete.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="5915d-316">釋放由 <see cref="T:System.IO.Stream" /> 物件使用的所有資源。</span><span class="sxs-lookup"><span data-stu-id="5915d-316">Releases all resources used by the <see cref="T:System.IO.Stream" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5915d-317">釋放 <see cref="T:System.IO.Stream" /> 所使用的所有資源。</span><span class="sxs-lookup"><span data-stu-id="5915d-317">Releases all resources used by the <see cref="T:System.IO.Stream" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5915d-318">這個方法會處置資料流，寫入備份存放區中的任何變更，關閉資料流釋放資源。</span><span class="sxs-lookup"><span data-stu-id="5915d-318">This method disposes the stream, by writing any changes to the backing store and closing the stream to release resources.</span></span>  
  
 <span data-ttu-id="5915d-319">呼叫`Dispose`允許所使用的資源<xref:System.IO.Stream>都重新配置用於其他用途。</span><span class="sxs-lookup"><span data-stu-id="5915d-319">Calling `Dispose` allows the resources used by the <xref:System.IO.Stream> to be reallocated for other purposes.</span></span> <span data-ttu-id="5915d-320">如需有關`Dispose`，請參閱[清除 Unmanaged 資源上](~/docs/standard/garbage-collection/unmanaged.md)。</span><span class="sxs-lookup"><span data-stu-id="5915d-320">For more information about `Dispose`, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="5915d-321">將資料流物件中所有的清除邏輯<see cref="M:System.IO.Stream.Dispose(System.Boolean)" />。</span><span class="sxs-lookup"><span data-stu-id="5915d-321">Place all cleanup logic for your stream object in <see cref="M:System.IO.Stream.Dispose(System.Boolean)" />.</span></span> <span data-ttu-id="5915d-322">不會覆寫<see cref="M:System.IO.Stream.Close" />。</span><span class="sxs-lookup"><span data-stu-id="5915d-322">Do not override <see cref="M:System.IO.Stream.Close" />.</span></span>  
  
 <span data-ttu-id="5915d-323">請注意，基於回溯相容性需求，這個方法的實作不同的處置模式為建議的指引。</span><span class="sxs-lookup"><span data-stu-id="5915d-323">Note that because of backward compatibility requirements, this method's implementation differs from the recommended guidance for the Dispose pattern.</span></span>  <span data-ttu-id="5915d-324">這個方法會呼叫<see cref="M:System.IO.Stream.Close" />，然後呼叫<see cref="M:System.IO.Stream.Dispose(System.Boolean)" />。</span><span class="sxs-lookup"><span data-stu-id="5915d-324">This method calls <see cref="M:System.IO.Stream.Close" />, which then calls <see cref="M:System.IO.Stream.Dispose(System.Boolean)" />.</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="5915d-325"><see langword="true" /> 表示釋放 Managed 和 Unmanaged 資源，<see langword="false" /> 則表示只釋放 Unmanaged 資源。</span><span class="sxs-lookup"><span data-stu-id="5915d-325"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="5915d-326">釋放 <see cref="T:System.IO.Stream" /> 所使用的 Unmanaged 資源，並選擇性地釋放 Managed 資源。</span><span class="sxs-lookup"><span data-stu-id="5915d-326">Releases the unmanaged resources used by the <see cref="T:System.IO.Stream" /> and optionally releases the managed resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5915d-327">您必須釋放所有資源，藉由指定`true`如`disposing`。</span><span class="sxs-lookup"><span data-stu-id="5915d-327">You should release all resources by specifying `true` for `disposing`.</span></span> <span data-ttu-id="5915d-328">當`disposing`是`true`，資料流也可以確保資料排清基礎的緩衝區，並存取其他最終處理物件。</span><span class="sxs-lookup"><span data-stu-id="5915d-328">When `disposing` is `true`, the stream can also ensure data is flushed to the underlying buffer, and access other finalizable objects.</span></span>  <span data-ttu-id="5915d-329">這不可能時呼叫來自完成項，因為缺乏完成項的順序。</span><span class="sxs-lookup"><span data-stu-id="5915d-329">This may not be possible when called from a finalizer due a lack of ordering among finalizers.</span></span>  
  
 <span data-ttu-id="5915d-330">如果您的資料流正在使用作業系統的控制代碼與它的來源進行通訊，請考慮使用的子類別<xref:System.Runtime.InteropServices.SafeHandle>針對此目的。</span><span class="sxs-lookup"><span data-stu-id="5915d-330">If your stream is using an operating system handle to communicate with its source, consider using a subclass of <xref:System.Runtime.InteropServices.SafeHandle> for this purpose.</span></span>  
  
 <span data-ttu-id="5915d-331">這個方法會呼叫公用<xref:System.ComponentModel.Component.Dispose%2A>方法和<xref:System.Object.Finalize%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="5915d-331">This method is called by the public <xref:System.ComponentModel.Component.Dispose%2A> method and the <xref:System.Object.Finalize%2A> method.</span></span> <span data-ttu-id="5915d-332"><xref:System.ComponentModel.Component.Dispose%2A> 叫用受保護<xref:System.IO.Stream.Dispose%2A>方法`disposing`參數設定為`true`。</span><span class="sxs-lookup"><span data-stu-id="5915d-332"><xref:System.ComponentModel.Component.Dispose%2A> invokes the protected <xref:System.IO.Stream.Dispose%2A> method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="5915d-333"><xref:System.Object.Finalize%2A> 叫用<xref:System.IO.Stream.Dispose%2A>與`disposing`設`false`。</span><span class="sxs-lookup"><span data-stu-id="5915d-333"><xref:System.Object.Finalize%2A> invokes <xref:System.IO.Stream.Dispose%2A> with `disposing` set to `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="5915d-334">在衍生類別中，不會覆寫<see cref="M:System.IO.Stream.Close" />方法，而是將所有的資料流清除邏輯<see cref="M:System.IO.Stream.Dispose(System.Boolean)" />方法。</span><span class="sxs-lookup"><span data-stu-id="5915d-334">In derived classes, do not override the <see cref="M:System.IO.Stream.Close" /> method, instead, put all of the Stream cleanup logic in the <see cref="M:System.IO.Stream.Dispose(System.Boolean)" /> method.</span></span>  
  
 <span data-ttu-id="5915d-335"><see cref="M:System.ComponentModel.Component.Dispose" /> 可以被其他物件呼叫多次。</span><span class="sxs-lookup"><span data-stu-id="5915d-335"><see cref="M:System.ComponentModel.Component.Dispose" /> can be called multiple times by other objects.</span></span> <span data-ttu-id="5915d-336">覆寫 <see cref="M:System.IO.Stream.Dispose(System.Boolean)" /> 時，請小心不要參考到先前已在對 <see cref="M:System.ComponentModel.Component.Dispose" /> 的早期呼叫中被處置 (Dispose) 的物件。</span><span class="sxs-lookup"><span data-stu-id="5915d-336">When overriding <see cref="M:System.IO.Stream.Dispose(System.Boolean)" />, be careful not to reference objects that have been previously disposed of in an earlier call to <see cref="M:System.ComponentModel.Component.Dispose" />.</span></span> <span data-ttu-id="5915d-337">如需有關如何實作<see cref="M:System.IO.Stream.Dispose(System.Boolean)" />，請參閱[實作 Dispose 方法](~/docs/standard/garbage-collection/implementing-dispose.md)。</span><span class="sxs-lookup"><span data-stu-id="5915d-337">For more information about how to implement <see cref="M:System.IO.Stream.Dispose(System.Boolean)" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
 <span data-ttu-id="5915d-338">如需有關<see cref="M:System.ComponentModel.Component.Dispose" />和<see cref="M:System.Object.Finalize" />，請參閱[清除 Unmanaged 資源上](~/docs/standard/garbage-collection/unmanaged.md)。</span><span class="sxs-lookup"><span data-stu-id="5915d-338">For more information about <see cref="M:System.ComponentModel.Component.Dispose" /> and <see cref="M:System.Object.Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="EndRead">
      <MemberSignature Language="C#" Value="public virtual int EndRead (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 EndRead(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.EndRead(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function EndRead (asyncResult As IAsyncResult) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int EndRead(IAsyncResult ^ asyncResult);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="5915d-339">要完成的擱置中非同步要求的參考。</span><span class="sxs-lookup"><span data-stu-id="5915d-339">The reference to the pending asynchronous request to finish.</span></span></param>
        <summary><span data-ttu-id="5915d-340">等候暫止的非同步讀取完成。</span><span class="sxs-lookup"><span data-stu-id="5915d-340">Waits for the pending asynchronous read to complete.</span></span> <span data-ttu-id="5915d-341">(請考慮用 <see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)" /> 替代。)</span><span class="sxs-lookup"><span data-stu-id="5915d-341">(Consider using <see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)" /> instead.)</span></span></summary>
        <returns><span data-ttu-id="5915d-342">從資料流讀取的位元組數，位於零 (0) 和您所要求的位元組數之間。</span><span class="sxs-lookup"><span data-stu-id="5915d-342">The number of bytes read from the stream, between zero (0) and the number of bytes you requested.</span></span> <span data-ttu-id="5915d-343">資料流只在資料流結尾傳回零 (0)，否則，它們應該封鎖，直到至少有一個位元組可用為止。</span><span class="sxs-lookup"><span data-stu-id="5915d-343">Streams return zero (0) only at the end of the stream, otherwise, they should block until at least one byte is available.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5915d-344">在 .NET Framework 4 (含) 以前版本中，您必須使用方法 (例如 <xref:System.IO.Stream.BeginRead%2A> 和 <xref:System.IO.Stream.EndRead%2A> ) 實作非同步 I/O 作業。</span><span class="sxs-lookup"><span data-stu-id="5915d-344">In the .NET Framework 4 and earlier versions, you have to use methods such as <xref:System.IO.Stream.BeginRead%2A> and <xref:System.IO.Stream.EndRead%2A> to implement asynchronous I/O operations.</span></span> <span data-ttu-id="5915d-345">這些方法都仍有[!INCLUDE[net_v45](~/includes/net-v45-md.md)]以支援舊版的程式碼; 不過，新的非同步方法，例如<xref:System.IO.Stream.ReadAsync%2A>， <xref:System.IO.Stream.WriteAsync%2A>， <xref:System.IO.Stream.CopyToAsync%2A>，和<xref:System.IO.Stream.FlushAsync%2A>，協助您更輕鬆地實作非同步 I/O 作業。</span><span class="sxs-lookup"><span data-stu-id="5915d-345">These methods are still available in the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] to support legacy code; however, the new async methods, such as <xref:System.IO.Stream.ReadAsync%2A>, <xref:System.IO.Stream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, and <xref:System.IO.Stream.FlushAsync%2A>, help you implement asynchronous I/O operations more easily.</span></span>  
  
 <span data-ttu-id="5915d-346">呼叫`EndRead`來判斷有多少位元組被讀取從資料流。</span><span class="sxs-lookup"><span data-stu-id="5915d-346">Call `EndRead` to determine how many bytes were read from the stream.</span></span>  
  
 <span data-ttu-id="5915d-347">`EndRead` 呼叫在上一次每<xref:System.IAsyncResult>從<xref:System.IO.Stream.BeginRead%2A>。</span><span class="sxs-lookup"><span data-stu-id="5915d-347">`EndRead` can be called once on every <xref:System.IAsyncResult> from <xref:System.IO.Stream.BeginRead%2A>.</span></span>  
  
 <span data-ttu-id="5915d-348">這個方法會封鎖，直到 I/O 作業完成為止。</span><span class="sxs-lookup"><span data-stu-id="5915d-348">This method blocks until the I/O operation has completed.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5915d-349"><paramref name="asyncResult" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="5915d-349"><paramref name="asyncResult" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5915d-350">暫止讀取作業的控制代碼無法使用。</span><span class="sxs-lookup"><span data-stu-id="5915d-350">A handle to the pending read operation is not available.</span></span>  
  
 <span data-ttu-id="5915d-351">-或-</span><span class="sxs-lookup"><span data-stu-id="5915d-351">-or-</span></span>  
  
 <span data-ttu-id="5915d-352">暫止的作業不支援讀取。</span><span class="sxs-lookup"><span data-stu-id="5915d-352">The pending operation does not support reading.</span></span></exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="5915d-353"><paramref name="asyncResult" /> 不是來自目前資料流的 <see cref="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="5915d-353"><paramref name="asyncResult" /> did not originate from a <see cref="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> method on the current stream.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="5915d-354">資料流已關閉或發生內部錯誤。</span><span class="sxs-lookup"><span data-stu-id="5915d-354">The stream is closed or an internal error has occurred.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EndWrite">
      <MemberSignature Language="C#" Value="public virtual void EndWrite (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndWrite(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.EndWrite(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndWrite (asyncResult As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndWrite(IAsyncResult ^ asyncResult);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="5915d-355">未處理的非同步 I/O 要求的參考。</span><span class="sxs-lookup"><span data-stu-id="5915d-355">A reference to the outstanding asynchronous I/O request.</span></span></param>
        <summary><span data-ttu-id="5915d-356">結束非同步的寫入作業。</span><span class="sxs-lookup"><span data-stu-id="5915d-356">Ends an asynchronous write operation.</span></span> <span data-ttu-id="5915d-357">(請考慮用 <see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)" /> 替代。)</span><span class="sxs-lookup"><span data-stu-id="5915d-357">(Consider using <see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)" /> instead.)</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5915d-358">在 .NET Framework 4 (含) 以前版本中，您必須使用方法 (例如 <xref:System.IO.Stream.BeginWrite%2A> 和 <xref:System.IO.Stream.EndWrite%2A>) 實作非同步 I/O 作業。</span><span class="sxs-lookup"><span data-stu-id="5915d-358">In the .NET Framework 4 and earlier versions, you have to use methods such as <xref:System.IO.Stream.BeginWrite%2A> and <xref:System.IO.Stream.EndWrite%2A> to implement asynchronous I/O operations.</span></span> <span data-ttu-id="5915d-359">這些方法都仍有[!INCLUDE[net_v45](~/includes/net-v45-md.md)]以支援舊版的程式碼; 不過，新的非同步方法，例如<xref:System.IO.Stream.ReadAsync%2A>， <xref:System.IO.Stream.WriteAsync%2A>， <xref:System.IO.Stream.CopyToAsync%2A>，和<xref:System.IO.Stream.FlushAsync%2A>，協助您更輕鬆地實作非同步 I/O 作業。</span><span class="sxs-lookup"><span data-stu-id="5915d-359">These methods are still available in the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] to support legacy code; however, the new async methods, such as <xref:System.IO.Stream.ReadAsync%2A>, <xref:System.IO.Stream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, and <xref:System.IO.Stream.FlushAsync%2A>, help you implement asynchronous I/O operations more easily.</span></span>  
  
 <span data-ttu-id="5915d-360">`EndWrite` 必須正好一次上呼叫每個<xref:System.IAsyncResult>從<xref:System.IO.Stream.BeginWrite%2A>。</span><span class="sxs-lookup"><span data-stu-id="5915d-360">`EndWrite` must be called exactly once on every <xref:System.IAsyncResult> from <xref:System.IO.Stream.BeginWrite%2A>.</span></span>  
  
 <span data-ttu-id="5915d-361">這個方法會封鎖，直到 I/O 作業完成為止。</span><span class="sxs-lookup"><span data-stu-id="5915d-361">This method blocks until the I/O operation has completed.</span></span> <span data-ttu-id="5915d-362">在非同步寫入要求，例如磁碟失敗期間，在 I/O 要求期間發生的錯誤發生在執行緒集區執行緒，並且呼叫時變成可見`EndWrite`。</span><span class="sxs-lookup"><span data-stu-id="5915d-362">Errors that occur during an asynchronous write request, such as a disk failure during the I/O request, occur on the thread pool thread and become visible upon a call to `EndWrite`.</span></span> <span data-ttu-id="5915d-363">執行緒集區執行緒擲回例外狀況呼叫時，將無法看到`EndWrite`。</span><span class="sxs-lookup"><span data-stu-id="5915d-363">Exceptions thrown by the thread pool thread will not be visible when calling `EndWrite`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5915d-364"><paramref name="asyncResult" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="5915d-364"><paramref name="asyncResult" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5915d-365">暫止寫入作業的控制代碼無法使用。</span><span class="sxs-lookup"><span data-stu-id="5915d-365">A handle to the pending write operation is not available.</span></span>  
  
 <span data-ttu-id="5915d-366">-或-</span><span class="sxs-lookup"><span data-stu-id="5915d-366">-or-</span></span>  
  
 <span data-ttu-id="5915d-367">暫止的作業不支援寫入。</span><span class="sxs-lookup"><span data-stu-id="5915d-367">The pending operation does not support writing.</span></span></exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="5915d-368"><paramref name="asyncResult" /> 不是來自目前資料流的 <see cref="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="5915d-368"><paramref name="asyncResult" /> did not originate from a <see cref="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> method on the current stream.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="5915d-369">資料流已關閉或發生內部錯誤。</span><span class="sxs-lookup"><span data-stu-id="5915d-369">The stream is closed or an internal error has occurred.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public abstract void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.Flush" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Flush();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5915d-370">當在衍生類別中覆寫時，會清除這個資料流的所有緩衝區，並造成所有緩衝資料都寫入基礎裝置。</span><span class="sxs-lookup"><span data-stu-id="5915d-370">When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5915d-371">覆寫`Flush`實作緩衝區的資料流。</span><span class="sxs-lookup"><span data-stu-id="5915d-371">Override `Flush` on streams that implement a buffer.</span></span> <span data-ttu-id="5915d-372">若要將任何資訊從基礎緩衝區移至其目的地，請清除緩衝區，或兩者都使用這個方法。</span><span class="sxs-lookup"><span data-stu-id="5915d-372">Use this method to move any information from an underlying buffer to its destination, clear the buffer, or both.</span></span> <span data-ttu-id="5915d-373">物件的狀態而定，您可能必須修改資料流中目前的位置 （例如，如果基礎資料流支援搜尋）。</span><span class="sxs-lookup"><span data-stu-id="5915d-373">Depending upon the state of the object, you might have to modify the current position within the stream (for example, if the underlying stream supports seeking).</span></span> <span data-ttu-id="5915d-374">如需詳細資訊，請參閱 <xref:System.IO.Stream.CanSeek%2A>。</span><span class="sxs-lookup"><span data-stu-id="5915d-374">For additional information see <xref:System.IO.Stream.CanSeek%2A>.</span></span>  
  
 <span data-ttu-id="5915d-375">當使用<xref:System.IO.StreamWriter>或<xref:System.IO.BinaryWriter>類別，請勿清除基底<xref:System.IO.Stream>物件。</span><span class="sxs-lookup"><span data-stu-id="5915d-375">When using the <xref:System.IO.StreamWriter> or <xref:System.IO.BinaryWriter> class, do not flush the base <xref:System.IO.Stream> object.</span></span> <span data-ttu-id="5915d-376">請改用類別<xref:System.IO.Stream.Flush%2A>或<xref:System.IO.Stream.Close%2A>方法，可確保資料排清基礎資料流至第一次，並寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="5915d-376">Instead, use the class's <xref:System.IO.Stream.Flush%2A> or <xref:System.IO.Stream.Close%2A> method, which makes sure that the data is flushed to the underlying stream first and then written to the file.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="5915d-377">發生 I/O 錯誤。</span><span class="sxs-lookup"><span data-stu-id="5915d-377">An I/O error occurs.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="FlushAsync">
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="5915d-378">以非同步的方式清除這個資料流的所有緩衝區，並造成所有緩衝資料都寫入基礎裝置。</span><span class="sxs-lookup"><span data-stu-id="5915d-378">Asynchronously clears all buffers for this stream and causes any buffered data to be written to the underlying device.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FlushAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task FlushAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task FlushAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.FlushAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function FlushAsync () As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ FlushAsync();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5915d-379">以非同步的方式清除這個資料流的所有緩衝區，並造成所有緩衝資料都寫入基礎裝置。</span><span class="sxs-lookup"><span data-stu-id="5915d-379">Asynchronously clears all buffers for this stream and causes any buffered data to be written to the underlying device.</span></span></summary>
        <returns><span data-ttu-id="5915d-380">表示非同步排清作業的工作。</span><span class="sxs-lookup"><span data-stu-id="5915d-380">A task that represents the asynchronous flush operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5915d-381">如果衍生的類別，例如<xref:System.IO.Compression.DeflateStream>或<xref:System.IO.Compression.GZipStream>，請勿清除在實作緩衝區<xref:System.IO.Stream.Flush%2A>方法，<xref:System.IO.Stream.FlushAsync%2A>方法並不會清除緩衝區。</span><span class="sxs-lookup"><span data-stu-id="5915d-381">If a derived class, such as <xref:System.IO.Compression.DeflateStream> or <xref:System.IO.Compression.GZipStream>, does not flush the buffer in its implementation of the <xref:System.IO.Stream.Flush%2A> method, the <xref:System.IO.Stream.FlushAsync%2A> method will not flush the buffer.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="5915d-382">資料流已經處置。</span><span class="sxs-lookup"><span data-stu-id="5915d-382">The stream has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="FlushAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task FlushAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task FlushAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.FlushAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ FlushAsync(System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"><span data-ttu-id="5915d-383">用來監視是否有取消要求的語彙基元。</span><span class="sxs-lookup"><span data-stu-id="5915d-383">The token to monitor for cancellation requests.</span></span> <span data-ttu-id="5915d-384">預設值是 <see cref="P:System.Threading.CancellationToken.None" />。</span><span class="sxs-lookup"><span data-stu-id="5915d-384">The default value is <see cref="P:System.Threading.CancellationToken.None" />.</span></span></param>
        <summary><span data-ttu-id="5915d-385">以非同步的方式清除這個資料流的所有緩衝區，造成任何緩衝資料都寫入基礎裝置，並且監視取消要求。</span><span class="sxs-lookup"><span data-stu-id="5915d-385">Asynchronously clears all buffers for this stream, causes any buffered data to be written to the underlying device, and monitors cancellation requests.</span></span></summary>
        <returns><span data-ttu-id="5915d-386">表示非同步排清作業的工作。</span><span class="sxs-lookup"><span data-stu-id="5915d-386">A task that represents the asynchronous flush operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5915d-387">如果在作業完成之前將其取消，則傳回的工作包含<xref:System.Threading.Tasks.TaskStatus.Canceled>值<xref:System.Threading.Tasks.Task.Status%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="5915d-387">If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus.Canceled> value for the <xref:System.Threading.Tasks.Task.Status%2A> property.</span></span>  
  
 <span data-ttu-id="5915d-388">如果衍生的類別，例如<xref:System.IO.Compression.DeflateStream>或<xref:System.IO.Compression.GZipStream>，請勿清除在實作緩衝區<xref:System.IO.Stream.Flush%2A>方法，<xref:System.IO.Stream.FlushAsync%2A>方法並不會清除緩衝區。</span><span class="sxs-lookup"><span data-stu-id="5915d-388">If a derived class, such as <xref:System.IO.Compression.DeflateStream> or <xref:System.IO.Compression.GZipStream>, does not flush the buffer in its implementation of the <xref:System.IO.Stream.Flush%2A> method, the <xref:System.IO.Stream.FlushAsync%2A> method will not flush the buffer.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="5915d-389">資料流已經處置。</span><span class="sxs-lookup"><span data-stu-id="5915d-389">The stream has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public abstract long Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Length" />
      <MemberSignature Language="DocId" Value="P:System.IO.Stream.Length" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Length As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property long Length { long get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5915d-390">在衍生類別中覆寫時，取得資料流的長度 (以位元組為單位)。</span><span class="sxs-lookup"><span data-stu-id="5915d-390">When overridden in a derived class, gets the length in bytes of the stream.</span></span></summary>
        <value><span data-ttu-id="5915d-391">代表資料流長度的長數值 (以位元組為單位)。</span><span class="sxs-lookup"><span data-stu-id="5915d-391">A long value representing the length of the stream in bytes.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="5915d-392">衍生自 <see langword="Stream" /> 的類別不支援搜尋。</span><span class="sxs-lookup"><span data-stu-id="5915d-392">A class derived from <see langword="Stream" /> does not support seeking.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="5915d-393">關閉資料流後呼叫了方法。</span><span class="sxs-lookup"><span data-stu-id="5915d-393">Methods were called after the stream was closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Null">
      <MemberSignature Language="C#" Value="public static readonly System.IO.Stream Null;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.IO.Stream Null" />
      <MemberSignature Language="DocId" Value="F:System.IO.Stream.Null" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Null As Stream " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::IO::Stream ^ Null;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5915d-394">沒有底層存放區的 <see langword="Stream" />。</span><span class="sxs-lookup"><span data-stu-id="5915d-394">A <see langword="Stream" /> with no backing store.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5915d-395">使用`Null`將輸出重新導向不會耗用任何作業系統資源的資料流。</span><span class="sxs-lookup"><span data-stu-id="5915d-395">Use `Null` to redirect output to a stream that will not consume any operating system resources.</span></span> <span data-ttu-id="5915d-396">當方法`Stream`提供寫入會叫用`Null`、 呼叫只會傳回，而不寫入資料。</span><span class="sxs-lookup"><span data-stu-id="5915d-396">When the methods of `Stream` that provide writing are invoked on `Null`, the call simply returns, and no data is written.</span></span> <span data-ttu-id="5915d-397">`Null` 也會實作`Read`方法會傳回零，而不會讀取資料。</span><span class="sxs-lookup"><span data-stu-id="5915d-397">`Null` also implements a `Read` method that returns zero without reading data.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ObjectInvariant">
      <MemberSignature Language="C#" Value="protected virtual void ObjectInvariant ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ObjectInvariant() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.ObjectInvariant" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ObjectInvariant ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void ObjectInvariant();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Do not call or override this method.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5915d-398">提供 <see cref="T:System.Diagnostics.Contracts.Contract" /> 的支援。</span><span class="sxs-lookup"><span data-stu-id="5915d-398">Provides support for a <see cref="T:System.Diagnostics.Contracts.Contract" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public abstract long Position { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Position" />
      <MemberSignature Language="DocId" Value="P:System.IO.Stream.Position" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Property Position As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property long Position { long get(); void set(long value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5915d-399">在衍生類別中覆寫時，取得或設定在目前資料流的位置。</span><span class="sxs-lookup"><span data-stu-id="5915d-399">When overridden in a derived class, gets or sets the position within the current stream.</span></span></summary>
        <value><span data-ttu-id="5915d-400">在資料流的目前位置。</span><span class="sxs-lookup"><span data-stu-id="5915d-400">The current position within the stream.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5915d-401">資料流必須支援搜尋要取得或設定位置。</span><span class="sxs-lookup"><span data-stu-id="5915d-401">The stream must support seeking to get or set the position.</span></span> <span data-ttu-id="5915d-402">使用<xref:System.IO.Stream.CanSeek%2A>屬性來判斷資料流是否支援搜尋。</span><span class="sxs-lookup"><span data-stu-id="5915d-402">Use the <xref:System.IO.Stream.CanSeek%2A> property to determine whether the stream supports seeking.</span></span>  
  
 <span data-ttu-id="5915d-403">支援搜尋到的任何位置超出資料流的長度。</span><span class="sxs-lookup"><span data-stu-id="5915d-403">Seeking to any location beyond the length of the stream is supported.</span></span>  
  
 <span data-ttu-id="5915d-404">`Position`屬性不會不追蹤的已耗用，略過，資料流，或兩者中的位元組數目。</span><span class="sxs-lookup"><span data-stu-id="5915d-404">The `Position` property does not keep track of the number of bytes from the stream that have been consumed, skipped, or both.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="5915d-405">發生 I/O 錯誤。</span><span class="sxs-lookup"><span data-stu-id="5915d-405">An I/O error occurs.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="5915d-406">資料流不支援搜尋。</span><span class="sxs-lookup"><span data-stu-id="5915d-406">The stream does not support seeking.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="5915d-407">關閉資料流後呼叫了方法。</span><span class="sxs-lookup"><span data-stu-id="5915d-407">Methods were called after the stream was closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public virtual int Read (Span&lt;byte&gt; buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Read(valuetype System.Span`1&lt;unsigned int8&gt; buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.Read(System.Span{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Read (buffer As Span(Of Byte)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Read(Span&lt;System::Byte&gt; buffer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Span&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="buffer">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public abstract int Read (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Read([out] unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Read (buffer As Byte(), offset As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract int Read(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="5915d-408">位元組陣列。</span><span class="sxs-lookup"><span data-stu-id="5915d-408">An array of bytes.</span></span> <span data-ttu-id="5915d-409">當這個方法傳回時，緩衝區會包含其值介於 <c>offset</c> 和 (<c>offset</c> + <c>count</c> - 1) 之間，並由讀取自目前來源的位元組取代的指定位元組陣列。</span><span class="sxs-lookup"><span data-stu-id="5915d-409">When this method returns, the buffer contains the specified byte array with the values between <c>offset</c> and (<c>offset</c> + <c>count</c> - 1) replaced by the bytes read from the current source.</span></span></param>
        <param name="offset"><span data-ttu-id="5915d-410"><c>buffer</c> 中以零為起始的位元組位移，即開始儲存讀取自目前資料流之資料的位置。</span><span class="sxs-lookup"><span data-stu-id="5915d-410">The zero-based byte offset in <c>buffer</c> at which to begin storing the data read from the current stream.</span></span></param>
        <param name="count"><span data-ttu-id="5915d-411">自目前資料流讀取的最大位元組數。</span><span class="sxs-lookup"><span data-stu-id="5915d-411">The maximum number of bytes to be read from the current stream.</span></span></param>
        <summary><span data-ttu-id="5915d-412">當在衍生類別中覆寫時，自目前資料流讀取一連串的位元組，並依所讀取的位元組數目進階資料流中的位置。</span><span class="sxs-lookup"><span data-stu-id="5915d-412">When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.</span></span></summary>
        <returns><span data-ttu-id="5915d-413">緩衝區所讀取的總位元組數。</span><span class="sxs-lookup"><span data-stu-id="5915d-413">The total number of bytes read into the buffer.</span></span> <span data-ttu-id="5915d-414">如果目前無法取得足夠的位元組，則這個數目可能小於所要求的位元組數，如果已經到達資料流末端，則為零 (0)。</span><span class="sxs-lookup"><span data-stu-id="5915d-414">This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5915d-415">使用<xref:System.IO.Stream.CanRead%2A>屬性來判斷目前的執行個體是否支援讀取。</span><span class="sxs-lookup"><span data-stu-id="5915d-415">Use the <xref:System.IO.Stream.CanRead%2A> property to determine whether the current instance supports reading.</span></span> <span data-ttu-id="5915d-416">使用<xref:System.IO.Stream.ReadAsync%2A>方法以非同步方式讀取自目前資料流。</span><span class="sxs-lookup"><span data-stu-id="5915d-416">Use the <xref:System.IO.Stream.ReadAsync%2A> method to read asynchronously from the current stream.</span></span>  
  
 <span data-ttu-id="5915d-417">這個方法的實作讀取的最大`count`位元組從目前資料流並儲存在`buffer`開始`offset`。</span><span class="sxs-lookup"><span data-stu-id="5915d-417">Implementations of this method read a maximum of `count` bytes from the current stream and store them in `buffer` beginning at `offset`.</span></span> <span data-ttu-id="5915d-418">資料流的目前位置前移讀取位元組數。不過，如果發生例外狀況，則資料流中目前的位置維持不變。</span><span class="sxs-lookup"><span data-stu-id="5915d-418">The current position within the stream is advanced by the number of bytes read; however, if an exception occurs, the current position within the stream remains unchanged.</span></span> <span data-ttu-id="5915d-419">實作會傳回讀取的位元組數目。</span><span class="sxs-lookup"><span data-stu-id="5915d-419">Implementations return the number of bytes read.</span></span> <span data-ttu-id="5915d-420">實作會封鎖直到至少一個位元組的資料可以讀取，確認沒有資料可供使用。</span><span class="sxs-lookup"><span data-stu-id="5915d-420">The implementation will block until at least one byte of data can be read, in the event that no data is available.</span></span> <span data-ttu-id="5915d-421"><xref:System.IO.Stream.Read%2A> 資料流中沒有詳細資料，且無其他預期 （例如已關閉通訊端或檔案結尾中） 時，才會傳回 0。</span><span class="sxs-lookup"><span data-stu-id="5915d-421"><xref:System.IO.Stream.Read%2A> returns 0 only when there is no more data in the stream and no more is expected (such as a closed socket or end of file).</span></span> <span data-ttu-id="5915d-422">實作可以自由地傳回比要求的位元組更少，即使尚未達到資料流結尾。</span><span class="sxs-lookup"><span data-stu-id="5915d-422">An implementation is free to return fewer bytes than requested even if the end of the stream has not been reached.</span></span>  
  
 <span data-ttu-id="5915d-423">使用<xref:System.IO.BinaryReader>讀取基本資料型別。</span><span class="sxs-lookup"><span data-stu-id="5915d-423">Use <xref:System.IO.BinaryReader> for reading primitive data types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5915d-424">下列範例示範如何使用<xref:System.IO.Stream.Read%2A>讀取的資料區塊。</span><span class="sxs-lookup"><span data-stu-id="5915d-424">The following example shows how to use <xref:System.IO.Stream.Read%2A> to read a block of data.</span></span>  
  
 [!code-cpp[Classic Stream.Read Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Stream.Read Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Stream.Read Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Stream.Read Example/CS/source.cs#1)]
 [!code-vb[Classic Stream.Read Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Stream.Read Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5915d-425"><paramref name="offset" /> 和 <paramref name="count" /> 的總和大於緩衝區長度。</span><span class="sxs-lookup"><span data-stu-id="5915d-425">The sum of <paramref name="offset" /> and <paramref name="count" /> is larger than the buffer length.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5915d-426"><paramref name="buffer" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="5915d-426"><paramref name="buffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="5915d-427"><paramref name="offset" /> 或 <paramref name="count" /> 為負。</span><span class="sxs-lookup"><span data-stu-id="5915d-427"><paramref name="offset" /> or <paramref name="count" /> is negative.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="5915d-428">發生 I/O 錯誤。</span><span class="sxs-lookup"><span data-stu-id="5915d-428">An I/O error occurs.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="5915d-429">資料流不支援讀取。</span><span class="sxs-lookup"><span data-stu-id="5915d-429">The stream does not support reading.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="5915d-430">關閉資料流後呼叫了方法。</span><span class="sxs-lookup"><span data-stu-id="5915d-430">Methods were called after the stream was closed.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReadAsync">
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="5915d-431">以非同步的方式從目前的資料流讀取位元組序列，並依讀取的位元組數將資料流中的位置往前移。</span><span class="sxs-lookup"><span data-stu-id="5915d-431">Asynchronously reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReadAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.ValueTask&lt;int&gt; ReadAsync (Memory&lt;byte&gt; buffer, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask`1&lt;int32&gt; ReadAsync(valuetype System.Memory`1&lt;unsigned int8&gt; buffer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.ReadAsync(System.Memory{System.Byte},System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Memory&lt;System.Byte&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="buffer">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;int&gt; ReadAsync (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int32&gt; ReadAsync(unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadAsync (buffer As Byte(), offset As Integer, count As Integer) As Task(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;int&gt; ^ ReadAsync(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="5915d-432">寫入資料的緩衝區。</span><span class="sxs-lookup"><span data-stu-id="5915d-432">The buffer to write the data into.</span></span></param>
        <param name="offset"><span data-ttu-id="5915d-433">「緩衝區」<c></c> 中的位元組位移，即要開始從資料流寫入資料的位置。</span><span class="sxs-lookup"><span data-stu-id="5915d-433">The byte offset in <c>buffer</c> at which to begin writing data from the stream.</span></span></param>
        <param name="count"><span data-ttu-id="5915d-434">要讀取的最大位元組數。</span><span class="sxs-lookup"><span data-stu-id="5915d-434">The maximum number of bytes to read.</span></span></param>
        <summary><span data-ttu-id="5915d-435">以非同步的方式從目前的資料流讀取位元組序列，並依讀取的位元組數將資料流中的位置往前移。</span><span class="sxs-lookup"><span data-stu-id="5915d-435">Asynchronously reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.</span></span></summary>
        <returns><span data-ttu-id="5915d-436">表示非同步讀取作業的工作。</span><span class="sxs-lookup"><span data-stu-id="5915d-436">A task that represents the asynchronous read operation.</span></span> <span data-ttu-id="5915d-437"><paramref name="TResult" /> 參數的值會包含讀取至緩衝區的位元組總數。</span><span class="sxs-lookup"><span data-stu-id="5915d-437">The value of the <paramref name="TResult" /> parameter contains the total number of bytes read into the buffer.</span></span> <span data-ttu-id="5915d-438">如果目前可供使用的位元組數目少於所要求的數目，結果值可能會小於所要求的位元組數目，或者如果已經到達資料流末端，則可能為 0 (零)。</span><span class="sxs-lookup"><span data-stu-id="5915d-438">The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5915d-439"><xref:System.IO.Stream.ReadAsync%2A>方法可讓您執行需要大量資源的 I/O 作業，而不會封鎖主執行緒。</span><span class="sxs-lookup"><span data-stu-id="5915d-439">The <xref:System.IO.Stream.ReadAsync%2A> method enables you to perform resource-intensive I/O operations without blocking the main thread.</span></span> <span data-ttu-id="5915d-440">這項效能考量對於 [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] 應用程式或 [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] 應用程式而言特別重要，尤其是針對耗時的資料流作業可能會阻礙 UI 執行緒，使應用程式看起來像是停止運作的情況。</span><span class="sxs-lookup"><span data-stu-id="5915d-440">This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</span></span> <span data-ttu-id="5915d-441">非同步方法會用於搭配`async`和`await`Visual Basic 和 C# 中的關鍵字。</span><span class="sxs-lookup"><span data-stu-id="5915d-441">The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#.</span></span>  
  
 <span data-ttu-id="5915d-442">使用<xref:System.IO.Stream.CanRead%2A>屬性來判斷目前的執行個體是否支援讀取。</span><span class="sxs-lookup"><span data-stu-id="5915d-442">Use the <xref:System.IO.Stream.CanRead%2A> property to determine whether the current instance supports reading.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5915d-443">下列範例會示範如何以非同步方式從檔案讀取。</span><span class="sxs-lookup"><span data-stu-id="5915d-443">The following example shows how to read from a file asynchronously.</span></span> <span data-ttu-id="5915d-444">此範例會使用<xref:System.IO.FileStream>類別，衍生自<xref:System.IO.Stream>類別。</span><span class="sxs-lookup"><span data-stu-id="5915d-444">The example uses the <xref:System.IO.FileStream> class, which derives from the <xref:System.IO.Stream> class.</span></span>  
  
 [!code-csharp[Asynchronous_File_IO_async#4](~/samples/snippets/csharp/VS_Snippets_CLR/Asynchronous_File_IO_async/cs/example4.cs#4)]
 [!code-vb[Asynchronous_File_IO_async#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/Asynchronous_File_IO_async/vb/example4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5915d-445"><paramref name="buffer" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="5915d-445"><paramref name="buffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="5915d-446"><paramref name="offset" /> 或 <paramref name="count" /> 為負。</span><span class="sxs-lookup"><span data-stu-id="5915d-446"><paramref name="offset" /> or <paramref name="count" /> is negative.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5915d-447"><paramref name="offset" /> 和 <paramref name="count" /> 的總和大於緩衝區長度。</span><span class="sxs-lookup"><span data-stu-id="5915d-447">The sum of <paramref name="offset" /> and <paramref name="count" /> is larger than the buffer length.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="5915d-448">資料流不支援讀取。</span><span class="sxs-lookup"><span data-stu-id="5915d-448">The stream does not support reading.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="5915d-449">資料流已經處置。</span><span class="sxs-lookup"><span data-stu-id="5915d-449">The stream has been disposed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5915d-450">之前的讀取作業目前正在使用資料流。</span><span class="sxs-lookup"><span data-stu-id="5915d-450">The stream is currently in use by a previous read operation.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ReadAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;int&gt; ReadAsync (byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;int32&gt; ReadAsync(unsigned int8[] buffer, int32 offset, int32 count, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task&lt;int&gt; ^ ReadAsync(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="5915d-451">寫入資料的緩衝區。</span><span class="sxs-lookup"><span data-stu-id="5915d-451">The buffer to write the data into.</span></span></param>
        <param name="offset"><span data-ttu-id="5915d-452">「緩衝區」<c></c> 中的位元組位移，即要開始從資料流寫入資料的位置。</span><span class="sxs-lookup"><span data-stu-id="5915d-452">The byte offset in <c>buffer</c> at which to begin writing data from the stream.</span></span></param>
        <param name="count"><span data-ttu-id="5915d-453">要讀取的最大位元組數。</span><span class="sxs-lookup"><span data-stu-id="5915d-453">The maximum number of bytes to read.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="5915d-454">用來監視是否有取消要求的語彙基元。</span><span class="sxs-lookup"><span data-stu-id="5915d-454">The token to monitor for cancellation requests.</span></span> <span data-ttu-id="5915d-455">預設值是 <see cref="P:System.Threading.CancellationToken.None" />。</span><span class="sxs-lookup"><span data-stu-id="5915d-455">The default value is <see cref="P:System.Threading.CancellationToken.None" />.</span></span></param>
        <summary><span data-ttu-id="5915d-456">以非同步的方式從目前資料流讀取一連串的位元組、依所讀取的位元組數目進階資料流中的位置，以及監視取消要求。</span><span class="sxs-lookup"><span data-stu-id="5915d-456">Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests.</span></span></summary>
        <returns><span data-ttu-id="5915d-457">表示非同步讀取作業的工作。</span><span class="sxs-lookup"><span data-stu-id="5915d-457">A task that represents the asynchronous read operation.</span></span> <span data-ttu-id="5915d-458"><paramref name="TResult" /> 參數的值會包含讀取至緩衝區的位元組總數。</span><span class="sxs-lookup"><span data-stu-id="5915d-458">The value of the <paramref name="TResult" /> parameter contains the total number of bytes read into the buffer.</span></span> <span data-ttu-id="5915d-459">如果目前可供使用的位元組數目少於所要求的數目，結果值可能會小於所要求的位元組數目，或者如果已經到達資料流末端，則可能為 0 (零)。</span><span class="sxs-lookup"><span data-stu-id="5915d-459">The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5915d-460"><xref:System.IO.Stream.ReadAsync%2A>方法可讓您執行需要大量資源的 I/O 作業，而不會封鎖主執行緒。</span><span class="sxs-lookup"><span data-stu-id="5915d-460">The <xref:System.IO.Stream.ReadAsync%2A> method enables you to perform resource-intensive I/O operations without blocking the main thread.</span></span> <span data-ttu-id="5915d-461">這項效能考量對於 [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] 應用程式或 [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] 應用程式而言特別重要，尤其是針對耗時的資料流作業可能會阻礙 UI 執行緒，使應用程式看起來像是停止運作的情況。</span><span class="sxs-lookup"><span data-stu-id="5915d-461">This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</span></span> <span data-ttu-id="5915d-462">非同步方法會用於搭配`async`和`await`Visual Basic 和 C# 中的關鍵字。</span><span class="sxs-lookup"><span data-stu-id="5915d-462">The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#.</span></span>  
  
 <span data-ttu-id="5915d-463">使用<xref:System.IO.Stream.CanRead%2A>屬性來判斷目前的執行個體是否支援讀取。</span><span class="sxs-lookup"><span data-stu-id="5915d-463">Use the <xref:System.IO.Stream.CanRead%2A> property to determine whether the current instance supports reading.</span></span>  
  
 <span data-ttu-id="5915d-464">如果在作業完成之前將其取消，則傳回的工作包含<xref:System.Threading.Tasks.TaskStatus.Canceled>值<xref:System.Threading.Tasks.Task.Status%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="5915d-464">If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus.Canceled> value for the <xref:System.Threading.Tasks.Task.Status%2A> property.</span></span>  
  
 <span data-ttu-id="5915d-465">如需範例，請參閱<xref:System.IO.Stream.ReadAsync%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%29>多載。</span><span class="sxs-lookup"><span data-stu-id="5915d-465">For an example, see the <xref:System.IO.Stream.ReadAsync%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%29> overload.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5915d-466"><paramref name="buffer" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="5915d-466"><paramref name="buffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="5915d-467"><paramref name="offset" /> 或 <paramref name="count" /> 為負。</span><span class="sxs-lookup"><span data-stu-id="5915d-467"><paramref name="offset" /> or <paramref name="count" /> is negative.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5915d-468"><paramref name="offset" /> 和 <paramref name="count" /> 的總和大於緩衝區長度。</span><span class="sxs-lookup"><span data-stu-id="5915d-468">The sum of <paramref name="offset" /> and <paramref name="count" /> is larger than the buffer length.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="5915d-469">資料流不支援讀取。</span><span class="sxs-lookup"><span data-stu-id="5915d-469">The stream does not support reading.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="5915d-470">資料流已經處置。</span><span class="sxs-lookup"><span data-stu-id="5915d-470">The stream has been disposed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5915d-471">之前的讀取作業目前正在使用資料流。</span><span class="sxs-lookup"><span data-stu-id="5915d-471">The stream is currently in use by a previous read operation.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ReadByte">
      <MemberSignature Language="C#" Value="public virtual int ReadByte ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 ReadByte() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.ReadByte" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadByte () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int ReadByte();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5915d-472">從資料流讀取一個位元組，並將資料流的位置推進一個位元組；如果在資料流末端，則傳回 -1。</span><span class="sxs-lookup"><span data-stu-id="5915d-472">Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.</span></span></summary>
        <returns><span data-ttu-id="5915d-473">轉型為 <see langword="Int32" /> 的不帶正負號位元組，如果在資料流末端，則為 -1。</span><span class="sxs-lookup"><span data-stu-id="5915d-473">The unsigned byte cast to an <see langword="Int32" />, or -1 if at the end of the stream.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5915d-474">使用<xref:System.IO.Stream.CanRead%2A>屬性來判斷目前的執行個體是否支援讀取。</span><span class="sxs-lookup"><span data-stu-id="5915d-474">Use the <xref:System.IO.Stream.CanRead%2A> property to determine whether the current instance supports reading.</span></span>  
  
 <span data-ttu-id="5915d-475">嘗試將資料流關閉之後，管理資料流可能會擲回<xref:System.ObjectDisposedException>。</span><span class="sxs-lookup"><span data-stu-id="5915d-475">Attempts to manipulate the stream after the stream has been closed could throw an <xref:System.ObjectDisposedException>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="5915d-476">資料流不支援讀取。</span><span class="sxs-lookup"><span data-stu-id="5915d-476">The stream does not support reading.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="5915d-477">關閉資料流後呼叫了方法。</span><span class="sxs-lookup"><span data-stu-id="5915d-477">Methods were called after the stream was closed.</span></span></exception>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="5915d-478">上的預設實作<see langword="Stream" />建立新的單一位元組陣列，然後呼叫<see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" />。</span><span class="sxs-lookup"><span data-stu-id="5915d-478">The default implementation on <see langword="Stream" /> creates a new single-byte array and then calls <see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" />.</span></span> <span data-ttu-id="5915d-479">雖然這是正式正確，就沒有效率。</span><span class="sxs-lookup"><span data-stu-id="5915d-479">While this is formally correct, it is inefficient.</span></span> <span data-ttu-id="5915d-480">任何內部緩衝區的資料流應該覆寫這個方法，並提供更有效率的版本會直接讀取緩衝區，避免在每次呼叫配置額外的陣列。</span><span class="sxs-lookup"><span data-stu-id="5915d-480">Any stream with an internal buffer should override this method and provide a much more efficient version that reads the buffer directly, avoiding the extra array allocation on every call.</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ReadTimeout">
      <MemberSignature Language="C#" Value="public virtual int ReadTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ReadTimeout" />
      <MemberSignature Language="DocId" Value="P:System.IO.Stream.ReadTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ReadTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int ReadTimeout { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5915d-481">取得或設定值 (以毫秒為單位)，該值決定在逾時前資料流將嘗試讀取多長時間。</span><span class="sxs-lookup"><span data-stu-id="5915d-481">Gets or sets a value, in miliseconds, that determines how long the stream will attempt to read before timing out.</span></span></summary>
        <value><span data-ttu-id="5915d-482">值 (以毫秒為單位)，該值決定在逾時前資料流將嘗試讀取多長時間。</span><span class="sxs-lookup"><span data-stu-id="5915d-482">A value, in miliseconds, that determines how long the stream will attempt to read before timing out.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5915d-483"><see cref="P:System.IO.Stream.ReadTimeout" /> 方法必須擲回 <see cref="T:System.InvalidOperationException" />。</span><span class="sxs-lookup"><span data-stu-id="5915d-483">The <see cref="P:System.IO.Stream.ReadTimeout" /> method always throws an <see cref="T:System.InvalidOperationException" />.</span></span></exception>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="5915d-484"><see cref="P:System.IO.Stream.ReadTimeout" />應該覆寫屬性，來為資料流提供適當的行為。</span><span class="sxs-lookup"><span data-stu-id="5915d-484">The <see cref="P:System.IO.Stream.ReadTimeout" /> property should be overridden to provide the appropriate behavior for the stream.</span></span> <span data-ttu-id="5915d-485">如果資料流不支援逾時，這個屬性應該會引發<see cref="T:System.InvalidOperationException" />。</span><span class="sxs-lookup"><span data-stu-id="5915d-485">If the stream does not support timing out, this property should raise an <see cref="T:System.InvalidOperationException" />.</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public abstract long Seek (long offset, System.IO.SeekOrigin origin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 Seek(int64 offset, valuetype System.IO.SeekOrigin origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Seek (offset As Long, origin As SeekOrigin) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract long Seek(long offset, System::IO::SeekOrigin origin);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.Int64" />
        <Parameter Name="origin" Type="System.IO.SeekOrigin" />
      </Parameters>
      <Docs>
        <param name="offset"><span data-ttu-id="5915d-486">相對於 <c>origin</c> 參數的位元組位移。</span><span class="sxs-lookup"><span data-stu-id="5915d-486">A byte offset relative to the <c>origin</c> parameter.</span></span></param>
        <param name="origin"><span data-ttu-id="5915d-487"><see cref="T:System.IO.SeekOrigin" /> 類型的值，表示用來取得新位置的參考點。</span><span class="sxs-lookup"><span data-stu-id="5915d-487">A value of type <see cref="T:System.IO.SeekOrigin" /> indicating the reference point used to obtain the new position.</span></span></param>
        <summary><span data-ttu-id="5915d-488">在衍生類別中覆寫時，設定在目前資料流的位置。</span><span class="sxs-lookup"><span data-stu-id="5915d-488">When overridden in a derived class, sets the position within the current stream.</span></span></summary>
        <returns><span data-ttu-id="5915d-489">目前資料流的新位置。</span><span class="sxs-lookup"><span data-stu-id="5915d-489">The new position within the current stream.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5915d-490">使用<xref:System.IO.Stream.CanSeek%2A>屬性來判斷目前的執行個體是否支援搜尋。</span><span class="sxs-lookup"><span data-stu-id="5915d-490">Use the <xref:System.IO.Stream.CanSeek%2A> property to determine whether the current instance supports seeking.</span></span>  
  
 <span data-ttu-id="5915d-491">如果`offset`是負數，新的位置，才能在之前所指定的位置`origin`所指定的位元組數`offset`。</span><span class="sxs-lookup"><span data-stu-id="5915d-491">If `offset` is negative, the new position is required to precede the position specified by `origin` by the number of bytes specified by `offset`.</span></span> <span data-ttu-id="5915d-492">如果`offset`是零 (0)，新的位置是所指定的位置`origin`。</span><span class="sxs-lookup"><span data-stu-id="5915d-492">If `offset` is zero (0), the new position is required to be the position specified by `origin`.</span></span> <span data-ttu-id="5915d-493">如果`offset`是正數，新的位置，才能遵循所指定的位置`origin`所指定的位元組數`offset`。</span><span class="sxs-lookup"><span data-stu-id="5915d-493">If `offset` is positive, the new position is required to follow the position specified by `origin` by the number of bytes specified by `offset`.</span></span>  
  
 <span data-ttu-id="5915d-494">類別衍生自`Stream`支援搜尋必須覆寫這個方法以提供上面所述的功能。</span><span class="sxs-lookup"><span data-stu-id="5915d-494">Classes derived from `Stream` that support seeking must override this method to provide the functionality described above.</span></span>  
  
 <span data-ttu-id="5915d-495">支援搜尋到的任何位置超出資料流的長度。</span><span class="sxs-lookup"><span data-stu-id="5915d-495">Seeking to any location beyond the length of the stream is supported.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="5915d-496">發生 I/O 錯誤。</span><span class="sxs-lookup"><span data-stu-id="5915d-496">An I/O error occurs.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="5915d-497">資料流不支援搜尋，例如資料流為管道或主控台 (Console) 輸出所建構。</span><span class="sxs-lookup"><span data-stu-id="5915d-497">The stream does not support seeking, such as if the stream is constructed from a pipe or console output.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="5915d-498">關閉資料流後呼叫了方法。</span><span class="sxs-lookup"><span data-stu-id="5915d-498">Methods were called after the stream was closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SetLength">
      <MemberSignature Language="C#" Value="public abstract void SetLength (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetLength(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.SetLength(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub SetLength (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void SetLength(long value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="5915d-499">想要的目前資料流長度 (單位為位元組)。</span><span class="sxs-lookup"><span data-stu-id="5915d-499">The desired length of the current stream in bytes.</span></span></param>
        <summary><span data-ttu-id="5915d-500">在衍生類別中覆寫時，設定目前資料流的長度。</span><span class="sxs-lookup"><span data-stu-id="5915d-500">When overridden in a derived class, sets the length of the current stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5915d-501">如果指定的值小於目前資料流的長度，則會截斷資料流。</span><span class="sxs-lookup"><span data-stu-id="5915d-501">If the specified value is less than the current length of the stream, the stream is truncated.</span></span> <span data-ttu-id="5915d-502">如果指定的值大於目前資料流的長度，則會展開資料流。</span><span class="sxs-lookup"><span data-stu-id="5915d-502">If the specified value is larger than the current length of the stream, the stream is expanded.</span></span> <span data-ttu-id="5915d-503">展開資料流時，如果未定義的舊之間的新長度的資料流內容。</span><span class="sxs-lookup"><span data-stu-id="5915d-503">If the stream is expanded, the contents of the stream between the old and the new length are not defined.</span></span>  
  
 <span data-ttu-id="5915d-504">資料流必須支援寫入和搜尋的`SetLength`運作。</span><span class="sxs-lookup"><span data-stu-id="5915d-504">A stream must support both writing and seeking for `SetLength` to work.</span></span>  
  
 <span data-ttu-id="5915d-505">使用<xref:System.IO.Stream.CanWrite%2A>屬性來判斷目前的執行個體是否支援寫入，而<xref:System.IO.Stream.CanSeek%2A>屬性來判斷是否支援搜尋。</span><span class="sxs-lookup"><span data-stu-id="5915d-505">Use the <xref:System.IO.Stream.CanWrite%2A> property to determine whether the current instance supports writing, and the <xref:System.IO.Stream.CanSeek%2A> property to determine whether seeking is supported.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="5915d-506">發生 I/O 錯誤。</span><span class="sxs-lookup"><span data-stu-id="5915d-506">An I/O error occurs.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="5915d-507">資料流不支援寫入和搜尋，例如，如果資料流是從管道或主控台 (Console) 輸出所建構。</span><span class="sxs-lookup"><span data-stu-id="5915d-507">The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="5915d-508">關閉資料流後呼叫了方法。</span><span class="sxs-lookup"><span data-stu-id="5915d-508">Methods were called after the stream was closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Synchronized">
      <MemberSignature Language="C#" Value="public static System.IO.Stream Synchronized (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream Synchronized(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.Synchronized(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Stream ^ Synchronized(System::IO::Stream ^ stream);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="5915d-509">要同步處理的 <see cref="T:System.IO.Stream" /> 物件。</span><span class="sxs-lookup"><span data-stu-id="5915d-509">The <see cref="T:System.IO.Stream" /> object to synchronize.</span></span></param>
        <summary><span data-ttu-id="5915d-510">在指定的 <see cref="T:System.IO.Stream" /> 物件周圍建立安全執行緒 (同步處理) 的包裝函式。</span><span class="sxs-lookup"><span data-stu-id="5915d-510">Creates a thread-safe (synchronized) wrapper around the specified <see cref="T:System.IO.Stream" /> object.</span></span></summary>
        <returns><span data-ttu-id="5915d-511">安全執行緒的 <see cref="T:System.IO.Stream" /> 物件。</span><span class="sxs-lookup"><span data-stu-id="5915d-511">A thread-safe <see cref="T:System.IO.Stream" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5915d-512">這個方法會傳回包裝在指定的類別<xref:System.IO.Stream>物件，並從多個執行緒會限制存取。</span><span class="sxs-lookup"><span data-stu-id="5915d-512">This method returns a class that wraps the specified <xref:System.IO.Stream> object and restricts access to it from multiple threads.</span></span> <span data-ttu-id="5915d-513">所有存取<xref:System.IO.Stream>物件將會是安全執行緒。</span><span class="sxs-lookup"><span data-stu-id="5915d-513">All access to the <xref:System.IO.Stream> object will be thread safe.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5915d-514"><paramref name="stream" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="5915d-514"><paramref name="stream" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (ReadOnlySpan&lt;byte&gt; buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.Write(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Write (buffer As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(ReadOnlySpan&lt;System::Byte&gt; buffer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="buffer">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public abstract void Write (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Write (buffer As Byte(), offset As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Write(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="5915d-515">位元組陣列。</span><span class="sxs-lookup"><span data-stu-id="5915d-515">An array of bytes.</span></span> <span data-ttu-id="5915d-516">此方法會從 <c>buffer</c> 複製 <c>count</c> 個位元組到目前的資料流。</span><span class="sxs-lookup"><span data-stu-id="5915d-516">This method copies <c>count</c> bytes from <c>buffer</c> to the current stream.</span></span></param>
        <param name="offset"><span data-ttu-id="5915d-517"><c>buffer</c> 中以零為起始的位元組位移，將會從該處開始將位元組複製到目前的資料流。</span><span class="sxs-lookup"><span data-stu-id="5915d-517">The zero-based byte offset in <c>buffer</c> at which to begin copying bytes to the current stream.</span></span></param>
        <param name="count"><span data-ttu-id="5915d-518">寫入目前資料流的位元組數目。</span><span class="sxs-lookup"><span data-stu-id="5915d-518">The number of bytes to be written to the current stream.</span></span></param>
        <summary><span data-ttu-id="5915d-519">在衍生類別中覆寫時，將一連串的位元組寫入目前的資料流，並且由這個資料流中目前的位置前移寫入的位元組數目。</span><span class="sxs-lookup"><span data-stu-id="5915d-519">When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5915d-520">使用<xref:System.IO.Stream.CanWrite%2A>屬性來判斷目前的執行個體是否支援寫入。</span><span class="sxs-lookup"><span data-stu-id="5915d-520">Use the <xref:System.IO.Stream.CanWrite%2A> property to determine whether the current instance supports writing.</span></span> <span data-ttu-id="5915d-521">使用<xref:System.IO.Stream.WriteAsync%2A>方法，將以非同步方式寫入目前資料流。</span><span class="sxs-lookup"><span data-stu-id="5915d-521">Use the <xref:System.IO.Stream.WriteAsync%2A> method to write asynchronously to the current stream.</span></span>  
  
 <span data-ttu-id="5915d-522">如果作業成功時，寫入的位元組數目進階資料流的位置。</span><span class="sxs-lookup"><span data-stu-id="5915d-522">If the write operation is successful, the position within the stream advances by the number of bytes written.</span></span> <span data-ttu-id="5915d-523">如果發生例外狀況，資料流的位置維持不變。</span><span class="sxs-lookup"><span data-stu-id="5915d-523">If an exception occurs, the position within the stream remains unchanged.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5915d-524"><paramref name="offset" /> 和 <paramref name="count" /> 的總和大於緩衝區長度。</span><span class="sxs-lookup"><span data-stu-id="5915d-524">The sum of <paramref name="offset" /> and <paramref name="count" /> is greater than the buffer length.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5915d-525"><paramref name="buffer" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="5915d-525"><paramref name="buffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="5915d-526"><paramref name="offset" /> 或 <paramref name="count" /> 為負。</span><span class="sxs-lookup"><span data-stu-id="5915d-526"><paramref name="offset" /> or <paramref name="count" /> is negative.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="5915d-527">發生 I/O 錯誤，例如找不到指定的檔案。</span><span class="sxs-lookup"><span data-stu-id="5915d-527">An I/O error occured, such as the specified file cannot be found.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="5915d-528">資料流不支援寫入。</span><span class="sxs-lookup"><span data-stu-id="5915d-528">The stream does not support writing.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="5915d-529">關閉資料流後呼叫了 <see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" />。</span><span class="sxs-lookup"><span data-stu-id="5915d-529"><see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /> was called after the stream was closed.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteAsync">
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="5915d-530">以非同步的方式將位元組序列寫入至目前的資料流，並依寫入的位元組數將資料流中目前的位置往前移。</span><span class="sxs-lookup"><span data-stu-id="5915d-530">Asynchronously writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.ValueTask WriteAsync (ReadOnlyMemory&lt;byte&gt; buffer, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask WriteAsync(valuetype System.ReadOnlyMemory`1&lt;unsigned int8&gt; buffer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.WriteAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.ReadOnlyMemory&lt;System.Byte&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="buffer">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteAsync (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteAsync(unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteAsync (buffer As Byte(), offset As Integer, count As Integer) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteAsync(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="5915d-531">寫入資料的來源緩衝區。</span><span class="sxs-lookup"><span data-stu-id="5915d-531">The buffer to write data from.</span></span></param>
        <param name="offset"><span data-ttu-id="5915d-532">「緩衝區」<c></c>中以零為起始的位元組位移，即要開始將位元組複製到資料流的來源位置。</span><span class="sxs-lookup"><span data-stu-id="5915d-532">The zero-based byte offset in <c>buffer</c> from which to begin copying bytes to the stream.</span></span></param>
        <param name="count"><span data-ttu-id="5915d-533">寫入的最大位元組數。</span><span class="sxs-lookup"><span data-stu-id="5915d-533">The maximum number of bytes to write.</span></span></param>
        <summary><span data-ttu-id="5915d-534">以非同步的方式將位元組序列寫入至目前的資料流，並依寫入的位元組數將資料流中目前的位置往前移。</span><span class="sxs-lookup"><span data-stu-id="5915d-534">Asynchronously writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.</span></span></summary>
        <returns><span data-ttu-id="5915d-535">表示非同步寫入作業的工作。</span><span class="sxs-lookup"><span data-stu-id="5915d-535">A task that represents the asynchronous write operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5915d-536"><xref:System.IO.Stream.WriteAsync%2A>方法可讓您執行需要大量資源的 I/O 作業，而不會封鎖主執行緒。</span><span class="sxs-lookup"><span data-stu-id="5915d-536">The <xref:System.IO.Stream.WriteAsync%2A> method enables you to perform resource-intensive I/O operations without blocking the main thread.</span></span> <span data-ttu-id="5915d-537">這項效能考量對於 [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] 應用程式或 [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] 應用程式而言特別重要，尤其是針對耗時的資料流作業可能會阻礙 UI 執行緒，使應用程式看起來像是停止運作的情況。</span><span class="sxs-lookup"><span data-stu-id="5915d-537">This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</span></span> <span data-ttu-id="5915d-538">非同步方法會用於搭配`async`和`await`Visual Basic 和 C# 中的關鍵字。</span><span class="sxs-lookup"><span data-stu-id="5915d-538">The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#.</span></span>  
  
 <span data-ttu-id="5915d-539">使用<xref:System.IO.Stream.CanWrite%2A>屬性來判斷目前的執行個體是否支援寫入。</span><span class="sxs-lookup"><span data-stu-id="5915d-539">Use the <xref:System.IO.Stream.CanWrite%2A> property to determine whether the current instance supports writing.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5915d-540">下列範例會示範如何以非同步方式寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="5915d-540">The following example shows how to write asynchronously to a file.</span></span> <span data-ttu-id="5915d-541">此範例會使用<xref:System.IO.FileStream>類別，衍生自<xref:System.IO.Stream>類別。</span><span class="sxs-lookup"><span data-stu-id="5915d-541">The example uses the <xref:System.IO.FileStream> class, which derives from the <xref:System.IO.Stream> class.</span></span>  
  
 [!code-csharp[Asynchronous_File_IO_async#3](~/samples/snippets/csharp/VS_Snippets_CLR/Asynchronous_File_IO_async/cs/example3.cs#3)]
 [!code-vb[Asynchronous_File_IO_async#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/Asynchronous_File_IO_async/vb/example3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5915d-542"><paramref name="buffer" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="5915d-542"><paramref name="buffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="5915d-543"><paramref name="offset" /> 或 <paramref name="count" /> 為負。</span><span class="sxs-lookup"><span data-stu-id="5915d-543"><paramref name="offset" /> or <paramref name="count" /> is negative.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5915d-544"><paramref name="offset" /> 和 <paramref name="count" /> 的總和大於緩衝區長度。</span><span class="sxs-lookup"><span data-stu-id="5915d-544">The sum of <paramref name="offset" /> and <paramref name="count" /> is larger than the buffer length.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="5915d-545">資料流不支援寫入。</span><span class="sxs-lookup"><span data-stu-id="5915d-545">The stream does not support writing.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="5915d-546">已處置此資料流。</span><span class="sxs-lookup"><span data-stu-id="5915d-546">The stream has been disposed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5915d-547">之前的寫入作業目前正在使用資料流。</span><span class="sxs-lookup"><span data-stu-id="5915d-547">The stream is currently in use by a previous write operation.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteAsync (byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteAsync(unsigned int8[] buffer, int32 offset, int32 count, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteAsync(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="5915d-548">寫入資料的來源緩衝區。</span><span class="sxs-lookup"><span data-stu-id="5915d-548">The buffer to write data from.</span></span></param>
        <param name="offset"><span data-ttu-id="5915d-549">「緩衝區」<c></c>中以零為起始的位元組位移，即要開始將位元組複製到資料流的來源位置。</span><span class="sxs-lookup"><span data-stu-id="5915d-549">The zero-based byte offset in <c>buffer</c> from which to begin copying bytes to the stream.</span></span></param>
        <param name="count"><span data-ttu-id="5915d-550">寫入的最大位元組數。</span><span class="sxs-lookup"><span data-stu-id="5915d-550">The maximum number of bytes to write.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="5915d-551">用來監視是否有取消要求的語彙基元。</span><span class="sxs-lookup"><span data-stu-id="5915d-551">The token to monitor for cancellation requests.</span></span> <span data-ttu-id="5915d-552">預設值是 <see cref="P:System.Threading.CancellationToken.None" />。</span><span class="sxs-lookup"><span data-stu-id="5915d-552">The default value is <see cref="P:System.Threading.CancellationToken.None" />.</span></span></param>
        <summary><span data-ttu-id="5915d-553">以非同步的方式將一連串的位元組寫入目前的資料流，由這個資料流中目前的位置前移寫入的位元組數目，並且監視取消要求。</span><span class="sxs-lookup"><span data-stu-id="5915d-553">Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests.</span></span></summary>
        <returns><span data-ttu-id="5915d-554">表示非同步寫入作業的工作。</span><span class="sxs-lookup"><span data-stu-id="5915d-554">A task that represents the asynchronous write operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5915d-555"><xref:System.IO.Stream.WriteAsync%2A>方法可讓您執行需要大量資源的 I/O 作業，而不會封鎖主執行緒。</span><span class="sxs-lookup"><span data-stu-id="5915d-555">The <xref:System.IO.Stream.WriteAsync%2A> method enables you to perform resource-intensive I/O operations without blocking the main thread.</span></span> <span data-ttu-id="5915d-556">這項效能考量對於 [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] 應用程式或 [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] 應用程式而言特別重要，尤其是針對耗時的資料流作業可能會阻礙 UI 執行緒，使應用程式看起來像是停止運作的情況。</span><span class="sxs-lookup"><span data-stu-id="5915d-556">This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</span></span> <span data-ttu-id="5915d-557">非同步方法會用於搭配`async`和`await`Visual Basic 和 C# 中的關鍵字。</span><span class="sxs-lookup"><span data-stu-id="5915d-557">The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#.</span></span>  
  
 <span data-ttu-id="5915d-558">使用<xref:System.IO.Stream.CanWrite%2A>屬性來判斷目前的執行個體是否支援寫入。</span><span class="sxs-lookup"><span data-stu-id="5915d-558">Use the <xref:System.IO.Stream.CanWrite%2A> property to determine whether the current instance supports writing.</span></span>  
  
 <span data-ttu-id="5915d-559">如果在作業完成之前將其取消，則傳回的工作包含<xref:System.Threading.Tasks.TaskStatus.Canceled>值<xref:System.Threading.Tasks.Task.Status%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="5915d-559">If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus.Canceled> value for the <xref:System.Threading.Tasks.Task.Status%2A> property.</span></span>  
  
 <span data-ttu-id="5915d-560">如需範例，請參閱<xref:System.IO.Stream.WriteAsync%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%29>多載。</span><span class="sxs-lookup"><span data-stu-id="5915d-560">For an example, see the <xref:System.IO.Stream.WriteAsync%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%29> overload.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5915d-561"><paramref name="buffer" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="5915d-561"><paramref name="buffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="5915d-562"><paramref name="offset" /> 或 <paramref name="count" /> 為負。</span><span class="sxs-lookup"><span data-stu-id="5915d-562"><paramref name="offset" /> or <paramref name="count" /> is negative.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5915d-563"><paramref name="offset" /> 和 <paramref name="count" /> 的總和大於緩衝區長度。</span><span class="sxs-lookup"><span data-stu-id="5915d-563">The sum of <paramref name="offset" /> and <paramref name="count" /> is larger than the buffer length.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="5915d-564">資料流不支援寫入。</span><span class="sxs-lookup"><span data-stu-id="5915d-564">The stream does not support writing.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="5915d-565">已處置此資料流。</span><span class="sxs-lookup"><span data-stu-id="5915d-565">The stream has been disposed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5915d-566">之前的寫入作業目前正在使用資料流。</span><span class="sxs-lookup"><span data-stu-id="5915d-566">The stream is currently in use by a previous write operation.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteByte">
      <MemberSignature Language="C#" Value="public virtual void WriteByte (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteByte(unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.WriteByte(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteByte (value As Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteByte(System::Byte value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="5915d-567">寫入資料流的位元組。</span><span class="sxs-lookup"><span data-stu-id="5915d-567">The byte to write to the stream.</span></span></param>
        <summary><span data-ttu-id="5915d-568">寫入一個位元組至資料流的目前位置，並將資料流位置推進一個位元組。</span><span class="sxs-lookup"><span data-stu-id="5915d-568">Writes a byte to the current position in the stream and advances the position within the stream by one byte.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5915d-569">使用<xref:System.IO.Stream.CanWrite%2A>屬性來判斷目前的執行個體是否支援寫入。</span><span class="sxs-lookup"><span data-stu-id="5915d-569">Use the <xref:System.IO.Stream.CanWrite%2A> property to determine whether the current instance supports writing.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="5915d-570">發生 I/O 錯誤。</span><span class="sxs-lookup"><span data-stu-id="5915d-570">An I/O error occurs.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="5915d-571">資料流不支援寫入，或資料流已經關閉。</span><span class="sxs-lookup"><span data-stu-id="5915d-571">The stream does not support writing, or the stream is already closed.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="5915d-572">關閉資料流後呼叫了方法。</span><span class="sxs-lookup"><span data-stu-id="5915d-572">Methods were called after the stream was closed.</span></span></exception>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="5915d-573">上的預設實作<see langword="Stream" />建立新的單一位元組陣列，然後呼叫<see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" />。</span><span class="sxs-lookup"><span data-stu-id="5915d-573">The default implementation on <see langword="Stream" /> creates a new single-byte array and then calls <see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" />.</span></span> <span data-ttu-id="5915d-574">雖然這是正式正確，就沒有效率。</span><span class="sxs-lookup"><span data-stu-id="5915d-574">While this is formally correct, it is inefficient.</span></span> <span data-ttu-id="5915d-575">任何內部緩衝區的資料流應該覆寫這個方法，並提供更有效率的版本會寫入至緩衝區直接，避免在每次呼叫配置額外的陣列。</span><span class="sxs-lookup"><span data-stu-id="5915d-575">Any stream with an internal buffer should override this method and provide a much more efficient version that writes to the buffer directly, avoiding the extra array allocation on every call.</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="WriteTimeout">
      <MemberSignature Language="C#" Value="public virtual int WriteTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WriteTimeout" />
      <MemberSignature Language="DocId" Value="P:System.IO.Stream.WriteTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property WriteTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int WriteTimeout { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5915d-576">取得或設定值 (以毫秒為單位)，該值決定在逾時前資料流將嘗試寫入多長時間。</span><span class="sxs-lookup"><span data-stu-id="5915d-576">Gets or sets a value, in miliseconds, that determines how long the stream will attempt to write before timing out.</span></span></summary>
        <value><span data-ttu-id="5915d-577">值 (以毫秒為單位)，該值決定在逾時前資料流將嘗試寫入多長時間。</span><span class="sxs-lookup"><span data-stu-id="5915d-577">A value, in miliseconds, that determines how long the stream will attempt to write before timing out.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5915d-578"><see cref="P:System.IO.Stream.WriteTimeout" /> 方法必須擲回 <see cref="T:System.InvalidOperationException" />。</span><span class="sxs-lookup"><span data-stu-id="5915d-578">The <see cref="P:System.IO.Stream.WriteTimeout" /> method always throws an <see cref="T:System.InvalidOperationException" />.</span></span></exception>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="5915d-579"><see cref="P:System.IO.Stream.WriteTimeout" />應該覆寫屬性，來為資料流提供適當的行為。</span><span class="sxs-lookup"><span data-stu-id="5915d-579">The <see cref="P:System.IO.Stream.WriteTimeout" /> property should be overridden to provide the appropriate behavior for the stream.</span></span> <span data-ttu-id="5915d-580">如果資料流不支援逾時，這個屬性應該會引發<see cref="T:System.InvalidOperationException" />。</span><span class="sxs-lookup"><span data-stu-id="5915d-580">If the stream does not support timing out, this property should raise an <see cref="T:System.InvalidOperationException" />.</span></span></para>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>