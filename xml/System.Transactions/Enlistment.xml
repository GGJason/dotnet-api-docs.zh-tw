<Type Name="Enlistment" FullName="System.Transactions.Enlistment">
  <Metadata><Meta Name="ms.openlocfilehash" Value="58486972928fe655ea181d1b308eab4be338689a" /><Meta Name="ms.sourcegitcommit" Value="0e1f030650a307c745ee84ed547ef858acaea587" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="11/29/2018" /><Meta Name="ms.locfileid" Value="52598690" /></Metadata><TypeSignature Language="C#" Value="public class Enlistment" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Enlistment extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Transactions.Enlistment" />
  <TypeSignature Language="VB.NET" Value="Public Class Enlistment" />
  <TypeSignature Language="C++ CLI" Value="public ref class Enlistment" />
  <TypeSignature Language="F#" Value="type Enlistment = class" />
  <AssemblyInfo>
    <AssemblyName>System.Transactions</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Transactions.Local</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>在交易的最後階段，協助登記的交易參與者與交易管理員之間的通訊。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當<xref:System.Transactions.Transaction.EnlistVolatile%2A>並<xref:System.Transactions.Transaction.EnlistDurable%2A>方法<xref:System.Transactions.Transaction>物件叫用方式，是為了登記在交易中的參與者，則會傳回此物件，描述登記。  
  
 在交易認可的最後一個階段，交易管理員將此物件傳遞到實作 resource manager<xref:System.Transactions.IEnlistmentNotification>已經登錄於交易中的介面。 具體來說，交易管理員撥打<xref:System.Transactions.IEnlistmentNotification.Commit%2A>或<xref:System.Transactions.IEnlistmentNotification.Rollback%2A>參與者，取決於是否後者已決定要認可或回復交易的方法。 參與者應該呼叫<xref:System.Transactions.Enlistment.Done%2A>這個物件可讓交易管理員知道它已完成其工作的方法。  
  
 可以呼叫登記<xref:System.Transactions.Enlistment.Done%2A>它呼叫方法，在任何時間之前<xref:System.Transactions.PreparingEnlistment.Prepared%2A>在 「 準備 」 階段。  如此一來，編列正在轉換成唯讀的票數，這表示它投票認可交易，但是不需要接收最後的結果。 請注意之後,<xref:System.Transactions.Enlistment.Done%2A>呼叫方法，已登錄的參與者接收來自交易管理員的任何進一步的通知。  
  
   
  
## Examples  
 下列範例示範實作<xref:System.Transactions.IEnlistmentNotification>介面，以及當<xref:System.Transactions.Enlistment.Done%2A>方法應該呼叫。  
  
 [!code-csharp[Tx_Enlist#2](~/samples/snippets/csharp/VS_Snippets_CFX/tx_enlist/cs/enlist.cs#2)]
 [!code-vb[Tx_Enlist#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/tx_enlist/vb/enlist.vb#2)]  
  
 ]]></format>
    </remarks>
    <threadsafe>此型別具備執行緒安全。</threadsafe>
    <altmember cref="T:System.Transactions.PreparingEnlistment" />
    <altmember cref="T:System.Transactions.IEnlistmentNotification" />
    <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ee818750(v=vs.100)">將資源登記在交易中的參與者</related>
  </Docs>
  <Members>
    <Member MemberName="Done">
      <MemberSignature Language="C#" Value="public void Done ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Done() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.Enlistment.Done" />
      <MemberSignature Language="VB.NET" Value="Public Sub Done ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Done();" />
      <MemberSignature Language="F#" Value="member this.Done : unit -&gt; unit" Usage="enlistment.Done " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>指出交易參與者已完成其工作。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在交易認可的最後一個階段，交易管理員撥打<xref:System.Transactions.IEnlistmentNotification.Commit%2A>，<xref:System.Transactions.IEnlistmentNotification.Rollback%2A>或<xref:System.Transactions.IEnlistmentNotification.InDoubt%2A>參與者，根據是否應該認可或回復交易的方法。 資源管理員應該執行任何必要的工作以完成交易，然後再告知交易管理員它已完成藉由呼叫<xref:System.Transactions.Enlistment.Done%2A>方法`enlistment`參數。  
  
 如果資源管理員已永久，登錄，但不會回應呼叫<xref:System.Transactions.Enlistment.Done%2A>方法中，交易管理員會確定資源管理員已收到個別通知呼叫。 此情況下，交易管理員會等候回應，並維護此交易的相關資訊。  如果<xref:System.Transactions.Enlistment.Done%2A>是絕不會呼叫，這項資訊是有關無限期保留在記憶體中或全系統資源。 這會導致無法回收資源。 如果是分散式的交易，這可能最終會填滿突然停止 MSDTC 程序的 MSDTC 記錄檔。 在所管理的交易的情況下<xref:System.Transactions>，這會導致資源管理員的程序的記憶體耗用量漸進且持續增加。 因此，很重要，您可以呼叫<xref:System.Transactions.Enlistment.Done%2A>方法，您的資源管理員完成後您準備工作。  
  
 可以呼叫登記<xref:System.Transactions.Enlistment.Done%2A>它呼叫方法，在任何時間之前<xref:System.Transactions.PreparingEnlistment.Prepared%2A>在 「 準備 」 階段。 如此一來，編列正在轉換成唯讀的票數，這表示它投票認可交易，但是不需要接收最後的結果。 請注意，會呼叫這個方法之後，已登錄的參與者收到任何告知交易管理員。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Transactions.PreparingEnlistment" />
        <altmember cref="T:System.Transactions.IEnlistmentNotification" />
        <related type="Article" href="https://msdn.microsoft.com/en-us/library/7bf66ce7-4190-4910-89d7-df4ad43e9f31">將資源登記在交易中的參與者</related>
      </Docs>
    </Member>
  </Members>
</Type>