<Type Name="Enlistment" FullName="System.Transactions.Enlistment">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="83677dcd285d02d338157cbdb038740221f092c8" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36406273" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Enlistment" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Enlistment extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Transactions.Enlistment" />
  <TypeSignature Language="VB.NET" Value="Public Class Enlistment" />
  <TypeSignature Language="C++ CLI" Value="public ref class Enlistment" />
  <TypeSignature Language="F#" Value="type Enlistment = class" />
  <AssemblyInfo>
    <AssemblyName>System.Transactions</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Transactions.Local</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>在交易的最後階段，協助登記的交易參與者與交易管理員之間的通訊。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當<xref:System.Transactions.Transaction.EnlistVolatile%2A>和<xref:System.Transactions.Transaction.EnlistDurable%2A>方法<xref:System.Transactions.Transaction>物件會叫用登記在交易中的參與者，它們會傳回此物件，描述登記。  
  
 在交易認可的最後一個階段中，交易管理員將此物件傳遞給實作資源管理員<xref:System.Transactions.IEnlistmentNotification>登記在交易中的介面。 具體來說，交易管理員便會呼叫 <xref:System.Transactions.IEnlistmentNotification.Commit%2A>或<xref:System.Transactions.IEnlistmentNotification.Rollback%2A>參與者，根據是否後者已決定要認可或回復交易的方法。 參與者應該呼叫<xref:System.Transactions.Enlistment.Done%2A>方法，這個物件可讓交易管理員知道它已完成其工作。  
  
 可以呼叫登記<xref:System.Transactions.Enlistment.Done%2A>方法在任何時間之前已呼叫它<xref:System.Transactions.PreparingEnlistment.Prepared%2A>準備階段。  如此一來，登記計算唯讀的票數，這表示它投票認可交易，但是不需要接收最終的結果。 請注意之後,<xref:System.Transactions.Enlistment.Done%2A>呼叫方法時，已登錄的參與者接收來自交易管理員的任何進一步的通知。  
  
   
  
## Examples  
 下列範例示範實作<xref:System.Transactions.IEnlistmentNotification>介面，以及當<xref:System.Transactions.Enlistment.Done%2A>應該呼叫方法。  
  
 [!code-csharp[Tx_Enlist#2](~/samples/snippets/csharp/VS_Snippets_CFX/tx_enlist/cs/enlist.cs#2)]
 [!code-vb[Tx_Enlist#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/tx_enlist/vb/enlist.vb#2)]  
  
 ]]></format>
    </remarks>
    <threadsafe>此型別具備執行緒安全。</threadsafe>
    <altmember cref="T:System.Transactions.PreparingEnlistment" />
    <altmember cref="T:System.Transactions.IEnlistmentNotification" />
  </Docs>
  <Members>
    <Member MemberName="Done">
      <MemberSignature Language="C#" Value="public void Done ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Done() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.Enlistment.Done" />
      <MemberSignature Language="VB.NET" Value="Public Sub Done ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Done();" />
      <MemberSignature Language="F#" Value="member this.Done : unit -&gt; unit" Usage="enlistment.Done " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>指出交易參與者已完成其工作。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在交易認可的最後一個階段中，交易管理員呼叫  <xref:System.Transactions.IEnlistmentNotification.Commit%2A>，<xref:System.Transactions.IEnlistmentNotification.Rollback%2A>或<xref:System.Transactions.IEnlistmentNotification.InDoubt%2A>參與者，根據是否要認可或回復交易的方法。 資源管理員應該執行任何所需完成交易，然後告知交易管理員它藉由呼叫已完成的工作<xref:System.Transactions.Enlistment.Done%2A>方法`enlistment`參數。  
  
 如果資源管理員已登錄永久，但不會回應呼叫<xref:System.Transactions.Enlistment.Done%2A>方法時，交易管理員不確定資源管理員已收到對應通知呼叫。 因此，交易管理員會持續等候回應，以及維護與此交易相關資訊。  如果<xref:System.Transactions.Enlistment.Done%2A>是永遠不會呼叫，此項資訊是周圍無限期地保留在記憶體中或在整個系統資源。 這會導致無法回收資源。 如果是分散式交易，這可能最後會填滿中止 MSDTC 程序的 MSDTC 記錄檔。 如果是交易受<xref:System.Transactions>，這會導致記憶體耗用量，資源管理員的程序的漸進式且持續增加。 因此，很重要，您呼叫<xref:System.Transactions.Enlistment.Done%2A>方法，一旦您的資源管理員透過您準備工作。  
  
 可以呼叫登記<xref:System.Transactions.Enlistment.Done%2A>方法在任何時間之前已呼叫它<xref:System.Transactions.PreparingEnlistment.Prepared%2A>準備階段。 如此一來，登記計算唯讀的票數，這表示它投票認可交易，但是不需要接收最終的結果。 請注意，會呼叫這個方法之後，已登錄的參與者沒有進一步從接收通知之交易管理員。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Transactions.PreparingEnlistment" />
        <altmember cref="T:System.Transactions.IEnlistmentNotification" />
      </Docs>
    </Member>
  </Members>
</Type>