<Type Name="FormsAuthentication" FullName="System.Web.Security.FormsAuthentication">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9ee8d57b70fdfdb500cdd702255c25df5e88f97b" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39799041" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class FormsAuthentication" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit FormsAuthentication extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Security.FormsAuthentication" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class FormsAuthentication" />
  <TypeSignature Language="C++ CLI" Value="public ref class FormsAuthentication sealed" />
  <TypeSignature Language="F#" Value="type FormsAuthentication = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>管理 Web 應用程式的表單驗證服務。 這個類別無法被繼承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 表單驗證可讓使用者和密碼驗證，不需要 Windows 驗證的 Web 應用程式。 使用表單驗證，使用者資訊會儲存在外部資料來源，例如<xref:System.Web.Security.Membership>資料庫，或在應用程式的組態檔中。 使用者驗證之後，表單驗證會維護在 cookie 中，或在 URL 中的驗證票證，讓已驗證的使用者不需要提供每個要求的認證。  
  
 藉由設定啟用表單驗證`mode`屬性的組態項目`Forms`。 您可以要求應用程式的所有要求都包含有效的使用者驗證票證，以拒絕任何未知的使用者，要求使用的組態項目，如下列範例所示。  
  
```  
<system.web>  
  <authentication mode="Forms">  
    <forms loginUrl="login.aspx" />  
  </authentication>  
  <authorization>  
    <deny users="?" />  
  </authorization>  
</system.web>  
```  
  
 在上述範例中，ASP.NET 網頁應用程式一部分的任何要求需要表單驗證所提供的有效使用者名稱。 如果沒有使用者名稱存在，則會要求重新導向至已設定<xref:System.Web.Security.FormsAuthentication.LoginUrl%2A>。  
  
 <xref:System.Web.Security.FormsAuthentication>類別提供方法和屬性，您可以使用驗證使用者的應用程式中的存取。 <xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A>方法會在瀏覽器重新導向至已設定<xref:System.Web.Security.FormsAuthentication.LoginUrl%2A>的使用者可以登入應用程式。 <xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A>回到原始受保護的 URL 要求，或若要將已驗證的使用者重新導向的方法<xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A>。 也有一些方法，如有需要請讓您管理表單驗證票證。  
  
   
  
## Examples  
 下列程式碼範例會顯示為表單驗證使用 ASP.NET 成員資格提供者，並要求所有使用者都必須經過驗證的 ASP.NET 應用程式的 Web.config 檔案。  
  
```  
<configuration>  
  <connectionStrings>  
    <add name="SqlServices" connectionString="Data Source=MySqlServer;Integrated Security=SSPI;Initial Catalog=aspnetdb;" />  
  </connectionStrings>  
  <system.web>  
    <membership defaultProvider="SqlProvider" userIsOnlineTimeWindow="20">  
      <providers>  
        <add name="SqlProvider"  
          type="System.Web.Security.SqlMembershipProvider"  
          connectionStringName="SqlServices"  
          enablePasswordRetrieval="false"  
          enablePasswordReset="true"  
          requiresQuestionAndAnswer="true"  
          passwordFormat="Hashed"  
          applicationName="/" />  
      </providers>  
    </membership>  
  </system.web>  
</configuration>  
```  
  
 下列程式碼範例示範使用表單驗證和 ASP.NET 成員資格的 ASP.NET 應用程式的登入頁面。  
  
> [!IMPORTANT]
>  此範例包含一個文字方塊，接受使用者輸入，也就是潛在的安全性威脅。 根據預設，ASP.NET Web 網頁會驗證使用者輸入未包含指令碼或 HTML 項目。 如需詳細資訊，請參閱 [Script Exploits Overview](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07) (指令碼攻擊概觀)。  
  
 [!code-aspx-csharp[System.Web.Security.SqlMembershipProvider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/logincs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.SqlMembershipProvider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/loginvb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Web.AspNetHostingPermission">若要使用<see cref="T:System.Web.Security.FormsAuthentication" />裝載環境中的類別。 要求值： <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />。 權限值： <see cref="F:System.Web.AspNetHostingPermissionLevel.Minimal" />。</permission>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FormsAuthentication ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FormsAuthentication();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Web.Security.FormsAuthentication" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個建構函式不是從您的程式碼使用。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Authenticate">
      <MemberSignature Language="C#" Value="public static bool Authenticate (string name, string password);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Authenticate(string name, string password) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.Authenticate(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Authenticate (name As String, password As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Authenticate(System::String ^ name, System::String ^ password);" />
      <MemberSignature Language="F#" Value="static member Authenticate : string * string -&gt; bool" Usage="System.Web.Security.FormsAuthentication.Authenticate (name, password)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Obsolete("The recommended alternative is to use the Membership APIs, such as Membership.ValidateUser. For more information, see http://go.microsoft.com/fwlink/?LinkId=252463.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="password" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">使用者名稱。</param>
        <param name="password">使用者的密碼。</param>
        <summary>根據存放於應用程式組態檔中的認證，驗證使用者名稱和密碼。</summary>
        <returns>如果使用者名稱和密碼有效，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 驗證方法會驗證使用者認證儲存在應用程式組態檔的區段中。 或者，您可以使用 ASP.NET 成員資格，來儲存使用者認證和呼叫<xref:System.Web.Security.MembershipProvider.ValidateUser%2A>驗證認證。 如需詳細資訊，請參閱 <<c0> [ 使用的成員資格管理使用者](http://msdn.microsoft.com/library/824c3a24-f0af-427c-a652-0d2d1e9397cd)。  
  
 為了提升安全性，您可以將使用儲存在應用程式的組態檔中的密碼加密<xref:System.Web.Security.FormsAuthentication.HashPasswordForStoringInConfigFile%2A>方法。  
  
   
  
## Examples  
 下列程式碼範例會顯示儲存在應用程式的 Web.config 檔案中的使用者認證。 密碼值有已進行雜湊使用<xref:System.Web.Security.FormsAuthentication.HashPasswordForStoringInConfigFile%2A>方法。  
  
 `<authentication mode="Forms">`  
  
 `<forms loginUrl="login.aspx">`  
  
 `<credentials passwordFormat="SHA1">`  
  
 `<user name="user1"   password="27CE4CA7FBF00685AF2F617E3F5BBCAFF7B7403C" />`  
  
 `<user name="user2"   password="D108F80936F78DFDD333141EBC985B0233A30C7A" />`  
  
 `<user name="user3" password="7BDB09781A3F23885CD43177C0508B375CB1B7E9"/>`  
  
 `</credentials>`  
  
 `</forms>`  
  
 `</authentication>`  
  
 下列程式碼範例顯示使用的登入頁面<xref:System.Web.Security.FormsAuthentication.Authenticate%2A>方法以驗證使用者認證。  
  
> [!IMPORTANT]
>  此範例包含一個文字方塊，接受使用者輸入，也就是潛在的安全性威脅。 根據預設，ASP.NET Web 網頁會驗證使用者輸入未包含指令碼或 HTML 項目。 如需詳細資訊，請參閱 [Script Exploits Overview](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07) (指令碼攻擊概觀)。  
  
 [!code-aspx-csharp[System.Web.Security.FormsAuthentication#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.FormsAuthentication/CS/logincs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.FormsAuthentication#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.FormsAuthentication/VB/loginvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CookieDomain">
      <MemberSignature Language="C#" Value="public static string CookieDomain { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string CookieDomain" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.FormsAuthentication.CookieDomain" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CookieDomain As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ CookieDomain { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CookieDomain : string" Usage="System.Web.Security.FormsAuthentication.CookieDomain" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得表單驗證 Cookie 的網域值。</summary>
        <value>表單驗證 Cookie 的 <see cref="P:System.Web.HttpCookie.Domain" />。 預設為空字串 ("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.FormsAuthentication.CookieDomain%2A>屬性值會設定 ASP.NET 應用程式組態檔中，使用`domain`組態項目的屬性。 <xref:System.Web.Security.FormsAuthentication.CookieDomain%2A>屬性值會決定<xref:System.Web.HttpCookie.Domain%2A>會用於 cookie。  
  
   
  
## Examples  
 下列程式碼範例將`domain`Web.config 檔案中的屬性。  
  
```  
<authentication mode="Forms">  
  <forms loginUrl="member_login.aspx"  
    cookieless="UseCookies"  
    domain="contoso.com" />  
</authentication>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CookieMode">
      <MemberSignature Language="C#" Value="public static System.Web.HttpCookieMode CookieMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Web.HttpCookieMode CookieMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.FormsAuthentication.CookieMode" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CookieMode As HttpCookieMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::HttpCookieMode CookieMode { System::Web::HttpCookieMode get(); };" />
      <MemberSignature Language="F#" Value="member this.CookieMode : System.Web.HttpCookieMode" Usage="System.Web.Security.FormsAuthentication.CookieMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.HttpCookieMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得表示應用程式是否針對 Cookieless 表單驗證進行設定的值。</summary>
        <value>其中一個 <see cref="T:System.Web.HttpCookieMode" /> 值，指出應用程式是否已設定為 Cookieless 表單驗證。 預設值為 <see cref="F:System.Web.HttpCookieMode.UseDeviceProfile" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.FormsAuthentication.CookieMode%2A>屬性會反映值`cookieless`組態項目的屬性。 <xref:System.Web.Security.FormsAuthentication.CookieMode%2A>屬性會決定是否<xref:System.Web.Security.FormsAuthenticationTicket>值會儲存在瀏覽器中的工作階段 cookie 或儲存在<xref:System.Web.HttpRequest.QueryString%2A>屬性。  
  
> [!NOTE]
>  當<xref:System.Web.Security.FormsAuthenticationTicket>值會儲存在 URI 中，所產生的 URI 的長度可能超過允許的最大長度。 這是最有可能發生時<xref:System.Web.Security.FormsAuthentication.FormsCookiePath%2A>屬性設定為應用程式名稱，而且應用程式名稱過長 （40 或多個字元），當應用程式中的使用者名稱很長，或當長<xref:System.Web.Security.FormsAuthenticationTicket.UserData%2A>字串會儲存在<xref:System.Web.Security.FormsAuthenticationTicket>值。 如果產生的 URI 太長，Web 伺服器會傳回`400 - Bad Request`時發生錯誤。  
  
   
  
## Examples  
 下列程式碼範例會設定`cookieless`屬性設定為`AutoDetect`Web.config 檔案中。  
  
```  
<authentication mode="Forms">  
  <forms loginUrl="member_login.aspx"  
    cookieless="AutoDetect" />  
</authentication>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CookieSameSite">
      <MemberSignature Language="C#" Value="public static System.Web.SameSiteMode CookieSameSite { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Web.SameSiteMode CookieSameSite" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.FormsAuthentication.CookieSameSite" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CookieSameSite As SameSiteMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::SameSiteMode CookieSameSite { System::Web::SameSiteMode get(); };" />
      <MemberSignature Language="F#" Value="member this.CookieSameSite : System.Web.SameSiteMode" Usage="System.Web.Security.FormsAuthentication.CookieSameSite" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.SameSiteMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定 Cookie 的 SameSite 屬性值。</summary>
        <value>其中一個列舉值，代表 Cookie 的強制模式。 預設值是 <see cref="F:System.Web.SameSiteMode.Lax" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CookiesSupported">
      <MemberSignature Language="C#" Value="public static bool CookiesSupported { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool CookiesSupported" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.FormsAuthentication.CookiesSupported" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CookiesSupported As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool CookiesSupported { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CookiesSupported : bool" Usage="System.Web.Security.FormsAuthentication.CookiesSupported" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得表示應用程式是否設定為支援 Cookieless 表單驗證的值。</summary>
        <value>如果應用程式已設定為支援 Cookieless 表單驗證，則為 <see langword="false" />，否則為 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A>屬性會傳回值，根據<xref:System.Web.Security.FormsAuthentication.CookieMode%2A>值與瀏覽器的功能。  
  
-   如果<xref:System.Web.Security.FormsAuthentication.CookieMode%2A>屬性設定為<xref:System.Web.HttpCookieMode.UseCookies>，則<xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A>屬性會傳回`true`。  
  
-   如果<xref:System.Web.Security.FormsAuthentication.CookieMode%2A>屬性設定為<xref:System.Web.HttpCookieMode.UseUri>，則<xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A>屬性會傳回`false`。  
  
-   如果<xref:System.Web.Security.FormsAuthentication.CookieMode%2A>屬性設定為<xref:System.Web.HttpCookieMode.AutoDetect>，則<xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A>屬性會傳回`true`如果瀏覽器支援 cookie，而且 cookie 會啟用，否則<xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A>屬性會傳回`false`。  
  
-   如果<xref:System.Web.Security.FormsAuthentication.CookieMode%2A>屬性設定為<xref:System.Web.HttpCookieMode.UseDeviceProfile>，則<xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A>屬性會傳回`true`如果<xref:System.Web.HttpRequest.Browser%2A>目前<xref:System.Web.HttpContext.Request%2A>支援 cookie 和以 cookie; 重新導向，否則為<xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A>屬性會傳回`false`。  
  
   
  
## Examples  
 下列程式碼範例會設定`cookieless`屬性設定為<xref:System.Web.HttpCookieMode.UseUri>Web.config 檔案中。 此設定會導致<xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A>屬性傳回`false`。  
  
```  
<authentication mode="Forms">  
  <forms loginUrl="member_login.aspx"  
    cookieless="UseUri" />  
</authentication>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Decrypt">
      <MemberSignature Language="C#" Value="public static System.Web.Security.FormsAuthenticationTicket Decrypt (string encryptedTicket);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.FormsAuthenticationTicket Decrypt(string encryptedTicket) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.Decrypt(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Decrypt (encryptedTicket As String) As FormsAuthenticationTicket" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::Security::FormsAuthenticationTicket ^ Decrypt(System::String ^ encryptedTicket);" />
      <MemberSignature Language="F#" Value="static member Decrypt : string -&gt; System.Web.Security.FormsAuthenticationTicket" Usage="System.Web.Security.FormsAuthentication.Decrypt encryptedTicket" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.FormsAuthenticationTicket</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encryptedTicket" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="encryptedTicket">加密的驗證票證。</param>
        <summary>根據傳遞至方法的已加密表單驗證票證，建立 <see cref="T:System.Web.Security.FormsAuthenticationTicket" /> 物件。</summary>
        <returns>
          <see cref="T:System.Web.Security.FormsAuthenticationTicket" /> 物件。 如果 <paramref name="encryptedTicket" /> 參數不是有效票證，則會傳回 <see langword="null" />。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="encryptedTicket" /> 為 <see langword="null" />。  
  
\-或- 
 <paramref name="encryptedTicket" /> 為空字串 ("")。  
  
\-或- 
<paramref name="encryptedTicket" /> 的長度大於 4096 個字元。  
  
\-或- 
 <paramref name="encryptedTicket" /> 屬於無效格式。</exception>
      </Docs>
    </Member>
    <Member MemberName="DefaultUrl">
      <MemberSignature Language="C#" Value="public static string DefaultUrl { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string DefaultUrl" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.FormsAuthentication.DefaultUrl" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DefaultUrl As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ DefaultUrl { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultUrl : string" Usage="System.Web.Security.FormsAuthentication.DefaultUrl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得未指定重新導向 URL 時，<see cref="T:System.Web.Security.FormsAuthentication" /> 類別將重新導向的 URL。</summary>
        <value>未指定重新導向 URL 時，<see cref="T:System.Web.Security.FormsAuthentication" /> 類別將重新導向的 URL。 預設值為 "default.aspx"。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A>屬性值會設定 ASP.NET 應用程式組態檔中，使用`defaultUrl`組態項目的屬性。 <xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A>屬性由<xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A>方法如果在要求中不包含任何傳回的 URL。 同樣地，<xref:System.Web.Security.FormsAuthentication.GetRedirectUrl%2A>方法會傳回<xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A>如果包含在要求中沒有傳回 URL。  
  
   
  
## Examples  
 下列程式碼範例將`defaultUrl`Web.config 檔案中的屬性。  
  
```  
<authentication mode="Forms">  
  <forms loginUrl="member_login.aspx"  
    defaultUrl="index.aspx" />  
</authentication>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableCrossAppRedirects">
      <MemberSignature Language="C#" Value="public static bool EnableCrossAppRedirects { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool EnableCrossAppRedirects" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property EnableCrossAppRedirects As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool EnableCrossAppRedirects { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.EnableCrossAppRedirects : bool" Usage="System.Web.Security.FormsAuthentication.EnableCrossAppRedirects" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，指出已驗證的使用者是否能重新導向至其他 Web 應用程式中的 URL。</summary>
        <value>如果已驗證的使用者能夠重新導向至其他 Web 應用程式中的 URL，則為 <see langword="true" />，否則為 <see langword="false" />。 預設值為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A>屬性值會設定使用`enableCrossAppRedirects`組態項目的屬性。  
  
 <xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A>內檢查屬性<xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A>方法時重新導向 URL 未指向目前的應用程式中的頁面。 如果<xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A>是`true`，然後執行重新導向; 如果<xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A>是`false`，頁面中定義的瀏覽器會被重新導向<xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A>屬性。  
  
> [!NOTE]
>  當您將頁面重新導向所有應用程式時，您必須確定特定屬性中的組態項目會複製所有已驗證的應用程式。 如需詳細資訊和範例，請參閱 < [Forms 應用程式之間的驗證](http://msdn.microsoft.com/library/99e2f9e8-5b97-4a4d-a4ed-5f93276053b7)。  
  
> [!IMPORTANT]
>  允許跨應用程式重新導向，您的網站時，容易受到攻擊將導向至惡意網站的使用者，但您的網站使用的登入頁面。 一定要確認重新導向 URL 傳回<xref:System.Web.Security.FormsAuthentication.GetRedirectUrl%2A>方法是您預期，讓您可以確定您允許只重新導向至已核准的網站的 URL。 您也必須驗證重新導向 URL 會使用適當的通訊協定 （HTTP 或 HTTPS）。 若要執行這些驗證之後，您可以將回傳事件處理常式新增至您登入頁面上，或您可以加入的處理常式<xref:System.Web.UI.WebControls.Login.LoggedIn>事件的<xref:System.Web.UI.WebControls.Login>控制項。  
  
   
  
## Examples  
 下列程式碼範例會設定`enableCrossAppRedirects`屬性設定為`true`ASP.NET 應用程式的 Web.config 檔案中。  
  
```  
<authentication mode="Forms">  
  <forms loginUrl="member_login.aspx"  
    cookieless="UseUri"  
    requireSSL="true"   
    enableCrossAppRedirects="true" />  
</authentication>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableFormsAuthentication">
      <MemberSignature Language="C#" Value="public static void EnableFormsAuthentication (System.Collections.Specialized.NameValueCollection configurationData);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void EnableFormsAuthentication(class System.Collections.Specialized.NameValueCollection configurationData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.EnableFormsAuthentication(System.Collections.Specialized.NameValueCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub EnableFormsAuthentication (configurationData As NameValueCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void EnableFormsAuthentication(System::Collections::Specialized::NameValueCollection ^ configurationData);" />
      <MemberSignature Language="F#" Value="static member EnableFormsAuthentication : System.Collections.Specialized.NameValueCollection -&gt; unit" Usage="System.Web.Security.FormsAuthentication.EnableFormsAuthentication configurationData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="configurationData" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="configurationData">包含值為 "defaultUrl" 和 (或) "loginUrl" 的名稱值集合。 如果預設 URL 或登入 URL 沒有任何值，此參數可以是 null。</param>
        <summary>啟用表單驗證。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A>屬性是`null`，，要將屬性設定的預設 URL 值為`configurationData`參數。 如果<xref:System.Web.Security.FormsAuthentication.LoginUrl%2A>屬性是`null`，，要將屬性設定為登入 URL 值`configurationData`參數。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">應用程式不在啟動前的初始化階段。</exception>
      </Docs>
    </Member>
    <Member MemberName="Encrypt">
      <MemberSignature Language="C#" Value="public static string Encrypt (System.Web.Security.FormsAuthenticationTicket ticket);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Encrypt(class System.Web.Security.FormsAuthenticationTicket ticket) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.Encrypt(System.Web.Security.FormsAuthenticationTicket)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Encrypt (ticket As FormsAuthenticationTicket) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Encrypt(System::Web::Security::FormsAuthenticationTicket ^ ticket);" />
      <MemberSignature Language="F#" Value="static member Encrypt : System.Web.Security.FormsAuthenticationTicket -&gt; string" Usage="System.Web.Security.FormsAuthentication.Encrypt ticket" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ticket" Type="System.Web.Security.FormsAuthenticationTicket" />
      </Parameters>
      <Docs>
        <param name="ticket">
          <see cref="T:System.Web.Security.FormsAuthenticationTicket" /> 物件，可用來建立已加密的表單驗證票證。</param>
        <summary>建立包含已加密表單驗證票證 (適用於 HTTP Cookie 中) 的字串。</summary>
        <returns>字串，包含已加密的表單驗證票證。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例會將儲存的結果<xref:System.Web.Security.FormsAuthentication.Encrypt%2A>方法中使用 cookie<xref:System.Web.Security.FormsAuthentication.FormsCookieName%2A>屬性和重新導向至 URL 的使用者傳回<xref:System.Web.Security.FormsAuthentication.GetRedirectUrl%2A>方法。  
  
> [!IMPORTANT]
>  此範例包含一個文字方塊，接受使用者輸入，也就是潛在的安全性威脅。 根據預設，ASP.NET Web 網頁會驗證使用者輸入未包含指令碼或 HTML 項目。 如需詳細資訊，請參閱 [Script Exploits Overview](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07) (指令碼攻擊概觀)。  
  
 [!code-aspx-csharp[FormsAuthenticationTicketClass#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormsAuthenticationTicketClass/CS/formsauthenticationticketclasscs.aspx#1)]
 [!code-aspx-vb[FormsAuthenticationTicketClass#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormsAuthenticationTicketClass/VB/formsauthenticationticketclassvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ticket" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="FormsCookieName">
      <MemberSignature Language="C#" Value="public static string FormsCookieName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string FormsCookieName" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.FormsAuthentication.FormsCookieName" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property FormsCookieName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ FormsCookieName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FormsCookieName : string" Usage="System.Web.Security.FormsAuthentication.FormsCookieName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得用來存放表單驗證票證的 Cookie 名稱。</summary>
        <value>用來存放表單驗證票證的 Cookie 名稱。 預設值為 ".ASPXAUTH"。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.FormsAuthentication.FormsCookieName%2A>屬性值會設定 ASP.NET 應用程式組態檔中，使用`name`組態項目的屬性。 <xref:System.Web.Security.FormsAuthentication.FormsCookieName%2A>用來參考儲存在 cookie<xref:System.Web.Security.FormsAuthenticationTicket>資訊。  
  
   
  
## Examples  
 下列程式碼範例會設定<xref:System.Web.Security.FormsAuthentication.FormsCookieName%2A>屬性值使用`name`Web.config 檔案中的屬性。  
  
```  
<authentication mode="Forms">  
  <forms loginUrl="member_login.aspx"  
    cookieless="UseCookies"  
    name=".ASPXFORMSAUTH" />  
</authentication>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FormsCookiePath">
      <MemberSignature Language="C#" Value="public static string FormsCookiePath { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string FormsCookiePath" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.FormsAuthentication.FormsCookiePath" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property FormsCookiePath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ FormsCookiePath { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FormsCookiePath : string" Usage="System.Web.Security.FormsAuthentication.FormsCookiePath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得表單驗證 Cookie 的路徑。</summary>
        <value>存放表單驗證票證資訊的 Cookie 路徑。 預設值為 "/"。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.FormsAuthentication.FormsCookiePath%2A>屬性值會設定 ASP.NET 應用程式使用的組態檔中`path`組態項目的屬性。 <xref:System.Web.Security.FormsAuthentication.FormsCookiePath%2A>指定<xref:System.Web.HttpCookie.Path%2A>cookie 儲存<xref:System.Web.Security.FormsAuthenticationTicket>資訊。  
  
   
  
## Examples  
 下列程式碼範例會設定<xref:System.Web.Security.FormsAuthentication.FormsCookiePath%2A>屬性值使用`path`Web.config 檔案中的屬性。  
  
```  
<authentication mode="Forms">  
  <forms loginUrl="member_login.aspx"  
    cookieless="UseCookies"  
    path="/MyApplication" />  
</authentication>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAuthCookie">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>建立指定使用者名稱的驗證 Cookie。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAuthCookie">
      <MemberSignature Language="C#" Value="public static System.Web.HttpCookie GetAuthCookie (string userName, bool createPersistentCookie);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.HttpCookie GetAuthCookie(string userName, bool createPersistentCookie) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.GetAuthCookie(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetAuthCookie (userName As String, createPersistentCookie As Boolean) As HttpCookie" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::HttpCookie ^ GetAuthCookie(System::String ^ userName, bool createPersistentCookie);" />
      <MemberSignature Language="F#" Value="static member GetAuthCookie : string * bool -&gt; System.Web.HttpCookie" Usage="System.Web.Security.FormsAuthentication.GetAuthCookie (userName, createPersistentCookie)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.HttpCookie</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userName" Type="System.String" />
        <Parameter Name="createPersistentCookie" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="userName">已驗證使用者的名稱。</param>
        <param name="createPersistentCookie">
          <see langword="true" /> 表示建立持久性 Cookie (跨瀏覽器工作階段儲存的 Cookie)，否則為 <see langword="false" />。</param>
        <summary>建立指定使用者名稱的驗證 Cookie。 這不會設定 Cookie 成為連出回應的一部分，因此應用程式更能夠控制如何發出 Cookie。</summary>
        <returns>
          <see cref="T:System.Web.HttpCookie" />，其中包含已加密的表單驗證票證資訊。 使用 <see cref="P:System.Web.Security.FormsAuthentication.FormsCookiePath" /> 屬性的預設值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cookie 的路徑由<xref:System.Web.Security.FormsAuthentication.FormsCookiePath%2A>屬性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAuthCookie">
      <MemberSignature Language="C#" Value="public static System.Web.HttpCookie GetAuthCookie (string userName, bool createPersistentCookie, string strCookiePath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.HttpCookie GetAuthCookie(string userName, bool createPersistentCookie, string strCookiePath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.GetAuthCookie(System.String,System.Boolean,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetAuthCookie (userName As String, createPersistentCookie As Boolean, strCookiePath As String) As HttpCookie" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::HttpCookie ^ GetAuthCookie(System::String ^ userName, bool createPersistentCookie, System::String ^ strCookiePath);" />
      <MemberSignature Language="F#" Value="static member GetAuthCookie : string * bool * string -&gt; System.Web.HttpCookie" Usage="System.Web.Security.FormsAuthentication.GetAuthCookie (userName, createPersistentCookie, strCookiePath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.HttpCookie</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userName" Type="System.String" />
        <Parameter Name="createPersistentCookie" Type="System.Boolean" />
        <Parameter Name="strCookiePath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="userName">已驗證使用者的名稱。</param>
        <param name="createPersistentCookie">
          <see langword="true" /> 表示建立持久性 Cookie (跨瀏覽器工作階段儲存的 Cookie)，否則為 <see langword="false" />。</param>
        <param name="strCookiePath">驗證 Cookie 的 <see cref="P:System.Web.HttpCookie.Path" />。</param>
        <summary>建立指定使用者名稱的驗證 Cookie。 這不會將 Cookie 設定為外送回應的一部分。</summary>
        <returns>
          <see cref="T:System.Web.HttpCookie" />，其中包含已加密的表單驗證票證資訊。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRedirectUrl">
      <MemberSignature Language="C#" Value="public static string GetRedirectUrl (string userName, bool createPersistentCookie);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetRedirectUrl(string userName, bool createPersistentCookie) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.GetRedirectUrl(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRedirectUrl (userName As String, createPersistentCookie As Boolean) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetRedirectUrl(System::String ^ userName, bool createPersistentCookie);" />
      <MemberSignature Language="F#" Value="static member GetRedirectUrl : string * bool -&gt; string" Usage="System.Web.Security.FormsAuthentication.GetRedirectUrl (userName, createPersistentCookie)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userName" Type="System.String" />
        <Parameter Name="createPersistentCookie" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="userName">已驗證使用者的名稱。</param>
        <param name="createPersistentCookie">這個參數已忽略。</param>
        <summary>傳回原始要求的重新導向 URL，此原始要求造成重新導向至登入網頁。</summary>
        <returns>包含重新導向 URL 的字串，如果 <paramref name="userName" /> 為 null，則為 null。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用這個方法，當您想要重新導向程式碼中執行應用程式而不是使用<xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A>方法。  
  
 <xref:System.Web.Security.FormsAuthentication.GetRedirectUrl%2A>方法會傳回在查詢字串中使用指定的 URL`ReturnURL`變數名稱。 例如，在 URL `http://www.contoso.com/login.aspx?ReturnUrl=caller.aspx`，則<xref:System.Web.Security.FormsAuthentication.GetRedirectUrl%2A>方法傳回的傳回 URL `caller.aspx`。 如果`ReturnURL`變數不存在，<xref:System.Web.Security.FormsAuthentication.GetRedirectUrl%2A>方法會傳回在 URL<xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A>屬性。  
  
 瀏覽器重新導向至登入頁面時，ASP.NET 會自動將傳回的 URL。  
  
 根據預設，`ReturnUrl`變數必須參考目前的應用程式內的頁面。 如果`ReturnUrl`頁面在不同的應用程式中或在不同的伺服器，是指<xref:System.Web.Security.FormsAuthentication.GetRedirectUrl%2A>方法會傳回在 URL<xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A>屬性。 如果您想要允許的傳回 URL 來參考目前的應用程式外的網頁，您必須設定<xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A>屬性，以`true`使用`enableCrossAppRedirects`組態項目的屬性。  

這個方法不會建立 cookie。
  
> [!IMPORTANT]
>  設定<xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A>屬性設`true`以便跨應用程式重新導向是潛在的安全性威脅。 如需詳細資訊，請參閱 <xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A> 屬性 (Property)。  
  
   
  
## Examples  
 下列程式碼範例中重新導向至的 URL 已驗證的使用者傳回<xref:System.Web.Security.FormsAuthentication.GetRedirectUrl%2A>方法。  
  
> [!IMPORTANT]
>  此範例包含一個文字方塊，接受使用者輸入，也就是潛在的安全性威脅。 根據預設，ASP.NET Web 網頁會驗證使用者輸入未包含指令碼或 HTML 項目。 如需詳細資訊，請參閱 [Script Exploits Overview](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07) (指令碼攻擊概觀)。  
  
 [!code-aspx-csharp[FormsAuthenticationTicketClass#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormsAuthenticationTicketClass/CS/formsauthenticationticketclasscs.aspx#1)]
 [!code-aspx-vb[FormsAuthenticationTicketClass#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormsAuthenticationTicketClass/VB/formsauthenticationticketclassvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HashPasswordForStoringInConfigFile">
      <MemberSignature Language="C#" Value="public static string HashPasswordForStoringInConfigFile (string password, string passwordFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string HashPasswordForStoringInConfigFile(string password, string passwordFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.HashPasswordForStoringInConfigFile(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function HashPasswordForStoringInConfigFile (password As String, passwordFormat As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ HashPasswordForStoringInConfigFile(System::String ^ password, System::String ^ passwordFormat);" />
      <MemberSignature Language="F#" Value="static member HashPasswordForStoringInConfigFile : string * string -&gt; string" Usage="System.Web.Security.FormsAuthentication.HashPasswordForStoringInConfigFile (password, passwordFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Obsolete("The recommended alternative is to use the Membership APIs, such as Membership.CreateUser. For more information, see http://go.microsoft.com/fwlink/?LinkId=252463.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="passwordFormat" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="password">要做雜湊演算的密碼。</param>
        <param name="passwordFormat">要使用的雜湊演算法。 <c>passwordFormat</c> 是 <see langword="String" />，表示一個 <see cref="T:System.Web.Configuration.FormsAuthPasswordFormat" /> 列舉值。</param>
        <summary>根據指定的密碼和雜湊演算法，產生適用於存放在組態檔中的雜湊密碼。</summary>
        <returns>已雜湊的密碼。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.FormsAuthentication.HashPasswordForStoringInConfigFile%2A>方法會建立可以在應用程式的組態檔中使用時儲存表單驗證認證的雜湊的密碼值。  
  
 使用儲存在應用程式的組態檔中的驗證認證<xref:System.Web.Security.FormsAuthentication.Authenticate%2A>方法以驗證應用程式的使用者的密碼。 或者，您可以使用 ASP.NET 成員資格來儲存使用者認證。 如需詳細資訊，請參閱 <<c0> [ 使用的成員資格管理使用者](http://msdn.microsoft.com/library/824c3a24-f0af-427c-a652-0d2d1e9397cd)。  
  
   
  
## Examples  
 下列程式碼範例會採用使用者名稱、 密碼和雜湊型別，並顯示包含雜湊的密碼與使用者定義的組態區段。  
  
> [!IMPORTANT]
>  此範例包含一個文字方塊，接受使用者輸入，也就是潛在的安全性威脅。 根據預設，ASP.NET Web 網頁會驗證使用者輸入未包含指令碼或 HTML 項目。 如需詳細資訊，請參閱 [Script Exploits Overview](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07) (指令碼攻擊概觀)。  
  
 [!code-aspx-csharp[FormsAuthenticationHashPassword#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormsAuthenticationHashPassword/CS/formsauthenticationhashpasswordcs.aspx#1)]
 [!code-aspx-vb[FormsAuthenticationHashPassword#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormsAuthenticationHashPassword/VB/formsauthenticationhashpasswordvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="password" /> 是 <see langword="null" />  
  
-或- 
 <paramref name="passwordFormat" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="passwordFormat" /> 不是有效的 <see cref="T:System.Web.Configuration.FormsAuthPasswordFormat" /> 值。</exception>
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public static void Initialize ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Initialize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.Initialize" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Initialize ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Initialize();" />
      <MemberSignature Language="F#" Value="static member Initialize : unit -&gt; unit" Usage="System.Web.Security.FormsAuthentication.Initialize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>根據應用程式的組態設定，初始化 <see cref="T:System.Web.Security.FormsAuthentication" /> 物件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.FormsAuthentication.Initialize%2A>方法時，會呼叫<xref:System.Web.Security.FormsAuthenticationModule>建立的執行個體<xref:System.Web.Security.FormsAuthentication>類別。 這個方法並不適合從您的程式碼呼叫。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public static bool IsEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool IsEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.FormsAuthentication.IsEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IsEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool IsEnabled { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEnabled : bool" Usage="System.Web.Security.FormsAuthentication.IsEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，指出表單驗證是否已啟用。</summary>
        <value>如果表單驗證已啟用，則為 <see langword="true" />，否則為 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoginUrl">
      <MemberSignature Language="C#" Value="public static string LoginUrl { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string LoginUrl" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.FormsAuthentication.LoginUrl" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property LoginUrl As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ LoginUrl { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LoginUrl : string" Usage="System.Web.Security.FormsAuthentication.LoginUrl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得 <see cref="T:System.Web.Security.FormsAuthentication" /> 類別將重新導向的登入網頁 URL。</summary>
        <value>
          <see cref="T:System.Web.Security.FormsAuthentication" /> 類別將重新導向的登入網頁 URL。 預設值為 "login.aspx"。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.FormsAuthentication.LoginUrl%2A>屬性值會設定 ASP.NET 應用程式組態檔中，使用`loginUrl`組態項目的屬性。 <xref:System.Web.Security.FormsAuthentication.LoginUrl%2A>正由<xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A>方法。  
  
   
  
## Examples  
 下列程式碼範例將`loginUrl`Web.config 檔案中的屬性。  
  
```  
<authentication mode="Forms">  
  <forms loginUrl="member_login.aspx"  
    defaultUrl="index.aspx" />  
</authentication>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RedirectFromLoginPage">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將已驗證的使用者重新導向回到原來要求的 URL 或預設 URL。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RedirectFromLoginPage">
      <MemberSignature Language="C#" Value="public static void RedirectFromLoginPage (string userName, bool createPersistentCookie);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RedirectFromLoginPage(string userName, bool createPersistentCookie) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.RedirectFromLoginPage(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RedirectFromLoginPage (userName As String, createPersistentCookie As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RedirectFromLoginPage(System::String ^ userName, bool createPersistentCookie);" />
      <MemberSignature Language="F#" Value="static member RedirectFromLoginPage : string * bool -&gt; unit" Usage="System.Web.Security.FormsAuthentication.RedirectFromLoginPage (userName, createPersistentCookie)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userName" Type="System.String" />
        <Parameter Name="createPersistentCookie" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="userName">已驗證的使用者名稱。</param>
        <param name="createPersistentCookie">
          <see langword="true" /> 表示建立持久性 Cookie (跨瀏覽器工作階段儲存的 Cookie)，否則為 <see langword="false" />。</param>
        <summary>將已驗證的使用者重新導向回到原來要求的 URL 或預設 URL。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A>方法會將重新導向至指定在查詢字串中使用的 URL`ReturnURL`變數名稱。 例如，在 URL `http://www.contoso.com/login.aspx?ReturnUrl=caller.aspx`，則<xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A>方法會將重新導向至傳回 URL `caller.aspx`。 如果`ReturnURL`變數不存在，<xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A>方法會將重新導向至中的 URL<xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A>屬性。  
  
 瀏覽器重新導向至登入頁面時，ASP.NET 會自動將傳回的 URL。  
  
 根據預設，`ReturnUrl`變數必須參考目前的應用程式內的頁面。 如果`ReturnUrl`頁面在不同的應用程式中或在不同的伺服器，是指<xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A>方法會將重新導向至中的 URL<xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A>屬性。 如果您想要允許重新導向至目前的應用程式外的網頁，您必須設定<xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A>屬性，以`true`使用`enableCrossAppRedirects`組態項目的屬性。  
  
> [!IMPORTANT]
>  設定<xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A>屬性設`true`以便跨應用程式重新導向是潛在的安全性威脅。 如需詳細資訊，請參閱 <xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A> 屬性 (Property)。  
  
 如果<xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A>屬性是`true`，以及`ReturnUrl`變數是在目前應用程式或<xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A>屬性`true`，則<xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A>方法發出驗證票證，並將它放入預設會使用 cookie<xref:System.Web.Security.FormsAuthentication.SetAuthCookie%2A>方法。  
  
 如果<xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A>是`false`而重新導向路徑中目前的應用程式的 url，票證會發出重新導向 URL 的一部分。 如果<xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A>已`false`，<xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A>是`true`，和在目前的應用程式頁面未參考的 URL 重新導向<xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A>方法發出驗證票證，並將它放入<xref:System.Web.HttpRequest.QueryString%2A>屬性。  
  
   
  
## Examples  
 下列程式碼範例將已驗證的使用者重新導向至其中一個原始要求的 URL 或<xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A>。 在程式碼範例會使用 ASP.NET 成員資格，來驗證使用者。 如需有關 ASP.NET 成員資格的詳細資訊，請參閱[使用的成員資格管理使用者](http://msdn.microsoft.com/library/824c3a24-f0af-427c-a652-0d2d1e9397cd)。  
  
> [!IMPORTANT]
>  此範例包含一個文字方塊，接受使用者輸入，也就是潛在的安全性威脅。 根據預設，ASP.NET Web 網頁會驗證使用者輸入未包含指令碼或 HTML 項目。 如需詳細資訊，請參閱 [Script Exploits Overview](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07) (指令碼攻擊概觀)。  
  
 [!code-aspx-csharp[System.Web.Security.SqlMembershipProvider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/logincs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.SqlMembershipProvider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/loginvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">查詢字串中所指定的傳回 URL 含有 HTTP: 或 HTTPS: 以外的通訊協定。</exception>
      </Docs>
    </Member>
    <Member MemberName="RedirectFromLoginPage">
      <MemberSignature Language="C#" Value="public static void RedirectFromLoginPage (string userName, bool createPersistentCookie, string strCookiePath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RedirectFromLoginPage(string userName, bool createPersistentCookie, string strCookiePath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.RedirectFromLoginPage(System.String,System.Boolean,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RedirectFromLoginPage (userName As String, createPersistentCookie As Boolean, strCookiePath As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RedirectFromLoginPage(System::String ^ userName, bool createPersistentCookie, System::String ^ strCookiePath);" />
      <MemberSignature Language="F#" Value="static member RedirectFromLoginPage : string * bool * string -&gt; unit" Usage="System.Web.Security.FormsAuthentication.RedirectFromLoginPage (userName, createPersistentCookie, strCookiePath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userName" Type="System.String" />
        <Parameter Name="createPersistentCookie" Type="System.Boolean" />
        <Parameter Name="strCookiePath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="userName">已驗證的使用者名稱。</param>
        <param name="createPersistentCookie">
          <see langword="true" /> 表示建立持久性 Cookie (跨瀏覽器工作階段儲存的 Cookie)，否則為 <see langword="false" />。</param>
        <param name="strCookiePath">表單驗證票證的 Cookie 路徑。</param>
        <summary>使用為表單驗證 Cookie 指定的 Cookie 路徑，將已驗證的使用者重新導向回到原先要求的 URL 或預設 URL。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A>方法會重新導向至在查詢字串中使用指定的傳回 URL`ReturnURL`變數名稱。 例如，在 URL `http://www.contoso.com/login.aspx?ReturnUrl=caller.aspx`，則<xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A>方法會將重新導向至傳回 URL `caller.aspx`。 如果`ReturnURL`變數不存在，<xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A>方法會將重新導向至中的 URL<xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A>屬性。  
  
 瀏覽器重新導向至登入頁面時，ASP.NET 會自動將傳回的 URL。  
  
 根據預設，`ReturnUrl`變數必須參考目前的應用程式內的頁面。 如果`ReturnUrl`頁面在不同的應用程式中或在不同的伺服器，是指<xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A>方法會將重新導向至中的 URL<xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A>屬性。 如果您想要允許重新導向至目前的應用程式外的網頁，您必須設定<xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A>屬性，以`true`使用`enableCrossAppRedirects`組態項目的屬性。  
  
> [!IMPORTANT]
>  設定<xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A>屬性設`true`以便跨應用程式重新導向是潛在的安全性威脅。 如需詳細資訊，請參閱 <xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A> 屬性 (Property)。  
  
 如果<xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A>屬性是`true`，以及`ReturnUrl`變數是在目前應用程式或<xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A>屬性`true`，則<xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A>方法發出驗證票證，並將它放入所指定的 cookie`strCookiePath`參數使用<xref:System.Web.Security.FormsAuthentication.SetAuthCookie%2A>方法。  
  
 如果<xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A>是`false`而重新導向路徑中目前的應用程式的 url，票證會發出重新導向 URL 的一部分。 如果<xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A>已`false`，<xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A>是`true`，和在目前的應用程式頁面未參考的 URL 重新導向<xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A>方法發出驗證票證，並將它放入<xref:System.Web.HttpRequest.QueryString%2A>屬性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">查詢字串中所指定的傳回 URL 含有 HTTP: 或 HTTPS: 以外的通訊協定。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="RedirectToLoginPage">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將瀏覽器重新導向至登入 URL。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A>方法會將重新導向瀏覽器<xref:System.Web.Security.FormsAuthentication.LoginUrl%2A>。  
  
 <xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A>方法不會清除表單驗證 cookie。 您可以使用<xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A>方法搭配<xref:System.Web.Security.FormsAuthentication.SignOut%2A>一位使用者已登出，並允許不同的使用者登入的方法。  
  
 不同於<xref:System.Web.HttpResponse.Redirect%2A?displayProperty=nameWithType>方法，這個方法不會結束要求，藉由呼叫<xref:System.Web.HttpResponse.End%2A?displayProperty=nameWithType>。 這表示該程式碼所示<xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A>方法呼叫將會執行。  
  
   
  
## Examples  
 下列程式碼範例會清除表單驗證 cookie 使用<xref:System.Web.Security.FormsAuthentication.SignOut%2A>方法，並重新導向至登入使用者頁面上使用<xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A>方法。  
  
 [!code-aspx-csharp[System.Web.Security.FormsAuthentication#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.FormsAuthentication/CS/signoutcs.aspx#2)]
 [!code-aspx-vb[System.Web.Security.FormsAuthentication#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.FormsAuthentication/VB/signoutvb.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="RedirectToLoginPage">
      <MemberSignature Language="C#" Value="public static void RedirectToLoginPage ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RedirectToLoginPage() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.RedirectToLoginPage" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RedirectToLoginPage ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RedirectToLoginPage();" />
      <MemberSignature Language="F#" Value="static member RedirectToLoginPage : unit -&gt; unit" Usage="System.Web.Security.FormsAuthentication.RedirectToLoginPage " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>將瀏覽器重新導向至登入 URL。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A>方法會將重新導向瀏覽器<xref:System.Web.Security.FormsAuthentication.LoginUrl%2A>。  
  
 <xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A>方法不會清除表單驗證 cookie。 您可以使用<xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A>方法搭配<xref:System.Web.Security.FormsAuthentication.SignOut%2A>一位使用者已登出，並允許不同的使用者登入的方法。  
  
   
  
## Examples  
 下列程式碼範例會清除表單驗證 cookie 使用<xref:System.Web.Security.FormsAuthentication.SignOut%2A>方法，並重新導向至登入使用者頁面上使用<xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A>方法。  
  
 [!code-aspx-csharp[System.Web.Security.FormsAuthentication#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.FormsAuthentication/CS/signoutcs.aspx#2)]
 [!code-aspx-vb[System.Web.Security.FormsAuthentication#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.FormsAuthentication/VB/signoutvb.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RedirectToLoginPage">
      <MemberSignature Language="C#" Value="public static void RedirectToLoginPage (string extraQueryString);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RedirectToLoginPage(string extraQueryString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.RedirectToLoginPage(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RedirectToLoginPage (extraQueryString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RedirectToLoginPage(System::String ^ extraQueryString);" />
      <MemberSignature Language="F#" Value="static member RedirectToLoginPage : string -&gt; unit" Usage="System.Web.Security.FormsAuthentication.RedirectToLoginPage extraQueryString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="extraQueryString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="extraQueryString">要包含在重新導向 URL 中的查詢字串。</param>
        <summary>將瀏覽器重新導向至包含指定查詢字串的登入 URL。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A>方法會將重新導向瀏覽器<xref:System.Web.Security.FormsAuthentication.LoginUrl%2A>，並包含`extraQueryString`值為<xref:System.Management.ManagementQuery.QueryString%2A>重新導向 url。  
  
 <xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A>方法不會清除表單驗證 cookie。 您可以使用<xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A>方法搭配<xref:System.Web.Security.FormsAuthentication.SignOut%2A>一位使用者已登出，並允許不同的使用者登入的方法。  
  
   
  
## Examples  
 下列程式碼範例會清除表單驗證 cookie 使用<xref:System.Web.Security.FormsAuthentication.SignOut%2A>方法，並重新導向至登入使用者頁面上使用<xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A>方法。  
  
 [!code-aspx-csharp[System.Web.Security.FormsAuthentication#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.FormsAuthentication/CS/signout2cs.aspx#3)]
 [!code-aspx-vb[System.Web.Security.FormsAuthentication#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.FormsAuthentication/VB/signout2vb.aspx#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RenewTicketIfOld">
      <MemberSignature Language="C#" Value="public static System.Web.Security.FormsAuthenticationTicket RenewTicketIfOld (System.Web.Security.FormsAuthenticationTicket tOld);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.FormsAuthenticationTicket RenewTicketIfOld(class System.Web.Security.FormsAuthenticationTicket tOld) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.RenewTicketIfOld(System.Web.Security.FormsAuthenticationTicket)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RenewTicketIfOld (tOld As FormsAuthenticationTicket) As FormsAuthenticationTicket" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::Security::FormsAuthenticationTicket ^ RenewTicketIfOld(System::Web::Security::FormsAuthenticationTicket ^ tOld);" />
      <MemberSignature Language="F#" Value="static member RenewTicketIfOld : System.Web.Security.FormsAuthenticationTicket -&gt; System.Web.Security.FormsAuthenticationTicket" Usage="System.Web.Security.FormsAuthentication.RenewTicketIfOld tOld" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.FormsAuthenticationTicket</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tOld" Type="System.Web.Security.FormsAuthenticationTicket" />
      </Parameters>
      <Docs>
        <param name="tOld">要更新的表單驗證票證。</param>
        <summary>有條件地更新 <see cref="T:System.Web.Security.FormsAuthenticationTicket" /> 的核發日期和時間，以及到期日和時間。</summary>
        <returns>更新的 <see cref="T:System.Web.Security.FormsAuthenticationTicket" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.FormsAuthentication.RenewTicketIfOld%2A>方法會更新所提供的時間與到期日<xref:System.Web.Security.FormsAuthenticationTicket>如果目前的日期和時間減去<xref:System.Web.Security.FormsAuthenticationTicket.IssueDate%2A>值是否大於<xref:System.Web.Security.FormsAuthenticationTicket.Expiration%2A>值減去目前的日期和時間。  
  
 票證會以更新<xref:System.Web.Security.FormsAuthenticationTicket.IssueDate%2A>屬性設定為目前的日期和時間，<xref:System.Web.Security.FormsAuthenticationTicket.Expiration%2A>屬性設定為目前的日期和時間加上原始<xref:System.Web.Security.FormsAuthenticationTicket.Expiration%2A>值減去原始<xref:System.Web.Security.FormsAuthenticationTicket.IssueDate%2A>值。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RequireSSL">
      <MemberSignature Language="C#" Value="public static bool RequireSSL { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool RequireSSL" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.FormsAuthentication.RequireSSL" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property RequireSSL As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool RequireSSL { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.RequireSSL : bool" Usage="System.Web.Security.FormsAuthentication.RequireSSL" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，指出表單驗證 Cookie 是否需要 SSL 才能傳回至伺服器。</summary>
        <value>如果表單驗證 Cookie 需要 SSL 才能傳回至伺服器，則為 <see langword="true" />，否則為 <see langword="false" />。 預設值為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.FormsAuthentication.RequireSSL%2A>屬性值會設定 ASP.NET 應用程式組態檔中，使用`requireSSL`組態項目的屬性。 您可以指定 Web.config 檔案中的 ASP.NET 應用程式是否需要 SSL （安全通訊端層） 傳回至伺服器的表單驗證 cookie，藉由設定`requireSSL`屬性。 如需詳細資訊，請參閱<xref:System.Web.HttpCookie.Secure%2A>。  
  
 建議，如果您設定`requireSSL`做為`false`，您也設定`slidingExpiration`做為`false`可減少的票證是有效的時間量。  
  
   
  
## Examples  
 下列程式碼範例將`requireSSL`Web.config 檔案中的屬性。  
  
```  
<authentication mode="Forms">  
  <forms loginUrl="member_login.aspx"  
    cookieless="UseCookies"  
    requireSSL="true"  
    path="/MyApplication" />  
</authentication>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetAuthCookie">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>為所提供的使用者名稱建立驗證票證，並將該票證加入至回應的 Cookie 集合，或加入至 URL (若使用的是 Cookieless 驗證)。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.FormsAuthentication.SetAuthCookie%2A>方法將表單驗證票證的 cookie 集合或 URL 若<xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A>是`false`。 表單驗證票證提供瀏覽器所做的下一個要求的表單驗證資訊。 使用表單驗證，您可以使用<xref:System.Web.Security.FormsAuthentication.SetAuthCookie%2A>時您想要驗證的使用者，但仍保留控制項的瀏覽該網站重新導向的方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetAuthCookie">
      <MemberSignature Language="C#" Value="public static void SetAuthCookie (string userName, bool createPersistentCookie);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetAuthCookie(string userName, bool createPersistentCookie) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.SetAuthCookie(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetAuthCookie (userName As String, createPersistentCookie As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetAuthCookie(System::String ^ userName, bool createPersistentCookie);" />
      <MemberSignature Language="F#" Value="static member SetAuthCookie : string * bool -&gt; unit" Usage="System.Web.Security.FormsAuthentication.SetAuthCookie (userName, createPersistentCookie)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userName" Type="System.String" />
        <Parameter Name="createPersistentCookie" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="userName">已驗證使用者的名稱。 這不必對應到 Windows 帳戶。</param>
        <param name="createPersistentCookie">
          <see langword="true" /> 表示建立永久的 Cookie (跨瀏覽器工作階段儲存的 Cookie)，否則為 <see langword="false" />。</param>
        <summary>為所提供的使用者名稱建立驗證票證，並將該票證加入至回應的 Cookie 集合，或加入至 URL (若使用的是 Cookieless 驗證)。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.FormsAuthentication.SetAuthCookie%2A>方法會將表單驗證票證的其中一個 cookie 集合，或 URL 若<xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A>是`false`。 表單驗證票證提供瀏覽器所做的下一個要求的表單驗證資訊。 使用表單驗證，您可以使用<xref:System.Web.Security.FormsAuthentication.SetAuthCookie%2A>時您想要驗證的使用者，但仍保留控制項的瀏覽該網站重新導向的方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">
          <see cref="P:System.Web.Security.FormsAuthentication.RequireSSL" /> 是 <see langword="true" />，而 <see cref="P:System.Web.HttpRequest.IsSecureConnection" /> 是 <see langword="false" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="SetAuthCookie">
      <MemberSignature Language="C#" Value="public static void SetAuthCookie (string userName, bool createPersistentCookie, string strCookiePath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetAuthCookie(string userName, bool createPersistentCookie, string strCookiePath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.SetAuthCookie(System.String,System.Boolean,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetAuthCookie (userName As String, createPersistentCookie As Boolean, strCookiePath As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetAuthCookie(System::String ^ userName, bool createPersistentCookie, System::String ^ strCookiePath);" />
      <MemberSignature Language="F#" Value="static member SetAuthCookie : string * bool * string -&gt; unit" Usage="System.Web.Security.FormsAuthentication.SetAuthCookie (userName, createPersistentCookie, strCookiePath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userName" Type="System.String" />
        <Parameter Name="createPersistentCookie" Type="System.Boolean" />
        <Parameter Name="strCookiePath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="userName">已驗證使用者的名稱。</param>
        <param name="createPersistentCookie">
          <see langword="true" /> 表示建立持久性 Cookie (跨瀏覽器工作階段儲存的 Cookie)，否則為 <see langword="false" />。</param>
        <param name="strCookiePath">表單驗證票證的 Cookie 路徑。</param>
        <summary>為所提供的使用者名稱建立驗證票證，並使用提供的 Cookie 路徑或使用 URL (若是使用 Cookieless 驗證)，將該票證加入至回應的 Cookie 集合。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.FormsAuthentication.SetAuthCookie%2A>方法將表單驗證票證的 cookie 集合或 URL 若<xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A>是`false`。 表單驗證票證提供瀏覽器所做的下一個要求的表單驗證資訊。 使用表單驗證，您可以使用<xref:System.Web.Security.FormsAuthentication.SetAuthCookie%2A>時您想要驗證的使用者，但仍保留控制項的瀏覽該網站重新導向的方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">
          <see cref="P:System.Web.Security.FormsAuthentication.RequireSSL" /> 是 <see langword="true" />，而 <see cref="P:System.Web.HttpRequest.IsSecureConnection" /> 是 <see langword="false" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="SignOut">
      <MemberSignature Language="C#" Value="public static void SignOut ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SignOut() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.SignOut" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SignOut ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SignOut();" />
      <MemberSignature Language="F#" Value="static member SignOut : unit -&gt; unit" Usage="System.Web.Security.FormsAuthentication.SignOut " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>從瀏覽器移除表單驗證票證。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.FormsAuthentication.SignOut%2A>方法會移除從 cookie 或 URL 的表單驗證票證資訊如果<xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A>是`false`。 您可以使用<xref:System.Web.Security.FormsAuthentication.SignOut%2A>方法搭配<xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A>一位使用者已登出，並允許不同的使用者登入的方法。  
  
 如果您在無 cookie 的模式中，以獨佔方式執行，或如果您支援已驗證和匿名使用者，您應該明確地控制重新導向至登入頁面，如果您需要特殊的商務邏輯執行的結果中移除的匿名識別項。  
  
 當<xref:System.Web.Security.FormsAuthentication.SignOut%2A>呼叫方法，重新導向至應用程式的登入頁面會藉由呼叫<xref:System.Web.HttpResponse.Redirect%2A>方法`endResponse`參數設定為`false`。 重新導向才會進行直到目前的頁面已完成執行，因此可以執行額外的程式碼。 如果程式碼不會包含明確的重新導向至其他頁面，將使用者重新導向的應用程式組態檔中設定的登入頁面。  
  
 呼叫<xref:System.Web.Security.FormsAuthentication.SignOut%2A>方法只會移除表單驗證 cookie。 網頁伺服器不會儲存供日後比較的有效和過期的驗證票證。 這可讓您的網站遭受重新執行攻擊，如果惡意使用者取得有效的表單驗證 cookie。 為了提高安全性，使用表單驗證 cookie 時，您應該執行下列作業：  
  
-   用於表單驗證 cookie 中的絕對期限，藉由設定<xref:System.Web.Security.FormsAuthentication.SlidingExpiration%2A>屬性設`false`。 這會限制攔截的 cookie 可以在其中重新執行視窗。  
  
-   只會發行並接受驗證 cookie 的設定，透過安全通訊端層 (SSL)，藉由設定<xref:System.Web.Security.FormsAuthentication.RequireSSL%2A>屬性設`true`以及執行在 SSL 下整個網站。 設定<xref:System.Web.Security.FormsAuthentication.RequireSSL%2A>屬性設`true`可確保，ASP.NET 會永遠不會驗證 cookie 傳送至瀏覽器透過非 SSL 連線; 不過，用戶端可能會不會接受在 cookie 上安全的設定。 這表示用戶端可能會傳送表單驗證 cookie 透過非 SSL 連線，因此使其容易遭到劫持。 您可以防止用戶端傳送純文字的表單驗證 cookie，藉由執行在 SSL 下整個網站。  
  
-   使用伺服器上的永續性儲存體，來記錄使用者登出網站，並接著使用這類應用程式事件<xref:System.Web.HttpApplication.PostAuthenticateRequest>事件，以判斷目前使用者是否已驗證的表單驗證。 如果使用表單驗證驗證使用者，而且如果永續性儲存體中的資訊指出使用者已登出，立即清除驗證 cookie 和瀏覽器重新導向回到登入頁面。 成功登入之後，更新儲存體以反映使用者登入。 當您使用這個方法時，您的應用程式必須追蹤使用者的登入的狀態，並必須強制登出閒置使用者。  
  
   
  
## Examples  
 下列程式碼範例會清除表單驗證 cookie 使用<xref:System.Web.Security.FormsAuthentication.SignOut%2A>方法，並重新導向至登入使用者頁面上使用<xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A>方法。  
  
 [!code-aspx-csharp[System.Web.Security.FormsAuthentication#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.FormsAuthentication/CS/signoutcs.aspx#2)]
 [!code-aspx-vb[System.Web.Security.FormsAuthentication#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.FormsAuthentication/VB/signoutvb.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SlidingExpiration">
      <MemberSignature Language="C#" Value="public static bool SlidingExpiration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool SlidingExpiration" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.FormsAuthentication.SlidingExpiration" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SlidingExpiration As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool SlidingExpiration { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.SlidingExpiration : bool" Usage="System.Web.Security.FormsAuthentication.SlidingExpiration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得一個指示是否啟用變動到期的值。</summary>
        <value>如果啟用滑動期限，則為 <see langword="true" />，否則為 <see langword="false" />。 預設值為 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.FormsAuthentication.SlidingExpiration%2A>屬性值會設定使用`slidingExpiration`組態項目的屬性。  
  
 如果提出要求，而且一半以上的逾時間隔經過滑動期限，重設為有效的驗證 cookie 的到期時間。 如果 cookie 已過期，使用者必須重新驗證。 設定<xref:System.Web.Security.FormsAuthentication.SlidingExpiration%2A>屬性，以`false`可以改善應用程式的安全性限制時的驗證 cookie 是否有效，根據 已設定`timeout`值。  
  
 我們建議如果您設定`requireSSL`做為`false`，您也設定`slidingExpiration`做為`false`可減少的票證是有效的時間量。  
  
   
  
## Examples  
 下列程式碼範例會設定`slidingExpiration`屬性設定為`false`ASP.NET 應用程式的 Web.config 檔案中。  
  
```  
<authentication mode="Forms">  
  <forms loginUrl="member_login.aspx"  
    name=".ASPXFORMSAUTH"  
    cookieless="UseCookies"  
    requireSSL="true"   
    slidingExpiration="false" />  
</authentication>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TicketCompatibilityMode">
      <MemberSignature Language="C#" Value="public static System.Web.Configuration.TicketCompatibilityMode TicketCompatibilityMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Web.Configuration.TicketCompatibilityMode TicketCompatibilityMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.FormsAuthentication.TicketCompatibilityMode" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property TicketCompatibilityMode As TicketCompatibilityMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::Configuration::TicketCompatibilityMode TicketCompatibilityMode { System::Web::Configuration::TicketCompatibilityMode get(); };" />
      <MemberSignature Language="F#" Value="member this.TicketCompatibilityMode : System.Web.Configuration.TicketCompatibilityMode" Usage="System.Web.Security.FormsAuthentication.TicketCompatibilityMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Configuration.TicketCompatibilityMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，指出要使用 Coordinated Universal Time (UTC) 或當地時間做為票證到期日。</summary>
        <value>值，這個值表示要使用 Coordinated Universal Time (UTC) 或當地時間做為票證到期日。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Timeout">
      <MemberSignature Language="C#" Value="public static TimeSpan Timeout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.TimeSpan Timeout" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.FormsAuthentication.Timeout" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Timeout As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property TimeSpan Timeout { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.Timeout : TimeSpan" Usage="System.Web.Security.FormsAuthentication.Timeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得驗證票證逾期前的時間量。</summary>
        <value>驗證票證逾期前的時間長度。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>