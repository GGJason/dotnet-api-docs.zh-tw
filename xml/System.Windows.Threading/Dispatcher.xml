<Type Name="Dispatcher" FullName="System.Windows.Threading.Dispatcher">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4625f3f8124bac0fece57c48f2d1850b72d04bbe" />
    <Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="11/17/2018" />
    <Meta Name="ms.locfileid" Value="51924831" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Dispatcher" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Dispatcher extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Threading.Dispatcher" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Dispatcher" />
  <TypeSignature Language="C++ CLI" Value="public ref class Dispatcher sealed" />
  <TypeSignature Language="F#" Value="type Dispatcher = class" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供管理執行緒之工作項目佇列的服務。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Threading.Dispatcher>維護其優先順序的佇列，在特定執行緒的工作項目。  
  
 當<xref:System.Windows.Threading.Dispatcher>會建立在執行緒變成唯一<xref:System.Windows.Threading.Dispatcher>就會與執行緒相關聯即使<xref:System.Windows.Threading.Dispatcher>已關閉。  
  
 如果您嘗試取得<xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A>目前的執行緒並<xref:System.Windows.Threading.Dispatcher>所關聯的執行緒，<xref:System.Windows.Threading.Dispatcher>就建立。 A<xref:System.Windows.Threading.Dispatcher>當您建立時，也會建立<xref:System.Windows.Threading.DispatcherObject>。 如果您建立<xref:System.Windows.Threading.Dispatcher>在背景執行緒，請務必關閉發送器在結束執行緒之前。  
  
 如果<xref:System.Windows.Threading.Dispatcher>關閉，無法將它重新啟動。  
  
 在[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]，則<xref:System.Windows.Threading.DispatcherObject>只能存取由<xref:System.Windows.Threading.Dispatcher>與其相關聯。  例如，背景執行緒無法更新的內容<xref:System.Windows.Controls.Button>相關聯<xref:System.Windows.Threading.Dispatcher>上[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]執行緒。  為了讓背景執行緒來存取<xref:System.Windows.Controls.ContentControl.Content%2A>的屬性<xref:System.Windows.Controls.Button>，在背景執行緒必須將工作委派給<xref:System.Windows.Threading.Dispatcher>相關聯[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]執行緒。  這是使用其中一種<xref:System.Windows.Threading.Dispatcher.Invoke%2A>或<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>。 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是同步和<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>是非同步的。  作業加入佇列<xref:System.Windows.Threading.Dispatcher>指定<xref:System.Windows.Threading.DispatcherPriority>。  
  
 如果<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>上呼叫<xref:System.Windows.Threading.Dispatcher>，已關閉，傳回的 status 屬性<xref:System.Windows.Threading.DispatcherOperation>設定為<xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>。  
  
 所有的方法<xref:System.Windows.Threading.Dispatcher>，但不包括<xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A>，會無限制執行緒。  
  
 衍生自<xref:System.Windows.Threading.DispatcherObject>具有執行緒相似性。  
  
 衍生自<xref:System.Windows.Freezable>會無限制執行緒時它們會凍結。  如需詳細資訊，請參閱 [Freezable 物件概觀](~/docs/framework/wpf/advanced/freezable-objects-overview.md)。  
  
   
  
## Examples  
 下列範例示範如何將放入作業<xref:System.Windows.Threading.Dispatcher>。  如需此範例的完整原始程式碼，請參閱[單一執行緒應用程式與長時間執行的計算範例](https://go.microsoft.com/fwlink/?LinkID=160038)。  
  
 首先，建立委派會接受任何引數。  
  
 [!code-csharp[ThreadingPrimeNumbers#ThreadingPrimeNumberInit](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingPrimeNumbers/CSharp/Window1.xaml.cs#threadingprimenumberinit)] 
 [!code-vb[ThreadingPrimeNumbers#ThreadingPrimeNumberInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingPrimeNumbers/visualbasic/mainwindow.xaml.vb#threadingprimenumberinit)]   
  
 接下來，<xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29>呼叫。  此呼叫<xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29>採用兩個參數： 的優先權，它會設定為<xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>，和回呼，會透過委派的執行個體中傳遞`NextPrimeDelegate`。  
  
 [!code-csharp[ThreadingPrimeNumbers#ThreadingPrimeNumberBeginInvoke](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingPrimeNumbers/CSharp/Window1.xaml.cs#threadingprimenumberbegininvoke)] 
 [!code-vb[ThreadingPrimeNumbers#ThreadingPrimeNumberBeginInvoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingPrimeNumbers/visualbasic/mainwindow.xaml.vb#threadingprimenumberbegininvoke)]   
  
 ]]></format>
    </remarks>
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160038">單一執行緒應用程式與長時間執行的計算範例</related>
  </Docs>
  <Members>
    <MemberGroup MemberName="BeginInvoke">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>在 <see cref="T:System.Windows.Threading.Dispatcher" /> 關聯的執行緒上以非同步方式執行委派。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在  [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]，建立的執行緒<xref:System.Windows.Threading.DispatcherObject>可以存取該物件。  例如，背景執行緒會從主要 UI 執行緒拆無法更新的內容<xref:System.Windows.Controls.Button>所建立的 UI 執行緒。  若要存取之內容屬性的背景執行緒的順序<xref:System.Windows.Controls.Button>，背景執行緒必須將工作委派給<xref:System.Windows.Threading.Dispatcher>UI 執行緒相關聯。  這是使用其中一種<xref:System.Windows.Threading.Dispatcher.Invoke%2A>或<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>。  <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是同步和<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>是非同步的。  作業加入至事件佇列<xref:System.Windows.Threading.Dispatcher>指定<xref:System.Windows.Threading.DispatcherPriority>。  
  
 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 是非同步的;因此，控制會立即交還給呼叫的物件之後呼叫。  
  
 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 傳回<xref:System.Windows.Threading.DispatcherOperation>可用來委派進行互動時委派到事件佇列的物件。  
  
 <xref:System.Windows.Threading.DispatcherOperation>所傳回的物件<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>可用於數種方式可與指定的委派，這類互動：  
  
-   變更<xref:System.Windows.Threading.DispatcherPriority>委派的因為擱置中執行的事件佇列。  
  
-   從事件佇列中移除的委派。  
  
-   等候要傳回的委派。  
  
-   取得委派之後，它會傳回值就會執行。  
  
 如果有多個<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>呼叫的同時<xref:System.Windows.Threading.DispatcherPriority>，就會執行所進行的呼叫順序。  
  
 如果<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>上呼叫<xref:System.Windows.Threading.Dispatcher>，已關閉，傳回的 status 屬性<xref:System.Windows.Threading.DispatcherOperation>設定為<xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (Delegate method, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(class System.Delegate method, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Delegate,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (method As Delegate, ParamArray args As Object()) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(Delegate ^ method, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : Delegate * obj[] -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.BeginInvoke (method, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method">接受 <c>args</c> 中指定的參數之方法的委派，它會被推入至 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件佇列。</param>
        <param name="args">做為引數傳遞至指定方法的物件陣列。 可以是 <see langword="null" />。</param>
        <summary>在其中有建立 <see cref="T:System.Windows.Threading.Dispatcher" /> 的執行緒上，使用指定的引數非同步地執行指定的委派。</summary>
        <returns>物件，此物件是在呼叫 <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> 之後立即傳回的，可用來與在事件佇列中暫止執行的委派進行互動。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Threading.DispatcherOperation>所傳回的物件<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>可用於數種方式可與指定的委派，這類互動：  
  
-   變更<xref:System.Windows.Threading.DispatcherPriority>委派的因為擱置中執行的事件佇列。  
  
-   從事件佇列中移除的委派。  
  
-   等候要傳回的委派。  
  
-   取得委派之後，它會傳回值就會執行。  
  
 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 是非同步的;因此，控制會立即交還給呼叫的物件之後呼叫。  
  
 在  [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]，建立的執行緒<xref:System.Windows.Threading.DispatcherObject>可以存取該物件。 例如，背景執行緒會從主要 UI 執行緒拆無法更新的內容<xref:System.Windows.Controls.Button>所建立的 UI 執行緒。 若要存取之內容屬性的背景執行緒的順序<xref:System.Windows.Controls.Button>，背景執行緒必須將工作委派給<xref:System.Windows.Threading.Dispatcher>UI 執行緒相關聯。 這是使用其中一種<xref:System.Windows.Threading.Dispatcher.Invoke%2A>或<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>。 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是同步和<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>是非同步的。 作業加入至事件佇列<xref:System.Windows.Threading.Dispatcher>指定<xref:System.Windows.Threading.DispatcherPriority>。  
  
 如果<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>上呼叫<xref:System.Windows.Threading.Dispatcher>，已關閉，傳回的 status 屬性<xref:System.Windows.Threading.DispatcherOperation>設定為<xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (System.Windows.Threading.DispatcherPriority priority, Delegate method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (priority As DispatcherPriority, method As Delegate) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : System.Windows.Threading.DispatcherPriority * Delegate -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.BeginInvoke (priority, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="priority">相對於 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件佇列中其他暫止的作業，會先叫用指定的方法。</param>
        <param name="method">未採用任何引數的方法委派，此委派會推入至 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件佇列。</param>
        <summary>在 <see cref="T:System.Windows.Threading.Dispatcher" /> 關聯的執行緒上使用指定優先權以非同步方式執行指定的委派。</summary>
        <returns>物件，此物件是在呼叫 <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> 之後立即傳回的，可用來與在事件佇列中暫止執行的委派進行互動。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果有多個<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>呼叫的同時<xref:System.Windows.Threading.DispatcherPriority>，就會執行所進行的呼叫順序。  
  
 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 傳回<xref:System.Windows.Threading.DispatcherOperation>可用來委派進行互動時委派到事件佇列的物件。  
  
 <xref:System.Windows.Threading.DispatcherOperation>所傳回的物件<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>可用於數種方式可與指定的委派，這類互動：  
  
-   變更<xref:System.Windows.Threading.DispatcherPriority>委派的因為擱置中執行的事件佇列。  
  
-   從事件佇列中移除的委派。  
  
-   等候要傳回的委派。  
  
-   取得委派之後，它會傳回值就會執行。  
  
 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 是非同步的;因此，控制會立即交還給呼叫的物件之後呼叫。  
  
 在  [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]，建立的執行緒<xref:System.Windows.Threading.DispatcherObject>可以存取該物件。  例如，背景執行緒會從主要 UI 執行緒拆無法更新的內容<xref:System.Windows.Controls.Button>所建立的 UI 執行緒。  若要存取之內容屬性的背景執行緒的順序<xref:System.Windows.Controls.Button>，背景執行緒必須將工作委派給<xref:System.Windows.Threading.Dispatcher>UI 執行緒相關聯。  這是使用其中一種<xref:System.Windows.Threading.Dispatcher.Invoke%2A>或<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>。  <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是同步和<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>是非同步的。  作業加入至事件佇列<xref:System.Windows.Threading.Dispatcher>指定<xref:System.Windows.Threading.DispatcherPriority>。  
  
 如果<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>上呼叫<xref:System.Windows.Threading.Dispatcher>，已關閉，傳回的 status 屬性<xref:System.Windows.Threading.DispatcherOperation>設定為<xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>。  
  
   
  
## Examples  
 下列範例示範如何將放入作業<xref:System.Windows.Threading.Dispatcher>。  如需此範例的完整原始程式碼，請參閱[單一執行緒應用程式與長時間執行的計算範例](https://go.microsoft.com/fwlink/?LinkID=160038)。  
  
 首先，建立委派會接受任何引數。  
  
 [!code-csharp[ThreadingPrimeNumbers#ThreadingPrimeNumberInit](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingPrimeNumbers/CSharp/Window1.xaml.cs#threadingprimenumberinit)] 
 [!code-vb[ThreadingPrimeNumbers#ThreadingPrimeNumberInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingPrimeNumbers/visualbasic/mainwindow.xaml.vb#threadingprimenumberinit)]   
  
 接下來，<xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29>呼叫。  因為每個<xref:System.Windows.Threading.DispatcherObject>的屬性會傳回<xref:System.Windows.Threading.Dispatcher>相關聯，所要<xref:System.Windows.Threading.Dispatcher>取得透過查詢<xref:System.Windows.Threading.DispatcherObject>，在此案例<xref:System.Windows.Controls.Button>名為`startStopButton`。   在呼叫<xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29>採用兩個參數： 的優先權，它會設定為<xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>，和回呼，會透過委派的執行個體中傳遞`NextPrimeDelegate`。  
  
 [!code-csharp[ThreadingPrimeNumbers#ThreadingPrimeNumberBeginInvoke](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingPrimeNumbers/CSharp/Window1.xaml.cs#threadingprimenumberbegininvoke)] 
 [!code-vb[ThreadingPrimeNumbers#ThreadingPrimeNumberBeginInvoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingPrimeNumbers/visualbasic/mainwindow.xaml.vb#threadingprimenumberbegininvoke)]   
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="method" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="priority" /> 不是有效的 <see cref="T:System.Windows.Threading.DispatcherPriority" />。</exception>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160038">單一執行緒應用程式與長時間執行的計算範例</related>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (Delegate method, System.Windows.Threading.DispatcherPriority priority, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(class System.Delegate method, valuetype System.Windows.Threading.DispatcherPriority priority, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (method As Delegate, priority As DispatcherPriority, ParamArray args As Object()) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(Delegate ^ method, System::Windows::Threading::DispatcherPriority priority, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : Delegate * System.Windows.Threading.DispatcherPriority * obj[] -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.BeginInvoke (method, priority, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method">接受 <c>args</c> 中指定的參數之方法的委派，它會被推入至 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件佇列。</param>
        <param name="priority">相對於 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件佇列中其他暫止的作業，會先叫用指定的方法。</param>
        <param name="args">做為引數傳遞至指定方法的物件陣列。 可以是 <see langword="null" />。</param>
        <summary>在其中有建立 <see cref="T:System.Windows.Threading.Dispatcher" /> 的執行緒上，依據指定的優先順序，使用指定的引數非同步地執行指定的委派。</summary>
        <returns>物件，此物件是在呼叫 <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> 之後立即傳回的，可用來與在事件佇列中暫止執行的委派進行互動。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Threading.DispatcherOperation>所傳回的物件<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>可用於數種方式可與指定的委派，這類互動：  
  
-   變更<xref:System.Windows.Threading.DispatcherPriority>委派的因為擱置中執行的事件佇列。  
  
-   從事件佇列中移除的委派。  
  
-   等候要傳回的委派。  
  
-   取得委派之後，它會傳回值就會執行。  
  
 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 是非同步的;因此，控制會立即交還給呼叫的物件之後呼叫。  
  
 在  [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]，建立的執行緒<xref:System.Windows.Threading.DispatcherObject>可以存取該物件。 例如，背景執行緒會從主要 UI 執行緒拆無法更新的內容<xref:System.Windows.Controls.Button>所建立的 UI 執行緒。 若要存取之內容屬性的背景執行緒的順序<xref:System.Windows.Controls.Button>，背景執行緒必須將工作委派給<xref:System.Windows.Threading.Dispatcher>UI 執行緒相關聯。 這是使用其中一種<xref:System.Windows.Threading.Dispatcher.Invoke%2A>或<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>。 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是同步和<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>是非同步的。 作業加入至事件佇列<xref:System.Windows.Threading.Dispatcher>指定<xref:System.Windows.Threading.DispatcherPriority>。  
  
 如果<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>上呼叫<xref:System.Windows.Threading.Dispatcher>，已關閉，傳回的 status 屬性<xref:System.Windows.Threading.DispatcherOperation>設定為<xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (priority As DispatcherPriority, method As Delegate, arg As Object) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method, System::Object ^ arg);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : System.Windows.Threading.DispatcherPriority * Delegate * obj -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.BeginInvoke (priority, method, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="priority">相對於 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件佇列中其他暫止的作業，會先叫用指定的方法。</param>
        <param name="method">採用一個引數的方法委派，此委派會推入至 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件佇列。</param>
        <param name="arg">做為引數傳遞至指定方法的物件。</param>
        <summary>在 <see cref="T:System.Windows.Threading.Dispatcher" /> 關聯的執行緒上使用指定優先權和指定引數以非同步方式執行指定的委派。</summary>
        <returns>物件，此物件是在呼叫 <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> 之後立即傳回的，可用來與在事件佇列中暫止執行的委派進行互動。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Arg` 可以是`null`如果不需要任何引數。  
  
 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 傳回<xref:System.Windows.Threading.DispatcherOperation>可用來委派進行互動時委派到事件佇列的物件。  
  
 <xref:System.Windows.Threading.DispatcherOperation>所傳回的物件<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>可用於數種方式可與指定的委派，這類互動：  
  
-   變更<xref:System.Windows.Threading.DispatcherPriority>委派的因為擱置中執行的事件佇列。  
  
-   從事件佇列中移除的委派。  
  
-   等候要傳回的委派。  
  
-   取得委派之後，它會傳回值就會執行。  
  
 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 是非同步的;因此，控制會立即交還給呼叫的物件之後呼叫。  
  
 在  [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]，建立的執行緒<xref:System.Windows.Threading.DispatcherObject>可以存取該物件。  例如，背景執行緒會從主要 UI 執行緒拆無法更新的內容<xref:System.Windows.Controls.Button>所建立的 UI 執行緒。  若要存取之內容屬性的背景執行緒的順序<xref:System.Windows.Controls.Button>，背景執行緒必須將工作委派給<xref:System.Windows.Threading.Dispatcher>UI 執行緒相關聯。  這是使用其中一種<xref:System.Windows.Threading.Dispatcher.Invoke%2A>或<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>。  <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是同步和<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>是非同步的。  作業加入至事件佇列<xref:System.Windows.Threading.Dispatcher>指定<xref:System.Windows.Threading.DispatcherPriority>。  
  
 如果有多個<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>呼叫的同時<xref:System.Windows.Threading.DispatcherPriority>，就會執行所進行的呼叫順序。  
  
 如果<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>上呼叫<xref:System.Windows.Threading.Dispatcher>，已關閉，傳回的 status 屬性<xref:System.Windows.Threading.DispatcherOperation>設定為<xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>。  
  
   
  
## Examples  
 下列範例示範如何將放入作業<xref:System.Windows.Threading.Dispatcher>。  
  
 首先，建立委派，接受一個引數，在此案例中為字串。  
  
 [!code-csharp[ThreadingWeatherForecast#ThreadingWeatherDelegates](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingWeatherForecast/CSharp/Window1.xaml.cs#threadingweatherdelegates)]
 [!code-vb[ThreadingWeatherForecast#ThreadingWeatherDelegates](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingWeatherForecast/visualbasic/window1.xaml.vb#threadingweatherdelegates)]  
  
 接下來，<xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%2CSystem.Object%29>呼叫。  因為每個<xref:System.Windows.Threading.DispatcherObject>的屬性會傳回<xref:System.Windows.Threading.Dispatcher>相關聯，所要<xref:System.Windows.Threading.Dispatcher>取得透過查詢<xref:System.Windows.Threading.DispatcherObject>，在此案例<xref:System.Windows.Controls.Grid>名為`tomorrowsWeather`。 呼叫<xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%2CSystem.Object%29>採用三個參數： 的優先權，它會設定為<xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>; 回呼，會透過委派的執行個體中傳遞`OneArgDelegate`; 和名為字串`weather`，這是回呼的引數。  
  
 [!code-csharp[threadingweatherforecast#ThreadingWeatherDispatcherOneArge](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingWeatherForecast/CSharp/Window1.xaml.cs#threadingweatherdispatcheronearge)]
 [!code-vb[threadingweatherforecast#ThreadingWeatherDispatcherOneArge](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingWeatherForecast/visualbasic/window1.xaml.vb#threadingweatherdispatcheronearge)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="method" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="priority" /> 不是有效的 <see cref="T:System.Windows.Threading.DispatcherPriority" />。</exception>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160038">單一執行緒應用程式與長時間執行的計算範例</related>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method, object arg, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (priority As DispatcherPriority, method As Delegate, arg As Object, ParamArray args As Object()) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method, System::Object ^ arg, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : System.Windows.Threading.DispatcherPriority * Delegate * obj * obj[] -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.BeginInvoke (priority, method, arg, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="priority">相對於 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件佇列中其他暫止的作業，會先叫用指定的方法。</param>
        <param name="method">採用多個引數的方法委派，此委派會推入至 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件佇列。</param>
        <param name="arg">做為引數傳遞至指定方法的物件。</param>
        <param name="args">做為引數傳遞至指定方法的物件陣列。</param>
        <summary>在 <see cref="T:System.Windows.Threading.Dispatcher" /> 關聯的執行緒上使用指定優先權和指定引數陣列以非同步方式執行指定的委派。</summary>
        <returns>物件，此物件是在呼叫 <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> 之後立即傳回的，可用來與在 <see cref="T:System.Windows.Threading.Dispatcher" /> 佇列中暫止執行的委派進行互動。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `arg`參數可以是`null`如果不需要任何引數。  
  
 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 傳回<xref:System.Windows.Threading.DispatcherOperation>可用來委派進行互動時委派到事件佇列的物件。  
  
 <xref:System.Windows.Threading.DispatcherOperation>所傳回的物件<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>可用於數種方式可與指定的委派，這類互動：  
  
-   變更<xref:System.Windows.Threading.DispatcherPriority>委派的因為擱置中執行的事件佇列。  
  
-   從事件佇列中移除的委派。  
  
-   等候要傳回的委派。  
  
-   取得委派之後，它會傳回值就會執行。  
  
 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 是非同步的;因此，控制會立即交還給呼叫的物件之後呼叫。  
  
 在  [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]，建立的執行緒<xref:System.Windows.Threading.DispatcherObject>可以存取該物件。  例如，背景執行緒會從主要 UI 執行緒拆無法更新的內容<xref:System.Windows.Controls.Button>所建立的 UI 執行緒。  若要存取之內容屬性的背景執行緒的順序<xref:System.Windows.Controls.Button>，背景執行緒必須將工作委派給<xref:System.Windows.Threading.Dispatcher>UI 執行緒相關聯。  這是使用其中一種<xref:System.Windows.Threading.Dispatcher.Invoke%2A>或<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>。  <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是同步和<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>是非同步的。  作業加入至事件佇列<xref:System.Windows.Threading.Dispatcher>指定<xref:System.Windows.Threading.DispatcherPriority>。  
  
 如果有多個<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>呼叫的同時<xref:System.Windows.Threading.DispatcherPriority>，就會執行所進行的呼叫順序。  
  
 如果<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>上呼叫<xref:System.Windows.Threading.Dispatcher>，已關閉，傳回的 status 屬性<xref:System.Windows.Threading.DispatcherOperation>設定為<xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="method" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <see cref="T:System.Windows.Threading.DispatcherPriority" /> 不是有效的優先權。</exception>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160038">單一執行緒應用程式與長時間執行的計算範例</related>
      </Docs>
    </Member>
    <Member MemberName="BeginInvokeShutdown">
      <MemberSignature Language="C#" Value="public void BeginInvokeShutdown (System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginInvokeShutdown(valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvokeShutdown(System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginInvokeShutdown (priority As DispatcherPriority)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginInvokeShutdown(System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="member this.BeginInvokeShutdown : System.Windows.Threading.DispatcherPriority -&gt; unit" Usage="dispatcher.BeginInvokeShutdown priority" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
      </Parameters>
      <Docs>
        <param name="priority">用來開始關閉發送器的優先權。</param>
        <summary>以非同步方式初始化 <see cref="T:System.Windows.Threading.Dispatcher" /> 的關閉程序。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Threading.Dispatcher.BeginInvokeShutdown%2A> 要求不受限制的 UI 權限。  
  
 當<xref:System.Windows.Threading.Dispatcher>關閉，就會開始<xref:System.Windows.Threading.Dispatcher.ShutdownStarted>就會引發事件並<xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A>設為`true`。  
  
 <xref:System.Windows.Threading.Dispatcher>便不會關閉完全直到事件佇列會回溯。  
  
 當發送器完成關閉，<xref:System.Windows.Threading.Dispatcher.ShutdownFinished>就會引發事件和<xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A>屬性設定為`true`。  
  
 關機程序開始時，所有暫止的工作佇列中的項目都被中止。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">關閉發送器。  相關聯的列舉型別：  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
      </Docs>
    </Member>
    <Member MemberName="CheckAccess">
      <MemberSignature Language="C#" Value="public bool CheckAccess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CheckAccess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.CheckAccess" />
      <MemberSignature Language="VB.NET" Value="Public Function CheckAccess () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CheckAccess();" />
      <MemberSignature Language="F#" Value="member this.CheckAccess : unit -&gt; bool" Usage="dispatcher.CheckAccess " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>判斷呼叫的執行緒是否為與這個 <see cref="T:System.Windows.Threading.Dispatcher" /> 關聯的執行緒。</summary>
        <returns>如果呼叫的執行緒為與這個 <see cref="T:System.Windows.Threading.Dispatcher" /> 關聯的執行緒則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 只有<xref:System.Windows.Threading.Dispatcher>，<xref:System.Windows.Threading.DispatcherObject>建立在可存取物件。  使用<xref:System.Windows.Threading.Dispatcher.Invoke%2A>或<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>從不同的執行緒存取的物件。  
  
 <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> 可以從任何執行緒呼叫。  
  
 之間的差異<xref:System.Windows.Threading.Dispatcher.CheckAccess%2A>並<xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A>是<xref:System.Windows.Threading.Dispatcher.CheckAccess%2A>會傳回布林值，指出呼叫執行緒是否有存取權<xref:System.Windows.Threading.Dispatcher>和<xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A>會擲回例外狀況。  
  
   
  
## Examples  
 下列範例會使用<xref:System.Windows.Threading.Dispatcher.CheckAccess%2A>來判斷執行緒是否有存取權<xref:System.Windows.Controls.Button>。  <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A>方法<xref:System.Windows.Threading.Dispatcher>聯<xref:System.Windows.Controls.Button>呼叫以驗證的存取權的執行緒。  如果呼叫的執行緒可以存取<xref:System.Windows.Threading.Dispatcher>，則<xref:System.Windows.Controls.Button>更新所存取的成員<xref:System.Windows.Controls.Button>; 否則委派，它會接受<xref:System.Windows.Controls.Button>做為引數中，置於<xref:System.Windows.Threading.Dispatcher>。  <xref:System.Windows.Threading.Dispatcher>會將委派的更新工作<xref:System.Windows.Controls.Button>。  
  
 [!code-csharp[DispatcherAccessSample#DispatcherAccessCheckAccess](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherAccessSample/CSharp/Window1.xaml.cs#dispatcheraccesscheckaccess)]
 [!code-vb[DispatcherAccessSample#DispatcherAccessCheckAccess](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherAccessSample/visualbasic/window1.xaml.vb#dispatcheraccesscheckaccess)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Threading.Dispatcher.VerifyAccess" />
      </Docs>
    </Member>
    <Member MemberName="CurrentDispatcher">
      <MemberSignature Language="C#" Value="public static System.Windows.Threading.Dispatcher CurrentDispatcher { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Threading.Dispatcher CurrentDispatcher" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.CurrentDispatcher" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentDispatcher As Dispatcher" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Threading::Dispatcher ^ CurrentDispatcher { System::Windows::Threading::Dispatcher ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentDispatcher : System.Windows.Threading.Dispatcher" Usage="System.Windows.Threading.Dispatcher.CurrentDispatcher" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.Dispatcher</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得目前執行之執行緒的 <see cref="T:System.Windows.Threading.Dispatcher" /> 並建立新的 <see cref="T:System.Windows.Threading.Dispatcher" /> (如果尚未與執行緒產生關聯)。</summary>
        <value>與目前執行緒關聯的發送器。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Windows.Threading.Dispatcher>不是與目前執行緒相關聯的新<xref:System.Windows.Threading.Dispatcher>就建立。  這不是使用 <xref:System.Windows.Threading.Dispatcher.FromThread%2A> 方法的情況。  <xref:System.Windows.Threading.Dispatcher.FromThread%2A> 會傳回`null`如果不指定執行緒相關聯的發送器。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisableProcessing">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherProcessingDisabled DisableProcessing ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Threading.DispatcherProcessingDisabled DisableProcessing() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.DisableProcessing" />
      <MemberSignature Language="VB.NET" Value="Public Function DisableProcessing () As DispatcherProcessingDisabled" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherProcessingDisabled DisableProcessing();" />
      <MemberSignature Language="F#" Value="member this.DisableProcessing : unit -&gt; System.Windows.Threading.DispatcherProcessingDisabled" Usage="dispatcher.DisableProcessing " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherProcessingDisabled</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>停用 <see cref="T:System.Windows.Threading.Dispatcher" /> 佇列的處理。</summary>
        <returns>用來重新啟用發送器處理的結構。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 停用發送器處理是一種進階的方法，要排除不相關的重新進入的機會。  
  
 停用處理的影響如下所示：  
  
-   CLR 鎖定不會在內部提取訊息。  
  
-   <xref:System.Windows.Threading.DispatcherFrame> 物件不允許發送。  
  
-   不允許訊息處理。  
  
 <xref:System.Windows.Threading.DispatcherProcessingDisabled>結構<xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A>呼叫時傳回可用來重新啟用發送器處理。  呼叫<xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A>上<xref:System.Windows.Threading.DispatcherProcessingDisabled>結構會重新啟用處理。  
  
 <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> 只有在執行緒上呼叫<xref:System.Windows.Threading.Dispatcher>相關聯。  
  
   
  
## Examples  
 下列範例示範如何停用發送器處理，然後重新啟用發送器處理。  <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> 在中，稱為**使用**陳述式。  <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> 會傳回<xref:System.Windows.Threading.DispatcherProcessingDisabled>到被處置時做為物件的結構**使用**封鎖完成。  當<xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A>上呼叫<xref:System.Windows.Threading.DispatcherProcessingDisabled>結構，發送器處理已重新啟用。  
  
 [!code-csharp[DispatcherSnippets#DispatcherDisableProcessing](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherSnippets/CSharp/Window1.xaml.cs#dispatcherdisableprocessing)]
 [!code-vb[DispatcherSnippets#DispatcherDisableProcessing](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherSnippets/visualbasic/window1.xaml.vb#dispatcherdisableprocessing)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExitAllFrames">
      <MemberSignature Language="C#" Value="public static void ExitAllFrames ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ExitAllFrames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.ExitAllFrames" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ExitAllFrames ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ExitAllFrames();" />
      <MemberSignature Language="F#" Value="static member ExitAllFrames : unit -&gt; unit" Usage="System.Windows.Threading.Dispatcher.ExitAllFrames " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>會要求結束所有框架，包括巢狀框架。</summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">呼叫這個方法。 相關聯的列舉型別：  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="M:System.Windows.Threading.Dispatcher.PushFrame(System.Windows.Threading.DispatcherFrame)" />
        <altmember cref="T:System.Windows.Threading.DispatcherFrame" />
      </Docs>
    </Member>
    <Member MemberName="FromThread">
      <MemberSignature Language="C#" Value="public static System.Windows.Threading.Dispatcher FromThread (System.Threading.Thread thread);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Threading.Dispatcher FromThread(class System.Threading.Thread thread) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.FromThread(System.Threading.Thread)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Threading::Dispatcher ^ FromThread(System::Threading::Thread ^ thread);" />
      <MemberSignature Language="F#" Value="static member FromThread : System.Threading.Thread -&gt; System.Windows.Threading.Dispatcher" Usage="System.Windows.Threading.Dispatcher.FromThread thread" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.Dispatcher</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="thread" Type="System.Threading.Thread" />
      </Parameters>
      <Docs>
        <param name="thread">要從中取得 <see cref="T:System.Windows.Threading.Dispatcher" /> 的執行緒。</param>
        <summary>取得指定執行緒的 <see cref="T:System.Windows.Threading.Dispatcher" />。</summary>
        <returns>
          <paramref name="thread" /> 的發送器。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果無法使用指定的執行緒，發送器`null`會傳回。  
  
 <xref:System.Windows.Threading.Dispatcher.FromThread%2A> 不會建立<xref:System.Windows.Threading.Dispatcher>並沒有在執行緒上<xref:System.Windows.Threading.Dispatcher>。   新<xref:System.Windows.Threading.Dispatcher>還沒有在執行緒上建立<xref:System.Windows.Threading.Dispatcher>當嘗試取得<xref:System.Windows.Threading.Dispatcher>使用<xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A>屬性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasShutdownFinished">
      <MemberSignature Language="C#" Value="public bool HasShutdownFinished { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasShutdownFinished" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.HasShutdownFinished" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasShutdownFinished As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasShutdownFinished { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasShutdownFinished : bool" Usage="System.Windows.Threading.Dispatcher.HasShutdownFinished" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>判斷 <see cref="T:System.Windows.Threading.Dispatcher" /> 是否已完成關閉程序。</summary>
        <value>如果發送器已完成關閉程序則為 <see langword="true" />，否則為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當<xref:System.Windows.Threading.Dispatcher>關閉，就會開始<xref:System.Windows.Threading.Dispatcher.ShutdownStarted>就會引發事件並<xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A>設為`true`。  
  
 <xref:System.Windows.Threading.Dispatcher>不完全會關閉，直到事件佇列會回溯。  
  
 當發送器完成關閉，<xref:System.Windows.Threading.Dispatcher.ShutdownFinished>就會引發事件和<xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A>屬性設定為`true`。  
  
 關機程序開始時，所有暫止的工作佇列中的項目都被中止。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasShutdownStarted">
      <MemberSignature Language="C#" Value="public bool HasShutdownStarted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasShutdownStarted" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.HasShutdownStarted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasShutdownStarted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasShutdownStarted { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasShutdownStarted : bool" Usage="System.Windows.Threading.Dispatcher.HasShutdownStarted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>判斷 <see cref="T:System.Windows.Threading.Dispatcher" /> 是否已關閉。</summary>
        <value>如果 <see cref="T:System.Windows.Threading.Dispatcher" /> 已開始關閉程序則為 <see langword="true" />，否則為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當<xref:System.Windows.Threading.Dispatcher>關閉，就會開始<xref:System.Windows.Threading.Dispatcher.ShutdownStarted>就會引發事件並<xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A>設為`true`。  
  
 <xref:System.Windows.Threading.Dispatcher>便不會關閉完全直到事件佇列會回溯。  
  
 當發送器完成關閉，<xref:System.Windows.Threading.Dispatcher.ShutdownFinished>就會引發事件和<xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A>屬性設定為`true`。  
  
 關機程序開始時，所有暫止的工作佇列中的項目都被中止。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Hooks">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherHooks Hooks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Threading.DispatcherHooks Hooks" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.Hooks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Hooks As DispatcherHooks" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Threading::DispatcherHooks ^ Hooks { System::Windows::Threading::DispatcherHooks ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Hooks : System.Windows.Threading.DispatcherHooks" Usage="System.Windows.Threading.Dispatcher.Hooks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherHooks</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得提供 <see cref="T:System.Windows.Threading.Dispatcher" /> 額外事件資訊的攔截集合。</summary>
        <value>與這個 <see cref="T:System.Windows.Threading.Dispatcher" /> 關聯的攔截。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Threading.DispatcherHooks>類別提供有關的其他事件資訊<xref:System.Windows.Threading.Dispatcher>，例如當<xref:System.Windows.Threading.Dispatcher>處於非使用中或作業已經完成時。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">取得這個屬性。  相關聯的列舉型別：  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="Invoke">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>在 <see cref="T:System.Windows.Threading.Dispatcher" /> 關聯的執行緒上以同步方式執行指定的委派。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在  [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]，建立的執行緒<xref:System.Windows.Threading.DispatcherObject>可以存取該物件。  例如，背景執行緒會從主要 UI 執行緒拆無法更新的內容<xref:System.Windows.Controls.Button>所建立的 UI 執行緒。  若要存取之內容屬性的背景執行緒的順序<xref:System.Windows.Controls.Button>，背景執行緒必須將工作委派給<xref:System.Windows.Threading.Dispatcher>UI 執行緒相關聯。  這是使用其中一種<xref:System.Windows.Threading.Dispatcher.Invoke%2A>或<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>。  <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是同步和<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>是非同步的。  作業加入至事件佇列<xref:System.Windows.Threading.Dispatcher>指定<xref:System.Windows.Threading.DispatcherPriority>。  
  
 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是一項同步作業;因此，控制項不會傳回至呼叫的物件，直到回呼傳回之後。  
  
   
  
## Examples  
 下列範例會委派到<xref:System.Windows.Threading.Dispatcher>位於<xref:System.Windows.Threading.DispatcherPriority.Normal>使用<xref:System.Windows.Threading.Dispatcher.Invoke%2A>。  
  
 [!code-csharp[invalidaterequerywithsystemtimer#SystemTimerDispatcherInvoke](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithSystemTimer/CSharp/Window1.xaml.cs#systemtimerdispatcherinvoke)]
 [!code-vb[invalidaterequerywithsystemtimer#SystemTimerDispatcherInvoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithSystemTimer/visualbasic/window1.xaml.vb#systemtimerdispatcherinvoke)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (Action callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invoke(class System.Action callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Action)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invoke (callback As Action)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke(Action ^ callback);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Action -&gt; unit" Usage="dispatcher.Invoke callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="callback">要透過發送器叫用的委派。</param>
        <summary>在與 <see cref="T:System.Action" /> 相關聯的執行緒上，同步執行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (Action callback, System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invoke(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invoke (callback As Action, priority As DispatcherPriority)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke(Action ^ callback, System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Action * System.Windows.Threading.DispatcherPriority -&gt; unit" Usage="dispatcher.Invoke (callback, priority)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
      </Parameters>
      <Docs>
        <param name="callback">要透過發送器叫用的委派。</param>
        <param name="priority">優先權，會決定以何種順序叫用指定的回呼，相對於 <see cref="T:System.Windows.Threading.Dispatcher" /> 中其他擱置中的作業。</param>
        <summary>在與 <see cref="T:System.Action" /> 相關聯的執行緒上使用指定優先權同步執行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(class System.Delegate method, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Delegate * obj[] -&gt; obj" Usage="dispatcher.Invoke (method, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method">接受 <c>args</c> 中指定的參數之方法的委派，它會被推入至 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件佇列。</param>
        <param name="args">做為引數傳遞至指定方法的物件陣列。 可以是 <see langword="null" />。</param>
        <summary>在與 <see cref="T:System.Windows.Threading.Dispatcher" /> 相關聯的執行緒上，使用指定的引數同步地執行指定的委派。</summary>
        <returns>來自所叫用的委派的傳回值，或者如果委派沒有任何傳回值，則為 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在  [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]，建立的執行緒<xref:System.Windows.Threading.DispatcherObject>可以存取該物件。 例如，背景執行緒會從主要 UI 執行緒拆無法更新的內容<xref:System.Windows.Controls.Button>所建立的 UI 執行緒。 若要存取之內容屬性的背景執行緒的順序<xref:System.Windows.Controls.Button>，背景執行緒必須將工作委派給<xref:System.Windows.Threading.Dispatcher>UI 執行緒相關聯。 這是使用其中一種<xref:System.Windows.Threading.Dispatcher.Invoke%2A>或<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>。 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是同步和<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>是非同步的。 作業加入至事件佇列<xref:System.Windows.Threading.Dispatcher>指定<xref:System.Windows.Threading.DispatcherPriority>。  
  
 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是一項同步作業;因此，控制項不會傳回至呼叫的物件，直到回呼傳回之後。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, Delegate method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, method As Delegate) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * Delegate -&gt; obj" Usage="dispatcher.Invoke (priority, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="priority">相對於 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件佇列中其他暫止的作業，會先叫用指定的方法。</param>
        <param name="method">未採用任何引數的方法委派，此委派會推入至 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件佇列。</param>
        <summary>在 <see cref="T:System.Windows.Threading.Dispatcher" /> 關聯的執行緒上使用指定優先權以同步方式執行指定的委派。</summary>
        <returns>來自所叫用的委派的傳回值，或者如果委派沒有任何傳回值，則為 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在  [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]，建立的執行緒<xref:System.Windows.Threading.DispatcherObject>可以存取該物件。  例如，背景執行緒會從主要 UI 執行緒拆無法更新的內容<xref:System.Windows.Controls.Button>所建立的 UI 執行緒。  若要存取之內容屬性的背景執行緒的順序<xref:System.Windows.Controls.Button>，背景執行緒必須將工作委派給<xref:System.Windows.Threading.Dispatcher>UI 執行緒相關聯。  這是使用其中一種<xref:System.Windows.Threading.Dispatcher.Invoke%2A>或<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>。  <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是同步和<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>是非同步的。  作業加入至事件佇列<xref:System.Windows.Threading.Dispatcher>指定<xref:System.Windows.Threading.DispatcherPriority>。  
  
 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是一項同步作業;因此，控制項不會傳回至呼叫的物件，直到回呼傳回之後。  
  
   
  
## Examples  
 下列範例會委派到<xref:System.Windows.Threading.Dispatcher>位於<xref:System.Windows.Threading.DispatcherPriority.Normal>使用<xref:System.Windows.Threading.Dispatcher.Invoke%2A>。  
  
 [!code-csharp[invalidaterequerywithsystemtimer#SystemTimerDispatcherInvoke](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithSystemTimer/CSharp/Window1.xaml.cs#systemtimerdispatcherinvoke)]
 [!code-vb[invalidaterequerywithsystemtimer#SystemTimerDispatcherInvoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithSystemTimer/visualbasic/window1.xaml.vb#systemtimerdispatcherinvoke)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="priority" /> 等於 <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />。</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="priority" /> 不是有效的優先權。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="method" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (Action callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invoke(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke(Action ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Action * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken -&gt; unit" Usage="dispatcher.Invoke (callback, priority, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="callback">要透過發送器叫用的委派。</param>
        <param name="priority">優先權，會決定以何種順序叫用指定的回呼，相對於 <see cref="T:System.Windows.Threading.Dispatcher" /> 中其他擱置中的作業。</param>
        <param name="cancellationToken">表示是否要取消動作的物件。</param>
        <summary>在與 <see cref="T:System.Action" /> 相關聯的執行緒上使用指定優先權同步執行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, TimeSpan timeout, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(class System.Delegate method, valuetype System.TimeSpan timeout, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.TimeSpan,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, timeout As TimeSpan, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, TimeSpan timeout, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Delegate * TimeSpan * obj[] -&gt; obj" Usage="dispatcher.Invoke (method, timeout, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method">接受 <c>args</c> 中指定的參數之方法的委派，它會被推入至 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件佇列。</param>
        <param name="timeout">等待作業完成的最長時間。</param>
        <param name="args">做為引數傳遞至指定方法的物件陣列。 可以是 <see langword="null" />。</param>
        <summary>在與 <see cref="T:System.Windows.Threading.Dispatcher" /> 有關聯的執行緒上，在指定的時間範圍內依據指定優先順序，使用指定之引數同步地執行指定的委派。</summary>
        <returns>來自所叫用的委派的傳回值，或者如果委派沒有任何傳回值，則為 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在  [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]，建立的執行緒<xref:System.Windows.Threading.DispatcherObject>可以存取該物件。 例如，背景執行緒會從主要 UI 執行緒拆無法更新的內容<xref:System.Windows.Controls.Button>所建立的 UI 執行緒。 若要存取之內容屬性的背景執行緒的順序<xref:System.Windows.Controls.Button>，背景執行緒必須將工作委派給<xref:System.Windows.Threading.Dispatcher>UI 執行緒相關聯。 這是使用其中一種<xref:System.Windows.Threading.Dispatcher.Invoke%2A>或<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>。 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是同步和<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>是非同步的。 作業加入至事件佇列<xref:System.Windows.Threading.Dispatcher>指定<xref:System.Windows.Threading.DispatcherPriority>。  
  
 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是一項同步作業;因此，控制項不會傳回至呼叫的物件，直到回呼傳回之後。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, System.Windows.Threading.DispatcherPriority priority, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(class System.Delegate method, valuetype System.Windows.Threading.DispatcherPriority priority, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, priority As DispatcherPriority, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, System::Windows::Threading::DispatcherPriority priority, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Delegate * System.Windows.Threading.DispatcherPriority * obj[] -&gt; obj" Usage="dispatcher.Invoke (method, priority, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method">接受 <c>args</c> 中指定的參數之方法的委派，它會被推入至 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件佇列。</param>
        <param name="priority">相對於 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件佇列中其他暫止的作業，會先叫用指定的方法。</param>
        <param name="args">做為引數傳遞至指定方法的物件陣列。 可以是 <see langword="null" />。</param>
        <summary>在 <see cref="T:System.Windows.Threading.Dispatcher" /> 關聯的執行緒上使用指定優先權和指定引數以同步方式執行指定的委派。</summary>
        <returns>來自所叫用的委派的傳回值，或者如果委派沒有任何傳回值，則為 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在  [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]，建立的執行緒<xref:System.Windows.Threading.DispatcherObject>可以存取該物件。 例如，背景執行緒會從主要 UI 執行緒拆無法更新的內容<xref:System.Windows.Controls.Button>所建立的 UI 執行緒。 若要存取之內容屬性的背景執行緒的順序<xref:System.Windows.Controls.Button>，背景執行緒必須將工作委派給<xref:System.Windows.Threading.Dispatcher>UI 執行緒相關聯。 這是使用其中一種<xref:System.Windows.Threading.Dispatcher.Invoke%2A>或<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>。 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是同步和<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>是非同步的。 作業加入至事件佇列<xref:System.Windows.Threading.Dispatcher>指定<xref:System.Windows.Threading.DispatcherPriority>。  
  
 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是一項同步作業;因此，控制項不會傳回至呼叫的物件，直到回呼傳回之後。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, method As Delegate, arg As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method, System::Object ^ arg);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * Delegate * obj -&gt; obj" Usage="dispatcher.Invoke (priority, method, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="priority">相對於 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件佇列中其他暫止的作業，會先叫用指定的方法。</param>
        <param name="method">採用一個引數的方法委派，此委派會推入至 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件佇列。</param>
        <param name="arg">做為引數傳遞至指定方法的物件。</param>
        <summary>在 <see cref="T:System.Windows.Threading.Dispatcher" /> 關聯的執行緒上使用指定優先權和指定引數以同步方式執行指定的委派。</summary>
        <returns>來自所叫用的委派的傳回值，或者如果委派沒有任何傳回值，則為 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Arg` 可以是`null`如果不需要引數  
  
 在  [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]，建立的執行緒<xref:System.Windows.Threading.DispatcherObject>可以存取該物件。  例如，背景執行緒會從主要 UI 執行緒拆無法更新的內容<xref:System.Windows.Controls.Button>所建立的 UI 執行緒。  若要存取之內容屬性的背景執行緒的順序<xref:System.Windows.Controls.Button>，背景執行緒必須將工作委派給<xref:System.Windows.Threading.Dispatcher>UI 執行緒相關聯。  這是使用其中一種<xref:System.Windows.Threading.Dispatcher.Invoke%2A>或<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>。  <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是同步和<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>是非同步的。  作業加入至事件佇列<xref:System.Windows.Threading.Dispatcher>指定<xref:System.Windows.Threading.DispatcherPriority>。  
  
 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是一項同步作業;因此，控制項不會傳回至呼叫的物件，直到回呼傳回之後。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="priority" /> 等於 <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />。</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="priority" /> 不是有效的優先權。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="method" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, TimeSpan timeout, Delegate method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.TimeSpan timeout, class System.Delegate method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, timeout As TimeSpan, method As Delegate) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, TimeSpan timeout, Delegate ^ method);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * TimeSpan * Delegate -&gt; obj" Usage="dispatcher.Invoke (priority, timeout, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="method" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="priority">相對於 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件佇列中其他暫止的作業，會先叫用指定的方法。</param>
        <param name="timeout">等待直到作業完成的最長時間。</param>
        <param name="method">未採用任何引數的方法委派，此委派會推入至 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件佇列。</param>
        <summary>在建立 <see cref="T:System.Windows.Threading.Dispatcher" /> 的執行緒上使用指定優先權和指定逾時值以同步方式執行指定的委派。</summary>
        <returns>來自所叫用的委派的傳回值，或者如果委派沒有任何傳回值，則為 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在  [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]，建立的執行緒<xref:System.Windows.Threading.DispatcherObject>可以存取該物件。  例如，背景執行緒會從主要 UI 執行緒拆無法更新的內容<xref:System.Windows.Controls.Button>所建立的 UI 執行緒。  若要存取之內容屬性的背景執行緒的順序<xref:System.Windows.Controls.Button>，背景執行緒必須將工作委派給<xref:System.Windows.Threading.Dispatcher>UI 執行緒相關聯。  這是使用其中一種<xref:System.Windows.Threading.Dispatcher.Invoke%2A>或<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>。  <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是同步和<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>是非同步的。  作業加入至事件佇列<xref:System.Windows.Threading.Dispatcher>指定<xref:System.Windows.Threading.DispatcherPriority>。  
  
 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是一項同步作業;因此，控制項不會傳回至呼叫的物件，直到回呼傳回之後。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (Action callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invoke(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken,System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke(Action ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Action * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken * TimeSpan -&gt; unit" Usage="dispatcher.Invoke (callback, priority, cancellationToken, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="callback">要透過發送器叫用的委派。</param>
        <param name="priority">優先權，會決定以何種順序叫用指定的回呼，相對於 <see cref="T:System.Windows.Threading.Dispatcher" /> 中其他擱置中的作業。</param>
        <param name="cancellationToken">表示是否要取消動作的物件。</param>
        <param name="timeout">等待作業開始的最短時間。</param>
        <summary>在與 <see cref="T:System.Action" /> 相關聯的執行緒上使用指定優先權同步執行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, TimeSpan timeout, System.Windows.Threading.DispatcherPriority priority, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(class System.Delegate method, valuetype System.TimeSpan timeout, valuetype System.Windows.Threading.DispatcherPriority priority, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.TimeSpan,System.Windows.Threading.DispatcherPriority,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, timeout As TimeSpan, priority As DispatcherPriority, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, TimeSpan timeout, System::Windows::Threading::DispatcherPriority priority, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Delegate * TimeSpan * System.Windows.Threading.DispatcherPriority * obj[] -&gt; obj" Usage="dispatcher.Invoke (method, timeout, priority, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method">接受 <c>args</c> 中指定的參數之方法的委派，它會被推入至 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件佇列。</param>
        <param name="timeout">等待作業完成的最長時間。</param>
        <param name="priority">相對於 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件佇列中其他暫止的作業，會先叫用指定的方法。</param>
        <param name="args">做為引數傳遞至指定方法的物件陣列。 可以是 <see langword="null" />。</param>
        <summary>在與 <see cref="T:System.Windows.Threading.Dispatcher" /> 有關聯的執行緒上，在指定的時間範圍內依據指定優先順序，使用指定之引數同步地執行指定的委派。</summary>
        <returns>來自所叫用的委派的傳回值，或者如果委派沒有任何傳回值，則為 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在  [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]，建立的執行緒<xref:System.Windows.Threading.DispatcherObject>可以存取該物件。 例如，背景執行緒會從主要 UI 執行緒拆無法更新的內容<xref:System.Windows.Controls.Button>所建立的 UI 執行緒。 若要存取之內容屬性的背景執行緒的順序<xref:System.Windows.Controls.Button>，背景執行緒必須將工作委派給<xref:System.Windows.Threading.Dispatcher>UI 執行緒相關聯。 這是使用其中一種<xref:System.Windows.Threading.Dispatcher.Invoke%2A>或<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>。 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是同步和<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>是非同步的。 作業加入至事件佇列<xref:System.Windows.Threading.Dispatcher>指定<xref:System.Windows.Threading.DispatcherPriority>。  
  
 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是一項同步作業;因此，控制項不會傳回至呼叫的物件，直到回呼傳回之後。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method, object arg, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, method As Delegate, arg As Object, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method, System::Object ^ arg, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * Delegate * obj * obj[] -&gt; obj" Usage="dispatcher.Invoke (priority, method, arg, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="priority">相對於 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件佇列中其他暫止的作業，會先叫用指定的方法。</param>
        <param name="method">採用多個引數的方法委派，此委派會推入至 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件佇列。</param>
        <param name="arg">做為引數傳遞至指定方法的物件。</param>
        <param name="args">做為引數傳遞至指定方法的物件陣列。</param>
        <summary>在 <see cref="T:System.Windows.Threading.Dispatcher" /> 關聯的執行緒上使用指定優先權和指定引數以同步方式執行指定的委派。</summary>
        <returns>來自所叫用的委派的傳回值，或者如果委派沒有任何傳回值，則為 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Arg` 可以是`null`如果不需要引數  
  
 在  [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]，建立的執行緒<xref:System.Windows.Threading.DispatcherObject>可以存取該物件。  例如，背景執行緒會從主要 UI 執行緒拆無法更新的內容<xref:System.Windows.Controls.Button>所建立的 UI 執行緒。  若要存取之內容屬性的背景執行緒的順序<xref:System.Windows.Controls.Button>，背景執行緒必須將工作委派給<xref:System.Windows.Threading.Dispatcher>UI 執行緒相關聯。  這是使用其中一種<xref:System.Windows.Threading.Dispatcher.Invoke%2A>或<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>。  <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是同步和<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>是非同步的。  作業加入至事件佇列<xref:System.Windows.Threading.Dispatcher>指定<xref:System.Windows.Threading.DispatcherPriority>。  
  
 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是一項同步作業;因此，控制項不會傳回至呼叫的物件，直到回呼傳回之後。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="priority" /> 等於 <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />。</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="priority" /> 不是有效的優先權。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="method" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, TimeSpan timeout, Delegate method, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.TimeSpan timeout, class System.Delegate method, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, timeout As TimeSpan, method As Delegate, arg As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, TimeSpan timeout, Delegate ^ method, System::Object ^ arg);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * TimeSpan * Delegate * obj -&gt; obj" Usage="dispatcher.Invoke (priority, timeout, method, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="priority">相對於 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件佇列中其他暫止的作業，會先叫用指定的方法。</param>
        <param name="timeout">等待直到作業完成的最長時間。</param>
        <param name="method">採用多個引數的方法委派，此委派會推入至 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件佇列。</param>
        <param name="arg">做為引數傳遞至指定方法的物件。 如果不需要引數，則這個可為 <see langword="null" />。</param>
        <summary>在 <see cref="T:System.Windows.Threading.Dispatcher" /> 關聯的執行緒上使用指定優先權和指定引數以同步方式執行指定的委派。</summary>
        <returns>來自所叫用的委派的傳回值，或者如果委派沒有任何傳回值，則為 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Arg` 可以是`null`如果不需要引數  
  
 在  [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]，建立的執行緒<xref:System.Windows.Threading.DispatcherObject>可以存取該物件。  例如，背景執行緒會從主要 UI 執行緒拆無法更新的內容<xref:System.Windows.Controls.Button>所建立的 UI 執行緒。  若要存取之內容屬性的背景執行緒的順序<xref:System.Windows.Controls.Button>，背景執行緒必須將工作委派給<xref:System.Windows.Threading.Dispatcher>UI 執行緒相關聯。  這是使用其中一種<xref:System.Windows.Threading.Dispatcher.Invoke%2A>或<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>。  <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是同步和<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>是非同步的。  作業加入至事件佇列<xref:System.Windows.Threading.Dispatcher>指定<xref:System.Windows.Threading.DispatcherPriority>。  
  
 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是一項同步作業;因此，控制項不會傳回至呼叫的物件，直到回呼傳回之後。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="priority" /> 等於 <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />。</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="priority" /> 不是有效的優先權。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="method" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, TimeSpan timeout, Delegate method, object arg, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.TimeSpan timeout, class System.Delegate method, object arg, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, timeout As TimeSpan, method As Delegate, arg As Object, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, TimeSpan timeout, Delegate ^ method, System::Object ^ arg, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * TimeSpan * Delegate * obj * obj[] -&gt; obj" Usage="dispatcher.Invoke (priority, timeout, method, arg, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="priority">相對於 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件佇列中其他暫止的作業，會先叫用指定的方法。</param>
        <param name="timeout">等待直到作業完成的最長時間。</param>
        <param name="method">採用多個引數的方法委派，此委派會推入至 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件佇列。</param>
        <param name="arg">做為引數傳遞至指定方法的物件。</param>
        <param name="args">做為引數傳遞至指定方法的物件陣列。</param>
        <summary>在 <see cref="T:System.Windows.Threading.Dispatcher" /> 關聯的執行緒上使用指定優先權和指定引數以同步方式執行指定的委派。</summary>
        <returns>來自所叫用的委派的傳回值，或者如果委派沒有任何傳回值，則為 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Arg` 可以是`null`如果不需要引數。  
  
 在  [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]，建立的執行緒<xref:System.Windows.Threading.DispatcherObject>可以存取該物件。  例如，背景執行緒會從主要 UI 執行緒拆無法更新的內容<xref:System.Windows.Controls.Button>所建立的 UI 執行緒。  若要存取之內容屬性的背景執行緒的順序<xref:System.Windows.Controls.Button>，背景執行緒必須將工作委派給<xref:System.Windows.Threading.Dispatcher>UI 執行緒相關聯。  這是使用其中一種<xref:System.Windows.Threading.Dispatcher.Invoke%2A>或<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>。  <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是同步和<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>是非同步的。  作業加入至事件佇列<xref:System.Windows.Threading.Dispatcher>指定<xref:System.Windows.Threading.DispatcherPriority>。  
  
 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是一項同步作業;因此，控制項不會傳回至呼叫的物件，直到回呼傳回之後。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="priority" /> 等於 <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />。</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="priority" /> 不是有效的 <see cref="T:System.Windows.Threading.DispatcherPriority" />。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="method" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public TResult Invoke&lt;TResult&gt; (Func&lt;TResult&gt; callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TResult Invoke&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke(Of TResult) (callback As Func(Of TResult)) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; TResult Invoke(Func&lt;TResult&gt; ^ callback);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Func&lt;'Result&gt; -&gt; 'Result" Usage="dispatcher.Invoke callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">指定的委派的傳回值型別。</typeparam>
        <param name="callback">要透過發送器叫用的委派。</param>
        <summary>在與 <see cref="T:System.Func`1" /> 相關聯的執行緒上，同步執行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 所傳回的值`callback`。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public TResult Invoke&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TResult Invoke&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke(Of TResult) (callback As Func(Of TResult), priority As DispatcherPriority) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; TResult Invoke(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Func&lt;'Result&gt; * System.Windows.Threading.DispatcherPriority -&gt; 'Result" Usage="dispatcher.Invoke (callback, priority)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">指定的委派的傳回值型別。</typeparam>
        <param name="callback">要透過發送器叫用的委派。</param>
        <param name="priority">優先權，會決定以何種順序叫用指定的回呼，相對於 <see cref="T:System.Windows.Threading.Dispatcher" /> 中其他擱置中的作業。</param>
        <summary>在與 <see cref="T:System.Func`1" /> 相關聯的執行緒上使用指定優先權同步執行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 所傳回的值`callback`。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public TResult Invoke&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TResult Invoke&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; TResult Invoke(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Func&lt;'Result&gt; * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken -&gt; 'Result" Usage="dispatcher.Invoke (callback, priority, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">指定的委派的傳回值型別。</typeparam>
        <param name="callback">要透過發送器叫用的委派。</param>
        <param name="priority">優先權，會決定以何種順序叫用指定的回呼，相對於 <see cref="T:System.Windows.Threading.Dispatcher" /> 中其他擱置中的作業。</param>
        <param name="cancellationToken">表示是否要取消作業的物件。</param>
        <summary>在與 <see cref="T:System.Func`1" /> 相關聯的執行緒上使用指定優先權同步執行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 所傳回的值`callback`。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public TResult Invoke&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TResult Invoke&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken,System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; TResult Invoke(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Func&lt;'Result&gt; * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken * TimeSpan -&gt; 'Result" Usage="dispatcher.Invoke (callback, priority, cancellationToken, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">指定的委派的傳回值型別。</typeparam>
        <param name="callback">要透過發送器叫用的委派。</param>
        <param name="priority">優先權，會決定以何種順序叫用指定的回呼，相對於 <see cref="T:System.Windows.Threading.Dispatcher" /> 中其他擱置中的作業。</param>
        <param name="cancellationToken">表示是否要取消作業的物件。</param>
        <param name="timeout">等待作業開始的最短時間。</param>
        <summary>在與 <see cref="T:System.Func`1" /> 相關聯的執行緒上使用指定優先權同步執行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 所傳回的值`callback`。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="InvokeAsync">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>在與 <see cref="T:System.Windows.Threading.Dispatcher" /> 關聯的執行緒上，以非同步方式執行指定的委派。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation InvokeAsync (Action callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation InvokeAsync(class System.Action callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeAsync (callback As Action) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ InvokeAsync(Action ^ callback);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Action -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.InvokeAsync callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="callback">要透過發送器叫用的委派。</param>
        <summary>在與 <see cref="T:System.Action" /> 相關聯的執行緒上，以非同步方式執行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</summary>
        <returns>物件，此物件是在呼叫 <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)" /> 之後立即傳回的，可用來與在事件佇列中暫止執行的委派進行互動。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation InvokeAsync (Action callback, System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation InvokeAsync(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeAsync (callback As Action, priority As DispatcherPriority) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ InvokeAsync(Action ^ callback, System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Action * System.Windows.Threading.DispatcherPriority -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.InvokeAsync (callback, priority)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
      </Parameters>
      <Docs>
        <param name="callback">要透過發送器叫用的委派。</param>
        <param name="priority">優先權，會決定以何種順序叫用指定的回呼，相對於 <see cref="T:System.Windows.Threading.Dispatcher" /> 中其他擱置中的作業。</param>
        <summary>在與 <see cref="T:System.Action" /> 相關聯的執行緒上使用指定優先權以非同步方式執行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</summary>
        <returns>物件，此物件是在呼叫 <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)" /> 之後立即傳回的，可用來與在事件佇列中暫止執行的委派進行互動。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation InvokeAsync (Action callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation InvokeAsync(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ InvokeAsync(Action ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Action * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.InvokeAsync (callback, priority, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="callback">要透過發送器叫用的委派。</param>
        <param name="priority">優先權，會決定以何種順序叫用指定的回呼，相對於 <see cref="T:System.Windows.Threading.Dispatcher" /> 中其他擱置中的作業。</param>
        <param name="cancellationToken">表示是否要取消動作的物件。</param>
        <summary>在與 <see cref="T:System.Action" /> 相關聯的執行緒上使用指定優先權以非同步方式執行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</summary>
        <returns>物件，此物件是在呼叫 <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" /> 之後立即傳回的，可用來與在事件佇列中暫止執行的委派進行互動。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation&lt;TResult&gt; InvokeAsync&lt;TResult&gt; (Func&lt;TResult&gt; callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation`1&lt;!!TResult&gt; InvokeAsync&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeAsync(Of TResult) (callback As Func(Of TResult)) As DispatcherOperation(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Windows::Threading::DispatcherOperation&lt;TResult&gt; ^ InvokeAsync(Func&lt;TResult&gt; ^ callback);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Func&lt;'Result&gt; -&gt; System.Windows.Threading.DispatcherOperation&lt;'Result&gt;" Usage="dispatcher.InvokeAsync callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">指定的委派的傳回值型別。</typeparam>
        <param name="callback">要透過發送器叫用的委派。</param>
        <summary>在與 <see cref="T:System.Func`1" /> 相關聯的執行緒上，以非同步方式執行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</summary>
        <returns>物件，此物件是在呼叫 <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})" /> 之後立即傳回的，可用來與在事件佇列中暫止執行的委派進行互動。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation&lt;TResult&gt; InvokeAsync&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation`1&lt;!!TResult&gt; InvokeAsync&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeAsync(Of TResult) (callback As Func(Of TResult), priority As DispatcherPriority) As DispatcherOperation(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Windows::Threading::DispatcherOperation&lt;TResult&gt; ^ InvokeAsync(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Func&lt;'Result&gt; * System.Windows.Threading.DispatcherPriority -&gt; System.Windows.Threading.DispatcherOperation&lt;'Result&gt;" Usage="dispatcher.InvokeAsync (callback, priority)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">指定的委派的傳回值型別。</typeparam>
        <param name="callback">要透過發送器叫用的委派。</param>
        <param name="priority">優先權，會決定以何種順序叫用指定的回呼，相對於 <see cref="T:System.Windows.Threading.Dispatcher" /> 中其他擱置中的作業。</param>
        <summary>在與 <see cref="T:System.Func`1" /> 相關聯的執行緒上使用指定優先權以非同步方式執行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</summary>
        <returns>物件，此物件是在呼叫 <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)" /> 之後立即傳回的，可用來與在事件佇列中暫止執行的委派進行互動。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation&lt;TResult&gt; InvokeAsync&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation`1&lt;!!TResult&gt; InvokeAsync&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Windows::Threading::DispatcherOperation&lt;TResult&gt; ^ InvokeAsync(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Func&lt;'Result&gt; * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken -&gt; System.Windows.Threading.DispatcherOperation&lt;'Result&gt;" Usage="dispatcher.InvokeAsync (callback, priority, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">指定的委派的傳回值型別。</typeparam>
        <param name="callback">要透過發送器叫用的委派。</param>
        <param name="priority">優先權，會決定以何種順序叫用指定的回呼，相對於 <see cref="T:System.Windows.Threading.Dispatcher" /> 中其他擱置中的作業。</param>
        <param name="cancellationToken">表示是否要取消作業的物件。</param>
        <summary>在與 <see cref="T:System.Func`1" /> 相關聯的執行緒上使用指定優先權以非同步方式執行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</summary>
        <returns>物件，此物件是在呼叫 <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" /> 之後立即傳回的，可用來與在事件佇列中暫止執行的委派進行互動。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeShutdown">
      <MemberSignature Language="C#" Value="public void InvokeShutdown ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeShutdown() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeShutdown" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeShutdown ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeShutdown();" />
      <MemberSignature Language="F#" Value="member this.InvokeShutdown : unit -&gt; unit" Usage="dispatcher.InvokeShutdown " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>以同步方式初始化 <see cref="T:System.Windows.Threading.Dispatcher" /> 的關閉程序。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Threading.Dispatcher.InvokeShutdown%2A> 要求不受限制的 UI 權限。  
  
 當<xref:System.Windows.Threading.Dispatcher>關閉，就會開始<xref:System.Windows.Threading.Dispatcher.ShutdownStarted>就會引發事件並<xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A>設為`true`。  
  
 <xref:System.Windows.Threading.Dispatcher>便不會關閉完全直到事件佇列會回溯。  
  
 當發送器完成關閉，<xref:System.Windows.Threading.Dispatcher.ShutdownFinished>就會引發事件和<xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A>屬性設定為`true`。  
  
 關機程序開始時，所有暫止的工作佇列中的項目都被中止。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">關閉發送器。  相關聯的列舉型別：  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
      </Docs>
    </Member>
    <Member MemberName="PushFrame">
      <MemberSignature Language="C#" Value="public static void PushFrame (System.Windows.Threading.DispatcherFrame frame);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void PushFrame(class System.Windows.Threading.DispatcherFrame frame) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.PushFrame(System.Windows.Threading.DispatcherFrame)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub PushFrame (frame As DispatcherFrame)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void PushFrame(System::Windows::Threading::DispatcherFrame ^ frame);" />
      <MemberSignature Language="F#" Value="static member PushFrame : System.Windows.Threading.DispatcherFrame -&gt; unit" Usage="System.Windows.Threading.Dispatcher.PushFrame frame" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="frame" Type="System.Windows.Threading.DispatcherFrame" />
      </Parameters>
      <Docs>
        <param name="frame">要處理的發送器框架。</param>
        <summary>會進入執行迴圈。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A<xref:System.Windows.Threading.DispatcherFrame>代表處理暫止的工作項目迴圈。  
  
 發送器處理迴圈中的工作項目佇列。  迴圈被指在範圍內。  初始迴圈通常起始應用程式藉由呼叫<xref:System.Windows.Threading.Dispatcher.Run%2A>。  
  
 <xref:System.Windows.Threading.Dispatcher.PushFrame%2A> 進入迴圈參數代表`frame`。  在迴圈中，每次反覆運算<xref:System.Windows.Threading.Dispatcher>會檢查<xref:System.Windows.Threading.DispatcherFrame.Continue%2A>屬性上的<xref:System.Windows.Threading.DispatcherFrame>類別，以判斷是否應該繼續迴圈，或者是否應該停止。  
  
 <xref:System.Windows.Threading.DispatcherFrame> 可讓<xref:System.Windows.Threading.DispatcherFrame.Continue%2A>明確設定的屬性，而且它會遵守<xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A>屬性上的<xref:System.Windows.Threading.Dispatcher>。  這表示當<xref:System.Windows.Threading.Dispatcher>以關閉開始，使用預設的畫面格<xref:System.Windows.Threading.DispatcherFrame>實作將會結束，這可讓所有的巢狀的畫面格結束。  
  
   
  
## Examples  
 下列範例示範如何使用<xref:System.Windows.Threading.DispatcherFrame>達到類似的結果，作為[!INCLUDE[TLA#tla_winforms](~/includes/tlasharptla-winforms-md.md)]<xref:System.Windows.Forms.Application.DoEvents%2A>方法。  
  
 [!code-csharp[dispatchersnippets#DispatcherDispatcherFrameDoEvents](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherSnippets/CSharp/Window1.xaml.cs#dispatcherdispatcherframedoevents)]
 [!code-vb[dispatchersnippets#DispatcherDispatcherFrameDoEvents](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherSnippets/visualbasic/window1.xaml.vb#dispatcherdispatcherframedoevents)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="frame" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Windows.Threading.Dispatcher.HasShutdownFinished" /> 為 <see langword="true" />  
  
-或- 
 <paramref name="frame" /> 是在不同的 <see cref="T:System.Windows.Threading.Dispatcher" /> 上執行。  
  
-或- 
已經停用發送器處理。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">用於推入執行框架。  相關聯的列舉型別：  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="M:System.Windows.Threading.Dispatcher.ExitAllFrames" />
      </Docs>
    </Member>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public static void Run ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Run() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Run" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Run ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Run();" />
      <MemberSignature Language="F#" Value="static member Run : unit -&gt; unit" Usage="System.Windows.Threading.Dispatcher.Run " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>推入 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件佇列上的主執行框架。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Threading.Dispatcher>處理迴圈中的事件佇列。  迴圈被指在範圍內。  初始迴圈通常起始應用程式藉由呼叫<xref:System.Windows.Threading.Dispatcher.Run%2A>。  
  
 主執行框架將會繼續直到<xref:System.Windows.Threading.Dispatcher>關機。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShutdownFinished">
      <MemberSignature Language="C#" Value="public event EventHandler ShutdownFinished;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ShutdownFinished" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.Dispatcher.ShutdownFinished" />
      <MemberSignature Language="VB.NET" Value="Public Event ShutdownFinished As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ShutdownFinished;" />
      <MemberSignature Language="F#" Value="member this.ShutdownFinished : EventHandler " Usage="member this.ShutdownFinished : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生於 <see cref="T:System.Windows.Threading.Dispatcher" /> 完成關閉時。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 時的關機程序<xref:System.Windows.Threading.Dispatcher>啟動時，<xref:System.Windows.Threading.Dispatcher.ShutdownStarted>就會引發事件並<xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A>設定為`true`。  
  
 <xref:System.Windows.Threading.Dispatcher>不完全會關閉，直到事件佇列會回溯。  
  
 當發送器完成關閉，<xref:System.Windows.Threading.Dispatcher.ShutdownFinished>就會引發事件和<xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A>屬性設定為`true`。  
  
 關機程序開始時，所有暫止的工作佇列中的項目都被中止。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Threading.Dispatcher.HasShutdownFinished" />
        <altmember cref="P:System.Windows.Threading.Dispatcher.HasShutdownStarted" />
        <altmember cref="M:System.Windows.Threading.Dispatcher.BeginInvokeShutdown(System.Windows.Threading.DispatcherPriority)" />
        <altmember cref="M:System.Windows.Threading.Dispatcher.InvokeShutdown" />
      </Docs>
    </Member>
    <Member MemberName="ShutdownStarted">
      <MemberSignature Language="C#" Value="public event EventHandler ShutdownStarted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ShutdownStarted" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.Dispatcher.ShutdownStarted" />
      <MemberSignature Language="VB.NET" Value="Public Event ShutdownStarted As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ShutdownStarted;" />
      <MemberSignature Language="F#" Value="member this.ShutdownStarted : EventHandler " Usage="member this.ShutdownStarted : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生於 <see cref="T:System.Windows.Threading.Dispatcher" /> 開始關閉時。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 時的關機程序<xref:System.Windows.Threading.Dispatcher>啟動時，<xref:System.Windows.Threading.Dispatcher.ShutdownStarted>就會引發事件並<xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A>設定為`true`。  
  
 <xref:System.Windows.Threading.Dispatcher>不完全會關閉，直到事件佇列會回溯。  
  
 當發送器完成關閉，<xref:System.Windows.Threading.Dispatcher.ShutdownFinished>就會引發事件和<xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A>屬性設定為`true`。  
  
 關機程序開始時，所有暫止的工作佇列中的項目都被中止。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Threading.Dispatcher.HasShutdownStarted" />
        <altmember cref="E:System.Windows.Threading.Dispatcher.ShutdownFinished" />
        <altmember cref="M:System.Windows.Threading.Dispatcher.BeginInvokeShutdown(System.Windows.Threading.DispatcherPriority)" />
        <altmember cref="M:System.Windows.Threading.Dispatcher.InvokeShutdown" />
      </Docs>
    </Member>
    <Member MemberName="Thread">
      <MemberSignature Language="C#" Value="public System.Threading.Thread Thread { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.Thread Thread" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.Thread" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Thread As Thread" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::Thread ^ Thread { System::Threading::Thread ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Thread : System.Threading.Thread" Usage="System.Windows.Threading.Dispatcher.Thread" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Thread</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得與這個 <see cref="T:System.Windows.Threading.Dispatcher" /> 關聯的執行緒。</summary>
        <value>執行緒。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnhandledException">
      <MemberSignature Language="C#" Value="public event System.Windows.Threading.DispatcherUnhandledExceptionEventHandler UnhandledException;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Threading.DispatcherUnhandledExceptionEventHandler UnhandledException" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.Dispatcher.UnhandledException" />
      <MemberSignature Language="VB.NET" Value="Public Event UnhandledException As DispatcherUnhandledExceptionEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Threading::DispatcherUnhandledExceptionEventHandler ^ UnhandledException;" />
      <MemberSignature Language="F#" Value="member this.UnhandledException : System.Windows.Threading.DispatcherUnhandledExceptionEventHandler " Usage="member this.UnhandledException : System.Windows.Threading.DispatcherUnhandledExceptionEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherUnhandledExceptionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生於當擲回執行緒例外狀況且透過 <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> 或 <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> 執行委派期間無法攔截時。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 藉由委派的執行期間擲回的例外狀況時，會引發這個事件<xref:System.Windows.Threading.Dispatcher.Invoke%2A>或<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>是未攔截到。  
  
 處理常式可以標示例外狀況處理，這可以防止內部的例外狀況處理常式呼叫。  
  
 撰寫這個事件的事件處理常式時，必須小心避免建立次要的例外狀況，並攔截，就會發生。 建議您避免配置記憶體，或執行任何資源的處理常式中的大量作業。  
  
 <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter>事件提供方法來引發<xref:System.Windows.Threading.Dispatcher.UnhandledException>事件。  <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter>事件會先引發，而且如果<xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A>上<xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs>設為`false`，則<xref:System.Windows.Threading.Dispatcher.UnhandledException>不會引發事件。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Threading.DispatcherUnhandledExceptionEventHandler" />
        <altmember cref="T:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="UnhandledExceptionFilter">
      <MemberSignature Language="C#" Value="public event System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler UnhandledExceptionFilter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler UnhandledExceptionFilter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event UnhandledExceptionFilter As DispatcherUnhandledExceptionFilterEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Threading::DispatcherUnhandledExceptionFilterEventHandler ^ UnhandledExceptionFilter;" />
      <MemberSignature Language="F#" Value="member this.UnhandledExceptionFilter : System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler " Usage="member this.UnhandledExceptionFilter : System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>add: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>remove: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生於在篩選階段擲回執行緒例外狀況且透過 <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> 或 <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> 執行委派期間無法攔截時。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 藉由委派的執行期間引發的例外狀況的篩選器階段會引發這個事件<xref:System.Windows.Threading.Dispatcher.Invoke%2A>或<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>而且未攔截到。  
  
 無法在此時間點 （first-chance 例外狀況） 回溯呼叫堆疊。  
  
 撰寫這個事件的事件處理常式時，必須小心避免建立次要的例外狀況，並攔截，就會發生。  建議您避免配置記憶體，或執行任何資源的處理常式中的大量作業。  
  
 <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter>事件提供方法來引發<xref:System.Windows.Threading.Dispatcher.UnhandledException>事件。  <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter>事件會先引發，而且如果<xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A>上<xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs>設為`false`，則<xref:System.Windows.Threading.Dispatcher.UnhandledException>不會引發事件。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">新增或移除此事件處理常式。  相關聯的列舉型別：  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="T:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler" />
        <altmember cref="T:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="ValidatePriority">
      <MemberSignature Language="C#" Value="public static void ValidatePriority (System.Windows.Threading.DispatcherPriority priority, string parameterName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ValidatePriority(valuetype System.Windows.Threading.DispatcherPriority priority, string parameterName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.ValidatePriority(System.Windows.Threading.DispatcherPriority,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ValidatePriority (priority As DispatcherPriority, parameterName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ValidatePriority(System::Windows::Threading::DispatcherPriority priority, System::String ^ parameterName);" />
      <MemberSignature Language="F#" Value="static member ValidatePriority : System.Windows.Threading.DispatcherPriority * string -&gt; unit" Usage="System.Windows.Threading.Dispatcher.ValidatePriority (priority, parameterName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="parameterName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="priority">要檢查的優先權。</param>
        <param name="parameterName">如果優先權無效，所發生之例外狀況將傳回的字串。</param>
        <summary>判斷指定的 <see cref="T:System.Windows.Threading.DispatcherPriority" /> 是否為有效的優先權。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="priority" /> 不是有效的 <see cref="T:System.Windows.Threading.DispatcherPriority" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="VerifyAccess">
      <MemberSignature Language="C#" Value="public void VerifyAccess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void VerifyAccess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.VerifyAccess" />
      <MemberSignature Language="VB.NET" Value="Public Sub VerifyAccess ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void VerifyAccess();" />
      <MemberSignature Language="F#" Value="member this.VerifyAccess : unit -&gt; unit" Usage="dispatcher.VerifyAccess " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>判斷呼叫的執行是否可以存取這個 <see cref="T:System.Windows.Threading.Dispatcher" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 只有在執行緒<xref:System.Windows.Threading.Dispatcher>會建立在可存取<xref:System.Windows.Threading.Dispatcher>。  
  
 這個方法是公用的因此，任何執行緒可以檢查看看它是否有存取權<xref:System.Windows.Threading.Dispatcher>。  
  
 之間的差異<xref:System.Windows.Threading.Dispatcher.CheckAccess%2A>並<xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A>是<xref:System.Windows.Threading.Dispatcher.CheckAccess%2A>傳回布林值，如果呼叫的執行緒沒有存取權<xref:System.Windows.Threading.Dispatcher>和<xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A>會擲回例外狀況。  
  
   
  
## Examples  
 下列範例會使用<xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A>來判斷執行緒是否有存取權的執行緒，<xref:System.Windows.Controls.Button>上建立。  此方法會採用物件做為引數轉換成<xref:System.Windows.Controls.Button>。  <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A>方法<xref:System.Windows.Threading.Dispatcher>的<xref:System.Windows.Controls.Button>呼叫以驗證的存取權的執行緒。  
  
 如果呼叫的執行緒可以存取<xref:System.Windows.Threading.Dispatcher>，則<xref:System.Windows.Controls.Button>藉由只存取的成員會更新<xref:System.Windows.Controls.Button>。  
  
 如果呼叫的執行緒沒有存取權，<xref:System.InvalidOperationException>就會擲回。  此範例中攔截到例外狀況，並將推送的委派，它會接受<xref:System.Windows.Controls.Button>做為引數中，拖曳至<xref:System.Windows.Threading.Dispatcher>的<xref:System.Windows.Controls.Button>。  這<xref:System.Windows.Threading.Dispatcher>會執行更新的工作<xref:System.Windows.Controls.Button>。  
  
 [!code-csharp[DispatcherAccessSample#DispatcherAccessVerifyAccess](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherAccessSample/CSharp/Window1.xaml.cs#dispatcheraccessverifyaccess)]
 [!code-vb[DispatcherAccessSample#DispatcherAccessVerifyAccess](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherAccessSample/visualbasic/window1.xaml.vb#dispatcheraccessverifyaccess)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">呼叫執行緒無法存取這個 <see cref="T:System.Windows.Threading.Dispatcher" />。</exception>
        <altmember cref="M:System.Windows.Threading.Dispatcher.CheckAccess" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Yield">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>建立 awaitable 物件，這個物件會以非同步方式讓出控制權給目前的發送器，並提供機會給發送器以處理其他事件。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Yield">
      <MemberSignature Language="C#" Value="public static System.Windows.Threading.DispatcherPriorityAwaitable Yield ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Threading.DispatcherPriorityAwaitable Yield() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Yield" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Yield () As DispatcherPriorityAwaitable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Threading::DispatcherPriorityAwaitable Yield();" />
      <MemberSignature Language="F#" Value="static member Yield : unit -&gt; System.Windows.Threading.DispatcherPriorityAwaitable" Usage="System.Windows.Threading.Dispatcher.Yield " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherPriorityAwaitable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>建立 awaitable 物件，這個物件會以非同步方式讓出控制權給目前的發送器，並提供機會給發送器以處理其他事件。</summary>
        <returns>Awaitable 物件，會以非同步方式讓出控制權給目前的發送器，並提供機會給發送器以處理其他事件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法可讓您暫時釋出給目前的發送器的執行控制權，因此可以執行其他工作，例如處理其他事件。 使用`await`，或`Await`在 Visual Basic 中的傳回值的運算子將控制權交還給目前的發送器。 使用這個方法，如果想要讓您的應用程式有機會處理事件，而您的應用程式正在執行許多工作，在 UI 執行緒上。 例如，您可以使用這個方法在更新控制項的長時間執行迴圈。  
  
 這個方法就相當於呼叫<xref:System.Windows.Threading.Dispatcher.Yield%28System.Windows.Threading.DispatcherPriority%29>方法並傳入<xref:System.Windows.Threading.DispatcherPriority.Background?displayProperty=nameWithType>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Yield">
      <MemberSignature Language="C#" Value="public static System.Windows.Threading.DispatcherPriorityAwaitable Yield (System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Threading.DispatcherPriorityAwaitable Yield(valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Yield(System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Yield (priority As DispatcherPriority) As DispatcherPriorityAwaitable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Threading::DispatcherPriorityAwaitable Yield(System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="static member Yield : System.Windows.Threading.DispatcherPriority -&gt; System.Windows.Threading.DispatcherPriorityAwaitable" Usage="System.Windows.Threading.Dispatcher.Yield priority" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherPriorityAwaitable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
      </Parameters>
      <Docs>
        <param name="priority">做為排程接續依據的優先權。</param>
        <summary>建立 awaitable 物件，這個物件會以非同步方式讓出控制權給目前的發送器，並提供機會給發送器以處理其他事件。  在控制權回到等候此方法之結果的程式碼時進行的工作會以指定的優先權來排定。</summary>
        <returns>Awaitable 物件，會以非同步方式讓出控制權給目前的發送器，並提供機會給發送器以處理其他事件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法可讓您暫時釋出給目前的發送器的執行控制權，因此可以執行其他工作，例如處理其他事件。 使用`await`，或`Await`在 Visual Basic 中的傳回值的運算子將控制權交還給目前的發送器。 使用這個方法，如果想要讓您的應用程式有機會處理事件，而您的應用程式正在執行許多工作，在 UI 執行緒上。 例如，您可以使用這個方法在更新控制項的長時間執行迴圈。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>