<Type Name="Dispatcher" FullName="System.Windows.Threading.Dispatcher">
  <TypeSignature Language="C#" Value="public sealed class Dispatcher" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Dispatcher extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Threading.Dispatcher" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Dispatcher" />
  <TypeSignature Language="C++ CLI" Value="public ref class Dispatcher sealed" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="93d5a-101">提供管理執行緒之工作項目佇列的服務。</span><span class="sxs-lookup"><span data-stu-id="93d5a-101">Provides services for managing the queue of work items for a thread.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93d5a-102"><xref:System.Windows.Threading.Dispatcher>維護優先順序的佇列特定執行緒的工作項目。</span><span class="sxs-lookup"><span data-stu-id="93d5a-102">The <xref:System.Windows.Threading.Dispatcher> maintains a prioritized queue of work items for a specific thread.</span></span>  
  
 <span data-ttu-id="93d5a-103">當<xref:System.Windows.Threading.Dispatcher>建立執行緒，它就會成為唯一<xref:System.Windows.Threading.Dispatcher>可以與執行緒相關聯即使<xref:System.Windows.Threading.Dispatcher>已關閉。</span><span class="sxs-lookup"><span data-stu-id="93d5a-103">When a <xref:System.Windows.Threading.Dispatcher> is created on a thread, it becomes the only <xref:System.Windows.Threading.Dispatcher> that can be associated with the thread, even if the <xref:System.Windows.Threading.Dispatcher> is shut down.</span></span>  
  
 <span data-ttu-id="93d5a-104">如果您嘗試取得<xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A>目前的執行緒和<xref:System.Windows.Threading.Dispatcher>所關聯的執行緒，<xref:System.Windows.Threading.Dispatcher>將會建立。</span><span class="sxs-lookup"><span data-stu-id="93d5a-104">If you attempt to get the <xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A> for the current thread and a <xref:System.Windows.Threading.Dispatcher> is not associated with the thread, a <xref:System.Windows.Threading.Dispatcher> will be created.</span></span> <span data-ttu-id="93d5a-105">A<xref:System.Windows.Threading.Dispatcher>也會建立，當您建立<xref:System.Windows.Threading.DispatcherObject>。</span><span class="sxs-lookup"><span data-stu-id="93d5a-105">A <xref:System.Windows.Threading.Dispatcher> is also created when you create a <xref:System.Windows.Threading.DispatcherObject>.</span></span> <span data-ttu-id="93d5a-106">如果您建立<xref:System.Windows.Threading.Dispatcher>背景執行緒，請務必關閉發送器在結束的執行緒之前。</span><span class="sxs-lookup"><span data-stu-id="93d5a-106">If you create a <xref:System.Windows.Threading.Dispatcher> on a background thread, be sure to shut down the dispatcher before exiting the thread.</span></span>  
  
 <span data-ttu-id="93d5a-107">如果<xref:System.Windows.Threading.Dispatcher>關閉，無法將它重新啟動。</span><span class="sxs-lookup"><span data-stu-id="93d5a-107">If a <xref:System.Windows.Threading.Dispatcher> is shut down, it cannot be restarted.</span></span>  
  
 <span data-ttu-id="93d5a-108">在[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]、<xref:System.Windows.Threading.DispatcherObject>只能由存取<xref:System.Windows.Threading.Dispatcher>相關聯。</span><span class="sxs-lookup"><span data-stu-id="93d5a-108">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], a <xref:System.Windows.Threading.DispatcherObject> can only be accessed by the <xref:System.Windows.Threading.Dispatcher> it is associated with.</span></span>  <span data-ttu-id="93d5a-109">例如，背景執行緒無法更新的內容<xref:System.Windows.Controls.Button>相關聯<xref:System.Windows.Threading.Dispatcher>上[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]執行緒。</span><span class="sxs-lookup"><span data-stu-id="93d5a-109">For example, a background thread cannot update the contents of a <xref:System.Windows.Controls.Button> that is associated with the <xref:System.Windows.Threading.Dispatcher> on the [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] thread.</span></span>  <span data-ttu-id="93d5a-110">為了讓背景執行緒存取<xref:System.Windows.Controls.ContentControl.Content%2A>屬性<xref:System.Windows.Controls.Button>，背景執行緒必須委派工作給<xref:System.Windows.Threading.Dispatcher>聯[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]執行緒。</span><span class="sxs-lookup"><span data-stu-id="93d5a-110">In order for the background thread to access the <xref:System.Windows.Controls.ContentControl.Content%2A> property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] thread.</span></span>  <span data-ttu-id="93d5a-111">這會透過使用<xref:System.Windows.Threading.Dispatcher.Invoke%2A>或<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>。</span><span class="sxs-lookup"><span data-stu-id="93d5a-111">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="93d5a-112"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是同步方法，和<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>為非同步。</span><span class="sxs-lookup"><span data-stu-id="93d5a-112"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="93d5a-113">作業加入佇列的<xref:System.Windows.Threading.Dispatcher>位於指定<xref:System.Windows.Threading.DispatcherPriority>。</span><span class="sxs-lookup"><span data-stu-id="93d5a-113">The operation is added to the queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="93d5a-114">如果<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>上呼叫<xref:System.Windows.Threading.Dispatcher>，已關閉，傳回的 status 屬性<xref:System.Windows.Threading.DispatcherOperation>設<xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>。</span><span class="sxs-lookup"><span data-stu-id="93d5a-114">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
 <span data-ttu-id="93d5a-115">所有的方法上<xref:System.Windows.Threading.Dispatcher>，除了<xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A>，是無限制執行緒。</span><span class="sxs-lookup"><span data-stu-id="93d5a-115">All of the methods on <xref:System.Windows.Threading.Dispatcher>, with the exception of <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A>, are free-threaded.</span></span>  
  
 <span data-ttu-id="93d5a-116">衍生自<xref:System.Windows.Threading.DispatcherObject>具有執行緒相似性。</span><span class="sxs-lookup"><span data-stu-id="93d5a-116">Objects that derive from <xref:System.Windows.Threading.DispatcherObject> have thread affinity.</span></span>  
  
 <span data-ttu-id="93d5a-117">衍生自<xref:System.Windows.Freezable>是無限制執行緒時就會凍結。</span><span class="sxs-lookup"><span data-stu-id="93d5a-117">Objects that derive from <xref:System.Windows.Freezable> are free-threaded when they are frozen.</span></span>  <span data-ttu-id="93d5a-118">如需詳細資訊，請參閱 [Freezable 物件概觀](~/docs/framework/wpf/advanced/freezable-objects-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="93d5a-118">For more information, see [Freezable Objects Overview](~/docs/framework/wpf/advanced/freezable-objects-overview.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="93d5a-119">下列範例示範如何將作業到<xref:System.Windows.Threading.Dispatcher>。</span><span class="sxs-lookup"><span data-stu-id="93d5a-119">The following example shows how to place an operation onto a <xref:System.Windows.Threading.Dispatcher>.</span></span>  <span data-ttu-id="93d5a-120">此範例的完整原始程式碼，請參閱[單一執行緒應用程式與長時間執行的計算範例](http://go.microsoft.com/fwlink/?LinkID=160038)。</span><span class="sxs-lookup"><span data-stu-id="93d5a-120">For the full source code of this example, see [Single-Threaded Application with Long-Running Calculation Sample](http://go.microsoft.com/fwlink/?LinkID=160038).</span></span>  
  
 <span data-ttu-id="93d5a-121">首先，建立委派可接受任何引數。</span><span class="sxs-lookup"><span data-stu-id="93d5a-121">First, a delegate is created that accepts no arguments.</span></span>  
  
 [!code-csharp[ThreadingPrimeNumbers#ThreadingPrimeNumberInit](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingPrimeNumbers/CSharp/Window1.xaml.cs#threadingprimenumberinit)] 
 [!code-vb[ThreadingPrimeNumbers#ThreadingPrimeNumberInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingPrimeNumbers/visualbasic/mainwindow.xaml.vb#threadingprimenumberinit)]   
  
 <span data-ttu-id="93d5a-122">下一步<xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29>呼叫。</span><span class="sxs-lookup"><span data-stu-id="93d5a-122">Next, <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> is called.</span></span>  <span data-ttu-id="93d5a-123">此呼叫<xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29>接受兩個參數： 優先權，用來設定為<xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>，並會透過委派的執行個體中傳遞的回呼`NextPrimeDelegate`。</span><span class="sxs-lookup"><span data-stu-id="93d5a-123">This call to <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> takes two parameters: the priority, which is set to <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>, and the callback, which is passed in through an instance of the delegate `NextPrimeDelegate`.</span></span>  
  
 [!code-csharp[ThreadingPrimeNumbers#ThreadingPrimeNumberBeginInvoke](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingPrimeNumbers/CSharp/Window1.xaml.cs#threadingprimenumberbegininvoke)] 
 [!code-vb[ThreadingPrimeNumbers#ThreadingPrimeNumberBeginInvoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingPrimeNumbers/visualbasic/mainwindow.xaml.vb#threadingprimenumberbegininvoke)]   
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="BeginInvoke">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="93d5a-124">在 <see cref="T:System.Windows.Threading.Dispatcher" /> 關聯的執行緒上以非同步方式執行委派。</span><span class="sxs-lookup"><span data-stu-id="93d5a-124">Executes a delegate asynchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93d5a-125">在[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]，建立的執行緒<xref:System.Windows.Threading.DispatcherObject>可以存取該物件。</span><span class="sxs-lookup"><span data-stu-id="93d5a-125">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="93d5a-126">例如，會開始從主要 UI 執行緒背景執行緒無法更新的內容<xref:System.Windows.Controls.Button>UI 執行緒上所建立。</span><span class="sxs-lookup"><span data-stu-id="93d5a-126">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="93d5a-127">為了讓背景執行緒存取的內容屬性將<xref:System.Windows.Controls.Button>，背景執行緒必須委派工作給<xref:System.Windows.Threading.Dispatcher>與 UI 執行緒相關聯。</span><span class="sxs-lookup"><span data-stu-id="93d5a-127">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="93d5a-128">這會透過使用<xref:System.Windows.Threading.Dispatcher.Invoke%2A>或<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>。</span><span class="sxs-lookup"><span data-stu-id="93d5a-128">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="93d5a-129"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是同步方法，和<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>為非同步。</span><span class="sxs-lookup"><span data-stu-id="93d5a-129"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="93d5a-130">作業會加入到事件佇列<xref:System.Windows.Threading.Dispatcher>位於指定<xref:System.Windows.Threading.DispatcherPriority>。</span><span class="sxs-lookup"><span data-stu-id="93d5a-130">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="93d5a-131"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 為非同步。因此，控制項會立即傳回呼叫的物件後呼叫。</span><span class="sxs-lookup"><span data-stu-id="93d5a-131"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="93d5a-132"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 傳回<xref:System.Windows.Threading.DispatcherOperation>物件，可以用互動與委派，當委派被在事件佇列。</span><span class="sxs-lookup"><span data-stu-id="93d5a-132"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> returns a <xref:System.Windows.Threading.DispatcherOperation> object that can be used to interact with the delegate when the delegate is in the event queue.</span></span>  
  
 <span data-ttu-id="93d5a-133"><xref:System.Windows.Threading.DispatcherOperation>所傳回物件<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>可以用數種方式，與指定的委派，例如互動：</span><span class="sxs-lookup"><span data-stu-id="93d5a-133">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="93d5a-134">變更<xref:System.Windows.Threading.DispatcherPriority>委派的暫止，所以執行事件佇列中。</span><span class="sxs-lookup"><span data-stu-id="93d5a-134">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="93d5a-135">從事件佇列中移除的委派。</span><span class="sxs-lookup"><span data-stu-id="93d5a-135">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="93d5a-136">等候要傳回的委派。</span><span class="sxs-lookup"><span data-stu-id="93d5a-136">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="93d5a-137">取得在委派傳回它的後面的值會執行。</span><span class="sxs-lookup"><span data-stu-id="93d5a-137">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="93d5a-138">若為多個<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>呼叫會在相同<xref:System.Windows.Threading.DispatcherPriority>，將會執行被呼叫的順序。</span><span class="sxs-lookup"><span data-stu-id="93d5a-138">If multiple <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> calls are made at the same <xref:System.Windows.Threading.DispatcherPriority>, they will be executed in the order the calls were made.</span></span>  
  
 <span data-ttu-id="93d5a-139">如果<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>上呼叫<xref:System.Windows.Threading.Dispatcher>，已關閉，傳回的 status 屬性<xref:System.Windows.Threading.DispatcherOperation>設<xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>。</span><span class="sxs-lookup"><span data-stu-id="93d5a-139">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (Delegate method, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(class System.Delegate method, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Delegate,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (method As Delegate, ParamArray args As Object()) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(Delegate ^ method, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="93d5a-140">接受 <c>args</c> 中指定的參數之方法的委派，它會被推入至 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件佇列。</span><span class="sxs-lookup"><span data-stu-id="93d5a-140">The delegate to a method that takes parameters specified in <c>args</c>, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="args"><span data-ttu-id="93d5a-141">做為引數傳遞至指定方法的物件陣列。</span><span class="sxs-lookup"><span data-stu-id="93d5a-141">An array of objects to pass as arguments to the given method.</span></span> <span data-ttu-id="93d5a-142">可以是 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="93d5a-142">Can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="93d5a-143">在其中有建立 <see cref="T:System.Windows.Threading.Dispatcher" /> 的執行緒上，使用指定的引數非同步地執行指定的委派。</span><span class="sxs-lookup"><span data-stu-id="93d5a-143">Executes the specified delegate asynchronously with the specified arguments on the thread that the <see cref="T:System.Windows.Threading.Dispatcher" /> was created on.</span></span></summary>
        <returns><span data-ttu-id="93d5a-144">物件，此物件是在呼叫 <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> 之後立即傳回的，可用來與在事件佇列中暫止執行的委派進行互動。</span><span class="sxs-lookup"><span data-stu-id="93d5a-144">An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93d5a-145"><xref:System.Windows.Threading.DispatcherOperation>所傳回物件<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>可以用數種方式，與指定的委派，例如互動：</span><span class="sxs-lookup"><span data-stu-id="93d5a-145">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="93d5a-146">變更<xref:System.Windows.Threading.DispatcherPriority>委派的暫止，所以執行事件佇列中。</span><span class="sxs-lookup"><span data-stu-id="93d5a-146">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="93d5a-147">從事件佇列中移除的委派。</span><span class="sxs-lookup"><span data-stu-id="93d5a-147">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="93d5a-148">等候要傳回的委派。</span><span class="sxs-lookup"><span data-stu-id="93d5a-148">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="93d5a-149">取得在委派傳回它的後面的值會執行。</span><span class="sxs-lookup"><span data-stu-id="93d5a-149">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="93d5a-150"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 為非同步。因此，控制項會立即傳回呼叫的物件後呼叫。</span><span class="sxs-lookup"><span data-stu-id="93d5a-150"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="93d5a-151">在[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]，建立的執行緒<xref:System.Windows.Threading.DispatcherObject>可以存取該物件。</span><span class="sxs-lookup"><span data-stu-id="93d5a-151">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="93d5a-152">例如，會開始從主要 UI 執行緒背景執行緒無法更新的內容<xref:System.Windows.Controls.Button>UI 執行緒上所建立。</span><span class="sxs-lookup"><span data-stu-id="93d5a-152">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="93d5a-153">為了讓背景執行緒存取的內容屬性將<xref:System.Windows.Controls.Button>，背景執行緒必須委派工作給<xref:System.Windows.Threading.Dispatcher>與 UI 執行緒相關聯。</span><span class="sxs-lookup"><span data-stu-id="93d5a-153">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="93d5a-154">這會透過使用<xref:System.Windows.Threading.Dispatcher.Invoke%2A>或<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>。</span><span class="sxs-lookup"><span data-stu-id="93d5a-154">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="93d5a-155"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是同步方法，和<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>為非同步。</span><span class="sxs-lookup"><span data-stu-id="93d5a-155"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="93d5a-156">作業會加入到事件佇列<xref:System.Windows.Threading.Dispatcher>位於指定<xref:System.Windows.Threading.DispatcherPriority>。</span><span class="sxs-lookup"><span data-stu-id="93d5a-156">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="93d5a-157">如果<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>上呼叫<xref:System.Windows.Threading.Dispatcher>，已關閉，傳回的 status 屬性<xref:System.Windows.Threading.DispatcherOperation>設<xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>。</span><span class="sxs-lookup"><span data-stu-id="93d5a-157">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (System.Windows.Threading.DispatcherPriority priority, Delegate method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (priority As DispatcherPriority, method As Delegate) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="93d5a-158">相對於 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件佇列中其他暫止的作業，會先叫用指定的方法。</span><span class="sxs-lookup"><span data-stu-id="93d5a-158">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="method"><span data-ttu-id="93d5a-159">未採用任何引數的方法委派，此委派會推入至 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件佇列。</span><span class="sxs-lookup"><span data-stu-id="93d5a-159">The delegate to a method that takes no arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <summary><span data-ttu-id="93d5a-160">在 <see cref="T:System.Windows.Threading.Dispatcher" /> 關聯的執行緒上使用指定優先權以非同步方式執行指定的委派。</span><span class="sxs-lookup"><span data-stu-id="93d5a-160">Executes the specified delegate asynchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="93d5a-161">物件，此物件是在呼叫 <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> 之後立即傳回的，可用來與在事件佇列中暫止執行的委派進行互動。</span><span class="sxs-lookup"><span data-stu-id="93d5a-161">An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93d5a-162">若為多個<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>呼叫會在相同<xref:System.Windows.Threading.DispatcherPriority>，將會執行被呼叫的順序。</span><span class="sxs-lookup"><span data-stu-id="93d5a-162">If multiple <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> calls are made at the same <xref:System.Windows.Threading.DispatcherPriority>, they will be executed in the order the calls were made.</span></span>  
  
 <span data-ttu-id="93d5a-163"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 傳回<xref:System.Windows.Threading.DispatcherOperation>物件，可以用互動與委派，當委派被在事件佇列。</span><span class="sxs-lookup"><span data-stu-id="93d5a-163"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> returns a <xref:System.Windows.Threading.DispatcherOperation> object that can be used to interact with the delegate when the delegate is in the event queue.</span></span>  
  
 <span data-ttu-id="93d5a-164"><xref:System.Windows.Threading.DispatcherOperation>所傳回物件<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>可以用數種方式，與指定的委派，例如互動：</span><span class="sxs-lookup"><span data-stu-id="93d5a-164">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="93d5a-165">變更<xref:System.Windows.Threading.DispatcherPriority>委派的暫止，所以執行事件佇列中。</span><span class="sxs-lookup"><span data-stu-id="93d5a-165">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="93d5a-166">從事件佇列中移除的委派。</span><span class="sxs-lookup"><span data-stu-id="93d5a-166">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="93d5a-167">等候要傳回的委派。</span><span class="sxs-lookup"><span data-stu-id="93d5a-167">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="93d5a-168">取得在委派傳回它的後面的值會執行。</span><span class="sxs-lookup"><span data-stu-id="93d5a-168">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="93d5a-169"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 為非同步。因此，控制項會立即傳回呼叫的物件後呼叫。</span><span class="sxs-lookup"><span data-stu-id="93d5a-169"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="93d5a-170">在[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]，建立的執行緒<xref:System.Windows.Threading.DispatcherObject>可以存取該物件。</span><span class="sxs-lookup"><span data-stu-id="93d5a-170">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="93d5a-171">例如，會開始從主要 UI 執行緒背景執行緒無法更新的內容<xref:System.Windows.Controls.Button>UI 執行緒上所建立。</span><span class="sxs-lookup"><span data-stu-id="93d5a-171">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="93d5a-172">為了讓背景執行緒存取的內容屬性將<xref:System.Windows.Controls.Button>，背景執行緒必須委派工作給<xref:System.Windows.Threading.Dispatcher>與 UI 執行緒相關聯。</span><span class="sxs-lookup"><span data-stu-id="93d5a-172">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="93d5a-173">這會透過使用<xref:System.Windows.Threading.Dispatcher.Invoke%2A>或<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>。</span><span class="sxs-lookup"><span data-stu-id="93d5a-173">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="93d5a-174"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是同步方法，和<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>為非同步。</span><span class="sxs-lookup"><span data-stu-id="93d5a-174"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="93d5a-175">作業會加入到事件佇列<xref:System.Windows.Threading.Dispatcher>位於指定<xref:System.Windows.Threading.DispatcherPriority>。</span><span class="sxs-lookup"><span data-stu-id="93d5a-175">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="93d5a-176">如果<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>上呼叫<xref:System.Windows.Threading.Dispatcher>，已關閉，傳回的 status 屬性<xref:System.Windows.Threading.DispatcherOperation>設<xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>。</span><span class="sxs-lookup"><span data-stu-id="93d5a-176">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="93d5a-177">下列範例示範如何將作業到<xref:System.Windows.Threading.Dispatcher>。</span><span class="sxs-lookup"><span data-stu-id="93d5a-177">The following example shows how to place an operation onto a <xref:System.Windows.Threading.Dispatcher>.</span></span>  <span data-ttu-id="93d5a-178">此範例的完整原始程式碼，請參閱[單一執行緒應用程式與長時間執行的計算範例](http://go.microsoft.com/fwlink/?LinkID=160038)。</span><span class="sxs-lookup"><span data-stu-id="93d5a-178">For the full source code of this example, see [Single-Threaded Application with Long-Running Calculation Sample](http://go.microsoft.com/fwlink/?LinkID=160038).</span></span>  
  
 <span data-ttu-id="93d5a-179">首先，建立委派可接受任何引數。</span><span class="sxs-lookup"><span data-stu-id="93d5a-179">First, a delegate is created that accepts no arguments.</span></span>  
  
 [!code-csharp[ThreadingPrimeNumbers#ThreadingPrimeNumberInit](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingPrimeNumbers/CSharp/Window1.xaml.cs#threadingprimenumberinit)] 
 [!code-vb[ThreadingPrimeNumbers#ThreadingPrimeNumberInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingPrimeNumbers/visualbasic/mainwindow.xaml.vb#threadingprimenumberinit)]   
  
 <span data-ttu-id="93d5a-180">下一步<xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29>呼叫。</span><span class="sxs-lookup"><span data-stu-id="93d5a-180">Next, <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> is called.</span></span>  <span data-ttu-id="93d5a-181">因為每個<xref:System.Windows.Threading.DispatcherObject>具有屬性，傳回<xref:System.Windows.Threading.Dispatcher>相關聯，想要的<xref:System.Windows.Threading.Dispatcher>取得透過查詢<xref:System.Windows.Threading.DispatcherObject>，在此情況下<xref:System.Windows.Controls.Button>名為`startStopButton`。</span><span class="sxs-lookup"><span data-stu-id="93d5a-181">Because every <xref:System.Windows.Threading.DispatcherObject> has a property that returns the <xref:System.Windows.Threading.Dispatcher> it is associated with, the desired <xref:System.Windows.Threading.Dispatcher> is obtained by querying the <xref:System.Windows.Threading.DispatcherObject>, in this case a <xref:System.Windows.Controls.Button> named `startStopButton`.</span></span>   <span data-ttu-id="93d5a-182">呼叫<xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29>接受兩個參數： 優先權，用來設定為<xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>，並會透過委派的執行個體中傳遞的回呼`NextPrimeDelegate`。</span><span class="sxs-lookup"><span data-stu-id="93d5a-182">The call to <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> takes two parameters: the priority, which is set to <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>, and the callback, which is passed in through an instance of the delegate `NextPrimeDelegate`.</span></span>  
  
 [!code-csharp[ThreadingPrimeNumbers#ThreadingPrimeNumberBeginInvoke](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingPrimeNumbers/CSharp/Window1.xaml.cs#threadingprimenumberbegininvoke)] 
 [!code-vb[ThreadingPrimeNumbers#ThreadingPrimeNumberBeginInvoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingPrimeNumbers/visualbasic/mainwindow.xaml.vb#threadingprimenumberbegininvoke)]   
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="93d5a-183"><paramref name="method" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="93d5a-183"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <span data-ttu-id="93d5a-184"><paramref name="priority" /> 不是有效的 <see cref="T:System.Windows.Threading.DispatcherPriority" />。</span><span class="sxs-lookup"><span data-stu-id="93d5a-184"><paramref name="priority" /> is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (Delegate method, System.Windows.Threading.DispatcherPriority priority, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(class System.Delegate method, valuetype System.Windows.Threading.DispatcherPriority priority, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (method As Delegate, priority As DispatcherPriority, ParamArray args As Object()) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(Delegate ^ method, System::Windows::Threading::DispatcherPriority priority, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="93d5a-185">接受 <c>args</c> 中指定的參數之方法的委派，它會被推入至 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件佇列。</span><span class="sxs-lookup"><span data-stu-id="93d5a-185">The delegate to a method that takes parameters specified in <c>args</c>, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="priority"><span data-ttu-id="93d5a-186">相對於 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件佇列中其他暫止的作業，會先叫用指定的方法。</span><span class="sxs-lookup"><span data-stu-id="93d5a-186">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="args"><span data-ttu-id="93d5a-187">做為引數傳遞至指定方法的物件陣列。</span><span class="sxs-lookup"><span data-stu-id="93d5a-187">An array of objects to pass as arguments to the given method.</span></span> <span data-ttu-id="93d5a-188">可以是 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="93d5a-188">Can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="93d5a-189">在其中有建立 <see cref="T:System.Windows.Threading.Dispatcher" /> 的執行緒上，依據指定的優先順序，使用指定的引數非同步地執行指定的委派。</span><span class="sxs-lookup"><span data-stu-id="93d5a-189">Executes the specified delegate asynchronously with the specified arguments, at the specified priority, on the thread that the <see cref="T:System.Windows.Threading.Dispatcher" /> was created on.</span></span></summary>
        <returns><span data-ttu-id="93d5a-190">物件，此物件是在呼叫 <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> 之後立即傳回的，可用來與在事件佇列中暫止執行的委派進行互動。</span><span class="sxs-lookup"><span data-stu-id="93d5a-190">An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93d5a-191"><xref:System.Windows.Threading.DispatcherOperation>所傳回物件<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>可以用數種方式，與指定的委派，例如互動：</span><span class="sxs-lookup"><span data-stu-id="93d5a-191">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="93d5a-192">變更<xref:System.Windows.Threading.DispatcherPriority>委派的暫止，所以執行事件佇列中。</span><span class="sxs-lookup"><span data-stu-id="93d5a-192">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="93d5a-193">從事件佇列中移除的委派。</span><span class="sxs-lookup"><span data-stu-id="93d5a-193">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="93d5a-194">等候要傳回的委派。</span><span class="sxs-lookup"><span data-stu-id="93d5a-194">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="93d5a-195">取得在委派傳回它的後面的值會執行。</span><span class="sxs-lookup"><span data-stu-id="93d5a-195">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="93d5a-196"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 為非同步。因此，控制項會立即傳回呼叫的物件後呼叫。</span><span class="sxs-lookup"><span data-stu-id="93d5a-196"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="93d5a-197">在[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]，建立的執行緒<xref:System.Windows.Threading.DispatcherObject>可以存取該物件。</span><span class="sxs-lookup"><span data-stu-id="93d5a-197">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="93d5a-198">例如，會開始從主要 UI 執行緒背景執行緒無法更新的內容<xref:System.Windows.Controls.Button>UI 執行緒上所建立。</span><span class="sxs-lookup"><span data-stu-id="93d5a-198">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="93d5a-199">為了讓背景執行緒存取的內容屬性將<xref:System.Windows.Controls.Button>，背景執行緒必須委派工作給<xref:System.Windows.Threading.Dispatcher>與 UI 執行緒相關聯。</span><span class="sxs-lookup"><span data-stu-id="93d5a-199">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="93d5a-200">這會透過使用<xref:System.Windows.Threading.Dispatcher.Invoke%2A>或<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>。</span><span class="sxs-lookup"><span data-stu-id="93d5a-200">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="93d5a-201"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是同步方法，和<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>為非同步。</span><span class="sxs-lookup"><span data-stu-id="93d5a-201"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="93d5a-202">作業會加入到事件佇列<xref:System.Windows.Threading.Dispatcher>位於指定<xref:System.Windows.Threading.DispatcherPriority>。</span><span class="sxs-lookup"><span data-stu-id="93d5a-202">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="93d5a-203">如果<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>上呼叫<xref:System.Windows.Threading.Dispatcher>，已關閉，傳回的 status 屬性<xref:System.Windows.Threading.DispatcherOperation>設<xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>。</span><span class="sxs-lookup"><span data-stu-id="93d5a-203">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (priority As DispatcherPriority, method As Delegate, arg As Object) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method, System::Object ^ arg);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="93d5a-204">相對於 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件佇列中其他暫止的作業，會先叫用指定的方法。</span><span class="sxs-lookup"><span data-stu-id="93d5a-204">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="method"><span data-ttu-id="93d5a-205">採用一個引數的方法委派，此委派會推入至 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件佇列。</span><span class="sxs-lookup"><span data-stu-id="93d5a-205">A delegate to a method that takes one argument, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="arg"><span data-ttu-id="93d5a-206">做為引數傳遞至指定方法的物件。</span><span class="sxs-lookup"><span data-stu-id="93d5a-206">The object to pass as an argument to the specified method.</span></span></param>
        <summary><span data-ttu-id="93d5a-207">在 <see cref="T:System.Windows.Threading.Dispatcher" /> 關聯的執行緒上使用指定優先權和指定引數以非同步方式執行指定的委派。</span><span class="sxs-lookup"><span data-stu-id="93d5a-207">Executes the specified delegate asynchronously at the specified priority and with the specified argument on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="93d5a-208">物件，此物件是在呼叫 <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> 之後立即傳回的，可用來與在事件佇列中暫止執行的委派進行互動。</span><span class="sxs-lookup"><span data-stu-id="93d5a-208">An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93d5a-209">`Arg` 可以是`null`如果不需要任何引數。</span><span class="sxs-lookup"><span data-stu-id="93d5a-209">`Arg` can be `null` if no arguments are needed.</span></span>  
  
 <span data-ttu-id="93d5a-210"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 傳回<xref:System.Windows.Threading.DispatcherOperation>物件，可以用互動與委派，當委派被在事件佇列。</span><span class="sxs-lookup"><span data-stu-id="93d5a-210"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> returns a <xref:System.Windows.Threading.DispatcherOperation> object that can be used to interact with the delegate when the delegate is in the event queue.</span></span>  
  
 <span data-ttu-id="93d5a-211"><xref:System.Windows.Threading.DispatcherOperation>所傳回物件<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>可以用數種方式，與指定的委派，例如互動：</span><span class="sxs-lookup"><span data-stu-id="93d5a-211">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="93d5a-212">變更<xref:System.Windows.Threading.DispatcherPriority>委派的暫止，所以執行事件佇列中。</span><span class="sxs-lookup"><span data-stu-id="93d5a-212">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="93d5a-213">從事件佇列中移除的委派。</span><span class="sxs-lookup"><span data-stu-id="93d5a-213">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="93d5a-214">等候要傳回的委派。</span><span class="sxs-lookup"><span data-stu-id="93d5a-214">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="93d5a-215">取得在委派傳回它的後面的值會執行。</span><span class="sxs-lookup"><span data-stu-id="93d5a-215">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="93d5a-216"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 為非同步。因此，控制項會立即傳回呼叫的物件後呼叫。</span><span class="sxs-lookup"><span data-stu-id="93d5a-216"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="93d5a-217">在[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]，建立的執行緒<xref:System.Windows.Threading.DispatcherObject>可以存取該物件。</span><span class="sxs-lookup"><span data-stu-id="93d5a-217">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="93d5a-218">例如，會開始從主要 UI 執行緒背景執行緒無法更新的內容<xref:System.Windows.Controls.Button>UI 執行緒上所建立。</span><span class="sxs-lookup"><span data-stu-id="93d5a-218">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="93d5a-219">為了讓背景執行緒存取的內容屬性將<xref:System.Windows.Controls.Button>，背景執行緒必須委派工作給<xref:System.Windows.Threading.Dispatcher>與 UI 執行緒相關聯。</span><span class="sxs-lookup"><span data-stu-id="93d5a-219">In order for the background thread to access the content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="93d5a-220">這會透過使用<xref:System.Windows.Threading.Dispatcher.Invoke%2A>或<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>。</span><span class="sxs-lookup"><span data-stu-id="93d5a-220">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="93d5a-221"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是同步方法，和<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>為非同步。</span><span class="sxs-lookup"><span data-stu-id="93d5a-221"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="93d5a-222">作業會加入到事件佇列<xref:System.Windows.Threading.Dispatcher>位於指定<xref:System.Windows.Threading.DispatcherPriority>。</span><span class="sxs-lookup"><span data-stu-id="93d5a-222">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="93d5a-223">若為多個<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>呼叫會在相同<xref:System.Windows.Threading.DispatcherPriority>，將會執行被呼叫的順序。</span><span class="sxs-lookup"><span data-stu-id="93d5a-223">If multiple <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> calls are made at the same <xref:System.Windows.Threading.DispatcherPriority>, they will be executed in the order the calls were made.</span></span>  
  
 <span data-ttu-id="93d5a-224">如果<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>上呼叫<xref:System.Windows.Threading.Dispatcher>，已關閉，傳回的 status 屬性<xref:System.Windows.Threading.DispatcherOperation>設<xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>。</span><span class="sxs-lookup"><span data-stu-id="93d5a-224">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="93d5a-225">下列範例示範如何將作業到<xref:System.Windows.Threading.Dispatcher>。</span><span class="sxs-lookup"><span data-stu-id="93d5a-225">The following example shows how to place an operation onto a <xref:System.Windows.Threading.Dispatcher>.</span></span>  
  
 <span data-ttu-id="93d5a-226">首先，建立委派可接受一個引數，在此案例中為字串。</span><span class="sxs-lookup"><span data-stu-id="93d5a-226">First, a delegate is created that accepts one argument, in this case a string.</span></span>  
  
 [!code-csharp[ThreadingWeatherForecast#ThreadingWeatherDelegates](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingWeatherForecast/CSharp/Window1.xaml.cs#threadingweatherdelegates)]
 [!code-vb[ThreadingWeatherForecast#ThreadingWeatherDelegates](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingWeatherForecast/visualbasic/window1.xaml.vb#threadingweatherdelegates)]  
  
 <span data-ttu-id="93d5a-227">下一步<xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%2CSystem.Object%29>呼叫。</span><span class="sxs-lookup"><span data-stu-id="93d5a-227">Next, <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%2CSystem.Object%29> is called.</span></span>  <span data-ttu-id="93d5a-228">因為每個<xref:System.Windows.Threading.DispatcherObject>具有屬性，傳回<xref:System.Windows.Threading.Dispatcher>相關聯，想要的<xref:System.Windows.Threading.Dispatcher>取得透過查詢<xref:System.Windows.Threading.DispatcherObject>，在此情況下<xref:System.Windows.Controls.Grid>名為`tomorrowsWeather`。</span><span class="sxs-lookup"><span data-stu-id="93d5a-228">Because every <xref:System.Windows.Threading.DispatcherObject> has a property that returns the <xref:System.Windows.Threading.Dispatcher> it is associated with, the desired <xref:System.Windows.Threading.Dispatcher> is obtained by querying the <xref:System.Windows.Threading.DispatcherObject>, in this case a <xref:System.Windows.Controls.Grid> named `tomorrowsWeather`.</span></span> <span data-ttu-id="93d5a-229">呼叫<xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%2CSystem.Object%29>接受三個參數： 優先權，用來設定為<xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>; 回呼，會透過委派的執行個體中傳遞`OneArgDelegate`; 和名為字串`weather`，即為回呼的引數。</span><span class="sxs-lookup"><span data-stu-id="93d5a-229">The call to <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%2CSystem.Object%29> takes three parameters: the priority, which is set to <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>; the callback, which is passed in through an instance of the delegate `OneArgDelegate`; and a string named `weather`, which is the argument for the callback.</span></span>  
  
 [!code-csharp[threadingweatherforecast#ThreadingWeatherDispatcherOneArge](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingWeatherForecast/CSharp/Window1.xaml.cs#threadingweatherdispatcheronearge)]
 [!code-vb[threadingweatherforecast#ThreadingWeatherDispatcherOneArge](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingWeatherForecast/visualbasic/window1.xaml.vb#threadingweatherdispatcheronearge)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="93d5a-230"><paramref name="method" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="93d5a-230"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <span data-ttu-id="93d5a-231"><paramref name="priority" /> 不是有效的 <see cref="T:System.Windows.Threading.DispatcherPriority" />。</span><span class="sxs-lookup"><span data-stu-id="93d5a-231"><paramref name="priority" /> is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method, object arg, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (priority As DispatcherPriority, method As Delegate, arg As Object, ParamArray args As Object()) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method, System::Object ^ arg, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="93d5a-232">相對於 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件佇列中其他暫止的作業，會先叫用指定的方法。</span><span class="sxs-lookup"><span data-stu-id="93d5a-232">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="method"><span data-ttu-id="93d5a-233">採用多個引數的方法委派，此委派會推入至 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件佇列。</span><span class="sxs-lookup"><span data-stu-id="93d5a-233">A delegate to a method that takes multiple arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="arg"><span data-ttu-id="93d5a-234">做為引數傳遞至指定方法的物件。</span><span class="sxs-lookup"><span data-stu-id="93d5a-234">The object to pass as an argument to the specified method.</span></span></param>
        <param name="args"><span data-ttu-id="93d5a-235">做為引數傳遞至指定方法的物件陣列。</span><span class="sxs-lookup"><span data-stu-id="93d5a-235">An array of objects to pass as arguments to the specified method.</span></span></param>
        <summary><span data-ttu-id="93d5a-236">在 <see cref="T:System.Windows.Threading.Dispatcher" /> 關聯的執行緒上使用指定優先權和指定引數陣列以非同步方式執行指定的委派。</span><span class="sxs-lookup"><span data-stu-id="93d5a-236">Executes the specified delegate asynchronously at the specified priority and with the specified array of arguments on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="93d5a-237">物件，此物件是在呼叫 <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> 之後立即傳回的，可用來與在 <see cref="T:System.Windows.Threading.Dispatcher" /> 佇列中暫止執行的委派進行互動。</span><span class="sxs-lookup"><span data-stu-id="93d5a-237">An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the <see cref="T:System.Windows.Threading.Dispatcher" /> queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93d5a-238">`arg`參數可以是`null`如果不需要任何引數。</span><span class="sxs-lookup"><span data-stu-id="93d5a-238">The `arg` parameter can be `null` if no arguments are needed.</span></span>  
  
 <span data-ttu-id="93d5a-239"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 傳回<xref:System.Windows.Threading.DispatcherOperation>物件，可以用互動與委派，當委派被在事件佇列。</span><span class="sxs-lookup"><span data-stu-id="93d5a-239"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> returns a <xref:System.Windows.Threading.DispatcherOperation> object that can be used to interact with the delegate when the delegate is in the event queue.</span></span>  
  
 <span data-ttu-id="93d5a-240"><xref:System.Windows.Threading.DispatcherOperation>所傳回物件<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>可以用數種方式，與指定的委派，例如互動：</span><span class="sxs-lookup"><span data-stu-id="93d5a-240">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="93d5a-241">變更<xref:System.Windows.Threading.DispatcherPriority>委派的暫止，所以執行事件佇列中。</span><span class="sxs-lookup"><span data-stu-id="93d5a-241">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="93d5a-242">從事件佇列中移除的委派。</span><span class="sxs-lookup"><span data-stu-id="93d5a-242">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="93d5a-243">等候要傳回的委派。</span><span class="sxs-lookup"><span data-stu-id="93d5a-243">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="93d5a-244">取得在委派傳回它的後面的值會執行。</span><span class="sxs-lookup"><span data-stu-id="93d5a-244">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="93d5a-245"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 為非同步。因此，控制項會立即傳回呼叫的物件後呼叫。</span><span class="sxs-lookup"><span data-stu-id="93d5a-245"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="93d5a-246">在[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]，建立的執行緒<xref:System.Windows.Threading.DispatcherObject>可以存取該物件。</span><span class="sxs-lookup"><span data-stu-id="93d5a-246">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="93d5a-247">例如，會開始從主要 UI 執行緒背景執行緒無法更新的內容<xref:System.Windows.Controls.Button>UI 執行緒上所建立。</span><span class="sxs-lookup"><span data-stu-id="93d5a-247">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="93d5a-248">為了讓背景執行緒存取的內容屬性將<xref:System.Windows.Controls.Button>，背景執行緒必須委派工作給<xref:System.Windows.Threading.Dispatcher>與 UI 執行緒相關聯。</span><span class="sxs-lookup"><span data-stu-id="93d5a-248">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="93d5a-249">這會透過使用<xref:System.Windows.Threading.Dispatcher.Invoke%2A>或<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>。</span><span class="sxs-lookup"><span data-stu-id="93d5a-249">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="93d5a-250"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是同步方法，和<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>為非同步。</span><span class="sxs-lookup"><span data-stu-id="93d5a-250"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="93d5a-251">作業會加入到事件佇列<xref:System.Windows.Threading.Dispatcher>位於指定<xref:System.Windows.Threading.DispatcherPriority>。</span><span class="sxs-lookup"><span data-stu-id="93d5a-251">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="93d5a-252">若為多個<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>呼叫會在相同<xref:System.Windows.Threading.DispatcherPriority>，將會執行被呼叫的順序。</span><span class="sxs-lookup"><span data-stu-id="93d5a-252">If multiple <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> calls are made at the same <xref:System.Windows.Threading.DispatcherPriority>, they will be executed in the order the calls were made.</span></span>  
  
 <span data-ttu-id="93d5a-253">如果<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>上呼叫<xref:System.Windows.Threading.Dispatcher>，已關閉，傳回的 status 屬性<xref:System.Windows.Threading.DispatcherOperation>設<xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>。</span><span class="sxs-lookup"><span data-stu-id="93d5a-253">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="93d5a-254"><paramref name="method" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="93d5a-254"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <span data-ttu-id="93d5a-255"><see cref="T:System.Windows.Threading.DispatcherPriority" /> 不是有效的優先權。</span><span class="sxs-lookup"><span data-stu-id="93d5a-255"><see cref="T:System.Windows.Threading.DispatcherPriority" /> is not a valid priority.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BeginInvokeShutdown">
      <MemberSignature Language="C#" Value="public void BeginInvokeShutdown (System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginInvokeShutdown(valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvokeShutdown(System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginInvokeShutdown (priority As DispatcherPriority)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginInvokeShutdown(System::Windows::Threading::DispatcherPriority priority);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="93d5a-256">用來開始關閉發送器的優先權。</span><span class="sxs-lookup"><span data-stu-id="93d5a-256">The priority at which to begin shutting down the dispatcher.</span></span></param>
        <summary><span data-ttu-id="93d5a-257">以非同步方式初始化 <see cref="T:System.Windows.Threading.Dispatcher" /> 的關閉程序。</span><span class="sxs-lookup"><span data-stu-id="93d5a-257">Initiates shutdown of the <see cref="T:System.Windows.Threading.Dispatcher" /> asynchronously.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93d5a-258"><xref:System.Windows.Threading.Dispatcher.BeginInvokeShutdown%2A> 要求不受限制的 UI 權限。</span><span class="sxs-lookup"><span data-stu-id="93d5a-258"><xref:System.Windows.Threading.Dispatcher.BeginInvokeShutdown%2A> demands unrestricted UI Permissions.</span></span>  
  
 <span data-ttu-id="93d5a-259">當<xref:System.Windows.Threading.Dispatcher>開始關閉，<xref:System.Windows.Threading.Dispatcher.ShutdownStarted>就會引發事件和<xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A>設`true`。</span><span class="sxs-lookup"><span data-stu-id="93d5a-259">When the <xref:System.Windows.Threading.Dispatcher> starts to shut down, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="93d5a-260"><xref:System.Windows.Threading.Dispatcher>便不會關閉完全直到事件佇列會回溯。</span><span class="sxs-lookup"><span data-stu-id="93d5a-260">The <xref:System.Windows.Threading.Dispatcher> does not shut down completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="93d5a-261">當發送器完成關閉，<xref:System.Windows.Threading.Dispatcher.ShutdownFinished>就會引發事件和<xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A>屬性設定為`true`。</span><span class="sxs-lookup"><span data-stu-id="93d5a-261">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="93d5a-262">關機程序開始時，所有暫止的工作佇列中的項目都被中止。</span><span class="sxs-lookup"><span data-stu-id="93d5a-262">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="93d5a-263">關閉發送器。</span><span class="sxs-lookup"><span data-stu-id="93d5a-263">for shutting down the dispatcher.</span></span>  <span data-ttu-id="93d5a-264">相關聯的列舉型別：  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span><span class="sxs-lookup"><span data-stu-id="93d5a-264">Associated enumerations:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="CheckAccess">
      <MemberSignature Language="C#" Value="public bool CheckAccess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CheckAccess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.CheckAccess" />
      <MemberSignature Language="VB.NET" Value="Public Function CheckAccess () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CheckAccess();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="93d5a-265">判斷呼叫的執行緒是否為與這個 <see cref="T:System.Windows.Threading.Dispatcher" /> 關聯的執行緒。</span><span class="sxs-lookup"><span data-stu-id="93d5a-265">Determines whether the calling thread is the thread associated with this <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></summary>
        <returns>
          <span data-ttu-id="93d5a-266">如果呼叫的執行緒為與這個 <see cref="T:System.Windows.Threading.Dispatcher" /> 關聯的執行緒則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="93d5a-266"><see langword="true" /> if the calling thread is the thread associated with this <see cref="T:System.Windows.Threading.Dispatcher" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93d5a-267">只有<xref:System.Windows.Threading.Dispatcher>，<xref:System.Windows.Threading.DispatcherObject>建立在可以存取的物件。</span><span class="sxs-lookup"><span data-stu-id="93d5a-267">Only the <xref:System.Windows.Threading.Dispatcher> that a <xref:System.Windows.Threading.DispatcherObject> is created on may access the object.</span></span>  <span data-ttu-id="93d5a-268">使用<xref:System.Windows.Threading.Dispatcher.Invoke%2A>或<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>來從不同的執行緒存取的物件。</span><span class="sxs-lookup"><span data-stu-id="93d5a-268">Use <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> to access the object from a different thread.</span></span>  
  
 <span data-ttu-id="93d5a-269"><xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> 可以從任何執行緒呼叫。</span><span class="sxs-lookup"><span data-stu-id="93d5a-269"><xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> can be called from any thread.</span></span>  
  
 <span data-ttu-id="93d5a-270">之間的差異<xref:System.Windows.Threading.Dispatcher.CheckAccess%2A>和<xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A>是<xref:System.Windows.Threading.Dispatcher.CheckAccess%2A>傳回布林值，指出呼叫的執行緒是否有存取權<xref:System.Windows.Threading.Dispatcher>和<xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A>擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="93d5a-270">The difference between <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> and <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> is <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> returns a Boolean indicating whether the calling thread has access to the <xref:System.Windows.Threading.Dispatcher> and <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> throws an exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="93d5a-271">下列範例會使用<xref:System.Windows.Threading.Dispatcher.CheckAccess%2A>判斷執行緒是否有存取權<xref:System.Windows.Controls.Button>。</span><span class="sxs-lookup"><span data-stu-id="93d5a-271">The following example uses <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> to determine whether a thread has access to a <xref:System.Windows.Controls.Button>.</span></span>  <span data-ttu-id="93d5a-272"><xref:System.Windows.Threading.Dispatcher.CheckAccess%2A>方法<xref:System.Windows.Threading.Dispatcher>聯<xref:System.Windows.Controls.Button>呼叫以驗證的存取權的執行緒。</span><span class="sxs-lookup"><span data-stu-id="93d5a-272">The <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> method on the <xref:System.Windows.Threading.Dispatcher> associated with the <xref:System.Windows.Controls.Button> is called to verify access to the thread.</span></span>  <span data-ttu-id="93d5a-273">如果呼叫執行緒能夠存取<xref:System.Windows.Threading.Dispatcher>、<xref:System.Windows.Controls.Button>所存取的成員會更新<xref:System.Windows.Controls.Button>; 否則，請接受委派<xref:System.Windows.Controls.Button>做為引數，置入<xref:System.Windows.Threading.Dispatcher>。</span><span class="sxs-lookup"><span data-stu-id="93d5a-273">If the calling thread has access to the <xref:System.Windows.Threading.Dispatcher>, the <xref:System.Windows.Controls.Button> is updated by accessing the members of the <xref:System.Windows.Controls.Button>; otherwise, a delegate, which accepts a <xref:System.Windows.Controls.Button> as an argument, is placed onto the <xref:System.Windows.Threading.Dispatcher>.</span></span>  <span data-ttu-id="93d5a-274"><xref:System.Windows.Threading.Dispatcher>會將委派的更新工作<xref:System.Windows.Controls.Button>。</span><span class="sxs-lookup"><span data-stu-id="93d5a-274">The <xref:System.Windows.Threading.Dispatcher> will delegate the work of updating the <xref:System.Windows.Controls.Button>.</span></span>  
  
 [!code-csharp[DispatcherAccessSample#DispatcherAccessCheckAccess](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherAccessSample/CSharp/Window1.xaml.cs#dispatcheraccesscheckaccess)]
 [!code-vb[DispatcherAccessSample#DispatcherAccessCheckAccess](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherAccessSample/visualbasic/window1.xaml.vb#dispatcheraccesscheckaccess)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Threading.Dispatcher.VerifyAccess" />
      </Docs>
    </Member>
    <Member MemberName="CurrentDispatcher">
      <MemberSignature Language="C#" Value="public static System.Windows.Threading.Dispatcher CurrentDispatcher { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Threading.Dispatcher CurrentDispatcher" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.CurrentDispatcher" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentDispatcher As Dispatcher" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Threading::Dispatcher ^ CurrentDispatcher { System::Windows::Threading::Dispatcher ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.Dispatcher</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="93d5a-275">取得目前執行之執行緒的 <see cref="T:System.Windows.Threading.Dispatcher" /> 並建立新的 <see cref="T:System.Windows.Threading.Dispatcher" /> (如果尚未與執行緒產生關聯)。</span><span class="sxs-lookup"><span data-stu-id="93d5a-275">Gets the <see cref="T:System.Windows.Threading.Dispatcher" /> for the thread currently executing and creates a new <see cref="T:System.Windows.Threading.Dispatcher" /> if one is not already associated with the thread.</span></span></summary>
        <value><span data-ttu-id="93d5a-276">與目前執行緒關聯的發送器。</span><span class="sxs-lookup"><span data-stu-id="93d5a-276">The dispatcher associated with the current thread.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93d5a-277">如果<xref:System.Windows.Threading.Dispatcher>未與目前的執行緒相關聯的新<xref:System.Windows.Threading.Dispatcher>將會建立。</span><span class="sxs-lookup"><span data-stu-id="93d5a-277">If a <xref:System.Windows.Threading.Dispatcher> is not associated with the current thread, a new <xref:System.Windows.Threading.Dispatcher> will be created.</span></span>  <span data-ttu-id="93d5a-278">這不是使用 <xref:System.Windows.Threading.Dispatcher.FromThread%2A> 方法的情況。</span><span class="sxs-lookup"><span data-stu-id="93d5a-278">This is not the case with the <xref:System.Windows.Threading.Dispatcher.FromThread%2A> method.</span></span>  <span data-ttu-id="93d5a-279"><xref:System.Windows.Threading.Dispatcher.FromThread%2A> 會傳回`null`如果不指定的執行緒相關聯的發送器。</span><span class="sxs-lookup"><span data-stu-id="93d5a-279"><xref:System.Windows.Threading.Dispatcher.FromThread%2A> will return `null` if there is not a dispatcher associated with the specified thread.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisableProcessing">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherProcessingDisabled DisableProcessing ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Threading.DispatcherProcessingDisabled DisableProcessing() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.DisableProcessing" />
      <MemberSignature Language="VB.NET" Value="Public Function DisableProcessing () As DispatcherProcessingDisabled" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherProcessingDisabled DisableProcessing();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherProcessingDisabled</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="93d5a-280">停用 <see cref="T:System.Windows.Threading.Dispatcher" /> 佇列的處理。</span><span class="sxs-lookup"><span data-stu-id="93d5a-280">Disables processing of the <see cref="T:System.Windows.Threading.Dispatcher" /> queue.</span></span></summary>
        <returns><span data-ttu-id="93d5a-281">用來重新啟用發送器處理的結構。</span><span class="sxs-lookup"><span data-stu-id="93d5a-281">A structure used to re-enable dispatcher processing.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93d5a-282">停用發送器處理是一種進階的方法，目的是要避免不相關的重新進入的機會。</span><span class="sxs-lookup"><span data-stu-id="93d5a-282">Disabling dispatcher processing is an advanced method that is intended to eliminate the chance of unrelated reentrancy.</span></span>  
  
 <span data-ttu-id="93d5a-283">停用處理的影響是，如下所示：</span><span class="sxs-lookup"><span data-stu-id="93d5a-283">The effects of disabling processing are as follows:</span></span>  
  
-   <span data-ttu-id="93d5a-284">CLR 鎖定不會在內部提取訊息。</span><span class="sxs-lookup"><span data-stu-id="93d5a-284">CLR locks will not pump messages internally.</span></span>  
  
-   <span data-ttu-id="93d5a-285"><xref:System.Windows.Threading.DispatcherFrame> 不允許物件推送。</span><span class="sxs-lookup"><span data-stu-id="93d5a-285"><xref:System.Windows.Threading.DispatcherFrame> objects are not allowed to be pushed.</span></span>  
  
-   <span data-ttu-id="93d5a-286">不允許訊息處理。</span><span class="sxs-lookup"><span data-stu-id="93d5a-286">Message processing is not permitted.</span></span>  
  
 <span data-ttu-id="93d5a-287"><xref:System.Windows.Threading.DispatcherProcessingDisabled>結構<xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A>呼叫時傳回可用來重新啟用發送器處理。</span><span class="sxs-lookup"><span data-stu-id="93d5a-287">The <xref:System.Windows.Threading.DispatcherProcessingDisabled> structure that <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> returns when it is called can be used to re-enable dispatcher processing.</span></span>  <span data-ttu-id="93d5a-288">呼叫<xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A>上<xref:System.Windows.Threading.DispatcherProcessingDisabled>結構重新啟用處理。</span><span class="sxs-lookup"><span data-stu-id="93d5a-288">Calling <xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A> on the <xref:System.Windows.Threading.DispatcherProcessingDisabled> structure re-enables processing.</span></span>  
  
 <span data-ttu-id="93d5a-289"><xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> 只有在執行緒上呼叫<xref:System.Windows.Threading.Dispatcher>相關聯。</span><span class="sxs-lookup"><span data-stu-id="93d5a-289"><xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> can only be called on the thread the <xref:System.Windows.Threading.Dispatcher> is associated with.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="93d5a-290">下列範例顯示如何停用發送器處理和重新啟用發送器處理。</span><span class="sxs-lookup"><span data-stu-id="93d5a-290">The following example shows how to disable dispatcher processing and re-enable dispatcher processing.</span></span>  <span data-ttu-id="93d5a-291"><xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> 在中，稱為**使用**陳述式。</span><span class="sxs-lookup"><span data-stu-id="93d5a-291"><xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> is called in a **using** statement.</span></span>  <span data-ttu-id="93d5a-292"><xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> 傳回<xref:System.Windows.Threading.DispatcherProcessingDisabled>要處置時做為物件的結構**使用**封鎖完成。</span><span class="sxs-lookup"><span data-stu-id="93d5a-292"><xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> returns a <xref:System.Windows.Threading.DispatcherProcessingDisabled> structure that is used as the object to be disposed when the **using** block finishes.</span></span>  <span data-ttu-id="93d5a-293">當<xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A>上呼叫<xref:System.Windows.Threading.DispatcherProcessingDisabled>結構發送器處理已重新啟用。</span><span class="sxs-lookup"><span data-stu-id="93d5a-293">When <xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A> is called on the <xref:System.Windows.Threading.DispatcherProcessingDisabled> structure, dispatcher processing is re-enabled.</span></span>  
  
 [!code-csharp[DispatcherSnippets#DispatcherDisableProcessing](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherSnippets/CSharp/Window1.xaml.cs#dispatcherdisableprocessing)]
 [!code-vb[DispatcherSnippets#DispatcherDisableProcessing](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherSnippets/visualbasic/window1.xaml.vb#dispatcherdisableprocessing)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExitAllFrames">
      <MemberSignature Language="C#" Value="public static void ExitAllFrames ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ExitAllFrames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.ExitAllFrames" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ExitAllFrames ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ExitAllFrames();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="93d5a-294">會要求結束所有框架，包括巢狀框架。</span><span class="sxs-lookup"><span data-stu-id="93d5a-294">Requests that all frames exit, including nested frames.</span></span></summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="93d5a-295">呼叫這個方法。</span><span class="sxs-lookup"><span data-stu-id="93d5a-295">for calling this method.</span></span> <span data-ttu-id="93d5a-296">相關聯的列舉型別：  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span><span class="sxs-lookup"><span data-stu-id="93d5a-296">Associated enumerations:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span></span></permission>
        <altmember cref="M:System.Windows.Threading.Dispatcher.PushFrame(System.Windows.Threading.DispatcherFrame)" />
        <altmember cref="T:System.Windows.Threading.DispatcherFrame" />
      </Docs>
    </Member>
    <Member MemberName="FromThread">
      <MemberSignature Language="C#" Value="public static System.Windows.Threading.Dispatcher FromThread (System.Threading.Thread thread);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Threading.Dispatcher FromThread(class System.Threading.Thread thread) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.FromThread(System.Threading.Thread)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Threading::Dispatcher ^ FromThread(System::Threading::Thread ^ thread);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.Dispatcher</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="thread" Type="System.Threading.Thread" />
      </Parameters>
      <Docs>
        <param name="thread"><span data-ttu-id="93d5a-297">要從中取得 <see cref="T:System.Windows.Threading.Dispatcher" /> 的執行緒。</span><span class="sxs-lookup"><span data-stu-id="93d5a-297">The thread to obtain the <see cref="T:System.Windows.Threading.Dispatcher" /> from.</span></span></param>
        <summary><span data-ttu-id="93d5a-298">取得指定執行緒的 <see cref="T:System.Windows.Threading.Dispatcher" />。</span><span class="sxs-lookup"><span data-stu-id="93d5a-298">Gets the <see cref="T:System.Windows.Threading.Dispatcher" /> for the specified thread.</span></span></summary>
        <returns><span data-ttu-id="93d5a-299"><paramref name="thread" /> 的發送器。</span><span class="sxs-lookup"><span data-stu-id="93d5a-299">The dispatcher for <paramref name="thread" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93d5a-300">如果無法使用指定的執行緒，發送器`null`會傳回。</span><span class="sxs-lookup"><span data-stu-id="93d5a-300">If a dispatcher is not available for the specified thread, `null` will be returned.</span></span>  
  
 <span data-ttu-id="93d5a-301"><xref:System.Windows.Threading.Dispatcher.FromThread%2A> 不會建立<xref:System.Windows.Threading.Dispatcher>並沒有在執行緒上<xref:System.Windows.Threading.Dispatcher>。</span><span class="sxs-lookup"><span data-stu-id="93d5a-301"><xref:System.Windows.Threading.Dispatcher.FromThread%2A> does not create a <xref:System.Windows.Threading.Dispatcher> on a thread that does not have a <xref:System.Windows.Threading.Dispatcher>.</span></span>   <span data-ttu-id="93d5a-302">新<xref:System.Windows.Threading.Dispatcher>還沒有執行緒上所建立<xref:System.Windows.Threading.Dispatcher>時嘗試取得<xref:System.Windows.Threading.Dispatcher>使用<xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="93d5a-302">A new <xref:System.Windows.Threading.Dispatcher> is created on a thread that does not already have a <xref:System.Windows.Threading.Dispatcher> when attempting to get the <xref:System.Windows.Threading.Dispatcher> by using the <xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasShutdownFinished">
      <MemberSignature Language="C#" Value="public bool HasShutdownFinished { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasShutdownFinished" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.HasShutdownFinished" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasShutdownFinished As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasShutdownFinished { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="93d5a-303">判斷 <see cref="T:System.Windows.Threading.Dispatcher" /> 是否已完成關閉程序。</span><span class="sxs-lookup"><span data-stu-id="93d5a-303">Determines whether the <see cref="T:System.Windows.Threading.Dispatcher" /> has finished shutting down.</span></span></summary>
        <value>
          <span data-ttu-id="93d5a-304">如果發送器已完成關閉程序則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="93d5a-304"><see langword="true" /> if the dispatcher has finished shutting down; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93d5a-305">當<xref:System.Windows.Threading.Dispatcher>開始關閉，<xref:System.Windows.Threading.Dispatcher.ShutdownStarted>就會引發事件和<xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A>設`true`。</span><span class="sxs-lookup"><span data-stu-id="93d5a-305">When the <xref:System.Windows.Threading.Dispatcher> starts to shut down, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="93d5a-306"><xref:System.Windows.Threading.Dispatcher>不完全會關閉，直到事件佇列會回溯。</span><span class="sxs-lookup"><span data-stu-id="93d5a-306">The <xref:System.Windows.Threading.Dispatcher> does not shutdown completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="93d5a-307">當發送器完成關閉，<xref:System.Windows.Threading.Dispatcher.ShutdownFinished>就會引發事件和<xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A>屬性設定為`true`。</span><span class="sxs-lookup"><span data-stu-id="93d5a-307">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="93d5a-308">關機程序開始時，所有暫止的工作佇列中的項目都被中止。</span><span class="sxs-lookup"><span data-stu-id="93d5a-308">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasShutdownStarted">
      <MemberSignature Language="C#" Value="public bool HasShutdownStarted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasShutdownStarted" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.HasShutdownStarted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasShutdownStarted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasShutdownStarted { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="93d5a-309">判斷 <see cref="T:System.Windows.Threading.Dispatcher" /> 是否已關閉。</span><span class="sxs-lookup"><span data-stu-id="93d5a-309">Determines whether the <see cref="T:System.Windows.Threading.Dispatcher" /> is shutting down.</span></span></summary>
        <value>
          <span data-ttu-id="93d5a-310">如果 <see cref="T:System.Windows.Threading.Dispatcher" /> 已開始關閉程序則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="93d5a-310"><see langword="true" /> if the <see cref="T:System.Windows.Threading.Dispatcher" /> has started shutting down; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93d5a-311">當<xref:System.Windows.Threading.Dispatcher>開始關閉，<xref:System.Windows.Threading.Dispatcher.ShutdownStarted>就會引發事件和<xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A>設`true`。</span><span class="sxs-lookup"><span data-stu-id="93d5a-311">When the <xref:System.Windows.Threading.Dispatcher> starts to shut down, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="93d5a-312"><xref:System.Windows.Threading.Dispatcher>便不會關閉完全直到事件佇列會回溯。</span><span class="sxs-lookup"><span data-stu-id="93d5a-312">The <xref:System.Windows.Threading.Dispatcher> does not shut down completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="93d5a-313">當發送器完成關閉，<xref:System.Windows.Threading.Dispatcher.ShutdownFinished>就會引發事件和<xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A>屬性設定為`true`。</span><span class="sxs-lookup"><span data-stu-id="93d5a-313">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="93d5a-314">關機程序開始時，所有暫止的工作佇列中的項目都被中止。</span><span class="sxs-lookup"><span data-stu-id="93d5a-314">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Hooks">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherHooks Hooks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Threading.DispatcherHooks Hooks" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.Hooks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Hooks As DispatcherHooks" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Threading::DispatcherHooks ^ Hooks { System::Windows::Threading::DispatcherHooks ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherHooks</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="93d5a-315">取得提供 <see cref="T:System.Windows.Threading.Dispatcher" /> 額外事件資訊的攔截集合。</span><span class="sxs-lookup"><span data-stu-id="93d5a-315">Gets the collection of hooks that provide additional event information about the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></summary>
        <value><span data-ttu-id="93d5a-316">與這個 <see cref="T:System.Windows.Threading.Dispatcher" /> 關聯的攔截。</span><span class="sxs-lookup"><span data-stu-id="93d5a-316">The hooks associated with this <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93d5a-317"><xref:System.Windows.Threading.DispatcherHooks>類別提供有關的其他事件資訊<xref:System.Windows.Threading.Dispatcher>，例如當<xref:System.Windows.Threading.Dispatcher>非使用中或當作業完成。</span><span class="sxs-lookup"><span data-stu-id="93d5a-317">The <xref:System.Windows.Threading.DispatcherHooks> class provides additional event information about the <xref:System.Windows.Threading.Dispatcher>, such as when the <xref:System.Windows.Threading.Dispatcher> is inactive or when an operation has competed.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="93d5a-318">取得這個屬性。</span><span class="sxs-lookup"><span data-stu-id="93d5a-318">for getting this property.</span></span>  <span data-ttu-id="93d5a-319">相關聯的列舉型別：  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span><span class="sxs-lookup"><span data-stu-id="93d5a-319">Associated enumerations:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span></span></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="Invoke">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="93d5a-320">在 <see cref="T:System.Windows.Threading.Dispatcher" /> 關聯的執行緒上以同步方式執行指定的委派。</span><span class="sxs-lookup"><span data-stu-id="93d5a-320">Executes the specified delegate synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93d5a-321">在[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]，建立的執行緒<xref:System.Windows.Threading.DispatcherObject>可以存取該物件。</span><span class="sxs-lookup"><span data-stu-id="93d5a-321">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="93d5a-322">例如，會開始從主要 UI 執行緒背景執行緒無法更新的內容<xref:System.Windows.Controls.Button>UI 執行緒上所建立。</span><span class="sxs-lookup"><span data-stu-id="93d5a-322">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="93d5a-323">為了讓背景執行緒存取的內容屬性將<xref:System.Windows.Controls.Button>，背景執行緒必須委派工作給<xref:System.Windows.Threading.Dispatcher>與 UI 執行緒相關聯。</span><span class="sxs-lookup"><span data-stu-id="93d5a-323">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="93d5a-324">這會透過使用<xref:System.Windows.Threading.Dispatcher.Invoke%2A>或<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>。</span><span class="sxs-lookup"><span data-stu-id="93d5a-324">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="93d5a-325"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是同步方法，和<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>為非同步。</span><span class="sxs-lookup"><span data-stu-id="93d5a-325"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="93d5a-326">作業會加入到事件佇列<xref:System.Windows.Threading.Dispatcher>位於指定<xref:System.Windows.Threading.DispatcherPriority>。</span><span class="sxs-lookup"><span data-stu-id="93d5a-326">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="93d5a-327"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是同步作業。因此，控制項不會傳回至呼叫的物件直到回呼傳回之後。</span><span class="sxs-lookup"><span data-stu-id="93d5a-327"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="93d5a-328">下列範例會委派至<xref:System.Windows.Threading.Dispatcher>在<xref:System.Windows.Threading.DispatcherPriority.Normal>使用<xref:System.Windows.Threading.Dispatcher.Invoke%2A>。</span><span class="sxs-lookup"><span data-stu-id="93d5a-328">The following example places a delegate onto a <xref:System.Windows.Threading.Dispatcher> at <xref:System.Windows.Threading.DispatcherPriority.Normal> using <xref:System.Windows.Threading.Dispatcher.Invoke%2A>.</span></span>  
  
 [!code-csharp[invalidaterequerywithsystemtimer#SystemTimerDispatcherInvoke](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithSystemTimer/CSharp/Window1.xaml.cs#systemtimerdispatcherinvoke)]
 [!code-vb[invalidaterequerywithsystemtimer#SystemTimerDispatcherInvoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithSystemTimer/visualbasic/window1.xaml.vb#systemtimerdispatcherinvoke)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (Action callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invoke(class System.Action callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Action)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invoke (callback As Action)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke(Action ^ callback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="93d5a-329">要透過發送器叫用的委派。</span><span class="sxs-lookup"><span data-stu-id="93d5a-329">A delegate to invoke through the dispatcher.</span></span></param>
        <summary><span data-ttu-id="93d5a-330">在與 <see cref="T:System.Action" /> 相關聯的執行緒上，同步執行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</span><span class="sxs-lookup"><span data-stu-id="93d5a-330">Executes the specified <see cref="T:System.Action" /> synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (Action callback, System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invoke(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invoke (callback As Action, priority As DispatcherPriority)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke(Action ^ callback, System::Windows::Threading::DispatcherPriority priority);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="93d5a-331">要透過發送器叫用的委派。</span><span class="sxs-lookup"><span data-stu-id="93d5a-331">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="93d5a-332">優先權，會決定以何種順序叫用指定的回呼，相對於 <see cref="T:System.Windows.Threading.Dispatcher" /> 中其他擱置中的作業。</span><span class="sxs-lookup"><span data-stu-id="93d5a-332">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <summary><span data-ttu-id="93d5a-333">在與 <see cref="T:System.Action" /> 相關聯的執行緒上使用指定優先權同步執行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</span><span class="sxs-lookup"><span data-stu-id="93d5a-333">Executes the specified <see cref="T:System.Action" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(class System.Delegate method, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="93d5a-334">接受 <c>args</c> 中指定的參數之方法的委派，它會被推入至 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件佇列。</span><span class="sxs-lookup"><span data-stu-id="93d5a-334">A delegate to a method that takes parameters specified in <c>args</c>, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="args"><span data-ttu-id="93d5a-335">做為引數傳遞至指定方法的物件陣列。</span><span class="sxs-lookup"><span data-stu-id="93d5a-335">An array of objects to pass as arguments to the given method.</span></span> <span data-ttu-id="93d5a-336">可以是 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="93d5a-336">Can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="93d5a-337">在與 <see cref="T:System.Windows.Threading.Dispatcher" /> 相關聯的執行緒上，使用指定的引數同步地執行指定的委派。</span><span class="sxs-lookup"><span data-stu-id="93d5a-337">Executes the specified delegate with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="93d5a-338">來自所叫用的委派的傳回值，或者如果委派沒有任何傳回值，則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="93d5a-338">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93d5a-339">在[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]，建立的執行緒<xref:System.Windows.Threading.DispatcherObject>可以存取該物件。</span><span class="sxs-lookup"><span data-stu-id="93d5a-339">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="93d5a-340">例如，會開始從主要 UI 執行緒背景執行緒無法更新的內容<xref:System.Windows.Controls.Button>UI 執行緒上所建立。</span><span class="sxs-lookup"><span data-stu-id="93d5a-340">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="93d5a-341">為了讓背景執行緒存取的內容屬性將<xref:System.Windows.Controls.Button>，背景執行緒必須委派工作給<xref:System.Windows.Threading.Dispatcher>與 UI 執行緒相關聯。</span><span class="sxs-lookup"><span data-stu-id="93d5a-341">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="93d5a-342">這會透過使用<xref:System.Windows.Threading.Dispatcher.Invoke%2A>或<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>。</span><span class="sxs-lookup"><span data-stu-id="93d5a-342">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="93d5a-343"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是同步方法，和<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>為非同步。</span><span class="sxs-lookup"><span data-stu-id="93d5a-343"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="93d5a-344">作業會加入到事件佇列<xref:System.Windows.Threading.Dispatcher>位於指定<xref:System.Windows.Threading.DispatcherPriority>。</span><span class="sxs-lookup"><span data-stu-id="93d5a-344">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="93d5a-345"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是同步作業。因此，控制項不會傳回至呼叫的物件直到回呼傳回之後。</span><span class="sxs-lookup"><span data-stu-id="93d5a-345"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, Delegate method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, method As Delegate) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="93d5a-346">相對於 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件佇列中其他暫止的作業，會先叫用指定的方法。</span><span class="sxs-lookup"><span data-stu-id="93d5a-346">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="method"><span data-ttu-id="93d5a-347">未採用任何引數的方法委派，此委派會推入至 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件佇列。</span><span class="sxs-lookup"><span data-stu-id="93d5a-347">A delegate to a method that takes no arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <summary><span data-ttu-id="93d5a-348">在 <see cref="T:System.Windows.Threading.Dispatcher" /> 關聯的執行緒上使用指定優先權以同步方式執行指定的委派。</span><span class="sxs-lookup"><span data-stu-id="93d5a-348">Executes the specified delegate synchronously at the specified priority on the thread on which the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="93d5a-349">來自所叫用的委派的傳回值，或者如果委派沒有任何傳回值，則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="93d5a-349">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93d5a-350">在[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]，建立的執行緒<xref:System.Windows.Threading.DispatcherObject>可以存取該物件。</span><span class="sxs-lookup"><span data-stu-id="93d5a-350">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="93d5a-351">例如，會開始從主要 UI 執行緒背景執行緒無法更新的內容<xref:System.Windows.Controls.Button>UI 執行緒上所建立。</span><span class="sxs-lookup"><span data-stu-id="93d5a-351">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="93d5a-352">為了讓背景執行緒存取的內容屬性將<xref:System.Windows.Controls.Button>，背景執行緒必須委派工作給<xref:System.Windows.Threading.Dispatcher>與 UI 執行緒相關聯。</span><span class="sxs-lookup"><span data-stu-id="93d5a-352">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="93d5a-353">這會透過使用<xref:System.Windows.Threading.Dispatcher.Invoke%2A>或<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>。</span><span class="sxs-lookup"><span data-stu-id="93d5a-353">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="93d5a-354"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是同步方法，和<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>為非同步。</span><span class="sxs-lookup"><span data-stu-id="93d5a-354"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="93d5a-355">作業會加入到事件佇列<xref:System.Windows.Threading.Dispatcher>位於指定<xref:System.Windows.Threading.DispatcherPriority>。</span><span class="sxs-lookup"><span data-stu-id="93d5a-355">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="93d5a-356"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是同步作業。因此，控制項不會傳回至呼叫的物件直到回呼傳回之後。</span><span class="sxs-lookup"><span data-stu-id="93d5a-356"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="93d5a-357">下列範例會委派至<xref:System.Windows.Threading.Dispatcher>在<xref:System.Windows.Threading.DispatcherPriority.Normal>使用<xref:System.Windows.Threading.Dispatcher.Invoke%2A>。</span><span class="sxs-lookup"><span data-stu-id="93d5a-357">The following example places a delegate onto a <xref:System.Windows.Threading.Dispatcher> at <xref:System.Windows.Threading.DispatcherPriority.Normal> using <xref:System.Windows.Threading.Dispatcher.Invoke%2A>.</span></span>  
  
 [!code-csharp[invalidaterequerywithsystemtimer#SystemTimerDispatcherInvoke](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithSystemTimer/CSharp/Window1.xaml.cs#systemtimerdispatcherinvoke)]
 [!code-vb[invalidaterequerywithsystemtimer#SystemTimerDispatcherInvoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithSystemTimer/visualbasic/window1.xaml.vb#systemtimerdispatcherinvoke)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="93d5a-358"><paramref name="priority" /> 等於 <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />。</span><span class="sxs-lookup"><span data-stu-id="93d5a-358"><paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <span data-ttu-id="93d5a-359"><paramref name="priority" /> 不是有效的優先權。</span><span class="sxs-lookup"><span data-stu-id="93d5a-359"><paramref name="priority" /> is not a valid priority.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="93d5a-360"><paramref name="method" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="93d5a-360"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (Action callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invoke(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke(Action ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="93d5a-361">要透過發送器叫用的委派。</span><span class="sxs-lookup"><span data-stu-id="93d5a-361">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="93d5a-362">優先權，會決定以何種順序叫用指定的回呼，相對於 <see cref="T:System.Windows.Threading.Dispatcher" /> 中其他擱置中的作業。</span><span class="sxs-lookup"><span data-stu-id="93d5a-362">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="93d5a-363">表示是否要取消動作的物件。</span><span class="sxs-lookup"><span data-stu-id="93d5a-363">An object that indicates whether to cancel the action.</span></span></param>
        <summary><span data-ttu-id="93d5a-364">在與 <see cref="T:System.Action" /> 相關聯的執行緒上使用指定優先權同步執行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</span><span class="sxs-lookup"><span data-stu-id="93d5a-364">Executes the specified <see cref="T:System.Action" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, TimeSpan timeout, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(class System.Delegate method, valuetype System.TimeSpan timeout, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.TimeSpan,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, timeout As TimeSpan, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, TimeSpan timeout, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="93d5a-365">接受 <c>args</c> 中指定的參數之方法的委派，它會被推入至 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件佇列。</span><span class="sxs-lookup"><span data-stu-id="93d5a-365">A delegate to a method that takes parameters specified in <c>args</c>, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="timeout"><span data-ttu-id="93d5a-366">等待作業完成的最長時間。</span><span class="sxs-lookup"><span data-stu-id="93d5a-366">The maximum amount of time to wait for the operation to complete.</span></span></param>
        <param name="args"><span data-ttu-id="93d5a-367">做為引數傳遞至指定方法的物件陣列。</span><span class="sxs-lookup"><span data-stu-id="93d5a-367">An array of objects to pass as arguments to the given method.</span></span> <span data-ttu-id="93d5a-368">可以是 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="93d5a-368">Can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="93d5a-369">在與 <see cref="T:System.Windows.Threading.Dispatcher" /> 有關聯的執行緒上，在指定的時間範圍內依據指定優先順序，使用指定之引數同步地執行指定的委派。</span><span class="sxs-lookup"><span data-stu-id="93d5a-369">Executes the specified delegate within the designated time span at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="93d5a-370">來自所叫用的委派的傳回值，或者如果委派沒有任何傳回值，則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="93d5a-370">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93d5a-371">在[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]，建立的執行緒<xref:System.Windows.Threading.DispatcherObject>可以存取該物件。</span><span class="sxs-lookup"><span data-stu-id="93d5a-371">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="93d5a-372">例如，會開始從主要 UI 執行緒背景執行緒無法更新的內容<xref:System.Windows.Controls.Button>UI 執行緒上所建立。</span><span class="sxs-lookup"><span data-stu-id="93d5a-372">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="93d5a-373">為了讓背景執行緒存取的內容屬性將<xref:System.Windows.Controls.Button>，背景執行緒必須委派工作給<xref:System.Windows.Threading.Dispatcher>與 UI 執行緒相關聯。</span><span class="sxs-lookup"><span data-stu-id="93d5a-373">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="93d5a-374">這會透過使用<xref:System.Windows.Threading.Dispatcher.Invoke%2A>或<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>。</span><span class="sxs-lookup"><span data-stu-id="93d5a-374">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="93d5a-375"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是同步方法，和<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>為非同步。</span><span class="sxs-lookup"><span data-stu-id="93d5a-375"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="93d5a-376">作業會加入到事件佇列<xref:System.Windows.Threading.Dispatcher>位於指定<xref:System.Windows.Threading.DispatcherPriority>。</span><span class="sxs-lookup"><span data-stu-id="93d5a-376">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="93d5a-377"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是同步作業。因此，控制項不會傳回至呼叫的物件直到回呼傳回之後。</span><span class="sxs-lookup"><span data-stu-id="93d5a-377"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, System.Windows.Threading.DispatcherPriority priority, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(class System.Delegate method, valuetype System.Windows.Threading.DispatcherPriority priority, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, priority As DispatcherPriority, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, System::Windows::Threading::DispatcherPriority priority, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="93d5a-378">接受 <c>args</c> 中指定的參數之方法的委派，它會被推入至 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件佇列。</span><span class="sxs-lookup"><span data-stu-id="93d5a-378">A delegate to a method that takes parameters specified in <c>args</c>, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="priority"><span data-ttu-id="93d5a-379">相對於 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件佇列中其他暫止的作業，會先叫用指定的方法。</span><span class="sxs-lookup"><span data-stu-id="93d5a-379">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="args"><span data-ttu-id="93d5a-380">做為引數傳遞至指定方法的物件陣列。</span><span class="sxs-lookup"><span data-stu-id="93d5a-380">An array of objects to pass as arguments to the given method.</span></span> <span data-ttu-id="93d5a-381">可以是 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="93d5a-381">Can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="93d5a-382">在 <see cref="T:System.Windows.Threading.Dispatcher" /> 關聯的執行緒上使用指定優先權和指定引數以同步方式執行指定的委派。</span><span class="sxs-lookup"><span data-stu-id="93d5a-382">Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="93d5a-383">來自所叫用的委派的傳回值，或者如果委派沒有任何傳回值，則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="93d5a-383">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93d5a-384">在[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]，建立的執行緒<xref:System.Windows.Threading.DispatcherObject>可以存取該物件。</span><span class="sxs-lookup"><span data-stu-id="93d5a-384">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="93d5a-385">例如，會開始從主要 UI 執行緒背景執行緒無法更新的內容<xref:System.Windows.Controls.Button>UI 執行緒上所建立。</span><span class="sxs-lookup"><span data-stu-id="93d5a-385">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="93d5a-386">為了讓背景執行緒存取的內容屬性將<xref:System.Windows.Controls.Button>，背景執行緒必須委派工作給<xref:System.Windows.Threading.Dispatcher>與 UI 執行緒相關聯。</span><span class="sxs-lookup"><span data-stu-id="93d5a-386">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="93d5a-387">這會透過使用<xref:System.Windows.Threading.Dispatcher.Invoke%2A>或<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>。</span><span class="sxs-lookup"><span data-stu-id="93d5a-387">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="93d5a-388"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是同步方法，和<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>為非同步。</span><span class="sxs-lookup"><span data-stu-id="93d5a-388"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="93d5a-389">作業會加入到事件佇列<xref:System.Windows.Threading.Dispatcher>位於指定<xref:System.Windows.Threading.DispatcherPriority>。</span><span class="sxs-lookup"><span data-stu-id="93d5a-389">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="93d5a-390"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是同步作業。因此，控制項不會傳回至呼叫的物件直到回呼傳回之後。</span><span class="sxs-lookup"><span data-stu-id="93d5a-390"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, method As Delegate, arg As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method, System::Object ^ arg);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="93d5a-391">相對於 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件佇列中其他暫止的作業，會先叫用指定的方法。</span><span class="sxs-lookup"><span data-stu-id="93d5a-391">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="method"><span data-ttu-id="93d5a-392">採用一個引數的方法委派，此委派會推入至 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件佇列。</span><span class="sxs-lookup"><span data-stu-id="93d5a-392">A delegate to a method that takes one argument, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="arg"><span data-ttu-id="93d5a-393">做為引數傳遞至指定方法的物件。</span><span class="sxs-lookup"><span data-stu-id="93d5a-393">An object to pass as an argument to the given method.</span></span></param>
        <summary><span data-ttu-id="93d5a-394">在 <see cref="T:System.Windows.Threading.Dispatcher" /> 關聯的執行緒上使用指定優先權和指定引數以同步方式執行指定的委派。</span><span class="sxs-lookup"><span data-stu-id="93d5a-394">Executes the specified delegate at the specified priority with the specified argument synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="93d5a-395">來自所叫用的委派的傳回值，或者如果委派沒有任何傳回值，則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="93d5a-395">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93d5a-396">`Arg` 可以是`null`如果不需要引數</span><span class="sxs-lookup"><span data-stu-id="93d5a-396">`Arg` can be `null` if an argument is not needed</span></span>  
  
 <span data-ttu-id="93d5a-397">在[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]，建立的執行緒<xref:System.Windows.Threading.DispatcherObject>可以存取該物件。</span><span class="sxs-lookup"><span data-stu-id="93d5a-397">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="93d5a-398">例如，會開始從主要 UI 執行緒背景執行緒無法更新的內容<xref:System.Windows.Controls.Button>UI 執行緒上所建立。</span><span class="sxs-lookup"><span data-stu-id="93d5a-398">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="93d5a-399">為了讓背景執行緒存取的內容屬性將<xref:System.Windows.Controls.Button>，背景執行緒必須委派工作給<xref:System.Windows.Threading.Dispatcher>與 UI 執行緒相關聯。</span><span class="sxs-lookup"><span data-stu-id="93d5a-399">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="93d5a-400">這會透過使用<xref:System.Windows.Threading.Dispatcher.Invoke%2A>或<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>。</span><span class="sxs-lookup"><span data-stu-id="93d5a-400">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="93d5a-401"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是同步方法，和<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>為非同步。</span><span class="sxs-lookup"><span data-stu-id="93d5a-401"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="93d5a-402">作業會加入到事件佇列<xref:System.Windows.Threading.Dispatcher>位於指定<xref:System.Windows.Threading.DispatcherPriority>。</span><span class="sxs-lookup"><span data-stu-id="93d5a-402">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="93d5a-403"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是同步作業。因此，控制項不會傳回至呼叫的物件直到回呼傳回之後。</span><span class="sxs-lookup"><span data-stu-id="93d5a-403"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="93d5a-404"><paramref name="priority" /> 等於 <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />。</span><span class="sxs-lookup"><span data-stu-id="93d5a-404"><paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <span data-ttu-id="93d5a-405"><paramref name="priority" /> 不是有效的優先權。</span><span class="sxs-lookup"><span data-stu-id="93d5a-405"><paramref name="priority" /> is not a valid priority.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="93d5a-406"><paramref name="method" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="93d5a-406"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, TimeSpan timeout, Delegate method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.TimeSpan timeout, class System.Delegate method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, timeout As TimeSpan, method As Delegate) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, TimeSpan timeout, Delegate ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="method" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="93d5a-407">相對於 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件佇列中其他暫止的作業，會先叫用指定的方法。</span><span class="sxs-lookup"><span data-stu-id="93d5a-407">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="timeout"><span data-ttu-id="93d5a-408">等待直到作業完成的最長時間。</span><span class="sxs-lookup"><span data-stu-id="93d5a-408">The maximum time to wait for the operation to finish.</span></span></param>
        <param name="method"><span data-ttu-id="93d5a-409">未採用任何引數的方法委派，此委派會推入至 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件佇列。</span><span class="sxs-lookup"><span data-stu-id="93d5a-409">The delegate to a method that takes no arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <summary><span data-ttu-id="93d5a-410">在建立 <see cref="T:System.Windows.Threading.Dispatcher" /> 的執行緒上使用指定優先權和指定逾時值以同步方式執行指定的委派。</span><span class="sxs-lookup"><span data-stu-id="93d5a-410">Executes the specified delegate synchronously at the specified priority and with the specified time-out value on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> was created.</span></span></summary>
        <returns><span data-ttu-id="93d5a-411">來自所叫用的委派的傳回值，或者如果委派沒有任何傳回值，則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="93d5a-411">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93d5a-412">在[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]，建立的執行緒<xref:System.Windows.Threading.DispatcherObject>可以存取該物件。</span><span class="sxs-lookup"><span data-stu-id="93d5a-412">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="93d5a-413">例如，會開始從主要 UI 執行緒背景執行緒無法更新的內容<xref:System.Windows.Controls.Button>UI 執行緒上所建立。</span><span class="sxs-lookup"><span data-stu-id="93d5a-413">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="93d5a-414">為了讓背景執行緒存取的內容屬性將<xref:System.Windows.Controls.Button>，背景執行緒必須委派工作給<xref:System.Windows.Threading.Dispatcher>與 UI 執行緒相關聯。</span><span class="sxs-lookup"><span data-stu-id="93d5a-414">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="93d5a-415">這會透過使用<xref:System.Windows.Threading.Dispatcher.Invoke%2A>或<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>。</span><span class="sxs-lookup"><span data-stu-id="93d5a-415">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="93d5a-416"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是同步方法，和<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>為非同步。</span><span class="sxs-lookup"><span data-stu-id="93d5a-416"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="93d5a-417">作業會加入到事件佇列<xref:System.Windows.Threading.Dispatcher>位於指定<xref:System.Windows.Threading.DispatcherPriority>。</span><span class="sxs-lookup"><span data-stu-id="93d5a-417">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="93d5a-418"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是同步作業。因此，控制項不會傳回至呼叫的物件直到回呼傳回之後。</span><span class="sxs-lookup"><span data-stu-id="93d5a-418"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (Action callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invoke(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken,System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke(Action ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken, TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="93d5a-419">要透過發送器叫用的委派。</span><span class="sxs-lookup"><span data-stu-id="93d5a-419">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="93d5a-420">優先權，會決定以何種順序叫用指定的回呼，相對於 <see cref="T:System.Windows.Threading.Dispatcher" /> 中其他擱置中的作業。</span><span class="sxs-lookup"><span data-stu-id="93d5a-420">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="93d5a-421">表示是否要取消動作的物件。</span><span class="sxs-lookup"><span data-stu-id="93d5a-421">An object that indicates whether to cancel the action.</span></span></param>
        <param name="timeout"><span data-ttu-id="93d5a-422">等待作業開始的最短時間。</span><span class="sxs-lookup"><span data-stu-id="93d5a-422">The minimum amount of time to wait for the operation to start.</span></span></param>
        <summary><span data-ttu-id="93d5a-423">在與 <see cref="T:System.Action" /> 相關聯的執行緒上使用指定優先權同步執行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</span><span class="sxs-lookup"><span data-stu-id="93d5a-423">Executes the specified <see cref="T:System.Action" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, TimeSpan timeout, System.Windows.Threading.DispatcherPriority priority, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(class System.Delegate method, valuetype System.TimeSpan timeout, valuetype System.Windows.Threading.DispatcherPriority priority, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.TimeSpan,System.Windows.Threading.DispatcherPriority,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, timeout As TimeSpan, priority As DispatcherPriority, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, TimeSpan timeout, System::Windows::Threading::DispatcherPriority priority, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="93d5a-424">接受 <c>args</c> 中指定的參數之方法的委派，它會被推入至 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件佇列。</span><span class="sxs-lookup"><span data-stu-id="93d5a-424">A delegate to a method that takes parameters specified in <c>args</c>, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="timeout"><span data-ttu-id="93d5a-425">等待作業完成的最長時間。</span><span class="sxs-lookup"><span data-stu-id="93d5a-425">The maximum amount of time to wait for the operation to complete.</span></span></param>
        <param name="priority"><span data-ttu-id="93d5a-426">相對於 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件佇列中其他暫止的作業，會先叫用指定的方法。</span><span class="sxs-lookup"><span data-stu-id="93d5a-426">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="args"><span data-ttu-id="93d5a-427">做為引數傳遞至指定方法的物件陣列。</span><span class="sxs-lookup"><span data-stu-id="93d5a-427">An array of objects to pass as arguments to the given method.</span></span> <span data-ttu-id="93d5a-428">可以是 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="93d5a-428">Can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="93d5a-429">在與 <see cref="T:System.Windows.Threading.Dispatcher" /> 有關聯的執行緒上，在指定的時間範圍內依據指定優先順序，使用指定之引數同步地執行指定的委派。</span><span class="sxs-lookup"><span data-stu-id="93d5a-429">Executes the specified delegate within the designated time span at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="93d5a-430">來自所叫用的委派的傳回值，或者如果委派沒有任何傳回值，則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="93d5a-430">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93d5a-431">在[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]，建立的執行緒<xref:System.Windows.Threading.DispatcherObject>可以存取該物件。</span><span class="sxs-lookup"><span data-stu-id="93d5a-431">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="93d5a-432">例如，會開始從主要 UI 執行緒背景執行緒無法更新的內容<xref:System.Windows.Controls.Button>UI 執行緒上所建立。</span><span class="sxs-lookup"><span data-stu-id="93d5a-432">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="93d5a-433">為了讓背景執行緒存取的內容屬性將<xref:System.Windows.Controls.Button>，背景執行緒必須委派工作給<xref:System.Windows.Threading.Dispatcher>與 UI 執行緒相關聯。</span><span class="sxs-lookup"><span data-stu-id="93d5a-433">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="93d5a-434">這會透過使用<xref:System.Windows.Threading.Dispatcher.Invoke%2A>或<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>。</span><span class="sxs-lookup"><span data-stu-id="93d5a-434">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="93d5a-435"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是同步方法，和<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>為非同步。</span><span class="sxs-lookup"><span data-stu-id="93d5a-435"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="93d5a-436">作業會加入到事件佇列<xref:System.Windows.Threading.Dispatcher>位於指定<xref:System.Windows.Threading.DispatcherPriority>。</span><span class="sxs-lookup"><span data-stu-id="93d5a-436">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="93d5a-437"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是同步作業。因此，控制項不會傳回至呼叫的物件直到回呼傳回之後。</span><span class="sxs-lookup"><span data-stu-id="93d5a-437"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method, object arg, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, method As Delegate, arg As Object, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method, System::Object ^ arg, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="93d5a-438">相對於 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件佇列中其他暫止的作業，會先叫用指定的方法。</span><span class="sxs-lookup"><span data-stu-id="93d5a-438">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="method"><span data-ttu-id="93d5a-439">採用多個引數的方法委派，此委派會推入至 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件佇列。</span><span class="sxs-lookup"><span data-stu-id="93d5a-439">A delegate to a method that takes multiple arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="arg"><span data-ttu-id="93d5a-440">做為引數傳遞至指定方法的物件。</span><span class="sxs-lookup"><span data-stu-id="93d5a-440">An object to pass as an argument to the given method.</span></span></param>
        <param name="args"><span data-ttu-id="93d5a-441">做為引數傳遞至指定方法的物件陣列。</span><span class="sxs-lookup"><span data-stu-id="93d5a-441">An array of objects to pass as arguments to the given method.</span></span></param>
        <summary><span data-ttu-id="93d5a-442">在 <see cref="T:System.Windows.Threading.Dispatcher" /> 關聯的執行緒上使用指定優先權和指定引數以同步方式執行指定的委派。</span><span class="sxs-lookup"><span data-stu-id="93d5a-442">Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="93d5a-443">來自所叫用的委派的傳回值，或者如果委派沒有任何傳回值，則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="93d5a-443">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93d5a-444">`Arg` 可以是`null`如果不需要引數</span><span class="sxs-lookup"><span data-stu-id="93d5a-444">`Arg` can be `null` if an argument is not needed</span></span>  
  
 <span data-ttu-id="93d5a-445">在[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]，建立的執行緒<xref:System.Windows.Threading.DispatcherObject>可以存取該物件。</span><span class="sxs-lookup"><span data-stu-id="93d5a-445">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="93d5a-446">例如，會開始從主要 UI 執行緒背景執行緒無法更新的內容<xref:System.Windows.Controls.Button>UI 執行緒上所建立。</span><span class="sxs-lookup"><span data-stu-id="93d5a-446">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="93d5a-447">為了讓背景執行緒存取的內容屬性將<xref:System.Windows.Controls.Button>，背景執行緒必須委派工作給<xref:System.Windows.Threading.Dispatcher>與 UI 執行緒相關聯。</span><span class="sxs-lookup"><span data-stu-id="93d5a-447">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="93d5a-448">這會透過使用<xref:System.Windows.Threading.Dispatcher.Invoke%2A>或<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>。</span><span class="sxs-lookup"><span data-stu-id="93d5a-448">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="93d5a-449"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是同步方法，和<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>為非同步。</span><span class="sxs-lookup"><span data-stu-id="93d5a-449"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="93d5a-450">作業會加入到事件佇列<xref:System.Windows.Threading.Dispatcher>位於指定<xref:System.Windows.Threading.DispatcherPriority>。</span><span class="sxs-lookup"><span data-stu-id="93d5a-450">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="93d5a-451"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是同步作業。因此，控制項不會傳回至呼叫的物件直到回呼傳回之後。</span><span class="sxs-lookup"><span data-stu-id="93d5a-451"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="93d5a-452"><paramref name="priority" /> 等於 <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />。</span><span class="sxs-lookup"><span data-stu-id="93d5a-452"><paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <span data-ttu-id="93d5a-453"><paramref name="priority" /> 不是有效的優先權。</span><span class="sxs-lookup"><span data-stu-id="93d5a-453"><paramref name="priority" /> is not a valid priority.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="93d5a-454"><paramref name="method" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="93d5a-454"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, TimeSpan timeout, Delegate method, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.TimeSpan timeout, class System.Delegate method, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, timeout As TimeSpan, method As Delegate, arg As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, TimeSpan timeout, Delegate ^ method, System::Object ^ arg);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="93d5a-455">相對於 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件佇列中其他暫止的作業，會先叫用指定的方法。</span><span class="sxs-lookup"><span data-stu-id="93d5a-455">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="timeout"><span data-ttu-id="93d5a-456">等待直到作業完成的最長時間。</span><span class="sxs-lookup"><span data-stu-id="93d5a-456">The maximum time to wait for the operation to finish.</span></span></param>
        <param name="method"><span data-ttu-id="93d5a-457">採用多個引數的方法委派，此委派會推入至 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件佇列。</span><span class="sxs-lookup"><span data-stu-id="93d5a-457">A delegate to a method that takes multiple arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="arg"><span data-ttu-id="93d5a-458">做為引數傳遞至指定方法的物件。</span><span class="sxs-lookup"><span data-stu-id="93d5a-458">An object to pass as an argument to the given method.</span></span> <span data-ttu-id="93d5a-459">如果不需要引數，則這個可為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="93d5a-459">This can be <see langword="null" /> if no arguments are needed.</span></span></param>
        <summary><span data-ttu-id="93d5a-460">在 <see cref="T:System.Windows.Threading.Dispatcher" /> 關聯的執行緒上使用指定優先權和指定引數以同步方式執行指定的委派。</span><span class="sxs-lookup"><span data-stu-id="93d5a-460">Executes the specified delegate at the specified priority with the specified argument synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="93d5a-461">來自所叫用的委派的傳回值，或者如果委派沒有任何傳回值，則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="93d5a-461">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93d5a-462">`Arg` 可以是`null`如果不需要引數</span><span class="sxs-lookup"><span data-stu-id="93d5a-462">`Arg` can be `null` if an argument is not needed</span></span>  
  
 <span data-ttu-id="93d5a-463">在[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]，建立的執行緒<xref:System.Windows.Threading.DispatcherObject>可以存取該物件。</span><span class="sxs-lookup"><span data-stu-id="93d5a-463">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="93d5a-464">例如，會開始從主要 UI 執行緒背景執行緒無法更新的內容<xref:System.Windows.Controls.Button>UI 執行緒上所建立。</span><span class="sxs-lookup"><span data-stu-id="93d5a-464">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="93d5a-465">為了讓背景執行緒存取的內容屬性將<xref:System.Windows.Controls.Button>，背景執行緒必須委派工作給<xref:System.Windows.Threading.Dispatcher>與 UI 執行緒相關聯。</span><span class="sxs-lookup"><span data-stu-id="93d5a-465">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="93d5a-466">這會透過使用<xref:System.Windows.Threading.Dispatcher.Invoke%2A>或<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>。</span><span class="sxs-lookup"><span data-stu-id="93d5a-466">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="93d5a-467"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是同步方法，和<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>為非同步。</span><span class="sxs-lookup"><span data-stu-id="93d5a-467"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="93d5a-468">作業會加入到事件佇列<xref:System.Windows.Threading.Dispatcher>位於指定<xref:System.Windows.Threading.DispatcherPriority>。</span><span class="sxs-lookup"><span data-stu-id="93d5a-468">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="93d5a-469"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是同步作業。因此，控制項不會傳回至呼叫的物件直到回呼傳回之後。</span><span class="sxs-lookup"><span data-stu-id="93d5a-469"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="93d5a-470"><paramref name="priority" /> 等於 <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />。</span><span class="sxs-lookup"><span data-stu-id="93d5a-470"><paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <span data-ttu-id="93d5a-471"><paramref name="priority" /> 不是有效的優先權。</span><span class="sxs-lookup"><span data-stu-id="93d5a-471"><paramref name="priority" /> is not a valid priority.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="93d5a-472"><paramref name="method" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="93d5a-472"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, TimeSpan timeout, Delegate method, object arg, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.TimeSpan timeout, class System.Delegate method, object arg, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, timeout As TimeSpan, method As Delegate, arg As Object, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, TimeSpan timeout, Delegate ^ method, System::Object ^ arg, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="93d5a-473">相對於 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件佇列中其他暫止的作業，會先叫用指定的方法。</span><span class="sxs-lookup"><span data-stu-id="93d5a-473">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="timeout"><span data-ttu-id="93d5a-474">等待直到作業完成的最長時間。</span><span class="sxs-lookup"><span data-stu-id="93d5a-474">The maximum time to wait for the operation to finish.</span></span></param>
        <param name="method"><span data-ttu-id="93d5a-475">採用多個引數的方法委派，此委派會推入至 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件佇列。</span><span class="sxs-lookup"><span data-stu-id="93d5a-475">A delegate to a method that takes multiple arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="arg"><span data-ttu-id="93d5a-476">做為引數傳遞至指定方法的物件。</span><span class="sxs-lookup"><span data-stu-id="93d5a-476">An object to pass as an argument to the specified method.</span></span></param>
        <param name="args"><span data-ttu-id="93d5a-477">做為引數傳遞至指定方法的物件陣列。</span><span class="sxs-lookup"><span data-stu-id="93d5a-477">An array of objects to pass as arguments to the specified method.</span></span></param>
        <summary><span data-ttu-id="93d5a-478">在 <see cref="T:System.Windows.Threading.Dispatcher" /> 關聯的執行緒上使用指定優先權和指定引數以同步方式執行指定的委派。</span><span class="sxs-lookup"><span data-stu-id="93d5a-478">Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="93d5a-479">來自所叫用的委派的傳回值，或者如果委派沒有任何傳回值，則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="93d5a-479">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93d5a-480">`Arg` 可以是`null`如果不需要引數。</span><span class="sxs-lookup"><span data-stu-id="93d5a-480">`Arg` can be `null` if an argument is not needed.</span></span>  
  
 <span data-ttu-id="93d5a-481">在[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]，建立的執行緒<xref:System.Windows.Threading.DispatcherObject>可以存取該物件。</span><span class="sxs-lookup"><span data-stu-id="93d5a-481">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="93d5a-482">例如，會開始從主要 UI 執行緒背景執行緒無法更新的內容<xref:System.Windows.Controls.Button>UI 執行緒上所建立。</span><span class="sxs-lookup"><span data-stu-id="93d5a-482">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="93d5a-483">為了讓背景執行緒存取的內容屬性將<xref:System.Windows.Controls.Button>，背景執行緒必須委派工作給<xref:System.Windows.Threading.Dispatcher>與 UI 執行緒相關聯。</span><span class="sxs-lookup"><span data-stu-id="93d5a-483">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="93d5a-484">這會透過使用<xref:System.Windows.Threading.Dispatcher.Invoke%2A>或<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>。</span><span class="sxs-lookup"><span data-stu-id="93d5a-484">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="93d5a-485"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是同步方法，和<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>為非同步。</span><span class="sxs-lookup"><span data-stu-id="93d5a-485"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="93d5a-486">作業會加入到事件佇列<xref:System.Windows.Threading.Dispatcher>位於指定<xref:System.Windows.Threading.DispatcherPriority>。</span><span class="sxs-lookup"><span data-stu-id="93d5a-486">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="93d5a-487"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 是同步作業。因此，控制項不會傳回至呼叫的物件直到回呼傳回之後。</span><span class="sxs-lookup"><span data-stu-id="93d5a-487"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="93d5a-488"><paramref name="priority" /> 等於 <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />。</span><span class="sxs-lookup"><span data-stu-id="93d5a-488"><paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <span data-ttu-id="93d5a-489"><paramref name="priority" /> 不是有效的 <see cref="T:System.Windows.Threading.DispatcherPriority" />。</span><span class="sxs-lookup"><span data-stu-id="93d5a-489"><paramref name="priority" /> is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="93d5a-490"><paramref name="method" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="93d5a-490"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public TResult Invoke&lt;TResult&gt; (Func&lt;TResult&gt; callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TResult Invoke&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke(Of TResult) (callback As Func(Of TResult)) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; TResult Invoke(Func&lt;TResult&gt; ^ callback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="93d5a-491">指定的委派的傳回值型別。</span><span class="sxs-lookup"><span data-stu-id="93d5a-491">The return value type of the specified delegate.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="93d5a-492">要透過發送器叫用的委派。</span><span class="sxs-lookup"><span data-stu-id="93d5a-492">A delegate to invoke through the dispatcher.</span></span></param>
        <summary><span data-ttu-id="93d5a-493">在與 <see cref="T:System.Func`1" /> 相關聯的執行緒上，同步執行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</span><span class="sxs-lookup"><span data-stu-id="93d5a-493">Executes the specified <see cref="T:System.Func`1" /> synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93d5a-494">所傳回的值`callback`。</span><span class="sxs-lookup"><span data-stu-id="93d5a-494">The value returned by `callback`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public TResult Invoke&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TResult Invoke&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke(Of TResult) (callback As Func(Of TResult), priority As DispatcherPriority) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; TResult Invoke(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="93d5a-495">指定的委派的傳回值型別。</span><span class="sxs-lookup"><span data-stu-id="93d5a-495">The return value type of the specified delegate.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="93d5a-496">要透過發送器叫用的委派。</span><span class="sxs-lookup"><span data-stu-id="93d5a-496">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="93d5a-497">優先權，會決定以何種順序叫用指定的回呼，相對於 <see cref="T:System.Windows.Threading.Dispatcher" /> 中其他擱置中的作業。</span><span class="sxs-lookup"><span data-stu-id="93d5a-497">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <summary><span data-ttu-id="93d5a-498">在與 <see cref="T:System.Func`1" /> 相關聯的執行緒上使用指定優先權同步執行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</span><span class="sxs-lookup"><span data-stu-id="93d5a-498">Executes the specified <see cref="T:System.Func`1" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93d5a-499">所傳回的值`callback`。</span><span class="sxs-lookup"><span data-stu-id="93d5a-499">The value returned by `callback`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public TResult Invoke&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TResult Invoke&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; TResult Invoke(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="93d5a-500">指定的委派的傳回值型別。</span><span class="sxs-lookup"><span data-stu-id="93d5a-500">The return value type of the specified delegate.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="93d5a-501">要透過發送器叫用的委派。</span><span class="sxs-lookup"><span data-stu-id="93d5a-501">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="93d5a-502">優先權，會決定以何種順序叫用指定的回呼，相對於 <see cref="T:System.Windows.Threading.Dispatcher" /> 中其他擱置中的作業。</span><span class="sxs-lookup"><span data-stu-id="93d5a-502">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="93d5a-503">表示是否要取消作業的物件。</span><span class="sxs-lookup"><span data-stu-id="93d5a-503">An object that indicates whether to cancel the operation.</span></span></param>
        <summary><span data-ttu-id="93d5a-504">在與 <see cref="T:System.Func`1" /> 相關聯的執行緒上使用指定優先權同步執行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</span><span class="sxs-lookup"><span data-stu-id="93d5a-504">Executes the specified <see cref="T:System.Func`1" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93d5a-505">所傳回的值`callback`。</span><span class="sxs-lookup"><span data-stu-id="93d5a-505">The value returned by `callback`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public TResult Invoke&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TResult Invoke&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken,System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; TResult Invoke(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken, TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="93d5a-506">指定的委派的傳回值型別。</span><span class="sxs-lookup"><span data-stu-id="93d5a-506">The return value type of the specified delegate.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="93d5a-507">要透過發送器叫用的委派。</span><span class="sxs-lookup"><span data-stu-id="93d5a-507">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="93d5a-508">優先權，會決定以何種順序叫用指定的回呼，相對於 <see cref="T:System.Windows.Threading.Dispatcher" /> 中其他擱置中的作業。</span><span class="sxs-lookup"><span data-stu-id="93d5a-508">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="93d5a-509">表示是否要取消作業的物件。</span><span class="sxs-lookup"><span data-stu-id="93d5a-509">An object that indicates whether to cancel the operation.</span></span></param>
        <param name="timeout"><span data-ttu-id="93d5a-510">等待作業開始的最短時間。</span><span class="sxs-lookup"><span data-stu-id="93d5a-510">The minimum amount of time to wait for the operation to start.</span></span></param>
        <summary><span data-ttu-id="93d5a-511">在與 <see cref="T:System.Func`1" /> 相關聯的執行緒上使用指定優先權同步執行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</span><span class="sxs-lookup"><span data-stu-id="93d5a-511">Executes the specified <see cref="T:System.Func`1" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93d5a-512">所傳回的值`callback`。</span><span class="sxs-lookup"><span data-stu-id="93d5a-512">The value returned by `callback`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="InvokeAsync">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="93d5a-513">在與 <see cref="T:System.Windows.Threading.Dispatcher" /> 關聯的執行緒上，以非同步方式執行指定的委派。</span><span class="sxs-lookup"><span data-stu-id="93d5a-513">Executes the specified delegate asynchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation InvokeAsync (Action callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation InvokeAsync(class System.Action callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeAsync (callback As Action) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ InvokeAsync(Action ^ callback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="93d5a-514">要透過發送器叫用的委派。</span><span class="sxs-lookup"><span data-stu-id="93d5a-514">A delegate to invoke through the dispatcher.</span></span></param>
        <summary><span data-ttu-id="93d5a-515">在與 <see cref="T:System.Action" /> 相關聯的執行緒上，以非同步方式執行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</span><span class="sxs-lookup"><span data-stu-id="93d5a-515">Executes the specified <see cref="T:System.Action" /> asynchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="93d5a-516">物件，此物件是在呼叫 <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)" /> 之後立即傳回的，可用來與在事件佇列中暫止執行的委派進行互動。</span><span class="sxs-lookup"><span data-stu-id="93d5a-516">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation InvokeAsync (Action callback, System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation InvokeAsync(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeAsync (callback As Action, priority As DispatcherPriority) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ InvokeAsync(Action ^ callback, System::Windows::Threading::DispatcherPriority priority);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="93d5a-517">要透過發送器叫用的委派。</span><span class="sxs-lookup"><span data-stu-id="93d5a-517">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="93d5a-518">優先權，會決定以何種順序叫用指定的回呼，相對於 <see cref="T:System.Windows.Threading.Dispatcher" /> 中其他擱置中的作業。</span><span class="sxs-lookup"><span data-stu-id="93d5a-518">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <summary><span data-ttu-id="93d5a-519">在與 <see cref="T:System.Action" /> 相關聯的執行緒上使用指定優先權以非同步方式執行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</span><span class="sxs-lookup"><span data-stu-id="93d5a-519">Executes the specified <see cref="T:System.Action" /> asynchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="93d5a-520">物件，此物件是在呼叫 <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)" /> 之後立即傳回的，可用來與在事件佇列中暫止執行的委派進行互動。</span><span class="sxs-lookup"><span data-stu-id="93d5a-520">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation InvokeAsync (Action callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation InvokeAsync(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ InvokeAsync(Action ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="93d5a-521">要透過發送器叫用的委派。</span><span class="sxs-lookup"><span data-stu-id="93d5a-521">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="93d5a-522">優先權，會決定以何種順序叫用指定的回呼，相對於 <see cref="T:System.Windows.Threading.Dispatcher" /> 中其他擱置中的作業。</span><span class="sxs-lookup"><span data-stu-id="93d5a-522">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="93d5a-523">表示是否要取消動作的物件。</span><span class="sxs-lookup"><span data-stu-id="93d5a-523">An object that indicates whether to cancel the action.</span></span></param>
        <summary><span data-ttu-id="93d5a-524">在與 <see cref="T:System.Action" /> 相關聯的執行緒上使用指定優先權以非同步方式執行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</span><span class="sxs-lookup"><span data-stu-id="93d5a-524">Executes the specified <see cref="T:System.Action" /> asynchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="93d5a-525">物件，此物件是在呼叫 <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" /> 之後立即傳回的，可用來與在事件佇列中暫止執行的委派進行互動。</span><span class="sxs-lookup"><span data-stu-id="93d5a-525">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation&lt;TResult&gt; InvokeAsync&lt;TResult&gt; (Func&lt;TResult&gt; callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation`1&lt;!!TResult&gt; InvokeAsync&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeAsync(Of TResult) (callback As Func(Of TResult)) As DispatcherOperation(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Windows::Threading::DispatcherOperation&lt;TResult&gt; ^ InvokeAsync(Func&lt;TResult&gt; ^ callback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="93d5a-526">指定的委派的傳回值型別。</span><span class="sxs-lookup"><span data-stu-id="93d5a-526">The return value type of the specified delegate.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="93d5a-527">要透過發送器叫用的委派。</span><span class="sxs-lookup"><span data-stu-id="93d5a-527">A delegate to invoke through the dispatcher.</span></span></param>
        <summary><span data-ttu-id="93d5a-528">在與 <see cref="T:System.Func`1" /> 相關聯的執行緒上，以非同步方式執行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</span><span class="sxs-lookup"><span data-stu-id="93d5a-528">Executes the specified <see cref="T:System.Func`1" /> asynchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="93d5a-529">物件，此物件是在呼叫 <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})" /> 之後立即傳回的，可用來與在事件佇列中暫止執行的委派進行互動。</span><span class="sxs-lookup"><span data-stu-id="93d5a-529">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation&lt;TResult&gt; InvokeAsync&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation`1&lt;!!TResult&gt; InvokeAsync&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeAsync(Of TResult) (callback As Func(Of TResult), priority As DispatcherPriority) As DispatcherOperation(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Windows::Threading::DispatcherOperation&lt;TResult&gt; ^ InvokeAsync(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="93d5a-530">指定的委派的傳回值型別。</span><span class="sxs-lookup"><span data-stu-id="93d5a-530">The return value type of the specified delegate.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="93d5a-531">要透過發送器叫用的委派。</span><span class="sxs-lookup"><span data-stu-id="93d5a-531">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="93d5a-532">優先權，會決定以何種順序叫用指定的回呼，相對於 <see cref="T:System.Windows.Threading.Dispatcher" /> 中其他擱置中的作業。</span><span class="sxs-lookup"><span data-stu-id="93d5a-532">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <summary><span data-ttu-id="93d5a-533">在與 <see cref="T:System.Func`1" /> 相關聯的執行緒上使用指定優先權以非同步方式執行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</span><span class="sxs-lookup"><span data-stu-id="93d5a-533">Executes the specified <see cref="T:System.Func`1" /> asynchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="93d5a-534">物件，此物件是在呼叫 <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)" /> 之後立即傳回的，可用來與在事件佇列中暫止執行的委派進行互動。</span><span class="sxs-lookup"><span data-stu-id="93d5a-534">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation&lt;TResult&gt; InvokeAsync&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation`1&lt;!!TResult&gt; InvokeAsync&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Windows::Threading::DispatcherOperation&lt;TResult&gt; ^ InvokeAsync(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="93d5a-535">指定的委派的傳回值型別。</span><span class="sxs-lookup"><span data-stu-id="93d5a-535">The return value type of the specified delegate.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="93d5a-536">要透過發送器叫用的委派。</span><span class="sxs-lookup"><span data-stu-id="93d5a-536">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="93d5a-537">優先權，會決定以何種順序叫用指定的回呼，相對於 <see cref="T:System.Windows.Threading.Dispatcher" /> 中其他擱置中的作業。</span><span class="sxs-lookup"><span data-stu-id="93d5a-537">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="93d5a-538">表示是否要取消作業的物件。</span><span class="sxs-lookup"><span data-stu-id="93d5a-538">An object that indicates whether to cancel the operation.</span></span></param>
        <summary><span data-ttu-id="93d5a-539">在與 <see cref="T:System.Func`1" /> 相關聯的執行緒上使用指定優先權同步執行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</span><span class="sxs-lookup"><span data-stu-id="93d5a-539">Executes the specified <see cref="T:System.Func`1" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="93d5a-540">物件，此物件是在呼叫 <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" /> 之後立即傳回的，可用來與在事件佇列中暫止執行的委派進行互動。</span><span class="sxs-lookup"><span data-stu-id="93d5a-540">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeShutdown">
      <MemberSignature Language="C#" Value="public void InvokeShutdown ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeShutdown() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeShutdown" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeShutdown ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeShutdown();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="93d5a-541">以同步方式初始化 <see cref="T:System.Windows.Threading.Dispatcher" /> 的關閉程序。</span><span class="sxs-lookup"><span data-stu-id="93d5a-541">Initiates the shutdown process of the <see cref="T:System.Windows.Threading.Dispatcher" /> synchronously.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93d5a-542"><xref:System.Windows.Threading.Dispatcher.InvokeShutdown%2A> 要求不受限制的 UI 權限。</span><span class="sxs-lookup"><span data-stu-id="93d5a-542"><xref:System.Windows.Threading.Dispatcher.InvokeShutdown%2A> demands unrestricted UI Permissions.</span></span>  
  
 <span data-ttu-id="93d5a-543">當<xref:System.Windows.Threading.Dispatcher>開始關閉，<xref:System.Windows.Threading.Dispatcher.ShutdownStarted>就會引發事件和<xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A>設`true`。</span><span class="sxs-lookup"><span data-stu-id="93d5a-543">When the <xref:System.Windows.Threading.Dispatcher> starts to shut down, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="93d5a-544"><xref:System.Windows.Threading.Dispatcher>便不會關閉完全直到事件佇列會回溯。</span><span class="sxs-lookup"><span data-stu-id="93d5a-544">The <xref:System.Windows.Threading.Dispatcher> does not shut down completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="93d5a-545">當發送器完成關閉，<xref:System.Windows.Threading.Dispatcher.ShutdownFinished>就會引發事件和<xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A>屬性設定為`true`。</span><span class="sxs-lookup"><span data-stu-id="93d5a-545">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="93d5a-546">關機程序開始時，所有暫止的工作佇列中的項目都被中止。</span><span class="sxs-lookup"><span data-stu-id="93d5a-546">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="93d5a-547">關閉發送器。</span><span class="sxs-lookup"><span data-stu-id="93d5a-547">for shutting down the dispatcher.</span></span>  <span data-ttu-id="93d5a-548">相關聯的列舉型別：  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span><span class="sxs-lookup"><span data-stu-id="93d5a-548">Associated enumerations:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="PushFrame">
      <MemberSignature Language="C#" Value="public static void PushFrame (System.Windows.Threading.DispatcherFrame frame);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void PushFrame(class System.Windows.Threading.DispatcherFrame frame) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.PushFrame(System.Windows.Threading.DispatcherFrame)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub PushFrame (frame As DispatcherFrame)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void PushFrame(System::Windows::Threading::DispatcherFrame ^ frame);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="frame" Type="System.Windows.Threading.DispatcherFrame" />
      </Parameters>
      <Docs>
        <param name="frame"><span data-ttu-id="93d5a-549">要處理的發送器框架。</span><span class="sxs-lookup"><span data-stu-id="93d5a-549">The frame for the dispatcher to process.</span></span></param>
        <summary><span data-ttu-id="93d5a-550">會進入執行迴圈。</span><span class="sxs-lookup"><span data-stu-id="93d5a-550">Enters an execute loop.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93d5a-551">A<xref:System.Windows.Threading.DispatcherFrame>代表處理暫止的工作項目迴圈。</span><span class="sxs-lookup"><span data-stu-id="93d5a-551">A <xref:System.Windows.Threading.DispatcherFrame> represents a loop that processes pending work items.</span></span>  
  
 <span data-ttu-id="93d5a-552">發送器處理迴圈中的工作項目佇列。</span><span class="sxs-lookup"><span data-stu-id="93d5a-552">The Dispatcher processes the work item queue in a loop.</span></span>  <span data-ttu-id="93d5a-553">迴圈被指在範圍內。</span><span class="sxs-lookup"><span data-stu-id="93d5a-553">The loop is referred to as a frame.</span></span>  <span data-ttu-id="93d5a-554">初始迴圈通常由應用程式呼叫而起始<xref:System.Windows.Threading.Dispatcher.Run%2A>。</span><span class="sxs-lookup"><span data-stu-id="93d5a-554">The initial loop is typically initiated by the application by calling <xref:System.Windows.Threading.Dispatcher.Run%2A>.</span></span>  
  
 <span data-ttu-id="93d5a-555"><xref:System.Windows.Threading.Dispatcher.PushFrame%2A> 進入迴圈，參數代表`frame`。</span><span class="sxs-lookup"><span data-stu-id="93d5a-555"><xref:System.Windows.Threading.Dispatcher.PushFrame%2A> enters a loop represented by the parameter `frame`.</span></span>  <span data-ttu-id="93d5a-556">在迴圈的每個反覆項目<xref:System.Windows.Threading.Dispatcher>會檢查<xref:System.Windows.Threading.DispatcherFrame.Continue%2A>屬性<xref:System.Windows.Threading.DispatcherFrame>類別以決定迴圈是否應該繼續，或如果應該停止。</span><span class="sxs-lookup"><span data-stu-id="93d5a-556">At each iteration of the loop, the <xref:System.Windows.Threading.Dispatcher> will check the <xref:System.Windows.Threading.DispatcherFrame.Continue%2A> property on the <xref:System.Windows.Threading.DispatcherFrame> class to determine whether the loop should continue or if it should stop.</span></span>  
  
 <span data-ttu-id="93d5a-557"><xref:System.Windows.Threading.DispatcherFrame> 允許<xref:System.Windows.Threading.DispatcherFrame.Continue%2A>屬性明確設定，而且它會遵守<xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A>屬性<xref:System.Windows.Threading.Dispatcher>。</span><span class="sxs-lookup"><span data-stu-id="93d5a-557"><xref:System.Windows.Threading.DispatcherFrame> allows for the <xref:System.Windows.Threading.DispatcherFrame.Continue%2A> property to be set explicitly and it respects the <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> property on the <xref:System.Windows.Threading.Dispatcher>.</span></span>  <span data-ttu-id="93d5a-558">這表示當<xref:System.Windows.Threading.Dispatcher>關閉啟動，使用預設的框架<xref:System.Windows.Threading.DispatcherFrame>實作將會結束，可讓所有巢狀的畫面格結束。</span><span class="sxs-lookup"><span data-stu-id="93d5a-558">This means when the <xref:System.Windows.Threading.Dispatcher> starts to shut down, frames that use the default <xref:System.Windows.Threading.DispatcherFrame> implementation will exit, which enables all nested frames to exit.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="93d5a-559">下列範例示範如何使用<xref:System.Windows.Threading.DispatcherFrame>來達到類似的結果為[!INCLUDE[TLA#tla_winforms](~/includes/tlasharptla-winforms-md.md)]<xref:System.Windows.Forms.Application.DoEvents%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="93d5a-559">The following example shows how to use a <xref:System.Windows.Threading.DispatcherFrame> to achieve similar results as the [!INCLUDE[TLA#tla_winforms](~/includes/tlasharptla-winforms-md.md)] <xref:System.Windows.Forms.Application.DoEvents%2A> method.</span></span>  
  
 [!code-csharp[dispatchersnippets#DispatcherDispatcherFrameDoEvents](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherSnippets/CSharp/Window1.xaml.cs#dispatcherdispatcherframedoevents)]
 [!code-vb[dispatchersnippets#DispatcherDispatcherFrameDoEvents](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherSnippets/visualbasic/window1.xaml.vb#dispatcherdispatcherframedoevents)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="93d5a-560"><paramref name="frame" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="93d5a-560"><paramref name="frame" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="93d5a-561"><see cref="P:System.Windows.Threading.Dispatcher.HasShutdownFinished" /> 為 <see langword="true" /></span><span class="sxs-lookup"><span data-stu-id="93d5a-561"><see cref="P:System.Windows.Threading.Dispatcher.HasShutdownFinished" /> is <see langword="true" /></span></span>  
  
 <span data-ttu-id="93d5a-562">-或-</span><span class="sxs-lookup"><span data-stu-id="93d5a-562">-or-</span></span>  
  
 <span data-ttu-id="93d5a-563"><paramref name="frame" /> 是在不同的 <see cref="T:System.Windows.Threading.Dispatcher" /> 上執行。</span><span class="sxs-lookup"><span data-stu-id="93d5a-563"><paramref name="frame" /> is running on a different <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span>  
  
 <span data-ttu-id="93d5a-564">-或-</span><span class="sxs-lookup"><span data-stu-id="93d5a-564">-or-</span></span>  
  
 <span data-ttu-id="93d5a-565">已經停用發送器處理。</span><span class="sxs-lookup"><span data-stu-id="93d5a-565">Dispatcher processing has been disabled.</span></span></exception>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="93d5a-566">用於推入執行畫面格。</span><span class="sxs-lookup"><span data-stu-id="93d5a-566">for pushing an execution frame.</span></span>  <span data-ttu-id="93d5a-567">相關聯的列舉型別：  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span><span class="sxs-lookup"><span data-stu-id="93d5a-567">Associated enumerations:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span></span></permission>
        <altmember cref="M:System.Windows.Threading.Dispatcher.ExitAllFrames" />
      </Docs>
    </Member>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public static void Run ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Run() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Run" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Run ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Run();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="93d5a-568">推入 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件佇列上的主執行框架。</span><span class="sxs-lookup"><span data-stu-id="93d5a-568">Pushes the main execution frame on the event queue of the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93d5a-569"><xref:System.Windows.Threading.Dispatcher>處理迴圈中的事件佇列。</span><span class="sxs-lookup"><span data-stu-id="93d5a-569">The <xref:System.Windows.Threading.Dispatcher> processes the event queue in a loop.</span></span>  <span data-ttu-id="93d5a-570">迴圈被指在範圍內。</span><span class="sxs-lookup"><span data-stu-id="93d5a-570">The loop is referred to as a frame.</span></span>  <span data-ttu-id="93d5a-571">初始迴圈通常由應用程式呼叫而起始<xref:System.Windows.Threading.Dispatcher.Run%2A>。</span><span class="sxs-lookup"><span data-stu-id="93d5a-571">The initial loop is typically initiated by the application by calling <xref:System.Windows.Threading.Dispatcher.Run%2A>.</span></span>  
  
 <span data-ttu-id="93d5a-572">主要執行畫面格將會繼續直到<xref:System.Windows.Threading.Dispatcher>已關閉。</span><span class="sxs-lookup"><span data-stu-id="93d5a-572">The main execution frame will continue until the <xref:System.Windows.Threading.Dispatcher> is shutdown.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShutdownFinished">
      <MemberSignature Language="C#" Value="public event EventHandler ShutdownFinished;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ShutdownFinished" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.Dispatcher.ShutdownFinished" />
      <MemberSignature Language="VB.NET" Value="Public Event ShutdownFinished As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ShutdownFinished;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="93d5a-573">發生於 <see cref="T:System.Windows.Threading.Dispatcher" /> 完成關閉時。</span><span class="sxs-lookup"><span data-stu-id="93d5a-573">Occurs when the <see cref="T:System.Windows.Threading.Dispatcher" /> finishes shutting down.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93d5a-574">當關機程序的<xref:System.Windows.Threading.Dispatcher>已啟動，<xref:System.Windows.Threading.Dispatcher.ShutdownStarted>就會引發事件和<xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A>設`true`。</span><span class="sxs-lookup"><span data-stu-id="93d5a-574">When the shutdown process of a <xref:System.Windows.Threading.Dispatcher> is started, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="93d5a-575"><xref:System.Windows.Threading.Dispatcher>不完全會關閉，直到事件佇列會回溯。</span><span class="sxs-lookup"><span data-stu-id="93d5a-575">The <xref:System.Windows.Threading.Dispatcher> does not shutdown completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="93d5a-576">當發送器完成關閉，<xref:System.Windows.Threading.Dispatcher.ShutdownFinished>就會引發事件和<xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A>屬性設定為`true`。</span><span class="sxs-lookup"><span data-stu-id="93d5a-576">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="93d5a-577">關機程序開始時，所有暫止的工作佇列中的項目都被中止。</span><span class="sxs-lookup"><span data-stu-id="93d5a-577">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Threading.Dispatcher.HasShutdownFinished" />
        <altmember cref="P:System.Windows.Threading.Dispatcher.HasShutdownStarted" />
        <altmember cref="M:System.Windows.Threading.Dispatcher.BeginInvokeShutdown(System.Windows.Threading.DispatcherPriority)" />
        <altmember cref="M:System.Windows.Threading.Dispatcher.InvokeShutdown" />
      </Docs>
    </Member>
    <Member MemberName="ShutdownStarted">
      <MemberSignature Language="C#" Value="public event EventHandler ShutdownStarted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ShutdownStarted" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.Dispatcher.ShutdownStarted" />
      <MemberSignature Language="VB.NET" Value="Public Event ShutdownStarted As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ShutdownStarted;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="93d5a-578">發生於 <see cref="T:System.Windows.Threading.Dispatcher" /> 開始關閉時。</span><span class="sxs-lookup"><span data-stu-id="93d5a-578">Occurs when the <see cref="T:System.Windows.Threading.Dispatcher" /> begins to shut down.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93d5a-579">當關機程序的<xref:System.Windows.Threading.Dispatcher>已啟動，<xref:System.Windows.Threading.Dispatcher.ShutdownStarted>就會引發事件和<xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A>設`true`。</span><span class="sxs-lookup"><span data-stu-id="93d5a-579">When the shutdown process of a <xref:System.Windows.Threading.Dispatcher> is started, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="93d5a-580"><xref:System.Windows.Threading.Dispatcher>不完全會關閉，直到事件佇列會回溯。</span><span class="sxs-lookup"><span data-stu-id="93d5a-580">The <xref:System.Windows.Threading.Dispatcher> does not shutdown completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="93d5a-581">當發送器完成關閉，<xref:System.Windows.Threading.Dispatcher.ShutdownFinished>就會引發事件和<xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A>屬性設定為`true`。</span><span class="sxs-lookup"><span data-stu-id="93d5a-581">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="93d5a-582">關機程序開始時，所有暫止的工作佇列中的項目都被中止。</span><span class="sxs-lookup"><span data-stu-id="93d5a-582">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Threading.Dispatcher.HasShutdownStarted" />
        <altmember cref="E:System.Windows.Threading.Dispatcher.ShutdownFinished" />
        <altmember cref="M:System.Windows.Threading.Dispatcher.BeginInvokeShutdown(System.Windows.Threading.DispatcherPriority)" />
        <altmember cref="M:System.Windows.Threading.Dispatcher.InvokeShutdown" />
      </Docs>
    </Member>
    <Member MemberName="Thread">
      <MemberSignature Language="C#" Value="public System.Threading.Thread Thread { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.Thread Thread" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.Thread" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Thread As Thread" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::Thread ^ Thread { System::Threading::Thread ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Thread</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="93d5a-583">取得與這個 <see cref="T:System.Windows.Threading.Dispatcher" /> 關聯的執行緒。</span><span class="sxs-lookup"><span data-stu-id="93d5a-583">Gets the thread this <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <value><span data-ttu-id="93d5a-584">執行緒。</span><span class="sxs-lookup"><span data-stu-id="93d5a-584">The thread.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnhandledException">
      <MemberSignature Language="C#" Value="public event System.Windows.Threading.DispatcherUnhandledExceptionEventHandler UnhandledException;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Threading.DispatcherUnhandledExceptionEventHandler UnhandledException" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.Dispatcher.UnhandledException" />
      <MemberSignature Language="VB.NET" Value="Public Event UnhandledException As DispatcherUnhandledExceptionEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Threading::DispatcherUnhandledExceptionEventHandler ^ UnhandledException;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherUnhandledExceptionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="93d5a-585">發生於當擲回執行緒例外狀況且透過 <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> 或 <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> 執行委派期間無法攔截時。</span><span class="sxs-lookup"><span data-stu-id="93d5a-585">Occurs when a thread exception is thrown and uncaught during execution of a delegate by way of <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> or <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93d5a-586">藉由委派的執行期間擲回的例外狀況時，會引發這個事件<xref:System.Windows.Threading.Dispatcher.Invoke%2A>或<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>是無法攔截。</span><span class="sxs-lookup"><span data-stu-id="93d5a-586">This event is raised when an exception that was thrown during execution of a delegate by way of <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is uncaught.</span></span>  
  
 <span data-ttu-id="93d5a-587">處理常式可以標示例外狀況為已處理，這可以防止內部例外狀況處理常式呼叫。</span><span class="sxs-lookup"><span data-stu-id="93d5a-587">A handler can mark the exception as handled, which will prevent the internal exception handler from being called.</span></span>  
  
 <span data-ttu-id="93d5a-588">必須小心避免建立次要的例外狀況，並攔截，就會發生寫入此事件的事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="93d5a-588">Event handlers for this event must be written with care to avoid creating secondary exceptions and to catch any that occur.</span></span> <span data-ttu-id="93d5a-589">建議您避免配置記憶體，或執行任何資源的處理常式中的大量作業。</span><span class="sxs-lookup"><span data-stu-id="93d5a-589">It is recommended to avoid allocating memory or doing any resource intensive operations in the handler.</span></span>  
  
 <span data-ttu-id="93d5a-590"><xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter>事件提供方法來引發<xref:System.Windows.Threading.Dispatcher.UnhandledException>事件。</span><span class="sxs-lookup"><span data-stu-id="93d5a-590">The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event provides a means to not raise the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event.</span></span>  <span data-ttu-id="93d5a-591"><xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter>第一次，就會引發事件，而且當<xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A>上<xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs>設`false`、<xref:System.Windows.Threading.Dispatcher.UnhandledException>不會引發事件。</span><span class="sxs-lookup"><span data-stu-id="93d5a-591">The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event is raised first, and If <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A> on the <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> is set to `false`, the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event will not be raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Threading.DispatcherUnhandledExceptionEventHandler" />
        <altmember cref="T:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="UnhandledExceptionFilter">
      <MemberSignature Language="C#" Value="public event System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler UnhandledExceptionFilter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler UnhandledExceptionFilter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event UnhandledExceptionFilter As DispatcherUnhandledExceptionFilterEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Threading::DispatcherUnhandledExceptionFilterEventHandler ^ UnhandledExceptionFilter;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>add: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>remove: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="93d5a-592">發生於在篩選階段擲回執行緒例外狀況且透過 <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> 或 <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> 執行委派期間無法攔截時。</span><span class="sxs-lookup"><span data-stu-id="93d5a-592">Occurs when a thread exception is thrown and uncaught during execution of a delegate by way of <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> or <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> when in the filter stage.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93d5a-593">藉由委派的執行期間引發的例外狀況的篩選器階段會引發這個事件<xref:System.Windows.Threading.Dispatcher.Invoke%2A>或<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>而且無法攔截。</span><span class="sxs-lookup"><span data-stu-id="93d5a-593">This event is raised during the filter stage for an exception that is raised during execution of a delegate by way of <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> and is uncaught.</span></span>  
  
 <span data-ttu-id="93d5a-594">無法在此時間點 （第一個可能發生例外狀況） 回溯呼叫堆疊。</span><span class="sxs-lookup"><span data-stu-id="93d5a-594">The call stack is not unwound at this point (first-chance exception).</span></span>  
  
 <span data-ttu-id="93d5a-595">必須小心避免建立次要的例外狀況，並攔截，就會發生寫入此事件的事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="93d5a-595">Event handlers for this event must be written with care to avoid creating secondary exceptions and to catch any that occur.</span></span>  <span data-ttu-id="93d5a-596">建議您避免配置記憶體，或執行任何資源的處理常式中的大量作業。</span><span class="sxs-lookup"><span data-stu-id="93d5a-596">It is recommended to avoid allocating memory or doing any resource intensive operations in the handler.</span></span>  
  
 <span data-ttu-id="93d5a-597"><xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter>事件提供方法來引發<xref:System.Windows.Threading.Dispatcher.UnhandledException>事件。</span><span class="sxs-lookup"><span data-stu-id="93d5a-597">The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event provides a means to not raise the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event.</span></span>  <span data-ttu-id="93d5a-598"><xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter>第一次，就會引發事件，而且當<xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A>上<xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs>設`false`、<xref:System.Windows.Threading.Dispatcher.UnhandledException>不會引發事件。</span><span class="sxs-lookup"><span data-stu-id="93d5a-598">The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event is raised first, and If <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A> on the <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> is set to `false`, the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event will not be raised.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="93d5a-599">新增或移除這個事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="93d5a-599">for adding or removing a handler for this event.</span></span>  <span data-ttu-id="93d5a-600">相關聯的列舉型別：  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span><span class="sxs-lookup"><span data-stu-id="93d5a-600">Associated enumerations:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span></span></permission>
        <altmember cref="T:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler" />
        <altmember cref="T:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="ValidatePriority">
      <MemberSignature Language="C#" Value="public static void ValidatePriority (System.Windows.Threading.DispatcherPriority priority, string parameterName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ValidatePriority(valuetype System.Windows.Threading.DispatcherPriority priority, string parameterName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.ValidatePriority(System.Windows.Threading.DispatcherPriority,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ValidatePriority (priority As DispatcherPriority, parameterName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ValidatePriority(System::Windows::Threading::DispatcherPriority priority, System::String ^ parameterName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="parameterName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="93d5a-601">要檢查的優先權。</span><span class="sxs-lookup"><span data-stu-id="93d5a-601">The priority to check.</span></span></param>
        <param name="parameterName"><span data-ttu-id="93d5a-602">如果優先權無效，所發生之例外狀況將傳回的字串。</span><span class="sxs-lookup"><span data-stu-id="93d5a-602">A string that will be returned by the exception that occurs if the priority is invalid.</span></span></param>
        <summary><span data-ttu-id="93d5a-603">判斷指定的 <see cref="T:System.Windows.Threading.DispatcherPriority" /> 是否為有效的優先權。</span><span class="sxs-lookup"><span data-stu-id="93d5a-603">Determines whether the specified <see cref="T:System.Windows.Threading.DispatcherPriority" /> is a valid priority.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <span data-ttu-id="93d5a-604"><paramref name="priority" /> 不是有效的 <see cref="T:System.Windows.Threading.DispatcherPriority" />。</span><span class="sxs-lookup"><span data-stu-id="93d5a-604"><paramref name="priority" /> is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="VerifyAccess">
      <MemberSignature Language="C#" Value="public void VerifyAccess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void VerifyAccess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.VerifyAccess" />
      <MemberSignature Language="VB.NET" Value="Public Sub VerifyAccess ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void VerifyAccess();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="93d5a-605">判斷呼叫的執行是否可以存取這個 <see cref="T:System.Windows.Threading.Dispatcher" />。</span><span class="sxs-lookup"><span data-stu-id="93d5a-605">Determines whether the calling thread has access to this <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93d5a-606">只有執行緒<xref:System.Windows.Threading.Dispatcher>建立在可以存取<xref:System.Windows.Threading.Dispatcher>。</span><span class="sxs-lookup"><span data-stu-id="93d5a-606">Only the thread the <xref:System.Windows.Threading.Dispatcher> is created on may access the <xref:System.Windows.Threading.Dispatcher>.</span></span>  
  
 <span data-ttu-id="93d5a-607">這個方法是公用的。因此，任何執行緒可以檢查以查看是否有存取權<xref:System.Windows.Threading.Dispatcher>。</span><span class="sxs-lookup"><span data-stu-id="93d5a-607">This method is public; therefore, any thread can check to see whether it has access to the <xref:System.Windows.Threading.Dispatcher>.</span></span>  
  
 <span data-ttu-id="93d5a-608">之間的差異<xref:System.Windows.Threading.Dispatcher.CheckAccess%2A>和<xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A>是<xref:System.Windows.Threading.Dispatcher.CheckAccess%2A>傳回布林值，如果呼叫的執行緒沒有存取權<xref:System.Windows.Threading.Dispatcher>和<xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A>擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="93d5a-608">The difference between <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> and <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> is <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> returns a Boolean if the calling thread does not have access to the <xref:System.Windows.Threading.Dispatcher> and <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> throws an exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="93d5a-609">下列範例會使用<xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A>判斷執行緒是否有存取權的執行緒，<xref:System.Windows.Controls.Button>上建立。</span><span class="sxs-lookup"><span data-stu-id="93d5a-609">The following example uses <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> to determine whether a thread has access to the thread that a <xref:System.Windows.Controls.Button> was created on.</span></span>  <span data-ttu-id="93d5a-610">此方法會採用物件做為引數轉型成<xref:System.Windows.Controls.Button>。</span><span class="sxs-lookup"><span data-stu-id="93d5a-610">The method takes an object as an argument, which is cast to a <xref:System.Windows.Controls.Button>.</span></span>  <span data-ttu-id="93d5a-611"><xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A>方法<xref:System.Windows.Threading.Dispatcher>的<xref:System.Windows.Controls.Button>呼叫以驗證的存取權的執行緒。</span><span class="sxs-lookup"><span data-stu-id="93d5a-611">The <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> method on the <xref:System.Windows.Threading.Dispatcher> of the <xref:System.Windows.Controls.Button> is called to verify access to the thread.</span></span>  
  
 <span data-ttu-id="93d5a-612">如果呼叫執行緒能夠存取<xref:System.Windows.Threading.Dispatcher>、<xref:System.Windows.Controls.Button>藉由只存取的成員會更新<xref:System.Windows.Controls.Button>。</span><span class="sxs-lookup"><span data-stu-id="93d5a-612">If the calling thread has access to the <xref:System.Windows.Threading.Dispatcher>, the <xref:System.Windows.Controls.Button> is updated by just accessing the members of the <xref:System.Windows.Controls.Button>.</span></span>  
  
 <span data-ttu-id="93d5a-613">如果呼叫的執行緒沒有存取權，<xref:System.InvalidOperationException>就會擲回。</span><span class="sxs-lookup"><span data-stu-id="93d5a-613">If the calling thread does not have access, an <xref:System.InvalidOperationException> is thrown.</span></span>  <span data-ttu-id="93d5a-614">此範例中攔截例外狀況，並將推送委派，它會接受<xref:System.Windows.Controls.Button>做為引數，拖曳至<xref:System.Windows.Threading.Dispatcher>的<xref:System.Windows.Controls.Button>。</span><span class="sxs-lookup"><span data-stu-id="93d5a-614">This example catches the exception and pushes a delegate, which accepts a <xref:System.Windows.Controls.Button> as an argument, onto the <xref:System.Windows.Threading.Dispatcher> of the <xref:System.Windows.Controls.Button>.</span></span>  <span data-ttu-id="93d5a-615">這<xref:System.Windows.Threading.Dispatcher>將執行更新作業<xref:System.Windows.Controls.Button>。</span><span class="sxs-lookup"><span data-stu-id="93d5a-615">This <xref:System.Windows.Threading.Dispatcher> will do the work of updating the <xref:System.Windows.Controls.Button>.</span></span>  
  
 [!code-csharp[DispatcherAccessSample#DispatcherAccessVerifyAccess](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherAccessSample/CSharp/Window1.xaml.cs#dispatcheraccessverifyaccess)]
 [!code-vb[DispatcherAccessSample#DispatcherAccessVerifyAccess](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherAccessSample/visualbasic/window1.xaml.vb#dispatcheraccessverifyaccess)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="93d5a-616">呼叫執行緒無法存取這個 <see cref="T:System.Windows.Threading.Dispatcher" />。</span><span class="sxs-lookup"><span data-stu-id="93d5a-616">The calling thread does not have access to this <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></exception>
        <altmember cref="M:System.Windows.Threading.Dispatcher.CheckAccess" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Yield">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="93d5a-617">建立 awaitable 物件，這個物件會以非同步方式讓出控制權給目前的發送器，並提供機會給發送器以處理其他事件。</span><span class="sxs-lookup"><span data-stu-id="93d5a-617">Creates an awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Yield">
      <MemberSignature Language="C#" Value="public static System.Windows.Threading.DispatcherPriorityAwaitable Yield ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Threading.DispatcherPriorityAwaitable Yield() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Yield" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Yield () As DispatcherPriorityAwaitable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Threading::DispatcherPriorityAwaitable Yield();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherPriorityAwaitable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="93d5a-618">建立 awaitable 物件，這個物件會以非同步方式讓出控制權給目前的發送器，並提供機會給發送器以處理其他事件。</span><span class="sxs-lookup"><span data-stu-id="93d5a-618">Creates an awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</span></span></summary>
        <returns><span data-ttu-id="93d5a-619">Awaitable 物件，會以非同步方式讓出控制權給目前的發送器，並提供機會給發送器以處理其他事件。</span><span class="sxs-lookup"><span data-stu-id="93d5a-619">An awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93d5a-620">這個方法可讓您可以暫時釋目前發送器的執行控制項，因此它可以執行其他工作，例如處理其他事件。</span><span class="sxs-lookup"><span data-stu-id="93d5a-620">This method provides a way for you to temporarily release execution control to the current dispatcher so it can do other work, such as process other events.</span></span> <span data-ttu-id="93d5a-621">使用`await`，或`Await`在 Visual Basic，對傳回值的運算子，將控制權傳回給目前的發送器。</span><span class="sxs-lookup"><span data-stu-id="93d5a-621">Use the `await`, or `Await` in Visual Basic, operator on the return value to return control to the current dispatcher.</span></span> <span data-ttu-id="93d5a-622">使用這個方法，如果想要讓您的應用程式有機會處理事件，而您的應用程式正在執行許多 UI 執行緒上的工作。</span><span class="sxs-lookup"><span data-stu-id="93d5a-622">Use this method if want to give your app a chance to process events while you app is doing a lot of work on the UI thread.</span></span> <span data-ttu-id="93d5a-623">例如，您可以使用這個方法在更新控制項的長時間執行迴圈。</span><span class="sxs-lookup"><span data-stu-id="93d5a-623">For example, you can use this method in a long-running loop that updates a control.</span></span>  
  
 <span data-ttu-id="93d5a-624">這個方法相當於呼叫<xref:System.Windows.Threading.Dispatcher.Yield%28System.Windows.Threading.DispatcherPriority%29>方法然後傳入<xref:System.Windows.Threading.DispatcherPriority.Background?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="93d5a-624">This method is equivalent to calling the <xref:System.Windows.Threading.Dispatcher.Yield%28System.Windows.Threading.DispatcherPriority%29> method and passing in <xref:System.Windows.Threading.DispatcherPriority.Background?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Yield">
      <MemberSignature Language="C#" Value="public static System.Windows.Threading.DispatcherPriorityAwaitable Yield (System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Threading.DispatcherPriorityAwaitable Yield(valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Yield(System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Yield (priority As DispatcherPriority) As DispatcherPriorityAwaitable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Threading::DispatcherPriorityAwaitable Yield(System::Windows::Threading::DispatcherPriority priority);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherPriorityAwaitable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="93d5a-625">做為排程接續依據的優先權。</span><span class="sxs-lookup"><span data-stu-id="93d5a-625">The priority at which to schedule the continuation.</span></span></param>
        <summary><span data-ttu-id="93d5a-626">建立 awaitable 物件，這個物件會以非同步方式讓出控制權給目前的發送器，並提供機會給發送器以處理其他事件。</span><span class="sxs-lookup"><span data-stu-id="93d5a-626">Creates an awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</span></span>  <span data-ttu-id="93d5a-627">在控制權回到等候此方法之結果的程式碼時進行的工作會以指定的優先權來排定。</span><span class="sxs-lookup"><span data-stu-id="93d5a-627">The work that occurs when control returns to the code awaiting the result of this method is scheduled with the specified priority.</span></span></summary>
        <returns><span data-ttu-id="93d5a-628">Awaitable 物件，會以非同步方式讓出控制權給目前的發送器，並提供機會給發送器以處理其他事件。</span><span class="sxs-lookup"><span data-stu-id="93d5a-628">An awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93d5a-629">這個方法可讓您可以暫時釋目前發送器的執行控制項，因此它可以執行其他工作，例如處理其他事件。</span><span class="sxs-lookup"><span data-stu-id="93d5a-629">This method provides a way for you to temporarily release execution control to the current dispatcher so it can do other work, such as process other events.</span></span> <span data-ttu-id="93d5a-630">使用`await`，或`Await`在 Visual Basic，對傳回值的運算子，將控制權傳回給目前的發送器。</span><span class="sxs-lookup"><span data-stu-id="93d5a-630">Use the `await`, or `Await` in Visual Basic, operator on the return value to return control to the current dispatcher.</span></span> <span data-ttu-id="93d5a-631">使用這個方法，如果想要讓您的應用程式有機會處理事件，而您的應用程式正在執行許多 UI 執行緒上的工作。</span><span class="sxs-lookup"><span data-stu-id="93d5a-631">Use this method if want to give your app a chance to process events while you app is doing a lot of work on the UI thread.</span></span> <span data-ttu-id="93d5a-632">例如，您可以使用這個方法在更新控制項的長時間執行迴圈。</span><span class="sxs-lookup"><span data-stu-id="93d5a-632">For example, you can use this method in a long-running loop that updates a control.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>